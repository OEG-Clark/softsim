{"home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.__init__": [[27, 34], ["videopose-j16-wild-eval_run.Visualization.set_param", "videopose-j16-wild-eval_run.Visualization.get_video_wh", "videopose-j16-wild-eval_run.Visualization.get_keypoints"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.set_param", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.get_video_wh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.get_keypoints"], ["    ", "def", "__init__", "(", "self", ",", "ckpt_path", ")", ":", "\n", "        ", "self", ".", "current_time", "=", "time0", "\n", "self", ".", "ckpt_path", "=", "ckpt_path", "\n", "self", ".", "root_trajectory", "=", "None", "\n", "self", ".", "set_param", "(", ")", "\n", "self", ".", "get_video_wh", "(", ")", "\n", "self", ".", "get_keypoints", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.redering": [[35, 45], ["videopose-j16-wild-eval_run.Visualization.get_prediction", "videopose-j16-wild-eval_run.Visualization.visalizatoin"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.get_prediction", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.visalizatoin"], ["", "def", "redering", "(", "self", ")", ":", "\n", "# poseaug result", "\n", "# architecture = '3,3,3,1,1' # add for custom", "\n", "        ", "architecture", "=", "args", ".", "architecture", "\n", "result", "=", "self", ".", "get_prediction", "(", "architecture", ",", "self", ".", "ckpt_path", ")", "\n", "\n", "anim_output", "=", "{", "\n", "'result'", ":", "result", ",", "\n", "}", "\n", "self", ".", "visalizatoin", "(", "anim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.get_video_wh": [[46, 53], ["cv2.VideoCapture", "cv2.VideoCapture.get", "cv2.VideoCapture.get", "int", "int", "videopose-j16-wild-eval_run.Visualization.update_time"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.update_time"], ["", "def", "get_video_wh", "(", "self", ")", ":", "\n", "        ", "vid", "=", "cv2", ".", "VideoCapture", "(", "args", ".", "viz_video_path", ")", "\n", "height", "=", "vid", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", "\n", "width", "=", "vid", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", "\n", "args", ".", "video_width", "=", "int", "(", "width", ")", "# cv2 read (height, width)", "\n", "args", ".", "video_height", "=", "int", "(", "height", ")", "\n", "self", ".", "update_time", "(", "'prepare video clip'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.set_param": [[55, 68], ["os.path.dirname", "os.path.basename", "tool.utils.mkd", "tool.utils.mkd", "list", "list", "list", "list", "os.path.basename.rfind", "args.architecture.replace", "int"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd"], ["", "def", "set_param", "(", "self", ")", ":", "\n", "        ", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "viz_video_path", ")", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "viz_video_path", ")", "\n", "self", ".", "video_name", "=", "basename", "[", ":", "basename", ".", "rfind", "(", "'.'", ")", "]", "\n", "self", ".", "viz_output_path", "=", "f'{dir_name}/{self.video_name}_{args.detector_2d}.mp4'", ".", "replace", "(", "\n", "'source_video'", ",", "args", ".", "architecture", ".", "replace", "(", "','", ",", "''", ")", "+", "'_scale2D_{:0>3d}'", ".", "format", "(", "int", "(", "args", ".", "pose2dscale", "*", "10", ")", ")", ")", "\n", "# prepare folder", "\n", "mkd", "(", "args", ".", "viz_video_path", ",", "get_parent", "=", "True", ")", "\n", "mkd", "(", "self", ".", "viz_output_path", ",", "get_parent", "=", "True", ")", "\n", "# init some property", "\n", "keypoints_symmetry", "=", "metadata", "[", "'keypoints_symmetry'", "]", "\n", "self", ".", "kps_left", ",", "self", ".", "kps_right", "=", "list", "(", "keypoints_symmetry", "[", "0", "]", ")", ",", "list", "(", "keypoints_symmetry", "[", "1", "]", ")", "\n", "self", ".", "joints_left", ",", "self", ".", "joints_right", "=", "list", "(", "[", "4", ",", "5", ",", "6", ",", "10", ",", "11", ",", "12", "]", ")", ",", "list", "(", "[", "1", ",", "2", ",", "3", ",", "13", ",", "14", ",", "15", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.update_time": [[69, 72], ["tool.utils.update_time", "print"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.update_time"], ["", "def", "update_time", "(", "self", ",", "task", ")", ":", "\n", "        ", "time_cost", ",", "self", ".", "current_time", "=", "update_time", "(", "self", ".", "current_time", ")", "\n", "print", "(", "'-------------- {} spends {:.2f} seconds'", ".", "format", "(", "task", ",", "time_cost", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.keypoint_square_padding": [[73, 90], ["keypoint.copy", "int", "int", "print"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "keypoint_square_padding", "(", "self", ",", "keypoint", ")", ":", "\n", "        ", "\"\"\"\n        square_padding\n        the same as take the longer one as width.\n        \"\"\"", "\n", "tmp_keypoint", "=", "keypoint", ".", "copy", "(", ")", "\n", "if", "args", ".", "video_width", ">", "args", ".", "video_height", ":", "# up down padding", "\n", "            ", "pad", "=", "int", "(", "(", "args", ".", "video_width", "-", "args", ".", "video_height", ")", "*", "0.5", ")", "\n", "tmp_keypoint", "[", ":", ",", ":", ",", "1", "]", "=", "tmp_keypoint", "[", ":", ",", ":", ",", "1", "]", "+", "pad", "\n", "args", ".", "video_height", "=", "args", ".", "video_width", "\n", "", "elif", "args", ".", "video_width", "<", "args", ".", "video_height", ":", "# left right padding", "\n", "            ", "pad", "=", "int", "(", "(", "args", ".", "video_height", "-", "args", ".", "video_width", ")", "*", "0.5", ")", "\n", "tmp_keypoint", "[", ":", ",", ":", ",", "0", "]", "=", "tmp_keypoint", "[", ":", ",", ":", ",", "0", "]", "+", "pad", "\n", "args", ".", "video_width", "=", "args", ".", "video_height", "\n", "", "else", ":", "\n", "            ", "print", "(", "'image are square, no need padding'", ")", "\n", "", "return", "tmp_keypoint", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.get_keypoints": [[92, 126], ["args.viz_video_path.replace().replace", "videopose-j16-wild-eval_run.Visualization.keypoint_square_padding", "common.camera.normalize_screen_coordinates", "videopose-j16-wild-eval_run.Visualization.update_time", "os.path.isfile", "tool.utils.get_detector_2d", "tool.utils.get_detector_2d.", "tool.utils.mkd", "np.array().astype", "print", "np.savez_compressed", "np.load", "videopose-j16-wild-eval_run.Visualization.keypoint_smoothing", "tool.utils.convert_AlphaOpenposeCoco_to_standard16Joint", "args.viz_video_path.replace", "videopose-j16-wild-eval_run.Visualization.keypoints.copy", "np.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.keypoint_square_padding", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.normalize_screen_coordinates", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.update_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.get_detector_2d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.keypoint_smoothing", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.convert_AlphaOpenposeCoco_to_standard16Joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "get_keypoints", "(", "self", ")", ":", "\n", "# 2D kpts loads or generate", "\n", "        ", "tmp_npz_path", "=", "args", ".", "viz_video_path", ".", "replace", "(", "'.mp4'", ",", "'_det2D.npz'", ")", ".", "replace", "(", "'source_video'", ",", "'det2D_'", "+", "args", ".", "detector_2d", ")", "\n", "args", ".", "input_npz", "=", "tmp_npz_path", "if", "os", ".", "path", ".", "isfile", "(", "tmp_npz_path", ")", "else", "None", "\n", "if", "not", "args", ".", "input_npz", ":", "\n", "# get detector for unlabeled video", "\n", "            ", "detector_2d", "=", "get_detector_2d", "(", "args", ".", "detector_2d", ")", "\n", "assert", "detector_2d", ",", "'detector_2d should be in ({alpha, hr, open}_pose)'", "\n", "# detect keypoints", "\n", "self", ".", "keypoints", "=", "detector_2d", "(", "args", ".", "viz_video_path", ")", "\n", "# save for next time use", "\n", "mkd", "(", "tmp_npz_path", ")", "\n", "kpts", "=", "np", ".", "array", "(", "self", ".", "keypoints", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "print", "(", "'kpts npz save in '", ",", "tmp_npz_path", ")", "\n", "np", ".", "savez_compressed", "(", "tmp_npz_path", ",", "kpts", "=", "kpts", ")", "\n", "", "else", ":", "\n", "# load keypoint", "\n", "            ", "npz", "=", "np", ".", "load", "(", "args", ".", "input_npz", ")", "\n", "self", ".", "keypoints", "=", "npz", "[", "'kpts'", "]", "# (N, 17, 2) - coco format", "\n", "\n", "", "if", "args", ".", "pose2d_smoothing", ":", "\n", "            ", "self", ".", "keypoints", "=", "self", ".", "keypoint_smoothing", "(", "self", ".", "keypoints", ")", "\n", "\n", "# convert to standard 16 joint", "\n", "", "if", "args", ".", "detector_2d", "==", "'alpha_pose'", ":", "# for coco format -> std 16 j", "\n", "            ", "self", ".", "keypoints", "=", "convert_AlphaOpenposeCoco_to_standard16Joint", "(", "\n", "self", ".", "keypoints", ".", "copy", "(", ")", ")", "# Nx16x2", "\n", "", "self", ".", "keypoints_imgunnorm", "=", "self", ".", "keypoint_square_padding", "(", "self", ".", "keypoints", ")", "\n", "# normlization keypoints", "\n", "self", ".", "keypoints_imgnorm", "=", "normalize_screen_coordinates", "(", "self", ".", "keypoints_imgunnorm", "[", "...", ",", ":", "2", "]", ",", "w", "=", "args", ".", "video_width", ",", "\n", "h", "=", "args", ".", "video_height", ")", "\n", "self", ".", "update_time", "(", "'load keypoint'", ")", "\n", "# analysis scale", "\n", "self", ".", "keypoints_imgnorm", "=", "self", ".", "keypoints_imgnorm", "*", "args", ".", "pose2dscale", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.keypoint_smoothing": [[127, 133], ["keypoints.copy", "scipy.signal.savgol_filter"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "keypoint_smoothing", "(", "self", ",", "keypoints", ")", ":", "\n", "        ", "x", "=", "keypoints", ".", "copy", "(", ")", "\n", "window_length", "=", "5", "\n", "polyorder", "=", "2", "\n", "out", "=", "scipy", ".", "signal", ".", "savgol_filter", "(", "x", ",", "window_length", ",", "polyorder", ",", "deriv", "=", "0", ",", "delta", "=", "1.0", ",", "axis", "=", "0", ",", "mode", "=", "'interp'", ",", "cval", "=", "0.0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.get_prediction": [[134, 144], ["videopose-j16-wild-eval_run.Visualization._get_model", "videopose-j16-wild-eval_run.Visualization._get_dataloader", "videopose-j16-wild-eval_run.Visualization._evaluate", "videopose-j16-wild-eval_run.Visualization._get_modelTraj", "videopose-j16-wild-eval_run.Visualization._get_dataloaderTraj", "videopose-j16-wild-eval_run.Visualization._evaluate"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._get_model", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._get_dataloader", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._evaluate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._get_modelTraj", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._get_dataloaderTraj", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._evaluate"], ["", "def", "get_prediction", "(", "self", ",", "architecture", ",", "ckpt_path", ")", ":", "\n", "        ", "model_pos", "=", "self", ".", "_get_model", "(", "architecture", ",", "ckpt_path", ")", "\n", "data_loader", "=", "self", ".", "_get_dataloader", "(", "model_pos", ")", "\n", "prediction", "=", "self", ".", "_evaluate", "(", "model_pos", ",", "data_loader", ")", "\n", "\n", "if", "args", ".", "add_trajectory", ":", "\n", "            ", "model_traj", "=", "self", ".", "_get_modelTraj", "(", "architecture", ",", "ckpt_path", ")", "\n", "data_loader", "=", "self", ".", "_get_dataloaderTraj", "(", "model_traj", ")", "\n", "self", ".", "root_trajectory", "=", "self", ".", "_evaluate", "(", "model_traj", ",", "data_loader", ")", "\n", "", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._get_model": [[145, 157], ["TemporalModel().cuda", "print", "torch.load", "TemporalModel().cuda.load_state_dict", "videopose-j16-wild-eval_run.Visualization.update_time", "int", "architecture.split", "TemporalModel"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.update_time"], ["", "def", "_get_model", "(", "self", ",", "architecture", ",", "ckpt_path", ")", ":", "\n", "        ", "from", "common", ".", "model", "import", "TemporalModel", "\n", "filter_widths", "=", "[", "int", "(", "x", ")", "for", "x", "in", "architecture", ".", "split", "(", "','", ")", "]", "\n", "model_pos", "=", "TemporalModel", "(", "16", ",", "2", ",", "16", ",", "filter_widths", "=", "filter_widths", ",", "causal", "=", "args", ".", "causal", ",", "dropout", "=", "args", ".", "dropout", ",", "\n", "channels", "=", "args", ".", "channels", ",", "\n", "dense", "=", "args", ".", "dense", ")", ".", "cuda", "(", ")", "\n", "# load trained model", "\n", "print", "(", "'Loading checkpoint'", ",", "ckpt_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "model_pos", ".", "load_state_dict", "(", "checkpoint", "[", "'model_pos'", "]", ")", "\n", "self", ".", "update_time", "(", "'load 3D model'", ")", "\n", "return", "model_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._get_modelTraj": [[158, 171], ["TemporalModel().cuda", "print", "torch.load", "TemporalModel().cuda.load_state_dict", "videopose-j16-wild-eval_run.Visualization.update_time", "int", "architecture.split", "TemporalModel"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.update_time"], ["", "def", "_get_modelTraj", "(", "self", ",", "architecture", ",", "ckpt_path", ")", ":", "\n", "        ", "from", "common", ".", "model", "import", "TemporalModel", "\n", "filter_widths", "=", "[", "int", "(", "x", ")", "for", "x", "in", "architecture", ".", "split", "(", "','", ")", "]", "\n", "model_traj", "=", "TemporalModel", "(", "16", ",", "2", ",", "1", ",", "filter_widths", "=", "filter_widths", ",", "causal", "=", "args", ".", "causal", ",", "dropout", "=", "args", ".", "dropout", ",", "\n", "channels", "=", "args", ".", "channels", ",", "\n", "dense", "=", "args", ".", "dense", ")", ".", "cuda", "(", ")", "\n", "\n", "# load trained model", "\n", "print", "(", "'Loading checkpoint'", ",", "ckpt_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "model_traj", ".", "load_state_dict", "(", "checkpoint", "[", "'model_traj'", "]", ")", "\n", "self", ".", "update_time", "(", "'load 3D Traj model'", ")", "\n", "return", "model_traj", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._get_dataloader": [[172, 182], ["model_pos.receptive_field", "common.generators.UnchunkedGenerator"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.receptive_field"], ["", "def", "_get_dataloader", "(", "self", ",", "model_pos", ")", ":", "\n", "#  Receptive field: 243 frames for args.arc [3, 3, 3, 3, 3]", "\n", "        ", "receptive_field", "=", "model_pos", ".", "receptive_field", "(", ")", "\n", "pad", "=", "(", "receptive_field", "-", "1", ")", "//", "2", "# Padding on each side", "\n", "causal_shift", "=", "0", "\n", "data_loader", "=", "UnchunkedGenerator", "(", "None", ",", "None", ",", "[", "self", ".", "keypoints_imgnorm", "]", ",", "\n", "pad", "=", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "args", ".", "test_time_augmentation", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._get_dataloaderTraj": [[183, 193], ["model_pos.receptive_field", "common.generators.UnchunkedGenerator"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.receptive_field"], ["", "def", "_get_dataloaderTraj", "(", "self", ",", "model_pos", ")", ":", "\n", "#  Receptive field: 243 frames for args.arc [3, 3, 3, 3, 3]", "\n", "        ", "receptive_field", "=", "model_pos", ".", "receptive_field", "(", ")", "\n", "pad", "=", "(", "receptive_field", "-", "1", ")", "//", "2", "# Padding on each side", "\n", "causal_shift", "=", "0", "\n", "data_loader", "=", "UnchunkedGenerator", "(", "None", ",", "None", ",", "[", "self", ".", "keypoints_imgnorm", "]", ",", "\n", "pad", "=", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "False", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._evaluate": [[194, 201], ["common.utils.evaluate", "videopose-j16-wild-eval_run.Visualization.update_time"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.evaluate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.update_time"], ["", "def", "_evaluate", "(", "self", ",", "model_pos", ",", "data_loader", ")", ":", "\n", "# get result", "\n", "        ", "prediction", "=", "evaluate", "(", "data_loader", ",", "model_pos", ",", "return_predictions", "=", "True", ",", "\n", "joints_leftright", "=", "(", "self", ".", "joints_left", ",", "self", ".", "joints_right", ")", ")", "\n", "\n", "self", ".", "update_time", "(", "'generate reconstruction 3D data'", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._postprocess": [[202, 213], ["np.array", "common.camera.camera_to_world", "np.min"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.camera_to_world"], ["", "def", "_postprocess", "(", "self", ",", "prediction", ")", ":", "\n", "        ", "if", "args", ".", "add_trajectory", ":", "\n", "# add root trajectory", "\n", "            ", "prediction", "-=", "prediction", "[", ":", ",", ":", "1", ",", ":", "]", "\n", "prediction", "+=", "self", ".", "root_trajectory", "\n", "# # camera rotation", "\n", "", "rot", "=", "np", ".", "array", "(", "[", "0.14070565", ",", "-", "0.15007018", ",", "-", "0.7552408", ",", "0.62232804", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "prediction_world", "=", "camera_to_world", "(", "prediction", ",", "R", "=", "rot", ",", "t", "=", "0", ")", "\n", "# We don't have the trajectory, but at least we can rebase the height", "\n", "prediction_world", "[", ":", ",", ":", ",", "2", "]", "-=", "np", ".", "min", "(", "prediction_world", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "return", "prediction_world", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.visalizatoin": [[214, 234], ["videopose-j16-wild-eval_run.Visualization.save_3d_prediction", "print", "render_animation", "videopose-j16-wild-eval_run.Visualization.update_time", "videopose-j16-wild-eval_run.Visualization._postprocess", "tool.utils.Skeleton", "np.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.save_3d_prediction", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.render_animation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.update_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._postprocess"], ["", "def", "visalizatoin", "(", "self", ",", "anim_output", ")", ":", "\n", "        ", "from", "common", ".", "visualization", "import", "render_animation", "\n", "# anim_output = {'Reconstruction': prediction}", "\n", "self", ".", "save_3d_prediction", "(", "anim_output", ")", "\n", "\n", "for", "tmp_key", "in", "anim_output", ":", "\n", "            ", "anim_output", "[", "tmp_key", "]", "=", "self", ".", "_postprocess", "(", "anim_output", "[", "tmp_key", "]", ")", "\n", "\n", "", "if", "args", ".", "pure_background", ":", "\n", "            ", "viz_video_path", "=", "None", "\n", "", "else", ":", "\n", "            ", "viz_video_path", "=", "args", ".", "viz_video_path", "\n", "\n", "", "print", "(", "'Rendering... save to {}'", ".", "format", "(", "self", ".", "viz_output_path", ")", ")", "\n", "render_animation", "(", "self", ".", "keypoints", ",", "anim_output", ",", "\n", "Skeleton", "(", ")", ",", "args", ".", "frame_rate", ",", "args", ".", "viz_bitrate", ",", "np", ".", "array", "(", "70.", ",", "dtype", "=", "np", ".", "float32", ")", ",", "self", ".", "viz_output_path", ",", "\n", "limit", "=", "args", ".", "viz_limit", ",", "downsample", "=", "args", ".", "viz_downsample", ",", "size", "=", "args", ".", "viz_size", ",", "\n", "input_video_path", "=", "viz_video_path", ",", "viewport", "=", "(", "args", ".", "video_width", ",", "args", ".", "video_height", ")", ",", "\n", "input_video_skip", "=", "args", ".", "viz_skip", ")", "\n", "self", ".", "update_time", "(", "'render animation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization.save_3d_prediction": [[235, 249], ["args.viz_video_path.replace().replace", "tool.utils.mkd", "open", "pickle.dump", "args.viz_video_path.replace"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd"], ["", "def", "save_3d_prediction", "(", "self", ",", "anim_output", ")", ":", "\n", "        ", "tmp_anim_output", "=", "{", "}", "\n", "for", "tmp_key", "in", "anim_output", ":", "\n", "            ", "prediction", "=", "anim_output", "[", "tmp_key", "]", "*", "1.", "\n", "if", "args", ".", "add_trajectory", ":", "\n", "# add root trajectory", "\n", "                ", "prediction", "-=", "prediction", "[", ":", ",", ":", "1", ",", ":", "]", "\n", "prediction", "+=", "self", ".", "root_trajectory", "\n", "", "tmp_anim_output", "[", "tmp_key", "]", "=", "prediction", "*", "1.", "\n", "# save 3D joint points", "\n", "", "tmp_pkl_path", "=", "args", ".", "viz_video_path", ".", "replace", "(", "'.mp4'", ",", "'_pred3D.pkl'", ")", ".", "replace", "(", "'source_video'", ",", "'pred3D_pose'", ")", "# rename to save", "\n", "mkd", "(", "tmp_pkl_path", ")", "\n", "with", "open", "(", "tmp_pkl_path", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "tmp_anim_output", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.demo.main": [[17, 110], ["len", "dataloader.ImageLoader().start", "print", "sys.stdout.flush", "dataloader.DetectionLoader().start", "dataloader.DetectionProcessor().start", "dataloader.Mscoco", "SPPE.src.main_fast_inference.InferenNet.cuda", "SPPE.src.main_fast_inference.InferenNet.eval", "dataloader.DataWriter().start", "ImageLoader().start.length", "tqdm.tqdm", "print", "DataWriter().start.running", "DataWriter().start.stop", "DataWriter().start.results", "pPose_nms.write_json", "os.path.exists", "os.makedirs", "open().readlines", "SPPE.src.main_fast_inference.InferenNet_fast", "SPPE.src.main_fast_inference.InferenNet", "range", "fn.getTime", "print", "print", "len", "os.walk", "IOError", "dataloader.ImageLoader", "dataloader.DetectionLoader", "dataloader.DetectionProcessor", "dataloader.DataWriter", "torch.no_grad", "DetectionProcessor().start.read", "fn.getTime", "runtime_profile[].append", "inps.size", "range", "torch.cat", "fn.getTime", "runtime_profile[].append", "hm.cpu.cpu", "DataWriter().start.save", "fn.getTime", "runtime_profile[].append", "tqdm.tqdm.set_description", "open", "DataWriter().start.save", "inps[].cuda", "SPPE.src.main_fast_inference.InferenNet.", "hm.cpu.append", "boxes.nelement", "im_name.split", "im_name.split", "numpy.mean", "numpy.mean", "numpy.mean", "min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.length", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.running", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.stop", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.write_json", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "inputpath", "=", "args", ".", "inputpath", "\n", "inputlist", "=", "args", ".", "inputlist", "\n", "mode", "=", "args", ".", "mode", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "outputpath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "outputpath", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "if", "len", "(", "inputlist", ")", ":", "\n", "        ", "im_names", "=", "open", "(", "inputlist", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "", "elif", "len", "(", "inputpath", ")", "and", "inputpath", "!=", "'/'", ":", "\n", "        ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "inputpath", ")", ":", "\n", "            ", "im_names", "=", "[", "f", "for", "f", "in", "files", "if", "'png'", "in", "f", "or", "'jpg'", "in", "f", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "IOError", "(", "'Error: must contain either --indir/--list'", ")", "\n", "\n", "# Load input images", "\n", "", "data_loader", "=", "ImageLoader", "(", "im_names", ",", "batchSize", "=", "args", ".", "detbatch", ",", "format", "=", "'yolo'", ")", ".", "start", "(", ")", "\n", "\n", "# Load detection loader", "\n", "print", "(", "'Loading YOLO model..'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "det_loader", "=", "DetectionLoader", "(", "data_loader", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "det_processor", "=", "DetectionProcessor", "(", "det_loader", ")", ".", "start", "(", ")", "\n", "\n", "# Load pose model", "\n", "pose_dataset", "=", "Mscoco", "(", ")", "\n", "if", "args", ".", "fast_inference", ":", "\n", "        ", "pose_model", "=", "InferenNet_fast", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "else", ":", "\n", "        ", "pose_model", "=", "InferenNet", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "pose_model", ".", "cuda", "(", ")", "\n", "pose_model", ".", "eval", "(", ")", "\n", "\n", "runtime_profile", "=", "{", "\n", "'dt'", ":", "[", "]", ",", "\n", "'pt'", ":", "[", "]", ",", "\n", "'pn'", ":", "[", "]", "\n", "}", "\n", "\n", "# Init data writer", "\n", "writer", "=", "DataWriter", "(", "args", ".", "save_video", ")", ".", "start", "(", ")", "\n", "\n", "data_len", "=", "data_loader", ".", "length", "(", ")", "\n", "im_names_desc", "=", "tqdm", "(", "range", "(", "data_len", ")", ")", "\n", "\n", "batchSize", "=", "args", ".", "posebatch", "\n", "for", "i", "in", "im_names_desc", ":", "\n", "        ", "start_time", "=", "getTime", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "inps", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "pt1", ",", "pt2", ")", "=", "det_processor", ".", "read", "(", ")", "\n", "if", "boxes", "is", "None", "or", "boxes", ".", "nelement", "(", ")", "==", "0", ":", "\n", "                ", "writer", ".", "save", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "continue", "\n", "\n", "", "ckpt_time", ",", "det_time", "=", "getTime", "(", "start_time", ")", "\n", "runtime_profile", "[", "'dt'", "]", ".", "append", "(", "det_time", ")", "\n", "# Pose Estimation", "\n", "\n", "datalen", "=", "inps", ".", "size", "(", "0", ")", "\n", "leftover", "=", "0", "\n", "if", "(", "datalen", ")", "%", "batchSize", ":", "\n", "                ", "leftover", "=", "1", "\n", "", "num_batches", "=", "datalen", "//", "batchSize", "+", "leftover", "\n", "hm", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "inps_j", "=", "inps", "[", "j", "*", "batchSize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "batchSize", ",", "datalen", ")", "]", ".", "cuda", "(", ")", "\n", "hm_j", "=", "pose_model", "(", "inps_j", ")", "\n", "hm", ".", "append", "(", "hm_j", ")", "\n", "", "hm", "=", "torch", ".", "cat", "(", "hm", ")", "\n", "ckpt_time", ",", "pose_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pt'", "]", ".", "append", "(", "pose_time", ")", "\n", "hm", "=", "hm", ".", "cpu", "(", ")", "\n", "writer", ".", "save", "(", "boxes", ",", "scores", ",", "hm", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "ckpt_time", ",", "post_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pn'", "]", ".", "append", "(", "post_time", ")", "\n", "\n", "", "if", "args", ".", "profile", ":", "\n", "# TQDM", "\n", "            ", "im_names_desc", ".", "set_description", "(", "\n", "'det time: {dt:.3f} | pose time: {pt:.2f} | post processing: {pn:.4f}'", ".", "format", "(", "\n", "dt", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'dt'", "]", ")", ",", "pt", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'pt'", "]", ")", ",", "pn", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'pn'", "]", ")", ")", "\n", ")", "\n", "\n", "", "", "print", "(", "'===========================> Finish Model Running.'", ")", "\n", "if", "(", "args", ".", "save_img", "or", "args", ".", "save_video", ")", "and", "not", "args", ".", "vis_fast", ":", "\n", "        ", "print", "(", "'===========================> Rendering remaining images in the queue...'", ")", "\n", "print", "(", "'===========================> If this step takes too long, you can enable the --vis_fast flag to use fast rendering (real-time).'", ")", "\n", "", "while", "writer", ".", "running", "(", ")", ":", "\n", "        ", "pass", "\n", "", "writer", ".", "stop", "(", ")", "\n", "final_result", "=", "writer", ".", "results", "(", ")", "\n", "write_json", "(", "final_result", ",", "args", ".", "outputpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.Skeleton.parents": [[42, 45], ["numpy.array"], "methods", ["None"], ["    ", "def", "parents", "(", "self", ")", ":", "\n", "# return np.array([-1, 0, 1, 2, 0, 4, 5, 0, 7, 8, 9, 8, 11, 12, 8, 14, 15])", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "8", ",", "10", ",", "11", ",", "8", ",", "13", ",", "14", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.Skeleton.joints_right": [[48, 51], ["None"], "methods", ["None"], ["", "def", "joints_right", "(", "self", ")", ":", "\n", "# return [1, 2, 3, 9, 10]", "\n", "        ", "return", "[", "1", ",", "2", ",", "3", ",", "13", ",", "14", ",", "15", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.read_video": [[20, 39], ["cv2.VideoCapture", "cv2.VideoCapture.read", "print", "sys.stdout.flush", "cv2.cvtColor", "numpy.array", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read"], ["def", "read_video", "(", "filename", ",", "fps", "=", "None", ",", "skip", "=", "0", ",", "limit", "=", "-", "1", ")", ":", "\n", "    ", "stream", "=", "cv2", ".", "VideoCapture", "(", "filename", ")", "\n", "\n", "i", "=", "0", "\n", "while", "True", ":", "\n", "        ", "grabbed", ",", "frame", "=", "stream", ".", "read", "(", ")", "\n", "# if the `grabbed` boolean is `False`, then we have", "\n", "# reached the end of the video file", "\n", "if", "not", "grabbed", ":", "\n", "            ", "print", "(", "'===========================> This video get '", "+", "str", "(", "i", ")", "+", "' frames in total.'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "break", "\n", "\n", "", "i", "+=", "1", "\n", "if", "i", ">", "skip", ":", "\n", "            ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "yield", "np", ".", "array", "(", "frame", ")", "\n", "", "if", "i", "==", "limit", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.qrot": [[54, 69], ["torch.cross", "torch.cross", "len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "qrot", "(", "q", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    Rotate vector(s) v about the rotation described by \u56db\u5143\u6570quaternion(s) q.\n    Expects a tensor of shape (*, 4) for q and a tensor of shape (*, 3) for v,\n    where * denotes any number of dimensions.\n    Returns a tensor of shape (*, 3).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "v", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "q", ".", "shape", "[", ":", "-", "1", "]", "==", "v", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "qvec", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "uv", "=", "torch", ".", "cross", "(", "qvec", ",", "v", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "uuv", "=", "torch", ".", "cross", "(", "qvec", ",", "uv", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "return", "(", "v", "+", "2", "*", "(", "q", "[", "...", ",", ":", "1", "]", "*", "uv", "+", "uuv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.camera_to_world_bynumpy": [[70, 77], ["torch.from_numpy", "torch.from_numpy", "out.numpy", "numpy.tile().astype", "X.astype", "visualization_copy.qrot", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot"], ["", "def", "camera_to_world_bynumpy", "(", "X", ",", "R", ",", "t", ")", ":", "\n", "    ", "tmp1", "=", "torch", ".", "from_numpy", "(", "np", ".", "tile", "(", "R", ",", "(", "*", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "tmp2", "=", "torch", ".", "from_numpy", "(", "X", ".", "astype", "(", "'float32'", ")", ")", "\n", "# tmp3 = torch.from_numpy(t.astype('float32'))", "\n", "# return wrap(qrot, np.tile(R, (*X.shape[:-1], 1)), X) + t", "\n", "out", "=", "qrot", "(", "tmp1", ",", "tmp2", ")", "+", "t", "\n", "return", "out", ".", "numpy", "(", ")", "\n", "####", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.ckpt_time": [[79, 86], ["time.time", "print", "time.time", "time.time", "float", "time.time", "float"], "function", ["None"], ["", "def", "ckpt_time", "(", "ckpt", "=", "None", ",", "display", "=", "0", ",", "desc", "=", "''", ")", ":", "\n", "    ", "if", "not", "ckpt", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "display", ":", "\n", "            ", "print", "(", "desc", "+", "' consume time {:0.4f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ")", ")", "\n", "", "return", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ",", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.set_equal_aspect": [[88, 104], ["numpy.array().max", "zip", "ax.plot", "numpy.array", "[].flatten", "[].flatten", "[].flatten", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min"], "function", ["None"], ["", "", "def", "set_equal_aspect", "(", "ax", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    Create white cubic bounding box to make sure that 3d axis is in equal aspect.\n    :param ax: 3D axis\n    :param data: shape of(frames, 3), generated from BVH using convert_bvh2dataset.py\n    \"\"\"", "\n", "X", ",", "Y", ",", "Z", "=", "data", "[", "...", ",", "0", "]", ",", "data", "[", "...", ",", "1", "]", ",", "data", "[", "...", ",", "2", "]", "\n", "\n", "# Create cubic bounding box to simulate equal aspect ratio", "\n", "max_range", "=", "np", ".", "array", "(", "[", "X", ".", "max", "(", ")", "-", "X", ".", "min", "(", ")", ",", "Y", ".", "max", "(", ")", "-", "Y", ".", "min", "(", ")", ",", "Z", ".", "max", "(", ")", "-", "Z", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "\n", "Xb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "0", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "X", ".", "max", "(", ")", "+", "X", ".", "min", "(", ")", ")", "\n", "Yb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "1", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "Y", ".", "max", "(", ")", "+", "Y", ".", "min", "(", ")", ")", "\n", "Zb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "2", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "Z", ".", "max", "(", ")", "+", "Z", ".", "min", "(", ")", ")", "\n", "\n", "for", "xb", ",", "yb", ",", "zb", "in", "zip", "(", "Xb", ",", "Yb", ",", "Zb", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "[", "xb", "]", ",", "[", "yb", "]", ",", "[", "zb", "]", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.downsample_tensor": [[106, 109], ["numpy.mean", "X[].reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "", "def", "downsample_tensor", "(", "X", ",", "factor", ")", ":", "\n", "    ", "length", "=", "X", ".", "shape", "[", "0", "]", "//", "factor", "*", "factor", "\n", "return", "np", ".", "mean", "(", "X", "[", ":", "length", "]", ".", "reshape", "(", "-", "1", ",", "factor", ",", "*", "X", ".", "shape", "[", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.render_animation": [[111, 260], ["matplotlib.ioff", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.get_xaxis().set_visible", "fig.add_subplot.get_yaxis().set_visible", "fig.add_subplot.set_axis_off", "fig.add_subplot.set_title", "enumerate", "list", "skeleton.parents", "tqdm.tqdm", "plt.figure.tight_layout", "matplotlib.animation.FuncAnimation", "output.endswith", "tqdm.tqdm.close", "matplotlib.close", "list.items", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_zticklabels", "fig.add_subplot.set_title", "fig.add_subplot.xaxis.get_ticklines", "fig.add_subplot.yaxis.get_ticklines", "fig.add_subplot.zaxis.get_ticklines", "ax_3d.append", "lines_3d.append", "trajectories.append", "list.values", "numpy.zeros", "visualization_copy.read_video", "min", "visualization_copy.downsample_tensor", "downsample_tensor().astype", "range", "len", "min", "enumerate", "tqdm.tqdm.update", "Writer", "matplotlib.animation.FuncAnimation.save", "output.endswith", "len", "fig.add_subplot.get_xaxis", "fig.add_subplot.get_yaxis", "line.set_visible", "line.set_visible", "line.set_visible", "downsample_tensor().astype.append", "len", "len", "visualization_copy.downsample_tensor", "visualization_copy.downsample_tensor", "len", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.imshow", "enumerate", "fig.add_subplot.scatter", "ax_in.imshow.set_data", "enumerate", "ax_in.scatter.set_offsets", "matplotlib.animation.FuncAnimation.save", "ValueError", "len", "visualization_copy.downsample_tensor", "enumerate", "enumerate", "numpy.array", "len", "lines.append", "lines_3d[].append", "len", "[].set_data", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "len", "fig.add_subplot.plot", "skeleton.joints_right", "fig.add_subplot.plot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.read_video", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right"], ["", "def", "render_animation", "(", "keypoints", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "\n", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_path", "=", "None", ",", "input_video_skip", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    Render an animation. The supported output modes are:\n     -- 'interactive': display an interactive figure\n                       (also works on notebooks if associated with %matplotlib inline)\n     -- 'html': render the animation as HTML5 video. Can be displayed in a notebook using HTML(...).\n     -- 'filename.mp4': render and export the animation as an h264 video (requires ffmpeg).\n     -- 'filename.gif': render and export the animation a gif file (requires imagemagick).\n    \"\"\"", "\n", "plt", ".", "ioff", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "size", "*", "(", "1", "+", "len", "(", "poses", ")", ")", ",", "size", ")", ")", "\n", "ax_in", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "1", ")", "\n", "ax_in", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "set_axis_off", "(", ")", "\n", "ax_in", ".", "set_title", "(", "'Input'", ")", "\n", "\n", "# prevent wired error", "\n", "_", "=", "Axes3D", ".", "__class__", ".", "__name__", "\n", "\n", "ax_3d", "=", "[", "]", "\n", "lines_3d", "=", "[", "]", "\n", "trajectories", "=", "[", "]", "\n", "radius", "=", "1.7", "\n", "for", "index", ",", "(", "title", ",", "data", ")", "in", "enumerate", "(", "poses", ".", "items", "(", ")", ")", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "index", "+", "2", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "15.", ",", "azim", "=", "azim", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "# ax.set_aspect('equal')", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_zticklabels", "(", "[", "]", ")", "\n", "ax", ".", "dist", "=", "12.5", "\n", "ax", ".", "set_title", "(", "title", ")", "# , pad=35", "\n", "\n", "for", "line", "in", "ax", ".", "xaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "", "for", "line", "in", "ax", ".", "yaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "", "for", "line", "in", "ax", ".", "zaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "\n", "", "ax_3d", ".", "append", "(", "ax", ")", "\n", "lines_3d", ".", "append", "(", "[", "]", ")", "\n", "trajectories", ".", "append", "(", "data", "[", ":", ",", "0", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "", "poses", "=", "list", "(", "poses", ".", "values", "(", ")", ")", "\n", "\n", "# Decode video", "\n", "if", "input_video_path", "is", "None", ":", "\n", "# Black background", "\n", "        ", "all_frames", "=", "np", ".", "zeros", "(", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "viewport", "[", "1", "]", ",", "viewport", "[", "0", "]", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "# Load video using ffmpeg", "\n", "        ", "all_frames", "=", "[", "]", "\n", "for", "f", "in", "read_video", "(", "input_video_path", ",", "fps", "=", "None", ",", "skip", "=", "input_video_skip", ")", ":", "\n", "            ", "all_frames", ".", "append", "(", "f", ")", "\n", "\n", "", "effective_length", "=", "min", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "len", "(", "all_frames", ")", ")", "\n", "all_frames", "=", "all_frames", "[", ":", "effective_length", "]", "\n", "\n", "", "if", "downsample", ">", "1", ":", "\n", "        ", "keypoints", "=", "downsample_tensor", "(", "keypoints", ",", "downsample", ")", "\n", "all_frames", "=", "downsample_tensor", "(", "np", ".", "array", "(", "all_frames", ")", ",", "downsample", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "            ", "poses", "[", "idx", "]", "=", "downsample_tensor", "(", "poses", "[", "idx", "]", ",", "downsample", ")", "\n", "trajectories", "[", "idx", "]", "=", "downsample_tensor", "(", "trajectories", "[", "idx", "]", ",", "downsample", ")", "\n", "", "fps", "/=", "downsample", "\n", "\n", "", "initialized", "=", "False", "\n", "image", "=", "None", "\n", "lines", "=", "[", "]", "\n", "points", "=", "None", "\n", "\n", "if", "limit", "<", "1", ":", "\n", "        ", "limit", "=", "len", "(", "all_frames", ")", "\n", "", "else", ":", "\n", "        ", "limit", "=", "min", "(", "limit", ",", "len", "(", "all_frames", ")", ")", "\n", "\n", "", "parents", "=", "skeleton", ".", "parents", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "limit", ")", "\n", "\n", "def", "update_video", "(", "i", ")", ":", "\n", "        ", "nonlocal", "initialized", ",", "image", ",", "lines", ",", "points", "\n", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "            ", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", "]", ")", "\n", "\n", "# Update 2D poses", "\n", "", "if", "not", "initialized", ":", "\n", "            ", "image", "=", "ax_in", ".", "imshow", "(", "all_frames", "[", "i", "]", ",", "aspect", "=", "'equal'", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "# and 1 == 2:", "\n", "# Draw skeleton only if keypoints match (otherwise we don't have the parents definition)", "\n", "                    ", "lines", ".", "append", "(", "ax_in", ".", "plot", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ",", "color", "=", "'pink'", ")", ")", "\n", "\n", "", "col", "=", "'red'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'black'", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", ".", "append", "(", "ax", ".", "plot", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", ")", "\n", "\n", "", "", "points", "=", "ax_in", ".", "scatter", "(", "*", "keypoints", "[", "i", "]", ".", "T", ",", "5", ",", "color", "=", "'red'", ",", "edgecolors", "=", "'white'", ",", "zorder", "=", "10", ")", "\n", "\n", "initialized", "=", "True", "\n", "", "else", ":", "\n", "            ", "image", ".", "set_data", "(", "all_frames", "[", "i", "]", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "# and 1 == 2:", "\n", "                    ", "lines", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_data", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ")", "\n", "\n", "", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_xdata", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_ydata", "(", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_3d_properties", "(", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ")", "\n", "\n", "", "", "points", ".", "set_offsets", "(", "keypoints", "[", "i", "]", ")", "\n", "\n", "", "pbar", ".", "update", "(", ")", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "anim", "=", "FuncAnimation", "(", "fig", ",", "update_video", ",", "frames", "=", "limit", ",", "interval", "=", "1000.0", "/", "fps", ",", "repeat", "=", "False", ")", "\n", "if", "output", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "        ", "Writer", "=", "writers", "[", "'ffmpeg'", "]", "\n", "writer", "=", "Writer", "(", "fps", "=", "fps", ",", "metadata", "=", "{", "}", ",", "bitrate", "=", "bitrate", ")", "\n", "anim", ".", "save", "(", "output", ",", "writer", "=", "writer", ")", "\n", "", "elif", "output", ".", "endswith", "(", "'.gif'", ")", ":", "\n", "        ", "anim", ".", "save", "(", "output", ",", "dpi", "=", "60", ",", "writer", "=", "'imagemagick'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported output format (only .mp4 and .gif are supported)'", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.render_animation_test": [[262, 318], ["visualization_copy.ckpt_time", "matplotlib.figure", "matplotlib.backends.backend_agg.FigureCanvasAgg", "plt.figure.add_subplot", "matplotlib.imshow", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_aspect", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_zticklabels", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "skeleton.parents", "visualization_copy.ckpt_time", "enumerate", "visualization_copy.ckpt_time", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "numpy.fromstring().reshape", "cv2.imshow", "cv2.waitKey", "visualization_copy.ckpt_time", "fig.add_subplot.plot", "plt.figure.get_size_inches", "plt.figure.get_dpi", "int", "int", "len", "numpy.fromstring", "skeleton.joints_right", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right"], ["", "def", "render_animation_test", "(", "keypoints", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_frame", "=", "None", ",", "\n", "input_video_skip", "=", "0", ",", "num", "=", "None", ")", ":", "\n", "    ", "t0", "=", "ckpt_time", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "canvas", "=", "FigureCanvas", "(", "fig", ")", "\n", "fig", ".", "add_subplot", "(", "121", ")", "\n", "plt", ".", "imshow", "(", "input_video_frame", ")", "\n", "# 3D", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "122", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "15.", ",", "azim", "=", "azim", ")", "\n", "# set \u957f\u5ea6\u8303\u56f4", "\n", "radius", "=", "1.7", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "# \u5750\u6807\u8f74\u523b\u5ea6", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_zticklabels", "(", "[", "]", ")", "\n", "ax", ".", "dist", "=", "7.5", "\n", "\n", "# lxy add", "\n", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "\n", "# array([-1,  0,  1,  2,  0,  4,  5,  0,  7,  8,  9,  8, 11, 12,  8, 14, 15])", "\n", "parents", "=", "skeleton", ".", "parents", "(", ")", "\n", "\n", "pos", "=", "poses", "[", "'Reconstruction'", "]", "[", "-", "1", "]", "\n", "_", ",", "t1", "=", "ckpt_time", "(", "t0", ",", "desc", "=", "'1 '", ")", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "        ", "if", "j_parent", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "\n", "            ", "color_pink", "=", "'pink'", "\n", "if", "j", "==", "1", "or", "j", "==", "2", ":", "\n", "                ", "color_pink", "=", "'black'", "\n", "\n", "", "", "col", "=", "'red'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'black'", "\n", "# \u753b\u56fe3D", "\n", "ax", ".", "plot", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", "\n", "\n", "#  plt.savefig('test/3Dimage_{}.png'.format(1000+num))", "\n", "", "width", ",", "height", "=", "fig", ".", "get_size_inches", "(", ")", "*", "fig", ".", "get_dpi", "(", ")", "\n", "_", ",", "t2", "=", "ckpt_time", "(", "t1", ",", "desc", "=", "'2 '", ")", "\n", "canvas", ".", "draw", "(", ")", "# draw the canvas, cache the renderer", "\n", "image", "=", "np", ".", "fromstring", "(", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "int", "(", "height", ")", ",", "int", "(", "width", ")", ",", "3", ")", "\n", "cv2", ".", "imshow", "(", "'im'", ",", "image", ")", "\n", "cv2", ".", "waitKey", "(", "5", ")", "\n", "_", ",", "t3", "=", "ckpt_time", "(", "t2", ",", "desc", "=", "'3 '", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.render_animation_double": [[320, 487], ["matplotlib.ioff", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.get_xaxis().set_visible", "fig.add_subplot.get_yaxis().set_visible", "fig.add_subplot.set_axis_off", "fig.add_subplot.set_title", "enumerate", "list", "list", "skeleton.parents", "tqdm.tqdm", "plt.figure.tight_layout", "matplotlib.animation.FuncAnimation", "output.endswith", "tqdm.tqdm.close", "matplotlib.close", "list.items", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_zticklabels", "fig.add_subplot.set_title", "fig.add_subplot.xaxis.get_ticklines", "fig.add_subplot.yaxis.get_ticklines", "fig.add_subplot.zaxis.get_ticklines", "ax_3d.append", "lines_3d.append", "lines_3d_gt.append", "trajectories.append", "list.values", "list.values", "numpy.zeros", "visualization_copy.read_video", "min", "visualization_copy.downsample_tensor", "downsample_tensor().astype", "range", "len", "min", "enumerate", "tqdm.tqdm.update", "Writer", "matplotlib.animation.FuncAnimation.save", "output.endswith", "len", "fig.add_subplot.get_xaxis", "fig.add_subplot.get_yaxis", "line.set_visible", "line.set_visible", "line.set_visible", "downsample_tensor().astype.append", "len", "len", "visualization_copy.downsample_tensor", "visualization_copy.downsample_tensor", "len", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.imshow", "enumerate", "fig.add_subplot.scatter", "ax_in.imshow.set_data", "enumerate", "ax_in.scatter.set_offsets", "matplotlib.animation.FuncAnimation.save", "ValueError", "len", "visualization_copy.downsample_tensor", "enumerate", "enumerate", "enumerate", "numpy.array", "len", "lines.append", "lines_3d[].append", "lines_3d_gt[].append", "len", "[].set_data", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "len", "fig.add_subplot.plot", "skeleton.joints_right", "fig.add_subplot.plot", "skeleton.joints_right", "fig.add_subplot.plot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.read_video", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right"], ["", "def", "render_animation_double", "(", "keypoints", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "\n", "poses_gt", "=", "None", ",", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_path", "=", "None", ",", "input_video_skip", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    1107: \u6dfb\u52a0GT\u7684\u706b\u67f4\u4eba.\n    poses_gt: \u548cposes\u4e00\u6837\u7684\u4e00\u4e2adict, \u7528\u6765\u8986\u76d6.\n    TODO\n    Render an animation. The supported output modes are:\n     -- 'interactive': display an interactive figure\n                       (also works on notebooks if associated with %matplotlib inline)\n     -- 'html': render the animation as HTML5 video. Can be displayed in a notebook using HTML(...).\n     -- 'filename.mp4': render and export the animation as an h264 video (requires ffmpeg).\n     -- 'filename.gif': render and export the animation a gif file (requires imagemagick).\n    \"\"\"", "\n", "plt", ".", "ioff", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "size", "*", "(", "1", "+", "len", "(", "poses", ")", ")", ",", "size", ")", ")", "\n", "ax_in", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "1", ")", "\n", "ax_in", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "set_axis_off", "(", ")", "\n", "ax_in", ".", "set_title", "(", "'Input'", ")", "\n", "\n", "# prevent wired error", "\n", "_", "=", "Axes3D", ".", "__class__", ".", "__name__", "\n", "\n", "ax_3d", "=", "[", "]", "\n", "lines_3d", "=", "[", "]", "\n", "lines_3d_gt", "=", "[", "]", "\n", "trajectories", "=", "[", "]", "\n", "radius", "=", "1.7", "\n", "for", "index", ",", "(", "title", ",", "data", ")", "in", "enumerate", "(", "poses", ".", "items", "(", ")", ")", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "index", "+", "2", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "15.", ",", "azim", "=", "azim", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "# ax.set_aspect('equal')", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_zticklabels", "(", "[", "]", ")", "\n", "ax", ".", "dist", "=", "12.5", "\n", "ax", ".", "set_title", "(", "title", ")", "# , pad=35", "\n", "\n", "for", "line", "in", "ax", ".", "xaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "", "for", "line", "in", "ax", ".", "yaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "", "for", "line", "in", "ax", ".", "zaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "\n", "", "ax_3d", ".", "append", "(", "ax", ")", "\n", "lines_3d", ".", "append", "(", "[", "]", ")", "\n", "lines_3d_gt", ".", "append", "(", "[", "]", ")", "\n", "trajectories", ".", "append", "(", "data", "[", ":", ",", "0", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "", "poses", "=", "list", "(", "poses", ".", "values", "(", ")", ")", "\n", "poses_gt", "=", "list", "(", "poses_gt", ".", "values", "(", ")", ")", "#1107", "\n", "\n", "# Decode video", "\n", "if", "input_video_path", "is", "None", ":", "\n", "# Black background", "\n", "        ", "all_frames", "=", "np", ".", "zeros", "(", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "viewport", "[", "1", "]", ",", "viewport", "[", "0", "]", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "# Load video using ffmpeg", "\n", "        ", "all_frames", "=", "[", "]", "\n", "for", "f", "in", "read_video", "(", "input_video_path", ",", "fps", "=", "None", ",", "skip", "=", "input_video_skip", ")", ":", "\n", "            ", "all_frames", ".", "append", "(", "f", ")", "\n", "\n", "", "effective_length", "=", "min", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "len", "(", "all_frames", ")", ")", "\n", "all_frames", "=", "all_frames", "[", ":", "effective_length", "]", "\n", "\n", "", "if", "downsample", ">", "1", ":", "\n", "        ", "keypoints", "=", "downsample_tensor", "(", "keypoints", ",", "downsample", ")", "\n", "all_frames", "=", "downsample_tensor", "(", "np", ".", "array", "(", "all_frames", ")", ",", "downsample", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "            ", "poses", "[", "idx", "]", "=", "downsample_tensor", "(", "poses", "[", "idx", "]", ",", "downsample", ")", "\n", "trajectories", "[", "idx", "]", "=", "downsample_tensor", "(", "trajectories", "[", "idx", "]", ",", "downsample", ")", "\n", "", "fps", "/=", "downsample", "\n", "\n", "", "initialized", "=", "False", "\n", "image", "=", "None", "\n", "lines", "=", "[", "]", "\n", "points", "=", "None", "\n", "\n", "if", "limit", "<", "1", ":", "\n", "        ", "limit", "=", "len", "(", "all_frames", ")", "\n", "", "else", ":", "\n", "        ", "limit", "=", "min", "(", "limit", ",", "len", "(", "all_frames", ")", ")", "\n", "\n", "", "parents", "=", "skeleton", ".", "parents", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "limit", ")", "\n", "\n", "def", "update_video", "(", "i", ")", ":", "\n", "        ", "nonlocal", "initialized", ",", "image", ",", "lines", ",", "points", "\n", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "            ", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", "]", ")", "\n", "\n", "# Update 2D poses", "\n", "", "if", "not", "initialized", ":", "\n", "            ", "image", "=", "ax_in", ".", "imshow", "(", "all_frames", "[", "i", "]", ",", "aspect", "=", "'equal'", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "# and 1 == 2:", "\n", "# Draw skeleton only if keypoints match (otherwise we don't have the parents definition)", "\n", "                    ", "lines", ".", "append", "(", "ax_in", ".", "plot", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ",", "color", "=", "'pink'", ")", ")", "\n", "\n", "# col = 'red' if j in skeleton.joints_right() else 'black'", "\n", "", "col", "=", "'red'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'red'", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", ".", "append", "(", "ax", ".", "plot", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", ")", "\n", "# for gt", "\n", "", "col", "=", "'green'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'green'", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos_gt", "=", "poses_gt", "[", "n", "]", "[", "i", "]", "\n", "lines_3d_gt", "[", "n", "]", ".", "append", "(", "ax", ".", "plot", "(", "[", "pos_gt", "[", "j", ",", "0", "]", ",", "pos_gt", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos_gt", "[", "j", ",", "1", "]", ",", "pos_gt", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos_gt", "[", "j", ",", "2", "]", ",", "pos_gt", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", ")", "\n", "\n", "", "", "points", "=", "ax_in", ".", "scatter", "(", "*", "keypoints", "[", "i", "]", ".", "T", ",", "5", ",", "color", "=", "'red'", ",", "edgecolors", "=", "'white'", ",", "zorder", "=", "10", ")", "\n", "\n", "initialized", "=", "True", "\n", "", "else", ":", "\n", "            ", "image", ".", "set_data", "(", "all_frames", "[", "i", "]", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "# and 1 == 2:", "\n", "                    ", "lines", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_data", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ")", "\n", "\n", "", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_xdata", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_ydata", "(", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_3d_properties", "(", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ")", "\n", "\n", "pos_gt", "=", "poses_gt", "[", "n", "]", "[", "i", "]", "\n", "lines_3d_gt", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_xdata", "(", "[", "pos_gt", "[", "j", ",", "0", "]", ",", "pos_gt", "[", "j_parent", ",", "0", "]", "]", ")", "\n", "lines_3d_gt", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_ydata", "(", "[", "pos_gt", "[", "j", ",", "1", "]", ",", "pos_gt", "[", "j_parent", ",", "1", "]", "]", ")", "\n", "lines_3d_gt", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_3d_properties", "(", "[", "pos_gt", "[", "j", ",", "2", "]", ",", "pos_gt", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ")", "\n", "\n", "", "", "points", ".", "set_offsets", "(", "keypoints", "[", "i", "]", ")", "\n", "\n", "", "pbar", ".", "update", "(", ")", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "anim", "=", "FuncAnimation", "(", "fig", ",", "update_video", ",", "frames", "=", "limit", ",", "interval", "=", "1000.0", "/", "fps", ",", "repeat", "=", "False", ")", "\n", "if", "output", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "        ", "Writer", "=", "writers", "[", "'ffmpeg'", "]", "\n", "writer", "=", "Writer", "(", "fps", "=", "fps", ",", "metadata", "=", "{", "}", ",", "bitrate", "=", "bitrate", ")", "\n", "anim", ".", "save", "(", "output", ",", "writer", "=", "writer", ")", "\n", "", "elif", "output", ".", "endswith", "(", "'.gif'", ")", ":", "\n", "        ", "anim", ".", "save", "(", "output", ",", "dpi", "=", "60", ",", "writer", "=", "'imagemagick'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported output format (only .mp4 and .gif are supported)'", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.matching.candidate_reselect": [[13, 100], ["matching.grouping", "len", "range", "matching.items", "matching.matching", "matching.items", "matching.keys", "len", "costMatrix.append", "range", "torch.zeros", "torch.zeros", "range", "final_result.append", "kp_group.keys", "numpy.zeros", "range", "max", "min", "max", "min", "s.item", "max", "torch.max().item", "len", "x.item", "y.item", "s.item", "s.item", "group_size[].keys", "int", "torch.max"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.matching.grouping", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.matching.matching", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "candidate_reselect", "(", "bboxes", ",", "bboxes_scores", ",", "pose_preds", ")", ":", "\n", "    ", "'''\n    Grouping\n    '''", "\n", "# Group same keypointns together", "\n", "kp_groups", "=", "grouping", "(", "bboxes", ",", "bboxes_scores", ",", "pose_preds", ")", "\n", "\n", "'''\n    Re-select\n    '''", "\n", "\n", "# Generate Matrix", "\n", "human_num", "=", "len", "(", "pose_preds", ".", "keys", "(", ")", ")", "\n", "costMatrix", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "17", ")", ":", "\n", "        ", "kp_group", "=", "kp_groups", "[", "k", "]", "\n", "joint_num", "=", "len", "(", "kp_group", ".", "keys", "(", ")", ")", "\n", "\n", "costMatrix", ".", "append", "(", "np", ".", "zeros", "(", "(", "human_num", ",", "joint_num", ")", ")", ")", "\n", "\n", "", "group_size", "=", "{", "k", ":", "{", "}", "for", "k", "in", "range", "(", "17", ")", "}", "\n", "\n", "for", "n", ",", "person", "in", "pose_preds", ".", "items", "(", ")", ":", "\n", "        ", "h_id", "=", "n", "\n", "assert", "0", "<=", "h_id", "<", "human_num", "\n", "\n", "for", "k", "in", "range", "(", "17", ")", ":", "\n", "            ", "g_id", "=", "person", "[", "'group_id'", "]", "[", "k", "]", "\n", "if", "g_id", "is", "not", "None", ":", "\n", "                ", "if", "g_id", "not", "in", "group_size", "[", "k", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "group_size", "[", "k", "]", "[", "g_id", "]", "=", "0", "\n", "\n", "", "group_size", "[", "k", "]", "[", "g_id", "]", "+=", "1", "\n", "\n", "g_id", "=", "int", "(", "g_id", ")", "-", "1", "\n", "_", ",", "_", ",", "score", "=", "person", "[", "k", "]", "[", "0", "]", "\n", "h_score", "=", "person", "[", "'human_score'", "]", "\n", "\n", "if", "score", "<", "0.05", ":", "\n", "                    ", "costMatrix", "[", "k", "]", "[", "h_id", "]", "[", "g_id", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "costMatrix", "[", "k", "]", "[", "h_id", "]", "[", "g_id", "]", "=", "-", "(", "h_score", "*", "score", ")", "\n", "\n", "", "", "", "", "pose_preds", "=", "matching", "(", "pose_preds", ",", "costMatrix", ",", "kp_groups", ")", "\n", "\n", "# To JSON", "\n", "final_result", "=", "[", "]", "\n", "\n", "for", "n", ",", "person", "in", "pose_preds", ".", "items", "(", ")", ":", "\n", "\n", "        ", "final_pose", "=", "torch", ".", "zeros", "(", "17", ",", "2", ")", "\n", "final_score", "=", "torch", ".", "zeros", "(", "17", ",", "1", ")", "\n", "\n", "max_score", "=", "0", "\n", "mean_score", "=", "0", "\n", "\n", "xmax", ",", "xmin", "=", "0", ",", "1e5", "\n", "ymax", ",", "ymin", "=", "0", ",", "1e5", "\n", "\n", "for", "k", "in", "range", "(", "17", ")", ":", "\n", "            ", "assert", "len", "(", "person", "[", "k", "]", ")", ">", "0", "\n", "x", ",", "y", ",", "s", "=", "person", "[", "k", "]", "[", "0", "]", "\n", "\n", "xmax", "=", "max", "(", "xmax", ",", "x", ")", "\n", "xmin", "=", "min", "(", "xmin", ",", "x", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "y", ")", "\n", "ymin", "=", "min", "(", "ymin", ",", "y", ")", "\n", "\n", "final_pose", "[", "k", "]", "[", "0", "]", "=", "x", ".", "item", "(", ")", "-", "0.3", "\n", "final_pose", "[", "k", "]", "[", "1", "]", "=", "y", ".", "item", "(", ")", "-", "0.3", "\n", "final_score", "[", "k", "]", "=", "s", ".", "item", "(", ")", "\n", "mean_score", "+=", "(", "s", ".", "item", "(", ")", "/", "17", ")", "\n", "max_score", "=", "max", "(", "max_score", ",", "s", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "torch", ".", "max", "(", "final_score", ")", ".", "item", "(", ")", "<", "0.1", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "(", "1.5", "**", "2", "*", "(", "xmax", "-", "xmin", ")", "*", "(", "ymax", "-", "ymin", ")", "<", "40", "*", "40", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "final_result", ".", "append", "(", "{", "\n", "'keypoints'", ":", "final_pose", ",", "\n", "'kp_score'", ":", "final_score", ",", "\n", "'proposal_score'", ":", "mean_score", "+", "max_score", "+", "person", "[", "'bbox_score'", "]", "\n", "}", ")", "\n", "\n", "", "return", "final_result", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.matching.grouping": [[102, 188], ["range", "numpy.zeros", "pose_preds.items", "range", "range", "numpy.array", "kp_group.items", "len", "len", "numpy.sqrt", "numpy.array", "numpy.array", "[].copy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "grouping", "(", "bboxes", ",", "bboxes_scores", ",", "pose_preds", ")", ":", "\n", "    ", "kp_groups", "=", "{", "}", "\n", "for", "k", "in", "range", "(", "17", ")", ":", "\n", "        ", "kp_groups", "[", "k", "]", "=", "{", "}", "\n", "\n", "", "ids", "=", "np", ".", "zeros", "(", "17", ")", "\n", "\n", "for", "n", ",", "person", "in", "pose_preds", ".", "items", "(", ")", ":", "\n", "        ", "pose_preds", "[", "n", "]", "[", "'bbox'", "]", "=", "bboxes", "[", "n", "]", "\n", "pose_preds", "[", "n", "]", "[", "'bbox_score'", "]", "=", "bboxes_scores", "[", "n", "]", "\n", "pose_preds", "[", "n", "]", "[", "'group_id'", "]", "=", "{", "}", "\n", "s", "=", "0", "\n", "\n", "for", "k", "in", "range", "(", "17", ")", ":", "\n", "            ", "pose_preds", "[", "n", "]", "[", "'group_id'", "]", "[", "k", "]", "=", "None", "\n", "pose_preds", "[", "n", "]", "[", "k", "]", "=", "np", ".", "array", "(", "pose_preds", "[", "n", "]", "[", "k", "]", ")", "\n", "assert", "len", "(", "pose_preds", "[", "n", "]", "[", "k", "]", ")", ">", "0", "\n", "s", "+=", "pose_preds", "[", "n", "]", "[", "k", "]", "[", "0", "]", "[", "-", "1", "]", "\n", "\n", "", "s", "=", "s", "/", "17", "\n", "\n", "pose_preds", "[", "n", "]", "[", "'human_score'", "]", "=", "s", "\n", "\n", "for", "k", "in", "range", "(", "17", ")", ":", "\n", "            ", "latest_id", "=", "ids", "[", "k", "]", "\n", "kp_group", "=", "kp_groups", "[", "k", "]", "\n", "\n", "assert", "len", "(", "person", "[", "k", "]", ")", ">", "0", "\n", "x0", ",", "y0", ",", "s0", "=", "person", "[", "k", "]", "[", "0", "]", "\n", "if", "s0", "<", "0.05", ":", "\n", "                ", "continue", "\n", "\n", "", "for", "g_id", ",", "g", "in", "kp_group", ".", "items", "(", ")", ":", "\n", "                ", "x_c", ",", "y_c", "=", "kp_group", "[", "g_id", "]", "[", "'group_center'", "]", "\n", "\n", "'''\n                Get Average Box Size\n                '''", "\n", "group_area", "=", "kp_group", "[", "g_id", "]", "[", "'group_area'", "]", "\n", "group_area", "=", "group_area", "[", "0", "]", "*", "group_area", "[", "1", "]", "/", "(", "group_area", "[", "2", "]", "**", "2", ")", "\n", "\n", "'''\n                Groupingn Criterion\n                '''", "\n", "# Joint Group", "\n", "dist", "=", "np", ".", "sqrt", "(", "\n", "(", "(", "x_c", "-", "x0", ")", "**", "2", "+", "(", "y_c", "-", "y0", ")", "**", "2", ")", "/", "group_area", ")", "\n", "\n", "if", "dist", "<=", "0.1", "*", "sigmas", "[", "k", "]", ":", "# Small Distance", "\n", "                    ", "if", "s0", ">=", "0.3", ":", "\n", "                        ", "kp_group", "[", "g_id", "]", "[", "'kp_list'", "]", "[", "0", "]", "+=", "x0", "*", "s0", "\n", "kp_group", "[", "g_id", "]", "[", "'kp_list'", "]", "[", "1", "]", "+=", "y0", "*", "s0", "\n", "kp_group", "[", "g_id", "]", "[", "'kp_list'", "]", "[", "2", "]", "+=", "s0", "\n", "\n", "kp_group", "[", "g_id", "]", "[", "'group_area'", "]", "[", "0", "]", "+=", "(", "person", "[", "'bbox'", "]", "[", "2", "]", "-", "person", "[", "'bbox'", "]", "[", "0", "]", ")", "*", "person", "[", "'human_score'", "]", "\n", "kp_group", "[", "g_id", "]", "[", "'group_area'", "]", "[", "1", "]", "+=", "(", "person", "[", "'bbox'", "]", "[", "3", "]", "-", "person", "[", "'bbox'", "]", "[", "1", "]", ")", "*", "person", "[", "'human_score'", "]", "\n", "kp_group", "[", "g_id", "]", "[", "'group_area'", "]", "[", "2", "]", "+=", "person", "[", "'human_score'", "]", "\n", "\n", "x_c", "=", "kp_group", "[", "g_id", "]", "[", "'kp_list'", "]", "[", "0", "]", "/", "kp_group", "[", "g_id", "]", "[", "'kp_list'", "]", "[", "2", "]", "\n", "y_c", "=", "kp_group", "[", "g_id", "]", "[", "'kp_list'", "]", "[", "1", "]", "/", "kp_group", "[", "g_id", "]", "[", "'kp_list'", "]", "[", "2", "]", "\n", "kp_group", "[", "g_id", "]", "[", "'group_center'", "]", "=", "(", "x_c", ",", "y_c", ")", "\n", "\n", "", "pose_preds", "[", "n", "]", "[", "'group_id'", "]", "[", "k", "]", "=", "g_id", "\n", "break", "\n", "", "", "else", ":", "\n", "# A new keypoint group", "\n", "                ", "latest_id", "+=", "1", "\n", "kp_group", "[", "latest_id", "]", "=", "{", "\n", "'kp_list'", ":", "None", ",", "\n", "'group_center'", ":", "person", "[", "k", "]", "[", "0", "]", ".", "copy", "(", ")", "[", ":", "2", "]", ",", "\n", "'group_area'", ":", "None", "\n", "}", "\n", "\n", "x", ",", "y", ",", "s", "=", "person", "[", "k", "]", "[", "0", "]", "\n", "kp_group", "[", "latest_id", "]", "[", "'kp_list'", "]", "=", "np", ".", "array", "(", "(", "x", "*", "s", ",", "y", "*", "s", ",", "s", ")", ")", "\n", "\n", "# Ref Area", "\n", "ref_width", "=", "person", "[", "'bbox'", "]", "[", "2", "]", "-", "person", "[", "'bbox'", "]", "[", "0", "]", "\n", "ref_height", "=", "person", "[", "'bbox'", "]", "[", "3", "]", "-", "person", "[", "'bbox'", "]", "[", "1", "]", "\n", "ref_score", "=", "person", "[", "'human_score'", "]", "\n", "kp_group", "[", "latest_id", "]", "[", "'group_area'", "]", "=", "np", ".", "array", "(", "(", "\n", "ref_width", "*", "ref_score", ",", "ref_height", "*", "ref_score", ",", "ref_score", ")", ")", "\n", "\n", "pose_preds", "[", "n", "]", "[", "'group_id'", "]", "[", "k", "]", "=", "latest_id", "\n", "ids", "[", "k", "]", "=", "latest_id", "\n", "", "", "", "return", "kp_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.matching.matching": [[190, 218], ["range", "pose_preds.items", "scipy.optimize.linear_sum_assignment", "index.append", "range", "list", "zip", "int", "numpy.delete", "len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "matching", "(", "pose_preds", ",", "matrix", ",", "kp_groups", ")", ":", "\n", "    ", "index", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "17", ")", ":", "\n", "        ", "human_ind", ",", "joint_ind", "=", "linear_sum_assignment", "(", "matrix", "[", "k", "]", ")", "\n", "# human_ind, joint_ind = greedy_matching(matrix[k])", "\n", "\n", "index", ".", "append", "(", "list", "(", "zip", "(", "human_ind", ",", "joint_ind", ")", ")", ")", "\n", "\n", "", "for", "n", ",", "person", "in", "pose_preds", ".", "items", "(", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "17", ")", ":", "\n", "            ", "g_id", "=", "person", "[", "'group_id'", "]", "[", "k", "]", "\n", "if", "g_id", "is", "not", "None", ":", "\n", "                ", "g_id", "=", "int", "(", "g_id", ")", "-", "1", "\n", "h_id", "=", "n", "\n", "\n", "x", ",", "y", ",", "s", "=", "pose_preds", "[", "n", "]", "[", "k", "]", "[", "0", "]", "\n", "if", "(", "(", "h_id", ",", "g_id", ")", "not", "in", "index", "[", "k", "]", ")", "and", "len", "(", "pose_preds", "[", "n", "]", "[", "k", "]", ")", ">", "1", ":", "\n", "                    ", "pose_preds", "[", "n", "]", "[", "k", "]", "=", "np", ".", "delete", "(", "pose_preds", "[", "n", "]", "[", "k", "]", ",", "0", ",", "0", ")", "\n", "", "elif", "(", "(", "h_id", ",", "g_id", ")", "not", "in", "index", "[", "k", "]", ")", "and", "len", "(", "person", "[", "k", "]", ")", "==", "1", ":", "\n", "                    ", "x", ",", "y", ",", "_", "=", "pose_preds", "[", "n", "]", "[", "k", "]", "[", "0", "]", "\n", "pose_preds", "[", "n", "]", "[", "k", "]", "[", "0", "]", "=", "(", "x", ",", "y", ",", "1e-5", ")", "\n", "pass", "\n", "", "elif", "(", "(", "h_id", ",", "g_id", ")", "in", "index", "[", "k", "]", ")", ":", "\n", "                    ", "x", ",", "y", "=", "kp_groups", "[", "k", "]", "[", "g_id", "+", "1", "]", "[", "'group_center'", "]", "\n", "s", "=", "pose_preds", "[", "n", "]", "[", "k", "]", "[", "0", "]", "[", "2", "]", "\n", "pose_preds", "[", "n", "]", "[", "k", "]", "[", "0", "]", "=", "(", "x", ",", "y", ",", "s", ")", "\n", "\n", "", "", "", "", "return", "pose_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.matching.greedy_matching": [[220, 230], ["numpy.argmin", "numpy.arange", "np.argmin.tolist", "np.arange.tolist"], "function", ["None"], ["", "def", "greedy_matching", "(", "matrix", ")", ":", "\n", "    ", "num_human", ",", "num_joint", "=", "matrix", ".", "shape", "\n", "\n", "if", "num_joint", "<=", "num_human", "or", "True", ":", "\n", "        ", "human_ind", "=", "np", ".", "argmin", "(", "matrix", ",", "axis", "=", "0", ")", "\n", "joint_ind", "=", "np", ".", "arange", "(", "num_joint", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "human_ind", ".", "tolist", "(", ")", ",", "joint_ind", ".", "tolist", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.video_demo.main": [[11, 104], ["len", "dataloader.ImageLoader().start", "print", "sys.stdout.flush", "dataloader.DetectionLoader().start", "dataloader.DetectionProcessor().start", "dataloader.Mscoco", "SPPE.src.main_fast_inference.InferenNet.cuda", "SPPE.src.main_fast_inference.InferenNet.eval", "dataloader.DataWriter().start", "ImageLoader().start.length", "tqdm.tqdm", "print", "DataWriter().start.running", "DataWriter().start.stop", "DataWriter().start.results", "pPose_nms.write_json", "os.path.exists", "os.mkdir", "open().readlines", "SPPE.src.main_fast_inference.InferenNet_fast", "SPPE.src.main_fast_inference.InferenNet", "range", "fn.getTime", "print", "print", "len", "os.walk", "IOError", "dataloader.ImageLoader", "dataloader.DetectionLoader", "dataloader.DetectionProcessor", "dataloader.DataWriter", "torch.no_grad", "DetectionProcessor().start.read", "fn.getTime", "runtime_profile[].append", "inps.size", "range", "torch.cat", "fn.getTime", "runtime_profile[].append", "hm.cpu.cpu", "DataWriter().start.save", "fn.getTime", "runtime_profile[].append", "tqdm.tqdm.set_description", "open", "DataWriter().start.save", "inps[].cuda", "SPPE.src.main_fast_inference.InferenNet.", "hm.cpu.append", "boxes.nelement", "im_name.split", "im_name.split", "np.mean", "np.mean", "np.mean", "min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.length", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.running", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.stop", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.write_json", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "inputpath", "=", "args", ".", "inputpath", "\n", "inputlist", "=", "args", ".", "inputlist", "\n", "mode", "=", "args", ".", "mode", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "outputpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "outputpath", ")", "\n", "\n", "", "if", "len", "(", "inputlist", ")", ":", "\n", "        ", "im_names", "=", "open", "(", "inputlist", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "", "elif", "len", "(", "inputpath", ")", "and", "inputpath", "!=", "'/'", ":", "\n", "        ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "inputpath", ")", ":", "\n", "            ", "im_names", "=", "files", "\n", "", "", "else", ":", "\n", "        ", "raise", "IOError", "(", "'Error: must contain either --indir/--list'", ")", "\n", "\n", "# Load input images", "\n", "", "data_loader", "=", "ImageLoader", "(", "im_names", ",", "batchSize", "=", "args", ".", "detbatch", ",", "format", "=", "'yolo'", ")", ".", "start", "(", ")", "\n", "\n", "# Load detection loader", "\n", "print", "(", "'Loading YOLO model..'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "det_loader", "=", "DetectionLoader", "(", "data_loader", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "det_processor", "=", "DetectionProcessor", "(", "det_loader", ")", ".", "start", "(", ")", "\n", "\n", "# Load pose model", "\n", "pose_dataset", "=", "Mscoco", "(", ")", "\n", "if", "args", ".", "fast_inference", ":", "\n", "        ", "pose_model", "=", "InferenNet_fast", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "else", ":", "\n", "        ", "pose_model", "=", "InferenNet", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "pose_model", ".", "cuda", "(", ")", "\n", "pose_model", ".", "eval", "(", ")", "\n", "\n", "runtime_profile", "=", "{", "\n", "'dt'", ":", "[", "]", ",", "\n", "'pt'", ":", "[", "]", ",", "\n", "'pn'", ":", "[", "]", "\n", "}", "\n", "\n", "# Init data writer", "\n", "writer", "=", "DataWriter", "(", "args", ".", "save_video", ")", ".", "start", "(", ")", "\n", "\n", "data_len", "=", "data_loader", ".", "length", "(", ")", "\n", "im_names_desc", "=", "tqdm", "(", "range", "(", "data_len", ")", ")", "\n", "\n", "batchSize", "=", "args", ".", "posebatch", "\n", "for", "i", "in", "im_names_desc", ":", "\n", "        ", "start_time", "=", "getTime", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "inps", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "pt1", ",", "pt2", ")", "=", "det_processor", ".", "read", "(", ")", "\n", "if", "boxes", "is", "None", "or", "boxes", ".", "nelement", "(", ")", "==", "0", ":", "\n", "                ", "writer", ".", "save", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "continue", "\n", "\n", "", "ckpt_time", ",", "det_time", "=", "getTime", "(", "start_time", ")", "\n", "runtime_profile", "[", "'dt'", "]", ".", "append", "(", "det_time", ")", "\n", "# Pose Estimation", "\n", "\n", "datalen", "=", "inps", ".", "size", "(", "0", ")", "\n", "leftover", "=", "0", "\n", "if", "(", "datalen", ")", "%", "batchSize", ":", "\n", "                ", "leftover", "=", "1", "\n", "", "num_batches", "=", "datalen", "//", "batchSize", "+", "leftover", "\n", "hm", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "inps_j", "=", "inps", "[", "j", "*", "batchSize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "batchSize", ",", "datalen", ")", "]", ".", "cuda", "(", ")", "\n", "hm_j", "=", "pose_model", "(", "inps_j", ")", "\n", "hm", ".", "append", "(", "hm_j", ")", "\n", "", "hm", "=", "torch", ".", "cat", "(", "hm", ")", "\n", "ckpt_time", ",", "pose_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pt'", "]", ".", "append", "(", "pose_time", ")", "\n", "hm", "=", "hm", ".", "cpu", "(", ")", "\n", "writer", ".", "save", "(", "boxes", ",", "scores", ",", "hm", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "ckpt_time", ",", "post_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pn'", "]", ".", "append", "(", "post_time", ")", "\n", "\n", "", "if", "args", ".", "profile", ":", "\n", "# TQDM", "\n", "            ", "im_names_desc", ".", "set_description", "(", "\n", "'det time: {dt:.3f} | pose time: {pt:.2f} | post processing: {pn:.4f}'", ".", "format", "(", "\n", "dt", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'dt'", "]", ")", ",", "pt", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'pt'", "]", ")", ",", "pn", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'pn'", "]", ")", ")", "\n", ")", "\n", "\n", "", "", "print", "(", "'===========================> Finish Model Running.'", ")", "\n", "if", "(", "args", ".", "save_img", "or", "args", ".", "save_video", ")", "and", "not", "args", ".", "vis_fast", ":", "\n", "        ", "print", "(", "'===========================> Rendering remaining images in the queue...'", ")", "\n", "print", "(", "'===========================> If this step takes too long, you can enable the --vis_fast flag to use fast rendering (real-time).'", ")", "\n", "", "while", "(", "writer", ".", "running", "(", ")", ")", ":", "\n", "        ", "pass", "\n", "", "writer", ".", "stop", "(", ")", "\n", "final_result", "=", "writer", ".", "results", "(", ")", "\n", "write_json", "(", "final_result", ",", "args", ".", "outputpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.__init__": [[216, 220], ["detector_api_realtime.Detector.prepare_datastream", "detector_api_realtime.Detector.prepare_model"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.prepare_datastream", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.prepare_model"], ["    ", "def", "__init__", "(", "self", ",", "video_file", ",", "cam_wh", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_wh", "=", "cam_wh", "# camera resolution", "\n", "self", ".", "prepare_datastream", "(", "video_file", ")", "\n", "self", ".", "prepare_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.prepare_datastream": [[221, 229], ["dataloader.VideoLoader().start", "detector_api_realtime.Detector.data_loader.videoinfo", "print", "print", "max", "dataloader.VideoLoader"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.videoinfo"], ["", "def", "prepare_datastream", "(", "self", ",", "video_file", ")", ":", "\n", "# Load input video", "\n", "        ", "self", ".", "data_loader", "=", "VideoLoader", "(", "video_file", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "(", "fourcc", ",", "fps", ",", "frameSize", ")", "=", "self", ".", "data_loader", ".", "videoinfo", "(", ")", "\n", "print", "(", "'the video is {} f/s'", ".", "format", "(", "fps", ")", ")", "\n", "print", "(", "'the video frameSize: {}'", ".", "format", "(", "frameSize", ")", ")", "\n", "if", "self", ".", "img_wh", "is", "None", ":", "\n", "            ", "self", ".", "img_wh", "=", "max", "(", "frameSize", ")", "\n", "# =========== end video ===============", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.prepare_model": [[231, 251], ["print", "sys.stdout.flush", "dataloader.DetectionLoader().start", "dataloader.DetectionProcessor().start", "dataloader.Mscoco", "detector_api_realtime.Detector.pose_model.cuda", "detector_api_realtime.Detector.pose_model.eval", "SPPE.src.main_fast_inference.InferenNet_fast", "SPPE.src.main_fast_inference.InferenNet", "dataloader.DetectionLoader", "dataloader.DetectionProcessor"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["", "", "def", "prepare_model", "(", "self", ")", ":", "\n", "# Load detection loader", "\n", "        ", "print", "(", "'Loading YOLO model..'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "det_loader", "=", "DetectionLoader", "(", "self", ".", "data_loader", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "#  start a thread to read frames from the file video stream", "\n", "self", ".", "det_processor", "=", "DetectionProcessor", "(", "det_loader", ")", ".", "start", "(", ")", "\n", "# Load pose model", "\n", "pose_dataset", "=", "Mscoco", "(", ")", "\n", "if", "args", ".", "fast_inference", ":", "\n", "            ", "self", ".", "pose_model", "=", "InferenNet_fast", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pose_model", "=", "InferenNet", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "self", ".", "pose_model", ".", "cuda", "(", ")", "\n", "self", ".", "pose_model", ".", "eval", "(", ")", "\n", "# time measurement", "\n", "self", ".", "runtime_profile", "=", "{", "\n", "'dt'", ":", "[", "]", ",", "\n", "'pt'", ":", "[", "]", ",", "\n", "'pn'", ":", "[", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.get_kpt": [[253, 297], ["fn.getTime", "torch.no_grad", "detector_api_realtime.Detector.det_processor.read", "fn.getTime", "detector_api_realtime.Detector.runtime_profile[].append", "inps.size", "range", "torch.cat", "fn.getTime", "detector_api_realtime.Detector.runtime_profile[].append", "SPPE.src.utils.eval.getPrediction", "pPose_nms.pose_nms", "fn.getTime", "detector_api_realtime.Detector.runtime_profile[].append", "kpt.data.numpy", "inps[].cuda", "detector_api_realtime.Detector.pose_model", "torch.cat.append", "torch.cat.cpu", "max", "boxes.nelement", "min", "common.utils.calculate_area"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPrediction", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.pose_nms", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.calculate_area"], ["", "def", "get_kpt", "(", "self", ")", ":", "\n", "        ", "batchSize", "=", "args", ".", "posebatch", "\n", "start_time", "=", "getTime", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "inps", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "pt1", ",", "pt2", ")", "=", "self", ".", "det_processor", ".", "read", "(", ")", "\n", "if", "orig_img", "is", "None", ":", "\n", "                ", "assert", "False", ",", "f'image read None: handle_video'", "\n", "", "if", "boxes", "is", "None", "or", "boxes", ".", "nelement", "(", ")", "==", "0", ":", "\n", "# continue", "\n", "                ", "return", "None", "\n", "", "ckpt_time", ",", "det_time", "=", "getTime", "(", "start_time", ")", "\n", "self", ".", "runtime_profile", "[", "'dt'", "]", ".", "append", "(", "det_time", ")", "\n", "\n", "# Pose Estimation", "\n", "datalen", "=", "inps", ".", "size", "(", "0", ")", "\n", "leftover", "=", "0", "\n", "if", "datalen", "%", "batchSize", ":", "\n", "                ", "leftover", "=", "1", "\n", "", "num_batches", "=", "datalen", "//", "batchSize", "+", "leftover", "\n", "hm", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "inps_j", "=", "inps", "[", "j", "*", "batchSize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "batchSize", ",", "datalen", ")", "]", ".", "cuda", "(", ")", "\n", "hm_j", "=", "self", ".", "pose_model", "(", "inps_j", ")", "\n", "hm", ".", "append", "(", "hm_j", ")", "\n", "", "hm", "=", "torch", ".", "cat", "(", "hm", ")", "\n", "ckpt_time", ",", "pose_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "self", ".", "runtime_profile", "[", "'pt'", "]", ".", "append", "(", "pose_time", ")", "\n", "\n", "hm", "=", "hm", ".", "cpu", "(", ")", ".", "data", "\n", "boxes", ",", "scores", ",", "hm_data", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", "=", "boxes", ",", "scores", ",", "hm", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", "\n", "preds_hm", ",", "preds_img", ",", "preds_scores", "=", "getPrediction", "(", "\n", "hm_data", ",", "pt1", ",", "pt2", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ",", "opt", ".", "outputResH", ",", "opt", ".", "outputResW", ")", "\n", "result", "=", "pose_nms", "(", "\n", "boxes", ",", "scores", ",", "preds_img", ",", "preds_scores", ")", "\n", "ckpt_time", ",", "post_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "self", ".", "runtime_profile", "[", "'pn'", "]", ".", "append", "(", "post_time", ")", "\n", "\n", "# assume the largest one person", "\n", "kpt", "=", "max", "(", "result", ",", "key", "=", "lambda", "x", ":", "x", "[", "'proposal_score'", "]", ".", "data", "[", "0", "]", "*", "calculate_area", "(", "x", "[", "'keypoints'", "]", ")", ",", ")", "[", "'keypoints'", "]", "\n", "keypoint", "=", "kpt", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "# post process", "\n", "# keypoint = self.convert_AlphaOpenposeCoco_to_standard16Joint(keypoint.copy())  # Nx16x2", "\n", "return", "keypoint", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.post_process": [[298, 309], ["detector_api_realtime.Detector.convert_AlphaOpenposeCoco_to_standard16Joint", "detector_api_realtime.Detector.normalize_screen_coordinates"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.convert_AlphaOpenposeCoco_to_standard16Joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.normalize_screen_coordinates"], ["", "", "def", "post_process", "(", "self", ",", "pose17j", ")", ":", "\n", "        ", "\"\"\"\n        \u628aimg space\u768417 joint\u8f6c\u6362\u6210 \u6211\u7528\u768416 joint.\n        :return:\n        \"\"\"", "\n", "pose16j", "=", "self", ".", "convert_AlphaOpenposeCoco_to_standard16Joint", "(", "pose17j", ")", "\n", "# normlization keypoint", "\n", "keypoint_imgnorm", "=", "self", ".", "normalize_screen_coordinates", "(", "pose16j", "[", "...", ",", ":", "2", "]", ",", "w", "=", "self", ".", "img_wh", ",", "h", "=", "self", ".", "img_wh", ")", "\n", "return", "{", "\n", "'pose16j'", ":", "pose16j", ",", "\n", "'keypoint_imgnorm'", ":", "keypoint_imgnorm", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.convert_AlphaOpenposeCoco_to_standard16Joint": [[311, 341], ["numpy.stack", "numpy.transpose", "numpy.concatenate", "pose_x.reshape.reshape.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "convert_AlphaOpenposeCoco_to_standard16Joint", "(", "self", ",", "pose_x", ")", ":", "\n", "        ", "\"\"\"\n        pose_x: nx17x2\n        https://zhuanlan.zhihu.com/p/367707179\n        \"\"\"", "\n", "single_pose", "=", "False", "\n", "if", "not", "len", "(", "pose_x", ".", "shape", ")", "==", "3", ":", "\n", "            ", "single_pose", "=", "True", "\n", "pose_x", "=", "pose_x", ".", "reshape", "(", "1", ",", "17", ",", "2", ")", "\n", "\n", "", "hip", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "11", "]", "+", "pose_x", "[", ":", ",", "12", "]", ")", "\n", "neck", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "5", "]", "+", "pose_x", "[", ":", ",", "6", "]", ")", "\n", "spine", "=", "0.5", "*", "(", "neck", "+", "hip", ")", "\n", "\n", "# head = 0.5 * (pose_x[:, 1] + pose_x[:, 2])", "\n", "\n", "head_0", "=", "pose_x", "[", ":", ",", "0", "]", "# by noise", "\n", "head_1", "=", "(", "neck", "-", "hip", ")", "*", "0.5", "+", "neck", "# by backbone", "\n", "head_2", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "1", "]", "+", "pose_x", "[", ":", ",", "2", "]", ")", "# by two eye", "\n", "head_3", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "3", "]", "+", "pose_x", "[", ":", ",", "4", "]", ")", "# by two ear", "\n", "head", "=", "head_0", "*", "0.1", "+", "head_1", "*", "0.6", "+", "head_2", "*", "0.1", "+", "head_3", "*", "0.2", "\n", "\n", "combine", "=", "np", ".", "stack", "(", "[", "hip", ",", "spine", ",", "neck", ",", "head", "]", ")", "# 0 1 2 3 ---> 17, 18, 19 ,20", "\n", "combine", "=", "np", ".", "transpose", "(", "combine", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "combine", "=", "np", ".", "concatenate", "(", "[", "pose_x", ",", "combine", "]", ",", "axis", "=", "1", ")", "\n", "reorder", "=", "[", "17", ",", "12", ",", "14", ",", "16", ",", "11", ",", "13", ",", "15", ",", "18", ",", "19", ",", "20", ",", "5", ",", "7", ",", "9", ",", "6", ",", "8", ",", "10", "]", "\n", "standart_16joint", "=", "combine", "[", ":", ",", "reorder", "]", "\n", "if", "single_pose", ":", "\n", "            ", "standart_16joint", "=", "standart_16joint", "[", "0", "]", "\n", "", "return", "standart_16joint", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.normalize_screen_coordinates": [[342, 346], ["None"], "methods", ["None"], ["", "def", "normalize_screen_coordinates", "(", "self", ",", "X", ",", "w", ",", "h", ")", ":", "\n", "        ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "# Normalize so that [0, w] is mapped to [-1, 1], while preserving the aspect ratio", "\n", "return", "X", "/", "w", "*", "2", "-", "[", "1", ",", "h", "/", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.image_coordinates": [[347, 351], ["None"], "methods", ["None"], ["", "def", "image_coordinates", "(", "self", ",", "X", ",", "w", ",", "h", ")", ":", "\n", "        ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "# Reverse camera frame normalization", "\n", "return", "(", "X", "+", "[", "1", ",", "h", "/", "w", "]", ")", "*", "w", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.save_video": [[352, 388], ["print", "visualization_copy.render_animation", "numpy.array", "visualization_copy.camera_to_world_bynumpy", "numpy.min", "detector_api_realtime.Detector.save_video._postprocess"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.render_animation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.visualization_copy.camera_to_world_bynumpy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator_inference.videopose-j16-wild-eval_run.Visualization._postprocess"], ["", "def", "save_video", "(", "self", ",", "viz_video_path", ",", "viz_output_path", ",", "keypoints", ",", "prediction", ",", "camspace", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \u628a\u62ff\u5230\u76842D keypoint, 3D pose, \u4fdd\u5b58\u6210video, \u7528\u6765debug.\n        :param viz_video_path: \u539f\u59cbvideo\u5730\u5740\n        :param viz_output_path: \u8f93\u51fa\u7ed3\u679c\u7684video\u5730\u5740.\n        :param keypoints: 2D keypoint, # tx16x2 \u7528pixcel\u5730\u5740\n        :param prediction: 3D prediction, # tx16x3 \u770b\u662fworld space\u8fd8\u662fcamera space\n        :return:\n        \"\"\"", "\n", "def", "_postprocess", "(", "prediction", ")", ":", "\n", "# # camera rotation", "\n", "            ", "rot", "=", "np", ".", "array", "(", "[", "0.14070565", ",", "-", "0.15007018", ",", "-", "0.7552408", ",", "0.62232804", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "prediction_world", "=", "camera_to_world_bynumpy", "(", "prediction", ",", "R", "=", "rot", ",", "t", "=", "0", ")", "\n", "# We don't have the trajectory, but at least we can rebase the height", "\n", "prediction_world", "[", ":", ",", ":", ",", "2", "]", "-=", "np", ".", "min", "(", "prediction_world", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "return", "prediction_world", "\n", "# \u51c6\u5907\u9700\u8981\u53ef\u89c6\u5316\u7684 3D pose \u5e8f\u5217", "\n", "", "if", "camspace", ":", "\n", "            ", "prediction", "=", "_postprocess", "(", "prediction", ")", "\n", "", "anim_output", "=", "{", "'Reconstruction'", ":", "prediction", "}", "\n", "\n", "args", ".", "frame_rate", "=", "25", "\n", "args", ".", "viz_bitrate", "=", "30000", "# bitrate for mp4 videos", "\n", "args", ".", "viz_limit", "=", "-", "1", "# only render first N frames", "\n", "args", ".", "viz_downsample", "=", "1", "# downsample FPS by a factor N", "\n", "args", ".", "viz_size", "=", "5", "# image size", "\n", "args", ".", "viz_skip", "=", "0", "# skip first N frames of input video", "\n", "args", ".", "video_width", ",", "args", ".", "video_height", "=", "self", ".", "data_loader", ".", "videoinfo", "(", ")", "[", "2", "]", "\n", "\n", "# \u53ef\u89c6\u5316\u751f\u6210.", "\n", "print", "(", "'Rendering... save to {}'", ".", "format", "(", "viz_output_path", ")", ")", "\n", "render_animation", "(", "keypoints", ",", "anim_output", ",", "\n", "Skeleton", "(", ")", ",", "args", ".", "frame_rate", ",", "args", ".", "viz_bitrate", ",", "np", ".", "array", "(", "70.", ",", "dtype", "=", "np", ".", "float32", ")", ",", "viz_output_path", ",", "\n", "limit", "=", "args", ".", "viz_limit", ",", "downsample", "=", "args", ".", "viz_downsample", ",", "size", "=", "args", ".", "viz_size", ",", "\n", "input_video_path", "=", "viz_video_path", ",", "viewport", "=", "(", "args", ".", "video_width", ",", "args", ".", "video_height", ")", ",", "\n", "input_video_skip", "=", "args", ".", "viz_skip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.generate_kpts_byclass": [[391, 404], ["detector_api_realtime.Detector", "range", "print", "Detector.data_loader.length", "kpts.append", "detector_api_realtime.Detector.get_kpt"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.length", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api_realtime.Detector.get_kpt"], ["", "", "def", "generate_kpts_byclass", "(", "video_file", ")", ":", "\n", "    ", "\"\"\"\n    \u4e00\u4e2a\u6837\u672c\u6d4b\u8bd5\u6587\u4ef6, \u8f93\u5165video\u7684\u5730\u5740, \u8f93\u51fakpts.\n    :param video_file:\n    :return:\n    \"\"\"", "\n", "detclass", "=", "Detector", "(", "video_file", ")", "\n", "kpts", "=", "[", "]", "\n", "im_names_desc", "=", "range", "(", "detclass", ".", "data_loader", ".", "length", "(", ")", ")", "\n", "for", "i", "in", "im_names_desc", ":", "\n", "        ", "kpts", ".", "append", "(", "detclass", ".", "get_kpt", "(", ")", ")", "\n", "", "print", "(", "\"---------------- finish kpts ............\"", ")", "\n", "return", "kpts", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.pPose_nms.pose_nms": [[23, 121], ["np.delete.clone", "np.delete.clone", "np.delete.clone", "np.delete.mean", "numpy.arange", "range", "numpy.maximum", "torch.argmax", "pick.append", "pPose_nms.get_parametric_distance", "pPose_nms.PCK_match", "merge_ids.append", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "len", "len", "len", "numpy.arange", "torch.max", "pPose_nms.p_merge_fast", "torch.max", "max", "min", "max", "min", "final_result.append", "torch.from_numpy", "numpy.arange", "torch.mean", "max"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.get_parametric_distance", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.PCK_match", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.p_merge_fast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["def", "pose_nms", "(", "bboxes", ",", "bbox_scores", ",", "pose_preds", ",", "pose_scores", ")", ":", "\n", "    ", "'''\n    Parametric Pose NMS algorithm\n    bboxes:         bbox locations list (n, 4)\n    bbox_scores:    bbox scores list (n,)\n    pose_preds:     pose locations list (n, 17, 2)\n    pose_scores:    pose scores list    (n, 17, 1)\n    '''", "\n", "#global ori_pose_preds, ori_pose_scores, ref_dists", "\n", "\n", "pose_scores", "[", "pose_scores", "==", "0", "]", "=", "1e-5", "\n", "\n", "final_result", "=", "[", "]", "\n", "\n", "ori_bbox_scores", "=", "bbox_scores", ".", "clone", "(", ")", "\n", "ori_pose_preds", "=", "pose_preds", ".", "clone", "(", ")", "\n", "ori_pose_scores", "=", "pose_scores", ".", "clone", "(", ")", "\n", "\n", "xmax", "=", "bboxes", "[", ":", ",", "2", "]", "\n", "xmin", "=", "bboxes", "[", ":", ",", "0", "]", "\n", "ymax", "=", "bboxes", "[", ":", ",", "3", "]", "\n", "ymin", "=", "bboxes", "[", ":", ",", "1", "]", "\n", "\n", "widths", "=", "xmax", "-", "xmin", "\n", "heights", "=", "ymax", "-", "ymin", "\n", "ref_dists", "=", "alpha", "*", "np", ".", "maximum", "(", "widths", ",", "heights", ")", "\n", "\n", "nsamples", "=", "bboxes", ".", "shape", "[", "0", "]", "\n", "human_scores", "=", "pose_scores", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "human_ids", "=", "np", ".", "arange", "(", "nsamples", ")", "\n", "# Do pPose-NMS", "\n", "pick", "=", "[", "]", "\n", "merge_ids", "=", "[", "]", "\n", "while", "(", "human_scores", ".", "shape", "[", "0", "]", "!=", "0", ")", ":", "\n", "# Pick the one with highest score", "\n", "        ", "pick_id", "=", "torch", ".", "argmax", "(", "human_scores", ")", "\n", "pick", ".", "append", "(", "human_ids", "[", "pick_id", "]", ")", "\n", "# num_visPart = torch.sum(pose_scores[pick_id] > 0.2)", "\n", "\n", "# Get numbers of match keypoints by calling PCK_match", "\n", "ref_dist", "=", "ref_dists", "[", "human_ids", "[", "pick_id", "]", "]", "\n", "simi", "=", "get_parametric_distance", "(", "pick_id", ",", "pose_preds", ",", "pose_scores", ",", "ref_dist", ")", "\n", "num_match_keypoints", "=", "PCK_match", "(", "pose_preds", "[", "pick_id", "]", ",", "pose_preds", ",", "ref_dist", ")", "\n", "\n", "# Delete humans who have more than matchThreds keypoints overlap and high similarity", "\n", "delete_ids", "=", "torch", ".", "from_numpy", "(", "np", ".", "arange", "(", "human_scores", ".", "shape", "[", "0", "]", ")", ")", "[", "(", "simi", ">", "gamma", ")", "|", "(", "num_match_keypoints", ">=", "matchThreds", ")", "]", "\n", "\n", "if", "delete_ids", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "delete_ids", "=", "pick_id", "\n", "#else:", "\n", "#    delete_ids = torch.from_numpy(delete_ids)", "\n", "\n", "", "merge_ids", ".", "append", "(", "human_ids", "[", "delete_ids", "]", ")", "\n", "pose_preds", "=", "np", ".", "delete", "(", "pose_preds", ",", "delete_ids", ",", "axis", "=", "0", ")", "\n", "pose_scores", "=", "np", ".", "delete", "(", "pose_scores", ",", "delete_ids", ",", "axis", "=", "0", ")", "\n", "human_ids", "=", "np", ".", "delete", "(", "human_ids", ",", "delete_ids", ")", "\n", "human_scores", "=", "np", ".", "delete", "(", "human_scores", ",", "delete_ids", ",", "axis", "=", "0", ")", "\n", "bbox_scores", "=", "np", ".", "delete", "(", "bbox_scores", ",", "delete_ids", ",", "axis", "=", "0", ")", "\n", "\n", "", "assert", "len", "(", "merge_ids", ")", "==", "len", "(", "pick", ")", "\n", "preds_pick", "=", "ori_pose_preds", "[", "pick", "]", "\n", "scores_pick", "=", "ori_pose_scores", "[", "pick", "]", "\n", "bbox_scores_pick", "=", "ori_bbox_scores", "[", "pick", "]", "\n", "#final_result = pool.map(filter_result, zip(scores_pick, merge_ids, preds_pick, pick, bbox_scores_pick))", "\n", "#final_result = [item for item in final_result if item is not None]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "pick", ")", ")", ":", "\n", "        ", "ids", "=", "np", ".", "arange", "(", "17", ")", "\n", "max_score", "=", "torch", ".", "max", "(", "scores_pick", "[", "j", ",", "ids", ",", "0", "]", ")", "\n", "\n", "if", "max_score", "<", "scoreThreds", ":", "\n", "            ", "continue", "\n", "\n", "# Merge poses", "\n", "", "merge_id", "=", "merge_ids", "[", "j", "]", "\n", "merge_pose", ",", "merge_score", "=", "p_merge_fast", "(", "\n", "preds_pick", "[", "j", "]", ",", "ori_pose_preds", "[", "merge_id", "]", ",", "ori_pose_scores", "[", "merge_id", "]", ",", "ref_dists", "[", "pick", "[", "j", "]", "]", ")", "\n", "\n", "max_score", "=", "torch", ".", "max", "(", "merge_score", "[", "ids", "]", ")", "\n", "if", "max_score", "<", "scoreThreds", ":", "\n", "            ", "continue", "\n", "\n", "", "xmax", "=", "max", "(", "merge_pose", "[", ":", ",", "0", "]", ")", "\n", "xmin", "=", "min", "(", "merge_pose", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "max", "(", "merge_pose", "[", ":", ",", "1", "]", ")", "\n", "ymin", "=", "min", "(", "merge_pose", "[", ":", ",", "1", "]", ")", "\n", "\n", "if", "(", "1.5", "**", "2", "*", "(", "xmax", "-", "xmin", ")", "*", "(", "ymax", "-", "ymin", ")", "<", "areaThres", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "final_result", ".", "append", "(", "{", "\n", "'keypoints'", ":", "merge_pose", "-", "0.3", ",", "\n", "'kp_score'", ":", "merge_score", ",", "\n", "'proposal_score'", ":", "torch", ".", "mean", "(", "merge_score", ")", "+", "bbox_scores_pick", "[", "j", "]", "+", "1.25", "*", "max", "(", "merge_score", ")", "\n", "}", ")", "\n", "\n", "", "return", "final_result", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.pPose_nms.filter_result": [[123, 152], ["numpy.arange", "torch.max", "pPose_nms.p_merge_fast", "torch.max", "max", "min", "max", "min", "torch.mean", "max"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.p_merge_fast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "filter_result", "(", "args", ")", ":", "\n", "    ", "score_pick", ",", "merge_id", ",", "pred_pick", ",", "pick", ",", "bbox_score_pick", "=", "args", "\n", "global", "ori_pose_preds", ",", "ori_pose_scores", ",", "ref_dists", "\n", "ids", "=", "np", ".", "arange", "(", "17", ")", "\n", "max_score", "=", "torch", ".", "max", "(", "score_pick", "[", "ids", ",", "0", "]", ")", "\n", "\n", "if", "max_score", "<", "scoreThreds", ":", "\n", "        ", "return", "None", "\n", "\n", "# Merge poses", "\n", "", "merge_pose", ",", "merge_score", "=", "p_merge_fast", "(", "\n", "pred_pick", ",", "ori_pose_preds", "[", "merge_id", "]", ",", "ori_pose_scores", "[", "merge_id", "]", ",", "ref_dists", "[", "pick", "]", ")", "\n", "\n", "max_score", "=", "torch", ".", "max", "(", "merge_score", "[", "ids", "]", ")", "\n", "if", "max_score", "<", "scoreThreds", ":", "\n", "        ", "return", "None", "\n", "\n", "", "xmax", "=", "max", "(", "merge_pose", "[", ":", ",", "0", "]", ")", "\n", "xmin", "=", "min", "(", "merge_pose", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "max", "(", "merge_pose", "[", ":", ",", "1", "]", ")", "\n", "ymin", "=", "min", "(", "merge_pose", "[", ":", ",", "1", "]", ")", "\n", "\n", "if", "(", "1.5", "**", "2", "*", "(", "xmax", "-", "xmin", ")", "*", "(", "ymax", "-", "ymin", ")", "<", "40", "*", "40.5", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "return", "{", "\n", "'keypoints'", ":", "merge_pose", "-", "0.3", ",", "\n", "'kp_score'", ":", "merge_score", ",", "\n", "'proposal_score'", ":", "torch", ".", "mean", "(", "merge_score", ")", "+", "bbox_score_pick", "+", "1.25", "*", "max", "(", "merge_score", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.pPose_nms.p_merge": [[155, 200], ["torch.sqrt", "min", "torch.zeros", "torch.zeros", "range", "torch.sum", "cluster_preds.dim", "cluster_preds.unsqueeze_", "cluster_scores.unsqueeze_", "mask.dim", "mask.unsqueeze_", "[].view", "torch.dot", "torch.dot", "torch.dot", "torch.pow", "torch.sum", "normed_scores.squeeze", "normed_scores.squeeze", "cluster_joint_scores.transpose().squeeze", "normed_scores.squeeze", "torch.sum", "cluster_joint_scores.transpose", "mask[].unsqueeze().repeat", "mask[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "p_merge", "(", "ref_pose", ",", "cluster_preds", ",", "cluster_scores", ",", "ref_dist", ")", ":", "\n", "    ", "'''\n    Score-weighted pose merging\n    INPUT:\n        ref_pose:       reference pose          -- [17, 2]\n        cluster_preds:  redundant poses         -- [n, 17, 2]\n        cluster_scores: redundant poses score   -- [n, 17, 1]\n        ref_dist:       reference scale         -- Constant\n    OUTPUT:\n        final_pose:     merged pose             -- [17, 2]\n        final_score:    merged score            -- [17]\n    '''", "\n", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "ref_pose", "[", "np", ".", "newaxis", ",", ":", "]", "-", "cluster_preds", ",", "2", ")", ",", "\n", "dim", "=", "2", "\n", ")", ")", "# [n, 17]", "\n", "\n", "kp_num", "=", "17", "\n", "ref_dist", "=", "min", "(", "ref_dist", ",", "15", ")", "\n", "\n", "mask", "=", "(", "dist", "<=", "ref_dist", ")", "\n", "final_pose", "=", "torch", ".", "zeros", "(", "kp_num", ",", "2", ")", "\n", "final_score", "=", "torch", ".", "zeros", "(", "kp_num", ")", "\n", "\n", "if", "cluster_preds", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "cluster_preds", ".", "unsqueeze_", "(", "0", ")", "\n", "cluster_scores", ".", "unsqueeze_", "(", "0", ")", "\n", "", "if", "mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "mask", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "kp_num", ")", ":", "\n", "        ", "cluster_joint_scores", "=", "cluster_scores", "[", ":", ",", "i", "]", "[", "mask", "[", ":", ",", "i", "]", "]", "# [k, 1]", "\n", "cluster_joint_location", "=", "cluster_preds", "[", ":", ",", "i", ",", ":", "]", "[", "mask", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "repeat", "(", "1", ",", "2", ")", "]", ".", "view", "(", "(", "torch", ".", "sum", "(", "mask", "[", ":", ",", "i", "]", ")", ",", "-", "1", ")", ")", "\n", "\n", "# Get an normalized score", "\n", "normed_scores", "=", "cluster_joint_scores", "/", "torch", ".", "sum", "(", "cluster_joint_scores", ")", "\n", "\n", "# Merge poses by a weighted sum", "\n", "final_pose", "[", "i", ",", "0", "]", "=", "torch", ".", "dot", "(", "cluster_joint_location", "[", ":", ",", "0", "]", ",", "normed_scores", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "final_pose", "[", "i", ",", "1", "]", "=", "torch", ".", "dot", "(", "cluster_joint_location", "[", ":", ",", "1", "]", ",", "normed_scores", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "\n", "final_score", "[", "i", "]", "=", "torch", ".", "dot", "(", "cluster_joint_scores", ".", "transpose", "(", "0", ",", "1", ")", ".", "squeeze", "(", "0", ")", ",", "normed_scores", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "\n", "", "return", "final_pose", ",", "final_score", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.pPose_nms.p_merge_fast": [[202, 239], ["torch.sqrt", "min", "torch.zeros", "torch.zeros", "cluster_scores.mul", "torch.mul().sum", "torch.mul().sum", "torch.sum", "cluster_preds.dim", "cluster_preds.unsqueeze_", "cluster_scores.unsqueeze_", "mask.dim", "mask.unsqueeze_", "mask.float().unsqueeze", "torch.sum", "torch.pow", "torch.mul", "torch.mul", "mask.float", "normed_scores.repeat"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "p_merge_fast", "(", "ref_pose", ",", "cluster_preds", ",", "cluster_scores", ",", "ref_dist", ")", ":", "\n", "    ", "'''\n    Score-weighted pose merging\n    INPUT:\n        ref_pose:       reference pose          -- [17, 2]\n        cluster_preds:  redundant poses         -- [n, 17, 2]\n        cluster_scores: redundant poses score   -- [n, 17, 1]\n        ref_dist:       reference scale         -- Constant\n    OUTPUT:\n        final_pose:     merged pose             -- [17, 2]\n        final_score:    merged score            -- [17]\n    '''", "\n", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "ref_pose", "[", "np", ".", "newaxis", ",", ":", "]", "-", "cluster_preds", ",", "2", ")", ",", "\n", "dim", "=", "2", "\n", ")", ")", "\n", "\n", "kp_num", "=", "17", "\n", "ref_dist", "=", "min", "(", "ref_dist", ",", "15", ")", "\n", "\n", "mask", "=", "(", "dist", "<=", "ref_dist", ")", "\n", "final_pose", "=", "torch", ".", "zeros", "(", "kp_num", ",", "2", ")", "\n", "final_score", "=", "torch", ".", "zeros", "(", "kp_num", ")", "\n", "\n", "if", "cluster_preds", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "cluster_preds", ".", "unsqueeze_", "(", "0", ")", "\n", "cluster_scores", ".", "unsqueeze_", "(", "0", ")", "\n", "", "if", "mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "mask", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "# Weighted Merge", "\n", "", "masked_scores", "=", "cluster_scores", ".", "mul", "(", "mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "normed_scores", "=", "masked_scores", "/", "torch", ".", "sum", "(", "masked_scores", ",", "dim", "=", "0", ")", "\n", "\n", "final_pose", "=", "torch", ".", "mul", "(", "cluster_preds", ",", "normed_scores", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "final_score", "=", "torch", ".", "mul", "(", "masked_scores", ",", "normed_scores", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "return", "final_pose", ",", "final_score", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.pPose_nms.get_parametric_distance": [[241, 266], ["torch.sqrt", "torch.zeros", "keypoint_scores.squeeze_", "pred_scores.repeat().transpose.repeat().transpose", "torch.exp", "torch.sum", "keypoint_scores.dim", "keypoint_scores.unsqueeze_", "pred_scores.repeat().transpose.dim", "pred_scores.repeat().transpose.unsqueeze_", "torch.tanh", "torch.tanh", "torch.sum", "torch.pow", "pred_scores.repeat().transpose.repeat", "torch.sum"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "get_parametric_distance", "(", "i", ",", "all_preds", ",", "keypoint_scores", ",", "ref_dist", ")", ":", "\n", "    ", "pick_preds", "=", "all_preds", "[", "i", "]", "\n", "pred_scores", "=", "keypoint_scores", "[", "i", "]", "\n", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "pick_preds", "[", "np", ".", "newaxis", ",", ":", "]", "-", "all_preds", ",", "2", ")", ",", "\n", "dim", "=", "2", "\n", ")", ")", "\n", "mask", "=", "(", "dist", "<=", "1", ")", "\n", "\n", "# Define a keypoints distance", "\n", "score_dists", "=", "torch", ".", "zeros", "(", "all_preds", ".", "shape", "[", "0", "]", ",", "17", ")", "\n", "keypoint_scores", ".", "squeeze_", "(", ")", "\n", "if", "keypoint_scores", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "keypoint_scores", ".", "unsqueeze_", "(", "0", ")", "\n", "", "if", "pred_scores", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "pred_scores", ".", "unsqueeze_", "(", "1", ")", "\n", "# The predicted scores are repeated up to do broadcast", "\n", "", "pred_scores", "=", "pred_scores", ".", "repeat", "(", "1", ",", "all_preds", ".", "shape", "[", "0", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "score_dists", "[", "mask", "]", "=", "torch", ".", "tanh", "(", "pred_scores", "[", "mask", "]", "/", "delta1", ")", "*", "torch", ".", "tanh", "(", "keypoint_scores", "[", "mask", "]", "/", "delta1", ")", "\n", "\n", "point_dist", "=", "torch", ".", "exp", "(", "(", "-", "1", ")", "*", "dist", "/", "delta2", ")", "\n", "final_dist", "=", "torch", ".", "sum", "(", "score_dists", ",", "dim", "=", "1", ")", "+", "mu", "*", "torch", ".", "sum", "(", "point_dist", ",", "dim", "=", "1", ")", "\n", "\n", "return", "final_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.pPose_nms.PCK_match": [[268, 280], ["torch.sqrt", "min", "torch.sum", "torch.sum", "torch.pow"], "function", ["None"], ["", "def", "PCK_match", "(", "pick_pred", ",", "all_preds", ",", "ref_dist", ")", ":", "\n", "    ", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "pick_pred", "[", "np", ".", "newaxis", ",", ":", "]", "-", "all_preds", ",", "2", ")", ",", "\n", "dim", "=", "2", "\n", ")", ")", "\n", "ref_dist", "=", "min", "(", "ref_dist", ",", "7", ")", "\n", "num_match_keypoints", "=", "torch", ".", "sum", "(", "\n", "dist", "/", "ref_dist", "<=", "1", ",", "\n", "dim", "=", "1", "\n", ")", "\n", "\n", "return", "num_match_keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.pPose_nms.write_json": [[282, 363], ["range", "float", "open", "json_file.write", "json_results_cmu.keys", "int", "keypoints.append", "keypoints.append", "keypoints.append", "result[].append", "result[].append", "result[].append", "[].append", "os.path.join", "json.dumps", "os.path.exists", "os.mkdir", "open", "json_file.write", "json_results_cmu.keys", "open", "json_file.write", "im_name.split", "float", "float", "float", "json_results_cmu.keys", "tmp[].append", "tmp[].append", "tmp[].append", "result[].append", "result[].append", "result[].append", "[].append", "json_results.append", "os.path.join", "os.path.join", "open", "json_file.write", "os.path.join", "json.dumps", "os.path.exists", "os.mkdir", "os.path.join", "json.dumps", "[].split", "json_results_cmu.keys", "tmp[].append", "tmp[].append", "tmp[].append", "os.path.join", "json.dumps", "os.path.join", "os.path.join", "open", "json_file.write", "os.path.join", "json.dumps", "[].split", "name.split", "name.split", "im_name.split"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["", "def", "write_json", "(", "all_results", ",", "outputpath", ",", "for_eval", "=", "False", ")", ":", "\n", "    ", "'''\n    all_result: result dict of predictions\n    outputpath: output directory\n    '''", "\n", "form", "=", "opt", ".", "format", "\n", "json_results", "=", "[", "]", "\n", "json_results_cmu", "=", "{", "}", "\n", "for", "im_res", "in", "all_results", ":", "\n", "        ", "im_name", "=", "im_res", "[", "'imgname'", "]", "\n", "for", "human", "in", "im_res", "[", "'result'", "]", ":", "\n", "            ", "keypoints", "=", "[", "]", "\n", "result", "=", "{", "}", "\n", "if", "for_eval", ":", "\n", "                ", "result", "[", "'image_id'", "]", "=", "int", "(", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "'image_id'", "]", "=", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "result", "[", "'category_id'", "]", "=", "1", "\n", "\n", "kp_preds", "=", "human", "[", "'keypoints'", "]", "\n", "kp_scores", "=", "human", "[", "'kp_score'", "]", "\n", "pro_scores", "=", "human", "[", "'proposal_score'", "]", "\n", "for", "n", "in", "range", "(", "kp_scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "keypoints", ".", "append", "(", "float", "(", "kp_preds", "[", "n", ",", "0", "]", ")", ")", "\n", "keypoints", ".", "append", "(", "float", "(", "kp_preds", "[", "n", ",", "1", "]", ")", ")", "\n", "keypoints", ".", "append", "(", "float", "(", "kp_scores", "[", "n", "]", ")", ")", "\n", "", "result", "[", "'keypoints'", "]", "=", "keypoints", "\n", "result", "[", "'score'", "]", "=", "float", "(", "pro_scores", ")", "\n", "\n", "if", "form", "==", "'cmu'", ":", "# the form of CMU-Pose", "\n", "                ", "if", "result", "[", "'image_id'", "]", "not", "in", "json_results_cmu", ".", "keys", "(", ")", ":", "\n", "                    ", "json_results_cmu", "[", "result", "[", "'image_id'", "]", "]", "=", "{", "}", "\n", "json_results_cmu", "[", "result", "[", "'image_id'", "]", "]", "[", "'version'", "]", "=", "\"AlphaPose v0.2\"", "\n", "json_results_cmu", "[", "result", "[", "'image_id'", "]", "]", "[", "'bodies'", "]", "=", "[", "]", "\n", "", "tmp", "=", "{", "'joints'", ":", "[", "]", "}", "\n", "result", "[", "'keypoints'", "]", ".", "append", "(", "(", "result", "[", "'keypoints'", "]", "[", "15", "]", "+", "result", "[", "'keypoints'", "]", "[", "18", "]", ")", "/", "2", ")", "\n", "result", "[", "'keypoints'", "]", ".", "append", "(", "(", "result", "[", "'keypoints'", "]", "[", "16", "]", "+", "result", "[", "'keypoints'", "]", "[", "19", "]", ")", "/", "2", ")", "\n", "result", "[", "'keypoints'", "]", ".", "append", "(", "(", "result", "[", "'keypoints'", "]", "[", "17", "]", "+", "result", "[", "'keypoints'", "]", "[", "20", "]", ")", "/", "2", ")", "\n", "indexarr", "=", "[", "0", ",", "51", ",", "18", ",", "24", ",", "30", ",", "15", ",", "21", ",", "27", ",", "36", ",", "42", ",", "48", ",", "33", ",", "39", ",", "45", ",", "6", ",", "3", ",", "12", ",", "9", "]", "\n", "for", "i", "in", "indexarr", ":", "\n", "                    ", "tmp", "[", "'joints'", "]", ".", "append", "(", "result", "[", "'keypoints'", "]", "[", "i", "]", ")", "\n", "tmp", "[", "'joints'", "]", ".", "append", "(", "result", "[", "'keypoints'", "]", "[", "i", "+", "1", "]", ")", "\n", "tmp", "[", "'joints'", "]", ".", "append", "(", "result", "[", "'keypoints'", "]", "[", "i", "+", "2", "]", ")", "\n", "", "json_results_cmu", "[", "result", "[", "'image_id'", "]", "]", "[", "'bodies'", "]", ".", "append", "(", "tmp", ")", "\n", "", "elif", "form", "==", "'open'", ":", "# the form of OpenPose", "\n", "                ", "if", "result", "[", "'image_id'", "]", "not", "in", "json_results_cmu", ".", "keys", "(", ")", ":", "\n", "                    ", "json_results_cmu", "[", "result", "[", "'image_id'", "]", "]", "=", "{", "}", "\n", "json_results_cmu", "[", "result", "[", "'image_id'", "]", "]", "[", "'version'", "]", "=", "\"AlphaPose v0.2\"", "\n", "json_results_cmu", "[", "result", "[", "'image_id'", "]", "]", "[", "'people'", "]", "=", "[", "]", "\n", "", "tmp", "=", "{", "'pose_keypoints_2d'", ":", "[", "]", "}", "\n", "result", "[", "'keypoints'", "]", ".", "append", "(", "(", "result", "[", "'keypoints'", "]", "[", "15", "]", "+", "result", "[", "'keypoints'", "]", "[", "18", "]", ")", "/", "2", ")", "\n", "result", "[", "'keypoints'", "]", ".", "append", "(", "(", "result", "[", "'keypoints'", "]", "[", "16", "]", "+", "result", "[", "'keypoints'", "]", "[", "19", "]", ")", "/", "2", ")", "\n", "result", "[", "'keypoints'", "]", ".", "append", "(", "(", "result", "[", "'keypoints'", "]", "[", "17", "]", "+", "result", "[", "'keypoints'", "]", "[", "20", "]", ")", "/", "2", ")", "\n", "indexarr", "=", "[", "0", ",", "51", ",", "18", ",", "24", ",", "30", ",", "15", ",", "21", ",", "27", ",", "36", ",", "42", ",", "48", ",", "33", ",", "39", ",", "45", ",", "6", ",", "3", ",", "12", ",", "9", "]", "\n", "for", "i", "in", "indexarr", ":", "\n", "                    ", "tmp", "[", "'pose_keypoints_2d'", "]", ".", "append", "(", "result", "[", "'keypoints'", "]", "[", "i", "]", ")", "\n", "tmp", "[", "'pose_keypoints_2d'", "]", ".", "append", "(", "result", "[", "'keypoints'", "]", "[", "i", "+", "1", "]", ")", "\n", "tmp", "[", "'pose_keypoints_2d'", "]", ".", "append", "(", "result", "[", "'keypoints'", "]", "[", "i", "+", "2", "]", ")", "\n", "", "json_results_cmu", "[", "result", "[", "'image_id'", "]", "]", "[", "'people'", "]", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "json_results", ".", "append", "(", "result", ")", "\n", "\n", "", "", "", "if", "form", "==", "'cmu'", ":", "# the form of CMU-Pose", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'alphapose-results.json'", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "            ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "json_results_cmu", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'sep-json'", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'sep-json'", ")", ")", "\n", "", "for", "name", "in", "json_results_cmu", ".", "keys", "(", ")", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'sep-json'", ",", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "                    ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "json_results_cmu", "[", "name", "]", ")", ")", "\n", "", "", "", "", "elif", "form", "==", "'open'", ":", "# the form of OpenPose", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'alphapose-results.json'", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "            ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "json_results_cmu", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'sep-json'", ")", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'sep-json'", ")", ")", "\n", "", "for", "name", "in", "json_results_cmu", ".", "keys", "(", ")", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'sep-json'", ",", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.json'", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "                    ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "json_results_cmu", "[", "name", "]", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'alphapose-results.json'", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "            ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "json_results", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.webcam_demo.loop": [[19, 24], ["None"], "function", ["None"], ["def", "loop", "(", ")", ":", "\n", "    ", "n", "=", "0", "\n", "while", "True", ":", "\n", "        ", "yield", "n", "\n", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.online_demo.loop": [[30, 35], ["None"], "function", ["None"], ["def", "loop", "(", ")", ":", "\n", "    ", "n", "=", "0", "\n", "while", "True", ":", "\n", "        ", "yield", "n", "\n", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamLoader.__init__": [[38, 48], ["cv2.VideoCapture", "dataloader_webcam.WebcamLoader.stream.isOpened", "LifoQueue", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "webcam", ",", "batchSize", "=", "1", ",", "queueSize", "=", "256", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "stream", "=", "cv2", ".", "VideoCapture", "(", "int", "(", "webcam", ")", ")", "\n", "assert", "self", ".", "stream", ".", "isOpened", "(", ")", ",", "'Cannot capture source'", "\n", "self", ".", "stopped", "=", "False", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "Q", "=", "LifoQueue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamLoader.start": [[49, 55], ["threading.Thread", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamLoader.update": [[56, 92], ["dataloader_webcam.WebcamLoader.Q.full", "range", "dataloader_webcam.WebcamLoader.stream.read", "int", "yolo.preprocess.prep_frame", "torch.cat.append", "torch.cat.append", "torch.cat.append", "orig_img.append", "im_name.append", "torch.FloatTensor().repeat.append", "torch.FloatTensor().repeat.append", "torch.FloatTensor().repeat.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "dataloader_webcam.WebcamLoader.Q.put", "dataloader_webcam.WebcamLoader.Q.queue.clear", "dataloader_webcam.WebcamLoader.stop", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_frame", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.stop"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping infinitely", "\n", "        ", "i", "=", "0", "\n", "while", "True", ":", "\n", "# otherwise, ensure the queue has room in it", "\n", "            ", "if", "not", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                ", "img", "=", "[", "]", "\n", "orig_img", "=", "[", "]", "\n", "im_name", "=", "[", "]", "\n", "im_dim_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "batchSize", ")", ":", "\n", "                    ", "(", "grabbed", ",", "frame", ")", "=", "self", ".", "stream", ".", "read", "(", ")", "\n", "# if the `grabbed` boolean is `False`, then we have", "\n", "# reached the end of the video file", "\n", "if", "not", "grabbed", ":", "\n", "                        ", "self", ".", "stop", "(", ")", "\n", "return", "\n", "", "inp_dim", "=", "int", "(", "opt", ".", "inp_dim", ")", "\n", "img_k", ",", "orig_img_k", ",", "im_dim_list_k", "=", "prep_frame", "(", "frame", ",", "inp_dim", ")", "\n", "\n", "img", ".", "append", "(", "img_k", ")", "\n", "orig_img", ".", "append", "(", "orig_img_k", ")", "\n", "im_name", ".", "append", "(", "str", "(", "i", ")", "+", "'.jpg'", ")", "\n", "im_dim_list", ".", "append", "(", "im_dim_list_k", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Human Detection", "\n", "                    ", "img", "=", "torch", ".", "cat", "(", "img", ")", "\n", "im_dim_list", "=", "torch", ".", "FloatTensor", "(", "im_dim_list", ")", ".", "repeat", "(", "1", ",", "2", ")", "\n", "\n", "self", ".", "Q", ".", "put", "(", "(", "img", ",", "orig_img", ",", "im_name", ",", "im_dim_list", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "", "else", ":", "\n", "                ", "with", "self", ".", "Q", ".", "mutex", ":", "\n", "                    ", "self", ".", "Q", ".", "queue", ".", "clear", "(", ")", "\n", "", "", "", "", "def", "videoinfo", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamLoader.videoinfo": [[92, 98], ["int", "dataloader_webcam.WebcamLoader.stream.get", "dataloader_webcam.WebcamLoader.stream.get", "int", "int", "dataloader_webcam.WebcamLoader.stream.get", "dataloader_webcam.WebcamLoader.stream.get"], "methods", ["None"], ["", "", "", "", "def", "videoinfo", "(", "self", ")", ":", "\n", "# indicate the video info", "\n", "        ", "fourcc", "=", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FOURCC", ")", ")", "\n", "fps", "=", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "frameSize", "=", "(", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", ",", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", ")", "\n", "return", "(", "fourcc", ",", "fps", ",", "frameSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamLoader.getitem": [[99, 102], ["dataloader_webcam.WebcamLoader.Q.get"], "methods", ["None"], ["", "def", "getitem", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamLoader.len": [[103, 106], ["dataloader_webcam.WebcamLoader.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "# return queue size", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamLoader.stop": [[107, 110], ["None"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "# indicate that the thread should be stopped", "\n", "        ", "self", ".", "stopped", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionLoader.__init__": [[113, 131], ["yolo.darknet.Darknet", "dataloader_webcam.DetectionLoader.det_model.load_weights", "int", "dataloader_webcam.DetectionLoader.det_model.cuda", "dataloader_webcam.DetectionLoader.det_model.eval", "LifoQueue"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.load_weights", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["    ", "def", "__init__", "(", "self", ",", "dataloder", ",", "batchSize", "=", "1", ",", "queueSize", "=", "1024", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "det_model", "=", "Darknet", "(", "\"yolo/cfg/yolov3-spp.cfg\"", ")", "\n", "self", ".", "det_model", ".", "load_weights", "(", "'models/yolo/yolov3-spp.weights'", ")", "\n", "self", ".", "det_model", ".", "net_info", "[", "'height'", "]", "=", "opt", ".", "inp_dim", "\n", "self", ".", "det_inp_dim", "=", "int", "(", "self", ".", "det_model", ".", "net_info", "[", "'height'", "]", ")", "\n", "assert", "self", ".", "det_inp_dim", "%", "32", "==", "0", "\n", "assert", "self", ".", "det_inp_dim", ">", "32", "\n", "self", ".", "det_model", ".", "cuda", "(", ")", "\n", "self", ".", "det_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "dataloder", "=", "dataloder", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "self", ".", "Q", "=", "LifoQueue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionLoader.start": [[132, 138], ["threading.Thread", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionLoader.update": [[139, 187], ["dataloader_webcam.DetectionLoader.dataloder.getitem", "range", "dataloader_webcam.DetectionLoader.dataloder.Q.queue.clear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "img.cuda.cuda.cuda", "dataloader_webcam.DetectionLoader.det_model", "yolo.util.dynamic_write_results", "dets.cpu.cpu.cpu", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "[].view", "range", "dataloader_webcam.DetectionLoader.len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.getitem", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.dynamic_write_results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping the whole dataset", "\n", "        ", "while", "True", ":", "\n", "            ", "img", ",", "orig_img", ",", "im_name", ",", "im_dim_list", "=", "self", ".", "dataloder", ".", "getitem", "(", ")", "\n", "with", "self", ".", "dataloder", ".", "Q", ".", "mutex", ":", "\n", "                ", "self", ".", "dataloder", ".", "Q", ".", "queue", ".", "clear", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Human Detection", "\n", "                ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "prediction", "=", "self", ".", "det_model", "(", "img", ",", "CUDA", "=", "True", ")", "\n", "# NMS process", "\n", "dets", "=", "dynamic_write_results", "(", "prediction", ",", "opt", ".", "confidence", ",", "\n", "opt", ".", "num_classes", ",", "nms", "=", "True", ",", "nms_conf", "=", "opt", ".", "nms_thesh", ")", "\n", "if", "isinstance", "(", "dets", ",", "int", ")", "or", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "for", "k", "in", "range", "(", "len", "(", "orig_img", ")", ")", ":", "\n", "                        ", "if", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                            ", "time", ".", "sleep", "(", "2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "orig_img", "[", "k", "]", ",", "im_name", "[", "k", "]", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", ")", "\n", "", "continue", "\n", "", "dets", "=", "dets", ".", "cpu", "(", ")", "\n", "im_dim_list", "=", "torch", ".", "index_select", "(", "im_dim_list", ",", "0", ",", "dets", "[", ":", ",", "0", "]", ".", "long", "(", ")", ")", "\n", "scaling_factor", "=", "torch", ".", "min", "(", "self", ".", "det_inp_dim", "/", "im_dim_list", ",", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# coordinate transfer", "\n", "dets", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "(", "self", ".", "det_inp_dim", "-", "scaling_factor", "*", "im_dim_list", "[", ":", ",", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "/", "2", "\n", "dets", "[", ":", ",", "[", "2", ",", "4", "]", "]", "-=", "(", "self", ".", "det_inp_dim", "-", "scaling_factor", "*", "im_dim_list", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "/", "2", "\n", "\n", "\n", "dets", "[", ":", ",", "1", ":", "5", "]", "/=", "scaling_factor", "\n", "for", "j", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "dets", "[", "j", ",", "[", "1", ",", "3", "]", "]", "=", "torch", ".", "clamp", "(", "dets", "[", "j", ",", "[", "1", ",", "3", "]", "]", ",", "0.0", ",", "im_dim_list", "[", "j", ",", "0", "]", ")", "\n", "dets", "[", "j", ",", "[", "2", ",", "4", "]", "]", "=", "torch", ".", "clamp", "(", "dets", "[", "j", ",", "[", "2", ",", "4", "]", "]", ",", "0.0", ",", "im_dim_list", "[", "j", ",", "1", "]", ")", "\n", "", "boxes", "=", "dets", "[", ":", ",", "1", ":", "5", "]", "\n", "scores", "=", "dets", "[", ":", ",", "5", ":", "6", "]", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "orig_img", ")", ")", ":", "\n", "                ", "boxes_k", "=", "boxes", "[", "dets", "[", ":", ",", "0", "]", "==", "k", "]", "\n", "if", "isinstance", "(", "boxes_k", ",", "int", ")", "or", "boxes_k", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "if", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                        ", "time", ".", "sleep", "(", "2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "orig_img", "[", "k", "]", ",", "im_name", "[", "k", "]", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", ")", "\n", "continue", "\n", "", "inps", "=", "torch", ".", "zeros", "(", "boxes_k", ".", "size", "(", "0", ")", ",", "3", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ")", "\n", "pt1", "=", "torch", ".", "zeros", "(", "boxes_k", ".", "size", "(", "0", ")", ",", "2", ")", "\n", "pt2", "=", "torch", ".", "zeros", "(", "boxes_k", ".", "size", "(", "0", ")", ",", "2", ")", "\n", "if", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "orig_img", "[", "k", "]", ",", "im_name", "[", "k", "]", ",", "boxes_k", ",", "scores", "[", "dets", "[", ":", ",", "0", "]", "==", "k", "]", ",", "inps", ",", "pt1", ",", "pt2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionLoader.read": [[188, 191], ["dataloader_webcam.DetectionLoader.Q.get"], "methods", ["None"], ["", "", "", "def", "read", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionLoader.len": [[192, 195], ["dataloader_webcam.DetectionLoader.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "# return queue len", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionProcessor.__init__": [[198, 206], ["LifoQueue"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "detectionLoader", ",", "queueSize", "=", "1024", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "detectionLoader", "=", "detectionLoader", "\n", "self", ".", "stopped", "=", "False", "\n", "\n", "# initialize the queue used to store data", "\n", "self", ".", "Q", "=", "LifoQueue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionProcessor.start": [[207, 213], ["threading.Thread", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionProcessor.update": [[214, 233], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dataloader_webcam.DetectionProcessor.detectionLoader.read", "SPPE.src.utils.img.im_to_torch", "dataloader_webcam.crop_from_dets", "dataloader_webcam.DetectionProcessor.Q.full", "dataloader_webcam.DetectionProcessor.Q.put", "dataloader_webcam.DetectionProcessor.detectionLoader.Q.queue.clear", "dataloader_webcam.DetectionProcessor.Q.full", "dataloader_webcam.DetectionProcessor.Q.put", "cv2.cvtColor", "time.sleep", "boxes.nelement", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.crop_from_dets", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping the whole dataset", "\n", "        ", "while", "True", ":", "\n", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "(", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "inps", ",", "pt1", ",", "pt2", ")", "=", "self", ".", "detectionLoader", ".", "read", "(", ")", "\n", "with", "self", ".", "detectionLoader", ".", "Q", ".", "mutex", ":", "\n", "                    ", "self", ".", "detectionLoader", ".", "Q", ".", "queue", ".", "clear", "(", ")", "\n", "", "if", "boxes", "is", "None", "or", "boxes", ".", "nelement", "(", ")", "==", "0", ":", "\n", "                    ", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                        ", "time", ".", "sleep", "(", "0.2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "None", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "None", ",", "None", ")", ")", "\n", "continue", "\n", "", "inp", "=", "im_to_torch", "(", "cv2", ".", "cvtColor", "(", "orig_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "inps", ",", "pt1", ",", "pt2", "=", "crop_from_dets", "(", "inp", ",", "boxes", ",", "inps", ",", "pt1", ",", "pt2", ")", "\n", "\n", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "inps", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "pt1", ",", "pt2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionProcessor.read": [[234, 237], ["dataloader_webcam.DetectionProcessor.Q.get"], "methods", ["None"], ["", "", "", "def", "read", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DetectionProcessor.len": [[238, 241], ["dataloader_webcam.DetectionProcessor.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "# return queue len", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamDetectionLoader.__init__": [[244, 264], ["yolo.darknet.Darknet", "dataloader_webcam.WebcamDetectionLoader.det_model.load_weights", "int", "dataloader_webcam.WebcamDetectionLoader.det_model.cuda", "dataloader_webcam.WebcamDetectionLoader.det_model.eval", "cv2.VideoCapture", "dataloader_webcam.WebcamDetectionLoader.stream.isOpened", "LifoQueue", "int"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.load_weights", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["    ", "def", "__init__", "(", "self", ",", "webcam", "=", "0", ",", "batchSize", "=", "1", ",", "queueSize", "=", "256", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "det_model", "=", "Darknet", "(", "\"yolo/cfg/yolov3-spp.cfg\"", ")", "\n", "self", ".", "det_model", ".", "load_weights", "(", "'models/yolo/yolov3-spp.weights'", ")", "\n", "self", ".", "det_model", ".", "net_info", "[", "'height'", "]", "=", "opt", ".", "inp_dim", "\n", "self", ".", "det_inp_dim", "=", "int", "(", "self", ".", "det_model", ".", "net_info", "[", "'height'", "]", ")", "\n", "assert", "self", ".", "det_inp_dim", "%", "32", "==", "0", "\n", "assert", "self", ".", "det_inp_dim", ">", "32", "\n", "self", ".", "det_model", ".", "cuda", "(", ")", "\n", "self", ".", "det_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "stream", "=", "cv2", ".", "VideoCapture", "(", "int", "(", "webcam", ")", ")", "\n", "assert", "self", ".", "stream", ".", "isOpened", "(", ")", ",", "'Cannot open webcam'", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "self", ".", "Q", "=", "LifoQueue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamDetectionLoader.len": [[266, 268], ["dataloader_webcam.WebcamDetectionLoader.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamDetectionLoader.start": [[269, 275], ["threading.Thread", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamDetectionLoader.update": [[276, 337], ["range", "range", "dataloader_webcam.WebcamDetectionLoader.stream.read", "int", "yolo.preprocess.prep_frame", "SPPE.src.utils.img.im_to_torch", "torch.autograd.Variable().cuda.append", "inp.append", "orig_img.append", "torch.index_select.append", "torch.index_select.append", "torch.index_select.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "inp[].size", "inp[].size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.index_select.cuda", "torch.index_select.cuda", "torch.index_select.cuda", "dataloader_webcam.WebcamDetectionLoader.det_model", "yolo.util.dynamic_write_results", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "[].view", "range", "dets[].cpu", "dets[].cpu", "dataloader_webcam.WebcamDetectionLoader.len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_frame", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.dynamic_write_results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping", "\n", "        ", "while", "True", ":", "\n", "            ", "img", "=", "[", "]", "\n", "inp", "=", "[", "]", "\n", "orig_img", "=", "[", "]", "\n", "im_name", "=", "[", "]", "\n", "im_dim_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "batchSize", ")", ":", "\n", "                ", "(", "grabbed", ",", "frame", ")", "=", "self", ".", "stream", ".", "read", "(", ")", "\n", "if", "not", "grabbed", ":", "\n", "                    ", "continue", "\n", "# process and add the frame to the queue", "\n", "", "inp_dim", "=", "int", "(", "opt", ".", "inp_dim", ")", "\n", "img_k", ",", "orig_img_k", ",", "im_dim_list_k", "=", "prep_frame", "(", "frame", ",", "inp_dim", ")", "\n", "inp_k", "=", "im_to_torch", "(", "orig_img_k", ")", "\n", "\n", "img", ".", "append", "(", "img_k", ")", "\n", "inp", ".", "append", "(", "inp_k", ")", "\n", "orig_img", ".", "append", "(", "orig_img_k", ")", "\n", "im_dim_list", ".", "append", "(", "im_dim_list_k", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ht", "=", "inp", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "wd", "=", "inp", "[", "0", "]", ".", "size", "(", "2", ")", "\n", "# Human Detection", "\n", "img", "=", "Variable", "(", "torch", ".", "cat", "(", "img", ")", ")", ".", "cuda", "(", ")", "\n", "im_dim_list", "=", "torch", ".", "FloatTensor", "(", "im_dim_list", ")", ".", "repeat", "(", "1", ",", "2", ")", "\n", "im_dim_list", "=", "im_dim_list", ".", "cuda", "(", ")", "\n", "\n", "prediction", "=", "self", ".", "det_model", "(", "img", ",", "CUDA", "=", "True", ")", "\n", "# NMS process", "\n", "dets", "=", "dynamic_write_results", "(", "prediction", ",", "opt", ".", "confidence", ",", "\n", "opt", ".", "num_classes", ",", "nms", "=", "True", ",", "nms_conf", "=", "opt", ".", "nms_thesh", ")", "\n", "if", "isinstance", "(", "dets", ",", "int", ")", "or", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "for", "k", "in", "range", "(", "len", "(", "inp", ")", ")", ":", "\n", "                        ", "if", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                            ", "with", "self", ".", "Q", ".", "mutex", ":", "\n", "                                ", "self", ".", "Q", ".", "queue", ".", "clear", "(", ")", "\n", "", "", "self", ".", "Q", ".", "put", "(", "(", "inp", "[", "k", "]", ",", "orig_img", "[", "k", "]", ",", "None", ",", "None", ")", ")", "\n", "", "continue", "\n", "\n", "", "im_dim_list", "=", "torch", ".", "index_select", "(", "im_dim_list", ",", "0", ",", "dets", "[", ":", ",", "0", "]", ".", "long", "(", ")", ")", "\n", "scaling_factor", "=", "torch", ".", "min", "(", "self", ".", "det_inp_dim", "/", "im_dim_list", ",", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# coordinate transfer", "\n", "dets", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "(", "self", ".", "det_inp_dim", "-", "scaling_factor", "*", "im_dim_list", "[", ":", ",", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "/", "2", "\n", "dets", "[", ":", ",", "[", "2", ",", "4", "]", "]", "-=", "(", "self", ".", "det_inp_dim", "-", "scaling_factor", "*", "im_dim_list", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "/", "2", "\n", "\n", "dets", "[", ":", ",", "1", ":", "5", "]", "/=", "scaling_factor", "\n", "for", "j", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "dets", "[", "j", ",", "[", "1", ",", "3", "]", "]", "=", "torch", ".", "clamp", "(", "dets", "[", "j", ",", "[", "1", ",", "3", "]", "]", ",", "0.0", ",", "im_dim_list", "[", "j", ",", "0", "]", ")", "\n", "dets", "[", "j", ",", "[", "2", ",", "4", "]", "]", "=", "torch", ".", "clamp", "(", "dets", "[", "j", ",", "[", "2", ",", "4", "]", "]", ",", "0.0", ",", "im_dim_list", "[", "j", ",", "1", "]", ")", "\n", "", "boxes", "=", "dets", "[", ":", ",", "1", ":", "5", "]", ".", "cpu", "(", ")", "\n", "scores", "=", "dets", "[", ":", ",", "5", ":", "6", "]", ".", "cpu", "(", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "inp", ")", ")", ":", "\n", "                ", "if", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                    ", "with", "self", ".", "Q", ".", "mutex", ":", "\n", "                        ", "self", ".", "Q", ".", "queue", ".", "clear", "(", ")", "\n", "", "", "self", ".", "Q", ".", "put", "(", "(", "inp", "[", "k", "]", ",", "orig_img", "[", "k", "]", ",", "boxes", "[", "dets", "[", ":", ",", "0", "]", "==", "k", "]", ",", "scores", "[", "dets", "[", ":", ",", "0", "]", "==", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamDetectionLoader.videoinfo": [[338, 344], ["int", "dataloader_webcam.WebcamDetectionLoader.stream.get", "dataloader_webcam.WebcamDetectionLoader.stream.get", "int", "int", "dataloader_webcam.WebcamDetectionLoader.stream.get", "dataloader_webcam.WebcamDetectionLoader.stream.get"], "methods", ["None"], ["", "", "", "def", "videoinfo", "(", "self", ")", ":", "\n", "# indicate the video info", "\n", "        ", "fourcc", "=", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FOURCC", ")", ")", "\n", "fps", "=", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "frameSize", "=", "(", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", ",", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", ")", "\n", "return", "(", "fourcc", ",", "fps", ",", "frameSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamDetectionLoader.read": [[345, 348], ["dataloader_webcam.WebcamDetectionLoader.Q.get"], "methods", ["None"], ["", "def", "read", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamDetectionLoader.more": [[349, 352], ["dataloader_webcam.WebcamDetectionLoader.Q.qsize"], "methods", ["None"], ["", "def", "more", "(", "self", ")", ":", "\n", "# return True if there are still frames in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.WebcamDetectionLoader.stop": [[353, 356], ["None"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "# indicate that the thread should be stopped", "\n", "        ", "self", ".", "stopped", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DataWriter.__init__": [[360, 377], ["cv2.VideoWriter_fourcc", "multiprocessing.Queue", "cv2.VideoWriter", "dataloader_webcam.DataWriter.stream.isOpened", "os.path.exists", "os.mkdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "save_video", "=", "False", ",", "\n", "savepath", "=", "'examples/res/1.avi'", ",", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", ",", "fps", "=", "25", ",", "frameSize", "=", "(", "640", ",", "480", ")", ",", "\n", "queueSize", "=", "1024", ")", ":", "\n", "        ", "if", "save_video", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "            ", "self", ".", "stream", "=", "cv2", ".", "VideoWriter", "(", "savepath", ",", "fourcc", ",", "fps", ",", "frameSize", ")", "\n", "assert", "self", ".", "stream", ".", "isOpened", "(", ")", ",", "'Cannot open video for writing'", "\n", "", "self", ".", "save_video", "=", "save_video", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "final_result", "=", "[", "]", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "self", ".", "Q", "=", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "if", "opt", ".", "save_img", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "outputpath", "+", "'/vis'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "opt", ".", "outputpath", "+", "'/vis'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DataWriter.start": [[378, 384], ["threading.Thread", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "", "", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DataWriter.update": [[385, 431], ["dataloader_webcam.DataWriter.Q.empty", "dataloader_webcam.DataWriter.Q.get", "numpy.array", "time.sleep", "dataloader_webcam.DataWriter.stream.release", "SPPE.src.utils.eval.getPrediction", "pPose_nms.pose_nms", "dataloader_webcam.DataWriter.final_result.append", "vis_frame", "cv2.imshow", "cv2.waitKey", "cv2.imwrite", "dataloader_webcam.DataWriter.stream.write", "cv2.imshow", "cv2.waitKey", "cv2.imwrite", "dataloader_webcam.DataWriter.stream.write", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPrediction", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.pose_nms", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.vis_frame", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping infinitely", "\n", "        ", "while", "True", ":", "\n", "# if the thread indicator variable is set, stop the", "\n", "# thread", "\n", "            ", "if", "self", ".", "stopped", ":", "\n", "                ", "if", "self", ".", "save_video", ":", "\n", "                    ", "self", ".", "stream", ".", "release", "(", ")", "\n", "", "return", "\n", "# otherwise, ensure the queue is not empty", "\n", "", "if", "not", "self", ".", "Q", ".", "empty", "(", ")", ":", "\n", "                ", "(", "boxes", ",", "scores", ",", "hm_data", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ")", "=", "self", ".", "Q", ".", "get", "(", ")", "\n", "orig_img", "=", "np", ".", "array", "(", "orig_img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "boxes", "is", "None", ":", "\n", "                    ", "if", "opt", ".", "save_img", "or", "opt", ".", "save_video", "or", "opt", ".", "vis", ":", "\n", "                        ", "img", "=", "orig_img", "\n", "if", "opt", ".", "vis", ":", "\n", "                            ", "cv2", ".", "imshow", "(", "\"AlphaPose Demo\"", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "30", ")", "\n", "", "if", "opt", ".", "save_img", ":", "\n", "                            ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "outputpath", ",", "'vis'", ",", "im_name", ")", ",", "img", ")", "\n", "", "if", "opt", ".", "save_video", ":", "\n", "                            ", "self", ".", "stream", ".", "write", "(", "img", ")", "\n", "", "", "", "else", ":", "\n", "# location prediction (n, kp, 2) | score prediction (n, kp, 1)", "\n", "\n", "                    ", "preds_hm", ",", "preds_img", ",", "preds_scores", "=", "getPrediction", "(", "\n", "hm_data", ",", "pt1", ",", "pt2", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ",", "opt", ".", "outputResH", ",", "opt", ".", "outputResW", ")", "\n", "\n", "result", "=", "pose_nms", "(", "boxes", ",", "scores", ",", "preds_img", ",", "preds_scores", ")", "\n", "result", "=", "{", "\n", "'imgname'", ":", "im_name", ",", "\n", "'result'", ":", "result", "\n", "}", "\n", "self", ".", "final_result", ".", "append", "(", "result", ")", "\n", "if", "opt", ".", "save_img", "or", "opt", ".", "save_video", "or", "opt", ".", "vis", ":", "\n", "                        ", "img", "=", "vis_frame", "(", "orig_img", ",", "result", ")", "\n", "if", "opt", ".", "vis", ":", "\n", "                            ", "cv2", ".", "imshow", "(", "\"AlphaPose Demo\"", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "30", ")", "\n", "", "if", "opt", ".", "save_img", ":", "\n", "                            ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "outputpath", ",", "'vis'", ",", "im_name", ")", ",", "img", ")", "\n", "", "if", "opt", ".", "save_video", ":", "\n", "                            ", "self", ".", "stream", ".", "write", "(", "img", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DataWriter.running": [[432, 436], ["time.sleep", "dataloader_webcam.DataWriter.Q.empty"], "methods", ["None"], ["", "", "", "def", "running", "(", "self", ")", ":", "\n", "# indicate that the thread is still running", "\n", "        ", "time", ".", "sleep", "(", "0.2", ")", "\n", "return", "not", "self", ".", "Q", ".", "empty", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DataWriter.save": [[437, 440], ["dataloader_webcam.DataWriter.Q.put"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "boxes", ",", "scores", ",", "hm_data", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ")", ":", "\n", "# save next frame in the queue", "\n", "        ", "self", ".", "Q", ".", "put", "(", "(", "boxes", ",", "scores", ",", "hm_data", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DataWriter.stop": [[441, 445], ["time.sleep"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "# indicate that the thread should be stopped", "\n", "        ", "self", ".", "stopped", "=", "True", "\n", "time", ".", "sleep", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DataWriter.results": [[446, 449], ["None"], "methods", ["None"], ["", "def", "results", "(", "self", ")", ":", "\n", "# return final result", "\n", "        ", "return", "self", ".", "final_result", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.DataWriter.len": [[450, 453], ["dataloader_webcam.DataWriter.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "# return queue len", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.Mscoco.__init__": [[455, 477], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "sigma", "=", "1", ",", "\n", "scale_factor", "=", "(", "0.2", ",", "0.3", ")", ",", "rot_factor", "=", "40", ",", "label_type", "=", "'Gaussian'", ")", ":", "\n", "        ", "self", ".", "img_folder", "=", "'../data/coco/images'", "# root image folders", "\n", "self", ".", "is_train", "=", "train", "# training set or test set", "\n", "self", ".", "inputResH", "=", "opt", ".", "inputResH", "\n", "self", ".", "inputResW", "=", "opt", ".", "inputResW", "\n", "self", ".", "outputResH", "=", "opt", ".", "outputResH", "\n", "self", ".", "outputResW", "=", "opt", ".", "outputResW", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "rot_factor", "=", "rot_factor", "\n", "self", ".", "label_type", "=", "label_type", "\n", "\n", "self", ".", "nJoints_coco", "=", "17", "\n", "self", ".", "nJoints_mpii", "=", "16", "\n", "self", ".", "nJoints", "=", "33", "\n", "\n", "self", ".", "accIdxs", "=", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "\n", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ")", "\n", "self", ".", "flipRef", "=", "(", "(", "2", ",", "3", ")", ",", "(", "4", ",", "5", ")", ",", "(", "6", ",", "7", ")", ",", "\n", "(", "8", ",", "9", ")", ",", "(", "10", ",", "11", ")", ",", "(", "12", ",", "13", ")", ",", "\n", "(", "14", ",", "15", ")", ",", "(", "16", ",", "17", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.Mscoco.__getitem__": [[478, 480], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.Mscoco.__len__": [[481, 483], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader_webcam.crop_from_dets": [[485, 521], ["img.size", "img.size", "tmp_img[].add_", "tmp_img[].add_", "tmp_img[].add_", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "max", "max", "max", "max", "SPPE.src.utils.img.cropBox", "min", "min", "tmp_img.clone", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cropBox"], ["", "", "def", "crop_from_dets", "(", "img", ",", "boxes", ",", "inps", ",", "pt1", ",", "pt2", ")", ":", "\n", "    ", "'''\n    Crop human from origin image according to Dectecion Results\n    '''", "\n", "\n", "imght", "=", "img", ".", "size", "(", "1", ")", "\n", "imgwidth", "=", "img", ".", "size", "(", "2", ")", "\n", "tmp_img", "=", "img", "\n", "tmp_img", "[", "0", "]", ".", "add_", "(", "-", "0.406", ")", "\n", "tmp_img", "[", "1", "]", ".", "add_", "(", "-", "0.457", ")", "\n", "tmp_img", "[", "2", "]", ".", "add_", "(", "-", "0.480", ")", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "        ", "upLeft", "=", "torch", ".", "Tensor", "(", "\n", "(", "float", "(", "box", "[", "0", "]", ")", ",", "float", "(", "box", "[", "1", "]", ")", ")", ")", "\n", "bottomRight", "=", "torch", ".", "Tensor", "(", "\n", "(", "float", "(", "box", "[", "2", "]", ")", ",", "float", "(", "box", "[", "3", "]", ")", ")", ")", "\n", "\n", "ht", "=", "bottomRight", "[", "1", "]", "-", "upLeft", "[", "1", "]", "\n", "width", "=", "bottomRight", "[", "0", "]", "-", "upLeft", "[", "0", "]", "\n", "if", "width", ">", "100", ":", "\n", "            ", "scaleRate", "=", "0.2", "\n", "", "else", ":", "\n", "            ", "scaleRate", "=", "0.3", "\n", "\n", "", "upLeft", "[", "0", "]", "=", "max", "(", "0", ",", "upLeft", "[", "0", "]", "-", "width", "*", "scaleRate", "/", "2", ")", "\n", "upLeft", "[", "1", "]", "=", "max", "(", "0", ",", "upLeft", "[", "1", "]", "-", "ht", "*", "scaleRate", "/", "2", ")", "\n", "bottomRight", "[", "0", "]", "=", "max", "(", "\n", "min", "(", "imgwidth", "-", "1", ",", "bottomRight", "[", "0", "]", "+", "width", "*", "scaleRate", "/", "2", ")", ",", "upLeft", "[", "0", "]", "+", "5", ")", "\n", "bottomRight", "[", "1", "]", "=", "max", "(", "\n", "min", "(", "imght", "-", "1", ",", "bottomRight", "[", "1", "]", "+", "ht", "*", "scaleRate", "/", "2", ")", ",", "upLeft", "[", "1", "]", "+", "5", ")", "\n", "\n", "inps", "[", "i", "]", "=", "cropBox", "(", "tmp_img", ".", "clone", "(", ")", ",", "upLeft", ",", "bottomRight", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ")", "\n", "pt1", "[", "i", "]", "=", "upLeft", "\n", "pt2", "[", "i", "]", "=", "bottomRight", "\n", "\n", "", "return", "inps", ",", "pt1", ",", "pt2", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.collate_fn": [[33, 73], ["type", "isinstance", "TypeError", "torch.stack", "error_msg.format", "sum", "batch[].storage()._new_shared", "batch[].new", "isinstance", "type", "torch.stack", "torch.LongTensor", "isinstance", "x.numel", "batch[].storage", "re.search", "TypeError", "elem.dtype.name.startswith", "list", "torch.DoubleTensor", "isinstance", "error_msg.format", "torch.from_numpy", "map", "isinstance", "isinstance", "fn.collate_fn", "zip", "fn.collate_fn"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.collate_fn", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.collate_fn"], ["def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "r\"\"\"Puts each data field into a tensor with outer dimension batch size\"\"\"", "\n", "\n", "error_msg", "=", "\"batch must contain tensors, numbers, dicts or lists; found {}\"", "\n", "elem_type", "=", "type", "(", "batch", "[", "0", "]", ")", "\n", "\n", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "out", "=", "None", "\n", "if", "_use_shared_memory", ":", "\n", "# If we're in a background process, concatenate directly into a", "\n", "# shared memory tensor to avoid an extra copy", "\n", "            ", "numel", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "batch", "]", ")", "\n", "storage", "=", "batch", "[", "0", "]", ".", "storage", "(", ")", ".", "_new_shared", "(", "numel", ")", "\n", "out", "=", "batch", "[", "0", "]", ".", "new", "(", "storage", ")", "\n", "", "return", "torch", ".", "stack", "(", "batch", ",", "0", ",", "out", "=", "out", ")", "\n", "", "elif", "elem_type", ".", "__module__", "==", "'numpy'", "and", "elem_type", ".", "__name__", "!=", "'str_'", "and", "elem_type", ".", "__name__", "!=", "'string_'", ":", "\n", "        ", "elem", "=", "batch", "[", "0", "]", "\n", "if", "elem_type", ".", "__name__", "==", "'ndarray'", ":", "\n", "# array of string classes and object", "\n", "            ", "if", "re", ".", "search", "(", "'[SaUO]'", ",", "elem", ".", "dtype", ".", "str", ")", "is", "not", "None", ":", "\n", "                ", "raise", "TypeError", "(", "error_msg", ".", "format", "(", "elem", ".", "dtype", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "[", "torch", ".", "from_numpy", "(", "b", ")", "for", "b", "in", "batch", "]", ",", "0", ")", "\n", "", "if", "elem", ".", "shape", "==", "(", ")", ":", "# scalars", "\n", "            ", "py_type", "=", "float", "if", "elem", ".", "dtype", ".", "name", ".", "startswith", "(", "'float'", ")", "else", "int", "\n", "return", "numpy_type_map", "[", "elem", ".", "dtype", ".", "name", "]", "(", "list", "(", "map", "(", "py_type", ",", "batch", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "int_classes", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "DoubleTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "string_classes", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "collate_fn", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "collate_fn", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.collate_fn_list": [[75, 81], ["zip", "fn.collate_fn", "fn.collate_fn"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.collate_fn", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.collate_fn"], ["", "def", "collate_fn_list", "(", "batch", ")", ":", "\n", "    ", "img", ",", "inp", ",", "im_name", "=", "zip", "(", "*", "batch", ")", "\n", "img", "=", "collate_fn", "(", "img", ")", "\n", "im_name", "=", "collate_fn", "(", "im_name", ")", "\n", "\n", "return", "img", ",", "inp", ",", "im_name", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.vis_frame_fast": [[83, 139], ["im_res[].split", "torch.cat", "torch.cat", "range", "enumerate", "cv2.circle", "torch.unsqueeze", "torch.unsqueeze", "int", "int", "cv2.line"], "function", ["None"], ["", "def", "vis_frame_fast", "(", "frame", ",", "im_res", ",", "format", "=", "'coco'", ")", ":", "\n", "    ", "'''\n    frame: frame image\n    im_res: im_res of predictions\n    format: coco or mpii\n\n    return rendered image\n    '''", "\n", "if", "format", "==", "'coco'", ":", "\n", "        ", "l_pair", "=", "[", "\n", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "# Head", "\n", "(", "5", ",", "6", ")", ",", "(", "5", ",", "7", ")", ",", "(", "7", ",", "9", ")", ",", "(", "6", ",", "8", ")", ",", "(", "8", ",", "10", ")", ",", "\n", "(", "17", ",", "11", ")", ",", "(", "17", ",", "12", ")", ",", "# Body", "\n", "(", "11", ",", "13", ")", ",", "(", "12", ",", "14", ")", ",", "(", "13", ",", "15", ")", ",", "(", "14", ",", "16", ")", "\n", "]", "\n", "p_color", "=", "[", "(", "0", ",", "255", ",", "255", ")", ",", "(", "0", ",", "191", ",", "255", ")", ",", "(", "0", ",", "255", ",", "102", ")", ",", "(", "0", ",", "77", ",", "255", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "# Nose, LEye, REye, LEar, REar", "\n", "(", "77", ",", "255", ",", "255", ")", ",", "(", "77", ",", "255", ",", "204", ")", ",", "(", "77", ",", "204", ",", "255", ")", ",", "(", "191", ",", "255", ",", "77", ")", ",", "(", "77", ",", "191", ",", "255", ")", ",", "(", "191", ",", "255", ",", "77", ")", ",", "\n", "# LShoulder, RShoulder, LElbow, RElbow, LWrist, RWrist", "\n", "(", "204", ",", "77", ",", "255", ")", ",", "(", "77", ",", "255", ",", "204", ")", ",", "(", "191", ",", "77", ",", "255", ")", ",", "(", "77", ",", "255", ",", "191", ")", ",", "(", "127", ",", "77", ",", "255", ")", ",", "(", "77", ",", "255", ",", "127", ")", ",", "\n", "(", "0", ",", "255", ",", "255", ")", "]", "# LHip, RHip, LKnee, Rknee, LAnkle, RAnkle, Neck", "\n", "line_color", "=", "[", "(", "0", ",", "215", ",", "255", ")", ",", "(", "0", ",", "255", ",", "204", ")", ",", "(", "0", ",", "134", ",", "255", ")", ",", "(", "0", ",", "255", ",", "50", ")", ",", "\n", "(", "77", ",", "255", ",", "222", ")", ",", "(", "77", ",", "196", ",", "255", ")", ",", "(", "77", ",", "135", ",", "255", ")", ",", "(", "191", ",", "255", ",", "77", ")", ",", "(", "77", ",", "255", ",", "77", ")", ",", "\n", "(", "77", ",", "222", ",", "255", ")", ",", "(", "255", ",", "156", ",", "127", ")", ",", "\n", "(", "0", ",", "127", ",", "255", ")", ",", "(", "255", ",", "127", ",", "77", ")", ",", "(", "0", ",", "77", ",", "255", ")", ",", "(", "255", ",", "77", ",", "36", ")", "]", "\n", "", "elif", "format", "==", "'mpii'", ":", "\n", "        ", "l_pair", "=", "[", "\n", "(", "8", ",", "9", ")", ",", "(", "11", ",", "12", ")", ",", "(", "11", ",", "10", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "\n", "(", "13", ",", "14", ")", ",", "(", "14", ",", "15", ")", ",", "(", "3", ",", "4", ")", ",", "(", "4", ",", "5", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "2", ")", ",", "(", "6", ",", "3", ")", ",", "(", "8", ",", "12", ")", ",", "(", "8", ",", "13", ")", "\n", "]", "\n", "p_color", "=", "[", "PURPLE", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "PURPLE", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", "]", "\n", "", "else", ":", "\n", "        ", "NotImplementedError", "\n", "\n", "", "im_name", "=", "im_res", "[", "'imgname'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "img", "=", "frame", "\n", "for", "human", "in", "im_res", "[", "'result'", "]", ":", "\n", "        ", "part_line", "=", "{", "}", "\n", "kp_preds", "=", "human", "[", "'keypoints'", "]", "\n", "kp_scores", "=", "human", "[", "'kp_score'", "]", "\n", "kp_preds", "=", "torch", ".", "cat", "(", "(", "kp_preds", ",", "torch", ".", "unsqueeze", "(", "(", "kp_preds", "[", "5", ",", ":", "]", "+", "kp_preds", "[", "6", ",", ":", "]", ")", "/", "2", ",", "0", ")", ")", ")", "\n", "kp_scores", "=", "torch", ".", "cat", "(", "(", "kp_scores", ",", "torch", ".", "unsqueeze", "(", "(", "kp_scores", "[", "5", ",", ":", "]", "+", "kp_scores", "[", "6", ",", ":", "]", ")", "/", "2", ",", "0", ")", ")", ")", "\n", "# Draw keypoints", "\n", "for", "n", "in", "range", "(", "kp_scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "kp_scores", "[", "n", "]", "<=", "0.05", ":", "\n", "                ", "continue", "\n", "", "cor_x", ",", "cor_y", "=", "int", "(", "kp_preds", "[", "n", ",", "0", "]", ")", ",", "int", "(", "kp_preds", "[", "n", ",", "1", "]", ")", "\n", "part_line", "[", "n", "]", "=", "(", "cor_x", ",", "cor_y", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "cor_x", ",", "cor_y", ")", ",", "4", ",", "p_color", "[", "n", "]", ",", "-", "1", ")", "\n", "# Draw limbs", "\n", "", "for", "i", ",", "(", "start_p", ",", "end_p", ")", "in", "enumerate", "(", "l_pair", ")", ":", "\n", "            ", "if", "start_p", "in", "part_line", "and", "end_p", "in", "part_line", ":", "\n", "                ", "start_xy", "=", "part_line", "[", "start_p", "]", "\n", "end_xy", "=", "part_line", "[", "end_p", "]", "\n", "cv2", ".", "line", "(", "img", ",", "start_xy", ",", "end_xy", ",", "line_color", "[", "i", "]", ",", "2", "*", "(", "kp_scores", "[", "start_p", "]", "+", "kp_scores", "[", "end_p", "]", ")", "+", "1", ")", "\n", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.vis_frame": [[141, 228], ["cv2.resize", "cv2.resize", "im_res[].split", "torch.cat", "torch.cat", "range", "cv2.putText", "enumerate", "int", "int", "cv2.addWeighted.copy", "cv2.circle", "float", "cv2.addWeighted", "torch.unsqueeze", "torch.unsqueeze", "int", "int", "int", "int", "max", "int", "int", "cv2.addWeighted.copy", "numpy.mean", "numpy.mean", "math.degrees", "cv2.ellipse2Poly", "cv2.fillConvexPoly", "max", "float", "cv2.addWeighted", "int", "int", "min", "human[].item", "math.atan2", "int", "min", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "vis_frame", "(", "frame", ",", "im_res", ",", "format", "=", "'coco'", ")", ":", "\n", "    ", "'''\n    frame: frame image\n    im_res: im_res of predictions\n    format: coco or mpii\n\n    return rendered image\n    '''", "\n", "if", "format", "==", "'coco'", ":", "\n", "        ", "l_pair", "=", "[", "\n", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "# Head", "\n", "(", "5", ",", "6", ")", ",", "(", "5", ",", "7", ")", ",", "(", "7", ",", "9", ")", ",", "(", "6", ",", "8", ")", ",", "(", "8", ",", "10", ")", ",", "\n", "(", "17", ",", "11", ")", ",", "(", "17", ",", "12", ")", ",", "# Body", "\n", "(", "11", ",", "13", ")", ",", "(", "12", ",", "14", ")", ",", "(", "13", ",", "15", ")", ",", "(", "14", ",", "16", ")", "\n", "]", "\n", "\n", "p_color", "=", "[", "(", "0", ",", "255", ",", "255", ")", ",", "(", "0", ",", "191", ",", "255", ")", ",", "(", "0", ",", "255", ",", "102", ")", ",", "(", "0", ",", "77", ",", "255", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "# Nose, LEye, REye, LEar, REar", "\n", "(", "77", ",", "255", ",", "255", ")", ",", "(", "77", ",", "255", ",", "204", ")", ",", "(", "77", ",", "204", ",", "255", ")", ",", "(", "191", ",", "255", ",", "77", ")", ",", "(", "77", ",", "191", ",", "255", ")", ",", "(", "191", ",", "255", ",", "77", ")", ",", "\n", "# LShoulder, RShoulder, LElbow, RElbow, LWrist, RWrist", "\n", "(", "204", ",", "77", ",", "255", ")", ",", "(", "77", ",", "255", ",", "204", ")", ",", "(", "191", ",", "77", ",", "255", ")", ",", "(", "77", ",", "255", ",", "191", ")", ",", "(", "127", ",", "77", ",", "255", ")", ",", "(", "77", ",", "255", ",", "127", ")", ",", "\n", "(", "0", ",", "255", ",", "255", ")", "]", "# LHip, RHip, LKnee, Rknee, LAnkle, RAnkle, Neck", "\n", "line_color", "=", "[", "(", "0", ",", "215", ",", "255", ")", ",", "(", "0", ",", "255", ",", "204", ")", ",", "(", "0", ",", "134", ",", "255", ")", ",", "(", "0", ",", "255", ",", "50", ")", ",", "\n", "(", "77", ",", "255", ",", "222", ")", ",", "(", "77", ",", "196", ",", "255", ")", ",", "(", "77", ",", "135", ",", "255", ")", ",", "(", "191", ",", "255", ",", "77", ")", ",", "(", "77", ",", "255", ",", "77", ")", ",", "\n", "(", "77", ",", "222", ",", "255", ")", ",", "(", "255", ",", "156", ",", "127", ")", ",", "\n", "(", "0", ",", "127", ",", "255", ")", ",", "(", "255", ",", "127", ",", "77", ")", ",", "(", "0", ",", "77", ",", "255", ")", ",", "(", "255", ",", "77", ",", "36", ")", "]", "\n", "", "elif", "format", "==", "'mpii'", ":", "\n", "        ", "l_pair", "=", "[", "\n", "(", "8", ",", "9", ")", ",", "(", "11", ",", "12", ")", ",", "(", "11", ",", "10", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "\n", "(", "13", ",", "14", ")", ",", "(", "14", ",", "15", ")", ",", "(", "3", ",", "4", ")", ",", "(", "4", ",", "5", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "2", ")", ",", "(", "6", ",", "3", ")", ",", "(", "8", ",", "12", ")", ",", "(", "8", ",", "13", ")", "\n", "]", "\n", "p_color", "=", "[", "PURPLE", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "PURPLE", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", "]", "\n", "line_color", "=", "[", "PURPLE", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "im_name", "=", "im_res", "[", "'imgname'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "img", "=", "frame", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "int", "(", "width", "/", "2", ")", ",", "int", "(", "height", "/", "2", ")", ")", ")", "\n", "for", "human", "in", "im_res", "[", "'result'", "]", ":", "\n", "        ", "part_line", "=", "{", "}", "\n", "kp_preds", "=", "human", "[", "'keypoints'", "]", "\n", "kp_scores", "=", "human", "[", "'kp_score'", "]", "\n", "kp_preds", "=", "torch", ".", "cat", "(", "(", "kp_preds", ",", "torch", ".", "unsqueeze", "(", "(", "kp_preds", "[", "5", ",", ":", "]", "+", "kp_preds", "[", "6", ",", ":", "]", ")", "/", "2", ",", "0", ")", ")", ")", "\n", "kp_scores", "=", "torch", ".", "cat", "(", "(", "kp_scores", ",", "torch", ".", "unsqueeze", "(", "(", "kp_scores", "[", "5", ",", ":", "]", "+", "kp_scores", "[", "6", ",", ":", "]", ")", "/", "2", ",", "0", ")", ")", ")", "\n", "\n", "# Draw keypoints", "\n", "for", "n", "in", "range", "(", "kp_scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "kp_scores", "[", "n", "]", "<=", "0.05", ":", "\n", "                ", "continue", "\n", "", "cor_x", ",", "cor_y", "=", "int", "(", "kp_preds", "[", "n", ",", "0", "]", ")", ",", "int", "(", "kp_preds", "[", "n", ",", "1", "]", ")", "\n", "part_line", "[", "n", "]", "=", "(", "int", "(", "cor_x", "/", "2", ")", ",", "int", "(", "cor_y", "/", "2", ")", ")", "\n", "bg", "=", "img", ".", "copy", "(", ")", "\n", "cv2", ".", "circle", "(", "bg", ",", "(", "int", "(", "cor_x", "/", "2", ")", ",", "int", "(", "cor_y", "/", "2", ")", ")", ",", "2", ",", "p_color", "[", "n", "]", ",", "-", "1", ")", "\n", "# Now create a mask of logo and create its inverse mask also", "\n", "# transparency = max(0, min(1, kp_scores[n]))", "\n", "transparency", "=", "float", "(", "max", "(", "0", ",", "min", "(", "1", ",", "kp_scores", "[", "n", "]", ")", ")", ")", "\n", "img", "=", "cv2", ".", "addWeighted", "(", "bg", ",", "transparency", ",", "img", ",", "1", "-", "transparency", ",", "0", ")", "\n", "\n", "# Draw proposal score on the head", "\n", "", "middle_eye", "=", "(", "kp_preds", "[", "1", "]", "+", "kp_preds", "[", "2", "]", ")", "/", "4", "\n", "middle_cor", "=", "int", "(", "middle_eye", "[", "0", "]", ")", "-", "10", ",", "int", "(", "middle_eye", "[", "1", "]", ")", "-", "12", "\n", "cv2", ".", "putText", "(", "img", ",", "f\"{human['proposal_score'].item():.2f}\"", ",", "middle_cor", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "0.3", ",", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "# Draw limbs", "\n", "for", "i", ",", "(", "start_p", ",", "end_p", ")", "in", "enumerate", "(", "l_pair", ")", ":", "\n", "            ", "if", "start_p", "in", "part_line", "and", "end_p", "in", "part_line", ":", "\n", "                ", "start_xy", "=", "part_line", "[", "start_p", "]", "\n", "end_xy", "=", "part_line", "[", "end_p", "]", "\n", "bg", "=", "img", ".", "copy", "(", ")", "\n", "\n", "X", "=", "(", "start_xy", "[", "0", "]", ",", "end_xy", "[", "0", "]", ")", "\n", "Y", "=", "(", "start_xy", "[", "1", "]", ",", "end_xy", "[", "1", "]", ")", "\n", "mX", "=", "np", ".", "mean", "(", "X", ")", "\n", "mY", "=", "np", ".", "mean", "(", "Y", ")", "\n", "length", "=", "(", "(", "Y", "[", "0", "]", "-", "Y", "[", "1", "]", ")", "**", "2", "+", "(", "X", "[", "0", "]", "-", "X", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "angle", "=", "math", ".", "degrees", "(", "math", ".", "atan2", "(", "Y", "[", "0", "]", "-", "Y", "[", "1", "]", ",", "X", "[", "0", "]", "-", "X", "[", "1", "]", ")", ")", "\n", "stickwidth", "=", "(", "kp_scores", "[", "start_p", "]", "+", "kp_scores", "[", "end_p", "]", ")", "+", "1", "\n", "polygon", "=", "cv2", ".", "ellipse2Poly", "(", "(", "int", "(", "mX", ")", ",", "int", "(", "mY", ")", ")", ",", "(", "int", "(", "length", "/", "2", ")", ",", "int", "(", "stickwidth", ")", ")", ",", "int", "(", "angle", ")", ",", "0", ",", "360", ",", "1", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "bg", ",", "polygon", ",", "line_color", "[", "i", "]", ")", "\n", "# cv2.line(bg, start_xy, end_xy, line_color[i], (2 * (kp_scores[start_p] + kp_scores[end_p])) + 1)", "\n", "transparency", "=", "max", "(", "0", ",", "min", "(", "1", ",", "0.5", "*", "(", "kp_scores", "[", "start_p", "]", "+", "kp_scores", "[", "end_p", "]", ")", ")", ")", "\n", "transparency", "=", "float", "(", "transparency", ")", "\n", "img", "=", "cv2", ".", "addWeighted", "(", "bg", ",", "transparency", ",", "img", ",", "1", "-", "transparency", ",", "0", ")", "\n", "", "", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime": [[230, 236], ["time.time", "time.time", "time.time"], "function", ["None"], ["", "def", "getTime", "(", "time1", "=", "0", ")", ":", "\n", "    ", "if", "not", "time1", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "        ", "interval", "=", "time", ".", "time", "(", ")", "-", "time1", "\n", "return", "time", ".", "time", "(", ")", ",", "interval", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.Image_loader.__init__": [[39, 48], ["torch.Dataset.__init__", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "im_names", ",", "format", "=", "'yolo'", ")", ":", "\n", "        ", "super", "(", "Image_loader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_dir", "=", "opt", ".", "inputpath", "\n", "self", ".", "imglist", "=", "im_names", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "]", ")", "\n", "self", ".", "format", "=", "format", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.Image_loader.getitem_ssd": [[49, 61], ["dataloader.Image_loader.imglist[].rstrip().rstrip", "os.path.join", "PIL.Image.open", "SPPE.src.utils.img.load_image", "im.convert.convert.resize", "dataloader.Image_loader.transform", "im.convert.convert.convert", "dataloader.Image_loader.imglist[].rstrip"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.load_image"], ["", "def", "getitem_ssd", "(", "self", ",", "index", ")", ":", "\n", "        ", "im_name", "=", "self", ".", "imglist", "[", "index", "]", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", "\n", "im_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "im_name", ")", "\n", "im", "=", "Image", ".", "open", "(", "im_name", ")", "\n", "inp", "=", "load_image", "(", "im_name", ")", "\n", "if", "im", ".", "mode", "==", "'L'", ":", "\n", "            ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "ow", "=", "oh", "=", "512", "\n", "im", "=", "im", ".", "resize", "(", "(", "ow", ",", "oh", ")", ")", "\n", "im", "=", "self", ".", "transform", "(", "im", ")", "\n", "return", "im", ",", "inp", ",", "im_name", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.Image_loader.getitem_yolo": [[62, 71], ["int", "dataloader.Image_loader.imglist[].rstrip().rstrip", "os.path.join", "yolo.preprocess.prep_image", "SPPE.src.utils.img.load_image", "dataloader.Image_loader.imglist[].rstrip"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_image", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.load_image"], ["", "def", "getitem_yolo", "(", "self", ",", "index", ")", ":", "\n", "        ", "inp_dim", "=", "int", "(", "opt", ".", "inp_dim", ")", "\n", "im_name", "=", "self", ".", "imglist", "[", "index", "]", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", "\n", "im_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "im_name", ")", "\n", "im", ",", "orig_img", ",", "im_dim", "=", "prep_image", "(", "im_name", ",", "inp_dim", ")", "\n", "# im_dim = torch.FloatTensor([im_dim]).repeat(1, 2)", "\n", "\n", "inp", "=", "load_image", "(", "im_name", ")", "\n", "return", "im", ",", "inp", ",", "orig_img", ",", "im_name", ",", "im_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.Image_loader.__getitem__": [[72, 79], ["dataloader.Image_loader.getitem_ssd", "dataloader.Image_loader.getitem_yolo"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.getitem_ssd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.getitem_yolo"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "format", "==", "'ssd'", ":", "\n", "            ", "return", "self", ".", "getitem_ssd", "(", "index", ")", "\n", "", "elif", "self", ".", "format", "==", "'yolo'", ":", "\n", "            ", "return", "self", ".", "getitem_yolo", "(", "index", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.Image_loader.__len__": [[80, 82], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imglist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.__init__": [[85, 106], ["torchvision.Compose", "dataloader.ImageLoader.len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ",", "im_names", ",", "batchSize", "=", "1", ",", "format", "=", "'yolo'", ",", "queueSize", "=", "50", ")", ":", "\n", "        ", "self", ".", "img_dir", "=", "opt", ".", "inputpath", "\n", "self", ".", "imglist", "=", "im_names", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "]", ")", "\n", "self", ".", "format", "=", "format", "\n", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "datalen", "=", "len", "(", "self", ".", "imglist", ")", "\n", "leftover", "=", "0", "\n", "if", "(", "self", ".", "datalen", ")", "%", "batchSize", ":", "\n", "            ", "leftover", "=", "1", "\n", "", "self", ".", "num_batches", "=", "self", ".", "datalen", "//", "batchSize", "+", "leftover", "\n", "\n", "# initialize the queue used to store data", "\n", "if", "opt", ".", "sp", ":", "\n", "            ", "self", ".", "Q", "=", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Q", "=", "mp", ".", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.start": [[107, 124], ["torch.Process.start", "threading.Thread", "torch.Process", "torch.Process", "torch.Process", "threading.Thread", "torch.Process", "torch.Process", "torch.Process"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "if", "self", ".", "format", "==", "'ssd'", ":", "\n", "            ", "if", "opt", ".", "sp", ":", "\n", "                ", "p", "=", "Thread", "(", "target", "=", "self", ".", "getitem_ssd", ",", "args", "=", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "getitem_ssd", ",", "args", "=", "(", ")", ")", "\n", "", "", "elif", "self", ".", "format", "==", "'yolo'", ":", "\n", "            ", "if", "opt", ".", "sp", ":", "\n", "                ", "p", "=", "Thread", "(", "target", "=", "self", ".", "getitem_yolo", ",", "args", "=", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "getitem_yolo", ",", "args", "=", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.getitem_ssd": [[125, 141], ["dataloader.ImageLoader.len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "getitem_ssd", "(", "self", ")", ":", "\n", "        ", "length", "=", "len", "(", "self", ".", "imglist", ")", "\n", "for", "index", "in", "range", "(", "length", ")", ":", "\n", "            ", "im_name", "=", "self", ".", "imglist", "[", "index", "]", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", "\n", "im_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "im_name", ")", "\n", "im", "=", "Image", ".", "open", "(", "im_name", ")", "\n", "inp", "=", "load_image", "(", "im_name", ")", "\n", "if", "im", ".", "mode", "==", "'L'", ":", "\n", "                ", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "ow", "=", "oh", "=", "512", "\n", "im", "=", "im", ".", "resize", "(", "(", "ow", ",", "oh", ")", ")", "\n", "im", "=", "self", ".", "transform", "(", "im", ")", "\n", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "im", ",", "inp", ",", "im_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.getitem_yolo": [[142, 169], ["range", "range", "dataloader.ImageLoader.Q.full", "dataloader.ImageLoader.Q.put", "min", "int", "dataloader.ImageLoader.imglist[].rstrip().rstrip", "os.path.join", "yolo.preprocess.prep_image", "torch.cat.append", "torch.cat.append", "torch.cat.append", "orig_img.append", "im_name.append", "torch.FloatTensor().repeat.append", "torch.FloatTensor().repeat.append", "torch.FloatTensor().repeat.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "time.sleep", "dataloader.ImageLoader.imglist[].rstrip", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_image", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "", "def", "getitem_yolo", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_batches", ")", ":", "\n", "            ", "img", "=", "[", "]", "\n", "orig_img", "=", "[", "]", "\n", "im_name", "=", "[", "]", "\n", "im_dim_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "*", "self", ".", "batchSize", ",", "min", "(", "(", "i", "+", "1", ")", "*", "self", ".", "batchSize", ",", "self", ".", "datalen", ")", ")", ":", "\n", "                ", "inp_dim", "=", "int", "(", "opt", ".", "inp_dim", ")", "\n", "im_name_k", "=", "self", ".", "imglist", "[", "k", "]", ".", "rstrip", "(", "'\\n'", ")", ".", "rstrip", "(", "'\\r'", ")", "\n", "im_name_k", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "im_name_k", ")", "\n", "img_k", ",", "orig_img_k", ",", "im_dim_list_k", "=", "prep_image", "(", "im_name_k", ",", "inp_dim", ")", "\n", "\n", "img", ".", "append", "(", "img_k", ")", "\n", "orig_img", ".", "append", "(", "orig_img_k", ")", "\n", "im_name", ".", "append", "(", "im_name_k", ")", "\n", "im_dim_list", ".", "append", "(", "im_dim_list_k", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Human Detection", "\n", "                ", "img", "=", "torch", ".", "cat", "(", "img", ")", "\n", "im_dim_list", "=", "torch", ".", "FloatTensor", "(", "im_dim_list", ")", ".", "repeat", "(", "1", ",", "2", ")", "\n", "im_dim_list_", "=", "im_dim_list", "\n", "\n", "", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "2", ")", "\n", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "img", ",", "orig_img", ",", "im_name", ",", "im_dim_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.getitem": [[170, 172], ["dataloader.ImageLoader.Q.get"], "methods", ["None"], ["", "", "def", "getitem", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.length": [[173, 175], ["dataloader.ImageLoader.len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imglist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.ImageLoader.len": [[176, 178], ["dataloader.ImageLoader.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.__init__": [[181, 202], ["cv2.VideoCapture", "dataloader.VideoLoader.stream.isOpened", "int", "dataloader.VideoLoader.stream.get", "multiprocessing.Queue", "torch.Queue", "torch.Queue", "torch.Queue"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "batchSize", "=", "1", ",", "queueSize", "=", "50", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "stream", "=", "cv2", ".", "VideoCapture", "(", "path", ")", "\n", "assert", "self", ".", "stream", ".", "isOpened", "(", ")", ",", "'Cannot capture source'", "\n", "self", ".", "stopped", "=", "False", "\n", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "datalen", "=", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "leftover", "=", "0", "\n", "if", "(", "self", ".", "datalen", ")", "%", "batchSize", ":", "\n", "            ", "leftover", "=", "1", "\n", "", "self", ".", "num_batches", "=", "self", ".", "datalen", "//", "batchSize", "+", "leftover", "\n", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "if", "opt", ".", "sp", ":", "\n", "            ", "self", ".", "Q", "=", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Q", "=", "mp", ".", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.length": [[203, 205], ["None"], "methods", ["None"], ["", "", "def", "length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datalen", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.start": [[206, 217], ["threading.Thread", "threading.Thread.start", "torch.Process", "torch.Process", "torch.Process", "torch.Process.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "if", "opt", ".", "sp", ":", "\n", "            ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "", "else", ":", "\n", "            ", "p", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.update": [[218, 254], ["cv2.VideoCapture", "cv2.VideoCapture.isOpened", "range", "range", "dataloader.VideoLoader.Q.full", "dataloader.VideoLoader.Q.put", "min", "int", "cv2.VideoCapture.read", "yolo.preprocess.prep_frame", "torch.cat.append", "torch.cat.append", "torch.cat.append", "orig_img.append", "im_name.append", "torch.FloatTensor().repeat.append", "torch.FloatTensor().repeat.append", "torch.FloatTensor().repeat.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "time.sleep", "dataloader.VideoLoader.Q.put", "print", "sys.stdout.flush", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_frame", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "stream", "=", "cv2", ".", "VideoCapture", "(", "self", ".", "path", ")", "\n", "assert", "stream", ".", "isOpened", "(", ")", ",", "'Cannot capture source'", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_batches", ")", ":", "\n", "            ", "img", "=", "[", "]", "\n", "orig_img", "=", "[", "]", "\n", "im_name", "=", "[", "]", "\n", "im_dim_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "*", "self", ".", "batchSize", ",", "min", "(", "(", "i", "+", "1", ")", "*", "self", ".", "batchSize", ",", "self", ".", "datalen", ")", ")", ":", "\n", "                ", "inp_dim", "=", "int", "(", "opt", ".", "inp_dim", ")", "\n", "(", "grabbed", ",", "frame", ")", "=", "stream", ".", "read", "(", ")", "\n", "# if the `grabbed` boolean is `False`, then we have", "\n", "# reached the end of the video file", "\n", "if", "not", "grabbed", ":", "\n", "                    ", "self", ".", "Q", ".", "put", "(", "(", "None", ",", "None", ",", "None", ",", "None", ")", ")", "\n", "print", "(", "'===========================> This video get '", "+", "str", "(", "k", ")", "+", "' frames in total.'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "\n", "# process and add the frame to the queue", "\n", "", "img_k", ",", "orig_img_k", ",", "im_dim_list_k", "=", "prep_frame", "(", "frame", ",", "inp_dim", ")", "\n", "\n", "img", ".", "append", "(", "img_k", ")", "\n", "orig_img", ".", "append", "(", "orig_img_k", ")", "\n", "im_name", ".", "append", "(", "str", "(", "k", ")", "+", "'.jpg'", ")", "\n", "im_dim_list", ".", "append", "(", "im_dim_list_k", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Human Detection", "\n", "                ", "img", "=", "torch", ".", "cat", "(", "img", ")", "\n", "im_dim_list", "=", "torch", ".", "FloatTensor", "(", "im_dim_list", ")", ".", "repeat", "(", "1", ",", "2", ")", "\n", "\n", "", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "2", ")", "\n", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "img", ",", "orig_img", ",", "im_name", ",", "im_dim_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.videoinfo": [[255, 261], ["int", "dataloader.VideoLoader.stream.get", "dataloader.VideoLoader.stream.get", "int", "int", "dataloader.VideoLoader.stream.get", "dataloader.VideoLoader.stream.get"], "methods", ["None"], ["", "", "def", "videoinfo", "(", "self", ")", ":", "\n", "# indicate the video info", "\n", "        ", "fourcc", "=", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FOURCC", ")", ")", "\n", "fps", "=", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "frameSize", "=", "(", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", ",", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", ")", "\n", "return", "(", "fourcc", ",", "fps", ",", "frameSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.getitem": [[262, 265], ["dataloader.VideoLoader.Q.get"], "methods", ["None"], ["", "def", "getitem", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.len": [[266, 268], ["dataloader.VideoLoader.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionLoader.__init__": [[271, 297], ["yolo.darknet.Darknet", "dataloader.DetectionLoader.det_model.load_weights", "int", "dataloader.DetectionLoader.det_model.cuda", "dataloader.DetectionLoader.det_model.eval", "dataloader.DetectionLoader.dataloder.length", "multiprocessing.Queue", "torch.Queue", "torch.Queue", "torch.Queue"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.load_weights", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.length"], ["    ", "def", "__init__", "(", "self", ",", "dataloder", ",", "batchSize", "=", "1", ",", "queueSize", "=", "1024", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "det_model", "=", "Darknet", "(", "\"joints_detectors/Alphapose/yolo/cfg/yolov3-spp.cfg\"", ")", "\n", "self", ".", "det_model", ".", "load_weights", "(", "'joints_detectors/Alphapose/models/yolo/yolov3-spp.weights'", ")", "\n", "self", ".", "det_model", ".", "net_info", "[", "'height'", "]", "=", "opt", ".", "inp_dim", "\n", "self", ".", "det_inp_dim", "=", "int", "(", "self", ".", "det_model", ".", "net_info", "[", "'height'", "]", ")", "\n", "assert", "self", ".", "det_inp_dim", "%", "32", "==", "0", "\n", "assert", "self", ".", "det_inp_dim", ">", "32", "\n", "self", ".", "det_model", ".", "cuda", "(", ")", "\n", "self", ".", "det_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "dataloder", "=", "dataloder", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "datalen", "=", "self", ".", "dataloder", ".", "length", "(", ")", "\n", "leftover", "=", "0", "\n", "if", "(", "self", ".", "datalen", ")", "%", "batchSize", ":", "\n", "            ", "leftover", "=", "1", "\n", "", "self", ".", "num_batches", "=", "self", ".", "datalen", "//", "batchSize", "+", "leftover", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "if", "opt", ".", "sp", ":", "\n", "            ", "self", ".", "Q", "=", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Q", "=", "mp", ".", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionLoader.start": [[298, 310], ["threading.Thread", "threading.Thread.start", "torch.Process", "torch.Process", "torch.Process", "torch.Process.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "if", "opt", ".", "sp", ":", "\n", "            ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "", "else", ":", "\n", "            ", "p", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ",", "daemon", "=", "True", ")", "\n", "# p = mp.Process(target=self.update, args=())", "\n", "# p.daemon = True", "\n", "p", ".", "start", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionLoader.update": [[311, 360], ["range", "dataloader.DetectionLoader.dataloder.getitem", "range", "dataloader.DetectionLoader.Q.put", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "img.cuda.cuda.cuda", "dataloader.DetectionLoader.det_model", "yolo.util.dynamic_write_results", "dets.cpu.cpu.cpu", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "[].view", "range", "dataloader.DetectionLoader.len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoLoader.getitem", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.dynamic_write_results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping the whole dataset", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_batches", ")", ":", "\n", "            ", "img", ",", "orig_img", ",", "im_name", ",", "im_dim_list", "=", "self", ".", "dataloder", ".", "getitem", "(", ")", "\n", "if", "img", "is", "None", ":", "\n", "                ", "self", ".", "Q", ".", "put", "(", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", ")", "\n", "return", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Human Detection", "\n", "                ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "prediction", "=", "self", ".", "det_model", "(", "img", ",", "CUDA", "=", "True", ")", "\n", "# NMS process", "\n", "dets", "=", "dynamic_write_results", "(", "prediction", ",", "opt", ".", "confidence", ",", "\n", "opt", ".", "num_classes", ",", "nms", "=", "True", ",", "nms_conf", "=", "opt", ".", "nms_thesh", ")", "\n", "if", "isinstance", "(", "dets", ",", "int", ")", "or", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "for", "k", "in", "range", "(", "len", "(", "orig_img", ")", ")", ":", "\n", "                        ", "if", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                            ", "time", ".", "sleep", "(", "2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "orig_img", "[", "k", "]", ",", "im_name", "[", "k", "]", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", ")", "\n", "", "continue", "\n", "", "dets", "=", "dets", ".", "cpu", "(", ")", "\n", "im_dim_list", "=", "torch", ".", "index_select", "(", "im_dim_list", ",", "0", ",", "dets", "[", ":", ",", "0", "]", ".", "long", "(", ")", ")", "\n", "scaling_factor", "=", "torch", ".", "min", "(", "self", ".", "det_inp_dim", "/", "im_dim_list", ",", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# coordinate transfer", "\n", "dets", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "(", "self", ".", "det_inp_dim", "-", "scaling_factor", "*", "im_dim_list", "[", ":", ",", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "/", "2", "\n", "dets", "[", ":", ",", "[", "2", ",", "4", "]", "]", "-=", "(", "self", ".", "det_inp_dim", "-", "scaling_factor", "*", "im_dim_list", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "/", "2", "\n", "\n", "dets", "[", ":", ",", "1", ":", "5", "]", "/=", "scaling_factor", "\n", "for", "j", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "dets", "[", "j", ",", "[", "1", ",", "3", "]", "]", "=", "torch", ".", "clamp", "(", "dets", "[", "j", ",", "[", "1", ",", "3", "]", "]", ",", "0.0", ",", "im_dim_list", "[", "j", ",", "0", "]", ")", "\n", "dets", "[", "j", ",", "[", "2", ",", "4", "]", "]", "=", "torch", ".", "clamp", "(", "dets", "[", "j", ",", "[", "2", ",", "4", "]", "]", ",", "0.0", ",", "im_dim_list", "[", "j", ",", "1", "]", ")", "\n", "", "boxes", "=", "dets", "[", ":", ",", "1", ":", "5", "]", "\n", "scores", "=", "dets", "[", ":", ",", "5", ":", "6", "]", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "orig_img", ")", ")", ":", "\n", "                ", "boxes_k", "=", "boxes", "[", "dets", "[", ":", ",", "0", "]", "==", "k", "]", "\n", "if", "isinstance", "(", "boxes_k", ",", "int", ")", "or", "boxes_k", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "if", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                        ", "time", ".", "sleep", "(", "2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "orig_img", "[", "k", "]", ",", "im_name", "[", "k", "]", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", ")", "\n", "continue", "\n", "", "inps", "=", "torch", ".", "zeros", "(", "boxes_k", ".", "size", "(", "0", ")", ",", "3", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ")", "\n", "pt1", "=", "torch", ".", "zeros", "(", "boxes_k", ".", "size", "(", "0", ")", ",", "2", ")", "\n", "pt2", "=", "torch", ".", "zeros", "(", "boxes_k", ".", "size", "(", "0", ")", ",", "2", ")", "\n", "if", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "orig_img", "[", "k", "]", ",", "im_name", "[", "k", "]", ",", "boxes_k", ",", "scores", "[", "dets", "[", ":", ",", "0", "]", "==", "k", "]", ",", "inps", ",", "pt1", ",", "pt2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionLoader.read": [[361, 364], ["dataloader.DetectionLoader.Q.get"], "methods", ["None"], ["", "", "", "def", "read", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionLoader.len": [[365, 368], ["dataloader.DetectionLoader.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "# return queue len", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionProcessor.__init__": [[371, 383], ["multiprocessing.Queue", "multiprocessing.Queue"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "detectionLoader", ",", "queueSize", "=", "1024", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "detectionLoader", "=", "detectionLoader", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "datalen", "=", "self", ".", "detectionLoader", ".", "datalen", "\n", "\n", "# initialize the queue used to store data", "\n", "if", "opt", ".", "sp", ":", "\n", "            ", "self", ".", "Q", "=", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Q", "=", "pQueue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionProcessor.start": [[384, 397], ["threading.Thread", "threading.Thread.start", "torch.Process", "torch.Process", "torch.Process", "torch.Process.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "if", "opt", ".", "sp", ":", "\n", "# t = Thread(target=self.update, args=(), daemon=True)", "\n", "            ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "", "else", ":", "\n", "            ", "p", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ",", "daemon", "=", "True", ")", "\n", "# p = mp.Process(target=self.update, args=())", "\n", "# p.daemon = True", "\n", "p", ".", "start", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionProcessor.update": [[398, 418], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dataloader.DetectionProcessor.detectionLoader.read", "SPPE.src.utils.img.im_to_torch", "dataloader.crop_from_dets", "dataloader.DetectionProcessor.Q.full", "dataloader.DetectionProcessor.Q.put", "dataloader.DetectionProcessor.Q.put", "dataloader.DetectionProcessor.Q.full", "dataloader.DetectionProcessor.Q.put", "cv2.cvtColor", "time.sleep", "boxes.nelement", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.crop_from_dets"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping the whole dataset", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "datalen", ")", ":", "\n", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "(", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "inps", ",", "pt1", ",", "pt2", ")", "=", "self", ".", "detectionLoader", ".", "read", "(", ")", "\n", "if", "orig_img", "is", "None", ":", "\n", "                    ", "self", ".", "Q", ".", "put", "(", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", ")", "\n", "return", "\n", "", "if", "boxes", "is", "None", "or", "boxes", ".", "nelement", "(", ")", "==", "0", ":", "\n", "                    ", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                        ", "time", ".", "sleep", "(", "0.2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "None", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "None", ",", "None", ")", ")", "\n", "continue", "\n", "", "inp", "=", "im_to_torch", "(", "cv2", ".", "cvtColor", "(", "orig_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "inps", ",", "pt1", ",", "pt2", "=", "crop_from_dets", "(", "inp", ",", "boxes", ",", "inps", ",", "pt1", ",", "pt2", ")", "\n", "\n", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "inps", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "pt1", ",", "pt2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionProcessor.read": [[419, 422], ["dataloader.DetectionProcessor.Q.get"], "methods", ["None"], ["", "", "", "def", "read", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DetectionProcessor.len": [[423, 426], ["dataloader.DetectionProcessor.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "# return queue len", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.__init__": [[429, 453], ["yolo.darknet.Darknet", "dataloader.VideoDetectionLoader.det_model.load_weights", "int", "dataloader.VideoDetectionLoader.det_model.cuda", "dataloader.VideoDetectionLoader.det_model.eval", "cv2.VideoCapture", "dataloader.VideoDetectionLoader.stream.isOpened", "int", "multiprocessing.Queue", "dataloader.VideoDetectionLoader.stream.get"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.load_weights", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "batchSize", "=", "4", ",", "queueSize", "=", "256", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "det_model", "=", "Darknet", "(", "\"yolo/cfg/yolov3-spp.cfg\"", ")", "\n", "self", ".", "det_model", ".", "load_weights", "(", "'models/yolo/yolov3-spp.weights'", ")", "\n", "self", ".", "det_model", ".", "net_info", "[", "'height'", "]", "=", "opt", ".", "inp_dim", "\n", "self", ".", "det_inp_dim", "=", "int", "(", "self", ".", "det_model", ".", "net_info", "[", "'height'", "]", ")", "\n", "assert", "self", ".", "det_inp_dim", "%", "32", "==", "0", "\n", "assert", "self", ".", "det_inp_dim", ">", "32", "\n", "self", ".", "det_model", ".", "cuda", "(", ")", "\n", "self", ".", "det_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "stream", "=", "cv2", ".", "VideoCapture", "(", "path", ")", "\n", "assert", "self", ".", "stream", ".", "isOpened", "(", ")", ",", "'Cannot capture source'", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "self", ".", "datalen", "=", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "leftover", "=", "0", "\n", "if", "(", "self", ".", "datalen", ")", "%", "batchSize", ":", "\n", "            ", "leftover", "=", "1", "\n", "", "self", ".", "num_batches", "=", "self", ".", "datalen", "//", "batchSize", "+", "leftover", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "self", ".", "Q", "=", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.length": [[454, 456], ["None"], "methods", ["None"], ["", "def", "length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datalen", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.len": [[457, 459], ["dataloader.VideoDetectionLoader.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.start": [[460, 466], ["threading.Thread", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.update": [[467, 529], ["range", "range", "range", "min", "dataloader.VideoDetectionLoader.stream.read", "int", "yolo.preprocess.prep_frame", "SPPE.src.utils.img.im_to_torch", "torch.autograd.Variable().cuda.append", "inp.append", "orig_img.append", "torch.index_select.append", "torch.index_select.append", "torch.index_select.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "inp[].size", "inp[].size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.index_select.cuda", "torch.index_select.cuda", "torch.index_select.cuda", "dataloader.VideoDetectionLoader.det_model", "yolo.util.dynamic_write_results", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "[].view", "range", "dets[].cpu", "dets[].cpu", "dataloader.VideoDetectionLoader.len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_frame", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.dynamic_write_results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping the whole video", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_batches", ")", ":", "\n", "            ", "img", "=", "[", "]", "\n", "inp", "=", "[", "]", "\n", "orig_img", "=", "[", "]", "\n", "im_name", "=", "[", "]", "\n", "im_dim_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "*", "self", ".", "batchSize", ",", "min", "(", "(", "i", "+", "1", ")", "*", "self", ".", "batchSize", ",", "self", ".", "datalen", ")", ")", ":", "\n", "                ", "(", "grabbed", ",", "frame", ")", "=", "self", ".", "stream", ".", "read", "(", ")", "\n", "# if the `grabbed` boolean is `False`, then we have", "\n", "# reached the end of the video file", "\n", "if", "not", "grabbed", ":", "\n", "                    ", "self", ".", "stop", "(", ")", "\n", "return", "\n", "# process and add the frame to the queue", "\n", "", "inp_dim", "=", "int", "(", "opt", ".", "inp_dim", ")", "\n", "img_k", ",", "orig_img_k", ",", "im_dim_list_k", "=", "prep_frame", "(", "frame", ",", "inp_dim", ")", "\n", "inp_k", "=", "im_to_torch", "(", "orig_img_k", ")", "\n", "\n", "img", ".", "append", "(", "img_k", ")", "\n", "inp", ".", "append", "(", "inp_k", ")", "\n", "orig_img", ".", "append", "(", "orig_img_k", ")", "\n", "im_dim_list", ".", "append", "(", "im_dim_list_k", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "ht", "=", "inp", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "wd", "=", "inp", "[", "0", "]", ".", "size", "(", "2", ")", "\n", "# Human Detection", "\n", "img", "=", "Variable", "(", "torch", ".", "cat", "(", "img", ")", ")", ".", "cuda", "(", ")", "\n", "im_dim_list", "=", "torch", ".", "FloatTensor", "(", "im_dim_list", ")", ".", "repeat", "(", "1", ",", "2", ")", "\n", "im_dim_list", "=", "im_dim_list", ".", "cuda", "(", ")", "\n", "\n", "prediction", "=", "self", ".", "det_model", "(", "img", ",", "CUDA", "=", "True", ")", "\n", "# NMS process", "\n", "dets", "=", "dynamic_write_results", "(", "prediction", ",", "opt", ".", "confidence", ",", "\n", "opt", ".", "num_classes", ",", "nms", "=", "True", ",", "nms_conf", "=", "opt", ".", "nms_thesh", ")", "\n", "if", "isinstance", "(", "dets", ",", "int", ")", "or", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "for", "k", "in", "range", "(", "len", "(", "inp", ")", ")", ":", "\n", "                        ", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                            ", "time", ".", "sleep", "(", "0.2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "inp", "[", "k", "]", ",", "orig_img", "[", "k", "]", ",", "None", ",", "None", ")", ")", "\n", "", "continue", "\n", "\n", "", "im_dim_list", "=", "torch", ".", "index_select", "(", "im_dim_list", ",", "0", ",", "dets", "[", ":", ",", "0", "]", ".", "long", "(", ")", ")", "\n", "scaling_factor", "=", "torch", ".", "min", "(", "self", ".", "det_inp_dim", "/", "im_dim_list", ",", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# coordinate transfer", "\n", "dets", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "(", "self", ".", "det_inp_dim", "-", "scaling_factor", "*", "im_dim_list", "[", ":", ",", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "/", "2", "\n", "dets", "[", ":", ",", "[", "2", ",", "4", "]", "]", "-=", "(", "self", ".", "det_inp_dim", "-", "scaling_factor", "*", "im_dim_list", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "/", "2", "\n", "\n", "dets", "[", ":", ",", "1", ":", "5", "]", "/=", "scaling_factor", "\n", "for", "j", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "dets", "[", "j", ",", "[", "1", ",", "3", "]", "]", "=", "torch", ".", "clamp", "(", "dets", "[", "j", ",", "[", "1", ",", "3", "]", "]", ",", "0.0", ",", "im_dim_list", "[", "j", ",", "0", "]", ")", "\n", "dets", "[", "j", ",", "[", "2", ",", "4", "]", "]", "=", "torch", ".", "clamp", "(", "dets", "[", "j", ",", "[", "2", ",", "4", "]", "]", ",", "0.0", ",", "im_dim_list", "[", "j", ",", "1", "]", ")", "\n", "", "boxes", "=", "dets", "[", ":", ",", "1", ":", "5", "]", ".", "cpu", "(", ")", "\n", "scores", "=", "dets", "[", ":", ",", "5", ":", "6", "]", ".", "cpu", "(", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "inp", ")", ")", ":", "\n", "                ", "while", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.2", ")", "\n", "", "self", ".", "Q", ".", "put", "(", "(", "inp", "[", "k", "]", ",", "orig_img", "[", "k", "]", ",", "boxes", "[", "dets", "[", ":", ",", "0", "]", "==", "k", "]", ",", "scores", "[", "dets", "[", ":", ",", "0", "]", "==", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.videoinfo": [[530, 536], ["int", "dataloader.VideoDetectionLoader.stream.get", "dataloader.VideoDetectionLoader.stream.get", "int", "int", "dataloader.VideoDetectionLoader.stream.get", "dataloader.VideoDetectionLoader.stream.get"], "methods", ["None"], ["", "", "", "def", "videoinfo", "(", "self", ")", ":", "\n", "# indicate the video info", "\n", "        ", "fourcc", "=", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FOURCC", ")", ")", "\n", "fps", "=", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "frameSize", "=", "(", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", ",", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", ")", "\n", "return", "(", "fourcc", ",", "fps", ",", "frameSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.read": [[537, 540], ["dataloader.VideoDetectionLoader.Q.get"], "methods", ["None"], ["", "def", "read", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.more": [[541, 544], ["dataloader.VideoDetectionLoader.Q.qsize"], "methods", ["None"], ["", "def", "more", "(", "self", ")", ":", "\n", "# return True if there are still frames in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.VideoDetectionLoader.stop": [[545, 548], ["None"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "# indicate that the thread should be stopped", "\n", "        ", "self", ".", "stopped", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.__init__": [[551, 560], ["cv2.VideoCapture", "dataloader.WebcamLoader.stream.isOpened", "LifoQueue", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "webcam", ",", "queueSize", "=", "256", ")", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "        ", "self", ".", "stream", "=", "cv2", ".", "VideoCapture", "(", "int", "(", "webcam", ")", ")", "\n", "assert", "self", ".", "stream", ".", "isOpened", "(", ")", ",", "'Cannot capture source'", "\n", "self", ".", "stopped", "=", "False", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "self", ".", "Q", "=", "LifoQueue", "(", "maxsize", "=", "queueSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.start": [[561, 567], ["threading.Thread", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ")", "\n", "t", ".", "daemon", "=", "True", "\n", "t", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.update": [[568, 590], ["dataloader.WebcamLoader.Q.full", "dataloader.WebcamLoader.stream.read", "int", "yolo.preprocess.prep_frame", "SPPE.src.utils.img.im_to_torch", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "dataloader.WebcamLoader.Q.put", "dataloader.WebcamLoader.stop", "dataloader.WebcamLoader.Q.queue.clear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_frame", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.stop", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping infinitely", "\n", "        ", "while", "True", ":", "\n", "# otherwise, ensure the queue has room in it", "\n", "            ", "if", "not", "self", ".", "Q", ".", "full", "(", ")", ":", "\n", "# read the next frame from the file", "\n", "                ", "(", "grabbed", ",", "frame", ")", "=", "self", ".", "stream", ".", "read", "(", ")", "\n", "# if the `grabbed` boolean is `False`, then we have", "\n", "# reached the end of the video file", "\n", "if", "not", "grabbed", ":", "\n", "                    ", "self", ".", "stop", "(", ")", "\n", "return", "\n", "# process and add the frame to the queue", "\n", "", "inp_dim", "=", "int", "(", "opt", ".", "inp_dim", ")", "\n", "img", ",", "orig_img", ",", "dim", "=", "prep_frame", "(", "frame", ",", "inp_dim", ")", "\n", "inp", "=", "im_to_torch", "(", "orig_img", ")", "\n", "im_dim_list", "=", "torch", ".", "FloatTensor", "(", "[", "dim", "]", ")", ".", "repeat", "(", "1", ",", "2", ")", "\n", "\n", "self", ".", "Q", ".", "put", "(", "(", "img", ",", "orig_img", ",", "inp", ",", "im_dim_list", ")", ")", "\n", "", "else", ":", "\n", "                ", "with", "self", ".", "Q", ".", "mutex", ":", "\n", "                    ", "self", ".", "Q", ".", "queue", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.videoinfo": [[591, 597], ["int", "dataloader.WebcamLoader.stream.get", "dataloader.WebcamLoader.stream.get", "int", "int", "dataloader.WebcamLoader.stream.get", "dataloader.WebcamLoader.stream.get"], "methods", ["None"], ["", "", "", "", "def", "videoinfo", "(", "self", ")", ":", "\n", "# indicate the video info", "\n", "        ", "fourcc", "=", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FOURCC", ")", ")", "\n", "fps", "=", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "frameSize", "=", "(", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", ",", "int", "(", "self", ".", "stream", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", ")", "\n", "return", "(", "fourcc", ",", "fps", ",", "frameSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read": [[598, 601], ["dataloader.WebcamLoader.Q.get"], "methods", ["None"], ["", "def", "read", "(", "self", ")", ":", "\n", "# return next frame in the queue", "\n", "        ", "return", "self", ".", "Q", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.len": [[602, 605], ["dataloader.WebcamLoader.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "# return queue size", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.stop": [[606, 609], ["None"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "# indicate that the thread should be stopped", "\n", "        ", "self", ".", "stopped", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.__init__": [[612, 629], ["cv2.VideoWriter_fourcc", "multiprocessing.Queue", "cv2.VideoWriter", "dataloader.DataWriter.stream.isOpened", "os.path.exists", "os.mkdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "save_video", "=", "False", ",", "\n", "savepath", "=", "'examples/res/1.avi'", ",", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", ",", "fps", "=", "25", ",", "frameSize", "=", "(", "640", ",", "480", ")", ",", "\n", "queueSize", "=", "1024", ")", ":", "\n", "        ", "if", "save_video", ":", "\n", "# initialize the file video stream along with the boolean", "\n", "# used to indicate if the thread should be stopped or not", "\n", "            ", "self", ".", "stream", "=", "cv2", ".", "VideoWriter", "(", "savepath", ",", "fourcc", ",", "fps", ",", "frameSize", ")", "\n", "assert", "self", ".", "stream", ".", "isOpened", "(", ")", ",", "'Cannot open video for writing'", "\n", "", "self", ".", "save_video", "=", "save_video", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "final_result", "=", "[", "]", "\n", "# initialize the queue used to store frames read from", "\n", "# the video file", "\n", "self", ".", "Q", "=", "Queue", "(", "maxsize", "=", "queueSize", ")", "\n", "if", "opt", ".", "save_img", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "outputpath", "+", "'/vis'", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "opt", ".", "outputpath", "+", "'/vis'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.start": [[630, 637], ["threading.Thread", "threading.Thread.start"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "", "", "def", "start", "(", "self", ")", ":", "\n", "# start a thread to read frames from the file video stream", "\n", "        ", "t", "=", "Thread", "(", "target", "=", "self", ".", "update", ",", "args", "=", "(", ")", ",", "daemon", "=", "True", ")", "\n", "# t = Thread(target=self.update, args=())", "\n", "# t.daemon = True", "\n", "t", ".", "start", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.update": [[638, 688], ["dataloader.DataWriter.Q.empty", "dataloader.DataWriter.Q.get", "numpy.array", "time.sleep", "dataloader.DataWriter.stream.release", "dataloader.DataWriter.final_result.append", "SPPE.src.utils.eval.getMultiPeakPrediction", "matching.candidate_reselect.candidate_reselect", "SPPE.src.utils.eval.getPrediction", "pPose_nms.pose_nms", "vis_frame", "cv2.imshow", "cv2.waitKey", "cv2.imwrite", "dataloader.DataWriter.stream.write", "pt1.numpy", "pt2.numpy", "scores.numpy", "cv2.imshow", "cv2.waitKey", "cv2.imwrite", "dataloader.DataWriter.stream.write", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getMultiPeakPrediction", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.matching.candidate_reselect", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPrediction", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.pose_nms", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.vis_frame", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["", "def", "update", "(", "self", ")", ":", "\n", "# keep looping infinitely", "\n", "        ", "while", "True", ":", "\n", "# if the thread indicator variable is set, stop the", "\n", "# thread", "\n", "            ", "if", "self", ".", "stopped", ":", "\n", "                ", "if", "self", ".", "save_video", ":", "\n", "                    ", "self", ".", "stream", ".", "release", "(", ")", "\n", "", "return", "\n", "# otherwise, ensure the queue is not empty", "\n", "", "if", "not", "self", ".", "Q", ".", "empty", "(", ")", ":", "\n", "                ", "(", "boxes", ",", "scores", ",", "hm_data", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ")", "=", "self", ".", "Q", ".", "get", "(", ")", "\n", "orig_img", "=", "np", ".", "array", "(", "orig_img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "boxes", "is", "None", ":", "\n", "                    ", "if", "opt", ".", "save_img", "or", "opt", ".", "save_video", "or", "opt", ".", "vis", ":", "\n", "                        ", "img", "=", "orig_img", "\n", "if", "opt", ".", "vis", ":", "\n", "                            ", "cv2", ".", "imshow", "(", "\"AlphaPose Demo\"", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "30", ")", "\n", "", "if", "opt", ".", "save_img", ":", "\n", "                            ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "outputpath", ",", "'vis'", ",", "im_name", ")", ",", "img", ")", "\n", "", "if", "opt", ".", "save_video", ":", "\n", "                            ", "self", ".", "stream", ".", "write", "(", "img", ")", "\n", "", "", "", "else", ":", "\n", "# location prediction (n, kp, 2) | score prediction (n, kp, 1)", "\n", "                    ", "if", "opt", ".", "matching", ":", "\n", "                        ", "preds", "=", "getMultiPeakPrediction", "(", "\n", "hm_data", ",", "pt1", ".", "numpy", "(", ")", ",", "pt2", ".", "numpy", "(", ")", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ",", "opt", ".", "outputResH", ",", "opt", ".", "outputResW", ")", "\n", "result", "=", "matching", "(", "boxes", ",", "scores", ".", "numpy", "(", ")", ",", "preds", ")", "\n", "", "else", ":", "\n", "                        ", "preds_hm", ",", "preds_img", ",", "preds_scores", "=", "getPrediction", "(", "\n", "hm_data", ",", "pt1", ",", "pt2", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ",", "opt", ".", "outputResH", ",", "opt", ".", "outputResW", ")", "\n", "result", "=", "pose_nms", "(", "\n", "boxes", ",", "scores", ",", "preds_img", ",", "preds_scores", ")", "\n", "", "result", "=", "{", "\n", "'imgname'", ":", "im_name", ",", "\n", "'result'", ":", "result", "\n", "}", "\n", "self", ".", "final_result", ".", "append", "(", "result", ")", "\n", "if", "opt", ".", "save_img", "or", "opt", ".", "save_video", "or", "opt", ".", "vis", ":", "\n", "                        ", "img", "=", "vis_frame", "(", "orig_img", ",", "result", ")", "\n", "if", "opt", ".", "vis", ":", "\n", "                            ", "cv2", ".", "imshow", "(", "\"AlphaPose Demo\"", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "30", ")", "\n", "", "if", "opt", ".", "save_img", ":", "\n", "                            ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "outputpath", ",", "'vis'", ",", "im_name", ")", ",", "img", ")", "\n", "", "if", "opt", ".", "save_video", ":", "\n", "                            ", "self", ".", "stream", ".", "write", "(", "img", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.running": [[689, 693], ["time.sleep", "dataloader.DataWriter.Q.empty"], "methods", ["None"], ["", "", "", "def", "running", "(", "self", ")", ":", "\n", "# indicate that the thread is still running", "\n", "        ", "time", ".", "sleep", "(", "0.2", ")", "\n", "return", "not", "self", ".", "Q", ".", "empty", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.save": [[694, 697], ["dataloader.DataWriter.Q.put"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "boxes", ",", "scores", ",", "hm_data", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ")", ":", "\n", "# save next frame in the queue", "\n", "        ", "self", ".", "Q", ".", "put", "(", "(", "boxes", ",", "scores", ",", "hm_data", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.stop": [[698, 702], ["time.sleep"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "# indicate that the thread should be stopped", "\n", "        ", "self", ".", "stopped", "=", "True", "\n", "time", ".", "sleep", "(", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.results": [[703, 706], ["None"], "methods", ["None"], ["", "def", "results", "(", "self", ")", ":", "\n", "# return final result", "\n", "        ", "return", "self", ".", "final_result", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len": [[707, 710], ["dataloader.DataWriter.Q.qsize"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "# return queue len", "\n", "        ", "return", "self", ".", "Q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.Mscoco.__init__": [[713, 735], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "sigma", "=", "1", ",", "\n", "scale_factor", "=", "(", "0.2", ",", "0.3", ")", ",", "rot_factor", "=", "40", ",", "label_type", "=", "'Gaussian'", ")", ":", "\n", "        ", "self", ".", "img_folder", "=", "'../data/coco/images'", "# root image folders", "\n", "self", ".", "is_train", "=", "train", "# training set or test set", "\n", "self", ".", "inputResH", "=", "opt", ".", "inputResH", "\n", "self", ".", "inputResW", "=", "opt", ".", "inputResW", "\n", "self", ".", "outputResH", "=", "opt", ".", "outputResH", "\n", "self", ".", "outputResW", "=", "opt", ".", "outputResW", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "rot_factor", "=", "rot_factor", "\n", "self", ".", "label_type", "=", "label_type", "\n", "\n", "self", ".", "nJoints_coco", "=", "17", "\n", "self", ".", "nJoints_mpii", "=", "16", "\n", "self", ".", "nJoints", "=", "33", "\n", "\n", "self", ".", "accIdxs", "=", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "\n", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ")", "\n", "self", ".", "flipRef", "=", "(", "(", "2", ",", "3", ")", ",", "(", "4", ",", "5", ")", ",", "(", "6", ",", "7", ")", ",", "\n", "(", "8", ",", "9", ")", ",", "(", "10", ",", "11", ")", ",", "(", "12", ",", "13", ")", ",", "\n", "(", "14", ",", "15", ")", ",", "(", "16", ",", "17", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.Mscoco.__getitem__": [[736, 738], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.Mscoco.__len__": [[739, 741], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.crop_from_dets": [[743, 783], ["img.size", "img.size", "tmp_img[].add_", "tmp_img[].add_", "tmp_img[].add_", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "max", "max", "max", "max", "min", "min", "SPPE.src.utils.img.cropBox", "float", "float", "float", "float", "tmp_img.clone", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cropBox"], ["", "", "def", "crop_from_dets", "(", "img", ",", "boxes", ",", "inps", ",", "pt1", ",", "pt2", ")", ":", "\n", "    ", "'''\n    Crop human from origin image according to Dectecion Results\n    '''", "\n", "\n", "imght", "=", "img", ".", "size", "(", "1", ")", "\n", "imgwidth", "=", "img", ".", "size", "(", "2", ")", "\n", "tmp_img", "=", "img", "\n", "tmp_img", "[", "0", "]", ".", "add_", "(", "-", "0.406", ")", "\n", "tmp_img", "[", "1", "]", ".", "add_", "(", "-", "0.457", ")", "\n", "tmp_img", "[", "2", "]", ".", "add_", "(", "-", "0.480", ")", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "        ", "upLeft", "=", "torch", ".", "Tensor", "(", "\n", "(", "float", "(", "box", "[", "0", "]", ")", ",", "float", "(", "box", "[", "1", "]", ")", ")", ")", "\n", "bottomRight", "=", "torch", ".", "Tensor", "(", "\n", "(", "float", "(", "box", "[", "2", "]", ")", ",", "float", "(", "box", "[", "3", "]", ")", ")", ")", "\n", "\n", "ht", "=", "bottomRight", "[", "1", "]", "-", "upLeft", "[", "1", "]", "\n", "width", "=", "bottomRight", "[", "0", "]", "-", "upLeft", "[", "0", "]", "\n", "\n", "scaleRate", "=", "0.3", "\n", "\n", "upLeft", "[", "0", "]", "=", "max", "(", "0", ",", "upLeft", "[", "0", "]", "-", "width", "*", "scaleRate", "/", "2", ")", "\n", "upLeft", "[", "1", "]", "=", "max", "(", "0", ",", "upLeft", "[", "1", "]", "-", "ht", "*", "scaleRate", "/", "2", ")", "\n", "bottomRight", "[", "0", "]", "=", "max", "(", "\n", "min", "(", "imgwidth", "-", "1", ",", "bottomRight", "[", "0", "]", "+", "width", "*", "scaleRate", "/", "2", ")", ",", "upLeft", "[", "0", "]", "+", "5", ")", "\n", "bottomRight", "[", "1", "]", "=", "max", "(", "\n", "min", "(", "imght", "-", "1", ",", "bottomRight", "[", "1", "]", "+", "ht", "*", "scaleRate", "/", "2", ")", ",", "upLeft", "[", "1", "]", "+", "5", ")", "\n", "\n", "try", ":", "\n", "            ", "inps", "[", "i", "]", "=", "cropBox", "(", "tmp_img", ".", "clone", "(", ")", ",", "upLeft", ",", "bottomRight", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "print", "(", "tmp_img", ".", "shape", ")", "\n", "print", "(", "upLeft", ")", "\n", "print", "(", "bottomRight", ")", "\n", "print", "(", "'==='", ")", "\n", "", "pt1", "[", "i", "]", "=", "upLeft", "\n", "pt2", "[", "i", "]", "=", "bottomRight", "\n", "\n", "", "return", "inps", ",", "pt1", ",", "pt2", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.gene_npz.model_load": [[27, 30], ["None"], "function", ["None"], ["", "def", "model_load", "(", ")", ":", "\n", "    ", "model", "=", "None", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.gene_npz.image_interface": [[32, 34], ["None"], "function", ["None"], ["", "def", "image_interface", "(", "model", ",", "image", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.gene_npz.generate_kpts": [[36, 72], ["gene_npz.handle_video", "range", "len", "kpts.append", "no_person.clear", "no_person.append", "kpts.append", "max", "kpt.data.numpy", "common.utils.calculate_area"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api.handle_video", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.calculate_area"], ["", "def", "generate_kpts", "(", "video_file", ")", ":", "\n", "    ", "final_result", ",", "video_name", "=", "handle_video", "(", "video_file", ")", "\n", "\n", "# ============ Changing ++++++++++", "\n", "\n", "kpts", "=", "[", "]", "\n", "no_person", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "final_result", ")", ")", ":", "\n", "        ", "if", "not", "final_result", "[", "i", "]", "[", "'result'", "]", ":", "# No people", "\n", "            ", "no_person", ".", "append", "(", "i", ")", "\n", "kpts", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "kpt", "=", "max", "(", "final_result", "[", "i", "]", "[", "'result'", "]", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "'proposal_score'", "]", ".", "data", "[", "0", "]", "*", "calculate_area", "(", "x", "[", "'keypoints'", "]", ")", ",", ")", "[", "'keypoints'", "]", "\n", "\n", "kpts", ".", "append", "(", "kpt", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "for", "n", "in", "no_person", ":", "\n", "            ", "kpts", "[", "n", "]", "=", "kpts", "[", "-", "1", "]", "\n", "", "no_person", ".", "clear", "(", ")", "\n", "\n", "", "for", "n", "in", "no_person", ":", "\n", "        ", "kpts", "[", "n", "]", "=", "kpts", "[", "-", "1", "]", "if", "kpts", "[", "-", "1", "]", "else", "kpts", "[", "n", "-", "1", "]", "\n", "\n", "# ============ Changing End ++++++++++", "\n", "\n", "# name = f'{args.outputpath}/{video_name}_det2D.npz'", "\n", "# npy_folder = os.path.abspath(os.path.join(video_file, os.pardir))", "\n", "# name = video_file.replace('.mp4', '_det2D.npz').replace('source_video', 'det2D')", "\n", "# mkd(name)", "\n", "# kpts = np.array(kpts).astype(np.float32)", "\n", "# print('kpts npz save in ', name)", "\n", "# np.savez_compressed(name, kpts=kpts)  # move to main file for both detectors", "\n", "\n", "", "return", "kpts", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.gene_npz.handle_video": [[74, 196], ["os.path.basename", "os.path.exists", "dataloader.VideoLoader().start", "VideoLoader().start.videoinfo", "print", "print", "print", "sys.stdout.flush", "dataloader.DetectionLoader().start", "dataloader.DetectionProcessor().start", "dataloader.Mscoco", "SPPE.src.main_fast_inference.InferenNet.cuda", "SPPE.src.main_fast_inference.InferenNet.eval", "os.path.join", "dataloader.DataWriter().start", "print", "tqdm.tqdm", "DataWriter().start.running", "DataWriter().start.stop", "DataWriter().start.results", "pPose_nms.write_json", "shutil.rmtree", "os.mkdir", "len", "IOError", "SPPE.src.main_fast_inference.InferenNet_fast", "SPPE.src.main_fast_inference.InferenNet", "range", "fn.getTime", "print", "print", "os.path.basename.rfind", "dataloader.VideoLoader", "dataloader.DetectionLoader", "dataloader.DetectionProcessor", "dataloader.DataWriter", "VideoLoader().start.length", "torch.no_grad", "DetectionProcessor().start.read", "fn.getTime", "runtime_profile[].append", "inps.size", "range", "torch.cat", "fn.getTime", "runtime_profile[].append", "DataWriter().start.save", "fn.getTime", "runtime_profile[].append", "tqdm.tqdm.set_description", "print", "DataWriter().start.save", "inps[].cuda", "SPPE.src.main_fast_inference.InferenNet.", "torch.cat.append", "torch.cat.cpu", "ntpath.basename().split", "boxes.nelement", "im_name.split", "im_name.split", "numpy.mean", "numpy.mean", "numpy.mean", "ntpath.basename", "min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.videoinfo", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.running", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.stop", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.write_json", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.length", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "handle_video", "(", "video_file", ")", ":", "\n", "# =========== common ===============", "\n", "    ", "args", ".", "video", "=", "video_file", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "video", ")", "\n", "video_name", "=", "base_name", "[", ":", "base_name", ".", "rfind", "(", "'.'", ")", "]", "\n", "# =========== end common ===============", "\n", "# =========== image ===============", "\n", "# img_path = f'outputs/alpha_pose_{video_name}/split_image/'", "\n", "# args.inputpath = img_path", "\n", "# args.outputpath = f'outputs/alpha_pose_{video_name}'", "\n", "# if os.path.exists(args.outputpath):", "\n", "#     shutil.rmtree(f'{args.outputpath}/vis', ignore_errors=True)", "\n", "# else:", "\n", "#     os.mkdir(args.outputpath)", "\n", "#", "\n", "# # if not len(video_file):", "\n", "# #     raise IOError('Error: must contain --video')", "\n", "#", "\n", "# if len(img_path) and img_path != '/':", "\n", "#     for root, dirs, files in os.walk(img_path):", "\n", "#         im_names = sorted([f for f in files if 'png' in f or 'jpg' in f])", "\n", "# else:", "\n", "#     raise IOError('Error: must contain either --indir/--list')", "\n", "#", "\n", "# # Load input images", "\n", "# data_loader = ImageLoader(im_names, batchSize=args.detbatch, format='yolo').start()", "\n", "# print(f'Totally {data_loader.datalen} images')", "\n", "# =========== end image ===============", "\n", "# =========== video ===============", "\n", "args", ".", "outputpath", "=", "f'outputs/alpha_pose_{video_name}'", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "outputpath", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "f'{args.outputpath}/vis'", ",", "ignore_errors", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "outputpath", ")", "\n", "", "videofile", "=", "args", ".", "video", "\n", "mode", "=", "args", ".", "mode", "\n", "if", "not", "len", "(", "videofile", ")", ":", "\n", "        ", "raise", "IOError", "(", "'Error: must contain --video'", ")", "\n", "# Load input video", "\n", "", "data_loader", "=", "VideoLoader", "(", "videofile", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "(", "fourcc", ",", "fps", ",", "frameSize", ")", "=", "data_loader", ".", "videoinfo", "(", ")", "\n", "print", "(", "'the video is {} f/s'", ".", "format", "(", "fps", ")", ")", "\n", "print", "(", "'the video frameSize: {}'", ".", "format", "(", "frameSize", ")", ")", "\n", "# =========== end video ===============", "\n", "# Load detection loader", "\n", "print", "(", "'Loading YOLO model..'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "det_loader", "=", "DetectionLoader", "(", "data_loader", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "#  start a thread to read frames from the file video stream", "\n", "det_processor", "=", "DetectionProcessor", "(", "det_loader", ")", ".", "start", "(", ")", "\n", "# Load pose model", "\n", "pose_dataset", "=", "Mscoco", "(", ")", "\n", "if", "args", ".", "fast_inference", ":", "\n", "        ", "pose_model", "=", "InferenNet_fast", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "else", ":", "\n", "        ", "pose_model", "=", "InferenNet", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "pose_model", ".", "cuda", "(", ")", "\n", "pose_model", ".", "eval", "(", ")", "\n", "runtime_profile", "=", "{", "\n", "'dt'", ":", "[", "]", ",", "\n", "'pt'", ":", "[", "]", ",", "\n", "'pn'", ":", "[", "]", "\n", "}", "\n", "# Data writer", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputpath", ",", "'AlphaPose_'", "+", "ntpath", ".", "basename", "(", "video_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.avi'", ")", "\n", "# writer = DataWriter(args.save_video, save_path, cv2.VideoWriter_fourcc(*'XVID'), fps, frameSize).start()", "\n", "writer", "=", "DataWriter", "(", "args", ".", "save_video", ")", ".", "start", "(", ")", "\n", "print", "(", "'Start pose estimation...'", ")", "\n", "im_names_desc", "=", "tqdm", "(", "range", "(", "data_loader", ".", "length", "(", ")", ")", ")", "\n", "batchSize", "=", "args", ".", "posebatch", "\n", "for", "i", "in", "im_names_desc", ":", "\n", "\n", "        ", "start_time", "=", "getTime", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "inps", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "pt1", ",", "pt2", ")", "=", "det_processor", ".", "read", "(", ")", "\n", "if", "orig_img", "is", "None", ":", "\n", "                ", "print", "(", "f'{i}-th image read None: handle_video'", ")", "\n", "break", "\n", "", "if", "boxes", "is", "None", "or", "boxes", ".", "nelement", "(", ")", "==", "0", ":", "\n", "                ", "writer", ".", "save", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "continue", "\n", "\n", "", "ckpt_time", ",", "det_time", "=", "getTime", "(", "start_time", ")", "\n", "runtime_profile", "[", "'dt'", "]", ".", "append", "(", "det_time", ")", "\n", "# Pose Estimation", "\n", "\n", "datalen", "=", "inps", ".", "size", "(", "0", ")", "\n", "leftover", "=", "0", "\n", "if", "datalen", "%", "batchSize", ":", "\n", "                ", "leftover", "=", "1", "\n", "", "num_batches", "=", "datalen", "//", "batchSize", "+", "leftover", "\n", "hm", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "inps_j", "=", "inps", "[", "j", "*", "batchSize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "batchSize", ",", "datalen", ")", "]", ".", "cuda", "(", ")", "\n", "hm_j", "=", "pose_model", "(", "inps_j", ")", "\n", "hm", ".", "append", "(", "hm_j", ")", "\n", "", "hm", "=", "torch", ".", "cat", "(", "hm", ")", "\n", "ckpt_time", ",", "pose_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pt'", "]", ".", "append", "(", "pose_time", ")", "\n", "\n", "hm", "=", "hm", ".", "cpu", "(", ")", ".", "data", "\n", "writer", ".", "save", "(", "boxes", ",", "scores", ",", "hm", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "ckpt_time", ",", "post_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pn'", "]", ".", "append", "(", "post_time", ")", "\n", "\n", "", "if", "args", ".", "profile", ":", "\n", "# TQDM", "\n", "            ", "im_names_desc", ".", "set_description", "(", "\n", "'det time: {dt:.4f} | pose time: {pt:.4f} | post processing: {pn:.4f}'", ".", "format", "(", "\n", "dt", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'dt'", "]", ")", ",", "pt", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'pt'", "]", ")", ",", "pn", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'pn'", "]", ")", ")", "\n", ")", "\n", "", "", "if", "(", "args", ".", "save_img", "or", "args", ".", "save_video", ")", "and", "not", "args", ".", "vis_fast", ":", "\n", "        ", "print", "(", "'===========================> Rendering remaining images in the queue...'", ")", "\n", "print", "(", "'===========================> If this step takes too long, you can enable the --vis_fast flag to use fast rendering (real-time).'", ")", "\n", "", "while", "writer", ".", "running", "(", ")", ":", "\n", "        ", "pass", "\n", "", "writer", ".", "stop", "(", ")", "\n", "final_result", "=", "writer", ".", "results", "(", ")", "\n", "write_json", "(", "final_result", ",", "args", ".", "outputpath", ")", "\n", "\n", "return", "final_result", ",", "video_name", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.gene_npz.mkd": [[197, 205], ["os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api.model_load": [[42, 45], ["None"], "function", ["None"], ["", "def", "model_load", "(", ")", ":", "\n", "    ", "model", "=", "None", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api.image_interface": [[47, 49], ["None"], "function", ["None"], ["", "def", "image_interface", "(", "model", ",", "image", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api.generate_kpts": [[51, 87], ["detector_api.handle_video", "range", "len", "kpts.append", "no_person.clear", "no_person.append", "kpts.append", "max", "kpt.data.numpy", "common.utils.calculate_area"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api.handle_video", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.calculate_area"], ["", "def", "generate_kpts", "(", "video_file", ")", ":", "\n", "    ", "final_result", ",", "video_name", "=", "handle_video", "(", "video_file", ")", "\n", "\n", "# ============ Changing ++++++++++", "\n", "\n", "kpts", "=", "[", "]", "\n", "no_person", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "final_result", ")", ")", ":", "\n", "        ", "if", "not", "final_result", "[", "i", "]", "[", "'result'", "]", ":", "# No people", "\n", "            ", "no_person", ".", "append", "(", "i", ")", "\n", "kpts", ".", "append", "(", "None", ")", "\n", "continue", "\n", "\n", "", "kpt", "=", "max", "(", "final_result", "[", "i", "]", "[", "'result'", "]", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "'proposal_score'", "]", ".", "data", "[", "0", "]", "*", "calculate_area", "(", "x", "[", "'keypoints'", "]", ")", ",", ")", "[", "'keypoints'", "]", "\n", "\n", "kpts", ".", "append", "(", "kpt", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "for", "n", "in", "no_person", ":", "\n", "            ", "kpts", "[", "n", "]", "=", "kpts", "[", "-", "1", "]", "\n", "", "no_person", ".", "clear", "(", ")", "\n", "\n", "", "for", "n", "in", "no_person", ":", "\n", "        ", "kpts", "[", "n", "]", "=", "kpts", "[", "-", "1", "]", "if", "kpts", "[", "-", "1", "]", "else", "kpts", "[", "n", "-", "1", "]", "\n", "\n", "# ============ Changing End ++++++++++", "\n", "\n", "# name = f'{args.outputpath}/{video_name}_det2D.npz'", "\n", "# npy_folder = os.path.abspath(os.path.join(video_file, os.pardir))", "\n", "# name = video_file.replace('.mp4', '_det2D.npz').replace('source_video', 'det2D')", "\n", "# mkd(name)", "\n", "# kpts = np.array(kpts).astype(np.float32)", "\n", "# print('kpts npz save in ', name)", "\n", "# np.savez_compressed(name, kpts=kpts)  # move to main file for both detectors", "\n", "\n", "", "return", "kpts", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api.handle_video": [[89, 211], ["os.path.basename", "os.path.exists", "dataloader.VideoLoader().start", "VideoLoader().start.videoinfo", "print", "print", "print", "sys.stdout.flush", "dataloader.DetectionLoader().start", "dataloader.DetectionProcessor().start", "dataloader.Mscoco", "SPPE.src.main_fast_inference.InferenNet.cuda", "SPPE.src.main_fast_inference.InferenNet.eval", "os.path.join", "dataloader.DataWriter().start", "print", "tqdm.tqdm", "DataWriter().start.running", "DataWriter().start.stop", "DataWriter().start.results", "pPose_nms.write_json", "shutil.rmtree", "os.mkdir", "len", "IOError", "SPPE.src.main_fast_inference.InferenNet_fast", "SPPE.src.main_fast_inference.InferenNet", "range", "fn.getTime", "print", "print", "os.path.basename.rfind", "dataloader.VideoLoader", "dataloader.DetectionLoader", "dataloader.DetectionProcessor", "dataloader.DataWriter", "VideoLoader().start.length", "torch.no_grad", "DetectionProcessor().start.read", "fn.getTime", "runtime_profile[].append", "inps.size", "range", "torch.cat", "fn.getTime", "runtime_profile[].append", "DataWriter().start.save", "fn.getTime", "runtime_profile[].append", "tqdm.tqdm.set_description", "print", "DataWriter().start.save", "inps[].cuda", "SPPE.src.main_fast_inference.InferenNet.", "torch.cat.append", "torch.cat.cpu", "ntpath.basename().split", "boxes.nelement", "im_name.split", "im_name.split", "numpy.mean", "numpy.mean", "numpy.mean", "ntpath.basename", "min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.videoinfo", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.running", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.stop", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.write_json", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.length", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.fn.getTime", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "handle_video", "(", "video_file", ")", ":", "\n", "# =========== common ===============", "\n", "    ", "args", ".", "video", "=", "video_file", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "video", ")", "\n", "video_name", "=", "base_name", "[", ":", "base_name", ".", "rfind", "(", "'.'", ")", "]", "\n", "# =========== end common ===============", "\n", "# =========== image ===============", "\n", "# img_path = f'outputs/alpha_pose_{video_name}/split_image/'", "\n", "# args.inputpath = img_path", "\n", "# args.outputpath = f'outputs/alpha_pose_{video_name}'", "\n", "# if os.path.exists(args.outputpath):", "\n", "#     shutil.rmtree(f'{args.outputpath}/vis', ignore_errors=True)", "\n", "# else:", "\n", "#     os.mkdir(args.outputpath)", "\n", "#", "\n", "# # if not len(video_file):", "\n", "# #     raise IOError('Error: must contain --video')", "\n", "#", "\n", "# if len(img_path) and img_path != '/':", "\n", "#     for root, dirs, files in os.walk(img_path):", "\n", "#         im_names = sorted([f for f in files if 'png' in f or 'jpg' in f])", "\n", "# else:", "\n", "#     raise IOError('Error: must contain either --indir/--list')", "\n", "#", "\n", "# # Load input images", "\n", "# data_loader = ImageLoader(im_names, batchSize=args.detbatch, format='yolo').start()", "\n", "# print(f'Totally {data_loader.datalen} images')", "\n", "# =========== end image ===============", "\n", "# =========== video ===============", "\n", "args", ".", "outputpath", "=", "f'outputs/alpha_pose_{video_name}'", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "outputpath", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "f'{args.outputpath}/vis'", ",", "ignore_errors", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "outputpath", ")", "\n", "", "videofile", "=", "args", ".", "video", "\n", "mode", "=", "args", ".", "mode", "\n", "if", "not", "len", "(", "videofile", ")", ":", "\n", "        ", "raise", "IOError", "(", "'Error: must contain --video'", ")", "\n", "# Load input video", "\n", "", "data_loader", "=", "VideoLoader", "(", "videofile", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "(", "fourcc", ",", "fps", ",", "frameSize", ")", "=", "data_loader", ".", "videoinfo", "(", ")", "\n", "print", "(", "'the video is {} f/s'", ".", "format", "(", "fps", ")", ")", "\n", "print", "(", "'the video frameSize: {}'", ".", "format", "(", "frameSize", ")", ")", "\n", "# =========== end video ===============", "\n", "# Load detection loader", "\n", "print", "(", "'Loading YOLO model..'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "det_loader", "=", "DetectionLoader", "(", "data_loader", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "#  start a thread to read frames from the file video stream", "\n", "det_processor", "=", "DetectionProcessor", "(", "det_loader", ")", ".", "start", "(", ")", "\n", "# Load pose model", "\n", "pose_dataset", "=", "Mscoco", "(", ")", "\n", "if", "args", ".", "fast_inference", ":", "\n", "        ", "pose_model", "=", "InferenNet_fast", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "else", ":", "\n", "        ", "pose_model", "=", "InferenNet", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "pose_model", ".", "cuda", "(", ")", "\n", "pose_model", ".", "eval", "(", ")", "\n", "runtime_profile", "=", "{", "\n", "'dt'", ":", "[", "]", ",", "\n", "'pt'", ":", "[", "]", ",", "\n", "'pn'", ":", "[", "]", "\n", "}", "\n", "# Data writer", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "outputpath", ",", "'AlphaPose_'", "+", "ntpath", ".", "basename", "(", "video_file", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.avi'", ")", "\n", "# writer = DataWriter(args.save_video, save_path, cv2.VideoWriter_fourcc(*'XVID'), fps, frameSize).start()", "\n", "writer", "=", "DataWriter", "(", "args", ".", "save_video", ")", ".", "start", "(", ")", "\n", "print", "(", "'Start pose estimation...'", ")", "\n", "im_names_desc", "=", "tqdm", "(", "range", "(", "data_loader", ".", "length", "(", ")", ")", ")", "\n", "batchSize", "=", "args", ".", "posebatch", "\n", "for", "i", "in", "im_names_desc", ":", "\n", "\n", "        ", "start_time", "=", "getTime", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "inps", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "pt1", ",", "pt2", ")", "=", "det_processor", ".", "read", "(", ")", "\n", "if", "orig_img", "is", "None", ":", "\n", "                ", "print", "(", "f'{i}-th image read None: handle_video'", ")", "\n", "break", "\n", "", "if", "boxes", "is", "None", "or", "boxes", ".", "nelement", "(", ")", "==", "0", ":", "\n", "                ", "writer", ".", "save", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "continue", "\n", "\n", "", "ckpt_time", ",", "det_time", "=", "getTime", "(", "start_time", ")", "\n", "runtime_profile", "[", "'dt'", "]", ".", "append", "(", "det_time", ")", "\n", "# Pose Estimation", "\n", "\n", "datalen", "=", "inps", ".", "size", "(", "0", ")", "\n", "leftover", "=", "0", "\n", "if", "datalen", "%", "batchSize", ":", "\n", "                ", "leftover", "=", "1", "\n", "", "num_batches", "=", "datalen", "//", "batchSize", "+", "leftover", "\n", "hm", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "inps_j", "=", "inps", "[", "j", "*", "batchSize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "batchSize", ",", "datalen", ")", "]", ".", "cuda", "(", ")", "\n", "hm_j", "=", "pose_model", "(", "inps_j", ")", "\n", "hm", ".", "append", "(", "hm_j", ")", "\n", "", "hm", "=", "torch", ".", "cat", "(", "hm", ")", "\n", "ckpt_time", ",", "pose_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pt'", "]", ".", "append", "(", "pose_time", ")", "\n", "\n", "hm", "=", "hm", ".", "cpu", "(", ")", ".", "data", "\n", "writer", ".", "save", "(", "boxes", ",", "scores", ",", "hm", ",", "pt1", ",", "pt2", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "ckpt_time", ",", "post_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pn'", "]", ".", "append", "(", "post_time", ")", "\n", "\n", "", "if", "args", ".", "profile", ":", "\n", "# TQDM", "\n", "            ", "im_names_desc", ".", "set_description", "(", "\n", "'det time: {dt:.4f} | pose time: {pt:.4f} | post processing: {pn:.4f}'", ".", "format", "(", "\n", "dt", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'dt'", "]", ")", ",", "pt", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'pt'", "]", ")", ",", "pn", "=", "np", ".", "mean", "(", "runtime_profile", "[", "'pn'", "]", ")", ")", "\n", ")", "\n", "", "", "if", "(", "args", ".", "save_img", "or", "args", ".", "save_video", ")", "and", "not", "args", ".", "vis_fast", ":", "\n", "        ", "print", "(", "'===========================> Rendering remaining images in the queue...'", ")", "\n", "print", "(", "'===========================> If this step takes too long, you can enable the --vis_fast flag to use fast rendering (real-time).'", ")", "\n", "", "while", "writer", ".", "running", "(", ")", ":", "\n", "        ", "pass", "\n", "", "writer", ".", "stop", "(", ")", "\n", "final_result", "=", "writer", ".", "results", "(", ")", "\n", "write_json", "(", "final_result", ",", "args", ".", "outputpath", ")", "\n", "\n", "return", "final_result", ",", "video_name", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.detector_api.mkd": [[212, 220], ["os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train": [[20, 61], ["utils.eval.DataLogger", "utils.eval.DataLogger", "m.train", "tqdm.tqdm", "enumerate", "tqdm.tqdm.close", "inps.cuda().requires_grad_.cuda().requires_grad_", "labels.cuda.cuda", "setMask.cuda.cuda", "m", "criterion", "utils.eval.accuracy", "utils.eval.DataLogger.update", "utils.eval.DataLogger.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "writer.add_scalar", "writer.add_scalar", "tqdm.tqdm.set_description", "m.mul", "m.data.mul", "inps.cuda().requires_grad_.size", "criterion.item", "inps.cuda().requires_grad_.size", "inps.cuda().requires_grad_.cuda"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.accuracy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["def", "train", "(", "train_loader", ",", "m", ",", "criterion", ",", "optimizer", ",", "writer", ")", ":", "\n", "    ", "lossLogger", "=", "DataLogger", "(", ")", "\n", "accLogger", "=", "DataLogger", "(", ")", "\n", "m", ".", "train", "(", ")", "\n", "\n", "train_loader_desc", "=", "tqdm", "(", "train_loader", ")", "\n", "\n", "for", "i", ",", "(", "inps", ",", "labels", ",", "setMask", ",", "imgset", ")", "in", "enumerate", "(", "train_loader_desc", ")", ":", "\n", "        ", "inps", "=", "inps", ".", "cuda", "(", ")", ".", "requires_grad_", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "setMask", "=", "setMask", ".", "cuda", "(", ")", "\n", "out", "=", "m", "(", "inps", ")", "\n", "\n", "loss", "=", "criterion", "(", "out", ".", "mul", "(", "setMask", ")", ",", "labels", ")", "\n", "\n", "acc", "=", "accuracy", "(", "out", ".", "data", ".", "mul", "(", "setMask", ")", ",", "labels", ".", "data", ",", "train_loader", ".", "dataset", ")", "\n", "\n", "accLogger", ".", "update", "(", "acc", "[", "0", "]", ",", "inps", ".", "size", "(", "0", ")", ")", "\n", "lossLogger", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inps", ".", "size", "(", "0", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "opt", ".", "trainIters", "+=", "1", "\n", "# Tensorboard", "\n", "writer", ".", "add_scalar", "(", "\n", "'Train/Loss'", ",", "lossLogger", ".", "avg", ",", "opt", ".", "trainIters", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "'Train/Acc'", ",", "accLogger", ".", "avg", ",", "opt", ".", "trainIters", ")", "\n", "\n", "# TQDM", "\n", "train_loader_desc", ".", "set_description", "(", "\n", "'loss: {loss:.8f} | acc: {acc:.2f}'", ".", "format", "(", "\n", "loss", "=", "lossLogger", ".", "avg", ",", "\n", "acc", "=", "accLogger", ".", "avg", "*", "100", ")", "\n", ")", "\n", "\n", "", "train_loader_desc", ".", "close", "(", ")", "\n", "\n", "return", "lossLogger", ".", "avg", ",", "accLogger", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.valid": [[63, 107], ["utils.eval.DataLogger", "utils.eval.DataLogger", "m.eval", "tqdm.tqdm", "enumerate", "tqdm.tqdm.close", "inps.cuda.cuda", "labels.cuda.cuda", "setMask.cuda.cuda", "utils.eval.accuracy", "utils.eval.DataLogger.update", "utils.eval.DataLogger.update", "writer.add_scalar", "writer.add_scalar", "tqdm.tqdm.set_description", "torch.no_grad", "torch.no_grad", "m", "criterion", "m", "utils.img.flip", "m.mul", "criterion.item", "inps.cuda.size", "inps.cuda.size", "m.mul", "utils.img.flip", "utils.img.shuffleLR"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.accuracy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.shuffleLR"], ["", "def", "valid", "(", "val_loader", ",", "m", ",", "criterion", ",", "optimizer", ",", "writer", ")", ":", "\n", "    ", "lossLogger", "=", "DataLogger", "(", ")", "\n", "accLogger", "=", "DataLogger", "(", ")", "\n", "m", ".", "eval", "(", ")", "\n", "\n", "val_loader_desc", "=", "tqdm", "(", "val_loader", ")", "\n", "\n", "for", "i", ",", "(", "inps", ",", "labels", ",", "setMask", ",", "imgset", ")", "in", "enumerate", "(", "val_loader_desc", ")", ":", "\n", "        ", "inps", "=", "inps", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "setMask", "=", "setMask", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out", "=", "m", "(", "inps", ")", "\n", "\n", "loss", "=", "criterion", "(", "out", ".", "mul", "(", "setMask", ")", ",", "labels", ")", "\n", "\n", "flip_out", "=", "m", "(", "flip", "(", "inps", ")", ")", "\n", "flip_out", "=", "flip", "(", "shuffleLR", "(", "flip_out", ",", "val_loader", ".", "dataset", ")", ")", "\n", "\n", "out", "=", "(", "flip_out", "+", "out", ")", "/", "2", "\n", "\n", "", "acc", "=", "accuracy", "(", "out", ".", "mul", "(", "setMask", ")", ",", "labels", ",", "val_loader", ".", "dataset", ")", "\n", "\n", "lossLogger", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inps", ".", "size", "(", "0", ")", ")", "\n", "accLogger", ".", "update", "(", "acc", "[", "0", "]", ",", "inps", ".", "size", "(", "0", ")", ")", "\n", "\n", "opt", ".", "valIters", "+=", "1", "\n", "\n", "# Tensorboard", "\n", "writer", ".", "add_scalar", "(", "\n", "'Valid/Loss'", ",", "lossLogger", ".", "avg", ",", "opt", ".", "valIters", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "'Valid/Acc'", ",", "accLogger", ".", "avg", ",", "opt", ".", "valIters", ")", "\n", "\n", "val_loader_desc", ".", "set_description", "(", "\n", "'loss: {loss:.8f} | acc: {acc:.2f}'", ".", "format", "(", "\n", "loss", "=", "lossLogger", ".", "avg", ",", "\n", "acc", "=", "accLogger", ".", "avg", "*", "100", ")", "\n", ")", "\n", "\n", "", "val_loader_desc", ".", "close", "(", ")", "\n", "\n", "return", "lossLogger", ".", "avg", ",", "accLogger", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.main": [[109, 207], ["models.FastPose.createModel().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "tensorboardX.SummaryWriter", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "range", "tensorboardX.SummaryWriter.close", "print", "torch.nn.DataParallel().cuda.load_state_dict", "print", "torch.optim.RMSprop", "torch.optim.RMSprop", "utils.dataset.coco.Mscoco", "utils.dataset.coco.Mscoco", "print", "train.train", "print", "train.valid", "print", "models.FastPose.createModel", "torch.load", "torch.load", "os.path.exists", "os.path.exists", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.DataParallel().cuda.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.mkdir", "os.mkdir", "torch.nn.DataParallel().cuda.parameters", "m_dev.state_dict", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.valid", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.createModel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save"], ["", "def", "main", "(", ")", ":", "\n", "\n", "# Model Initialize", "\n", "    ", "m", "=", "createModel", "(", ")", ".", "cuda", "(", ")", "\n", "if", "opt", ".", "loadModel", ":", "\n", "        ", "print", "(", "'Loading Model from {}'", ".", "format", "(", "opt", ".", "loadModel", ")", ")", "\n", "m", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "loadModel", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"../exp/{}/{}\"", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "mkdir", "(", "\"../exp/{}/{}\"", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "os", ".", "mkdir", "(", "\"../exp/{}\"", ".", "format", "(", "opt", ".", "dataset", ")", ")", "\n", "os", ".", "mkdir", "(", "\"../exp/{}/{}\"", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "print", "(", "'Create new model'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"../exp/{}/{}\"", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "mkdir", "(", "\"../exp/{}/{}\"", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "os", ".", "mkdir", "(", "\"../exp/{}\"", ".", "format", "(", "opt", ".", "dataset", ")", ")", "\n", "os", ".", "mkdir", "(", "\"../exp/{}/{}\"", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ")", ")", "\n", "\n", "", "", "", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "opt", ".", "optMethod", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "m", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "LR", ",", "\n", "momentum", "=", "opt", ".", "momentum", ",", "\n", "weight_decay", "=", "opt", ".", "weightDecay", ")", "\n", "", "elif", "opt", ".", "optMethod", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "m", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "LR", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "\n", "'.tensorboard/{}/{}'", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ")", ")", "\n", "\n", "# Prepare Dataset", "\n", "if", "opt", ".", "dataset", "==", "'coco'", ":", "\n", "        ", "train_dataset", "=", "coco", ".", "Mscoco", "(", "train", "=", "True", ")", "\n", "val_dataset", "=", "coco", ".", "Mscoco", "(", "train", "=", "False", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "opt", ".", "trainBatch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "opt", ".", "nThreads", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "opt", ".", "validBatch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "nThreads", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# Model Transfer", "\n", "m", "=", "torch", ".", "nn", ".", "DataParallel", "(", "m", ")", ".", "cuda", "(", ")", "\n", "\n", "# Start Training", "\n", "for", "i", "in", "range", "(", "opt", ".", "nEpochs", ")", ":", "\n", "        ", "opt", ".", "epoch", "=", "i", "\n", "\n", "print", "(", "'############# Starting Epoch {} #############'", ".", "format", "(", "opt", ".", "epoch", ")", ")", "\n", "loss", ",", "acc", "=", "train", "(", "train_loader", ",", "m", ",", "criterion", ",", "optimizer", ",", "writer", ")", "\n", "\n", "print", "(", "'Train-{idx:d} epoch | loss:{loss:.8f} | acc:{acc:.4f}'", ".", "format", "(", "\n", "idx", "=", "opt", ".", "epoch", ",", "\n", "loss", "=", "loss", ",", "\n", "acc", "=", "acc", "\n", ")", ")", "\n", "\n", "opt", ".", "acc", "=", "acc", "\n", "opt", ".", "loss", "=", "loss", "\n", "m_dev", "=", "m", ".", "module", "\n", "if", "i", "%", "opt", ".", "snapshot", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "\n", "m_dev", ".", "state_dict", "(", ")", ",", "'../exp/{}/{}/model_{}.pkl'", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ",", "opt", ".", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "\n", "opt", ",", "'../exp/{}/{}/option.pkl'", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ",", "opt", ".", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "\n", "optimizer", ",", "'../exp/{}/{}/optimizer.pkl'", ".", "format", "(", "opt", ".", "dataset", ",", "opt", ".", "expID", ")", ")", "\n", "\n", "", "loss", ",", "acc", "=", "valid", "(", "val_loader", ",", "m", ",", "criterion", ",", "optimizer", ",", "writer", ")", "\n", "\n", "print", "(", "'Valid-{idx:d} epoch | loss:{loss:.8f} | acc:{acc:.4f}'", ".", "format", "(", "\n", "idx", "=", "i", ",", "\n", "loss", "=", "loss", ",", "\n", "acc", "=", "acc", "\n", ")", ")", "\n", "\n", "'''\n        if opt.dataset != 'mpii':\n            with torch.no_grad():\n                mAP, mAP5 = prediction(m)\n\n            print('Prediction-{idx:d} epoch | mAP:{mAP:.3f} | mAP0.5:{mAP5:.3f}'.format(\n                idx=i,\n                mAP=mAP,\n                mAP5=mAP5\n            ))\n        '''", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.evaluation.gaussian": [[21, 34], ["numpy.arange", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp"], ["def", "gaussian", "(", "size", ")", ":", "\n", "    ", "'''\n    Generate a 2D gaussian array\n    '''", "\n", "sigma", "=", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "sigma", "=", "size", "/", "4.0", "\n", "# The gaussian is not normalized, we want the center value to equal 1", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "g", "=", "g", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.evaluation.prediction": [[46, 130], ["model.eval", "predict.annot.coco_minival.Mscoco_minival", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tqdm.tqdm", "enumerate", "tqdm.tqdm", "predict.p_poseNMS.write_json", "util.eval.getmap", "tmp_inp.items", "final_result.append", "tmp_inp.keys", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "util.eval.getPrediction", "predict.p_poseNMS.pose_nms", "model", "model", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat.cpu", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.write_json", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getmap", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPrediction", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.pose_nms"], ["def", "prediction", "(", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "dataset", "=", "Mscoco_minival", "(", ")", "\n", "minival_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "20", ",", "pin_memory", "=", "True", ")", "\n", "minival_loader_desc", "=", "tqdm", "(", "minival_loader", ")", "\n", "\n", "final_result", "=", "[", "]", "\n", "\n", "tmp_inp", "=", "{", "}", "\n", "for", "i", ",", "(", "inp", ",", "box", ",", "im_name", ",", "metaData", ")", "in", "enumerate", "(", "minival_loader_desc", ")", ":", "\n", "#inp = torch.autograd.Variable(inp.cuda(), volatile=True)", "\n", "        ", "pt1", ",", "pt2", ",", "ori_inp", "=", "metaData", "\n", "#with torch.autograd.profiler.profile(use_cuda=True) as prof:", "\n", "if", "im_name", "[", "0", "]", "in", "tmp_inp", ".", "keys", "(", ")", ":", "\n", "            ", "inps", "=", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'inps'", "]", "\n", "ori_inps", "=", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'ori_inps'", "]", "\n", "boxes", "=", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'boxes'", "]", "\n", "pt1s", "=", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'pt1s'", "]", "\n", "pt2s", "=", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'pt2s'", "]", "\n", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'inps'", "]", "=", "torch", ".", "cat", "(", "(", "inps", ",", "inp", ")", ",", "dim", "=", "0", ")", "\n", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'pt1s'", "]", "=", "torch", ".", "cat", "(", "(", "pt1s", ",", "pt1", ")", ",", "dim", "=", "0", ")", "\n", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'pt2s'", "]", "=", "torch", ".", "cat", "(", "(", "pt2s", ",", "pt2", ")", ",", "dim", "=", "0", ")", "\n", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'ori_inps'", "]", "=", "torch", ".", "cat", "(", "\n", "(", "ori_inps", ",", "ori_inp", ")", ",", "dim", "=", "0", ")", "\n", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "[", "'boxes'", "]", "=", "torch", ".", "cat", "(", "(", "boxes", ",", "box", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "tmp_inp", "[", "im_name", "[", "0", "]", "]", "=", "{", "\n", "'inps'", ":", "inp", ",", "\n", "'ori_inps'", ":", "ori_inp", ",", "\n", "'boxes'", ":", "box", ",", "\n", "'pt1s'", ":", "pt1", ",", "\n", "'pt2s'", ":", "pt2", "\n", "}", "\n", "\n", "", "", "for", "im_name", ",", "item", "in", "tqdm", "(", "tmp_inp", ".", "items", "(", ")", ")", ":", "\n", "        ", "inp", "=", "item", "[", "'inps'", "]", "\n", "pt1", "=", "item", "[", "'pt1s'", "]", "\n", "pt2", "=", "item", "[", "'pt2s'", "]", "\n", "box", "=", "item", "[", "'boxes'", "]", "\n", "ori_inp", "=", "item", "[", "'ori_inps'", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "kp_preds", "=", "model", "(", "inp", ")", "\n", "kp_preds", "=", "kp_preds", ".", "data", "[", ":", ",", ":", "17", ",", ":", "]", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "'''\n                Divide inputs into two batches\n                '''", "\n", "assert", "str", "(", "e", ")", "==", "'CUDA error: out of memory'", "\n", "bn", "=", "inp", ".", "shape", "[", "0", "]", "\n", "inp1", "=", "inp", "[", ":", "bn", "//", "2", "]", "\n", "inp2", "=", "inp", "[", "bn", "//", "2", ":", "]", "\n", "kp_preds1", "=", "model", "(", "inp1", ")", "\n", "kp_preds2", "=", "model", "(", "inp2", ")", "\n", "kp_preds", "=", "torch", ".", "cat", "(", "(", "kp_preds1", ",", "kp_preds2", ")", ",", "dim", "=", "0", ")", "\n", "kp_preds", "=", "kp_preds", ".", "data", "[", ":", ",", ":", "17", ",", ":", "]", "\n", "\n", "# kp_preds = gaussian_kernel(F.relu(kp_preds))", "\n", "\n", "# Get predictions", "\n", "# location prediction (n, kp, 2) | score prediction (n, kp, 1)", "\n", "\n", "", "preds", ",", "preds_img", ",", "preds_scores", "=", "getPrediction", "(", "\n", "kp_preds", ".", "cpu", "(", ")", ".", "data", ",", "pt1", ",", "pt2", ",", "\n", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ",", "opt", ".", "outputResH", ",", "opt", ".", "outputResW", "\n", ")", "\n", "\n", "result", "=", "pose_nms", "(", "box", ",", "preds_img", ",", "preds_scores", ")", "\n", "result", "=", "{", "\n", "'imgname'", ":", "im_name", ",", "\n", "'result'", ":", "result", "\n", "}", "\n", "#img = display_frame(orig_img, result, opt.outputpath)", "\n", "#ori_inp = np.transpose(", "\n", "#    ori_inp[0][:3].clone().numpy(), (1, 2, 0)) * 255", "\n", "#img = vis_frame(ori_inp, result)", "\n", "#cv2.imwrite(os.path.join(", "\n", "#    './val', 'vis', im_name), img)", "\n", "", "final_result", ".", "append", "(", "result", ")", "\n", "\n", "", "write_json", "(", "final_result", ",", "'./val'", ",", "for_eval", "=", "True", ")", "\n", "return", "getmap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.main_fast_inference.InferenNet.__init__": [[24, 35], ["torch.Module.__init__", "SPPE.src.models.FastPose.createModel().cuda", "print", "sys.stdout.flush", "SPPE.src.models.FastPose.createModel().cuda.load_state_dict", "SPPE.src.models.FastPose.createModel().cuda.eval", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "SPPE.src.models.FastPose.createModel"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.createModel"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "InferenNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "createModel", "(", ")", ".", "cuda", "(", ")", "\n", "print", "(", "'Loading pose model from {}'", ".", "format", "(", "'joints_detectors/Alphapose/models/sppe/duc_se.pth'", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'joints_detectors/Alphapose/models/sppe/duc_se.pth'", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "self", ".", "pyranet", "=", "model", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.main_fast_inference.InferenNet.forward": [[36, 49], ["main_fast_inference.InferenNet.pyranet", "out.narrow.narrow.narrow", "main_fast_inference.InferenNet.pyranet", "SPPE.src.utils.img.flip.narrow", "SPPE.src.utils.img.flip", "SPPE.src.utils.img.flip", "SPPE.src.utils.img.shuffleLR"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.shuffleLR"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pyranet", "(", "x", ")", "\n", "out", "=", "out", ".", "narrow", "(", "1", ",", "0", ",", "17", ")", "\n", "\n", "flip_out", "=", "self", ".", "pyranet", "(", "flip", "(", "x", ")", ")", "\n", "flip_out", "=", "flip_out", ".", "narrow", "(", "1", ",", "0", ",", "17", ")", "\n", "\n", "flip_out", "=", "flip", "(", "shuffleLR", "(", "\n", "flip_out", ",", "self", ".", "dataset", ")", ")", "\n", "\n", "out", "=", "(", "flip_out", "+", "out", ")", "/", "2", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.main_fast_inference.InferenNet_fast.__init__": [[52, 62], ["torch.Module.__init__", "SPPE.src.models.FastPose.createModel().cuda", "print", "SPPE.src.models.FastPose.createModel().cuda.load_state_dict", "SPPE.src.models.FastPose.createModel().cuda.eval", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "SPPE.src.models.FastPose.createModel"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.createModel"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "InferenNet_fast", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "createModel", "(", ")", ".", "cuda", "(", ")", "\n", "print", "(", "'Loading pose model from {}'", ".", "format", "(", "'joints_detectors/Alphapose/models/sppe/duc_se.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'joints_detectors/Alphapose/models/sppe/duc_se.pth'", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "self", ".", "pyranet", "=", "model", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.main_fast_inference.InferenNet_fast.forward": [[63, 68], ["main_fast_inference.InferenNet_fast.pyranet", "out.narrow.narrow.narrow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pyranet", "(", "x", ")", "\n", "out", "=", "out", ".", "narrow", "(", "1", ",", "0", ",", "17", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch": [[16, 22], ["numpy.transpose", "to_torch().float", "to_torch().float.max", "img.to_torch"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch"], ["BLUE", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "CYAN", "=", "(", "255", ",", "255", ",", "0", ")", "\n", "YELLOW", "=", "(", "0", ",", "255", ",", "255", ")", "\n", "ORANGE", "=", "(", "0", ",", "165", ",", "255", ")", "\n", "PURPLE", "=", "(", "255", ",", "0", ",", "255", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.torch_to_im": [[24, 28], ["img.to_numpy", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.to_numpy"], ["    ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# C*H*W", "\n", "img", "=", "to_torch", "(", "img", ")", ".", "float", "(", ")", "\n", "if", "img", ".", "max", "(", ")", ">", "1", ":", "\n", "        ", "img", "/=", "255", "\n", "", "return", "img", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.load_image": [[30, 33], ["img.im_to_torch", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch"], ["\n", "", "def", "torch_to_im", "(", "img", ")", ":", "\n", "    ", "img", "=", "to_numpy", "(", "img", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# C*H*W", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_numpy": [[35, 42], ["torch.is_tensor", "torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], ["\n", "\n", "", "def", "load_image", "(", "img_path", ")", ":", "\n", "# H x W x C => C x H x W", "\n", "    ", "return", "im_to_torch", "(", "scipy", ".", "misc", ".", "imread", "(", "img_path", ",", "mode", "=", "'RGB'", ")", ")", "\n", "\n", "\n", "", "def", "to_numpy", "(", "tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch": [[44, 51], ["torch.from_numpy", "torch.from_numpy", "type", "torch.is_tensor", "torch.is_tensor", "ValueError", "type"], "function", ["None"], ["        ", "return", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", ".", "__module__", "!=", "'numpy'", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to numpy array\"", "\n", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "", "return", "tensor", "\n", "\n", "\n", "", "def", "to_torch", "(", "ndarray", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawGaussian": [[85, 115], ["img.to_numpy", "numpy.arange", "numpy.exp", "img.to_torch", "int", "int", "int", "int", "img.to_torch", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.to_numpy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch"], ["img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "img", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", "\n", "return", "to_torch", "(", "img", ")", "\n", "\n", "\n", "", "def", "transformBox", "(", "pt", ",", "ul", ",", "br", ",", "inpH", ",", "inpW", ",", "resH", ",", "resW", ")", ":", "\n", "    ", "center", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "center", "[", "0", "]", "=", "(", "br", "[", "0", "]", "-", "1", "-", "ul", "[", "0", "]", ")", "/", "2", "\n", "center", "[", "1", "]", "=", "(", "br", "[", "1", "]", "-", "1", "-", "ul", "[", "1", "]", ")", "/", "2", "\n", "\n", "lenH", "=", "max", "(", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "(", "br", "[", "0", "]", "-", "ul", "[", "0", "]", ")", "*", "inpH", "/", "inpW", ")", "\n", "lenW", "=", "lenH", "*", "inpW", "/", "inpH", "\n", "\n", "_pt", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "_pt", "[", "0", "]", "=", "pt", "[", "0", "]", "-", "ul", "[", "0", "]", "\n", "_pt", "[", "1", "]", "=", "pt", "[", "1", "]", "-", "ul", "[", "1", "]", "\n", "# Move to center", "\n", "_pt", "[", "0", "]", "=", "_pt", "[", "0", "]", "+", "max", "(", "0", ",", "(", "lenW", "-", "1", ")", "/", "2", "-", "center", "[", "0", "]", ")", "\n", "_pt", "[", "1", "]", "=", "_pt", "[", "1", "]", "+", "max", "(", "0", ",", "(", "lenH", "-", "1", ")", "/", "2", "-", "center", "[", "1", "]", ")", "\n", "pt", "=", "(", "_pt", "*", "resH", ")", "/", "lenH", "\n", "pt", "[", "0", "]", "=", "round", "(", "float", "(", "pt", "[", "0", "]", ")", ")", "\n", "pt", "[", "1", "]", "=", "round", "(", "float", "(", "pt", "[", "1", "]", ")", ")", "\n", "return", "pt", ".", "int", "(", ")", "\n", "\n", "\n", "", "def", "transformBoxInvert", "(", "pt", ",", "ul", ",", "br", ",", "inpH", ",", "inpW", ",", "resH", ",", "resW", ")", ":", "\n", "    ", "center", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "center", "[", "0", "]", "=", "(", "br", "[", "0", "]", "-", "1", "-", "ul", "[", "0", "]", ")", "/", "2", "\n", "center", "[", "1", "]", "=", "(", "br", "[", "1", "]", "-", "1", "-", "ul", "[", "1", "]", ")", "/", "2", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox": [[181, 199], ["torch.zeros", "torch.zeros", "max", "torch.zeros", "torch.zeros", "round", "round", "pt.int", "max", "max", "float", "float"], "function", ["None"], ["dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "dst_img", "=", "cv2", ".", "warpAffine", "(", "torch_to_im", "(", "img", ")", ",", "trans", ",", "\n", "(", "resW", ",", "resH", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "im_to_torch", "(", "torch", ".", "Tensor", "(", "dst_img", ")", ")", "\n", "\n", "\n", "", "def", "flip", "(", "x", ")", ":", "\n", "    ", "assert", "(", "x", ".", "dim", "(", ")", "==", "3", "or", "x", ".", "dim", "(", ")", "==", "4", ")", "\n", "if", "'0.4.1'", "in", "torch", ".", "__version__", ":", "\n", "        ", "dim", "=", "x", ".", "dim", "(", ")", "-", "1", "\n", "\n", "return", "x", ".", "flip", "(", "dims", "=", "(", "dim", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "is_cuda", "=", "False", "\n", "if", "x", ".", "is_cuda", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBoxInvert": [[201, 217], ["numpy.zeros", "max", "numpy.zeros", "max", "max"], "function", ["None"], ["is_cuda", "=", "True", "\n", "", "x", "=", "x", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "if", "x", ".", "ndim", "==", "3", ":", "\n", "            ", "x", "=", "np", ".", "transpose", "(", "np", ".", "fliplr", "(", "np", ".", "transpose", "(", "x", ",", "(", "0", ",", "2", ",", "1", ")", ")", ")", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "elif", "x", ".", "ndim", "==", "4", ":", "\n", "            ", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "x", "[", "i", "]", "=", "np", ".", "transpose", "(", "\n", "np", ".", "fliplr", "(", "np", ".", "transpose", "(", "x", "[", "i", "]", ",", "(", "0", ",", "2", ",", "1", ")", ")", ")", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "", "x", "=", "torch", ".", "from_numpy", "(", "x", ".", "copy", "(", ")", ")", "\n", "if", "is_cuda", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "", "return", "x", "\n", "\n", "\n", "", "def", "shuffleLR", "(", "x", ",", "dataset", ")", ":", "\n", "    ", "flipRef", "=", "dataset", ".", "flipRef", "\n", "assert", "(", "x", ".", "dim", "(", ")", "==", "3", "or", "x", ".", "dim", "(", ")", "==", "4", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cropBox": [[245, 285], ["ul.int.int", "max", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "img.get_3rd_point", "img.get_3rd_point", "cv2.getAffineTransform", "cv2.warpAffine", "img.im_to_torch", "img.dim", "numpy.float32", "numpy.float32", "img.torch_to_im", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.get_3rd_point", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.get_3rd_point", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.torch_to_im"], ["(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "# Head", "\n", "(", "5", ",", "6", ")", ",", "(", "5", ",", "7", ")", ",", "(", "7", ",", "9", ")", ",", "(", "6", ",", "8", ")", ",", "(", "8", ",", "10", ")", ",", "\n", "(", "5", ",", "11", ")", ",", "(", "6", ",", "12", ")", ",", "# Body", "\n", "(", "11", ",", "13", ")", ",", "(", "12", ",", "14", ")", ",", "(", "13", ",", "15", ")", ",", "(", "14", ",", "16", ")", "\n", "]", "\n", "p_color", "=", "[", "RED", ",", "RED", ",", "RED", ",", "RED", ",", "RED", ",", "YELLOW", ",", "YELLOW", ",", "YELLOW", ",", "\n", "YELLOW", ",", "YELLOW", ",", "YELLOW", ",", "GREEN", ",", "GREEN", ",", "GREEN", ",", "GREEN", ",", "GREEN", ",", "GREEN", "]", "\n", "line_color", "=", "[", "YELLOW", ",", "YELLOW", ",", "YELLOW", ",", "YELLOW", ",", "BLUE", ",", "BLUE", ",", "\n", "BLUE", ",", "BLUE", ",", "BLUE", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "RED", ",", "RED", "]", "\n", "", "elif", "format", "==", "'mpii'", ":", "\n", "        ", "l_pair", "=", "[", "\n", "(", "8", ",", "9", ")", ",", "(", "11", ",", "12", ")", ",", "(", "11", ",", "10", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "\n", "(", "13", ",", "14", ")", ",", "(", "14", ",", "15", ")", ",", "(", "3", ",", "4", ")", ",", "(", "4", ",", "5", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "2", ")", ",", "(", "6", ",", "3", ")", ",", "(", "8", ",", "12", ")", ",", "(", "8", ",", "13", ")", "\n", "]", "\n", "p_color", "=", "[", "PURPLE", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "\n", "RED", ",", "PURPLE", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", "]", "\n", "line_color", "=", "[", "PURPLE", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", ",", "\n", "RED", ",", "RED", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "im_name", "=", "im_res", "[", "'imgname'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "img", "=", "frame", ".", "copy", "(", ")", "\n", "for", "human", "in", "im_res", "[", "'result'", "]", ":", "\n", "        ", "part_line", "=", "{", "}", "\n", "kp_preds", "=", "human", "[", "'keypoints'", "]", "\n", "kp_scores", "=", "human", "[", "'kp_score'", "]", "\n", "# Draw keypoints", "\n", "for", "n", "in", "range", "(", "kp_scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "kp_scores", "[", "n", "]", "<=", "0.15", ":", "\n", "                ", "continue", "\n", "", "cor_x", ",", "cor_y", "=", "int", "(", "kp_preds", "[", "n", ",", "0", "]", ")", ",", "int", "(", "kp_preds", "[", "n", ",", "1", "]", ")", "\n", "part_line", "[", "n", "]", "=", "(", "cor_x", ",", "cor_y", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "cor_x", ",", "cor_y", ")", ",", "4", ",", "p_color", "[", "n", "]", ",", "-", "1", ")", "\n", "# Now create a mask of logo and create its inverse mask also", "\n", "#transparency = max(0, min(1, kp_scores[n]))", "\n", "#img = cv2.addWeighted(bg, transparency, img, 1, 0)", "\n", "# Draw limbs", "\n", "", "for", "i", ",", "(", "start_p", ",", "end_p", ")", "in", "enumerate", "(", "l_pair", ")", ":", "\n", "            ", "if", "start_p", "in", "part_line", "and", "end_p", "in", "part_line", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cv_rotate": [[287, 311], ["img.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "img.get_3rd_point", "img.get_3rd_point", "cv2.getAffineTransform", "cv2.warpAffine", "img.im_to_torch", "numpy.array", "numpy.array", "numpy.float32", "numpy.float32", "img.torch_to_im", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.get_dir", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.get_3rd_point", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.get_3rd_point", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.im_to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.torch_to_im"], ["end_xy", "=", "part_line", "[", "end_p", "]", "\n", "cv2", ".", "line", "(", "img", ",", "start_xy", ",", "end_xy", ",", "\n", "line_color", "[", "i", "]", ",", "(", "0.5", "*", "(", "kp_scores", "[", "start_p", "]", "+", "kp_scores", "[", "end_p", "]", ")", ")", "+", "1", ")", "\n", "#transparency = max(", "\n", "#    0, min(1, (kp_scores[start_p] + kp_scores[end_p])))", "\n", "#img = cv2.addWeighted(bg, transparency, img, 1, 0)", "\n", "", "", "", "return", "img", "\n", "\n", "\n", "", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "    ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\n", "", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip": [[313, 338], ["x.cuda.dim", "x.cuda.flip", "x.cuda.numpy().copy", "torch.from_numpy", "torch.from_numpy", "x.cuda.dim", "x.cuda.dim", "x.cuda.cpu", "numpy.transpose", "x.cuda.copy", "x.cuda.cuda", "x.cuda.numpy", "numpy.fliplr", "range", "numpy.transpose", "numpy.transpose", "numpy.fliplr", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.shuffleLR": [[340, 358], ["x.dim", "x.dim", "x.dim", "x[].clone", "x[].clone", "x[].clone.clone", "x[].clone", "x[].clone", "x[].clone.clone"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.vis_frame": [[235, 294], ["frame.copy", "im_res[].split", "range", "enumerate", "cv2.circle", "int", "int", "cv2.line"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "vis_frame", "(", "frame", ",", "im_res", ",", "format", "=", "'coco'", ")", ":", "\n", "    ", "'''\n    frame: frame image\n    im_res: im_res of predictions\n    format: coco or mpii\n\n    return rendered image\n    '''", "\n", "if", "format", "==", "'coco'", ":", "\n", "        ", "l_pair", "=", "[", "\n", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "# Head", "\n", "(", "5", ",", "6", ")", ",", "(", "5", ",", "7", ")", ",", "(", "7", ",", "9", ")", ",", "(", "6", ",", "8", ")", ",", "(", "8", ",", "10", ")", ",", "\n", "(", "5", ",", "11", ")", ",", "(", "6", ",", "12", ")", ",", "# Body", "\n", "(", "11", ",", "13", ")", ",", "(", "12", ",", "14", ")", ",", "(", "13", ",", "15", ")", ",", "(", "14", ",", "16", ")", "\n", "]", "\n", "p_color", "=", "[", "RED", ",", "RED", ",", "RED", ",", "RED", ",", "RED", ",", "YELLOW", ",", "YELLOW", ",", "YELLOW", ",", "\n", "YELLOW", ",", "YELLOW", ",", "YELLOW", ",", "GREEN", ",", "GREEN", ",", "GREEN", ",", "GREEN", ",", "GREEN", ",", "GREEN", "]", "\n", "line_color", "=", "[", "YELLOW", ",", "YELLOW", ",", "YELLOW", ",", "YELLOW", ",", "BLUE", ",", "BLUE", ",", "\n", "BLUE", ",", "BLUE", ",", "BLUE", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "RED", ",", "RED", "]", "\n", "", "elif", "format", "==", "'mpii'", ":", "\n", "        ", "l_pair", "=", "[", "\n", "(", "8", ",", "9", ")", ",", "(", "11", ",", "12", ")", ",", "(", "11", ",", "10", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "\n", "(", "13", ",", "14", ")", ",", "(", "14", ",", "15", ")", ",", "(", "3", ",", "4", ")", ",", "(", "4", ",", "5", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "2", ")", ",", "(", "6", ",", "3", ")", ",", "(", "8", ",", "12", ")", ",", "(", "8", ",", "13", ")", "\n", "]", "\n", "p_color", "=", "[", "PURPLE", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "\n", "RED", ",", "PURPLE", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", "]", "\n", "line_color", "=", "[", "PURPLE", ",", "BLUE", ",", "BLUE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", ",", "\n", "RED", ",", "RED", ",", "PURPLE", ",", "PURPLE", ",", "RED", ",", "RED", ",", "BLUE", ",", "BLUE", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "im_name", "=", "im_res", "[", "'imgname'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "img", "=", "frame", ".", "copy", "(", ")", "\n", "for", "human", "in", "im_res", "[", "'result'", "]", ":", "\n", "        ", "part_line", "=", "{", "}", "\n", "kp_preds", "=", "human", "[", "'keypoints'", "]", "\n", "kp_scores", "=", "human", "[", "'kp_score'", "]", "\n", "# Draw keypoints", "\n", "for", "n", "in", "range", "(", "kp_scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "kp_scores", "[", "n", "]", "<=", "0.15", ":", "\n", "                ", "continue", "\n", "", "cor_x", ",", "cor_y", "=", "int", "(", "kp_preds", "[", "n", ",", "0", "]", ")", ",", "int", "(", "kp_preds", "[", "n", ",", "1", "]", ")", "\n", "part_line", "[", "n", "]", "=", "(", "cor_x", ",", "cor_y", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "cor_x", ",", "cor_y", ")", ",", "4", ",", "p_color", "[", "n", "]", ",", "-", "1", ")", "\n", "# Now create a mask of logo and create its inverse mask also", "\n", "#transparency = max(0, min(1, kp_scores[n]))", "\n", "#img = cv2.addWeighted(bg, transparency, img, 1, 0)", "\n", "# Draw limbs", "\n", "", "for", "i", ",", "(", "start_p", ",", "end_p", ")", "in", "enumerate", "(", "l_pair", ")", ":", "\n", "            ", "if", "start_p", "in", "part_line", "and", "end_p", "in", "part_line", ":", "\n", "                ", "start_xy", "=", "part_line", "[", "start_p", "]", "\n", "end_xy", "=", "part_line", "[", "end_p", "]", "\n", "cv2", ".", "line", "(", "img", ",", "start_xy", ",", "end_xy", ",", "\n", "line_color", "[", "i", "]", ",", "(", "0.5", "*", "(", "kp_scores", "[", "start_p", "]", "+", "kp_scores", "[", "end_p", "]", ")", ")", "+", "1", ")", "\n", "#transparency = max(", "\n", "#    0, min(1, (kp_scores[start_p] + kp_scores[end_p])))", "\n", "#img = cv2.addWeighted(bg, transparency, img, 1, 0)", "\n", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.get_3rd_point": [[421, 424], ["numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.get_dir": [[426, 434], ["numpy.sin", "numpy.cos"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.__init__": [[10, 12], ["eval.DataLogger.clear"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear"], ["import", "torch", "\n", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear": [[13, 18], ["None"], "methods", ["None"], ["\n", "from", ".", "img", "import", "transformBoxInvert", "\n", "\n", "\n", "class", "DataLogger", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.update": [[19, 24], ["eval.DataLogger._cal_avg"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger._cal_avg"], ["        ", "self", ".", "clear", "(", ")", "\n", "\n", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "value", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger._cal_avg": [[25, 27], ["None"], "methods", ["None"], ["self", ".", "avg", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.NullWriter.write": [[38, 40], ["None"], "methods", ["None"], ["    ", "def", "write", "(", "self", ",", "arg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.accuracy": [[29, 34], ["type", "eval.accuracy", "eval.heatmapAccuracy", "output.cpu", "label.cpu"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.accuracy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.heatmapAccuracy"], ["self", ".", "sum", "+=", "value", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "_cal_avg", "(", ")", "\n", "\n", "", "def", "_cal_avg", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.heatmapAccuracy": [[36, 54], ["eval.getPreds", "eval.getPreds", "eval.calc_dists", "torch.zeros", "range", "len", "eval.dist_acc", "torch.ones", "len", "getPreds.size"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPreds", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPreds", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.calc_dists", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.dist_acc", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "", "", "class", "NullWriter", "(", "object", ")", ":", "\n", "    ", "def", "write", "(", "self", ",", "arg", ")", ":", "\n", "        ", "pass", "\n", "\n", "\n", "", "", "def", "accuracy", "(", "output", ",", "label", ",", "dataset", ",", "out_offset", "=", "None", ")", ":", "\n", "    ", "if", "type", "(", "output", ")", "==", "list", ":", "\n", "        ", "return", "accuracy", "(", "output", "[", "opt", ".", "nStack", "-", "1", "]", ",", "label", "[", "opt", ".", "nStack", "-", "1", "]", ",", "dataset", ",", "out_offset", ")", "\n", "", "else", ":", "\n", "        ", "return", "heatmapAccuracy", "(", "output", ".", "cpu", "(", ")", ".", "data", ",", "label", ".", "cpu", "(", ")", ".", "data", ",", "dataset", ".", "accIdxs", ")", "\n", "\n", "\n", "", "", "def", "heatmapAccuracy", "(", "output", ",", "label", ",", "idxs", ")", ":", "\n", "    ", "preds", "=", "getPreds", "(", "output", ")", "\n", "gt", "=", "getPreds", "(", "label", ")", "\n", "\n", "norm", "=", "torch", ".", "ones", "(", "preds", ".", "size", "(", "0", ")", ")", "*", "opt", ".", "outputResH", "/", "10", "\n", "dists", "=", "calc_dists", "(", "preds", ",", "gt", ",", "norm", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPreds": [[56, 74], ["torch.max", "maxval.view.view", "idx.repeat().float", "torch.floor", "hm.dim", "hm.view", "hm.size", "hm.size", "idx.view", "hm.size", "hm.size", "hm.size", "hm.size", "hm.size", "idx.repeat", "hm.size"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["acc", "=", "torch", ".", "zeros", "(", "len", "(", "idxs", ")", "+", "1", ")", "\n", "avg_acc", "=", "0", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "idxs", ")", ")", ":", "\n", "        ", "acc", "[", "i", "+", "1", "]", "=", "dist_acc", "(", "dists", "[", "idxs", "[", "i", "]", "-", "1", "]", ")", "\n", "if", "acc", "[", "i", "+", "1", "]", ">=", "0", ":", "\n", "            ", "avg_acc", "=", "avg_acc", "+", "acc", "[", "i", "+", "1", "]", "\n", "cnt", "+=", "1", "\n", "", "", "if", "cnt", "!=", "0", ":", "\n", "        ", "acc", "[", "0", "]", "=", "avg_acc", "/", "cnt", "\n", "", "return", "acc", "\n", "\n", "\n", "", "def", "getPreds", "(", "hm", ")", ":", "\n", "    ", "''' get predictions from score maps in torch Tensor\n        return type: torch.LongTensor\n    '''", "\n", "assert", "hm", ".", "dim", "(", ")", "==", "4", ",", "'Score maps should be 4-dim'", "\n", "maxval", ",", "idx", "=", "torch", ".", "max", "(", "hm", ".", "view", "(", "hm", ".", "size", "(", "0", ")", ",", "hm", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.calc_dists": [[76, 88], ["preds.float().clone.float().clone", "target.float().clone.float().clone", "torch.zeros", "range", "preds.float().clone.size", "preds.float().clone.size", "preds.float().clone.size", "range", "preds.float().clone.float", "target.float().clone.float", "preds.float().clone.size", "torch.dist"], "function", ["None"], ["maxval", "=", "maxval", ".", "view", "(", "hm", ".", "size", "(", "0", ")", ",", "hm", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "idx", "=", "idx", ".", "view", "(", "hm", ".", "size", "(", "0", ")", ",", "hm", ".", "size", "(", "1", ")", ",", "1", ")", "+", "1", "\n", "\n", "preds", "=", "idx", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "\n", "preds", "[", ":", ",", ":", ",", "0", "]", "=", "(", "preds", "[", ":", ",", ":", ",", "0", "]", "-", "1", ")", "%", "hm", ".", "size", "(", "3", ")", "\n", "preds", "[", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "floor", "(", "(", "preds", "[", ":", ",", ":", ",", "1", "]", "-", "1", ")", "/", "hm", ".", "size", "(", "3", ")", ")", "\n", "\n", "# pred_mask = maxval.gt(0).repeat(1, 1, 2).float()", "\n", "# preds *= pred_mask", "\n", "return", "preds", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.dist_acc": [[90, 96], ["dists.ne().sum", "dists.ne().float().sum", "dists.ne", "dists.le().eq().float().sum", "dists.ne().float", "dists.le().eq().float", "dists.ne", "dists.le().eq", "dists.ne", "dists.le"], "function", ["None"], ["    ", "preds", "=", "preds", ".", "float", "(", ")", ".", "clone", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", ".", "clone", "(", ")", "\n", "dists", "=", "torch", ".", "zeros", "(", "preds", ".", "size", "(", "1", ")", ",", "preds", ".", "size", "(", "0", ")", ")", "\n", "for", "n", "in", "range", "(", "preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "preds", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "if", "target", "[", "n", ",", "c", ",", "0", "]", ">", "0", "and", "target", "[", "n", ",", "c", ",", "1", "]", ">", "0", ":", "\n", "                ", "dists", "[", "c", ",", "n", "]", "=", "torch", ".", "dist", "(", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.postprocess": [[98, 111], ["eval.getPreds", "range", "getPreds.size", "range", "getPreds.size", "int", "int", "torch.Tensor", "round", "round", "torch.Tensor.sign"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPreds"], ["", "else", ":", "\n", "                ", "dists", "[", "c", ",", "n", "]", "=", "-", "1", "\n", "", "", "", "return", "dists", "\n", "\n", "\n", "", "def", "dist_acc", "(", "dists", ",", "thr", "=", "0.5", ")", ":", "\n", "    ", "''' Return percentage below threshold while ignoring values with a -1 '''", "\n", "if", "dists", ".", "ne", "(", "-", "1", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "return", "dists", ".", "le", "(", "thr", ")", ".", "eq", "(", "dists", ".", "ne", "(", "-", "1", ")", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "*", "1.0", "/", "dists", ".", "ne", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n", "\n", "", "", "def", "postprocess", "(", "output", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPrediction": [[113, 148], ["torch.max", "maxval.view.view", "idx.repeat().float", "torch.floor", "maxval.view.gt().repeat().float", "range", "torch.zeros", "transformBoxInvert_batch", "hms.dim", "hms.view", "hms.size", "hms.size", "idx.view", "hms.size", "idx.repeat().float.size", "range", "idx.repeat().float.size", "hms.size", "hms.size", "hms.size", "hms.size", "idx.repeat", "hms.size", "maxval.view.gt().repeat", "idx.repeat().float.size", "int", "int", "torch.Tensor", "maxval.view.gt", "round", "round", "torch.Tensor.sign", "float", "float"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBoxInvert_batch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["\n", "for", "i", "in", "range", "(", "p", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "p", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm", "=", "output", "[", "i", "]", "[", "j", "]", "\n", "pX", ",", "pY", "=", "int", "(", "round", "(", "p", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "p", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", ")", "\n", "if", "0", "<", "pX", "<", "opt", ".", "outputResW", "-", "1", "and", "0", "<", "pY", "<", "opt", ".", "outputResH", "-", "1", ":", "\n", "                ", "diff", "=", "torch", ".", "Tensor", "(", "\n", "(", "hm", "[", "pY", "]", "[", "pX", "+", "1", "]", "-", "hm", "[", "pY", "]", "[", "pX", "-", "1", "]", ",", "hm", "[", "pY", "+", "1", "]", "[", "pX", "]", "-", "hm", "[", "pY", "-", "1", "]", "[", "pX", "]", ")", ")", "\n", "p", "[", "i", "]", "[", "j", "]", "+=", "diff", ".", "sign", "(", ")", "*", "0.25", "\n", "", "", "", "p", "-=", "0.5", "\n", "\n", "return", "p", "\n", "\n", "\n", "", "def", "getPrediction", "(", "hms", ",", "pt1", ",", "pt2", ",", "inpH", ",", "inpW", ",", "resH", ",", "resW", ")", ":", "\n", "    ", "assert", "hms", ".", "dim", "(", ")", "==", "4", ",", "'Score maps should be 4-dim'", "\n", "maxval", ",", "idx", "=", "torch", ".", "max", "(", "hms", ".", "view", "(", "hms", ".", "size", "(", "0", ")", ",", "hms", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "2", ")", "\n", "\n", "maxval", "=", "maxval", ".", "view", "(", "hms", ".", "size", "(", "0", ")", ",", "hms", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "idx", "=", "idx", ".", "view", "(", "hms", ".", "size", "(", "0", ")", ",", "hms", ".", "size", "(", "1", ")", ",", "1", ")", "+", "1", "\n", "\n", "preds", "=", "idx", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "\n", "preds", "[", ":", ",", ":", ",", "0", "]", "=", "(", "preds", "[", ":", ",", ":", ",", "0", "]", "-", "1", ")", "%", "hms", ".", "size", "(", "3", ")", "\n", "preds", "[", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "floor", "(", "(", "preds", "[", ":", ",", ":", ",", "1", "]", "-", "1", ")", "/", "hms", ".", "size", "(", "3", ")", ")", "\n", "\n", "pred_mask", "=", "maxval", ".", "gt", "(", "0", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "preds", "*=", "pred_mask", "\n", "\n", "# Very simple post-processing step to improve performance at tight PCK thresholds", "\n", "for", "i", "in", "range", "(", "preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "preds", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm", "=", "hms", "[", "i", "]", "[", "j", "]", "\n", "pX", ",", "pY", "=", "int", "(", "round", "(", "float", "(", "preds", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", ")", ")", ",", "int", "(", "\n", "round", "(", "float", "(", "preds", "[", "i", "]", "[", "j", "]", "[", "1", "]", ")", ")", ")", "\n", "if", "1", "<", "pX", "<", "opt", ".", "outputResW", "-", "2", "and", "1", "<", "pY", "<", "opt", ".", "outputResH", "-", "2", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getmap": [[164, 209], ["print", "pycocotools.coco.COCO", "pycocotools.coco.COCO.loadRes", "open", "open.readline", "imgIds_str.split.split", "numpy.linspace", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "imgIds.append", "numpy.where", "len", "numpy.mean", "numpy.mean", "int", "numpy.round"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.evaluate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "getmap", "(", "JsonDir", "=", "'./val/alphapose-results.json'", ")", ":", "\n", "    ", "ListDir", "=", "'../coco-minival500_images.txt'", "\n", "\n", "annType", "=", "[", "'segm'", ",", "'bbox'", ",", "'keypoints'", "]", "\n", "annType", "=", "annType", "[", "2", "]", "# specify type here", "\n", "prefix", "=", "'person_keypoints'", "if", "annType", "==", "'keypoints'", "else", "'instances'", "\n", "print", "(", "'Running evaluation for *%s* results.'", "%", "(", "annType", ")", ")", "\n", "\n", "# load Ground_truth", "\n", "dataType", "=", "'val2014'", "\n", "annFile", "=", "'../%s_%s.json'", "%", "(", "prefix", ",", "dataType", ")", "\n", "cocoGt", "=", "COCO", "(", "annFile", ")", "\n", "\n", "# load Answer(json)", "\n", "resFile", "=", "JsonDir", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "resFile", ")", "\n", "\n", "# load List", "\n", "fin", "=", "open", "(", "ListDir", ",", "'r'", ")", "\n", "imgIds_str", "=", "fin", ".", "readline", "(", ")", "\n", "if", "imgIds_str", "[", "-", "1", "]", "==", "'\\n'", ":", "\n", "        ", "imgIds_str", "=", "imgIds_str", "[", ":", "-", "1", "]", "\n", "", "imgIds_str", "=", "imgIds_str", ".", "split", "(", "','", ")", "\n", "\n", "imgIds", "=", "[", "]", "\n", "for", "x", "in", "imgIds_str", ":", "\n", "        ", "imgIds", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "\n", "# running evaluation", "\n", "", "iouThrs", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "t", "=", "np", ".", "where", "(", "0.5", "==", "iouThrs", ")", "[", "0", "]", "\n", "\n", "cocoEval", "=", "COCOeval", "(", "cocoGt", ",", "cocoDt", ",", "annType", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "\n", "score", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "mApAll", ",", "mAp5", "=", "0.01", ",", "0.01", "\n", "if", "len", "(", "score", "[", "score", ">", "-", "1", "]", ")", "!=", "0", ":", "\n", "        ", "score2", "=", "score", "[", "t", "]", "\n", "mApAll", "=", "np", ".", "mean", "(", "score", "[", "score", ">", "-", "1", "]", ")", "\n", "mAp5", "=", "np", ".", "mean", "(", "score2", "[", "score2", ">", "-", "1", "]", ")", "\n", "", "cocoEval", ".", "summarize", "(", ")", "\n", "return", "mApAll", ",", "mAp5", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.pose.rnd": [[10, 12], ["max", "min", "numpy.random.randn", "opt.opt.rotate"], "function", ["None"], ["from", "opt", "import", "opt", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.pose.generateSampleBox": [[14, 170], ["img.load_image", "img.load_image.clone", "img[].add_", "img[].add_", "img[].add_", "torch.Tensor", "torch.Tensor", "random.uniform", "max", "max", "min", "min", "img.cropBox", "img.cropBox", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "img[].mul_().clamp_", "img[].mul_().clamp_", "img[].mul_().clamp_", "random.uniform", "range", "range", "torch.zeros", "range", "eval.getPrediction", "preds_hm.mul", "img.drawCOCO", "pose.rnd", "int", "int", "int", "int", "max", "max", "min", "min", "random.uniform", "setMask[].add_", "range", "range", "img.cv_rotate.unsqueeze", "torch.Tensor.unsqueeze", "torch.Tensor.unsqueeze", "img.flip.unsqueeze", "random.uniform", "img.flip", "img.flip", "img.shuffleLR", "img.shuffleLR", "img.shuffleLR", "random.uniform", "img.cv_rotate", "img.cv_rotate", "img.cv_rotate", "img.cv_rotate", "img[].mul_", "img[].mul_", "img[].mul_", "min", "min", "max", "max", "img.drawBigCircle", "img.drawSmallCircle", "img.drawGaussian", "setMask[].add_", "img.flip", "img.flip", "img.flip", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "img.transformBox", "img.transformBox", "img.transformBox", "img.drawBigCircle", "img.drawSmallCircle", "img.drawGaussian", "img.drawBigCircle", "img.drawSmallCircle", "img.drawGaussian", "setMask[].add_", "img.transformBox", "img.transformBox", "img.transformBox", "img.transformBox", "img.transformBox", "img.transformBox", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.load_image", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cropBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cropBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPrediction", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawCOCO", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.pose.rnd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.shuffleLR", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.shuffleLR", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.shuffleLR", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cv_rotate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cv_rotate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cv_rotate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cv_rotate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawBigCircle", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawSmallCircle", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawGaussian", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.flip", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawBigCircle", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawSmallCircle", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawGaussian", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawBigCircle", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawSmallCircle", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawGaussian", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBox"], ["    ", "return", "max", "(", "-", "2", "*", "x", ",", "min", "(", "2", "*", "x", ",", "np", ".", "random", ".", "randn", "(", "1", ")", "[", "0", "]", "*", "x", ")", ")", "\n", "\n", "\n", "", "def", "generateSampleBox", "(", "img_path", ",", "bndbox", ",", "part", ",", "nJoints", ",", "imgset", ",", "scale_factor", ",", "dataset", ",", "train", "=", "True", ",", "nJoints_coco", "=", "17", ")", ":", "\n", "\n", "    ", "img", "=", "load_image", "(", "img_path", ")", "\n", "if", "train", ":", "\n", "        ", "img", "[", "0", "]", ".", "mul_", "(", "random", ".", "uniform", "(", "0.7", ",", "1.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "img", "[", "1", "]", ".", "mul_", "(", "random", ".", "uniform", "(", "0.7", ",", "1.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "img", "[", "2", "]", ".", "mul_", "(", "random", ".", "uniform", "(", "0.7", ",", "1.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "", "img", "[", "0", "]", ".", "add_", "(", "-", "0.406", ")", "\n", "img", "[", "1", "]", ".", "add_", "(", "-", "0.457", ")", "\n", "img", "[", "2", "]", ".", "add_", "(", "-", "0.480", ")", "\n", "\n", "upLeft", "=", "torch", ".", "Tensor", "(", "(", "int", "(", "bndbox", "[", "0", "]", "[", "0", "]", ")", ",", "int", "(", "bndbox", "[", "0", "]", "[", "1", "]", ")", ")", ")", "\n", "bottomRight", "=", "torch", ".", "Tensor", "(", "(", "int", "(", "bndbox", "[", "0", "]", "[", "2", "]", ")", ",", "int", "(", "bndbox", "[", "0", "]", "[", "3", "]", ")", ")", ")", "\n", "ht", "=", "bottomRight", "[", "1", "]", "-", "upLeft", "[", "1", "]", "\n", "width", "=", "bottomRight", "[", "0", "]", "-", "upLeft", "[", "0", "]", "\n", "imght", "=", "img", ".", "shape", "[", "1", "]", "\n", "imgwidth", "=", "img", ".", "shape", "[", "2", "]", "\n", "scaleRate", "=", "random", ".", "uniform", "(", "*", "scale_factor", ")", "\n", "\n", "upLeft", "[", "0", "]", "=", "max", "(", "0", ",", "upLeft", "[", "0", "]", "-", "width", "*", "scaleRate", "/", "2", ")", "\n", "upLeft", "[", "1", "]", "=", "max", "(", "0", ",", "upLeft", "[", "1", "]", "-", "ht", "*", "scaleRate", "/", "2", ")", "\n", "bottomRight", "[", "0", "]", "=", "min", "(", "imgwidth", "-", "1", ",", "bottomRight", "[", "0", "]", "+", "width", "*", "scaleRate", "/", "2", ")", "\n", "bottomRight", "[", "1", "]", "=", "min", "(", "imght", "-", "1", ",", "bottomRight", "[", "1", "]", "+", "ht", "*", "scaleRate", "/", "2", ")", "\n", "\n", "# Doing Random Sample", "\n", "if", "opt", ".", "addDPG", ":", "\n", "        ", "PatchScale", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "PatchScale", ">", "0.85", ":", "\n", "            ", "ratio", "=", "ht", "/", "width", "\n", "if", "(", "width", "<", "ht", ")", ":", "\n", "                ", "patchWidth", "=", "PatchScale", "*", "width", "\n", "patchHt", "=", "patchWidth", "*", "ratio", "\n", "", "else", ":", "\n", "                ", "patchHt", "=", "PatchScale", "*", "ht", "\n", "patchWidth", "=", "patchHt", "/", "ratio", "\n", "\n", "", "xmin", "=", "upLeft", "[", "0", "]", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "(", "width", "-", "patchWidth", ")", "\n", "ymin", "=", "upLeft", "[", "1", "]", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "(", "ht", "-", "patchHt", ")", "\n", "xmax", "=", "xmin", "+", "patchWidth", "+", "1", "\n", "ymax", "=", "ymin", "+", "patchHt", "+", "1", "\n", "", "else", ":", "\n", "            ", "xmin", "=", "max", "(", "\n", "1", ",", "min", "(", "upLeft", "[", "0", "]", "+", "np", ".", "random", ".", "normal", "(", "-", "0.0142", ",", "0.1158", ")", "*", "width", ",", "imgwidth", "-", "3", ")", ")", "\n", "ymin", "=", "max", "(", "\n", "1", ",", "min", "(", "upLeft", "[", "1", "]", "+", "np", ".", "random", ".", "normal", "(", "0.0043", ",", "0.068", ")", "*", "ht", ",", "imght", "-", "3", ")", ")", "\n", "xmax", "=", "min", "(", "max", "(", "\n", "xmin", "+", "2", ",", "bottomRight", "[", "0", "]", "+", "np", ".", "random", ".", "normal", "(", "0.0154", ",", "0.1337", ")", "*", "width", ")", ",", "imgwidth", "-", "3", ")", "\n", "ymax", "=", "min", "(", "\n", "max", "(", "ymin", "+", "2", ",", "bottomRight", "[", "1", "]", "+", "np", ".", "random", ".", "normal", "(", "-", "0.0013", ",", "0.0711", ")", "*", "ht", ")", ",", "imght", "-", "3", ")", "\n", "\n", "", "upLeft", "[", "0", "]", "=", "xmin", "\n", "upLeft", "[", "1", "]", "=", "ymin", "\n", "bottomRight", "[", "0", "]", "=", "xmax", "\n", "bottomRight", "[", "1", "]", "=", "ymax", "\n", "\n", "# Counting Joints number", "\n", "", "jointNum", "=", "0", "\n", "if", "imgset", "==", "'coco'", ":", "\n", "        ", "for", "i", "in", "range", "(", "17", ")", ":", "\n", "            ", "if", "part", "[", "i", "]", "[", "0", "]", ">", "0", "and", "part", "[", "i", "]", "[", "0", "]", ">", "upLeft", "[", "0", "]", "and", "part", "[", "i", "]", "[", "1", "]", ">", "upLeft", "[", "1", "]", "and", "part", "[", "i", "]", "[", "0", "]", "<", "bottomRight", "[", "0", "]", "and", "part", "[", "i", "]", "[", "1", "]", "<", "bottomRight", "[", "1", "]", ":", "\n", "                ", "jointNum", "+=", "1", "\n", "\n", "# Doing Random Crop", "\n", "", "", "", "if", "opt", ".", "addDPG", ":", "\n", "        ", "if", "jointNum", ">", "13", "and", "train", ":", "\n", "            ", "switch", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "switch", ">", "0.96", ":", "\n", "                ", "bottomRight", "[", "0", "]", "=", "(", "upLeft", "[", "0", "]", "+", "bottomRight", "[", "0", "]", ")", "/", "2", "\n", "bottomRight", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.92", ":", "\n", "                ", "upLeft", "[", "0", "]", "=", "(", "upLeft", "[", "0", "]", "+", "bottomRight", "[", "0", "]", ")", "/", "2", "\n", "bottomRight", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.88", ":", "\n", "                ", "upLeft", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n", "bottomRight", "[", "0", "]", "=", "(", "upLeft", "[", "0", "]", "+", "bottomRight", "[", "0", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.84", ":", "\n", "                ", "upLeft", "[", "0", "]", "=", "(", "upLeft", "[", "0", "]", "+", "bottomRight", "[", "0", "]", ")", "/", "2", "\n", "upLeft", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.80", ":", "\n", "                ", "bottomRight", "[", "0", "]", "=", "(", "upLeft", "[", "0", "]", "+", "bottomRight", "[", "0", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.76", ":", "\n", "                ", "upLeft", "[", "0", "]", "=", "(", "upLeft", "[", "0", "]", "+", "bottomRight", "[", "0", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.72", ":", "\n", "                ", "bottomRight", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.68", ":", "\n", "                ", "upLeft", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n", "\n", "", "", "", "inputResH", ",", "inputResW", "=", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", "\n", "outputResH", ",", "outputResW", "=", "opt", ".", "outputResH", ",", "opt", ".", "outputResW", "\n", "\n", "inp", "=", "cropBox", "(", "img", ",", "upLeft", ",", "bottomRight", ",", "inputResH", ",", "inputResW", ")", "\n", "\n", "if", "jointNum", "==", "0", ":", "\n", "        ", "inp", "=", "torch", ".", "zeros", "(", "3", ",", "inputResH", ",", "inputResW", ")", "\n", "\n", "", "out", "=", "torch", ".", "zeros", "(", "nJoints", ",", "outputResH", ",", "outputResW", ")", "\n", "setMask", "=", "torch", ".", "zeros", "(", "nJoints", ",", "outputResH", ",", "outputResW", ")", "\n", "# Draw Label", "\n", "if", "imgset", "==", "'coco'", ":", "\n", "        ", "for", "i", "in", "range", "(", "nJoints_coco", ")", ":", "\n", "            ", "if", "part", "[", "i", "]", "[", "0", "]", ">", "0", "and", "part", "[", "i", "]", "[", "0", "]", ">", "upLeft", "[", "0", "]", "and", "part", "[", "i", "]", "[", "1", "]", ">", "upLeft", "[", "1", "]", "and", "part", "[", "i", "]", "[", "0", "]", "<", "bottomRight", "[", "0", "]", "and", "part", "[", "i", "]", "[", "1", "]", "<", "bottomRight", "[", "1", "]", ":", "\n", "                ", "hm_part", "=", "transformBox", "(", "\n", "part", "[", "i", "]", ",", "upLeft", ",", "bottomRight", ",", "inputResH", ",", "inputResW", ",", "outputResH", ",", "outputResW", ")", "\n", "\n", "out", "[", "i", "]", "=", "drawGaussian", "(", "out", "[", "i", "]", ",", "hm_part", ",", "opt", ".", "hmGauss", ")", "\n", "\n", "", "setMask", "[", "i", "]", ".", "add_", "(", "1", ")", "\n", "\n", "", "", "if", "train", ":", "\n", "# Flip", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "0.5", ":", "\n", "            ", "inp", "=", "flip", "(", "inp", ")", "\n", "out", "=", "shuffleLR", "(", "flip", "(", "out", ")", ",", "dataset", ")", "\n", "\n", "# Rotate", "\n", "", "r", "=", "rnd", "(", "opt", ".", "rotate", ")", "\n", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "0.6", ":", "\n", "            ", "r", "=", "0", "\n", "", "if", "r", "!=", "0", ":", "\n", "            ", "inp", "=", "cv_rotate", "(", "inp", ",", "r", ",", "opt", ".", "inputResW", ",", "opt", ".", "inputResH", ")", "\n", "out", "=", "cv_rotate", "(", "out", ",", "r", ",", "opt", ".", "outputResW", ",", "opt", ".", "outputResH", ")", "\n", "\n", "", "", "return", "inp", ",", "out", ",", "setMask", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawCircle": [[53, 83], ["img.to_numpy", "numpy.arange", "numpy.exp", "img.to_torch", "int", "int", "int", "int", "img.to_torch", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.to_numpy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch"], ["        ", "return", "torch", ".", "from_numpy", "(", "ndarray", ")", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to torch tensor\"", "\n", ".", "format", "(", "type", "(", "ndarray", ")", ")", ")", "\n", "", "return", "ndarray", "\n", "\n", "\n", "", "def", "drawGaussian", "(", "img", ",", "pt", ",", "sigma", ")", ":", "\n", "    ", "img", "=", "to_numpy", "(", "img", ")", "\n", "tmpSize", "=", "3", "*", "sigma", "\n", "# Check that any part of the gaussian is in-bounds", "\n", "ul", "=", "[", "int", "(", "pt", "[", "0", "]", "-", "tmpSize", ")", ",", "int", "(", "pt", "[", "1", "]", "-", "tmpSize", ")", "]", "\n", "br", "=", "[", "int", "(", "pt", "[", "0", "]", "+", "tmpSize", "+", "1", ")", ",", "int", "(", "pt", "[", "1", "]", "+", "tmpSize", "+", "1", ")", "]", "\n", "\n", "if", "(", "ul", "[", "0", "]", ">=", "img", ".", "shape", "[", "1", "]", "or", "ul", "[", "1", "]", ">=", "img", ".", "shape", "[", "0", "]", "or", "\n", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ")", ":", "\n", "# If not, just return the image as is", "\n", "        ", "return", "to_torch", "(", "img", ")", "\n", "\n", "# Generate gaussian", "\n", "", "size", "=", "2", "*", "tmpSize", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "sigma", "=", "size", "/", "4.0", "\n", "# The gaussian is not normalized, we want the center value to equal 1", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "\n", "# Usable gaussian range", "\n", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "-", "ul", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawBigCircle": [[117, 147], ["img.to_numpy", "numpy.arange", "numpy.exp", "img.to_torch", "int", "int", "int", "int", "img.to_torch", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.to_numpy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch"], ["lenH", "=", "max", "(", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "(", "br", "[", "0", "]", "-", "ul", "[", "0", "]", ")", "*", "inpH", "/", "inpW", ")", "\n", "lenW", "=", "lenH", "*", "inpW", "/", "inpH", "\n", "\n", "_pt", "=", "(", "pt", "*", "lenH", ")", "/", "resH", "\n", "_pt", "[", "0", "]", "=", "_pt", "[", "0", "]", "-", "max", "(", "0", ",", "(", "lenW", "-", "1", ")", "/", "2", "-", "center", "[", "0", "]", ")", "\n", "_pt", "[", "1", "]", "=", "_pt", "[", "1", "]", "-", "max", "(", "0", ",", "(", "lenH", "-", "1", ")", "/", "2", "-", "center", "[", "1", "]", ")", "\n", "\n", "new_point", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "new_point", "[", "0", "]", "=", "_pt", "[", "0", "]", "+", "ul", "[", "0", "]", "\n", "new_point", "[", "1", "]", "=", "_pt", "[", "1", "]", "+", "ul", "[", "1", "]", "\n", "return", "new_point", "\n", "\n", "\n", "", "def", "cropBox", "(", "img", ",", "ul", ",", "br", ",", "resH", ",", "resW", ")", ":", "\n", "    ", "ul", "=", "ul", ".", "int", "(", ")", "\n", "br", "=", "(", "br", "-", "1", ")", ".", "int", "(", ")", "\n", "# br = br.int()", "\n", "lenH", "=", "max", "(", "(", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ")", ".", "item", "(", ")", ",", "(", "br", "[", "0", "]", "-", "ul", "[", "0", "]", ")", ".", "item", "(", ")", "*", "resH", "/", "resW", ")", "\n", "lenW", "=", "lenH", "*", "resW", "/", "resH", "\n", "if", "img", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "img", "=", "img", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "box_shape", "=", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", "]", "\n", "pad_size", "=", "[", "(", "lenH", "-", "box_shape", "[", "0", "]", ")", "//", "2", ",", "(", "lenW", "-", "box_shape", "[", "1", "]", ")", "//", "2", "]", "\n", "# Padding Zeros", "\n", "img", "[", ":", ",", ":", "ul", "[", "1", "]", ",", ":", "]", ",", "img", "[", ":", ",", ":", ",", ":", "ul", "[", "0", "]", "]", "=", "0", ",", "0", "\n", "img", "[", ":", ",", "br", "[", "1", "]", "+", "1", ":", ",", ":", "]", ",", "img", "[", ":", ",", ":", ",", "br", "[", "0", "]", "+", "1", ":", "]", "=", "0", ",", "0", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawSmallCircle": [[149, 179], ["img.to_numpy", "numpy.arange", "numpy.exp", "img.to_torch", "int", "int", "int", "int", "img.to_torch", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.to_numpy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.to_torch"], ["src", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "br", "[", "0", "]", "+", "pad_size", "[", "1", "]", ",", "br", "[", "1", "]", "+", "pad_size", "[", "0", "]", "]", ",", "np", ".", "float32", ")", "\n", "dst", "[", "0", ",", ":", "]", "=", "0", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "resW", "-", "1", ",", "resH", "-", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "dst_img", "=", "cv2", ".", "warpAffine", "(", "torch_to_im", "(", "img", ")", ",", "trans", ",", "\n", "(", "resW", ",", "resH", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "im_to_torch", "(", "torch", ".", "Tensor", "(", "dst_img", ")", ")", "\n", "\n", "\n", "", "def", "cv_rotate", "(", "img", ",", "rot", ",", "resW", ",", "resH", ")", ":", "\n", "\n", "    ", "center", "=", "np", ".", "array", "(", "(", "resW", "-", "1", ",", "resH", "-", "1", ")", ")", "/", "2", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "(", "resH", "-", "1", ")", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "(", "resH", "-", "1", ")", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "(", "resW", "-", "1", ")", "*", "0.5", ",", "(", "resH", "-", "1", ")", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "(", "resW", "-", "1", ")", "*", "0.5", ",", "(", "resH", "-", "1", ")", "*", "0.5", "]", ")", "+", "dst_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBoxInvert_batch": [[219, 243], ["torch.max", "torch.max", "torch.zeros", "torch.zeros", "pt.size", "ul[].unsqueeze().repeat", "ul[].unsqueeze().repeat", "ul[].unsqueeze", "ul[].unsqueeze", "center[].unsqueeze().repeat", "center[].unsqueeze().repeat", "lenW[].repeat", "center[].unsqueeze", "lenH[].repeat", "center[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["        ", "dim0", ",", "dim1", "=", "pair", "\n", "dim0", "-=", "1", "\n", "dim1", "-=", "1", "\n", "if", "x", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "tmp", "=", "x", "[", ":", ",", "dim1", "]", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", "dim1", "]", "=", "x", "[", ":", ",", "dim0", "]", ".", "clone", "(", ")", "\n", "x", "[", ":", ",", "dim0", "]", "=", "tmp", ".", "clone", "(", ")", "\n", "#x[:, dim0], x[:, dim1] = deepcopy((x[:, dim1], x[:, dim0]))", "\n", "", "else", ":", "\n", "            ", "tmp", "=", "x", "[", "dim1", "]", ".", "clone", "(", ")", "\n", "x", "[", "dim1", "]", "=", "x", "[", "dim0", "]", ".", "clone", "(", ")", "\n", "x", "[", "dim0", "]", "=", "tmp", ".", "clone", "(", ")", "\n", "#x[dim0], x[dim1] = deepcopy((x[dim1], x[dim0]))", "\n", "", "", "return", "x", "\n", "\n", "\n", "", "def", "vis_frame", "(", "frame", ",", "im_res", ",", "format", "=", "'coco'", ")", ":", "\n", "    ", "'''\n    frame: frame image\n    im_res: im_res of predictions\n    format: coco or mpii\n\n    return rendered image\n    '''", "\n", "if", "format", "==", "'coco'", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawMPII": [[360, 389], ["inps.size", "range", "matplotlib.figure", "matplotlib.imshow", "plt.figure.add_subplot", "range", "matplotlib.axis", "matplotlib.show", "inps.dim", "img.to_numpy", "numpy.transpose", "imgs.append", "fig.add_subplot.add_patch", "matplotlib.Circle", "round", "round"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.to_numpy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.drawCOCO": [[391, 419], ["inps.size", "range", "matplotlib.figure", "matplotlib.imshow", "plt.figure.add_subplot", "range", "matplotlib.axis", "matplotlib.show", "inps.dim", "img.to_numpy", "numpy.transpose", "imgs.append", "fig.add_subplot.add_patch", "matplotlib.Circle", "round", "round"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.to_numpy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.findPeak": [[436, 447], ["scipy.ndimage.maximum_filter", "zip", "numpy.array", "torch.Tensor", "torch.Tensor", "np.array.append", "len", "torch.zeros", "torch.zeros", "numpy.where", "numpy.lexsort"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.processPeaks": [[449, 498], ["range", "numpy.max", "numpy.argmax", "int", "numpy.zeros", "hm.reshape", "hm.reshape", "bool", "numpy.zeros", "img.transformBoxInvert", "numpy.zeros", "res_pts.append", "len", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBoxInvert", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getMultiPeakPrediction": [[150, 170], ["hms.numpy.numpy", "range", "hms.numpy.dim", "range", "findPeak", "processPeaks"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.findPeak", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.processPeaks"], ["(", "hm", "[", "pY", "]", "[", "pX", "+", "1", "]", "-", "hm", "[", "pY", "]", "[", "pX", "-", "1", "]", ",", "hm", "[", "pY", "+", "1", "]", "[", "pX", "]", "-", "hm", "[", "pY", "-", "1", "]", "[", "pX", "]", ")", ")", "\n", "diff", "=", "diff", ".", "sign", "(", ")", "*", "0.25", "\n", "diff", "[", "1", "]", "=", "diff", "[", "1", "]", "*", "inpH", "/", "inpW", "\n", "preds", "[", "i", "]", "[", "j", "]", "+=", "diff", "\n", "\n", "", "", "", "preds_tf", "=", "torch", ".", "zeros", "(", "preds", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "hms", ".", "size", "(", "0", ")", ")", ":", "# Number of samples", "\n", "        ", "for", "j", "in", "range", "(", "hms", ".", "size", "(", "1", ")", ")", ":", "# Number of output heatmaps for one sample", "\n", "            ", "preds_tf", "[", "i", "]", "[", "j", "]", "=", "transformBoxInvert", "(", "\n", "preds", "[", "i", "]", "[", "j", "]", ",", "pt1", "[", "i", "]", ",", "pt2", "[", "i", "]", ",", "inpH", ",", "inpW", ",", "resH", ",", "resW", ")", "\n", "\n", "", "", "return", "preds", ",", "preds_tf", ",", "maxval", "\n", "\n", "\n", "", "def", "getmap", "(", "JsonDir", "=", "'./val/alphapose-results.json'", ")", ":", "\n", "    ", "ListDir", "=", "'../coco-minival500_images.txt'", "\n", "\n", "annType", "=", "[", "'segm'", ",", "'bbox'", ",", "'keypoints'", "]", "\n", "annType", "=", "annType", "[", "2", "]", "# specify type here", "\n", "prefix", "=", "'person_keypoints'", "if", "annType", "==", "'keypoints'", "else", "'instances'", "\n", "print", "(", "'Running evaluation for *%s* results.'", "%", "(", "annType", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.getPrediction_batch": [[172, 220], ["hms.view", "torch.max", "maxval.view.view", "idx.repeat().float", "torch.floor", "maxval.view.gt().repeat().float", "hms.view.gather", "hms.view.gather", "hms.view.gather", "hms.view.gather", "diff1.squeeze", "diff2.squeeze", "torch.zeros", "transformBoxInvert_batch", "hms.dim", "hms.size", "hms.size", "hms.size", "hms.size", "idx.view", "hms.size", "idx.repeat().float.size", "hms.size", "hms.size", "idx.repeat", "hms.size", "maxval.view.gt().repeat", "hms.view.size", "hms.view.size", "hms.view.size", "hms.view.size", "hms.size", "hms.size", "hms.size", "maxval.view.gt", "hms.size", "hms.size", "hms.size", "hms.size", "hms.size"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.transformBoxInvert_batch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["# load Ground_truth", "\n", "dataType", "=", "'val2014'", "\n", "annFile", "=", "'../%s_%s.json'", "%", "(", "prefix", ",", "dataType", ")", "\n", "cocoGt", "=", "COCO", "(", "annFile", ")", "\n", "\n", "# load Answer(json)", "\n", "resFile", "=", "JsonDir", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "resFile", ")", "\n", "\n", "# load List", "\n", "fin", "=", "open", "(", "ListDir", ",", "'r'", ")", "\n", "imgIds_str", "=", "fin", ".", "readline", "(", ")", "\n", "if", "imgIds_str", "[", "-", "1", "]", "==", "'\\n'", ":", "\n", "        ", "imgIds_str", "=", "imgIds_str", "[", ":", "-", "1", "]", "\n", "", "imgIds_str", "=", "imgIds_str", ".", "split", "(", "','", ")", "\n", "\n", "imgIds", "=", "[", "]", "\n", "for", "x", "in", "imgIds_str", ":", "\n", "        ", "imgIds", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "\n", "# running evaluation", "\n", "", "iouThrs", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "t", "=", "np", ".", "where", "(", "0.5", "==", "iouThrs", ")", "[", "0", "]", "\n", "\n", "cocoEval", "=", "COCOeval", "(", "cocoGt", ",", "cocoDt", ",", "annType", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "\n", "score", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "mApAll", ",", "mAp5", "=", "0.01", ",", "0.01", "\n", "if", "len", "(", "score", "[", "score", ">", "-", "1", "]", ")", "!=", "0", ":", "\n", "        ", "score2", "=", "score", "[", "t", "]", "\n", "mApAll", "=", "np", ".", "mean", "(", "score", "[", "score", ">", "-", "1", "]", ")", "\n", "mAp5", "=", "np", ".", "mean", "(", "score2", "[", "score2", ">", "-", "1", "]", ")", "\n", "", "cocoEval", ".", "summarize", "(", ")", "\n", "return", "mApAll", ",", "mAp5", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.Timer.__init__": [[86, 88], ["tools.Timer._update_time"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.Timer._update_time"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_time", "=", "self", ".", "_update_time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.Timer._update_time": [[89, 94], ["time.time", "time.time", "time.time", "float"], "methods", ["None"], ["", "def", "_update_time", "(", "self", ",", "timer", "=", "None", ")", ":", "\n", "        ", "if", "not", "timer", ":", "\n", "            ", "return", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "time", ".", "time", "(", ")", "-", "float", "(", "timer", ")", ",", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.Timer.update_time": [[95, 98], ["tools.Timer._update_time", "print"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.Timer._update_time"], ["", "", "def", "update_time", "(", "self", ",", "task", ")", ":", "\n", "        ", "time_cost", ",", "self", ".", "current_time", "=", "self", ".", "_update_time", "(", "self", ".", "current_time", ")", "\n", "print", "(", "'=> {} spends {:.2f} seconds'", ".", "format", "(", "task", ",", "time_cost", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.assets_dir": [[15, 17], ["os.path.abspath", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["def", "assets_dir", "(", ")", ":", "\n", "    ", "return", "path", ".", "abspath", "(", "path", ".", "join", "(", "path", ".", "dirname", "(", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'../assets'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.out_dir": [[19, 21], ["os.path.abspath", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["", "def", "out_dir", "(", ")", ":", "\n", "    ", "return", "path", ".", "abspath", "(", "path", ".", "join", "(", "path", ".", "dirname", "(", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'../out'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.log_dir": [[23, 25], ["os.path.abspath", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["", "def", "log_dir", "(", ")", ":", "\n", "    ", "return", "path", ".", "abspath", "(", "path", ".", "join", "(", "path", ".", "dirname", "(", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'../logs'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.recreate_dirs": [[27, 33], ["os.path.exists", "os.makedirs", "print", "shutil.rmtree"], "function", ["None"], ["", "def", "recreate_dirs", "(", "*", "dirs", ")", ":", "\n", "    ", "for", "d", "in", "dirs", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "            ", "print", "(", "'warning: remove folder {}'", ".", "format", "(", "d", ")", ")", "\n", "shutil", ".", "rmtree", "(", "d", ")", "\n", "", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.load_img": [[35, 41], ["open", "PIL.Image.open", "Image.open.resize().convert", "Image.open.resize"], "function", ["None"], ["", "", "def", "load_img", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "I", "=", "Image", ".", "open", "(", "f", ")", "\n", "img", "=", "I", ".", "resize", "(", "(", "224", ",", "224", ")", ",", "Image", ".", "ANTIALIAS", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.save_screen_shots": [[43, 55], ["glfw.get_window_pos", "glfw.get_window_size", "pyautogui.screenshot", "cv2.cvtColor", "cv2.imwrite", "numpy.array", "round", "tools.save_screen_shots.new_round"], "function", ["None"], ["", "", "def", "save_screen_shots", "(", "window", ",", "file_name", ",", "transparent", "=", "False", ")", ":", "\n", "    ", "import", "pyautogui", "\n", "xpos", ",", "ypos", "=", "glfw", ".", "get_window_pos", "(", "window", ")", "\n", "width", ",", "height", "=", "glfw", ".", "get_window_size", "(", "window", ")", "\n", "# image = pyautogui.screenshot(region=(xpos*2, ypos*2, width*2, height*2))", "\n", "def", "new_round", "(", "x", ")", ":", "\n", "        ", "return", "round", "(", "x", "/", "2.", ")", "*", "2", "\n", "", "image", "=", "pyautogui", ".", "screenshot", "(", "region", "=", "(", "xpos", ",", "ypos", ",", "new_round", "(", "width", ")", ",", "new_round", "(", "height", ")", ")", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "np", ".", "array", "(", "image", ")", ",", "cv2", ".", "COLOR_RGB2BGRA", "if", "transparent", "else", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "if", "transparent", ":", "\n", "        ", "image", "[", "np", ".", "all", "(", "image", ">=", "[", "240", ",", "240", ",", "240", ",", "240", "]", ",", "axis", "=", "2", ")", "]", "=", "[", "255", ",", "255", ",", "255", ",", "0", "]", "\n", "", "cv2", ".", "imwrite", "(", "file_name", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.get_body_qposaddr": [[60, 74], ["dict", "enumerate", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "get_body_qposaddr", "(", "model", ")", ":", "\n", "    ", "body_qposaddr", "=", "dict", "(", ")", "\n", "for", "i", ",", "body_name", "in", "enumerate", "(", "model", ".", "body_names", ")", ":", "\n", "        ", "start_joint", "=", "model", ".", "body_jntadr", "[", "i", "]", "\n", "if", "start_joint", "<", "0", ":", "\n", "            ", "continue", "\n", "", "end_joint", "=", "start_joint", "+", "model", ".", "body_jntnum", "[", "i", "]", "\n", "start_qposaddr", "=", "model", ".", "jnt_qposadr", "[", "start_joint", "]", "\n", "if", "end_joint", "<", "len", "(", "model", ".", "jnt_qposadr", ")", ":", "\n", "            ", "end_qposaddr", "=", "model", ".", "jnt_qposadr", "[", "end_joint", "]", "\n", "", "else", ":", "\n", "            ", "end_qposaddr", "=", "model", ".", "nq", "\n", "", "body_qposaddr", "[", "body_name", "]", "=", "(", "start_qposaddr", ",", "end_qposaddr", ")", "\n", "", "return", "body_qposaddr", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.align_human_state": [[76, 81], ["get_heading_q", "quaternion_multiply", "quat_mul_vec"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading_q", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec"], ["", "def", "align_human_state", "(", "qpos", ",", "qvel", ",", "ref_qpos", ")", ":", "\n", "    ", "qpos", "[", ":", "2", "]", "=", "ref_qpos", "[", ":", "2", "]", "\n", "hq", "=", "get_heading_q", "(", "ref_qpos", "[", "3", ":", "7", "]", ")", "\n", "qpos", "[", "3", ":", "7", "]", "=", "quaternion_multiply", "(", "hq", ",", "qpos", "[", "3", ":", "7", "]", ")", "\n", "qvel", "[", ":", "3", "]", "=", "quat_mul_vec", "(", "hq", ",", "qvel", "[", ":", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.mkd": [[101, 109], ["os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["", "", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.count_param": [[111, 117], ["model.parameters", "logger.info", "parameter.numel"], "function", ["None"], ["", "", "def", "count_param", "(", "logger", ",", "model", ",", "name", ")", ":", "\n", "# print param number size.", "\n", "    ", "model_params", "=", "0", "\n", "for", "parameter", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "model_params", "+=", "parameter", ".", "numel", "(", ")", "\n", "", "logger", ".", "info", "(", "'INFO: Trainable parameter count for model {} is:{}'", ".", "format", "(", "name", ",", "model_params", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.normal_entropy": [[8, 12], ["std.pow", "entropy.sum", "torch.log"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log"], ["def", "normal_entropy", "(", "std", ")", ":", "\n", "    ", "var", "=", "std", ".", "pow", "(", "2", ")", "\n", "entropy", "=", "0.5", "+", "0.5", "*", "torch", ".", "log", "(", "2", "*", "var", "*", "math", ".", "pi", ")", "\n", "return", "entropy", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.normal_log_density": [[14, 18], ["std.pow", "log_density.sum", "math.log"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log"], ["", "def", "normal_log_density", "(", "x", ",", "mean", ",", "log_std", ",", "std", ")", ":", "\n", "    ", "var", "=", "std", ".", "pow", "(", "2", ")", "\n", "log_density", "=", "-", "(", "x", "-", "mean", ")", ".", "pow", "(", "2", ")", "/", "(", "2", "*", "var", ")", "-", "0.5", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "-", "log_std", "\n", "return", "log_density", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_qvel_fd": [[20, 36], ["utils.transformation.quaternion_multiply", "utils.transformation.rotation_from_quaternion", "math.transform_vec", "numpy.concatenate", "utils.transformation.quaternion_inverse", "math.transform_vec"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.rotation_from_quaternion", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.transform_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_inverse", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.transform_vec"], ["", "def", "get_qvel_fd", "(", "cur_qpos", ",", "next_qpos", ",", "dt", ",", "transform", "=", "None", ")", ":", "\n", "    ", "v", "=", "(", "next_qpos", "[", ":", "3", "]", "-", "cur_qpos", "[", ":", "3", "]", ")", "/", "dt", "\n", "qrel", "=", "quaternion_multiply", "(", "next_qpos", "[", "3", ":", "7", "]", ",", "quaternion_inverse", "(", "cur_qpos", "[", "3", ":", "7", "]", ")", ")", "# A*inverse(B)=A/B", "\n", "axis", ",", "angle", "=", "rotation_from_quaternion", "(", "qrel", ",", "True", ")", "\n", "if", "angle", ">", "np", ".", "pi", ":", "\n", "        ", "angle", "-=", "2", "*", "np", ".", "pi", "\n", "", "elif", "angle", "<", "-", "np", ".", "pi", ":", "\n", "        ", "angle", "+=", "2", "*", "np", ".", "pi", "\n", "", "rv", "=", "(", "axis", "*", "angle", ")", "/", "dt", "\n", "rv", "=", "transform_vec", "(", "rv", ",", "cur_qpos", "[", "3", ":", "7", "]", ",", "'root'", ")", "# angular velocity is in root coord", "\n", "qvel", "=", "(", "next_qpos", "[", "7", ":", "]", "-", "cur_qpos", "[", "7", ":", "]", ")", "/", "dt", "\n", "qvel", "=", "np", ".", "concatenate", "(", "(", "v", ",", "rv", ",", "qvel", ")", ")", "\n", "if", "transform", "is", "not", "None", ":", "\n", "        ", "v", "=", "transform_vec", "(", "v", ",", "cur_qpos", "[", "3", ":", "7", "]", ",", "transform", ")", "\n", "qvel", "[", ":", "3", "]", "=", "v", "\n", "", "return", "qvel", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_sktvel_fd": [[38, 41], ["None"], "function", ["None"], ["", "def", "get_sktvel_fd", "(", "prev_skt_pos", ",", "cur_skt_pos", ",", "dt", ")", ":", "\n", "    ", "v", "=", "(", "cur_skt_pos", "-", "prev_skt_pos", ")", "/", "dt", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_angvel_fd": [[43, 50], ["math.multi_quat_diff", "numpy.zeros", "range", "utils.transformation.rotation_from_quaternion"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.rotation_from_quaternion"], ["", "def", "get_angvel_fd", "(", "prev_bquat", ",", "cur_bquat", ",", "dt", ")", ":", "\n", "    ", "q_diff", "=", "multi_quat_diff", "(", "cur_bquat", ",", "prev_bquat", ")", "\n", "n_joint", "=", "q_diff", ".", "shape", "[", "0", "]", "//", "4", "\n", "body_angvel", "=", "np", ".", "zeros", "(", "n_joint", "*", "3", ")", "\n", "for", "i", "in", "range", "(", "n_joint", ")", ":", "\n", "        ", "body_angvel", "[", "3", "*", "i", ":", "3", "*", "i", "+", "3", "]", "=", "rotation_from_quaternion", "(", "q_diff", "[", "4", "*", "i", ":", "4", "*", "i", "+", "4", "]", ")", "/", "dt", "\n", "", "return", "body_angvel", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.transform_vec": [[52, 65], ["rot.T.dot().ravel", "utils.transformation.quaternion_matrix", "q.copy", "numpy.linalg.norm", "rot.T.dot", "utils.transformation.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_matrix", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_matrix"], ["", "def", "transform_vec", "(", "v", ",", "q", ",", "trans", "=", "'root'", ")", ":", "\n", "    ", "if", "trans", "==", "'root'", ":", "\n", "        ", "rot", "=", "quaternion_matrix", "(", "q", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "", "elif", "trans", "==", "'heading'", ":", "\n", "        ", "hq", "=", "q", ".", "copy", "(", ")", "\n", "hq", "[", "1", "]", "=", "0", "\n", "hq", "[", "2", "]", "=", "0", "\n", "hq", "/=", "np", ".", "linalg", ".", "norm", "(", "hq", ")", "\n", "rot", "=", "quaternion_matrix", "(", "hq", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "v", "=", "rot", ".", "T", ".", "dot", "(", "v", "[", ":", ",", "None", "]", ")", ".", "ravel", "(", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading_q": [[67, 73], ["q.copy", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "get_heading_q", "(", "q", ")", ":", "\n", "    ", "hq", "=", "q", ".", "copy", "(", ")", "\n", "hq", "[", "1", "]", "=", "0", "\n", "hq", "[", "2", "]", "=", "0", "\n", "hq", "/=", "np", ".", "linalg", ".", "norm", "(", "hq", ")", "\n", "return", "hq", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading": [[75, 83], ["q.copy", "numpy.linalg.norm", "math.acos"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "get_heading", "(", "q", ")", ":", "\n", "    ", "hq", "=", "q", ".", "copy", "(", ")", "\n", "hq", "[", "1", "]", "=", "0", "\n", "hq", "[", "2", "]", "=", "0", "\n", "if", "hq", "[", "3", "]", "<", "0", ":", "\n", "        ", "hq", "*=", "-", "1", "\n", "", "hq", "/=", "np", ".", "linalg", ".", "norm", "(", "hq", ")", "\n", "return", "2", "*", "math", ".", "acos", "(", "hq", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.de_heading": [[85, 87], ["utils.transformation.quaternion_multiply", "utils.transformation.quaternion_inverse", "math.get_heading_q"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_inverse", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading_q"], ["", "def", "de_heading", "(", "q", ")", ":", "\n", "    ", "return", "quaternion_multiply", "(", "quaternion_inverse", "(", "get_heading_q", "(", "q", ")", ")", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_diff": [[89, 108], ["numpy.zeros_like", "range", "slice", "utils.transformation.quaternion_multiply", "utils.transformation.quaternion_inverse"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_inverse"], ["", "def", "multi_quat_diff", "(", "nq1", ",", "nq0", ")", ":", "\n", "    ", "\"\"\"return the relative quaternions q1-q0 of N joints\"\"\"", "\n", "\n", "nq_diff", "=", "np", ".", "zeros_like", "(", "nq0", ")", "\n", "for", "i", "in", "range", "(", "nq1", ".", "shape", "[", "0", "]", "//", "4", ")", ":", "\n", "        ", "ind", "=", "slice", "(", "4", "*", "i", ",", "4", "*", "i", "+", "4", ")", "\n", "q1", "=", "nq1", "[", "ind", "]", "\n", "q0", "=", "nq0", "[", "ind", "]", "\n", "\n", "################################", "\n", "# kh add, 0919", "\n", "if", "q1", "[", "0", "]", "<", "0", ":", "\n", "            ", "q1", "=", "q1", "*", "-", "1.", "\n", "", "if", "q0", "[", "0", "]", "<", "0", ":", "\n", "            ", "q0", "=", "q0", "*", "-", "1.", "\n", "################################", "\n", "\n", "", "nq_diff", "[", "ind", "]", "=", "quaternion_multiply", "(", "q1", ",", "quaternion_inverse", "(", "q0", ")", ")", "\n", "", "return", "nq_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_norm": [[110, 115], ["numpy.arccos", "numpy.clip"], "function", ["None"], ["", "def", "multi_quat_norm", "(", "nq", ")", ":", "\n", "    ", "\"\"\"return the scalar rotation of a N joints\"\"\"", "\n", "\n", "nq_norm", "=", "np", ".", "arccos", "(", "np", ".", "clip", "(", "nq", "[", ":", ":", "4", "]", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "return", "nq_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.quat_mul_vec": [[117, 119], ["[].dot().ravel", "[].dot", "utils.transformation.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_matrix"], ["", "def", "quat_mul_vec", "(", "q", ",", "v", ")", ":", "\n", "    ", "return", "quaternion_matrix", "(", "q", ")", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "v", "[", ":", ",", "None", "]", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.quat_to_bullet": [[121, 123], ["numpy.array"], "function", ["None"], ["", "def", "quat_to_bullet", "(", "q", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "q", "[", "1", "]", ",", "q", "[", "2", "]", ",", "q", "[", "3", "]", ",", "q", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.quat_from_bullet": [[125, 127], ["numpy.array"], "function", ["None"], ["", "def", "quat_from_bullet", "(", "q", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "q", "[", "3", "]", ",", "q", "[", "0", "]", ",", "q", "[", "1", "]", ",", "q", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.quat_from_expmap": [[129, 136], ["numpy.linalg.norm", "utils.transformation.quaternion_about_axis", "numpy.array"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_about_axis"], ["", "def", "quat_from_expmap", "(", "e", ")", ":", "\n", "    ", "angle", "=", "np", ".", "linalg", ".", "norm", "(", "e", ")", "\n", "if", "angle", "<", "1e-12", ":", "\n", "        ", "axis", "=", "np", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "        ", "axis", "=", "e", "/", "angle", "\n", "", "return", "quaternion_about_axis", "(", "angle", ",", "axis", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.__init__": [[26, 38], ["tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "os.makedirs", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "name", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "name", ")", ",", "\n", "filename_suffix", "=", "name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.scalar_summary": [[39, 43], ["tensorflow.Summary", "tb_logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.image_summary": [[44, 66], ["enumerate", "tensorflow.Summary", "tb_logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.histo_summary": [[67, 94], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "tb_logger.Logger.writer.add_summary", "tb_logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.to_np": [[95, 97], ["x.data.cpu().numpy", "x.data.cpu"], "methods", ["None"], ["", "def", "to_np", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.to_var": [[98, 102], ["torch.cuda.is_available", "torch.autograd.Variable", "x.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["", "def", "to_var", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.model_param_histo_summary": [[103, 114], ["model.named_parameters", "tag.replace.replace.replace", "tb_logger.Logger.histo_summary", "tb_logger.Logger.histo_summary", "tb_logger.Logger.to_np", "tb_logger.Logger.to_np"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.histo_summary", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.histo_summary", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.to_np", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.to_np"], ["", "def", "model_param_histo_summary", "(", "self", ",", "model", ",", "step", ")", ":", "\n", "        ", "\"\"\"log histogram summary of model's parameters\n        and parameter gradients\n        \"\"\"", "\n", "for", "tag", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "value", ".", "grad", "is", "None", ":", "\n", "                ", "continue", "\n", "", "tag", "=", "tag", ".", "replace", "(", "'.'", ",", "'/'", ")", "\n", "tag", "=", "self", ".", "name", "+", "'/'", "+", "tag", "\n", "self", ".", "histo_summary", "(", "tag", ",", "self", ".", "to_np", "(", "value", ")", ",", "step", ")", "\n", "self", ".", "histo_summary", "(", "tag", "+", "'/grad'", ",", "self", ".", "to_np", "(", "value", ".", "grad", ")", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.logger.create_logger": [[5, 27], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.makedirs", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.dirname"], "function", ["None"], ["def", "create_logger", "(", "filename", ",", "file_handle", "=", "True", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "filename", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# create console handler with a higher log level", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "stream_formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "ch", ".", "setFormatter", "(", "stream_formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "file_handle", ":", "\n", "# create file handler which logs even debug messages", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "exist_ok", "=", "True", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "filename", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s] %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.Arcball.__init__": [[1558, 1582], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "transformation.quaternion_from_matrix", "transformation.vector_norm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_from_matrix", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm"], ["def", "__init__", "(", "self", ",", "initial", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize virtual trackball control.\n\n        initial : quaternion or rotation matrix\n\n        \"\"\"", "\n", "self", ".", "_axis", "=", "None", "\n", "self", ".", "_axes", "=", "None", "\n", "self", ".", "_radius", "=", "1.0", "\n", "self", ".", "_center", "=", "[", "0.0", ",", "0.0", "]", "\n", "self", ".", "_vdown", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "self", ".", "_constrain", "=", "False", "\n", "if", "initial", "is", "None", ":", "\n", "            ", "self", ".", "_qdown", "=", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "            ", "initial", "=", "numpy", ".", "array", "(", "initial", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "if", "initial", ".", "shape", "==", "(", "4", ",", "4", ")", ":", "\n", "                ", "self", ".", "_qdown", "=", "quaternion_from_matrix", "(", "initial", ")", "\n", "", "elif", "initial", ".", "shape", "==", "(", "4", ",", ")", ":", "\n", "                ", "initial", "/=", "vector_norm", "(", "initial", ")", "\n", "self", ".", "_qdown", "=", "initial", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"initial not a quaternion or matrix\"", ")", "\n", "", "", "self", ".", "_qnow", "=", "self", ".", "_qpre", "=", "self", ".", "_qdown", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.Arcball.place": [[1583, 1595], ["float"], "methods", ["None"], ["", "def", "place", "(", "self", ",", "center", ",", "radius", ")", ":", "\n", "        ", "\"\"\"Place Arcball, e.g. when window size changes.\n\n        center : sequence[2]\n            Window coordinates of trackball center.\n        radius : float\n            Radius of trackball in window coordinates.\n\n        \"\"\"", "\n", "self", ".", "_radius", "=", "float", "(", "radius", ")", "\n", "self", ".", "_center", "[", "0", "]", "=", "center", "[", "0", "]", "\n", "self", ".", "_center", "[", "1", "]", "=", "center", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.Arcball.setaxes": [[1596, 1602], ["transformation.unit_vector"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector"], ["", "def", "setaxes", "(", "self", ",", "*", "axes", ")", ":", "\n", "        ", "\"\"\"Set axes to constrain rotations.\"\"\"", "\n", "if", "axes", "is", "None", ":", "\n", "            ", "self", ".", "_axes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axes", "=", "[", "unit_vector", "(", "axis", ")", "for", "axis", "in", "axes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.Arcball.constrain": [[1608, 1612], ["bool"], "methods", ["None"], ["", "@", "constrain", ".", "setter", "\n", "def", "constrain", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Set state of constrain to axis mode.\"\"\"", "\n", "self", ".", "_constrain", "=", "bool", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.Arcball.down": [[1613, 1622], ["transformation.arcball_map_to_sphere", "transformation.arcball_nearest_axis", "transformation.arcball_constrain_to_axis"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_map_to_sphere", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_nearest_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_constrain_to_axis"], ["", "def", "down", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Set initial cursor window coordinates and pick constrain-axis.\"\"\"", "\n", "self", ".", "_vdown", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "self", ".", "_qdown", "=", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "if", "self", ".", "_constrain", "and", "self", ".", "_axes", "is", "not", "None", ":", "\n", "            ", "self", ".", "_axis", "=", "arcball_nearest_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axes", ")", "\n", "self", ".", "_vdown", "=", "arcball_constrain_to_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axis", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axis", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.Arcball.drag": [[1623, 1635], ["transformation.arcball_map_to_sphere", "numpy.cross", "numpy.cross", "numpy.cross", "numpy.cross", "transformation.arcball_constrain_to_axis", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "transformation.quaternion_multiply", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_map_to_sphere", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_constrain_to_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "", "def", "drag", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Update current cursor window coordinates.\"\"\"", "\n", "vnow", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "if", "self", ".", "_axis", "is", "not", "None", ":", "\n", "            ", "vnow", "=", "arcball_constrain_to_axis", "(", "vnow", ",", "self", ".", "_axis", ")", "\n", "", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "t", "=", "numpy", ".", "cross", "(", "self", ".", "_vdown", ",", "vnow", ")", "\n", "if", "numpy", ".", "dot", "(", "t", ",", "t", ")", "<", "_EPS", ":", "\n", "            ", "self", ".", "_qnow", "=", "self", ".", "_qdown", "\n", "", "else", ":", "\n", "            ", "q", "=", "[", "numpy", ".", "dot", "(", "self", ".", "_vdown", ",", "vnow", ")", ",", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "]", "\n", "self", ".", "_qnow", "=", "quaternion_multiply", "(", "q", ",", "self", ".", "_qdown", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.Arcball.next": [[1636, 1640], ["transformation.quaternion_slerp"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_slerp"], ["", "", "def", "next", "(", "self", ",", "acceleration", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Continue rotation in direction of last drag.\"\"\"", "\n", "q", "=", "quaternion_slerp", "(", "self", ".", "_qpre", ",", "self", ".", "_qnow", ",", "2.0", "+", "acceleration", ",", "False", ")", "\n", "self", ".", "_qpre", ",", "self", ".", "_qnow", "=", "self", ".", "_qnow", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.Arcball.matrix": [[1641, 1644], ["transformation.quaternion_matrix"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_matrix"], ["", "def", "matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return homogeneous rotation matrix.\"\"\"", "\n", "return", "quaternion_matrix", "(", "self", ".", "_qnow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.identity_matrix": [[207, 220], ["numpy.identity", "numpy.identity"], "function", ["None"], ["def", "identity_matrix", "(", ")", ":", "\n", "    ", "\"\"\"Return 4x4 identity/unit matrix.\n\n    >>> I = identity_matrix()\n    >>> numpy.allclose(I, numpy.dot(I, I))\n    True\n    >>> numpy.sum(I), numpy.trace(I)\n    (4.0, 4.0)\n    >>> numpy.allclose(I, numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.translation_matrix": [[222, 233], ["numpy.identity", "numpy.identity"], "function", ["None"], ["", "def", "translation_matrix", "(", "direction", ")", ":", "\n", "    ", "\"\"\"Return matrix to translate by direction vector.\n\n    >>> v = numpy.random.random(3) - 0.5\n    >>> numpy.allclose(v, translation_matrix(v)[:3, 3])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "[", ":", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.translation_from_matrix": [[235, 245], ["[].copy", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "translation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return translation vector from translation matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = translation_from_matrix(translation_matrix(v0))\n    >>> numpy.allclose(v0, v1)\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "matrix", ",", "copy", "=", "False", ")", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.reflection_matrix": [[247, 271], ["transformation.unit_vector", "numpy.identity", "numpy.identity", "numpy.outer", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "reflection_matrix", "(", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to mirror at plane defined by point and normal vector.\n\n    >>> v0 = numpy.random.random(4) - 0.5\n    >>> v0[3] = 1.\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> R = reflection_matrix(v0, v1)\n    >>> numpy.allclose(2, numpy.trace(R))\n    True\n    >>> numpy.allclose(v0, numpy.dot(R, v0))\n    True\n    >>> v2 = v0.copy()\n    >>> v2[:3] += v1\n    >>> v3 = v0.copy()\n    >>> v2[:3] -= v1\n    >>> numpy.allclose(v2, numpy.dot(R, v3))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "2.0", "*", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "(", "2.0", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", ")", "*", "normal", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.reflection_from_matrix": [[273, 300], ["numpy.array", "numpy.array", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.real().squeeze", "numpy.where", "numpy.where", "len", "ValueError", "numpy.where", "numpy.where", "len", "ValueError", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "reflection_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return mirror plane point and normal vector from reflection matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> M0 = reflection_matrix(v0, v1)\n    >>> point, normal = reflection_from_matrix(M0)\n    >>> M1 = reflection_matrix(point, normal)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "# normal: unit eigenvector corresponding to eigenvalue -1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "+", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no unit eigenvector corresponding to eigenvalue -1\"", ")", "\n", "", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: any unit eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no unit eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.rotation_matrix": [[302, 344], ["math.sin", "math.cos", "transformation.unit_vector", "numpy.diag", "numpy.diag", "numpy.array", "numpy.array", "numpy.identity", "numpy.identity", "numpy.outer", "numpy.outer", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "rotation_matrix", "(", "angle", ",", "direction", ",", "point", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to rotate about axis defined by point and direction.\n\n    >>> R = rotation_matrix(math.pi/2, [0, 0, 1], [1, 0, 0])\n    >>> numpy.allclose(numpy.dot(R, [0, 0, 0, 1]), [1, -1, 0, 1])\n    True\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(angle-2*math.pi, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(-angle, -direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> I = numpy.identity(4, numpy.float64)\n    >>> numpy.allclose(I, rotation_matrix(math.pi*2, direc))\n    True\n    >>> numpy.allclose(2, numpy.trace(rotation_matrix(math.pi/2,\n    ...                                               direc, point)))\n    True\n\n    \"\"\"", "\n", "sina", "=", "math", ".", "sin", "(", "angle", ")", "\n", "cosa", "=", "math", ".", "cos", "(", "angle", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "# rotation matrix around unit vector", "\n", "R", "=", "numpy", ".", "diag", "(", "[", "cosa", ",", "cosa", ",", "cosa", "]", ")", "\n", "R", "+=", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "*", "(", "1.0", "-", "cosa", ")", "\n", "direction", "*=", "sina", "\n", "R", "+=", "numpy", ".", "array", "(", "[", "[", "0.0", ",", "-", "direction", "[", "2", "]", ",", "direction", "[", "1", "]", "]", ",", "\n", "[", "direction", "[", "2", "]", ",", "0.0", ",", "-", "direction", "[", "0", "]", "]", ",", "\n", "[", "-", "direction", "[", "1", "]", ",", "direction", "[", "0", "]", ",", "0.0", "]", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "if", "point", "is", "not", "None", ":", "\n", "# rotation not around origin", "\n", "        ", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "point", "-", "numpy", ".", "dot", "(", "R", ",", "point", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.rotation_from_quaternion": [[348, 357], ["numpy.array", "math.sqrt", "math.acos"], "function", ["None"], ["def", "rotation_from_quaternion", "(", "quaternion", ",", "separate", "=", "False", ")", ":", "\n", "    ", "if", "1", "-", "quaternion", "[", "0", "]", "<", "1e-8", ":", "\n", "        ", "axis", "=", "np", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "angle", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "s", "=", "math", ".", "sqrt", "(", "1", "-", "quaternion", "[", "0", "]", "*", "quaternion", "[", "0", "]", ")", "\n", "axis", "=", "quaternion", "[", "1", ":", "4", "]", "/", "s", "\n", "angle", "=", "2", "*", "math", ".", "acos", "(", "quaternion", "[", "0", "]", ")", "\n", "", "return", "(", "axis", ",", "angle", ")", "if", "separate", "else", "axis", "*", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.rotation_from_matrix": [[359, 397], ["numpy.array", "numpy.array", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.real().squeeze", "math.atan2", "numpy.where", "numpy.where", "len", "ValueError", "numpy.where", "numpy.where", "len", "ValueError", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "numpy.trace", "numpy.trace", "abs", "abs", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "rotation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return rotation angle and axis from rotation matrix.\n\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> angle, direc, point = rotation_from_matrix(R0)\n    >>> R1 = rotation_matrix(angle, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n\n    \"\"\"", "\n", "R", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "R33", "=", "R", "[", ":", "3", ",", ":", "3", "]", "\n", "# direction: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "W", "=", "numpy", ".", "linalg", ".", "eig", "(", "R33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no unit eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "W", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "Q", "=", "numpy", ".", "linalg", ".", "eig", "(", "R", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no unit eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "Q", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# rotation angle depending on direction", "\n", "cosa", "=", "(", "numpy", ".", "trace", "(", "R33", ")", "-", "1.0", ")", "/", "2.0", "\n", "if", "abs", "(", "direction", "[", "2", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "1", ",", "0", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "1", "]", ")", "/", "direction", "[", "2", "]", "\n", "", "elif", "abs", "(", "direction", "[", "1", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "0", ",", "2", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "sina", "=", "(", "R", "[", "2", ",", "1", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "1", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "0", "]", "\n", "", "angle", "=", "math", ".", "atan2", "(", "sina", ",", "cosa", ")", "\n", "return", "angle", ",", "direction", ",", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.scale_matrix": [[399, 431], ["numpy.diag", "numpy.diag", "transformation.unit_vector", "numpy.identity", "numpy.identity", "numpy.outer", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "scale_matrix", "(", "factor", ",", "origin", "=", "None", ",", "direction", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to scale by factor around origin in direction.\n\n    Use factor -1 for point symmetry.\n\n    >>> v = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v[3] = 1\n    >>> S = scale_matrix(-1.234)\n    >>> numpy.allclose(numpy.dot(S, v)[:3], -1.234*v[:3])\n    True\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S = scale_matrix(factor, origin)\n    >>> S = scale_matrix(factor, origin, direct)\n\n    \"\"\"", "\n", "if", "direction", "is", "None", ":", "\n", "# uniform scaling", "\n", "        ", "M", "=", "numpy", ".", "diag", "(", "[", "factor", ",", "factor", ",", "factor", ",", "1.0", "]", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "origin", "[", ":", "3", "]", "\n", "M", "[", ":", "3", ",", "3", "]", "*=", "1.0", "-", "factor", "\n", "", "", "else", ":", "\n", "# nonuniform scaling", "\n", "        ", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "factor", "=", "1.0", "-", "factor", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "factor", "*", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "(", "factor", "*", "numpy", ".", "dot", "(", "origin", "[", ":", "3", "]", ",", "direction", ")", ")", "*", "direction", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.scale_from_matrix": [[433, 472], ["numpy.array", "numpy.array", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.real().squeeze", "numpy.trace", "numpy.trace", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.real().squeeze", "transformation.vector_norm", "numpy.where", "numpy.where", "len", "ValueError", "numpy.real", "numpy.real", "numpy.where", "numpy.where", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "scale_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return scaling factor, origin and direction from scaling matrix.\n\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S0 = scale_matrix(factor, origin)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n    >>> S0 = scale_matrix(factor, origin, direct)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "factor", "=", "numpy", ".", "trace", "(", "M33", ")", "-", "2.0", "\n", "try", ":", "\n", "# direction: unit eigenvector corresponding to eigenvalue factor", "\n", "        ", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "factor", ")", "<", "1e-8", ")", "[", "0", "]", "[", "0", "]", "\n", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "", "except", "IndexError", ":", "\n", "# uniform scaling", "\n", "        ", "factor", "=", "(", "factor", "+", "2.0", ")", "/", "3.0", "\n", "direction", "=", "None", "\n", "# origin: any eigenvector corresponding to eigenvalue 1", "\n", "", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "origin", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "origin", "/=", "origin", "[", "3", "]", "\n", "return", "factor", ",", "origin", ",", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.projection_matrix": [[474, 534], ["numpy.identity", "numpy.identity", "numpy.array", "numpy.array", "transformation.unit_vector", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.outer", "numpy.outer", "numpy.dot", "numpy.dot", "numpy.outer", "numpy.outer", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.outer", "numpy.outer", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.outer", "numpy.outer", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "projection_matrix", "(", "point", ",", "normal", ",", "direction", "=", "None", ",", "\n", "perspective", "=", "None", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to project onto plane defined by point and normal.\n\n    Using either perspective point, projection direction, or none of both.\n\n    If pseudo is True, perspective projections will preserve relative depth\n    such that Perspective = dot(Orthogonal, PseudoPerspective).\n\n    >>> P = projection_matrix([0, 0, 0], [1, 0, 0])\n    >>> numpy.allclose(P[1:, 1:], numpy.identity(4)[1:, 1:])\n    True\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> P1 = projection_matrix(point, normal, direction=direct)\n    >>> P2 = projection_matrix(point, normal, perspective=persp)\n    >>> P3 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> is_same_transform(P2, numpy.dot(P0, P3))\n    True\n    >>> P = projection_matrix([3, 0, 0], [1, 1, 0], [1, 0, 0])\n    >>> v0 = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(P, v0)\n    >>> numpy.allclose(v1[1], v0[1])\n    True\n    >>> numpy.allclose(v1[0], 3-v1[1])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "# perspective projection", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "perspective", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "\n", "copy", "=", "False", ")", "\n", "M", "[", "0", ",", "0", "]", "=", "M", "[", "1", ",", "1", "]", "=", "M", "[", "2", ",", "2", "]", "=", "numpy", ".", "dot", "(", "perspective", "-", "point", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "perspective", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "# preserve relative depth", "\n", "            ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "(", "perspective", "+", "normal", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "perspective", "\n", "", "M", "[", "3", ",", ":", "3", "]", "=", "-", "normal", "\n", "M", "[", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "perspective", ",", "normal", ")", "\n", "", "elif", "direction", "is", "not", "None", ":", "\n", "# parallel projection", "\n", "        ", "direction", "=", "numpy", ".", "array", "(", "direction", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "scale", "=", "numpy", ".", "dot", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "/", "scale", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "*", "(", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "/", "scale", ")", "\n", "", "else", ":", "\n", "# orthogonal projection", "\n", "        ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "normal", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.projection_from_matrix": [[536, 607], ["numpy.array", "numpy.array", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.where", "numpy.where", "len", "numpy.real().squeeze", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.real().squeeze", "transformation.vector_norm", "numpy.linalg.eig", "numpy.linalg.eig", "len", "numpy.real().squeeze", "numpy.real().squeeze", "numpy.where", "numpy.where", "len", "ValueError", "numpy.where", "numpy.where", "numpy.real().squeeze", "numpy.real().squeeze", "transformation.vector_norm", "numpy.where", "numpy.where", "len", "ValueError", "numpy.dot", "numpy.dot", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "numpy.real", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "projection_from_matrix", "(", "matrix", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return projection plane and perspective point from projection matrix.\n\n    Return values are same as arguments for projection_matrix function:\n    point, normal, direction, perspective, and pseudo.\n\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, direct)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=False)\n    >>> result = projection_from_matrix(P0, pseudo=False)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> result = projection_from_matrix(P0, pseudo=True)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "pseudo", "and", "len", "(", "i", ")", ":", "\n", "# point: any eigenvector corresponding to eigenvalue 1", "\n", "        ", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# direction: unit eigenvector corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"no eigenvector corresponding to eigenvalue 0\"", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "# normal: unit eigenvector of M33.T corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", ":", "\n", "# parallel projection", "\n", "            ", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "normal", "/=", "vector_norm", "(", "normal", ")", "\n", "return", "point", ",", "normal", ",", "direction", ",", "None", ",", "False", "\n", "", "else", ":", "\n", "# orthogonal projection, where normal equals direction vector", "\n", "            ", "return", "point", ",", "direction", ",", "None", ",", "None", ",", "False", "\n", "", "", "else", ":", "\n", "# perspective projection", "\n", "        ", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", ">", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"no eigenvector not corresponding to eigenvalue 0\"", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "normal", "=", "-", "M", "[", "3", ",", ":", "3", "]", "\n", "perspective", "=", "M", "[", ":", "3", ",", "3", "]", "/", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "            ", "perspective", "-=", "normal", "\n", "", "return", "point", ",", "normal", ",", "None", ",", "perspective", ",", "pseudo", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.clip_matrix": [[609, 659], ["numpy.array", "numpy.array", "ValueError", "ValueError"], "function", ["None"], ["", "", "def", "clip_matrix", "(", "left", ",", "right", ",", "bottom", ",", "top", ",", "near", ",", "far", ",", "perspective", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to obtain normalized device coordinates from frustum.\n\n    The frustum bounds are axis-aligned along x (left, right),\n    y (bottom, top) and z (near, far).\n\n    Normalized device coordinates are in range [-1, 1] if coordinates are\n    inside the frustum.\n\n    If perspective is True the frustum is a truncated pyramid with the\n    perspective point at origin and direction along z axis, otherwise an\n    orthographic canonical view volume (a box).\n\n    Homogeneous coordinates transformed by the perspective clip matrix\n    need to be dehomogenized (divided by w coordinate).\n\n    >>> frustum = numpy.random.rand(6)\n    >>> frustum[1] += frustum[0]\n    >>> frustum[3] += frustum[2]\n    >>> frustum[5] += frustum[4]\n    >>> M = clip_matrix(perspective=False, *frustum)\n    >>> numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    array([-1., -1., -1.,  1.])\n    >>> numpy.dot(M, [frustum[1], frustum[3], frustum[5], 1])\n    array([ 1.,  1.,  1.,  1.])\n    >>> M = clip_matrix(perspective=True, *frustum)\n    >>> v = numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    >>> v / v[3]\n    array([-1., -1., -1.,  1.])\n    >>> v = numpy.dot(M, [frustum[1], frustum[3], frustum[4], 1])\n    >>> v / v[3]\n    array([ 1.,  1., -1.,  1.])\n\n    \"\"\"", "\n", "if", "left", ">=", "right", "or", "bottom", ">=", "top", "or", "near", ">=", "far", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid frustum\"", ")", "\n", "", "if", "perspective", ":", "\n", "        ", "if", "near", "<=", "_EPS", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid frustum: near <= 0\"", ")", "\n", "", "t", "=", "2.0", "*", "near", "\n", "M", "=", "[", "[", "t", "/", "(", "left", "-", "right", ")", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "right", "-", "left", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "t", "/", "(", "bottom", "-", "top", ")", ",", "(", "top", "+", "bottom", ")", "/", "(", "top", "-", "bottom", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", ",", "t", "*", "far", "/", "(", "far", "-", "near", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "-", "1.0", ",", "0.0", "]", "]", "\n", "", "else", ":", "\n", "        ", "M", "=", "[", "[", "2.0", "/", "(", "right", "-", "left", ")", ",", "0.0", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "left", "-", "right", ")", "]", ",", "\n", "[", "0.0", ",", "2.0", "/", "(", "top", "-", "bottom", ")", ",", "0.0", ",", "(", "top", "+", "bottom", ")", "/", "(", "bottom", "-", "top", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "2.0", "/", "(", "far", "-", "near", ")", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "\n", "", "return", "numpy", ".", "array", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.shear_matrix": [[661, 690], ["transformation.unit_vector", "transformation.unit_vector", "math.tan", "numpy.identity", "numpy.identity", "abs", "ValueError", "numpy.outer", "numpy.outer", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "shear_matrix", "(", "angle", ",", "direction", ",", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to shear by angle along direction vector on shear plane.\n\n    The shear plane is defined by a point and normal vector. The direction\n    vector must be orthogonal to the plane's normal vector.\n\n    A point P is transformed by the shear matrix into P\" such that\n    the vector P-P\" is parallel to the direction vector and its extent is\n    given by the angle of P-P'-P\", where P' is the orthogonal projection\n    of P onto the shear plane.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S = shear_matrix(angle, direct, point, normal)\n    >>> numpy.allclose(1, numpy.linalg.det(S))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "if", "abs", "(", "numpy", ".", "dot", "(", "normal", ",", "direction", ")", ")", ">", "1e-6", ":", "\n", "        ", "raise", "ValueError", "(", "\"direction and normal vectors are not orthogonal\"", ")", "\n", "", "angle", "=", "math", ".", "tan", "(", "angle", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "+=", "angle", "*", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "-", "angle", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "*", "direction", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.shear_from_matrix": [[692, 735], ["numpy.array", "numpy.array", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.dot", "numpy.dot", "transformation.vector_norm", "math.atan", "numpy.linalg.eig", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.real().squeeze", "numpy.where", "numpy.where", "len", "ValueError", "numpy.real().squeeze", "numpy.real().squeeze", "numpy.cross", "numpy.cross", "transformation.vector_norm", "numpy.where", "numpy.where", "len", "ValueError", "numpy.identity", "numpy.identity", "numpy.real", "numpy.real", "abs", "numpy.real", "numpy.real", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "shear_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return shear angle, direction and plane from shear matrix.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S0 = shear_matrix(angle, direct, point, normal)\n    >>> angle, direct, point, normal = shear_from_matrix(S0)\n    >>> S1 = shear_matrix(angle, direct, point, normal)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "# normal: cross independent eigenvectors corresponding to the eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-4", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"no two linear independent eigenvectors found %s\"", "%", "w", ")", "\n", "", "V", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", ".", "T", "\n", "lenorm", "=", "-", "1.0", "\n", "for", "i0", ",", "i1", "in", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "2", ")", ")", ":", "\n", "        ", "n", "=", "numpy", ".", "cross", "(", "V", "[", "i0", "]", ",", "V", "[", "i1", "]", ")", "\n", "w", "=", "vector_norm", "(", "n", ")", "\n", "if", "w", ">", "lenorm", ":", "\n", "            ", "lenorm", "=", "w", "\n", "normal", "=", "n", "\n", "", "", "normal", "/=", "lenorm", "\n", "# direction and angle", "\n", "direction", "=", "numpy", ".", "dot", "(", "M33", "-", "numpy", ".", "identity", "(", "3", ")", ",", "normal", ")", "\n", "angle", "=", "vector_norm", "(", "direction", ")", "\n", "direction", "/=", "angle", "\n", "angle", "=", "math", ".", "atan", "(", "angle", ")", "\n", "# point: eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"no eigenvector corresponding to eigenvalue 1\"", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "angle", ",", "direction", ",", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.decompose_matrix": [[737, 820], ["M.copy", "numpy.zeros", "numpy.zeros", "any", "M[].copy", "M[].copy", "transformation.vector_norm", "numpy.dot", "numpy.dot", "transformation.vector_norm", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "transformation.vector_norm", "math.asin", "math.cos", "numpy.array", "numpy.array", "abs", "ValueError", "numpy.linalg.det", "numpy.linalg.det", "ValueError", "numpy.dot", "numpy.dot", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.negative", "numpy.negative", "numpy.negative", "numpy.negative", "math.atan2", "math.atan2", "math.atan2", "abs", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.cross", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross"], ["", "def", "decompose_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return sequence of transformations from transformation matrix.\n\n    matrix : array_like\n        Non-degenerative homogeneous transformation matrix\n\n    Return tuple of:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    Raise ValueError if matrix is of wrong type or degenerative.\n\n    >>> T0 = translation_matrix([1, 2, 3])\n    >>> scale, shear, angles, trans, persp = decompose_matrix(T0)\n    >>> T1 = translation_matrix(trans)\n    >>> numpy.allclose(T0, T1)\n    True\n    >>> S = scale_matrix(0.123)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(S)\n    >>> scale[0]\n    0.123\n    >>> R0 = euler_matrix(1, 2, 3)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(R0)\n    >>> R1 = euler_matrix(*angles)\n    >>> numpy.allclose(R0, R1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", ".", "T", "\n", "if", "abs", "(", "M", "[", "3", ",", "3", "]", ")", "<", "_EPS", ":", "\n", "        ", "raise", "ValueError", "(", "\"M[3, 3] is zero\"", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "P", "=", "M", ".", "copy", "(", ")", "\n", "P", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "if", "not", "numpy", ".", "linalg", ".", "det", "(", "P", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"matrix is singular\"", ")", "\n", "\n", "", "scale", "=", "numpy", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "shear", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "angles", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n", "if", "any", "(", "abs", "(", "M", "[", ":", "3", ",", "3", "]", ")", ">", "_EPS", ")", ":", "\n", "        ", "perspective", "=", "numpy", ".", "dot", "(", "M", "[", ":", ",", "3", "]", ",", "numpy", ".", "linalg", ".", "inv", "(", "P", ".", "T", ")", ")", "\n", "M", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "", "else", ":", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "\n", "", "translate", "=", "M", "[", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "M", "[", "3", ",", ":", "3", "]", "=", "0.0", "\n", "\n", "row", "=", "M", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "scale", "[", "0", "]", "=", "vector_norm", "(", "row", "[", "0", "]", ")", "\n", "row", "[", "0", "]", "/=", "scale", "[", "0", "]", "\n", "shear", "[", "0", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "0", "]", "\n", "scale", "[", "1", "]", "=", "vector_norm", "(", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "0", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "1", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "1", "]", "\n", "shear", "[", "2", "]", "=", "numpy", ".", "dot", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "1", "]", "*", "shear", "[", "2", "]", "\n", "scale", "[", "2", "]", "=", "vector_norm", "(", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "/=", "scale", "[", "2", "]", "\n", "shear", "[", "1", ":", "]", "/=", "scale", "[", "2", "]", "\n", "\n", "if", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "numpy", ".", "cross", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", ")", "<", "0", ":", "\n", "        ", "numpy", ".", "negative", "(", "scale", ",", "scale", ")", "\n", "numpy", ".", "negative", "(", "row", ",", "row", ")", "\n", "\n", "", "angles", "[", "1", "]", "=", "math", ".", "asin", "(", "-", "row", "[", "0", ",", "2", "]", ")", "\n", "if", "math", ".", "cos", "(", "angles", "[", "1", "]", ")", ":", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "row", "[", "1", ",", "2", "]", ",", "row", "[", "2", ",", "2", "]", ")", "\n", "angles", "[", "2", "]", "=", "math", ".", "atan2", "(", "row", "[", "0", ",", "1", "]", ",", "row", "[", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# angles[0] = math.atan2(row[1, 0], row[1, 1])", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "-", "row", "[", "2", ",", "1", "]", ",", "row", "[", "1", ",", "1", "]", ")", "\n", "angles", "[", "2", "]", "=", "0.0", "\n", "\n", "", "return", "scale", ",", "shear", ",", "angles", ",", "translate", ",", "perspective", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.compose_matrix": [[822, 873], ["numpy.identity", "numpy.identity", "numpy.identity", "numpy.identity", "numpy.dot", "numpy.dot", "numpy.identity", "numpy.identity", "numpy.dot", "numpy.dot", "transformation.euler_matrix", "numpy.dot", "numpy.dot", "numpy.identity", "numpy.identity", "numpy.dot", "numpy.dot", "numpy.identity", "numpy.identity", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.euler_matrix", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "compose_matrix", "(", "scale", "=", "None", ",", "shear", "=", "None", ",", "angles", "=", "None", ",", "translate", "=", "None", ",", "\n", "perspective", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return transformation matrix from sequence of transformations.\n\n    This is the inverse of the decompose_matrix function.\n\n    Sequence of transformations:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    >>> scale = numpy.random.random(3) - 0.5\n    >>> shear = numpy.random.random(3) - 0.5\n    >>> angles = (numpy.random.random(3) - 0.5) * (2*math.pi)\n    >>> trans = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(4) - 0.5\n    >>> M0 = compose_matrix(scale, shear, angles, trans, persp)\n    >>> result = decompose_matrix(M0)\n    >>> M1 = compose_matrix(*result)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "        ", "P", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "P", "[", "3", ",", ":", "]", "=", "perspective", "[", ":", "4", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "P", ")", "\n", "", "if", "translate", "is", "not", "None", ":", "\n", "        ", "T", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "T", "[", ":", "3", ",", "3", "]", "=", "translate", "[", ":", "3", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "T", ")", "\n", "", "if", "angles", "is", "not", "None", ":", "\n", "        ", "R", "=", "euler_matrix", "(", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ",", "'sxyz'", ")", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "R", ")", "\n", "", "if", "shear", "is", "not", "None", ":", "\n", "        ", "Z", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "Z", "[", "1", ",", "2", "]", "=", "shear", "[", "2", "]", "\n", "Z", "[", "0", ",", "2", "]", "=", "shear", "[", "1", "]", "\n", "Z", "[", "0", ",", "1", "]", "=", "shear", "[", "0", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "Z", ")", "\n", "", "if", "scale", "is", "not", "None", ":", "\n", "        ", "S", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "S", "[", "0", ",", "0", "]", "=", "scale", "[", "0", "]", "\n", "S", "[", "1", ",", "1", "]", "=", "scale", "[", "1", "]", "\n", "S", "[", "2", ",", "2", "]", "=", "scale", "[", "2", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "S", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.orthogonalization_matrix": [[875, 900], ["numpy.radians", "numpy.radians", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.array", "numpy.array", "math.sqrt"], "function", ["None"], ["", "def", "orthogonalization_matrix", "(", "lengths", ",", "angles", ")", ":", "\n", "    ", "\"\"\"Return orthogonalization matrix for crystallographic cell coordinates.\n\n    Angles are expected in degrees.\n\n    The de-orthogonalization matrix is the inverse.\n\n    >>> O = orthogonalization_matrix([10, 10, 10], [90, 90, 90])\n    >>> numpy.allclose(O[:3, :3], numpy.identity(3, float) * 10)\n    True\n    >>> O = orthogonalization_matrix([9.8, 12.0, 15.5], [87.2, 80.7, 69.7])\n    >>> numpy.allclose(numpy.sum(O), 43.063229)\n    True\n\n    \"\"\"", "\n", "a", ",", "b", ",", "c", "=", "lengths", "\n", "angles", "=", "numpy", ".", "radians", "(", "angles", ")", "\n", "sina", ",", "sinb", ",", "_", "=", "numpy", ".", "sin", "(", "angles", ")", "\n", "cosa", ",", "cosb", ",", "cosg", "=", "numpy", ".", "cos", "(", "angles", ")", "\n", "co", "=", "(", "cosa", "*", "cosb", "-", "cosg", ")", "/", "(", "sina", "*", "sinb", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "a", "*", "sinb", "*", "math", ".", "sqrt", "(", "1.0", "-", "co", "*", "co", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "-", "a", "*", "sinb", "*", "co", ",", "b", "*", "sina", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "a", "*", "cosb", ",", "b", "*", "cosa", ",", "c", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.affine_matrix_from_points": [[902, 1009], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.identity", "numpy.identity", "t0.reshape", "numpy.identity", "numpy.identity", "t1.reshape", "numpy.dot", "numpy.dot", "ValueError", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "numpy.linalg.svd", "numpy.linalg.svd", "numpy.dot", "numpy.dot", "numpy.concatenate", "numpy.concatenate", "numpy.vstack", "numpy.vstack", "math.sqrt", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.dot", "numpy.dot", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.linalg.svd", "numpy.linalg.svd", "numpy.dot", "numpy.dot", "numpy.identity", "numpy.identity", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.eigh", "numpy.linalg.eigh", "transformation.vector_norm", "transformation.quaternion_matrix", "numpy.zeros", "numpy.zeros", "numpy.dot", "numpy.dot", "numpy.linalg.det", "numpy.linalg.det", "numpy.outer", "numpy.outer", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.roll", "numpy.roll", "numpy.roll", "numpy.roll", "numpy.argmax", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_matrix", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "True", ",", "scale", "=", "True", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return affine transform matrix to register two point sets.\n\n    v0 and v1 are shape (ndims, \\*) arrays of at least ndims non-homogeneous\n    coordinates, where ndims is the dimensionality of the coordinate space.\n\n    If shear is False, a similarity transformation matrix is returned.\n    If also scale is False, a rigid/Euclidean transformation matrix\n    is returned.\n\n    By default the algorithm by Hartley and Zissermann [15] is used.\n    If usesvd is True, similarity and Euclidean transformation matrices\n    are calculated by minimizing the weighted sum of squared deviations\n    (RMSD) according to the algorithm by Kabsch [8].\n    Otherwise, and if ndims is 3, the quaternion based algorithm by Horn [9]\n    is used, which is slower when using this Python implementation.\n\n    The returned matrix performs rotation, translation and uniform scaling\n    (if specified).\n\n    >>> v0 = [[0, 1031, 1031, 0], [0, 0, 1600, 1600]]\n    >>> v1 = [[675, 826, 826, 677], [55, 52, 281, 277]]\n    >>> affine_matrix_from_points(v0, v1)\n    array([[   0.14549,    0.00062,  675.50008],\n           [   0.00048,    0.14094,   53.24971],\n           [   0.     ,    0.     ,    1.     ]])\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> S = scale_matrix(random.random())\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-8, 300).reshape(3, -1)\n    >>> M = affine_matrix_from_points(v0[:3], v1[:3])\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n\n    More examples in superimposition_matrix()\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n", "ndims", "=", "v0", ".", "shape", "[", "0", "]", "\n", "if", "ndims", "<", "2", "or", "v0", ".", "shape", "[", "1", "]", "<", "ndims", "or", "v0", ".", "shape", "!=", "v1", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"input arrays are of wrong shape or type\"", ")", "\n", "\n", "# move centroids to origin", "\n", "", "t0", "=", "-", "numpy", ".", "mean", "(", "v0", ",", "axis", "=", "1", ")", "\n", "M0", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M0", "[", ":", "ndims", ",", "ndims", "]", "=", "t0", "\n", "v0", "+=", "t0", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "t1", "=", "-", "numpy", ".", "mean", "(", "v1", ",", "axis", "=", "1", ")", "\n", "M1", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M1", "[", ":", "ndims", ",", "ndims", "]", "=", "t1", "\n", "v1", "+=", "t1", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "\n", "if", "shear", ":", "\n", "# Affine transformation", "\n", "        ", "A", "=", "numpy", ".", "concatenate", "(", "(", "v0", ",", "v1", ")", ",", "axis", "=", "0", ")", "\n", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "A", ".", "T", ")", "\n", "vh", "=", "vh", "[", ":", "ndims", "]", ".", "T", "\n", "B", "=", "vh", "[", ":", "ndims", "]", "\n", "C", "=", "vh", "[", "ndims", ":", "2", "*", "ndims", "]", "\n", "t", "=", "numpy", ".", "dot", "(", "C", ",", "numpy", ".", "linalg", ".", "pinv", "(", "B", ")", ")", "\n", "t", "=", "numpy", ".", "concatenate", "(", "(", "t", ",", "numpy", ".", "zeros", "(", "(", "ndims", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "M", "=", "numpy", ".", "vstack", "(", "(", "t", ",", "(", "(", "0.0", ",", ")", "*", "ndims", ")", "+", "(", "1.0", ",", ")", ")", ")", "\n", "", "elif", "usesvd", "or", "ndims", "!=", "3", ":", "\n", "# Rigid transformation via SVD of covariance matrix", "\n", "        ", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "numpy", ".", "dot", "(", "v1", ",", "v0", ".", "T", ")", ")", "\n", "# rotation matrix from SVD orthonormal bases", "\n", "R", "=", "numpy", ".", "dot", "(", "u", ",", "vh", ")", "\n", "if", "numpy", ".", "linalg", ".", "det", "(", "R", ")", "<", "0.0", ":", "\n", "# R does not constitute right handed system", "\n", "            ", "R", "-=", "numpy", ".", "outer", "(", "u", "[", ":", ",", "ndims", "-", "1", "]", ",", "vh", "[", "ndims", "-", "1", ",", ":", "]", "*", "2.0", ")", "\n", "s", "[", "-", "1", "]", "*=", "-", "1.0", "\n", "# homogeneous transformation matrix", "\n", "", "M", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "=", "R", "\n", "", "else", ":", "\n", "# Rigid transformation matrix via quaternion", "\n", "# compute symmetric matrix N", "\n", "        ", "xx", ",", "yy", ",", "zz", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "1", ")", "\n", "xy", ",", "yz", ",", "zx", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "1", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "xz", ",", "yx", ",", "zy", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "2", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "N", "=", "[", "[", "xx", "+", "yy", "+", "zz", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "yz", "-", "zy", ",", "xx", "-", "yy", "-", "zz", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "zx", "-", "xz", ",", "xy", "+", "yx", ",", "yy", "-", "xx", "-", "zz", ",", "0.0", "]", ",", "\n", "[", "xy", "-", "yx", ",", "zx", "+", "xz", ",", "yz", "+", "zy", ",", "zz", "-", "xx", "-", "yy", "]", "]", "\n", "# quaternion: eigenvector corresponding to most positive eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "N", ")", "\n", "q", "=", "V", "[", ":", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "q", "/=", "vector_norm", "(", "q", ")", "# unit quaternion", "\n", "# homogeneous transformation matrix", "\n", "M", "=", "quaternion_matrix", "(", "q", ")", "\n", "\n", "", "if", "scale", "and", "not", "shear", ":", "\n", "# Affine transformation; scale is ratio of RMS deviations from centroid", "\n", "        ", "v0", "*=", "v0", "\n", "v1", "*=", "v1", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "*=", "math", ".", "sqrt", "(", "numpy", ".", "sum", "(", "v1", ")", "/", "numpy", ".", "sum", "(", "v0", ")", ")", "\n", "\n", "# move centroids back", "\n", "", "M", "=", "numpy", ".", "dot", "(", "numpy", ".", "linalg", ".", "inv", "(", "M1", ")", ",", "numpy", ".", "dot", "(", "M", ",", "M0", ")", ")", "\n", "M", "/=", "M", "[", "ndims", ",", "ndims", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.superimposition_matrix": [[1011, 1060], ["transformation.affine_matrix_from_points", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.affine_matrix_from_points"], ["", "def", "superimposition_matrix", "(", "v0", ",", "v1", ",", "scale", "=", "False", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return matrix to transform given 3D point set into second point set.\n\n    v0 and v1 are shape (3, \\*) or (4, \\*) arrays of at least 3 points.\n\n    The parameters scale and usesvd are explained in the more general\n    affine_matrix_from_points function.\n\n    The returned matrix is a similarity or Euclidean transformation matrix.\n    This function has a fast C implementation in transformations.c.\n\n    >>> v0 = numpy.random.rand(3, 10)\n    >>> M = superimposition_matrix(v0, v0)\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> v0 = [[1,0,0], [0,1,0], [0,0,1], [1,1,1]]\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> S = scale_matrix(random.random())\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-9, 300).reshape(3, -1)\n    >>> M = superimposition_matrix(v0, v1, scale=True)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v = numpy.empty((4, 100, 3))\n    >>> v[:, :, 0] = v0\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0]))\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "return", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "False", ",", "\n", "scale", "=", "scale", ",", "usesvd", "=", "usesvd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.euler_matrix": [[1062, 1123], ["numpy.identity", "numpy.identity", "math.sin", "math.sin", "math.sin", "math.cos", "math.cos", "math.cos"], "function", ["None"], ["", "def", "euler_matrix", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> R = euler_matrix(1, 2, 3, 'syxz')\n    >>> numpy.allclose(numpy.sum(R[0]), -1.34786452)\n    True\n    >>> R = euler_matrix(1, 2, 3, (0, 1, 0, 1))\n    >>> numpy.allclose(numpy.sum(R[0]), -0.383436184)\n    True\n    >>> ai, aj, ak = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n    >>> for axes in _TUPLE2AXES.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "ai", ",", "aj", ",", "ak", "=", "-", "ai", ",", "-", "aj", ",", "-", "ak", "\n", "\n", "", "si", ",", "sj", ",", "sk", "=", "math", ".", "sin", "(", "ai", ")", ",", "math", ".", "sin", "(", "aj", ")", ",", "math", ".", "sin", "(", "ak", ")", "\n", "ci", ",", "cj", ",", "ck", "=", "math", ".", "cos", "(", "ai", ")", ",", "math", ".", "cos", "(", "aj", ")", ",", "math", ".", "cos", "(", "ak", ")", "\n", "cc", ",", "cs", "=", "ci", "*", "ck", ",", "ci", "*", "sk", "\n", "sc", ",", "ss", "=", "si", "*", "ck", ",", "si", "*", "sk", "\n", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "repetition", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "si", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "ci", "\n", "M", "[", "j", ",", "i", "]", "=", "sj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "-", "cj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "-", "cj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "*", "ck", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "sc", "+", "cs", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "cc", "-", "ss", "\n", "", "else", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "*", "ck", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "sc", "-", "cs", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "cc", "+", "ss", "\n", "M", "[", "j", ",", "i", "]", "=", "cj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "sj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "sj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "si", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "ci", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.euler_from_matrix": [[1125, 1181], ["numpy.array", "numpy.array", "math.sqrt", "math.sqrt", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "axes.lower"], "function", ["None"], ["", "def", "euler_from_matrix", "(", "matrix", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from rotation matrix for specified axis sequence.\n\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    Note that many Euler angle triplets can describe one matrix.\n\n    >>> R0 = euler_matrix(1, 2, 3, 'syxz')\n    >>> al, be, ga = euler_from_matrix(R0, 'syxz')\n    >>> R1 = euler_matrix(al, be, ga, 'syxz')\n    >>> numpy.allclose(R0, R1)\n    True\n    >>> angles = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R0 = euler_matrix(axes=axes, *angles)\n    ...    R1 = euler_matrix(axes=axes, *euler_from_matrix(R0, axes))\n    ...    if not numpy.allclose(R0, R1): print(axes, \"failed\")\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "if", "repetition", ":", "\n", "        ", "sy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "j", "]", "*", "M", "[", "i", ",", "j", "]", "+", "M", "[", "i", ",", "k", "]", "*", "M", "[", "i", ",", "k", "]", ")", "\n", "if", "sy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "i", ",", "j", "]", ",", "M", "[", "i", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "-", "M", "[", "k", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "0.0", "\n", "", "", "else", ":", "\n", "        ", "cy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "i", "]", "*", "M", "[", "i", ",", "i", "]", "+", "M", "[", "j", ",", "i", "]", "*", "M", "[", "j", ",", "i", "]", ")", "\n", "if", "cy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "k", ",", "j", "]", ",", "M", "[", "k", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "0.0", "\n", "\n", "", "", "if", "parity", ":", "\n", "        ", "ax", ",", "ay", ",", "az", "=", "-", "ax", ",", "-", "ay", ",", "-", "az", "\n", "", "if", "frame", ":", "\n", "        ", "ax", ",", "az", "=", "az", ",", "ax", "\n", "", "return", "ax", ",", "ay", ",", "az", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.euler_from_quaternion": [[1183, 1192], ["transformation.euler_from_matrix", "transformation.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.euler_from_matrix", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_matrix"], ["", "def", "euler_from_quaternion", "(", "quaternion", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from quaternion for specified axis sequence.\n\n    >>> angles = euler_from_quaternion([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(angles, [0.123, 0, 0])\n    True\n\n    \"\"\"", "\n", "return", "euler_from_matrix", "(", "quaternion_matrix", "(", "quaternion", ")", ",", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_from_euler": [[1194, 1256], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.empty", "numpy.empty", "axes.lower"], "function", ["None"], ["", "def", "quaternion_from_euler", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return quaternion from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> q = quaternion_from_euler(1, 2, 3, 'ryxz')\n    >>> numpy.allclose(q, [0.435953, 0.310622, -0.718287, 0.444435])\n    True\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "+", "1", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "-", "1", "]", "+", "1", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "]", "+", "1", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "aj", "=", "-", "aj", "\n", "\n", "", "ai", "/=", "2.0", "\n", "aj", "/=", "2.0", "\n", "ak", "/=", "2.0", "\n", "ci", "=", "math", ".", "cos", "(", "ai", ")", "\n", "si", "=", "math", ".", "sin", "(", "ai", ")", "\n", "cj", "=", "math", ".", "cos", "(", "aj", ")", "\n", "sj", "=", "math", ".", "sin", "(", "aj", ")", "\n", "ck", "=", "math", ".", "cos", "(", "ak", ")", "\n", "sk", "=", "math", ".", "sin", "(", "ak", ")", "\n", "cc", "=", "ci", "*", "ck", "\n", "cs", "=", "ci", "*", "sk", "\n", "sc", "=", "si", "*", "ck", "\n", "ss", "=", "si", "*", "sk", "\n", "\n", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "if", "repetition", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "(", "cc", "-", "ss", ")", "\n", "q", "[", "i", "]", "=", "cj", "*", "(", "cs", "+", "sc", ")", "\n", "q", "[", "j", "]", "=", "sj", "*", "(", "cc", "+", "ss", ")", "\n", "q", "[", "k", "]", "=", "sj", "*", "(", "cs", "-", "sc", ")", "\n", "", "else", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "cc", "+", "sj", "*", "ss", "\n", "q", "[", "i", "]", "=", "cj", "*", "sc", "-", "sj", "*", "cs", "\n", "q", "[", "j", "]", "=", "cj", "*", "ss", "+", "sj", "*", "cc", "\n", "q", "[", "k", "]", "=", "cj", "*", "cs", "-", "sj", "*", "sc", "\n", "", "if", "parity", ":", "\n", "        ", "q", "[", "j", "]", "*=", "-", "1.0", "\n", "\n", "###################################", "\n", "# add by kh, 0919", "\n", "", "if", "q", "[", "0", "]", ">", "0", ":", "\n", "        ", "q", "=", "q", "*", "1.", "\n", "", "else", ":", "\n", "        ", "q", "=", "q", "*", "-", "1.", "\n", "###################################", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_about_axis": [[1258, 1272], ["numpy.array", "numpy.array", "transformation.vector_norm", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm"], ["", "def", "quaternion_about_axis", "(", "angle", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return quaternion for rotation about axis.\n\n    >>> q = quaternion_about_axis(0.123, [1, 0, 0])\n    >>> numpy.allclose(q, [0.99810947, 0.06146124, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "axis", "[", "0", "]", ",", "axis", "[", "1", "]", ",", "axis", "[", "2", "]", "]", ")", "\n", "qlen", "=", "vector_norm", "(", "q", ")", "\n", "if", "qlen", ">", "_EPS", ":", "\n", "        ", "q", "*=", "math", ".", "sin", "(", "angle", "/", "2.0", ")", "/", "qlen", "\n", "", "q", "[", "0", "]", "=", "math", ".", "cos", "(", "angle", "/", "2.0", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_matrix": [[1274, 1299], ["numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "math.sqrt", "numpy.outer", "numpy.outer", "numpy.array", "numpy.array", "numpy.identity", "numpy.identity"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "quaternion_matrix", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from quaternion.\n\n    >>> M = quaternion_matrix([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(M, rotation_matrix(0.123, [1, 0, 0]))\n    True\n    >>> M = quaternion_matrix([1, 0, 0, 0])\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> M = quaternion_matrix([0, 1, 0, 0])\n    >>> numpy.allclose(M, numpy.diag([1, -1, -1, 1]))\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "n", "=", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "if", "n", "<", "_EPS", ":", "\n", "        ", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "", "q", "*=", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", "\n", "q", "=", "numpy", ".", "outer", "(", "q", ",", "q", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "1.0", "-", "q", "[", "2", ",", "2", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "1", ",", "2", "]", "-", "q", "[", "3", ",", "0", "]", ",", "q", "[", "1", ",", "3", "]", "+", "q", "[", "2", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "2", "]", "+", "q", "[", "3", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "2", ",", "3", "]", "-", "q", "[", "1", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "3", "]", "-", "q", "[", "2", ",", "0", "]", ",", "q", "[", "2", ",", "3", "]", "+", "q", "[", "1", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "2", ",", "2", "]", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_from_matrix": [[1301, 1384], ["numpy.array", "numpy.array", "numpy.empty", "numpy.empty", "numpy.trace", "numpy.trace", "numpy.array", "numpy.array", "numpy.linalg.eigh", "numpy.linalg.eigh", "numpy.negative", "numpy.negative", "math.sqrt", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "quaternion_from_matrix", "(", "matrix", ",", "isprecise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return quaternion from rotation matrix.\n\n    If isprecise is True, the input matrix is assumed to be a precise rotation\n    matrix and a faster algorithm is used.\n\n    >>> q = quaternion_from_matrix(numpy.identity(4), True)\n    >>> numpy.allclose(q, [1, 0, 0, 0])\n    True\n    >>> q = quaternion_from_matrix(numpy.diag([1, -1, -1, 1]))\n    >>> numpy.allclose(q, [0, 1, 0, 0]) or numpy.allclose(q, [0, -1, 0, 0])\n    True\n    >>> R = rotation_matrix(0.123, (1, 2, 3))\n    >>> q = quaternion_from_matrix(R, True)\n    >>> numpy.allclose(q, [0.9981095, 0.0164262, 0.0328524, 0.0492786])\n    True\n    >>> R = [[-0.545, 0.797, 0.260, 0], [0.733, 0.603, -0.313, 0],\n    ...      [-0.407, 0.021, -0.913, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.19069, 0.43736, 0.87485, -0.083611])\n    True\n    >>> R = [[0.395, 0.362, 0.843, 0], [-0.626, 0.796, -0.056, 0],\n    ...      [-0.677, -0.498, 0.529, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.82336615, -0.13610694, 0.46344705, -0.29792603])\n    True\n    >>> R = random_rotation_matrix()\n    >>> q = quaternion_from_matrix(R)\n    >>> is_same_transform(R, quaternion_matrix(q))\n    True\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n    >>> R = euler_matrix(0.0, 0.0, numpy.pi/2.0)\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "4", ",", ":", "4", "]", "\n", "if", "isprecise", ":", "\n", "        ", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "t", "=", "numpy", ".", "trace", "(", "M", ")", "\n", "if", "t", ">", "M", "[", "3", ",", "3", "]", ":", "\n", "            ", "q", "[", "0", "]", "=", "t", "\n", "q", "[", "3", "]", "=", "M", "[", "1", ",", "0", "]", "-", "M", "[", "0", ",", "1", "]", "\n", "q", "[", "2", "]", "=", "M", "[", "0", ",", "2", "]", "-", "M", "[", "2", ",", "0", "]", "\n", "q", "[", "1", "]", "=", "M", "[", "2", ",", "1", "]", "-", "M", "[", "1", ",", "2", "]", "\n", "", "else", ":", "\n", "            ", "i", ",", "j", ",", "k", "=", "0", ",", "1", ",", "2", "\n", "if", "M", "[", "1", ",", "1", "]", ">", "M", "[", "0", ",", "0", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "1", ",", "2", ",", "0", "\n", "", "if", "M", "[", "2", ",", "2", "]", ">", "M", "[", "i", ",", "i", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "2", ",", "0", ",", "1", "\n", "", "t", "=", "M", "[", "i", ",", "i", "]", "-", "(", "M", "[", "j", ",", "j", "]", "+", "M", "[", "k", ",", "k", "]", ")", "+", "M", "[", "3", ",", "3", "]", "\n", "q", "[", "i", "]", "=", "t", "\n", "q", "[", "j", "]", "=", "M", "[", "i", ",", "j", "]", "+", "M", "[", "j", ",", "i", "]", "\n", "q", "[", "k", "]", "=", "M", "[", "k", ",", "i", "]", "+", "M", "[", "i", ",", "k", "]", "\n", "q", "[", "3", "]", "=", "M", "[", "k", ",", "j", "]", "-", "M", "[", "j", ",", "k", "]", "\n", "q", "=", "q", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", "]", "\n", "", "q", "*=", "0.5", "/", "math", ".", "sqrt", "(", "t", "*", "M", "[", "3", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "        ", "m00", "=", "M", "[", "0", ",", "0", "]", "\n", "m01", "=", "M", "[", "0", ",", "1", "]", "\n", "m02", "=", "M", "[", "0", ",", "2", "]", "\n", "m10", "=", "M", "[", "1", ",", "0", "]", "\n", "m11", "=", "M", "[", "1", ",", "1", "]", "\n", "m12", "=", "M", "[", "1", ",", "2", "]", "\n", "m20", "=", "M", "[", "2", ",", "0", "]", "\n", "m21", "=", "M", "[", "2", ",", "1", "]", "\n", "m22", "=", "M", "[", "2", ",", "2", "]", "\n", "# symmetric matrix K", "\n", "K", "=", "numpy", ".", "array", "(", "[", "[", "m00", "-", "m11", "-", "m22", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m01", "+", "m10", ",", "m11", "-", "m00", "-", "m22", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m02", "+", "m20", ",", "m12", "+", "m21", ",", "m22", "-", "m00", "-", "m11", ",", "0.0", "]", ",", "\n", "[", "m21", "-", "m12", ",", "m02", "-", "m20", ",", "m10", "-", "m01", ",", "m00", "+", "m11", "+", "m22", "]", "]", ")", "\n", "K", "/=", "3.0", "\n", "# quaternion is eigenvector of K that corresponds to largest eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "q", "=", "V", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "", "if", "q", "[", "0", "]", "<", "0.0", ":", "\n", "        ", "numpy", ".", "negative", "(", "q", ",", "q", ")", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply": [[1386, 1401], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "quaternion_multiply", "(", "quaternion1", ",", "quaternion0", ")", ":", "\n", "    ", "\"\"\"Return multiplication of two quaternions.\n\n    >>> q = quaternion_multiply([4, 1, -2, 3], [8, -5, 6, 7])\n    >>> numpy.allclose(q, [28, -44, -14, 48])\n    True\n\n    \"\"\"", "\n", "w0", ",", "x0", ",", "y0", ",", "z0", "=", "quaternion0", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "quaternion1", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "-", "x1", "*", "x0", "-", "y1", "*", "y0", "-", "z1", "*", "z0", "+", "w1", "*", "w0", ",", "\n", "x1", "*", "w0", "+", "y1", "*", "z0", "-", "z1", "*", "y0", "+", "w1", "*", "x0", ",", "\n", "-", "x1", "*", "z0", "+", "y1", "*", "w0", "+", "z1", "*", "x0", "+", "w1", "*", "y0", ",", "\n", "x1", "*", "y0", "-", "y1", "*", "x0", "+", "z1", "*", "w0", "+", "w1", "*", "z0", "]", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_conjugate": [[1403, 1415], ["numpy.array", "numpy.array", "numpy.negative", "numpy.negative"], "function", ["None"], ["", "def", "quaternion_conjugate", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return conjugate of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_conjugate(q0)\n    >>> q1[0] == q0[0] and all(q1[1:] == -q0[1:])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_inverse": [[1417, 1429], ["numpy.array", "numpy.array", "numpy.negative", "numpy.negative", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "quaternion_inverse", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return inverse of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_inverse(q0)\n    >>> numpy.allclose(quaternion_multiply(q0, q1), [1, 0, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "/", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_real": [[1431, 1439], ["float"], "function", ["None"], ["", "def", "quaternion_real", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return real part of quaternion.\n\n    >>> quaternion_real([3, 0, 1, 2])\n    3.0\n\n    \"\"\"", "\n", "return", "float", "(", "quaternion", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_imag": [[1441, 1449], ["numpy.array", "numpy.array"], "function", ["None"], ["", "def", "quaternion_imag", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return imaginary part of quaternion.\n\n    >>> quaternion_imag([3, 0, 1, 2])\n    array([ 0.,  1.,  2.])\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "quaternion", "[", "1", ":", "4", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_slerp": [[1451, 1490], ["transformation.unit_vector", "transformation.unit_vector", "numpy.dot", "numpy.dot", "abs", "numpy.negative", "numpy.negative", "math.acos", "abs", "math.sin", "math.sin", "math.sin", "abs"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "quaternion_slerp", "(", "quat0", ",", "quat1", ",", "fraction", ",", "spin", "=", "0", ",", "shortestpath", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return spherical linear interpolation between two quaternions.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = random_quaternion()\n    >>> q = quaternion_slerp(q0, q1, 0)\n    >>> numpy.allclose(q, q0)\n    True\n    >>> q = quaternion_slerp(q0, q1, 1, 1)\n    >>> numpy.allclose(q, q1)\n    True\n    >>> q = quaternion_slerp(q0, q1, 0.5)\n    >>> angle = math.acos(numpy.dot(q0, q))\n    >>> numpy.allclose(2, math.acos(numpy.dot(q0, q1)) / angle) or \\\n        numpy.allclose(2, math.acos(-numpy.dot(q0, q1)) / angle)\n    True\n\n    \"\"\"", "\n", "q0", "=", "unit_vector", "(", "quat0", "[", ":", "4", "]", ")", "\n", "q1", "=", "unit_vector", "(", "quat1", "[", ":", "4", "]", ")", "\n", "if", "fraction", "==", "0.0", ":", "\n", "        ", "return", "q0", "\n", "", "elif", "fraction", "==", "1.0", ":", "\n", "        ", "return", "q1", "\n", "", "d", "=", "numpy", ".", "dot", "(", "q0", ",", "q1", ")", "\n", "if", "abs", "(", "abs", "(", "d", ")", "-", "1.0", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "if", "shortestpath", "and", "d", "<", "0.0", ":", "\n", "# invert rotation", "\n", "        ", "d", "=", "-", "d", "\n", "numpy", ".", "negative", "(", "q1", ",", "q1", ")", "\n", "", "angle", "=", "math", ".", "acos", "(", "d", ")", "+", "spin", "*", "math", ".", "pi", "\n", "if", "abs", "(", "angle", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "isin", "=", "1.0", "/", "math", ".", "sin", "(", "angle", ")", "\n", "q0", "*=", "math", ".", "sin", "(", "(", "1.0", "-", "fraction", ")", "*", "angle", ")", "*", "isin", "\n", "q1", "*=", "math", ".", "sin", "(", "fraction", "*", "angle", ")", "*", "isin", "\n", "q0", "+=", "q1", "\n", "return", "q0", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.random_quaternion": [[1492, 1518], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.array", "numpy.array", "numpy.random.rand", "numpy.random.rand", "len", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "random_quaternion", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random unit quaternion.\n\n    rand: array like or None\n        Three independent random variables that are uniformly distributed\n        between 0 and 1.\n\n    >>> q = random_quaternion()\n    >>> numpy.allclose(1, vector_norm(q))\n    True\n    >>> q = random_quaternion(numpy.random.random(3))\n    >>> len(q.shape), q.shape[0]==4\n    (1, True)\n\n    \"\"\"", "\n", "if", "rand", "is", "None", ":", "\n", "        ", "rand", "=", "numpy", ".", "random", ".", "rand", "(", "3", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "rand", ")", "==", "3", "\n", "", "r1", "=", "numpy", ".", "sqrt", "(", "1.0", "-", "rand", "[", "0", "]", ")", "\n", "r2", "=", "numpy", ".", "sqrt", "(", "rand", "[", "0", "]", ")", "\n", "pi2", "=", "math", ".", "pi", "*", "2.0", "\n", "t1", "=", "pi2", "*", "rand", "[", "1", "]", "\n", "t2", "=", "pi2", "*", "rand", "[", "2", "]", "\n", "return", "numpy", ".", "array", "(", "[", "numpy", ".", "cos", "(", "t2", ")", "*", "r2", ",", "numpy", ".", "sin", "(", "t1", ")", "*", "r1", ",", "\n", "numpy", ".", "cos", "(", "t1", ")", "*", "r1", ",", "numpy", ".", "sin", "(", "t2", ")", "*", "r2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.random_rotation_matrix": [[1520, 1533], ["transformation.quaternion_matrix", "transformation.random_quaternion"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_matrix", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.random_quaternion"], ["", "def", "random_rotation_matrix", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random rotation matrix.\n\n    rand: array like\n        Three independent random variables that are uniformly distributed\n        between 0 and 1 for each returned quaternion.\n\n    >>> R = random_rotation_matrix()\n    >>> numpy.allclose(numpy.dot(R.T, R), numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "quaternion_matrix", "(", "random_quaternion", "(", "rand", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_map_to_sphere": [[1646, 1657], ["math.sqrt", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "math.sqrt"], "function", ["None"], ["", "", "def", "arcball_map_to_sphere", "(", "point", ",", "center", ",", "radius", ")", ":", "\n", "    ", "\"\"\"Return unit sphere coordinates from window coordinates.\"\"\"", "\n", "v0", "=", "(", "point", "[", "0", "]", "-", "center", "[", "0", "]", ")", "/", "radius", "\n", "v1", "=", "(", "center", "[", "1", "]", "-", "point", "[", "1", "]", ")", "/", "radius", "\n", "n", "=", "v0", "*", "v0", "+", "v1", "*", "v1", "\n", "if", "n", ">", "1.0", ":", "\n", "# position outside of sphere", "\n", "        ", "n", "=", "math", ".", "sqrt", "(", "n", ")", "\n", "return", "numpy", ".", "array", "(", "[", "v0", "/", "n", ",", "v1", "/", "n", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "v0", ",", "v1", ",", "math", ".", "sqrt", "(", "1.0", "-", "n", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_constrain_to_axis": [[1659, 1673], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "transformation.vector_norm", "transformation.unit_vector", "numpy.dot", "numpy.dot", "numpy.array", "numpy.array", "numpy.negative", "numpy.negative"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "", "def", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return sphere point perpendicular to axis.\"\"\"", "\n", "v", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "a", "=", "numpy", ".", "array", "(", "axis", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v", "-=", "a", "*", "numpy", ".", "dot", "(", "a", ",", "v", ")", "# on plane", "\n", "n", "=", "vector_norm", "(", "v", ")", "\n", "if", "n", ">", "_EPS", ":", "\n", "        ", "if", "v", "[", "2", "]", "<", "0.0", ":", "\n", "            ", "numpy", ".", "negative", "(", "v", ",", "v", ")", "\n", "", "v", "/=", "n", "\n", "return", "v", "\n", "", "if", "a", "[", "2", "]", "==", "1.0", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "return", "unit_vector", "(", "[", "-", "a", "[", "1", "]", ",", "a", "[", "0", "]", ",", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_nearest_axis": [[1675, 1686], ["numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "transformation.arcball_constrain_to_axis"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.arcball_constrain_to_axis"], ["", "def", "arcball_nearest_axis", "(", "point", ",", "axes", ")", ":", "\n", "    ", "\"\"\"Return axis, which arc is nearest to point.\"\"\"", "\n", "point", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "nearest", "=", "None", "\n", "mx", "=", "-", "1.0", "\n", "for", "axis", "in", "axes", ":", "\n", "        ", "t", "=", "numpy", ".", "dot", "(", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ",", "point", ")", "\n", "if", "t", ">", "mx", ":", "\n", "            ", "nearest", "=", "axis", "\n", "mx", "=", "t", "\n", "", "", "return", "nearest", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm": [[1708, 1745], ["numpy.array", "numpy.array", "numpy.atleast_1d", "numpy.atleast_1d", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.sqrt", "math.sqrt", "numpy.sum", "numpy.sum", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["def", "vector_norm", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return length, i.e. Euclidean norm, of ndarray along axis.\n\n    >>> v = numpy.random.random(3)\n    >>> n = vector_norm(v)\n    >>> numpy.allclose(n, numpy.linalg.norm(v))\n    True\n    >>> v = numpy.random.rand(6, 5, 3)\n    >>> n = vector_norm(v, axis=-1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=2)))\n    True\n    >>> n = vector_norm(v, axis=1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> v = numpy.random.rand(5, 4, 3)\n    >>> n = numpy.empty((5, 3))\n    >>> vector_norm(v, axis=1, out=n)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> vector_norm([])\n    0.0\n    >>> vector_norm([1])\n    1.0\n\n    \"\"\"", "\n", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "return", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "", "data", "*=", "data", "\n", "out", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "data", "*=", "data", "\n", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ",", "out", "=", "out", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.unit_vector": [[1747, 1789], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.sqrt", "numpy.sqrt", "numpy.array", "numpy.array", "numpy.sum", "numpy.sum", "numpy.expand_dims", "numpy.expand_dims", "math.sqrt", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "", "def", "unit_vector", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return ndarray normalized by length, i.e. Euclidean norm, along axis.\n\n    >>> v0 = numpy.random.random(3)\n    >>> v1 = unit_vector(v0)\n    >>> numpy.allclose(v1, v0 / numpy.linalg.norm(v0))\n    True\n    >>> v0 = numpy.random.rand(5, 4, 3)\n    >>> v1 = unit_vector(v0, axis=-1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=2)), 2)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = unit_vector(v0, axis=1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=1)), 1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = numpy.empty((5, 4, 3))\n    >>> unit_vector(v0, axis=1, out=v1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> list(unit_vector([]))\n    []\n    >>> list(unit_vector([1]))\n    [1.0]\n\n    \"\"\"", "\n", "if", "out", "is", "None", ":", "\n", "        ", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "data", "/=", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "return", "data", "\n", "", "", "else", ":", "\n", "        ", "if", "out", "is", "not", "data", ":", "\n", "            ", "out", "[", ":", "]", "=", "numpy", ".", "array", "(", "data", ",", "copy", "=", "False", ")", "\n", "", "data", "=", "out", "\n", "", "length", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", "*", "data", ",", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "length", ",", "length", ")", "\n", "if", "axis", "is", "not", "None", ":", "\n", "        ", "length", "=", "numpy", ".", "expand_dims", "(", "length", ",", "axis", ")", "\n", "", "data", "/=", "length", "\n", "if", "out", "is", "None", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.random_vector": [[1791, 1804], ["numpy.random.random", "numpy.random.random"], "function", ["None"], ["", "", "def", "random_vector", "(", "size", ")", ":", "\n", "    ", "\"\"\"Return array of random doubles in the half-open interval [0.0, 1.0).\n\n    >>> v = random_vector(10000)\n    >>> numpy.all(v >= 0) and numpy.all(v < 1)\n    True\n    >>> v0 = random_vector(10)\n    >>> v1 = random_vector(10)\n    >>> numpy.any(v0 == v1)\n    False\n\n    \"\"\"", "\n", "return", "numpy", ".", "random", ".", "random", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_product": [[1806, 1825], ["numpy.cross", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross"], ["", "def", "vector_product", "(", "v0", ",", "v1", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return vector perpendicular to vectors.\n\n    >>> v = vector_product([2, 0, 0], [0, 3, 0])\n    >>> numpy.allclose(v, [0, 0, 6])\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> v = vector_product(v0, v1)\n    >>> numpy.allclose(v, [[0, 0, 0, 0], [0, 0, 6, 6], [0, -6, 0, -6]])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> v = vector_product(v0, v1, axis=1)\n    >>> numpy.allclose(v, [[0, 0, 6], [0, -6, 0], [6, 0, 0], [0, -6, 6]])\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "cross", "(", "v0", ",", "v1", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.angle_between_vectors": [[1827, 1856], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.sum", "numpy.sum", "numpy.arccos", "numpy.arccos", "transformation.vector_norm", "transformation.vector_norm", "numpy.fabs", "numpy.fabs"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.vector_norm"], ["", "def", "angle_between_vectors", "(", "v0", ",", "v1", ",", "directed", "=", "True", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return angle between vectors.\n\n    If directed is False, the input vectors are interpreted as undirected axes,\n    i.e. the maximum angle is pi/2.\n\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3])\n    >>> numpy.allclose(a, math.pi)\n    True\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3], directed=False)\n    >>> numpy.allclose(a, 0)\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> a = angle_between_vectors(v0, v1)\n    >>> numpy.allclose(a, [0, 1.5708, 1.5708, 0.95532])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> a = angle_between_vectors(v0, v1, axis=1)\n    >>> numpy.allclose(a, [1.5708, 1.5708, 1.5708, 0.95532])\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "dot", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "axis", ")", "\n", "dot", "/=", "vector_norm", "(", "v0", ",", "axis", "=", "axis", ")", "*", "vector_norm", "(", "v1", ",", "axis", "=", "axis", ")", "\n", "return", "numpy", ".", "arccos", "(", "dot", "if", "directed", "else", "numpy", ".", "fabs", "(", "dot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.inverse_matrix": [[1858, 1872], ["numpy.linalg.inv", "numpy.linalg.inv"], "function", ["None"], ["", "def", "inverse_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return inverse of square transformation matrix.\n\n    >>> M0 = random_rotation_matrix()\n    >>> M1 = inverse_matrix(M0.T)\n    >>> numpy.allclose(M1, numpy.linalg.inv(M0.T))\n    True\n    >>> for size in range(1, 7):\n    ...     M0 = numpy.random.rand(size, size)\n    ...     M1 = inverse_matrix(M0)\n    ...     if not numpy.allclose(M1, numpy.linalg.inv(M0)): print(size)\n\n    \"\"\"", "\n", "return", "numpy", ".", "linalg", ".", "inv", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.concatenate_matrices": [[1874, 1888], ["numpy.identity", "numpy.identity", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "concatenate_matrices", "(", "*", "matrices", ")", ":", "\n", "    ", "\"\"\"Return concatenation of series of transformation matrices.\n\n    >>> M = numpy.random.rand(16).reshape((4, 4)) - 0.5\n    >>> numpy.allclose(M, concatenate_matrices(M))\n    True\n    >>> numpy.allclose(numpy.dot(M, M.T), concatenate_matrices(M, M.T))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "for", "i", "in", "matrices", ":", "\n", "        ", "M", "=", "numpy", ".", "dot", "(", "M", ",", "i", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.is_same_transform": [[1890, 1904], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.allclose", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_transform", "(", "matrix0", ",", "matrix1", ")", ":", "\n", "    ", "\"\"\"Return True if two matrices perform same transformation.\n\n    >>> is_same_transform(numpy.identity(4), numpy.identity(4))\n    True\n    >>> is_same_transform(numpy.identity(4), random_rotation_matrix())\n    False\n\n    \"\"\"", "\n", "matrix0", "=", "numpy", ".", "array", "(", "matrix0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix0", "/=", "matrix0", "[", "3", ",", "3", "]", "\n", "matrix1", "=", "numpy", ".", "array", "(", "matrix1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix1", "/=", "matrix1", "[", "3", ",", "3", "]", "\n", "return", "numpy", ".", "allclose", "(", "matrix0", ",", "matrix1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.is_same_quaternion": [[1906, 1911], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.allclose", "numpy.allclose", "numpy.allclose", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_quaternion", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "\"\"\"Return True if two quaternions are equal.\"\"\"", "\n", "q0", "=", "numpy", ".", "array", "(", "q0", ")", "\n", "q1", "=", "numpy", ".", "array", "(", "q1", ")", "\n", "return", "numpy", ".", "allclose", "(", "q0", ",", "q1", ")", "or", "numpy", ".", "allclose", "(", "q0", ",", "-", "q1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation._import_module": [[1913, 1943], ["dir", "import_module", "import_module", "getattr", "warnings.warn", "attr.startswith", "globals", "globals", "globals", "globals", "warnings.warn"], "function", ["None"], ["", "def", "_import_module", "(", "name", ",", "package", "=", "None", ",", "warn", "=", "True", ",", "prefix", "=", "'_py_'", ",", "ignore", "=", "'_'", ")", ":", "\n", "    ", "\"\"\"Try import all public attributes from module into global namespace.\n\n    Existing attributes with name clashes are renamed with prefix.\n    Attributes starting with underscore are ignored by default.\n\n    Return True on successful import.\n\n    \"\"\"", "\n", "import", "warnings", "\n", "from", "importlib", "import", "import_module", "\n", "try", ":", "\n", "        ", "if", "not", "package", ":", "\n", "            ", "module", "=", "import_module", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "module", "=", "import_module", "(", "'.'", "+", "name", ",", "package", "=", "package", ")", "\n", "", "", "except", "ImportError", ":", "\n", "        ", "if", "warn", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"failed to import module %s\"", "%", "name", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "attr", "in", "dir", "(", "module", ")", ":", "\n", "            ", "if", "ignore", "and", "attr", ".", "startswith", "(", "ignore", ")", ":", "\n", "                ", "continue", "\n", "", "if", "prefix", ":", "\n", "                ", "if", "attr", "in", "globals", "(", ")", ":", "\n", "                    ", "globals", "(", ")", "[", "prefix", "+", "attr", "]", "=", "globals", "(", ")", "[", "attr", "]", "\n", "", "elif", "warn", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"no Python implementation of \"", "+", "attr", ")", "\n", "", "", "globals", "(", ")", "[", "attr", "]", "=", "getattr", "(", "module", ",", "attr", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.functions.mask_features": [[5, 15], ["numpy.zeros_like"], "function", ["None"], ["def", "mask_features", "(", "features", ",", "masked_freq", ")", ":", "\n", "    ", "\"\"\"\n    mask feature with give frequency\n    :param features: t x feature size\n    :return:\n    \"\"\"", "\n", "mask", "=", "np", ".", "zeros_like", "(", "features", ")", "\n", "mask", "[", ":", ":", "masked_freq", "]", "=", "1.", "\n", "feature_out", "=", "features", "*", "mask", "\n", "return", "feature_out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.functions.mask_features_withshuffle": [[17, 32], ["numpy.zeros_like", "numpy.random.shuffle"], "function", ["None"], ["", "def", "mask_features_withshuffle", "(", "features", ",", "masked_freq", ")", ":", "\n", "    ", "\"\"\"\n    mask feature with give frequency\n    :param features: t x feature size\n    :return:\n    \"\"\"", "\n", "# mask feature", "\n", "mask", "=", "np", ".", "zeros_like", "(", "features", ")", "\n", "mask", "[", ":", ":", "masked_freq", "]", "=", "1.", "\n", "feature_out", "=", "features", "*", "mask", "\n", "# shuffle feature", "\n", "b", "=", "feature_out", "[", ":", ":", "masked_freq", "]", "*", "1.", "\n", "np", ".", "random", ".", "shuffle", "(", "b", ")", "\n", "feature_out", "[", ":", ":", "masked_freq", ",", "2", ":", "]", "=", "b", "[", ":", ",", "2", ":", "]", "*", "1", "\n", "return", "feature_out", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_cpu.__init__": [[15, 20], ["list", "filter", "x.to", "hasattr", "torch.device", "next", "x.parameters"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next"], ["    ", "def", "__init__", "(", "self", ",", "*", "models", ")", ":", "\n", "        ", "self", ".", "models", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "models", ")", ")", "\n", "self", ".", "prev_devices", "=", "[", "x", ".", "device", "if", "hasattr", "(", "x", ",", "'device'", ")", "else", "next", "(", "x", ".", "parameters", "(", ")", ")", ".", "device", "for", "x", "in", "self", ".", "models", "]", "\n", "for", "x", "in", "self", ".", "models", ":", "\n", "            ", "x", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_cpu.__enter__": [[21, 23], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_cpu.__exit__": [[24, 28], ["zip", "x.to"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "for", "x", ",", "device", "in", "zip", "(", "self", ".", "models", ",", "self", ".", "prev_devices", ")", ":", "\n", "            ", "x", ".", "to", "(", "device", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_device.__init__": [[32, 37], ["list", "filter", "x.to", "hasattr", "next", "x.parameters"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "*", "models", ")", ":", "\n", "        ", "self", ".", "models", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "models", ")", ")", "\n", "self", ".", "prev_devices", "=", "[", "x", ".", "device", "if", "hasattr", "(", "x", ",", "'device'", ")", "else", "next", "(", "x", ".", "parameters", "(", ")", ")", ".", "device", "for", "x", "in", "self", ".", "models", "]", "\n", "for", "x", "in", "self", ".", "models", ":", "\n", "            ", "x", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_device.__enter__": [[38, 40], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_device.__exit__": [[41, 45], ["zip", "x.to"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "for", "x", ",", "device", "in", "zip", "(", "self", ".", "models", ",", "self", ".", "prev_devices", ")", ":", "\n", "            ", "x", ".", "to", "(", "device", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_test.__init__": [[49, 54], ["list", "filter", "x.train"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train"], ["    ", "def", "__init__", "(", "self", ",", "*", "models", ")", ":", "\n", "        ", "self", ".", "models", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "models", ")", ")", "\n", "self", ".", "prev_modes", "=", "[", "x", ".", "training", "for", "x", "in", "self", ".", "models", "]", "\n", "for", "x", "in", "self", ".", "models", ":", "\n", "            ", "x", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_test.__enter__": [[55, 57], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_test.__exit__": [[58, 62], ["zip", "x.train"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "for", "x", ",", "mode", "in", "zip", "(", "self", ".", "models", ",", "self", ".", "prev_modes", ")", ":", "\n", "            ", "x", ".", "train", "(", "mode", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_train.__init__": [[66, 71], ["list", "filter", "x.train"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train"], ["    ", "def", "__init__", "(", "self", ",", "*", "models", ")", ":", "\n", "        ", "self", ".", "models", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "models", ")", ")", "\n", "self", ".", "prev_modes", "=", "[", "x", ".", "training", "for", "x", "in", "self", ".", "models", "]", "\n", "for", "x", "in", "self", ".", "models", ":", "\n", "            ", "x", ".", "train", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_train.__enter__": [[72, 74], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.to_train.__exit__": [[75, 79], ["zip", "x.train"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "for", "x", ",", "mode", "in", "zip", "(", "self", ".", "models", ",", "self", ".", "prev_modes", ")", ":", "\n", "            ", "x", ".", "train", "(", "mode", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.batch_to": [[81, 83], ["x.to"], "function", ["None"], ["", "", "def", "batch_to", "(", "dst", ",", "*", "args", ")", ":", "\n", "    ", "return", "[", "x", ".", "to", "(", "dst", ")", "for", "x", "in", "args", "if", "x", "is", "not", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.get_flat_params_from": [[85, 95], ["torch.cat", "hasattr", "model.parameters", "params.append", "param.data.view"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "get_flat_params_from", "(", "models", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "models", ",", "'__iter__'", ")", ":", "\n", "        ", "models", "=", "(", "models", ",", ")", "\n", "", "params", "=", "[", "]", "\n", "for", "model", "in", "models", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "append", "(", "param", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "", "flat_params", "=", "torch", ".", "cat", "(", "params", ")", "\n", "return", "flat_params", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.set_flat_params_to": [[97, 104], ["model.parameters", "int", "param.data.copy_", "numpy.prod", "flat_params[].view", "list", "param.size", "param.size"], "function", ["None"], ["", "def", "set_flat_params_to", "(", "model", ",", "flat_params", ")", ":", "\n", "    ", "prev_ind", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "flat_size", "=", "int", "(", "np", ".", "prod", "(", "list", "(", "param", ".", "size", "(", ")", ")", ")", ")", "\n", "param", ".", "data", ".", "copy_", "(", "\n", "flat_params", "[", "prev_ind", ":", "prev_ind", "+", "flat_size", "]", ".", "view", "(", "param", ".", "size", "(", ")", ")", ")", "\n", "prev_ind", "+=", "flat_size", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.get_flat_grad_from": [[106, 119], ["torch.cat", "grads.append", "param.grad.grad.view", "grads.append", "grads.append", "zeros", "param.grad.view", "param.view"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "", "def", "get_flat_grad_from", "(", "inputs", ",", "grad_grad", "=", "False", ")", ":", "\n", "    ", "grads", "=", "[", "]", "\n", "for", "param", "in", "inputs", ":", "\n", "        ", "if", "grad_grad", ":", "\n", "            ", "grads", ".", "append", "(", "param", ".", "grad", ".", "grad", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "param", ".", "grad", "is", "None", ":", "\n", "                ", "grads", ".", "append", "(", "zeros", "(", "param", ".", "view", "(", "-", "1", ")", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "                ", "grads", ".", "append", "(", "param", ".", "grad", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "", "", "flat_grad", "=", "torch", ".", "cat", "(", "grads", ")", "\n", "return", "flat_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.compute_flat_grad": [[121, 146], ["set", "list", "enumerate", "torch.autograd.grad", "enumerate", "torch.cat", "params.append", "out_grads.append", "out_grads.append", "zeros", "grads[].view", "param.view"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "compute_flat_grad", "(", "output", ",", "inputs", ",", "filter_input_ids", "=", "set", "(", ")", ",", "retain_graph", "=", "False", ",", "create_graph", "=", "False", ")", ":", "\n", "    ", "if", "create_graph", ":", "\n", "        ", "retain_graph", "=", "True", "\n", "\n", "", "inputs", "=", "list", "(", "inputs", ")", "\n", "params", "=", "[", "]", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "if", "i", "not", "in", "filter_input_ids", ":", "\n", "            ", "params", ".", "append", "(", "param", ")", "\n", "\n", "", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "output", ",", "params", ",", "retain_graph", "=", "retain_graph", ",", "create_graph", "=", "create_graph", ")", "\n", "\n", "j", "=", "0", "\n", "out_grads", "=", "[", "]", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "if", "i", "in", "filter_input_ids", ":", "\n", "            ", "out_grads", ".", "append", "(", "zeros", "(", "param", ".", "view", "(", "-", "1", ")", ".", "shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "out_grads", ".", "append", "(", "grads", "[", "j", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "j", "+=", "1", "\n", "", "", "grads", "=", "torch", ".", "cat", "(", "out_grads", ")", "\n", "\n", "for", "param", "in", "params", ":", "\n", "        ", "param", ".", "grad", "=", "None", "\n", "", "return", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.set_optimizer_lr": [[148, 151], ["None"], "function", ["None"], ["", "def", "set_optimizer_lr", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.filter_state_dict": [[153, 159], ["list", "state_dict.keys"], "function", ["None"], ["", "", "def", "filter_state_dict", "(", "state_dict", ",", "filter_keys", ")", ":", "\n", "    ", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "for", "f_key", "in", "filter_keys", ":", "\n", "            ", "if", "f_key", "in", "key", ":", "\n", "                ", "del", "state_dict", "[", "key", "]", "\n", "break", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.__init__": [[8, 12], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "self", ".", "_n", "=", "0", "\n", "self", ".", "_M", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "self", ".", "_S", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.push": [[13, 23], ["numpy.asarray", "zfilter.RunningStat._M.copy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "push", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "shape", "==", "self", ".", "_M", ".", "shape", "\n", "self", ".", "_n", "+=", "1", "\n", "if", "self", ".", "_n", "==", "1", ":", "\n", "            ", "self", ".", "_M", "[", "...", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "oldM", "=", "self", ".", "_M", ".", "copy", "(", ")", "\n", "self", ".", "_M", "[", "...", "]", "=", "oldM", "+", "(", "x", "-", "oldM", ")", "/", "self", ".", "_n", "\n", "self", ".", "_S", "[", "...", "]", "=", "self", ".", "_S", "+", "(", "x", "-", "oldM", ")", "*", "(", "x", "-", "self", ".", "_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.n": [[24, 27], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.var": [[32, 35], ["numpy.square"], "methods", ["None"], ["", "@", "property", "\n", "def", "var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_S", "/", "(", "self", ".", "_n", "-", "1", ")", "if", "self", ".", "_n", ">", "1", "else", "np", ".", "square", "(", "self", ".", "_M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.std": [[36, 39], ["numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.shape": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.ZFilter.__init__": [[51, 57], ["zfilter.RunningStat"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shape", ",", "demean", "=", "True", ",", "destd", "=", "True", ",", "clip", "=", "10.0", ")", ":", "\n", "        ", "self", ".", "demean", "=", "demean", "\n", "self", ".", "destd", "=", "destd", "\n", "self", ".", "clip", "=", "clip", "\n", "\n", "self", ".", "rs", "=", "RunningStat", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.ZFilter.__call__": [[58, 68], ["zfilter.ZFilter.rs.push", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.push"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "if", "update", ":", "\n", "            ", "self", ".", "rs", ".", "push", "(", "x", ")", "\n", "", "if", "self", ".", "demean", ":", "\n", "            ", "x", "=", "x", "-", "self", ".", "rs", ".", "mean", "\n", "", "if", "self", ".", "destd", ":", "\n", "            ", "x", "=", "x", "/", "(", "self", ".", "rs", ".", "std", "+", "1e-8", ")", "\n", "", "if", "self", ".", "clip", ":", "\n", "            ", "x", "=", "np", ".", "clip", "(", "x", ",", "-", "self", ".", "clip", ",", "self", ".", "clip", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.ZFilter.set_mean_std": [[69, 73], ["None"], "methods", ["None"], ["", "def", "set_mean_std", "(", "self", ",", "mean", ",", "std", ",", "n", ")", ":", "\n", "        ", "self", ".", "rs", ".", "_n", "=", "n", "\n", "self", ".", "rs", ".", "_M", "[", "...", "]", "=", "mean", "\n", "self", ".", "rs", ".", "_S", "[", "...", "]", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "memory", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.push": [[8, 11], ["memory.Memory.memory.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "push", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Saves a tuple.\"\"\"", "\n", "self", ".", "memory", ".", "append", "(", "[", "*", "args", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.sample": [[12, 18], ["random.sample"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "return", "self", ".", "memory", "\n", "", "else", ":", "\n", "            ", "random_batch", "=", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "return", "random_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append": [[19, 21], ["None"], "methods", ["None"], ["", "", "def", "append", "(", "self", ",", "new_memory", ")", ":", "\n", "        ", "self", ".", "memory", "+=", "new_memory", ".", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.__len__": [[22, 24], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_config.Config.__init__": [[8, 51], ["yaml.safe_load", "os.makedirs", "os.makedirs", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "os.path.exists", "print", "exit", "open", "utils.recreate_dirs"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.recreate_dirs"], ["    ", "def", "__init__", "(", "self", ",", "cfg_id", ",", "create_dirs", "=", "False", ")", ":", "\n", "        ", "self", ".", "id", "=", "cfg_id", "\n", "cfg_name", "=", "'config/statereg/%s.yml'", "%", "cfg_id", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg_name", ")", ":", "\n", "            ", "print", "(", "\"Config file doesn't exist: %s\"", "%", "cfg_name", ")", "\n", "exit", "(", "0", ")", "\n", "", "cfg", "=", "yaml", ".", "safe_load", "(", "open", "(", "cfg_name", ",", "'r'", ")", ")", "\n", "\n", "# create dirs", "\n", "self", ".", "base_dir", "=", "'results'", "\n", "self", ".", "cfg_dir", "=", "'%s/statereg/%s'", "%", "(", "self", ".", "base_dir", ",", "cfg_id", ")", "\n", "self", ".", "model_dir", "=", "'%s/models'", "%", "self", ".", "cfg_dir", "\n", "self", ".", "result_dir", "=", "'%s/results'", "%", "self", ".", "cfg_dir", "\n", "self", ".", "log_dir", "=", "'%s/log'", "%", "self", ".", "cfg_dir", "\n", "self", ".", "tb_dir", "=", "'%s/tb'", "%", "self", ".", "cfg_dir", "\n", "os", ".", "makedirs", "(", "self", ".", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "result_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "create_dirs", ":", "\n", "            ", "recreate_dirs", "(", "self", ".", "log_dir", ",", "self", ".", "tb_dir", ")", "\n", "\n", "# training config", "\n", "", "self", ".", "meta_id", "=", "cfg", "[", "'meta_id'", "]", "\n", "self", ".", "seed", "=", "cfg", "[", "'seed'", "]", "\n", "self", ".", "fr_num", "=", "cfg", "[", "'fr_num'", "]", "\n", "self", ".", "v_net", "=", "cfg", ".", "get", "(", "'v_net'", ",", "'lstm'", ")", "\n", "self", ".", "v_net_param", "=", "cfg", ".", "get", "(", "'v_net_param'", ",", "None", ")", "\n", "self", ".", "v_hdim", "=", "cfg", "[", "'v_hdim'", "]", "\n", "self", ".", "mlp_dim", "=", "cfg", "[", "'mlp_dim'", "]", "\n", "self", ".", "cnn_fdim", "=", "cfg", "[", "'cnn_fdim'", "]", "\n", "self", ".", "lr", "=", "cfg", "[", "'lr'", "]", "\n", "self", ".", "num_epoch", "=", "cfg", "[", "'num_epoch'", "]", "\n", "self", ".", "iter_method", "=", "cfg", "[", "'iter_method'", "]", "\n", "self", ".", "shuffle", "=", "cfg", ".", "get", "(", "'shuffle'", ",", "False", ")", "\n", "self", ".", "num_sample", "=", "cfg", ".", "get", "(", "'num_sample'", ",", "20000", ")", "\n", "self", ".", "save_model_interval", "=", "cfg", "[", "'save_model_interval'", "]", "\n", "self", ".", "fr_margin", "=", "cfg", "[", "'fr_margin'", "]", "\n", "self", ".", "pose_only", "=", "cfg", ".", "get", "(", "'pose_only'", ",", "False", ")", "\n", "self", ".", "causal", "=", "cfg", ".", "get", "(", "'causal'", ",", "False", ")", "\n", "self", ".", "cnn_type", "=", "cfg", ".", "get", "(", "'cnn_type'", ",", "'mlp'", ")", "\n", "\n", "# misc config", "\n", "self", ".", "humanoid_model", "=", "cfg", "[", "'humanoid_model'", "]", "\n", "self", ".", "vis_model", "=", "cfg", "[", "'vis_model'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.__init__": [[15, 89], ["os.path.join", "os.path.join", "os.path.join", "yaml.safe_load", "statereg_dataset.Dataset.meta.get", "statereg_dataset.Dataset.set_msync", "numpy.sum", "open", "numpy.load", "enumerate", "statereg_dataset.Dataset.get_traj_pos", "statereg_dataset.Dataset.get_traj_vel", "numpy.hstack", "statereg_dataset.Dataset.trajs.append", "statereg_dataset.Dataset.orig_trajs.append", "numpy.vstack", "numpy.mean", "numpy.std", "statereg_dataset.Dataset.normalize_traj"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.set_msync", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.get_traj_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.get_traj_vel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.std", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.normalize_traj"], ["def", "__init__", "(", "self", ",", "meta_id", ",", "mode", ",", "fr_num", ",", "iter_method", "=", "'iter'", ",", "shuffle", "=", "False", ",", "overlap", "=", "0", ",", "num_sample", "=", "20000", ",", "args", "=", "None", ",", "\n", "mocap_folder", "=", "'.'", ")", ":", "\n", "        ", "self", ".", "meta_id", "=", "meta_id", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "fr_num", "=", "fr_num", "\n", "self", ".", "iter_method", "=", "iter_method", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "overlap", "=", "overlap", "\n", "self", ".", "num_sample", "=", "num_sample", "\n", "self", ".", "base_folder", "=", "os", ".", "path", ".", "join", "(", "mocap_folder", ",", "'datasets'", ")", "\n", "# self.of_folder = os.path.join(self.base_folder, 'pose2d')  #of: optic flow.", "\n", "# self.traj_folder = os.path.join(self.base_folder, 'traj')", "\n", "self", ".", "of_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_folder", ",", "'pose2d'", "if", "not", "args", "else", "args", ".", "of_folder", ")", "\n", "# self.traj_folder = os.path.join(self.base_folder, 'traj' if not args else args.traj_folder)", "\n", "# self.traj_dict_path = os.path.join(self.traj_folder, 'traj_dict_t0.pkl' if not args else args.traj_dict_path)", "\n", "self", ".", "traj_dict_path", "=", "os", ".", "path", ".", "join", "(", "mocap_folder", ",", "'datasets/traj_dict/traj_dict.pkl'", ")", "\n", "# meta_file = '%s/meta/%s.yml' % (self.base_folder, meta_id)", "\n", "meta_file", "=", "'datasets/meta/%s.yml'", "%", "(", "meta_id", ")", "\n", "self", ".", "meta", "=", "yaml", ".", "safe_load", "(", "open", "(", "meta_file", ",", "'r'", ")", ")", "\n", "self", ".", "no_traj", "=", "self", ".", "meta", ".", "get", "(", "'no_traj'", ",", "False", ")", "\n", "# self.msync = self.meta['video_mocap_sync']", "\n", "self", ".", "dt", "=", "1", "/", "self", ".", "meta", "[", "'capture'", "]", "[", "'fps'", "]", "\n", "# get take names", "\n", "if", "mode", "==", "'all'", ":", "\n", "            ", "self", ".", "takes", "=", "self", ".", "meta", "[", "'train'", "]", "+", "self", ".", "meta", "[", "'test'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "takes", "=", "self", ".", "meta", "[", "mode", "]", "\n", "# preload trajectories", "\n", "", "if", "self", ".", "no_traj", ":", "\n", "            ", "self", ".", "trajs", "=", "None", "\n", "self", ".", "orig_trajs", "=", "None", "\n", "self", ".", "norm_trajs", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "trajs", "=", "[", "]", "\n", "self", ".", "trajs_len", "=", "{", "}", "\n", "self", ".", "orig_trajs", "=", "[", "]", "\n", "# self.orig_2dpose = []", "\n", "traj_dict", "=", "np", ".", "load", "(", "self", ".", "traj_dict_path", ",", "allow_pickle", "=", "True", ")", "\n", "for", "i", ",", "take", "in", "enumerate", "(", "self", ".", "takes", ")", ":", "\n", "# traj_file = '%s/%s_traj.p' % (self.traj_folder, take)", "\n", "# orig_traj = np.load(traj_file, allow_pickle=True)", "\n", "                ", "orig_traj", "=", "traj_dict", "[", "take", "]", "[", "'predicted_3d_qpos'", "]", "# follow video3Dqpos.", "\n", "# orig_2dpose = traj_dict[take]['inputs_2d']", "\n", "# remove noisy hand pose", "\n", "# orig_traj[:, 32:35] = 0.0", "\n", "# orig_traj[:, 42:45] = 0.0", "\n", "traj_pos", "=", "self", ".", "get_traj_pos", "(", "orig_traj", ")", "\n", "traj_vel", "=", "self", ".", "get_traj_vel", "(", "orig_traj", ")", "\n", "traj", "=", "np", ".", "hstack", "(", "(", "traj_pos", ",", "traj_vel", ")", ")", "\n", "self", ".", "trajs", ".", "append", "(", "traj", ")", "\n", "self", ".", "orig_trajs", ".", "append", "(", "orig_traj", ")", "\n", "# self.orig_2dpose.append(orig_2dpose)", "\n", "self", ".", "trajs_len", "[", "take", "]", "=", "orig_traj", ".", "shape", "[", "0", "]", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "                ", "all_traj", "=", "np", ".", "vstack", "(", "self", ".", "trajs", ")", "\n", "self", ".", "mean", "=", "np", ".", "mean", "(", "all_traj", ",", "axis", "=", "0", ")", "\n", "self", ".", "std", "=", "np", ".", "std", "(", "all_traj", ",", "axis", "=", "0", ")", "\n", "self", ".", "norm_trajs", "=", "self", ".", "normalize_traj", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "norm_trajs", "=", "None", ",", "None", ",", "None", "\n", "", "self", ".", "traj_dim", "=", "self", ".", "trajs", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "# iterator specific", "\n", "", "self", ".", "sample_count", "=", "None", "\n", "self", ".", "take_indices", "=", "None", "\n", "self", ".", "cur_ind", "=", "None", "\n", "self", ".", "cur_tid", "=", "None", "\n", "self", ".", "cur_fr", "=", "None", "\n", "self", ".", "fr_lb", "=", "None", "\n", "self", ".", "fr_ub", "=", "None", "\n", "self", ".", "im_offset", "=", "None", "\n", "\n", "self", ".", "set_msync", "(", ")", "#.", "\n", "# get dataset len", "\n", "self", ".", "len", "=", "np", ".", "sum", "(", "[", "self", ".", "msync", "[", "x", "]", "[", "2", "]", "-", "self", ".", "msync", "[", "x", "]", "[", "1", "]", "for", "x", "in", "self", ".", "takes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.set_msync": [[91, 95], ["None"], "methods", ["None"], ["", "def", "set_msync", "(", "self", ")", ":", "\n", "        ", "self", ".", "msync", "=", "{", "}", "\n", "for", "take", "in", "self", ".", "trajs_len", ":", "\n", "            ", "self", ".", "msync", "[", "take", "]", "=", "[", "0", ",", "0", ",", "self", ".", "trajs_len", "[", "take", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.__iter__": [[96, 106], ["numpy.arange", "statereg_dataset.Dataset.__next_take", "len", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.__next_take", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iter_method", "==", "'sample'", ":", "\n", "            ", "self", ".", "sample_count", "=", "0", "\n", "", "elif", "self", ".", "iter_method", "==", "'iter'", ":", "\n", "            ", "self", ".", "cur_ind", "=", "-", "1", "\n", "self", ".", "take_indices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "takes", ")", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "take_indices", ")", "\n", "", "self", ".", "__next_take", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.__next_take": [[107, 113], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "__next_take", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_ind", "=", "self", ".", "cur_ind", "+", "1", "\n", "if", "self", ".", "cur_ind", "<", "len", "(", "self", ".", "take_indices", ")", ":", "\n", "            ", "self", ".", "cur_tid", "=", "self", ".", "take_indices", "[", "self", ".", "cur_ind", "]", "# tid: take_indices", "\n", "self", ".", "im_offset", ",", "self", ".", "fr_lb", ",", "self", ".", "fr_ub", "=", "self", ".", "msync", "[", "self", ".", "takes", "[", "self", ".", "cur_tid", "]", "]", "\n", "self", ".", "cur_fr", "=", "self", ".", "fr_lb", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.__next__": [[114, 136], ["statereg_dataset.Dataset.sample", "statereg_dataset.Dataset.load_of", "len", "statereg_dataset.Dataset.__next_take"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.load_of", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.__next_take"], ["", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iter_method", "==", "'sample'", ":", "\n", "            ", "if", "self", ".", "sample_count", ">=", "self", ".", "num_sample", ":", "\n", "                ", "raise", "StopIteration", "\n", "", "self", ".", "sample_count", "+=", "self", ".", "fr_num", "-", "self", ".", "overlap", "\n", "return", "self", ".", "sample", "(", ")", "\n", "", "elif", "self", ".", "iter_method", "==", "'iter'", ":", "\n", "            ", "if", "self", ".", "cur_ind", ">=", "len", "(", "self", ".", "takes", ")", ":", "\n", "                ", "raise", "StopIteration", "\n", "", "fr_start", "=", "self", ".", "cur_fr", "\n", "fr_end", "=", "self", ".", "cur_fr", "+", "self", ".", "fr_num", "if", "self", ".", "cur_fr", "+", "self", ".", "fr_num", "+", "30", "<", "self", ".", "fr_ub", "else", "self", ".", "fr_ub", "\n", "# print(self.cur_ind, self.cur_tid, fr_start, fr_end)", "\n", "of", "=", "self", ".", "load_of", "(", "self", ".", "cur_tid", ",", "fr_start", "+", "self", ".", "im_offset", ",", "fr_end", "+", "self", ".", "im_offset", ")", "\n", "if", "self", ".", "no_traj", ":", "\n", "                ", "norm_traj", ",", "orig_traj", "=", "None", ",", "None", "\n", "", "else", ":", "\n", "                ", "norm_traj", "=", "self", ".", "norm_trajs", "[", "self", ".", "cur_tid", "]", "[", "fr_start", ":", "fr_end", "]", "\n", "orig_traj", "=", "self", ".", "orig_trajs", "[", "self", ".", "cur_tid", "]", "[", "fr_start", ":", "fr_end", "]", "\n", "", "self", ".", "cur_fr", "=", "fr_end", "-", "self", ".", "overlap", "\n", "if", "fr_end", "==", "self", ".", "fr_ub", ":", "\n", "                ", "self", ".", "__next_take", "(", ")", "\n", "", "return", "of", ",", "norm_traj", ",", "orig_traj", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.get_traj_pos": [[137, 142], ["orig_traj[].copy", "range", "utils.de_heading"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.de_heading"], ["", "", "def", "get_traj_pos", "(", "self", ",", "orig_traj", ")", ":", "\n", "        ", "traj_pos", "=", "orig_traj", "[", ":", ",", "2", ":", "]", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "traj_pos", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "traj_pos", "[", "i", ",", "1", ":", "5", "]", "=", "de_heading", "(", "traj_pos", "[", "i", ",", "1", ":", "5", "]", ")", "\n", "", "return", "traj_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.get_traj_vel": [[143, 151], ["range", "numpy.vstack.append", "numpy.vstack", "utils.get_qvel_fd", "numpy.vstack.append", "traj_vel[].copy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_qvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "get_traj_vel", "(", "self", ",", "orig_traj", ")", ":", "\n", "        ", "traj_vel", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "orig_traj", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "            ", "vel", "=", "get_qvel_fd", "(", "orig_traj", "[", "i", ",", ":", "]", ",", "orig_traj", "[", "i", "+", "1", ",", ":", "]", ",", "self", ".", "dt", ",", "'heading'", ")", "\n", "traj_vel", ".", "append", "(", "vel", ")", "\n", "", "traj_vel", ".", "append", "(", "traj_vel", "[", "-", "1", "]", ".", "copy", "(", ")", ")", "\n", "traj_vel", "=", "np", ".", "vstack", "(", "traj_vel", ")", "\n", "return", "traj_vel", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.set_mean_std": [[152, 156], ["statereg_dataset.Dataset.normalize_traj"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.normalize_traj"], ["", "def", "set_mean_std", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", ",", "self", ".", "std", "=", "mean", ",", "std", "\n", "if", "not", "self", ".", "no_traj", ":", "\n", "            ", "self", ".", "norm_trajs", "=", "self", ".", "normalize_traj", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.normalize_traj": [[157, 167], ["norm_trajs.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "", "def", "normalize_traj", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "assert", "False", ",", "'normalize not in use'", "\n", "norm_trajs", "=", "[", "]", "\n", "for", "traj", "in", "self", ".", "trajs", ":", "\n", "            ", "norm_traj", "=", "(", "traj", "-", "self", ".", "mean", "[", "None", ",", ":", "]", ")", "/", "(", "self", ".", "std", "[", "None", ",", ":", "]", "+", "1e-8", ")", "\n", "norm_trajs", ".", "append", "(", "norm_traj", ")", "\n", "", "return", "norm_trajs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.sample": [[168, 180], ["numpy.random.randint", "numpy.random.randint", "statereg_dataset.Dataset.load_of", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.load_of", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "take_ind", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "takes", ")", ")", "\n", "im_offset", ",", "fr_lb", ",", "fr_ub", "=", "self", ".", "msync", "[", "self", ".", "takes", "[", "take_ind", "]", "]", "\n", "fr_start", "=", "np", ".", "random", ".", "randint", "(", "fr_lb", ",", "fr_ub", "-", "self", ".", "fr_num", ")", "\n", "fr_end", "=", "fr_start", "+", "self", ".", "fr_num", "\n", "of", "=", "self", ".", "load_of", "(", "take_ind", ",", "fr_start", "+", "im_offset", ",", "fr_end", "+", "im_offset", ")", "\n", "if", "self", ".", "no_traj", ":", "\n", "            ", "norm_traj", ",", "orig_traj", "=", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "norm_traj", "=", "self", ".", "norm_trajs", "[", "take_ind", "]", "[", "fr_start", ":", "fr_end", "]", "\n", "orig_traj", "=", "self", ".", "orig_trajs", "[", "take_ind", "]", "[", "fr_start", ":", "fr_end", "]", "\n", "", "return", "of", ",", "norm_traj", ",", "orig_traj", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.statereg_dataset.Dataset.load_of": [[181, 194], ["numpy.load"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["", "def", "load_of", "(", "self", ",", "take_ind", ",", "start", ",", "end", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "take_folder", "=", "'%s/%s'", "%", "(", "self", ".", "of_folder", ",", "self", ".", "takes", "[", "take_ind", "]", ")", "\n", "# of = []", "\n", "# for i in range(start, end):", "\n", "#     of_file = '%s/%05d.npy' % (take_folder, i)", "\n", "#     of_i = np.load(of_file, allow_pickle=True)", "\n", "#     of.append(of_i)", "\n", "# of = np.stack(of)", "\n", "of_file", "=", "'%s/pose2d.npy'", "%", "(", "take_folder", ")", "\n", "of_npy", "=", "np", ".", "load", "(", "of_file", ",", "allow_pickle", "=", "True", ")", "\n", "return", "of_npy", "[", "start", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.normalize_traj": [[5, 16], ["zip", "qpos.copy", "qvel.copy", "transform_vec", "de_heading", "new_qpos_traj.append", "new_qvel_traj.append", "numpy.vstack", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.transform_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.de_heading", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["from", "os", "import", "listdir", "\n", "from", "PIL", "import", "Image", "\n", "from", "OpenGL", "import", "GL", "\n", "from", "gym", ".", "envs", ".", "mujoco", ".", "mujoco_env", "import", "MujocoEnv", "\n", "from", "utils", ".", "math", "import", "*", "\n", "import", "glfw", "\n", "import", "cv2", "\n", "import", "time", "\n", "\n", "\n", "def", "assets_dir", "(", ")", ":", "\n", "    ", "return", "path", ".", "abspath", "(", "path", ".", "join", "(", "path", ".", "dirname", "(", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'../assets'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.sync_traj": [[18, 33], ["quaternion_multiply", "numpy.concatenate", "zip", "get_heading_q", "quaternion_inverse", "qpos.copy", "qvel.copy", "quaternion_multiply", "quat_mul_vec", "new_qpos_traj.append", "new_qvel_traj.append", "numpy.vstack", "numpy.vstack", "get_heading_q", "quat_mul_vec"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading_q", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_inverse", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading_q", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec"], ["\n", "", "def", "out_dir", "(", ")", ":", "\n", "    ", "return", "path", ".", "abspath", "(", "path", ".", "join", "(", "path", ".", "dirname", "(", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'../out'", ")", ")", "\n", "\n", "\n", "", "def", "log_dir", "(", ")", ":", "\n", "    ", "return", "path", ".", "abspath", "(", "path", ".", "join", "(", "path", ".", "dirname", "(", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'../logs'", ")", ")", "\n", "\n", "\n", "", "def", "recreate_dirs", "(", "*", "dirs", ")", ":", "\n", "    ", "for", "d", "in", "dirs", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "            ", "print", "(", "'warning: remove folder {}'", ".", "format", "(", "d", ")", ")", "\n", "shutil", ".", "rmtree", "(", "d", ")", "\n", "", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.remove_noisy_hands": [[35, 41], ["results.values", "traj.keys"], "function", ["None"], ["", "", "def", "load_img", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "I", "=", "Image", ".", "open", "(", "f", ")", "\n", "img", "=", "I", ".", "resize", "(", "(", "224", ",", "224", ")", ",", "Image", ".", "ANTIALIAS", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.set_grad": [[48, 52], ["net.parameters"], "function", ["None"], ["def", "new_round", "(", "x", ")", ":", "\n", "        ", "return", "round", "(", "x", "/", "2.", ")", "*", "2", "\n", "", "image", "=", "pyautogui", ".", "screenshot", "(", "region", "=", "(", "xpos", ",", "ypos", ",", "new_round", "(", "width", ")", ",", "new_round", "(", "height", ")", ")", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "np", ".", "array", "(", "image", ")", ",", "cv2", ".", "COLOR_RGB2BGRA", "if", "transparent", "else", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "if", "transparent", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.get_discriminator_accuracy": [[53, 68], ["prediction.cpu().detach().numpy.cpu().detach().numpy", "label.cpu().detach().numpy.cpu().detach().numpy", "numpy.abs", "numpy.where", "numpy.sum", "prediction.cpu().detach().numpy.cpu().detach", "label.cpu().detach().numpy.cpu().detach", "prediction.cpu().detach().numpy.cpu", "label.cpu().detach().numpy.cpu"], "function", ["None"], ["        ", "image", "[", "np", ".", "all", "(", "image", ">=", "[", "240", ",", "240", ",", "240", ",", "240", "]", ",", "axis", "=", "2", ")", "]", "=", "[", "255", ",", "255", ",", "255", ",", "0", "]", "\n", "", "cv2", ".", "imwrite", "(", "file_name", ",", "image", ")", "\n", "\n", "\n", "", "\"\"\"mujoco helper\"\"\"", "\n", "\n", "\n", "def", "get_body_qposaddr", "(", "model", ")", ":", "\n", "    ", "body_qposaddr", "=", "dict", "(", ")", "\n", "for", "i", ",", "body_name", "in", "enumerate", "(", "model", ".", "body_names", ")", ":", "\n", "        ", "start_joint", "=", "model", ".", "body_jntadr", "[", "i", "]", "\n", "if", "start_joint", "<", "0", ":", "\n", "            ", "continue", "\n", "", "end_joint", "=", "start_joint", "+", "model", ".", "body_jntnum", "[", "i", "]", "\n", "start_qposaddr", "=", "model", ".", "jnt_qposadr", "[", "start_joint", "]", "\n", "if", "end_joint", "<", "len", "(", "model", ".", "jnt_qposadr", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.root_2dpose": [[70, 76], ["None"], "function", ["None"], ["", "else", ":", "\n", "            ", "end_qposaddr", "=", "model", ".", "nq", "\n", "", "body_qposaddr", "[", "body_name", "]", "=", "(", "start_qposaddr", ",", "end_qposaddr", ")", "\n", "", "return", "body_qposaddr", "\n", "\n", "\n", "", "def", "align_human_state", "(", "qpos", ",", "qvel", ",", "ref_qpos", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show3DposePair": [[10, 79], ["numpy.reshape", "numpy.reshape", "numpy.array", "numpy.array", "numpy.array", "enumerate", "ax.set_xlim3d", "ax.set_ylim3d", "ax.set_zlim3d", "ax.w_xaxis.set_pane_color", "ax.w_yaxis.set_pane_color", "ax.w_xaxis.line.set_color", "ax.w_yaxis.line.set_color", "ax.w_zaxis.line.set_color", "numpy.arange", "ax.set_xlabel", "ax.set_ylabel", "ax.set_zlabel", "len", "numpy.array", "ax.plot", "range", "ax.plot", "ax.plot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "show3DposePair", "(", "realt3d", ",", "faket3d", ",", "ax", ",", "lcolor", "=", "\"#3498db\"", ",", "rcolor", "=", "\"#e74c3c\"", ",", "add_labels", "=", "True", ",", "\n", "gt", "=", "True", ",", "pred", "=", "False", ")", ":", "# blue, orange", "\n", "  ", "\"\"\"\n  Visualize a 3d skeleton pair\n\n  Args\n  channels: 96x1 vector. The pose to plot.\n  ax: matplotlib 3d axis to draw on\n  lcolor: color for left part of the body\n  rcolor: color for right part of the body\n  add_labels: whether to add coordinate labels\n  Returns\n  Nothing. Draws on ax.\n  \"\"\"", "\n", "#   assert channels.size == len(data_utils.H36M_NAMES)*3, \"channels should have 96 entries, it has %d instead\" % channels.size", "\n", "realt3d", "=", "np", ".", "reshape", "(", "realt3d", ",", "(", "16", ",", "-", "1", ")", ")", "\n", "faket3d", "=", "np", ".", "reshape", "(", "faket3d", ",", "(", "16", ",", "-", "1", ")", ")", "\n", "\n", "I", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "8", ",", "10", ",", "11", ",", "8", ",", "13", ",", "14", "]", ")", "# start points", "\n", "J", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", "]", ")", "# end points", "\n", "LR", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "\n", "for", "idx", ",", "vals", "in", "enumerate", "(", "[", "realt3d", ",", "faket3d", "]", ")", ":", "\n", "# Make connection matrix", "\n", "    ", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "I", ")", ")", ":", "\n", "      ", "x", ",", "y", ",", "z", "=", "[", "np", ".", "array", "(", "[", "vals", "[", "I", "[", "i", "]", ",", "j", "]", ",", "vals", "[", "J", "[", "i", "]", ",", "j", "]", "]", ")", "for", "j", "in", "range", "(", "3", ")", "]", "\n", "if", "idx", "==", "0", ":", "\n", "        ", "ax", ".", "plot", "(", "x", ",", "z", ",", "-", "y", ",", "lw", "=", "2", ",", "c", "=", "'k'", ")", "\n", "#        ax.plot(x,y, z,  lw=2, c='k')", "\n", "\n", "", "elif", "idx", "==", "1", ":", "\n", "        ", "ax", ".", "plot", "(", "x", ",", "z", ",", "-", "y", ",", "lw", "=", "2", ",", "c", "=", "'r'", ")", "\n", "#        ax.plot(x,y, z,  lw=2, c='r')", "\n", "\n", "", "else", ":", "\n", "#        ax.plot(x,z, -y,  lw=2, c=lcolor if LR[i] else rcolor)", "\n", "        ", "ax", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "lw", "=", "2", ",", "c", "=", "lcolor", "if", "LR", "[", "i", "]", "else", "rcolor", ")", "\n", "\n", "", "", "", "RADIUS", "=", "1", "# space around the subject", "\n", "xroot", ",", "yroot", ",", "zroot", "=", "vals", "[", "0", ",", "0", "]", ",", "vals", "[", "0", ",", "1", "]", ",", "vals", "[", "0", ",", "2", "]", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "RADIUS", "+", "xroot", ",", "RADIUS", "+", "xroot", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "RADIUS", "+", "zroot", ",", "RADIUS", "+", "zroot", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "-", "RADIUS", "-", "yroot", ",", "RADIUS", "-", "yroot", "]", ")", "\n", "\n", "if", "add_labels", ":", "\n", "    ", "ax", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"z\"", ")", "\n", "ax", ".", "set_zlabel", "(", "\"-y\"", ")", "\n", "\n", "# Get rid of the ticks and tick labels", "\n", "#  ax.set_xticks([])", "\n", "#  ax.set_yticks([])", "\n", "#  ax.set_zticks([])", "\n", "#", "\n", "#  ax.get_xaxis().set_ticklabels([])", "\n", "#  ax.get_yaxis().set_ticklabels([])", "\n", "#  ax.set_zticklabels([])", "\n", "#     ax.set_aspect('equal')", "\n", "\n", "# Get rid of the panes (actually, make them white)", "\n", "", "white", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", "\n", "ax", ".", "w_xaxis", ".", "set_pane_color", "(", "white", ")", "\n", "ax", ".", "w_yaxis", ".", "set_pane_color", "(", "white", ")", "\n", "# Keep z pane", "\n", "\n", "# Get rid of the lines in 3d", "\n", "ax", ".", "w_xaxis", ".", "line", ".", "set_color", "(", "white", ")", "\n", "ax", ".", "w_yaxis", ".", "line", ".", "set_color", "(", "white", ")", "\n", "ax", ".", "w_zaxis", ".", "line", ".", "set_color", "(", "white", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show3Dpose": [[81, 150], ["numpy.reshape", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "ax.set_xlim3d", "ax.set_ylim3d", "ax.set_zlim3d", "ax.w_xaxis.set_pane_color", "ax.w_yaxis.set_pane_color", "ax.w_xaxis.line.set_color", "ax.w_yaxis.line.set_color", "ax.w_zaxis.line.set_color", "len", "ax.set_xlabel", "ax.set_ylabel", "ax.set_zlabel", "numpy.array", "ax.plot", "range", "ax.plot", "ax.plot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "show3Dpose", "(", "channels", ",", "ax", ",", "lcolor", "=", "\"#3498db\"", ",", "rcolor", "=", "\"#e74c3c\"", ",", "add_labels", "=", "True", ",", "\n", "gt", "=", "False", ",", "pred", "=", "False", ")", ":", "# blue, orange", "\n", "    ", "\"\"\"\n    Visualize a 3d skeleton\n\n    Args\n    channels: 96x1 vector. The pose to plot.\n    ax: matplotlib 3d axis to draw on\n    lcolor: color for left part of the body\n    rcolor: color for right part of the body\n    add_labels: whether to add coordinate labels\n    Returns\n    Nothing. Draws on ax.\n    \"\"\"", "\n", "\n", "#   assert channels.size == len(data_utils.H36M_NAMES)*3, \"channels should have 96 entries, it has %d instead\" % channels.size", "\n", "vals", "=", "np", ".", "reshape", "(", "channels", ",", "(", "16", ",", "-", "1", ")", ")", "\n", "\n", "I", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "8", ",", "10", ",", "11", ",", "8", ",", "13", ",", "14", "]", ")", "# start points", "\n", "J", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", "]", ")", "# end points", "\n", "LR", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "\n", "# Make connection matrix", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "I", ")", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "[", "np", ".", "array", "(", "[", "vals", "[", "I", "[", "i", "]", ",", "j", "]", ",", "vals", "[", "J", "[", "i", "]", ",", "j", "]", "]", ")", "for", "j", "in", "range", "(", "3", ")", "]", "\n", "if", "gt", ":", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "z", ",", "-", "y", ",", "lw", "=", "2", ",", "c", "=", "'k'", ")", "\n", "#        ax.plot(x,y, z,  lw=2, c='k')", "\n", "\n", "", "elif", "pred", ":", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "z", ",", "-", "y", ",", "lw", "=", "2", ",", "c", "=", "'r'", ")", "\n", "#        ax.plot(x,y, z,  lw=2, c='r')", "\n", "\n", "", "else", ":", "\n", "#        ax.plot(x,z, -y,  lw=2, c=lcolor if LR[i] else rcolor)", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "z", ",", "-", "y", ",", "lw", "=", "2", ",", "c", "=", "lcolor", "if", "LR", "[", "i", "]", "else", "rcolor", ")", "\n", "\n", "", "", "RADIUS", "=", "1", "# space around the subject", "\n", "xroot", ",", "yroot", ",", "zroot", "=", "vals", "[", "0", ",", "0", "]", ",", "vals", "[", "0", ",", "1", "]", ",", "vals", "[", "0", ",", "2", "]", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "RADIUS", "+", "xroot", ",", "RADIUS", "+", "xroot", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "RADIUS", "+", "zroot", ",", "RADIUS", "+", "zroot", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "-", "RADIUS", "-", "yroot", ",", "RADIUS", "-", "yroot", "]", ")", "\n", "\n", "\n", "if", "add_labels", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"z\"", ")", "\n", "ax", ".", "set_zlabel", "(", "\"-y\"", ")", "\n", "\n", "# Get rid of the ticks and tick labels", "\n", "#  ax.set_xticks([])", "\n", "#  ax.set_yticks([])", "\n", "#  ax.set_zticks([])", "\n", "#", "\n", "#  ax.get_xaxis().set_ticklabels([])", "\n", "#  ax.get_yaxis().set_ticklabels([])", "\n", "#  ax.set_zticklabels([])", "\n", "#     ax.set_aspect('equal')", "\n", "\n", "# Get rid of the panes (actually, make them white)", "\n", "", "white", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", "\n", "ax", ".", "w_xaxis", ".", "set_pane_color", "(", "white", ")", "\n", "ax", ".", "w_yaxis", ".", "set_pane_color", "(", "white", ")", "\n", "# Keep z pane", "\n", "\n", "# Get rid of the lines in 3d", "\n", "ax", ".", "w_xaxis", ".", "line", ".", "set_color", "(", "white", ")", "\n", "ax", ".", "w_yaxis", ".", "line", ".", "set_color", "(", "white", ")", "\n", "ax", ".", "w_zaxis", ".", "line", ".", "set_color", "(", "white", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show2Dpose": [[151, 198], ["numpy.reshape", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "ax.set_xlim", "ax.set_ylim", "ax.set_aspect", "len", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "show2Dpose", "(", "channels", ",", "ax", ",", "lcolor", "=", "\"#3498db\"", ",", "rcolor", "=", "\"#e74c3c\"", ",", "add_labels", "=", "True", ")", ":", "\n", "  ", "\"\"\"\n  Visualize a 2d skeleton\n\n  Args\n  channels: 64x1 vector. The pose to plot.\n  ax: matplotlib axis to draw on\n  lcolor: color for left part of the body\n  rcolor: color for right part of the body\n  add_labels: whether to add coordinate labels\n  Returns\n  Nothing. Draws on ax.\n  \"\"\"", "\n", "vals", "=", "np", ".", "reshape", "(", "channels", ",", "(", "-", "1", ",", "2", ")", ")", "\n", "# plt.plot(vals[:,0], vals[:,1], 'ro')", "\n", "I", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "8", ",", "10", ",", "11", ",", "8", ",", "13", ",", "14", "]", ")", "# start points", "\n", "J", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", "]", ")", "# end points", "\n", "LR", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "\n", "# Make connection matrix", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "I", ")", ")", ":", "\n", "    ", "x", ",", "y", "=", "[", "np", ".", "array", "(", "[", "vals", "[", "I", "[", "i", "]", ",", "j", "]", ",", "vals", "[", "J", "[", "i", "]", ",", "j", "]", "]", ")", "for", "j", "in", "range", "(", "2", ")", "]", "\n", "#         print('x',x)", "\n", "#         print(y)", "\n", "ax", ".", "plot", "(", "x", ",", "-", "y", ",", "lw", "=", "2", ",", "c", "=", "lcolor", "if", "LR", "[", "i", "]", "else", "rcolor", ")", "\n", "\n", "# Get rid of the ticks", "\n", "#  ax.set_xticks([])", "\n", "#  ax.set_yticks([])", "\n", "#", "\n", "#  # Get rid of tick labels", "\n", "#  ax.get_xaxis().set_ticklabels([])", "\n", "#  ax.get_yaxis().set_ticklabels([])", "\n", "\n", "", "RADIUS", "=", "1", "# space around the subject", "\n", "xroot", ",", "yroot", "=", "vals", "[", "0", ",", "0", "]", ",", "vals", "[", "0", ",", "1", "]", "\n", "#     ax.set_xlim([-RADIUS+xroot, RADIUS+xroot])", "\n", "#     ax.set_ylim([-RADIUS+yroot, RADIUS+yroot])", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "if", "add_labels", ":", "\n", "    ", "ax", ".", "set_xlabel", "(", "\"x\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"-y\"", ")", "\n", "\n", "", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.wrap_show3d_pose": [[203, 209], ["matplotlib.figure", "mpl_toolkits.mplot3d.Axes3D", "poseaug_viz.show3Dpose", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show3Dpose"], ["", "def", "wrap_show3d_pose", "(", "vals3d", ")", ":", "\n", "    ", "fig3d", "=", "plt", ".", "figure", "(", ")", "\n", "# ax = fig.add_subplot(1, 1, 1, projection='3d')", "\n", "ax3d", "=", "Axes3D", "(", "fig3d", ")", "\n", "show3Dpose", "(", "vals3d", ",", "ax3d", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.wrap_show2d_pose": [[211, 215], ["matplotlib.axes", "poseaug_viz.show2Dpose", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show2Dpose"], ["", "def", "wrap_show2d_pose", "(", "vals2d", ")", ":", "\n", "    ", "ax2d", "=", "plt", ".", "axes", "(", ")", "\n", "show2Dpose", "(", "vals2d", ",", "ax2d", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.plot_poseaug": [[228, 248], ["numpy.random.randint", "poseaug_viz._plot_poseaug", "inputs_3d.cpu().detach().numpy", "inputs_2d.cpu().detach().numpy", "outputs_3d_ba.cpu().detach().numpy", "outputs_2d_ba.cpu().detach().numpy", "h36m_cam3d_sample_0.cpu().detach().numpy", "h36m_cam2d_sample_0.cpu().detach().numpy", "h36m_cam3d_sample_random.cpu().detach().numpy", "e_2dpose.cpu().detach().numpy", "numpy.random.randint", "numpy.random.randint", "inputs_3d.cpu().detach", "inputs_2d.cpu().detach", "outputs_3d_ba.cpu().detach", "outputs_2d_ba.cpu().detach", "h36m_cam3d_sample_0.cpu().detach", "h36m_cam2d_sample_0.cpu().detach", "h36m_cam3d_sample_random.cpu().detach", "e_2dpose.cpu().detach", "inputs_3d.cpu", "inputs_2d.cpu", "outputs_3d_ba.cpu", "outputs_2d_ba.cpu", "h36m_cam3d_sample_0.cpu", "h36m_cam2d_sample_0.cpu", "h36m_cam3d_sample_random.cpu", "e_2dpose.cpu"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz._plot_poseaug"], ["def", "plot_poseaug", "(", "Gcam_rlt", ",", "e_2dpose", ",", "iter", ",", "log_dir", ")", ":", "\n", "    ", "num", "=", "Gcam_rlt", "[", "'pose3D_camed'", "]", ".", "shape", "[", "0", "]", "\n", "idx1", "=", "np", ".", "random", ".", "randint", "(", "num", ")", "\n", "inputs_3d", "=", "Gcam_rlt", "[", "'pose3D_camed'", "]", "[", "0", "]", "\n", "outputs_3d_ba", "=", "Gcam_rlt", "[", "'pose3D_camed'", "]", "[", "idx1", "]", "\n", "h36m_cam3d_sample_0", "=", "h36m_cam3d_sample", "[", "0", ",", "0", "]", "\n", "h36m_cam3d_sample_random", "=", "h36m_cam3d_sample", "[", "np", ".", "random", ".", "randint", "(", "5000", ")", ",", "np", ".", "random", ".", "randint", "(", "32", ")", "]", "\n", "\n", "inputs_2d", "=", "Gcam_rlt", "[", "'pose2D_camed'", "]", "[", "0", "]", "\n", "outputs_2d_ba", "=", "Gcam_rlt", "[", "'pose2D_camed'", "]", "[", "idx1", "]", "\n", "h36m_cam2d_sample_0", "=", "h36m_cam2d_sample", "[", "0", ",", "0", "]", "\n", "e_2dpose", "=", "e_2dpose", "[", "0", "]", "\n", "\n", "# plot the augmented pose from origin -> ba -> bl -> rt", "\n", "_plot_poseaug", "(", "\n", "inputs_3d", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "inputs_2d", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "outputs_3d_ba", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "outputs_2d_ba", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "h36m_cam3d_sample_0", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "h36m_cam2d_sample_0", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "h36m_cam3d_sample_random", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "e_2dpose", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "\n", "iter", ",", "log_dir", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz._plot_poseaug": [[252, 306], ["matplotlib.figure", "plt.figure.add_subplot", "fig3d.add_subplot.set_title", "poseaug_viz.show3Dpose", "plt.figure.add_subplot", "fig3d.add_subplot.set_title", "poseaug_viz.show2Dpose", "plt.figure.add_subplot", "fig3d.add_subplot.set_title", "poseaug_viz.show3Dpose", "plt.figure.add_subplot", "fig3d.add_subplot.set_title", "poseaug_viz.show2Dpose", "plt.figure.add_subplot", "fig3d.add_subplot.set_title", "poseaug_viz.show3Dpose", "plt.figure.add_subplot", "fig3d.add_subplot.set_title", "poseaug_viz.show2Dpose", "plt.figure.add_subplot", "fig3d.add_subplot.set_title", "poseaug_viz.show3Dpose", "plt.figure.add_subplot", "fig3d.add_subplot.set_title", "poseaug_viz.show2Dpose", "os.makedirs", "os.makedirs", "matplotlib.savefig", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show3Dpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show2Dpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show3Dpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show2Dpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show3Dpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show2Dpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show3Dpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.poseaug_viz.show2Dpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close"], ["", "def", "_plot_poseaug", "(", "\n", "tmp_inputs_3d", ",", "tmp_inputs_2d", ",", "\n", "tmp_outputs_3d_ba", ",", "tmp_outputs_2d_ba", ",", "\n", "tmp_h36m_cam3d_sample_0", ",", "tmp_h36m_cam2d_sample_0", ",", "\n", "tmp_h36m_cam3d_sample_random", ",", "tmp_e_2dpose", ",", "\n", "iter", ",", "log_dir", "\n", ")", ":", "\n", "# plot all the rlt", "\n", "    ", "fig3d", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "8", ")", ")", "\n", "\n", "# input 3d", "\n", "ax3din", "=", "fig3d", ".", "add_subplot", "(", "2", ",", "4", ",", "1", ",", "projection", "=", "'3d'", ")", "\n", "ax3din", ".", "set_title", "(", "'input 3D'", ")", "\n", "show3Dpose", "(", "tmp_inputs_3d", ",", "ax3din", ",", "gt", "=", "False", ")", "\n", "\n", "# show source 2d", "\n", "ax2din", "=", "fig3d", ".", "add_subplot", "(", "2", ",", "4", ",", "5", ")", "\n", "ax2din", ".", "set_title", "(", "'input 2d'", ")", "\n", "show2Dpose", "(", "tmp_inputs_2d", ",", "ax2din", ")", "\n", "\n", "# input 3d to modify 3d", "\n", "ax3dba", "=", "fig3d", ".", "add_subplot", "(", "2", ",", "4", ",", "2", ",", "projection", "=", "'3d'", ")", "\n", "ax3dba", ".", "set_title", "(", "'input/ba 3d'", ")", "\n", "show3Dpose", "(", "tmp_outputs_3d_ba", ",", "ax3dba", ")", "\n", "\n", "# show source 2d", "\n", "ax2dba", "=", "fig3d", ".", "add_subplot", "(", "2", ",", "4", ",", "6", ")", "\n", "ax2dba", ".", "set_title", "(", "'ba 2d'", ")", "\n", "show2Dpose", "(", "tmp_outputs_2d_ba", ",", "ax2dba", ")", "\n", "\n", "# input 3d to modify 3d", "\n", "ax3dbl", "=", "fig3d", ".", "add_subplot", "(", "2", ",", "4", ",", "3", ",", "projection", "=", "'3d'", ")", "\n", "ax3dbl", ".", "set_title", "(", "'tmp_h36m_cam3d_sample_0'", ")", "\n", "show3Dpose", "(", "tmp_h36m_cam3d_sample_0", ",", "ax3dbl", ")", "\n", "\n", "# show source 2d", "\n", "ax2dbl", "=", "fig3d", ".", "add_subplot", "(", "2", ",", "4", ",", "7", ")", "\n", "ax2dbl", ".", "set_title", "(", "'tmp_h36m_cam2d_sample_0'", ")", "\n", "show2Dpose", "(", "tmp_h36m_cam2d_sample_0", ",", "ax2dbl", ")", "\n", "\n", "# modify 3d to rotated 3d", "\n", "ax3drt", "=", "fig3d", ".", "add_subplot", "(", "2", ",", "4", ",", "4", ",", "projection", "=", "'3d'", ")", "\n", "ax3drt", ".", "set_title", "(", "'tmp_h36m_cam3d_sample_random'", ")", "\n", "show3Dpose", "(", "tmp_h36m_cam3d_sample_random", ",", "ax3drt", ",", "gt", "=", "False", ")", "\n", "\n", "# rt 3d to 2d", "\n", "ax2d", "=", "fig3d", ".", "add_subplot", "(", "2", ",", "4", ",", "8", ")", "\n", "ax2d", ".", "set_title", "(", "'tmp_e_2dpose'", ")", "\n", "show2Dpose", "(", "tmp_e_2dpose", ",", "ax2d", ")", "\n", "\n", "os", ".", "makedirs", "(", "'{}/tmp_viz'", ".", "format", "(", "log_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "image_name", "=", "'{}/tmp_viz/iter_{:0>4d}.png'", ".", "format", "(", "log_dir", ",", "iter", ")", "\n", "plt", ".", "savefig", "(", "image_name", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.metrics.get_joint_angles": [[5, 14], ["np.vstack", "np.hstack", "np.array", "np.vstack.append", "utils.transformation.euler_from_quaternion"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.euler_from_quaternion"], ["def", "get_joint_angles", "(", "poses", ")", ":", "\n", "    ", "root_angs", "=", "[", "]", "\n", "for", "pose", "in", "poses", ":", "\n", "        ", "root_euler", "=", "np", ".", "array", "(", "euler_from_quaternion", "(", "pose", "[", "3", ":", "7", "]", ")", ")", "\n", "root_euler", "[", "2", "]", "=", "0.0", "\n", "root_angs", ".", "append", "(", "root_euler", ")", "\n", "", "root_angs", "=", "np", ".", "vstack", "(", "root_angs", ")", "\n", "angles", "=", "np", ".", "hstack", "(", "(", "root_angs", ",", "poses", "[", ":", ",", "7", ":", "]", ")", ")", "\n", "return", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.metrics.get_joint_vels": [[16, 23], ["range", "np.vstack", "get_qvel_fd", "np.vstack.append"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_qvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "get_joint_vels", "(", "poses", ",", "dt", ")", ":", "\n", "    ", "vels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "poses", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "        ", "v", "=", "get_qvel_fd", "(", "poses", "[", "i", "]", ",", "poses", "[", "i", "+", "1", "]", ",", "dt", ",", "'heading'", ")", "\n", "vels", ".", "append", "(", "v", ")", "\n", "", "vels", "=", "np", ".", "vstack", "(", "vels", ")", "\n", "return", "vels", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.metrics.get_joint_accels": [[25, 29], ["np.vstack", "np.diff"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff"], ["", "def", "get_joint_accels", "(", "vels", ",", "dt", ")", ":", "\n", "    ", "accels", "=", "np", ".", "diff", "(", "vels", ",", "axis", "=", "0", ")", "/", "dt", "\n", "accels", "=", "np", ".", "vstack", "(", "accels", ")", "\n", "return", "accels", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.metrics.get_mean_dist": [[31, 33], ["np.linalg.norm().mean", "np.linalg.norm"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "get_mean_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "norm", "(", "x", "-", "y", ",", "axis", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.metrics.get_mean_abs": [[35, 37], ["np.abs().mean", "np.abs"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "get_mean_abs", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "abs", "(", "x", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.posemimic_config.Config.__init__": [[9, 151], ["os.path.join", "os.path.join", "yaml.safe_load", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "numpy.array", "numpy.array", "numpy.pad", "numpy.array", "numpy.pad", "numpy.array", "numpy.pad", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load", "utils.recreate_dirs", "open", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "yaml.safe_load.get", "zip", "numpy.deg2rad", "yaml.safe_load.get", "yaml.safe_load.get", "zip", "os.path.exists", "print", "exit", "open", "os.getcwd", "os.getcwd", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.recreate_dirs"], ["    ", "def", "__init__", "(", "self", ",", "cfg_id", "=", "None", ",", "create_dirs", "=", "False", ",", "cfg_dict", "=", "None", ",", "mocap_folder", "=", "'.'", ")", ":", "\n", "        ", "self", ".", "id", "=", "cfg_id", "\n", "if", "cfg_dict", "is", "not", "None", ":", "\n", "            ", "cfg", "=", "cfg_dict", "\n", "", "else", ":", "\n", "            ", "cfg_name", "=", "'config/posemimic/%s.yml'", "%", "cfg_id", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg_name", ")", ":", "\n", "                ", "print", "(", "\"Config file doesn't exist: %s\"", "%", "cfg_name", ")", "\n", "exit", "(", "0", ")", "\n", "", "cfg", "=", "yaml", ".", "safe_load", "(", "open", "(", "cfg_name", ",", "'r'", ")", ")", "\n", "\n", "# define workspace", "\n", "", "base_dir", "=", "os", ".", "path", ".", "join", "(", "mocap_folder", ",", "'results'", ")", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "mocap_folder", ",", "'datasets'", ")", "\n", "\n", "# create dirs", "\n", "self", ".", "base_dir", "=", "base_dir", "if", "base_dir", "is", "not", "None", "else", "'results'", "\n", "self", ".", "cfg_dir", "=", "'%s/posemimic/%s'", "%", "(", "self", ".", "base_dir", ",", "cfg_id", ")", "\n", "self", ".", "model_dir", "=", "'%s/models'", "%", "self", ".", "cfg_dir", "\n", "self", ".", "result_dir", "=", "'%s/results'", "%", "self", ".", "cfg_dir", "\n", "self", ".", "video_dir", "=", "'%s/video'", "%", "self", ".", "cfg_dir", "\n", "self", ".", "log_dir", "=", "'%s/log'", "%", "self", ".", "cfg_dir", "\n", "self", ".", "tb_dir", "=", "'%s/tb'", "%", "self", ".", "cfg_dir", "\n", "if", "create_dirs", ":", "\n", "            ", "recreate_dirs", "(", "self", ".", "model_dir", ",", "self", ".", "result_dir", ",", "self", ".", "video_dir", ",", "self", ".", "log_dir", ",", "self", ".", "tb_dir", ")", "\n", "\n", "# data", "\n", "", "self", ".", "meta_id", "=", "cfg", "[", "'meta_id'", "]", "\n", "# self.data_dir = 'datasets'", "\n", "self", ".", "data_dir", "=", "data_dir", "if", "data_dir", "is", "not", "None", "else", "'datasets'", "\n", "# self.meta = yaml.safe_load(open('%s/meta/%s.yml' % (self.data_dir, self.meta_id), 'r'))", "\n", "self", ".", "meta", "=", "yaml", ".", "safe_load", "(", "open", "(", "'datasets/meta/%s.yml'", "%", "(", "self", ".", "meta_id", ")", ",", "'r'", ")", ")", "\n", "self", ".", "takes", "=", "{", "x", ":", "self", ".", "meta", "[", "x", "]", "for", "x", "in", "[", "'train'", ",", "'test'", "]", "}", "\n", "# self.expert_feat_file = '%s/features/expert_%s.p' % (self.data_dir, cfg['expert_feat']) if 'expert_feat' in cfg else None", "\n", "self", ".", "expert_feat_file", "=", "'%s/traj_expert/traj_expert.pkl'", "%", "self", ".", "data_dir", "\n", "# self.cnn_feat_file = '%s/features/cnn_feat_%s.p' % (self.data_dir, cfg['cnn_feat']) if 'cnn_feat' in cfg else None", "\n", "# self.cnn_feat_file = None  # \u6682\u65f6\u4e0d\u7528\u4e86.", "\n", "self", ".", "cnn_feat_key", "=", "cfg", ".", "get", "(", "'cnn_feat_key'", ",", "None", ")", "\n", "self", ".", "fr_margin", "=", "cfg", ".", "get", "(", "'fr_margin'", ",", "10", ")", "\n", "\n", "# state net", "\n", "self", ".", "state_net_cfg", "=", "cfg", ".", "get", "(", "'state_net_cfg'", ",", "None", ")", "\n", "self", ".", "state_net_iter", "=", "cfg", ".", "get", "(", "'state_net_iter'", ",", "None", ")", "\n", "if", "self", ".", "state_net_cfg", "is", "not", "None", ":", "\n", "            ", "self", ".", "state_net_model", "=", "'%s/statereg/%s/models/iter_%04d_inf.p'", "%", "(", "self", ".", "base_dir", ",", "self", ".", "state_net_cfg", ",", "self", ".", "state_net_iter", ")", "\n", "\n", "# training config", "\n", "", "self", ".", "gamma", "=", "cfg", ".", "get", "(", "'gamma'", ",", "0.95", ")", "\n", "self", ".", "tau", "=", "cfg", ".", "get", "(", "'tau'", ",", "0.95", ")", "\n", "self", ".", "causal", "=", "cfg", ".", "get", "(", "'causal'", ",", "False", ")", "\n", "self", ".", "policy_htype", "=", "cfg", ".", "get", "(", "'policy_htype'", ",", "'relu'", ")", "\n", "self", ".", "policy_hsize", "=", "cfg", ".", "get", "(", "'policy_hsize'", ",", "[", "300", ",", "200", "]", ")", "\n", "self", ".", "policy_v_hdim", "=", "cfg", ".", "get", "(", "'policy_v_hdim'", ",", "128", ")", "\n", "self", ".", "policy_v_net", "=", "cfg", ".", "get", "(", "'policy_v_net'", ",", "'lstm'", ")", "\n", "self", ".", "policy_v_net_param", "=", "cfg", ".", "get", "(", "'policy_v_net_param'", ",", "None", ")", "\n", "self", ".", "policy_optimizer", "=", "cfg", ".", "get", "(", "'policy_optimizer'", ",", "'Adam'", ")", "\n", "self", ".", "policy_lr", "=", "cfg", ".", "get", "(", "'policy_lr'", ",", "5e-5", ")", "\n", "self", ".", "policy_momentum", "=", "cfg", ".", "get", "(", "'policy_momentum'", ",", "0.0", ")", "\n", "self", ".", "policy_weightdecay", "=", "cfg", ".", "get", "(", "'policy_weightdecay'", ",", "0.0", ")", "\n", "self", ".", "value_htype", "=", "cfg", ".", "get", "(", "'value_htype'", ",", "'relu'", ")", "\n", "self", ".", "value_hsize", "=", "cfg", ".", "get", "(", "'value_hsize'", ",", "[", "300", ",", "200", "]", ")", "\n", "self", ".", "value_v_hdim", "=", "cfg", ".", "get", "(", "'value_v_hdim'", ",", "128", ")", "\n", "self", ".", "value_v_net", "=", "cfg", ".", "get", "(", "'value_v_net'", ",", "'lstm'", ")", "\n", "self", ".", "value_v_net_param", "=", "cfg", ".", "get", "(", "'value_v_net_param'", ",", "None", ")", "\n", "self", ".", "value_optimizer", "=", "cfg", ".", "get", "(", "'value_optimizer'", ",", "'Adam'", ")", "\n", "self", ".", "value_lr", "=", "cfg", ".", "get", "(", "'value_lr'", ",", "3e-4", ")", "\n", "self", ".", "value_momentum", "=", "cfg", ".", "get", "(", "'value_momentum'", ",", "0.0", ")", "\n", "self", ".", "value_weightdecay", "=", "cfg", ".", "get", "(", "'value_weightdecay'", ",", "0.0", ")", "\n", "self", ".", "adv_clip", "=", "cfg", ".", "get", "(", "'adv_clip'", ",", "np", ".", "inf", ")", "\n", "self", ".", "clip_epsilon", "=", "cfg", ".", "get", "(", "'clip_epsilon'", ",", "0.2", ")", "\n", "self", ".", "log_std", "=", "cfg", ".", "get", "(", "'log_std'", ",", "-", "2.3", ")", "\n", "self", ".", "fix_std", "=", "cfg", ".", "get", "(", "'fix_std'", ",", "False", ")", "\n", "self", ".", "num_optim_epoch", "=", "cfg", ".", "get", "(", "'num_optim_epoch'", ",", "10", ")", "\n", "self", ".", "min_batch_size", "=", "cfg", ".", "get", "(", "'min_batch_size'", ",", "50000", ")", "\n", "self", ".", "max_iter_num", "=", "cfg", ".", "get", "(", "'max_iter_num'", ",", "1000", ")", "\n", "self", ".", "seed", "=", "cfg", ".", "get", "(", "'seed'", ",", "1", ")", "\n", "self", ".", "save_model_interval", "=", "cfg", ".", "get", "(", "'save_model_interval'", ",", "100", ")", "\n", "self", ".", "reward_id", "=", "cfg", ".", "get", "(", "'reward_id'", ",", "'quat'", ")", "\n", "self", ".", "reward_weights", "=", "cfg", ".", "get", "(", "'reward_weights'", ",", "None", ")", "\n", "self", ".", "fix_head_lb", "=", "cfg", ".", "get", "(", "'fix_head_lb'", ",", "None", ")", "\n", "self", ".", "set_fix_start_state", "=", "cfg", ".", "get", "(", "'set_fix_start_state'", ",", "None", ")", "\n", "\n", "# adaptive parameters", "\n", "self", ".", "adp_iter_cp", "=", "np", ".", "array", "(", "cfg", ".", "get", "(", "'adp_iter_cp'", ",", "[", "0", "]", ")", ")", "\n", "self", ".", "adp_noise_rate_cp", "=", "np", ".", "array", "(", "cfg", ".", "get", "(", "'adp_noise_rate_cp'", ",", "[", "1.0", "]", ")", ")", "\n", "self", ".", "adp_noise_rate_cp", "=", "np", ".", "pad", "(", "self", ".", "adp_noise_rate_cp", ",", "(", "0", ",", "self", ".", "adp_iter_cp", ".", "size", "-", "self", ".", "adp_noise_rate_cp", ".", "size", ")", ",", "'edge'", ")", "\n", "self", ".", "adp_log_std_cp", "=", "np", ".", "array", "(", "cfg", ".", "get", "(", "'adp_log_std_cp'", ",", "[", "self", ".", "log_std", "]", ")", ")", "\n", "self", ".", "adp_log_std_cp", "=", "np", ".", "pad", "(", "self", ".", "adp_log_std_cp", ",", "(", "0", ",", "self", ".", "adp_iter_cp", ".", "size", "-", "self", ".", "adp_log_std_cp", ".", "size", ")", ",", "'edge'", ")", "\n", "self", ".", "adp_policy_lr_cp", "=", "np", ".", "array", "(", "cfg", ".", "get", "(", "'adp_policy_lr_cp'", ",", "[", "self", ".", "policy_lr", "]", ")", ")", "\n", "self", ".", "adp_policy_lr_cp", "=", "np", ".", "pad", "(", "self", ".", "adp_policy_lr_cp", ",", "(", "0", ",", "self", ".", "adp_iter_cp", ".", "size", "-", "self", ".", "adp_policy_lr_cp", ".", "size", ")", ",", "'edge'", ")", "\n", "self", ".", "adp_noise_rate", "=", "None", "\n", "self", ".", "adp_log_std", "=", "None", "\n", "self", ".", "adp_policy_lr", "=", "None", "\n", "\n", "# env config", "\n", "self", ".", "mujoco_model_file", "=", "'%s/assets/mujoco_models/%s.xml'", "%", "(", "os", ".", "getcwd", "(", ")", ",", "cfg", "[", "'mujoco_model'", "]", ")", "\n", "self", ".", "vis_model_file", "=", "'%s/assets/mujoco_models/%s.xml'", "%", "(", "os", ".", "getcwd", "(", ")", ",", "cfg", "[", "'vis_model'", "]", ")", "\n", "self", ".", "env_start_first", "=", "cfg", ".", "get", "(", "'env_start_first'", ",", "False", ")", "\n", "self", ".", "env_init_noise", "=", "cfg", ".", "get", "(", "'env_init_noise'", ",", "0.0", ")", "\n", "self", ".", "env_episode_len", "=", "cfg", ".", "get", "(", "'env_episode_len'", ",", "200", ")", "\n", "self", ".", "obs_type", "=", "cfg", ".", "get", "(", "'obs_type'", ",", "'full'", ")", "\n", "self", ".", "obs_coord", "=", "cfg", ".", "get", "(", "'obs_coord'", ",", "'heading'", ")", "\n", "self", ".", "obs_heading", "=", "cfg", ".", "get", "(", "'obs_heading'", ",", "False", ")", "\n", "self", ".", "obs_vel", "=", "cfg", ".", "get", "(", "'obs_vel'", ",", "'full'", ")", "\n", "self", ".", "root_deheading", "=", "cfg", ".", "get", "(", "'root_deheading'", ",", "True", ")", "\n", "self", ".", "sync_exp_interval", "=", "cfg", ".", "get", "(", "'sync_exp_interval'", ",", "100", ")", "\n", "self", ".", "action_type", "=", "cfg", ".", "get", "(", "'action_type'", ",", "'position'", ")", "\n", "\n", "# virtual force", "\n", "self", ".", "residual_force", "=", "cfg", ".", "get", "(", "'residual_force'", ",", "False", ")", "\n", "self", ".", "residual_force_scale", "=", "cfg", ".", "get", "(", "'residual_force_scale'", ",", "200.0", ")", "\n", "# self.residual_force_mode = cfg.get('residual_force_mode', 'implicit')", "\n", "# self.residual_force_bodies = cfg.get('residual_force_bodies', 'all')", "\n", "# self.residual_force_torque = cfg.get('residual_force_torque', True)", "\n", "\n", "# meta control", "\n", "self", ".", "meta_control", "=", "cfg", ".", "get", "(", "'meta_control'", ",", "False", ")", "\n", "\n", "# control", "\n", "self", ".", "arm_pdclip", "=", "cfg", ".", "get", "(", "'arm_pdclip'", ",", "False", ")", "\n", "self", ".", "arm_reset", "=", "cfg", ".", "get", "(", "'arm_reset'", ",", "False", ")", "# ref qpos: reset arm", "\n", "self", ".", "ref_reset", "=", "cfg", ".", "get", "(", "'ref_reset'", ",", "False", ")", "# ref qpos: reset whole body", "\n", "\n", "# masked training", "\n", "self", ".", "masked_freq", "=", "cfg", ".", "get", "(", "'masked_freq'", ",", "None", ")", "# should be 1/num", "\n", "\n", "# joint param", "\n", "if", "'joint_params'", "in", "cfg", ":", "\n", "            ", "jparam", "=", "zip", "(", "*", "cfg", "[", "'joint_params'", "]", ")", "\n", "jparam", "=", "[", "np", ".", "array", "(", "p", ")", "for", "p", "in", "jparam", "]", "\n", "self", ".", "jkp", ",", "self", ".", "jkd", ",", "self", ".", "a_ref", ",", "self", ".", "a_scale", ",", "self", ".", "torque_lim", "=", "jparam", "[", "1", ":", "6", "]", "\n", "self", ".", "a_ref", "=", "np", ".", "deg2rad", "(", "self", ".", "a_ref", ")", "\n", "jkp_multiplier", "=", "cfg", ".", "get", "(", "'jkp_multiplier'", ",", "1.0", ")", "\n", "jkd_multiplier", "=", "cfg", ".", "get", "(", "'jkd_multiplier'", ",", "jkp_multiplier", ")", "\n", "self", ".", "jkp", "*=", "jkp_multiplier", "\n", "self", ".", "jkd", "*=", "jkd_multiplier", "\n", "\n", "# body param", "\n", "", "if", "'body_params'", "in", "cfg", ":", "\n", "            ", "bparam", "=", "zip", "(", "*", "cfg", "[", "'body_params'", "]", ")", "\n", "bparam", "=", "[", "np", ".", "array", "(", "p", ")", "for", "p", "in", "bparam", "]", "\n", "self", ".", "b_diffw", "=", "bparam", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.posemimic_config.Config.update_adaptive_params": [[152, 160], ["int", "numpy.where", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "def", "update_adaptive_params", "(", "self", ",", "i_iter", ")", ":", "\n", "        ", "cp", "=", "self", ".", "adp_iter_cp", "\n", "ind", "=", "np", ".", "where", "(", "i_iter", ">=", "cp", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "nind", "=", "ind", "+", "int", "(", "ind", "<", "len", "(", "cp", ")", "-", "1", ")", "\n", "t", "=", "(", "i_iter", "-", "self", ".", "adp_iter_cp", "[", "ind", "]", ")", "/", "(", "cp", "[", "nind", "]", "-", "cp", "[", "ind", "]", ")", "if", "nind", ">", "ind", "else", "0.0", "\n", "self", ".", "adp_noise_rate", "=", "self", ".", "adp_noise_rate_cp", "[", "ind", "]", "*", "(", "1", "-", "t", ")", "+", "self", ".", "adp_noise_rate_cp", "[", "nind", "]", "*", "t", "\n", "self", ".", "adp_log_std", "=", "self", ".", "adp_log_std_cp", "[", "ind", "]", "*", "(", "1", "-", "t", ")", "+", "self", ".", "adp_log_std_cp", "[", "nind", "]", "*", "t", "\n", "self", ".", "adp_policy_lr", "=", "self", ".", "adp_policy_lr_cp", "[", "ind", "]", "*", "(", "1", "-", "t", ")", "+", "self", ".", "adp_policy_lr_cp", "[", "nind", "]", "*", "t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.coco.Mscoco.__init__": [[11, 47], ["h5py.File"], "methods", ["None"], ["from", ".", ".", "pose", "import", "generateSampleBox", "\n", "from", "opt", "import", "opt", "\n", "\n", "\n", "class", "Mscoco", "(", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "sigma", "=", "1", ",", "\n", "scale_factor", "=", "(", "0.2", ",", "0.3", ")", ",", "rot_factor", "=", "40", ",", "label_type", "=", "'Gaussian'", ")", ":", "\n", "        ", "self", ".", "img_folder", "=", "'../data/coco/images'", "# root image folders", "\n", "self", ".", "is_train", "=", "train", "# training set or test set", "\n", "self", ".", "inputResH", "=", "opt", ".", "inputResH", "\n", "self", ".", "inputResW", "=", "opt", ".", "inputResW", "\n", "self", ".", "outputResH", "=", "opt", ".", "outputResH", "\n", "self", ".", "outputResW", "=", "opt", ".", "outputResW", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "rot_factor", "=", "rot_factor", "\n", "self", ".", "label_type", "=", "label_type", "\n", "\n", "self", ".", "nJoints_coco", "=", "17", "\n", "self", ".", "nJoints", "=", "17", "\n", "\n", "self", ".", "accIdxs", "=", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "\n", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ")", "\n", "self", ".", "flipRef", "=", "(", "(", "2", ",", "3", ")", ",", "(", "4", ",", "5", ")", ",", "(", "6", ",", "7", ")", ",", "\n", "(", "8", ",", "9", ")", ",", "(", "10", ",", "11", ")", ",", "(", "12", ",", "13", ")", ",", "\n", "(", "14", ",", "15", ")", ",", "(", "16", ",", "17", ")", ")", "\n", "\n", "# create train/val split", "\n", "with", "h5py", ".", "File", "(", "'../data/coco/annot_coco.h5'", ",", "'r'", ")", "as", "annot", ":", "\n", "# train", "\n", "            ", "self", ".", "imgname_coco_train", "=", "annot", "[", "'imgname'", "]", "[", ":", "-", "5887", "]", "\n", "self", ".", "bndbox_coco_train", "=", "annot", "[", "'bndbox'", "]", "[", ":", "-", "5887", "]", "\n", "self", ".", "part_coco_train", "=", "annot", "[", "'part'", "]", "[", ":", "-", "5887", "]", "\n", "# val", "\n", "self", ".", "imgname_coco_val", "=", "annot", "[", "'imgname'", "]", "[", "-", "5887", ":", "]", "\n", "self", ".", "bndbox_coco_val", "=", "annot", "[", "'bndbox'", "]", "[", "-", "5887", ":", "]", "\n", "self", ".", "part_coco_val", "=", "annot", "[", "'part'", "]", "[", "-", "5887", ":", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.coco.Mscoco.__getitem__": [[48, 80], ["functools.reduce", "os.path.join", "pose.generateSampleBox", "range", "map", "label.append", "chr", "out.clone", "label.append", "label.append", "int", "out.clone", "out.clone"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.pose.generateSampleBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["\n", "", "self", ".", "size_train", "=", "self", ".", "imgname_coco_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "size_val", "=", "self", ".", "imgname_coco_val", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sf", "=", "self", ".", "scale_factor", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "part", "=", "self", ".", "part_coco_train", "[", "index", "]", "\n", "bndbox", "=", "self", ".", "bndbox_coco_train", "[", "index", "]", "\n", "imgname", "=", "self", ".", "imgname_coco_train", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "part", "=", "self", ".", "part_coco_val", "[", "index", "]", "\n", "bndbox", "=", "self", ".", "bndbox_coco_val", "[", "index", "]", "\n", "imgname", "=", "self", ".", "imgname_coco_val", "[", "index", "]", "\n", "\n", "", "imgname", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "\n", "map", "(", "lambda", "x", ":", "chr", "(", "int", "(", "x", ")", ")", ",", "imgname", ")", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder", ",", "imgname", ")", "\n", "\n", "metaData", "=", "generateSampleBox", "(", "img_path", ",", "bndbox", ",", "part", ",", "self", ".", "nJoints", ",", "\n", "'coco'", ",", "sf", ",", "self", ",", "train", "=", "self", ".", "is_train", ")", "\n", "\n", "inp", ",", "out", ",", "setMask", "=", "metaData", "\n", "\n", "return", "inp", ",", "out", ",", "setMask", ",", "'coco'", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "self", ".", "size_train", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "size_val", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.coco.Mscoco.__len__": [[81, 86], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.fuse.Mscoco.__init__": [[11, 68], ["h5py.File", "h5py.File"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "sigma", "=", "1", ",", "\n", "scale_factor", "=", "0.25", ",", "rot_factor", "=", "30", ",", "label_type", "=", "'Gaussian'", ")", ":", "\n", "        ", "self", ".", "img_folder", "=", "'../data/'", "# root image folders", "\n", "self", ".", "is_train", "=", "train", "# training set or test set", "\n", "self", ".", "inputResH", "=", "320", "\n", "self", ".", "inputResW", "=", "256", "\n", "self", ".", "outputResH", "=", "80", "\n", "self", ".", "outputResW", "=", "64", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "scale_factor", "=", "(", "0.2", ",", "0.3", ")", "\n", "self", ".", "rot_factor", "=", "rot_factor", "\n", "self", ".", "label_type", "=", "label_type", "\n", "\n", "self", ".", "nJoints_coco", "=", "17", "\n", "self", ".", "nJoints_mpii", "=", "16", "\n", "self", ".", "nJoints", "=", "33", "\n", "\n", "self", ".", "accIdxs", "=", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "# COCO", "\n", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "\n", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "# MPII", "\n", "28", ",", "29", ",", "32", ",", "33", ")", "\n", "\n", "self", ".", "flipRef", "=", "(", "(", "2", ",", "3", ")", ",", "(", "4", ",", "5", ")", ",", "(", "6", ",", "7", ")", ",", "# COCO", "\n", "(", "8", ",", "9", ")", ",", "(", "10", ",", "11", ")", ",", "(", "12", ",", "13", ")", ",", "\n", "(", "14", ",", "15", ")", ",", "(", "16", ",", "17", ")", ",", "\n", "(", "18", ",", "23", ")", ",", "(", "19", ",", "22", ")", ",", "(", "20", ",", "21", ")", ",", "# MPII", "\n", "(", "28", ",", "33", ")", ",", "(", "29", ",", "32", ")", ",", "(", "30", ",", "31", ")", ")", "\n", "\n", "'''\n        Create train/val split\n        '''", "\n", "# COCO", "\n", "with", "h5py", ".", "File", "(", "'../data/coco/annot_clean.h5'", ",", "'r'", ")", "as", "annot", ":", "\n", "# train", "\n", "            ", "self", ".", "imgname_coco_train", "=", "annot", "[", "'imgname'", "]", "[", ":", "-", "5887", "]", "\n", "self", ".", "bndbox_coco_train", "=", "annot", "[", "'bndbox'", "]", "[", ":", "-", "5887", "]", "\n", "self", ".", "part_coco_train", "=", "annot", "[", "'part'", "]", "[", ":", "-", "5887", "]", "\n", "# val", "\n", "self", ".", "imgname_coco_val", "=", "annot", "[", "'imgname'", "]", "[", "-", "5887", ":", "]", "\n", "self", ".", "bndbox_coco_val", "=", "annot", "[", "'bndbox'", "]", "[", "-", "5887", ":", "]", "\n", "self", ".", "part_coco_val", "=", "annot", "[", "'part'", "]", "[", "-", "5887", ":", "]", "\n", "# MPII", "\n", "", "with", "h5py", ".", "File", "(", "'../data/mpii/annot_mpii.h5'", ",", "'r'", ")", "as", "annot", ":", "\n", "# train", "\n", "            ", "self", ".", "imgname_mpii_train", "=", "annot", "[", "'imgname'", "]", "[", ":", "-", "1358", "]", "\n", "self", ".", "bndbox_mpii_train", "=", "annot", "[", "'bndbox'", "]", "[", ":", "-", "1358", "]", "\n", "self", ".", "part_mpii_train", "=", "annot", "[", "'part'", "]", "[", ":", "-", "1358", "]", "\n", "# val", "\n", "self", ".", "imgname_mpii_val", "=", "annot", "[", "'imgname'", "]", "[", "-", "1358", ":", "]", "\n", "self", ".", "bndbox_mpii_val", "=", "annot", "[", "'bndbox'", "]", "[", "-", "1358", ":", "]", "\n", "self", ".", "part_mpii_val", "=", "annot", "[", "'part'", "]", "[", "-", "1358", ":", "]", "\n", "\n", "", "self", ".", "size_coco_train", "=", "self", ".", "imgname_coco_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "size_coco_val", "=", "self", ".", "imgname_coco_val", ".", "shape", "[", "0", "]", "\n", "self", ".", "size_train", "=", "self", ".", "imgname_coco_train", ".", "shape", "[", "0", "]", "+", "self", ".", "imgname_mpii_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "size_val", "=", "self", ".", "imgname_coco_val", ".", "shape", "[", "0", "]", "+", "self", ".", "imgname_mpii_val", ".", "shape", "[", "0", "]", "\n", "self", ".", "train", ",", "self", ".", "valid", "=", "[", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.fuse.Mscoco.__getitem__": [[69, 117], ["os.path.join", "pose.generateSampleBox", "range", "functools.reduce", "map", "functools.reduce", "label.append", "map", "out.clone", "label.append", "label.append", "chr", "out.clone", "out.clone", "int", "chr", "int"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.pose.generateSampleBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sf", "=", "self", ".", "scale_factor", "\n", "\n", "if", "self", ".", "is_train", "and", "index", "<", "self", ".", "size_coco_train", ":", "# COCO", "\n", "            ", "part", "=", "self", ".", "part_coco_train", "[", "index", "]", "\n", "bndbox", "=", "self", ".", "bndbox_coco_train", "[", "index", "]", "\n", "imgname", "=", "self", ".", "imgname_coco_train", "[", "index", "]", "\n", "imgset", "=", "'coco'", "\n", "", "elif", "self", ".", "is_train", ":", "# MPII", "\n", "            ", "part", "=", "self", ".", "part_mpii_train", "[", "index", "-", "self", ".", "size_coco_train", "]", "\n", "bndbox", "=", "self", ".", "bndbox_mpii_train", "[", "index", "-", "self", ".", "size_coco_train", "]", "\n", "imgname", "=", "self", ".", "imgname_mpii_train", "[", "index", "-", "self", ".", "size_coco_train", "]", "\n", "imgset", "=", "'mpii'", "\n", "", "elif", "index", "<", "self", ".", "size_coco_val", ":", "\n", "            ", "part", "=", "self", ".", "part_coco_val", "[", "index", "]", "\n", "bndbox", "=", "self", ".", "bndbox_coco_val", "[", "index", "]", "\n", "imgname", "=", "self", ".", "imgname_coco_val", "[", "index", "]", "\n", "imgset", "=", "'coco'", "\n", "", "else", ":", "\n", "            ", "part", "=", "self", ".", "part_mpii_val", "[", "index", "-", "self", ".", "size_coco_val", "]", "\n", "bndbox", "=", "self", ".", "bndbox_mpii_val", "[", "index", "-", "self", ".", "size_coco_val", "]", "\n", "imgname", "=", "self", ".", "imgname_mpii_val", "[", "index", "-", "self", ".", "size_coco_val", "]", "\n", "imgset", "=", "'mpii'", "\n", "\n", "", "if", "imgset", "==", "'coco'", ":", "\n", "            ", "imgname", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "map", "(", "lambda", "x", ":", "chr", "(", "int", "(", "x", ")", ")", ",", "imgname", ")", ")", "\n", "", "else", ":", "\n", "            ", "imgname", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "map", "(", "lambda", "x", ":", "chr", "(", "int", "(", "x", ")", ")", ",", "imgname", ")", ")", "[", ":", "13", "]", "\n", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder", ",", "imgset", ",", "'images'", ",", "imgname", ")", "\n", "\n", "metaData", "=", "generateSampleBox", "(", "img_path", ",", "bndbox", ",", "part", ",", "self", ".", "nJoints", ",", "\n", "imgset", ",", "sf", ",", "self", ",", "train", "=", "self", ".", "is_train", ")", "\n", "\n", "inp", ",", "out_bigcircle", ",", "out_smallcircle", ",", "out", ",", "setMask", "=", "metaData", "\n", "\n", "label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "opt", ".", "nStack", ")", ":", "\n", "            ", "if", "i", "<", "2", ":", "\n", "# label.append(out_bigcircle.clone())", "\n", "                ", "label", ".", "append", "(", "out", ".", "clone", "(", ")", ")", "\n", "", "elif", "i", "<", "4", ":", "\n", "# label.append(out_smallcircle.clone())", "\n", "                ", "label", ".", "append", "(", "out", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "label", ".", "append", "(", "out", ".", "clone", "(", ")", ")", "\n", "\n", "", "", "return", "inp", ",", "label", ",", "setMask", ",", "imgset", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.fuse.Mscoco.__len__": [[118, 123], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "self", ".", "size_train", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "size_val", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.mpii.Mpii.__init__": [[11, 46], ["h5py.File"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "sigma", "=", "1", ",", "\n", "scale_factor", "=", "0.25", ",", "rot_factor", "=", "30", ",", "label_type", "=", "'Gaussian'", ")", ":", "\n", "        ", "self", ".", "img_folder", "=", "'../data/mpii/images'", "# root image folders", "\n", "self", ".", "is_train", "=", "train", "# training set or test set", "\n", "self", ".", "inputResH", "=", "320", "\n", "self", ".", "inputResW", "=", "256", "\n", "self", ".", "outputResH", "=", "80", "\n", "self", ".", "outputResW", "=", "64", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "scale_factor", "=", "(", "0.2", ",", "0.3", ")", "\n", "self", ".", "rot_factor", "=", "rot_factor", "\n", "self", ".", "label_type", "=", "label_type", "\n", "\n", "self", ".", "nJoints_mpii", "=", "16", "\n", "self", ".", "nJoints", "=", "16", "\n", "\n", "self", ".", "accIdxs", "=", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "\n", "11", ",", "12", ",", "15", ",", "16", ")", "\n", "self", ".", "flipRef", "=", "(", "(", "1", ",", "6", ")", ",", "(", "2", ",", "5", ")", ",", "(", "3", ",", "4", ")", ",", "\n", "(", "11", ",", "16", ")", ",", "(", "12", ",", "15", ")", ",", "(", "13", ",", "14", ")", ")", "\n", "\n", "# create train/val split", "\n", "with", "h5py", ".", "File", "(", "'../data/mpii/annot_mpii.h5'", ",", "'r'", ")", "as", "annot", ":", "\n", "# train", "\n", "            ", "self", ".", "imgname_mpii_train", "=", "annot", "[", "'imgname'", "]", "[", ":", "-", "1358", "]", "\n", "self", ".", "bndbox_mpii_train", "=", "annot", "[", "'bndbox'", "]", "[", ":", "-", "1358", "]", "\n", "self", ".", "part_mpii_train", "=", "annot", "[", "'part'", "]", "[", ":", "-", "1358", "]", "\n", "# val", "\n", "self", ".", "imgname_mpii_val", "=", "annot", "[", "'imgname'", "]", "[", "-", "1358", ":", "]", "\n", "self", ".", "bndbox_mpii_val", "=", "annot", "[", "'bndbox'", "]", "[", "-", "1358", ":", "]", "\n", "self", ".", "part_mpii_val", "=", "annot", "[", "'part'", "]", "[", "-", "1358", ":", "]", "\n", "\n", "", "self", ".", "size_train", "=", "self", ".", "imgname_mpii_train", ".", "shape", "[", "0", "]", "\n", "self", ".", "size_val", "=", "self", ".", "imgname_mpii_val", ".", "shape", "[", "0", "]", "\n", "self", ".", "train", ",", "self", ".", "valid", "=", "[", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.mpii.Mpii.__getitem__": [[47, 79], ["os.path.join", "pose.generateSampleBox", "range", "functools.reduce", "map", "label.append", "out.clone", "label.append", "label.append", "chr", "out.clone", "out.clone", "int"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.pose.generateSampleBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sf", "=", "self", ".", "scale_factor", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "part", "=", "self", ".", "part_mpii_train", "[", "index", "]", "\n", "bndbox", "=", "self", ".", "bndbox_mpii_train", "[", "index", "]", "\n", "imgname", "=", "self", ".", "imgname_mpii_train", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "part", "=", "self", ".", "part_mpii_val", "[", "index", "]", "\n", "bndbox", "=", "self", ".", "bndbox_mpii_val", "[", "index", "]", "\n", "imgname", "=", "self", ".", "imgname_mpii_val", "[", "index", "]", "\n", "\n", "", "imgname", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "map", "(", "lambda", "x", ":", "chr", "(", "int", "(", "x", ")", ")", ",", "imgname", ")", ")", "[", ":", "13", "]", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder", ",", "imgname", ")", "\n", "\n", "metaData", "=", "generateSampleBox", "(", "img_path", ",", "bndbox", ",", "part", ",", "self", ".", "nJoints", ",", "\n", "'mpii'", ",", "sf", ",", "self", ",", "train", "=", "self", ".", "is_train", ")", "\n", "\n", "inp", ",", "out_bigcircle", ",", "out_smallcircle", ",", "out", ",", "setMask", "=", "metaData", "\n", "\n", "label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "opt", ".", "nStack", ")", ":", "\n", "            ", "if", "i", "<", "2", ":", "\n", "#label.append(out_bigcircle.clone())", "\n", "                ", "label", ".", "append", "(", "out", ".", "clone", "(", ")", ")", "\n", "", "elif", "i", "<", "4", ":", "\n", "#label.append(out_smallcircle.clone())", "\n", "                ", "label", ".", "append", "(", "out", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "label", ".", "append", "(", "out", ".", "clone", "(", ")", ")", "\n", "\n", "", "", "return", "inp", ",", "label", ",", "setMask", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.dataset.mpii.Mpii.__len__": [[80, 85], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "self", ".", "size_train", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "size_val", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.FastPose.FastPose_SE.__init__": [[22, 33], ["torch.Module.__init__", "layers.SE_Resnet.SEResnet", "torch.PixelShuffle", "layers.DUC.DUC", "layers.DUC.DUC", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FastPose_SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "preact", "=", "SEResnet", "(", "'resnet101'", ")", "\n", "\n", "self", ".", "suffle1", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "self", ".", "duc1", "=", "DUC", "(", "512", ",", "1024", ",", "upscale_factor", "=", "2", ")", "\n", "self", ".", "duc2", "=", "DUC", "(", "256", ",", "512", ",", "upscale_factor", "=", "2", ")", "\n", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "conv_dim", ",", "opt", ".", "nClasses", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.FastPose.FastPose_SE.forward": [[34, 42], ["FastPose.FastPose_SE.preact", "FastPose.FastPose_SE.suffle1", "FastPose.FastPose_SE.duc1", "FastPose.FastPose_SE.duc2", "FastPose.FastPose_SE.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "preact", "(", "x", ")", "\n", "out", "=", "self", ".", "suffle1", "(", "out", ")", "\n", "out", "=", "self", ".", "duc1", "(", "out", ")", "\n", "out", "=", "self", ".", "duc2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv_out", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.FastPose.createModel": [[9, 11], ["FastPose.FastPose"], "function", ["None"], ["from", ".", "layers", ".", "SE_Resnet", "import", "SEResnet", "\n", "\n", "# Import training option", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hg-prm.Hourglass.__init__": [[10, 44], ["torch.Module.__init__", "hg-prm.Hourglass._make_residual", "torch.Sequential", "hg-prm.Hourglass._make_residual", "torch.UpsamplingNearest2d", "torch.Sequential", "torch.MaxPool2d", "hg-prm.Hourglass._make_residual", "hg-prm.Hourglass", "hg-prm.Hourglass._make_residual"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "nFeats", ",", "nModules", ",", "inputResH", ",", "inputResW", ",", "net_type", ",", "B", ",", "C", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ResidualUp", "=", "ResidualPyramid", "if", "n", ">=", "2", "else", "Residual", "\n", "self", ".", "ResidualDown", "=", "ResidualPyramid", "if", "n", ">=", "3", "else", "Residual", "\n", "\n", "self", ".", "depth", "=", "n", "\n", "self", ".", "nModules", "=", "nModules", "\n", "self", ".", "nFeats", "=", "nFeats", "\n", "self", ".", "net_type", "=", "net_type", "\n", "self", ".", "B", "=", "B", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "inputResH", "=", "inputResH", "\n", "self", ".", "inputResW", "=", "inputResW", "\n", "\n", "self", ".", "up1", "=", "self", ".", "_make_residual", "(", "self", ".", "ResidualUp", ",", "False", ",", "inputResH", ",", "inputResW", ")", "\n", "self", ".", "low1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "self", ".", "_make_residual", "(", "self", ".", "ResidualDown", ",", "False", ",", "inputResH", "/", "2", ",", "inputResW", "/", "2", ")", "\n", ")", "\n", "if", "n", ">", "1", ":", "\n", "            ", "self", ".", "low2", "=", "Hourglass", "(", "n", "-", "1", ",", "nFeats", ",", "nModules", ",", "inputResH", "/", "2", ",", "inputResW", "/", "2", ",", "net_type", ",", "B", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "low2", "=", "self", ".", "_make_residual", "(", "self", ".", "ResidualDown", ",", "False", ",", "inputResH", "/", "2", ",", "inputResW", "/", "2", ")", "\n", "\n", "", "self", ".", "low3", "=", "self", ".", "_make_residual", "(", "self", ".", "ResidualDown", ",", "True", ",", "inputResH", "/", "2", ",", "inputResW", "/", "2", ")", "\n", "self", ".", "up2", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "\n", "self", ".", "upperBranch", "=", "self", ".", "up1", "\n", "self", ".", "lowerBranch", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "low1", ",", "\n", "self", ".", "low2", ",", "\n", "self", ".", "low3", ",", "\n", "self", ".", "up2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hg-prm.Hourglass._make_residual": [[46, 53], ["range", "torch.Sequential", "layer_list.append", "resBlock"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "_make_residual", "(", "self", ",", "resBlock", ",", "useConv", ",", "inputResH", ",", "inputResW", ")", ":", "\n", "        ", "layer_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nModules", ")", ":", "\n", "            ", "layer_list", ".", "append", "(", "resBlock", "(", "self", ".", "nFeats", ",", "self", ".", "nFeats", ",", "inputResH", ",", "inputResW", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "self", ".", "net_type", ",", "useConv", "=", "useConv", ",", "\n", "baseWidth", "=", "self", ".", "B", ",", "cardinality", "=", "self", ".", "C", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layer_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hg-prm.Hourglass.forward": [[54, 59], ["hg-prm.Hourglass.upperBranch", "hg-prm.Hourglass.lowerBranch"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Variable", ")", ":", "\n", "        ", "up1", "=", "self", ".", "upperBranch", "(", "x", ")", "\n", "up2", "=", "self", ".", "lowerBranch", "(", "x", ")", "\n", "out", "=", "up1", "+", "up2", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hg-prm.PyraNet.__init__": [[62, 109], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "layers.PRM.Residual", "layers.PRM.Residual", "torch.Sequential", "collections.defaultdict", "range", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "layers.PRM.Residual", "torch.MaxPool2d", "hg-prm.Hourglass", "torch.Sequential", "torch.Conv2d", "hg-prm.PyraNet.stack_layers[].append", "hg-prm.PyraNet.stack_layers[].append", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "hg-prm.PyraNet.stack_layers[].append", "hg-prm.PyraNet.stack_layers[].append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PyraNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "B", ",", "C", "=", "opt", ".", "baseWidth", ",", "opt", ".", "cardinality", "\n", "self", ".", "inputResH", "=", "opt", ".", "inputResH", "/", "4", "\n", "self", ".", "inputResW", "=", "opt", ".", "inputResW", "/", "4", "\n", "self", ".", "nStack", "=", "opt", ".", "nStack", "\n", "\n", "self", ".", "cnv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "r1", "=", "nn", ".", "Sequential", "(", "\n", "ResidualPyramid", "(", "64", ",", "128", ",", "opt", ".", "inputResH", "/", "2", ",", "opt", ".", "inputResW", "/", "2", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'no_preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n", "self", ".", "r4", "=", "ResidualPyramid", "(", "128", ",", "128", ",", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", "\n", "self", ".", "r5", "=", "ResidualPyramid", "(", "128", ",", "opt", ".", "nFeats", ",", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", "\n", "self", ".", "preact", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "cnv1", ",", "\n", "self", ".", "r1", ",", "\n", "self", ".", "r4", ",", "\n", "self", ".", "r5", "\n", ")", "\n", "self", ".", "stack_layers", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nStack", ")", ":", "\n", "            ", "hg", "=", "Hourglass", "(", "4", ",", "opt", ".", "nFeats", ",", "opt", ".", "nResidual", ",", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "'preact'", ",", "B", ",", "C", ")", "\n", "lin", "=", "nn", ".", "Sequential", "(", "\n", "hg", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nFeats", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nFeats", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nFeats", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "tmpOut", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nClasses", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "stack_layers", "[", "'lin'", "]", ".", "append", "(", "lin", ")", "\n", "self", ".", "stack_layers", "[", "'out'", "]", ".", "append", "(", "tmpOut", ")", "\n", "if", "i", "<", "self", ".", "nStack", "-", "1", ":", "\n", "                ", "lin_", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nFeats", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "tmpOut_", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nClasses", ",", "opt", ".", "nFeats", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "stack_layers", "[", "'lin_'", "]", ".", "append", "(", "lin_", ")", "\n", "self", ".", "stack_layers", "[", "'out_'", "]", ".", "append", "(", "tmpOut_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hg-prm.PyraNet.forward": [[110, 122], ["hg-prm.PyraNet.preact", "range", "out.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "", "", "def", "forward", "(", "self", ",", "x", ":", "Variable", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "inter", "=", "self", ".", "preact", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nStack", ")", ":", "\n", "            ", "lin", "=", "self", ".", "stack_layers", "[", "'lin'", "]", "[", "i", "]", "(", "inter", ")", "\n", "tmpOut", "=", "self", ".", "stack_layers", "[", "'out'", "]", "[", "i", "]", "(", "lin", ")", "\n", "out", ".", "append", "(", "tmpOut", ")", "\n", "if", "i", "<", "self", ".", "nStack", "-", "1", ":", "\n", "                ", "lin_", "=", "self", ".", "stack_layers", "[", "'lin_'", "]", "[", "i", "]", "(", "lin", ")", "\n", "tmpOut_", "=", "self", ".", "stack_layers", "[", "'out_'", "]", "[", "i", "]", "(", "tmpOut", ")", "\n", "inter", "=", "inter", "+", "lin_", "+", "tmpOut_", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hg-prm.createModel": [[124, 127], ["hg-prm.PyraNet"], "function", ["None"], ["", "", "def", "createModel", "(", "**", "kw", ")", ":", "\n", "    ", "model", "=", "PyraNet", "(", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass.__init__": [[11, 45], ["torch.Module.__init__", "hgPRM.Hourglass._make_residual", "torch.Sequential", "torch.Sequential", "hgPRM.Hourglass._make_residual", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "hgPRM.Hourglass._make_residual", "hgPRM.Hourglass", "hgPRM.Hourglass._make_residual"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "nFeats", ",", "nModules", ",", "inputResH", ",", "inputResW", ",", "net_type", ",", "B", ",", "C", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ResidualUp", "=", "ResidualPyramid", "if", "n", ">=", "2", "else", "Residual", "\n", "self", ".", "ResidualDown", "=", "ResidualPyramid", "if", "n", ">=", "3", "else", "Residual", "\n", "\n", "self", ".", "depth", "=", "n", "\n", "self", ".", "nModules", "=", "nModules", "\n", "self", ".", "nFeats", "=", "nFeats", "\n", "self", ".", "net_type", "=", "net_type", "\n", "self", ".", "B", "=", "B", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "inputResH", "=", "inputResH", "\n", "self", ".", "inputResW", "=", "inputResW", "\n", "\n", "up1", "=", "self", ".", "_make_residual", "(", "self", ".", "ResidualUp", ",", "False", ",", "inputResH", ",", "inputResW", ")", "\n", "low1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "self", ".", "_make_residual", "(", "self", ".", "ResidualDown", ",", "False", ",", "inputResH", "/", "2", ",", "inputResW", "/", "2", ")", "\n", ")", "\n", "if", "n", ">", "1", ":", "\n", "            ", "low2", "=", "Hourglass", "(", "n", "-", "1", ",", "nFeats", ",", "nModules", ",", "inputResH", "/", "2", ",", "inputResW", "/", "2", ",", "net_type", ",", "B", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "low2", "=", "self", ".", "_make_residual", "(", "self", ".", "ResidualDown", ",", "False", ",", "inputResH", "/", "2", ",", "inputResW", "/", "2", ")", "\n", "\n", "", "low3", "=", "self", ".", "_make_residual", "(", "self", ".", "ResidualDown", ",", "True", ",", "inputResH", "/", "2", ",", "inputResW", "/", "2", ")", "\n", "up2", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "\n", "self", ".", "upperBranch", "=", "up1", "\n", "self", ".", "lowerBranch", "=", "nn", ".", "Sequential", "(", "\n", "low1", ",", "\n", "low2", ",", "\n", "low3", ",", "\n", "up2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass._make_residual": [[47, 54], ["range", "torch.Sequential", "torch.Sequential", "layer_list.append", "resBlock"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "_make_residual", "(", "self", ",", "resBlock", ",", "useConv", ",", "inputResH", ",", "inputResW", ")", ":", "\n", "        ", "layer_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nModules", ")", ":", "\n", "            ", "layer_list", ".", "append", "(", "resBlock", "(", "self", ".", "nFeats", ",", "self", ".", "nFeats", ",", "inputResH", ",", "inputResW", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "self", ".", "net_type", ",", "useConv", "=", "useConv", ",", "\n", "baseWidth", "=", "self", ".", "B", ",", "cardinality", "=", "self", ".", "C", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layer_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.Hourglass.forward": [[55, 61], ["hgPRM.Hourglass.upperBranch", "hgPRM.Hourglass.lowerBranch", "torch.add", "torch.add", "torch.add", "torch.add"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add"], ["", "def", "forward", "(", "self", ",", "x", ":", "Variable", ")", ":", "\n", "        ", "up1", "=", "self", ".", "upperBranch", "(", "x", ")", "\n", "up2", "=", "self", ".", "lowerBranch", "(", "x", ")", "\n", "# out = up1 + up2", "\n", "out", "=", "torch", ".", "add", "(", "up1", ",", "up2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.PyraNet.__init__": [[64, 129], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.PRM.Residual", "layers.PRM.Residual", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "layers.PRM.Residual", "torch.MaxPool2d", "torch.MaxPool2d", "hgPRM.Hourglass", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "hgPRM.PyraNet.stack_lin.append", "hgPRM.PyraNet.stack_out.append", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "hgPRM.PyraNet.stack_lin_.append", "hgPRM.PyraNet.stack_out_.append", "math.sqrt", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PyraNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "B", ",", "C", "=", "opt", ".", "baseWidth", ",", "opt", ".", "cardinality", "\n", "self", ".", "inputResH", "=", "opt", ".", "inputResH", "/", "4", "\n", "self", ".", "inputResW", "=", "opt", ".", "inputResW", "/", "4", "\n", "self", ".", "nStack", "=", "opt", ".", "nStack", "\n", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "if", "opt", ".", "init", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "3", ")", ")", "\n", "\n", "", "cnv1", "=", "nn", ".", "Sequential", "(", "\n", "conv1", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "r1", "=", "nn", ".", "Sequential", "(", "\n", "ResidualPyramid", "(", "64", ",", "128", ",", "opt", ".", "inputResH", "/", "2", ",", "opt", ".", "inputResW", "/", "2", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'no_preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n", "r4", "=", "ResidualPyramid", "(", "128", ",", "128", ",", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", "\n", "r5", "=", "ResidualPyramid", "(", "128", ",", "opt", ".", "nFeats", ",", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", "\n", "self", ".", "preact", "=", "nn", ".", "Sequential", "(", "\n", "cnv1", ",", "\n", "r1", ",", "\n", "r4", ",", "\n", "r5", "\n", ")", "\n", "\n", "self", ".", "stack_lin", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stack_out", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stack_lin_", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stack_out_", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nStack", ")", ":", "\n", "            ", "hg", "=", "Hourglass", "(", "4", ",", "opt", ".", "nFeats", ",", "opt", ".", "nResidual", ",", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "'preact'", ",", "B", ",", "C", ")", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nFeats", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "opt", ".", "init", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "2", ")", ")", "\n", "", "lin", "=", "nn", ".", "Sequential", "(", "\n", "hg", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nFeats", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv1", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nFeats", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "tmpOut", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nClasses", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "opt", ".", "init", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "tmpOut", ".", "weight", ")", "\n", "", "self", ".", "stack_lin", ".", "append", "(", "lin", ")", "\n", "self", ".", "stack_out", ".", "append", "(", "tmpOut", ")", "\n", "if", "i", "<", "self", ".", "nStack", "-", "1", ":", "\n", "                ", "lin_", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nFeats", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "tmpOut_", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nClasses", ",", "opt", ".", "nFeats", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "opt", ".", "init", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal", "(", "lin_", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_normal", "(", "tmpOut_", ".", "weight", ")", "\n", "", "self", ".", "stack_lin_", ".", "append", "(", "lin_", ")", "\n", "self", ".", "stack_out_", ".", "append", "(", "tmpOut_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.PyraNet.forward": [[130, 142], ["hgPRM.PyraNet.preact", "range", "out.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "", "", "def", "forward", "(", "self", ",", "x", ":", "Variable", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "inter", "=", "self", ".", "preact", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nStack", ")", ":", "\n", "            ", "lin", "=", "self", ".", "stack_lin", "[", "i", "]", "(", "inter", ")", "\n", "tmpOut", "=", "self", ".", "stack_out", "[", "i", "]", "(", "lin", ")", "\n", "out", ".", "append", "(", "tmpOut", ")", "\n", "if", "i", "<", "self", ".", "nStack", "-", "1", ":", "\n", "                ", "lin_", "=", "self", ".", "stack_lin_", "[", "i", "]", "(", "lin", ")", "\n", "tmpOut_", "=", "self", ".", "stack_out_", "[", "i", "]", "(", "tmpOut", ")", "\n", "inter", "=", "inter", "+", "lin_", "+", "tmpOut_", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.PyraNet_Inference.__init__": [[145, 215], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.PRM.Residual", "layers.PRM.Residual", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "layers.PRM.Residual", "torch.MaxPool2d", "torch.MaxPool2d", "hgPRM.Hourglass", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "hgPRM.PyraNet_Inference.stack_lin.append", "hgPRM.PyraNet_Inference.stack_out.append", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "hgPRM.PyraNet_Inference.stack_lin_.append", "hgPRM.PyraNet_Inference.stack_out_.append", "math.sqrt", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PyraNet_Inference", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "B", ",", "C", "=", "opt", ".", "baseWidth", ",", "opt", ".", "cardinality", "\n", "self", ".", "inputResH", "=", "opt", ".", "inputResH", "/", "4", "\n", "self", ".", "inputResW", "=", "opt", ".", "inputResW", "/", "4", "\n", "self", ".", "nStack", "=", "opt", ".", "nStack", "\n", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "if", "opt", ".", "init", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "3", ")", ")", "\n", "\n", "", "cnv1", "=", "nn", ".", "Sequential", "(", "\n", "conv1", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "r1", "=", "nn", ".", "Sequential", "(", "\n", "ResidualPyramid", "(", "64", ",", "128", ",", "opt", ".", "inputResH", "/", "2", ",", "opt", ".", "inputResW", "/", "2", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'no_preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n", "r4", "=", "ResidualPyramid", "(", "128", ",", "128", ",", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", "\n", "r5", "=", "ResidualPyramid", "(", "128", ",", "opt", ".", "nFeats", ",", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "\n", "stride", "=", "1", ",", "net_type", "=", "'preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "B", ",", "cardinality", "=", "C", ")", "\n", "self", ".", "preact", "=", "nn", ".", "Sequential", "(", "\n", "cnv1", ",", "\n", "r1", ",", "\n", "r4", ",", "\n", "r5", "\n", ")", "\n", "\n", "self", ".", "stack_lin", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stack_out", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stack_lin_", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stack_out_", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "nStack", ")", ":", "\n", "            ", "hg", "=", "Hourglass", "(", "4", ",", "opt", ".", "nFeats", ",", "opt", ".", "nResidual", ",", "\n", "self", ".", "inputResH", ",", "self", ".", "inputResW", ",", "'preact'", ",", "B", ",", "C", ")", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nFeats", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "opt", ".", "init", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "2", ")", ")", "\n", "", "lin", "=", "nn", ".", "Sequential", "(", "\n", "hg", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nFeats", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv1", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nFeats", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "tmpOut", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nClasses", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "opt", ".", "init", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "tmpOut", ".", "weight", ")", "\n", "", "self", ".", "stack_lin", ".", "append", "(", "lin", ")", "\n", "self", ".", "stack_out", ".", "append", "(", "tmpOut", ")", "\n", "if", "i", "<", "self", ".", "nStack", "-", "1", ":", "\n", "                ", "lin_", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nFeats", ",", "opt", ".", "nFeats", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "tmpOut_", "=", "nn", ".", "Conv2d", "(", "opt", ".", "nClasses", ",", "opt", ".", "nFeats", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "opt", ".", "init", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal", "(", "lin_", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_normal", "(", "tmpOut_", ".", "weight", ")", "\n", "", "self", ".", "stack_lin_", ".", "append", "(", "lin_", ")", "\n", "self", ".", "stack_out_", ".", "append", "(", "tmpOut_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.PyraNet_Inference.forward": [[216, 227], ["hgPRM.PyraNet_Inference.preact", "range"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ":", "Variable", ")", ":", "\n", "        ", "inter", "=", "self", ".", "preact", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nStack", ")", ":", "\n", "            ", "lin", "=", "self", ".", "stack_lin", "[", "i", "]", "(", "inter", ")", "\n", "tmpOut", "=", "self", ".", "stack_out", "[", "i", "]", "(", "lin", ")", "\n", "out", "=", "tmpOut", "\n", "if", "i", "<", "self", ".", "nStack", "-", "1", ":", "\n", "                ", "lin_", "=", "self", ".", "stack_lin_", "[", "i", "]", "(", "lin", ")", "\n", "tmpOut_", "=", "self", ".", "stack_out_", "[", "i", "]", "(", "tmpOut", ")", "\n", "inter", "=", "inter", "+", "lin_", "+", "tmpOut_", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.createModel": [[229, 232], ["hgPRM.PyraNet"], "function", ["None"], ["", "", "def", "createModel", "(", "**", "kw", ")", ":", "\n", "    ", "model", "=", "PyraNet", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.hgPRM.createModel_Inference": [[234, 237], ["hgPRM.PyraNet_Inference"], "function", ["None"], ["", "def", "createModel_Inference", "(", "**", "kw", ")", ":", "\n", "    ", "model", "=", "PyraNet_Inference", "(", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.FastPose.FastPose.__init__": [[16, 27], ["torch.Module.__init__", "layers.SE_Resnet.SEResnet", "torch.PixelShuffle", "layers.DUC.DUC", "layers.DUC.DUC", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "return", "FastPose_SE", "(", ")", "\n", "\n", "\n", "", "class", "FastPose_SE", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "conv_dim", "=", "128", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FastPose_SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "preact", "=", "SEResnet", "(", "'resnet101'", ")", "\n", "\n", "self", ".", "suffle1", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.FastPose.FastPose.forward": [[28, 36], ["FastPose.FastPose.preact", "FastPose.FastPose.suffle1", "FastPose.FastPose.duc1", "FastPose.FastPose.duc2", "FastPose.FastPose.conv_out"], "methods", ["None"], ["self", ".", "duc1", "=", "DUC", "(", "512", ",", "1024", ",", "upscale_factor", "=", "2", ")", "\n", "self", ".", "duc2", "=", "DUC", "(", "256", ",", "512", ",", "upscale_factor", "=", "2", ")", "\n", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "conv_dim", ",", "opt", ".", "nClasses", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "preact", "(", "x", ")", "\n", "out", "=", "self", ".", "suffle1", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.rnn.RNN.__init__": [[6, 19], ["torch.Module.__init__", "rnn_cls", "rnn_cls"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "out_dim", ",", "cell_type", "=", "'lstm'", ",", "bi_dir", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "self", ".", "bi_dir", "=", "bi_dir", "\n", "self", ".", "mode", "=", "'batch'", "\n", "rnn_cls", "=", "nn", ".", "LSTMCell", "if", "cell_type", "==", "'lstm'", "else", "nn", ".", "GRUCell", "\n", "hidden_dim", "=", "out_dim", "//", "2", "if", "bi_dir", "else", "out_dim", "\n", "self", ".", "rnn_f", "=", "rnn_cls", "(", "self", ".", "input_dim", ",", "hidden_dim", ")", "\n", "if", "bi_dir", ":", "\n", "            ", "self", ".", "rnn_b", "=", "rnn_cls", "(", "self", ".", "input_dim", ",", "hidden_dim", ")", "\n", "", "self", ".", "hx", ",", "self", ".", "cx", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.rnn.RNN.set_mode": [[20, 22], ["None"], "methods", ["None"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.rnn.RNN.initialize": [[23, 28], ["zeros", "zeros"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'step'", ":", "\n", "            ", "self", ".", "hx", "=", "zeros", "(", "(", "batch_size", ",", "self", ".", "rnn_f", ".", "hidden_size", ")", ")", "\n", "if", "self", ".", "cell_type", "==", "'lstm'", ":", "\n", "                ", "self", ".", "cx", "=", "zeros", "(", "(", "batch_size", ",", "self", ".", "rnn_f", ".", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.rnn.RNN.forward": [[29, 44], ["batch_to", "rnn.RNN.batch_forward", "rnn.RNN.batch_forward", "torch.cat", "rnn.RNN.rnn_f", "rnn.RNN.rnn_f"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.batch_to", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.rnn.RNN.batch_forward", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.rnn.RNN.batch_forward"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'step'", ":", "\n", "            ", "self", ".", "hx", ",", "self", ".", "cx", "=", "batch_to", "(", "x", ".", "device", ",", "self", ".", "hx", ",", "self", ".", "cx", ")", "\n", "if", "self", ".", "cell_type", "==", "'lstm'", ":", "\n", "                ", "self", ".", "hx", ",", "self", ".", "cx", "=", "self", ".", "rnn_f", "(", "x", ",", "(", "self", ".", "hx", ",", "self", ".", "cx", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "hx", "=", "self", ".", "rnn_f", "(", "x", ",", "self", ".", "hx", ")", "\n", "", "rnn_out", "=", "self", ".", "hx", "\n", "", "else", ":", "\n", "            ", "rnn_out_f", "=", "self", ".", "batch_forward", "(", "x", ")", "\n", "if", "not", "self", ".", "bi_dir", ":", "\n", "                ", "return", "rnn_out_f", "\n", "", "rnn_out_b", "=", "self", ".", "batch_forward", "(", "x", ",", "reverse", "=", "True", ")", "\n", "rnn_out", "=", "torch", ".", "cat", "(", "(", "rnn_out_f", ",", "rnn_out_b", ")", ",", "2", ")", "\n", "", "return", "rnn_out", "# 220x1x128", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.rnn.RNN.batch_forward": [[45, 62], ["zeros", "torch.cat", "zeros", "reversed", "range", "torch.cat.append", "torch.cat.reverse", "x.size", "range", "x.size", "rnn", "rnn", "rnn.unsqueeze", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "batch_forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "# 220x1x59", "\n", "        ", "rnn", "=", "self", ".", "rnn_b", "if", "reverse", "else", "self", ".", "rnn_f", "\n", "rnn_out", "=", "[", "]", "\n", "hx", "=", "zeros", "(", "(", "x", ".", "size", "(", "1", ")", ",", "rnn", ".", "hidden_size", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "if", "self", ".", "cell_type", "==", "'lstm'", ":", "\n", "            ", "cx", "=", "zeros", "(", "(", "x", ".", "size", "(", "1", ")", ",", "rnn", ".", "hidden_size", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "", "ind", "=", "reversed", "(", "range", "(", "x", ".", "size", "(", "0", ")", ")", ")", "if", "reverse", "else", "range", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "for", "t", "in", "ind", ":", "\n", "            ", "if", "self", ".", "cell_type", "==", "'lstm'", ":", "\n", "                ", "hx", ",", "cx", "=", "rnn", "(", "x", "[", "t", ",", "...", "]", ",", "(", "hx", ",", "cx", ")", ")", "\n", "", "else", ":", "\n", "                ", "hx", "=", "rnn", "(", "x", "[", "t", ",", "...", "]", ",", "hx", ")", "\n", "", "rnn_out", ".", "append", "(", "hx", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "if", "reverse", ":", "\n", "            ", "rnn_out", ".", "reverse", "(", ")", "\n", "", "rnn_out", "=", "torch", ".", "cat", "(", "rnn_out", ",", "0", ")", "\n", "return", "rnn_out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.linear_model.Linear.__init__": [[14, 26], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "linear_size", ",", "p_dropout", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l_size", "=", "linear_size", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p_dropout", ")", "\n", "\n", "self", ".", "w1", "=", "nn", ".", "Linear", "(", "self", ".", "l_size", ",", "self", ".", "l_size", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "l_size", ")", "\n", "\n", "self", ".", "w2", "=", "nn", ".", "Linear", "(", "self", ".", "l_size", ",", "self", ".", "l_size", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "l_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.linear_model.Linear.forward": [[27, 41], ["linear_model.Linear.w1", "linear_model.Linear.batch_norm1", "linear_model.Linear.relu", "linear_model.Linear.dropout", "linear_model.Linear.w2", "linear_model.Linear.batch_norm2", "linear_model.Linear.relu", "linear_model.Linear.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "w1", "(", "x", ")", "\n", "y", "=", "self", ".", "batch_norm1", "(", "y", ")", "\n", "y", "=", "self", ".", "relu", "(", "y", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "\n", "y", "=", "self", ".", "w2", "(", "y", ")", "\n", "y", "=", "self", ".", "batch_norm2", "(", "y", ")", "\n", "y", "=", "self", ".", "relu", "(", "y", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "\n", "out", "=", "x", "+", "y", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.linear_model.LinearModel.__init__": [[44, 70], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "range", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "linear_model.LinearModel.linear_stages.append", "linear_model.Linear"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "linear_size", "=", "1024", ",", "num_stage", "=", "2", ",", "p_dropout", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "LinearModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear_size", "=", "linear_size", "\n", "self", ".", "p_dropout", "=", "p_dropout", "\n", "self", ".", "num_stage", "=", "num_stage", "\n", "\n", "# 2d joints", "\n", "self", ".", "input_size", "=", "input_size", "# 16 * 2", "\n", "# 3d joints", "\n", "self", ".", "output_size", "=", "output_size", "# 16 * 3", "\n", "\n", "# process input to linear size", "\n", "self", ".", "w1", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "linear_size", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "linear_size", ")", "\n", "\n", "self", ".", "linear_stages", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "num_stage", ")", ":", "\n", "            ", "self", ".", "linear_stages", ".", "append", "(", "Linear", "(", "self", ".", "linear_size", ",", "self", ".", "p_dropout", ")", ")", "\n", "", "self", ".", "linear_stages", "=", "nn", ".", "ModuleList", "(", "self", ".", "linear_stages", ")", "\n", "\n", "# post processing", "\n", "self", ".", "w2", "=", "nn", ".", "Linear", "(", "self", ".", "linear_size", ",", "self", ".", "output_size", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "p_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.linear_model.LinearModel.forward": [[71, 85], ["linear_model.LinearModel.w1", "linear_model.LinearModel.batch_norm1", "linear_model.LinearModel.relu", "linear_model.LinearModel.dropout", "range", "linear_model.LinearModel.w2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# pre-processing", "\n", "        ", "y", "=", "self", ".", "w1", "(", "x", ")", "\n", "y", "=", "self", ".", "batch_norm1", "(", "y", ")", "\n", "y", "=", "self", ".", "relu", "(", "y", ")", "\n", "y", "=", "self", ".", "dropout", "(", "y", ")", "\n", "\n", "# linear layers", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stage", ")", ":", "\n", "            ", "y", "=", "self", ".", "linear_stages", "[", "i", "]", "(", "y", ")", "\n", "\n", "", "y", "=", "self", ".", "w2", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.linear_model.init_weights": [[7, 10], ["isinstance", "torch.init.kaiming_normal_"], "function", ["None"], ["def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.mobile_net.MobileNet.__init__": [[6, 46], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "mobile_net.MobileNet.__init__.conv_bn"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n", "def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "conv_dw", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn", "(", "3", ",", "32", ",", "2", ")", ",", "\n", "conv_dw", "(", "32", ",", "64", ",", "1", ")", ",", "\n", "conv_dw", "(", "64", ",", "128", ",", "2", ")", ",", "\n", "conv_dw", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "conv_dw", "(", "128", ",", "256", ",", "2", ")", ",", "\n", "conv_dw", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "conv_dw", "(", "256", ",", "512", ",", "2", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "512", ",", "1", ")", ",", "\n", "conv_dw", "(", "512", ",", "1024", ",", "2", ")", ",", "\n", "conv_dw", "(", "1024", ",", "1024", ",", "1", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "7", ")", ",", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1024", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.mobile_net.MobileNet.forward": [[47, 52], ["mobile_net.MobileNet.model", "mobile_net.MobileNet.view", "mobile_net.MobileNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_state_net.VideoStateNet.__init__": [[9, 35], ["torch.Module.__init__", "models.rnn.RNN", "v_net_param.get", "v_net_param.get", "v_net_param.get", "models.tcn.TemporalConvNet", "models.empty.Empty"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cnn_feat_dim", ",", "v_hdim", "=", "128", ",", "v_margin", "=", "10", ",", "v_net_type", "=", "'lstm'", ",", "v_net_param", "=", "None", ",", "causal", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "'test'", "\n", "self", ".", "cnn_feat_dim", "=", "cnn_feat_dim", "\n", "self", ".", "v_net_type", "=", "v_net_type", "\n", "self", ".", "v_hdim", "=", "v_hdim", "\n", "self", ".", "v_margin", "=", "v_margin", "\n", "if", "v_net_type", "==", "'lstm'", ":", "\n", "            ", "self", ".", "v_net", "=", "RNN", "(", "cnn_feat_dim", ",", "v_hdim", ",", "v_net_type", ",", "bi_dir", "=", "not", "causal", ")", "\n", "", "elif", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "if", "v_net_param", "is", "None", ":", "\n", "                ", "v_net_param", "=", "{", "}", "\n", "", "tcn_size", "=", "v_net_param", ".", "get", "(", "'size'", ",", "[", "64", ",", "128", "]", ")", "\n", "dropout", "=", "v_net_param", ".", "get", "(", "'dropout'", ",", "0.2", ")", "\n", "kernel_size", "=", "v_net_param", ".", "get", "(", "'kernel_size'", ",", "3", ")", "\n", "assert", "tcn_size", "[", "-", "1", "]", "==", "v_hdim", "\n", "self", ".", "v_net", "=", "TemporalConvNet", "(", "cnn_feat_dim", ",", "tcn_size", ",", "kernel_size", "=", "kernel_size", ",", "dropout", "=", "dropout", ",", "causal", "=", "causal", ")", "\n", "", "elif", "v_net_type", "==", "'empty'", ":", "\n", "            ", "self", ".", "v_net", "=", "Empty", "(", "cnn_feat_dim", ",", "v_hdim", ",", "v_net_type", ",", "bi_dir", "=", "not", "causal", ")", "\n", "", "self", ".", "v_out", "=", "None", "\n", "self", ".", "t", "=", "0", "\n", "# training only", "\n", "self", ".", "indices", "=", "None", "\n", "self", ".", "scatter_indices", "=", "None", "\n", "self", ".", "gather_indices", "=", "None", "\n", "self", ".", "cnn_feat_ctx", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_state_net.VideoStateNet.set_mode": [[36, 38], ["None"], "methods", ["None"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_state_net.VideoStateNet.initialize": [[39, 63], ["video_state_net.VideoStateNet.forward_v_net().squeeze", "len", "np.insert", "int", "np.arange", "range", "np.zeros", "range", "tensor", "LongTensor().to", "LongTensor().to", "np.where", "np.diff().max", "video_state_net.VideoStateNet.forward_v_net", "LongTensor", "LongTensor", "x.unsqueeze", "masks.cpu().numpy", "np.diff", "np.tile", "np.tile", "masks.cpu"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.forward_v_net", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff"], ["", "def", "initialize", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "v_out", "=", "self", ".", "forward_v_net", "(", "x", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "[", "self", ".", "v_margin", ":", "-", "self", ".", "v_margin", "]", "\n", "self", ".", "t", "=", "0", "\n", "", "elif", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "masks", ",", "cnn_feat", ",", "v_metas", "=", "x", "\n", "device", ",", "dtype", "=", "masks", ".", "device", ",", "masks", ".", "dtype", "\n", "end_indice", "=", "np", ".", "where", "(", "masks", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "0", ")", "[", "0", "]", "\n", "v_metas", "=", "v_metas", "[", "end_indice", ",", ":", "]", "# 1562x2", "\n", "num_episode", "=", "len", "(", "end_indice", ")", "# 1562", "\n", "end_indice", "=", "np", ".", "insert", "(", "end_indice", ",", "0", ",", "-", "1", ")", "# 1563", "\n", "max_episode_len", "=", "int", "(", "np", ".", "diff", "(", "end_indice", ")", ".", "max", "(", ")", ")", "#97", "\n", "self", ".", "indices", "=", "np", ".", "arange", "(", "masks", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_episode", ")", ":", "\n", "                ", "start_index", "=", "end_indice", "[", "i", "]", "+", "1", "\n", "end_index", "=", "end_indice", "[", "i", "+", "1", "]", "+", "1", "\n", "self", ".", "indices", "[", "start_index", ":", "end_index", "]", "+=", "i", "*", "max_episode_len", "-", "start_index", "\n", "", "self", ".", "cnn_feat_ctx", "=", "np", ".", "zeros", "(", "(", "max_episode_len", "+", "2", "*", "self", ".", "v_margin", ",", "num_episode", ",", "self", ".", "cnn_feat_dim", ")", ")", "\n", "for", "i", "in", "range", "(", "num_episode", ")", ":", "\n", "                ", "exp_ind", ",", "start_ind", "=", "v_metas", "[", "i", ",", ":", "]", "\n", "self", ".", "cnn_feat_ctx", "[", ":", ",", "i", ",", ":", "]", "=", "cnn_feat", "[", "exp_ind", "]", "[", "start_ind", "-", "self", ".", "v_margin", ":", "start_ind", "+", "max_episode_len", "+", "self", ".", "v_margin", "]", "\n", "", "self", ".", "cnn_feat_ctx", "=", "tensor", "(", "self", ".", "cnn_feat_ctx", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "scatter_indices", "=", "LongTensor", "(", "np", ".", "tile", "(", "self", ".", "indices", "[", ":", ",", "None", "]", ",", "(", "1", ",", "self", ".", "cnn_feat_dim", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "gather_indices", "=", "LongTensor", "(", "np", ".", "tile", "(", "self", ".", "indices", "[", ":", ",", "None", "]", ",", "(", "1", ",", "self", ".", "v_hdim", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_state_net.VideoStateNet.forward": [[64, 74], ["torch.cat", "v_ctx.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.gather", "torch.cat", "video_state_net.VideoStateNet.forward_v_net", "v_ctx.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "v_ctx.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.forward_v_net"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "v_out", "[", "[", "self", ".", "t", "]", ",", ":", "]", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "t", "+=", "1", "\n", "", "elif", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "v_ctx", "=", "self", ".", "forward_v_net", "(", "self", ".", "cnn_feat_ctx", ")", "[", "self", ".", "v_margin", ":", "-", "self", ".", "v_margin", "]", "\n", "v_ctx", "=", "v_ctx", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "v_hdim", ")", "\n", "v_out", "=", "torch", ".", "gather", "(", "v_ctx", ",", "0", ",", "self", ".", "gather_indices", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "v_out", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_state_net.VideoStateNet.forward_v_net": [[75, 82], ["video_state_net.VideoStateNet.v_net", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward_v_net", "(", "self", ",", "x", ")", ":", "# x is t b c", "\n", "        ", "if", "self", ".", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "", "x", "=", "self", ".", "v_net", "(", "x", ")", "\n", "if", "self", ".", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.empty.Empty.__init__": [[6, 19], ["torch.Module.__init__", "rnn_cls", "rnn_cls"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "out_dim", ",", "cell_type", "=", "'lstm'", ",", "bi_dir", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "self", ".", "bi_dir", "=", "bi_dir", "\n", "self", ".", "mode", "=", "'batch'", "\n", "rnn_cls", "=", "nn", ".", "LSTMCell", "if", "cell_type", "==", "'lstm'", "else", "nn", ".", "GRUCell", "\n", "hidden_dim", "=", "out_dim", "//", "2", "if", "bi_dir", "else", "out_dim", "\n", "self", ".", "rnn_f", "=", "rnn_cls", "(", "self", ".", "input_dim", ",", "hidden_dim", ")", "\n", "if", "bi_dir", ":", "\n", "            ", "self", ".", "rnn_b", "=", "rnn_cls", "(", "self", ".", "input_dim", ",", "hidden_dim", ")", "\n", "", "self", ".", "hx", ",", "self", ".", "cx", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.empty.Empty.set_mode": [[20, 22], ["None"], "methods", ["None"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.empty.Empty.initialize": [[23, 26], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'step'", ":", "\n", "            ", "assert", "False", ",", "'not sure the usage here'", "\n", "# self.hx = zeros((batch_size, self.rnn_f.hidden_size))", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.empty.Empty.forward": [[30, 50], ["torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'step'", ":", "\n", "            ", "assert", "False", ",", "'not sure the usage here'", "\n", "# self.hx, self.cx = batch_to(x.device, self.hx, self.cx)", "\n", "# if self.cell_type == 'lstm':", "\n", "#     self.hx, self.cx = self.rnn_f(x, (self.hx, self.cx))", "\n", "# else:", "\n", "#     self.hx = self.rnn_f(x, self.hx)", "\n", "# rnn_out = self.hx", "\n", "", "else", ":", "\n", "# rnn_out_f = self.batch_forward(x)", "\n", "# if not self.bi_dir:", "\n", "#     return rnn_out_f", "\n", "# rnn_out_b = self.batch_forward(x, reverse=True)", "\n", "# rnn_out = torch.cat((rnn_out_f, rnn_out_b), 2)", "\n", "\n", "# according to simpoe, here we directly output the sequence. With time shift 1", "\n", "            ", "tmp_x", "=", "x", "[", "...", ",", "3", ":", "]", "*", "1.", "# \u53bb\u9664qpos\u7684root xyz, root quat.", "\n", "rnn_out", "=", "torch", ".", "cat", "(", "[", "tmp_x", "[", "1", ":", "]", ",", "tmp_x", "[", "-", "1", ":", "]", "]", ",", "dim", "=", "0", ")", "# \u505a\u4e00\u4e0btime shift.", "\n", "", "return", "rnn_out", "# 220x1x128", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.resnet.ResNet.__init__": [[8, 16], ["torch.nn.Module.__init__", "torchvision.models.resnet18", "torch.nn.Linear", "resnet.ResNet.resnet.parameters"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", ",", "fix_params", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "resnet", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "if", "fix_params", ":", "\n", "            ", "for", "param", "in", "self", ".", "resnet", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "self", ".", "resnet", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "resnet", ".", "fc", ".", "in_features", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.resnet.ResNet.forward": [[17, 19], ["resnet.ResNet.resnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "resnet", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.mlp.MLP.__init__": [[6, 23], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "mlp.MLP.affine_layers.append", "torch.Linear", "torch.Linear", "mlp.MLP.affine_layers.append", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dims", "=", "(", "128", ",", "128", ")", ",", "activation", "=", "'tanh'", ",", "bn_flag", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "tanh", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "relu", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "sigmoid", "\n", "\n", "", "self", ".", "out_dim", "=", "hidden_dims", "[", "-", "1", "]", "\n", "self", ".", "affine_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_dim", "=", "input_dim", "\n", "for", "nh", "in", "hidden_dims", ":", "\n", "            ", "self", ".", "affine_layers", ".", "append", "(", "nn", ".", "Linear", "(", "last_dim", ",", "nh", ")", ")", "\n", "if", "bn_flag", ":", "\n", "                ", "self", ".", "affine_layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "nh", ")", ")", "\n", "", "last_dim", "=", "nh", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.mlp.MLP.forward": [[24, 28], ["mlp.MLP.activation", "affine"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "affine", "in", "self", ".", "affine_layers", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "affine", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.__init__": [[8, 48], ["torch.Module.__init__", "video_forecast_net.VideoForecastNet.set_mode", "models.rnn.RNN", "models.rnn.RNN", "v_net_param.get", "v_net_param.get", "v_net_param.get", "models.tcn.TemporalConvNet"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.set_mode"], ["    ", "def", "__init__", "(", "self", ",", "cnn_feat_dim", ",", "state_dim", ",", "v_hdim", "=", "128", ",", "v_margin", "=", "10", ",", "v_net_type", "=", "'lstm'", ",", "v_net_param", "=", "None", ",", "\n", "s_hdim", "=", "None", ",", "s_net_type", "=", "'id'", ",", "dynamic_v", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "s_hdim", "=", "state_dim", "if", "s_hdim", "is", "None", "else", "s_hdim", "\n", "self", ".", "mode", "=", "'test'", "\n", "self", ".", "cnn_feat_dim", "=", "cnn_feat_dim", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "v_net_type", "=", "v_net_type", "\n", "self", ".", "v_hdim", "=", "v_hdim", "\n", "self", ".", "v_margin", "=", "v_margin", "\n", "self", ".", "s_net_type", "=", "s_net_type", "\n", "self", ".", "s_hdim", "=", "s_hdim", "\n", "self", ".", "dynamic_v", "=", "dynamic_v", "\n", "self", ".", "out_dim", "=", "v_hdim", "+", "s_hdim", "\n", "\n", "if", "v_net_type", "==", "'lstm'", ":", "\n", "            ", "self", ".", "v_net", "=", "RNN", "(", "cnn_feat_dim", ",", "v_hdim", ",", "v_net_type", ",", "bi_dir", "=", "False", ")", "\n", "", "elif", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "if", "v_net_param", "is", "None", ":", "\n", "                ", "v_net_param", "=", "{", "}", "\n", "", "tcn_size", "=", "v_net_param", ".", "get", "(", "'size'", ",", "[", "64", ",", "128", "]", ")", "\n", "dropout", "=", "v_net_param", ".", "get", "(", "'dropout'", ",", "0.2", ")", "\n", "kernel_size", "=", "v_net_param", ".", "get", "(", "'kernel_size'", ",", "3", ")", "\n", "assert", "tcn_size", "[", "-", "1", "]", "==", "v_hdim", "\n", "self", ".", "v_net", "=", "TemporalConvNet", "(", "cnn_feat_dim", ",", "tcn_size", ",", "kernel_size", "=", "kernel_size", ",", "dropout", "=", "dropout", ",", "causal", "=", "True", ")", "\n", "\n", "", "if", "s_net_type", "==", "'lstm'", ":", "\n", "            ", "self", ".", "s_net", "=", "RNN", "(", "state_dim", ",", "s_hdim", ",", "s_net_type", ",", "bi_dir", "=", "False", ")", "\n", "\n", "", "self", ".", "v_out", "=", "None", "\n", "self", ".", "t", "=", "0", "\n", "# training only", "\n", "self", ".", "indices", "=", "None", "\n", "self", ".", "s_scatter_indices", "=", "None", "\n", "self", ".", "s_gather_indices", "=", "None", "\n", "self", ".", "v_gather_indices", "=", "None", "\n", "self", ".", "cnn_feat_ctx", "=", "None", "\n", "self", ".", "num_episode", "=", "None", "\n", "self", ".", "max_episode_len", "=", "None", "\n", "self", ".", "set_mode", "(", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.set_mode": [[49, 56], ["video_forecast_net.VideoForecastNet.s_net.set_mode", "video_forecast_net.VideoForecastNet.s_net.set_mode"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.set_mode", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.set_mode"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "if", "self", ".", "s_net_type", "==", "'lstm'", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "self", ".", "s_net", ".", "set_mode", "(", "'batch'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "s_net", ".", "set_mode", "(", "'step'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize": [[57, 87], ["video_forecast_net.VideoForecastNet.forward_v_net", "video_forecast_net.VideoForecastNet.s_net.initialize", "len", "np.insert", "int", "np.arange", "range", "np.zeros", "range", "tensor", "LongTensor().to", "LongTensor().to", "LongTensor().to", "np.where", "np.diff().max", "x.unsqueeze", "LongTensor", "LongTensor", "LongTensor", "masks.cpu().numpy", "np.diff", "np.tile", "np.tile", "np.tile", "masks.cpu"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.forward_v_net", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff"], ["", "", "", "def", "initialize", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "v_out", "=", "self", ".", "forward_v_net", "(", "x", ".", "unsqueeze", "(", "1", ")", "[", ":", "self", ".", "v_margin", "]", ")", "[", "-", "1", "]", "\n", "if", "self", ".", "s_net_type", "==", "'lstm'", ":", "\n", "                ", "self", ".", "s_net", ".", "initialize", "(", ")", "\n", "", "self", ".", "t", "=", "0", "\n", "", "elif", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "masks", ",", "cnn_feat", ",", "v_metas", "=", "x", "\n", "device", ",", "dtype", "=", "masks", ".", "device", ",", "masks", ".", "dtype", "\n", "end_indice", "=", "np", ".", "where", "(", "masks", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "0", ")", "[", "0", "]", "\n", "v_metas", "=", "v_metas", "[", "end_indice", ",", ":", "]", "\n", "num_episode", "=", "len", "(", "end_indice", ")", "\n", "end_indice", "=", "np", ".", "insert", "(", "end_indice", ",", "0", ",", "-", "1", ")", "\n", "max_episode_len", "=", "int", "(", "np", ".", "diff", "(", "end_indice", ")", ".", "max", "(", ")", ")", "\n", "self", ".", "num_episode", "=", "num_episode", "\n", "self", ".", "max_episode_len", "=", "max_episode_len", "\n", "self", ".", "indices", "=", "np", ".", "arange", "(", "masks", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_episode", ")", ":", "\n", "                ", "start_index", "=", "end_indice", "[", "i", "]", "+", "1", "\n", "end_index", "=", "end_indice", "[", "i", "+", "1", "]", "+", "1", "\n", "self", ".", "indices", "[", "start_index", ":", "end_index", "]", "+=", "i", "*", "max_episode_len", "-", "start_index", "\n", "", "self", ".", "cnn_feat_ctx", "=", "np", ".", "zeros", "(", "(", "self", ".", "v_margin", "+", "max_episode_len", "if", "\n", "self", ".", "dynamic_v", "else", "self", ".", "v_margin", ",", "num_episode", ",", "self", ".", "cnn_feat_dim", ")", ")", "\n", "for", "i", "in", "range", "(", "num_episode", ")", ":", "\n", "                ", "exp_ind", ",", "start_ind", "=", "v_metas", "[", "i", ",", ":", "]", "\n", "self", ".", "cnn_feat_ctx", "[", ":", "self", ".", "v_margin", ",", "i", ",", ":", "]", "=", "cnn_feat", "[", "exp_ind", "]", "[", "start_ind", "-", "self", ".", "v_margin", ":", "start_ind", "]", "\n", "", "self", ".", "cnn_feat_ctx", "=", "tensor", "(", "self", ".", "cnn_feat_ctx", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "self", ".", "s_scatter_indices", "=", "LongTensor", "(", "np", ".", "tile", "(", "self", ".", "indices", "[", ":", ",", "None", "]", ",", "(", "1", ",", "self", ".", "state_dim", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "s_gather_indices", "=", "LongTensor", "(", "np", ".", "tile", "(", "self", ".", "indices", "[", ":", ",", "None", "]", ",", "(", "1", ",", "self", ".", "s_hdim", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "v_gather_indices", "=", "LongTensor", "(", "np", ".", "tile", "(", "self", ".", "indices", "[", ":", ",", "None", "]", ",", "(", "1", ",", "self", ".", "v_hdim", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.forward": [[88, 112], ["torch.cat", "video_forecast_net.VideoForecastNet.s_net", "v_ctx.repeat.repeat.transpose().contiguous().view", "torch.gather", "torch.cat", "v_ctx.repeat.repeat.repeat", "zeros", "video_forecast_net.VideoForecastNet.scatter_", "video_forecast_net.VideoForecastNet.view().transpose().contiguous", "video_forecast_net.VideoForecastNet.s_net().transpose().contiguous().view", "torch.gather", "video_forecast_net.VideoForecastNet.forward_v_net", "video_forecast_net.VideoForecastNet.forward_v_net", "v_ctx.repeat.repeat.transpose().contiguous", "video_forecast_net.VideoForecastNet.view().transpose", "video_forecast_net.VideoForecastNet.s_net().transpose().contiguous", "v_ctx.repeat.repeat.transpose", "video_forecast_net.VideoForecastNet.view", "video_forecast_net.VideoForecastNet.s_net().transpose", "video_forecast_net.VideoForecastNet.s_net"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.forward_v_net", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.forward_v_net"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "s_net_type", "==", "'lstm'", ":", "\n", "                ", "x", "=", "self", ".", "s_net", "(", "x", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "v_out", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "t", "+=", "1", "\n", "", "elif", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "dynamic_v", ":", "\n", "                ", "v_ctx", "=", "self", ".", "forward_v_net", "(", "self", ".", "cnn_feat_ctx", ")", "[", "self", ".", "v_margin", ":", "]", "\n", "", "else", ":", "\n", "                ", "v_ctx", "=", "self", ".", "forward_v_net", "(", "self", ".", "cnn_feat_ctx", ")", "[", "[", "-", "1", "]", "]", "\n", "v_ctx", "=", "v_ctx", ".", "repeat", "(", "self", ".", "max_episode_len", ",", "1", ",", "1", ")", "\n", "", "v_ctx", "=", "v_ctx", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "v_hdim", ")", "\n", "v_out", "=", "torch", ".", "gather", "(", "v_ctx", ",", "0", ",", "self", ".", "v_gather_indices", ")", "\n", "if", "self", ".", "s_net_type", "==", "'lstm'", ":", "\n", "                ", "s_ctx", "=", "zeros", "(", "(", "self", ".", "num_episode", "*", "self", ".", "max_episode_len", ",", "self", ".", "state_dim", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "s_ctx", ".", "scatter_", "(", "0", ",", "self", ".", "s_scatter_indices", ",", "x", ")", "\n", "s_ctx", "=", "s_ctx", ".", "view", "(", "-", "1", ",", "self", ".", "max_episode_len", ",", "self", ".", "state_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "s_ctx", "=", "self", ".", "s_net", "(", "s_ctx", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "s_hdim", ")", "\n", "s_out", "=", "torch", ".", "gather", "(", "s_ctx", ",", "0", ",", "self", ".", "s_gather_indices", ")", "\n", "", "else", ":", "\n", "                ", "s_out", "=", "x", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "v_out", ",", "s_out", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.forward_v_net": [[113, 120], ["video_forecast_net.VideoForecastNet.v_net", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward_v_net", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "", "x", "=", "self", ".", "v_net", "(", "x", ")", "\n", "if", "self", ".", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.tcn.Chomp1d.__init__": [[7, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.tcn.Chomp1d.forward": [[11, 13], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.tcn.TemporalBlock.__init__": [[16, 41], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "modules.append", "modules.append", "torch.nn.utils.weight_norm", "modules.append", "modules.append", "torch.Sequential", "torch.ReLU", "tcn.TemporalBlock.init_weights", "torch.Conv1d", "modules.append", "torch.ReLU", "modules.append", "torch.Conv1d", "modules.append", "torch.ReLU", "modules.append", "torch.Conv1d", "tcn.Chomp1d", "torch.Dropout", "tcn.Chomp1d", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.tcn.TemporalBlock.init_weights", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "dropout", ",", "causal", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "*", "dilation", "//", "(", "1", "if", "causal", "else", "2", ")", "\n", "modules", "=", "[", "]", "\n", "self", ".", "conv1", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ")", "\n", "modules", ".", "append", "(", "self", ".", "conv1", ")", "\n", "if", "causal", ":", "\n", "            ", "modules", ".", "append", "(", "Chomp1d", "(", "padding", ")", ")", "\n", "", "modules", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "", "self", ".", "conv2", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_outputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ")", "\n", "modules", ".", "append", "(", "self", ".", "conv2", ")", "\n", "if", "causal", ":", "\n", "            ", "modules", ".", "append", "(", "Chomp1d", "(", "padding", ")", ")", "\n", "", "modules", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "downsample", "=", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "1", ")", "if", "n_inputs", "!=", "n_outputs", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.tcn.TemporalBlock.init_weights": [[42, 47], ["tcn.TemporalBlock.conv1.weight.data.normal_", "tcn.TemporalBlock.conv2.weight.data.normal_", "tcn.TemporalBlock.downsample.weight.data.normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.tcn.TemporalBlock.forward": [[48, 52], ["tcn.TemporalBlock.net", "tcn.TemporalBlock.relu", "tcn.TemporalBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "res", "=", "x", "if", "self", ".", "downsample", "is", "None", "else", "self", ".", "downsample", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "out", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.tcn.TemporalConvNet.__init__": [[55, 68], ["torch.Module.__init__", "len", "range", "torch.Sequential", "tcn.TemporalBlock"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_channels", ",", "kernel_size", "=", "3", ",", "dropout", "=", "0.2", ",", "causal", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "kernel_size", "%", "2", "==", "1", "\n", "layers", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "num_channels", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "dilation_size", "=", "2", "**", "i", "\n", "in_channels", "=", "num_inputs", "if", "i", "==", "0", "else", "num_channels", "[", "i", "-", "1", "]", "\n", "out_channels", "=", "num_channels", "[", "i", "]", "\n", "layers", "+=", "[", "TemporalBlock", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "dilation_size", ",", "\n", "dropout", "=", "dropout", ",", "causal", "=", "causal", ")", "]", "\n", "\n", "", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.tcn.TemporalConvNet.forward": [[69, 71], ["tcn.TemporalConvNet.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.__init__": [[13, 45], ["torch.nn.Module.__init__", "models.mlp.MLP", "torch.nn.Linear", "models.rnn.RNN", "models.linear_model.LinearModel", "v_net_param.get", "v_net_param.get", "v_net_param.get", "models.tcn.TemporalConvNet"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", ",", "v_hdim", ",", "cnn_fdim", ",", "no_cnn", "=", "False", ",", "frame_shape", "=", "(", "32", ",", ")", ",", "mlp_dim", "=", "(", "300", ",", "200", ")", ",", "\n", "cnn_type", "=", "'mlp'", ",", "v_net_type", "=", "'lstm'", ",", "v_net_param", "=", "None", ",", "causal", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "cnn_fdim", "=", "cnn_fdim", "\n", "self", ".", "v_hdim", "=", "v_hdim", "\n", "self", ".", "no_cnn", "=", "no_cnn", "\n", "self", ".", "frame_shape", "=", "frame_shape", "\n", "self", ".", "input_dim", "=", "frame_shape", "[", "0", "]", "\n", "if", "no_cnn", ":", "\n", "            ", "self", ".", "cnn", "=", "None", "\n", "# elif cnn_type == 'resnet':", "\n", "#     self.cnn = ResNet(cnn_fdim)", "\n", "# elif cnn_type == 'mobile':", "\n", "#     self.cnn = MobileNet(cnn_fdim)", "\n", "", "elif", "cnn_type", "==", "'mlp'", ":", "\n", "            ", "self", ".", "cnn", "=", "LinearModel", "(", "input_size", "=", "self", ".", "input_dim", ",", "output_size", "=", "cnn_fdim", ",", "\n", "linear_size", "=", "512", ",", "num_stage", "=", "2", ",", "p_dropout", "=", "0.25", ")", "\n", "\n", "", "self", ".", "v_net_type", "=", "v_net_type", "\n", "if", "v_net_type", "==", "'lstm'", ":", "\n", "            ", "self", ".", "v_net", "=", "RNN", "(", "cnn_fdim", ",", "v_hdim", ",", "v_net_type", ",", "bi_dir", "=", "not", "causal", ")", "\n", "", "elif", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "if", "v_net_param", "is", "None", ":", "\n", "                ", "v_net_param", "=", "{", "}", "\n", "", "tcn_size", "=", "v_net_param", ".", "get", "(", "'size'", ",", "[", "64", ",", "128", "]", ")", "\n", "dropout", "=", "v_net_param", ".", "get", "(", "'dropout'", ",", "0.2", ")", "\n", "kernel_size", "=", "v_net_param", ".", "get", "(", "'kernel_size'", ",", "3", ")", "\n", "assert", "tcn_size", "[", "-", "1", "]", "==", "v_hdim", "\n", "self", ".", "v_net", "=", "TemporalConvNet", "(", "cnn_fdim", ",", "tcn_size", ",", "kernel_size", "=", "kernel_size", ",", "dropout", "=", "dropout", ",", "causal", "=", "causal", ")", "\n", "", "self", ".", "mlp", "=", "MLP", "(", "v_hdim", ",", "mlp_dim", ",", "'relu'", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "mlp", ".", "out_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.forward_v_net": [[46, 53], ["video_reg_net.VideoRegNet.v_net", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward_v_net", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "", "x", "=", "self", ".", "v_net", "(", "x", ")", "\n", "if", "self", ".", "v_net_type", "==", "'tcn'", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.forward": [[54, 62], ["video_reg_net.VideoRegNet.forward_v_net().view", "video_reg_net.VideoRegNet.mlp", "video_reg_net.VideoRegNet.linear", "video_reg_net.VideoRegNet.cnn().view", "video_reg_net.VideoRegNet.size", "video_reg_net.VideoRegNet.forward_v_net", "video_reg_net.VideoRegNet.cnn", "video_reg_net.VideoRegNet.view"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.forward_v_net"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# CNN", "\n", "        ", "if", "self", ".", "cnn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "cnn", "(", "x", ".", "view", "(", "(", "-", "1", ",", ")", "+", "self", ".", "frame_shape", ")", ")", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "1", ")", ",", "self", ".", "cnn_fdim", ")", "\n", "", "x", "=", "self", ".", "forward_v_net", "(", "x", ")", ".", "view", "(", "-", "1", ",", "self", ".", "v_hdim", ")", "\n", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_reg_net.VideoRegNet.get_cnn_feature": [[63, 65], ["video_reg_net.VideoRegNet.cnn", "x.view"], "methods", ["None"], ["", "def", "get_cnn_feature", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "cnn", "(", "x", ".", "view", "(", "(", "-", "1", ",", ")", "+", "self", ".", "frame_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.SE_Resnet.Bottleneck.__init__": [[9, 24], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "SE_module.SELayer"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["\n", "\n", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "reduction", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "momentum", "=", "0.1", ")", "\n", "if", "reduction", ":", "\n", "            ", "self", ".", "se", "=", "SELayer", "(", "planes", "*", "4", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.SE_Resnet.Bottleneck.forward": [[25, 43], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "SE_Resnet.Bottleneck.conv3", "SE_Resnet.Bottleneck.bn3", "torch.relu", "torch.relu", "SE_Resnet.Bottleneck.bn1", "SE_Resnet.Bottleneck.bn2", "SE_Resnet.Bottleneck.se", "SE_Resnet.Bottleneck.downsample", "SE_Resnet.Bottleneck.conv1", "SE_Resnet.Bottleneck.conv2"], "methods", ["None"], ["\n", "", "self", ".", "reduc", "=", "reduction", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ",", "inplace", "=", "True", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "reduc", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.SE_Resnet.SEResnet.__init__": [[48, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "SE_Resnet.SEResnet.make_layer", "SE_Resnet.SEResnet.make_layer", "SE_Resnet.SEResnet.make_layer", "SE_Resnet.SEResnet.make_layer"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer"], ["\n", "\n", "", "", "class", "SEResnet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" SEResnet \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "architecture", ")", ":", "\n", "        ", "super", "(", "SEResnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "architecture", "in", "[", "\"resnet50\"", ",", "\"resnet101\"", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "layers", "=", "[", "3", ",", "4", ",", "{", "\"resnet50\"", ":", "6", ",", "\"resnet101\"", ":", "23", "}", "[", "architecture", "]", ",", "3", "]", "\n", "self", ".", "block", "=", "Bottleneck", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "make_layer", "(", "self", ".", "block", ",", "64", ",", "self", ".", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "make_layer", "(", "\n", "self", ".", "block", ",", "128", ",", "self", ".", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "make_layer", "(", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.SE_Resnet.SEResnet.forward": [[70, 77], ["SE_Resnet.SEResnet.maxpool", "SE_Resnet.SEResnet.layer1", "SE_Resnet.SEResnet.layer2", "SE_Resnet.SEResnet.layer3", "SE_Resnet.SEResnet.layer4", "SE_Resnet.SEResnet.relu", "SE_Resnet.SEResnet.bn1", "SE_Resnet.SEResnet.conv1"], "methods", ["None"], ["self", ".", "block", ",", "256", ",", "self", ".", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "layer4", "=", "self", ".", "make_layer", "(", "\n", "self", ".", "block", ",", "512", ",", "self", ".", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "# 64 * h/4 * w/4", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "# 256 * h/4 * w/4", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.SE_Resnet.SEResnet.stages": [[78, 80], ["None"], "methods", ["None"], ["x", "=", "self", ".", "layer2", "(", "x", ")", "# 512 * h/8 * w/8", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 1024 * h/16 * w/16", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "# 2048 * h/32 * w/32", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.SE_Resnet.SEResnet.make_layer": [[81, 100], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block", "block", "block"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["return", "x", "\n", "\n", "", "def", "stages", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "]", "\n", "\n", "", "def", "make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "0.1", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "stride", ",", "downsample", ",", "reduction", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.DUC.DUC.__init__": [[10, 17], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.PixelShuffle", "torch.PixelShuffle"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "'''\n    Initialize: inplanes, planes, upscale_factor\n    OUTPUT: (planes // upscale_factor^2) * ht * wd\n    '''", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "upscale_factor", "=", "2", ")", ":", "\n", "        ", "super", "(", "DUC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.DUC.DUC.forward": [[18, 24], ["DUC.DUC.conv", "DUC.DUC.bn", "DUC.DUC.relu", "DUC.DUC.pixel_shuffle"], "methods", ["None"], ["inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "upscale_factor", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.SE_module.SELayer.__init__": [[5, 13], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["\n", "from", "torch", "import", "nn", "\n", "\n", "\n", "class", "SELayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "1", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.SE_module.SELayer.forward": [[15, 20], ["x.size", "SE_module.SELayer.avg_pool().view", "SE_module.SELayer.fc().view", "SE_module.SELayer.avg_pool", "SE_module.SELayer.fc"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.PRM.Residual.__init__": [[8, 16], ["torch.Module.__init__", "util_models.ConcatTable", "util_models.CaddTable", "PRM.convBlock", "PRM.skipLayer"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.convBlock", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.skipLayer"], ["    ", "def", "__init__", "(", "self", ",", "numIn", ",", "numOut", ",", "inputResH", ",", "inputResW", ",", "stride", "=", "1", ",", "\n", "net_type", "=", "'preact'", ",", "useConv", "=", "False", ",", "baseWidth", "=", "9", ",", "cardinality", "=", "4", ")", ":", "\n", "        ", "super", "(", "Residual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "con", "=", "ConcatTable", "(", "[", "convBlock", "(", "numIn", ",", "numOut", ",", "inputResH", ",", "\n", "inputResW", ",", "net_type", ",", "baseWidth", ",", "cardinality", ",", "stride", ")", ",", "\n", "skipLayer", "(", "numIn", ",", "numOut", ",", "stride", ",", "useConv", ")", "]", ")", "\n", "self", ".", "cadd", "=", "CaddTable", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.PRM.Residual.forward": [[17, 21], ["PRM.Residual.con", "PRM.Residual.cadd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "con", "(", "x", ")", "\n", "out", "=", "self", ".", "cadd", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.PRM.skipLayer.__init__": [[115, 129], ["torch.Module.__init__", "torch.Conv2d", "torch.Sequential", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.ReLU", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "numIn", ",", "numOut", ",", "stride", ",", "useConv", ")", ":", "\n", "        ", "super", "(", "skipLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "identity", "=", "False", "\n", "\n", "if", "numIn", "==", "numOut", "and", "stride", "==", "1", "and", "not", "useConv", ":", "\n", "            ", "self", ".", "identity", "=", "True", "\n", "", "else", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "numIn", ",", "numOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "if", "opt", ".", "init", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "2", ")", ")", "\n", "", "self", ".", "m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "numIn", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.PRM.skipLayer.forward": [[131, 136], ["PRM.skipLayer.m"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "identity", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "m", "(", "x", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.PRM.convBlock": [[23, 92], ["int", "int", "util_models.ConcatTable", "torch.Conv2d", "s_list.append", "s_list.append", "s_list.append", "torch.Conv2d", "s_list.append", "torch.Sequential", "util_models.ConcatTable.add", "math.floor", "torch.Conv2d", "s_list.append", "s_list.append", "s_list.append", "s_list.append", "s_list.append", "s_list.append", "torch.Conv2d", "s_list.append", "torch.Sequential", "util_models.ConcatTable.add", "torch.Sequential", "torch.Conv2d", "torch.Sequential", "s_list.append", "s_list.append", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.ReLU", "torch.init.xavier_normal", "s_list.append", "s_list.append", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.ReLU", "PRM.pyramid", "torch.BatchNorm2d", "torch.ReLU", "torch.init.xavier_normal", "util_models.CaddTable", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.ReLU", "torch.BatchNorm2d", "torch.ReLU", "torch.BatchNorm2d", "torch.ReLU", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.PRM.pyramid"], ["", "", "def", "convBlock", "(", "numIn", ",", "numOut", ",", "inputResH", ",", "inputResW", ",", "net_type", ",", "baseWidth", ",", "cardinality", ",", "stride", ")", ":", "\n", "    ", "numIn", "=", "int", "(", "numIn", ")", "\n", "numOut", "=", "int", "(", "numOut", ")", "\n", "\n", "addTable", "=", "ConcatTable", "(", ")", "\n", "s_list", "=", "[", "]", "\n", "if", "net_type", "!=", "'no_preact'", ":", "\n", "        ", "s_list", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "numIn", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "conv1", "=", "nn", ".", "Conv2d", "(", "numIn", ",", "numOut", "//", "2", ",", "kernel_size", "=", "1", ")", "\n", "if", "opt", ".", "init", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "2", ")", ")", "\n", "", "s_list", ".", "append", "(", "conv1", ")", "\n", "\n", "s_list", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "numOut", "//", "2", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "conv2", "=", "nn", ".", "Conv2d", "(", "numOut", "//", "2", ",", "numOut", "//", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "if", "opt", ".", "init", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "conv2", ".", "weight", ")", "\n", "", "s_list", ".", "append", "(", "conv2", ")", "\n", "\n", "s", "=", "nn", ".", "Sequential", "(", "*", "s_list", ")", "\n", "addTable", ".", "add", "(", "s", ")", "\n", "\n", "D", "=", "math", ".", "floor", "(", "numOut", "//", "baseWidth", ")", "\n", "C", "=", "cardinality", "\n", "s_list", "=", "[", "]", "\n", "\n", "if", "net_type", "!=", "'no_preact'", ":", "\n", "        ", "s_list", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "numIn", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "conv1", "=", "nn", ".", "Conv2d", "(", "numIn", ",", "D", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "if", "opt", ".", "init", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "C", ")", ")", "\n", "\n", "", "s_list", ".", "append", "(", "conv1", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "D", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "s_list", ".", "append", "(", "pyramid", "(", "D", ",", "C", ",", "inputResH", ",", "inputResW", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "D", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "a", "=", "nn", ".", "Conv2d", "(", "D", ",", "numOut", "//", "2", ",", "kernel_size", "=", "1", ")", "\n", "a", ".", "nBranchIn", "=", "C", "\n", "if", "opt", ".", "init", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "a", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "C", ")", ")", "\n", "", "s_list", ".", "append", "(", "a", ")", "\n", "\n", "s", "=", "nn", ".", "Sequential", "(", "*", "s_list", ")", "\n", "addTable", ".", "add", "(", "s", ")", "\n", "\n", "elewiswAdd", "=", "nn", ".", "Sequential", "(", "\n", "addTable", ",", "\n", "CaddTable", "(", "False", ")", "\n", ")", "\n", "conv2", "=", "nn", ".", "Conv2d", "(", "numOut", "//", "2", ",", "numOut", ",", "kernel_size", "=", "1", ")", "\n", "if", "opt", ".", "init", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "conv2", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "2", ")", ")", "\n", "", "model", "=", "nn", ".", "Sequential", "(", "\n", "elewiswAdd", ",", "\n", "nn", ".", "BatchNorm2d", "(", "numOut", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv2", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.PRM.pyramid": [[94, 112], ["util_models.ConcatTable", "math.pow", "range", "torch.Sequential", "torch.Conv2d", "torch.Sequential", "util_models.ConcatTable.add", "util_models.CaddTable", "math.pow", "torch.init.xavier_normal", "torch.FractionalMaxPool2d", "torch.UpsamplingBilinear2d", "int", "int"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add"], ["", "def", "pyramid", "(", "D", ",", "C", ",", "inputResH", ",", "inputResW", ")", ":", "\n", "    ", "pyraTable", "=", "ConcatTable", "(", ")", "\n", "sc", "=", "math", ".", "pow", "(", "2", ",", "1", "/", "C", ")", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "        ", "scaled", "=", "1", "/", "math", ".", "pow", "(", "sc", ",", "i", "+", "1", ")", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "D", ",", "D", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "if", "opt", ".", "init", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ")", "\n", "", "s", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "FractionalMaxPool2d", "(", "2", ",", "output_ratio", "=", "(", "scaled", ",", "scaled", ")", ")", ",", "\n", "conv1", ",", "\n", "nn", ".", "UpsamplingBilinear2d", "(", "size", "=", "(", "int", "(", "inputResH", ")", ",", "int", "(", "inputResW", ")", ")", ")", ")", "\n", "pyraTable", ".", "add", "(", "s", ")", "\n", "", "pyra", "=", "nn", ".", "Sequential", "(", "\n", "pyraTable", ",", "\n", "CaddTable", "(", "False", ")", "\n", ")", "\n", "return", "pyra", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.__init__": [[7, 11], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module_list", "=", "None", ")", ":", "\n", "        ", "super", "(", "ConcatTable", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "modules_list", "=", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.forward": [[12, 17], ["range", "len", "y.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "forward", "(", "self", ",", "x", ":", "Variable", ")", ":", "\n", "        ", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "modules_list", ")", ")", ":", "\n", "            ", "y", ".", "append", "(", "self", ".", "modules_list", "[", "i", "]", "(", "x", ")", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add": [[18, 20], ["util_models.ConcatTable.modules_list.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "add", "(", "self", ",", "module", ")", ":", "\n", "        ", "self", ".", "modules_list", ".", "append", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.CaddTable.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "CaddTable", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.CaddTable.forward": [[27, 29], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Variable", "or", "list", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "x", ",", "0", ")", ".", "sum", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.Identity.__init__": [[32, 35], ["torch.Module.__init__", "torch.ParameterList", "torch.ParameterList"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", "=", "None", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "params", "=", "nn", ".", "ParameterList", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.Identity.forward": [[36, 38], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Variable", "or", "list", ")", ":", "\n", "        ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.Residual": [[7, 12], ["util_models.ConcatTable", "util_models.CaddTable", "torch.Sequential", "Residual.convBlock", "Residual.skipLayer"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.convBlock", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.skipLayer"], ["def", "Residual", "(", "numIn", ",", "numOut", ",", "*", "arg", ",", "stride", "=", "1", ",", "net_type", "=", "'preact'", ",", "useConv", "=", "False", ",", "**", "kw", ")", ":", "\n", "    ", "con", "=", "ConcatTable", "(", "[", "convBlock", "(", "numIn", ",", "numOut", ",", "stride", ",", "net_type", ")", ",", "\n", "skipLayer", "(", "numIn", ",", "numOut", ",", "stride", ",", "useConv", ")", "]", ")", "\n", "cadd", "=", "CaddTable", "(", "True", ")", "\n", "return", "nn", ".", "Sequential", "(", "con", ",", "cadd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.convBlock": [[14, 41], ["torch.Conv2d", "s_list.append", "s_list.append", "s_list.append", "torch.Conv2d", "s_list.append", "s_list.append", "s_list.append", "torch.Conv2d", "s_list.append", "torch.Sequential", "s_list.append", "s_list.append", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.ReLU", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.ReLU", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.ReLU", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "convBlock", "(", "numIn", ",", "numOut", ",", "stride", ",", "net_type", ")", ":", "\n", "    ", "s_list", "=", "[", "]", "\n", "if", "net_type", "!=", "'no_preact'", ":", "\n", "        ", "s_list", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "numIn", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "conv1", "=", "nn", ".", "Conv2d", "(", "numIn", ",", "numOut", "//", "2", ",", "kernel_size", "=", "1", ")", "\n", "if", "opt", ".", "init", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "2", ")", ")", "\n", "", "s_list", ".", "append", "(", "conv1", ")", "\n", "\n", "s_list", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "numOut", "//", "2", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "conv2", "=", "nn", ".", "Conv2d", "(", "numOut", "//", "2", ",", "numOut", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "if", "opt", ".", "init", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "conv2", ".", "weight", ")", "\n", "", "s_list", ".", "append", "(", "conv2", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "numOut", "//", "2", ")", ")", "\n", "s_list", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "conv3", "=", "nn", ".", "Conv2d", "(", "numOut", "//", "2", ",", "numOut", ",", "kernel_size", "=", "1", ")", "\n", "if", "opt", ".", "init", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal", "(", "conv3", ".", "weight", ")", "\n", "", "s_list", ".", "append", "(", "conv3", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "s_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Residual.skipLayer": [[43, 54], ["util_models.Identity", "torch.Conv2d", "torch.Sequential", "torch.init.xavier_normal", "torch.BatchNorm2d", "torch.ReLU", "math.sqrt"], "function", ["None"], ["", "def", "skipLayer", "(", "numIn", ",", "numOut", ",", "stride", ",", "useConv", ")", ":", "\n", "    ", "if", "numIn", "==", "numOut", "and", "stride", "==", "1", "and", "not", "useConv", ":", "\n", "        ", "return", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "conv1", "=", "nn", ".", "Conv2d", "(", "numIn", ",", "numOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "if", "opt", ".", "init", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal", "(", "conv1", ".", "weight", ",", "gain", "=", "math", ".", "sqrt", "(", "1", "/", "2", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "numIn", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.Bottleneck.__init__": [[8, 18], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.Bottleneck.forward": [[19, 33], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "Resnet.Bottleneck.bn3", "torch.relu", "torch.relu", "Resnet.Bottleneck.bn1", "Resnet.Bottleneck.bn2", "Resnet.Bottleneck.conv3", "Resnet.Bottleneck.downsample", "Resnet.Bottleneck.conv1", "Resnet.Bottleneck.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ",", "inplace", "=", "True", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.__init__": [[37, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "Resnet.ResNet.make_layer", "Resnet.ResNet.make_layer", "Resnet.ResNet.make_layer", "Resnet.ResNet.make_layer"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer"], ["def", "__init__", "(", "self", ",", "architecture", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "architecture", "in", "[", "\"resnet50\"", ",", "\"resnet101\"", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "layers", "=", "[", "3", ",", "4", ",", "{", "\"resnet50\"", ":", "6", ",", "\"resnet101\"", ":", "23", "}", "[", "architecture", "]", ",", "3", "]", "\n", "self", ".", "block", "=", "Bottleneck", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "make_layer", "(", "self", ".", "block", ",", "64", ",", "self", ".", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "make_layer", "(", "self", ".", "block", ",", "128", ",", "self", ".", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "make_layer", "(", "self", ".", "block", ",", "256", ",", "self", ".", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "layer4", "=", "self", ".", "make_layer", "(", "\n", "self", ".", "block", ",", "512", ",", "self", ".", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.forward": [[56, 63], ["Resnet.ResNet.maxpool", "Resnet.ResNet.layer1", "Resnet.ResNet.layer2", "Resnet.ResNet.layer3", "Resnet.ResNet.layer4", "Resnet.ResNet.relu", "Resnet.ResNet.bn1", "Resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "maxpool", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.stages": [[64, 66], ["None"], "methods", ["None"], ["", "def", "stages", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.Resnet.ResNet.make_layer": [[67, 83], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.pose_nms": [[21, 115], ["np.delete.clone", "np.delete.clone", "np.delete.mean", "numpy.arange", "range", "numpy.maximum", "torch.argmax", "pick.append", "p_poseNMS.get_parametric_distance", "p_poseNMS.PCK_match", "merge_ids.append", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "len", "len", "len", "numpy.arange", "torch.max", "p_poseNMS.p_merge_fast", "torch.max", "max", "min", "max", "min", "final_result.append", "torch.from_numpy", "numpy.arange", "torch.mean", "max"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.get_parametric_distance", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.PCK_match", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.p_merge_fast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["def", "pose_nms", "(", "bboxes", ",", "pose_preds", ",", "pose_scores", ")", ":", "\n", "    ", "'''\n    Parametric Pose NMS algorithm\n    bboxes:         bbox locations list (n, 4)\n    bbox_scores:    bbox scores list (n,)\n    pose_preds:     pose locations list (n, 17, 2)\n    pose_scores:    pose scores list    (n, 17, 1)\n    '''", "\n", "pose_scores", "[", "pose_scores", "<=", "scoreThreds", "]", "=", "1e-5", "\n", "pose_scores", "[", "pose_scores", ">", "1", "]", "=", "1", "\n", "final_result", "=", "[", "]", "\n", "\n", "ori_pose_preds", "=", "pose_preds", ".", "clone", "(", ")", "\n", "ori_pose_scores", "=", "pose_scores", ".", "clone", "(", ")", "\n", "\n", "xmax", "=", "bboxes", "[", ":", ",", "2", "]", "\n", "xmin", "=", "bboxes", "[", ":", ",", "0", "]", "\n", "ymax", "=", "bboxes", "[", ":", ",", "3", "]", "\n", "ymin", "=", "bboxes", "[", ":", ",", "1", "]", "\n", "\n", "widths", "=", "xmax", "-", "xmin", "\n", "heights", "=", "ymax", "-", "ymin", "\n", "ref_dists", "=", "alpha", "*", "np", ".", "maximum", "(", "widths", ",", "heights", ")", "\n", "\n", "nsamples", "=", "bboxes", ".", "shape", "[", "0", "]", "\n", "human_scores", "=", "pose_scores", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "human_ids", "=", "np", ".", "arange", "(", "nsamples", ")", "\n", "# Do pPose-NMS", "\n", "pick", "=", "[", "]", "\n", "merge_ids", "=", "[", "]", "\n", "while", "(", "human_scores", ".", "shape", "[", "0", "]", "!=", "0", ")", ":", "\n", "# Pick the one with highest score", "\n", "        ", "pick_id", "=", "torch", ".", "argmax", "(", "human_scores", ")", "\n", "pick", ".", "append", "(", "human_ids", "[", "pick_id", "]", ")", "\n", "# num_visPart = torch.sum(pose_scores[pick_id] > 0.2)", "\n", "\n", "# Get numbers of match keypoints by calling PCK_match", "\n", "ref_dist", "=", "ref_dists", "[", "human_ids", "[", "pick_id", "]", "]", "\n", "simi", "=", "get_parametric_distance", "(", "\n", "pick_id", ",", "pose_preds", ",", "pose_scores", ",", "ref_dist", ")", "\n", "num_match_keypoints", "=", "PCK_match", "(", "\n", "pose_preds", "[", "pick_id", "]", ",", "pose_preds", ",", "ref_dist", ")", "\n", "\n", "# Delete humans who have more than matchThreds keypoints overlap and high similarity", "\n", "delete_ids", "=", "torch", ".", "from_numpy", "(", "np", ".", "arange", "(", "human_scores", ".", "shape", "[", "0", "]", ")", ")", "[", "\n", "(", "simi", ">", "gamma", ")", "|", "(", "num_match_keypoints", ">=", "matchThreds", ")", "]", "\n", "\n", "if", "delete_ids", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "delete_ids", "=", "pick_id", "\n", "#else:", "\n", "#    delete_ids = torch.from_numpy(delete_ids)", "\n", "\n", "", "merge_ids", ".", "append", "(", "human_ids", "[", "delete_ids", "]", ")", "\n", "pose_preds", "=", "np", ".", "delete", "(", "pose_preds", ",", "delete_ids", ",", "axis", "=", "0", ")", "\n", "pose_scores", "=", "np", ".", "delete", "(", "pose_scores", ",", "delete_ids", ",", "axis", "=", "0", ")", "\n", "human_ids", "=", "np", ".", "delete", "(", "human_ids", ",", "delete_ids", ")", "\n", "human_scores", "=", "np", ".", "delete", "(", "human_scores", ",", "delete_ids", ",", "axis", "=", "0", ")", "\n", "\n", "", "assert", "len", "(", "merge_ids", ")", "==", "len", "(", "pick", ")", "\n", "preds_pick", "=", "ori_pose_preds", "[", "pick", "]", "\n", "scores_pick", "=", "ori_pose_scores", "[", "pick", "]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "pick", ")", ")", ":", "\n", "        ", "ids", "=", "np", ".", "arange", "(", "17", ")", "\n", "max_score", "=", "torch", ".", "max", "(", "scores_pick", "[", "j", ",", "ids", ",", "0", "]", ")", "\n", "\n", "if", "max_score", "<", "scoreThreds", ":", "\n", "            ", "continue", "\n", "\n", "# Merge poses", "\n", "", "merge_id", "=", "merge_ids", "[", "j", "]", "\n", "merge_pose", ",", "merge_score", "=", "p_merge_fast", "(", "\n", "preds_pick", "[", "j", "]", ",", "ori_pose_preds", "[", "merge_id", "]", ",", "ori_pose_scores", "[", "merge_id", "]", ",", "ref_dists", "[", "pick", "[", "j", "]", "]", ")", "\n", "\n", "max_score", "=", "torch", ".", "max", "(", "merge_score", "[", "ids", "]", ")", "\n", "if", "max_score", "<", "scoreThreds", ":", "\n", "            ", "continue", "\n", "\n", "", "xmax", "=", "max", "(", "merge_pose", "[", ":", ",", "0", "]", ")", "\n", "xmin", "=", "min", "(", "merge_pose", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "max", "(", "merge_pose", "[", ":", ",", "1", "]", ")", "\n", "ymin", "=", "min", "(", "merge_pose", "[", ":", ",", "1", "]", ")", "\n", "\n", "if", "(", "1.5", "**", "2", "*", "(", "xmax", "-", "xmin", ")", "*", "(", "ymax", "-", "ymin", ")", "<", "40", "*", "40.5", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "final_result", ".", "append", "(", "{", "\n", "'keypoints'", ":", "merge_pose", "-", "0.3", ",", "\n", "'kp_score'", ":", "merge_score", ",", "\n", "'proposal_score'", ":", "torch", ".", "mean", "(", "merge_score", ")", "+", "1.25", "*", "max", "(", "merge_score", ")", "\n", "}", ")", "\n", "\n", "", "return", "final_result", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.filter_result": [[117, 146], ["numpy.arange", "torch.max", "p_poseNMS.p_merge_fast", "torch.max", "max", "min", "max", "min", "torch.mean", "max"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.p_merge_fast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "filter_result", "(", "args", ")", ":", "\n", "    ", "score_pick", ",", "merge_id", ",", "pred_pick", ",", "pick", ",", "bbox_score_pick", "=", "args", "\n", "global", "ori_pose_preds", ",", "ori_pose_scores", ",", "ref_dists", "\n", "ids", "=", "np", ".", "arange", "(", "17", ")", "\n", "max_score", "=", "torch", ".", "max", "(", "score_pick", "[", "ids", ",", "0", "]", ")", "\n", "\n", "if", "max_score", "<", "scoreThreds", ":", "\n", "        ", "return", "None", "\n", "\n", "# Merge poses", "\n", "", "merge_pose", ",", "merge_score", "=", "p_merge_fast", "(", "\n", "pred_pick", ",", "ori_pose_preds", "[", "merge_id", "]", ",", "ori_pose_scores", "[", "merge_id", "]", ",", "ref_dists", "[", "pick", "]", ")", "\n", "\n", "max_score", "=", "torch", ".", "max", "(", "merge_score", "[", "ids", "]", ")", "\n", "if", "max_score", "<", "scoreThreds", ":", "\n", "        ", "return", "None", "\n", "\n", "", "xmax", "=", "max", "(", "merge_pose", "[", ":", ",", "0", "]", ")", "\n", "xmin", "=", "min", "(", "merge_pose", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "max", "(", "merge_pose", "[", ":", ",", "1", "]", ")", "\n", "ymin", "=", "min", "(", "merge_pose", "[", ":", ",", "1", "]", ")", "\n", "\n", "if", "(", "1.5", "**", "2", "*", "(", "xmax", "-", "xmin", ")", "*", "(", "ymax", "-", "ymin", ")", "<", "40", "*", "40.5", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "return", "{", "\n", "'keypoints'", ":", "merge_pose", "-", "0.3", ",", "\n", "'kp_score'", ":", "merge_score", ",", "\n", "'proposal_score'", ":", "torch", ".", "mean", "(", "merge_score", ")", "+", "bbox_score_pick", "+", "1.25", "*", "max", "(", "merge_score", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.p_merge": [[149, 197], ["torch.sqrt", "min", "torch.zeros", "torch.zeros", "range", "torch.sum", "cluster_preds.dim", "cluster_preds.unsqueeze_", "cluster_scores.unsqueeze_", "mask.dim", "mask.unsqueeze_", "[].view", "torch.dot", "torch.dot", "torch.dot", "torch.pow", "torch.sum", "normed_scores.squeeze", "normed_scores.squeeze", "cluster_joint_scores.transpose().squeeze", "normed_scores.squeeze", "torch.sum", "cluster_joint_scores.transpose", "mask[].unsqueeze().repeat", "mask[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "p_merge", "(", "ref_pose", ",", "cluster_preds", ",", "cluster_scores", ",", "ref_dist", ")", ":", "\n", "    ", "'''\n    Score-weighted pose merging\n    INPUT:\n        ref_pose:       reference pose          -- [17, 2]\n        cluster_preds:  redundant poses         -- [n, 17, 2]\n        cluster_scores: redundant poses score   -- [n, 17, 1]\n        ref_dist:       reference scale         -- Constant\n    OUTPUT:\n        final_pose:     merged pose             -- [17, 2]\n        final_score:    merged score            -- [17]\n    '''", "\n", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "ref_pose", "[", "np", ".", "newaxis", ",", ":", "]", "-", "cluster_preds", ",", "2", ")", ",", "\n", "dim", "=", "2", "\n", ")", ")", "# [n, 17]", "\n", "\n", "kp_num", "=", "17", "\n", "ref_dist", "=", "min", "(", "ref_dist", ",", "15", ")", "\n", "\n", "mask", "=", "(", "dist", "<=", "ref_dist", ")", "\n", "final_pose", "=", "torch", ".", "zeros", "(", "kp_num", ",", "2", ")", "\n", "final_score", "=", "torch", ".", "zeros", "(", "kp_num", ")", "\n", "\n", "if", "cluster_preds", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "cluster_preds", ".", "unsqueeze_", "(", "0", ")", "\n", "cluster_scores", ".", "unsqueeze_", "(", "0", ")", "\n", "", "if", "mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "mask", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "kp_num", ")", ":", "\n", "        ", "cluster_joint_scores", "=", "cluster_scores", "[", ":", ",", "i", "]", "[", "mask", "[", ":", ",", "i", "]", "]", "# [k, 1]", "\n", "cluster_joint_location", "=", "cluster_preds", "[", ":", ",", "i", ",", ":", "]", "[", "mask", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "repeat", "(", "1", ",", "2", ")", "]", ".", "view", "(", "(", "torch", ".", "sum", "(", "mask", "[", ":", ",", "i", "]", ")", ",", "-", "1", ")", ")", "\n", "\n", "# Get an normalized score", "\n", "normed_scores", "=", "cluster_joint_scores", "/", "torch", ".", "sum", "(", "cluster_joint_scores", ")", "\n", "\n", "# Merge poses by a weighted sum", "\n", "final_pose", "[", "i", ",", "0", "]", "=", "torch", ".", "dot", "(", "\n", "cluster_joint_location", "[", ":", ",", "0", "]", ",", "normed_scores", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "final_pose", "[", "i", ",", "1", "]", "=", "torch", ".", "dot", "(", "\n", "cluster_joint_location", "[", ":", ",", "1", "]", ",", "normed_scores", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "\n", "final_score", "[", "i", "]", "=", "torch", ".", "dot", "(", "cluster_joint_scores", ".", "transpose", "(", "\n", "0", ",", "1", ")", ".", "squeeze", "(", "0", ")", ",", "normed_scores", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "\n", "", "return", "final_pose", ",", "final_score", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.p_merge_fast": [[199, 237], ["torch.sqrt", "min", "torch.zeros", "torch.zeros", "cluster_scores.mul", "torch.mul().sum", "torch.mul().sum", "torch.sum", "cluster_preds.dim", "cluster_preds.unsqueeze_", "cluster_scores.unsqueeze_", "mask.dim", "mask.unsqueeze_", "mask.float().unsqueeze", "torch.sum", "torch.pow", "torch.mul", "torch.mul", "mask.float", "normed_scores.repeat"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "p_merge_fast", "(", "ref_pose", ",", "cluster_preds", ",", "cluster_scores", ",", "ref_dist", ")", ":", "\n", "    ", "'''\n    Score-weighted pose merging\n    INPUT:\n        ref_pose:       reference pose          -- [17, 2]\n        cluster_preds:  redundant poses         -- [n, 17, 2]\n        cluster_scores: redundant poses score   -- [n, 17, 1]\n        ref_dist:       reference scale         -- Constant\n    OUTPUT:\n        final_pose:     merged pose             -- [17, 2]\n        final_score:    merged score            -- [17]\n    '''", "\n", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "ref_pose", "[", "np", ".", "newaxis", ",", ":", "]", "-", "cluster_preds", ",", "2", ")", ",", "\n", "dim", "=", "2", "\n", ")", ")", "\n", "\n", "kp_num", "=", "17", "\n", "ref_dist", "=", "min", "(", "ref_dist", ",", "15", ")", "\n", "\n", "mask", "=", "(", "dist", "<=", "ref_dist", ")", "\n", "final_pose", "=", "torch", ".", "zeros", "(", "kp_num", ",", "2", ")", "\n", "final_score", "=", "torch", ".", "zeros", "(", "kp_num", ")", "\n", "\n", "if", "cluster_preds", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "cluster_preds", ".", "unsqueeze_", "(", "0", ")", "\n", "cluster_scores", ".", "unsqueeze_", "(", "0", ")", "\n", "", "if", "mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "mask", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "# Weighted Merge", "\n", "", "masked_scores", "=", "cluster_scores", ".", "mul", "(", "mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "normed_scores", "=", "masked_scores", "/", "torch", ".", "sum", "(", "masked_scores", ",", "dim", "=", "0", ")", "\n", "\n", "final_pose", "=", "torch", ".", "mul", "(", "\n", "cluster_preds", ",", "normed_scores", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "final_score", "=", "torch", ".", "mul", "(", "masked_scores", ",", "normed_scores", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "return", "final_pose", ",", "final_score", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.get_parametric_distance": [[239, 266], ["torch.sqrt", "torch.zeros", "keypoint_scores.squeeze_", "pred_scores.repeat().transpose.repeat().transpose", "torch.exp", "torch.sum", "keypoint_scores.dim", "keypoint_scores.unsqueeze_", "pred_scores.repeat().transpose.dim", "pred_scores.repeat().transpose.unsqueeze_", "torch.tanh", "torch.tanh", "torch.sum", "torch.pow", "pred_scores.repeat().transpose.repeat", "torch.sum"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "get_parametric_distance", "(", "i", ",", "all_preds", ",", "keypoint_scores", ",", "ref_dist", ")", ":", "\n", "    ", "pick_preds", "=", "all_preds", "[", "i", "]", "\n", "pred_scores", "=", "keypoint_scores", "[", "i", "]", "\n", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "pick_preds", "[", "np", ".", "newaxis", ",", ":", "]", "-", "all_preds", ",", "2", ")", ",", "\n", "dim", "=", "2", "\n", ")", ")", "\n", "mask", "=", "(", "dist", "<=", "1", ")", "\n", "\n", "# Define a keypoints distance", "\n", "score_dists", "=", "torch", ".", "zeros", "(", "all_preds", ".", "shape", "[", "0", "]", ",", "17", ")", "\n", "keypoint_scores", ".", "squeeze_", "(", ")", "\n", "if", "keypoint_scores", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "keypoint_scores", ".", "unsqueeze_", "(", "0", ")", "\n", "", "if", "pred_scores", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "pred_scores", ".", "unsqueeze_", "(", "1", ")", "\n", "# The predicted scores are repeated up to do broadcast", "\n", "", "pred_scores", "=", "pred_scores", ".", "repeat", "(", "1", ",", "all_preds", ".", "shape", "[", "0", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "score_dists", "[", "mask", "]", "=", "torch", ".", "tanh", "(", "\n", "pred_scores", "[", "mask", "]", "/", "delta1", ")", "*", "torch", ".", "tanh", "(", "keypoint_scores", "[", "mask", "]", "/", "delta1", ")", "\n", "\n", "point_dist", "=", "torch", ".", "exp", "(", "(", "-", "1", ")", "*", "dist", "/", "delta2", ")", "\n", "final_dist", "=", "torch", ".", "sum", "(", "score_dists", ",", "dim", "=", "1", ")", "+", "mu", "*", "torch", ".", "sum", "(", "point_dist", ",", "dim", "=", "1", ")", "\n", "\n", "return", "final_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.PCK_match": [[268, 280], ["torch.sqrt", "min", "torch.sum", "torch.sum", "torch.pow"], "function", ["None"], ["", "def", "PCK_match", "(", "pick_pred", ",", "all_preds", ",", "ref_dist", ")", ":", "\n", "    ", "dist", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "pow", "(", "pick_pred", "[", "np", ".", "newaxis", ",", ":", "]", "-", "all_preds", ",", "2", ")", ",", "\n", "dim", "=", "2", "\n", ")", ")", "\n", "ref_dist", "=", "min", "(", "ref_dist", ",", "7", ")", "\n", "num_match_keypoints", "=", "torch", ".", "sum", "(", "\n", "dist", "/", "ref_dist", "<=", "1", ",", "\n", "dim", "=", "1", "\n", ")", "\n", "\n", "return", "num_match_keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.predict.p_poseNMS.write_json": [[282, 314], ["open", "json_file.write", "range", "float", "json_results.append", "os.path.join", "json.dumps", "int", "keypoints.append", "keypoints.append", "keypoints.append", "im_name.split", "float", "float", "float", "[].split", "[].split", "im_name.split"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "write_json", "(", "all_results", ",", "outputpath", ",", "for_eval", "=", "False", ")", ":", "\n", "    ", "'''\n    all_result: result dict of predictions\n    outputpath: output directory\n    '''", "\n", "json_results", "=", "[", "]", "\n", "for", "im_res", "in", "all_results", ":", "\n", "        ", "im_name", "=", "im_res", "[", "'imgname'", "]", "\n", "for", "human", "in", "im_res", "[", "'result'", "]", ":", "\n", "            ", "keypoints", "=", "[", "]", "\n", "result", "=", "{", "}", "\n", "if", "for_eval", ":", "\n", "                ", "result", "[", "'image_id'", "]", "=", "int", "(", "im_name", ".", "split", "(", "\n", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "result", "[", "'image_id'", "]", "=", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "result", "[", "'category_id'", "]", "=", "1", "\n", "\n", "kp_preds", "=", "human", "[", "'keypoints'", "]", "\n", "kp_scores", "=", "human", "[", "'kp_score'", "]", "\n", "pro_scores", "=", "human", "[", "'proposal_score'", "]", "\n", "for", "n", "in", "range", "(", "kp_scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "keypoints", ".", "append", "(", "float", "(", "kp_preds", "[", "n", ",", "0", "]", ")", ")", "\n", "keypoints", ".", "append", "(", "float", "(", "kp_preds", "[", "n", ",", "1", "]", ")", ")", "\n", "keypoints", ".", "append", "(", "float", "(", "kp_scores", "[", "n", "]", ")", ")", "\n", "", "result", "[", "'keypoints'", "]", "=", "keypoints", "\n", "result", "[", "'score'", "]", "=", "float", "(", "pro_scores", ")", "\n", "\n", "json_results", ".", "append", "(", "result", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outputpath", ",", "'alphapose-results.json'", ")", ",", "'w'", ")", "as", "json_file", ":", "\n", "        ", "json_file", ".", "write", "(", "json", ".", "dumps", "(", "json_results", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.annot.coco_minival.Mscoco_minival.__init__": [[15, 36], ["dict", "list", "len", "h5py.File", "open", "f.readlines", "map", "len", "x.strip"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ",", "annoSet", "=", "'coco-minival-images-newnms/test-dev'", ")", ":", "\n", "        ", "self", ".", "img_folder", "=", "'../data/coco/images'", "# root image folders", "\n", "self", ".", "annot", "=", "dict", "(", ")", "\n", "\n", "# Read in annotation information from hdf5 file", "\n", "tags", "=", "[", "'xmin'", ",", "'ymin'", ",", "'xmax'", ",", "'ymax'", "]", "\n", "with", "h5py", ".", "File", "(", "'./predict/annot/'", "+", "annoSet", "+", "'.h5'", ",", "'r'", ")", "as", "a", ":", "\n", "            ", "for", "tag", "in", "tags", ":", "\n", "                ", "self", ".", "annot", "[", "tag", "]", "=", "a", "[", "tag", "]", "[", ":", "]", "\n", "\n", "# Load in image file names", "\n", "", "", "with", "open", "(", "'./predict/annot/'", "+", "annoSet", "+", "'_images.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "images", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "images", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", "'\\n'", ")", ",", "self", ".", "images", ")", ")", "\n", "assert", "len", "(", "self", ".", "images", ")", "==", "self", ".", "annot", "[", "'xmin'", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "images", ")", "\n", "\n", "self", ".", "flipRef", "=", "(", "(", "2", ",", "3", ")", ",", "(", "4", ",", "5", ")", ",", "(", "6", ",", "7", ")", ",", "\n", "(", "8", ",", "9", ")", ",", "(", "10", ",", "11", ")", ",", "(", "12", ",", "13", ")", ",", "\n", "(", "14", ",", "15", ")", ",", "(", "16", ",", "17", ")", ")", "\n", "self", ".", "year", "=", "2017", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.annot.coco_minival.Mscoco_minival.__getitem__": [[37, 87], ["os.path.join", "train_sppe.src.utils.img.load_image", "train_sppe.src.utils.img.load_image.clone", "img[].add_", "img[].add_", "img[].add_", "train_sppe.src.utils.img.load_image.size", "train_sppe.src.utils.img.load_image.size", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "max", "max", "max", "max", "train_sppe.src.utils.img.cropBox", "train_sppe.src.utils.img.cropBox", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "min", "min", "coco_minival.Mscoco_minival.images[].split", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.load_image", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cropBox", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.img.cropBox"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "year", "==", "2014", ":", "\n", "            ", "imgname", "=", "self", ".", "images", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "imgname", "=", "self", ".", "images", "[", "index", "]", ".", "split", "(", "'_'", ")", "[", "2", "]", "\n", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder", ",", "imgname", ")", "\n", "img", "=", "load_image", "(", "img_path", ")", "\n", "\n", "ori_img", "=", "img", ".", "clone", "(", ")", "\n", "img", "[", "0", "]", ".", "add_", "(", "-", "0.406", ")", "\n", "img", "[", "1", "]", ".", "add_", "(", "-", "0.457", ")", "\n", "img", "[", "2", "]", ".", "add_", "(", "-", "0.480", ")", "\n", "\n", "imght", "=", "img", ".", "size", "(", "1", ")", "\n", "imgwidth", "=", "img", ".", "size", "(", "2", ")", "\n", "upLeft", "=", "torch", ".", "Tensor", "(", "\n", "(", "float", "(", "self", ".", "annot", "[", "'xmin'", "]", "[", "index", "]", ")", ",", "float", "(", "self", ".", "annot", "[", "'ymin'", "]", "[", "index", "]", ")", ")", ")", "\n", "bottomRight", "=", "torch", ".", "Tensor", "(", "\n", "(", "float", "(", "self", ".", "annot", "[", "'xmax'", "]", "[", "index", "]", ")", ",", "float", "(", "self", ".", "annot", "[", "'ymax'", "]", "[", "index", "]", ")", ")", ")", "\n", "\n", "ht", "=", "bottomRight", "[", "1", "]", "-", "upLeft", "[", "1", "]", "\n", "width", "=", "bottomRight", "[", "0", "]", "-", "upLeft", "[", "0", "]", "\n", "if", "width", ">", "100", ":", "\n", "            ", "scaleRate", "=", "0.2", "\n", "", "else", ":", "\n", "            ", "scaleRate", "=", "0.3", "\n", "\n", "", "upLeft", "[", "0", "]", "=", "max", "(", "0", ",", "upLeft", "[", "0", "]", "-", "width", "*", "scaleRate", "/", "2", ")", "\n", "upLeft", "[", "1", "]", "=", "max", "(", "0", ",", "upLeft", "[", "1", "]", "-", "ht", "*", "scaleRate", "/", "2", ")", "\n", "bottomRight", "[", "0", "]", "=", "max", "(", "\n", "min", "(", "imgwidth", "-", "1", ",", "bottomRight", "[", "0", "]", "+", "width", "*", "scaleRate", "/", "2", ")", ",", "upLeft", "[", "0", "]", "+", "5", ")", "\n", "bottomRight", "[", "1", "]", "=", "max", "(", "\n", "min", "(", "imght", "-", "1", ",", "bottomRight", "[", "1", "]", "+", "ht", "*", "scaleRate", "/", "2", ")", ",", "upLeft", "[", "1", "]", "+", "5", ")", "\n", "\n", "inp", "=", "cropBox", "(", "img", ",", "upLeft", ",", "bottomRight", ",", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ")", "\n", "ori_inp", "=", "cropBox", "(", "ori_img", ",", "upLeft", ",", "bottomRight", ",", "\n", "opt", ".", "inputResH", ",", "opt", ".", "inputResW", ")", "\n", "metaData", "=", "(", "\n", "upLeft", ",", "\n", "bottomRight", ",", "\n", "ori_inp", "\n", ")", "\n", "box", "=", "torch", ".", "zeros", "(", "4", ")", "\n", "box", "[", "0", "]", "=", "upLeft", "[", "0", "]", "\n", "box", "[", "1", "]", "=", "upLeft", "[", "1", "]", "\n", "box", "[", "2", "]", "=", "bottomRight", "[", "0", "]", "\n", "box", "[", "3", "]", "=", "bottomRight", "[", "1", "]", "\n", "\n", "return", "inp", ",", "box", ",", "imgname", ",", "metaData", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.annot.coco_minival.Mscoco_minival.__len__": [[88, 90], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.video_demo.get_test_input": [[17, 29], ["cv2.imread", "cv2.resize", "img[].transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.autograd.Variable", "img_.cuda.cuda", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["\n", "", "if", "len", "(", "inputlist", ")", ":", "\n", "        ", "im_names", "=", "open", "(", "inputlist", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "", "elif", "len", "(", "inputpath", ")", "and", "inputpath", "!=", "'/'", ":", "\n", "        ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "inputpath", ")", ":", "\n", "            ", "im_names", "=", "files", "\n", "", "", "else", ":", "\n", "        ", "raise", "IOError", "(", "'Error: must contain either --indir/--list'", ")", "\n", "\n", "# Load input images", "\n", "", "data_loader", "=", "ImageLoader", "(", "im_names", ",", "batchSize", "=", "args", ".", "detbatch", ",", "format", "=", "'yolo'", ")", ".", "start", "(", ")", "\n", "\n", "# Load detection loader", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.video_demo.prep_image": [[30, 43], ["preprocess.letterbox_image", "img[].transpose().copy", "torch.from_numpy().float().div().unsqueeze", "torch.from_numpy().float().div().unsqueeze", "img[].transpose", "torch.from_numpy().float().div", "torch.from_numpy().float().div", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.letterbox_image", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["print", "(", "'Loading YOLO model..'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "det_loader", "=", "DetectionLoader", "(", "data_loader", ",", "batchSize", "=", "args", ".", "detbatch", ")", ".", "start", "(", ")", "\n", "det_processor", "=", "DetectionProcessor", "(", "det_loader", ")", ".", "start", "(", ")", "\n", "\n", "# Load pose model", "\n", "pose_dataset", "=", "Mscoco", "(", ")", "\n", "if", "args", ".", "fast_inference", ":", "\n", "        ", "pose_model", "=", "InferenNet_fast", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "else", ":", "\n", "        ", "pose_model", "=", "InferenNet", "(", "4", "*", "1", "+", "1", ",", "pose_dataset", ")", "\n", "", "pose_model", ".", "cuda", "(", ")", "\n", "pose_model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.video_demo.write": [[44, 56], ["tuple", "tuple", "int", "random.choice", "cv2.rectangle", "cv2.rectangle", "cv2.putText", "x[].int", "x[].int", "cv2.getTextSize"], "function", ["None"], ["runtime_profile", "=", "{", "\n", "'dt'", ":", "[", "]", ",", "\n", "'pt'", ":", "[", "]", ",", "\n", "'pn'", ":", "[", "]", "\n", "}", "\n", "\n", "# Init data writer", "\n", "writer", "=", "DataWriter", "(", "args", ".", "save_video", ")", ".", "start", "(", ")", "\n", "\n", "data_len", "=", "data_loader", ".", "length", "(", ")", "\n", "im_names_desc", "=", "tqdm", "(", "range", "(", "data_len", ")", ")", "\n", "\n", "batchSize", "=", "args", ".", "posebatch", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.video_demo.arg_parse": [[57, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args"], ["for", "i", "in", "im_names_desc", ":", "\n", "        ", "start_time", "=", "getTime", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "(", "inps", ",", "orig_img", ",", "im_name", ",", "boxes", ",", "scores", ",", "pt1", ",", "pt2", ")", "=", "det_processor", ".", "read", "(", ")", "\n", "if", "boxes", "is", "None", "or", "boxes", ".", "nelement", "(", ")", "==", "0", ":", "\n", "                ", "writer", ".", "save", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "orig_img", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "continue", "\n", "\n", "", "ckpt_time", ",", "det_time", "=", "getTime", "(", "start_time", ")", "\n", "runtime_profile", "[", "'dt'", "]", ".", "append", "(", "det_time", ")", "\n", "# Pose Estimation", "\n", "\n", "datalen", "=", "inps", ".", "size", "(", "0", ")", "\n", "leftover", "=", "0", "\n", "if", "(", "datalen", ")", "%", "batchSize", ":", "\n", "                ", "leftover", "=", "1", "\n", "", "num_batches", "=", "datalen", "//", "batchSize", "+", "leftover", "\n", "hm", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "inps_j", "=", "inps", "[", "j", "*", "batchSize", ":", "min", "(", "(", "j", "+", "1", ")", "*", "batchSize", ",", "datalen", ")", "]", ".", "cuda", "(", ")", "\n", "hm_j", "=", "pose_model", "(", "inps_j", ")", "\n", "hm", ".", "append", "(", "hm_j", ")", "\n", "", "hm", "=", "torch", ".", "cat", "(", "hm", ")", "\n", "ckpt_time", ",", "pose_time", "=", "getTime", "(", "ckpt_time", ")", "\n", "runtime_profile", "[", "'pt'", "]", ".", "append", "(", "pose_time", ")", "\n", "hm", "=", "hm", ".", "cpu", "(", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.confidence_filter": [[9, 14], ["None"], "function", ["None"], ["def", "confidence_filter", "(", "result", ",", "confidence", ")", ":", "\n", "    ", "conf_mask", "=", "(", "result", "[", ":", ",", ":", ",", "4", "]", ">", "confidence", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", "\n", "result", "=", "result", "*", "conf_mask", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.confidence_filter_cls": [[15, 29], ["torch.cat", "print", "torch.clamp", "conf.unsqueeze.unsqueeze", "torch.max"], "function", ["None"], ["", "def", "confidence_filter_cls", "(", "result", ",", "confidence", ")", ":", "\n", "    ", "max_scores", "=", "torch", ".", "max", "(", "result", "[", ":", ",", ":", ",", "5", ":", "25", "]", ",", "2", ")", "[", "0", "]", "\n", "res", "=", "torch", ".", "cat", "(", "(", "result", ",", "max_scores", ")", ",", "2", ")", "\n", "print", "(", "res", ".", "shape", ")", "\n", "\n", "\n", "cond_1", "=", "(", "res", "[", ":", ",", ":", ",", "4", "]", ">", "confidence", ")", ".", "float", "(", ")", "\n", "cond_2", "=", "(", "res", "[", ":", ",", ":", ",", "25", "]", ">", "0.995", ")", ".", "float", "(", ")", "\n", "\n", "conf", "=", "cond_1", "+", "cond_2", "\n", "conf", "=", "torch", ".", "clamp", "(", "conf", ",", "0.0", ",", "1.0", ")", "\n", "conf", "=", "conf", ".", "unsqueeze", "(", "2", ")", "\n", "result", "=", "result", "*", "conf", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.get_abs_coord": [[32, 39], ["abs", "abs"], "function", ["None"], ["", "def", "get_abs_coord", "(", "box", ")", ":", "\n", "    ", "box", "[", "2", "]", ",", "box", "[", "3", "]", "=", "abs", "(", "box", "[", "2", "]", ")", ",", "abs", "(", "box", "[", "3", "]", ")", "\n", "x1", "=", "(", "box", "[", "0", "]", "-", "box", "[", "2", "]", "/", "2", ")", "-", "1", "\n", "y1", "=", "(", "box", "[", "1", "]", "-", "box", "[", "3", "]", "/", "2", ")", "-", "1", "\n", "x2", "=", "(", "box", "[", "0", "]", "+", "box", "[", "2", "]", "/", "2", ")", "-", "1", "\n", "y2", "=", "(", "box", "[", "1", "]", "+", "box", "[", "3", "]", "/", "2", ")", "-", "1", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.sanity_fix": [[42, 50], ["None"], "function", ["None"], ["", "def", "sanity_fix", "(", "box", ")", ":", "\n", "    ", "if", "(", "box", "[", "0", "]", ">", "box", "[", "2", "]", ")", ":", "\n", "        ", "box", "[", "0", "]", ",", "box", "[", "2", "]", "=", "box", "[", "2", "]", ",", "box", "[", "0", "]", "\n", "\n", "", "if", "(", "box", "[", "1", "]", ">", "box", "[", "3", "]", ")", ":", "\n", "        ", "box", "[", "1", "]", ",", "box", "[", "3", "]", "=", "box", "[", "3", "]", ",", "box", "[", "1", "]", "\n", "\n", "", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.bbox_iou": [[51, 78], ["torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ")", ":", "\n", "    ", "\"\"\"\n    Returns the IoU of two bounding boxes \n    \n    \n    \"\"\"", "\n", "#Get the coordinates of bounding boxes", "\n", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "\n", "#get the corrdinates of the intersection rectangle", "\n", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ",", "b2_y2", ")", "\n", "\n", "#Intersection area", "\n", "\n", "inter_area", "=", "torch", ".", "max", "(", "inter_rect_x2", "-", "inter_rect_x1", "+", "1", ",", "torch", ".", "zeros", "(", "inter_rect_x2", ".", "shape", ")", ".", "cuda", "(", ")", ")", "*", "torch", ".", "max", "(", "inter_rect_y2", "-", "inter_rect_y1", "+", "1", ",", "torch", ".", "zeros", "(", "inter_rect_x2", ".", "shape", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "#Union Area", "\n", "b1_area", "=", "(", "b1_x2", "-", "b1_x1", "+", "1", ")", "*", "(", "b1_y2", "-", "b1_y1", "+", "1", ")", "\n", "b2_area", "=", "(", "b2_x2", "-", "b2_x1", "+", "1", ")", "*", "(", "b2_y2", "-", "b2_y1", "+", "1", ")", "\n", "\n", "iou", "=", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.pred_corner_coord": [[80, 97], ["torch.nonzero().transpose().contiguous", "box.new", "torch.nonzero().transpose", "torch.nonzero"], "function", ["None"], ["", "def", "pred_corner_coord", "(", "prediction", ")", ":", "\n", "#Get indices of non-zero confidence bboxes", "\n", "    ", "ind_nz", "=", "torch", ".", "nonzero", "(", "prediction", "[", ":", ",", ":", ",", "4", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "box", "=", "prediction", "[", "ind_nz", "[", "0", "]", ",", "ind_nz", "[", "1", "]", "]", "\n", "\n", "\n", "box_a", "=", "box", ".", "new", "(", "box", ".", "shape", ")", "\n", "box_a", "[", ":", ",", "0", "]", "=", "(", "box", "[", ":", ",", "0", "]", "-", "box", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", "1", "]", "=", "(", "box", "[", ":", ",", "1", "]", "-", "box", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", "2", "]", "=", "(", "box", "[", ":", ",", "0", "]", "+", "box", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", "3", "]", "=", "(", "box", "[", ":", ",", "1", "]", "+", "box", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "box", "[", ":", ",", ":", "4", "]", "=", "box_a", "[", ":", ",", ":", "4", "]", "\n", "\n", "prediction", "[", "ind_nz", "[", "0", "]", ",", "ind_nz", "[", "1", "]", "]", "=", "box", "\n", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.write": [[101, 114], ["tuple", "tuple", "int", "random.choice", "cv2.rectangle", "cv2.rectangle", "cv2.putText", "x[].int", "x[].int", "cv2.getTextSize", "int"], "function", ["None"], ["", "def", "write", "(", "x", ",", "batches", ",", "results", ",", "colors", ",", "classes", ")", ":", "\n", "    ", "c1", "=", "tuple", "(", "x", "[", "1", ":", "3", "]", ".", "int", "(", ")", ")", "\n", "c2", "=", "tuple", "(", "x", "[", "3", ":", "5", "]", ".", "int", "(", ")", ")", "\n", "img", "=", "results", "[", "int", "(", "x", "[", "0", "]", ")", "]", "\n", "cls", "=", "int", "(", "x", "[", "-", "1", "]", ")", "\n", "label", "=", "\"{0}\"", ".", "format", "(", "classes", "[", "cls", "]", ")", "\n", "color", "=", "random", ".", "choice", "(", "colors", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "1", ")", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "1", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", "+", "3", ",", "c1", "[", "1", "]", "+", "t_size", "[", "1", "]", "+", "4", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "+", "t_size", "[", "1", "]", "+", "4", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "[", "225", ",", "255", ",", "255", "]", ",", "1", ")", ";", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.video_demo_half.get_test_input": [[17, 29], ["cv2.imread", "cv2.resize", "img[].transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.autograd.Variable", "img_.cuda.cuda", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["def", "get_test_input", "(", "input_dim", ",", "CUDA", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "\"dog-cycle-car.png\"", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "input_dim", ",", "input_dim", ")", ")", "\n", "img_", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img_", "=", "img_", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "/", "255.0", "\n", "img_", "=", "torch", ".", "from_numpy", "(", "img_", ")", ".", "float", "(", ")", "\n", "img_", "=", "Variable", "(", "img_", ")", "\n", "\n", "if", "CUDA", ":", "\n", "        ", "img_", "=", "img_", ".", "cuda", "(", ")", "\n", "\n", "", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.video_demo_half.prep_image": [[30, 43], ["preprocess.letterbox_image", "img[].transpose().copy", "torch.from_numpy().float().div().unsqueeze", "torch.from_numpy().float().div().unsqueeze", "img[].transpose", "torch.from_numpy().float().div", "torch.from_numpy().float().div", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.letterbox_image", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "prep_image", "(", "img", ",", "inp_dim", ")", ":", "\n", "    ", "\"\"\"\n    Prepare image for inputting to the neural network. \n    \n    Returns a Variable \n    \"\"\"", "\n", "\n", "orig_im", "=", "img", "\n", "dim", "=", "orig_im", ".", "shape", "[", "1", "]", ",", "orig_im", ".", "shape", "[", "0", "]", "\n", "img", "=", "(", "letterbox_image", "(", "orig_im", ",", "(", "inp_dim", ",", "inp_dim", ")", ")", ")", "\n", "img_", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "\n", "img_", "=", "torch", ".", "from_numpy", "(", "img_", ")", ".", "float", "(", ")", ".", "div", "(", "255.0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img_", ",", "orig_im", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.video_demo_half.write": [[44, 56], ["tuple", "tuple", "int", "random.choice", "cv2.rectangle", "cv2.rectangle", "cv2.putText", "x[].int", "x[].int", "cv2.getTextSize"], "function", ["None"], ["", "def", "write", "(", "x", ",", "img", ")", ":", "\n", "    ", "c1", "=", "tuple", "(", "x", "[", "1", ":", "3", "]", ".", "int", "(", ")", ")", "\n", "c2", "=", "tuple", "(", "x", "[", "3", ":", "5", "]", ".", "int", "(", ")", ")", "\n", "cls", "=", "int", "(", "x", "[", "-", "1", "]", ")", "\n", "label", "=", "\"{0}\"", ".", "format", "(", "classes", "[", "cls", "]", ")", "\n", "color", "=", "random", ".", "choice", "(", "colors", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "1", ")", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "1", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", "+", "3", ",", "c1", "[", "1", "]", "+", "t_size", "[", "1", "]", "+", "4", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "+", "t_size", "[", "1", "]", "+", "4", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "[", "225", ",", "255", ",", "255", "]", ",", "1", ")", ";", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.video_demo_half.arg_parse": [[57, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args"], ["", "def", "arg_parse", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse arguements to the detect module\n    \n    \"\"\"", "\n", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'YOLO v2 Video Detection Module'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--video\"", ",", "dest", "=", "'video'", ",", "help", "=", "\n", "\"Video to run detection upon\"", ",", "\n", "default", "=", "\"video.avi\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "dest", "=", "\"dataset\"", ",", "help", "=", "\"Dataset on which the network has been trained\"", ",", "default", "=", "\"pascal\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--confidence\"", ",", "dest", "=", "\"confidence\"", ",", "help", "=", "\"Object Confidence to filter predictions\"", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "\"--nms_thresh\"", ",", "dest", "=", "\"nms_thresh\"", ",", "help", "=", "\"NMS Threshhold\"", ",", "default", "=", "0.4", ")", "\n", "parser", ".", "add_argument", "(", "\"--cfg\"", ",", "dest", "=", "'cfgfile'", ",", "help", "=", "\n", "\"Config file\"", ",", "\n", "default", "=", "\"cfg/yolov3-spp.cfg\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--weights\"", ",", "dest", "=", "'weightsfile'", ",", "help", "=", "\n", "\"weightsfile\"", ",", "\n", "default", "=", "\"yolov3-spp.weights\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--reso\"", ",", "dest", "=", "'reso'", ",", "help", "=", "\n", "\"Input resolution of the network. Increase to increase accuracy. Decrease to increase speed\"", ",", "\n", "default", "=", "\"416\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.cam_demo.get_test_input": [[16, 28], ["cv2.imread", "cv2.resize", "img[].transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.autograd.Variable", "img_.cuda.cuda", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["def", "get_test_input", "(", "input_dim", ",", "CUDA", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "\"imgs/messi.jpg\"", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "input_dim", ",", "input_dim", ")", ")", "\n", "img_", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img_", "=", "img_", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "/", "255.0", "\n", "img_", "=", "torch", ".", "from_numpy", "(", "img_", ")", ".", "float", "(", ")", "\n", "img_", "=", "Variable", "(", "img_", ")", "\n", "\n", "if", "CUDA", ":", "\n", "        ", "img_", "=", "img_", ".", "cuda", "(", ")", "\n", "\n", "", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.cam_demo.prep_image": [[29, 42], ["cv2.resize", "img[].transpose().copy", "torch.from_numpy().float().div().unsqueeze", "torch.from_numpy().float().div().unsqueeze", "img[].transpose", "torch.from_numpy().float().div", "torch.from_numpy().float().div", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "prep_image", "(", "img", ",", "inp_dim", ")", ":", "\n", "    ", "\"\"\"\n    Prepare image for inputting to the neural network. \n    \n    Returns a Variable \n    \"\"\"", "\n", "\n", "orig_im", "=", "img", "\n", "dim", "=", "orig_im", ".", "shape", "[", "1", "]", ",", "orig_im", ".", "shape", "[", "0", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "orig_im", ",", "(", "inp_dim", ",", "inp_dim", ")", ")", "\n", "img_", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "\n", "img_", "=", "torch", ".", "from_numpy", "(", "img_", ")", ".", "float", "(", ")", ".", "div", "(", "255.0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img_", ",", "orig_im", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.cam_demo.write": [[43, 55], ["tuple", "tuple", "int", "random.choice", "cv2.rectangle", "cv2.rectangle", "cv2.putText", "x[].int", "x[].int", "cv2.getTextSize"], "function", ["None"], ["", "def", "write", "(", "x", ",", "img", ")", ":", "\n", "    ", "c1", "=", "tuple", "(", "x", "[", "1", ":", "3", "]", ".", "int", "(", ")", ")", "\n", "c2", "=", "tuple", "(", "x", "[", "3", ":", "5", "]", ".", "int", "(", ")", ")", "\n", "cls", "=", "int", "(", "x", "[", "-", "1", "]", ")", "\n", "label", "=", "\"{0}\"", ".", "format", "(", "classes", "[", "cls", "]", ")", "\n", "color", "=", "random", ".", "choice", "(", "colors", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "1", ")", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "1", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", "+", "3", ",", "c1", "[", "1", "]", "+", "t_size", "[", "1", "]", "+", "4", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "+", "t_size", "[", "1", "]", "+", "4", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "[", "225", ",", "255", ",", "255", "]", ",", "1", ")", ";", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.cam_demo.arg_parse": [[56, 70], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args"], ["", "def", "arg_parse", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse arguements to the detect module\n    \n    \"\"\"", "\n", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'YOLO v3 Cam Demo'", ")", "\n", "parser", ".", "add_argument", "(", "\"--confidence\"", ",", "dest", "=", "\"confidence\"", ",", "help", "=", "\"Object Confidence to filter predictions\"", ",", "default", "=", "0.25", ")", "\n", "parser", ".", "add_argument", "(", "\"--nms_thresh\"", ",", "dest", "=", "\"nms_thresh\"", ",", "help", "=", "\"NMS Threshhold\"", ",", "default", "=", "0.4", ")", "\n", "parser", ".", "add_argument", "(", "\"--reso\"", ",", "dest", "=", "'reso'", ",", "help", "=", "\n", "\"Input resolution of the network. Increase to increase accuracy. Decrease to increase speed\"", ",", "\n", "default", "=", "\"160\"", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.letterbox_image": [[19, 32], ["int", "int", "cv2.resize", "numpy.full", "min", "min"], "function", ["None"], ["def", "letterbox_image", "(", "img", ",", "inp_dim", ")", ":", "\n", "    ", "'''resize image with unchanged aspect ratio using padding'''", "\n", "img_w", ",", "img_h", "=", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "\n", "w", ",", "h", "=", "inp_dim", "\n", "new_w", "=", "int", "(", "img_w", "*", "min", "(", "w", "/", "img_w", ",", "h", "/", "img_h", ")", ")", "\n", "new_h", "=", "int", "(", "img_h", "*", "min", "(", "w", "/", "img_w", ",", "h", "/", "img_h", ")", ")", "\n", "resized_image", "=", "cv2", ".", "resize", "(", "img", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "canvas", "=", "np", ".", "full", "(", "(", "inp_dim", "[", "1", "]", ",", "inp_dim", "[", "0", "]", ",", "3", ")", ",", "128", ")", "\n", "\n", "canvas", "[", "(", "h", "-", "new_h", ")", "//", "2", ":", "(", "h", "-", "new_h", ")", "//", "2", "+", "new_h", ",", "(", "w", "-", "new_w", ")", "//", "2", ":", "(", "w", "-", "new_w", ")", "//", "2", "+", "new_w", ",", ":", "]", "=", "resized_image", "\n", "\n", "return", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_image": [[34, 48], ["cv2.imread", "preprocess.letterbox_image", "img[].transpose().copy", "torch.from_numpy().float().div().unsqueeze", "torch.from_numpy().float().div().unsqueeze", "torch.from_numpy().float().div().unsqueeze", "img[].transpose", "torch.from_numpy().float().div", "torch.from_numpy().float().div", "torch.from_numpy().float().div", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.letterbox_image", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "prep_image", "(", "img", ",", "inp_dim", ")", ":", "\n", "    ", "\"\"\"\n    Prepare image for inputting to the neural network.\n\n    Returns a Variable\n    \"\"\"", "\n", "\n", "orig_im", "=", "cv2", ".", "imread", "(", "img", ")", "\n", "shape", "=", "orig_im", ".", "shape", "\n", "dim", "=", "orig_im", ".", "shape", "[", "1", "]", ",", "orig_im", ".", "shape", "[", "0", "]", "\n", "img", "=", "(", "letterbox_image", "(", "orig_im", ",", "(", "inp_dim", ",", "inp_dim", ")", ")", ")", "\n", "img_", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "\n", "img_", "=", "torch", ".", "from_numpy", "(", "img_", ")", ".", "float", "(", ")", ".", "div", "(", "255.0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img_", ",", "orig_im", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_frame": [[50, 63], ["preprocess.letterbox_image", "img[].transpose().copy", "torch.from_numpy().float().div().unsqueeze", "torch.from_numpy().float().div().unsqueeze", "torch.from_numpy().float().div().unsqueeze", "img[].transpose", "torch.from_numpy().float().div", "torch.from_numpy().float().div", "torch.from_numpy().float().div", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.letterbox_image", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "prep_frame", "(", "img", ",", "inp_dim", ")", ":", "\n", "    ", "\"\"\"\n    Prepare image for inputting to the neural network.\n\n    Returns a Variable\n    \"\"\"", "\n", "\n", "orig_im", "=", "img", "\n", "dim", "=", "orig_im", ".", "shape", "[", "1", "]", ",", "orig_im", ".", "shape", "[", "0", "]", "\n", "img", "=", "(", "letterbox_image", "(", "orig_im", ",", "(", "inp_dim", ",", "inp_dim", ")", ")", ")", "\n", "img_", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", "\n", "img_", "=", "torch", ".", "from_numpy", "(", "img_", ")", ".", "float", "(", ")", ".", "div", "(", "255.0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img_", ",", "orig_im", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.prep_image_pil": [[65, 75], ["PIL.Image.open", "Image.open.convert", "img.float().div.resize", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "img.float().div.view().transpose().transpose().contiguous", "img.float().div.view", "img.float().div.float().div", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "img.float().div.tobytes", "img.float().div.view().transpose().transpose", "img.float().div.float", "img.float().div.view().transpose", "img.float().div.view"], "function", ["None"], ["", "def", "prep_image_pil", "(", "img", ",", "network_dim", ")", ":", "\n", "    ", "orig_im", "=", "Image", ".", "open", "(", "img", ")", "\n", "img", "=", "orig_im", ".", "convert", "(", "'RGB'", ")", "\n", "dim", "=", "img", ".", "size", "\n", "img", "=", "img", ".", "resize", "(", "network_dim", ")", "\n", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "img", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "*", "network_dim", ",", "3", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "img", "=", "img", ".", "view", "(", "1", ",", "3", ",", "*", "network_dim", ")", "\n", "img", "=", "img", ".", "float", "(", ")", ".", "div", "(", "255.0", ")", "\n", "return", "(", "img", ",", "orig_im", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.preprocess.inp_to_image": [[77, 88], ["inp.numpy.cpu().squeeze", "inp.numpy.transpose", "inp.numpy.data.numpy", "inp.numpy.cpu", "inp.numpy.numpy"], "function", ["None"], ["", "def", "inp_to_image", "(", "inp", ")", ":", "\n", "    ", "inp", "=", "inp", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", "\n", "inp", "=", "inp", "*", "255", "\n", "try", ":", "\n", "        ", "inp", "=", "inp", ".", "data", ".", "numpy", "(", ")", "\n", "", "except", "RuntimeError", ":", "\n", "        ", "inp", "=", "inp", ".", "numpy", "(", ")", "\n", "", "inp", "=", "inp", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "inp", "=", "inp", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "inp", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.test_net.__init__": [[20, 26], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "input_size", ")", ":", "\n", "        ", "super", "(", "test_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "linear_1", "=", "nn", ".", "Linear", "(", "input_size", ",", "5", ")", "\n", "self", ".", "middle", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "5", ",", "5", ")", "for", "x", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "5", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.test_net.forward": [[27, 31], ["x.view.view.view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ")", "\n", "fwd", "=", "nn", ".", "Sequential", "(", "self", ".", "linear_1", ",", "*", "self", ".", "middle", ",", "self", ".", "output", ")", "\n", "return", "fwd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.MaxPoolStride1.__init__": [[77, 81], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "MaxPoolStride1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "pad", "=", "kernel_size", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.MaxPoolStride1.forward": [[82, 90], ["int", "torch.pad", "torch.pad", "torch.pad", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "padding", "=", "int", "(", "self", ".", "pad", "/", "2", ")", "\n", "#padded_x = F.pad(x, (0,self.pad,0,self.pad), mode=\"replicate\")", "\n", "#pooled_x = nn.MaxPool2d(self.kernel_size, self.pad)(padded_x)", "\n", "#padded_x = F.pad(x, (0, self.pad, 0, self.pad), mode=\"replicate\")", "\n", "padded_x", "=", "F", ".", "pad", "(", "x", ",", "(", "padding", ",", "padding", ",", "padding", ",", "padding", ")", ",", "mode", "=", "\"constant\"", ",", "value", "=", "0", ")", "\n", "pooled_x", "=", "nn", ".", "MaxPool2d", "(", "self", ".", "kernel_size", ",", "1", ")", "(", "padded_x", ")", "\n", "return", "pooled_x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.EmptyLayer.__init__": [[93, 95], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmptyLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.DetectionLayer.__init__": [[98, 101], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "anchors", ")", ":", "\n", "        ", "super", "(", "DetectionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "anchors", "=", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.DetectionLayer.forward": [[102, 108], ["predict_transform"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.predict_transform"], ["", "def", "forward", "(", "self", ",", "x", ",", "inp_dim", ",", "num_classes", ",", "confidence", ")", ":", "\n", "        ", "x", "=", "x", ".", "data", "\n", "global", "CUDA", "\n", "prediction", "=", "x", "\n", "prediction", "=", "predict_transform", "(", "prediction", ",", "inp_dim", ",", "self", ".", "anchors", ",", "num_classes", ",", "confidence", ",", "CUDA", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Upsample.__init__": [[114, 117], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Upsample.forward": [[118, 129], ["x.view().expand().contiguous().view.view().expand().contiguous().view.data.size", "x.view().expand().contiguous().view.view().expand().contiguous().view.data.size", "x.view().expand().contiguous().view.view().expand().contiguous().view.data.size", "x.view().expand().contiguous().view.view().expand().contiguous().view.data.size", "x.view().expand().contiguous().view.view().expand().contiguous().view.view().expand().contiguous().view", "x.view().expand().contiguous().view.view().expand().contiguous().view.data.dim", "x.view().expand().contiguous().view.view().expand().contiguous().view.view().expand().contiguous", "x.view().expand().contiguous().view.view().expand().contiguous().view.view().expand", "x.view().expand().contiguous().view.view().expand().contiguous().view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "assert", "(", "x", ".", "data", ".", "dim", "(", ")", "==", "4", ")", "\n", "B", "=", "x", ".", "data", ".", "size", "(", "0", ")", "\n", "C", "=", "x", ".", "data", ".", "size", "(", "1", ")", "\n", "H", "=", "x", ".", "data", ".", "size", "(", "2", ")", "\n", "W", "=", "x", ".", "data", ".", "size", "(", "3", ")", "\n", "ws", "=", "stride", "\n", "hs", "=", "stride", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", ",", "1", ",", "W", ",", "1", ")", ".", "expand", "(", "B", ",", "C", ",", "H", ",", "stride", ",", "W", ",", "stride", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ",", "H", "*", "stride", ",", "W", "*", "stride", ")", "\n", "return", "x", "\n", "#       ", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.ReOrgLayer.__init__": [[132, 135], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "ReOrgLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.ReOrgLayer.forward": [[136, 149], ["x.view.view.view().transpose().contiguous", "x.view.view.view", "x.view.view.view().transpose().contiguous", "x.view.view.view().transpose().contiguous", "x.view.view.view", "x.view.view.data.dim", "str", "str", "x.view.view.view().transpose", "x.view.view.view().transpose", "x.view.view.view().transpose", "str", "str", "x.view.view.view", "x.view.view.view", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "(", "x", ".", "data", ".", "dim", "(", ")", "==", "4", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "data", ".", "shape", "\n", "hs", "=", "self", ".", "stride", "\n", "ws", "=", "self", ".", "stride", "\n", "assert", "(", "H", "%", "hs", "==", "0", ")", ",", "\"The stride \"", "+", "str", "(", "self", ".", "stride", ")", "+", "\" is not a proper divisor of height \"", "+", "str", "(", "H", ")", "\n", "assert", "(", "W", "%", "ws", "==", "0", ")", ",", "\"The stride \"", "+", "str", "(", "self", ".", "stride", ")", "+", "\" is not a proper divisor of height \"", "+", "str", "(", "W", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", ",", "hs", ",", "W", "//", "ws", ",", "ws", ")", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", "*", "W", "//", "ws", ",", "hs", ",", "ws", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", "*", "W", "//", "ws", ",", "hs", "*", "ws", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "ws", "*", "hs", ",", "H", "//", "ws", ",", "W", "//", "ws", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", "*", "ws", "*", "hs", ",", "H", "//", "ws", ",", "W", "//", "ws", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.__init__": [[304, 310], ["torch.Module.__init__", "darknet.parse_cfg", "darknet.create_modules", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.parse_cfg", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.create_modules"], ["    ", "def", "__init__", "(", "self", ",", "cfgfile", ")", ":", "\n", "        ", "super", "(", "Darknet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "blocks", "=", "parse_cfg", "(", "cfgfile", ")", "\n", "self", ".", "net_info", ",", "self", ".", "module_list", "=", "create_modules", "(", "self", ".", "blocks", ")", "\n", "self", ".", "header", "=", "torch", ".", "IntTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "seen", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.get_blocks": [[313, 315], ["None"], "methods", ["None"], ["", "def", "get_blocks", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.get_module_list": [[316, 318], ["None"], "methods", ["None"], ["", "def", "get_module_list", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "module_list", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.forward": [[320, 402], ["range", "len", "int", "len", "int", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "int", "predict_transform", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.predict_transform", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "forward", "(", "self", ",", "x", ",", "CUDA", ")", ":", "\n", "        ", "detections", "=", "[", "]", "\n", "modules", "=", "self", ".", "blocks", "[", "1", ":", "]", "\n", "outputs", "=", "{", "}", "#We cache the outputs for the route layer", "\n", "\n", "\n", "write", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "\n", "            ", "module_type", "=", "(", "modules", "[", "i", "]", "[", "\"type\"", "]", ")", "\n", "if", "module_type", "==", "\"convolutional\"", "or", "module_type", "==", "\"upsample\"", "or", "module_type", "==", "\"maxpool\"", ":", "\n", "\n", "                ", "x", "=", "self", ".", "module_list", "[", "i", "]", "(", "x", ")", "\n", "outputs", "[", "i", "]", "=", "x", "\n", "\n", "\n", "", "elif", "module_type", "==", "\"route\"", ":", "\n", "                ", "layers", "=", "modules", "[", "i", "]", "[", "\"layers\"", "]", "\n", "layers", "=", "[", "int", "(", "a", ")", "for", "a", "in", "layers", "]", "\n", "\n", "if", "(", "layers", "[", "0", "]", ")", ">", "0", ":", "\n", "                    ", "layers", "[", "0", "]", "=", "layers", "[", "0", "]", "-", "i", "\n", "\n", "", "if", "len", "(", "layers", ")", "==", "1", ":", "\n", "                    ", "x", "=", "outputs", "[", "i", "+", "(", "layers", "[", "0", "]", ")", "]", "\n", "\n", "", "elif", "len", "(", "layers", ")", "==", "2", ":", "\n", "                    ", "if", "(", "layers", "[", "1", "]", ")", ">", "0", ":", "\n", "                        ", "layers", "[", "1", "]", "=", "layers", "[", "1", "]", "-", "i", "\n", "\n", "", "map1", "=", "outputs", "[", "i", "+", "layers", "[", "0", "]", "]", "\n", "map2", "=", "outputs", "[", "i", "+", "layers", "[", "1", "]", "]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "map1", ",", "map2", ")", ",", "1", ")", "\n", "", "elif", "len", "(", "layers", ")", "==", "4", ":", "# SPP", "\n", "                    ", "map1", "=", "outputs", "[", "i", "+", "layers", "[", "0", "]", "]", "\n", "map2", "=", "outputs", "[", "i", "+", "layers", "[", "1", "]", "]", "\n", "map3", "=", "outputs", "[", "i", "+", "layers", "[", "2", "]", "]", "\n", "map4", "=", "outputs", "[", "i", "+", "layers", "[", "3", "]", "]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "map1", ",", "map2", ",", "map3", ",", "map4", ")", ",", "1", ")", "\n", "", "outputs", "[", "i", "]", "=", "x", "\n", "\n", "", "elif", "module_type", "==", "\"shortcut\"", ":", "\n", "                ", "from_", "=", "int", "(", "modules", "[", "i", "]", "[", "\"from\"", "]", ")", "\n", "x", "=", "outputs", "[", "i", "-", "1", "]", "+", "outputs", "[", "i", "+", "from_", "]", "\n", "outputs", "[", "i", "]", "=", "x", "\n", "\n", "\n", "\n", "", "elif", "module_type", "==", "'yolo'", ":", "\n", "\n", "                ", "anchors", "=", "self", ".", "module_list", "[", "i", "]", "[", "0", "]", ".", "anchors", "\n", "#Get the input dimensions", "\n", "inp_dim", "=", "int", "(", "self", ".", "net_info", "[", "\"height\"", "]", ")", "\n", "\n", "#Get the number of classes", "\n", "num_classes", "=", "int", "(", "modules", "[", "i", "]", "[", "\"classes\"", "]", ")", "\n", "\n", "#Output the result", "\n", "x", "=", "x", ".", "data", "\n", "x", "=", "predict_transform", "(", "x", ",", "inp_dim", ",", "anchors", ",", "num_classes", ",", "CUDA", ")", "\n", "\n", "if", "type", "(", "x", ")", "==", "int", ":", "\n", "                    ", "continue", "\n", "\n", "\n", "", "if", "not", "write", ":", "\n", "                    ", "detections", "=", "x", "\n", "write", "=", "1", "\n", "\n", "", "else", ":", "\n", "                    ", "detections", "=", "torch", ".", "cat", "(", "(", "detections", ",", "x", ")", ",", "1", ")", "\n", "\n", "", "outputs", "[", "i", "]", "=", "outputs", "[", "i", "-", "1", "]", "\n", "\n", "\n", "\n", "", "", "try", ":", "\n", "            ", "return", "detections", "\n", "", "except", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.load_weights": [[404, 490], ["open", "numpy.fromfile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.fromfile", "range", "len", "conv.weight.numel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conv_weights.view_as.view_as.view_as", "conv.weight.data.copy_", "int", "bn.bias.numel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "bn_biases.view_as.view_as.view_as", "bn_weights.view_as.view_as.view_as", "bn_running_mean.view_as.view_as.view_as", "bn_running_var.view_as.view_as.view_as", "bn.bias.data.copy_", "bn.weight.data.copy_", "bn.running_mean.copy_", "bn.running_var.copy_", "conv.bias.numel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "conv_biases.view_as.view_as.view_as", "conv.bias.data.copy_"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "def", "load_weights", "(", "self", ",", "weightfile", ")", ":", "\n", "\n", "#Open the weights file", "\n", "        ", "fp", "=", "open", "(", "weightfile", ",", "\"rb\"", ")", "\n", "\n", "#The first 4 values are header information ", "\n", "# 1. Major version number", "\n", "# 2. Minor Version Number", "\n", "# 3. Subversion number ", "\n", "# 4. IMages seen ", "\n", "header", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "int32", ",", "count", "=", "5", ")", "\n", "self", ".", "header", "=", "torch", ".", "from_numpy", "(", "header", ")", "\n", "self", ".", "seen", "=", "self", ".", "header", "[", "3", "]", "\n", "\n", "#The rest of the values are the weights", "\n", "# Let's load them up", "\n", "weights", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "ptr", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "module_list", ")", ")", ":", "\n", "            ", "module_type", "=", "self", ".", "blocks", "[", "i", "+", "1", "]", "[", "\"type\"", "]", "\n", "\n", "if", "module_type", "==", "\"convolutional\"", ":", "\n", "                ", "model", "=", "self", ".", "module_list", "[", "i", "]", "\n", "try", ":", "\n", "                    ", "batch_normalize", "=", "int", "(", "self", ".", "blocks", "[", "i", "+", "1", "]", "[", "\"batch_normalize\"", "]", ")", "\n", "", "except", ":", "\n", "                    ", "batch_normalize", "=", "0", "\n", "\n", "", "conv", "=", "model", "[", "0", "]", "\n", "\n", "if", "(", "batch_normalize", ")", ":", "\n", "                    ", "bn", "=", "model", "[", "1", "]", "\n", "\n", "#Get the number of weights of Batch Norm Layer", "\n", "num_bn_biases", "=", "bn", ".", "bias", ".", "numel", "(", ")", "\n", "\n", "#Load the weights", "\n", "bn_biases", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_bn_biases", "]", ")", "\n", "ptr", "+=", "num_bn_biases", "\n", "\n", "bn_weights", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_bn_biases", "]", ")", "\n", "ptr", "+=", "num_bn_biases", "\n", "\n", "bn_running_mean", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_bn_biases", "]", ")", "\n", "ptr", "+=", "num_bn_biases", "\n", "\n", "bn_running_var", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_bn_biases", "]", ")", "\n", "ptr", "+=", "num_bn_biases", "\n", "\n", "#Cast the loaded weights into dims of model weights. ", "\n", "bn_biases", "=", "bn_biases", ".", "view_as", "(", "bn", ".", "bias", ".", "data", ")", "\n", "bn_weights", "=", "bn_weights", ".", "view_as", "(", "bn", ".", "weight", ".", "data", ")", "\n", "bn_running_mean", "=", "bn_running_mean", ".", "view_as", "(", "bn", ".", "running_mean", ")", "\n", "bn_running_var", "=", "bn_running_var", ".", "view_as", "(", "bn", ".", "running_var", ")", "\n", "\n", "#Copy the data to model", "\n", "bn", ".", "bias", ".", "data", ".", "copy_", "(", "bn_biases", ")", "\n", "bn", ".", "weight", ".", "data", ".", "copy_", "(", "bn_weights", ")", "\n", "bn", ".", "running_mean", ".", "copy_", "(", "bn_running_mean", ")", "\n", "bn", ".", "running_var", ".", "copy_", "(", "bn_running_var", ")", "\n", "\n", "", "else", ":", "\n", "#Number of biases", "\n", "                    ", "num_biases", "=", "conv", ".", "bias", ".", "numel", "(", ")", "\n", "\n", "#Load the weights", "\n", "conv_biases", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_biases", "]", ")", "\n", "ptr", "=", "ptr", "+", "num_biases", "\n", "\n", "#reshape the loaded weights according to the dims of the model weights", "\n", "conv_biases", "=", "conv_biases", ".", "view_as", "(", "conv", ".", "bias", ".", "data", ")", "\n", "\n", "#Finally copy the data", "\n", "conv", ".", "bias", ".", "data", ".", "copy_", "(", "conv_biases", ")", "\n", "\n", "\n", "#Let us load the weights for the Convolutional layers", "\n", "", "num_weights", "=", "conv", ".", "weight", ".", "numel", "(", ")", "\n", "\n", "#Do the same as above for weights", "\n", "conv_weights", "=", "torch", ".", "from_numpy", "(", "weights", "[", "ptr", ":", "ptr", "+", "num_weights", "]", ")", "\n", "ptr", "=", "ptr", "+", "num_weights", "\n", "\n", "conv_weights", "=", "conv_weights", ".", "view_as", "(", "conv", ".", "weight", ".", "data", ")", "\n", "conv", ".", "weight", ".", "data", ".", "copy_", "(", "conv_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.Darknet.save_weights": [[491, 537], ["open", "header.numpy.numpy.numpy", "header.numpy.numpy.tofile", "range", "len", "len", "cpu().numpy().tofile", "int", "cpu().numpy().tofile", "cpu().numpy().tofile", "cpu().numpy().tofile", "cpu().numpy().tofile", "cpu().numpy().tofile", "cpu().numpy", "cpu().numpy", "cpu().numpy", "cpu().numpy", "cpu().numpy", "cpu().numpy", "cpu", "cpu", "cpu", "cpu", "cpu", "cpu"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "", "def", "save_weights", "(", "self", ",", "savedfile", ",", "cutoff", "=", "0", ")", ":", "\n", "\n", "        ", "if", "cutoff", "<=", "0", ":", "\n", "            ", "cutoff", "=", "len", "(", "self", ".", "blocks", ")", "-", "1", "\n", "\n", "", "fp", "=", "open", "(", "savedfile", ",", "'wb'", ")", "\n", "\n", "# Attach the header at the top of the file", "\n", "self", ".", "header", "[", "3", "]", "=", "self", ".", "seen", "\n", "header", "=", "self", ".", "header", "\n", "\n", "header", "=", "header", ".", "numpy", "(", ")", "\n", "header", ".", "tofile", "(", "fp", ")", "\n", "\n", "# Now, let us save the weights ", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "module_list", ")", ")", ":", "\n", "            ", "module_type", "=", "self", ".", "blocks", "[", "i", "+", "1", "]", "[", "\"type\"", "]", "\n", "\n", "if", "(", "module_type", ")", "==", "\"convolutional\"", ":", "\n", "                ", "model", "=", "self", ".", "module_list", "[", "i", "]", "\n", "try", ":", "\n", "                    ", "batch_normalize", "=", "int", "(", "self", ".", "blocks", "[", "i", "+", "1", "]", "[", "\"batch_normalize\"", "]", ")", "\n", "", "except", ":", "\n", "                    ", "batch_normalize", "=", "0", "\n", "\n", "", "conv", "=", "model", "[", "0", "]", "\n", "\n", "if", "(", "batch_normalize", ")", ":", "\n", "                    ", "bn", "=", "model", "[", "1", "]", "\n", "\n", "#If the parameters are on GPU, convert them back to CPU", "\n", "#We don't convert the parameter to GPU", "\n", "#Instead. we copy the parameter and then convert it to CPU", "\n", "#This is done as weight are need to be saved during training", "\n", "cpu", "(", "bn", ".", "bias", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "cpu", "(", "bn", ".", "weight", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "cpu", "(", "bn", ".", "running_mean", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "cpu", "(", "bn", ".", "running_var", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n", "\n", "", "else", ":", "\n", "                    ", "cpu", "(", "conv", ".", "bias", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n", "\n", "#Let us save the weights for the Convolutional layers", "\n", "", "cpu", "(", "conv", ".", "weight", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.get_test_input": [[32, 40], ["cv2.imread", "cv2.resize", "img[].transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "def", "get_test_input", "(", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "\"dog-cycle-car.png\"", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "416", ",", "416", ")", ")", "\n", "img_", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "img_", "=", "img_", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "/", "255.0", "\n", "img_", "=", "torch", ".", "from_numpy", "(", "img_", ")", ".", "float", "(", ")", "\n", "img_", "=", "Variable", "(", "img_", ")", "\n", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.parse_cfg": [[42, 72], ["open", "open.read().split", "blocks.append", "x.rstrip().lstrip", "open.read", "line[].rstrip", "line.split", "value.lstrip", "len", "x.rstrip", "len", "blocks.append", "key.rstrip"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "parse_cfg", "(", "cfgfile", ")", ":", "\n", "    ", "\"\"\"\n    Takes a configuration file\n    \n    Returns a list of blocks. Each blocks describes a block in the neural\n    network to be built. Block is represented as a dictionary in the list\n    \n    \"\"\"", "\n", "file", "=", "open", "(", "cfgfile", ",", "'r'", ")", "\n", "lines", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "#store the lines in a list", "\n", "lines", "=", "[", "x", "for", "x", "in", "lines", "if", "len", "(", "x", ")", ">", "0", "]", "#get read of the empty lines ", "\n", "lines", "=", "[", "x", "for", "x", "in", "lines", "if", "x", "[", "0", "]", "!=", "'#'", "]", "\n", "lines", "=", "[", "x", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "for", "x", "in", "lines", "]", "\n", "\n", "\n", "block", "=", "{", "}", "\n", "blocks", "=", "[", "]", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", "[", "0", "]", "==", "\"[\"", ":", "#This marks the start of a new block", "\n", "            ", "if", "len", "(", "block", ")", "!=", "0", ":", "\n", "                ", "blocks", ".", "append", "(", "block", ")", "\n", "block", "=", "{", "}", "\n", "", "block", "[", "\"type\"", "]", "=", "line", "[", "1", ":", "-", "1", "]", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "\"=\"", ")", "\n", "block", "[", "key", ".", "rstrip", "(", ")", "]", "=", "value", ".", "lstrip", "(", ")", "\n", "", "", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "return", "blocks", "\n", "#    print('\\n\\n'.join([repr(x) for x in blocks]))", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.darknet.create_modules": [[151, 300], ["torch.ModuleList", "torch.Sequential", "nn.ModuleList.append", "output_filters.append", "int", "int", "int", "int", "torch.Conv2d", "nn.Sequential.add_module", "int", "torch.BatchNorm2d", "nn.Sequential.add_module", "torch.LeakyReLU", "nn.Sequential.add_module", "int", "torch.Upsample", "nn.Sequential.add_module", "x[].split", "int", "len", "darknet.EmptyLayer", "nn.Sequential.add_module", "darknet.EmptyLayer", "nn.Sequential.add_module", "int", "darknet.EmptyLayer", "nn.Sequential.add_module", "int", "len", "int", "int", "nn.Sequential.add_module", "torch.MaxPool2d", "darknet.MaxPoolStride1", "x[].split", "x[].split", "darknet.DetectionLayer", "nn.Sequential.add_module", "print", "int", "int", "int", "range", "int", "len", "int"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "def", "create_modules", "(", "blocks", ")", ":", "\n", "    ", "net_info", "=", "blocks", "[", "0", "]", "#Captures the information about the input and pre-processing    ", "\n", "\n", "module_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "index", "=", "0", "#indexing blocks helps with implementing route  layers (skip connections)", "\n", "\n", "\n", "prev_filters", "=", "3", "\n", "\n", "output_filters", "=", "[", "]", "\n", "\n", "for", "x", "in", "blocks", ":", "\n", "        ", "module", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "(", "x", "[", "\"type\"", "]", "==", "\"net\"", ")", ":", "\n", "            ", "continue", "\n", "\n", "#If it's a convolutional layer", "\n", "", "if", "(", "x", "[", "\"type\"", "]", "==", "\"convolutional\"", ")", ":", "\n", "#Get the info about the layer", "\n", "            ", "activation", "=", "x", "[", "\"activation\"", "]", "\n", "try", ":", "\n", "                ", "batch_normalize", "=", "int", "(", "x", "[", "\"batch_normalize\"", "]", ")", "\n", "bias", "=", "False", "\n", "", "except", ":", "\n", "                ", "batch_normalize", "=", "0", "\n", "bias", "=", "True", "\n", "\n", "", "filters", "=", "int", "(", "x", "[", "\"filters\"", "]", ")", "\n", "padding", "=", "int", "(", "x", "[", "\"pad\"", "]", ")", "\n", "kernel_size", "=", "int", "(", "x", "[", "\"size\"", "]", ")", "\n", "stride", "=", "int", "(", "x", "[", "\"stride\"", "]", ")", "\n", "\n", "if", "padding", ":", "\n", "                ", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "", "else", ":", "\n", "                ", "pad", "=", "0", "\n", "\n", "#Add the convolutional layer", "\n", "", "conv", "=", "nn", ".", "Conv2d", "(", "prev_filters", ",", "filters", ",", "kernel_size", ",", "stride", ",", "pad", ",", "bias", "=", "bias", ")", "\n", "module", ".", "add_module", "(", "\"conv_{0}\"", ".", "format", "(", "index", ")", ",", "conv", ")", "\n", "\n", "#Add the Batch Norm Layer", "\n", "if", "batch_normalize", ":", "\n", "                ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "filters", ")", "\n", "module", ".", "add_module", "(", "\"batch_norm_{0}\"", ".", "format", "(", "index", ")", ",", "bn", ")", "\n", "\n", "#Check the activation. ", "\n", "#It is either Linear or a Leaky ReLU for YOLO", "\n", "", "if", "activation", "==", "\"leaky\"", ":", "\n", "                ", "activn", "=", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", "module", ".", "add_module", "(", "\"leaky_{0}\"", ".", "format", "(", "index", ")", ",", "activn", ")", "\n", "\n", "\n", "\n", "#If it's an upsampling layer", "\n", "#We use Bilinear2dUpsampling", "\n", "\n", "", "", "elif", "(", "x", "[", "\"type\"", "]", "==", "\"upsample\"", ")", ":", "\n", "            ", "stride", "=", "int", "(", "x", "[", "\"stride\"", "]", ")", "\n", "#            upsample = Upsample(stride)", "\n", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "module", ".", "add_module", "(", "\"upsample_{}\"", ".", "format", "(", "index", ")", ",", "upsample", ")", "\n", "\n", "#If it is a route layer", "\n", "", "elif", "(", "x", "[", "\"type\"", "]", "==", "\"route\"", ")", ":", "\n", "            ", "x", "[", "\"layers\"", "]", "=", "x", "[", "\"layers\"", "]", ".", "split", "(", "','", ")", "\n", "\n", "#Start  of a route", "\n", "start", "=", "int", "(", "x", "[", "\"layers\"", "]", "[", "0", "]", ")", "\n", "if", "len", "(", "x", "[", "\"layers\"", "]", ")", "<=", "2", ":", "\n", "#end, if there exists one.", "\n", "                ", "try", ":", "\n", "                    ", "end", "=", "int", "(", "x", "[", "\"layers\"", "]", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                    ", "end", "=", "0", "\n", "\n", "#Positive anotation", "\n", "", "if", "start", ">", "0", ":", "\n", "                    ", "start", "=", "start", "-", "index", "\n", "\n", "", "if", "end", ">", "0", ":", "\n", "                    ", "end", "=", "end", "-", "index", "\n", "\n", "\n", "", "route", "=", "EmptyLayer", "(", ")", "\n", "module", ".", "add_module", "(", "\"route_{0}\"", ".", "format", "(", "index", ")", ",", "route", ")", "\n", "\n", "\n", "\n", "if", "end", "<", "0", ":", "\n", "                    ", "filters", "=", "output_filters", "[", "index", "+", "start", "]", "+", "output_filters", "[", "index", "+", "end", "]", "\n", "", "else", ":", "\n", "                    ", "filters", "=", "output_filters", "[", "index", "+", "start", "]", "\n", "", "", "else", ":", "#SPP-route", "\n", "                ", "assert", "len", "(", "x", "[", "\"layers\"", "]", ")", "==", "4", "\n", "\n", "round", "=", "EmptyLayer", "(", ")", "\n", "module", ".", "add_module", "(", "\"route_{0}\"", ".", "format", "(", "index", ")", ",", "route", ")", "\n", "\n", "filters", "=", "output_filters", "[", "index", "+", "start", "]", "+", "output_filters", "[", "index", "+", "int", "(", "x", "[", "\"layers\"", "]", "[", "1", "]", ")", "]", "+", "output_filters", "[", "index", "+", "int", "(", "x", "[", "\"layers\"", "]", "[", "2", "]", ")", "]", "+", "output_filters", "[", "index", "+", "int", "(", "x", "[", "\"layers\"", "]", "[", "3", "]", ")", "]", "\n", "\n", "#shortcut corresponds to skip connection", "\n", "", "", "elif", "x", "[", "\"type\"", "]", "==", "\"shortcut\"", ":", "\n", "            ", "from_", "=", "int", "(", "x", "[", "\"from\"", "]", ")", "\n", "shortcut", "=", "EmptyLayer", "(", ")", "\n", "module", ".", "add_module", "(", "\"shortcut_{}\"", ".", "format", "(", "index", ")", ",", "shortcut", ")", "\n", "\n", "\n", "", "elif", "x", "[", "\"type\"", "]", "==", "\"maxpool\"", ":", "\n", "            ", "stride", "=", "int", "(", "x", "[", "\"stride\"", "]", ")", "\n", "size", "=", "int", "(", "x", "[", "\"size\"", "]", ")", "\n", "if", "stride", "!=", "1", ":", "\n", "                ", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "size", ",", "stride", ")", "\n", "", "else", ":", "\n", "                ", "maxpool", "=", "MaxPoolStride1", "(", "size", ")", "\n", "#maxpool = nn.MaxPool2d(size, stride=1, padding=size-1)", "\n", "\n", "", "module", ".", "add_module", "(", "\"maxpool_{}\"", ".", "format", "(", "index", ")", ",", "maxpool", ")", "\n", "\n", "#Yolo is the detection layer", "\n", "", "elif", "x", "[", "\"type\"", "]", "==", "\"yolo\"", ":", "\n", "            ", "mask", "=", "x", "[", "\"mask\"", "]", ".", "split", "(", "\",\"", ")", "\n", "mask", "=", "[", "int", "(", "x", ")", "for", "x", "in", "mask", "]", "\n", "\n", "\n", "anchors", "=", "x", "[", "\"anchors\"", "]", ".", "split", "(", "\",\"", ")", "\n", "anchors", "=", "[", "int", "(", "a", ")", "for", "a", "in", "anchors", "]", "\n", "anchors", "=", "[", "(", "anchors", "[", "i", "]", ",", "anchors", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "anchors", ")", ",", "2", ")", "]", "\n", "anchors", "=", "[", "anchors", "[", "i", "]", "for", "i", "in", "mask", "]", "\n", "\n", "detection", "=", "DetectionLayer", "(", "anchors", ")", "\n", "module", ".", "add_module", "(", "\"Detection_{}\"", ".", "format", "(", "index", ")", ",", "detection", ")", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Something I dunno\"", ")", "\n", "assert", "False", "\n", "\n", "", "module_list", ".", "append", "(", "module", ")", "\n", "prev_filters", "=", "filters", "\n", "output_filters", ".", "append", "(", "filters", ")", "\n", "index", "+=", "1", "\n", "\n", "\n", "", "return", "(", "net_info", ",", "module_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.count_parameters": [[17, 19], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.count_learnable_parameters": [[20, 22], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_learnable_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.convert2cpu": [[23, 28], ["torch.FloatTensor().copy_", "torch.FloatTensor().copy_", "torch.FloatTensor().copy_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "matrix.size"], "function", ["None"], ["", "def", "convert2cpu", "(", "matrix", ")", ":", "\n", "    ", "if", "matrix", ".", "is_cuda", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "matrix", ".", "size", "(", ")", ")", ".", "copy_", "(", "matrix", ")", "\n", "", "else", ":", "\n", "        ", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.predict_transform": [[29, 83], ["prediction.view.size", "len", "prediction.view.view", "prediction.view.transpose().contiguous", "prediction.view.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.arange", "numpy.meshgrid", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.cat().repeat().view().unsqueeze", "torch.cat().repeat().view().unsqueeze", "torch.cat().repeat().view().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "anchors.cuda.repeat().unsqueeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "prediction.view.size", "x_offset.cuda.cuda", "y_offset.cuda.cuda", "anchors.cuda.cuda", "torch.exp", "torch.exp", "torch.exp", "prediction.view.transpose", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cat().repeat().view", "torch.cat().repeat().view", "torch.cat().repeat().view", "anchors.cuda.repeat", "torch.cat().repeat", "torch.cat().repeat", "torch.cat().repeat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "", "def", "predict_transform", "(", "prediction", ",", "inp_dim", ",", "anchors", ",", "num_classes", ",", "CUDA", "=", "True", ")", ":", "\n", "    ", "batch_size", "=", "prediction", ".", "size", "(", "0", ")", "\n", "stride", "=", "inp_dim", "//", "prediction", ".", "size", "(", "2", ")", "\n", "grid_size", "=", "inp_dim", "//", "stride", "\n", "bbox_attrs", "=", "5", "+", "num_classes", "\n", "num_anchors", "=", "len", "(", "anchors", ")", "\n", "\n", "anchors", "=", "[", "(", "a", "[", "0", "]", "/", "stride", ",", "a", "[", "1", "]", "/", "stride", ")", "for", "a", "in", "anchors", "]", "\n", "\n", "\n", "\n", "prediction", "=", "prediction", ".", "view", "(", "batch_size", ",", "bbox_attrs", "*", "num_anchors", ",", "grid_size", "*", "grid_size", ")", "\n", "prediction", "=", "prediction", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "prediction", "=", "prediction", ".", "view", "(", "batch_size", ",", "grid_size", "*", "grid_size", "*", "num_anchors", ",", "bbox_attrs", ")", "\n", "\n", "\n", "#Sigmoid the  centre_X, centre_Y. and object confidencce", "\n", "prediction", "[", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "sigmoid", "(", "prediction", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "prediction", "[", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "sigmoid", "(", "prediction", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "prediction", "[", ":", ",", ":", ",", "4", "]", "=", "torch", ".", "sigmoid", "(", "prediction", "[", ":", ",", ":", ",", "4", "]", ")", "\n", "\n", "\n", "\n", "#Add the center offsets", "\n", "grid_len", "=", "np", ".", "arange", "(", "grid_size", ")", "\n", "a", ",", "b", "=", "np", ".", "meshgrid", "(", "grid_len", ",", "grid_len", ")", "\n", "\n", "x_offset", "=", "torch", ".", "FloatTensor", "(", "a", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "y_offset", "=", "torch", ".", "FloatTensor", "(", "b", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "if", "CUDA", ":", "\n", "        ", "x_offset", "=", "x_offset", ".", "cuda", "(", ")", "\n", "y_offset", "=", "y_offset", ".", "cuda", "(", ")", "\n", "\n", "", "x_y_offset", "=", "torch", ".", "cat", "(", "(", "x_offset", ",", "y_offset", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_anchors", ")", ".", "view", "(", "-", "1", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "prediction", "[", ":", ",", ":", ",", ":", "2", "]", "+=", "x_y_offset", "\n", "\n", "#log space transform height and the width", "\n", "anchors", "=", "torch", ".", "FloatTensor", "(", "anchors", ")", "\n", "\n", "if", "CUDA", ":", "\n", "        ", "anchors", "=", "anchors", ".", "cuda", "(", ")", "\n", "\n", "", "anchors", "=", "anchors", ".", "repeat", "(", "grid_size", "*", "grid_size", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "prediction", "[", ":", ",", ":", ",", "2", ":", "4", "]", "=", "torch", ".", "exp", "(", "prediction", "[", ":", ",", ":", ",", "2", ":", "4", "]", ")", "*", "anchors", "\n", "\n", "#Softmax the class scores", "\n", "prediction", "[", ":", ",", ":", ",", "5", ":", "5", "+", "num_classes", "]", "=", "torch", ".", "sigmoid", "(", "(", "prediction", "[", ":", ",", ":", ",", "5", ":", "5", "+", "num_classes", "]", ")", ")", "\n", "\n", "prediction", "[", ":", ",", ":", ",", ":", "4", "]", "*=", "stride", "\n", "\n", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.load_classes": [[84, 88], ["open", "open.read().split", "open.read"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read"], ["", "def", "load_classes", "(", "namesfile", ")", ":", "\n", "    ", "fp", "=", "open", "(", "namesfile", ",", "\"r\"", ")", "\n", "names", "=", "fp", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", ":", "-", "1", "]", "\n", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.get_im_dim": [[89, 93], ["cv2.imread"], "function", ["None"], ["", "def", "get_im_dim", "(", "im", ")", ":", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "im", ")", "\n", "w", ",", "h", "=", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "\n", "return", "w", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.unique": [[94, 102], ["tensor.cpu().numpy", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "tensor.new", "tensor.new.copy_", "tensor.cpu"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.unique"], ["", "def", "unique", "(", "tensor", ")", ":", "\n", "    ", "tensor_np", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "unique_np", "=", "np", ".", "unique", "(", "tensor_np", ")", "\n", "unique_tensor", "=", "torch", ".", "from_numpy", "(", "unique_np", ")", "\n", "\n", "tensor_res", "=", "tensor", ".", "new", "(", "unique_tensor", ".", "shape", ")", "\n", "tensor_res", ".", "copy_", "(", "unique_tensor", ")", "\n", "return", "tensor_res", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.dynamic_write_results": [[104, 115], ["prediction.clone", "util.write_results", "isinstance", "prediction.clone", "util.write_results", "prediction.clone.clone"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.write_results", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.write_results"], ["", "def", "dynamic_write_results", "(", "prediction", ",", "confidence", ",", "num_classes", ",", "nms", "=", "True", ",", "nms_conf", "=", "0.4", ")", ":", "\n", "    ", "prediction_bak", "=", "prediction", ".", "clone", "(", ")", "\n", "dets", "=", "write_results", "(", "prediction", ".", "clone", "(", ")", ",", "confidence", ",", "num_classes", ",", "nms", ",", "nms_conf", ")", "\n", "if", "isinstance", "(", "dets", ",", "int", ")", ":", "\n", "        ", "return", "dets", "\n", "\n", "", "if", "dets", ".", "shape", "[", "0", "]", ">", "100", ":", "\n", "        ", "nms_conf", "-=", "0.05", "\n", "dets", "=", "write_results", "(", "prediction_bak", ".", "clone", "(", ")", ",", "confidence", ",", "num_classes", ",", "nms", ",", "nms_conf", ")", "\n", "\n", "", "return", "dets", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.write_results": [[117, 217], ["prediction.new", "prediction.size", "prediction.new", "range", "torch.nonzero().transpose().contiguous", "torch.nonzero().transpose().contiguous", "torch.nonzero().transpose().contiguous", "torch.max", "torch.max", "torch.max", "max_conf.float().unsqueeze.float().unsqueeze", "max_conf_score.float().unsqueeze.float().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero", "torch.nonzero", "torch.nonzero", "image_pred[].view", "prediction.size", "util.unique", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "image_pred_[].view", "image_pred_[].view.size", "image_pred_[].view.new().fill_", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "max_conf.float().unsqueeze.float", "max_conf_score.float().unsqueeze.float", "torch.sort", "torch.sort", "torch.sort", "image_pred_[].view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero", "torch.nonzero", "torch.nonzero", "max_detections.append", "bbox_iou", "torch.cat", "torch.cat", "torch.cat", "image_pred_[].view.new", "torch.nonzero", "torch.nonzero", "torch.nonzero", "image_pred_class[].unsqueeze", "len", "image_pred_[].view.size", "torch.nonzero.squeeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.unique", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.bbox_iou", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "write_results", "(", "prediction", ",", "confidence", ",", "num_classes", ",", "nms", "=", "True", ",", "nms_conf", "=", "0.4", ")", ":", "\n", "    ", "conf_mask", "=", "(", "prediction", "[", ":", ",", ":", ",", "4", "]", ">", "confidence", ")", ".", "float", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", "\n", "prediction", "=", "prediction", "*", "conf_mask", "\n", "\n", "try", ":", "\n", "        ", "ind_nz", "=", "torch", ".", "nonzero", "(", "prediction", "[", ":", ",", ":", ",", "4", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "except", ":", "\n", "        ", "return", "0", "\n", "\n", "", "box_a", "=", "prediction", ".", "new", "(", "prediction", ".", "shape", ")", "\n", "box_a", "[", ":", ",", ":", ",", "0", "]", "=", "(", "prediction", "[", ":", ",", ":", ",", "0", "]", "-", "prediction", "[", ":", ",", ":", ",", "2", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", ":", ",", "1", "]", "=", "(", "prediction", "[", ":", ",", ":", ",", "1", "]", "-", "prediction", "[", ":", ",", ":", ",", "3", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", ":", ",", "2", "]", "=", "(", "prediction", "[", ":", ",", ":", ",", "0", "]", "+", "prediction", "[", ":", ",", ":", ",", "2", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", ":", ",", "3", "]", "=", "(", "prediction", "[", ":", ",", ":", ",", "1", "]", "+", "prediction", "[", ":", ",", ":", ",", "3", "]", "/", "2", ")", "\n", "prediction", "[", ":", ",", ":", ",", ":", "4", "]", "=", "box_a", "[", ":", ",", ":", ",", ":", "4", "]", "\n", "\n", "batch_size", "=", "prediction", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "prediction", ".", "new", "(", "1", ",", "prediction", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "write", "=", "False", "\n", "num", "=", "0", "\n", "for", "ind", "in", "range", "(", "batch_size", ")", ":", "\n", "#select the image from the batch", "\n", "        ", "image_pred", "=", "prediction", "[", "ind", "]", "\n", "\n", "#Get the class having maximum score, and the index of that class", "\n", "#Get rid of num_classes softmax scores ", "\n", "#Add the class index and the class score of class having maximum score", "\n", "max_conf", ",", "max_conf_score", "=", "torch", ".", "max", "(", "image_pred", "[", ":", ",", "5", ":", "5", "+", "num_classes", "]", ",", "1", ")", "\n", "max_conf", "=", "max_conf", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "max_conf_score", "=", "max_conf_score", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "seq", "=", "(", "image_pred", "[", ":", ",", ":", "5", "]", ",", "max_conf", ",", "max_conf_score", ")", "\n", "image_pred", "=", "torch", ".", "cat", "(", "seq", ",", "1", ")", "\n", "\n", "#Get rid of the zero entries", "\n", "non_zero_ind", "=", "(", "torch", ".", "nonzero", "(", "image_pred", "[", ":", ",", "4", "]", ")", ")", "\n", "\n", "image_pred_", "=", "image_pred", "[", "non_zero_ind", ".", "squeeze", "(", ")", ",", ":", "]", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "\n", "#Get the various classes detected in the image", "\n", "try", ":", "\n", "            ", "img_classes", "=", "unique", "(", "image_pred_", "[", ":", ",", "-", "1", "]", ")", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "\n", "#WE will do NMS classwise", "\n", "#print(img_classes)", "\n", "", "for", "cls", "in", "img_classes", ":", "\n", "            ", "if", "cls", "!=", "0", ":", "\n", "                ", "continue", "\n", "#get the detections with one particular class", "\n", "", "cls_mask", "=", "image_pred_", "*", "(", "image_pred_", "[", ":", ",", "-", "1", "]", "==", "cls", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "class_mask_ind", "=", "torch", ".", "nonzero", "(", "cls_mask", "[", ":", ",", "-", "2", "]", ")", ".", "squeeze", "(", ")", "\n", "\n", "image_pred_class", "=", "image_pred_", "[", "class_mask_ind", "]", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "\n", "#sort the detections such that the entry with the maximum objectness", "\n", "#confidence is at the top", "\n", "conf_sort_index", "=", "torch", ".", "sort", "(", "image_pred_class", "[", ":", ",", "4", "]", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "image_pred_class", "=", "image_pred_class", "[", "conf_sort_index", "]", "\n", "idx", "=", "image_pred_class", ".", "size", "(", "0", ")", "\n", "\n", "#if nms has to be done", "\n", "if", "nms", ":", "\n", "# Perform non-maximum suppression", "\n", "                ", "max_detections", "=", "[", "]", "\n", "while", "image_pred_class", ".", "size", "(", "0", ")", ":", "\n", "# Get detection with highest confidence and save as max detection", "\n", "                    ", "max_detections", ".", "append", "(", "image_pred_class", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# Stop if we're at the last detection", "\n", "if", "len", "(", "image_pred_class", ")", "==", "1", ":", "\n", "                        ", "break", "\n", "# Get the IOUs for all boxes with lower confidence", "\n", "", "ious", "=", "bbox_iou", "(", "max_detections", "[", "-", "1", "]", ",", "image_pred_class", "[", "1", ":", "]", ")", "\n", "# Remove detections with IoU >= NMS threshold", "\n", "image_pred_class", "=", "image_pred_class", "[", "1", ":", "]", "[", "ious", "<", "nms_conf", "]", "\n", "\n", "", "image_pred_class", "=", "torch", ".", "cat", "(", "max_detections", ")", ".", "data", "\n", "\n", "\n", "#Concatenate the batch_id of the image to the detection", "\n", "#this helps us identify which image does the detection correspond to ", "\n", "#We use a linear straucture to hold ALL the detections from the batch", "\n", "#the batch_dim is flattened", "\n", "#batch is identified by extra batch column", "\n", "\n", "", "batch_ind", "=", "image_pred_class", ".", "new", "(", "image_pred_class", ".", "size", "(", "0", ")", ",", "1", ")", ".", "fill_", "(", "ind", ")", "\n", "seq", "=", "batch_ind", ",", "image_pred_class", "\n", "if", "not", "write", ":", "\n", "                ", "output", "=", "torch", ".", "cat", "(", "seq", ",", "1", ")", "\n", "write", "=", "True", "\n", "", "else", ":", "\n", "                ", "out", "=", "torch", ".", "cat", "(", "seq", ",", "1", ")", "\n", "output", "=", "torch", ".", "cat", "(", "(", "output", ",", "out", ")", ")", "\n", "", "num", "+=", "1", "\n", "\n", "", "", "if", "not", "num", ":", "\n", "        ", "return", "0", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.predict_transform_half": [[226, 277], ["prediction.view.size", "len", "prediction.view.view", "prediction.view.transpose().contiguous", "prediction.view.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.arange", "numpy.meshgrid", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.cat().repeat().view().unsqueeze", "torch.cat().repeat().view().unsqueeze", "torch.cat().repeat().view().unsqueeze", "torch.HalfTensor", "torch.HalfTensor", "torch.HalfTensor", "anchors.cuda.repeat().unsqueeze", "prediction.view.size", "x_offset.cuda().half.cuda().half", "y_offset.cuda().half.cuda().half", "anchors.cuda.cuda", "torch.exp", "torch.exp", "torch.exp", "prediction.view.transpose", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cat().repeat().view", "torch.cat().repeat().view", "torch.cat().repeat().view", "anchors.cuda.repeat", "torch.Softmax", "torch.autograd.Variable", "x_offset.cuda().half.cuda", "y_offset.cuda().half.cuda", "torch.cat().repeat", "torch.cat().repeat", "torch.cat().repeat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["def", "predict_transform_half", "(", "prediction", ",", "inp_dim", ",", "anchors", ",", "num_classes", ",", "CUDA", "=", "True", ")", ":", "\n", "    ", "batch_size", "=", "prediction", ".", "size", "(", "0", ")", "\n", "stride", "=", "inp_dim", "//", "prediction", ".", "size", "(", "2", ")", "\n", "\n", "bbox_attrs", "=", "5", "+", "num_classes", "\n", "num_anchors", "=", "len", "(", "anchors", ")", "\n", "grid_size", "=", "inp_dim", "//", "stride", "\n", "\n", "\n", "prediction", "=", "prediction", ".", "view", "(", "batch_size", ",", "bbox_attrs", "*", "num_anchors", ",", "grid_size", "*", "grid_size", ")", "\n", "prediction", "=", "prediction", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "prediction", "=", "prediction", ".", "view", "(", "batch_size", ",", "grid_size", "*", "grid_size", "*", "num_anchors", ",", "bbox_attrs", ")", "\n", "\n", "\n", "#Sigmoid the  centre_X, centre_Y. and object confidencce", "\n", "prediction", "[", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "sigmoid", "(", "prediction", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "prediction", "[", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "sigmoid", "(", "prediction", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "prediction", "[", ":", ",", ":", ",", "4", "]", "=", "torch", ".", "sigmoid", "(", "prediction", "[", ":", ",", ":", ",", "4", "]", ")", "\n", "\n", "\n", "#Add the center offsets", "\n", "grid_len", "=", "np", ".", "arange", "(", "grid_size", ")", "\n", "a", ",", "b", "=", "np", ".", "meshgrid", "(", "grid_len", ",", "grid_len", ")", "\n", "\n", "x_offset", "=", "torch", ".", "FloatTensor", "(", "a", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "y_offset", "=", "torch", ".", "FloatTensor", "(", "b", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "if", "CUDA", ":", "\n", "        ", "x_offset", "=", "x_offset", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "y_offset", "=", "y_offset", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "\n", "", "x_y_offset", "=", "torch", ".", "cat", "(", "(", "x_offset", ",", "y_offset", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_anchors", ")", ".", "view", "(", "-", "1", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "prediction", "[", ":", ",", ":", ",", ":", "2", "]", "+=", "x_y_offset", "\n", "\n", "#log space transform height and the width", "\n", "anchors", "=", "torch", ".", "HalfTensor", "(", "anchors", ")", "\n", "\n", "if", "CUDA", ":", "\n", "        ", "anchors", "=", "anchors", ".", "cuda", "(", ")", "\n", "\n", "", "anchors", "=", "anchors", ".", "repeat", "(", "grid_size", "*", "grid_size", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "prediction", "[", ":", ",", ":", ",", "2", ":", "4", "]", "=", "torch", ".", "exp", "(", "prediction", "[", ":", ",", ":", ",", "2", ":", "4", "]", ")", "*", "anchors", "\n", "\n", "#Softmax the class scores", "\n", "prediction", "[", ":", ",", ":", ",", "5", ":", "5", "+", "num_classes", "]", "=", "nn", ".", "Softmax", "(", "-", "1", ")", "(", "Variable", "(", "prediction", "[", ":", ",", ":", ",", "5", ":", "5", "+", "num_classes", "]", ")", ")", ".", "data", "\n", "\n", "prediction", "[", ":", ",", ":", ",", ":", "4", "]", "*=", "stride", "\n", "\n", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.write_results_half": [[279, 388], ["prediction.new", "prediction.size", "prediction.new", "range", "torch.nonzero().transpose().contiguous", "torch.nonzero().transpose().contiguous", "torch.nonzero().transpose().contiguous", "torch.max", "torch.max", "torch.max", "max_conf.half().unsqueeze.half().unsqueeze", "max_conf_score.half().unsqueeze.half().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero", "torch.nonzero", "torch.nonzero", "unique().half", "prediction.size", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "image_pred_class.size", "image_pred_class.new().fill_", "torch.nonzero().transpose", "torch.nonzero().transpose", "torch.nonzero().transpose", "max_conf.half().unsqueeze.half", "max_conf_score.half().unsqueeze.half", "util.unique", "torch.sort", "torch.sort", "torch.sort", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image_pred_[].long", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "image_pred_class.new", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero().squeeze.squeeze", "bbox_iou", "image_pred_class.size", "image_pred_class[].unsqueeze", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.util.unique", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.yolo.bbox.bbox_iou"], ["", "def", "write_results_half", "(", "prediction", ",", "confidence", ",", "num_classes", ",", "nms", "=", "True", ",", "nms_conf", "=", "0.4", ")", ":", "\n", "    ", "conf_mask", "=", "(", "prediction", "[", ":", ",", ":", ",", "4", "]", ">", "confidence", ")", ".", "half", "(", ")", ".", "unsqueeze", "(", "2", ")", "\n", "prediction", "=", "prediction", "*", "conf_mask", "\n", "\n", "try", ":", "\n", "        ", "ind_nz", "=", "torch", ".", "nonzero", "(", "prediction", "[", ":", ",", ":", ",", "4", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "except", ":", "\n", "        ", "return", "0", "\n", "\n", "\n", "\n", "", "box_a", "=", "prediction", ".", "new", "(", "prediction", ".", "shape", ")", "\n", "box_a", "[", ":", ",", ":", ",", "0", "]", "=", "(", "prediction", "[", ":", ",", ":", ",", "0", "]", "-", "prediction", "[", ":", ",", ":", ",", "2", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", ":", ",", "1", "]", "=", "(", "prediction", "[", ":", ",", ":", ",", "1", "]", "-", "prediction", "[", ":", ",", ":", ",", "3", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", ":", ",", "2", "]", "=", "(", "prediction", "[", ":", ",", ":", ",", "0", "]", "+", "prediction", "[", ":", ",", ":", ",", "2", "]", "/", "2", ")", "\n", "box_a", "[", ":", ",", ":", ",", "3", "]", "=", "(", "prediction", "[", ":", ",", ":", ",", "1", "]", "+", "prediction", "[", ":", ",", ":", ",", "3", "]", "/", "2", ")", "\n", "prediction", "[", ":", ",", ":", ",", ":", "4", "]", "=", "box_a", "[", ":", ",", ":", ",", ":", "4", "]", "\n", "\n", "\n", "\n", "batch_size", "=", "prediction", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "prediction", ".", "new", "(", "1", ",", "prediction", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "write", "=", "False", "\n", "\n", "for", "ind", "in", "range", "(", "batch_size", ")", ":", "\n", "#select the image from the batch", "\n", "        ", "image_pred", "=", "prediction", "[", "ind", "]", "\n", "\n", "\n", "#Get the class having maximum score, and the index of that class", "\n", "#Get rid of num_classes softmax scores ", "\n", "#Add the class index and the class score of class having maximum score", "\n", "max_conf", ",", "max_conf_score", "=", "torch", ".", "max", "(", "image_pred", "[", ":", ",", "5", ":", "5", "+", "num_classes", "]", ",", "1", ")", "\n", "max_conf", "=", "max_conf", ".", "half", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "max_conf_score", "=", "max_conf_score", ".", "half", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "seq", "=", "(", "image_pred", "[", ":", ",", ":", "5", "]", ",", "max_conf", ",", "max_conf_score", ")", "\n", "image_pred", "=", "torch", ".", "cat", "(", "seq", ",", "1", ")", "\n", "\n", "\n", "#Get rid of the zero entries", "\n", "non_zero_ind", "=", "(", "torch", ".", "nonzero", "(", "image_pred", "[", ":", ",", "4", "]", ")", ")", "\n", "try", ":", "\n", "            ", "image_pred_", "=", "image_pred", "[", "non_zero_ind", ".", "squeeze", "(", ")", ",", ":", "]", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "\n", "#Get the various classes detected in the image", "\n", "", "img_classes", "=", "unique", "(", "image_pred_", "[", ":", ",", "-", "1", "]", ".", "long", "(", ")", ")", ".", "half", "(", ")", "\n", "\n", "\n", "\n", "\n", "#WE will do NMS classwise", "\n", "for", "cls", "in", "img_classes", ":", "\n", "#get the detections with one particular class", "\n", "            ", "cls_mask", "=", "image_pred_", "*", "(", "image_pred_", "[", ":", ",", "-", "1", "]", "==", "cls", ")", ".", "half", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "class_mask_ind", "=", "torch", ".", "nonzero", "(", "cls_mask", "[", ":", ",", "-", "2", "]", ")", ".", "squeeze", "(", ")", "\n", "\n", "\n", "image_pred_class", "=", "image_pred_", "[", "class_mask_ind", "]", "\n", "\n", "\n", "#sort the detections such that the entry with the maximum objectness", "\n", "#confidence is at the top", "\n", "conf_sort_index", "=", "torch", ".", "sort", "(", "image_pred_class", "[", ":", ",", "4", "]", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "image_pred_class", "=", "image_pred_class", "[", "conf_sort_index", "]", "\n", "idx", "=", "image_pred_class", ".", "size", "(", "0", ")", "\n", "\n", "#if nms has to be done", "\n", "if", "nms", ":", "\n", "#For each detection", "\n", "                ", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "#Get the IOUs of all boxes that come after the one we are looking at ", "\n", "#in the loop", "\n", "                    ", "try", ":", "\n", "                        ", "ious", "=", "bbox_iou", "(", "image_pred_class", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "image_pred_class", "[", "i", "+", "1", ":", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "break", "\n", "\n", "", "except", "IndexError", ":", "\n", "                        ", "break", "\n", "\n", "#Zero out all the detections that have IoU > treshhold", "\n", "", "iou_mask", "=", "(", "ious", "<", "nms_conf", ")", ".", "half", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "image_pred_class", "[", "i", "+", "1", ":", "]", "*=", "iou_mask", "\n", "\n", "#Remove the non-zero entries", "\n", "non_zero_ind", "=", "torch", ".", "nonzero", "(", "image_pred_class", "[", ":", ",", "4", "]", ")", ".", "squeeze", "(", ")", "\n", "image_pred_class", "=", "image_pred_class", "[", "non_zero_ind", "]", "\n", "\n", "\n", "\n", "#Concatenate the batch_id of the image to the detection", "\n", "#this helps us identify which image does the detection correspond to ", "\n", "#We use a linear straucture to hold ALL the detections from the batch", "\n", "#the batch_dim is flattened", "\n", "#batch is identified by extra batch column", "\n", "", "", "batch_ind", "=", "image_pred_class", ".", "new", "(", "image_pred_class", ".", "size", "(", "0", ")", ",", "1", ")", ".", "fill_", "(", "ind", ")", "\n", "seq", "=", "batch_ind", ",", "image_pred_class", "\n", "\n", "if", "not", "write", ":", "\n", "                ", "output", "=", "torch", ".", "cat", "(", "seq", ",", "1", ")", "\n", "write", "=", "True", "\n", "", "else", ":", "\n", "                ", "out", "=", "torch", ".", "cat", "(", "seq", ",", "1", ")", "\n", "output", "=", "torch", ".", "cat", "(", "(", "output", ",", "out", ")", ")", "\n", "\n", "", "", "", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.Skeleton.parents": [[77, 80], ["np.array"], "methods", ["None"], ["    ", "def", "parents", "(", "self", ")", ":", "\n", "# return np.array([-1, 0, 1, 2, 0, 4, 5, 0, 7, 8, 9, 8, 11, 12, 8, 14, 15])", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "8", ",", "10", ",", "11", ",", "8", ",", "13", ",", "14", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.Skeleton.joints_right": [[83, 86], ["None"], "methods", ["None"], ["", "def", "joints_right", "(", "self", ")", ":", "\n", "# return [1, 2, 3, 9, 10]", "\n", "        ", "return", "[", "1", ",", "2", ",", "3", ",", "13", ",", "14", ",", "15", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.update_time": [[7, 12], ["time.time", "time.time", "time.time", "float"], "function", ["None"], ["def", "update_time", "(", "ckpt", "=", "None", ")", ":", "\n", "    ", "if", "not", "ckpt", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ",", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.mkd": [[13, 21], ["os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["", "", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.convert_AlphaOpenposeCoco_to_standard16Joint": [[22, 45], ["np.stack", "np.transpose", "np.concatenate"], "function", ["None"], ["", "", "def", "convert_AlphaOpenposeCoco_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    ", "\"\"\"\n    pose_x: nx17x2\n    https://zhuanlan.zhihu.com/p/367707179\n    \"\"\"", "\n", "hip", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "11", "]", "+", "pose_x", "[", ":", ",", "12", "]", ")", "\n", "neck", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "5", "]", "+", "pose_x", "[", ":", ",", "6", "]", ")", "\n", "spine", "=", "0.5", "*", "(", "neck", "+", "hip", ")", "\n", "\n", "# head = 0.5 * (pose_x[:, 1] + pose_x[:, 2])", "\n", "\n", "head_0", "=", "pose_x", "[", ":", ",", "0", "]", "# by noise", "\n", "head_1", "=", "(", "neck", "-", "hip", ")", "*", "0.5", "+", "neck", "# by backbone", "\n", "head_2", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "1", "]", "+", "pose_x", "[", ":", ",", "2", "]", ")", "# by two eye", "\n", "head_3", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "3", "]", "+", "pose_x", "[", ":", ",", "4", "]", ")", "# by two ear", "\n", "head", "=", "head_0", "*", "0.1", "+", "head_1", "*", "0.6", "+", "head_2", "*", "0.1", "+", "head_3", "*", "0.2", "\n", "\n", "combine", "=", "np", ".", "stack", "(", "[", "hip", ",", "spine", ",", "neck", ",", "head", "]", ")", "# 0 1 2 3 ---> 17, 18, 19 ,20", "\n", "combine", "=", "np", ".", "transpose", "(", "combine", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "combine", "=", "np", ".", "concatenate", "(", "[", "pose_x", ",", "combine", "]", ",", "axis", "=", "1", ")", "\n", "reorder", "=", "[", "17", ",", "12", ",", "14", ",", "16", ",", "11", ",", "13", ",", "15", ",", "18", ",", "19", ",", "20", ",", "5", ",", "7", ",", "9", ",", "6", ",", "8", ",", "10", "]", "\n", "standart_16joint", "=", "combine", "[", ":", ",", "reorder", "]", "\n", "return", "standart_16joint", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.convert_hhr_to_standard16Joint": [[46, 56], ["np.delete"], "function", ["None"], ["", "def", "convert_hhr_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    ", "\"\"\"\n    pose_x: nx17x2\n    https://zhuanlan.zhihu.com/p/367707179\n    \"\"\"", "\n", "re_order", "=", "[", "3", ",", "12", ",", "14", ",", "16", ",", "11", ",", "13", ",", "15", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "7", ",", "9", ",", "6", ",", "8", ",", "10", "]", "\n", "standart_17joint", "=", "pose_x", "[", ":", ",", "re_order", "]", "\n", "standart_16joint", "=", "np", ".", "delete", "(", "standart_17joint", ",", "9", ",", "axis", "=", "1", ")", "\n", "# standart_16joint = np.delete(standart_17joint, 10, axis=1)", "\n", "return", "standart_16joint", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.get_detector_2d": [[57, 74], ["None"], "function", ["None"], ["", "def", "get_detector_2d", "(", "detector_name", ")", ":", "\n", "    ", "def", "get_alpha_pose", "(", ")", ":", "\n", "        ", "from", "joints_detectors", ".", "Alphapose", ".", "gene_npz", "import", "generate_kpts", "as", "alpha_pose", "\n", "return", "alpha_pose", "\n", "\n", "# def get_hr_pose():", "\n", "#     from joints_detectors.hrnet.pose_estimation.video import generate_kpts as hr_pose", "\n", "#     return hr_pose", "\n", "\n", "", "detector_map", "=", "{", "\n", "'alpha_pose'", ":", "get_alpha_pose", ",", "\n", "# 'hr_pose': get_hr_pose,", "\n", "}", "\n", "\n", "assert", "detector_name", "in", "detector_map", ",", "f'2D detector: {detector_name} not implemented yet!'", "\n", "\n", "return", "detector_map", "[", "detector_name", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tool.utils.image_sequence_to_video": [[90, 102], ["print", "os.path.isfile", "moviepy.video.io.ImageSequenceClip.ImageSequenceClip", "moviepy.video.io.ImageSequenceClip.ImageSequenceClip.write_videofile", "print", "cv2.imread"], "function", ["None"], ["def", "image_sequence_to_video", "(", "img_lst", ",", "output_path", ",", "frame_rate", ")", ":", "\n", "# frame_size = (500, 500)", "\n", "# output_path = 'output_video.mp4'", "\n", "# frame_rate = 25", "\n", "    ", "frame_size", "=", "cv2", ".", "imread", "(", "img_lst", "[", "0", "]", ")", ".", "shape", "[", ":", "2", "]", "\n", "print", "(", "'frame_size: {}'", ".", "format", "(", "frame_size", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "output_path", ")", ":", "\n", "        ", "clip", "=", "moviepy", ".", "video", ".", "io", ".", "ImageSequenceClip", ".", "ImageSequenceClip", "(", "img_lst", ",", "fps", "=", "frame_rate", ")", "\n", "clip", ".", "write_videofile", "(", "output_path", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'{} exist already.'", ".", "format", "(", "output_path", ")", ")", "\n", "", "return", "frame_size", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.normalize_screen_coordinates": [[15, 20], ["None"], "function", ["None"], ["def", "normalize_screen_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "# Normalize so that [0, w] is mapped to [-1, 1], while preserving the aspect ratio", "\n", "return", "X", "/", "w", "*", "2", "-", "[", "1", ",", "h", "/", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.normalize_screen_coordinates_new": [[22, 26], ["None"], "function", ["None"], ["", "def", "normalize_screen_coordinates_new", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "return", "(", "X", "-", "(", "w", "/", "2", ",", "h", "/", "2", ")", ")", "/", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.image_coordinates_new": [[28, 33], ["None"], "function", ["None"], ["", "def", "image_coordinates_new", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "# Reverse camera frame normalization", "\n", "return", "(", "X", "*", "(", "w", "/", "2", ",", "h", "/", "2", ")", ")", "+", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.image_coordinates": [[22, 27], ["None"], "function", ["None"], ["", "def", "normalize_screen_coordinates_new", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "return", "(", "X", "-", "(", "w", "/", "2", ",", "h", "/", "2", ")", ")", "/", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world_to_camera": [[32, 35], ["common.utils.wrap", "common.utils.wrap", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.wrap", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.wrap"], ["return", "(", "X", "*", "(", "w", "/", "2", ",", "h", "/", "2", ")", ")", "+", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "\n", "\n", "", "def", "image_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.camera_to_world": [[37, 39], ["common.utils.wrap", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.wrap"], ["\n", "# Reverse camera frame normalization", "\n", "return", "(", "X", "+", "[", "1", ",", "h", "/", "w", "]", ")", "*", "w", "/", "2", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.project_to_2d": [[267, 298], ["torch.clamp", "torch.sum", "torch.sum", "len", "len", "len", "camera_params.unsqueeze.unsqueeze", "torch.sum", "len", "torch.cat", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.project_to_2d_linear": [[299, 321], ["torch.clamp", "len", "len", "len", "camera_params.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.arguments.parse_args": [[10, 138], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "exit", "print", "exit", "str().lower", "str().lower", "str", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args"], ["\n", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Training script'", ")", "\n", "\n", "# General arguments", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dataset'", ",", "default", "=", "'h36m'", ",", "type", "=", "str", ",", "metavar", "=", "'NAME'", ",", "help", "=", "'target dataset'", ")", "# h36m or humaneva", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "'--keypoints'", ",", "default", "=", "'gt'", ",", "type", "=", "str", ",", "metavar", "=", "'NAME'", ",", "help", "=", "'2D detections to use'", ")", "\n", "parser", ".", "add_argument", "(", "'-str'", ",", "'--subjects-train'", ",", "default", "=", "'S1,S5,S6,S7,S8'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'training subjects separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'-ste'", ",", "'--subjects-test'", ",", "default", "=", "'S9,S11'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "help", "=", "'test subjects separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'-sun'", ",", "'--subjects-unlabeled'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'unlabeled subjects separated by comma for self-supervision'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--actions'", ",", "default", "=", "'*'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "help", "=", "'actions to train/test on, separated by comma, or * for all'", ")", "\n", "parser", ".", "add_argument", "(", "'-c'", ",", "'--checkpoint'", ",", "default", "=", "'checkpoint'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'checkpoint directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint-frequency'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'create a checkpoint every N epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'FILENAME'", ",", "\n", "help", "=", "'checkpoint to resume (file name)'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "default", "=", "'pretrained_h36m_detectron_coco.bin'", ",", "type", "=", "str", ",", "metavar", "=", "'FILENAME'", ",", "help", "=", "'checkpoint to evaluate (file name)'", ")", "\n", "parser", ".", "add_argument", "(", "'--render'", ",", "action", "=", "'store_true'", ",", "help", "=", "'visualize a particular video'", ")", "\n", "parser", ".", "add_argument", "(", "'--by-subject'", ",", "action", "=", "'store_true'", ",", "help", "=", "'break down error by subject (on evaluation)'", ")", "\n", "parser", ".", "add_argument", "(", "'--export-training-curves'", ",", "action", "=", "'store_true'", ",", "help", "=", "'save training curves as .png images'", ")", "\n", "\n", "# Model arguments", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--stride'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'chunk size to use during training'", ")", "\n", "parser", ".", "add_argument", "(", "'-e'", ",", "'--epochs'", ",", "default", "=", "60", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'batch size in terms of predicted frames'", ")", "\n", "parser", ".", "add_argument", "(", "'-drop'", ",", "'--dropout'", ",", "default", "=", "0.25", ",", "type", "=", "float", ",", "metavar", "=", "'P'", ",", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "'--learning-rate'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'-lrd'", ",", "'--lr-decay'", ",", "default", "=", "0.95", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "help", "=", "'learning rate decay per epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'-no-da'", ",", "'--no-data-augmentation'", ",", "dest", "=", "'data_augmentation'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'disable train-time flipping'", ")", "\n", "parser", ".", "add_argument", "(", "'-no-tta'", ",", "'--no-test-time-augmentation'", ",", "dest", "=", "'test_time_augmentation'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'disable test-time flipping'", ")", "\n", "parser", ".", "add_argument", "(", "'-arc'", ",", "'--architecture'", ",", "default", "=", "'3,3,3,3,3'", ",", "type", "=", "str", ",", "metavar", "=", "'LAYERS'", ",", "help", "=", "'filter widths separated by comma'", ")", "\n", "parser", ".", "add_argument", "(", "'--causal'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use causal convolutions for real-time processing'", ")", "\n", "parser", ".", "add_argument", "(", "'-ch'", ",", "'--channels'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of channels in convolution layers'", ")", "\n", "\n", "# Experimental", "\n", "parser", ".", "add_argument", "(", "'--subset'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'FRACTION'", ",", "help", "=", "'reduce dataset size by fraction'", ")", "\n", "parser", ".", "add_argument", "(", "'--downsample'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'FACTOR'", ",", "help", "=", "'downsample frame rate by factor (semi-supervised)'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'warm-up epochs for semi-supervision'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable epoch evaluation while training (small speed-up)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dense'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use dense convolutions instead of dilated convolutions'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-optimizations'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable optimized model for single-frame predictions'", ")", "\n", "parser", ".", "add_argument", "(", "'--linear-projection'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use only linear coefficients for semi-supervised projection'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-bone-length'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'bone_length_term'", ",", "\n", "help", "=", "'disable bone length term in semi-supervised settings'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-proj'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable projection for semi-supervised setting'", ")", "\n", "\n", "# Visualization", "\n", "parser", ".", "add_argument", "(", "'--viz-subject'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "help", "=", "'subject to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-action'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "help", "=", "'action to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-camera'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "help", "=", "'camera to render'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-video'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "help", "=", "'path to input video'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-skip'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "help", "=", "'skip first N frames of input video'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-output'", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "help", "=", "'output file name (.gif or .mp4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-bitrate'", ",", "type", "=", "int", ",", "default", "=", "30000", ",", "metavar", "=", "'N'", ",", "help", "=", "'bitrate for mp4 videos'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-no-ground-truth'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not show ground-truth poses'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-limit'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "help", "=", "'only render first N frames'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-downsample'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "help", "=", "'downsample FPS by a factor N'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz-size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "help", "=", "'image size'", ")", "\n", "# self add", "\n", "parser", ".", "add_argument", "(", "'--input-npz'", ",", "dest", "=", "'input_npz'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'input 2d numpy file'", ")", "\n", "parser", ".", "add_argument", "(", "'--video'", ",", "dest", "=", "'input_video'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'input video name'", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "bone_length_term", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "data_augmentation", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "test_time_augmentation", "=", "True", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# Check invalid configuration", "\n", "if", "args", ".", "resume", "and", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "'Invalid flags: --resume and --evaluate cannot be set at the same time'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "if", "args", ".", "export_training_curves", "and", "args", ".", "no_eval", ":", "\n", "        ", "print", "(", "'Invalid flags: --export-training-curves and --no-eval cannot be set at the same time'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time": [[21, 28], ["time.time", "print", "time.time", "time.time", "float", "time.time", "float"], "function", ["None"], ["def", "ckpt_time", "(", "ckpt", "=", "None", ",", "display", "=", "0", ",", "desc", "=", "''", ")", ":", "\n", "    ", "if", "not", "ckpt", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "display", ":", "\n", "            ", "print", "(", "desc", "+", "' consume time {:0.4f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ")", ")", "\n", "", "return", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ",", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.set_equal_aspect": [[30, 46], ["numpy.array().max", "zip", "ax.plot", "numpy.array", "[].flatten", "[].flatten", "[].flatten", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min"], "function", ["None"], ["", "", "def", "set_equal_aspect", "(", "ax", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    Create white cubic bounding box to make sure that 3d axis is in equal aspect.\n    :param ax: 3D axis\n    :param data: shape of(frames, 3), generated from BVH using convert_bvh2dataset.py\n    \"\"\"", "\n", "X", ",", "Y", ",", "Z", "=", "data", "[", "...", ",", "0", "]", ",", "data", "[", "...", ",", "1", "]", ",", "data", "[", "...", ",", "2", "]", "\n", "\n", "# Create cubic bounding box to simulate equal aspect ratio", "\n", "max_range", "=", "np", ".", "array", "(", "[", "X", ".", "max", "(", ")", "-", "X", ".", "min", "(", ")", ",", "Y", ".", "max", "(", ")", "-", "Y", ".", "min", "(", ")", ",", "Z", ".", "max", "(", ")", "-", "Z", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "\n", "Xb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "0", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "X", ".", "max", "(", ")", "+", "X", ".", "min", "(", ")", ")", "\n", "Yb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "1", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "Y", ".", "max", "(", ")", "+", "Y", ".", "min", "(", ")", ")", "\n", "Zb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "2", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "Z", ".", "max", "(", ")", "+", "Z", ".", "min", "(", ")", ")", "\n", "\n", "for", "xb", ",", "yb", ",", "zb", "in", "zip", "(", "Xb", ",", "Yb", ",", "Zb", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "[", "xb", "]", ",", "[", "yb", "]", ",", "[", "zb", "]", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor": [[58, 61], ["numpy.mean", "X[].reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.render_animation": [[62, 210], ["matplotlib.ioff", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.get_xaxis().set_visible", "fig.add_subplot.get_yaxis().set_visible", "fig.add_subplot.set_axis_off", "fig.add_subplot.set_title", "enumerate", "list", "skeleton.parents", "plt.figure.tight_layout", "matplotlib.animation.FuncAnimation", "output.endswith", "matplotlib.close", "list.items", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_zticklabels", "fig.add_subplot.set_title", "ax_3d.append", "lines_3d.append", "trajectories.append", "list.values", "numpy.zeros", "visualization.read_video", "min", "range", "visualization.downsample_tensor", "downsample_tensor().astype", "range", "len", "min", "enumerate", "numpy.full", "print", "Writer", "matplotlib.animation.FuncAnimation.save", "output.endswith", "len", "fig.add_subplot.get_xaxis", "fig.add_subplot.get_yaxis", "fig.add_subplot.set_aspect", "downsample_tensor().astype.append", "len", "len", "visualization.get_fps", "len", "visualization.downsample_tensor", "visualization.downsample_tensor", "len", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.imshow", "enumerate", "fig.add_subplot.scatter", "ax_in.imshow.set_data", "enumerate", "ax_in.scatter.set_offsets", "numpy.arange", "matplotlib.animation.FuncAnimation.save", "ValueError", "len", "fig.add_subplot.set_aspect", "visualization.downsample_tensor", "enumerate", "enumerate", "numpy.array", "lines.append", "lines_3d[].append", "[].set_data", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "len", "len", "fig.add_subplot.plot", "skeleton.joints_right", "fig.add_subplot.plot", "len", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.read_video", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.get_fps", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "plt", ".", "ioff", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "size", "*", "(", "1", "+", "len", "(", "poses", ")", ")", ",", "size", ")", ")", "\n", "ax_in", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "1", ")", "\n", "ax_in", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "set_axis_off", "(", ")", "\n", "ax_in", ".", "set_title", "(", "'Input'", ")", "\n", "\n", "# prevent wired error", "\n", "_", "=", "Axes3D", ".", "__class__", ".", "__name__", "\n", "\n", "ax_3d", "=", "[", "]", "\n", "lines_3d", "=", "[", "]", "\n", "trajectories", "=", "[", "]", "\n", "radius", "=", "1.7", "\n", "for", "index", ",", "(", "title", ",", "data", ")", "in", "enumerate", "(", "poses", ".", "items", "(", ")", ")", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "index", "+", "2", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "15.", ",", "azim", "=", "azim", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "# ax.set_aspect('equal')", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_zticklabels", "(", "[", "]", ")", "\n", "ax", ".", "dist", "=", "12.5", "\n", "ax", ".", "set_title", "(", "title", ")", "# , pad=35", "\n", "\n", "for", "line", "in", "ax", ".", "xaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "", "for", "line", "in", "ax", ".", "yaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "", "for", "line", "in", "ax", ".", "zaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "\n", "", "ax_3d", ".", "append", "(", "ax", ")", "\n", "lines_3d", ".", "append", "(", "[", "]", ")", "\n", "trajectories", ".", "append", "(", "data", "[", ":", ",", "0", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "", "poses", "=", "list", "(", "poses", ".", "values", "(", ")", ")", "\n", "\n", "# Decode video", "\n", "if", "input_video_path", "is", "None", ":", "\n", "# Black background", "\n", "        ", "all_frames", "=", "np", ".", "zeros", "(", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "viewport", "[", "1", "]", ",", "viewport", "[", "0", "]", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "# Load video using ffmpeg", "\n", "        ", "all_frames", "=", "[", "]", "\n", "for", "f", "in", "read_video", "(", "input_video_path", ",", "fps", "=", "None", ",", "skip", "=", "input_video_skip", ")", ":", "\n", "            ", "all_frames", ".", "append", "(", "f", ")", "\n", "\n", "", "effective_length", "=", "min", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "len", "(", "all_frames", ")", ")", "\n", "all_frames", "=", "all_frames", "[", ":", "effective_length", "]", "\n", "\n", "", "if", "downsample", ">", "1", ":", "\n", "        ", "keypoints", "=", "downsample_tensor", "(", "keypoints", ",", "downsample", ")", "\n", "all_frames", "=", "downsample_tensor", "(", "np", ".", "array", "(", "all_frames", ")", ",", "downsample", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "            ", "poses", "[", "idx", "]", "=", "downsample_tensor", "(", "poses", "[", "idx", "]", ",", "downsample", ")", "\n", "trajectories", "[", "idx", "]", "=", "downsample_tensor", "(", "trajectories", "[", "idx", "]", ",", "downsample", ")", "\n", "", "fps", "/=", "downsample", "\n", "\n", "", "initialized", "=", "False", "\n", "image", "=", "None", "\n", "lines", "=", "[", "]", "\n", "points", "=", "None", "\n", "\n", "if", "limit", "<", "1", ":", "\n", "        ", "limit", "=", "len", "(", "all_frames", ")", "\n", "", "else", ":", "\n", "        ", "limit", "=", "min", "(", "limit", ",", "len", "(", "all_frames", ")", ")", "\n", "\n", "", "parents", "=", "skeleton", ".", "parents", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "limit", ")", "\n", "\n", "def", "update_video", "(", "i", ")", ":", "\n", "        ", "nonlocal", "initialized", ",", "image", ",", "lines", ",", "points", "\n", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "            ", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", "]", ")", "\n", "\n", "# Update 2D poses", "\n", "", "if", "not", "initialized", ":", "\n", "            ", "image", "=", "ax_in", ".", "imshow", "(", "all_frames", "[", "i", "]", ",", "aspect", "=", "'equal'", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "# and 1 == 2:", "\n", "# Draw skeleton only if keypoints match (otherwise we don't have the parents definition)", "\n", "                    ", "lines", ".", "append", "(", "ax_in", ".", "plot", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ",", "color", "=", "'pink'", ")", ")", "\n", "\n", "", "col", "=", "'red'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'black'", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", ".", "append", "(", "ax", ".", "plot", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", ")", "\n", "\n", "", "", "points", "=", "ax_in", ".", "scatter", "(", "*", "keypoints", "[", "i", "]", ".", "T", ",", "5", ",", "color", "=", "'red'", ",", "edgecolors", "=", "'white'", ",", "zorder", "=", "10", ")", "\n", "\n", "initialized", "=", "True", "\n", "", "else", ":", "\n", "            ", "image", ".", "set_data", "(", "all_frames", "[", "i", "]", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "# and 1 == 2:", "\n", "                    ", "lines", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_data", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ")", "\n", "\n", "", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_xdata", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_ydata", "(", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_3d_properties", "(", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ")", "\n", "\n", "", "", "points", ".", "set_offsets", "(", "keypoints", "[", "i", "]", ")", "\n", "\n", "", "pbar", ".", "update", "(", ")", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "anim", "=", "FuncAnimation", "(", "fig", ",", "update_video", ",", "frames", "=", "limit", ",", "interval", "=", "1000.0", "/", "fps", ",", "repeat", "=", "False", ")", "\n", "if", "output", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "        ", "Writer", "=", "writers", "[", "'ffmpeg'", "]", "\n", "writer", "=", "Writer", "(", "fps", "=", "fps", ",", "metadata", "=", "{", "}", ",", "bitrate", "=", "bitrate", ")", "\n", "anim", ".", "save", "(", "output", ",", "writer", "=", "writer", ")", "\n", "", "elif", "output", ".", "endswith", "(", "'.gif'", ")", ":", "\n", "        ", "anim", ".", "save", "(", "output", ",", "dpi", "=", "60", ",", "writer", "=", "'imagemagick'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported output format (only .mp4 and .gif are supported)'", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "render_animation_test", "(", "keypoints", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_frame", "=", "None", ",", "\n", "input_video_skip", "=", "0", ",", "num", "=", "None", ")", ":", "\n", "    ", "t0", "=", "ckpt_time", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "canvas", "=", "FigureCanvas", "(", "fig", ")", "\n", "fig", ".", "add_subplot", "(", "121", ")", "\n", "plt", ".", "imshow", "(", "input_video_frame", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.render_animation_test": [[204, 260], ["visualization.ckpt_time", "matplotlib.figure", "matplotlib.backends.backend_agg.FigureCanvasAgg", "plt.figure.add_subplot", "matplotlib.imshow", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_aspect", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_zticklabels", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "skeleton.parents", "visualization.ckpt_time", "enumerate", "visualization.ckpt_time", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "numpy.fromstring().reshape", "cv2.imshow", "cv2.waitKey", "visualization.ckpt_time", "fig.add_subplot.plot", "plt.figure.get_size_inches", "plt.figure.get_dpi", "int", "int", "len", "numpy.fromstring", "skeleton.joints_right", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.ckpt_time", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right"], ["", "def", "render_animation_test", "(", "keypoints", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_frame", "=", "None", ",", "\n", "input_video_skip", "=", "0", ",", "num", "=", "None", ")", ":", "\n", "    ", "t0", "=", "ckpt_time", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "canvas", "=", "FigureCanvas", "(", "fig", ")", "\n", "fig", ".", "add_subplot", "(", "121", ")", "\n", "plt", ".", "imshow", "(", "input_video_frame", ")", "\n", "# 3D", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "122", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "15.", ",", "azim", "=", "azim", ")", "\n", "# set \u957f\u5ea6\u8303\u56f4", "\n", "radius", "=", "1.7", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "# \u5750\u6807\u8f74\u523b\u5ea6", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_zticklabels", "(", "[", "]", ")", "\n", "ax", ".", "dist", "=", "7.5", "\n", "\n", "# lxy add", "\n", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "\n", "# array([-1,  0,  1,  2,  0,  4,  5,  0,  7,  8,  9,  8, 11, 12,  8, 14, 15])", "\n", "parents", "=", "skeleton", ".", "parents", "(", ")", "\n", "\n", "pos", "=", "poses", "[", "'Reconstruction'", "]", "[", "-", "1", "]", "\n", "_", ",", "t1", "=", "ckpt_time", "(", "t0", ",", "desc", "=", "'1 '", ")", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "        ", "if", "j_parent", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "\n", "            ", "color_pink", "=", "'pink'", "\n", "if", "j", "==", "1", "or", "j", "==", "2", ":", "\n", "                ", "color_pink", "=", "'black'", "\n", "\n", "", "", "col", "=", "'red'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'black'", "\n", "# \u753b\u56fe3D", "\n", "ax", ".", "plot", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", "\n", "\n", "#  plt.savefig('test/3Dimage_{}.png'.format(1000+num))", "\n", "", "width", ",", "height", "=", "fig", ".", "get_size_inches", "(", ")", "*", "fig", ".", "get_dpi", "(", ")", "\n", "_", ",", "t2", "=", "ckpt_time", "(", "t1", ",", "desc", "=", "'2 '", ")", "\n", "canvas", ".", "draw", "(", ")", "# draw the canvas, cache the renderer", "\n", "image", "=", "np", ".", "fromstring", "(", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "int", "(", "height", ")", ",", "int", "(", "width", ")", ",", "3", ")", "\n", "cv2", ".", "imshow", "(", "'im'", ",", "image", ")", "\n", "cv2", ".", "waitKey", "(", "5", ")", "\n", "_", ",", "t3", "=", "ckpt_time", "(", "t2", ",", "desc", "=", "'3 '", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.render_animation_double": [[262, 429], ["matplotlib.ioff", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.get_xaxis().set_visible", "fig.add_subplot.get_yaxis().set_visible", "fig.add_subplot.set_axis_off", "fig.add_subplot.set_title", "enumerate", "list", "list", "skeleton.parents", "tqdm.tqdm", "plt.figure.tight_layout", "matplotlib.animation.FuncAnimation", "output.endswith", "tqdm.tqdm.close", "matplotlib.close", "list.items", "plt.figure.add_subplot", "fig.add_subplot.view_init", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.set_xticklabels", "fig.add_subplot.set_yticklabels", "fig.add_subplot.set_zticklabels", "fig.add_subplot.set_title", "fig.add_subplot.xaxis.get_ticklines", "fig.add_subplot.yaxis.get_ticklines", "fig.add_subplot.zaxis.get_ticklines", "ax_3d.append", "lines_3d.append", "lines_3d_gt.append", "trajectories.append", "list.values", "list.values", "numpy.zeros", "common.utils.read_video", "min", "visualization.downsample_tensor", "downsample_tensor().astype", "range", "len", "min", "enumerate", "tqdm.tqdm.update", "Writer", "matplotlib.animation.FuncAnimation.save", "output.endswith", "len", "fig.add_subplot.get_xaxis", "fig.add_subplot.get_yaxis", "line.set_visible", "line.set_visible", "line.set_visible", "downsample_tensor().astype.append", "len", "len", "visualization.downsample_tensor", "visualization.downsample_tensor", "len", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.imshow", "enumerate", "fig.add_subplot.scatter", "ax_in.imshow.set_data", "enumerate", "ax_in.scatter.set_offsets", "matplotlib.animation.FuncAnimation.save", "ValueError", "len", "visualization.downsample_tensor", "enumerate", "enumerate", "enumerate", "numpy.array", "len", "lines.append", "lines_3d[].append", "lines_3d_gt[].append", "len", "[].set_data", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "len", "fig.add_subplot.plot", "skeleton.joints_right", "fig.add_subplot.plot", "skeleton.joints_right", "fig.add_subplot.plot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.parents", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.read_video", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.downsample_tensor", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right"], ["", "def", "render_animation_double", "(", "keypoints", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "\n", "poses_gt", "=", "None", ",", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_path", "=", "None", ",", "input_video_skip", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    1107: \u6dfb\u52a0GT\u7684\u706b\u67f4\u4eba.\n    poses_gt: \u548cposes\u4e00\u6837\u7684\u4e00\u4e2adict, \u7528\u6765\u8986\u76d6.\n    TODO\n    Render an animation. The supported output modes are:\n     -- 'interactive': display an interactive figure\n                       (also works on notebooks if associated with %matplotlib inline)\n     -- 'html': render the animation as HTML5 video. Can be displayed in a notebook using HTML(...).\n     -- 'filename.mp4': render and export the animation as an h264 video (requires ffmpeg).\n     -- 'filename.gif': render and export the animation a gif file (requires imagemagick).\n    \"\"\"", "\n", "plt", ".", "ioff", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "size", "*", "(", "1", "+", "len", "(", "poses", ")", ")", ",", "size", ")", ")", "\n", "ax_in", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "1", ")", "\n", "ax_in", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "ax_in", ".", "set_axis_off", "(", ")", "\n", "ax_in", ".", "set_title", "(", "'Input'", ")", "\n", "\n", "# prevent wired error", "\n", "_", "=", "Axes3D", ".", "__class__", ".", "__name__", "\n", "\n", "ax_3d", "=", "[", "]", "\n", "lines_3d", "=", "[", "]", "\n", "lines_3d_gt", "=", "[", "]", "\n", "trajectories", "=", "[", "]", "\n", "radius", "=", "1.7", "\n", "for", "index", ",", "(", "title", ",", "data", ")", "in", "enumerate", "(", "poses", ".", "items", "(", ")", ")", ":", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", "+", "len", "(", "poses", ")", ",", "index", "+", "2", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "15.", ",", "azim", "=", "azim", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "0", ",", "radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", ",", "radius", "/", "2", "]", ")", "\n", "# ax.set_aspect('equal')", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_zticklabels", "(", "[", "]", ")", "\n", "ax", ".", "dist", "=", "12.5", "\n", "ax", ".", "set_title", "(", "title", ")", "# , pad=35", "\n", "\n", "for", "line", "in", "ax", ".", "xaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "", "for", "line", "in", "ax", ".", "yaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "", "for", "line", "in", "ax", ".", "zaxis", ".", "get_ticklines", "(", ")", ":", "\n", "            ", "line", ".", "set_visible", "(", "False", ")", "\n", "\n", "", "ax_3d", ".", "append", "(", "ax", ")", "\n", "lines_3d", ".", "append", "(", "[", "]", ")", "\n", "lines_3d_gt", ".", "append", "(", "[", "]", ")", "\n", "trajectories", ".", "append", "(", "data", "[", ":", ",", "0", ",", "[", "0", ",", "1", "]", "]", ")", "\n", "", "poses", "=", "list", "(", "poses", ".", "values", "(", ")", ")", "\n", "poses_gt", "=", "list", "(", "poses_gt", ".", "values", "(", ")", ")", "#1107", "\n", "\n", "# Decode video", "\n", "if", "input_video_path", "is", "None", ":", "\n", "# Black background", "\n", "        ", "all_frames", "=", "np", ".", "zeros", "(", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "viewport", "[", "1", "]", ",", "viewport", "[", "0", "]", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "# Load video using ffmpeg", "\n", "        ", "all_frames", "=", "[", "]", "\n", "for", "f", "in", "read_video", "(", "input_video_path", ",", "fps", "=", "None", ",", "skip", "=", "input_video_skip", ")", ":", "\n", "            ", "all_frames", ".", "append", "(", "f", ")", "\n", "\n", "", "effective_length", "=", "min", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "len", "(", "all_frames", ")", ")", "\n", "all_frames", "=", "all_frames", "[", ":", "effective_length", "]", "\n", "\n", "", "if", "downsample", ">", "1", ":", "\n", "        ", "keypoints", "=", "downsample_tensor", "(", "keypoints", ",", "downsample", ")", "\n", "all_frames", "=", "downsample_tensor", "(", "np", ".", "array", "(", "all_frames", ")", ",", "downsample", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "poses", ")", ")", ":", "\n", "            ", "poses", "[", "idx", "]", "=", "downsample_tensor", "(", "poses", "[", "idx", "]", ",", "downsample", ")", "\n", "trajectories", "[", "idx", "]", "=", "downsample_tensor", "(", "trajectories", "[", "idx", "]", ",", "downsample", ")", "\n", "", "fps", "/=", "downsample", "\n", "\n", "", "initialized", "=", "False", "\n", "image", "=", "None", "\n", "lines", "=", "[", "]", "\n", "points", "=", "None", "\n", "\n", "if", "limit", "<", "1", ":", "\n", "        ", "limit", "=", "len", "(", "all_frames", ")", "\n", "", "else", ":", "\n", "        ", "limit", "=", "min", "(", "limit", ",", "len", "(", "all_frames", ")", ")", "\n", "\n", "", "parents", "=", "skeleton", ".", "parents", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "limit", ")", "\n", "\n", "def", "update_video", "(", "i", ")", ":", "\n", "        ", "nonlocal", "initialized", ",", "image", ",", "lines", ",", "points", "\n", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "            ", "ax", ".", "set_xlim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "0", "]", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "-", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", ",", "radius", "/", "2", "+", "trajectories", "[", "n", "]", "[", "i", ",", "1", "]", "]", ")", "\n", "\n", "# Update 2D poses", "\n", "", "if", "not", "initialized", ":", "\n", "            ", "image", "=", "ax_in", ".", "imshow", "(", "all_frames", "[", "i", "]", ",", "aspect", "=", "'equal'", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "# and 1 == 2:", "\n", "# Draw skeleton only if keypoints match (otherwise we don't have the parents definition)", "\n", "                    ", "lines", ".", "append", "(", "ax_in", ".", "plot", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ",", "color", "=", "'pink'", ")", ")", "\n", "\n", "# col = 'red' if j in skeleton.joints_right() else 'black'", "\n", "", "col", "=", "'red'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'black'", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", ".", "append", "(", "ax", ".", "plot", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", ")", "\n", "# for gt", "\n", "", "col", "=", "'green'", "if", "j", "in", "skeleton", ".", "joints_right", "(", ")", "else", "'green'", "\n", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos_gt", "=", "poses_gt", "[", "n", "]", "[", "i", "]", "\n", "lines_3d_gt", "[", "n", "]", ".", "append", "(", "ax", ".", "plot", "(", "[", "pos_gt", "[", "j", ",", "0", "]", ",", "pos_gt", "[", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "pos_gt", "[", "j", ",", "1", "]", ",", "pos_gt", "[", "j_parent", ",", "1", "]", "]", ",", "\n", "[", "pos_gt", "[", "j", ",", "2", "]", ",", "pos_gt", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ",", "c", "=", "col", ")", ")", "\n", "\n", "", "", "points", "=", "ax_in", ".", "scatter", "(", "*", "keypoints", "[", "i", "]", ".", "T", ",", "5", ",", "color", "=", "'red'", ",", "edgecolors", "=", "'white'", ",", "zorder", "=", "10", ")", "\n", "\n", "initialized", "=", "True", "\n", "", "else", ":", "\n", "            ", "image", ".", "set_data", "(", "all_frames", "[", "i", "]", ")", "\n", "\n", "for", "j", ",", "j_parent", "in", "enumerate", "(", "parents", ")", ":", "\n", "                ", "if", "j_parent", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "parents", ")", "==", "keypoints", ".", "shape", "[", "1", "]", ":", "# and 1 == 2:", "\n", "                    ", "lines", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_data", "(", "[", "keypoints", "[", "i", ",", "j", ",", "0", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "0", "]", "]", ",", "\n", "[", "keypoints", "[", "i", ",", "j", ",", "1", "]", ",", "keypoints", "[", "i", ",", "j_parent", ",", "1", "]", "]", ")", "\n", "\n", "", "for", "n", ",", "ax", "in", "enumerate", "(", "ax_3d", ")", ":", "\n", "                    ", "pos", "=", "poses", "[", "n", "]", "[", "i", "]", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_xdata", "(", "[", "pos", "[", "j", ",", "0", "]", ",", "pos", "[", "j_parent", ",", "0", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_ydata", "(", "[", "pos", "[", "j", ",", "1", "]", ",", "pos", "[", "j_parent", ",", "1", "]", "]", ")", "\n", "lines_3d", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_3d_properties", "(", "[", "pos", "[", "j", ",", "2", "]", ",", "pos", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ")", "\n", "\n", "pos_gt", "=", "poses_gt", "[", "n", "]", "[", "i", "]", "\n", "lines_3d_gt", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_xdata", "(", "[", "pos_gt", "[", "j", ",", "0", "]", ",", "pos_gt", "[", "j_parent", ",", "0", "]", "]", ")", "\n", "lines_3d_gt", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_ydata", "(", "[", "pos_gt", "[", "j", ",", "1", "]", ",", "pos_gt", "[", "j_parent", ",", "1", "]", "]", ")", "\n", "lines_3d_gt", "[", "n", "]", "[", "j", "-", "1", "]", "[", "0", "]", ".", "set_3d_properties", "(", "[", "pos_gt", "[", "j", ",", "2", "]", ",", "pos_gt", "[", "j_parent", ",", "2", "]", "]", ",", "zdir", "=", "'z'", ")", "\n", "\n", "", "", "points", ".", "set_offsets", "(", "keypoints", "[", "i", "]", ")", "\n", "\n", "", "pbar", ".", "update", "(", ")", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "anim", "=", "FuncAnimation", "(", "fig", ",", "update_video", ",", "frames", "=", "limit", ",", "interval", "=", "1000.0", "/", "fps", ",", "repeat", "=", "False", ")", "\n", "if", "output", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "        ", "Writer", "=", "writers", "[", "'ffmpeg'", "]", "\n", "writer", "=", "Writer", "(", "fps", "=", "fps", ",", "metadata", "=", "{", "}", ",", "bitrate", "=", "bitrate", ")", "\n", "anim", ".", "save", "(", "output", ",", "writer", "=", "writer", ")", "\n", "", "elif", "output", ".", "endswith", "(", "'.gif'", ")", ":", "\n", "        ", "anim", ".", "save", "(", "output", ",", "dpi", "=", "60", ",", "writer", "=", "'imagemagick'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported output format (only .mp4 and .gif are supported)'", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedGenerator.__init__": [[30, 76], ["range", "numpy.empty", "numpy.random.RandomState", "len", "len", "len", "numpy.full", "zip", "numpy.empty", "numpy.empty", "len", "len", "len", "len", "len", "numpy.repeat", "zip", "numpy.arange", "len", "numpy.repeat", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "\n", "def", "__init__", "(", "self", ",", "batch_size", ",", "cameras", ",", "poses_3d", ",", "poses_2d", ",", "\n", "chunk_length", ",", "pad", "=", "0", ",", "causal_shift", "=", "0", ",", "\n", "shuffle", "=", "True", ",", "random_seed", "=", "1234", ",", "\n", "augment", "=", "False", ",", "kps_left", "=", "None", ",", "kps_right", "=", "None", ",", "joints_left", "=", "None", ",", "joints_right", "=", "None", ",", "\n", "endless", "=", "False", ")", ":", "\n", "        ", "assert", "poses_3d", "is", "None", "or", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", ",", "(", "len", "(", "poses_3d", ")", ",", "len", "(", "poses_2d", ")", ")", "\n", "assert", "cameras", "is", "None", "or", "len", "(", "cameras", ")", "==", "len", "(", "poses_2d", ")", "\n", "\n", "# Build lineage info", "\n", "pairs", "=", "[", "]", "# (seq_idx, start_frame, end_frame, flip) tuples", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_2d", ")", ")", ":", "\n", "            ", "assert", "poses_3d", "is", "None", "or", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "poses_3d", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "n_chunks", "=", "(", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", "+", "chunk_length", "-", "1", ")", "//", "chunk_length", "\n", "offset", "=", "(", "n_chunks", "*", "chunk_length", "-", "poses_2d", "[", "i", "]", ".", "shape", "[", "0", "]", ")", "//", "2", "\n", "bounds", "=", "np", ".", "arange", "(", "n_chunks", "+", "1", ")", "*", "chunk_length", "-", "offset", "\n", "augment_vector", "=", "np", ".", "full", "(", "len", "(", "bounds", "-", "1", ")", ",", "False", ",", "dtype", "=", "bool", ")", "\n", "pairs", "+=", "zip", "(", "np", ".", "repeat", "(", "i", ",", "len", "(", "bounds", "-", "1", ")", ")", ",", "bounds", "[", ":", "-", "1", "]", ",", "bounds", "[", "1", ":", "]", ",", "augment_vector", ")", "\n", "if", "augment", ":", "\n", "                ", "pairs", "+=", "zip", "(", "np", ".", "repeat", "(", "i", ",", "len", "(", "bounds", "-", "1", ")", ")", ",", "bounds", "[", ":", "-", "1", "]", ",", "bounds", "[", "1", ":", "]", ",", "~", "augment_vector", ")", "\n", "\n", "# Initialize buffers", "\n", "", "", "if", "cameras", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_cam", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "cameras", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "if", "poses_3d", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_3d", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "chunk_length", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_3d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "self", ".", "batch_2d", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "chunk_length", "+", "2", "*", "pad", ",", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "poses_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "self", ".", "num_batches", "=", "(", "len", "(", "pairs", ")", "+", "batch_size", "-", "1", ")", "//", "batch_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "random", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "self", ".", "pairs", "=", "pairs", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "causal_shift", "=", "causal_shift", "\n", "self", ".", "endless", "=", "endless", "\n", "self", ".", "state", "=", "None", "\n", "\n", "self", ".", "cameras", "=", "cameras", "\n", "self", ".", "poses_3d", "=", "poses_3d", "\n", "self", ".", "poses_2d", "=", "poses_2d", "\n", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "kps_left", "=", "kps_left", "\n", "self", ".", "kps_right", "=", "kps_right", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedGenerator.num_frames": [[77, 79], ["None"], "methods", ["None"], ["self", ".", "joints_left", "=", "joints_left", "\n", "self", ".", "joints_right", "=", "joints_right", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedGenerator.random_state": [[80, 82], ["None"], "methods", ["None"], ["", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "*", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedGenerator.set_random_state": [[83, 85], ["None"], "methods", ["None"], ["", "def", "random_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedGenerator.augment_enabled": [[86, 88], ["None"], "methods", ["None"], ["", "def", "set_random_state", "(", "self", ",", "random", ")", ":", "\n", "        ", "self", ".", "random", "=", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedGenerator.next_pairs": [[89, 98], ["generators.ChunkedGenerator.random.permutation"], "methods", ["None"], ["", "def", "augment_enabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "augment", "\n", "\n", "", "def", "next_pairs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state", "is", "None", ":", "\n", "            ", "if", "self", ".", "shuffle", ":", "\n", "                ", "pairs", "=", "self", ".", "random", ".", "permutation", "(", "self", ".", "pairs", ")", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "self", ".", "pairs", "\n", "", "return", "0", ",", "pairs", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedGenerator.next_epoch": [[99, 166], ["generators.ChunkedGenerator.next_pairs", "range", "enumerate", "max", "min", "numpy.pad", "max", "min", "numpy.pad", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_pairs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "else", ":", "\n", "            ", "return", "self", ".", "state", "\n", "\n", "", "", "def", "next_epoch", "(", "self", ")", ":", "\n", "        ", "enabled", "=", "True", "\n", "while", "enabled", ":", "\n", "            ", "start_idx", ",", "pairs", "=", "self", ".", "next_pairs", "(", ")", "\n", "for", "b_i", "in", "range", "(", "start_idx", ",", "self", ".", "num_batches", ")", ":", "\n", "                ", "chunks", "=", "pairs", "[", "b_i", "*", "self", ".", "batch_size", ":", "(", "b_i", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "for", "i", ",", "(", "seq_i", ",", "start_3d", ",", "end_3d", ",", "flip", ")", "in", "enumerate", "(", "chunks", ")", ":", "\n", "                    ", "start_2d", "=", "start_3d", "-", "self", ".", "pad", "-", "self", ".", "causal_shift", "\n", "end_2d", "=", "end_3d", "+", "self", ".", "pad", "-", "self", ".", "causal_shift", "\n", "\n", "# 2D poses", "\n", "seq_2d", "=", "self", ".", "poses_2d", "[", "seq_i", "]", "\n", "low_2d", "=", "max", "(", "start_2d", ",", "0", ")", "\n", "high_2d", "=", "min", "(", "end_2d", ",", "seq_2d", ".", "shape", "[", "0", "]", ")", "\n", "pad_left_2d", "=", "low_2d", "-", "start_2d", "\n", "pad_right_2d", "=", "end_2d", "-", "high_2d", "\n", "if", "pad_left_2d", "!=", "0", "or", "pad_right_2d", "!=", "0", ":", "\n", "                        ", "self", ".", "batch_2d", "[", "i", "]", "=", "np", ".", "pad", "(", "seq_2d", "[", "low_2d", ":", "high_2d", "]", ",", "(", "(", "pad_left_2d", ",", "pad_right_2d", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "batch_2d", "[", "i", "]", "=", "seq_2d", "[", "low_2d", ":", "high_2d", "]", "\n", "\n", "", "if", "flip", ":", "\n", "# Flip 2D keypoints", "\n", "                        ", "self", ".", "batch_2d", "[", "i", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "self", ".", "batch_2d", "[", "i", ",", ":", ",", "self", ".", "kps_left", "+", "self", ".", "kps_right", "]", "=", "self", ".", "batch_2d", "[", "i", ",", ":", ",", "self", ".", "kps_right", "+", "self", ".", "kps_left", "]", "\n", "\n", "# 3D poses", "\n", "", "if", "self", ".", "poses_3d", "is", "not", "None", ":", "\n", "                        ", "seq_3d", "=", "self", ".", "poses_3d", "[", "seq_i", "]", "\n", "low_3d", "=", "max", "(", "start_3d", ",", "0", ")", "\n", "high_3d", "=", "min", "(", "end_3d", ",", "seq_3d", ".", "shape", "[", "0", "]", ")", "\n", "pad_left_3d", "=", "low_3d", "-", "start_3d", "\n", "pad_right_3d", "=", "end_3d", "-", "high_3d", "\n", "if", "pad_left_3d", "!=", "0", "or", "pad_right_3d", "!=", "0", ":", "\n", "                            ", "self", ".", "batch_3d", "[", "i", "]", "=", "np", ".", "pad", "(", "seq_3d", "[", "low_3d", ":", "high_3d", "]", ",", "(", "(", "pad_left_3d", ",", "pad_right_3d", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "batch_3d", "[", "i", "]", "=", "seq_3d", "[", "low_3d", ":", "high_3d", "]", "\n", "\n", "", "if", "flip", ":", "\n", "# Flip 3D joints", "\n", "                            ", "self", ".", "batch_3d", "[", "i", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "self", ".", "batch_3d", "[", "i", ",", ":", ",", "self", ".", "joints_left", "+", "self", ".", "joints_right", "]", "=", "self", ".", "batch_3d", "[", "i", ",", ":", ",", "self", ".", "joints_right", "+", "self", ".", "joints_left", "]", "\n", "\n", "# Cameras", "\n", "", "", "if", "self", ".", "cameras", "is", "not", "None", ":", "\n", "                        ", "self", ".", "batch_cam", "[", "i", "]", "=", "self", ".", "cameras", "[", "seq_i", "]", "\n", "if", "flip", ":", "\n", "# Flip horizontal distortion coefficients", "\n", "                            ", "self", ".", "batch_cam", "[", "i", ",", "2", "]", "*=", "-", "1", "\n", "self", ".", "batch_cam", "[", "i", ",", "7", "]", "*=", "-", "1", "\n", "\n", "", "", "", "if", "self", ".", "endless", ":", "\n", "                    ", "self", ".", "state", "=", "(", "b_i", "+", "1", ",", "pairs", ")", "\n", "", "if", "self", ".", "poses_3d", "is", "None", "and", "self", ".", "cameras", "is", "None", ":", "\n", "                    ", "yield", "None", ",", "None", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "", "elif", "self", ".", "poses_3d", "is", "not", "None", "and", "self", ".", "cameras", "is", "None", ":", "\n", "                    ", "yield", "None", ",", "self", ".", "batch_3d", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "", "elif", "self", ".", "poses_3d", "is", "None", ":", "\n", "                    ", "yield", "self", ".", "batch_cam", "[", ":", "len", "(", "chunks", ")", "]", ",", "None", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "", "else", ":", "\n", "                    ", "yield", "self", ".", "batch_cam", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_3d", "[", ":", "len", "(", "chunks", ")", "]", ",", "self", ".", "batch_2d", "[", ":", "len", "(", "chunks", ")", "]", "\n", "\n", "", "", "if", "self", ".", "endless", ":", "\n", "                ", "self", ".", "state", "=", "None", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.UnchunkedGenerator.__init__": [[188, 204], ["len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "\n", "def", "__init__", "(", "self", ",", "cameras", ",", "poses_3d", ",", "poses_2d", ",", "pad", "=", "0", ",", "causal_shift", "=", "0", ",", "\n", "augment", "=", "False", ",", "kps_left", "=", "None", ",", "kps_right", "=", "None", ",", "joints_left", "=", "None", ",", "joints_right", "=", "None", ")", ":", "\n", "        ", "assert", "poses_3d", "is", "None", "or", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", "\n", "assert", "cameras", "is", "None", "or", "len", "(", "cameras", ")", "==", "len", "(", "poses_2d", ")", "\n", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "kps_left", "=", "kps_left", "\n", "self", ".", "kps_right", "=", "kps_right", "\n", "self", ".", "joints_left", "=", "joints_left", "\n", "self", ".", "joints_right", "=", "joints_right", "\n", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "causal_shift", "=", "causal_shift", "\n", "self", ".", "cameras", "=", "[", "]", "if", "cameras", "is", "None", "else", "cameras", "\n", "self", ".", "poses_3d", "=", "[", "]", "if", "poses_3d", "is", "None", "else", "poses_3d", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.UnchunkedGenerator.num_frames": [[205, 210], ["None"], "methods", ["None"], ["self", ".", "poses_2d", "=", "poses_2d", "\n", "\n", "", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "count", "=", "0", "\n", "for", "p", "in", "self", ".", "poses_2d", ":", "\n", "            ", "count", "+=", "p", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.UnchunkedGenerator.augment_enabled": [[211, 213], ["None"], "methods", ["None"], ["", "return", "count", "\n", "\n", "", "def", "augment_enabled", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.UnchunkedGenerator.set_augment": [[214, 216], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "augment", "\n", "\n", "", "def", "set_augment", "(", "self", ",", "augment", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.UnchunkedGenerator.next_epoch": [[217, 242], ["itertools.zip_longest", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.pad", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["        ", "self", ".", "augment", "=", "augment", "\n", "\n", "", "def", "next_epoch", "(", "self", ")", ":", "\n", "        ", "for", "seq_cam", ",", "seq_3d", ",", "seq_2d", "in", "zip_longest", "(", "self", ".", "cameras", ",", "self", ".", "poses_3d", ",", "self", ".", "poses_2d", ")", ":", "\n", "            ", "batch_cam", "=", "None", "if", "seq_cam", "is", "None", "else", "np", ".", "expand_dims", "(", "seq_cam", ",", "axis", "=", "0", ")", "\n", "batch_3d", "=", "None", "if", "seq_3d", "is", "None", "else", "np", ".", "expand_dims", "(", "seq_3d", ",", "axis", "=", "0", ")", "\n", "# 2D input padding to compensate for valid convolutions, per side (depends on the receptive field)", "\n", "batch_2d", "=", "np", ".", "expand_dims", "(", "np", ".", "pad", "(", "seq_2d", ",", "\n", "(", "(", "self", ".", "pad", "+", "self", ".", "causal_shift", ",", "self", ".", "pad", "-", "self", ".", "causal_shift", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "'edge'", ")", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "augment", ":", "\n", "# Append flipped version", "\n", "                ", "if", "batch_cam", "is", "not", "None", ":", "\n", "                    ", "batch_cam", "=", "np", ".", "concatenate", "(", "(", "batch_cam", ",", "batch_cam", ")", ",", "axis", "=", "0", ")", "\n", "batch_cam", "[", "1", ",", "2", "]", "*=", "-", "1", "\n", "batch_cam", "[", "1", ",", "7", "]", "*=", "-", "1", "\n", "\n", "", "if", "batch_3d", "is", "not", "None", ":", "\n", "                    ", "batch_3d", "=", "np", ".", "concatenate", "(", "(", "batch_3d", ",", "batch_3d", ")", ",", "axis", "=", "0", ")", "\n", "batch_3d", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "batch_3d", "[", "1", ",", ":", ",", "self", ".", "joints_left", "+", "self", ".", "joints_right", "]", "=", "batch_3d", "[", "1", ",", ":", ",", "self", ".", "joints_right", "+", "self", ".", "joints_left", "]", "\n", "\n", "", "batch_2d", "=", "np", ".", "concatenate", "(", "(", "batch_2d", ",", "batch_2d", ")", ",", "axis", "=", "0", ")", "\n", "batch_2d", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "batch_2d", "[", "1", ",", ":", ",", "self", ".", "kps_left", "+", "self", ".", "kps_right", "]", "=", "batch_2d", "[", "1", ",", ":", ",", "self", ".", "kps_right", "+", "self", ".", "kps_left", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.quaternion.qrot": [[10, 25], ["torch.cross", "torch.cross", "len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "def", "qrot", "(", "q", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    Rotate vector(s) v about the rotation described by \u56db\u5143\u6570quaternion(s) q.\n    Expects a tensor of shape (*, 4) for q and a tensor of shape (*, 3) for v,\n    where * denotes any number of dimensions.\n    Returns a tensor of shape (*, 3).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "v", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "q", ".", "shape", "[", ":", "-", "1", "]", "==", "v", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "qvec", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "uv", "=", "torch", ".", "cross", "(", "qvec", ",", "v", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "uuv", "=", "torch", ".", "cross", "(", "qvec", ",", "uv", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "return", "(", "v", "+", "2", "*", "(", "q", "[", "...", ",", ":", "1", "]", "*", "uv", "+", "uuv", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.quaternion.qinverse": [[27, 36], ["torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "", "def", "qinverse", "(", "q", ",", "inplace", "=", "False", ")", ":", "\n", "# We assume the quaternion to be normalized", "\n", "    ", "if", "inplace", ":", "\n", "        ", "q", "[", "...", ",", "1", ":", "]", "*=", "-", "1", "\n", "return", "q", "\n", "", "else", ":", "\n", "        ", "w", "=", "q", "[", "...", ",", ":", "1", "]", "\n", "xyz", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "return", "torch", ".", "cat", "(", "(", "w", ",", "-", "xyz", ")", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.mpjpe": [[11, 18], ["torch.mean", "torch.norm", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "def", "mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint position error (i.e. mean Euclidean distance),\n    often referred to as \"Protocol #1\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.weighted_mpjpe": [[19, 26], ["torch.mean", "torch.norm", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "\n", "", "def", "weighted_mpjpe", "(", "predicted", ",", "target", ",", "w", ")", ":", "\n", "    ", "\"\"\"\n    Weighted mean per-joint position error (i.e. mean Euclidean distance)\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "assert", "w", ".", "shape", "[", "0", "]", "==", "predicted", ".", "shape", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.p_mpjpe": [[27, 67], ["numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.matmul", "numpy.linalg.svd", "Vt.transpose", "numpy.matmul", "numpy.sign", "np.sign.flatten", "numpy.matmul", "numpy.expand_dims", "numpy.mean", "numpy.sum", "numpy.sum", "X0.transpose", "U.transpose", "numpy.expand_dims", "U.transpose", "numpy.sum", "numpy.linalg.norm", "numpy.linalg.det", "numpy.matmul", "numpy.matmul", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["return", "torch", ".", "mean", "(", "w", "*", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "dim", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n", "\n", "", "def", "p_mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Pose error: MPJPE after rigid alignment (scale, rotation, and translation),\n    often referred to as \"Protocol #2\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "muX", "=", "np", ".", "mean", "(", "target", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "muY", "=", "np", ".", "mean", "(", "predicted", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "X0", "=", "target", "-", "muX", "\n", "Y0", "=", "predicted", "-", "muY", "\n", "\n", "normX", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "X0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n", "normY", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "Y0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n", "\n", "X0", "/=", "normX", "\n", "Y0", "/=", "normY", "\n", "\n", "H", "=", "np", ".", "matmul", "(", "X0", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ",", "Y0", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "V", "=", "Vt", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "# Avoid improper rotations (reflections), i.e. rotations with det(R) = -1", "\n", "sign_detR", "=", "np", ".", "sign", "(", "np", ".", "expand_dims", "(", "np", ".", "linalg", ".", "det", "(", "R", ")", ",", "axis", "=", "1", ")", ")", "\n", "V", "[", ":", ",", ":", ",", "-", "1", "]", "*=", "sign_detR", "\n", "s", "[", ":", ",", "-", "1", "]", "*=", "sign_detR", ".", "flatten", "(", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "# Rotation", "\n", "\n", "tr", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "s", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ",", "axis", "=", "2", ")", "\n", "\n", "a", "=", "tr", "*", "normX", "/", "normY", "# Scale", "\n", "t", "=", "muX", "-", "a", "*", "np", ".", "matmul", "(", "muY", ",", "R", ")", "# Translation", "\n", "\n", "# Perform rigid transformation on the input", "\n", "predicted_aligned", "=", "a", "*", "np", ".", "matmul", "(", "predicted", ",", "R", ")", "+", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.n_mpjpe": [[68, 79], ["torch.mean", "torch.mean", "loss.mpjpe", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.mpjpe"], ["# Return MPJPE", "\n", "return", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "predicted_aligned", "-", "target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n", "\n", "", "def", "n_mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Normalized MPJPE (scale only), adapted from:\n    https://github.com/hrhodin/UnsupervisedGeometryAwareRepresentationLearning/blob/master/losses/poses.py\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "norm_predicted", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "predicted", "**", "2", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.mean_velocity_error": [[80, 90], ["numpy.diff", "numpy.diff", "numpy.mean", "numpy.linalg.norm", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["norm_target", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "*", "predicted", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "scale", "=", "norm_target", "/", "norm_predicted", "\n", "return", "mpjpe", "(", "scale", "*", "predicted", ",", "target", ")", "\n", "\n", "\n", "", "def", "mean_velocity_error", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint velocity error (i.e. mean Euclidean distance of the 1st derivative)\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.pose_align": [[126, 167], ["numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.matmul", "numpy.linalg.svd", "Vt.transpose", "numpy.matmul", "numpy.sign", "np.sign.flatten", "numpy.matmul", "numpy.expand_dims", "numpy.sum", "numpy.sum", "X0.transpose", "U.transpose", "numpy.expand_dims", "U.transpose", "numpy.sum", "numpy.linalg.det", "numpy.matmul", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "# Rotation", "\n", "\n", "tr", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "s", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ",", "axis", "=", "2", ")", "\n", "\n", "a", "=", "tr", "*", "normX", "/", "normY", "# Scale", "\n", "t", "=", "muX", "-", "a", "*", "np", ".", "matmul", "(", "muY", ",", "R", ")", "# Translation", "\n", "\n", "# Perform rigid transformation on the input", "\n", "predicted_aligned", "=", "a", "*", "np", ".", "matmul", "(", "predicted", ",", "R", ")", "+", "t", "\n", "\n", "# Return MPJPE", "\n", "return", "predicted_aligned", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.__init__": [[15, 34], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["\n", "def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Validate input", "\n", "for", "fw", "in", "filter_widths", ":", "\n", "            ", "assert", "fw", "%", "2", "!=", "0", ",", "'Only odd filter widths are supported'", "\n", "\n", "", "self", ".", "num_joints_in", "=", "num_joints_in", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "num_joints_out", "=", "num_joints_out", "\n", "self", ".", "filter_widths", "=", "filter_widths", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "pad", "=", "[", "filter_widths", "[", "0", "]", "//", "2", "]", "\n", "self", ".", "expand_bn", "=", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "shrink", "=", "nn", ".", "Conv1d", "(", "channels", ",", "num_joints_out", "*", "3", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.set_bn_momentum": [[36, 40], ["None"], "methods", ["None"], ["", "def", "set_bn_momentum", "(", "self", ",", "momentum", ")", ":", "\n", "        ", "self", ".", "expand_bn", ".", "momentum", "=", "momentum", "\n", "for", "bn", "in", "self", ".", "layers_bn", ":", "\n", "            ", "bn", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.receptive_field": [[41, 49], ["None"], "methods", ["None"], ["", "", "def", "receptive_field", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the total receptive field of this model as # of frames.\n        \"\"\"", "\n", "frames", "=", "0", "\n", "for", "f", "in", "self", ".", "pad", ":", "\n", "            ", "frames", "+=", "f", "\n", "", "return", "1", "+", "2", "*", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.total_causal_shift": [[50, 62], ["range", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "total_causal_shift", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the asymmetric offset for sequence padding.\n        The returned value is typically 0 if causal convolutions are disabled,\n        otherwise it is half the receptive field.\n        \"\"\"", "\n", "frames", "=", "self", ".", "causal_shift", "[", "0", "]", "\n", "next_dilation", "=", "self", ".", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "filter_widths", ")", ")", ":", "\n", "            ", "frames", "+=", "self", ".", "causal_shift", "[", "i", "]", "*", "next_dilation", "\n", "next_dilation", "*=", "self", ".", "filter_widths", "[", "i", "]", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.forward": [[63, 80], ["x.view.view.view", "x.view.view.permute", "model.TemporalModelBase._forward_blocks", "x.view.view.permute", "x.view.view.view", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelOptimized1f._forward_blocks", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", "\n", "assert", "x", ".", "shape", "[", "-", "2", "]", "==", "self", ".", "num_joints_in", "\n", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "in_features", "\n", "\n", "sz", "=", "x", ".", "shape", "[", ":", "3", "]", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "_forward_blocks", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "sz", "[", "0", "]", ",", "-", "1", ",", "self", ".", "num_joints_out", ",", "3", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "TemporalModel", "(", "TemporalModelBase", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModel.__init__": [[87, 127], ["model.TemporalModelBase.__init__", "torch.Conv1d", "torch.Conv1d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "model.TemporalModel.pad.append", "model.TemporalModel.causal_shift.append", "layers_conv.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ",", "dense", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        dense -- use regular dense convolutions instead of dilated convolutions (ablation experiment)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "\n", "self", ".", "expand_conv", "=", "nn", ".", "Conv1d", "(", "num_joints_in", "*", "in_features", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", ")", "//", "2", "if", "causal", "else", "0", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", "*", "next_dilation", ")", "if", "causal", "else", "0", ")", "\n", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "\n", "filter_widths", "[", "i", "]", "if", "not", "dense", "else", "(", "2", "*", "self", ".", "pad", "[", "-", "1", "]", "+", "1", ")", ",", "\n", "dilation", "=", "next_dilation", "if", "not", "dense", "else", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "\n", "", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModel._forward_blocks": [[128, 141], ["model.TemporalModel.drop", "range", "model.TemporalModel.shrink", "model.TemporalModel.relu", "model.TemporalModel.drop", "model.TemporalModel.expand_bn", "len", "model.TemporalModel.relu", "model.TemporalModel.drop", "model.TemporalModel.expand_conv", "model.TemporalModel.relu"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "pad", "=", "self", ".", "pad", "[", "i", "+", "1", "]", "\n", "shift", "=", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "\n", "# clip", "\n", "res", "=", "x", "[", ":", ",", ":", ",", "pad", "+", "shift", ":", "x", ".", "shape", "[", "2", "]", "-", "pad", "+", "shift", "]", "\n", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "shrink", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelOptimized1f.__init__": [[153, 188], ["model.TemporalModelBase.__init__", "torch.Conv1d", "torch.Conv1d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "model.TemporalModelOptimized1f.pad.append", "model.TemporalModelOptimized1f.causal_shift.append", "layers_conv.append", "layers_bn.append", "layers_conv.append", "layers_bn.append", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["\n", "def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this model.\n\n        Arguments:\n        num_joints_in -- number of input joints (e.g. 17 for Human3.6M)\n        in_features -- number of input features for each joint (typically 2 for 2D input)\n        num_joints_out -- number of output joints (can be different than input)\n        filter_widths -- list of convolution widths, which also determines the # of blocks and receptive field\n        causal -- use causal convolutions instead of symmetric convolutions (for real-time applications)\n        dropout -- dropout probability\n        channels -- number of convolution channels\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "\n", "self", ".", "expand_conv", "=", "nn", ".", "Conv1d", "(", "num_joints_in", "*", "in_features", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "stride", "=", "filter_widths", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", "//", "2", ")", "if", "causal", "else", "0", "]", "\n", "next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", ")", "if", "causal", "else", "0", ")", "\n", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "filter_widths", "[", "i", "]", ",", "stride", "=", "filter_widths", "[", "i", "]", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelOptimized1f._forward_blocks": [[189, 200], ["model.TemporalModelOptimized1f.drop", "range", "model.TemporalModelOptimized1f.shrink", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.drop", "model.TemporalModelOptimized1f.expand_bn", "len", "model.TemporalModelOptimized1f.relu", "model.TemporalModelOptimized1f.drop", "model.TemporalModelOptimized1f.expand_conv", "model.TemporalModelOptimized1f.relu"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "res", "=", "x", "[", ":", ",", ":", ",", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "+", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "//", "2", ":", ":", "self", ".", "filter_widths", "[", "i", "+", "1", "]", "]", "\n", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "res", "+", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "+", "1", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "+", "1", "]", "(", "x", ")", ")", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "shrink", "(", "x", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.Timer.__init__": [[87, 91], ["None"], "methods", ["None"], ["", "", "import", "cv2", "\n", "import", "moviepy", ".", "video", ".", "io", ".", "ImageSequenceClip", "\n", "\n", "def", "image_sequence_to_video", "(", "img_lst", ",", "output_path", ",", "frame_rate", ")", ":", "\n", "# frame_size = (500, 500)", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.Timer.__enter__": [[92, 94], ["time.perf_counter"], "methods", ["None"], ["# output_path = 'output_video.mp4'", "\n", "# frame_rate = 25", "\n", "    ", "frame_size", "=", "cv2", ".", "imread", "(", "img_lst", "[", "0", "]", ")", ".", "shape", "[", ":", "2", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.Timer.__exit__": [[95, 98], ["print", "time.perf_counter"], "methods", ["None"], ["print", "(", "'frame_size: {}'", ".", "format", "(", "frame_size", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "output_path", ")", ":", "\n", "        ", "clip", "=", "moviepy", ".", "video", ".", "io", ".", "ImageSequenceClip", ".", "ImageSequenceClip", "(", "img_lst", ",", "fps", "=", "frame_rate", ")", "\n", "clip", ".", "write_videofile", "(", "output_path", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.add_path": [[19, 26], ["os.path.abspath", "os.path.abspath", "os.path.abspath", "filter", "sys.path.extend"], "function", ["None"], ["", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "", "def", "convert_AlphaOpenposeCoco_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    ", "\"\"\"\n    pose_x: nx17x2\n    https://zhuanlan.zhihu.com/p/367707179\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.wrap": [[12, 43], ["list", "enumerate", "func", "isinstance", "list", "enumerate", "tuple", "type", "torch.from_numpy", "type", "result.squeeze.numpy", "args[].unsqueeze", "type", "res.squeeze.numpy", "result.squeeze.squeeze", "res.squeeze.squeeze"], "function", ["None"], ["\n", "", "", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "", "def", "convert_AlphaOpenposeCoco_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    ", "\"\"\"\n    pose_x: nx17x2\n    https://zhuanlan.zhihu.com/p/367707179\n    \"\"\"", "\n", "hip", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "11", "]", "+", "pose_x", "[", ":", ",", "12", "]", ")", "\n", "neck", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "5", "]", "+", "pose_x", "[", ":", ",", "6", "]", ")", "\n", "spine", "=", "0.5", "*", "(", "neck", "+", "hip", ")", "\n", "\n", "# head = 0.5 * (pose_x[:, 1] + pose_x[:, 2])", "\n", "\n", "head_0", "=", "pose_x", "[", ":", ",", "0", "]", "# by noise", "\n", "head_1", "=", "(", "neck", "-", "hip", ")", "*", "0.5", "+", "neck", "# by backbone", "\n", "head_2", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "1", "]", "+", "pose_x", "[", ":", ",", "2", "]", ")", "# by two eye", "\n", "head_3", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "3", "]", "+", "pose_x", "[", ":", ",", "4", "]", ")", "# by two ear", "\n", "head", "=", "head_0", "*", "0.1", "+", "head_1", "*", "0.6", "+", "head_2", "*", "0.1", "+", "head_3", "*", "0.2", "\n", "\n", "combine", "=", "np", ".", "stack", "(", "[", "hip", ",", "spine", ",", "neck", ",", "head", "]", ")", "# 0 1 2 3 ---> 17, 18, 19 ,20", "\n", "combine", "=", "np", ".", "transpose", "(", "combine", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "combine", "=", "np", ".", "concatenate", "(", "[", "pose_x", ",", "combine", "]", ",", "axis", "=", "1", ")", "\n", "reorder", "=", "[", "17", ",", "12", ",", "14", ",", "16", ",", "11", ",", "13", ",", "15", ",", "18", ",", "19", ",", "20", ",", "5", ",", "7", ",", "9", ",", "6", ",", "8", ",", "10", "]", "\n", "standart_16joint", "=", "combine", "[", ":", ",", "reorder", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.deterministic_random": [[44, 48], ["hashlib.sha256().digest", "int.from_bytes", "int", "hashlib.sha256", "data.encode"], "function", ["None"], ["return", "standart_16joint", "\n", "\n", "", "def", "convert_hhr_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.alpha_map": [[67, 76], ["prediction.min", "prediction.max"], "function", ["None"], ["'alpha_pose'", ":", "get_alpha_pose", ",", "\n", "# 'hr_pose': get_hr_pose,", "\n", "}", "\n", "\n", "assert", "detector_name", "in", "detector_map", ",", "f'2D detector: {detector_name} not implemented yet!'", "\n", "\n", "return", "detector_map", "[", "detector_name", "]", "(", ")", "\n", "\n", "\n", "", "class", "Skeleton", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.change_score": [[78, 84], ["[].item", "numpy.load"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["# return np.array([-1, 0, 1, 2, 0, 4, 5, 0, 7, 8, 9, 8, 11, 12, 8, 14, 15])", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "8", ",", "10", ",", "11", ",", "8", ",", "13", ",", "14", "]", ")", "\n", "\n", "#   connected son:    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11, 12, 13,14, 15, 16  #### for 16 joint.", "\n", "\n", "", "def", "joints_right", "(", "self", ")", ":", "\n", "# return [1, 2, 3, 9, 10]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.calculate_area": [[100, 115], ["numpy.array", "numpy.abs", "len", "numpy.reshape", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["        ", "print", "(", "'{} exist already.'", ".", "format", "(", "output_path", ")", ")", "\n", "", "return", "frame_size", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.read_video": [[117, 136], ["cv2.VideoCapture", "cv2.VideoCapture.read", "print", "sys.stdout.flush", "cv2.cvtColor", "numpy.array", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.split_video": [[138, 169], ["cv2.VideoCapture", "os.path.dirname", "os.path.basename", "pathlib.Path", "shutil.rmtree", "pathlib.Path.mkdir", "int", "os.path.dirname", "print", "str", "cv2.VideoCapture.get", "len", "cv2.VideoCapture.read", "cv2.imwrite", "os.path.basename.rfind", "str", "print", "str().zfill", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.evaluate": [[171, 200], ["torch.no_grad", "model_pos.eval", "test_generator.next_epoch", "list", "list", "torch.from_numpy", "torch.cuda.is_available", "model_pos", "test_generator.augment_enabled", "batch_2d.astype", "inputs_2d.cuda.cuda", "torch.mean", "torch.mean.squeeze().cpu().numpy", "torch.mean.squeeze().cpu", "torch.mean.squeeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.augment_enabled", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton.__init__": [[11, 18], ["numpy.array", "skeleton.Skeleton._compute_metadata", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton._compute_metadata", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["class", "Skeleton", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "parents", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "        ", "assert", "len", "(", "joints_left", ")", "==", "len", "(", "joints_right", ")", "\n", "\n", "self", ".", "_parents", "=", "np", ".", "array", "(", "parents", ")", "\n", "self", ".", "_joints_left", "=", "joints_left", "\n", "self", ".", "_joints_right", "=", "joints_right", "\n", "self", ".", "_compute_metadata", "(", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton.num_joints": [[19, 21], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "", "def", "num_joints", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_parents", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton.parents": [[22, 24], ["None"], "methods", ["None"], ["\n", "", "def", "parents", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parents", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton.has_children": [[25, 27], ["None"], "methods", ["None"], ["\n", "", "def", "has_children", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_children", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton.children": [[28, 30], ["None"], "methods", ["None"], ["\n", "", "def", "children", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_children", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton.remove_joints": [[31, 70], ["range", "range", "numpy.zeros", "enumerate", "numpy.array", "skeleton.Skeleton._compute_metadata", "len", "len", "len", "valid_joints.append", "new_parents.append", "new_joints_left.append", "new_joints_right.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton._compute_metadata", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["\n", "", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n", "        ", "\"\"\"\n        Remove the joints specified in 'joints_to_remove'.\n        \"\"\"", "\n", "valid_joints", "=", "[", "]", "\n", "for", "joint", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "if", "joint", "not", "in", "joints_to_remove", ":", "\n", "                ", "valid_joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "while", "self", ".", "_parents", "[", "i", "]", "in", "joints_to_remove", ":", "\n", "                ", "self", ".", "_parents", "[", "i", "]", "=", "self", ".", "_parents", "[", "self", ".", "_parents", "[", "i", "]", "]", "\n", "\n", "", "", "index_offsets", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ",", "dtype", "=", "int", ")", "\n", "new_parents", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "i", "not", "in", "joints_to_remove", ":", "\n", "                ", "new_parents", ".", "append", "(", "parent", "-", "index_offsets", "[", "parent", "]", ")", "\n", "", "else", ":", "\n", "                ", "index_offsets", "[", "i", ":", "]", "+=", "1", "\n", "", "", "self", ".", "_parents", "=", "np", ".", "array", "(", "new_parents", ")", "\n", "\n", "if", "self", ".", "_joints_left", "is", "not", "None", ":", "\n", "            ", "new_joints_left", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_left", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_left", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_left", "=", "new_joints_left", "\n", "", "if", "self", ".", "_joints_right", "is", "not", "None", ":", "\n", "            ", "new_joints_right", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_right", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_right", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_right", "=", "new_joints_right", "\n", "\n", "", "self", ".", "_compute_metadata", "(", ")", "\n", "\n", "return", "valid_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton.joints_left": [[71, 73], ["None"], "methods", ["None"], ["", "def", "joints_left", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_left", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton.joints_right": [[74, 76], ["None"], "methods", ["None"], ["", "def", "joints_right", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_right", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.skeleton.Skeleton._compute_metadata": [[77, 89], ["numpy.zeros().astype", "enumerate", "enumerate", "enumerate", "skeleton.Skeleton._children.append", "numpy.zeros", "skeleton.Skeleton._children[].append", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "_compute_metadata", "(", "self", ")", ":", "\n", "        ", "self", ".", "_has_children", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ")", ".", "astype", "(", "bool", ")", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_has_children", "[", "parent", "]", "=", "True", "\n", "\n", "", "", "self", ".", "_children", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "self", ".", "_children", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_children", "[", "parent", "]", ".", "append", "(", "i", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewerBasic.__init__": [[23, 41], ["mujoco_py.builder.cymj.MjRenderContextWindow.__init__", "threading.Lock", "glfw.get_framebuffer_size", "glfw.get_window_size", "glfw.set_cursor_pos_callback", "glfw.set_mouse_button_callback", "glfw.set_scroll_callback", "glfw.set_key_callback"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "sim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "sim", ")", "\n", "\n", "self", ".", "_gui_lock", "=", "Lock", "(", ")", "\n", "self", ".", "_button_left_pressed", "=", "False", "\n", "self", ".", "_button_right_pressed", "=", "False", "\n", "self", ".", "_last_mouse_x", "=", "0", "\n", "self", ".", "_last_mouse_y", "=", "0", "\n", "\n", "framebuffer_width", ",", "_", "=", "glfw", ".", "get_framebuffer_size", "(", "self", ".", "window", ")", "\n", "window_width", ",", "_", "=", "glfw", ".", "get_window_size", "(", "self", ".", "window", ")", "\n", "self", ".", "_scale", "=", "framebuffer_width", "*", "1.0", "/", "window_width", "\n", "\n", "glfw", ".", "set_cursor_pos_callback", "(", "self", ".", "window", ",", "self", ".", "_cursor_pos_callback", ")", "\n", "glfw", ".", "set_mouse_button_callback", "(", "\n", "self", ".", "window", ",", "self", ".", "_mouse_button_callback", ")", "\n", "glfw", ".", "set_scroll_callback", "(", "self", ".", "window", ",", "self", ".", "_scroll_callback", ")", "\n", "glfw", ".", "set_key_callback", "(", "self", ".", "window", ",", "self", ".", "key_callback", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewerBasic.render": [[42, 56], ["glfw.poll_events", "glfw.window_should_close", "super().render", "exit"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Render the current simulation state to the screen or off-screen buffer.\n        Call this in your main loop.\n        \"\"\"", "\n", "if", "self", ".", "window", "is", "None", ":", "\n", "            ", "return", "\n", "", "elif", "glfw", ".", "window_should_close", "(", "self", ".", "window", ")", ":", "\n", "            ", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "_gui_lock", ":", "\n", "            ", "super", "(", ")", ".", "render", "(", ")", "\n", "\n", "", "glfw", ".", "poll_events", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewerBasic.key_callback": [[57, 62], ["print", "print", "exit"], "methods", ["None"], ["", "def", "key_callback", "(", "self", ",", "window", ",", "key", ",", "scancode", ",", "action", ",", "mods", ")", ":", "\n", "        ", "if", "action", "==", "glfw", ".", "RELEASE", "and", "key", "==", "glfw", ".", "KEY_ESCAPE", ":", "\n", "            ", "print", "(", "\"Pressed ESC\"", ")", "\n", "print", "(", "\"Quitting.\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewerBasic._cursor_pos_callback": [[63, 88], ["glfw.get_framebuffer_size", "int", "int", "int", "int", "mjviewer.MjViewerBasic.move_camera", "glfw.get_key", "glfw.get_key"], "methods", ["None"], ["", "", "def", "_cursor_pos_callback", "(", "self", ",", "window", ",", "xpos", ",", "ypos", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "_button_left_pressed", "or", "self", ".", "_button_right_pressed", ")", ":", "\n", "            ", "return", "\n", "\n", "# Determine whether to move, zoom or rotate view", "\n", "", "mod_shift", "=", "(", "\n", "glfw", ".", "get_key", "(", "window", ",", "glfw", ".", "KEY_LEFT_SHIFT", ")", "==", "glfw", ".", "PRESS", "or", "\n", "glfw", ".", "get_key", "(", "window", ",", "glfw", ".", "KEY_RIGHT_SHIFT", ")", "==", "glfw", ".", "PRESS", ")", "\n", "if", "self", ".", "_button_right_pressed", ":", "\n", "            ", "action", "=", "const", ".", "MOUSE_MOVE_H", "if", "mod_shift", "else", "const", ".", "MOUSE_MOVE_V", "\n", "", "elif", "self", ".", "_button_left_pressed", ":", "\n", "            ", "action", "=", "const", ".", "MOUSE_ROTATE_H", "if", "mod_shift", "else", "const", ".", "MOUSE_ROTATE_V", "\n", "", "else", ":", "\n", "            ", "action", "=", "const", ".", "MOUSE_ZOOM", "\n", "\n", "# Determine", "\n", "", "dx", "=", "int", "(", "self", ".", "_scale", "*", "xpos", ")", "-", "self", ".", "_last_mouse_x", "\n", "dy", "=", "int", "(", "self", ".", "_scale", "*", "ypos", ")", "-", "self", ".", "_last_mouse_y", "\n", "width", ",", "height", "=", "glfw", ".", "get_framebuffer_size", "(", "window", ")", "\n", "\n", "with", "self", ".", "_gui_lock", ":", "\n", "            ", "self", ".", "move_camera", "(", "action", ",", "dx", "/", "height", ",", "dy", "/", "height", ")", "\n", "\n", "", "self", ".", "_last_mouse_x", "=", "int", "(", "self", ".", "_scale", "*", "xpos", ")", "\n", "self", ".", "_last_mouse_y", "=", "int", "(", "self", ".", "_scale", "*", "ypos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewerBasic._mouse_button_callback": [[89, 98], ["glfw.get_cursor_pos", "int", "int", "glfw.get_mouse_button", "glfw.get_mouse_button"], "methods", ["None"], ["", "def", "_mouse_button_callback", "(", "self", ",", "window", ",", "button", ",", "act", ",", "mods", ")", ":", "\n", "        ", "self", ".", "_button_left_pressed", "=", "(", "\n", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_LEFT", ")", "==", "glfw", ".", "PRESS", ")", "\n", "self", ".", "_button_right_pressed", "=", "(", "\n", "glfw", ".", "get_mouse_button", "(", "window", ",", "glfw", ".", "MOUSE_BUTTON_RIGHT", ")", "==", "glfw", ".", "PRESS", ")", "\n", "\n", "x", ",", "y", "=", "glfw", ".", "get_cursor_pos", "(", "window", ")", "\n", "self", ".", "_last_mouse_x", "=", "int", "(", "self", ".", "_scale", "*", "x", ")", "\n", "self", ".", "_last_mouse_y", "=", "int", "(", "self", ".", "_scale", "*", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewerBasic._scroll_callback": [[99, 102], ["mjviewer.MjViewerBasic.move_camera"], "methods", ["None"], ["", "def", "_scroll_callback", "(", "self", ",", "window", ",", "x_offset", ",", "y_offset", ")", ":", "\n", "        ", "with", "self", ".", "_gui_lock", ":", "\n", "            ", "self", ".", "move_camera", "(", "const", ".", "MOUSE_ZOOM", ",", "0", ",", "-", "0.05", "*", "y_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer.__init__": [[127, 163], ["mjviewer.MjViewerBasic.__init__", "multiprocessing.Queue"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "sim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "sim", ")", "\n", "\n", "self", ".", "_ncam", "=", "sim", ".", "model", ".", "ncam", "\n", "self", ".", "_paused", "=", "False", "# is viewer paused.", "\n", "# should we advance viewer just by one step.", "\n", "self", ".", "_advance_by_one_step", "=", "False", "\n", "\n", "# Vars for recording video", "\n", "self", ".", "_record_video", "=", "False", "\n", "self", ".", "_video_queue", "=", "Queue", "(", ")", "\n", "self", ".", "_video_idx", "=", "0", "\n", "self", ".", "_video_path", "=", "\"./tmp/video_%07d.mp4\"", "\n", "\n", "# vars for capturing screen", "\n", "self", ".", "_image_idx", "=", "0", "\n", "self", ".", "_image_path", "=", "\"./tmp/frame_%07d.png\"", "\n", "\n", "# run_speed = x1, means running real time, x2 means fast-forward times", "\n", "# two.", "\n", "self", ".", "_run_speed", "=", "1.0", "\n", "self", ".", "_loop_count", "=", "0", "\n", "self", ".", "_render_every_frame", "=", "False", "\n", "\n", "self", ".", "_show_mocap", "=", "True", "# Show / hide mocap bodies.", "\n", "self", ".", "_transparent", "=", "False", "# Make everything transparent.", "\n", "\n", "# this variable is estamated as a running average.", "\n", "self", ".", "_time_per_render", "=", "1", "/", "60.0", "\n", "self", ".", "_hide_overlay", "=", "False", "# hide the entire overlay.", "\n", "self", ".", "_user_overlay", "=", "{", "}", "\n", "\n", "self", ".", "video_fps", "=", "30", "\n", "self", ".", "frame_skip", "=", "1", "\n", "self", ".", "sim_time", "=", "0", "\n", "self", ".", "custom_key_callback", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer.render": [[164, 208], ["copy.deepcopy", "mjviewer.MjViewer._overlay.clear", "time.time", "mjviewer.MjViewer._overlay.clear", "mjviewer.MjViewerBasic.render", "mjviewer.MjViewer._user_overlay.items", "mjviewer.MjViewer._create_full_overlay", "mjviewer.MjViewer._read_pixels_as_in_window", "mjviewer.MjViewer._video_queue.put", "mjviewer.MjViewer.render.render_inner_loop"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer._create_full_overlay", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer._read_pixels_as_in_window"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Render the current simulation state to the screen or off-screen buffer.\n        Call this in your main loop.\n        \"\"\"", "\n", "\n", "def", "render_inner_loop", "(", "self", ")", ":", "\n", "            ", "render_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "_overlay", ".", "clear", "(", ")", "\n", "if", "not", "self", ".", "_hide_overlay", ":", "\n", "                ", "for", "k", ",", "v", "in", "self", ".", "_user_overlay", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "_overlay", "[", "k", "]", "=", "copy", ".", "deepcopy", "(", "v", ")", "\n", "", "self", ".", "_create_full_overlay", "(", ")", "\n", "\n", "", "super", "(", ")", ".", "render", "(", ")", "\n", "if", "self", ".", "_record_video", ":", "\n", "                ", "frame", "=", "self", ".", "_read_pixels_as_in_window", "(", ")", "\n", "self", ".", "_video_queue", ".", "put", "(", "frame", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_time_per_render", "=", "0.9", "*", "self", ".", "_time_per_render", "+", "0.1", "*", "(", "time", ".", "time", "(", ")", "-", "render_start", ")", "\n", "\n", "", "", "self", ".", "_user_overlay", "=", "copy", ".", "deepcopy", "(", "self", ".", "_overlay", ")", "\n", "# Render the same frame if paused.", "\n", "if", "self", ".", "_paused", ":", "\n", "            ", "while", "self", ".", "_paused", ":", "\n", "                ", "render_inner_loop", "(", "self", ")", "\n", "if", "self", ".", "_advance_by_one_step", ":", "\n", "                    ", "self", ".", "_advance_by_one_step", "=", "False", "\n", "break", "\n", "", "", "", "else", ":", "\n", "# inner_loop runs \"_loop_count\" times in expectation (where \"_loop_count\" is a float).", "\n", "# Therefore, frames are displayed in the real-time.", "\n", "            ", "self", ".", "_loop_count", "+=", "(", "self", ".", "sim", ".", "model", ".", "opt", ".", "timestep", "*", "self", ".", "frame_skip", "-", "self", ".", "sim_time", ")", "/", "(", "self", ".", "_time_per_render", "*", "self", ".", "_run_speed", ")", "\n", "if", "self", ".", "_render_every_frame", ":", "\n", "                ", "self", ".", "_loop_count", "=", "1", "\n", "", "while", "self", ".", "_loop_count", ">", "0", ":", "\n", "                ", "render_inner_loop", "(", "self", ")", "\n", "self", ".", "_loop_count", "-=", "1", "\n", "# Markers and overlay are regenerated in every pass.", "\n", "", "", "self", ".", "_markers", "[", ":", "]", "=", "[", "]", "\n", "self", ".", "_overlay", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer._read_pixels_as_in_window": [[209, 240], ["glfw.get_framebuffer_size", "numpy.array", "resolution.astype.astype.astype", "offscreen_ctx._overlay.clear", "offscreen_ctx._overlay.update", "mujoco_py.utils.rec_assign", "mjviewer.MjViewer.sim.render", "offscreen_ctx._overlay.clear", "offscreen_ctx._overlay.update", "mujoco_py.utils.rec_assign", "min", "mjviewer.MjViewer.sim.render", "copy.deepcopy", "copy.deepcopy", "mujoco_py.utils.rec_copy", "mujoco_py.utils.rec_copy", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.eval.DataLogger.clear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render"], ["", "def", "_read_pixels_as_in_window", "(", "self", ")", ":", "\n", "# Reads pixels with markers and overlay from the same camera as screen.", "\n", "        ", "resolution", "=", "glfw", ".", "get_framebuffer_size", "(", "\n", "self", ".", "sim", ".", "_render_context_window", ".", "window", ")", "\n", "\n", "resolution", "=", "np", ".", "array", "(", "resolution", ")", "\n", "resolution", "=", "resolution", "*", "min", "(", "1000", "/", "np", ".", "min", "(", "resolution", ")", ",", "1", ")", "\n", "resolution", "=", "resolution", ".", "astype", "(", "np", ".", "int32", ")", "\n", "resolution", "-=", "resolution", "%", "16", "\n", "if", "self", ".", "sim", ".", "_render_context_offscreen", "is", "None", ":", "\n", "            ", "self", ".", "sim", ".", "render", "(", "resolution", "[", "0", "]", ",", "resolution", "[", "1", "]", ")", "\n", "", "offscreen_ctx", "=", "self", ".", "sim", ".", "_render_context_offscreen", "\n", "window_ctx", "=", "self", ".", "sim", ".", "_render_context_window", "\n", "# Save markers and overlay from offscreen.", "\n", "saved", "=", "[", "copy", ".", "deepcopy", "(", "offscreen_ctx", ".", "_markers", ")", ",", "\n", "copy", ".", "deepcopy", "(", "offscreen_ctx", ".", "_overlay", ")", ",", "\n", "rec_copy", "(", "offscreen_ctx", ".", "cam", ")", "]", "\n", "# Copy markers and overlay from window.", "\n", "offscreen_ctx", ".", "_markers", "[", ":", "]", "=", "window_ctx", ".", "_markers", "[", ":", "]", "\n", "offscreen_ctx", ".", "_overlay", ".", "clear", "(", ")", "\n", "offscreen_ctx", ".", "_overlay", ".", "update", "(", "window_ctx", ".", "_overlay", ")", "\n", "rec_assign", "(", "offscreen_ctx", ".", "cam", ",", "rec_copy", "(", "window_ctx", ".", "cam", ")", ")", "\n", "\n", "img", "=", "self", ".", "sim", ".", "render", "(", "*", "resolution", ")", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "# Rendered images are upside-down.", "\n", "# Restore markers and overlay to offscreen.", "\n", "offscreen_ctx", ".", "_markers", "[", ":", "]", "=", "saved", "[", "0", "]", "[", ":", "]", "\n", "offscreen_ctx", ".", "_overlay", ".", "clear", "(", ")", "\n", "offscreen_ctx", ".", "_overlay", ".", "update", "(", "saved", "[", "1", "]", ")", "\n", "rec_assign", "(", "offscreen_ctx", ".", "cam", ",", "saved", "[", "2", "]", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer._create_full_overlay": [[241, 294], ["mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "round", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "int", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "str", "str", "mjviewer.MjViewer.add_overlay", "mjviewer.MjViewer.add_overlay", "time.time"], "methods", ["None"], ["", "def", "_create_full_overlay", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_render_every_frame", ":", "\n", "            ", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"\"", ",", "\"\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"Run speed = %.3f x real time\"", "%", "\n", "self", ".", "_run_speed", ",", "\"[S]lower, [F]aster\"", ")", "\n", "", "self", ".", "add_overlay", "(", "\n", "const", ".", "GRID_TOPLEFT", ",", "\"Ren[d]er every frame\"", ",", "\"Off\"", "if", "self", ".", "_render_every_frame", "else", "\"On\"", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"Switch camera (#cams = %d)\"", "%", "(", "self", ".", "_ncam", "+", "1", ")", ",", "\n", "\"[Tab] (camera ID = %d)\"", "%", "self", ".", "cam", ".", "fixedcamid", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"[C]ontact forces\"", ",", "\"Off\"", "if", "self", ".", "vopt", ".", "flags", "[", "\n", "10", "]", "==", "1", "else", "\"On\"", ")", "\n", "self", ".", "add_overlay", "(", "\n", "const", ".", "GRID_TOPLEFT", ",", "\"Referenc[e] frames\"", ",", "\"Off\"", "if", "self", ".", "vopt", ".", "frame", "==", "1", "else", "\"On\"", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\n", "\"T[r]ansparent\"", ",", "\"On\"", "if", "self", ".", "_transparent", "else", "\"Off\"", ")", "\n", "self", ".", "add_overlay", "(", "\n", "const", ".", "GRID_TOPLEFT", ",", "\"Display [M]ocap bodies\"", ",", "\"On\"", "if", "self", ".", "_show_mocap", "else", "\"Off\"", ")", "\n", "if", "self", ".", "_paused", "is", "not", "None", ":", "\n", "            ", "if", "not", "self", ".", "_paused", ":", "\n", "                ", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"Stop\"", ",", "\"[Space]\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"Start\"", ",", "\"[Space]\"", ")", "\n", "", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\n", "\"Advance simulation by one step\"", ",", "\"[right arrow]\"", ")", "\n", "", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"[H]ide Menu\"", ",", "\"\"", ")", "\n", "if", "self", ".", "_record_video", ":", "\n", "            ", "ndots", "=", "int", "(", "7", "*", "(", "time", ".", "time", "(", ")", "%", "1", ")", ")", "\n", "dots", "=", "(", "\".\"", "*", "ndots", ")", "+", "(", "\" \"", "*", "(", "6", "-", "ndots", ")", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\n", "\"Record [V]ideo (On) \"", "+", "dots", ",", "\"\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"Record [V]ideo (Off) \"", ",", "\"\"", ")", "\n", "", "if", "self", ".", "_video_idx", ">", "0", ":", "\n", "            ", "fname", "=", "self", ".", "_video_path", "%", "(", "self", ".", "_video_idx", "-", "1", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"   saved as %s\"", "%", "fname", ",", "\"\"", ")", "\n", "\n", "", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"Cap[t]ure frame\"", ",", "\"\"", ")", "\n", "if", "self", ".", "_image_idx", ">", "0", ":", "\n", "            ", "fname", "=", "self", ".", "_image_path", "%", "(", "self", ".", "_image_idx", "-", "1", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"   saved as %s\"", "%", "fname", ",", "\"\"", ")", "\n", "", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"Start [i]pdb\"", ",", "\"\"", ")", "\n", "if", "self", ".", "_record_video", ":", "\n", "            ", "extra", "=", "\" (while video is not recorded)\"", "\n", "", "else", ":", "\n", "            ", "extra", "=", "\"\"", "\n", "", "self", ".", "add_overlay", "(", "const", ".", "GRID_BOTTOMLEFT", ",", "\"FPS\"", ",", "\"%d%s\"", "%", "\n", "(", "1", "/", "self", ".", "_time_per_render", ",", "extra", ")", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_BOTTOMLEFT", ",", "\"Solver iterations\"", ",", "str", "(", "\n", "self", ".", "sim", ".", "data", ".", "solver_iter", "+", "1", ")", ")", "\n", "step", "=", "round", "(", "self", ".", "sim", ".", "data", ".", "time", "/", "self", ".", "sim", ".", "model", ".", "opt", ".", "timestep", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_BOTTOMRIGHT", ",", "\"Step\"", ",", "str", "(", "step", ")", ")", "\n", "self", ".", "add_overlay", "(", "const", ".", "GRID_TOPLEFT", ",", "\"Toggle geomgroup visibility\"", ",", "\"0-4\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer.key_callback": [[295, 373], ["mjviewer.MjViewerBasic.key_callback", "mjviewer.MjViewer.custom_key_callback", "multiprocessing.Process", "mjviewer.MjViewer._video_process.start", "mjviewer.MjViewer._video_queue.put", "mjviewer.MjViewer._video_process.join", "mjviewer.MjViewer._read_pixels_as_in_window", "imageio.imwrite", "print", "ipdb.set_trace", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer.key_callback", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.MjViewer._read_pixels_as_in_window"], ["", "def", "key_callback", "(", "self", ",", "window", ",", "key", ",", "scancode", ",", "action", ",", "mods", ")", ":", "\n", "        ", "if", "self", ".", "custom_key_callback", "is", "not", "None", ":", "\n", "            ", "res", "=", "self", ".", "custom_key_callback", "(", "key", ",", "action", ",", "mods", ")", "\n", "if", "res", ":", "\n", "                ", "return", "\n", "\n", "", "", "if", "action", "!=", "glfw", ".", "RELEASE", ":", "\n", "            ", "return", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_TAB", ":", "# Switches cameras.", "\n", "            ", "self", ".", "cam", ".", "fixedcamid", "+=", "1", "\n", "self", ".", "cam", ".", "type", "=", "const", ".", "CAMERA_FIXED", "\n", "if", "self", ".", "cam", ".", "fixedcamid", ">=", "self", ".", "_ncam", ":", "\n", "                ", "self", ".", "cam", ".", "fixedcamid", "=", "-", "1", "\n", "self", ".", "cam", ".", "type", "=", "const", ".", "CAMERA_FREE", "\n", "", "", "elif", "key", "==", "glfw", ".", "KEY_H", ":", "# hides all overlay.", "\n", "            ", "self", ".", "_hide_overlay", "=", "not", "self", ".", "_hide_overlay", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_SPACE", "and", "self", ".", "_paused", "is", "not", "None", ":", "# stops simulation.", "\n", "            ", "self", ".", "_paused", "=", "not", "self", ".", "_paused", "\n", "# Advances simulation by one step.", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_RIGHT", "and", "self", ".", "_paused", "is", "not", "None", ":", "\n", "            ", "self", ".", "_advance_by_one_step", "=", "True", "\n", "self", ".", "_paused", "=", "True", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_V", "or", "(", "key", "==", "glfw", ".", "KEY_ESCAPE", "and", "self", ".", "_record_video", ")", ":", "# Records video. Trigers with V or if in progress by ESC.", "\n", "            ", "self", ".", "_record_video", "=", "not", "self", ".", "_record_video", "\n", "if", "self", ".", "_record_video", ":", "\n", "                ", "fps", "=", "self", ".", "video_fps", "# (1 / self._time_per_render)", "\n", "self", ".", "_video_process", "=", "Process", "(", "target", "=", "save_video", ",", "\n", "args", "=", "(", "self", ".", "_video_queue", ",", "self", ".", "_video_path", "%", "self", ".", "_video_idx", ",", "fps", ")", ")", "\n", "self", ".", "_video_process", ".", "start", "(", ")", "\n", "", "if", "not", "self", ".", "_record_video", ":", "\n", "                ", "self", ".", "_video_queue", ".", "put", "(", "None", ")", "\n", "self", ".", "_video_process", ".", "join", "(", ")", "\n", "self", ".", "_video_idx", "+=", "1", "\n", "", "", "elif", "key", "==", "glfw", ".", "KEY_T", ":", "# capture screenshot", "\n", "            ", "img", "=", "self", ".", "_read_pixels_as_in_window", "(", ")", "\n", "imageio", ".", "imwrite", "(", "self", ".", "_image_path", "%", "self", ".", "_image_idx", ",", "img", ")", "\n", "# print('save image at : ', self._image_path % self._image_idx)", "\n", "self", ".", "_image_idx", "+=", "1", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_I", ":", "# drops in debugger.", "\n", "            ", "print", "(", "'You can access the simulator by self.sim'", ")", "\n", "import", "ipdb", "\n", "ipdb", ".", "set_trace", "(", ")", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_S", ":", "# Slows down simulation.", "\n", "            ", "self", ".", "_run_speed", "/=", "2.0", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_F", ":", "# Speeds up simulation.", "\n", "            ", "self", ".", "_run_speed", "*=", "2.0", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_C", ":", "# Displays contact forces.", "\n", "            ", "vopt", "=", "self", ".", "vopt", "\n", "vopt", ".", "flags", "[", "10", "]", "=", "vopt", ".", "flags", "[", "11", "]", "=", "not", "vopt", ".", "flags", "[", "10", "]", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_D", ":", "# turn off / turn on rendering every frame.", "\n", "            ", "self", ".", "_render_every_frame", "=", "not", "self", ".", "_render_every_frame", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_E", ":", "\n", "            ", "vopt", "=", "self", ".", "vopt", "\n", "vopt", ".", "frame", "=", "1", "-", "vopt", ".", "frame", "\n", "", "elif", "key", "==", "glfw", ".", "KEY_R", ":", "# makes everything little bit transparent.", "\n", "            ", "self", ".", "_transparent", "=", "not", "self", ".", "_transparent", "\n", "if", "self", ".", "_transparent", ":", "\n", "                ", "self", ".", "sim", ".", "model", ".", "geom_rgba", "[", ":", ",", "3", "]", "/=", "5.0", "\n", "", "else", ":", "\n", "                ", "self", ".", "sim", ".", "model", ".", "geom_rgba", "[", ":", ",", "3", "]", "*=", "5.0", "\n", "", "", "elif", "key", "==", "glfw", ".", "KEY_M", ":", "# Shows / hides mocap bodies", "\n", "            ", "self", ".", "_show_mocap", "=", "not", "self", ".", "_show_mocap", "\n", "for", "body_idx1", ",", "val", "in", "enumerate", "(", "self", ".", "sim", ".", "model", ".", "body_mocapid", ")", ":", "\n", "                ", "if", "val", "!=", "-", "1", ":", "\n", "                    ", "for", "geom_idx", ",", "body_idx2", "in", "enumerate", "(", "self", ".", "sim", ".", "model", ".", "geom_bodyid", ")", ":", "\n", "                        ", "if", "body_idx1", "==", "body_idx2", ":", "\n", "                            ", "if", "not", "self", ".", "_show_mocap", ":", "\n", "# Store transparency for later to show it.", "\n", "                                ", "self", ".", "sim", ".", "extras", "[", "\n", "geom_idx", "]", "=", "self", ".", "sim", ".", "model", ".", "geom_rgba", "[", "geom_idx", ",", "3", "]", "\n", "self", ".", "sim", ".", "model", ".", "geom_rgba", "[", "geom_idx", ",", "3", "]", "=", "0", "\n", "", "else", ":", "\n", "                                ", "self", ".", "sim", ".", "model", ".", "geom_rgba", "[", "\n", "geom_idx", ",", "3", "]", "=", "self", ".", "sim", ".", "extras", "[", "geom_idx", "]", "\n", "", "", "", "", "", "", "elif", "key", "in", "(", "glfw", ".", "KEY_0", ",", "glfw", ".", "KEY_1", ",", "glfw", ".", "KEY_2", ",", "glfw", ".", "KEY_3", ",", "glfw", ".", "KEY_4", ")", ":", "\n", "            ", "self", ".", "vopt", ".", "geomgroup", "[", "key", "-", "glfw", ".", "KEY_0", "]", "^=", "1", "\n", "", "super", "(", ")", ".", "key_callback", "(", "window", ",", "key", ",", "scancode", ",", "action", ",", "mods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mjviewer.save_video": [[378, 386], ["imageio.get_writer", "imageio.get_writer.close", "queue.get", "imageio.get_writer.append_data"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close"], ["", "", "def", "save_video", "(", "queue", ",", "filename", ",", "fps", ")", ":", "\n", "    ", "writer", "=", "imageio", ".", "get_writer", "(", "filename", ",", "fps", "=", "fps", ")", "\n", "while", "True", ":", "\n", "        ", "frame", "=", "queue", ".", "get", "(", ")", "\n", "if", "frame", "is", "None", ":", "\n", "            ", "break", "\n", "", "writer", ".", "append_data", "(", "frame", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.__init__": [[18, 43], ["mujoco_py.load_model_from_path", "mujoco_py.MjSim", "mujoco_env.MujocoEnv.sim.data.qpos.ravel().copy", "mujoco_env.MujocoEnv.sim.data.qvel.ravel().copy", "mujoco_env.MujocoEnv.seed", "os.path.exists", "IOError", "int", "numpy.round", "mujoco_env.MujocoEnv.sim.data.qpos.ravel", "mujoco_env.MujocoEnv.sim.data.qvel.ravel"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.seed", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel"], ["def", "__init__", "(", "self", ",", "fullpath", ",", "frame_skip", ")", ":", "\n", "        ", "if", "not", "path", ".", "exists", "(", "fullpath", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"File %s does not exist\"", "%", "fullpath", ")", "\n", "", "self", ".", "frame_skip", "=", "frame_skip", "\n", "self", ".", "model", "=", "mujoco_py", ".", "load_model_from_path", "(", "fullpath", ")", "\n", "self", ".", "sim", "=", "mujoco_py", ".", "MjSim", "(", "self", ".", "model", ")", "\n", "self", ".", "data", "=", "self", ".", "sim", ".", "data", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "_viewers", "=", "{", "}", "\n", "self", ".", "obs_dim", "=", "None", "\n", "self", ".", "action_space", "=", "None", "\n", "self", ".", "observation_space", "=", "None", "\n", "self", ".", "np_random", "=", "None", "\n", "self", ".", "cur_t", "=", "0", "# number of steps taken", "\n", "\n", "self", ".", "metadata", "=", "{", "\n", "'render.modes'", ":", "[", "'human'", ",", "'rgb_array'", "]", ",", "\n", "'video.frames_per_second'", ":", "int", "(", "np", ".", "round", "(", "1.0", "/", "self", ".", "dt", ")", ")", "\n", "}", "\n", "\n", "self", ".", "init_qpos", "=", "self", ".", "sim", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "self", ".", "init_qvel", "=", "self", ".", "sim", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "self", ".", "prev_qpos", "=", "None", "\n", "self", ".", "prev_qvel", "=", "None", "\n", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.set_spaces": [[44, 54], ["mujoco_env.MujocoEnv.step", "mujoco_env.MujocoEnv.model.actuator_ctrlrange.copy", "gym.spaces.Box", "gym.spaces.Box", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "set_spaces", "(", "self", ")", ":", "\n", "        ", "observation", ",", "_reward", ",", "done", ",", "_info", "=", "self", ".", "step", "(", "np", ".", "zeros", "(", "self", ".", "model", ".", "nu", ")", ")", "\n", "self", ".", "obs_dim", "=", "observation", ".", "size", "\n", "bounds", "=", "self", ".", "model", ".", "actuator_ctrlrange", ".", "copy", "(", ")", "\n", "low", "=", "bounds", "[", ":", ",", "0", "]", "\n", "high", "=", "bounds", "[", ":", ",", "1", "]", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "high", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "self", ".", "obs_dim", ")", "\n", "low", "=", "-", "high", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", ",", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.seed": [[55, 58], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.step": [[61, 66], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Step the environment forward.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.reset_model": [[67, 73], ["None"], "methods", ["None"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset the robot degrees of freedom (qpos and qvel).\n        Implement this in each subclass.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.viewer_setup": [[74, 81], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        This method is called when the viewer is initialized and after every reset\n        Optionally implement this method, if you need to tinker with camera position\n        and so forth.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.reset": [[84, 94], ["mujoco_env.MujocoEnv.sim.reset", "mujoco_env.MujocoEnv.reset_model", "mujoco_env.MujocoEnv._viewers.items", "mujoco_env.MujocoEnv.viewer_setup"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.reset_model", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.viewer_setup"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim", ".", "reset", "(", ")", "\n", "self", ".", "cur_t", "=", "0", "\n", "ob", "=", "self", ".", "reset_model", "(", ")", "\n", "old_viewer", "=", "self", ".", "viewer", "\n", "for", "mode", ",", "v", "in", "self", ".", "_viewers", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "viewer", "=", "v", "\n", "self", ".", "viewer_setup", "(", "mode", ")", "\n", "", "self", ".", "viewer", "=", "old_viewer", "\n", "return", "ob", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.set_state": [[95, 102], ["mujoco_env.MujocoEnv.sim.get_state", "mujoco_py.MjSimState", "mujoco_env.MujocoEnv.sim.set_state", "mujoco_env.MujocoEnv.sim.forward"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward"], ["", "def", "set_state", "(", "self", ",", "qpos", ",", "qvel", ")", ":", "\n", "        ", "assert", "qpos", ".", "shape", "==", "(", "self", ".", "model", ".", "nq", ",", ")", "and", "qvel", ".", "shape", "==", "(", "self", ".", "model", ".", "nv", ",", ")", "\n", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "old_state", ".", "time", ",", "qpos", ",", "qvel", ",", "\n", "old_state", ".", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.dt": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "opt", ".", "timestep", "*", "self", ".", "frame_skip", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.do_simulation": [[107, 111], ["range", "mujoco_env.MujocoEnv.sim.step"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step"], ["", "def", "do_simulation", "(", "self", ",", "ctrl", ",", "n_frames", ")", ":", "\n", "        ", "self", ".", "sim", ".", "data", ".", "ctrl", "[", ":", "]", "=", "ctrl", "\n", "for", "_", "in", "range", "(", "n_frames", ")", ":", "\n", "            ", "self", ".", "sim", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.render": [[112, 121], ["mujoco_env.MujocoEnv._get_viewer().render", "mujoco_env.MujocoEnv._get_viewer().read_pixels", "mujoco_env.MujocoEnv._get_viewer().render", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv._get_viewer"], ["", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "width", "=", "DEFAULT_SIZE", ",", "height", "=", "DEFAULT_SIZE", ")", ":", "\n", "        ", "if", "mode", "==", "'image'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", "mode", ")", ".", "render", "(", "width", ",", "height", ")", "\n", "# window size used for old mujoco-py:", "\n", "data", "=", "self", ".", "_get_viewer", "(", "mode", ")", ".", "read_pixels", "(", "width", ",", "height", ",", "depth", "=", "False", ")", "\n", "# original image is upside-down, so flip it, and the image format is BGR for OpenCV", "\n", "return", "data", "[", ":", ":", "-", "1", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", "mode", ")", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close": [[122, 127], ["None"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "# self.viewer.finish()", "\n", "            ", "self", ".", "viewer", "=", "None", "\n", "self", ".", "_viewers", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv._get_viewer": [[128, 138], ["mujoco_env.MujocoEnv._viewers.get", "mujoco_env.MujocoEnv.viewer_setup", "envs.common.mjviewer.MjViewer", "mujoco_py.MjRenderContextOffscreen"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.viewer_setup"], ["", "", "def", "_get_viewer", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "viewer", "=", "self", ".", "_viewers", ".", "get", "(", "mode", ")", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "if", "mode", "==", "'human'", ":", "\n", "                ", "self", ".", "viewer", "=", "MjViewer", "(", "self", ".", "sim", ")", "\n", "", "elif", "mode", "==", "'image'", ":", "\n", "                ", "self", ".", "viewer", "=", "mujoco_py", ".", "MjRenderContextOffscreen", "(", "self", ".", "sim", ",", "0", ")", "\n", "", "self", ".", "_viewers", "[", "mode", "]", "=", "self", ".", "viewer", "\n", "", "self", ".", "viewer_setup", "(", "mode", ")", "\n", "return", "self", ".", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.set_custom_key_callback": [[139, 141], ["mujoco_env.MujocoEnv._get_viewer"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv._get_viewer"], ["", "def", "set_custom_key_callback", "(", "self", ",", "key_func", ")", ":", "\n", "        ", "self", ".", "_get_viewer", "(", "'human'", ")", ".", "custom_key_callback", "=", "key_func", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.get_body_com": [[142, 144], ["mujoco_env.MujocoEnv.data.get_body_xpos"], "methods", ["None"], ["", "def", "get_body_com", "(", "self", ",", "body_name", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "get_body_xpos", "(", "body_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.state_vector": [[145, 149], ["numpy.concatenate"], "methods", ["None"], ["", "def", "state_vector", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.h36m_dataset.Human36mDataset.__init__": [[210, 263], ["common.mocap_dataset.MocapDataset.__init__", "copy.deepcopy", "h36m_dataset.Human36mDataset._cameras.values", "[].item", "[].item.items", "enumerate", "actions.items", "h36m_dataset.Human36mDataset.remove_joints", "cam.update", "cam.items", "common.camera.normalize_screen_coordinates().astype", "numpy.concatenate", "numpy.concatenate", "numpy.load", "numpy.array", "common.camera.normalize_screen_coordinates"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.remove_joints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.normalize_screen_coordinates"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "remove_static_joints", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fps", "=", "50", ",", "skeleton", "=", "h36m_skeleton", ")", "\n", "\n", "self", ".", "_cameras", "=", "copy", ".", "deepcopy", "(", "h36m_cameras_extrinsic_params", ")", "\n", "for", "cameras", "in", "self", ".", "_cameras", ".", "values", "(", ")", ":", "\n", "            ", "for", "i", ",", "cam", "in", "enumerate", "(", "cameras", ")", ":", "\n", "                ", "cam", ".", "update", "(", "h36m_cameras_intrinsic_params", "[", "i", "]", ")", "\n", "for", "k", ",", "v", "in", "cam", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "[", "'id'", ",", "'res_w'", ",", "'res_h'", "]", ":", "\n", "                        ", "cam", "[", "k", "]", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Normalize camera frame", "\n", "", "", "cam", "[", "'center'", "]", "=", "normalize_screen_coordinates", "(", "cam", "[", "'center'", "]", ",", "w", "=", "cam", "[", "'res_w'", "]", ",", "h", "=", "cam", "[", "'res_h'", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "cam", "[", "'focal_length'", "]", "=", "cam", "[", "'focal_length'", "]", "/", "cam", "[", "'res_w'", "]", "*", "2", "\n", "if", "'translation'", "in", "cam", ":", "\n", "                    ", "cam", "[", "'translation'", "]", "=", "cam", "[", "'translation'", "]", "/", "1000", "# mm to meters", "\n", "\n", "# Add intrinsic parameters vector", "\n", "", "cam", "[", "'intrinsic'", "]", "=", "np", ".", "concatenate", "(", "(", "cam", "[", "'focal_length'", "]", ",", "\n", "cam", "[", "'center'", "]", ",", "\n", "cam", "[", "'radial_distortion'", "]", ",", "\n", "cam", "[", "'tangential_distortion'", "]", ")", ")", "\n", "\n", "# Add extrinsic parameters vector", "\n", "if", "'translation'", "in", "cam", ":", "\n", "                    ", "cam", "[", "'extrinsic'", "]", "=", "np", ".", "concatenate", "(", "(", "cam", "[", "'orientation'", "]", ",", "\n", "cam", "[", "'translation'", "]", ")", ")", "\n", "\n", "# Load serialized dataset", "\n", "", "", "", "data", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "[", "'positions_3d'", "]", ".", "item", "(", ")", "\n", "\n", "self", ".", "_data", "=", "{", "}", "\n", "for", "subject", ",", "actions", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_data", "[", "subject", "]", "=", "{", "}", "\n", "for", "action_name", ",", "positions", "in", "actions", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_data", "[", "subject", "]", "[", "action_name", "]", "=", "{", "\n", "'positions'", ":", "positions", ",", "\n", "'cameras'", ":", "self", ".", "_cameras", "[", "subject", "]", ",", "\n", "}", "\n", "\n", "", "", "if", "remove_static_joints", ":", "\n", "# # Bring the skeleton to 17 joints instead of the original 32", "\n", "# self.remove_joints([4, 5, 9, 10, 11, 16, 20, 21, 22, 23, 24, 28, 29, 30, 31])", "\n", "# # Rewire shoulders to the correct parents", "\n", "# self._skeleton._parents[11] = 8", "\n", "# self._skeleton._parents[14] = 8", "\n", "\n", "# change to 16 joint setting", "\n", "# Bring the skeleton to 17 joints instead of the original 32", "\n", "            ", "self", ".", "remove_joints", "(", "[", "4", ",", "5", ",", "9", ",", "10", ",", "11", ",", "14", ",", "16", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "28", ",", "29", ",", "30", ",", "31", "]", ")", "\n", "# Rewire shoulders to the correct parents", "\n", "self", ".", "_skeleton", ".", "_parents", "[", "10", "]", "=", "8", "\n", "self", ".", "_skeleton", ".", "_parents", "[", "13", "]", "=", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.h36m_dataset.Human36mDataset.supports_semi_supervised": [[264, 266], ["None"], "methods", ["None"], ["", "", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.humaneva_dataset.HumanEvaDataset.__init__": [[91, 120], ["common.mocap_dataset.MocapDataset.__init__", "copy.deepcopy", "humaneva_dataset.HumanEvaDataset._cameras.values", "list", "[].item", "[].item.items", "enumerate", "humaneva_dataset.HumanEvaDataset._cameras.keys", "actions.items", "cam.update", "cam.items", "numpy.load", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fps", "=", "60", ",", "skeleton", "=", "humaneva_skeleton", ")", "\n", "\n", "self", ".", "_cameras", "=", "copy", ".", "deepcopy", "(", "humaneva_cameras_extrinsic_params", ")", "\n", "for", "cameras", "in", "self", ".", "_cameras", ".", "values", "(", ")", ":", "\n", "            ", "for", "i", ",", "cam", "in", "enumerate", "(", "cameras", ")", ":", "\n", "                ", "cam", ".", "update", "(", "humaneva_cameras_intrinsic_params", "[", "i", "]", ")", "\n", "for", "k", ",", "v", "in", "cam", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "[", "'id'", ",", "'res_w'", ",", "'res_h'", "]", ":", "\n", "                        ", "cam", "[", "k", "]", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "'float32'", ")", "\n", "", "", "if", "'translation'", "in", "cam", ":", "\n", "                    ", "cam", "[", "'translation'", "]", "=", "cam", "[", "'translation'", "]", "/", "1000", "# mm to meters", "\n", "\n", "", "", "", "for", "subject", "in", "list", "(", "self", ".", "_cameras", ".", "keys", "(", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "_cameras", "[", "subject", "]", "\n", "del", "self", ".", "_cameras", "[", "subject", "]", "\n", "for", "prefix", "in", "[", "'Train/'", ",", "'Validate/'", ",", "'Unlabeled/Train/'", ",", "'Unlabeled/Validate/'", ",", "'Unlabeled/'", "]", ":", "\n", "                ", "self", ".", "_cameras", "[", "prefix", "+", "subject", "]", "=", "data", "\n", "\n", "# Load serialized dataset", "\n", "", "", "data", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "[", "'positions_3d'", "]", ".", "item", "(", ")", "\n", "\n", "self", ".", "_data", "=", "{", "}", "\n", "for", "subject", ",", "actions", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_data", "[", "subject", "]", "=", "{", "}", "\n", "for", "action_name", ",", "positions", "in", "actions", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_data", "[", "subject", "]", "[", "action_name", "]", "=", "{", "\n", "'positions'", ":", "positions", ",", "\n", "'cameras'", ":", "self", ".", "_cameras", "[", "subject", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector": [[20, 23], ["numpy.linalg.norm"], "function", ["None"], ["def", "unit_vector", "(", "vector", ")", ":", "\n", "    ", "\"\"\" Returns the unit vector of the vector.  \"\"\"", "\n", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.angle_between": [[24, 30], ["camera2world.unit_vector", "camera2world.unit_vector", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "angle_between", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "\"\"\" Returns the angle in radians between vectors 'v1/M1' and 'v2'::\n    \"\"\"", "\n", "v1_u", "=", "unit_vector", "(", "v1", ")", "\n", "v2_u", "=", "unit_vector", "(", "v2", ")", "\n", "return", "np", ".", "dot", "(", "v1_u", ",", "v2_u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.wxyz2xyzw": [[32, 35], ["numpy.stack"], "function", ["None"], ["", "def", "wxyz2xyzw", "(", "wfist", ")", ":", "\n", "    ", "\"convert w x y z to x y z w, xyzw is used in scipy\"", "\n", "return", "np", ".", "stack", "(", "[", "wfist", "[", "1", "]", ",", "wfist", "[", "2", "]", ",", "wfist", "[", "3", "]", ",", "wfist", "[", "0", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.xyzw2wxyz": [[36, 39], ["numpy.stack"], "function", ["None"], ["", "def", "xyzw2wxyz", "(", "wfist", ")", ":", "\n", "    ", "\"convert x y z w to w x y z\"", "\n", "return", "np", ".", "stack", "(", "[", "wfist", "[", "3", "]", ",", "wfist", "[", "0", "]", ",", "wfist", "[", "1", "]", ",", "wfist", "[", "2", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.get_pca_components": [[41, 54], ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform().reshape", "camera2world.unit_vector", "sklearn.decomposition.PCA.fit_transform", "x.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "get_pca_components", "(", "pose_cam_in", ")", ":", "\n", "    ", "\"\"\"\n    input: tx16x3 pose seq in camera coordinate\n    return: ZXY axis\n    \"\"\"", "\n", "#     x = expert_dict[takes[30]]['predicted_3d']", "\n", "#     print(x.shape)", "\n", "x", "=", "pose_cam_in", "-", "pose_cam_in", "[", ":", ",", ":", "1", ",", ":", "]", "\n", "pca", "=", "PCA", "(", "n_components", "=", "3", ")", "\n", "principalComponents", "=", "pca", ".", "fit_transform", "(", "x", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "reshape", "(", "x", ".", "shape", ")", "\n", "pca_zxy", "=", "pca", ".", "components_", "\n", "pca_xyz", "=", "pca_zxy", "[", "[", "1", ",", "2", ",", "0", "]", ",", ":", "]", "\n", "return", "unit_vector", "(", "pca_xyz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.check_Z_dir": [[56, 79], ["camera2world.unit_vector", "camera2world.angle_between", "numpy.stack", "numpy.cross", "numpy.cross", "numpy.cross", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.unit_vector", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.angle_between", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross"], ["", "def", "check_Z_dir", "(", "pose_cam_in", ",", "pca_xyz", ")", ":", "\n", "    ", "\"\"\"Check the Z direction is up or down\"\"\"", "\n", "pca_x", "=", "pca_xyz", "[", "0", "]", "*", "1.", "\n", "pca_y", "=", "pca_xyz", "[", "1", "]", "*", "1.", "\n", "pca_z", "=", "pca_xyz", "[", "2", "]", "*", "1.", "\n", "\n", "fix_z", "=", "[", "0", ",", "-", "0.97", ",", "-", "0.25", "]", "# the appropriate direction", "\n", "fix_z", "=", "unit_vector", "(", "fix_z", ")", "\n", "dot_avg", "=", "angle_between", "(", "fix_z", ",", "pca_z", ")", "\n", "\n", "if", "dot_avg", ">", "0.996", ":", "\n", "        ", "pca_z", "=", "pca_z", "*", "+", "1", "\n", "pca_x", "=", "np", ".", "cross", "(", "pca_y", ",", "pca_z", ")", "\n", "", "elif", "dot_avg", "<", "-", "0.996", ":", "\n", "        ", "pca_z", "=", "pca_z", "*", "-", "1", "\n", "pca_x", "=", "np", ".", "cross", "(", "pca_y", ",", "pca_z", ")", "\n", "", "else", ":", "\n", "        ", "pca_z", "=", "fix_z", "*", "+", "1", "\n", "#         pca_x = [1, 0, 0]", "\n", "pca_y", "=", "np", ".", "cross", "(", "pca_z", ",", "pca_x", ")", "\n", "pca_x", "=", "np", ".", "cross", "(", "pca_y", ",", "pca_z", ")", "\n", "", "new_pca_xyz", "=", "np", ".", "stack", "(", "[", "pca_x", ",", "pca_y", ",", "pca_z", "]", ")", "\n", "return", "new_pca_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.cam2world_byPCA": [[97, 110], ["camera2world.get_pca_components", "camera2world.check_Z_dir", "scipy.spatial.transform.Rotation.from_matrix", "R.from_matrix.inv", "world2cam_bypca.inv.apply().reshape", "world2cam_bypca.inv.apply", "pose_cam_in.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.get_pca_components", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.check_Z_dir", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "cam2world_byPCA", "(", "pose_cam_in", ",", "cam_ex", "=", "None", ")", ":", "\n", "# input the pose in camera space, then do pca, get the zxy axis,", "\n", "    ", "pca_xyz_incam", "=", "get_pca_components", "(", "pose_cam_in", ")", "\n", "# check the leg direction, assume leg is always down,", "\n", "pca_xyz_incam", "=", "check_Z_dir", "(", "pose_cam_in", ",", "pca_xyz_incam", ")", "\n", "# calculate the Z direction in camera space", "\n", "# check_Z_accuracy(pca_xyz_incam, cam_ex)", "\n", "# get a rotation matrix by the world Z direction", "\n", "world2cam_bypca", "=", "R", ".", "from_matrix", "(", "pca_xyz_incam", ".", "T", ")", "\n", "cam2world_bypca", "=", "world2cam_bypca", ".", "inv", "(", ")", "\n", "# rotate the pose from camera space to world space", "\n", "pose_world_out", "=", "cam2world_bypca", ".", "apply", "(", "pose_cam_in", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "reshape", "(", "pose_cam_in", ".", "shape", ")", "\n", "return", "pose_world_out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.camera_to_worldByPCA": [[111, 116], ["camera2world.cam2world_byPCA", "torch.from_numpy().unsqueeze", "X.detach().cpu().numpy", "scipy.spatial.transform.Rotation.detach().cpu().numpy", "torch.from_numpy", "X.detach().cpu", "cam2world_byPCA.astype", "scipy.spatial.transform.Rotation.detach().cpu", "X.detach", "scipy.spatial.transform.Rotation.detach"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.cam2world_byPCA"], ["", "def", "camera_to_worldByPCA", "(", "X", ",", "R", "=", "None", ")", ":", "\n", "    ", "pose_cam_in", "=", "X", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "cam_ex", "=", "R", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "if", "R", "is", "not", "None", "else", "R", "\n", "pose_world_out", "=", "cam2world_byPCA", "(", "pose_cam_in", ",", "cam_ex", ")", "\n", "return", "torch", ".", "from_numpy", "(", "pose_world_out", ".", "astype", "(", "'float32'", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world_to_cameraByTensor": [[44, 47], ["common.quaternion.qinverse", "common.quaternion.qrot", "common.quaternion.qinverse.unsqueeze().unsqueeze().repeat", "t.unsqueeze().unsqueeze().repeat", "common.quaternion.qinverse.unsqueeze().unsqueeze", "t.unsqueeze().unsqueeze", "common.quaternion.qinverse.unsqueeze", "t.unsqueeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.quaternion.qinverse", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["return", "wrap", "(", "qrot", ",", "np", ".", "tile", "(", "Rt", ",", "(", "*", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ")", ",", "X", "-", "t", ")", "# Rotate and translate", "\n", "\n", "\n", "", "def", "camera_to_world", "(", "X", ",", "R", ",", "t", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.camera_to_worldByTensor": [[55, 59], ["common.quaternion.qrot", "t.unsqueeze().unsqueeze().repeat", "scipy.spatial.transform.Rotation.unsqueeze().unsqueeze().repeat", "t.unsqueeze().unsqueeze", "scipy.spatial.transform.Rotation.unsqueeze().unsqueeze", "t.unsqueeze", "scipy.spatial.transform.Rotation.unsqueeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world2cam_sktpos": [[69, 78], ["skt_in.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "f", "=", "camera_params", "[", "...", ",", ":", "2", "]", "# focal lendgth", "\n", "c", "=", "camera_params", "[", "...", ",", "2", ":", "4", "]", "# center principal point", "\n", "k", "=", "camera_params", "[", "...", ",", "4", ":", "7", "]", "\n", "p", "=", "camera_params", "[", "...", ",", "7", ":", "]", "\n", "\n", "XX", "=", "torch", ".", "clamp", "(", "X", "[", "...", ",", ":", "2", "]", "/", "X", "[", "...", ",", "2", ":", "]", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "r2", "=", "torch", ".", "sum", "(", "XX", "[", "...", ",", ":", "2", "]", "**", "2", ",", "dim", "=", "len", "(", "XX", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "radial", "=", "1", "+", "torch", ".", "sum", "(", "k", "*", "torch", ".", "cat", "(", "(", "r2", ",", "r2", "**", "2", ",", "r2", "**", "3", ")", ",", "dim", "=", "len", "(", "r2", ".", "shape", ")", "-", "1", ")", ",", "dim", "=", "len", "(", "r2", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "tan", "=", "torch", ".", "sum", "(", "p", "*", "XX", ",", "dim", "=", "len", "(", "XX", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.cam2world_sktpos": [[79, 87], ["None"], "function", ["None"], ["\n", "XXX", "=", "XX", "*", "(", "radial", "+", "tan", ")", "+", "p", "*", "r2", "\n", "\n", "return", "f", "*", "XXX", "+", "c", "\n", "\n", "\n", "", "def", "project_to_2d_linear", "(", "X", ",", "camera_params", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.reset_center": [[95, 110], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array"], "function", ["None"], ["assert", "len", "(", "camera_params", ".", "shape", ")", "==", "2", "\n", "assert", "camera_params", ".", "shape", "[", "-", "1", "]", "==", "9", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "camera_params", ".", "shape", "[", "0", "]", "\n", "\n", "while", "len", "(", "camera_params", ".", "shape", ")", "<", "len", "(", "X", ".", "shape", ")", ":", "\n", "        ", "camera_params", "=", "camera_params", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "f", "=", "camera_params", "[", "...", ",", ":", "2", "]", "\n", "c", "=", "camera_params", "[", "...", ",", "2", ":", "4", "]", "\n", "\n", "XX", "=", "torch", ".", "clamp", "(", "X", "[", "...", ",", ":", "2", "]", "/", "X", "[", "...", ",", "2", ":", "]", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "\n", "return", "f", "*", "XX", "+", "c", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.set_center_v2": [[112, 141], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.random.uniform", "numpy.random.uniform"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world_to_camera_sktpos_v2": [[143, 148], ["set_center_v2().astype", "common.utils.wrap", "common.utils.wrap", "numpy.tile", "camera.set_center_v2"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.wrap", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.wrap", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.set_center_v2"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world_to_camera_sktpos_v3": [[150, 178], ["numpy.random.uniform", "numpy.random.uniform", "numpy.array().astype", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "scipy.spatial.transform.Rotation.from_euler", "R.from_euler.as_quat", "xyzw2wxyz().astype", "set_center_v2().astype", "common.utils.wrap", "common.utils.wrap", "numpy.stack", "numpy.stack", "numpy.tile", "numpy.array", "camera.world_to_camera_sktpos_v3.xyzw2wxyz"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.wrap", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.wrap", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.xyzw2wxyz"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world_to_camera_sktpos_v3_new": [[180, 218], ["camera.world_to_camera_sktpos_v3_new.norm_sample_withbound"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.zaxis_randrotation": [[220, 235], ["torch.from_numpy().unsqueeze", "camera.posegan_preprocess", "posegan_preprocess.numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.posegan_preprocess"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.posegan_preprocess": [[236, 249], ["torchgeometry.angle_axis_to_quaternion", "camera.camera_to_worldByTensor", "torch.rand().to", "torch.zeros_like", "torch.rand"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.camera_to_worldByTensor"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.project_to_2d_purelinear": [[323, 339], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.__init__": [[12, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fps", ",", "skeleton", ")", ":", "\n", "        ", "self", ".", "_skeleton", "=", "skeleton", "\n", "self", ".", "_fps", "=", "fps", "\n", "self", ".", "_data", "=", "None", "# Must be filled by subclass", "\n", "self", ".", "_cameras", "=", "None", "# Must be filled by subclass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.remove_joints": [[18, 25], ["mocap_dataset.MocapDataset._skeleton.remove_joints", "mocap_dataset.MocapDataset._data.keys", "mocap_dataset.MocapDataset._data[].keys"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.remove_joints"], ["", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n", "        ", "kept_joints", "=", "self", ".", "_skeleton", ".", "remove_joints", "(", "joints_to_remove", ")", "\n", "for", "subject", "in", "self", ".", "_data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "action", "in", "self", ".", "_data", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "                ", "s", "=", "self", ".", "_data", "[", "subject", "]", "[", "action", "]", "\n", "if", "'positions'", "in", "s", ":", "\n", "                    ", "s", "[", "'positions'", "]", "=", "s", "[", "'positions'", "]", "[", ":", ",", "kept_joints", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.__getitem__": [[27, 29], ["None"], "methods", ["None"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.subjects": [[30, 32], ["mocap_dataset.MocapDataset._data.keys"], "methods", ["None"], ["", "def", "subjects", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.fps": [[33, 35], ["None"], "methods", ["None"], ["", "def", "fps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.skeleton": [[36, 38], ["None"], "methods", ["None"], ["", "def", "skeleton", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.cameras": [[39, 41], ["None"], "methods", ["None"], ["", "def", "cameras", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.supports_semi_supervised": [[42, 45], ["None"], "methods", ["None"], ["", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n", "# This method can be overridden", "\n", "        ", "return", "False", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.get_resolution": [[17, 24], ["subprocess.Popen", "line.decode().strip().split", "int", "int", "line.decode().strip", "line.decode"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.prepare_data_2d_custom.decode"], ["\n", "from", "common", ".", "utils", "import", "read_video", "\n", "\n", "\n", "def", "ckpt_time", "(", "ckpt", "=", "None", ",", "display", "=", "0", ",", "desc", "=", "''", ")", ":", "\n", "    ", "if", "not", "ckpt", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.get_fps": [[25, 32], ["subprocess.Popen", "line.decode().strip().split", "int", "int", "line.decode().strip", "line.decode"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.prepare_data_2d_custom.decode"], ["        ", "if", "display", ":", "\n", "            ", "print", "(", "desc", "+", "' consume time {:0.4f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ")", ")", "\n", "", "return", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ",", "time", ".", "time", "(", ")", "\n", "\n", "\n", "", "", "def", "set_equal_aspect", "(", "ax", ",", "data", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.read_video": [[33, 54], ["visualization.get_resolution", "subprocess.Popen", "pipe.stdout.read", "numpy.frombuffer().reshape", "numpy.frombuffer"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.visualization.get_resolution", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["\n", "X", ",", "Y", ",", "Z", "=", "data", "[", "...", ",", "0", "]", ",", "data", "[", "...", ",", "1", "]", ",", "data", "[", "...", ",", "2", "]", "\n", "\n", "# Create cubic bounding box to simulate equal aspect ratio", "\n", "max_range", "=", "np", ".", "array", "(", "[", "X", ".", "max", "(", ")", "-", "X", ".", "min", "(", ")", ",", "Y", ".", "max", "(", ")", "-", "Y", ".", "min", "(", ")", ",", "Z", ".", "max", "(", ")", "-", "Z", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "\n", "Xb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "0", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "X", ".", "max", "(", ")", "+", "X", ".", "min", "(", ")", ")", "\n", "Yb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "1", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "Y", ".", "max", "(", ")", "+", "Y", ".", "min", "(", ")", ")", "\n", "Zb", "=", "0.5", "*", "max_range", "*", "np", ".", "mgrid", "[", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", ",", "-", "1", ":", "2", ":", "2", "]", "[", "2", "]", ".", "flatten", "(", ")", "+", "0.5", "*", "(", "Z", ".", "max", "(", ")", "+", "Z", ".", "min", "(", ")", ")", "\n", "\n", "for", "xb", ",", "yb", ",", "zb", "in", "zip", "(", "Xb", ",", "Yb", ",", "Zb", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "[", "xb", "]", ",", "[", "yb", "]", ",", "[", "zb", "]", ",", "'w'", ")", "\n", "\n", "\n", "", "", "def", "downsample_tensor", "(", "X", ",", "factor", ")", ":", "\n", "    ", "length", "=", "X", ".", "shape", "[", "0", "]", "//", "factor", "*", "factor", "\n", "return", "np", ".", "mean", "(", "X", "[", ":", "length", "]", ".", "reshape", "(", "-", "1", ",", "factor", ",", "*", "X", ".", "shape", "[", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "", "def", "render_animation", "(", "keypoints", ",", "poses", ",", "skeleton", ",", "fps", ",", "bitrate", ",", "azim", ",", "output", ",", "viewport", ",", "\n", "limit", "=", "-", "1", ",", "downsample", "=", "1", ",", "size", "=", "6", ",", "input_video_path", "=", "None", ",", "input_video_skip", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator.__init__": [[268, 319], ["range", "numpy.empty", "numpy.random.RandomState", "len", "len", "len", "numpy.full", "zip", "numpy.empty", "numpy.empty", "numpy.empty", "len", "len", "len", "len", "len", "len", "len", "numpy.repeat", "zip", "numpy.arange", "len", "numpy.repeat", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator.num_frames": [[320, 322], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator.random_state": [[323, 325], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator.set_random_state": [[326, 328], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator.augment_enabled": [[329, 331], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator.next_pairs": [[332, 341], ["generators.ChunkedNoPadGenerator.random.permutation"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator.next_epoch": [[342, 420], ["generators.ChunkedNoPadGenerator.next_pairs", "range", "enumerate", "max", "min", "max", "min", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_pairs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorV5.__init__": [[446, 501], ["range", "numpy.empty", "numpy.random.RandomState", "len", "len", "len", "numpy.full", "zip", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "len", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.repeat", "zip", "numpy.arange", "len", "numpy.repeat", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorV5.num_frames": [[502, 504], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorV5.random_state": [[505, 507], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorV5.set_random_state": [[508, 510], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorV5.augment_enabled": [[511, 513], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorV5.next_pairs": [[514, 523], ["generators.ChunkedNoPadGeneratorV5.random.permutation"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorV5.next_epoch": [[524, 622], ["generators.ChunkedNoPadGeneratorV5.next_pairs", "range", "enumerate", "max", "min", "max", "min", "max", "min", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_pairs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorWith_qpos.__init__": [[647, 702], ["range", "numpy.empty", "numpy.random.RandomState", "len", "len", "len", "numpy.full", "zip", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "len", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.repeat", "zip", "numpy.arange", "len", "numpy.repeat", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorWith_qpos.num_frames": [[703, 705], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorWith_qpos.random_state": [[706, 708], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorWith_qpos.set_random_state": [[709, 711], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorWith_qpos.augment_enabled": [[712, 714], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorWith_qpos.next_pairs": [[715, 724], ["generators.ChunkedNoPadGeneratorWith_qpos.random.permutation"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGeneratorWith_qpos.next_epoch": [[725, 823], ["generators.ChunkedNoPadGeneratorWith_qpos.next_pairs", "range", "enumerate", "max", "min", "max", "min", "max", "min", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_pairs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.__init__": [[848, 886], ["range", "numpy.empty", "numpy.random.RandomState", "len", "numpy.full", "zip", "len", "numpy.repeat", "zip", "numpy.arange", "len", "numpy.repeat", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames": [[887, 889], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.random_state": [[890, 892], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.set_random_state": [[893, 895], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.augment_enabled": [[896, 898], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_pairs": [[899, 908], ["generators.ChunkedNoPadGenerator_Dcam.random.permutation"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch": [[909, 950], ["generators.ChunkedNoPadGenerator_Dcam.next_pairs", "range", "enumerate", "max", "min", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_pairs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.custom_dataset.CustomDataset.__init__": [[28, 63], ["common.mocap_dataset.MocapDataset.__init__", "numpy.load", "numpy.load", "resolutions.items", "data[].item", "cam.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "custom_dataset.CustomDataset.remove_joints"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.remove_joints"], ["    ", "def", "__init__", "(", "self", ",", "detections_path", ",", "remove_static_joints", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fps", "=", "None", ",", "skeleton", "=", "h36m_skeleton", ")", "\n", "\n", "# Load serialized dataset", "\n", "data", "=", "np", ".", "load", "(", "detections_path", ",", "allow_pickle", "=", "True", ")", "\n", "resolutions", "=", "data", "[", "'metadata'", "]", ".", "item", "(", ")", "[", "'video_metadata'", "]", "\n", "\n", "self", ".", "_cameras", "=", "{", "}", "\n", "self", ".", "_data", "=", "{", "}", "\n", "for", "video_name", ",", "res", "in", "resolutions", ".", "items", "(", ")", ":", "\n", "            ", "cam", "=", "{", "}", "\n", "cam", ".", "update", "(", "custom_camera_params", ")", "\n", "cam", "[", "'orientation'", "]", "=", "np", ".", "array", "(", "cam", "[", "'orientation'", "]", ",", "dtype", "=", "'float32'", ")", "\n", "cam", "[", "'translation'", "]", "=", "np", ".", "array", "(", "cam", "[", "'translation'", "]", ",", "dtype", "=", "'float32'", ")", "\n", "cam", "[", "'translation'", "]", "=", "cam", "[", "'translation'", "]", "/", "1000", "# mm to meters", "\n", "\n", "cam", "[", "'id'", "]", "=", "video_name", "\n", "cam", "[", "'res_w'", "]", "=", "res", "[", "'w'", "]", "\n", "cam", "[", "'res_h'", "]", "=", "res", "[", "'h'", "]", "\n", "\n", "self", ".", "_cameras", "[", "video_name", "]", "=", "[", "cam", "]", "\n", "\n", "self", ".", "_data", "[", "video_name", "]", "=", "{", "\n", "'custom'", ":", "{", "\n", "'cameras'", ":", "cam", "\n", "}", "\n", "}", "\n", "\n", "", "if", "remove_static_joints", ":", "\n", "# Bring the skeleton to 17 joints instead of the original 32", "\n", "            ", "self", ".", "remove_joints", "(", "[", "4", ",", "5", ",", "9", ",", "10", ",", "11", ",", "16", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "28", ",", "29", ",", "30", ",", "31", "]", ")", "\n", "\n", "# Rewire shoulders to the correct parents", "\n", "self", ".", "_skeleton", ".", "_parents", "[", "11", "]", "=", "8", "\n", "self", ".", "_skeleton", ".", "_parents", "[", "14", "]", "=", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.custom_dataset.CustomDataset.supports_semi_supervised": [[64, 66], ["None"], "methods", ["None"], ["", "", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.custom_dataset.MyFakeDataset.__init__": [[78, 100], ["glob.glob"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "folder", ",", "rf", "=", "81", ",", "random_t", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "nplist", "=", "glob", ".", "glob", "(", "folder", ")", "\n", "# inputs_2d_fake = []", "\n", "# inputs_3dcam_fake = []", "\n", "# cam_in = []", "\n", "# cam_ex = []", "\n", "# print('start load fake data')", "\n", "# for item in tqdm(nplist):", "\n", "#     tmp = np.load(item)", "\n", "#     inputs_2d_fake.append(tmp['inputs_2d_fake'])", "\n", "#     inputs_3dcam_fake.append(tmp['inputs_3dcam_fake'])", "\n", "#     cam_in.append(tmp['cam_in'])", "\n", "#     cam_ex.append(tmp['cam_ex'])", "\n", "#", "\n", "# self.inputs_2d_fake = np.concatenate(inputs_2d_fake, axis=0)", "\n", "# self.inputs_3dcam_fake = np.concatenate(inputs_3dcam_fake, axis=0)", "\n", "# self.cam_in = np.concatenate(cam_in, axis=0)", "\n", "# self.cam_ex = np.concatenate(cam_ex, axis=0)", "\n", "# print('finish load fake data')", "\n", "self", ".", "rf", "=", "rf", "\n", "self", ".", "random_t", "=", "random_t", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.custom_dataset.MyFakeDataset.__getitem__": [[101, 116], ["numpy.load", "numpy.load", "int", "int", "int", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "nplist", "[", "index", "]", "\n", "tmp", "=", "np", ".", "load", "(", "path", ")", "\n", "\n", "if", "self", ".", "random_t", ":", "\n", "            ", "start_t", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "tmp", "[", "'inputs_2d_fake'", "]", ".", "shape", "[", "1", "]", "-", "self", ".", "rf", ",", "size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "start_t", "=", "int", "(", "0", ")", "\n", "", "end_t", "=", "int", "(", "start_t", "+", "self", ".", "rf", ")", "\n", "inputs_2d_fake", "=", "tmp", "[", "'inputs_2d_fake'", "]", "[", ":", ",", "start_t", ":", "end_t", "]", "\n", "inputs_3dcam_fake", "=", "tmp", "[", "'inputs_3dcam_fake'", "]", "[", ":", ",", "start_t", ":", "end_t", "]", "\n", "cam_in", "=", "tmp", "[", "'cam_in'", "]", "[", ":", ",", "start_t", ":", "end_t", "]", "\n", "cam_ex", "=", "tmp", "[", "'cam_ex'", "]", "[", ":", ",", "start_t", ":", "end_t", "]", "\n", "\n", "return", "cam_in", ",", "cam_ex", ",", "inputs_3dcam_fake", ",", "inputs_2d_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.custom_dataset.MyFakeDataset.__len__": [[117, 119], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "nplist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.custom_dataset.MyFakeDataset_v1.__init__": [[124, 128], ["glob.glob", "print", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ",", "folder", ",", "rf", "=", "81", ",", "random_t", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "nplist", "=", "glob", ".", "glob", "(", "folder", ")", "\n", "print", "(", "'load fake data: '", ",", "len", "(", "self", ".", "nplist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.custom_dataset.MyFakeDataset_v1.__getitem__": [[129, 135], ["numpy.load", "numpy.load", "numpy.transpose", "numpy.transpose", "numpy.delete", "numpy.delete", "numpy.load.squeeze"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "nplist", "[", "index", "]", "\n", "tmp", "=", "np", ".", "load", "(", "path", ")", "\n", "fake3d_world", "=", "np", ".", "delete", "(", "tmp", ".", "squeeze", "(", ")", ",", "10", ",", "axis", "=", "0", ")", "/", "1000.0", "\n", "fake3d_world", "=", "np", ".", "transpose", "(", "fake3d_world", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "return", "fake3d_world", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.custom_dataset.MyFakeDataset_v1.__len__": [[136, 138], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "nplist", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_PCK": [[92, 111], ["len", "range", "list", "numpy.take", "float", "range", "numpy.sqrt", "numpy.sum", "numpy.power"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["velocity_target", "=", "np", ".", "diff", "(", "target", ",", "axis", "=", "0", ")", "\n", "\n", "return", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "velocity_predicted", "-", "velocity_target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n", "\n", "", "def", "pose_align", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Pose error: MPJPE after rigid alignment (scale, rotation, and translation),\n    often referred to as \"Protocol #2\" in many papers.\n    size: bx16x3\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "muX", "=", "np", ".", "mean", "(", "target", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "muY", "=", "np", ".", "mean", "(", "predicted", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "X0", "=", "target", "-", "muX", "\n", "Y0", "=", "predicted", "-", "muY", "\n", "\n", "normX", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "X0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_AUC": [[113, 124], ["numpy.linspace", "numpy.mean", "pck_list.append", "loss.compute_PCK"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_PCK"], ["\n", "X0", "/=", "normX", "\n", "Y0", "/=", "normY", "\n", "\n", "H", "=", "np", ".", "matmul", "(", "X0", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ",", "Y0", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "V", "=", "Vt", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "# Avoid improper rotations (reflections), i.e. rotations with det(R) = -1", "\n", "sign_detR", "=", "np", ".", "sign", "(", "np", ".", "expand_dims", "(", "np", ".", "linalg", ".", "det", "(", "R", ")", ",", "axis", "=", "1", ")", ")", "\n", "V", "[", ":", ",", ":", ",", "-", "1", "]", "*=", "sign_detR", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.pose_scaled": [[169, 181], ["torch.mean", "torch.mean", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Bone.__init__": [[11, 32], ["numpy.identity", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["class", "Skeleton", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "parents", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "        ", "assert", "len", "(", "joints_left", ")", "==", "len", "(", "joints_right", ")", "\n", "\n", "self", ".", "_parents", "=", "np", ".", "array", "(", "parents", ")", "\n", "self", ".", "_joints_left", "=", "joints_left", "\n", "self", ".", "_joints_right", "=", "joints_right", "\n", "self", ".", "_compute_metadata", "(", ")", "\n", "\n", "", "def", "num_joints", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_parents", ")", "\n", "\n", "", "def", "parents", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_parents", "\n", "\n", "", "def", "has_children", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_has_children", "\n", "\n", "", "def", "children", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_children", "\n", "\n", "", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.__init__": [[36, 43], ["None"], "methods", ["None"], ["valid_joints", "=", "[", "]", "\n", "for", "joint", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "if", "joint", "not", "in", "joints_to_remove", ":", "\n", "                ", "valid_joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "while", "self", ".", "_parents", "[", "i", "]", "in", "joints_to_remove", ":", "\n", "                ", "self", ".", "_parents", "[", "i", "]", "=", "self", ".", "_parents", "[", "self", ".", "_parents", "[", "i", "]", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.load_from_asf": [[44, 120], ["skeleton.Skeleton.forward_asf", "open", "f.readlines", "line.split", "skeleton.Bone", "skeleton.Skeleton.bones.append", "float", "skeleton.Bone", "skeleton.Skeleton.bones.append", "bone_p.child.append", "float", "len", "range", "float", "float", "math.radians", "utils.transformation.euler_matrix", "Bone.orient.copy", "reversed", "float", "Bone.lb.append", "Bone.ub.append", "Bone.dof_index.append", "float", "float", "re.sub", "re.sub"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.forward_asf", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.euler_matrix", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["\n", "", "", "index_offsets", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ",", "dtype", "=", "int", ")", "\n", "new_parents", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "i", "not", "in", "joints_to_remove", ":", "\n", "                ", "new_parents", ".", "append", "(", "parent", "-", "index_offsets", "[", "parent", "]", ")", "\n", "", "else", ":", "\n", "                ", "index_offsets", "[", "i", ":", "]", "+=", "1", "\n", "", "", "self", ".", "_parents", "=", "np", ".", "array", "(", "new_parents", ")", "\n", "\n", "if", "self", ".", "_joints_left", "is", "not", "None", ":", "\n", "            ", "new_joints_left", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_left", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_left", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_left", "=", "new_joints_left", "\n", "", "if", "self", ".", "_joints_right", "is", "not", "None", ":", "\n", "            ", "new_joints_right", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_right", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_right", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_right", "=", "new_joints_right", "\n", "\n", "", "self", ".", "_compute_metadata", "(", ")", "\n", "\n", "return", "valid_joints", "\n", "\n", "", "def", "joints_left", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_left", "\n", "\n", "", "def", "joints_right", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_right", "\n", "\n", "", "def", "_compute_metadata", "(", "self", ")", ":", "\n", "        ", "self", ".", "_has_children", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ")", ".", "astype", "(", "bool", ")", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_has_children", "[", "parent", "]", "=", "True", "\n", "\n", "", "", "self", ".", "_children", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "self", ".", "_children", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_children", "[", "parent", "]", ".", "append", "(", "i", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.forward_asf": [[121, 127], ["skeleton.Skeleton.forward_asf"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.forward_asf"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.load_from_bvh": [[128, 172], ["bvh.Bvh.get_joints_names", "list", "skeleton.Bone", "bvh.Bvh.joint_channels", "skeleton.Skeleton.bones.append", "enumerate", "skeleton.Skeleton.forward_bvh", "dict", "open", "bvh.Bvh", "filter", "skeleton.Bone", "skeleton.Skeleton.bones.append", "f.read", "bvh.Bvh.get_joints_names", "bvh.Bvh.joint_channels", "numpy.array", "bvh.Bvh.joint_parent", "skeleton.Skeleton.name2bone.keys", "bone_p.child.append", "len", "all", "dict.keys", "bvh.Bvh.joint_offset", "sum", "len", "x[].lower", "numpy.array", "float", "bvh.Bvh.get_joint"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.forward_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.forward_bvh": [[173, 180], ["skeleton.Skeleton.forward_bvh"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.forward_bvh"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.load_from_offsets": [[181, 227], ["list", "skeleton.Bone", "skeleton.Skeleton.bones.append", "enumerate", "skeleton.Skeleton.forward_bvh", "dict", "filter", "skeleton.Bone", "skeleton.Skeleton.bones.append", "offsets.keys", "numpy.array", "skeleton.Skeleton.name2bone.keys", "bone_p.child.append", "len", "Bone.pos.copy", "parents.items", "all", "dict.keys", "sum", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.forward_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.write_xml": [[228, 248], ["numpy.array", "lxml.etree.XMLParser", "lxml.etree.parse", "lxml.etree.parse.getroot().find", "skeleton.Skeleton.write_xml_bodynode", "lxml.etree.parse.getroot().find", "lxml.etree.parse.getroot().find.findall", "lxml.etree.parse.write", "dict", "lxml.etree.SubElement", "lxml.etree.parse.getroot", "lxml.etree.parse.getroot"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.write_xml_bodynode", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.write_xml_bodynode": [[249, 310], ["dict", "lxml.etree.SubElement", "dict", "lxml.etree.SubElement", "range", "dict", "lxml.etree.SubElement", "dict", "lxml.etree.SubElement", "skeleton.Skeleton.write_xml_bodynode", "len", "dict", "lxml.etree.SubElement", "bone.pos.copy", "bone.end.copy", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.array", "len", "ref_angles.keys", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.skeleton.Skeleton.write_xml_bodynode", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.load_amc_file": [[7, 43], ["dict", "numpy.vstack", "open", "f.readlines", "line.split", "np.vstack.append", "str", "numpy.array", "np.vstack.append", "len", "numpy.array", "len", "math.radians", "reversed", "reversed", "float", "float", "len", "cur_pos.insert", "math.radians", "math.radians", "float", "float"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["import", "torch", "\n", "import", "numpy", "as", "np", "\n", "import", "random", "\n", "from", "opt", "import", "opt", "\n", "\n", "\n", "def", "rnd", "(", "x", ")", ":", "\n", "    ", "return", "max", "(", "-", "2", "*", "x", ",", "min", "(", "2", "*", "x", ",", "np", ".", "random", ".", "randn", "(", "1", ")", "[", "0", "]", "*", "x", ")", ")", "\n", "\n", "\n", "", "def", "generateSampleBox", "(", "img_path", ",", "bndbox", ",", "part", ",", "nJoints", ",", "imgset", ",", "scale_factor", ",", "dataset", ",", "train", "=", "True", ",", "nJoints_coco", "=", "17", ")", ":", "\n", "\n", "    ", "img", "=", "load_image", "(", "img_path", ")", "\n", "if", "train", ":", "\n", "        ", "img", "[", "0", "]", ".", "mul_", "(", "random", ".", "uniform", "(", "0.7", ",", "1.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "img", "[", "1", "]", ".", "mul_", "(", "random", ".", "uniform", "(", "0.7", ",", "1.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "img", "[", "2", "]", ".", "mul_", "(", "random", ".", "uniform", "(", "0.7", ",", "1.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "", "img", "[", "0", "]", ".", "add_", "(", "-", "0.406", ")", "\n", "img", "[", "1", "]", ".", "add_", "(", "-", "0.457", ")", "\n", "img", "[", "2", "]", ".", "add_", "(", "-", "0.480", ")", "\n", "\n", "upLeft", "=", "torch", ".", "Tensor", "(", "(", "int", "(", "bndbox", "[", "0", "]", "[", "0", "]", ")", ",", "int", "(", "bndbox", "[", "0", "]", "[", "1", "]", ")", ")", ")", "\n", "bottomRight", "=", "torch", ".", "Tensor", "(", "(", "int", "(", "bndbox", "[", "0", "]", "[", "2", "]", ")", ",", "int", "(", "bndbox", "[", "0", "]", "[", "3", "]", ")", ")", ")", "\n", "ht", "=", "bottomRight", "[", "1", "]", "-", "upLeft", "[", "1", "]", "\n", "width", "=", "bottomRight", "[", "0", "]", "-", "upLeft", "[", "0", "]", "\n", "imght", "=", "img", ".", "shape", "[", "1", "]", "\n", "imgwidth", "=", "img", ".", "shape", "[", "2", "]", "\n", "scaleRate", "=", "random", ".", "uniform", "(", "*", "scale_factor", ")", "\n", "\n", "upLeft", "[", "0", "]", "=", "max", "(", "0", ",", "upLeft", "[", "0", "]", "-", "width", "*", "scaleRate", "/", "2", ")", "\n", "upLeft", "[", "1", "]", "=", "max", "(", "0", ",", "upLeft", "[", "1", "]", "-", "ht", "*", "scaleRate", "/", "2", ")", "\n", "bottomRight", "[", "0", "]", "=", "min", "(", "imgwidth", "-", "1", ",", "bottomRight", "[", "0", "]", "+", "width", "*", "scaleRate", "/", "2", ")", "\n", "bottomRight", "[", "1", "]", "=", "min", "(", "imght", "-", "1", ",", "bottomRight", "[", "1", "]", "+", "ht", "*", "scaleRate", "/", "2", ")", "\n", "\n", "# Doing Random Sample", "\n", "if", "opt", ".", "addDPG", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.load_bvh_file": [[45, 71], ["dict", "numpy.zeros", "range", "open", "bvh.Bvh", "f.read", "len", "numpy.array", "bvh.Bvh.frame_joint_channels", "numpy.deg2rad", "numpy.deg2rad"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.WebcamLoader.read", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["if", "PatchScale", ">", "0.85", ":", "\n", "            ", "ratio", "=", "ht", "/", "width", "\n", "if", "(", "width", "<", "ht", ")", ":", "\n", "                ", "patchWidth", "=", "PatchScale", "*", "width", "\n", "patchHt", "=", "patchWidth", "*", "ratio", "\n", "", "else", ":", "\n", "                ", "patchHt", "=", "PatchScale", "*", "ht", "\n", "patchWidth", "=", "patchHt", "/", "ratio", "\n", "\n", "", "xmin", "=", "upLeft", "[", "0", "]", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "(", "width", "-", "patchWidth", ")", "\n", "ymin", "=", "upLeft", "[", "1", "]", "+", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "(", "ht", "-", "patchHt", ")", "\n", "xmax", "=", "xmin", "+", "patchWidth", "+", "1", "\n", "ymax", "=", "ymin", "+", "patchHt", "+", "1", "\n", "", "else", ":", "\n", "            ", "xmin", "=", "max", "(", "\n", "1", ",", "min", "(", "upLeft", "[", "0", "]", "+", "np", ".", "random", ".", "normal", "(", "-", "0.0142", ",", "0.1158", ")", "*", "width", ",", "imgwidth", "-", "3", ")", ")", "\n", "ymin", "=", "max", "(", "\n", "1", ",", "min", "(", "upLeft", "[", "1", "]", "+", "np", ".", "random", ".", "normal", "(", "0.0043", ",", "0.068", ")", "*", "ht", ",", "imght", "-", "3", ")", ")", "\n", "xmax", "=", "min", "(", "max", "(", "\n", "xmin", "+", "2", ",", "bottomRight", "[", "0", "]", "+", "np", ".", "random", ".", "normal", "(", "0.0154", ",", "0.1337", ")", "*", "width", ")", ",", "imgwidth", "-", "3", ")", "\n", "ymax", "=", "min", "(", "\n", "max", "(", "ymin", "+", "2", ",", "bottomRight", "[", "1", "]", "+", "np", ".", "random", ".", "normal", "(", "-", "0.0013", ",", "0.0711", ")", "*", "ht", ")", ",", "imght", "-", "3", ")", "\n", "\n", "", "upLeft", "[", "0", "]", "=", "xmin", "\n", "upLeft", "[", "1", "]", "=", "ymin", "\n", "bottomRight", "[", "0", "]", "=", "xmax", "\n", "bottomRight", "[", "1", "]", "=", "ymax", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.lin_interp": [[73, 76], ["None"], "function", ["None"], ["# Counting Joints number", "\n", "", "jointNum", "=", "0", "\n", "if", "imgset", "==", "'coco'", ":", "\n", "        ", "for", "i", "in", "range", "(", "17", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.interpolated_traj": [[78, 92], ["int", "numpy.vstack", "float", "math.floor", "int", "min", "np.vstack.append", "numpy.arange", "math.floor", "int", "pose.lin_interp", "math.ceil", "math.floor"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.lin_interp"], ["and", "part", "[", "i", "]", "[", "0", "]", "<", "bottomRight", "[", "0", "]", "and", "part", "[", "i", "]", "[", "1", "]", "<", "bottomRight", "[", "1", "]", ":", "\n", "                ", "jointNum", "+=", "1", "\n", "\n", "# Doing Random Crop", "\n", "", "", "", "if", "opt", ".", "addDPG", ":", "\n", "        ", "if", "jointNum", ">", "13", "and", "train", ":", "\n", "            ", "switch", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "switch", ">", "0.96", ":", "\n", "                ", "bottomRight", "[", "0", "]", "=", "(", "upLeft", "[", "0", "]", "+", "bottomRight", "[", "0", "]", ")", "/", "2", "\n", "bottomRight", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.92", ":", "\n", "                ", "upLeft", "[", "0", "]", "=", "(", "upLeft", "[", "0", "]", "+", "bottomRight", "[", "0", "]", ")", "/", "2", "\n", "bottomRight", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n", "", "elif", "switch", ">", "0.88", ":", "\n", "                ", "upLeft", "[", "1", "]", "=", "(", "upLeft", "[", "1", "]", "+", "bottomRight", "[", "1", "]", ")", "/", "2", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_trpo.AgentTRPO.__init__": [[45, 50], ["agents.agent_pg.AgentPG.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_kl", "=", "1e-2", ",", "damping", "=", "1e-2", ",", "use_fim", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "max_kl", "=", "max_kl", "\n", "self", ".", "damping", "=", "damping", "\n", "self", ".", "use_fim", "=", "use_fim", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_trpo.AgentTRPO.update_value": [[51, 71], ["scipy.optimize.fmin_l_bfgs_b", "set_flat_params_to", "set_flat_params_to", "agent_trpo.AgentTRPO.value_net.parameters", "agent_trpo.AgentTRPO.value_net", "agent_trpo.AgentTRPO.value_net.parameters", "value_loss.backward", "get_flat_params_from().detach().cpu().numpy", "tensor", "tensor", "agent_trpo.AgentTRPO.trans_value", "value_loss.item", "get_flat_grad_from().cpu().numpy", "param.grad.data.fill_", "param.pow().sum", "get_flat_params_from().detach().cpu", "get_flat_grad_from().cpu", "param.pow", "get_flat_params_from().detach", "get_flat_grad_from", "agent_trpo.AgentTRPO.value_net.parameters", "get_flat_params_from"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.set_flat_params_to", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.set_flat_params_to", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_value", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.get_flat_grad_from", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.get_flat_params_from"], ["", "def", "update_value", "(", "self", ",", "states", ",", "returns", ")", ":", "\n", "\n", "        ", "def", "get_value_loss", "(", "flat_params", ")", ":", "\n", "            ", "set_flat_params_to", "(", "self", ".", "value_net", ",", "tensor", "(", "flat_params", ")", ")", "\n", "for", "param", "in", "self", ".", "value_net", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "param", ".", "grad", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "values_pred", "=", "self", ".", "value_net", "(", "self", ".", "trans_value", "(", "states", ")", ")", "\n", "value_loss", "=", "(", "values_pred", "-", "returns", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "# weight decay", "\n", "for", "param", "in", "self", ".", "value_net", ".", "parameters", "(", ")", ":", "\n", "                ", "value_loss", "+=", "param", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "*", "1e-3", "\n", "", "value_loss", ".", "backward", "(", ")", "\n", "return", "value_loss", ".", "item", "(", ")", ",", "get_flat_grad_from", "(", "self", ".", "value_net", ".", "parameters", "(", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "flat_params", ",", "_", ",", "opt_info", "=", "scipy", ".", "optimize", ".", "fmin_l_bfgs_b", "(", "get_value_loss", ",", "\n", "get_flat_params_from", "(", "self", ".", "value_net", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "maxiter", "=", "25", ")", "\n", "set_flat_params_to", "(", "self", ".", "value_net", ",", "tensor", "(", "flat_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_trpo.AgentTRPO.update_policy": [[72, 138], ["exps.nonzero().squeeze", "agent_trpo.AgentTRPO.update_value", "agent_trpo.AgentTRPO.update_policy.get_loss"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_value"], ["", "def", "update_policy", "(", "self", ",", "states", ",", "actions", ",", "returns", ",", "advantages", ",", "exps", ")", ":", "\n", "        ", "\"\"\"update policy\"\"\"", "\n", "ind", "=", "exps", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "self", ".", "update_value", "(", "states", ",", "returns", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fixed_log_probs", "=", "self", ".", "policy_net", ".", "get_log_prob", "(", "self", ".", "trans_policy", "(", "states", ")", "[", "ind", "]", ",", "actions", "[", "ind", "]", ")", "\n", "", "\"\"\"define the loss function for TRPO\"\"\"", "\n", "\n", "def", "get_loss", "(", "volatile", "=", "False", ")", ":", "\n", "            ", "with", "torch", ".", "set_grad_enabled", "(", "not", "volatile", ")", ":", "\n", "                ", "log_probs", "=", "self", ".", "policy_net", ".", "get_log_prob", "(", "self", ".", "trans_policy", "(", "states", "[", "ind", "]", ")", ",", "actions", "[", "ind", "]", ")", "\n", "action_loss", "=", "-", "advantages", "[", "ind", "]", "*", "torch", ".", "exp", "(", "log_probs", "-", "fixed_log_probs", ")", "\n", "return", "action_loss", ".", "mean", "(", ")", "\n", "\n", "", "", "\"\"\"use fisher information matrix for Hessian*vector\"\"\"", "\n", "\n", "def", "Fvp_fim", "(", "v", ")", ":", "\n", "            ", "M", ",", "mu", ",", "info", "=", "self", ".", "policy_net", ".", "get_fim", "(", "self", ".", "trans_policy", "(", "states", ")", "[", "ind", "]", ")", "\n", "mu", "=", "mu", ".", "view", "(", "-", "1", ")", "\n", "filter_input_ids", "=", "set", "(", "[", "info", "[", "'std_id'", "]", "]", ")", "if", "self", ".", "policy_net", ".", "type", "==", "'gaussian'", "else", "set", "(", ")", "\n", "\n", "t", "=", "ones", "(", "mu", ".", "size", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "mu_t", "=", "(", "mu", "*", "t", ")", ".", "sum", "(", ")", "\n", "Jt", "=", "compute_flat_grad", "(", "mu_t", ",", "self", ".", "policy_net", ".", "parameters", "(", ")", ",", "filter_input_ids", "=", "filter_input_ids", ",", "create_graph", "=", "True", ")", "\n", "Jtv", "=", "(", "Jt", "*", "v", ")", ".", "sum", "(", ")", "\n", "Jv", "=", "torch", ".", "autograd", ".", "grad", "(", "Jtv", ",", "t", ")", "[", "0", "]", "\n", "MJv", "=", "M", "*", "Jv", ".", "detach", "(", ")", "\n", "mu_MJv", "=", "(", "MJv", "*", "mu", ")", ".", "sum", "(", ")", "\n", "JTMJv", "=", "compute_flat_grad", "(", "mu_MJv", ",", "self", ".", "policy_net", ".", "parameters", "(", ")", ",", "filter_input_ids", "=", "filter_input_ids", ")", ".", "detach", "(", ")", "\n", "JTMJv", "/=", "states", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "policy_net", ".", "type", "==", "'gaussian'", ":", "\n", "                ", "std_index", "=", "info", "[", "'std_index'", "]", "\n", "JTMJv", "[", "std_index", ":", "std_index", "+", "M", ".", "shape", "[", "0", "]", "]", "+=", "2", "*", "v", "[", "std_index", ":", "std_index", "+", "M", ".", "shape", "[", "0", "]", "]", "\n", "", "return", "JTMJv", "+", "v", "*", "self", ".", "damping", "\n", "\n", "", "\"\"\"directly compute Hessian*vector from KL\"\"\"", "\n", "\n", "def", "Fvp_direct", "(", "v", ")", ":", "\n", "            ", "kl", "=", "self", ".", "policy_net", ".", "get_kl", "(", "self", ".", "trans_policy", "(", "states", ")", "[", "ind", "]", ")", "\n", "kl", "=", "kl", ".", "mean", "(", ")", "\n", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "kl", ",", "self", ".", "policy_net", ".", "parameters", "(", ")", ",", "create_graph", "=", "True", ")", "\n", "flat_grad_kl", "=", "torch", ".", "cat", "(", "[", "grad", ".", "view", "(", "-", "1", ")", "for", "grad", "in", "grads", "]", ")", "\n", "\n", "kl_v", "=", "(", "flat_grad_kl", "*", "v", ")", ".", "sum", "(", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "kl_v", ",", "self", ".", "policy_net", ".", "parameters", "(", ")", ")", "\n", "flat_grad_grad_kl", "=", "torch", ".", "cat", "(", "[", "grad", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "grad", "in", "grads", "]", ")", ".", "detach", "(", ")", "\n", "\n", "return", "flat_grad_grad_kl", "+", "v", "*", "self", ".", "damping", "\n", "\n", "", "Fvp", "=", "Fvp_fim", "if", "self", ".", "use_fim", "else", "Fvp_direct", "\n", "\n", "loss", "=", "get_loss", "(", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "policy_net", ".", "parameters", "(", ")", ")", "\n", "loss_grad", "=", "torch", ".", "cat", "(", "[", "grad", ".", "view", "(", "-", "1", ")", "for", "grad", "in", "grads", "]", ")", ".", "detach", "(", ")", "\n", "stepdir", "=", "conjugate_gradients", "(", "Fvp", ",", "-", "loss_grad", ",", "10", ")", "\n", "\n", "shs", "=", "0.5", "*", "(", "stepdir", ".", "dot", "(", "Fvp", "(", "stepdir", ")", ")", ")", "\n", "lm", "=", "math", ".", "sqrt", "(", "self", ".", "max_kl", "/", "shs", ")", "\n", "fullstep", "=", "stepdir", "*", "lm", "\n", "expected_improve", "=", "-", "loss_grad", ".", "dot", "(", "fullstep", ")", "\n", "\n", "prev_params", "=", "get_flat_params_from", "(", "self", ".", "policy_net", ")", "\n", "success", ",", "new_params", "=", "line_search", "(", "self", ".", "policy_net", ",", "get_loss", ",", "prev_params", ",", "fullstep", ",", "expected_improve", ")", "\n", "set_flat_params_to", "(", "self", ".", "policy_net", ",", "new_params", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_trpo.conjugate_gradients": [[6, 25], ["zeros", "b.clone", "b.clone", "torch.dot", "range", "b.size", "zeros.to", "Avp_f", "torch.dot", "b.get_device", "torch.dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["def", "conjugate_gradients", "(", "Avp_f", ",", "b", ",", "nsteps", ",", "rdotr_tol", "=", "1e-10", ")", ":", "\n", "    ", "x", "=", "zeros", "(", "b", ".", "size", "(", ")", ")", "\n", "if", "b", ".", "is_cuda", ":", "\n", "        ", "x", ".", "to", "(", "b", ".", "get_device", "(", ")", ")", "\n", "", "r", "=", "b", ".", "clone", "(", ")", "\n", "p", "=", "b", ".", "clone", "(", ")", "\n", "rdotr", "=", "torch", ".", "dot", "(", "r", ",", "r", ")", "\n", "for", "i", "in", "range", "(", "nsteps", ")", ":", "\n", "        ", "Avp", "=", "Avp_f", "(", "p", ")", "\n", "alpha", "=", "rdotr", "/", "torch", ".", "dot", "(", "p", ",", "Avp", ")", "\n", "x", "+=", "alpha", "*", "p", "\n", "r", "-=", "alpha", "*", "Avp", "\n", "new_rdotr", "=", "torch", ".", "dot", "(", "r", ",", "r", ")", "\n", "betta", "=", "new_rdotr", "/", "rdotr", "\n", "p", "=", "r", "+", "betta", "*", "p", "\n", "rdotr", "=", "new_rdotr", "\n", "if", "rdotr", "<", "rdotr_tol", ":", "\n", "            ", "break", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_trpo.line_search": [[27, 41], ["f().item", "set_flat_params_to", "f().item", "f", "range", "f"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.set_flat_params_to"], ["", "def", "line_search", "(", "model", ",", "f", ",", "x", ",", "fullstep", ",", "expected_improve_full", ",", "max_backtracks", "=", "10", ",", "accept_ratio", "=", "0.1", ")", ":", "\n", "    ", "fval", "=", "f", "(", "True", ")", ".", "item", "(", ")", "\n", "\n", "for", "stepfrac", "in", "[", ".5", "**", "x", "for", "x", "in", "range", "(", "max_backtracks", ")", "]", ":", "\n", "        ", "x_new", "=", "x", "+", "stepfrac", "*", "fullstep", "\n", "set_flat_params_to", "(", "model", ",", "x_new", ")", "\n", "fval_new", "=", "f", "(", "True", ")", ".", "item", "(", ")", "\n", "actual_improve", "=", "fval", "-", "fval_new", "\n", "expected_improve", "=", "expected_improve_full", "*", "stepfrac", "\n", "ratio", "=", "actual_improve", "/", "expected_improve", "\n", "\n", "if", "ratio", ">", "accept_ratio", ":", "\n", "            ", "return", "True", ",", "x_new", "\n", "", "", "return", "False", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.__init__": [[11, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "policy_net", ",", "value_net", ",", "dtype", ",", "device", ",", "custom_reward", "=", "None", ",", "\n", "mean_action", "=", "False", ",", "render", "=", "False", ",", "running_state", "=", "None", ",", "num_threads", "=", "1", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "policy_net", "=", "policy_net", "\n", "self", ".", "value_net", "=", "value_net", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "custom_reward", "=", "custom_reward", "\n", "self", ".", "mean_action", "=", "mean_action", "\n", "self", ".", "running_state", "=", "running_state", "\n", "self", ".", "render", "=", "render", "\n", "self", ".", "num_threads", "=", "num_threads", "\n", "self", ".", "noise_rate", "=", "1.0", "\n", "self", ".", "traj_cls", "=", "TrajBatch", "\n", "self", ".", "logger_cls", "=", "LoggerRL", "\n", "self", ".", "sample_modules", "=", "[", "policy_net", "]", "\n", "self", ".", "update_modules", "=", "[", "policy_net", ",", "value_net", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample_worker": [[29, 77], ["torch.randn", "hasattr", "utils.memory.Memory", "core.LoggerRL", "core.LoggerRL.end_sampling", "agent.Agent.env.np_random.rand", "agent.Agent.env.reset", "core.LoggerRL.start_episode", "agent.Agent.pre_episode", "range", "core.LoggerRL.end_episode", "queue.put", "agent.Agent.running_state", "tensor().unsqueeze", "agent.Agent.trans_policy", "[].numpy", "agent.Agent.env.step", "core.LoggerRL.step", "agent.Agent.push_memory", "np.random.binomial", "int", "[].numpy.astype", "agent.Agent.running_state", "agent.Agent.custom_reward", "agent.Agent.env.render", "tensor", "np.array", "agent.Agent.policy_net.select_action"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.end_sampling", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.start_episode", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.pre_episode", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.end_episode", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_policy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.push_memory", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.select_action"], ["", "def", "sample_worker", "(", "self", ",", "pid", ",", "queue", ",", "min_batch_size", ")", ":", "\n", "        ", "torch", ".", "randn", "(", "pid", ")", "\n", "if", "hasattr", "(", "self", ".", "env", ",", "'np_random'", ")", ":", "\n", "            ", "self", ".", "env", ".", "np_random", ".", "rand", "(", "pid", ")", "\n", "", "memory", "=", "Memory", "(", ")", "\n", "logger", "=", "LoggerRL", "(", ")", "\n", "\n", "while", "logger", ".", "num_steps", "<", "min_batch_size", ":", "\n", "            ", "state", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "self", ".", "running_state", "is", "not", "None", ":", "\n", "                ", "state", "=", "self", ".", "running_state", "(", "state", ")", "\n", "", "logger", ".", "start_episode", "(", "self", ".", "env", ")", "\n", "self", ".", "pre_episode", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "10000", ")", ":", "\n", "                ", "state_var", "=", "tensor", "(", "state", ")", ".", "unsqueeze", "(", "0", ")", "\n", "vs_out", "=", "self", ".", "trans_policy", "(", "state_var", ")", "\n", "mean_action", "=", "self", ".", "mean_action", "or", "np", ".", "random", ".", "binomial", "(", "1", ",", "1", "-", "self", ".", "noise_rate", ")", "\n", "action", "=", "self", ".", "policy_net", ".", "select_action", "(", "vs_out", ",", "mean_action", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "action", "=", "int", "(", "action", ")", "if", "self", ".", "policy_net", ".", "type", "==", "'discrete'", "else", "action", ".", "astype", "(", "np", ".", "float64", ")", "\n", "next_state", ",", "env_reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "self", ".", "running_state", "is", "not", "None", ":", "\n", "                    ", "next_state", "=", "self", ".", "running_state", "(", "next_state", ")", "\n", "", "if", "self", ".", "custom_reward", "is", "not", "None", ":", "\n", "                    ", "c_reward", ",", "c_info", "=", "self", ".", "custom_reward", "(", "self", ".", "env", ",", "state", ",", "action", ",", "info", ")", "\n", "reward", "=", "c_reward", "\n", "", "else", ":", "\n", "                    ", "c_reward", ",", "c_info", "=", "0.0", ",", "np", ".", "array", "(", "[", "0.0", "]", ")", "\n", "reward", "=", "env_reward", "\n", "", "logger", ".", "step", "(", "self", ".", "env", ",", "env_reward", ",", "c_reward", ",", "c_info", ")", "\n", "\n", "mask", "=", "0", "if", "done", "else", "1", "\n", "exp", "=", "1", "-", "mean_action", "\n", "self", ".", "push_memory", "(", "memory", ",", "state", ",", "action", ",", "mask", ",", "next_state", ",", "reward", ",", "exp", ")", "\n", "\n", "if", "pid", "==", "0", "and", "self", ".", "render", ":", "\n", "                    ", "self", ".", "env", ".", "render", "(", ")", "\n", "", "if", "done", ":", "\n", "                    ", "break", "\n", "", "state", "=", "next_state", "\n", "\n", "", "logger", ".", "end_episode", "(", "self", ".", "env", ")", "\n", "", "logger", ".", "end_sampling", "(", ")", "\n", "\n", "if", "queue", "is", "not", "None", ":", "\n", "            ", "queue", ".", "put", "(", "[", "pid", ",", "memory", ",", "logger", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "memory", ",", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.pre_episode": [[78, 80], ["None"], "methods", ["None"], ["", "", "def", "pre_episode", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.push_memory": [[81, 83], ["memory.push"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.push"], ["", "def", "push_memory", "(", "self", ",", "memory", ",", "state", ",", "action", ",", "mask", ",", "next_state", ",", "reward", ",", "exp", ")", ":", "\n", "        ", "memory", ".", "push", "(", "state", ",", "action", ",", "mask", ",", "next_state", ",", "reward", ",", "exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.pre_sample": [[84, 86], ["None"], "methods", ["None"], ["", "def", "pre_sample", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample": [[87, 112], ["time.time", "agent.Agent.pre_sample", "to_test", "to_cpu", "time.time", "torch.no_grad", "int", "multiprocessing.Queue", "range", "agent.Agent.sample_worker", "range", "agent.Agent.traj_cls", "agent.Agent.logger_cls.merge", "math.floor", "multiprocessing.Process", "multiprocessing.Process.start", "multiprocessing.Queue.get"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.pre_sample", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample_worker", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.merge", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start"], ["", "def", "sample", "(", "self", ",", "min_batch_size", ")", ":", "\n", "        ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "pre_sample", "(", ")", "\n", "to_test", "(", "*", "self", ".", "sample_modules", ")", "\n", "with", "to_cpu", "(", "*", "self", ".", "sample_modules", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "thread_batch_size", "=", "int", "(", "math", ".", "floor", "(", "min_batch_size", "/", "self", ".", "num_threads", ")", ")", "\n", "queue", "=", "multiprocessing", ".", "Queue", "(", ")", "\n", "memories", "=", "[", "None", "]", "*", "self", ".", "num_threads", "\n", "loggers", "=", "[", "None", "]", "*", "self", ".", "num_threads", "\n", "for", "i", "in", "range", "(", "self", ".", "num_threads", "-", "1", ")", ":", "\n", "                    ", "worker_args", "=", "(", "i", "+", "1", ",", "queue", ",", "thread_batch_size", ")", "\n", "worker", "=", "multiprocessing", ".", "Process", "(", "target", "=", "self", ".", "sample_worker", ",", "args", "=", "worker_args", ")", "\n", "worker", ".", "start", "(", ")", "\n", "", "memories", "[", "0", "]", ",", "loggers", "[", "0", "]", "=", "self", ".", "sample_worker", "(", "0", ",", "None", ",", "thread_batch_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_threads", "-", "1", ")", ":", "\n", "                    ", "pid", ",", "worker_memory", ",", "worker_logger", "=", "queue", ".", "get", "(", ")", "\n", "memories", "[", "pid", "]", "=", "worker_memory", "\n", "loggers", "[", "pid", "]", "=", "worker_logger", "\n", "", "traj_batch", "=", "self", ".", "traj_cls", "(", "memories", ")", "\n", "logger", "=", "self", ".", "logger_cls", ".", "merge", "(", "loggers", ")", "\n", "\n", "", "", "logger", ".", "sample_time", "=", "time", ".", "time", "(", ")", "-", "t_start", "\n", "return", "traj_batch", ",", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.trans_policy": [[113, 116], ["None"], "methods", ["None"], ["", "def", "trans_policy", "(", "self", ",", "states", ")", ":", "\n", "        ", "\"\"\"transform states before going into policy net\"\"\"", "\n", "return", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.trans_value": [[117, 120], ["None"], "methods", ["None"], ["", "def", "trans_value", "(", "self", ",", "states", ")", ":", "\n", "        ", "\"\"\"transform states before going into value net\"\"\"", "\n", "return", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.set_noise_rate": [[121, 123], ["None"], "methods", ["None"], ["", "def", "set_noise_rate", "(", "self", ",", "noise_rate", ")", ":", "\n", "        ", "self", ".", "noise_rate", "=", "noise_rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_ppo.AgentPPO.__init__": [[8, 15], ["agents.agent_pg.AgentPG.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "clip_epsilon", "=", "0.2", ",", "opt_batch_size", "=", "64", ",", "use_mini_batch", "=", "False", ",", "\n", "policy_grad_clip", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "clip_epsilon", "=", "clip_epsilon", "\n", "self", ".", "opt_batch_size", "=", "opt_batch_size", "\n", "self", ".", "use_mini_batch", "=", "use_mini_batch", "\n", "self", ".", "policy_grad_clip", "=", "policy_grad_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_ppo.AgentPPO.update_policy": [[16, 52], ["int", "range", "to_test", "math.ceil", "torch.no_grad", "agent_ppo.AgentPPO.policy_net.get_log_prob", "np.arange", "np.random.shuffle", "LongTensor().to", "range", "exps.nonzero().squeeze", "agent_ppo.AgentPPO.update_value", "agent_ppo.AgentPPO.ppo_loss", "agent_ppo.AgentPPO.optimizer_policy.zero_grad", "agent_ppo.AgentPPO.backward", "agent_ppo.AgentPPO.clip_policy_grad", "agent_ppo.AgentPPO.optimizer_policy.step", "agent_ppo.AgentPPO.trans_policy", "states[].clone", "actions[].clone", "returns[].clone", "advantages[].clone", "fixed_log_probs[].clone", "exps[].clone", "slice", "exps_b.nonzero().squeeze", "agent_ppo.AgentPPO.update_value", "agent_ppo.AgentPPO.ppo_loss", "agent_ppo.AgentPPO.optimizer_policy.zero_grad", "agent_ppo.AgentPPO.backward", "agent_ppo.AgentPPO.clip_policy_grad", "agent_ppo.AgentPPO.optimizer_policy.step", "LongTensor", "min", "exps.nonzero", "exps_b.nonzero"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.get_log_prob", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_value", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_ppo.AgentPPO.ppo_loss", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_ppo.AgentPPO.clip_policy_grad", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_policy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_value", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_ppo.AgentPPO.ppo_loss", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_ppo.AgentPPO.clip_policy_grad", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step"], ["", "def", "update_policy", "(", "self", ",", "states", ",", "actions", ",", "returns", ",", "advantages", ",", "exps", ")", ":", "\n", "        ", "\"\"\"update policy\"\"\"", "\n", "with", "to_test", "(", "*", "self", ".", "update_modules", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fixed_log_probs", "=", "self", ".", "policy_net", ".", "get_log_prob", "(", "self", ".", "trans_policy", "(", "states", ")", ",", "actions", ")", "\n", "\n", "", "", "optim_iter_num", "=", "int", "(", "math", ".", "ceil", "(", "states", ".", "shape", "[", "0", "]", "/", "self", ".", "opt_batch_size", ")", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "opt_num_epochs", ")", ":", "\n", "            ", "if", "self", ".", "use_mini_batch", ":", "\n", "                ", "perm", "=", "np", ".", "arange", "(", "states", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "perm", "=", "LongTensor", "(", "perm", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "states", ",", "actions", ",", "returns", ",", "advantages", ",", "fixed_log_probs", ",", "exps", "=", "states", "[", "perm", "]", ".", "clone", "(", ")", ",", "actions", "[", "perm", "]", ".", "clone", "(", ")", ",", "returns", "[", "perm", "]", ".", "clone", "(", ")", ",", "advantages", "[", "perm", "]", ".", "clone", "(", ")", ",", "fixed_log_probs", "[", "perm", "]", ".", "clone", "(", ")", ",", "exps", "[", "perm", "]", ".", "clone", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "optim_iter_num", ")", ":", "\n", "                    ", "ind", "=", "slice", "(", "i", "*", "self", ".", "opt_batch_size", ",", "min", "(", "(", "i", "+", "1", ")", "*", "self", ".", "opt_batch_size", ",", "states", ".", "shape", "[", "0", "]", ")", ")", "\n", "states_b", ",", "actions_b", ",", "advantages_b", ",", "returns_b", ",", "fixed_log_probs_b", ",", "exps_b", "=", "states", "[", "ind", "]", ",", "actions", "[", "ind", "]", ",", "advantages", "[", "ind", "]", ",", "returns", "[", "ind", "]", ",", "fixed_log_probs", "[", "ind", "]", ",", "exps", "[", "ind", "]", "\n", "ind", "=", "exps_b", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "self", ".", "update_value", "(", "states_b", ",", "returns_b", ")", "\n", "surr_loss", "=", "self", ".", "ppo_loss", "(", "states_b", ",", "actions_b", ",", "advantages_b", ",", "fixed_log_probs_b", ",", "ind", ")", "\n", "self", ".", "optimizer_policy", ".", "zero_grad", "(", ")", "\n", "surr_loss", ".", "backward", "(", ")", "\n", "self", ".", "clip_policy_grad", "(", ")", "\n", "self", ".", "optimizer_policy", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "ind", "=", "exps", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "self", ".", "update_value", "(", "states", ",", "returns", ")", "\n", "surr_loss", "=", "self", ".", "ppo_loss", "(", "states", ",", "actions", ",", "advantages", ",", "fixed_log_probs", ",", "ind", ")", "\n", "self", ".", "optimizer_policy", ".", "zero_grad", "(", ")", "\n", "surr_loss", ".", "backward", "(", ")", "\n", "self", ".", "clip_policy_grad", "(", ")", "\n", "self", ".", "optimizer_policy", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_ppo.AgentPPO.clip_policy_grad": [[53, 57], ["torch.nn.utils.clip_grad_norm_"], "methods", ["None"], ["", "", "", "def", "clip_policy_grad", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "policy_grad_clip", "is", "not", "None", ":", "\n", "            ", "for", "params", ",", "max_norm", "in", "self", ".", "policy_grad_clip", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "params", ",", "max_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_ppo.AgentPPO.ppo_loss": [[58, 66], ["agent_ppo.AgentPPO.policy_net.get_log_prob", "torch.exp", "torch.clamp", "torch.min().mean", "agent_ppo.AgentPPO.trans_policy", "torch.min"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.get_log_prob", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_policy"], ["", "", "", "def", "ppo_loss", "(", "self", ",", "states", ",", "actions", ",", "advantages", ",", "fixed_log_probs", ",", "ind", ")", ":", "\n", "        ", "log_probs", "=", "self", ".", "policy_net", ".", "get_log_prob", "(", "self", ".", "trans_policy", "(", "states", ")", "[", "ind", "]", ",", "actions", "[", "ind", "]", ")", "\n", "ratio", "=", "torch", ".", "exp", "(", "log_probs", "-", "fixed_log_probs", "[", "ind", "]", ")", "\n", "advantages", "=", "advantages", "[", "ind", "]", "\n", "surr1", "=", "ratio", "*", "advantages", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_epsilon", ",", "1.0", "+", "self", ".", "clip_epsilon", ")", "*", "advantages", "\n", "surr_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "return", "surr_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.__init__": [[9, 18], ["agents.agent.Agent.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0.99", ",", "tau", "=", "0.95", ",", "optimizer_policy", "=", "None", ",", "optimizer_value", "=", "None", ",", "\n", "opt_num_epochs", "=", "1", ",", "value_opt_niter", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "optimizer_policy", "=", "optimizer_policy", "\n", "self", ".", "optimizer_value", "=", "optimizer_value", "\n", "self", ".", "opt_num_epochs", "=", "opt_num_epochs", "\n", "self", ".", "value_opt_niter", "=", "value_opt_niter", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_value": [[19, 27], ["range", "agent_pg.AgentPG.value_net", "agent_pg.AgentPG.optimizer_value.zero_grad", "value_loss.backward", "agent_pg.AgentPG.optimizer_value.step", "agent_pg.AgentPG.trans_value"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_value"], ["", "def", "update_value", "(", "self", ",", "states", ",", "returns", ")", ":", "\n", "        ", "\"\"\"update critic\"\"\"", "\n", "for", "_", "in", "range", "(", "self", ".", "value_opt_niter", ")", ":", "\n", "            ", "values_pred", "=", "self", ".", "value_net", "(", "self", ".", "trans_value", "(", "states", ")", ")", "\n", "value_loss", "=", "(", "values_pred", "-", "returns", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "self", ".", "optimizer_value", ".", "zero_grad", "(", ")", "\n", "value_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_value", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_policy": [[28, 39], ["exps.nonzero().squeeze", "range", "agent_pg.AgentPG.update_value", "agent_pg.AgentPG.policy_net.get_log_prob", "agent_pg.AgentPG.optimizer_policy.zero_grad", "policy_loss.backward", "agent_pg.AgentPG.optimizer_policy.step", "exps.nonzero", "agent_pg.AgentPG.trans_policy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_value", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.get_log_prob", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_policy"], ["", "", "def", "update_policy", "(", "self", ",", "states", ",", "actions", ",", "returns", ",", "advantages", ",", "exps", ")", ":", "\n", "        ", "\"\"\"update policy\"\"\"", "\n", "# use a2c by default", "\n", "ind", "=", "exps", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "opt_num_epochs", ")", ":", "\n", "            ", "self", ".", "update_value", "(", "states", ",", "returns", ")", "\n", "log_probs", "=", "self", ".", "policy_net", ".", "get_log_prob", "(", "self", ".", "trans_policy", "(", "states", ")", "[", "ind", "]", ",", "actions", "[", "ind", "]", ")", "\n", "policy_loss", "=", "-", "(", "log_probs", "*", "advantages", "[", "ind", "]", ")", ".", "mean", "(", ")", "\n", "self", ".", "optimizer_policy", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_policy", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_params": [[40, 58], ["time.time", "to_train", "torch.from_numpy().to().to", "torch.from_numpy().to().to", "torch.from_numpy().to().to", "torch.from_numpy().to().to", "torch.from_numpy().to().to", "core.estimate_advantages", "agent_pg.AgentPG.update_policy", "to_test", "time.time", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.no_grad", "agent_pg.AgentPG.value_net", "agent_pg.AgentPG.trans_value", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.common.estimate_advantages", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_policy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_value"], ["", "", "def", "update_params", "(", "self", ",", "batch", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "to_train", "(", "*", "self", ".", "update_modules", ")", "\n", "states", "=", "torch", ".", "from_numpy", "(", "batch", ".", "states", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "actions", "=", "torch", ".", "from_numpy", "(", "batch", ".", "actions", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rewards", "=", "torch", ".", "from_numpy", "(", "batch", ".", "rewards", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "masks", "=", "torch", ".", "from_numpy", "(", "batch", ".", "masks", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "exps", "=", "torch", ".", "from_numpy", "(", "batch", ".", "exps", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "with", "to_test", "(", "*", "self", ".", "update_modules", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "values", "=", "self", ".", "value_net", "(", "self", ".", "trans_value", "(", "states", ")", ")", "\n", "\n", "", "", "\"\"\"get advantage estimation from the trajectories\"\"\"", "\n", "advantages", ",", "returns", "=", "estimate_advantages", "(", "rewards", ",", "masks", ",", "values", ",", "self", ".", "gamma", ",", "self", ".", "tau", ")", "\n", "\n", "self", ".", "update_policy", "(", "states", ",", "actions", ",", "returns", ",", "advantages", ",", "exps", ")", "\n", "\n", "return", "time", ".", "time", "(", ")", "-", "t0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.visual.humanoid_vis.HumanoidVisEnv.__init__": [[6, 10], ["envs.common.mujoco_env.MujocoEnv.__init__", "set"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vis_model_file", ",", "nframes", "=", "6", ",", "focus", "=", "True", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "vis_model_file", ",", "nframes", ")", "\n", "self", ".", "set_cam_first", "=", "set", "(", ")", "\n", "self", ".", "focus", "=", "focus", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.visual.humanoid_vis.HumanoidVisEnv.step": [[11, 13], ["numpy.zeros", "dict"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "10", ",", "1", ")", ")", ",", "0", ",", "False", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.visual.humanoid_vis.HumanoidVisEnv.reset_model": [[14, 21], ["humanoid_vis.HumanoidVisEnv.set_state", "humanoid_vis.HumanoidVisEnv.np_random.uniform", "humanoid_vis.HumanoidVisEnv.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.set_state"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "c", "=", "0", "\n", "self", ".", "set_state", "(", "\n", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nq", ")", ",", "\n", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "c", ",", "high", "=", "c", ",", "size", "=", "self", ".", "model", ".", "nv", ")", "\n", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.visual.humanoid_vis.HumanoidVisEnv.sim_forward": [[22, 24], ["humanoid_vis.HumanoidVisEnv.sim.forward"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward"], ["", "def", "sim_forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.visual.humanoid_vis.HumanoidVisEnv.viewer_setup": [[25, 37], ["humanoid_vis.HumanoidVisEnv.set_cam_first.add"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add"], ["", "def", "viewer_setup", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "1", "\n", "if", "self", ".", "focus", ":", "\n", "            ", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", ":", "2", "]", "=", "self", ".", "data", ".", "qpos", "[", ":", "2", "]", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "0.8", "\n", "", "if", "mode", "not", "in", "self", ".", "set_cam_first", ":", "\n", "            ", "self", ".", "viewer", ".", "video_fps", "=", "30", "\n", "self", ".", "viewer", ".", "frame_skip", "=", "self", ".", "frame_skip", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "1.5", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "10", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "45", "\n", "self", ".", "set_cam_first", ".", "add", "(", "mode", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz.Ax3DPose.__init__": [[124, 158], ["viz.select_dataset", "viz.Ax3DPose.body_members.values", "range", "viz.Ax3DPose.ax.set_xlabel", "viz.Ax3DPose.ax.set_ylabel", "viz.Ax3DPose.ax.set_zlabel", "range", "viz.Ax3DPose.plots_mask.append", "viz.Ax3DPose.ax.plot", "viz.Ax3DPose.ax.plot", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.select_dataset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ",", "ax", ",", "data_set", ",", "lcolor", "=", "\"#3498db\"", ",", "rcolor", "=", "\"#e74c3c\"", ")", ":", "\n", "        ", "\"\"\"\n        Create a 3d pose visualizer that can be updated with new poses.\n\n        Args\n          ax: 3d axis to plot the 3d pose on\n          lcolor: String. Colour for the left part of the body\n          rcolor: String. Colour for the right part of the body\n        \"\"\"", "\n", "\n", "_", ",", "self", ".", "njoints", ",", "self", ".", "body_members", "=", "select_dataset", "(", "data_set", ")", "\n", "\n", "self", ".", "ax", "=", "ax", "\n", "\n", "# Make connection matrix", "\n", "self", ".", "plots", "=", "{", "}", "\n", "for", "member", "in", "self", ".", "body_members", ".", "values", "(", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "member", "[", "'joints'", "]", ")", "-", "1", ")", ":", "\n", "                ", "j_idx_start", "=", "member", "[", "'joints'", "]", "[", "j", "]", "\n", "j_idx_end", "=", "member", "[", "'joints'", "]", "[", "j", "+", "1", "]", "\n", "self", ".", "plots", "[", "(", "j_idx_start", ",", "j_idx_end", ")", "]", "=", "self", ".", "ax", ".", "plot", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "lw", "=", "2", ",", "c", "=", "lcolor", "if", "member", "[", "'side'", "]", "==", "'left'", "else", "rcolor", ")", "\n", "\n", "", "", "self", ".", "plots_mask", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "njoints", ")", ":", "\n", "            ", "self", ".", "plots_mask", ".", "append", "(", "\n", "self", ".", "ax", ".", "plot", "(", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", ",", "lw", "=", "2", ",", "c", "=", "'black'", ",", "markersize", "=", "8", ",", "marker", "=", "'o'", ",", "linestyle", "=", "'dashed'", ",", "\n", "visible", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "ax", ".", "set_xlabel", "(", "\"x\"", ",", "color", "=", "'r'", ")", "\n", "self", ".", "ax", ".", "set_ylabel", "(", "\"y\"", ",", "color", "=", "'r'", ")", "\n", "self", ".", "ax", ".", "set_zlabel", "(", "\"z\"", ",", "color", "=", "'r'", ")", "\n", "\n", "self", ".", "axes_set", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz.Ax3DPose.update": [[159, 209], ["numpy.reshape", "viz.Ax3DPose.body_members.values", "range", "range", "viz.Ax3DPose.ax.set_xlim3d", "viz.Ax3DPose.ax.set_zlim3d", "viz.Ax3DPose.ax.set_ylim3d", "numpy.array", "numpy.array", "numpy.array", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "len", "[].set_visible", "[].set_visible"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "update", "(", "self", ",", "channels", ",", "mask", "=", "None", ",", "mode", "=", "'3d'", ")", ":", "\n", "        ", "\"\"\"\n        Update the plotted 3d pose.\n\n        Args\n          channels: njoints * 3-dim long np array. The pose to plot.\n          lcolor: String. Colour for the left part of the body.\n          rcolor: String. Colour for the right part of the body.\n        Returns\n          Nothing. Simply updates the axis with the new pose.\n        \"\"\"", "\n", "\n", "assert", "channels", ".", "size", "==", "self", ".", "njoints", "*", "3", ",", "\"channels should have %d entries, it has %d instead\"", "%", "(", "self", ".", "njoints", "*", "3", ",", "channels", ".", "size", ")", "\n", "vals", "=", "np", ".", "reshape", "(", "channels", ",", "(", "self", ".", "njoints", ",", "-", "1", ")", ")", "\n", "\n", "for", "member", "in", "self", ".", "body_members", ".", "values", "(", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "member", "[", "'joints'", "]", ")", "-", "1", ")", ":", "\n", "                ", "j_idx_start", "=", "member", "[", "'joints'", "]", "[", "j", "]", "\n", "j_idx_end", "=", "member", "[", "'joints'", "]", "[", "j", "+", "1", "]", "\n", "x", "=", "np", ".", "array", "(", "[", "vals", "[", "j_idx_start", ",", "0", "]", ",", "vals", "[", "j_idx_end", ",", "0", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "vals", "[", "j_idx_start", ",", "1", "]", ",", "vals", "[", "j_idx_end", ",", "1", "]", "]", ")", "\n", "z", "=", "np", ".", "array", "(", "[", "vals", "[", "j_idx_start", ",", "2", "]", ",", "vals", "[", "j_idx_end", ",", "2", "]", "]", ")", "\n", "self", ".", "plots", "[", "(", "j_idx_start", ",", "j_idx_end", ")", "]", "[", "0", "]", ".", "set_xdata", "(", "x", ")", "\n", "self", ".", "plots", "[", "(", "j_idx_start", ",", "j_idx_end", ")", "]", "[", "0", "]", ".", "set_ydata", "(", "y", ")", "\n", "self", ".", "plots", "[", "(", "j_idx_start", ",", "j_idx_end", ")", "]", "[", "0", "]", ".", "set_3d_properties", "(", "z", ")", "\n", "\n", "", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "njoints", ")", ":", "\n", "                ", "if", "mask", "[", "j", "]", "==", "0", ":", "\n", "                    ", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_visible", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_visible", "(", "False", ")", "\n", "", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_xdata", "(", "vals", "[", "j", ",", "0", "]", ")", "\n", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_ydata", "(", "vals", "[", "j", ",", "1", "]", ")", "\n", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_3d_properties", "(", "vals", "[", "j", ",", "2", "]", ")", "\n", "\n", "", "", "if", "not", "self", ".", "axes_set", ":", "\n", "            ", "r", "=", "1000", ";", "\n", "if", "'cam2d'", "in", "mode", ":", "\n", "                ", "xroot", ",", "yroot", ",", "zroot", "=", "0", ",", "0", ",", "0", "\n", "", "else", ":", "\n", "                ", "xroot", ",", "yroot", ",", "zroot", "=", "vals", "[", "0", ",", "0", "]", ",", "vals", "[", "0", ",", "1", "]", ",", "vals", "[", "0", ",", "2", "]", "\n", "", "self", ".", "ax", ".", "set_xlim3d", "(", "[", "-", "r", "+", "xroot", ",", "r", "+", "xroot", "]", ")", "\n", "self", ".", "ax", ".", "set_zlim3d", "(", "[", "-", "r", "+", "zroot", ",", "r", "+", "zroot", "]", ")", "\n", "self", ".", "ax", ".", "set_ylim3d", "(", "[", "-", "r", "+", "yroot", ",", "r", "+", "yroot", "]", ")", "\n", "\n", "# self.ax.set_aspect('equal')", "\n", "# self.axes_set = True   # \u56fa\u5b9a\u70b9\u7684\u753b\u56fe", "\n", "self", ".", "axes_set", "=", "False", "# \u4e2d\u5fc3\u8ddf\u968f\u7684\u753b\u56fe", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz.select_dataset": [[101, 121], ["len", "body_members.items", "value.copy", "H36M_USED_JOINTS.index"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["def", "select_dataset", "(", "data_set", ")", ":", "\n", "    ", "if", "data_set", "==", "\"NTURGBD\"", ":", "\n", "        ", "actions_l", "=", "NTU_ACTIONS", "\n", "njoints", "=", "NTU_NJOINTS", "\n", "body_members", "=", "NTU_BODY_MEMBERS", "\n", "", "elif", "data_set", "==", "\"MSRC12\"", ":", "\n", "        ", "actions_l", "=", "MSRC_ACTIONS", "\n", "njoints", "=", "MSRC_NJOINTS", "\n", "body_members", "=", "MSRC_BODY_MEMBERS", "\n", "", "elif", "data_set", "==", "\"Human36\"", ":", "\n", "        ", "actions_l", "=", "H36_ACTIONS", "\n", "njoints", "=", "len", "(", "H36M_USED_JOINTS", ")", "\n", "body_members", "=", "H36_BODY_MEMBERS", "\n", "new_body_members", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "body_members", ".", "items", "(", ")", ":", "\n", "            ", "new_body_members", "[", "key", "]", "=", "value", ".", "copy", "(", ")", "\n", "new_body_members", "[", "key", "]", "[", "'joints'", "]", "=", "[", "H36M_USED_JOINTS", ".", "index", "(", "j", ")", "for", "j", "in", "new_body_members", "[", "key", "]", "[", "'joints'", "]", "]", "\n", "", "body_members", "=", "new_body_members", "\n", "\n", "", "return", "actions_l", ",", "njoints", ",", "body_members", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz.plot_gif_rlt": [[211, 228], ["os.makedirs", "viz.plot_seq_gif", "numpy.transpose", "numpy.transpose", "numpy.transpose", "os.path.dirname", "os.path.abspath", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_seq_gif"], ["", "", "", "def", "plot_gif_rlt", "(", "pose_gt", ",", "pose_recoverd", ",", "pose_mask", ",", "save_path", ")", ":", "\n", "    ", "'''\n    pose_gt: t j 3\n    pose_recoverd:  t j 3\n    pose_mask:  t j 1\n    save_name: xxx.gif\n    '''", "\n", "pose_gt", "=", "np", ".", "transpose", "(", "pose_gt", "[", "np", ".", "newaxis", ",", "...", "]", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "*", "1e3", "\n", "pose_recoverd", "=", "np", ".", "transpose", "(", "pose_recoverd", "[", "np", ".", "newaxis", ",", "...", "]", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "*", "1e3", "\n", "pose_mask", "=", "np", ".", "transpose", "(", "pose_mask", "[", "np", ".", "newaxis", ",", "...", "]", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "[", "0", "]", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "save_path", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "plot_seq_gif", "(", "seqs", "=", "np", ".", "concatenate", "(", "[", "pose_gt", ",", "pose_recoverd", "]", ")", ",", "\n", "labs", "=", "None", ",", "\n", "data_set", "=", "\"Human36\"", ",", "\n", "seq_masks", "=", "pose_mask", ",", "\n", "extra_text", "=", "None", ",", "\n", "save_path", "=", "save_path", ",", "figwidth", "=", "256", "*", "2", ",", "figheight", "=", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz.Wrap_plot_seq_gif": [[229, 241], ["os.makedirs", "viz.plot_seq_gif", "numpy.transpose", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_seq_gif"], ["", "def", "Wrap_plot_seq_gif", "(", "seqs", ",", "labs", ",", "save_path", ",", "figwidth", "=", "256", "*", "2", ",", "figheight", "=", "256", ")", ":", "\n", "    ", "'''\n    segs: n x t x j x 3\n    labs: input_world, input_cam2d, input_cam3d, recoverd_world, RT3D_cam3d, RT2D_cam2d\n    save_name: xxx.gif\n    '''", "\n", "seqs", "=", "np", ".", "transpose", "(", "seqs", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "*", "1e3", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "save_path", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "plot_seq_gif", "(", "seqs", "=", "seqs", ",", "\n", "labs", "=", "labs", ",", "\n", "data_set", "=", "\"Human36\"", ",", "\n", "save_path", "=", "save_path", ",", "figwidth", "=", "figwidth", ",", "figheight", "=", "figheight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz._zip_GIFplot_array": [[243, 258], ["numpy.concatenate", "lst.append", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "lst.append", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "_zip_GIFplot_array", "(", "np_lst", ")", ":", "\n", "    ", "\"\"\"\n    for plot function pre-preocess\n    \"\"\"", "\n", "lst", "=", "[", "]", "\n", "for", "item", "in", "np_lst", ":", "\n", "        ", "if", "item", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "# for 3D case", "\n", "            ", "lst", ".", "append", "(", "np", ".", "expand_dims", "(", "item", ",", "0", ")", ")", "\n", "", "elif", "item", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "            ", "tmp2d", "=", "np", ".", "expand_dims", "(", "item", ",", "0", ")", "\n", "tmp2d", "=", "np", ".", "concatenate", "(", "[", "tmp2d", ",", "np", ".", "zeros_like", "(", "tmp2d", ")", "[", "...", ",", "-", "1", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "lst", ".", "append", "(", "tmp2d", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'wrong data get'", "\n", "", "", "return", "np", ".", "concatenate", "(", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz.save_2dpose_gif": [[259, 270], ["print", "numpy.arange", "viz._zip_GIFplot_array", "os.path.join", "os.makedirs", "viz.Wrap_plot_seq_gif"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._zip_GIFplot_array", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.Wrap_plot_seq_gif"], ["", "def", "save_2dpose_gif", "(", "pose2d_seq", ",", "save_name", ")", ":", "\n", "# b j 2", "\n", "    ", "print", "(", "'save gif: {}'", ".", "format", "(", "save_name", ")", ")", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "pose2d_seq", ".", "shape", "[", "0", "]", ",", "10", ")", "\n", "lables", "=", "[", "'input_cam2d'", "]", "\n", "seqs", "=", "_zip_GIFplot_array", "(", "[", "\n", "pose2d_seq", "[", "idx", "]", ",", "\n", "]", ")", "\n", "gif_save_path", "=", "os", ".", "path", ".", "join", "(", "'./results/gif'", ",", "'{}.gif'", ".", "format", "(", "save_name", ")", ")", "\n", "os", ".", "makedirs", "(", "'./results/gif'", ",", "exist_ok", "=", "True", ")", "\n", "Wrap_plot_seq_gif", "(", "seqs", "=", "seqs", ",", "labs", "=", "lables", ",", "save_path", "=", "gif_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz.save_3dpose_gif": [[272, 284], ["print", "numpy.arange", "viz._zip_GIFplot_array", "viz.Wrap_plot_seq_gif"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._zip_GIFplot_array", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.Wrap_plot_seq_gif"], ["", "def", "save_3dpose_gif", "(", "pose3d_seq", ",", "pose3d_seq2", ",", "save_name", ",", "downsample", "=", "5", ")", ":", "\n", "# b j 3", "\n", "    ", "print", "(", "'save gif: {}'", ".", "format", "(", "save_name", ")", ")", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "pose3d_seq", ".", "shape", "[", "0", "]", ",", "downsample", ")", "\n", "lables", "=", "[", "'sktpose_world'", ",", "'sktposeRef_world'", "]", "\n", "seqs", "=", "_zip_GIFplot_array", "(", "[", "\n", "pose3d_seq", "[", "idx", "]", ",", "\n", "pose3d_seq2", "[", "idx", "]", ",", "\n", "]", ")", "\n", "# gif_save_path = os.path.join('./results/gif', '{}.gif'.format(save_name))", "\n", "# os.makedirs('./results/gif', exist_ok=True)", "\n", "Wrap_plot_seq_gif", "(", "seqs", "=", "seqs", ",", "labs", "=", "lables", ",", "save_path", "=", "save_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.tmp.viz.plot_seq_gif": [[288, 406], ["viz.select_dataset", "numpy.arange", "numpy.array().reshape", "plt.figure", "range", "plt.figure.text", "plt.figure.tight_layout", "plt.figure.subplots_adjust", "matplotlib.animation.FuncAnimation", "plt.close", "matplotlib.use", "plt.figure.add_subplot", "viz.Ax3DPose", "axs.append", "obs.append", "plt.figure.text", "range", "fig.text.set_text", "fig.text.set_color", "matplotlib.animation.FuncAnimation.save", "int", "int", "len", "numpy.array", "fig.add_subplot.view_init", "fig.add_subplot.view_init", "obs[].update", "numpy.arange", "plt.show", "plt.figure.get_figheight", "plt.figure.get_figwidth", "len", "labs[].split", "axs[].set_xlabel", "axs[].title.set_text"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.select_dataset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "plot_seq_gif", "(", "seqs", ",", "labs", ",", "data_set", "=", "\"Human36\"", ",", "seq_masks", "=", "None", ",", "extra_text", "=", "None", ",", "save_path", "=", "None", ",", "figwidth", "=", "768", ",", "\n", "figheight", "=", "384", ",", "dpi", "=", "80", ")", ":", "\n", "# kehong: change labs to string list", "\n", "    ", "import", "matplotlib", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "actions_l", ",", "njoints", ",", "body_members", "=", "select_dataset", "(", "data_set", ")", "\n", "\n", "if", "labs", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "labs", ")", "==", "seqs", ".", "shape", "[", "0", "]", ":", "\n", "            ", "labs_mode", "=", "\"multi\"", "\n", "", "else", ":", "\n", "            ", "assert", "labs", ".", "shape", "[", "0", "]", "==", "4", ",", "\"seqs and labs len must match or be a single lab\"", "\n", "labs_mode", "=", "\"single\"", "\n", "\n", "", "", "if", "seq_masks", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "seq_masks", ".", "shape", ")", ">", "3", "and", "seq_masks", ".", "shape", "[", "0", "]", "==", "seqs", ".", "shape", "[", "0", "]", ":", "\n", "            ", "mask_mode", "=", "\"multi\"", "\n", "", "else", ":", "\n", "            ", "assert", "seq_masks", ".", "shape", "[", "0", "]", "==", "njoints", ",", "\"seqs and labs len must match or be a single lab\"", "\n", "mask_mode", "=", "\"single\"", "\n", "\n", "", "", "n_seqs", "=", "seqs", ".", "shape", "[", "0", "]", "\n", "# n_rows = np.int(np.ceil(np.sqrt(n_seqs) * figheight / figwidth))", "\n", "# n_cols = np.int(np.ceil(n_seqs / n_rows))", "\n", "n_rows", "=", "3", "\n", "n_cols", "=", "n_seqs", "//", "3", "+", "1", "\n", "figwidth", "=", "n_cols", "*", "256", "\n", "figheight", "=", "n_rows", "*", "256", "\n", "\n", "# create the index array to plot in cols-wise: re-order the index", "\n", "idex1", "=", "np", ".", "arange", "(", "1", ",", "n_cols", "+", "1", ")", "\n", "idex2", "=", "[", "[", "item", ",", "item", "+", "1", "*", "n_cols", ",", "item", "+", "2", "*", "n_cols", "]", "for", "item", "in", "idex1", "]", "\n", "idex3", "=", "np", ".", "array", "(", "idex2", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# fig = plt.figure(figsize=(figwidth / dpi, figheight / dpi), dpi=dpi)", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "figwidth", "/", "dpi", ",", "figheight", "/", "dpi", ")", ",", "dpi", "=", "dpi", ",", "\n", "tight_layout", "=", "{", "'pad'", ":", "0", ",", "'h_pad'", ":", "0", ",", "'w_pad'", ":", "0", "}", ")", "\n", "\n", "# if labs is not None:", "\n", "#     title = 'Plotting samples from %s dataset' % data_set", "\n", "#     if labs_mode == \"single\":", "\n", "#         # seq_idx, subject, action, plen = labs", "\n", "#         # title += \"\\n action: %s  subject: %d  seq_idx: %d  length: %d\" % \\", "\n", "#         #           (actions_l[action], subject, seq_idx, plen)", "\n", "#         title += \"\\n {}\".format(labs)", "\n", "#     fig.suptitle(title)", "\n", "\n", "axs", "=", "[", "]", "\n", "obs", "=", "[", "]", "\n", "view_dict", "=", "{", "\n", "'cam2d'", ":", "[", "-", "90", ",", "-", "90", "]", ",", "\n", "'cam3d'", ":", "[", "-", "70", ",", "-", "89", "]", ",", "\n", "'world'", ":", "[", "30", ",", "-", "30", "]", "\n", "}", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "# ax = fig.add_subplot(n_rows, n_cols, i + 1, projection='3d')", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "n_rows", ",", "n_cols", ",", "idex3", "[", "i", "]", ",", "projection", "=", "'3d'", ")", "\n", "if", "labs", "is", "not", "None", ":", "\n", "            ", "view_key", "=", "labs", "[", "i", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "# e.g., cam3d", "\n", "ax", ".", "view_init", "(", "elev", "=", "view_dict", "[", "view_key", "]", "[", "0", "]", ",", "azim", "=", "view_dict", "[", "view_key", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "view_init", "(", "elev", "=", "30", ",", "azim", "=", "-", "30", ")", "\n", "", "ob", "=", "Ax3DPose", "(", "ax", ",", "data_set", ")", "\n", "axs", ".", "append", "(", "ax", ")", "\n", "obs", ".", "append", "(", "ob", ")", "\n", "\n", "", "seq_len", "=", "seqs", ".", "shape", "[", "2", "]", "\n", "frame_counter", "=", "fig", ".", "text", "(", "0.9", "if", "labs", "is", "not", "None", "else", "0.05", ",", "0.1", "if", "labs", "is", "not", "None", "else", "0.95", ",", "'frame: 0'", ")", "\n", "if", "extra_text", "is", "not", "None", ":", "\n", "        ", "fig", ".", "text", "(", "0.1", ",", "0.1", ",", "extra_text", ")", "\n", "\n", "# Tight layout often produces nice results", "\n", "# but requires the title to be spaced accordingly", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "subplots_adjust", "(", "top", "=", "0.58", ")", "\n", "\n", "def", "update", "(", "frame", ")", ":", "\n", "        ", "if", "frame", ">=", "seq_len", ":", "\n", "            ", "return", "\n", "", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "mask", "=", "None", "\n", "if", "seq_masks", "is", "not", "None", ":", "\n", "                ", "if", "mask_mode", "==", "\"single\"", "and", "i", "==", "0", ":", "\n", "                    ", "mask", "=", "seq_masks", "[", ":", ",", "frame", ",", "0", "]", "\n", "", "elif", "mask_mode", "==", "\"multi\"", ":", "\n", "                    ", "mask", "=", "seq_masks", "[", "i", ",", ":", ",", "frame", ",", "0", "]", "\n", "", "", "obs", "[", "i", "]", ".", "update", "(", "seqs", "[", "i", ",", ":", ",", "frame", ",", ":", "]", ",", "mask", ",", "labs", "[", "i", "]", ")", "\n", "if", "labs", "is", "not", "None", ":", "\n", "                ", "if", "labs_mode", "==", "\"multi\"", ":", "\n", "# seq_idx, subject, action, plen = labs[i, ...]", "\n", "# axs[i].set_xlabel('idx: %d \\n act: %s' % (seq_idx, actions_l[action]))", "\n", "# axs[i].set_title('label: {}'.format(labs[i]), fontsize=20, color='red')", "\n", "                    ", "axs", "[", "i", "]", ".", "title", ".", "set_text", "(", "'\\n\\nlabel: {}'", ".", "format", "(", "labs", "[", "i", "]", ")", ")", "\n", "# axs[i].text(.5, .9, s='label: {}'.format(labs[i]), color='red', fontweight='bold', fontsize=14,", "\n", "#             horizontalalignment='center', transform=axs[i].transAxes)", "\n", "", "", "else", ":", "\n", "                ", "axs", "[", "i", "]", ".", "set_xlabel", "(", "'sequence %d'", "%", "i", ")", "\n", "", "", "frame_counter", ".", "set_text", "(", "'frame: %d'", "%", "frame", ")", "\n", "frame_counter", ".", "set_color", "(", "'red'", "if", "frame", ">", "seq_len", "//", "2", "else", "'blue'", ")", "\n", "\n", "", "anim", "=", "FuncAnimation", "(", "fig", ",", "update", ",", "frames", "=", "np", ".", "arange", "(", "0", ",", "seq_len", "+", "10", ")", ",", "interval", "=", "100", ",", "repeat_delay", "=", "1000", ")", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "anim", ".", "save", "(", "save_path", ",", "dpi", "=", "dpi", ",", "writer", "=", "'imagemagick'", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "", "except", "(", "KeyboardInterrupt", ",", "AttributeError", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "", "fig_size", "=", "(", "int", "(", "fig", ".", "get_figheight", "(", ")", ")", ",", "int", "(", "fig", ".", "get_figwidth", "(", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "return", "fig_size", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic.pre_iter_update": [[104, 111], ["cfg.update_adaptive_params", "agent.set_noise_rate", "set_optimizer_lr", "policy_net.action_log_std.fill_"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.posemimic_config.Config.update_adaptive_params", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.set_noise_rate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.set_optimizer_lr"], ["def", "pre_iter_update", "(", "i_iter", ")", ":", "\n", "    ", "cfg", ".", "update_adaptive_params", "(", "i_iter", ")", "\n", "agent", ".", "set_noise_rate", "(", "cfg", ".", "adp_noise_rate", ")", "\n", "set_optimizer_lr", "(", "optimizer_policy", ",", "cfg", ".", "adp_policy_lr", ")", "\n", "if", "cfg", ".", "fix_std", ":", "\n", "        ", "policy_net", ".", "action_log_std", ".", "fill_", "(", "cfg", ".", "adp_log_std", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic.main_loop": [[113, 157], ["pose_mimic.pre_iter_update", "agent.sample", "range", "logger.info", "pose_mimic.pre_iter_update", "agent.sample", "time.time", "agent.update_params", "time.time", "logger.info", "tb_logger.scalar_summary", "tb_logger.scalar_summary", "range", "torch.cuda.empty_cache", "tb_logger.scalar_summary", "np.array2string", "to_cpu", "pickle.dump", "policy_net.state_dict", "policy_vs_net.state_dict", "value_net.state_dict", "value_vs_net.state_dict", "open"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic.pre_iter_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic.pre_iter_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.update_params", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tb_logger.Logger.scalar_summary"], ["", "def", "main_loop", "(", ")", ":", "\n", "\n", "    ", "if", "args", ".", "render", ":", "\n", "        ", "pre_iter_update", "(", "args", ".", "iter", ")", "\n", "agent", ".", "sample", "(", "1e8", ")", "\n", "", "else", ":", "\n", "        ", "for", "i_iter", "in", "range", "(", "args", ".", "iter", ",", "cfg", ".", "max_iter_num", ")", ":", "\n", "            ", "\"\"\"generate multiple trajectories that reach the minimum batch_size\"\"\"", "\n", "pre_iter_update", "(", "i_iter", ")", "\n", "batch", ",", "log", "=", "agent", ".", "sample", "(", "cfg", ".", "min_batch_size", ")", "\n", "agent", ".", "env", ".", "end_reward", "=", "log", ".", "avg_c_reward", "*", "cfg", ".", "gamma", "/", "(", "1", "-", "cfg", ".", "gamma", ")", "# set end reward", "\n", "\n", "\"\"\"update networks\"\"\"", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "agent", ".", "update_params", "(", "batch", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "\n", "\"\"\"logging\"\"\"", "\n", "c_info", "=", "log", ".", "avg_c_info", "\n", "logger", ".", "info", "(", "\n", "'{}\\tT_sample {:.2f}\\tT_update {:.2f}\\tR_avg {:.4f} {}'", "\n", "'\\tR_range ({:.4f}, {:.4f})\\teps_len_avg {:.2f}'", "\n", ".", "format", "(", "i_iter", ",", "log", ".", "sample_time", ",", "t1", "-", "t0", ",", "log", ".", "avg_c_reward", ",", "\n", "np", ".", "array2string", "(", "c_info", ",", "formatter", "=", "{", "'all'", ":", "lambda", "x", ":", "'%.4f'", "%", "x", "}", ",", "separator", "=", "','", ")", ",", "\n", "log", ".", "min_c_reward", ",", "log", ".", "max_c_reward", ",", "log", ".", "avg_episode_reward", ")", ")", "\n", "\n", "tb_logger", ".", "scalar_summary", "(", "'total_reward'", ",", "log", ".", "avg_c_reward", ",", "i_iter", ")", "\n", "tb_logger", ".", "scalar_summary", "(", "'episode_len'", ",", "log", ".", "avg_episode_reward", ",", "i_iter", ")", "\n", "for", "i", "in", "range", "(", "c_info", ".", "shape", "[", "0", "]", ")", ":", "\n", "# tb_logger.scalar_summary('reward_%s' % reward_name_list[i], c_info[i], i_iter)", "\n", "                ", "tb_logger", ".", "scalar_summary", "(", "'reward_detail/%s'", "%", "reward_name_list", "[", "i", "]", ",", "c_info", "[", "i", "]", ",", "i_iter", ")", "\n", "\n", "", "if", "cfg", ".", "save_model_interval", ">", "0", "and", "(", "i_iter", "+", "1", ")", "%", "cfg", ".", "save_model_interval", "==", "0", ":", "\n", "                ", "with", "to_cpu", "(", "policy_net", ",", "value_net", ",", "policy_vs_net", ",", "value_vs_net", ")", ":", "\n", "                    ", "cp_path", "=", "'%s/iter_%04d.p'", "%", "(", "cfg", ".", "model_dir", ",", "i_iter", "+", "1", ")", "\n", "model_cp", "=", "{", "'policy_dict'", ":", "policy_net", ".", "state_dict", "(", ")", ",", "'policy_vs_dict'", ":", "policy_vs_net", ".", "state_dict", "(", ")", ",", "\n", "'value_dict'", ":", "value_net", ".", "state_dict", "(", ")", ",", "'value_vs_dict'", ":", "value_vs_net", ".", "state_dict", "(", ")", ",", "\n", "'running_state'", ":", "running_state", "}", "\n", "pickle", ".", "dump", "(", "model_cp", ",", "open", "(", "cp_path", ",", "'wb'", ")", ")", "\n", "\n", "", "", "\"\"\"clean up gpu memory\"\"\"", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "'training done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render": [[98, 104], ["env.data.qpos.copy", "env_vis.sim_forward", "env_vis.render"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.visual.humanoid_vis.HumanoidVisEnv.sim_forward", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render"], ["def", "render", "(", ")", ":", "\n", "    ", "env_vis", ".", "data", ".", "qpos", "[", ":", "env", ".", "model", ".", "nq", "]", "=", "env", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "env_vis", ".", "data", ".", "qpos", "[", "env", ".", "model", ".", "nq", ":", "]", "=", "epos", "\n", "env_vis", ".", "data", ".", "qpos", "[", "env", ".", "model", ".", "nq", "]", "+=", "1.0", "\n", "env_vis", ".", "sim_forward", "(", ")", "\n", "env_vis", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.reset_env_state": [[106, 113], ["ref_qpos.copy", "align_human_state", "env.set_state", "env.get_obs"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.align_human_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_obs"], ["", "def", "reset_env_state", "(", "state", ",", "ref_qpos", ")", ":", "\n", "    ", "qpos", "=", "ref_qpos", ".", "copy", "(", ")", "\n", "qpos", "[", "2", ":", "]", "=", "state", "[", ":", "qpos", ".", "size", "-", "2", "]", "\n", "qvel", "=", "state", "[", "qpos", ".", "size", "-", "2", ":", "]", "\n", "align_human_state", "(", "qpos", ",", "qvel", ",", "ref_qpos", ")", "\n", "env", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "return", "env", ".", "get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.eval_expert": [[115, 205], ["logger.info", "env.set_fix_sampling", "env.reset", "tensor", "policy_vs_net.initialize", "value_vs_net.initialize", "env.get_episode_export_qpos_qvel", "range", "env.get_episode_cnn_feat", "pose_mimic_eval.reset_env_state", "pose_mimic_eval.reset_env_state", "running_state", "env.get_expert_index", "env.get_expert_attr().copy", "env.get_expert_attr().copy", "env.get_skeleton_pos().copy", "traj_pred.append", "traj_orig.append", "vel_pred.append", "skt_wpos_orig.append", "skt_wpos_pred.append", "tensor().unsqueeze", "policy_vs_net", "value_vs_net", "value_net().item", "value_stat.push", "[].numpy", "env.step", "logger.debug", "np.vstack", "np.vstack", "np.vstack", "np.vstack", "np.vstack", "env.data.qpos.copy", "env.get_expert_attr().copy.copy", "env.data.qvel.copy", "quaternion_multiply", "pose_mimic_eval.render", "policy_vs_net.initialize", "np.array", "running_state", "logger.info", "log_reset.append", "env.get_expert_attr", "env.get_expert_attr", "env.get_skeleton_pos", "quat_mul_vec", "tensor", "value_net", "np.array2string", "pose_mimic_eval.reset_env_state", "pose_mimic_eval.reset_env_state", "running_state", "policy_net.select_action"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_fix_sampling", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_episode_export_qpos_qvel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_episode_cnn_feat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.reset_env_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.reset_env_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.push", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.render", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_skeleton_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.reset_env_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.pose_imitation.pose_mimic_eval.reset_env_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.select_action"], ["", "def", "eval_expert", "(", "expert_ind", ")", ":", "\n", "    ", "global", "epos", "\n", "\n", "expert_name", "=", "env", ".", "expert_list", "[", "expert_ind", "]", "\n", "logger", ".", "info", "(", "'Testing on expert trajectory %s'", "%", "expert_name", ")", "\n", "\n", "traj_pred", "=", "[", "]", "\n", "traj_orig", "=", "[", "]", "\n", "vel_pred", "=", "[", "]", "\n", "skt_wpos_orig", "=", "[", "]", "\n", "skt_wpos_pred", "=", "[", "]", "\n", "num_reset", "=", "0", "\n", "log_reset", "=", "[", "]", "\n", "reward_episode", "=", "0", "\n", "data_len", "=", "env", ".", "cnn_feat", "[", "expert_ind", "]", ".", "shape", "[", "0", "]", "\n", "test_len", "=", "data_len", "-", "2", "*", "cfg", ".", "fr_margin", "\n", "env", ".", "set_fix_sampling", "(", "expert_ind", ",", "cfg", ".", "fr_margin", ",", "test_len", ")", "\n", "\n", "state", "=", "env", ".", "reset", "(", ")", "\n", "cnn_feat", "=", "tensor", "(", "env", ".", "get_episode_cnn_feat", "(", ")", ")", "\n", "policy_vs_net", ".", "initialize", "(", "cnn_feat", ")", "\n", "value_vs_net", ".", "initialize", "(", "cnn_feat", ")", "\n", "\n", "\n", "state_pred", "=", "env", ".", "get_episode_export_qpos_qvel", "(", ")", "\n", "if", "cfg", ".", "set_fix_start_state", ":", "\n", "        ", "state", "=", "reset_env_state", "(", "start_state", "[", "2", ":", "]", ",", "env", ".", "data", ".", "qpos", ")", "\n", "", "else", ":", "\n", "        ", "state", "=", "reset_env_state", "(", "state_pred", "[", "0", ",", ":", "]", ",", "env", ".", "data", ".", "qpos", ")", "\n", "", "if", "running_state", "is", "not", "None", ":", "\n", "        ", "state", "=", "running_state", "(", "state", ",", "update", "=", "False", ")", "\n", "\n", "", "for", "t", "in", "range", "(", "test_len", ")", ":", "\n", "\n", "        ", "ind", "=", "env", ".", "get_expert_index", "(", "t", ")", "\n", "epos", "=", "env", ".", "get_expert_attr", "(", "'qpos'", ",", "ind", ")", ".", "copy", "(", ")", "\n", "skt_wpos_e", "=", "env", ".", "get_expert_attr", "(", "'skt_wpos'", ",", "ind", ")", ".", "copy", "(", ")", "\n", "skt_wpos", "=", "env", ".", "get_skeleton_pos", "(", ")", ".", "copy", "(", ")", "\n", "traj_pred", ".", "append", "(", "env", ".", "data", ".", "qpos", ".", "copy", "(", ")", ")", "\n", "traj_orig", ".", "append", "(", "epos", ".", "copy", "(", ")", ")", "\n", "vel_pred", ".", "append", "(", "env", ".", "data", ".", "qvel", ".", "copy", "(", ")", ")", "\n", "skt_wpos_orig", ".", "append", "(", "skt_wpos_e", ")", "\n", "skt_wpos_pred", ".", "append", "(", "skt_wpos", ")", "\n", "\n", "if", "args", ".", "sync", ":", "\n", "            ", "epos", "[", ":", "3", "]", "=", "quat_mul_vec", "(", "env", ".", "expert", "[", "'rel_heading'", "]", ",", "epos", "[", ":", "3", "]", "-", "env", ".", "expert", "[", "'start_pos'", "]", ")", "+", "env", ".", "expert", "[", "'sim_pos'", "]", "\n", "epos", "[", "3", ":", "7", "]", "=", "quaternion_multiply", "(", "env", ".", "expert", "[", "'rel_heading'", "]", ",", "epos", "[", "3", ":", "7", "]", ")", "\n", "\n", "", "if", "args", ".", "render", ":", "\n", "            ", "render", "(", ")", "\n", "\n", "", "if", "args", ".", "causal", ":", "\n", "            ", "policy_vs_net", ".", "initialize", "(", "cnn_feat", "[", ":", "t", "+", "2", "*", "cfg", ".", "fr_margin", "+", "1", "]", ")", "\n", "policy_vs_net", ".", "t", "=", "t", "\n", "\n", "", "\"\"\"learner policy\"\"\"", "\n", "state_var", "=", "tensor", "(", "state", ",", "dtype", "=", "dtype", ")", ".", "unsqueeze", "(", "0", ")", "\n", "policy_vs_out", "=", "policy_vs_net", "(", "state_var", ")", "\n", "value_vs_out", "=", "value_vs_net", "(", "state_var", ")", "\n", "value", "=", "value_net", "(", "value_vs_out", ")", ".", "item", "(", ")", "\n", "value_stat", ".", "push", "(", "np", ".", "array", "(", "[", "value", "]", ")", ")", "\n", "\n", "action", "=", "policy_net", ".", "select_action", "(", "policy_vs_out", ",", "mean_action", "=", "not", "args", ".", "show_noise", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "next_state", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "running_state", "is", "not", "None", ":", "\n", "            ", "next_state", "=", "running_state", "(", "next_state", ",", "update", "=", "False", ")", "\n", "\n", "", "reward", ",", "cinfo", "=", "reward_func", "[", "cfg", ".", "reward_id", "]", "(", "env", ",", "state", ",", "action", ",", "info", ")", "\n", "logger", ".", "debug", "(", "\"{} {:.2f} {} {:.2f}\"", ".", "format", "(", "t", ",", "reward", ",", "np", ".", "array2string", "(", "cinfo", ",", "formatter", "=", "{", "'all'", ":", "lambda", "x", ":", "'%.4f'", "%", "x", "}", ")", ",", "value", ")", ")", "\n", "\n", "reward_episode", "+=", "reward", "\n", "\n", "if", "info", "[", "'end'", "]", ":", "\n", "            ", "break", "\n", "\n", "", "if", "args", ".", "fail_safe", "==", "'valuefs'", "and", "value", "<", "args", ".", "valuefs_factor", "*", "value_stat", ".", "mean", "[", "0", "]", "or", "args", ".", "fail_safe", "==", "'naivefs'", "and", "info", "[", "'fail'", "]", ":", "\n", "            ", "logger", ".", "info", "(", "'reset state!'", ")", "\n", "num_reset", "+=", "1", "\n", "log_reset", ".", "append", "(", "t", ")", "\n", "if", "cfg", ".", "set_fix_start_state", ":", "\n", "                ", "state", "=", "reset_env_state", "(", "start_state", "[", "2", ":", "]", ",", "env", ".", "data", ".", "qpos", ")", "\n", "", "else", ":", "\n", "                ", "state", "=", "reset_env_state", "(", "state_pred", "[", "t", "+", "1", ",", ":", "]", ",", "env", ".", "data", ".", "qpos", ")", "\n", "", "if", "running_state", "is", "not", "None", ":", "\n", "                ", "state", "=", "running_state", "(", "state", ",", "update", "=", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "state", "=", "next_state", "\n", "\n", "", "", "return", "np", ".", "vstack", "(", "traj_pred", ")", ",", "np", ".", "vstack", "(", "traj_orig", ")", ",", "np", ".", "vstack", "(", "vel_pred", ")", ",", "np", ".", "vstack", "(", "skt_wpos_pred", ")", ",", "np", ".", "vstack", "(", "skt_wpos_orig", ")", ",", "num_reset", ",", "log_reset", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.__init__": [[19, 60], ["envs.common.mujoco_env.MujocoEnv.__init__", "set", "get_body_qposaddr", "humanoid_v4.HumanoidEnv.get_body_quat", "humanoid_v4.HumanoidEnv.get_skeleton_pos", "humanoid_v4.HumanoidEnv.set_spaces", "humanoid_v4.HumanoidEnv.set_model_params"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.tools.get_body_qposaddr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_body_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_skeleton_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_spaces", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_model_params"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "mujoco_env", ".", "MujocoEnv", ".", "__init__", "(", "self", ",", "cfg", ".", "mujoco_model_file", ",", "15", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "# visualization", "\n", "self", ".", "save_video", "=", "False", "\n", "self", ".", "video_res", "=", "(", "224", ",", "224", ")", "\n", "self", ".", "video_dir", "=", "cfg", ".", "video_dir", "\n", "self", ".", "set_cam_first", "=", "set", "(", ")", "\n", "self", ".", "subsample_rate", "=", "1", "\n", "# env specific", "\n", "self", ".", "end_reward", "=", "0.0", "\n", "self", ".", "start_ind", "=", "0", "\n", "self", ".", "body_qposaddr", "=", "get_body_qposaddr", "(", "self", ".", "model", ")", "# \u4e00\u4e2a\u5e26body_name:index_address\u7684dict:", "\n", "# {'Hips': (0, 7), 'Spine': (7, 10), 'Spine1': (10, 13), 'Spine2': (13, 16), 'Spine3': (16, 19),", "\n", "# 'Neck': (19, 22), 'Head': (22, 25),", "\n", "# 'RightShoulder': (25, 28), 'RightArm': (28, 31), 'RightForeArm': (31, 32), 'RightHand': (32, 35),", "\n", "# 'LeftShoulder': (35, 38), 'LeftArm': (38, 41), 'LeftForeArm': (41, 42), 'LeftHand': (42, 45),", "\n", "# 'RightUpLeg': (45, 48), 'RightLeg': (48, 49), 'RightFoot': (49, 52),", "\n", "# 'LeftUpLeg': (52, 55), 'LeftLeg': (55, 56), 'LeftFoot': (56, 59)}", "\n", "self", ".", "bquat", "=", "self", ".", "get_body_quat", "(", ")", "\n", "self", ".", "prev_bquat", "=", "None", "\n", "self", ".", "skt_pos", "=", "self", ".", "get_skeleton_pos", "(", "self", ".", "cfg", ".", "obs_coord", ")", "\n", "self", ".", "prev_skt_pos", "=", "None", "\n", "# expert", "\n", "self", ".", "expert_ind", "=", "None", "\n", "self", ".", "expert_id", "=", "None", "\n", "self", ".", "expert_list", "=", "None", "# name only", "\n", "self", ".", "expert_arr", "=", "None", "# store actual experts dict", "\n", "self", ".", "expert", "=", "None", "\n", "# self.cnn_feat = None", "\n", "self", ".", "qpos_target", "=", "None", "\n", "# fixed sampling", "\n", "self", ".", "fix_expert_ind", "=", "None", "\n", "self", ".", "fix_start_ind", "=", "None", "\n", "self", ".", "fix_len", "=", "None", "\n", "self", ".", "fix_start_state", "=", "None", "\n", "self", ".", "fix_cnn_feat", "=", "None", "\n", "self", ".", "fix_head_lb", "=", "None", "\n", "# set agent", "\n", "self", ".", "set_spaces", "(", ")", "\n", "self", ".", "set_model_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.load_experts": [[61, 88], ["pickle.load", "humanoid_v4.HumanoidEnv.set_expert", "open", "[].astype", "[].astype", "numpy.concatenate", "zip", "[].astype", "[].astype", "numpy.concatenate", "zip", "[].astype", "[].astype", "numpy.concatenate", "mask_features", "[].reshape().astype", "zip", "[].reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_expert", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.functions.mask_features", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "load_experts", "(", "self", ",", "expert_list", ",", "expert_feat_file", ",", "cnn_feat_key", "=", "'qpos'", ")", ":", "# \u9ed8\u8ba4expert\u662fqpos, kgail\u7684\u65f6\u5019\u75282dpose", "\n", "        ", "self", ".", "expert_ind", "=", "0", "\n", "self", ".", "expert_list", "=", "expert_list", "\n", "expert_dict", "=", "pickle", ".", "load", "(", "open", "(", "expert_feat_file", ",", "'rb'", ")", ")", "\n", "self", ".", "expert_arr", "=", "[", "expert_dict", "[", "x", "]", "for", "x", "in", "self", ".", "expert_list", "]", "# expert_arr \u5176\u5b9e\u662f\u4e00\u4e2adict, \u5305\u542bqpos qvel\u5565\u7684.", "\n", "self", ".", "set_expert", "(", "0", ")", "\n", "# cnn_feat_dict, _ = pickle.load(open(cnn_feat_file, 'rb'))", "\n", "# self.cnn_feat = [cnn_feat_dict[x] for x in self.expert_list]", "\n", "# self.cnn_feat = [expert_dict[x][expert_key] for x in self.expert_list]  # \u4ece\u8fd9\u91cc\u5f00\u59cb, cnn feat\u5c31\u662fqpos\u4e86.", "\n", "# \u8fd9\u91cc\u8bbe\u5b9a\u4e00\u4e0b, \u53ef\u80fd\u9700\u8981\u8f93\u5165\u7684\u662f3D\u7684root traj\u548cvel. 14\u4e2achannel.", "\n", "if", "cnn_feat_key", "==", "'root_traj'", ":", "\n", "            ", "tmp_qpos", "=", "[", "expert_dict", "[", "x", "]", "[", "'qpos'", "]", "[", ":", ",", ":", "7", "]", ".", "astype", "(", "'float64'", ")", "for", "x", "in", "self", ".", "expert_list", "]", "\n", "tmp_qvel", "=", "[", "expert_dict", "[", "x", "]", "[", "'qvel'", "]", "[", ":", ",", ":", "6", "]", ".", "astype", "(", "'float64'", ")", "for", "x", "in", "self", ".", "expert_list", "]", "\n", "self", ".", "cnn_feat", "=", "[", "np", ".", "concatenate", "(", "[", "item1", ",", "item2", "]", ",", "axis", "=", "1", ")", "for", "item1", ",", "item2", "in", "zip", "(", "tmp_qpos", ",", "tmp_qvel", ")", "]", "\n", "", "elif", "cnn_feat_key", "==", "'qposvel'", ":", "\n", "            ", "tmp_qpos", "=", "[", "expert_dict", "[", "x", "]", "[", "'qpos'", "]", ".", "astype", "(", "'float64'", ")", "for", "x", "in", "self", ".", "expert_list", "]", "\n", "tmp_qvel", "=", "[", "expert_dict", "[", "x", "]", "[", "'qvel'", "]", ".", "astype", "(", "'float64'", ")", "for", "x", "in", "self", ".", "expert_list", "]", "\n", "self", ".", "cnn_feat", "=", "[", "np", ".", "concatenate", "(", "[", "item1", ",", "item2", "]", ",", "axis", "=", "1", ")", "for", "item1", ",", "item2", "in", "zip", "(", "tmp_qpos", ",", "tmp_qvel", ")", "]", "\n", "", "elif", "cnn_feat_key", "==", "'masked_qposvel'", ":", "\n", "            ", "tmp_qpos", "=", "[", "expert_dict", "[", "x", "]", "[", "'qpos'", "]", ".", "astype", "(", "'float64'", ")", "for", "x", "in", "self", ".", "expert_list", "]", "\n", "tmp_qvel", "=", "[", "expert_dict", "[", "x", "]", "[", "'qvel'", "]", ".", "astype", "(", "'float64'", ")", "for", "x", "in", "self", ".", "expert_list", "]", "\n", "self", ".", "cnn_feat", "=", "[", "np", ".", "concatenate", "(", "[", "item1", ",", "item2", "]", ",", "axis", "=", "1", ")", "for", "item1", ",", "item2", "in", "zip", "(", "tmp_qpos", ",", "tmp_qvel", ")", "]", "\n", "self", ".", "cnn_feat", "=", "[", "mask_features", "(", "item", ",", "self", ".", "cfg", ".", "masked_freq", ")", "for", "item", "in", "self", ".", "cnn_feat", "]", "# in train", "\n", "# self.cnn_feat = [mask_features_withshuffle(item, self.cfg.masked_freq) for item in self.cnn_feat]  # in test", "\n", "", "else", ":", "\n", "            ", "self", ".", "cnn_feat", "=", "[", "expert_dict", "[", "x", "]", "[", "cnn_feat_key", "]", ".", "reshape", "(", "expert_dict", "[", "x", "]", "[", "cnn_feat_key", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "astype", "(", "'float64'", ")", "for", "x", "in", "self", ".", "expert_list", "]", "# \u4ece\u8fd9\u91cc\u5f00\u59cb, cnn feat\u5c31\u662fqpos/2dpose\u4e86.", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_model_params": [[89, 93], ["hasattr"], "methods", ["None"], ["", "", "def", "set_model_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "action_type", "==", "'torque'", "and", "hasattr", "(", "self", ".", "cfg", ",", "'j_stiff'", ")", ":", "\n", "            ", "self", ".", "model", ".", "jnt_stiffness", "[", "1", ":", "]", "=", "self", ".", "cfg", ".", "j_stiff", "\n", "self", ".", "model", ".", "dof_damping", "[", "6", ":", "]", "=", "self", ".", "cfg", ".", "j_damp", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_spaces": [[94, 114], ["gym.spaces.Box", "gym.spaces.Box", "humanoid_v4.HumanoidEnv.get_obs", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_obs"], ["", "", "def", "set_spaces", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u4e0d\u540c\u7684\u5730\u65b9, ego pose\u8fd9\u91cc\u7684action space\u4e0a\u4e0b\u9650\u662fbound\u76f4\u63a5\u62ff\u7684, \u5168\u662f0, rfc\u7684\u662f+-1,\n        \u53ef\u80fd\u548cmodel\u7684xml\u6709\u5173\u7cfb.\n        \"\"\"", "\n", "# action_space", "\n", "# bounds = self.model.actuator_ctrlrange.copy()", "\n", "# self.action_space = spaces.Box(low=bounds[:, 0], high=bounds[:, 1], dtype=np.float32)", "\n", "cfg", "=", "self", ".", "cfg", "\n", "self", ".", "ndof", "=", "self", ".", "model", ".", "actuator_ctrlrange", ".", "shape", "[", "0", "]", "\n", "self", ".", "vf_dim", "=", "6", "if", "cfg", ".", "residual_force", "else", "0", "\n", "self", ".", "meta_dim", "=", "15", "*", "2", "if", "cfg", ".", "meta_control", "else", "0", "\n", "self", ".", "action_dim", "=", "self", ".", "ndof", "+", "self", ".", "vf_dim", "+", "self", ".", "meta_dim", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "np", ".", "ones", "(", "self", ".", "action_dim", ")", ",", "high", "=", "np", ".", "ones", "(", "self", ".", "action_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# observation_space", "\n", "self", ".", "obs_dim", "=", "self", ".", "get_obs", "(", ")", ".", "size", "\n", "high", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "self", ".", "obs_dim", ")", "\n", "low", "=", "-", "high", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", ",", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_obs": [[115, 118], ["humanoid_v4.HumanoidEnv.get_full_obs"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_full_obs"], ["", "def", "get_obs", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "get_full_obs", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_full_obs": [[119, 154], ["data.qpos.copy", "data.qvel.copy", "transform_vec().ravel", "numpy.concatenate.append", "numpy.concatenate", "numpy.concatenate.append", "de_heading", "numpy.concatenate.append", "hasattr", "min", "numpy.concatenate.append", "numpy.concatenate.append", "transform_vec", "numpy.array", "numpy.concatenate.append", "numpy.array", "humanoid_v4.HumanoidEnv.get_poseseq_target", "print", "numpy.ones", "get_heading"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.de_heading", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.transform_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_poseseq_target", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading"], ["", "def", "get_full_obs", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", "\n", "qpos", "=", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "qvel", "=", "data", ".", "qvel", ".", "copy", "(", ")", "\n", "# transform velocity", "\n", "qvel", "[", ":", "3", "]", "=", "transform_vec", "(", "qvel", "[", ":", "3", "]", ",", "qpos", "[", "3", ":", "7", "]", ",", "self", ".", "cfg", ".", "obs_coord", ")", ".", "ravel", "(", ")", "\n", "obs", "=", "[", "]", "\n", "# pos", "\n", "if", "self", ".", "cfg", ".", "obs_heading", ":", "\n", "            ", "obs", ".", "append", "(", "np", ".", "array", "(", "[", "get_heading", "(", "qpos", "[", "3", ":", "7", "]", ")", "]", ")", ")", "\n", "", "if", "self", ".", "cfg", ".", "root_deheading", ":", "\n", "            ", "qpos", "[", "3", ":", "7", "]", "=", "de_heading", "(", "qpos", "[", "3", ":", "7", "]", ")", "\n", "", "obs", ".", "append", "(", "qpos", "[", "2", ":", "]", ")", "# qpos\u7684\u524d\u4e24\u4e2a, \u4e5f\u5c31\u662f root\u7684xy\u4e0d\u8ba1\u5165\u8003\u8651.", "\n", "# vel", "\n", "if", "self", ".", "cfg", ".", "obs_vel", "==", "'root'", ":", "\n", "            ", "obs", ".", "append", "(", "qvel", "[", ":", "6", "]", ")", "\n", "", "elif", "self", ".", "cfg", ".", "obs_vel", "==", "'full'", ":", "\n", "            ", "obs", ".", "append", "(", "qvel", ")", "\n", "# phase  # \u597d\u50cf\u6ca1\u6709\u7528\u5230.", "\n", "", "if", "hasattr", "(", "self", ".", "cfg", ",", "'obs_phase'", ")", "and", "self", ".", "cfg", ".", "obs_phase", ":", "\n", "            ", "phase", "=", "min", "(", "self", ".", "cur_t", "/", "self", ".", "cfg", ".", "env_episode_len", ",", "1.0", ")", "\n", "obs", ".", "append", "(", "np", ".", "array", "(", "[", "phase", "]", ")", ")", "\n", "# \u53ef\u80fd\u9700\u8981\u628aexpert\u7684next frame qpos\u76f4\u63a5\u585e\u5230\u8fd9\u91cc\u6765, \u52a0\u5feb\u8bad\u7ec3\u901f\u5ea6, \u4ee5\u53ca\u4e22\u6389vs\u7f51\u7edc.", "\n", "", "seq_len", "=", "3", "\n", "if", "self", ".", "cfg", ".", "masked_freq", "is", "None", ":", "# when use mask training, remove the target pose.", "\n", "            ", "if", "self", ".", "expert", "is", "not", "None", ":", "\n", "                ", "qposseq_target", "=", "self", ".", "get_poseseq_target", "(", "seq_len", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'use qpos as qpos target for init obs space, only once!'", ")", "\n", "qposseq_target", "=", "np", ".", "ones", "(", "qpos", ".", "shape", "[", "0", "]", "*", "seq_len", ")", "# None for init obs space", "\n", "\n", "", "obs", ".", "append", "(", "qposseq_target", ")", "\n", "# all in", "\n", "", "obs", "=", "np", ".", "concatenate", "(", "obs", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_ee_pos": [[155, 169], ["data.qpos[].copy", "numpy.concatenate", "ee_pos.append", "transform_vec"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.transform_vec"], ["", "def", "get_ee_pos", "(", "self", ",", "transform", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", "\n", "ee_name", "=", "[", "'LeftFoot'", ",", "'RightFoot'", ",", "'LeftHand'", ",", "'RightHand'", ",", "'Head'", "]", "\n", "ee_pos", "=", "[", "]", "\n", "root_pos", "=", "data", ".", "qpos", "[", ":", "3", "]", "\n", "root_q", "=", "data", ".", "qpos", "[", "3", ":", "7", "]", ".", "copy", "(", ")", "\n", "for", "name", "in", "ee_name", ":", "\n", "            ", "bone_id", "=", "self", ".", "model", ".", "_body_name2id", "[", "name", "]", "\n", "bone_vec", "=", "self", ".", "data", ".", "body_xpos", "[", "bone_id", "]", "\n", "if", "transform", "is", "not", "None", ":", "\n", "                ", "bone_vec", "=", "bone_vec", "-", "root_pos", "\n", "bone_vec", "=", "transform_vec", "(", "bone_vec", ",", "root_q", ",", "transform", ")", "\n", "", "ee_pos", ".", "append", "(", "bone_vec", ")", "\n", "", "return", "np", ".", "concatenate", "(", "ee_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_skeleton_pos": [[170, 202], ["data.qpos[].copy", "numpy.concatenate", "skt_pos.append", "transform_vec"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.transform_vec"], ["", "def", "get_skeleton_pos", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "'''\n        get skeleton - kehong\n        \u8fd9\u91cc\u5b9a\u4e49\u768416\u4e2a\u70b9\uff0c\u53ef\u80fd\u548cH36M/3DHP\u4e0d\u592a\u7edf\u4e00\uff0c\u53ef\u4ee5\u8003\u8651\u53bb\u6389\u8eaf\u5e72\u90e8\u5206\u3002\n        _body_name2id: {'world': 0, 'Hips': 1, 'Spine': 2, 'Spine1': 3, 'Spine2': 4, 'Spine3': 5, 'Neck': 6, 'Head': 7,\n        'RightShoulder': 8, 'RightArm': 9, 'RightForeArm': 10, 'RightHand': 11,\n        'LeftShoulder': 12, 'LeftArm': 13, 'LeftForeArm': 14, 'LeftHand': 15,\n        'RightUpLeg': 16, 'RightLeg': 17, 'RightFoot': 18,\n        'LeftUpLeg': 19, 'LeftLeg': 20, 'LeftFoot': 21}\n        '''", "\n", "data", "=", "self", ".", "data", "\n", "skt_name", "=", "[", "\n", "'Hips'", ",", "\n", "'RightUpLeg'", ",", "'RightLeg'", ",", "'RightFoot'", ",", "\n", "'LeftUpLeg'", ",", "'LeftLeg'", ",", "'LeftFoot'", ",", "\n", "# 'Spine2', 'Spine3', 'Neck', 'Head',", "\n", "'Spine2'", ",", "'Neck'", ",", "'Head'", ",", "\n", "'LeftArm'", ",", "'LeftForeArm'", ",", "'LeftHand'", ",", "\n", "'RightArm'", ",", "'RightForeArm'", ",", "'RightHand'", ",", "\n", "]", "\n", "# skt_name = self.body_qposaddr  # \u5c1d\u8bd5\u6253\u5370\u6240\u6709body_qposaddr\u7684\u70b9\u51fa\u6765.", "\n", "skt_pos", "=", "[", "]", "\n", "root_pos", "=", "data", ".", "qpos", "[", ":", "3", "]", "\n", "root_q", "=", "data", ".", "qpos", "[", "3", ":", "7", "]", ".", "copy", "(", ")", "\n", "for", "name", "in", "skt_name", ":", "\n", "            ", "bone_id", "=", "self", ".", "model", ".", "_body_name2id", "[", "name", "]", "\n", "bone_vec", "=", "self", ".", "data", ".", "body_xpos", "[", "bone_id", "]", "\n", "if", "transform", "is", "not", "None", ":", "\n", "                ", "bone_vec", "=", "bone_vec", "-", "root_pos", "\n", "bone_vec", "=", "transform_vec", "(", "bone_vec", ",", "root_q", ",", "transform", ")", "\n", "", "skt_pos", ".", "append", "(", "bone_vec", ")", "\n", "", "return", "np", ".", "concatenate", "(", "skt_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_body_quat": [[203, 216], ["humanoid_v4.HumanoidEnv.data.qpos.copy", "numpy.concatenate", "numpy.zeros", "utils.transformation.quaternion_from_euler", "numpy.concatenate.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "get_body_quat", "(", "self", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "body_quat", "=", "[", "qpos", "[", "3", ":", "7", "]", "]", "\n", "for", "body", "in", "self", ".", "model", ".", "body_names", "[", "1", ":", "]", ":", "\n", "            ", "if", "body", "==", "'Hips'", ":", "\n", "                ", "continue", "\n", "", "start", ",", "end", "=", "self", ".", "body_qposaddr", "[", "body", "]", "\n", "euler", "=", "np", ".", "zeros", "(", "3", ")", "\n", "euler", "[", ":", "end", "-", "start", "]", "=", "qpos", "[", "start", ":", "end", "]", "# \u8fd9\u91cc\u662f\u5bf9\u80f3\u818a\u548c\u817f\u5173\u8282\u7684\u7279\u4f8b, \u8ba9z\u4fdd\u7559.", "\n", "quat", "=", "quaternion_from_euler", "(", "euler", "[", "0", "]", ",", "euler", "[", "1", "]", ",", "euler", "[", "2", "]", ",", "axes", "=", "'rxyz'", ")", "# kh:\u548cpose2bvh\u5bf9\u5e94.", "\n", "body_quat", ".", "append", "(", "quat", ")", "\n", "", "body_quat", "=", "np", ".", "concatenate", "(", "body_quat", ")", "\n", "return", "body_quat", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_com": [[217, 219], ["humanoid_v4.HumanoidEnv.data.subtree_com[].copy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "get_com", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "subtree_com", "[", "0", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.compute_desired_accel": [[221, 237], ["numpy.zeros", "mujoco_py.functions.mj_fullM", "numpy.zeros.resize", "humanoid_v4.HumanoidEnv.data.qfrc_bias.copy", "numpy.diag", "numpy.diag", "scipy.linalg.cho_solve", "scipy.linalg.cho_solve.squeeze", "scipy.linalg.cho_factor", "numpy.diag.dot", "numpy.diag.dot"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "compute_desired_accel", "(", "self", ",", "qpos_err", ",", "qvel_err", ",", "k_p", ",", "k_d", ")", ":", "\n", "        ", "\"\"\"\n        ego\u7684kp kd\u5199\u5728\u8fd9\u4e2a\u65b9\u7a0b\u91cc\u9762, \u662f\u4e00\u4e32list, rfc\u7684\u4ece\u4e0a\u4e00\u7ea7\u62ff,\n        rfc\u7684cho_factor\u591a\u4e86\u4e00\u4e9bflag, \u9700\u8981\u67e5\u770b\u4e00\u4e0b.\n        \"\"\"", "\n", "dt", "=", "self", ".", "model", ".", "opt", ".", "timestep", "\n", "nv", "=", "self", ".", "model", ".", "nv", "\n", "M", "=", "np", ".", "zeros", "(", "nv", "*", "nv", ")", "\n", "mjf", ".", "mj_fullM", "(", "self", ".", "model", ",", "M", ",", "self", ".", "data", ".", "qM", ")", "\n", "M", ".", "resize", "(", "self", ".", "model", ".", "nv", ",", "self", ".", "model", ".", "nv", ")", "\n", "C", "=", "self", ".", "data", ".", "qfrc_bias", ".", "copy", "(", ")", "\n", "K_p", "=", "np", ".", "diag", "(", "k_p", ")", "\n", "K_d", "=", "np", ".", "diag", "(", "k_d", ")", "\n", "q_accel", "=", "cho_solve", "(", "cho_factor", "(", "M", "+", "K_d", "*", "dt", ",", "overwrite_a", "=", "True", ",", "check_finite", "=", "False", ")", ",", "\n", "-", "C", "[", ":", ",", "None", "]", "-", "K_p", ".", "dot", "(", "qpos_err", "[", ":", ",", "None", "]", ")", "-", "K_d", ".", "dot", "(", "qvel_err", "[", ":", ",", "None", "]", ")", ",", "overwrite_b", "=", "True", ",", "check_finite", "=", "False", ")", "\n", "return", "q_accel", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.compute_torque": [[239, 275], ["humanoid_v4.HumanoidEnv.data.qpos.copy", "humanoid_v4.HumanoidEnv.data.qvel.copy", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "humanoid_v4.HumanoidEnv.compute_desired_accel", "humanoid_v4.HumanoidEnv.pdcontrolclip", "numpy.abs", "numpy.abs", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.compute_desired_accel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.pdcontrolclip"], ["", "def", "compute_torque", "(", "self", ",", "ctrl", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        ego\u7684\u76f4\u63a5\u662f\u5f53\u524dqpos - ctrl\u7684\u7ed3\u679c,\n        rfc\u7684\u662f\u628actrl\u5148scale, \u7136\u540e\u52a0\u4e00\u4e2aref qpos,\u4f5c\u4e3atarget pose, \u53bb\u548c\u5f53\u524dqpos\u4ee5\u53ca\u901f\u5ea6\u505a\u8bef\u5dee.\n        \u4ed6\u4eec\u90fd\u628aqvel\u5f53qvel_error\n        \u9700\u8981\u770b\u770b\u8fd9\u91cc\u7684\u539f\u7406\u662f\u5565.\n        rfc\u989d\u5916\u53c2\u6570: a_scale a_ref - \u8fd9\u4e24\u4e2a\u5728ego\u7684do_simulation\n        \"\"\"", "\n", "cfg", "=", "self", ".", "cfg", "\n", "dt", "=", "self", ".", "model", ".", "opt", ".", "timestep", "\n", "ctrl_joint", "=", "ctrl", "[", ":", "self", ".", "ndof", "]", "*", "cfg", ".", "a_scale", "\n", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "copy", "(", ")", "\n", "# base_pos = cfg.a_ref", "\n", "base_pos", "=", "self", ".", "qpos_ref", "[", "7", ":", "]", "*", "1.", "# simpoe pose \u8fd9\u91cc\u662f\u76f4\u63a5\u7528\u7684target qpos, \u4f46\u662f\u6211\u4eec\u7684target qpos\u566a\u97f3\u5927.", "\n", "# base_pos = qpos[7:] * 1.   # \u6362\u6210\u5f53\u524dqpos\u8bd5\u8bd5. \u4e0d\u80fd\u7528\u8fd9\u4e2a,pose\u574d\u584c\u4e86. \u53ef\u4ee5\u8003\u8651\u628atarget pose\u6362\u6210\u4e0a\u4e00\u4e2aqpos, \u4f46\u4e0d\u662f\u8fd9\u513f.", "\n", "target_pos", "=", "base_pos", "+", "ctrl_joint", "\n", "\n", "k_p", "=", "np", ".", "zeros", "(", "qvel", ".", "shape", "[", "0", "]", ")", "\n", "k_d", "=", "np", ".", "zeros", "(", "qvel", ".", "shape", "[", "0", "]", ")", "\n", "if", "cfg", ".", "meta_control", ":", "\n", "            ", "meta_control", "=", "ctrl", "[", "-", "self", ".", "meta_dim", ":", "]", "[", "i", "*", "2", ":", "(", "i", "+", "1", ")", "*", "2", "]", "\n", "k_p", "[", "6", ":", "]", "=", "cfg", ".", "jkp", "*", "np", ".", "abs", "(", "meta_control", "[", "0", "]", ")", "\n", "k_d", "[", "6", ":", "]", "=", "cfg", ".", "jkd", "*", "np", ".", "abs", "(", "meta_control", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "k_p", "[", "6", ":", "]", "=", "cfg", ".", "jkp", "\n", "k_d", "[", "6", ":", "]", "=", "cfg", ".", "jkd", "\n", "", "qpos_err", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "6", ")", ",", "qpos", "[", "7", ":", "]", "+", "qvel", "[", "6", ":", "]", "*", "dt", "-", "target_pos", ")", ")", "# qpos 59, \u4f46\u662factuator\u53ea\u7ba1\u540e52\u4e2a.", "\n", "qvel_err", "=", "qvel", "\n", "# qpos_err, qvel_err = self.pdcontrolrefinement(qpos_err, qvel_err)  # add kh, 0925", "\n", "if", "cfg", ".", "arm_pdclip", ":", "\n", "            ", "qpos_err", "=", "self", ".", "pdcontrolclip", "(", "qpos_err", ")", "# add kh, 0927", "\n", "", "q_accel", "=", "self", ".", "compute_desired_accel", "(", "qpos_err", ",", "qvel_err", ",", "k_p", ",", "k_d", ")", "\n", "qvel_err", "+=", "q_accel", "*", "dt", "\n", "torque", "=", "-", "cfg", ".", "jkp", "*", "qpos_err", "[", "6", ":", "]", "-", "cfg", ".", "jkd", "*", "qvel_err", "[", "6", ":", "]", "\n", "return", "torque", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.pdcontrolrefinement": [[277, 291], ["numpy.where", "numpy.where", "numpy.where", "numpy.where"], "methods", ["None"], ["", "def", "pdcontrolrefinement", "(", "self", ",", "qpos_err_in", ",", "qvel_err_in", ")", ":", "\n", "        ", "\"\"\"\n        0925: \u7531\u4e8eDL\u751f\u6210\u7684pose\u53ef\u80fd\u51fa\u73b0\u5947\u602a\u7684\u624b\u81c2\u89d2\u5ea6, \u5bfc\u81f4arm\u7684180\u65cb\u8f6c,\u8fd9\u4e2a\u65f6\u5019\u4f1a\u6709\u8f6c\u5927\u5708\u548c\u5c0f\u5708\u7684\u533a\u522b,\n        \u8fd9\u91cc\u5bf9\u5927\u5708\u505a\u4e00\u4e0b\u9650\u5236.\n        \u7ed3\u679c: NAN\u4e86. \u53ef\u80fd\u4e0d\u884c.\n        :return:\n        \"\"\"", "\n", "assert", "False", ",", "'not working'", "\n", "pi", "=", "np", ".", "pi", "\n", "qpos_err_out", "=", "np", ".", "where", "(", "qpos_err_in", "<", "-", "pi", ",", "qpos_err_in", "+", "2", "*", "pi", ",", "qpos_err_in", ")", "\n", "qpos_err_out", "=", "np", ".", "where", "(", "qpos_err_in", ">", "+", "pi", ",", "qpos_err_out", "-", "2", "*", "pi", ",", "qpos_err_out", ")", "\n", "qvel_err_out", "=", "np", ".", "where", "(", "qpos_err_in", "<", "-", "pi", ",", "qvel_err_in", "*", "-", "1", ",", "qvel_err_in", ")", "\n", "qvel_err_out", "=", "np", ".", "where", "(", "qpos_err_in", ">", "+", "pi", ",", "qvel_err_out", "*", "-", "1", ",", "qvel_err_out", ")", "\n", "return", "qpos_err_out", ",", "qvel_err_out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.pdcontrolclip": [[292, 317], ["numpy.deg2rad", "numpy.deg2rad", "numpy.abs", "numpy.clip", "numpy.abs", "numpy.clip"], "methods", ["None"], ["", "def", "pdcontrolclip", "(", "self", ",", "qpos_err_in", ")", ":", "\n", "        ", "\"\"\"\n        0925: \u7531\u4e8eDL\u751f\u6210\u7684pose\u53ef\u80fd\u51fa\u73b0\u5947\u602a\u7684\u624b\u81c2\u89d2\u5ea6, \u5bfc\u81f4arm\u7684180\u65cb\u8f6c,\n        \u8fd9\u91cc\u5bf9qpos\n        \u6ce8\u610f: \u8fd9\u91ccqpos_error\u662f58\u7ef4\u7684, qpos\u662f59\u7ef4\u7684. \u6240\u4ee5 28~30\u53d8\u6210 27~29\n        :return:\n        \"\"\"", "\n", "# pi = np.pi", "\n", "qpos_err_out", "=", "qpos_err_in", "*", "1.", "\n", "arm_x_limit", "=", "np", ".", "deg2rad", "(", "100", ")", "\n", "# arm_y_limit = np.deg2rad(50)", "\n", "# arm_z_limit = np.deg2rad(100)", "\n", "arm_xyz_limit", "=", "np", ".", "deg2rad", "(", "0.5", ")", "# default 2", "\n", "# qpos_err_out[27] = np.clip(qpos_err_out[27], -arm_x_limit, arm_x_limit)", "\n", "# qpos_err_out[28] = np.clip(qpos_err_out[28], -arm_y_limit, arm_y_limit)", "\n", "# qpos_err_out[29] = np.clip(qpos_err_out[29], -arm_z_limit, arm_z_limit)", "\n", "# qpos_err_out[37] = np.clip(qpos_err_out[37], -arm_x_limit, arm_x_limit)", "\n", "# qpos_err_out[38] = np.clip(qpos_err_out[38], -arm_y_limit, arm_y_limit)", "\n", "# qpos_err_out[39] = np.clip(qpos_err_out[39], -arm_z_limit, arm_z_limit)", "\n", "if", "np", ".", "abs", "(", "qpos_err_out", "[", "27", "]", ")", ">", "arm_x_limit", ":", "\n", "            ", "qpos_err_out", "[", "27", ":", "30", "]", "=", "np", ".", "clip", "(", "qpos_err_out", "[", "27", ":", "30", "]", ",", "-", "arm_xyz_limit", ",", "arm_xyz_limit", ")", "\n", "", "if", "np", ".", "abs", "(", "qpos_err_out", "[", "37", "]", ")", ">", "arm_x_limit", ":", "\n", "            ", "qpos_err_out", "[", "37", ":", "40", "]", "=", "np", ".", "clip", "(", "qpos_err_out", "[", "37", ":", "40", "]", ",", "-", "arm_xyz_limit", ",", "arm_xyz_limit", ")", "\n", "\n", "", "return", "qpos_err_out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.rfc_implicit": [[321, 326], ["get_heading_q", "quat_mul_vec"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading_q", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec"], ["def", "rfc_implicit", "(", "self", ",", "vf", ")", ":", "\n", "        ", "vf", "*=", "self", ".", "cfg", ".", "residual_force_scale", "\n", "hq", "=", "get_heading_q", "(", "self", ".", "data", ".", "qpos", "[", "3", ":", "7", "]", ")", "\n", "vf", "[", ":", "3", "]", "=", "quat_mul_vec", "(", "hq", ",", "vf", "[", ":", "3", "]", ")", "\n", "self", ".", "data", ".", "qfrc_applied", "[", ":", "vf", ".", "shape", "[", "0", "]", "]", "=", "vf", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.do_simulation": [[328, 349], ["time.time", "range", "numpy.clip", "humanoid_v4.HumanoidEnv.sim.step", "humanoid_v4.HumanoidEnv.compute_torque", "ctrl[].copy", "humanoid_v4.HumanoidEnv.rfc_implicit", "time.time"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.compute_torque", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.rfc_implicit"], ["", "def", "do_simulation", "(", "self", ",", "action", ",", "n_frames", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "cfg", "=", "self", ".", "cfg", "\n", "for", "i", "in", "range", "(", "n_frames", ")", ":", "\n", "            ", "ctrl", "=", "action", "*", "1.", "\n", "if", "cfg", ".", "action_type", "==", "'position'", ":", "\n", "                ", "torque", "=", "self", ".", "compute_torque", "(", "ctrl", ",", "i", ")", "\n", "", "elif", "cfg", ".", "action_type", "==", "'torque'", ":", "\n", "                ", "torque", "=", "ctrl", "[", ":", "self", ".", "ndof", "]", "*", "cfg", ".", "a_scale", "\n", "", "torque", "=", "np", ".", "clip", "(", "torque", ",", "-", "cfg", ".", "torque_lim", ",", "cfg", ".", "torque_lim", ")", "\n", "self", ".", "data", ".", "ctrl", "[", ":", "]", "=", "torque", "\n", "\n", "\"\"\" Residual Force Control (RFC) \"\"\"", "\n", "if", "cfg", ".", "residual_force", ":", "\n", "                ", "vf", "=", "ctrl", "[", "self", ".", "ndof", ":", "self", ".", "ndof", "+", "self", ".", "vf_dim", "]", ".", "copy", "(", ")", "\n", "self", ".", "rfc_implicit", "(", "vf", ")", "\n", "\n", "", "self", ".", "sim", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "sim_time", "=", "time", ".", "time", "(", ")", "-", "t0", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.step": [[350, 381], ["humanoid_v4.HumanoidEnv.data.qpos.copy", "humanoid_v4.HumanoidEnv.data.qvel.copy", "humanoid_v4.HumanoidEnv.bquat.copy", "humanoid_v4.HumanoidEnv.skt_pos.copy", "humanoid_v4.HumanoidEnv.get_pose_target", "humanoid_v4.HumanoidEnv.do_simulation", "humanoid_v4.HumanoidEnv.get_body_quat", "humanoid_v4.HumanoidEnv.get_skeleton_pos", "humanoid_v4.HumanoidEnv.sync_expert", "humanoid_v4.HumanoidEnv.get_body_com", "humanoid_v4.HumanoidEnv.get_expert_index", "humanoid_v4.HumanoidEnv.get_expert_attr", "humanoid_v4.HumanoidEnv.get_obs", "numpy.min", "humanoid_v4.HumanoidEnv.get_expert_attr", "humanoid_v4.HumanoidEnv.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_pose_target", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.do_simulation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_body_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_skeleton_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.sync_expert", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_obs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "# record prev state", "\n", "self", ".", "prev_qpos", "=", "self", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "self", ".", "prev_qvel", "=", "self", ".", "data", ".", "qvel", ".", "copy", "(", ")", "\n", "self", ".", "prev_bquat", "=", "self", ".", "bquat", ".", "copy", "(", ")", "# \u8ba1\u7b97body\u89d2\u901f\u5ea6\u7528\u7684.", "\n", "self", ".", "prev_skt_pos", "=", "self", ".", "skt_pos", ".", "copy", "(", ")", "# \u8ba1\u7b97body joint local\u901f\u5ea6\u7528\u7684.", "\n", "# self.qpos_ref = self.prev_qpos  # qpos_target\u592a\u98d8\u4e86... \u4f46\u662f\u7528simulation current qpos\u4f1a\u76f4\u63a5\u7f29\u4e00\u56e2. \u6362previous qpos?", "\n", "self", ".", "qpos_ref", "=", "self", ".", "get_pose_target", "(", ")", "# qpos_target\u592a\u98d8\u4e86... \u4f46\u662f\u7528current qpos\u4f1a\u76f4\u63a5\u7f29\u4e00\u56e2.", "\n", "# do simulation", "\n", "self", ".", "do_simulation", "(", "a", ",", "self", ".", "frame_skip", ")", "\n", "self", ".", "cur_t", "+=", "1", "\n", "self", ".", "bquat", "=", "self", ".", "get_body_quat", "(", ")", "\n", "self", ".", "skt_pos", "=", "self", ".", "get_skeleton_pos", "(", "self", ".", "cfg", ".", "obs_coord", ")", "\n", "self", ".", "sync_expert", "(", ")", "\n", "# get obs", "\n", "head_pos", "=", "self", ".", "get_body_com", "(", "'Head'", ")", "\n", "reward", "=", "1.0", "\n", "if", "self", ".", "fix_head_lb", "is", "not", "None", ":", "\n", "            ", "fail", "=", "head_pos", "[", "2", "]", "<", "self", ".", "fix_head_lb", "\n", "", "else", ":", "\n", "# fail = self.expert is not None and head_pos[2] < self.expert['head_height_lb'] - 0.1", "\n", "# fail = self.expert is not None and head_pos[2] < self.get_expert_attr('head_pos', ind)[2] - 0.2", "\n", "            ", "ind", "=", "self", ".", "get_expert_index", "(", "self", ".", "cur_t", ")", "\n", "e_skt_wpos", "=", "self", ".", "get_expert_attr", "(", "'skt_wpos'", ",", "ind", ")", "# \u5168\u8eab\u7684joint world \u5750\u6807\u7cfb.", "\n", "e_head_height", "=", "self", ".", "get_expert_attr", "(", "'head_pos'", ",", "ind", ")", "[", "2", "]", "-", "np", ".", "min", "(", "e_skt_wpos", ".", "reshape", "(", "16", ",", "3", ")", "[", ":", ",", "2", "]", ")", "\n", "fail", "=", "self", ".", "expert", "is", "not", "None", "and", "head_pos", "[", "2", "]", "<", "e_head_height", "-", "0.2", "\n", "\n", "", "end", "=", "self", ".", "cur_t", ">=", "(", "cfg", ".", "env_episode_len", "if", "self", ".", "fix_len", "is", "None", "else", "self", ".", "fix_len", ")", "\n", "done", "=", "fail", "or", "end", "\n", "return", "self", ".", "get_obs", "(", ")", ",", "reward", ",", "done", ",", "{", "'fail'", ":", "fail", ",", "'end'", ":", "end", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.reset_model": [[382, 434], ["humanoid_v4.HumanoidEnv.get_obs", "humanoid_v4.HumanoidEnv.set_expert", "humanoid_v4.HumanoidEnv.fix_start_state[].copy", "humanoid_v4.HumanoidEnv.fix_start_state[].copy", "humanoid_v4.HumanoidEnv.np_random.normal", "humanoid_v4.HumanoidEnv.set_state", "humanoid_v4.HumanoidEnv.get_body_quat", "humanoid_v4.HumanoidEnv.sync_expert", "humanoid_v4.HumanoidEnv.np_random.randint", "hasattr", "numpy.random.randint", "humanoid_v4.HumanoidEnv.set_state", "len", "humanoid_v4.HumanoidEnv.np_random.randint"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_obs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_expert", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_body_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.sync_expert", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "reset_model", "(", "self", ")", ":", "#", "\n", "        ", "if", "self", ".", "fix_start_state", "is", "not", "None", ":", "\n", "# init_pose = self.fix_start_state[:self.model.nq]", "\n", "# init_vel = self.fix_start_state[self.model.nq:]", "\n", "# self.set_state(init_pose, init_vel)", "\n", "            ", "cfg", "=", "self", ".", "cfg", "\n", "fr_margin", "=", "cfg", ".", "fr_margin", "\n", "# sample expert", "\n", "expert_ind", "=", "self", ".", "np_random", ".", "randint", "(", "len", "(", "self", ".", "expert_list", ")", ")", "if", "self", ".", "fix_expert_ind", "is", "None", "else", "self", ".", "fix_expert_ind", "\n", "self", ".", "set_expert", "(", "expert_ind", ")", "\n", "# sample fix frame \u8fd9\u4e2a\u5728\u6211\u7684\u5b9e\u9a8c\u8bbe\u5b9a\u8fd8\u6bd4\u8f83\u91cd\u8981, \u56e0\u4e3a\u4f1a\u51fa\u73b0\u70b8\u4e86\u7684qpos, \u4ecevideopose\u90a3\u8fb9\u8fc7\u6765\u7684.", "\n", "if", "self", ".", "fix_start_ind", "is", "None", ":", "\n", "                ", "ind", "=", "0", "if", "cfg", ".", "env_start_first", "else", "self", ".", "np_random", ".", "randint", "(", "fr_margin", ",", "self", ".", "expert", "[", "'len'", "]", "-", "cfg", ".", "env_episode_len", "-", "fr_margin", ")", "\n", "", "else", ":", "\n", "                ", "ind", "=", "self", ".", "fix_start_ind", "\n", "", "self", ".", "start_ind", "=", "ind", "\n", "if", "hasattr", "(", "cfg", ",", "'random_cur_t'", ")", "and", "cfg", ".", "random_cur_t", ":", "\n", "                ", "self", ".", "cur_t", "=", "np", ".", "random", ".", "randint", "(", "cfg", ".", "env_episode_len", ")", "\n", "ind", "+=", "self", ".", "cur_t", "\n", "", "init_pose", "=", "self", ".", "fix_start_state", "[", ":", "self", ".", "model", ".", "nq", "]", ".", "copy", "(", ")", "\n", "init_vel", "=", "self", ".", "fix_start_state", "[", "self", ".", "model", ".", "nq", ":", "]", ".", "copy", "(", ")", "\n", "init_pose", "[", "7", ":", "]", "+=", "self", ".", "np_random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "cfg", ".", "env_init_noise", ",", "size", "=", "self", ".", "model", ".", "nq", "-", "7", ")", "\n", "self", ".", "set_state", "(", "init_pose", ",", "init_vel", ")", "# \u8bad\u7ec3\u7684\u65f6\u5019\u76f4\u63a5\u8bbe\u5b9a\u5f53\u524dexpert\u7684\u72b6\u6001\u52a0\u566a\u97f3", "\n", "self", ".", "bquat", "=", "self", ".", "get_body_quat", "(", ")", "\n", "self", ".", "sync_expert", "(", ")", "\n", "", "elif", "self", ".", "expert_list", "is", "not", "None", ":", "\n", "            ", "assert", "False", ",", "'this part may cause NAN due to the poor quality of predicted qpos'", "\n", "# cfg = self.cfg", "\n", "# fr_margin = cfg.fr_margin", "\n", "# # sample expert", "\n", "# expert_ind = self.np_random.randint(len(self.expert_list)) if self.fix_expert_ind is None else self.fix_expert_ind", "\n", "# self.set_expert(expert_ind)", "\n", "# # sample start frame \u8fd9\u4e2a\u5728\u6211\u7684\u5b9e\u9a8c\u8bbe\u5b9a\u8fd8\u6bd4\u8f83\u91cd\u8981", "\n", "# if self.fix_start_ind is None:", "\n", "#     ind = 0 if cfg.env_start_first else self.np_random.randint(fr_margin, self.expert['len'] - cfg.env_episode_len - fr_margin)", "\n", "# else:", "\n", "#     ind = self.fix_start_ind", "\n", "# self.start_ind = ind", "\n", "# if hasattr(cfg, 'random_cur_t') and cfg.random_cur_t:", "\n", "#     self.cur_t = np.random.randint(cfg.env_episode_len)", "\n", "#     ind += self.cur_t", "\n", "# init_pose = self.expert['qpos'][ind, :].copy()", "\n", "# init_vel = self.expert['qvel'][ind, :].copy()", "\n", "# init_pose[7:] += self.np_random.normal(loc=0.0, scale=cfg.env_init_noise, size=self.model.nq - 7)", "\n", "# self.set_state(init_pose, init_vel)  # \u8bad\u7ec3\u7684\u65f6\u5019\u76f4\u63a5\u8bbe\u5b9a\u5f53\u524dexpert\u7684\u72b6\u6001\u52a0\u566a\u97f3", "\n", "# self.bquat = self.get_body_quat()", "\n", "# self.sync_expert()", "\n", "", "else", ":", "\n", "            ", "init_pose", "=", "self", ".", "data", ".", "qpos", "\n", "init_pose", "[", "2", "]", "+=", "1.0", "\n", "self", ".", "set_state", "(", "init_pose", ",", "self", ".", "data", ".", "qvel", ")", "\n", "", "return", "self", ".", "get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.viewer_setup": [[435, 445], ["humanoid_v4.HumanoidEnv.set_cam_first.add"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add"], ["", "def", "viewer_setup", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "1", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", ":", "2", "]", "=", "self", ".", "data", ".", "qpos", "[", "0", ":", "2", "]", "\n", "if", "mode", "not", "in", "self", ".", "set_cam_first", ":", "\n", "            ", "self", ".", "viewer", ".", "video_fps", "=", "33", "\n", "self", ".", "viewer", ".", "frame_skip", "=", "self", ".", "frame_skip", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "self", ".", "model", ".", "stat", ".", "extent", "*", "1.2", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "20", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "45", "\n", "self", ".", "set_cam_first", ".", "add", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_fix_sampling": [[446, 452], ["None"], "methods", ["None"], ["", "", "def", "set_fix_sampling", "(", "self", ",", "expert_ind", "=", "None", ",", "start_ind", "=", "None", ",", "len", "=", "None", ",", "start_state", "=", "None", ",", "cnn_feat", "=", "None", ")", ":", "\n", "        ", "self", ".", "fix_expert_ind", "=", "expert_ind", "\n", "self", ".", "fix_start_ind", "=", "start_ind", "\n", "self", ".", "fix_len", "=", "len", "\n", "self", ".", "fix_start_state", "=", "start_state", "if", "self", ".", "fix_start_state", "is", "None", "else", "self", ".", "fix_start_state", "\n", "self", ".", "fix_cnn_feat", "=", "cnn_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_fix_head_lb": [[453, 455], ["None"], "methods", ["None"], ["", "def", "set_fix_head_lb", "(", "self", ",", "fix_head_lb", "=", "None", ")", ":", "\n", "        ", "self", ".", "fix_head_lb", "=", "fix_head_lb", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.sync_expert": [[456, 465], ["humanoid_v4.HumanoidEnv.get_expert_index", "humanoid_v4.HumanoidEnv.get_expert_attr().copy", "quaternion_multiply", "numpy.concatenate", "get_heading_q", "quaternion_inverse", "humanoid_v4.HumanoidEnv.get_expert_attr", "get_heading_q", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading_q", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_inverse", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_heading_q"], ["", "def", "sync_expert", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "expert", "is", "not", "None", "and", "self", ".", "cur_t", "%", "self", ".", "cfg", ".", "sync_exp_interval", "==", "0", ":", "\n", "            ", "expert", "=", "self", ".", "expert", "\n", "ind", "=", "self", ".", "get_expert_index", "(", "self", ".", "cur_t", ")", "\n", "e_qpos", "=", "self", ".", "get_expert_attr", "(", "'qpos'", ",", "ind", ")", ".", "copy", "(", ")", "\n", "expert", "[", "'rel_heading'", "]", "=", "quaternion_multiply", "(", "get_heading_q", "(", "self", ".", "data", ".", "qpos", "[", "3", ":", "7", "]", ")", ",", "\n", "quaternion_inverse", "(", "get_heading_q", "(", "e_qpos", "[", "3", ":", "7", "]", ")", ")", ")", "\n", "expert", "[", "'start_pos'", "]", "=", "e_qpos", "[", ":", "3", "]", "\n", "expert", "[", "'sim_pos'", "]", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ".", "qpos", "[", ":", "2", "]", ",", "np", ".", "array", "(", "[", "e_qpos", "[", "2", "]", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.set_expert": [[466, 470], ["None"], "methods", ["None"], ["", "", "def", "set_expert", "(", "self", ",", "expert_ind", ")", ":", "\n", "        ", "self", ".", "expert_ind", "=", "expert_ind", "\n", "self", ".", "expert_id", "=", "self", ".", "expert_list", "[", "expert_ind", "]", "# take id", "\n", "self", ".", "expert", "=", "self", ".", "expert_arr", "[", "expert_ind", "]", "# take array dict", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index": [[471, 473], ["None"], "methods", ["None"], ["", "def", "get_expert_index", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "start_ind", "+", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr": [[474, 476], ["None"], "methods", ["None"], ["", "def", "get_expert_attr", "(", "self", ",", "attr", ",", "ind", ")", ":", "\n", "        ", "return", "self", ".", "expert", "[", "attr", "]", "[", "ind", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_pose_dist": [[477, 483], ["humanoid_v4.HumanoidEnv.get_expert_index", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index"], ["", "def", "get_pose_dist", "(", "self", ")", ":", "\n", "        ", "ind", "=", "self", ".", "get_expert_index", "(", "self", ".", "cur_t", ")", "\n", "qpos_e", "=", "self", ".", "expert", "[", "'qpos'", "]", "[", "ind", ",", ":", "]", "\n", "qpos_g", "=", "self", ".", "data", ".", "qpos", "\n", "diff", "=", "qpos_e", "-", "qpos_g", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "diff", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_pose_diff": [[484, 490], ["humanoid_v4.HumanoidEnv.get_expert_index", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index"], ["", "def", "get_pose_diff", "(", "self", ")", ":", "\n", "        ", "ind", "=", "self", ".", "get_expert_index", "(", "self", ".", "cur_t", ")", "\n", "qpos_e", "=", "self", ".", "expert", "[", "'qpos'", "]", "[", "ind", ",", ":", "]", "\n", "qpos_g", "=", "self", ".", "data", ".", "qpos", "\n", "diff", "=", "qpos_e", "-", "qpos_g", "\n", "return", "np", ".", "abs", "(", "diff", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_pose_target": [[491, 502], ["humanoid_v4.HumanoidEnv.get_expert_index"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index"], ["", "def", "get_pose_target", "(", "self", ")", ":", "\n", "        ", "ind", "=", "self", ".", "get_expert_index", "(", "self", ".", "cur_t", ")", "\n", "qpos_target", "=", "self", ".", "expert", "[", "'qpos'", "]", "[", "ind", "+", "1", ",", ":", "]", "*", "1.", "\n", "if", "self", ".", "cfg", ".", "arm_reset", ":", "\n", "# remove noise hand part", "\n", "# qpos_target[25:45] = self.cfg.a_ref[18:38] * 1.  # \u8fd9\u4e2a\u4f1a\u5bfc\u81f4\u624b\u90e8\u52a8\u4f5c\u5e45\u5ea6\u4e0d\u591f\u5927. \u4f46\u662f\u4e0d\u8981\u7684\u8bddshoulder\u4f1a\u8f6c\u98ce\u8f66.", "\n", "            ", "qpos_target", "[", "28", ":", "31", "]", "=", "self", ".", "cfg", ".", "a_ref", "[", "21", ":", "24", "]", "*", "1.", "# \u56e0\u4e3aarm x\u8ba1\u7b97\u7684\u6570\u503c\u9644\u52a0\u8df3\u52a8180 error\u7684, \u6240\u4ee5\u8fd9\u91cc\u5f520", "\n", "qpos_target", "[", "38", ":", "41", "]", "=", "self", ".", "cfg", ".", "a_ref", "[", "31", ":", "34", "]", "*", "1.", "# \u56e0\u4e3aarm x\u8ba1\u7b97\u7684\u6570\u503c\u9644\u52a0\u8df3\u52a8180 error\u7684, \u6240\u4ee5\u8fd9\u91cc\u5f520", "\n", "", "if", "self", ".", "cfg", ".", "ref_reset", ":", "\n", "            ", "qpos_target", "[", "7", ":", "]", "=", "self", ".", "cfg", ".", "a_ref", "[", ":", "]", "*", "1", "\n", "", "return", "qpos_target", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_poseseq_target": [[503, 508], ["humanoid_v4.HumanoidEnv.get_expert_index", "qpos_target.reshape.reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "get_poseseq_target", "(", "self", ",", "r", "=", "9", ")", ":", "\n", "        ", "ind", "=", "self", ".", "get_expert_index", "(", "self", ".", "cur_t", ")", "\n", "qpos_target", "=", "self", ".", "expert", "[", "'qpos'", "]", "[", "ind", "-", "r", "+", "1", ":", "ind", "+", "1", ",", ":", "]", "*", "1.", "\n", "qpos_target", "=", "qpos_target", ".", "reshape", "(", "-", "1", ")", "\n", "return", "qpos_target", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_episode_cnn_feat": [[509, 514], ["None"], "methods", ["None"], ["", "def", "get_episode_cnn_feat", "(", "self", ")", ":", "# \u66f4\u65b0\u4f46\u524d\u7684cnn feature\u7f13\u5b58\uff0c \u9001\u5230RNN\u91cc\u9762\u3002", "\n", "        ", "fm", "=", "self", ".", "cfg", ".", "fr_margin", "\n", "num_fr", "=", "self", ".", "cfg", ".", "env_episode_len", "if", "self", ".", "fix_len", "is", "None", "else", "self", ".", "fix_len", "\n", "return", "self", ".", "cnn_feat", "[", "self", ".", "expert_ind", "]", "[", "self", ".", "start_ind", "-", "fm", ":", "self", ".", "start_ind", "+", "num_fr", "+", "fm", ",", ":", "]", "if", "self", ".", "fix_cnn_feat", "is", "None", "else", "self", ".", "fix_cnn_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_episode_export_qpos_qvel": [[515, 522], ["numpy.concatenate().copy", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "get_episode_export_qpos_qvel", "(", "self", ")", ":", "# \u7528\u5728eval\u7684reset_env_state\u3002\u4f46\u662f\u7531\u4e8e\u53ef\u80fdNAN, \u6682\u65f6\u653e\u7f6e.", "\n", "        ", "fm", "=", "self", ".", "cfg", ".", "fr_margin", "\n", "num_fr", "=", "self", ".", "cfg", ".", "env_episode_len", "if", "self", ".", "fix_len", "is", "None", "else", "self", ".", "fix_len", "\n", "# load qpos", "\n", "qpos", "=", "self", ".", "expert_arr", "[", "self", ".", "expert_ind", "]", "[", "'qpos'", "]", "[", "self", ".", "start_ind", ":", "self", ".", "start_ind", "+", "num_fr", ",", "2", ":", "]", "# no x y infor", "\n", "qvel", "=", "self", ".", "expert_arr", "[", "self", ".", "expert_ind", "]", "[", "'qvel'", "]", "[", "self", ".", "start_ind", ":", "self", ".", "start_ind", "+", "num_fr", ",", ":", "]", "\n", "return", "np", ".", "concatenate", "(", "[", "qpos", ",", "qvel", "]", ",", "axis", "=", "-", "1", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_expert.get_expert": [[14, 89], ["range", "expert[].insert", "expert[].insert", "expert[].insert", "expert[].insert", "range", "expert[].insert", "range", "expert[].insert", "[].min", "[].min", "env.sim.forward", "de_heading", "env.get_obs", "env.get_ee_pos", "env.get_ee_pos", "env.get_skeleton_pos", "env.get_skeleton_pos", "env.get_body_quat", "env.get_com", "env.get_body_com().copy", "expert[].append", "expert[].append", "expert[].append", "expert[].append", "expert[].append", "expert[].append", "expert[].append", "expert[].append", "expert[].append", "[].copy", "[].copy", "[].copy", "[].copy", "[].copy", "[].copy", "np.vstack", "get_qvel_fd", "qvel[].copy", "transform_vec", "qvel[].copy", "expert[].append", "expert[].append", "expert[].append", "expert[].append", "get_angvel_fd", "expert[].append", "get_sktvel_fd", "expert[].append", "env.get_body_com", "qvel[].copy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.de_heading", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_obs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_ee_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_ee_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_skeleton_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_skeleton_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_body_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_com", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_qvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.transform_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_angvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_sktvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["def", "get_expert", "(", "expert_qpos", ",", "lb", ",", "ub", ")", ":", "\n", "    ", "\"\"\"\n    get qpos from intake file,\n    assign qpos to simulator\n    use env.sim.forward to get all information\n    store as a expert\n    \"\"\"", "\n", "expert", "=", "{", "'qpos'", ":", "expert_qpos", "}", "\n", "feat_keys", "=", "{", "'qvel'", ",", "'rlinv'", ",", "'rlinv_local'", ",", "'rangv'", ",", "'rq_rmh'", ",", "\n", "'com'", ",", "'head_pos'", ",", "'obs'", ",", "'ee_pos'", ",", "'ee_wpos'", ",", "'skt_pos'", ",", "'skt_wpos'", ",", "'sktvel'", ",", "'bquat'", ",", "'bangvel'", "}", "# kh:\u52a03D joint", "\n", "for", "key", "in", "feat_keys", ":", "\n", "        ", "expert", "[", "key", "]", "=", "[", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "expert_qpos", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "qpos", "=", "expert_qpos", "[", "i", "]", "\n", "# remove noisy hand data", "\n", "# qpos[slice(*env.body_qposaddr['LeftHand'])] = 0.0", "\n", "# qpos[slice(*env.body_qposaddr['RightHand'])] = 0.0", "\n", "env", ".", "data", ".", "qpos", "[", ":", "]", "=", "qpos", "\n", "env", ".", "sim", ".", "forward", "(", ")", "\n", "rq_rmh", "=", "de_heading", "(", "qpos", "[", "3", ":", "7", "]", ")", "\n", "obs", "=", "env", ".", "get_obs", "(", ")", "\n", "ee_pos", "=", "env", ".", "get_ee_pos", "(", "env", ".", "cfg", ".", "obs_coord", ")", "\n", "ee_wpos", "=", "env", ".", "get_ee_pos", "(", "None", ")", "\n", "skt_pos", "=", "env", ".", "get_skeleton_pos", "(", "env", ".", "cfg", ".", "obs_coord", ")", "\n", "skt_wpos", "=", "env", ".", "get_skeleton_pos", "(", ")", "\n", "bquat", "=", "env", ".", "get_body_quat", "(", ")", "\n", "com", "=", "env", ".", "get_com", "(", ")", "\n", "head_pos", "=", "env", ".", "get_body_com", "(", "'Head'", ")", ".", "copy", "(", ")", "\n", "if", "i", ">", "0", ":", "\n", "            ", "prev_qpos", "=", "expert_qpos", "[", "i", "-", "1", "]", "\n", "qvel", "=", "get_qvel_fd", "(", "prev_qpos", ",", "qpos", ",", "env", ".", "dt", ")", "\n", "rlinv", "=", "qvel", "[", ":", "3", "]", ".", "copy", "(", ")", "\n", "rlinv_local", "=", "transform_vec", "(", "qvel", "[", ":", "3", "]", ".", "copy", "(", ")", ",", "qpos", "[", "3", ":", "7", "]", ",", "env", ".", "cfg", ".", "obs_coord", ")", "\n", "rangv", "=", "qvel", "[", "3", ":", "6", "]", ".", "copy", "(", ")", "# # angular velocity is in root coord", "\n", "expert", "[", "'qvel'", "]", ".", "append", "(", "qvel", ")", "\n", "expert", "[", "'rlinv'", "]", ".", "append", "(", "rlinv", ")", "\n", "expert", "[", "'rlinv_local'", "]", ".", "append", "(", "rlinv_local", ")", "\n", "expert", "[", "'rangv'", "]", ".", "append", "(", "rangv", ")", "\n", "", "expert", "[", "'obs'", "]", ".", "append", "(", "obs", ")", "\n", "expert", "[", "'ee_pos'", "]", ".", "append", "(", "ee_pos", ")", "\n", "expert", "[", "'ee_wpos'", "]", ".", "append", "(", "ee_wpos", ")", "\n", "expert", "[", "'skt_pos'", "]", ".", "append", "(", "skt_pos", ")", "\n", "expert", "[", "'skt_wpos'", "]", ".", "append", "(", "skt_wpos", ")", "\n", "expert", "[", "'bquat'", "]", ".", "append", "(", "bquat", ")", "\n", "expert", "[", "'com'", "]", ".", "append", "(", "com", ")", "\n", "expert", "[", "'head_pos'", "]", ".", "append", "(", "head_pos", ")", "\n", "expert", "[", "'rq_rmh'", "]", ".", "append", "(", "rq_rmh", ")", "\n", "", "expert", "[", "'qvel'", "]", ".", "insert", "(", "0", ",", "expert", "[", "'qvel'", "]", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "expert", "[", "'rlinv'", "]", ".", "insert", "(", "0", ",", "expert", "[", "'rlinv'", "]", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "expert", "[", "'rlinv_local'", "]", ".", "insert", "(", "0", ",", "expert", "[", "'rlinv_local'", "]", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "expert", "[", "'rangv'", "]", ".", "insert", "(", "0", ",", "expert", "[", "'rangv'", "]", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "\n", "# get expert body quaternions:", "\n", "for", "i", "in", "range", "(", "expert_qpos", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "i", ">", "0", ":", "\n", "            ", "bangvel", "=", "get_angvel_fd", "(", "expert", "[", "'bquat'", "]", "[", "i", "-", "1", "]", ",", "expert", "[", "'bquat'", "]", "[", "i", "]", ",", "env", ".", "dt", ")", "\n", "expert", "[", "'bangvel'", "]", ".", "append", "(", "bangvel", ")", "\n", "", "", "expert", "[", "'bangvel'", "]", ".", "insert", "(", "0", ",", "expert", "[", "'bangvel'", "]", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "\n", "# get expert body skt_pos:", "\n", "for", "i", "in", "range", "(", "expert_qpos", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "i", ">", "0", ":", "\n", "            ", "sktvel", "=", "get_sktvel_fd", "(", "expert", "[", "'skt_pos'", "]", "[", "i", "-", "1", "]", ",", "expert", "[", "'skt_pos'", "]", "[", "i", "]", ",", "env", ".", "dt", ")", "\n", "expert", "[", "'sktvel'", "]", ".", "append", "(", "sktvel", ")", "\n", "", "", "expert", "[", "'sktvel'", "]", ".", "insert", "(", "0", ",", "expert", "[", "'sktvel'", "]", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "\n", "expert", "[", "'qpos'", "]", "=", "expert", "[", "'qpos'", "]", "[", "lb", ":", "ub", ",", ":", "]", "\n", "for", "key", "in", "feat_keys", ":", "\n", "        ", "expert", "[", "key", "]", "=", "np", ".", "vstack", "(", "expert", "[", "key", "]", "[", "lb", ":", "ub", "]", ")", "\n", "", "expert", "[", "'len'", "]", "=", "expert", "[", "'qpos'", "]", ".", "shape", "[", "0", "]", "\n", "expert", "[", "'height_lb'", "]", "=", "expert", "[", "'qpos'", "]", "[", ":", ",", "2", "]", ".", "min", "(", ")", "\n", "expert", "[", "'head_height_lb'", "]", "=", "expert", "[", "'head_pos'", "]", "[", ":", ",", "2", "]", ".", "min", "(", ")", "\n", "\n", "return", "expert", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_expert.traj2expert": [[90, 103], ["time.time", "gen_expert.get_expert", "q.put", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_expert.get_expert"], ["", "def", "traj2expert", "(", "q", ",", "dataset", ",", "take_id", ")", ":", "\n", "    ", "time0_get_expert", "=", "time", ".", "time", "(", ")", "# time start load.", "\n", "\n", "take", "=", "dataset", ".", "takes", "[", "take_id", "]", "\n", "_", ",", "lb", ",", "ub", "=", "dataset", ".", "msync", "[", "take", "]", "\n", "expert_qpos", "=", "dataset", ".", "orig_trajs", "[", "take_id", "]", "\n", "expert", "=", "get_expert", "(", "expert_qpos", ",", "lb", ",", "ub", ")", "\n", "\n", "q", ".", "put", "(", "(", "take", ",", "expert", ")", ")", "#queue", "\n", "\n", "time_cost_get_expert", "=", "time", ".", "time", "(", ")", "-", "time0_get_expert", "# time spend.", "\n", "print", "(", "'-> get_expert spends {:.2f}s on ID{}:{} with {:0>6d} frames'", ".", "format", "(", "time_cost_get_expert", ",", "\n", "take_id", ",", "take", ",", "expert_qpos", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.convert_clip.get_qpos": [[39, 58], ["np.zeros", "body_qposaddr.items", "pose[].copy", "pose[].copy", "utils.transformation.quaternion_from_euler"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_from_euler"], ["def", "get_qpos", "(", "pose", ",", "bone_addr", ")", ":", "\n", "    ", "\"\"\"\n\n    :param pose:   - ind1 = [a, b]  ind2 = [a', b']\n    :param bone_addr: bvh address\n    :return:\n    \"\"\"", "\n", "qpos", "=", "np", ".", "zeros", "(", "model", ".", "nq", ")", "\n", "for", "bone_name", ",", "ind2", "in", "body_qposaddr", ".", "items", "(", ")", ":", "\n", "        ", "ind1", "=", "bone_addr", "[", "bone_name", "]", "\n", "if", "ind1", "[", "0", "]", "==", "0", ":", "\n", "            ", "trans", "=", "pose", "[", "ind1", "[", "0", "]", ":", "ind1", "[", "0", "]", "+", "3", "]", ".", "copy", "(", ")", "\n", "angles", "=", "pose", "[", "ind1", "[", "0", "]", "+", "3", ":", "ind1", "[", "1", "]", "]", ".", "copy", "(", ")", "\n", "quat", "=", "quaternion_from_euler", "(", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ",", "'rxyz'", ")", "\n", "qpos", "[", "ind2", "[", "0", "]", ":", "ind2", "[", "0", "]", "+", "3", "]", "=", "trans", "\n", "qpos", "[", "ind2", "[", "0", "]", "+", "3", ":", "ind2", "[", "1", "]", "]", "=", "quat", "\n", "", "else", ":", "\n", "            ", "qpos", "[", "ind2", "[", "0", "]", ":", "ind2", "[", "1", "]", "]", "=", "pose", "[", "ind1", "[", "0", "]", ":", "ind1", "[", "1", "]", "]", "\n", "", "", "return", "qpos", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.convert_clip.get_poses": [[60, 77], ["time.time", "mocap.pose.load_bvh_file", "mocap.pose.interpolated_traj", "range", "np.vstack", "print", "convert_clip.get_qpos", "np.vstack.append", "time.time"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.load_bvh_file", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.interpolated_traj", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.convert_clip_multiprocess.get_qpos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "get_poses", "(", "bvh_file", ")", ":", "\n", "    ", "time0_get_poses", "=", "time", ".", "time", "(", ")", "# time start load.", "\n", "\n", "poses", ",", "bone_addr", "=", "load_bvh_file", "(", "bvh_file", ",", "skeleton", ")", "\n", "poses_samp", "=", "interpolated_traj", "(", "poses", ",", "args", ".", "dt", ",", "mocap_fr", "=", "args", ".", "mocap_fr", ")", "\n", "qpos_traj", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "poses_samp", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cur_pose", "=", "poses_samp", "[", "i", ",", ":", "]", "\n", "cur_qpos", "=", "get_qpos", "(", "cur_pose", ",", "bone_addr", ")", "\n", "qpos_traj", ".", "append", "(", "cur_qpos", ")", "\n", "", "qpos_traj", "=", "np", ".", "vstack", "(", "qpos_traj", ")", "\n", "qpos_traj", "[", ":", ",", "2", "]", "+=", "args", ".", "offset_z", "\n", "\n", "time_cost_get_poses", "=", "time", ".", "time", "(", ")", "-", "time0_get_poses", "# time spend.", "\n", "print", "(", "'-----> get_poses spends {:.2f}s on {} with {:0>6d} frames'", ".", "format", "(", "time_cost_get_poses", ",", "\n", "bvh_file", ",", "poses", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "qpos_traj", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.Segment.__init__": [[160, 171], ["kw.get", "kw.get", "numpy.sqrt", "numpy.zeros", "gen_random_traj.Segment.calc_intermediate_points", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.Segment.calc_intermediate_points"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "p2", ",", "angle1", ",", "angle2", ",", "**", "kw", ")", ":", "\n", "        ", "self", ".", "p1", "=", "p1", ";", "self", ".", "p2", "=", "p2", "\n", "self", ".", "angle1", "=", "angle1", ";", "self", ".", "angle2", "=", "angle2", "\n", "self", ".", "numpoints", "=", "kw", ".", "get", "(", "\"numpoints\"", ",", "100", ")", "\n", "r", "=", "kw", ".", "get", "(", "\"r\"", ",", "0.3", ")", "\n", "d", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "self", ".", "p2", "-", "self", ".", "p1", ")", "**", "2", ")", ")", "\n", "self", ".", "r", "=", "r", "*", "d", "\n", "self", ".", "p", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ")", "\n", "self", ".", "p", "[", "0", ",", ":", "]", "=", "self", ".", "p1", "[", ":", "]", "\n", "self", ".", "p", "[", "3", ",", ":", "]", "=", "self", ".", "p2", "[", ":", "]", "\n", "self", ".", "calc_intermediate_points", "(", "self", ".", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.Segment.calc_intermediate_points": [[172, 178], ["gen_random_traj.bezier", "numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.bezier"], ["", "def", "calc_intermediate_points", "(", "self", ",", "r", ")", ":", "\n", "        ", "self", ".", "p", "[", "1", ",", ":", "]", "=", "self", ".", "p1", "+", "np", ".", "array", "(", "[", "self", ".", "r", "*", "np", ".", "cos", "(", "self", ".", "angle1", ")", ",", "\n", "self", ".", "r", "*", "np", ".", "sin", "(", "self", ".", "angle1", ")", "]", ")", "\n", "self", ".", "p", "[", "2", ",", ":", "]", "=", "self", ".", "p2", "+", "np", ".", "array", "(", "[", "self", ".", "r", "*", "np", ".", "cos", "(", "self", ".", "angle2", "+", "np", ".", "pi", ")", ",", "\n", "self", ".", "r", "*", "np", ".", "sin", "(", "self", ".", "angle2", "+", "np", ".", "pi", ")", "]", ")", "\n", "self", ".", "curve", "=", "bezier", "(", "self", ".", "p", ",", "self", ".", "numpoints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.mkd": [[8, 16], ["os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.dcm2quat": [[21, 67], ["numpy.zeros", "numpy.trace", "numpy.sqrt", "numpy.diag", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "", "def", "dcm2quat", "(", "dcm", ")", ":", "\n", "    ", "q", "=", "np", ".", "zeros", "(", "[", "4", "]", ")", "\n", "tr", "=", "np", ".", "trace", "(", "dcm", ")", "\n", "\n", "if", "tr", ">", "0", ":", "\n", "        ", "sqtrp1", "=", "np", ".", "sqrt", "(", "tr", "+", "1.0", ")", "\n", "q", "[", "0", "]", "=", "0.5", "*", "sqtrp1", "\n", "q", "[", "1", "]", "=", "(", "dcm", "[", "1", ",", "2", "]", "-", "dcm", "[", "2", ",", "1", "]", ")", "/", "(", "2.0", "*", "sqtrp1", ")", "\n", "q", "[", "2", "]", "=", "(", "dcm", "[", "2", ",", "0", "]", "-", "dcm", "[", "0", ",", "2", "]", ")", "/", "(", "2.0", "*", "sqtrp1", ")", "\n", "q", "[", "3", "]", "=", "(", "dcm", "[", "0", ",", "1", "]", "-", "dcm", "[", "1", ",", "0", "]", ")", "/", "(", "2.0", "*", "sqtrp1", ")", "\n", "", "else", ":", "\n", "        ", "d", "=", "np", ".", "diag", "(", "dcm", ")", "\n", "if", "d", "[", "1", "]", ">", "d", "[", "0", "]", "and", "d", "[", "1", "]", ">", "d", "[", "2", "]", ":", "\n", "            ", "sqdip1", "=", "np", ".", "sqrt", "(", "d", "[", "1", "]", "-", "d", "[", "0", "]", "-", "d", "[", "2", "]", "+", "1.0", ")", "\n", "q", "[", "2", "]", "=", "0.5", "*", "sqdip1", "\n", "\n", "if", "sqdip1", "!=", "0", ":", "\n", "                ", "sqdip1", "=", "0.5", "/", "sqdip1", "\n", "\n", "", "q", "[", "0", "]", "=", "(", "dcm", "[", "2", ",", "0", "]", "-", "dcm", "[", "0", ",", "2", "]", ")", "*", "sqdip1", "\n", "q", "[", "1", "]", "=", "(", "dcm", "[", "0", ",", "1", "]", "+", "dcm", "[", "1", ",", "0", "]", ")", "*", "sqdip1", "\n", "q", "[", "3", "]", "=", "(", "dcm", "[", "1", ",", "2", "]", "+", "dcm", "[", "2", ",", "1", "]", ")", "*", "sqdip1", "\n", "\n", "", "elif", "d", "[", "2", "]", ">", "d", "[", "0", "]", ":", "\n", "            ", "sqdip1", "=", "np", ".", "sqrt", "(", "d", "[", "2", "]", "-", "d", "[", "0", "]", "-", "d", "[", "1", "]", "+", "1.0", ")", "\n", "q", "[", "3", "]", "=", "0.5", "*", "sqdip1", "\n", "\n", "if", "sqdip1", "!=", "0", ":", "\n", "                ", "sqdip1", "=", "0.5", "/", "sqdip1", "\n", "\n", "", "q", "[", "0", "]", "=", "(", "dcm", "[", "0", ",", "1", "]", "-", "dcm", "[", "1", ",", "0", "]", ")", "*", "sqdip1", "\n", "q", "[", "1", "]", "=", "(", "dcm", "[", "2", ",", "0", "]", "+", "dcm", "[", "0", ",", "2", "]", ")", "*", "sqdip1", "\n", "q", "[", "2", "]", "=", "(", "dcm", "[", "1", ",", "2", "]", "+", "dcm", "[", "2", ",", "1", "]", ")", "*", "sqdip1", "\n", "\n", "", "else", ":", "\n", "            ", "sqdip1", "=", "np", ".", "sqrt", "(", "d", "[", "0", "]", "-", "d", "[", "1", "]", "-", "d", "[", "2", "]", "+", "1.0", ")", "\n", "q", "[", "1", "]", "=", "0.5", "*", "sqdip1", "\n", "\n", "if", "sqdip1", "!=", "0", ":", "\n", "                ", "sqdip1", "=", "0.5", "/", "sqdip1", "\n", "\n", "", "q", "[", "0", "]", "=", "(", "dcm", "[", "1", ",", "2", "]", "-", "dcm", "[", "2", ",", "1", "]", ")", "*", "sqdip1", "\n", "q", "[", "2", "]", "=", "(", "dcm", "[", "0", ",", "1", "]", "+", "dcm", "[", "1", ",", "0", "]", ")", "*", "sqdip1", "\n", "q", "[", "3", "]", "=", "(", "dcm", "[", "2", ",", "0", "]", "+", "dcm", "[", "0", ",", "2", "]", ")", "*", "sqdip1", "\n", "\n", "", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.quat_divide": [[69, 71], ["gen_random_traj.quat_mul", "gen_random_traj.quat_inverse"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_inverse"], ["", "def", "quat_divide", "(", "q", ",", "r", ")", ":", "\n", "    ", "return", "quat_mul", "(", "quat_inverse", "(", "r", ")", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.quat_mul": [[72, 84], ["numpy.reshape", "numpy.reshape", "numpy.matmul", "numpy.stack", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "quat_mul", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "original_shape", "=", "q0", ".", "shape", "\n", "q1", "=", "np", ".", "reshape", "(", "q1", ",", "[", "-", "1", ",", "4", ",", "1", "]", ")", "\n", "q0", "=", "np", ".", "reshape", "(", "q0", ",", "[", "-", "1", ",", "1", ",", "4", "]", ")", "\n", "terms", "=", "np", ".", "matmul", "(", "q1", ",", "q0", ")", "\n", "w", "=", "terms", "[", ":", ",", "0", ",", "0", "]", "-", "terms", "[", ":", ",", "1", ",", "1", "]", "-", "terms", "[", ":", ",", "2", ",", "2", "]", "-", "terms", "[", ":", ",", "3", ",", "3", "]", "\n", "x", "=", "terms", "[", ":", ",", "0", ",", "1", "]", "+", "terms", "[", ":", ",", "1", ",", "0", "]", "-", "terms", "[", ":", ",", "2", ",", "3", "]", "+", "terms", "[", ":", ",", "3", ",", "2", "]", "\n", "y", "=", "terms", "[", ":", ",", "0", ",", "2", "]", "+", "terms", "[", ":", ",", "1", ",", "3", "]", "+", "terms", "[", ":", ",", "2", ",", "0", "]", "-", "terms", "[", ":", ",", "3", ",", "1", "]", "\n", "z", "=", "terms", "[", ":", ",", "0", ",", "3", "]", "-", "terms", "[", ":", ",", "1", ",", "2", "]", "+", "terms", "[", ":", ",", "2", ",", "1", "]", "+", "terms", "[", ":", ",", "3", ",", "0", "]", "\n", "\n", "q_product", "=", "np", ".", "stack", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "reshape", "(", "q_product", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.quat_inverse": [[86, 95], ["numpy.reshape", "numpy.stack", "numpy.divide", "numpy.reshape", "gen_random_traj.quat_dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_dot"], ["", "def", "quat_inverse", "(", "q", ")", ":", "\n", "    ", "original_shape", "=", "q", ".", "shape", "\n", "q", "=", "np", ".", "reshape", "(", "q", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "q_conj", "=", "[", "q", "[", ":", ",", "0", "]", ",", "-", "q", "[", ":", ",", "1", "]", ",", "-", "q", "[", ":", ",", "2", "]", ",", "-", "q", "[", ":", ",", "3", "]", "]", "\n", "q_conj", "=", "np", ".", "stack", "(", "q_conj", ",", "axis", "=", "1", ")", "\n", "q_inv", "=", "np", ".", "divide", "(", "q_conj", ",", "quat_dot", "(", "q_conj", ",", "q_conj", ")", ")", "\n", "\n", "return", "np", ".", "reshape", "(", "q_inv", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.quat2euler": [[96, 124], ["list", "numpy.reshape", "numpy.reshape", "numpy.arcsin", "numpy.arctan2", "numpy.arctan2", "numpy.stack", "ValueError", "numpy.arcsin", "numpy.arctan2", "numpy.arctan2", "numpy.stack", "ValueError", "numpy.clip", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "quat2euler", "(", "q", ",", "order", "=", "'zxy'", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "original_shape", "=", "list", "(", "q", ".", "shape", ")", "\n", "original_shape", "[", "-", "1", "]", "=", "3", "\n", "q", "=", "np", ".", "reshape", "(", "q", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "q0", "=", "q", "[", ":", ",", "0", "]", "\n", "q1", "=", "q", "[", ":", ",", "1", "]", "\n", "q2", "=", "q", "[", ":", ",", "2", "]", "\n", "q3", "=", "q", "[", ":", ",", "3", "]", "\n", "\n", "if", "order", "==", "'zxy'", ":", "\n", "        ", "x", "=", "np", ".", "arcsin", "(", "np", ".", "clip", "(", "2", "*", "(", "q0", "*", "q1", "+", "q2", "*", "q3", ")", ",", "-", "1", "+", "eps", ",", "1", "-", "eps", ")", ")", "\n", "y", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q2", "-", "q1", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q2", "*", "q2", ")", ")", "\n", "z", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q3", "-", "q1", "*", "q2", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q3", "*", "q3", ")", ")", "\n", "euler", "=", "np", ".", "stack", "(", "[", "z", ",", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Not implemented'", ")", "\n", "\n", "# todo adding order xyz", "\n", "", "if", "order", "==", "'zxy'", ":", "\n", "        ", "x", "=", "np", ".", "arcsin", "(", "np", ".", "clip", "(", "2", "*", "(", "q0", "*", "q1", "+", "q2", "*", "q3", ")", ",", "-", "1", "+", "eps", ",", "1", "-", "eps", ")", ")", "\n", "y", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q2", "-", "q1", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q2", "*", "q2", ")", ")", "\n", "z", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q3", "-", "q1", "*", "q2", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q3", "*", "q3", ")", ")", "\n", "euler", "=", "np", ".", "stack", "(", "[", "z", ",", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Not implemented'", ")", "\n", "\n", "", "return", "np", ".", "reshape", "(", "euler", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.quat_dot": [[127, 139], ["numpy.reshape", "numpy.reshape", "numpy.expand_dims", "numpy.tile", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "quat_dot", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "original_shape", "=", "q0", ".", "shape", "\n", "q0", "=", "np", ".", "reshape", "(", "q0", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "q1", "=", "np", ".", "reshape", "(", "q1", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "w0", ",", "x0", ",", "y0", ",", "z0", "=", "q0", "[", ":", ",", "0", "]", ",", "q0", "[", ":", ",", "1", "]", ",", "q0", "[", ":", ",", "2", "]", ",", "q0", "[", ":", ",", "3", "]", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "q1", "[", ":", ",", "0", "]", ",", "q1", "[", ":", ",", "1", "]", ",", "q1", "[", ":", ",", "2", "]", ",", "q1", "[", ":", ",", "3", "]", "\n", "q_product", "=", "w0", "*", "w1", "+", "x1", "*", "x1", "+", "y0", "*", "y1", "+", "z0", "*", "z1", "\n", "q_product", "=", "np", ".", "expand_dims", "(", "q_product", ",", "axis", "=", "1", ")", "\n", "q_product", "=", "np", ".", "tile", "(", "q_product", ",", "[", "1", ",", "4", "]", ")", "\n", "\n", "return", "np", ".", "reshape", "(", "q_product", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.bezier": [[151, 158], ["len", "numpy.linspace", "numpy.zeros", "range", "numpy.outer", "bernstein"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "bezier", "(", "points", ",", "num", "=", "200", ")", ":", "\n", "    ", "N", "=", "len", "(", "points", ")", "\n", "t", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "num", ")", "\n", "curve", "=", "np", ".", "zeros", "(", "(", "num", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "curve", "+=", "np", ".", "outer", "(", "bernstein", "(", "N", "-", "1", ",", "i", ",", "t", ")", ",", "points", "[", "i", "]", ")", "\n", "", "return", "curve", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_curve": [[180, 187], ["range", "numpy.concatenate", "gen_random_traj.Segment", "segments.append", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "def", "get_curve", "(", "points", ",", "**", "kw", ")", ":", "\n", "    ", "segments", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", "-", "1", ")", ":", "\n", "        ", "seg", "=", "Segment", "(", "points", "[", "i", ",", ":", "2", "]", ",", "points", "[", "i", "+", "1", ",", ":", "2", "]", ",", "points", "[", "i", ",", "2", "]", ",", "points", "[", "i", "+", "1", ",", "2", "]", ",", "**", "kw", ")", "\n", "segments", ".", "append", "(", "seg", ")", "\n", "", "curve", "=", "np", ".", "concatenate", "(", "[", "s", ".", "curve", "for", "s", "in", "segments", "]", ")", "\n", "return", "segments", ",", "curve", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.ccw_sort": [[193, 195], ["None"], "function", ["None"], ["", "def", "ccw_sort", "(", "p", ")", ":", "\n", "    ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_bezier_curve": [[196, 218], ["gen_random_traj.ccw_sort", "numpy.append", "numpy.diff", "numpy.arctan2", "f", "numpy.roll", "numpy.append", "numpy.append", "gen_random_traj.get_curve", "numpy.atleast_2d", "numpy.arctan", "numpy.atleast_2d", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.ccw_sort", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_curve"], ["", "def", "get_bezier_curve", "(", "a", ",", "rad", "=", "0.2", ",", "edgy", "=", "0", ",", "**", "kw", ")", ":", "\n", "    ", "\"\"\" given an array of points *a*, create a curve through\n    those points.\n    *rad* is a number between 0 and 1 to steer the distance of\n          control points.\n    *edgy* is a parameter which controls how \"edgy\" the curve is,\n           edgy=0 is smoothest.\"\"\"", "\n", "p", "=", "np", ".", "arctan", "(", "edgy", ")", "/", "np", ".", "pi", "+", ".5", "\n", "a", "=", "ccw_sort", "(", "a", ")", "\n", "a", "=", "np", ".", "append", "(", "a", ",", "np", ".", "atleast_2d", "(", "a", "[", "0", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "d", "=", "np", ".", "diff", "(", "a", ",", "axis", "=", "0", ")", "\n", "ang", "=", "np", ".", "arctan2", "(", "d", "[", ":", ",", "1", "]", ",", "d", "[", ":", ",", "0", "]", ")", "\n", "f", "=", "lambda", "ang", ":", "(", "ang", ">=", "0", ")", "*", "ang", "+", "(", "ang", "<", "0", ")", "*", "(", "ang", "+", "2", "*", "np", ".", "pi", ")", "\n", "ang", "=", "f", "(", "ang", ")", "\n", "ang1", "=", "ang", "\n", "ang2", "=", "np", ".", "roll", "(", "ang", ",", "1", ")", "\n", "ang", "=", "p", "*", "ang1", "+", "(", "1", "-", "p", ")", "*", "ang2", "+", "(", "np", ".", "abs", "(", "ang2", "-", "ang1", ")", ">", "np", ".", "pi", ")", "*", "np", ".", "pi", "\n", "ang", "=", "np", ".", "append", "(", "ang", ",", "[", "ang", "[", "0", "]", "]", ")", "\n", "a", "=", "np", ".", "append", "(", "a", ",", "np", ".", "atleast_2d", "(", "ang", ")", ".", "T", ",", "axis", "=", "1", ")", "\n", "s", ",", "c", "=", "get_curve", "(", "a", ",", "r", "=", "rad", ",", "method", "=", "\"var\"", ",", "**", "kw", ")", "\n", "x", ",", "y", "=", "c", ".", "T", "\n", "return", "x", ",", "y", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_random_points": [[220, 230], ["numpy.random.rand", "numpy.sqrt", "numpy.all", "gen_random_traj.get_random_points", "numpy.sum", "numpy.diff", "gen_random_traj.ccw_sort"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_random_points", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.ccw_sort"], ["", "def", "get_random_points", "(", "n", "=", "5", ",", "scale", "=", "0.8", ",", "mindst", "=", "None", ",", "rec", "=", "0", ")", ":", "\n", "    ", "\"\"\" create n random points in the unit square, which are *mindst*\n    apart, then scale them.\"\"\"", "\n", "mindst", "=", "mindst", "or", ".7", "/", "n", "\n", "a", "=", "np", ".", "random", ".", "rand", "(", "n", ",", "2", ")", "\n", "d", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "diff", "(", "ccw_sort", "(", "a", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "**", "2", ")", "\n", "if", "np", ".", "all", "(", "d", ">=", "mindst", ")", "or", "rec", ">=", "200", ":", "\n", "        ", "return", "a", "*", "scale", "\n", "", "else", ":", "\n", "        ", "return", "get_random_points", "(", "n", "=", "n", ",", "scale", "=", "scale", ",", "mindst", "=", "mindst", ",", "rec", "=", "rec", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_random_traj": [[232, 246], ["gen_random_traj.get_random_points", "gen_random_traj.get_bezier_curve", "numpy.stack", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_random_points", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_bezier_curve"], ["", "", "def", "get_random_traj", "(", "n", "=", "4", ",", "scale", "=", "1", ",", "rad", "=", "0.3", ",", "edgy", "=", "0.05", ",", "numpoints", "=", "100", ",", "random_flip", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    rad=0.3, edgy=0.05;\n    rad=10, edgy=0.0\n    :param n: total point\n    :param scale: scale map\n    :param numpoints: num of point for each\n    :return:\n    \"\"\"", "\n", "a", "=", "get_random_points", "(", "n", ",", "scale", ")", "\n", "x", ",", "y", ",", "_", "=", "get_bezier_curve", "(", "a", ",", "rad", "=", "rad", ",", "edgy", "=", "edgy", ",", "numpoints", "=", "numpoints", ")", "\n", "if", "random_flip", "and", "np", ".", "random", ".", "randn", "(", ")", ">", "0", ":", "\n", "        ", "y", "=", "-", "y", "\n", "", "return", "np", ".", "stack", "(", "[", "x", ",", "y", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_straight_path": [[261, 265], ["numpy.linspace", "numpy.zeros_like", "numpy.stack"], "function", ["None"], ["", "def", "get_straight_path", "(", "scale", ")", ":", "\n", "    ", "x", "=", "np", ".", "linspace", "(", "0", ",", "scale", ",", "500", ")", "\n", "y", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "return", "np", ".", "stack", "(", "[", "x", ",", "y", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_rand_with_range": [[268, 270], ["numpy.random.rand"], "function", ["None"], ["", "def", "get_rand_with_range", "(", "size", ",", "lb", ",", "ub", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "rand", "(", "size", ")", "*", "(", "ub", "-", "lb", ")", "+", "lb", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_hip_z": [[272, 285], ["numpy.arange", "gen_random_traj.get_rand_with_range", "gen_random_traj.get_rand_with_range", "gen_random_traj.get_rand_with_range", "numpy.cos", "numpy.min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_rand_with_range", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_rand_with_range", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_rand_with_range"], ["", "def", "get_hip_z", "(", "trajxy", ")", ":", "\n", "    ", "\"\"\"add som cps.\"\"\"", "\n", "size", "=", "trajxy", ".", "shape", "[", "0", "]", "\n", "dist", "=", "np", ".", "arange", "(", "size", ")", "\n", "T", "=", "get_rand_with_range", "(", "1", ",", "25", ",", "50", ")", "\n", "H", "=", "get_rand_with_range", "(", "1", ",", "0.95", ",", "1.1", ")", "\n", "A", "=", "get_rand_with_range", "(", "1", ",", "0.05", ",", "0.08", ")", "\n", "\n", "# A 0.03 T 3/5, H 0.835", "\n", "hipz", "=", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "/", "T", "*", "dist", ")", "*", "A", "+", "H", "\n", "# hipz = hipz - np.min(hipz) - 0.15 + 1. + 0.1", "\n", "hipz", "=", "hipz", "-", "np", ".", "min", "(", "hipz", ")", "-", "0.15", "+", "1.", "+", "0.0", "\n", "return", "hipz", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_random_qpos": [[288, 393], ["print", "numpy.concatenate", "numpy.concatenate", "numpy.cross", "numpy.array", "print", "print", "range", "numpy.stack", "print", "numpy.random.randn", "numpy.zeros", "gen_random_traj.get_hip_z", "numpy.expand_dims", "numpy.concatenate", "matplotlib.plot", "matplotlib.plot", "matplotlib.show", "numpy.linalg.norm", "matplotlib.hist", "matplotlib.title", "matplotlib.show", "numpy.ones_like", "numpy.array", "numpy.asarray", "gen_random_traj.dcm2quat", "numpy.asarray", "gen_random_traj.dcm2quat", "gen_random_traj.quat_divide", "np.stack.append", "gen_random_traj.get_random_traj", "numpy.linalg.norm", "numpy.linalg.norm", "gen_random_traj.get_random_traj", "gen_random_traj.get_straight_path", "numpy.array", "numpy.array", "numpy.array", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_hip_z", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divide", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_random_traj", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_random_traj", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.gen_random_traj.get_straight_path"], ["def", "get_random_qpos", "(", "plot", "=", "True", ",", "scale", "=", "0.4", ",", "random_flip", "=", "True", ",", "curve_type", "=", "'curve'", ")", ":", "\n", "    ", "if", "curve_type", "==", "'curve'", ":", "\n", "        ", "trajxy", "=", "get_random_traj", "(", "n", "=", "5", ",", "scale", "=", "scale", ",", "rad", "=", "0.3", ",", "edgy", "=", "0.05", ",", "numpoints", "=", "400", ",", "random_flip", "=", "random_flip", ")", "[", ":", "600", "]", "# 500 +  \u9ed8\u8ba4\u5c31\u7528500\u7684.", "\n", "", "elif", "curve_type", "==", "'circle'", ":", "\n", "        ", "trajxy", "=", "get_random_traj", "(", "n", "=", "6", ",", "scale", "=", "scale", ",", "rad", "=", "0.5", ",", "edgy", "=", "0.0", ",", "numpoints", "=", "100", ",", "random_flip", "=", "True", ")", "[", "\n", ":", "600", "]", "\n", "", "elif", "curve_type", "==", "'straight'", ":", "\n", "        ", "trajxy", "=", "get_straight_path", "(", "scale", "=", "scale", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'unkonw curve_type: {}'", ".", "format", "(", "curve_type", ")", "\n", "", "print", "(", "'trajxy.shape: '", ",", "trajxy", ".", "shape", ")", "\n", "\n", "if", "plot", ":", "\n", "# plt.plot(trajxy[:,0],  trajxy[:,1], '-', c='g', linewidth=0.5, markersize=0.1)", "\n", "# plt.show()", "\n", "        ", "plt", ".", "plot", "(", "trajxy", "[", ":", "500", ",", "0", "]", ",", "trajxy", "[", ":", "500", ",", "1", "]", ",", "'.'", ",", "c", "=", "'b'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "0.5", ")", "\n", "plt", ".", "plot", "(", "trajxy", "[", ":", "100", ",", "0", "]", ",", "trajxy", "[", ":", "100", ",", "1", "]", ",", "'x'", ",", "c", "=", "'r'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "0.5", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "vtraj_root", "=", "trajxy", "[", ":", "-", "1", "]", "-", "trajxy", "[", "1", ":", "]", "\n", "\n", "vm", "=", "np", ".", "linalg", ".", "norm", "(", "vtraj_root", ",", "axis", "=", "-", "1", ")", "\n", "_", "=", "plt", ".", "hist", "(", "vm", ",", "bins", "=", "'auto'", ")", "# arguments are passed to np.histogram", "\n", "plt", ".", "title", "(", "\"Histogram \"", "+", "'scale {}'", ".", "format", "(", "str", "(", "scale", ")", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "\"\"\"\n    add hip height\n    \"\"\"", "\n", "hh", "=", "np", ".", "ones_like", "(", "trajxy", ")", "*", "0.85", "\n", "trajxyz", "=", "np", ".", "concatenate", "(", "[", "trajxy", ",", "hh", "[", ":", ",", ":", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\"vel\"", "\n", "velxyz", "=", "trajxyz", "[", "1", ":", "]", "-", "trajxyz", "[", ":", "-", "1", "]", "\n", "velxyz", "=", "np", ".", "concatenate", "(", "[", "velxyz", ",", "velxyz", "[", "-", "1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "hip_dir", "=", "np", ".", "cross", "(", "velxyz", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ")", "\n", "\n", "# if plot:", "\n", "#     # hip_dir", "\n", "#     print(velxyz[0])", "\n", "#     print(hip_dir[0])", "\n", "#", "\n", "#     plt.scatter(hip_dir[0, 0], hip_dir[0, 1])", "\n", "#     plt.scatter(velxyz[0, 0], velxyz[0, 1])", "\n", "#     plt.scatter(0, 0)", "\n", "#     plt.show()", "\n", "\n", "\n", "\"\"\"\n    add hip orientation\n    \"\"\"", "\n", "\n", "x_dir", "=", "-", "hip_dir", "/", "(", "np", ".", "linalg", ".", "norm", "(", "hip_dir", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "1e-12", ")", "\n", "y_dir", "=", "-", "velxyz", "/", "(", "np", ".", "linalg", ".", "norm", "(", "velxyz", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "1e-12", ")", "\n", "z_dir", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "# hip_dir", "\n", "print", "(", "'x_dir[0] '", ",", "x_dir", "[", "0", "]", ")", "\n", "print", "(", "'y_dir[0]'", ",", "y_dir", "[", "0", "]", ")", "\n", "\n", "# if plot:", "\n", "#     plt.scatter(x_dir[0, 0], x_dir[0, 1])", "\n", "#     plt.scatter(y_dir[0, 0], y_dir[0, 1])", "\n", "#     plt.scatter(0, 0)", "\n", "#     plt.show()", "\n", "\n", "order", "=", "'zxy'", "\n", "\n", "hip_euler", "=", "[", "]", "\n", "hip_local_quat", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x_dir", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "dcm_hip", "=", "np", ".", "asarray", "(", "[", "x_dir", "[", "i", "]", ",", "y_dir", "[", "i", "]", ",", "z_dir", "]", ")", "\n", "quat_hip", "=", "dcm2quat", "(", "dcm_hip", ")", "\n", "\n", "dcm_world", "=", "np", ".", "asarray", "(", "[", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "]", ")", "\n", "quat_world", "=", "dcm2quat", "(", "dcm_world", ")", "\n", "\n", "local_quat", "=", "quat_divide", "(", "\n", "q", "=", "quat_hip", ",", "r", "=", "quat_world", "\n", ")", "\n", "\n", "\n", "hip_local_quat", ".", "append", "(", "local_quat", ")", "\n", "\n", "# hip_euler = np.stack(hip_euler)", "\n", "# hip_euler = hip_euler[:, [1, 2, 0]]", "\n", "# print('hip_euler.shape ', hip_euler.shape)", "\n", "\n", "", "hip_local_quat", "=", "np", ".", "stack", "(", "hip_local_quat", ")", "\n", "print", "(", "'hip_local_quat.shape '", ",", "hip_local_quat", ".", "shape", ")", "\n", "\n", "inputs_2d", "=", "np", ".", "random", ".", "randn", "(", "500", ",", "16", ",", "2", ")", "\n", "# predicted_3d_qpos = np.random.randn(500, 59)", "\n", "predicted_3d_qpos", "=", "np", ".", "zeros", "(", "(", "500", ",", "59", ")", ")", "\n", "\n", "hh", "=", "get_hip_z", "(", "trajxy", ")", "\n", "hh", "=", "np", ".", "expand_dims", "(", "hh", ",", "-", "1", ")", "\n", "trajxyz", "=", "np", ".", "concatenate", "(", "[", "trajxy", ",", "hh", "[", ":", ",", ":", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "predicted_3d_qpos", "[", ":", ",", ":", "3", "]", "=", "trajxyz", "[", ":", "500", "]", "\n", "predicted_3d_qpos", "[", ":", ",", "3", ":", "7", "]", "=", "hip_local_quat", "[", ":", "500", "]", "\n", "\n", "return", "{", "\n", "'inputs_2d'", ":", "inputs_2d", ",", "\n", "'predicted_3d_qpos'", ":", "predicted_3d_qpos", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.convert_clip_multiprocess.get_qpos": [[19, 37], ["np.zeros", "body_qposaddr.items", "pose[].copy", "pose[].copy", "utils.transformation.quaternion_from_euler"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.transformation.quaternion_from_euler"], ["def", "get_qpos", "(", "pose", ",", "bone_addr", ")", ":", "\n", "    ", "\"\"\"\n    :param pose:   - ind1 = [a, b]  ind2 = [a', b']\n    :param bone_addr: bvh address\n    :return:\n    \"\"\"", "\n", "qpos", "=", "np", ".", "zeros", "(", "model", ".", "nq", ")", "\n", "for", "bone_name", ",", "ind2", "in", "body_qposaddr", ".", "items", "(", ")", ":", "\n", "        ", "ind1", "=", "bone_addr", "[", "bone_name", "]", "\n", "if", "ind1", "[", "0", "]", "==", "0", ":", "\n", "            ", "trans", "=", "pose", "[", "ind1", "[", "0", "]", ":", "ind1", "[", "0", "]", "+", "3", "]", ".", "copy", "(", ")", "\n", "angles", "=", "pose", "[", "ind1", "[", "0", "]", "+", "3", ":", "ind1", "[", "1", "]", "]", ".", "copy", "(", ")", "\n", "quat", "=", "quaternion_from_euler", "(", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ",", "'rxyz'", ")", "\n", "qpos", "[", "ind2", "[", "0", "]", ":", "ind2", "[", "0", "]", "+", "3", "]", "=", "trans", "\n", "qpos", "[", "ind2", "[", "0", "]", "+", "3", ":", "ind2", "[", "1", "]", "]", "=", "quat", "\n", "", "else", ":", "\n", "            ", "qpos", "[", "ind2", "[", "0", "]", ":", "ind2", "[", "1", "]", "]", "=", "pose", "[", "ind1", "[", "0", "]", ":", "ind1", "[", "1", "]", "]", "\n", "", "", "return", "qpos", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.convert_clip_multiprocess.get_poses": [[39, 58], ["time.time", "mocap.pose.load_bvh_file", "mocap.pose.interpolated_traj", "range", "np.vstack", "print", "convert_clip_multiprocess.get_qpos", "np.vstack.append", "time.time"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.load_bvh_file", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.mocap.pose.interpolated_traj", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.convert_clip_multiprocess.get_qpos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "get_poses", "(", "bvh_file", ")", ":", "\n", "    ", "time0_get_poses", "=", "time", ".", "time", "(", ")", "# time start load.", "\n", "\n", "poses", ",", "bone_addr", "=", "load_bvh_file", "(", "bvh_file", ",", "skeleton", ")", "\n", "poses_samp", "=", "interpolated_traj", "(", "poses", ",", "args", ".", "dt", ",", "mocap_fr", "=", "args", ".", "mocap_fr", ")", "\n", "qpos_traj", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "poses_samp", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cur_pose", "=", "poses_samp", "[", "i", ",", ":", "]", "\n", "cur_qpos", "=", "get_qpos", "(", "cur_pose", ",", "bone_addr", ")", "\n", "qpos_traj", ".", "append", "(", "cur_qpos", ")", "\n", "", "qpos_traj", "=", "np", ".", "vstack", "(", "qpos_traj", ")", "\n", "\n", "# post-process qpos", "\n", "# set the feet on ground plane", "\n", "qpos_traj", "[", ":", ",", "2", "]", "+=", "args", ".", "offset_z", "\n", "\n", "time_cost_get_poses", "=", "time", ".", "time", "(", ")", "-", "time0_get_poses", "# time spend.", "\n", "print", "(", "'-> get_poses spends {:.2f}s on {} with {:0>6d} frames'", ".", "format", "(", "time_cost_get_poses", ",", "bvh_file", ",", "poses", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "qpos_traj", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.convert_clip_multiprocess.bvh2traj": [[59, 68], ["print", "convert_clip_multiprocess.get_poses", "pickle.dump", "print", "os.path.splitext", "open", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.data_process.convert_clip_multiprocess.get_poses"], ["", "def", "bvh2traj", "(", "file", ")", ":", "\n", "    ", "print", "(", "'start extracting trajectory from %s'", "%", "file", ")", "\n", "qpos_traj", "=", "get_poses", "(", "file", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "file", ")", ")", "[", "0", "]", "\n", "# bvh_dir = os.path.dirname(file)", "\n", "# traj_p_folder = bvh_dir.replace('traj_bvh', 'traj_p')", "\n", "traj_file", "=", "'%s/datasets/traj_p/%s_traj.p'", "%", "(", "args", ".", "mocap_folder", ",", "name", ")", "\n", "pickle", ".", "dump", "(", "qpos_traj", ",", "open", "(", "traj_file", ",", "'wb'", ")", ")", "\n", "print", "(", "'save trajectory to %s'", "%", "traj_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.trajbatch_mimic.TrajBatchEgo.__init__": [[7, 10], ["core.TrajBatch.__init__", "numpy.stack", "next"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next"], ["    ", "def", "__init__", "(", "self", ",", "memory_list", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "memory_list", ")", "\n", "self", ".", "v_metas", "=", "np", ".", "stack", "(", "next", "(", "self", ".", "batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.__init__": [[10, 17], ["agents.AgentPPO.__init__", "agent_mimic.AgentEgo.sample_modules.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "policy_vs_net", "=", "None", ",", "value_vs_net", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "use_mini_batch", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "traj_cls", "=", "TrajBatchEgo", "\n", "self", ".", "policy_vs_net", "=", "policy_vs_net", "\n", "self", ".", "value_vs_net", "=", "value_vs_net", "\n", "self", ".", "sample_modules", ".", "append", "(", "policy_vs_net", ")", "\n", "self", ".", "update_modules", "+=", "[", "policy_vs_net", ",", "value_vs_net", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.pre_sample": [[18, 20], ["agent_mimic.AgentEgo.policy_vs_net.set_mode"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.set_mode"], ["", "def", "pre_sample", "(", "self", ")", ":", "\n", "        ", "self", ".", "policy_vs_net", ".", "set_mode", "(", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.pre_episode": [[21, 23], ["agent_mimic.AgentEgo.policy_vs_net.initialize", "tensor", "agent_mimic.AgentEgo.env.get_episode_cnn_feat"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_episode_cnn_feat"], ["", "def", "pre_episode", "(", "self", ")", ":", "\n", "        ", "self", ".", "policy_vs_net", ".", "initialize", "(", "tensor", "(", "self", ".", "env", ".", "get_episode_cnn_feat", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.push_memory": [[24, 27], ["np.array", "memory.push"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.push"], ["", "def", "push_memory", "(", "self", ",", "memory", ",", "state", ",", "action", ",", "mask", ",", "next_state", ",", "reward", ",", "exp", ")", ":", "\n", "        ", "v_meta", "=", "np", ".", "array", "(", "[", "self", ".", "env", ".", "expert_ind", ",", "self", ".", "env", ".", "start_ind", "]", ")", "\n", "memory", ".", "push", "(", "state", ",", "action", ",", "mask", ",", "next_state", ",", "reward", ",", "exp", ",", "v_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_policy": [[28, 30], ["agent_mimic.AgentEgo.policy_vs_net"], "methods", ["None"], ["", "def", "trans_policy", "(", "self", ",", "states", ")", ":", "\n", "        ", "return", "self", ".", "policy_vs_net", "(", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_value": [[31, 33], ["agent_mimic.AgentEgo.value_vs_net"], "methods", ["None"], ["", "def", "trans_value", "(", "self", ",", "states", ")", ":", "\n", "        ", "return", "self", ".", "value_vs_net", "(", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.update_params": [[34, 58], ["time.time", "to_train", "torch.from_numpy().to().to", "torch.from_numpy().to().to", "torch.from_numpy().to().to", "torch.from_numpy().to().to", "torch.from_numpy().to().to", "agent_mimic.AgentEgo.policy_vs_net.set_mode", "agent_mimic.AgentEgo.value_vs_net.set_mode", "agent_mimic.AgentEgo.policy_vs_net.initialize", "agent_mimic.AgentEgo.value_vs_net.initialize", "estimate_advantages", "agent_mimic.AgentEgo.update_policy", "to_test", "time.time", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.no_grad", "agent_mimic.AgentEgo.value_net", "agent_mimic.AgentEgo.trans_value", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.set_mode", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.set_mode", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.common.estimate_advantages", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent_pg.AgentPG.update_policy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.agent_mimic.AgentEgo.trans_value"], ["", "def", "update_params", "(", "self", ",", "batch", ")", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "to_train", "(", "*", "self", ".", "update_modules", ")", "\n", "states", "=", "torch", ".", "from_numpy", "(", "batch", ".", "states", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "#50632x115", "\n", "actions", "=", "torch", ".", "from_numpy", "(", "batch", ".", "actions", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "rewards", "=", "torch", ".", "from_numpy", "(", "batch", ".", "rewards", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "masks", "=", "torch", ".", "from_numpy", "(", "batch", ".", "masks", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "exps", "=", "torch", ".", "from_numpy", "(", "batch", ".", "exps", ")", ".", "to", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "v_metas", "=", "batch", ".", "v_metas", "#50630x2", "\n", "\n", "self", ".", "policy_vs_net", ".", "set_mode", "(", "'train'", ")", "\n", "self", ".", "value_vs_net", ".", "set_mode", "(", "'train'", ")", "\n", "self", ".", "policy_vs_net", ".", "initialize", "(", "(", "masks", ",", "self", ".", "env", ".", "cnn_feat", ",", "v_metas", ")", ")", "\n", "self", ".", "value_vs_net", ".", "initialize", "(", "(", "masks", ",", "self", ".", "env", ".", "cnn_feat", ",", "v_metas", ")", ")", "\n", "with", "to_test", "(", "*", "self", ".", "update_modules", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "values", "=", "self", ".", "value_net", "(", "self", ".", "trans_value", "(", "states", ")", ")", "\n", "\n", "", "", "\"\"\"get advantage estimation from the trajectories\"\"\"", "\n", "advantages", ",", "returns", "=", "estimate_advantages", "(", "rewards", ",", "masks", ",", "values", ",", "self", ".", "gamma", ",", "self", ".", "tau", ")", "\n", "\n", "self", ".", "update_policy", "(", "states", ",", "actions", ",", "returns", ",", "advantages", ",", "exps", ")", "\n", "\n", "return", "time", ".", "time", "(", ")", "-", "t0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.reward_function.quat_space_reward_v6": [[5, 71], ["ws.get", "env.get_expert_index", "env.data.qpos.copy", "get_qvel_fd", "de_heading", "env.get_ee_pos", "env.get_body_quat", "get_angvel_fd", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "multi_quat_norm", "np.linalg.norm", "math.exp", "np.linalg.norm", "math.exp", "np.linalg.norm", "math.exp", "math.exp", "np.linalg.norm", "np.linalg.norm", "math.exp", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "multi_quat_diff", "multi_quat_norm", "math.exp", "np.array", "multi_quat_diff", "np.linalg.norm"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_qvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.de_heading", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_ee_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_body_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_angvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_diff"], ["def", "quat_space_reward_v6", "(", "env", ",", "state", ",", "action", ",", "info", ")", ":", "\n", "# reward coefficients", "\n", "    ", "cfg", "=", "env", ".", "cfg", "\n", "ws", "=", "cfg", ".", "reward_weights", "\n", "w_p", ",", "w_v", ",", "w_e", ",", "w_rp", ",", "w_rv", "=", "ws", ".", "get", "(", "'w_p'", ",", "0.5", ")", ",", "ws", ".", "get", "(", "'w_v'", ",", "0.1", ")", ",", "ws", ".", "get", "(", "'w_e'", ",", "0.2", ")", ",", "ws", ".", "get", "(", "'w_rp'", ",", "0.1", ")", ",", "ws", ".", "get", "(", "\n", "'w_rv'", ",", "0.1", ")", "\n", "k_p", ",", "k_v", ",", "k_e", "=", "ws", ".", "get", "(", "'k_p'", ",", "2", ")", ",", "ws", ".", "get", "(", "'k_v'", ",", "0.005", ")", ",", "ws", ".", "get", "(", "'k_e'", ",", "20", ")", "\n", "k_rh", ",", "k_rq", ",", "k_rl", ",", "k_ra", "=", "ws", ".", "get", "(", "'k_rh'", ",", "300", ")", ",", "ws", ".", "get", "(", "'k_rq'", ",", "300", ")", ",", "ws", ".", "get", "(", "'k_rl'", ",", "5.0", ")", ",", "ws", ".", "get", "(", "'k_ra'", ",", "0.5", ")", "\n", "v_ord", "=", "ws", ".", "get", "(", "'v_ord'", ",", "2", ")", "\n", "w_vf", ",", "k_vf", "=", "ws", ".", "get", "(", "'w_vf'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_vf'", ",", "1", ")", "# residual force", "\n", "# data from env", "\n", "t", "=", "env", ".", "cur_t", "\n", "ind", "=", "env", ".", "get_expert_index", "(", "t", ")", "\n", "prev_bquat", "=", "env", ".", "prev_bquat", "\n", "prev_qpos", "=", "env", ".", "prev_qpos", "\n", "# learner", "\n", "cur_qpos", "=", "env", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "cur_qvel", "=", "get_qvel_fd", "(", "prev_qpos", ",", "cur_qpos", ",", "env", ".", "dt", ",", "cfg", ".", "obs_coord", ")", "\n", "cur_rlinv_local", "=", "cur_qvel", "[", ":", "3", "]", "\n", "cur_rangv", "=", "cur_qvel", "[", "3", ":", "6", "]", "\n", "cur_rq_rmh", "=", "de_heading", "(", "cur_qpos", "[", "3", ":", "7", "]", ")", "\n", "cur_ee", "=", "env", ".", "get_ee_pos", "(", "cfg", ".", "obs_coord", ")", "\n", "cur_bquat", "=", "env", ".", "get_body_quat", "(", ")", "\n", "cur_bangvel", "=", "get_angvel_fd", "(", "prev_bquat", ",", "cur_bquat", ",", "env", ".", "dt", ")", "\n", "# expert", "\n", "e_qpos", "=", "env", ".", "get_expert_attr", "(", "'qpos'", ",", "ind", ")", "\n", "e_rlinv_local", "=", "env", ".", "get_expert_attr", "(", "'rlinv_local'", ",", "ind", ")", "\n", "e_rangv", "=", "env", ".", "get_expert_attr", "(", "'rangv'", ",", "ind", ")", "\n", "e_rq_rmh", "=", "env", ".", "get_expert_attr", "(", "'rq_rmh'", ",", "ind", ")", "\n", "e_ee", "=", "env", ".", "get_expert_attr", "(", "'ee_pos'", ",", "ind", ")", "\n", "e_bquat", "=", "env", ".", "get_expert_attr", "(", "'bquat'", ",", "ind", ")", "\n", "e_bangvel", "=", "env", ".", "get_expert_attr", "(", "'bangvel'", ",", "ind", ")", "\n", "# pose reward", "\n", "pose_diff", "=", "multi_quat_norm", "(", "multi_quat_diff", "(", "cur_bquat", "[", "4", ":", "]", ",", "e_bquat", "[", "4", ":", "]", ")", ")", "# ignore root", "\n", "pose_diff", "*=", "cfg", ".", "b_diffw", "\n", "pose_dist", "=", "np", ".", "linalg", ".", "norm", "(", "pose_diff", ")", "\n", "pose_reward", "=", "math", ".", "exp", "(", "-", "k_p", "*", "(", "pose_dist", "**", "2", ")", ")", "\n", "# velocity reward", "\n", "vel_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_bangvel", "[", "3", ":", "]", "-", "e_bangvel", "[", "3", ":", "]", ",", "ord", "=", "v_ord", ")", "# ignore root", "\n", "vel_reward", "=", "math", ".", "exp", "(", "-", "k_v", "*", "(", "vel_dist", "**", "2", ")", ")", "\n", "# ee reward", "\n", "ee_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_ee", "-", "e_ee", ")", "\n", "ee_reward", "=", "math", ".", "exp", "(", "-", "k_e", "*", "(", "ee_dist", "**", "2", ")", ")", "\n", "# root position reward", "\n", "root_height_dist", "=", "cur_qpos", "[", "2", "]", "-", "e_qpos", "[", "2", "]", "\n", "root_quat_dist", "=", "multi_quat_norm", "(", "multi_quat_diff", "(", "cur_rq_rmh", ",", "e_rq_rmh", ")", ")", "[", "0", "]", "\n", "root_pose_reward", "=", "math", ".", "exp", "(", "-", "k_rh", "*", "(", "root_height_dist", "**", "2", ")", "-", "k_rq", "*", "(", "root_quat_dist", "**", "2", ")", ")", "\n", "# root velocity reward", "\n", "root_linv_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_rlinv_local", "-", "e_rlinv_local", ")", "\n", "root_angv_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_rangv", "-", "e_rangv", ")", "\n", "root_vel_reward", "=", "math", ".", "exp", "(", "-", "k_rl", "*", "(", "root_linv_dist", "**", "2", ")", "-", "k_ra", "*", "(", "root_angv_dist", "**", "2", ")", ")", "\n", "# residual force reward", "\n", "if", "w_vf", ">", "0.0", ":", "\n", "        ", "vf", "=", "action", "[", "-", "env", ".", "vf_dim", ":", "]", "\n", "vf_reward", "=", "math", ".", "exp", "(", "-", "k_vf", "*", "(", "np", ".", "linalg", ".", "norm", "(", "vf", ")", "**", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "vf_reward", "=", "0.0", "\n", "\n", "# overall reward", "\n", "", "reward", "=", "w_p", "*", "pose_reward", "+", "w_v", "*", "vel_reward", "+", "w_e", "*", "ee_reward", "+", "w_rp", "*", "root_pose_reward", "+", "w_rv", "*", "root_vel_reward", "+", "w_vf", "*", "vf_reward", "\n", "reward", "/=", "w_p", "+", "w_v", "+", "w_e", "+", "w_rp", "+", "w_rv", "+", "w_vf", "\n", "if", "ws", ".", "get", "(", "'decay'", ",", "False", ")", ":", "\n", "        ", "reward", "*=", "1.0", "-", "t", "/", "cfg", ".", "env_episode_len", "\n", "", "if", "info", "[", "'end'", "]", ":", "\n", "        ", "reward", "+=", "env", ".", "end_reward", "\n", "", "return", "reward", ",", "np", ".", "array", "(", "[", "pose_reward", ",", "vel_reward", ",", "ee_reward", ",", "root_pose_reward", ",", "root_vel_reward", ",", "vf_reward", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.reward_function.quat_space_reward_v7": [[74, 198], ["ws.get", "env.get_expert_index", "env.data.qpos.copy", "get_qvel_fd", "de_heading", "env.get_ee_pos", "env.get_body_quat", "get_angvel_fd", "env.get_skeleton_pos", "get_sktvel_fd", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "multi_quat_norm", "np.linalg.norm", "math.exp", "vel_diff.reshape.reshape", "np.linalg.norm", "math.exp", "np.linalg.norm", "math.exp", "np.linalg.norm", "min", "math.exp", "np.linalg.norm", "math.exp", "math.exp", "math.exp", "np.linalg.norm", "min", "math.exp", "np.linalg.norm", "math.exp", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "multi_quat_diff", "np.sum", "np.sum", "vel_diff.reshape.reshape", "multi_quat_norm", "np.linalg.norm", "math.exp", "np.array", "np.expand_dims", "env.get_expert_attr.reshape", "env.get_expert_attr.reshape", "env.get_skeleton_pos.reshape", "env.get_skeleton_pos.reshape", "np.min", "multi_quat_diff", "get_sktvel_fd.reshape", "env.get_expert_attr.reshape", "env.get_expert_attr.reshape", "env.get_expert_attr.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_qvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.de_heading", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_ee_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_body_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_angvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_skeleton_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_sktvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "quat_space_reward_v7", "(", "env", ",", "state", ",", "action", ",", "info", ")", ":", "\n", "# reward coefficients", "\n", "    ", "cfg", "=", "env", ".", "cfg", "\n", "ws", "=", "cfg", ".", "reward_weights", "\n", "# w_p, w_v, w_e, w_rp, w_rv = ws.get('w_p', 0.5), ws.get('w_v', 0.1), ws.get('w_e', 0.2), ws.get('w_rp', 0.1), ws.get(", "\n", "#     'w_rv', 0.1)", "\n", "# k_p, k_v, k_e = ws.get('k_p', 2), ws.get('k_v', 0.005), ws.get('k_e', 20)", "\n", "# k_rh, k_rq, k_rl, k_ra = ws.get('k_rh', 300), ws.get('k_rq', 300), ws.get('k_rl', 5.0), ws.get('k_ra', 0.5)", "\n", "v_ord", "=", "ws", ".", "get", "(", "'v_ord'", ",", "2", ")", "\n", "\n", "w_p", ",", "k_p", "=", "ws", ".", "get", "(", "'w_p'", ",", "0.5", ")", ",", "ws", ".", "get", "(", "'k_p'", ",", "2", ")", "# qpos", "\n", "w_v", ",", "k_v", "=", "ws", ".", "get", "(", "'w_v'", ",", "0.1", ")", ",", "ws", ".", "get", "(", "'k_v'", ",", "0.005", ")", "# qvel", "\n", "w_e", ",", "k_e", "=", "ws", ".", "get", "(", "'w_e'", ",", "0.2", ")", ",", "ws", ".", "get", "(", "'k_e'", ",", "20", ")", "# ee", "\n", "w_rh", ",", "k_rh", ",", "v_rh", "=", "ws", ".", "get", "(", "'w_rh'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rh'", ",", "300", ")", ",", "ws", ".", "get", "(", "'v_rh'", ",", "0.1", ")", "# root height", "\n", "\n", "w_rq", ",", "k_rq", "=", "ws", ".", "get", "(", "'w_rq'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rq'", ",", "1", ")", "\n", "w_rp", ",", "k_rp", "=", "ws", ".", "get", "(", "'w_rp'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rp'", ",", "1", ")", "# root position", "\n", "w_rlv", ",", "k_rlv", "=", "ws", ".", "get", "(", "'w_rlv'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rlv'", ",", "1", ")", "# root linear v", "\n", "w_rav", ",", "k_rav", "=", "ws", ".", "get", "(", "'w_rav'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rav'", ",", "1", ")", "# root angle v", "\n", "w_vf", ",", "k_vf", "=", "ws", ".", "get", "(", "'w_vf'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_vf'", ",", "1", ")", "# residual force", "\n", "w_bae", ",", "k_bae", "=", "ws", ".", "get", "(", "'w_bae'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_bae'", ",", "1", ")", "# bone angle velocity energy", "\n", "w_headh", ",", "k_headh", "=", "ws", ".", "get", "(", "'w_headh'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_headh'", ",", "1", ")", "# headhight", "\n", "\n", "\n", "w_flv", ",", "k_flv", "=", "ws", ".", "get", "(", "'w_flv'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_flv'", ",", "1", ")", "# feet linear vel", "\n", "w_frp", ",", "k_frp", "=", "ws", ".", "get", "(", "'w_frp'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_frp'", ",", "1", ")", "# feet linear vel", "\n", "\n", "# data from env", "\n", "t", "=", "env", ".", "cur_t", "\n", "ind", "=", "env", ".", "get_expert_index", "(", "t", ")", "\n", "prev_bquat", "=", "env", ".", "prev_bquat", "\n", "prev_skt_pos", "=", "env", ".", "prev_skt_pos", "\n", "prev_qpos", "=", "env", ".", "prev_qpos", "\n", "# learner", "\n", "cur_qpos", "=", "env", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "cur_qvel", "=", "get_qvel_fd", "(", "prev_qpos", ",", "cur_qpos", ",", "env", ".", "dt", ",", "cfg", ".", "obs_coord", ")", "\n", "cur_rlinv_local", "=", "cur_qvel", "[", ":", "3", "]", "\n", "cur_rangv", "=", "cur_qvel", "[", "3", ":", "6", "]", "\n", "cur_rq_rmh", "=", "de_heading", "(", "cur_qpos", "[", "3", ":", "7", "]", ")", "\n", "cur_ee", "=", "env", ".", "get_ee_pos", "(", "cfg", ".", "obs_coord", ")", "\n", "cur_bquat", "=", "env", ".", "get_body_quat", "(", ")", "\n", "cur_bangvel", "=", "get_angvel_fd", "(", "prev_bquat", ",", "cur_bquat", ",", "env", ".", "dt", ")", "\n", "cur_skt_pos", "=", "env", ".", "get_skeleton_pos", "(", "cfg", ".", "obs_coord", ")", "\n", "cur_sktvel", "=", "get_sktvel_fd", "(", "prev_skt_pos", ",", "cur_skt_pos", ",", "env", ".", "dt", ")", "\n", "# expert", "\n", "e_qpos", "=", "env", ".", "get_expert_attr", "(", "'qpos'", ",", "ind", ")", "\n", "e_rlinv_local", "=", "env", ".", "get_expert_attr", "(", "'rlinv_local'", ",", "ind", ")", "\n", "e_rangv", "=", "env", ".", "get_expert_attr", "(", "'rangv'", ",", "ind", ")", "\n", "e_rq_rmh", "=", "env", ".", "get_expert_attr", "(", "'rq_rmh'", ",", "ind", ")", "\n", "e_ee", "=", "env", ".", "get_expert_attr", "(", "'ee_pos'", ",", "ind", ")", "\n", "e_bquat", "=", "env", ".", "get_expert_attr", "(", "'bquat'", ",", "ind", ")", "\n", "e_bangvel", "=", "env", ".", "get_expert_attr", "(", "'bangvel'", ",", "ind", ")", "\n", "e_sktvel", "=", "env", ".", "get_expert_attr", "(", "'sktvel'", ",", "ind", ")", "\n", "e_skt_wpos", "=", "env", ".", "get_expert_attr", "(", "'skt_wpos'", ",", "ind", ")", "\n", "e_skt_pos", "=", "env", ".", "get_expert_attr", "(", "'skt_pos'", ",", "ind", ")", "\n", "# pose reward", "\n", "pose_diff", "=", "multi_quat_norm", "(", "multi_quat_diff", "(", "cur_bquat", "[", "4", ":", "]", ",", "e_bquat", "[", "4", ":", "]", ")", ")", "# ignore root", "\n", "pose_diff", "=", "pose_diff", "*", "cfg", ".", "b_diffw", "/", "np", ".", "sum", "(", "cfg", ".", "b_diffw", ")", "\n", "pose_dist", "=", "np", ".", "linalg", ".", "norm", "(", "pose_diff", ")", "\n", "pose_reward", "=", "math", ".", "exp", "(", "-", "k_p", "*", "(", "pose_dist", "**", "2", ")", ")", "\n", "# velocity reward", "\n", "vel_diff", "=", "cur_bangvel", "[", "3", ":", "]", "-", "e_bangvel", "[", "3", ":", "]", "\n", "vel_diff", "=", "vel_diff", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "vel_diff", "=", "vel_diff", "*", "np", ".", "expand_dims", "(", "cfg", ".", "b_diffw", ",", "-", "1", ")", "/", "np", ".", "sum", "(", "cfg", ".", "b_diffw", "*", "3", ")", "\n", "vel_dist", "=", "np", ".", "linalg", ".", "norm", "(", "vel_diff", ".", "reshape", "(", "-", "1", ")", ",", "ord", "=", "v_ord", ")", "# ignore root", "\n", "vel_reward", "=", "math", ".", "exp", "(", "-", "k_v", "*", "(", "vel_dist", "**", "2", ")", ")", "\n", "# ee reward", "\n", "ee_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_ee", "-", "e_ee", ")", "\n", "ee_reward", "=", "math", ".", "exp", "(", "-", "k_e", "*", "(", "ee_dist", "**", "2", ")", ")", "\n", "# feet joint vel reward", "\n", "flv_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_sktvel", ".", "reshape", "(", "16", ",", "3", ")", "[", "[", "3", ",", "6", ",", "12", ",", "15", "]", ",", ":", "]", "-", "e_sktvel", ".", "reshape", "(", "16", ",", "3", ")", "[", "[", "3", ",", "6", ",", "12", ",", "15", "]", ",", ":", "]", ",", "ord", "=", "v_ord", ")", "# ignore root", "\n", "flv_dist", "=", "min", "(", "1", ",", "flv_dist", ")", "\n", "flv_reward", "=", "math", ".", "exp", "(", "-", "k_flv", "*", "(", "flv_dist", "**", "2", ")", ")", "\n", "# feet relative position", "\n", "e_feet_vec", "=", "e_skt_pos", ".", "reshape", "(", "16", ",", "3", ")", "[", "3", "]", "-", "e_skt_pos", ".", "reshape", "(", "16", ",", "3", ")", "[", "6", "]", "\n", "c_feet_vec", "=", "cur_skt_pos", ".", "reshape", "(", "16", ",", "3", ")", "[", "3", "]", "-", "cur_skt_pos", ".", "reshape", "(", "16", ",", "3", ")", "[", "6", "]", "\n", "frp_dist", "=", "np", ".", "linalg", ".", "norm", "(", "c_feet_vec", "-", "e_feet_vec", ")", "\n", "frp_reward", "=", "math", ".", "exp", "(", "-", "k_frp", "*", "(", "frp_dist", "**", "2", ")", ")", "\n", "# root height reward", "\n", "\n", "e_root_height", "=", "e_skt_wpos", ".", "reshape", "(", "16", ",", "3", ")", "[", "0", ",", "2", "]", "-", "np", ".", "min", "(", "e_skt_wpos", ".", "reshape", "(", "16", ",", "3", ")", "[", ":", ",", "2", "]", ")", "+", "v_rh", "#  + 0.08", "\n", "root_height_dist", "=", "cur_qpos", "[", "2", "]", "-", "e_root_height", "# e_qpos[2]  ", "\n", "root_height_reward", "=", "math", ".", "exp", "(", "-", "k_rh", "*", "(", "root_height_dist", "**", "2", ")", ")", "\n", "# root quat reward", "\n", "root_quat_dist", "=", "multi_quat_norm", "(", "multi_quat_diff", "(", "cur_rq_rmh", ",", "e_rq_rmh", ")", ")", "[", "0", "]", "\n", "root_quat_reward", "=", "math", ".", "exp", "(", "-", "k_rq", "*", "(", "root_quat_dist", "**", "2", ")", ")", "\n", "# root linear velocity reward", "\n", "root_linv_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_rlinv_local", "-", "e_rlinv_local", ")", "\n", "root_linv_dist", "=", "min", "(", "1", ",", "root_linv_dist", ")", "\n", "root_linv_reward", "=", "math", ".", "exp", "(", "-", "k_rlv", "*", "(", "root_linv_dist", "**", "2", ")", ")", "\n", "# root angler velocity reward", "\n", "root_angv_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_rangv", "-", "e_rangv", ")", "\n", "root_angv_reward", "=", "math", ".", "exp", "(", "-", "k_rav", "*", "(", "root_angv_dist", "**", "2", ")", ")", "\n", "# residual force reward", "\n", "if", "w_vf", ">", "0.0", ":", "\n", "        ", "vf", "=", "action", "[", "-", "env", ".", "vf_dim", ":", "]", "\n", "vf_norm", "=", "np", ".", "linalg", ".", "norm", "(", "vf", ")", "\n", "vf_reward", "=", "math", ".", "exp", "(", "-", "k_vf", "*", "(", "vf_norm", "**", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "vf_norm", "=", "0.0", "\n", "vf_reward", "=", "0.0", "\n", "\n", "# overall reward", "\n", "", "reward", "=", "w_p", "*", "pose_reward", "+", "w_v", "*", "vel_reward", "+", "w_e", "*", "ee_reward", "+", "w_flv", "*", "flv_reward", "+", "w_frp", "*", "frp_reward", "+", "w_rh", "*", "root_height_reward", "+", "w_rq", "*", "root_quat_reward", "+", "w_rlv", "*", "root_linv_reward", "+", "w_rav", "*", "root_angv_reward", "+", "w_vf", "*", "vf_reward", "\n", "reward", "/=", "w_p", "+", "w_v", "+", "w_e", "+", "w_flv", "+", "w_frp", "+", "w_rh", "+", "w_rq", "+", "w_rlv", "+", "w_rav", "+", "w_vf", "\n", "if", "ws", ".", "get", "(", "'decay'", ",", "False", ")", ":", "\n", "        ", "reward", "*=", "1.0", "-", "t", "/", "cfg", ".", "env_episode_len", "\n", "", "if", "info", "[", "'end'", "]", ":", "\n", "        ", "reward", "+=", "env", ".", "end_reward", "\n", "", "return", "reward", ",", "np", ".", "array", "(", "[", "pose_reward", ",", "pose_dist", ",", "\n", "vel_reward", ",", "vel_dist", ",", "\n", "ee_reward", ",", "ee_dist", ",", "\n", "flv_reward", ",", "flv_dist", ",", "\n", "frp_reward", ",", "frp_dist", ",", "\n", "root_height_reward", ",", "root_height_dist", ",", "\n", "root_quat_reward", ",", "root_quat_dist", ",", "\n", "root_linv_reward", ",", "root_linv_dist", ",", "\n", "root_angv_reward", ",", "root_angv_dist", ",", "\n", "vf_reward", ",", "vf_norm", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.reward_function.followtraj_reward_v7": [[208, 313], ["env.get_expert_index", "env.data.qpos.copy", "get_qvel_fd", "de_heading", "env.get_skeleton_pos", "env.get_body_quat", "get_angvel_fd", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "env.get_expert_attr", "math.exp", "np.mean", "math.exp", "math.exp", "np.linalg.norm", "math.exp", "np.linalg.norm", "math.exp", "np.linalg.norm", "np.linalg.norm", "math.exp", "math.exp", "np.linalg.norm", "math.exp", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "ws.get", "get_qvel_fd", "env.get_ee_pos", "env.get_expert_attr", "env.get_body_com", "np.square", "multi_quat_norm", "math.exp", "np.array", "multi_quat_diff", "np.linalg.norm"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_index", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_qvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.de_heading", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_skeleton_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_body_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_angvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.get_qvel_fd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_ee_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_expert_attr", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.get_body_com", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_norm", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.math.multi_quat_diff"], ["def", "followtraj_reward_v7", "(", "env", ",", "state", ",", "action", ",", "info", ")", ":", "\n", "# reward coefficients", "\n", "    ", "cfg", "=", "env", ".", "cfg", "\n", "ws", "=", "cfg", ".", "reward_weights", "\n", "\n", "w_rq", ",", "k_rq", "=", "ws", ".", "get", "(", "'w_rq'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rq'", ",", "1", ")", "\n", "w_rp", ",", "k_rp", "=", "ws", ".", "get", "(", "'w_rp'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rp'", ",", "1", ")", "\n", "w_rlvw", ",", "k_rlvw1", ",", "k_rlvw2", "=", "ws", ".", "get", "(", "'w_rlvw'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rlvw1'", ",", "1", ")", ",", "ws", ".", "get", "(", "'k_rlvw2'", ",", "1", ")", "\n", "w_rlv", ",", "k_rlv", "=", "ws", ".", "get", "(", "'w_rlv'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rlv'", ",", "1", ")", "# root linear v", "\n", "w_rav", ",", "k_rav", "=", "ws", ".", "get", "(", "'w_rav'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_rav'", ",", "1", ")", "# root angle v", "\n", "w_vf", ",", "k_vf", "=", "ws", ".", "get", "(", "'w_vf'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_vf'", ",", "1", ")", "# residual force", "\n", "w_dof", ",", "k_dof", "=", "ws", ".", "get", "(", "'w_dof'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_dof'", ",", "1", ")", "# residual force", "\n", "w_bae", ",", "k_bae", "=", "ws", ".", "get", "(", "'w_bae'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_bae'", ",", "1", ")", "# bone angle velocity energy", "\n", "w_headh", ",", "k_headh", "=", "ws", ".", "get", "(", "'w_headh'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_headh'", ",", "1", ")", "# headhight", "\n", "w_eeh", ",", "k_eeh", "=", "ws", ".", "get", "(", "'w_eeh'", ",", "0.0", ")", ",", "ws", ".", "get", "(", "'k_eeh'", ",", "1", ")", "# headhight", "\n", "\n", "# data from env", "\n", "t", "=", "env", ".", "cur_t", "\n", "ind", "=", "env", ".", "get_expert_index", "(", "t", ")", "\n", "prev_bquat", "=", "env", ".", "prev_bquat", "\n", "prev_qpos", "=", "env", ".", "prev_qpos", "\n", "# learner", "\n", "cur_qpos", "=", "env", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "cur_rlinv_world", "=", "get_qvel_fd", "(", "prev_qpos", ",", "cur_qpos", ",", "env", ".", "dt", ")", "[", ":", "3", "]", "\n", "cur_qvel", "=", "get_qvel_fd", "(", "prev_qpos", ",", "cur_qpos", ",", "env", ".", "dt", ",", "cfg", ".", "obs_coord", ")", "\n", "cur_rlinv_local", "=", "cur_qvel", "[", ":", "3", "]", "\n", "cur_rangv", "=", "cur_qvel", "[", "3", ":", "6", "]", "\n", "cur_rq_rmh", "=", "de_heading", "(", "cur_qpos", "[", "3", ":", "7", "]", ")", "\n", "# cur_ee = env.get_ee_pos(cfg.obs_coord)  ", "\n", "cur_sktwpose", "=", "env", ".", "get_skeleton_pos", "(", ")", "\n", "cur_bquat", "=", "env", ".", "get_body_quat", "(", ")", "\n", "cur_bangvel", "=", "get_angvel_fd", "(", "prev_bquat", ",", "cur_bquat", ",", "env", ".", "dt", ")", "\n", "# cur_eeh = env.get_ee_pos(cfg.obs_coord)[-3:]  ", "\n", "cur_eeh", "=", "env", ".", "get_ee_pos", "(", "None", ")", "[", "-", "3", ":", "]", "\n", "# expert", "\n", "target_qpos", "=", "env", ".", "get_expert_attr", "(", "'qpos'", ",", "-", "1", ")", "\n", "e_qpos", "=", "env", ".", "get_expert_attr", "(", "'qpos'", ",", "ind", ")", "\n", "e_rlinv_local", "=", "env", ".", "get_expert_attr", "(", "'rlinv_local'", ",", "ind", ")", "\n", "e_rangv", "=", "env", ".", "get_expert_attr", "(", "'rangv'", ",", "ind", ")", "\n", "e_rq_rmh", "=", "env", ".", "get_expert_attr", "(", "'rq_rmh'", ",", "ind", ")", "\n", "e_eeh", "=", "env", ".", "get_expert_attr", "(", "'ee_wpos'", ",", "ind", ")", "[", "-", "3", ":", "]", "\n", "\n", "# head height rewards  ", "\n", "head_height", "=", "env", ".", "get_body_com", "(", "'Head'", ")", "[", "2", "]", "\n", "head_height_reward", "=", "math", ".", "exp", "(", "-", "k_headh", "*", "(", "1", "/", "head_height", ")", ")", "\n", "\n", "# posture energy", "\n", "bangvel_energy", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "cur_bangvel", ")", ")", "\n", "bangvel_energy_reward", "=", "math", ".", "exp", "(", "-", "k_bae", "*", "(", "1", "/", "bangvel_energy", ")", ")", "\n", "\n", "# root position reward", "\n", "root_quat_dist", "=", "multi_quat_norm", "(", "multi_quat_diff", "(", "cur_rq_rmh", ",", "e_rq_rmh", ")", ")", "[", "0", "]", "\n", "root_quat_reward", "=", "math", ".", "exp", "(", "-", "k_rq", "*", "(", "root_quat_dist", "**", "2", ")", ")", "\n", "\n", "# root postion", "\n", "# target_position = e_qpos[:2] - cur_qpos[:2]  ", "\n", "target_position", "=", "target_qpos", "[", "2", "]", "-", "cur_qpos", "[", "2", "]", "\n", "root_position_dist", "=", "np", ".", "linalg", ".", "norm", "(", "target_position", ")", "\n", "root_position_reward", "=", "math", ".", "exp", "(", "-", "k_rp", "*", "(", "root_position_dist", "**", "2", ")", ")", "\n", "# root_position_reward = math.exp(-k_rp * root_position_dist)", "\n", "root_linvw_dist", "=", "np", ".", "linalg", ".", "norm", "(", "k_rlvw1", "*", "cur_rlinv_world", "[", ":", "2", "]", ")", "\n", "root_linvw_reward", "=", "math", ".", "exp", "(", "-", "k_rlvw2", "*", "(", "root_linvw_dist", "**", "2", ")", ")", "\n", "\n", "# root velocity reward", "\n", "root_linv_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_rlinv_local", "-", "e_rlinv_local", ")", "\n", "root_angv_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_rangv", "[", "2", ":", "]", "-", "e_rangv", "[", "2", ":", "]", ")", "\n", "root_linv_reward", "=", "math", ".", "exp", "(", "-", "k_rlv", "*", "(", "root_linv_dist", "**", "2", ")", ")", "\n", "root_angv_reward", "=", "math", ".", "exp", "(", "-", "k_rav", "*", "(", "root_angv_dist", "**", "2", ")", ")", "\n", "\n", "# end point head reward", "\n", "root_eeh_dist", "=", "np", ".", "linalg", ".", "norm", "(", "cur_eeh", "[", "2", "]", "-", "e_eeh", "[", "2", "]", ")", "\n", "root_eeh_reward", "=", "math", ".", "exp", "(", "-", "k_eeh", "*", "(", "root_eeh_dist", "**", "2", ")", ")", "\n", "\n", "# joint force reward", "\n", "# dof_ = action[:env.ndof]", "\n", "# dof = env.data.ctrl", "\n", "# dof_reward = math.exp(-k_dof * (np.linalg.norm(dof) ** 2))", "\n", "\n", "# residual force reward", "\n", "if", "w_vf", ">", "0.0", ":", "\n", "        ", "vf", "=", "action", "[", "-", "env", ".", "vf_dim", ":", "]", "\n", "vf_reward", "=", "math", ".", "exp", "(", "-", "k_vf", "*", "(", "np", ".", "linalg", ".", "norm", "(", "vf", ")", "**", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "vf", "=", "0", "\n", "vf_reward", "=", "0.0", "\n", "\n", "# overall reward", "\n", "", "reward", "=", "w_rq", "*", "root_quat_reward", "+", "w_rp", "*", "root_position_reward", "+", "w_rlvw", "*", "root_linvw_reward", "+", "w_rlv", "*", "root_linv_reward", "+", "w_rav", "*", "root_angv_reward", "+", "w_vf", "*", "vf_reward", "+", "w_bae", "*", "bangvel_energy_reward", "+", "w_headh", "*", "head_height_reward", "+", "w_eeh", "*", "root_eeh_reward", "\n", "reward", "/=", "w_rq", "+", "w_rp", "+", "w_rlvw", "+", "w_rlv", "+", "w_rav", "+", "w_vf", "+", "w_bae", "+", "w_headh", "+", "w_eeh", "\n", "if", "ws", ".", "get", "(", "'decay'", ",", "False", ")", ":", "\n", "        ", "reward", "*=", "1.0", "-", "t", "/", "cfg", ".", "env_episode_len", "\n", "", "if", "info", "[", "'end'", "]", ":", "\n", "        ", "reward", "+=", "env", ".", "end_reward", "\n", "", "return", "reward", ",", "np", ".", "array", "(", "[", "root_quat_reward", ",", "root_quat_dist", ",", "\n", "root_position_reward", ",", "root_position_dist", ",", "\n", "# root_linvw_reward, root_linvw_dist,", "\n", "root_linv_reward", ",", "root_linv_dist", ",", "\n", "root_angv_reward", ",", "root_angv_dist", ",", "\n", "# vf_reward, np.linalg.norm(vf),", "\n", "bangvel_energy_reward", ",", "bangvel_energy", ",", "\n", "head_height_reward", ",", "head_height", ",", "\n", "root_eeh_reward", ",", "root_eeh_dist", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.reward_function.constant_reward": [[318, 323], ["np.zeros"], "function", ["None"], ["", "def", "constant_reward", "(", "env", ",", "state", ",", "action", ",", "info", ")", ":", "\n", "    ", "reward", "=", "1.0", "\n", "if", "info", "[", "'end'", "]", ":", "\n", "        ", "reward", "+=", "env", ".", "end_reward", "\n", "", "return", "1.0", ",", "np", ".", "zeros", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.reward_function.pose_dist_reward": [[325, 331], ["env.get_pose_dist", "np.array"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.envs.humanoid_v4.HumanoidEnv.get_pose_dist"], ["", "def", "pose_dist_reward", "(", "env", ",", "state", ",", "action", ",", "info", ")", ":", "\n", "    ", "pose_dist", "=", "env", ".", "get_pose_dist", "(", ")", "\n", "reward", "=", "5.0", "-", "3.0", "*", "pose_dist", "\n", "if", "info", "[", "'end'", "]", ":", "\n", "        ", "reward", "+=", "env", ".", "end_reward", "\n", "", "return", "reward", ",", "np", ".", "array", "(", "[", "pose_dist", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.__init__": [[6, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_steps", "=", "0", "\n", "self", ".", "num_episodes", "=", "0", "\n", "self", ".", "total_reward", "=", "0", "\n", "self", ".", "min_episode_reward", "=", "math", ".", "inf", "\n", "self", ".", "max_episode_reward", "=", "-", "math", ".", "inf", "\n", "self", ".", "total_c_reward", "=", "0", "\n", "self", ".", "min_c_reward", "=", "math", ".", "inf", "\n", "self", ".", "max_c_reward", "=", "-", "math", ".", "inf", "\n", "self", ".", "episode_reward", "=", "0", "\n", "self", ".", "avg_episode_reward", "=", "0", "\n", "self", ".", "avg_c_reward", "=", "0", "\n", "self", ".", "total_c_info", "=", "0", "\n", "self", ".", "avg_c_info", "=", "0", "\n", "self", ".", "sample_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.start_episode": [[22, 24], ["None"], "methods", ["None"], ["", "def", "start_episode", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "episode_reward", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step": [[25, 32], ["min", "max"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "env", ",", "reward", ",", "c_reward", ",", "c_info", ")", ":", "\n", "        ", "self", ".", "episode_reward", "+=", "reward", "\n", "self", ".", "total_c_reward", "+=", "c_reward", "\n", "self", ".", "total_c_info", "+=", "c_info", "\n", "self", ".", "min_c_reward", "=", "min", "(", "self", ".", "min_c_reward", ",", "c_reward", ")", "\n", "self", ".", "max_c_reward", "=", "max", "(", "self", ".", "max_c_reward", ",", "c_reward", ")", "\n", "self", ".", "num_steps", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.end_episode": [[33, 38], ["min", "max"], "methods", ["None"], ["", "def", "end_episode", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "num_episodes", "+=", "1", "\n", "self", ".", "total_reward", "+=", "self", ".", "episode_reward", "\n", "self", ".", "min_episode_reward", "=", "min", "(", "self", ".", "min_episode_reward", ",", "self", ".", "episode_reward", ")", "\n", "self", ".", "max_episode_reward", "=", "max", "(", "self", ".", "max_episode_reward", ",", "self", ".", "episode_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.end_sampling": [[39, 43], ["None"], "methods", ["None"], ["", "def", "end_sampling", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg_episode_reward", "=", "self", ".", "total_reward", "/", "self", ".", "num_episodes", "\n", "self", ".", "avg_c_reward", "=", "self", ".", "total_c_reward", "/", "self", ".", "num_steps", "\n", "self", ".", "avg_c_info", "=", "self", ".", "total_c_info", "/", "self", ".", "num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.merge": [[44, 60], ["cls", "sum", "sum", "sum", "max", "max", "sum", "max", "min", "sum"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "merge", "(", "cls", ",", "logger_list", ")", ":", "\n", "        ", "logger", "=", "cls", "(", ")", "\n", "logger", ".", "total_reward", "=", "sum", "(", "[", "x", ".", "total_reward", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "num_episodes", "=", "sum", "(", "[", "x", ".", "num_episodes", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "num_steps", "=", "sum", "(", "[", "x", ".", "num_steps", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "avg_episode_reward", "=", "logger", ".", "total_reward", "/", "logger", ".", "num_episodes", "\n", "logger", ".", "max_episode_reward", "=", "max", "(", "[", "x", ".", "max_episode_reward", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "min_episode_reward", "=", "max", "(", "[", "x", ".", "min_episode_reward", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "total_c_reward", "=", "sum", "(", "[", "x", ".", "total_c_reward", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "avg_c_reward", "=", "logger", ".", "total_c_reward", "/", "logger", ".", "num_steps", "\n", "logger", ".", "max_c_reward", "=", "max", "(", "[", "x", ".", "max_c_reward", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "min_c_reward", "=", "min", "(", "[", "x", ".", "min_c_reward", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "total_c_info", "=", "sum", "(", "[", "x", ".", "total_c_info", "for", "x", "in", "logger_list", "]", ")", "\n", "logger", ".", "avg_c_info", "=", "logger", ".", "total_c_info", "/", "logger", ".", "num_steps", "\n", "return", "logger", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy_gaussian.PolicyGaussian.__init__": [[8, 18], ["core.policy.Policy.__init__", "torch.Linear", "policy_gaussian.PolicyGaussian.action_mean.weight.data.mul_", "policy_gaussian.PolicyGaussian.action_mean.bias.data.mul_", "torch.Parameter", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "action_dim", ",", "net_out_dim", "=", "None", ",", "log_std", "=", "0", ",", "fix_std", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "type", "=", "'gaussian'", "\n", "self", ".", "net", "=", "net", "\n", "if", "net_out_dim", "is", "None", ":", "\n", "            ", "net_out_dim", "=", "net", ".", "out_dim", "\n", "", "self", ".", "action_mean", "=", "nn", ".", "Linear", "(", "net_out_dim", ",", "action_dim", ")", "\n", "self", ".", "action_mean", ".", "weight", ".", "data", ".", "mul_", "(", "0.1", ")", "\n", "self", ".", "action_mean", ".", "bias", ".", "data", ".", "mul_", "(", "0.0", ")", "\n", "self", ".", "action_log_std", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "action_dim", ")", "*", "log_std", ",", "requires_grad", "=", "not", "fix_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy_gaussian.PolicyGaussian.forward": [[19, 25], ["policy_gaussian.PolicyGaussian.net", "policy_gaussian.PolicyGaussian.action_mean", "policy_gaussian.PolicyGaussian.action_log_std.expand_as", "torch.exp", "core.distributions.DiagGaussian"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "net", "(", "x", ")", "\n", "action_mean", "=", "self", ".", "action_mean", "(", "x", ")", "\n", "action_log_std", "=", "self", ".", "action_log_std", ".", "expand_as", "(", "action_mean", ")", "\n", "action_std", "=", "torch", ".", "exp", "(", "action_log_std", ")", "\n", "return", "DiagGaussian", "(", "action_mean", ",", "action_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy_gaussian.PolicyGaussian.get_fim": [[26, 39], ["policy_gaussian.PolicyGaussian.forward", "policy_gaussian.PolicyGaussian.action_log_std.exp().pow().squeeze().repeat", "policy_gaussian.PolicyGaussian.named_parameters", "x.size", "policy_gaussian.PolicyGaussian.detach", "policy_gaussian.PolicyGaussian.action_log_std.exp().pow().squeeze", "param.view", "policy_gaussian.PolicyGaussian.action_log_std.exp().pow", "policy_gaussian.PolicyGaussian.action_log_std.exp"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp"], ["", "def", "get_fim", "(", "self", ",", "x", ")", ":", "\n", "        ", "dist", "=", "self", ".", "forward", "(", "x", ")", "\n", "cov_inv", "=", "self", ".", "action_log_std", ".", "exp", "(", ")", ".", "pow", "(", "-", "2", ")", ".", "squeeze", "(", "0", ")", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "param_count", "=", "0", "\n", "std_index", "=", "0", "\n", "id", "=", "0", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "name", "==", "\"action_log_std\"", ":", "\n", "                ", "std_id", "=", "id", "\n", "std_index", "=", "param_count", "\n", "", "param_count", "+=", "param", ".", "view", "(", "-", "1", ")", ".", "shape", "[", "0", "]", "\n", "id", "+=", "1", "\n", "", "return", "cov_inv", ".", "detach", "(", ")", ",", "dist", ".", "loc", ",", "{", "'std_id'", ":", "std_id", ",", "'std_index'", ":", "std_index", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.__init__": [[5, 7], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.forward": [[8, 11], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"This function should return a distribution to sample action from\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.select_action": [[12, 16], ["policy.Policy.forward", "policy.Policy.mean_sample", "policy.Policy.sample"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.mean_sample", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample"], ["", "def", "select_action", "(", "self", ",", "x", ",", "mean_action", "=", "False", ")", ":", "\n", "        ", "dist", "=", "self", ".", "forward", "(", "x", ")", "\n", "action", "=", "dist", ".", "mean_sample", "(", ")", "if", "mean_action", "else", "dist", ".", "sample", "(", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.get_kl": [[17, 20], ["policy.Policy.forward", "policy.Policy.kl"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.kl"], ["", "def", "get_kl", "(", "self", ",", "x", ")", ":", "\n", "        ", "dist", "=", "self", ".", "forward", "(", "x", ")", "\n", "return", "dist", ".", "kl", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy.Policy.get_log_prob": [[21, 24], ["policy.Policy.forward", "policy.Policy.log_prob"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.log_prob"], ["", "def", "get_log_prob", "(", "self", ",", "x", ",", "action", ")", ":", "\n", "        ", "dist", "=", "self", ".", "forward", "(", "x", ")", "\n", "return", "dist", ".", "log_prob", "(", "action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.common.estimate_advantages": [[5, 26], ["utils.batch_to", "type", "type.", "type.", "reversed", "utils.batch_to", "torch.device", "rewards.size", "rewards.size", "range", "tensor_type.std", "rewards.size", "tensor_type.mean"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.batch_to", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.torch.batch_to", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.std", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["def", "estimate_advantages", "(", "rewards", ",", "masks", ",", "values", ",", "gamma", ",", "tau", ")", ":", "\n", "    ", "device", "=", "rewards", ".", "device", "\n", "rewards", ",", "masks", ",", "values", "=", "batch_to", "(", "torch", ".", "device", "(", "'cpu'", ")", ",", "rewards", ",", "masks", ",", "values", ")", "\n", "tensor_type", "=", "type", "(", "rewards", ")", "\n", "deltas", "=", "tensor_type", "(", "rewards", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "advantages", "=", "tensor_type", "(", "rewards", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n", "prev_value", "=", "0", "\n", "prev_advantage", "=", "0", "\n", "for", "i", "in", "reversed", "(", "range", "(", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "        ", "deltas", "[", "i", "]", "=", "rewards", "[", "i", "]", "+", "gamma", "*", "prev_value", "*", "masks", "[", "i", "]", "-", "values", "[", "i", "]", "\n", "advantages", "[", "i", "]", "=", "deltas", "[", "i", "]", "+", "gamma", "*", "tau", "*", "prev_advantage", "*", "masks", "[", "i", "]", "\n", "\n", "prev_value", "=", "values", "[", "i", ",", "0", "]", "\n", "prev_advantage", "=", "advantages", "[", "i", ",", "0", "]", "\n", "\n", "", "returns", "=", "values", "+", "advantages", "\n", "advantages", "=", "(", "advantages", "-", "advantages", ".", "mean", "(", ")", ")", "/", "advantages", ".", "std", "(", ")", "\n", "\n", "advantages", ",", "returns", "=", "batch_to", "(", "device", ",", "advantages", ",", "returns", ")", "\n", "return", "advantages", ",", "returns", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.trajbatch.TrajBatch.__init__": [[6, 17], ["zip", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "memory.append", "next", "next", "next", "next", "next", "next", "memory.sample"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.agents.agent.Agent.sample"], ["    ", "def", "__init__", "(", "self", ",", "memory_list", ")", ":", "\n", "        ", "memory", "=", "memory_list", "[", "0", "]", "\n", "for", "x", "in", "memory_list", "[", "1", ":", "]", ":", "\n", "            ", "memory", ".", "append", "(", "x", ")", "\n", "", "self", ".", "batch", "=", "zip", "(", "*", "memory", ".", "sample", "(", ")", ")", "\n", "self", ".", "states", "=", "np", ".", "stack", "(", "next", "(", "self", ".", "batch", ")", ")", "\n", "self", ".", "actions", "=", "np", ".", "stack", "(", "next", "(", "self", ".", "batch", ")", ")", "\n", "self", ".", "masks", "=", "np", ".", "stack", "(", "next", "(", "self", ".", "batch", ")", ")", "\n", "self", ".", "next_states", "=", "np", ".", "stack", "(", "next", "(", "self", ".", "batch", ")", ")", "\n", "self", ".", "rewards", "=", "np", ".", "stack", "(", "next", "(", "self", ".", "batch", ")", ")", "\n", "self", ".", "exps", "=", "np", ".", "stack", "(", "next", "(", "self", ".", "batch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.DiagGaussian.__init__": [[8, 10], ["torch.distributions.Normal.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loc", ",", "scale", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loc", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.DiagGaussian.kl": [[11, 20], ["distributions.DiagGaussian.scale.log", "distributions.DiagGaussian.loc.detach", "distributions.DiagGaussian.scale.detach", "distributions.DiagGaussian.detach", "kl.sum", "distributions.DiagGaussian.pow", "scale1.pow"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log"], ["", "def", "kl", "(", "self", ")", ":", "\n", "        ", "loc1", "=", "self", ".", "loc", "\n", "scale1", "=", "self", ".", "scale", "\n", "log_scale1", "=", "self", ".", "scale", ".", "log", "(", ")", "\n", "loc0", "=", "self", ".", "loc", ".", "detach", "(", ")", "\n", "scale0", "=", "self", ".", "scale", ".", "detach", "(", ")", "\n", "log_scale0", "=", "log_scale1", ".", "detach", "(", ")", "\n", "kl", "=", "log_scale1", "-", "log_scale0", "+", "(", "scale0", ".", "pow", "(", "2", ")", "+", "(", "loc0", "-", "loc1", ")", ".", "pow", "(", "2", ")", ")", "/", "(", "2.0", "*", "scale1", ".", "pow", "(", "2", ")", ")", "-", "0.5", "\n", "return", "kl", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.DiagGaussian.log_prob": [[21, 23], ["super().log_prob().sum", "super().log_prob"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.log_prob"], ["", "def", "log_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "log_prob", "(", "value", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.DiagGaussian.mean_sample": [[24, 26], ["None"], "methods", ["None"], ["", "def", "mean_sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.__init__": [[30, 32], ["torch.distributions.Categorical.__init__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "probs", "=", "None", ",", "logits", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "probs", ",", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.kl": [[33, 42], ["distributions.Categorical.scale.log", "distributions.Categorical.loc.detach", "distributions.Categorical.scale.detach", "distributions.Categorical.detach", "kl.sum", "distributions.Categorical.pow", "scale1.pow"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log"], ["", "def", "kl", "(", "self", ")", ":", "\n", "        ", "loc1", "=", "self", ".", "loc", "\n", "scale1", "=", "self", ".", "scale", "\n", "log_scale1", "=", "self", ".", "scale", ".", "log", "(", ")", "\n", "loc0", "=", "self", ".", "loc", ".", "detach", "(", ")", "\n", "scale0", "=", "self", ".", "scale", ".", "detach", "(", ")", "\n", "log_scale0", "=", "log_scale1", ".", "detach", "(", ")", "\n", "kl", "=", "log_scale1", "-", "log_scale0", "+", "(", "scale0", ".", "pow", "(", "2", ")", "+", "(", "loc0", "-", "loc1", ")", ".", "pow", "(", "2", ")", ")", "/", "(", "2.0", "*", "scale1", ".", "pow", "(", "2", ")", ")", "-", "0.5", "\n", "return", "kl", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.log_prob": [[43, 45], ["super().log_prob().unsqueeze", "super().log_prob"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.log_prob"], ["", "def", "log_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "log_prob", "(", "value", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.distributions.Categorical.mean_sample": [[46, 48], ["distributions.Categorical.probs.argmax"], "methods", ["None"], ["", "def", "mean_sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "probs", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.critic.Value.__init__": [[6, 14], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "critic.Value.value_head.weight.data.mul_", "critic.Value.value_head.bias.data.mul_"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "net_out_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "if", "net_out_dim", "is", "None", ":", "\n", "            ", "net_out_dim", "=", "net", ".", "out_dim", "\n", "", "self", ".", "value_head", "=", "nn", ".", "Linear", "(", "net_out_dim", ",", "1", ")", "\n", "self", ".", "value_head", ".", "weight", ".", "data", ".", "mul_", "(", "0.1", ")", "\n", "self", ".", "value_head", ".", "bias", ".", "data", ".", "mul_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.critic.Value.forward": [[15, 19], ["critic.Value.net", "critic.Value.value_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "net", "(", "x", ")", "\n", "value", "=", "self", ".", "value_head", "(", "x", ")", "\n", "return", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy_disc.PolicyDiscrete.__init__": [[8, 17], ["core.policy.Policy.__init__", "torch.Linear", "policy_disc.PolicyDiscrete.action_head.weight.data.mul_", "policy_disc.PolicyDiscrete.action_head.bias.data.mul_"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "action_num", ",", "net_out_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "type", "=", "'discrete'", "\n", "if", "net_out_dim", "is", "None", ":", "\n", "            ", "net_out_dim", "=", "net", ".", "out_dim", "\n", "", "self", ".", "net", "=", "net", "\n", "self", ".", "action_head", "=", "nn", ".", "Linear", "(", "net_out_dim", ",", "action_num", ")", "\n", "self", ".", "action_head", ".", "weight", ".", "data", ".", "mul_", "(", "0.1", ")", "\n", "self", ".", "action_head", ".", "bias", ".", "data", ".", "mul_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy_disc.PolicyDiscrete.forward": [[18, 22], ["policy_disc.PolicyDiscrete.net", "torch.softmax", "core.distributions.Categorical", "policy_disc.PolicyDiscrete.action_head"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.softmax"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "net", "(", "x", ")", "\n", "action_prob", "=", "torch", ".", "softmax", "(", "self", ".", "action_head", "(", "x", ")", ",", "dim", "=", "1", ")", "\n", "return", "Categorical", "(", "probs", "=", "action_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.policy_disc.PolicyDiscrete.get_fim": [[23, 27], ["policy_disc.PolicyDiscrete.forward", "policy_disc.PolicyDiscrete.pow().view().detach", "policy_disc.PolicyDiscrete.pow().view", "policy_disc.PolicyDiscrete.pow"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward"], ["", "def", "get_fim", "(", "self", ",", "x", ")", ":", "\n", "        ", "action_prob", "=", "self", ".", "forward", "(", "x", ")", "\n", "M", "=", "action_prob", ".", "pow", "(", "-", "1", ")", ".", "view", "(", "-", "1", ")", ".", "detach", "(", ")", "\n", "return", "M", ",", "action_prob", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.pose2bvh_debug.write_standard_bvh": [[9, 44], ["os.path.dirname", "os.path.basename", "os.path.join", "os.path.join", "bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter", "humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint", "bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton", "humanoid_1205_skeleton.H36mSkeleton.poses2bvh", "os.path.exists", "os.makedirs", "os.path.basename.rfind"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.poses2bvh"], ["def", "write_standard_bvh", "(", "outbvhfilepath", ",", "prediction3dpoint", ")", ":", "\n", "    ", "'''\n    :param outbvhfilepath:\n    :param prediction3dpoint:\n    :return:\n    '''", "\n", "\n", "# scale 100 for bvhacker viewer", "\n", "for", "frame", "in", "prediction3dpoint", ":", "\n", "        ", "for", "point3d", "in", "frame", ":", "\n", "            ", "point3d", "[", "0", "]", "*=", "100", "\n", "point3d", "[", "1", "]", "*=", "100", "\n", "point3d", "[", "2", "]", "*=", "100", "\n", "\n", "# X = point3d[0]", "\n", "# Y = point3d[1]", "\n", "# Z = point3d[2]", "\n", "\n", "# point3d[0] = -X", "\n", "# point3d[1] = Z", "\n", "# point3d[2] = Y", "\n", "\n", "", "", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "outbvhfilepath", ")", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "outbvhfilepath", ")", "\n", "video_name", "=", "basename", "[", ":", "basename", ".", "rfind", "(", "'.'", ")", "]", "\n", "bvhfileDirectory", "=", "os", ".", "path", ".", "join", "(", "dir_name", ",", "video_name", ",", "\"bvh\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "bvhfileDirectory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "bvhfileDirectory", ")", "\n", "", "bvhfileName", "=", "os", ".", "path", ".", "join", "(", "dir_name", ",", "video_name", ",", "\"bvh\"", ",", "\"{}_h36m.bvh\"", ".", "format", "(", "video_name", ")", ")", "\n", "\n", "Converter", "=", "humanoid_1205_skeleton", ".", "SkeletonConverter", "(", ")", "\n", "prediction3dpoint", "=", "Converter", ".", "convert_to_21joint", "(", "prediction3dpoint", ")", "\n", "\n", "human36m_skeleton", "=", "humanoid_1205_skeleton", ".", "H36mSkeleton", "(", ")", "\n", "human36m_skeleton", ".", "poses2bvh", "(", "prediction3dpoint", ",", "output_file", "=", "bvhfileName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.__init__": [[31, 42], ["posegan_basementclass.PoseGANBasement.__init__", "nn.MSELoss().to", "posegan_train.PoseGAN.data_preparation", "posegan_train.PoseGAN.dataloader_preparation", "posegan_train.PoseGAN.s911_detect2d_dataloader_preparation", "posegan_train.PoseGAN.model_preparation", "nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.data_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.dataloader_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.s911_detect2d_dataloader_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.model_preparation"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "PoseGANBasement", ".", "__init__", "(", "self", ",", "args", ")", "\n", "# init param", "\n", "# self.augment_len = 32", "\n", "self", ".", "MSE", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# prepare data and dataloader", "\n", "self", ".", "data_preparation", "(", ")", "\n", "self", ".", "dataloader_preparation", "(", ")", "\n", "self", ".", "s911_detect2d_dataloader_preparation", "(", ")", "\n", "# prepare model and optimizer", "\n", "self", ".", "model_preparation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.fit": [[43, 89], ["range", "posegan_train.PoseGAN.logger.info", "posegan_train.PoseGAN.evaluate_posenet_withPCK", "posegan_train.PoseGAN.evaluate_posenet_withPCK", "posegan_train.PoseGAN.summary.summary_epoch_update", "time.time.time", "posegan_train.PoseGAN.train_posegan", "posegan_train.PoseGAN.lr_scheduler_P.step", "posegan_train.PoseGAN.lr_scheduler_Gcam.step", "posegan_train.PoseGAN.lr_scheduler_Dcam.step", "posegan_train.PoseGAN.summary.summary_epoch_update", "posegan_train.PoseGAN.evaluate_posenet", "posegan_train.PoseGAN.evaluate_trajnet", "posegan_train.PoseGAN.evaluate_posenet", "posegan_train.PoseGAN.evaluate_posenet_withPCK", "posegan_train.PoseGAN.logging", "posegan_train.PoseGAN.evaluate_posenet", "posegan_train.PoseGAN.evaluate_trajnet", "posegan_train.PoseGAN.update_fixedfake_train_generator", "posegan_train.PoseGAN.train_posenet_realpose", "posegan_train.PoseGAN.train_trajnet_realpose", "posegan_train.PoseGAN.evaluate_posenet_withPCK", "posegan_train.PoseGAN.evaluate_posenet"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.evaluate_posenet_withPCK", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.evaluate_posenet_withPCK", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_epoch_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.train_posegan", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_epoch_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_posenet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_trajnet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_posenet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.evaluate_posenet_withPCK", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.logging", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_posenet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_trajnet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.update_fixedfake_train_generator", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.train_posenet_realpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.train_trajnet_realpose", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.evaluate_posenet_withPCK", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_posenet"], ["", "def", "fit", "(", "self", ",", "args", ")", ":", "\n", "###################################", "\n", "# Train start here.", "\n", "###################################", "\n", "# load pretrain if used.", "\n", "        ", "if", "args", ".", "pretrain", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Check pretrain model performance.'", ")", "\n", "val_rlt", "=", "{", "}", "\n", "for", "val_set_key", "in", "self", ".", "val_generator_dict", ":", "\n", "                ", "self", ".", "evaluate_posenet", "(", "tag", "=", "'fake'", ",", "valset", "=", "val_set_key", ")", "\n", "self", ".", "evaluate_trajnet", "(", "tag", "=", "'fake'", ",", "valset", "=", "val_set_key", ")", "\n", "", "self", ".", "evaluate_posenet_withPCK", "(", "tag", "=", "'fake'", ",", "valset", "=", "'3dhp_flip'", ")", "\n", "for", "val_set_key", "in", "self", ".", "val_generator_dict", ":", "\n", "                ", "val_rlt", "[", "val_set_key", "]", "=", "self", ".", "evaluate_posenet", "(", "tag", "=", "'real'", ",", "valset", "=", "val_set_key", ")", "\n", "", "self", ".", "evaluate_posenet_withPCK", "(", "tag", "=", "'real'", ",", "valset", "=", "'3dhp_flip'", ")", "\n", "self", ".", "summary", ".", "summary_epoch_update", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "            ", "epoch_start_time", "=", "time", "(", ")", "\n", "\n", "self", ".", "train_posegan", "(", ")", "\n", "\n", "if", "self", ".", "summary", ".", "epoch", ">", "args", ".", "P_start_ep", ":", "# start record the performance when P training start.", "\n", "                ", "val_rlt", "=", "{", "}", "\n", "\n", "for", "val_set_key", "in", "self", ".", "val_generator_dict", ":", "\n", "                    ", "val_rlt", "[", "val_set_key", "]", "=", "self", ".", "evaluate_posenet", "(", "tag", "=", "'fake'", ",", "valset", "=", "val_set_key", ")", "\n", "self", ".", "evaluate_trajnet", "(", "tag", "=", "'fake'", ",", "valset", "=", "val_set_key", ")", "\n", "", "self", ".", "evaluate_posenet_withPCK", "(", "tag", "=", "'fake'", ",", "valset", "=", "'3dhp_flip'", ")", "\n", "\n", "if", "args", ".", "add_random_cam", ":", "\n", "                    ", "self", ".", "update_fixedfake_train_generator", "(", ")", "\n", "self", ".", "train_posenet_realpose", "(", ")", "\n", "self", ".", "train_trajnet_realpose", "(", ")", "\n", "for", "val_set_key", "in", "self", ".", "val_generator_dict", ":", "\n", "                        ", "val_rlt", "[", "val_set_key", "]", "=", "self", ".", "evaluate_posenet", "(", "tag", "=", "'real'", ",", "valset", "=", "val_set_key", ")", "\n", "", "self", ".", "evaluate_posenet_withPCK", "(", "tag", "=", "'real'", ",", "valset", "=", "'3dhp_flip'", ")", "# \u5355\u72ec\u5f00\u4e00\u4e2a", "\n", "\n", "# log", "\n", "", "self", ".", "logging", "(", "val_rlt", ",", "epoch_start_time", ")", "\n", "\n", "# udpate per epoch", "\n", "", "self", ".", "lr_scheduler_P", ".", "step", "(", ")", "\n", "self", ".", "lr_scheduler_Gcam", ".", "step", "(", ")", "\n", "self", ".", "lr_scheduler_Dcam", ".", "step", "(", ")", "\n", "self", ".", "summary", ".", "summary_epoch_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.model_preparation": [[90, 94], ["posegan_train.PoseGAN._model_preparation_pos", "posegan_train.PoseGAN._model_preparation_traj", "posegan_train.PoseGAN._model_preparation_Gcam"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._model_preparation_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._model_preparation_traj", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._model_preparation_Gcam"], ["", "", "def", "model_preparation", "(", "self", ")", ":", "\n", "        ", "self", ".", "_model_preparation_pos", "(", ")", "\n", "self", ".", "_model_preparation_traj", "(", ")", "\n", "self", ".", "_model_preparation_Gcam", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.train_posenet_fakepose_camed": [[95, 112], ["posegan_train.PoseGAN.model_pos_train.train", "cam_rlt_dict[].detach", "cam_rlt_dict[].detach", "cam_rlt_dict[].detach.detach", "posegan_train.PoseGAN._train_batch_posenet", "posegan_train.PoseGAN.writer.add_scalar", "posegan_train.PoseGAN.summary.summary_train_fakepose_iter_num_update", "cam_rlt_dict[].detach.detach", "cam_rlt_dict[].detach.detach.detach", "inputs_3d.detach", "loss_3d_pos.item"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._train_batch_posenet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_fakepose_iter_num_update"], ["", "def", "train_posenet_fakepose_camed", "(", "self", ",", "cam_rlt_dict", ",", "tag", "=", "'_fake'", ")", ":", "\n", "        ", "epoch_loss_3d_train", "=", "0", "\n", "N", "=", "0", "\n", "self", ".", "model_pos_train", ".", "train", "(", ")", "\n", "# prepare fake batch", "\n", "pose3D_camed", "=", "cam_rlt_dict", "[", "'pose3D_camed'", "]", ".", "detach", "(", ")", "\n", "pose2D_camed", "=", "cam_rlt_dict", "[", "'pose2D_camed'", "]", ".", "detach", "(", ")", "\n", "\n", "inputs_2d", "=", "pose2D_camed", ".", "detach", "(", ")", "\n", "inputs_3d", "=", "pose3D_camed", ".", "detach", "(", ")", "[", ":", ",", "0", "+", "self", ".", "pad", ":", "0", "+", "self", ".", "pad", "+", "1", "]", "\n", "# now get fake data ready for train.", "\n", "loss_3d_pos", ",", "epoch_loss_3d_train", ",", "N", "=", "self", ".", "_train_batch_posenet", "(", "inputs_2d", ".", "detach", "(", ")", ",", "inputs_3d", ".", "detach", "(", ")", ",", "\n", "epoch_loss_3d_train", ",", "N", ")", "\n", "# batch-wise log", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_P_batch/{}/loss_3d_pos'", ".", "format", "(", "tag", ")", ",", "loss_3d_pos", ".", "item", "(", ")", ",", "\n", "self", ".", "summary", ".", "train_fakepose_iter_num", ")", "\n", "self", ".", "summary", ".", "summary_train_fakepose_iter_num_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.train_trajnet_fakepose_camed": [[114, 131], ["posegan_train.PoseGAN.model_traj_train.train", "cam_rlt_dict[].detach", "cam_rlt_dict[].detach", "cam_rlt_dict[].detach.detach", "posegan_train.PoseGAN._train_batch_trajnet", "posegan_train.PoseGAN.writer.add_scalar", "posegan_train.PoseGAN.summary.summary_train_faketraj_iter_num_update", "cam_rlt_dict[].detach.detach", "cam_rlt_dict[].detach.detach.detach", "inputs_3d.detach", "loss_3d_traj.item"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._train_batch_trajnet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_faketraj_iter_num_update"], ["", "def", "train_trajnet_fakepose_camed", "(", "self", ",", "cam_rlt_dict", ",", "tag", "=", "'_fake'", ")", ":", "\n", "        ", "epoch_loss_3d_train", "=", "0", "\n", "N", "=", "0", "\n", "self", ".", "model_traj_train", ".", "train", "(", ")", "\n", "# prepare fake batch", "\n", "pose3D_camed", "=", "cam_rlt_dict", "[", "'pose3D_camed'", "]", ".", "detach", "(", ")", "\n", "pose2D_camed", "=", "cam_rlt_dict", "[", "'pose2D_camed'", "]", ".", "detach", "(", ")", "\n", "\n", "inputs_2d", "=", "pose2D_camed", ".", "detach", "(", ")", "\n", "inputs_3d", "=", "pose3D_camed", ".", "detach", "(", ")", "[", ":", ",", "0", "+", "self", ".", "pad", ":", "0", "+", "self", ".", "pad", "+", "1", "]", "\n", "# now get fake data ready for train.", "\n", "loss_3d_traj", ",", "epoch_loss_3d_train", ",", "N", "=", "self", ".", "_train_batch_trajnet", "(", "inputs_2d", ".", "detach", "(", ")", ",", "inputs_3d", ".", "detach", "(", ")", ",", "\n", "epoch_loss_3d_train", ",", "N", ")", "\n", "# batch-wise log", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_T_batch/{}/loss_3d_traj'", ".", "format", "(", "tag", ")", ",", "loss_3d_traj", ".", "item", "(", ")", ",", "\n", "self", ".", "summary", ".", "train_faketraj_iter_num", ")", "\n", "self", ".", "summary", ".", "summary_train_faketraj_iter_num_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.adv_loss": [[132, 154], ["model_dis", "model_dis", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "posegan_train.PoseGAN.MSE", "function.utils.get_discriminator_accuracy", "function.utils.get_discriminator_accuracy", "posegan_train.PoseGAN.writer.add_scalar", "posegan_train.PoseGAN.writer.add_scalar", "posegan_train.PoseGAN.writer.add_scalar", "model_dis.reshape", "torch.autograd.Variable().to.reshape", "model_dis.reshape", "torch.autograd.Variable().to.reshape", "posegan_train.PoseGAN.item", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.zeros", "model_dis.size", "model_dis.size"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_discriminator_accuracy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_discriminator_accuracy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "adv_loss", "(", "self", ",", "model_dis", ",", "data_real", ",", "data_fake", ",", "writer_name", ")", ":", "\n", "# Adversarial losses for 3D squence", "\n", "        ", "real_3d", "=", "model_dis", "(", "data_real", ")", "\n", "fake_3d", "=", "model_dis", "(", "data_fake", ")", "\n", "\n", "real_label_3d", "=", "Variable", "(", "torch", ".", "ones", "(", "real_3d", ".", "size", "(", ")", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "fake_label_3d", "=", "Variable", "(", "torch", ".", "zeros", "(", "fake_3d", ".", "size", "(", ")", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "adv_3d_loss", "=", "self", ".", "MSE", "(", "real_3d", ",", "fake_3d", ")", "\n", "# adv_3d_real_loss = self.MSE(real_3d, fake_label_3d)", "\n", "# adv_3d_fake_loss = self.MSE(fake_3d, real_label_3d)", "\n", "# # Total discriminators losses", "\n", "# adv_3d_loss = (adv_3d_real_loss + adv_3d_fake_loss) * 0.5", "\n", "\n", "# monitor training process", "\n", "###################################################", "\n", "real_acc", "=", "get_discriminator_accuracy", "(", "real_3d", ".", "reshape", "(", "-", "1", ")", ",", "real_label_3d", ".", "reshape", "(", "-", "1", ")", ")", "\n", "fake_acc", "=", "get_discriminator_accuracy", "(", "fake_3d", ".", "reshape", "(", "-", "1", ")", ",", "fake_label_3d", ".", "reshape", "(", "-", "1", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "writer_name", "+", "'_real_acc'", ",", "real_acc", ",", "self", ".", "summary", ".", "train_iter_num", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "writer_name", "+", "'_fake_acc'", ",", "fake_acc", ",", "self", ".", "summary", ".", "train_iter_num", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "writer_name", "+", "'_adv_loss'", ",", "adv_3d_loss", ".", "item", "(", ")", ",", "self", ".", "summary", ".", "train_iter_num", ")", "\n", "return", "adv_3d_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.train_posegan": [[155, 245], ["time.time.time", "posegan_train.PoseGAN.model_Gcam.train", "posegan_train.PoseGAN.model_Dcam.train", "progress.bar.Bar", "posegan_train.PoseGAN.aug_generator.next_epoch", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "function.gan_utils.pose_seq_bl_aug_batch", "common.camera.cam2world_sktpos", "function.utils.set_grad", "function.utils.set_grad", "posegan_train.PoseGAN.optimizer_Gcam.zero_grad", "posegan_train.PoseGAN.model_Gcam", "posegan_train.PoseGAN.adv_loss", "posegan_train.PoseGAN.backward", "nn.utils.clip_grad_norm_", "posegan_train.PoseGAN.optimizer_Gcam.step", "posegan_train.PoseGAN.summary.summary_train_iter_num_update", "progress.bar.Bar.next", "batch_3d.astype", "batch_2d.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "posegan_train.PoseGAN.model_Gcam.parameters", "posegan_train.PoseGAN.train_posenet_fakepose_camed", "posegan_train.PoseGAN.train_trajnet_fakepose_camed", "function.utils.set_grad", "function.utils.set_grad", "posegan_train.PoseGAN._train_dis", "posegan_train.PoseGAN._zip_GIFplot_array", "os.path.join", "posegan_train.PoseGAN.logger.info", "function.viz.Wrap_plot_seq_gif", "posegan_train.PoseGAN.random_aug_d2d", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.pose_seq_bl_aug_batch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.camera.cam2world_sktpos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.set_grad", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.set_grad", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.adv_loss", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_iter_num_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.train_posenet_fakepose_camed", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_train.PoseGAN.train_trajnet_fakepose_camed", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.set_grad", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.set_grad", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._train_dis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._zip_GIFplot_array", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.Wrap_plot_seq_gif", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.random_aug_d2d"], ["", "def", "train_posegan", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "batch_num", "=", "0", "\n", "\n", "self", ".", "model_Gcam", ".", "train", "(", ")", "\n", "self", ".", "model_Dcam", ".", "train", "(", ")", "\n", "\n", "bar", "=", "Bar", "(", "'Train pose gan'", ",", "max", "=", "self", ".", "aug_generator", ".", "num_batches", ")", "\n", "for", "_", ",", "_", ",", "batch_3d", ",", "batch_2d", ",", "_", "in", "self", ".", "aug_generator", ".", "next_epoch", "(", ")", ":", "\n", "            ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch_3d", ".", "astype", "(", "'float32'", ")", ")", "# b x t x j x 3", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "# b x t x j x 2", "\n", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "\n", "# random bl augment", "\n", "", "inputs_3d", "=", "pose_seq_bl_aug_batch", "(", "inputs_3d", ")", "\n", "inputs_3dworld_origin", "=", "cam2world_sktpos", "(", "inputs_3d", ")", "\n", "\n", "# train gan", "\n", "##################################################", "\n", "#######      Train Generator     #################", "\n", "##################################################", "\n", "set_grad", "(", "[", "self", ".", "model_Gcam", "]", ",", "True", ")", "\n", "set_grad", "(", "[", "self", ".", "model_Dcam", "]", ",", "False", ")", "\n", "self", ".", "optimizer_Gcam", ".", "zero_grad", "(", ")", "\n", "\n", "###################################################", "\n", "reset_root", "=", "inputs_3d", "[", ":", ",", ":", "1", ",", ":", "1", ",", ":", "]", "*", "1.0", "\n", "pose_recoverd_uncamed", "=", "inputs_3d", "*", "1.", "-", "reset_root", "\n", "\n", "cam_rlt_dict", "=", "self", ".", "model_Gcam", "(", "pose_recoverd_uncamed", ")", "\n", "pose2D_camed", "=", "cam_rlt_dict", "[", "'pose2D_camed'", "]", "\n", "adv_cam_loss", "=", "self", ".", "adv_loss", "(", "self", ".", "model_Dcam", ",", "inputs_2d", ",", "pose2D_camed", ",", "\n", "writer_name", "=", "'train_G_iter_acc/gcam'", ")", "\n", "# Update generators", "\n", "###################################################", "\n", "adv_cam_loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model_Gcam", ".", "parameters", "(", ")", ",", "max_norm", "=", "1", ")", "\n", "self", ".", "optimizer_Gcam", ".", "step", "(", ")", "\n", "\n", "################################################", "\n", "#######      Train PoseNet     #################", "\n", "################################################", "\n", "if", "self", ".", "summary", ".", "epoch", ">", "args", ".", "P_start_ep", ":", "\n", "                ", "self", ".", "train_posenet_fakepose_camed", "(", "cam_rlt_dict", ")", "\n", "self", ".", "train_trajnet_fakepose_camed", "(", "cam_rlt_dict", ")", "\n", "\n", "##################################################", "\n", "#######      Train Discriminator     #############", "\n", "##################################################", "\n", "", "d3d_real_acc", ",", "d3d_fake_acc", "=", "0", ",", "0", "\n", "if", "self", ".", "summary", ".", "train_iter_num", "%", "args", ".", "df", "==", "0", ":", "\n", "                ", "set_grad", "(", "[", "self", ".", "model_Gcam", "]", ",", "False", ")", "\n", "set_grad", "(", "[", "self", ".", "model_Dcam", "]", ",", "True", ")", "\n", "\n", "# train Dcam", "\n", "d3d_real_acc", ",", "d3d_fake_acc", "=", "self", ".", "_train_dis", "(", "model_dis", "=", "self", ".", "model_Dcam", ",", "\n", "data_real", "=", "self", ".", "random_aug_d2d", "(", "inputs_2d", ")", ",", "\n", "data_fake", "=", "pose2D_camed", ",", "\n", "writer_name", "=", "'train_D_iter_acc/dcam'", ",", "\n", "fake_data_pool", "=", "self", ".", "fake_cam_sample", ",", "\n", "optimizer", "=", "self", ".", "optimizer_Dcam", ")", "\n", "# visualize result", "\n", "", "if", "self", ".", "summary", ".", "train_iter_num", "%", "5000", "==", "0", ":", "\n", "                ", "lables", "=", "[", "'input_world'", ",", "'input_cam3d'", ",", "'input_cam2d'", ",", "'pose_recoverd_uncamed_cam3d'", ",", "'RT_cam3d'", ",", "'RT_cam2d'", "]", "\n", "\n", "seqs", "=", "self", ".", "_zip_GIFplot_array", "(", "[", "\n", "inputs_3dworld_origin", ",", "inputs_3d", ",", "inputs_2d", ",", "\n", "pose_recoverd_uncamed", ",", "cam_rlt_dict", "[", "'pose3D_camed'", "]", ",", "cam_rlt_dict", "[", "'pose2D_camed'", "]", "\n", "]", ")", "\n", "gif_save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'trainingGif/epoch{:0>3d}_batch{:0>3d}.gif'", ".", "format", "(", "\n", "self", ".", "summary", ".", "epoch", ",", "batch_num", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'plotting image-->{}'", ".", "format", "(", "gif_save_path", ")", ")", "\n", "Wrap_plot_seq_gif", "(", "seqs", "=", "seqs", ",", "labs", "=", "lables", ",", "save_path", "=", "gif_save_path", ")", "\n", "\n", "# update writer iter num", "\n", "", "self", ".", "summary", ".", "summary_train_iter_num_update", "(", ")", "\n", "\n", "bar", ".", "suffix", "=", "'(epoch:{epoch}) | ({batch}/{size}) | Batch: {bt:.3f}s | Total: {ttl:} | ETA: {eta:} '", "'| d3d_real_acc: {d3d_real_acc: .4f} | d3d_fake_acc: {d3d_fake_acc: .4f} '", ".", "format", "(", "epoch", "=", "self", ".", "summary", ".", "epoch", ",", "batch", "=", "batch_num", ",", "size", "=", "self", ".", "aug_generator", ".", "num_batches", ",", "\n", "bt", "=", "(", "time", "(", ")", "-", "start_time", ")", "/", "(", "batch_num", "+", "1", ")", ",", "ttl", "=", "bar", ".", "elapsed_td", ",", "eta", "=", "bar", ".", "eta_td", ",", "\n", "d3d_real_acc", "=", "d3d_real_acc", ",", "d3d_fake_acc", "=", "d3d_fake_acc", ")", "\n", "bar", ".", "next", "(", ")", "\n", "batch_num", "=", "batch_num", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.__init__": [[34, 54], ["torch.device", "torch.device", "torch.device", "torch.device", "os.join", "os.join", "print", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "function.utils.Summary", "posegan_basementclass.PoseGANBasement.summary.create_summary", "function.logger.create_logger", "posegan_basementclass.PoseGANBasement.logger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.create_summary", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.logger.create_logger"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "# init param", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# define checkpoint directory # Create checkpoint directory if it does not exist", "\n", "# self.args.checkpoint = path.join(self.args.checkpoint, self.args.note,", "\n", "#                                  datetime.datetime.now().strftime('%m%d%H%M%S'))", "\n", "self", ".", "args", ".", "checkpoint", "=", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint", ",", "self", ".", "args", ".", "note", ")", "\n", "print", "(", "'INFO: creat log folder at {}'", ".", "format", "(", "self", ".", "args", ".", "checkpoint", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "args", ".", "checkpoint", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint", ",", "'ckpt'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# prepare monitor", "\n", "# Init monitor for net work training", "\n", "#########################################################", "\n", "self", ".", "summary", "=", "Summary", "(", "self", ".", "args", ".", "checkpoint", ")", "\n", "self", ".", "writer", "=", "self", ".", "summary", ".", "create_summary", "(", ")", "\n", "self", ".", "logger", "=", "create_logger", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint", ",", "'log.txt'", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.logging": [[55, 86], ["posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement.h36m_p1_s911.append", "min", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "posegan_basementclass.PoseGANBasement.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "posegan_basementclass.PoseGANBasement.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "time.time.time", "posegan_basementclass.PoseGANBasement.model_pos_train.state_dict", "posegan_basementclass.PoseGANBasement.model_traj_train.state_dict", "posegan_basementclass.PoseGANBasement.model_pos_train.state_dict", "posegan_basementclass.PoseGANBasement.model_traj_train.state_dict"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save"], ["", "def", "logging", "(", "self", ",", "val_rlt", ",", "epoch_start_time", ")", ":", "\n", "        ", "\"\"\"\n        recording the process of posenet, and saving model.\n        \"\"\"", "\n", "lr", "=", "self", ".", "optimizer_P", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "losses_str", "=", "' '", ".", "join", "(", "[", "'{}: {:.4f}'", ".", "format", "(", "val_set_key", ",", "val_rlt", "[", "val_set_key", "]", "[", "'p1'", "]", ")", "for", "val_set_key", "in", "val_rlt", "]", ")", "\n", "dt", "=", "(", "time", "(", ")", "-", "epoch_start_time", ")", "/", "60", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'====> Epoch: {} Time: {:.2f} min {} lr: {:.5f}'", ".", "format", "(", "self", ".", "summary", ".", "epoch", ",", "dt", ",", "losses_str", ",", "lr", ")", ")", "\n", "\n", "# record the result list and save ckpt", "\n", "if", "self", ".", "summary", ".", "epoch", "<=", "2", ":", "\n", "            ", "self", ".", "h36m_p1_s911", "=", "[", "]", "\n", "", "self", ".", "h36m_p1_s911", ".", "append", "(", "val_rlt", "[", "'s911'", "]", "[", "'p1'", "]", ")", "\n", "# Save checkpoint if necessary", "\n", "if", "self", ".", "h36m_p1_s911", "[", "-", "1", "]", "==", "min", "(", "self", ".", "h36m_p1_s911", ")", ":", "\n", "            ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint", ",", "'ckpt'", ",", "'best_ckpt_S911.bin'", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Saving checkpoint to{}'", ".", "format", "(", "ckpt_path", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'model_pos'", ":", "self", ".", "model_pos_train", ".", "state_dict", "(", ")", ",", "\n", "'model_traj'", ":", "self", ".", "model_traj_train", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "ckpt_path", ")", "\n", "\n", "", "if", "self", ".", "summary", ".", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint", ",", "'ckpt'", ",", "'ckpt_ep_{:0>3d}.bin'", ".", "format", "(", "self", ".", "summary", ".", "epoch", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Saving checkpoint to{}'", ".", "format", "(", "ckpt_path", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'model_pos'", ":", "self", ".", "model_pos_train", ".", "state_dict", "(", ")", ",", "\n", "'model_traj'", ":", "self", ".", "model_traj_train", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "ckpt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.data_preparation": [[87, 120], ["posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement.dataset.subjects", "posegan_basementclass.PoseGANBasement.keypoints_preparation", "Human36mDataset", "KeyError", "posegan_basementclass.PoseGANBasement.dataset[].keys", "common.camera.world_to_camera", "positions_3d.append", "function.utils.get_contacts", "contact_labels.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.subjects", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.keypoints_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world_to_camera", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_contacts", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "", "def", "data_preparation", "(", "self", ")", ":", "\n", "###################################", "\n", "# prepare data", "\n", "###################################", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Loading dataset...'", ")", "\n", "dataset_path", "=", "'data/data_3d_'", "+", "self", ".", "args", ".", "dataset", "+", "'.npz'", "\n", "if", "self", ".", "args", ".", "dataset", "==", "'h36m'", ":", "\n", "            ", "from", "common", ".", "h36m_dataset", "import", "Human36mDataset", "\n", "self", ".", "dataset", "=", "Human36mDataset", "(", "dataset_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'Invalid dataset'", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Preparing dataset...'", ")", "\n", "for", "subject", "in", "self", ".", "dataset", ".", "subjects", "(", ")", ":", "\n", "            ", "for", "action", "in", "self", ".", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "                ", "anim", "=", "self", ".", "dataset", "[", "subject", "]", "[", "action", "]", "\n", "\n", "if", "'positions'", "in", "anim", ":", "\n", "                    ", "positions_3d", "=", "[", "]", "\n", "for", "cam", "in", "anim", "[", "'cameras'", "]", ":", "\n", "                        ", "pos_3d", "=", "world_to_camera", "(", "anim", "[", "'positions'", "]", ",", "R", "=", "cam", "[", "'orientation'", "]", ",", "t", "=", "cam", "[", "'translation'", "]", ")", "\n", "# pos_3d[:, 1:] -= pos_3d[:, :1] # Remove global offset, but keep trajectory in first position, no, keep here", "\n", "positions_3d", ".", "append", "(", "pos_3d", ")", "# T x J x 3", "\n", "", "anim", "[", "'positions_3d'", "]", "=", "positions_3d", "\n", "\n", "", "if", "'positions'", "in", "anim", ":", "\n", "                    ", "contact_labels", "=", "[", "]", "\n", "for", "cam", "in", "anim", "[", "'cameras'", "]", ":", "\n", "                        ", "contact_label", "=", "get_contacts", "(", "anim", "[", "'positions'", "]", ")", "\n", "contact_labels", ".", "append", "(", "contact_label", ")", "# T x 2 x 1", "\n", "", "anim", "[", "'contact_labels'", "]", "=", "contact_labels", "\n", "\n", "", "", "", "self", ".", "keypoints_preparation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.keypoints_preparation": [[121, 166], ["posegan_basementclass.PoseGANBasement.logger.info", "numpy.load", "posegan_basementclass.PoseGANBasement.keypoints[].item", "posegan_basementclass.PoseGANBasement.dataset.subjects", "posegan_basementclass.PoseGANBasement.keypoints.keys", "list", "list", "list", "list", "posegan_basementclass.PoseGANBasement.dataset[].keys", "posegan_basementclass.PoseGANBasement.dataset.skeleton().joints_left", "posegan_basementclass.PoseGANBasement.dataset.skeleton().joints_right", "range", "enumerate", "len", "len", "len", "common.camera.normalize_screen_coordinates", "posegan_basementclass.PoseGANBasement.dataset.skeleton", "posegan_basementclass.PoseGANBasement.dataset.skeleton", "posegan_basementclass.PoseGANBasement.dataset.cameras"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.subjects", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_left", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.normalize_screen_coordinates", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.skeleton", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.skeleton", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.cameras"], ["", "def", "keypoints_preparation", "(", "self", ")", ":", "\n", "# 2D keypoint", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Loading 2D detections...'", ")", "\n", "self", ".", "keypoints", "=", "np", ".", "load", "(", "'data/data_2d_'", "+", "self", ".", "args", ".", "dataset", "+", "'_'", "+", "self", ".", "args", ".", "keypoints", "+", "'.npz'", ",", "\n", "allow_pickle", "=", "True", ")", "\n", "# keypoints_metadata = self.keypoints['metadata'].item()", "\n", "keypoints_metadata", "=", "{", "'num_joints'", ":", "16", ",", "\n", "'keypoints_symmetry'", ":", "[", "[", "4", ",", "5", ",", "6", ",", "10", ",", "11", ",", "12", "]", ",", "[", "1", ",", "2", ",", "3", ",", "13", ",", "14", ",", "15", "]", "]", "}", "\n", "\n", "keypoints_symmetry", "=", "keypoints_metadata", "[", "'keypoints_symmetry'", "]", "\n", "self", ".", "kps_left", ",", "self", ".", "kps_right", "=", "list", "(", "keypoints_symmetry", "[", "0", "]", ")", ",", "list", "(", "keypoints_symmetry", "[", "1", "]", ")", "\n", "self", ".", "joints_left", ",", "self", ".", "joints_right", "=", "list", "(", "self", ".", "dataset", ".", "skeleton", "(", ")", ".", "joints_left", "(", ")", ")", ",", "list", "(", "\n", "self", ".", "dataset", ".", "skeleton", "(", ")", ".", "joints_right", "(", ")", ")", "\n", "self", ".", "keypoints", "=", "self", ".", "keypoints", "[", "'positions_2d'", "]", ".", "item", "(", ")", "\n", "\n", "for", "subject", "in", "self", ".", "dataset", ".", "subjects", "(", ")", ":", "\n", "            ", "assert", "subject", "in", "self", ".", "keypoints", ",", "'Subject {} is missing from the 2D detections dataset'", ".", "format", "(", "subject", ")", "\n", "for", "action", "in", "self", ".", "dataset", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "                ", "assert", "action", "in", "self", ".", "keypoints", "[", "\n", "subject", "]", ",", "'Action {} of subject {} is missing from the 2D detections dataset'", ".", "format", "(", "action", ",", "\n", "subject", ")", "\n", "if", "'positions_3d'", "not", "in", "self", ".", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "for", "cam_idx", "in", "range", "(", "len", "(", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", ")", ")", ":", "\n", "\n", "# We check for >= instead of == because some videos in H3.6M contain extra frames", "\n", "                    ", "mocap_length", "=", "self", ".", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "[", "cam_idx", "]", ".", "shape", "[", "0", "]", "\n", "assert", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", ".", "shape", "[", "0", "]", ">=", "mocap_length", "\n", "\n", "if", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", ".", "shape", "[", "0", "]", ">", "mocap_length", ":", "\n", "# Shorten sequence", "\n", "                        ", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", "=", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", "[", "\n", ":", "mocap_length", "]", "\n", "\n", "", "", "assert", "len", "(", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", ")", "==", "len", "(", "self", ".", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", ")", "\n", "\n", "# norm keypoint", "\n", "", "", "for", "subject", "in", "self", ".", "keypoints", ".", "keys", "(", ")", ":", "\n", "            ", "for", "action", "in", "self", ".", "keypoints", "[", "subject", "]", ":", "\n", "                ", "for", "cam_idx", ",", "kps", "in", "enumerate", "(", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", ")", ":", "\n", "# Normalize camera frame", "\n", "                    ", "cam", "=", "self", ".", "dataset", ".", "cameras", "(", ")", "[", "subject", "]", "[", "cam_idx", "]", "\n", "kps", "[", "...", ",", ":", "2", "]", "=", "normalize_screen_coordinates", "(", "kps", "[", "...", ",", ":", "2", "]", ",", "w", "=", "cam", "[", "'res_w'", "]", ",", "h", "=", "cam", "[", "'res_h'", "]", ")", "\n", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", "[", "cam_idx", "]", "=", "kps", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.fetch": [[167, 236], ["posegan_basementclass.PoseGANBasement.keypoints[].keys", "len", "len", "len", "len", "range", "range", "len", "int", "common.utils.deterministic_random", "range", "len", "out_poses_2d.append", "posegan_basementclass.PoseGANBasement.dataset.cameras", "range", "range", "str", "len", "action.startswith", "posegan_basementclass.PoseGANBasement.dataset.cameras", "len", "len", "len", "len", "len", "out_poses_3d.append", "len", "len", "len", "out_contact_labels.append", "round", "len", "out_camera_params.append", "out_camera_rtparams.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.utils.deterministic_random", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.cameras", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.cameras", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "", "", "def", "fetch", "(", "self", ",", "subjects", ",", "action_filter", "=", "None", ",", "subset", "=", "1", ",", "parse_3d_poses", "=", "True", ")", ":", "\n", "        ", "out_poses_3d", "=", "[", "]", "\n", "out_poses_2d", "=", "[", "]", "\n", "out_camera_params", "=", "[", "]", "\n", "out_camera_rtparams", "=", "[", "]", "\n", "out_contact_labels", "=", "[", "]", "\n", "for", "subject", "in", "subjects", ":", "\n", "            ", "for", "action", "in", "self", ".", "keypoints", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "action_filter", "is", "not", "None", ":", "\n", "                    ", "found", "=", "False", "\n", "for", "a", "in", "action_filter", ":", "\n", "                        ", "if", "action", ".", "startswith", "(", "a", ")", ":", "\n", "                            ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "poses_2d", "=", "self", ".", "keypoints", "[", "subject", "]", "[", "action", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_2d", ")", ")", ":", "# Iterate across cameras", "\n", "                    ", "out_poses_2d", ".", "append", "(", "poses_2d", "[", "i", "]", ")", "\n", "\n", "", "if", "subject", "in", "self", ".", "dataset", ".", "cameras", "(", ")", ":", "\n", "                    ", "cams", "=", "self", ".", "dataset", ".", "cameras", "(", ")", "[", "subject", "]", "\n", "assert", "len", "(", "cams", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "for", "cam", "in", "cams", ":", "\n", "                        ", "if", "'intrinsic'", "in", "cam", ":", "\n", "                            ", "out_camera_params", ".", "append", "(", "cam", "[", "'intrinsic'", "]", ")", "\n", "", "if", "'extrinsic'", "in", "cam", ":", "\n", "                            ", "out_camera_rtparams", ".", "append", "(", "cam", "[", "'extrinsic'", "]", ")", "\n", "\n", "", "", "", "if", "parse_3d_poses", "and", "'positions_3d'", "in", "self", ".", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                    ", "poses_3d", "=", "self", ".", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'positions_3d'", "]", "\n", "assert", "len", "(", "poses_3d", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "for", "i", "in", "range", "(", "len", "(", "poses_3d", ")", ")", ":", "# Iterate across cameras", "\n", "                        ", "out_poses_3d", ".", "append", "(", "poses_3d", "[", "i", "]", ")", "\n", "\n", "# for contact labels, same as poses_3d", "\n", "", "", "if", "parse_3d_poses", "and", "'contact_labels'", "in", "self", ".", "dataset", "[", "subject", "]", "[", "action", "]", ":", "\n", "                    ", "contact_labels", "=", "self", ".", "dataset", "[", "subject", "]", "[", "action", "]", "[", "'contact_labels'", "]", "\n", "assert", "len", "(", "contact_labels", ")", "==", "len", "(", "poses_2d", ")", ",", "'Camera count mismatch'", "\n", "for", "i", "in", "range", "(", "len", "(", "contact_labels", ")", ")", ":", "# Iterate across cameras", "\n", "                        ", "out_contact_labels", ".", "append", "(", "contact_labels", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "out_camera_params", ")", "==", "0", ":", "\n", "            ", "assert", "False", "\n", "", "if", "len", "(", "out_camera_rtparams", ")", "==", "0", ":", "\n", "            ", "assert", "False", "\n", "", "if", "len", "(", "out_poses_3d", ")", "==", "0", ":", "\n", "            ", "assert", "False", "\n", "", "if", "len", "(", "out_contact_labels", ")", "==", "0", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "stride", "=", "self", ".", "args", ".", "downsample", "\n", "if", "subset", "<", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "out_poses_2d", ")", ")", ":", "\n", "                ", "n_frames", "=", "int", "(", "round", "(", "len", "(", "out_poses_2d", "[", "i", "]", ")", "//", "stride", "*", "subset", ")", "*", "stride", ")", "\n", "start", "=", "deterministic_random", "(", "0", ",", "len", "(", "out_poses_2d", "[", "i", "]", ")", "-", "n_frames", "+", "1", ",", "str", "(", "len", "(", "out_poses_2d", "[", "i", "]", ")", ")", ")", "\n", "out_poses_2d", "[", "i", "]", "=", "out_poses_2d", "[", "i", "]", "[", "start", ":", "start", "+", "n_frames", ":", "stride", "]", "\n", "if", "out_poses_3d", "is", "not", "None", ":", "\n", "                    ", "out_poses_3d", "[", "i", "]", "=", "out_poses_3d", "[", "i", "]", "[", "start", ":", "start", "+", "n_frames", ":", "stride", "]", "\n", "", "", "", "elif", "stride", ">", "1", ":", "\n", "# Downsample as requested", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "out_poses_2d", ")", ")", ":", "\n", "                ", "out_poses_2d", "[", "i", "]", "=", "out_poses_2d", "[", "i", "]", "[", ":", ":", "stride", "]", "\n", "if", "out_poses_3d", "is", "not", "None", ":", "\n", "                    ", "out_poses_3d", "[", "i", "]", "=", "out_poses_3d", "[", "i", "]", "[", ":", ":", "stride", "]", "\n", "out_contact_labels", "[", "i", "]", "=", "out_contact_labels", "[", "i", "]", "[", ":", ":", "stride", "]", "\n", "\n", "", "", "", "return", "out_camera_params", ",", "out_camera_rtparams", ",", "out_poses_3d", ",", "out_poses_2d", ",", "out_contact_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.dataloader_preparation": [[237, 386], ["posegan_basementclass.PoseGANBasement.args.subjects_train.split", "posegan_basementclass.PoseGANBasement.args.subjects_test.split", "posegan_basementclass.PoseGANBasement.fetch", "posegan_basementclass.PoseGANBasement.fetch", "numpy.prod", "posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement.logger.info", "enumerate", "enumerate", "common.generators.ChunkedNoPadGeneratorV5", "posegan_basementclass.PoseGANBasement.logger.info", "function.utils.Sample_from_Pool", "common.generators.UnchunkedGenerator", "posegan_basementclass.PoseGANBasement.logger.info", "common.generators.UnchunkedGenerator", "posegan_basementclass.PoseGANBasement.logger.info", "common.generators.UnchunkedGenerator", "posegan_basementclass.PoseGANBasement.logger.info", "common.generators.UnchunkedGenerator", "posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement._dataloader_preparation", "posegan_basementclass.PoseGANBasement._dataloader_preparation", "posegan_basementclass.PoseGANBasement._dataloader_preparation", "posegan_basementclass.PoseGANBasement._dataloader_preparation", "posegan_basementclass.PoseGANBasement.args.actions.split", "posegan_basementclass.PoseGANBasement.logger.info", "pickle.load", "pickle.load", "skt_pos_train.append", "skt_pos_train_2dtarget.append", "skt_pos_train.append", "skt_pos_train_2dtarget.append", "numpy.prod", "int", "open", "open", "common.camera.world2cam_sktpos", "common.camera.world2cam_sktpos", "posegan_basementclass.PoseGANBasement.aug_generator.num_frames", "common.generators.UnchunkedGenerator.num_frames", "common.generators.UnchunkedGenerator.num_frames", "common.generators.UnchunkedGenerator.num_frames", "common.generators.UnchunkedGenerator.num_frames", "posegan_basementclass.PoseGANBasement.args.architecture.split", "numpy.ones", "range", "int", "posegan_basementclass.PoseGANBasement.args.architecture.split", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.fetch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.fetch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._dataloader_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._dataloader_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._dataloader_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._dataloader_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.camera.world2cam_sktpos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.camera.world2cam_sktpos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "dataloader_preparation", "(", "self", ")", ":", "\n", "        ", "action_filter", "=", "None", "if", "self", ".", "args", ".", "actions", "==", "'*'", "else", "self", ".", "args", ".", "actions", ".", "split", "(", "','", ")", "\n", "if", "action_filter", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Selected actions:{}'", ".", "format", "(", "action_filter", ")", ")", "\n", "\n", "###################################", "\n", "# train subject # test subject", "\n", "###################################", "\n", "", "subjects_train", "=", "self", ".", "args", ".", "subjects_train", ".", "split", "(", "','", ")", "\n", "subjects_test", "=", "self", ".", "args", ".", "subjects_test", ".", "split", "(", "','", ")", "\n", "\n", "cameras_train", ",", "cam_rt_train", ",", "poses_train", ",", "poses_train_2d", ",", "contact_train", "=", "self", ".", "fetch", "(", "subjects_train", ",", "\n", "action_filter", ",", "\n", "subset", "=", "self", ".", "args", ".", "subset", ")", "\n", "cameras_valid", ",", "cam_rt_valid", ",", "poses_valid", ",", "self", ".", "poses_valid_2d", ",", "contact_valid", "=", "self", ".", "fetch", "(", "subjects_test", ",", "\n", "action_filter", ")", "\n", "causal_shift", "=", "0", "\n", "self", ".", "pad", "=", "(", "np", ".", "prod", "(", "[", "int", "(", "x", ")", "for", "x", "in", "self", ".", "args", ".", "architecture", ".", "split", "(", "','", ")", "]", ")", "-", "1", ")", "//", "2", "\n", "self", ".", "rf", "=", "np", ".", "prod", "(", "[", "int", "(", "x", ")", "for", "x", "in", "self", ".", "args", ".", "architecture", ".", "split", "(", "','", ")", "]", ")", "\n", "\n", "\n", "##################################################################", "\n", "##### linkstart: load expert,", "\n", "##################################################################", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: self.args.expert_dict_path: {}'", ".", "format", "(", "self", ".", "args", ".", "expert_dict_path", ")", ")", "\n", "if", "self", ".", "args", ".", "expert_dict_path", "is", "None", ":", "\n", "            ", "expert_dict", "=", "{", "'h36m_take_000'", ":", "{", "'skt_wpos'", ":", "np", ".", "ones", "(", "(", "500", ",", "16", ",", "3", ")", ")", "}", "}", "\n", "take_list", "=", "[", "'h36m_take_000'", "]", "\n", "", "else", ":", "\n", "            ", "expert_feat_file", "=", "self", ".", "args", ".", "expert_dict_path", "\n", "expert_dict", "=", "pickle", ".", "load", "(", "open", "(", "expert_feat_file", ",", "'rb'", ")", ")", "\n", "# take_list = [take for take in expert_dict if expert_dict[take]['t_num_reset'] == 0] # maybe filter some", "\n", "take_list", "=", "[", "'h36m_take_{:0>3d}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "600", ")", "]", "\n", "\n", "# load expert from rib-rl", "\n", "", "self", ".", "logger", ".", "info", "(", "'INFO: self.args.extra_expert_dict_path: {}'", ".", "format", "(", "self", ".", "args", ".", "extra_expert_dict_path", ")", ")", "\n", "if", "self", ".", "args", ".", "extra_expert_dict_path", "is", "None", ":", "\n", "            ", "extra_expert_dict", "=", "None", "\n", "extra_take_list", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "extra_expert_feat_file", "=", "self", ".", "args", ".", "extra_expert_dict_path", "\n", "extra_expert_dict", "=", "pickle", ".", "load", "(", "open", "(", "extra_expert_feat_file", ",", "'rb'", ")", ")", "\n", "extra_take_list", "=", "[", "take", "for", "take", "in", "extra_expert_dict", "if", "extra_expert_dict", "[", "take", "]", "[", "'t_num_reset'", "]", "==", "0", "]", "\n", "\n", "######################################################################", "\n", "# prepare a basement for every epoch update", "\n", "", "self", ".", "fixed_fake_database", "=", "{", "\n", "'cam_rt_train'", ":", "cam_rt_train", ",", "\n", "'cameras_train'", ":", "cameras_train", ",", "\n", "'take_list'", ":", "take_list", ",", "\n", "'expert_dict'", ":", "expert_dict", ",", "\n", "'causal_shift'", ":", "causal_shift", ",", "\n", "'extra_expert_dict'", ":", "extra_expert_dict", ",", "\n", "'extra_take_list'", ":", "extra_take_list", ",", "\n", "}", "\n", "\n", "\n", "skt_pos_train", "=", "[", "]", "\n", "skt_pos_train_2dtarget", "=", "[", "]", "\n", "\n", "for", "i", ",", "take", "in", "enumerate", "(", "take_list", ")", ":", "\n", "# assume expert is less and shorter than h36m.", "\n", "            ", "skt_pos_train", ".", "append", "(", "world2cam_sktpos", "(", "expert_dict", "[", "take", "]", "[", "'skt_wpos'", "]", ")", ")", "\n", "# skt_pos_train.append(world2cam_sktpos(reset_spine(expert_dict[take]['skt_wpos'])))", "\n", "skt_pos_train_2dtarget", ".", "append", "(", "poses_train_2d", "[", "i", "]", "[", "10", ":", "expert_dict", "[", "take", "]", "[", "'skt_wpos'", "]", ".", "shape", "[", "0", "]", "+", "10", "]", ")", "\n", "\n", "########################################################################################", "\n", "# extra", "\n", "", "for", "i", ",", "take", "in", "enumerate", "(", "extra_take_list", ")", ":", "\n", "# assume expert is less and shorter than h36m.", "\n", "            ", "skt_pos_train", ".", "append", "(", "world2cam_sktpos", "(", "extra_expert_dict", "[", "take", "]", "[", "'skt_wpos'", "]", ")", ")", "\n", "# skt_pos_train.append(world2cam_sktpos(reset_spine(extra_expert_dict[take]['skt_wpos'])))", "\n", "skt_pos_train_2dtarget", ".", "append", "(", "poses_train_2d", "[", "i", "%", "len", "(", "poses_train_2d", ")", "]", "[", "10", ":", "extra_expert_dict", "[", "take", "]", "[", "'skt_wpos'", "]", ".", "shape", "[", "0", "]", "+", "10", "]", ")", "\n", "########################################################################################", "\n", "\n", "# prepare data for augmenting", "\n", "", "aug_pad", "=", "self", ".", "pad", "\n", "self", ".", "aug_generator", "=", "ChunkedNoPadGeneratorV5", "(", "self", ".", "args", ".", "batch_size", "//", "self", ".", "args", ".", "stride", ",", "None", ",", "None", ",", "\n", "skt_pos_train", ",", "skt_pos_train_2dtarget", ",", "None", ",", "self", ".", "args", ".", "stride", ",", "\n", "pad", "=", "aug_pad", ",", "causal_shift", "=", "causal_shift", ",", "shuffle", "=", "True", ",", "\n", "# augment=True,", "\n", "augment", "=", "self", ".", "args", ".", "data_augmentation", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: aug-supervision on {} frames'", ".", "format", "(", "self", ".", "aug_generator", ".", "num_frames", "(", ")", ")", ")", "\n", "self", ".", "fake_cam_sample", "=", "Sample_from_Pool", "(", "max_elements", "=", "self", ".", "args", ".", "batch_size", ")", "\n", "\n", "# train loader s15678 eval", "\n", "train_generator_eval", "=", "UnchunkedGenerator", "(", "cam_rt_train", ",", "poses_train", ",", "poses_train_2d", ",", "\n", "pad", "=", "self", ".", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "False", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Testing on {} frames > train_generator_eval'", ".", "format", "(", "train_generator_eval", ".", "num_frames", "(", ")", ")", ")", "\n", "train_generator_eval_flip", "=", "UnchunkedGenerator", "(", "cam_rt_train", ",", "poses_train", ",", "poses_train_2d", ",", "\n", "pad", "=", "self", ".", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "True", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Testing on {} frames > train_generator_eval_flip'", ".", "format", "(", "train_generator_eval_flip", ".", "num_frames", "(", ")", ")", ")", "\n", "# test loader -- S911", "\n", "test_generator_s911", "=", "UnchunkedGenerator", "(", "None", ",", "poses_valid", ",", "self", ".", "poses_valid_2d", ",", "\n", "pad", "=", "self", ".", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "False", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Testing on {} frames > test_generator_s911'", ".", "format", "(", "test_generator_s911", ".", "num_frames", "(", ")", ")", ")", "\n", "test_generator_s911_flip", "=", "UnchunkedGenerator", "(", "None", ",", "poses_valid", ",", "self", ".", "poses_valid_2d", ",", "\n", "pad", "=", "self", ".", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "True", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Testing on {} frames > test_generator_s911_flip'", ".", "format", "(", "test_generator_s911_flip", ".", "num_frames", "(", ")", ")", ")", "\n", "\n", "# test loader  -- 3DHP # all frame are used.", "\n", "pkl_path", "=", "'./data_cross/3dhp/3dhp_testset_bySub.pkl'", "\n", "test_generator_3dhp", "=", "self", ".", "_dataloader_preparation", "(", "pkl_path", "=", "pkl_path", ",", "\n", "key_2d", "=", "'valid_kps_2d_imgnorm'", ",", "\n", "key_3d", "=", "'valid_kps_3d'", ",", "\n", "clip_flg", "=", "True", ")", "\n", "test_generator_3dhp_flip", "=", "self", ".", "_dataloader_preparation", "(", "pkl_path", "=", "pkl_path", ",", "\n", "key_2d", "=", "'valid_kps_2d_imgnorm'", ",", "\n", "key_3d", "=", "'valid_kps_3d'", ",", "\n", "clip_flg", "=", "True", ",", "\n", "test_augment", "=", "True", ")", "\n", "# test loader  -- 3DPWD", "\n", "pkl_path", "=", "'./data_cross/3dpw/3dpw_testset_bySub.pkl'", "\n", "test_generator_3dpw", "=", "self", ".", "_dataloader_preparation", "(", "pkl_path", "=", "pkl_path", ",", "\n", "key_2d", "=", "'joints_2d_imgnorm'", ",", "\n", "key_3d", "=", "'valid_kps_3d'", ",", "\n", "clip_flg", "=", "True", ")", "\n", "test_generator_3dpw_flip", "=", "self", ".", "_dataloader_preparation", "(", "pkl_path", "=", "pkl_path", ",", "\n", "key_2d", "=", "'joints_2d_imgnorm'", ",", "\n", "key_3d", "=", "'valid_kps_3d'", ",", "\n", "clip_flg", "=", "True", ",", "\n", "test_augment", "=", "True", ")", "\n", "\n", "############################", "\n", "## place all test loader together", "\n", "############################", "\n", "self", ".", "val_generator_dict", "=", "{", "\n", "'s15678'", ":", "train_generator_eval", ",", "\n", "'s15678_flip'", ":", "train_generator_eval_flip", ",", "\n", "'s911'", ":", "test_generator_s911", ",", "\n", "'s911_flip'", ":", "test_generator_s911_flip", ",", "\n", "'3dhp'", ":", "test_generator_3dhp", ",", "\n", "'3dhp_flip'", ":", "test_generator_3dhp_flip", ",", "\n", "'3dpw'", ":", "test_generator_3dpw", ",", "\n", "'3dpw_flip'", ":", "test_generator_3dpw_flip", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._dataloader_preparation": [[388, 415], ["common.generators.UnchunkedGenerator", "posegan_basementclass.PoseGANBasement.logger.info", "open", "posegan_basementclass.PoseGANBasement.logger.info", "pickle.load", "poses_3d.append", "poses_2d.append", "common.generators.UnchunkedGenerator.num_frames", "poses_3d.append", "poses_2d.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "_dataloader_preparation", "(", "self", ",", "pkl_path", ",", "key_2d", ",", "key_3d", ",", "clip_flg", ",", "scale2d", "=", "1.", ",", "test_augment", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        dataloader for cross data\n        \"\"\"", "\n", "with", "open", "(", "pkl_path", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'load from pickle file -> {}'", ".", "format", "(", "pkl_path", ")", ")", "\n", "tmp_npdict", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "poses_3d", "=", "[", "]", "\n", "poses_2d", "=", "[", "]", "\n", "# clip_flg = True", "\n", "# [..., :2] for 2D is to remove the confidence channel.", "\n", "for", "sub", "in", "tmp_npdict", ":", "\n", "            ", "if", "clip_flg", ":", "\n", "                ", "for", "clip_idx", "in", "tmp_npdict", "[", "sub", "]", "[", "'clip_idx'", "]", ":", "\n", "                    ", "poses_3d", ".", "append", "(", "tmp_npdict", "[", "sub", "]", "[", "key_3d", "]", "[", "clip_idx", "[", "0", "]", ":", "clip_idx", "[", "1", "]", "]", ")", "\n", "poses_2d", ".", "append", "(", "tmp_npdict", "[", "sub", "]", "[", "key_2d", "]", "[", "clip_idx", "[", "0", "]", ":", "clip_idx", "[", "1", "]", "]", "[", "...", ",", ":", "2", "]", "*", "scale2d", ")", "\n", "", "", "else", ":", "\n", "                ", "poses_3d", ".", "append", "(", "tmp_npdict", "[", "sub", "]", "[", "key_3d", "]", ")", "\n", "poses_2d", ".", "append", "(", "tmp_npdict", "[", "sub", "]", "[", "key_2d", "]", "[", "...", ",", ":", "2", "]", "*", "scale2d", ")", "\n", "\n", "", "", "test_generator", "=", "UnchunkedGenerator", "(", "cameras", "=", "None", ",", "poses_3d", "=", "poses_3d", ",", "poses_2d", "=", "poses_2d", ",", "\n", "pad", "=", "self", ".", "pad", ",", "causal_shift", "=", "0", ",", "augment", "=", "test_augment", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Testing on {} frames'", ".", "format", "(", "test_generator", ".", "num_frames", "(", ")", ")", ")", "\n", "return", "test_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.s911_detect2d_dataloader_preparation": [[416, 422], ["posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement.keypoints_preparation", "posegan_basementclass.PoseGANBasement._s911_detect2d_dataloader_preparation"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.keypoints_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._s911_detect2d_dataloader_preparation"], ["", "def", "s911_detect2d_dataloader_preparation", "(", "self", ")", ":", "\n", "        ", "for", "det2d", "in", "[", "'hr'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'INFO: load s911 det2d: {}'", ".", "format", "(", "det2d", ")", ")", "\n", "self", ".", "args", ".", "keypoints", "=", "det2d", "\n", "self", ".", "keypoints_preparation", "(", ")", "\n", "self", ".", "_s911_detect2d_dataloader_preparation", "(", "det2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._s911_detect2d_dataloader_preparation": [[423, 448], ["posegan_basementclass.PoseGANBasement.args.subjects_test.split", "posegan_basementclass.PoseGANBasement.fetch", "common.generators.UnchunkedGenerator", "posegan_basementclass.PoseGANBasement.logger.info", "common.generators.UnchunkedGenerator", "posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement.args.actions.split", "common.generators.UnchunkedGenerator.num_frames", "common.generators.UnchunkedGenerator.num_frames"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.fetch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames"], ["", "", "def", "_s911_detect2d_dataloader_preparation", "(", "self", ",", "det2d", ")", ":", "\n", "        ", "causal_shift", "=", "0", "\n", "action_filter", "=", "None", "if", "self", ".", "args", ".", "actions", "==", "'*'", "else", "self", ".", "args", ".", "actions", ".", "split", "(", "','", ")", "\n", "subjects_test", "=", "self", ".", "args", ".", "subjects_test", ".", "split", "(", "','", ")", "\n", "\n", "cameras_valid", ",", "cam_rt_valid", ",", "poses_valid", ",", "poses_valid_2d", ",", "contact_valid", "=", "self", ".", "fetch", "(", "subjects_test", ",", "\n", "action_filter", ")", "\n", "\n", "# test loader -- S911", "\n", "test_generator_s911", "=", "UnchunkedGenerator", "(", "None", ",", "poses_valid", ",", "poses_valid_2d", ",", "\n", "pad", "=", "self", ".", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "False", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Testing on {} frames > test_generator_s911 > det2d:{}'", ".", "format", "(", "test_generator_s911", ".", "num_frames", "(", ")", ",", "det2d", ")", ")", "\n", "test_generator_s911_flip", "=", "UnchunkedGenerator", "(", "None", ",", "poses_valid", ",", "poses_valid_2d", ",", "\n", "pad", "=", "self", ".", "pad", ",", "causal_shift", "=", "causal_shift", ",", "augment", "=", "True", ",", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "\n", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'INFO: Testing on {} frames > test_generator_s911_flip > det2d:{}'", ".", "format", "(", "test_generator_s911_flip", ".", "num_frames", "(", ")", ",", "det2d", ")", ")", "\n", "\n", "self", ".", "val_generator_dict", "[", "'S911_{}'", ".", "format", "(", "det2d", ")", "]", "=", "test_generator_s911", "\n", "self", ".", "val_generator_dict", "[", "'S911_flip_{}'", ".", "format", "(", "det2d", ")", "]", "=", "test_generator_s911_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.update_fixedfake_train_generator": [[449, 506], ["enumerate", "enumerate", "common.generators.ChunkedGenerator", "posegan_basementclass.PoseGANBasement.logger.info", "fixed_fake_cam_rt_train.append", "[].reshape().astype", "common.camera.zaxis_randrotation", "function.gan_utils.pose_seq_bl_aug().numpy", "common.camera.world_to_camera_sktpos_v3", "fixed_fake_poses_train.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "fixed_fake_poses_train_2d.append", "fixed_fake_cam_rt_train.append", "[].reshape().astype", "common.camera.zaxis_randrotation", "function.gan_utils.pose_seq_bl_aug().numpy", "common.camera.world_to_camera_sktpos_v3", "fixed_fake_poses_train.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "fixed_fake_poses_train_2d.append", "numpy.tile", "common.camera.project_to_2d_purelinear", "len", "numpy.tile", "common.camera.project_to_2d_purelinear", "posegan_basementclass.PoseGANBasement.train_generator.num_frames", "[].reshape", "function.gan_utils.pose_seq_bl_aug", "[].reshape", "function.gan_utils.pose_seq_bl_aug", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.zaxis_randrotation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world_to_camera_sktpos_v3", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.zaxis_randrotation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.world_to_camera_sktpos_v3", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.project_to_2d_purelinear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.project_to_2d_purelinear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.num_frames", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.pose_seq_bl_aug", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.pose_seq_bl_aug"], ["", "def", "update_fixedfake_train_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        update dataloader for each epoch\n        include bone length augmentation and z-axis rotation\n        \"\"\"", "\n", "cam_rt_train", "=", "self", ".", "fixed_fake_database", "[", "'cam_rt_train'", "]", "\n", "cameras_train", "=", "self", ".", "fixed_fake_database", "[", "'cameras_train'", "]", "\n", "take_list", "=", "self", ".", "fixed_fake_database", "[", "'take_list'", "]", "\n", "expert_dict", "=", "self", ".", "fixed_fake_database", "[", "'expert_dict'", "]", "\n", "causal_shift", "=", "self", ".", "fixed_fake_database", "[", "'causal_shift'", "]", "\n", "extra_expert_dict", "=", "self", ".", "fixed_fake_database", "[", "'extra_expert_dict'", "]", "# extra for boost exp", "\n", "extra_take_list", "=", "self", ".", "fixed_fake_database", "[", "'extra_take_list'", "]", "# extra for boost exp", "\n", "\n", "fixed_fake_cam_rt_train", "=", "[", "]", "\n", "fixed_fake_poses_train", "=", "[", "]", "\n", "fixed_fake_poses_train_2d", "=", "[", "]", "\n", "for", "i", ",", "take", "in", "enumerate", "(", "take_list", ")", ":", "\n", "            ", "cam_ex", "=", "cam_rt_train", "[", "i", "]", "\n", "fixed_fake_cam_rt_train", ".", "append", "(", "cam_ex", ")", "\n", "\n", "tmp_skt_wpos", "=", "expert_dict", "[", "take", "]", "[", "'skt_wpos'", "]", ".", "reshape", "(", "-", "1", ",", "16", ",", "3", ")", ".", "astype", "(", "'float32'", ")", "\n", "tmp_skt_wpos", "=", "zaxis_randrotation", "(", "tmp_skt_wpos", ")", "\n", "tmp_skt_wpos", "=", "pose_seq_bl_aug", "(", "torch", ".", "from_numpy", "(", "tmp_skt_wpos", ")", ")", ".", "numpy", "(", ")", "\n", "fixed_fake_poses_camed", "=", "world_to_camera_sktpos_v3", "(", "tmp_skt_wpos", ",", "self", ".", "args", ")", "\n", "fixed_fake_poses_train", ".", "append", "(", "fixed_fake_poses_camed", ")", "\n", "cam_ix", "=", "cameras_train", "[", "i", "]", "\n", "cam_ix_tf", "=", "torch", ".", "from_numpy", "(", "np", ".", "tile", "(", "cam_ix", ",", "(", "fixed_fake_poses_camed", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "fixed_fake_poses_train_2d", ".", "append", "(", "\n", "project_to_2d_purelinear", "(", "fixed_fake_poses_camed", ")", ")", "\n", "\n", "############################################################", "\n", "# extra", "\n", "", "for", "i", ",", "take", "in", "enumerate", "(", "extra_take_list", ")", ":", "\n", "            ", "i", "=", "i", "%", "len", "(", "cam_rt_train", ")", "\n", "cam_ex", "=", "cam_rt_train", "[", "i", "]", "\n", "fixed_fake_cam_rt_train", ".", "append", "(", "cam_ex", ")", "\n", "\n", "tmp_skt_wpos", "=", "extra_expert_dict", "[", "take", "]", "[", "'skt_wpos'", "]", ".", "reshape", "(", "-", "1", ",", "16", ",", "3", ")", ".", "astype", "(", "'float32'", ")", "\n", "tmp_skt_wpos", "=", "zaxis_randrotation", "(", "tmp_skt_wpos", ")", "\n", "tmp_skt_wpos", "=", "pose_seq_bl_aug", "(", "torch", ".", "from_numpy", "(", "tmp_skt_wpos", ")", ")", ".", "numpy", "(", ")", "\n", "fixed_fake_poses_camed", "=", "world_to_camera_sktpos_v3", "(", "tmp_skt_wpos", ",", "self", ".", "args", ")", "\n", "fixed_fake_poses_train", ".", "append", "(", "fixed_fake_poses_camed", ")", "\n", "cam_ix", "=", "cameras_train", "[", "i", "]", "\n", "cam_ix_tf", "=", "torch", ".", "from_numpy", "(", "np", ".", "tile", "(", "cam_ix", ",", "(", "fixed_fake_poses_camed", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", "\n", "fixed_fake_poses_train_2d", ".", "append", "(", "\n", "project_to_2d_purelinear", "(", "fixed_fake_poses_camed", ")", ")", "\n", "########################################################################################", "\n", "\n", "", "self", ".", "train_generator", "=", "ChunkedGenerator", "(", "self", ".", "args", ".", "batch_size", "//", "self", ".", "args", ".", "stride", ",", "None", ",", "\n", "fixed_fake_poses_train", ",", "\n", "fixed_fake_poses_train_2d", ",", "self", ".", "args", ".", "stride", ",", "\n", "pad", "=", "self", ".", "pad", ",", "causal_shift", "=", "causal_shift", ",", "shuffle", "=", "True", ",", "\n", "augment", "=", "self", ".", "args", ".", "data_augmentation", ",", "\n", "# augment=False,", "\n", "kps_left", "=", "self", ".", "kps_left", ",", "kps_right", "=", "self", ".", "kps_right", ",", "\n", "joints_left", "=", "self", ".", "joints_left", ",", "joints_right", "=", "self", ".", "joints_right", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Training on {} frames'", ".", "format", "(", "self", ".", "train_generator", ".", "num_frames", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._count_param": [[507, 513], ["model.parameters", "posegan_basementclass.PoseGANBasement.logger.info", "parameter.numel"], "methods", ["None"], ["", "def", "_count_param", "(", "self", ",", "model", ",", "name", ")", ":", "\n", "# print param number size.", "\n", "        ", "model_params", "=", "0", "\n", "for", "parameter", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "model_params", "+=", "parameter", ".", "numel", "(", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'INFO: Trainable parameter count for model {} is:{}'", ".", "format", "(", "name", ",", "model_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._model_preparation_pos": [[514, 571], ["common.model.TemporalModel", "posegan_basementclass.PoseGANBasement.model_pos.receptive_field", "posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement._count_param", "posegan_basementclass.PoseGANBasement.model_pos.cuda", "posegan_basementclass.PoseGANBasement.model_pos_train.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "function.utils.get_scheduler", "int", "common.model.TemporalModelOptimized1f", "common.model.TemporalModel", "posegan_basementclass.PoseGANBasement.dataset.skeleton().num_joints", "posegan_basementclass.PoseGANBasement.model_pos_train.parameters", "posegan_basementclass.PoseGANBasement.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "posegan_basementclass.PoseGANBasement.model_pos_train.load_state_dict", "posegan_basementclass.PoseGANBasement.model_pos.load_state_dict", "posegan_basementclass.PoseGANBasement.args.architecture.split", "posegan_basementclass.PoseGANBasement.dataset.skeleton().num_joints", "posegan_basementclass.PoseGANBasement.dataset.skeleton().num_joints", "posegan_basementclass.PoseGANBasement.dataset.skeleton", "posegan_basementclass.PoseGANBasement.dataset.skeleton", "posegan_basementclass.PoseGANBasement.dataset.skeleton"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.receptive_field", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._count_param", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_scheduler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.num_joints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.num_joints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.num_joints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.skeleton", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.skeleton", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mocap_dataset.MocapDataset.skeleton"], ["", "def", "_model_preparation_pos", "(", "self", ")", ":", "\n", "######################################", "\n", "# prepare model: posenet: 2d pose -> 3d pose", "\n", "######################################", "\n", "        ", "filter_widths", "=", "[", "int", "(", "x", ")", "for", "x", "in", "self", ".", "args", ".", "architecture", ".", "split", "(", "','", ")", "]", "\n", "if", "not", "self", ".", "args", ".", "disable_optimizations", "and", "not", "self", ".", "args", ".", "dense", "and", "self", ".", "args", ".", "stride", "==", "1", ":", "\n", "# Use optimized model for single-frame predictions", "\n", "            ", "self", ".", "model_pos_train", "=", "TemporalModelOptimized1f", "(", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "\n", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "self", ".", "dataset", ".", "skeleton", "(", ")", ".", "num_joints", "(", ")", ",", "\n", "filter_widths", "=", "filter_widths", ",", "causal", "=", "self", ".", "args", ".", "causal", ",", "\n", "dropout", "=", "self", ".", "args", ".", "dropout", ",", "channels", "=", "self", ".", "args", ".", "channels", ")", "\n", "", "else", ":", "\n", "# When incompatible settings are detected (stride > 1, dense filters, or disabled optimization) fall back to normal model", "\n", "            ", "self", ".", "model_pos_train", "=", "TemporalModel", "(", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "\n", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "self", ".", "dataset", ".", "skeleton", "(", ")", ".", "num_joints", "(", ")", ",", "\n", "filter_widths", "=", "filter_widths", ",", "causal", "=", "self", ".", "args", ".", "causal", ",", "\n", "dropout", "=", "self", ".", "args", ".", "dropout", ",", "channels", "=", "self", ".", "args", ".", "channels", ",", "\n", "dense", "=", "self", ".", "args", ".", "dense", ")", "\n", "# model for eval", "\n", "", "self", ".", "model_pos", "=", "TemporalModel", "(", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "\n", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "self", ".", "dataset", ".", "skeleton", "(", ")", ".", "num_joints", "(", ")", ",", "\n", "filter_widths", "=", "filter_widths", ",", "causal", "=", "self", ".", "args", ".", "causal", ",", "dropout", "=", "self", ".", "args", ".", "dropout", ",", "\n", "channels", "=", "self", ".", "args", ".", "channels", ",", "dense", "=", "self", ".", "args", ".", "dense", ")", "\n", "\n", "##################################", "\n", "##################################", "\n", "\n", "receptive_field", "=", "self", ".", "model_pos", ".", "receptive_field", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Receptive field: {} frames'", ".", "format", "(", "receptive_field", ")", ")", "\n", "pad_check", "=", "(", "receptive_field", "-", "1", ")", "//", "2", "# Padding on each side", "\n", "assert", "pad_check", "==", "self", ".", "pad", ",", "'pad mismatch'", "\n", "\n", "# print param number size.", "\n", "self", ".", "_count_param", "(", "self", ".", "model_pos_train", ",", "'self.model_pos_train'", ")", "\n", "\n", "self", ".", "model_pos", "=", "self", ".", "model_pos", ".", "cuda", "(", ")", "\n", "self", ".", "model_pos_train", "=", "self", ".", "model_pos_train", ".", "cuda", "(", ")", "\n", "\n", "###################################", "\n", "# optimizer.", "\n", "###################################", "\n", "self", ".", "optimizer_P", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model_pos_train", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "\n", "self", ".", "lr_scheduler_P", "=", "get_scheduler", "(", "self", ".", "optimizer_P", ",", "policy", "=", "'lambda'", ",", "nepoch_fix", "=", "0", ",", "nepoch", "=", "self", ".", "args", ".", "epochs", ")", "\n", "\n", "###################################", "\n", "# load pretrain", "\n", "###################################", "\n", "if", "self", ".", "args", ".", "pretrain", ":", "\n", "            ", "ckpt_path", "=", "self", ".", "args", ".", "evaluate", "\n", "self", ".", "logger", ".", "info", "(", "'Loading checkpoint at {}'", ".", "format", "(", "ckpt_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "model_pos_train", ".", "load_state_dict", "(", "checkpoint", "[", "'model_pos'", "]", ")", "\n", "self", ".", "model_pos", ".", "load_state_dict", "(", "checkpoint", "[", "'model_pos'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._model_preparation_traj": [[572, 629], ["common.model.TemporalModel", "posegan_basementclass.PoseGANBasement.model_traj.receptive_field", "posegan_basementclass.PoseGANBasement.logger.info", "posegan_basementclass.PoseGANBasement._count_param", "posegan_basementclass.PoseGANBasement.model_traj.cuda", "posegan_basementclass.PoseGANBasement.model_traj_train.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "function.utils.get_scheduler", "int", "common.model.TemporalModelOptimized1f", "common.model.TemporalModel", "posegan_basementclass.PoseGANBasement.model_traj_train.parameters", "posegan_basementclass.PoseGANBasement.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "posegan_basementclass.PoseGANBasement.model_traj_train.load_state_dict", "posegan_basementclass.PoseGANBasement.model_traj.load_state_dict", "posegan_basementclass.PoseGANBasement.args.architecture.split"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.model.TemporalModelBase.receptive_field", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._count_param", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_scheduler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["", "", "def", "_model_preparation_traj", "(", "self", ")", ":", "\n", "######################################", "\n", "# prepare: posenet: 2d pose -> 3d traj", "\n", "######################################", "\n", "        ", "filter_widths", "=", "[", "int", "(", "x", ")", "for", "x", "in", "self", ".", "args", ".", "architecture", ".", "split", "(", "','", ")", "]", "\n", "if", "not", "self", ".", "args", ".", "disable_optimizations", "and", "not", "self", ".", "args", ".", "dense", "and", "self", ".", "args", ".", "stride", "==", "1", ":", "\n", "# Use optimized model for single-frame predictions", "\n", "            ", "self", ".", "model_traj_train", "=", "TemporalModelOptimized1f", "(", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "\n", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "1", ",", "\n", "filter_widths", "=", "filter_widths", ",", "causal", "=", "self", ".", "args", ".", "causal", ",", "\n", "dropout", "=", "self", ".", "args", ".", "dropout", ",", "channels", "=", "self", ".", "args", ".", "channels", ")", "\n", "", "else", ":", "\n", "# When incompatible settings are detected (stride > 1, dense filters, or disabled optimization) fall back to normal model", "\n", "            ", "self", ".", "model_traj_train", "=", "TemporalModel", "(", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "\n", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "1", ",", "\n", "filter_widths", "=", "filter_widths", ",", "causal", "=", "self", ".", "args", ".", "causal", ",", "\n", "dropout", "=", "self", ".", "args", ".", "dropout", ",", "channels", "=", "self", ".", "args", ".", "channels", ",", "\n", "dense", "=", "self", ".", "args", ".", "dense", ")", "\n", "# model for eval", "\n", "", "self", ".", "model_traj", "=", "TemporalModel", "(", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "2", "]", ",", "\n", "self", ".", "poses_valid_2d", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "1", ",", "\n", "filter_widths", "=", "filter_widths", ",", "causal", "=", "self", ".", "args", ".", "causal", ",", "dropout", "=", "self", ".", "args", ".", "dropout", ",", "\n", "channels", "=", "self", ".", "args", ".", "channels", ",", "dense", "=", "self", ".", "args", ".", "dense", ")", "\n", "\n", "##################################", "\n", "##################################", "\n", "\n", "receptive_field", "=", "self", ".", "model_traj", ".", "receptive_field", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "'INFO: Receptive field: {} frames'", ".", "format", "(", "receptive_field", ")", ")", "\n", "pad_check", "=", "(", "receptive_field", "-", "1", ")", "//", "2", "# Padding on each side", "\n", "assert", "pad_check", "==", "self", ".", "pad", ",", "'pad mismatch'", "\n", "\n", "# print param number size.", "\n", "self", ".", "_count_param", "(", "self", ".", "model_traj_train", ",", "'self.model_traj_train'", ")", "\n", "\n", "self", ".", "model_traj", "=", "self", ".", "model_traj", ".", "cuda", "(", ")", "\n", "self", ".", "model_traj_train", "=", "self", ".", "model_traj_train", ".", "cuda", "(", ")", "\n", "\n", "###################################", "\n", "# optimizer.", "\n", "###################################", "\n", "self", ".", "optimizer_T", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model_traj_train", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "\n", "self", ".", "lr_scheduler_T", "=", "get_scheduler", "(", "self", ".", "optimizer_T", ",", "policy", "=", "'lambda'", ",", "nepoch_fix", "=", "0", ",", "nepoch", "=", "self", ".", "args", ".", "epochs", ")", "\n", "\n", "###################################", "\n", "# load pretrain", "\n", "###################################", "\n", "if", "self", ".", "args", ".", "pretrain", ":", "\n", "            ", "ckpt_path", "=", "self", ".", "args", ".", "evaluate", "\n", "self", ".", "logger", ".", "info", "(", "'Loading checkpoint at {}'", ".", "format", "(", "ckpt_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "model_traj_train", ".", "load_state_dict", "(", "checkpoint", "[", "'model_traj'", "]", ")", "\n", "self", ".", "model_traj", ".", "load_state_dict", "(", "checkpoint", "[", "'model_traj'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._model_preparation_Gcam": [[630, 681], ["posegan_basementclass.PoseGANBasement._count_param", "posegan_basementclass.PoseGANBasement._count_param", "posegan_basementclass.PoseGANBasement.model_Gcam.cuda", "posegan_basementclass.PoseGANBasement.model_Dcam.cuda", "torch.Adam", "torch.Adam", "function.utils.get_scheduler", "torch.Adam", "torch.Adam", "function.utils.get_scheduler", "G_camera", "int", "Pos2dPairDiscriminator().to", "posegan_basementclass.PoseGANBasement.model_Gcam.parameters", "posegan_basementclass.PoseGANBasement.model_Dcam.parameters", "posegan_basementclass.PoseGANBasement.args.Dcamarchitecture.split", "Pos2dPairDiscriminator"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._count_param", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._count_param", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_scheduler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_scheduler"], ["", "", "def", "_model_preparation_Gcam", "(", "self", ")", ":", "\n", "######################################", "\n", "# prepare model: Gcam: 3d pose -> 3d pose, 2d pose, different cam.", "\n", "######################################", "\n", "        ", "if", "self", ".", "args", ".", "gcam_choice", "==", "'gcam_v0'", ":", "\n", "            ", "from", "poseaugtool", ".", "model_virtualCam", ".", "virtualCam", "import", "G_camera", "\n", "self", ".", "model_Gcam", "=", "G_camera", "(", "self", ".", "args", ")", "\n", "# elif self.args.gcam_choice == 'gcam_v2':", "\n", "#     from poseaugtool.model_virtualCam.virtualCam import G_camera_v2", "\n", "#     self.model_Gcam = G_camera_v2(self.args)", "\n", "\n", "", "filter_ch", "=", "[", "int", "(", "x", ")", "for", "x", "in", "self", ".", "args", ".", "Dcamarchitecture", ".", "split", "(", "','", ")", "]", "\n", "# if self.args.dcam_choice == 'dcam_v0':", "\n", "#     from poseaugtool.model_virtualCam.virtualCam import Pose2DVideoDiscriminator", "\n", "#     self.model_Dcam = Pose2DVideoDiscriminator(ks=self.args.dcam_ks, nh_conv1d=filter_ch).to(self.device)", "\n", "# elif self.args.dcam_choice == 'dcam_v2':", "\n", "#     from poseaugtool.model_virtualCam.virtualCam import Pose2DVideoDiscriminatorV2", "\n", "#     self.model_Dcam = Pose2DVideoDiscriminatorV2(ks=self.args.dcam_ks, nh_conv1d=filter_ch).to(self.device)", "\n", "if", "self", ".", "args", ".", "dcam_choice", "==", "'dcam_pa1'", ":", "\n", "            ", "from", "poseaugtool", ".", "model_virtualCam", ".", "virtualCam", "import", "Pos2dPairDiscriminator", "\n", "self", ".", "model_Dcam", "=", "Pos2dPairDiscriminator", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# elif self.args.dcam_choice == 'dcam_v5':", "\n", "#     from poseaugtool.model_virtualCam.virtualCam import Pos2dPairDiscriminator_v5", "\n", "#     self.model_Dcam = Pos2dPairDiscriminator_v5().to(self.device)", "\n", "# elif self.args.dcam_choice == 'dcam_v6':", "\n", "#     from poseaugtool.model_virtualCam.virtualCam import Pos2dPairDiscriminator_v6", "\n", "#     self.model_Dcam = Pos2dPairDiscriminator_v6().to(self.device)", "\n", "\n", "# print param number size.", "\n", "", "self", ".", "_count_param", "(", "self", ".", "model_Gcam", ",", "'self.model_Gcam'", ")", "\n", "self", ".", "_count_param", "(", "self", ".", "model_Dcam", ",", "'self.model_Dcam'", ")", "\n", "# to cuda", "\n", "self", ".", "model_Gcam", "=", "self", ".", "model_Gcam", ".", "cuda", "(", ")", "\n", "self", ".", "model_Dcam", "=", "self", ".", "model_Dcam", ".", "cuda", "(", ")", "\n", "###################################", "\n", "# optimizer.", "\n", "###################################", "\n", "self", ".", "optimizer_Gcam", "=", "optim", ".", "Adam", "(", "self", ".", "model_Gcam", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "args", ".", "lrgcam", ")", "# , amsgrad=True)  #", "\n", "self", ".", "lr_scheduler_Gcam", "=", "get_scheduler", "(", "self", ".", "optimizer_Gcam", ",", "policy", "=", "'lambda'", ",", "nepoch_fix", "=", "0", ",", "\n", "nepoch", "=", "self", ".", "args", ".", "epochs", ")", "\n", "\n", "self", ".", "optimizer_Dcam", "=", "optim", ".", "Adam", "(", "self", ".", "model_Dcam", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "args", ".", "lrdcam", ")", "# , amsgrad=True)  #", "\n", "self", ".", "lr_scheduler_Dcam", "=", "get_scheduler", "(", "self", ".", "optimizer_Dcam", ",", "policy", "=", "'lambda'", ",", "nepoch_fix", "=", "0", ",", "\n", "nepoch", "=", "self", ".", "args", ".", "epochs", ")", "\n", "###################################", "\n", "# load pretrain", "\n", "###################################", "\n", "if", "self", ".", "args", ".", "pretrain", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._train_batch_posenet": [[682, 705], ["posegan_basementclass.PoseGANBasement.model_pos_train", "posegan_basementclass.PoseGANBasement.optimizer_P.zero_grad", "posegan_basementclass.PoseGANBasement.MSE", "loss_total.backward", "nn.utils.clip_grad_norm_", "posegan_basementclass.PoseGANBasement.optimizer_P.step", "posegan_basementclass.PoseGANBasement.model_pos_train.parameters", "posegan_basementclass.PoseGANBasement.item", "posegan_basementclass.PoseGANBasement.detach"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step"], ["", "", "def", "_train_batch_posenet", "(", "self", ",", "inputs_2d", ",", "inputs_3d", ",", "epoch_loss_3d_train", ",", "N", ")", ":", "\n", "# here 3D shape is single frame. BxTxJx3: T=1", "\n", "        ", "target_3d_pose", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "-", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "\n", "# pos_3d[:, 1:] -= inputs_3d[:, :1]", "\n", "\n", "# Predict 3D poses", "\n", "predicted_3d_pos", "=", "self", ".", "model_pos_train", "(", "inputs_2d", ")", "\n", "\n", "self", ".", "optimizer_P", ".", "zero_grad", "(", ")", "\n", "\n", "# loss_3d_pos = mpjpe(predicted_3d_pos, target_3d_pose)", "\n", "loss_3d_pos", "=", "self", ".", "MSE", "(", "predicted_3d_pos", ",", "target_3d_pose", ")", "\n", "loss_total", "=", "loss_3d_pos", "*", "1.", "\n", "\n", "loss_total", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model_pos_train", ".", "parameters", "(", ")", ",", "\n", "max_norm", "=", "1", ")", "\n", "self", ".", "optimizer_P", ".", "step", "(", ")", "\n", "\n", "epoch_loss_3d_train", "+=", "target_3d_pose", ".", "shape", "[", "0", "]", "*", "target_3d_pose", ".", "shape", "[", "1", "]", "*", "loss_3d_pos", ".", "item", "(", ")", "\n", "N", "+=", "target_3d_pose", ".", "shape", "[", "0", "]", "*", "target_3d_pose", ".", "shape", "[", "1", "]", "\n", "\n", "return", "loss_3d_pos", ".", "detach", "(", ")", ",", "epoch_loss_3d_train", ",", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._train_batch_trajnet": [[706, 731], ["posegan_basementclass.PoseGANBasement.model_traj_train", "posegan_basementclass.PoseGANBasement.optimizer_T.zero_grad", "common.loss.weighted_mpjpe", "loss_total.backward", "nn.utils.clip_grad_norm_", "posegan_basementclass.PoseGANBasement.optimizer_T.step", "posegan_basementclass.PoseGANBasement.model_traj_train.parameters", "common.loss.weighted_mpjpe.item", "common.loss.weighted_mpjpe.detach"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.weighted_mpjpe", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step"], ["", "def", "_train_batch_trajnet", "(", "self", ",", "inputs_2d", ",", "inputs_3d", ",", "epoch_loss_3d_train", ",", "N", ")", ":", "\n", "        ", "target_3d_traj", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "*", "1.", "# focus on root traj.", "\n", "# pos_3d[:, 1:] -= inputs_3d[:, :1]", "\n", "\n", "# Predict 3D trajs", "\n", "predicted_3d_traj", "=", "self", ".", "model_traj_train", "(", "inputs_2d", ")", "\n", "# loss_3d_traj = mpjpe(predicted_3d_traj, target_3d_traj)", "\n", "\n", "self", ".", "optimizer_T", ".", "zero_grad", "(", ")", "\n", "\n", "# loss_3d_traj = self.MSE(predicted_3d_traj, target_3d_traj)", "\n", "# weighted traj loss from videopose", "\n", "w", "=", "1", "/", "target_3d_traj", "[", ":", ",", ":", ",", ":", ",", "2", "]", "# Weight inversely proportional to depth", "\n", "loss_3d_traj", "=", "weighted_mpjpe", "(", "predicted_3d_traj", ",", "target_3d_traj", ",", "w", ")", "\n", "\n", "loss_total", "=", "loss_3d_traj", "*", "1.", "\n", "\n", "loss_total", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model_traj_train", ".", "parameters", "(", ")", ",", "max_norm", "=", "1", ")", "#", "\n", "self", ".", "optimizer_T", ".", "step", "(", ")", "\n", "\n", "epoch_loss_3d_train", "+=", "target_3d_traj", ".", "shape", "[", "0", "]", "*", "target_3d_traj", ".", "shape", "[", "1", "]", "*", "loss_3d_traj", ".", "item", "(", ")", "\n", "N", "+=", "target_3d_traj", ".", "shape", "[", "0", "]", "*", "target_3d_traj", ".", "shape", "[", "1", "]", "\n", "\n", "return", "loss_3d_traj", ".", "detach", "(", ")", ",", "epoch_loss_3d_train", ",", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.train_posenet_realpose": [[732, 757], ["time.time.time", "posegan_basementclass.PoseGANBasement.model_pos_train.train", "posegan_basementclass.PoseGANBasement.logger.info", "tqdm.tqdm.tqdm", "posegan_basementclass.PoseGANBasement.train_generator.next_epoch", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "posegan_basementclass.PoseGANBasement._train_batch_posenet", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.summary.summary_train_realpose_iter_num_update", "batch_3d.astype", "batch_2d.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "loss_3d_pos.item"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._train_batch_posenet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_realpose_iter_num_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["", "def", "train_posenet_realpose", "(", "self", ",", "tag", "=", "'_real'", ")", ":", "\n", "        ", "\"\"\"\n        _real: dataloader from random projection\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "epoch_loss_3d_train", "=", "0", "\n", "N", "=", "0", "\n", "self", ".", "model_pos_train", ".", "train", "(", ")", "\n", "\n", "# Regular supervised scenario", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'INFO: Train on real pose with dataloader len:{:0>4d}'", ".", "format", "(", "self", ".", "train_generator", ".", "num_batches", ")", ")", "\n", "for", "_", ",", "batch_3d", ",", "batch_2d", "in", "tqdm", "(", "self", ".", "train_generator", ".", "next_epoch", "(", ")", ")", ":", "\n", "            ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch_3d", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "\n", "", "loss_3d_pos", ",", "epoch_loss_3d_train", ",", "N", "=", "self", ".", "_train_batch_posenet", "(", "inputs_2d", ",", "inputs_3d", ",", "\n", "epoch_loss_3d_train", ",", "N", ")", "\n", "# batch-wise log", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_P_batch/{}/loss_3d_pos'", ".", "format", "(", "tag", ")", ",", "loss_3d_pos", ".", "item", "(", ")", ",", "\n", "self", ".", "summary", ".", "train_realpose_iter_num", ")", "\n", "self", ".", "summary", ".", "summary_train_realpose_iter_num_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.train_trajnet_realpose": [[759, 784], ["time.time.time", "posegan_basementclass.PoseGANBasement.model_traj_train.train", "posegan_basementclass.PoseGANBasement.logger.info", "tqdm.tqdm.tqdm", "posegan_basementclass.PoseGANBasement.train_generator.next_epoch", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "posegan_basementclass.PoseGANBasement._train_batch_trajnet", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.summary.summary_train_realtraj_iter_num_update", "batch_3d.astype", "batch_2d.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "loss_3d_traj.item"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.src.train.train", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._train_batch_trajnet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_realtraj_iter_num_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["", "", "def", "train_trajnet_realpose", "(", "self", ",", "tag", "=", "'_real'", ")", ":", "\n", "        ", "\"\"\"\n        _real: dataloader from random projection\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "epoch_loss_3d_train", "=", "0", "\n", "N", "=", "0", "\n", "self", ".", "model_traj_train", ".", "train", "(", ")", "\n", "\n", "# Regular supervised scenario", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'INFO: Train on real pose with dataloader len:{:0>4d}'", ".", "format", "(", "self", ".", "train_generator", ".", "num_batches", ")", ")", "\n", "for", "_", ",", "batch_3d", ",", "batch_2d", "in", "tqdm", "(", "self", ".", "train_generator", ".", "next_epoch", "(", ")", ")", ":", "\n", "            ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch_3d", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "\n", "", "loss_3d_traj", ",", "epoch_loss_3d_train", ",", "N", "=", "self", ".", "_train_batch_trajnet", "(", "inputs_2d", ",", "inputs_3d", ",", "\n", "epoch_loss_3d_train", ",", "N", ")", "\n", "# batch-wise log", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'train_T_batch/{}/loss_3d_traj'", ".", "format", "(", "tag", ")", ",", "loss_3d_traj", ".", "item", "(", ")", ",", "\n", "self", ".", "summary", ".", "train_realtraj_iter_num", ")", "\n", "self", ".", "summary", ".", "summary_train_realtraj_iter_num_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._train_dis": [[785, 820], ["optimizer.zero_grad", "data_real.detach.detach.detach", "torch.autograd.Variable().to.detach", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "model_dis", "model_dis", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "posegan_basementclass.PoseGANBasement.MSE", "posegan_basementclass.PoseGANBasement.MSE", "function.utils.get_discriminator_accuracy", "function.utils.get_discriminator_accuracy", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "dis_3d_loss.backward", "nn.utils.clip_grad_norm_", "optimizer.step", "model_dis.reshape", "torch.autograd.Variable().to.reshape", "model_dis.reshape", "torch.autograd.Variable().to.reshape", "dis_3d_loss.item", "model_dis.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fake_data_pool", "model_dis.size", "model_dis.size", "torch.autograd.Variable().to.cpu().detach().data.numpy", "torch.autograd.Variable().to.cpu().detach", "torch.autograd.Variable().to.cpu"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_discriminator_accuracy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_discriminator_accuracy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.core.logger_rl.LoggerRL.step", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "", "def", "_train_dis", "(", "self", ",", "model_dis", ",", "data_real", ",", "data_fake", ",", "writer_name", ",", "fake_data_pool", ",", "optimizer", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data_real", "=", "data_real", ".", "detach", "(", ")", "\n", "data_fake", "=", "data_fake", ".", "detach", "(", ")", "\n", "# store the fake buffer for discriminator training.", "\n", "data_fake", "=", "Variable", "(", "\n", "torch", ".", "Tensor", "(", "fake_data_pool", "(", "data_fake", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", ")", ")", ".", "to", "(", "\n", "self", ".", "device", ")", "\n", "# for 3d part", "\n", "real_3d", "=", "model_dis", "(", "data_real", ")", "\n", "fake_3d", "=", "model_dis", "(", "data_fake", ")", "\n", "real_label_3d", "=", "Variable", "(", "torch", ".", "ones", "(", "real_3d", ".", "size", "(", ")", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "fake_label_3d", "=", "Variable", "(", "torch", ".", "zeros", "(", "fake_3d", ".", "size", "(", ")", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "dis_3d_real_loss", "=", "self", ".", "MSE", "(", "real_3d", ",", "real_label_3d", ")", "\n", "dis_3d_fake_loss", "=", "self", ".", "MSE", "(", "fake_3d", ",", "fake_label_3d", ")", "\n", "\n", "# Total discriminators losses", "\n", "dis_3d_loss", "=", "(", "dis_3d_real_loss", "+", "dis_3d_fake_loss", ")", "*", "0.5", "\n", "\n", "# record acc", "\n", "d3d_real_acc", "=", "get_discriminator_accuracy", "(", "real_3d", ".", "reshape", "(", "-", "1", ")", ",", "real_label_3d", ".", "reshape", "(", "-", "1", ")", ")", "\n", "d3d_fake_acc", "=", "get_discriminator_accuracy", "(", "fake_3d", ".", "reshape", "(", "-", "1", ")", ",", "fake_label_3d", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "writer_name", "+", "'_real_acc'", ",", "d3d_real_acc", ",", "self", ".", "summary", ".", "train_iter_num", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "writer_name", "+", "'_fake_acc'", ",", "d3d_fake_acc", ",", "self", ".", "summary", ".", "train_iter_num", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "writer_name", "+", "'_dis_loss'", ",", "dis_3d_loss", ".", "item", "(", ")", ",", "self", ".", "summary", ".", "train_iter_num", ")", "\n", "\n", "# Update optimizer", "\n", "###################################################", "\n", "dis_3d_loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_dis", ".", "parameters", "(", ")", ",", "max_norm", "=", "1", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "d3d_real_acc", ",", "d3d_fake_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.evaluate_posenet": [[821, 877], ["time.time.time", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "posegan_basementclass.PoseGANBasement.model_pos.load_state_dict", "posegan_basementclass.PoseGANBasement.model_pos.eval", "test_generator.next_epoch", "posegan_basementclass.PoseGANBasement.model_pos_train.state_dict", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "posegan_basementclass.PoseGANBasement.model_pos", "test_generator.augment_enabled", "common.loss.mpjpe", "common.loss.p_mpjpe", "time.time.time", "batch.astype", "batch_2d.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "common.loss.mpjpe.item", "torch.mean.cpu().numpy().reshape", "torch.mean.cpu().numpy().reshape", "inputs_3d.cuda.cuda.cpu().numpy().reshape", "common.loss.p_mpjpe.item", "torch.mean.cpu().numpy", "torch.mean.cpu().numpy", "inputs_3d.cuda.cuda.cpu().numpy", "torch.mean.cpu", "torch.mean.cpu", "inputs_3d.cuda.cuda.cpu"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.augment_enabled", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.mpjpe", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.p_mpjpe", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "evaluate_posenet", "(", "self", ",", "tag", "=", "'real'", ",", "valset", "=", "'s911'", ")", ":", "\n", "        ", "\"\"\"\n        evaluate the performance of posenet on 3 kinds of dataset\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "# End-of-epoch evaluation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model_pos", ".", "load_state_dict", "(", "self", ".", "model_pos_train", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "model_pos", ".", "eval", "(", ")", "\n", "\n", "epoch_p1_3d_valid", "=", "0", "\n", "epoch_p2_3d_valid", "=", "0", "\n", "N_valid", "=", "0", "\n", "\n", "test_generator", "=", "self", ".", "val_generator_dict", "[", "valset", "]", "\n", "for", "_", ",", "batch", ",", "batch_2d", "in", "test_generator", ".", "next_epoch", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "# inputs_3d[:, :, 0] = 0", "\n", "", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "-", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "\n", "\n", "# Predict 3D poses", "\n", "predicted_3d_pos", "=", "self", ".", "model_pos", "(", "inputs_2d", ")", "\n", "\n", "# Test-time augmentation (if enabled)", "\n", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "# Undo flipping and take average with non-flipped version", "\n", "                    ", "predicted_3d_pos", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_left", "+", "test_generator", ".", "joints_right", "]", "=", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_right", "+", "test_generator", ".", "joints_left", "]", "\n", "\n", "predicted_3d_pos", "=", "torch", ".", "mean", "(", "predicted_3d_pos", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "inputs_3d", "=", "inputs_3d", "[", ":", "1", "]", "\n", "\n", "", "loss_3d_pos", "=", "mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "epoch_p1_3d_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "loss_3d_pos", ".", "item", "(", ")", "\n", "N_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "\n", "\n", "p2_3d_pos", "=", "p_mpjpe", "(", "predicted_3d_pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "inputs_3d", ".", "shape", "[", "-", "2", "]", ",", "inputs_3d", ".", "shape", "[", "-", "1", "]", ")", "\n", ",", "inputs_3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "inputs_3d", ".", "shape", "[", "-", "2", "]", ",", "inputs_3d", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "epoch_p2_3d_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "p2_3d_pos", ".", "item", "(", ")", "\n", "\n", "# analysis result", "\n", "", "epoch_p1_3d_valid", "=", "epoch_p1_3d_valid", "/", "N_valid", "*", "1000", "\n", "epoch_p2_3d_valid", "=", "epoch_p2_3d_valid", "/", "N_valid", "*", "1000", "\n", "\n", "", "elapsed", "=", "(", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "\n", "# epoch-wise log.", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_epoch_{}/{}_p1'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_p1_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_epoch_{}/{}_p2'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_p2_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "\n", "return", "{", "'p1'", ":", "epoch_p1_3d_valid", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.evaluate_posenet_withPCK": [[878, 985], ["time.time.time", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "posegan_basementclass.PoseGANBasement.model_pos.load_state_dict", "posegan_basementclass.PoseGANBasement.model_pos.eval", "test_generator.next_epoch", "posegan_basementclass.PoseGANBasement.model_pos_train.state_dict", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "posegan_basementclass.PoseGANBasement.model_pos", "test_generator.augment_enabled", "torch.mean.cpu().numpy().reshape", "torch.mean.cpu().numpy().reshape", "inputs_3d.cuda.cuda.cpu().numpy().reshape", "common.loss.pose_align", "common.loss.pose_scaled().squeeze().cpu().numpy", "common.loss.compute_PCK", "common.loss.compute_AUC", "common.loss.compute_PCK", "common.loss.compute_AUC", "common.loss.compute_PCK", "common.loss.compute_AUC", "time.time.time", "batch.astype", "batch_2d.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "common.loss.mpjpe().item", "common.loss.p_mpjpe().item", "torch.mean.cpu().numpy", "torch.mean.cpu().numpy", "inputs_3d.cuda.cuda.cpu().numpy", "common.loss.pose_scaled().squeeze().cpu", "common.loss.mpjpe", "common.loss.p_mpjpe", "torch.mean.cpu", "torch.mean.cpu", "inputs_3d.cuda.cuda.cpu", "common.loss.pose_scaled().squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "common.loss.pose_scaled", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.augment_enabled", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.pose_align", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_PCK", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_AUC", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_PCK", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_AUC", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_PCK", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.compute_AUC", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.mpjpe", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.p_mpjpe", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.pose_scaled"], ["", "def", "evaluate_posenet_withPCK", "(", "self", ",", "tag", "=", "'real'", ",", "valset", "=", "'3dhp_flip'", ")", ":", "\n", "        ", "\"\"\"\n        evaluate the performance of posenet for 3DHP\n        :return:\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "# End-of-epoch evaluation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model_pos", ".", "load_state_dict", "(", "self", ".", "model_pos_train", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "model_pos", ".", "eval", "(", ")", "\n", "\n", "epoch_p1_3d_valid", "=", "0", "\n", "epoch_p2_3d_valid", "=", "0", "\n", "epoch_pck_3d_valid", "=", "0", "\n", "epoch_auc_3d_valid", "=", "0", "\n", "epoch_pck_3dscaled_valid", "=", "0", "\n", "epoch_auc_3dscaled_valid", "=", "0", "\n", "epoch_pck_3daligned_valid", "=", "0", "\n", "epoch_auc_3daligned_valid", "=", "0", "\n", "N_valid", "=", "0", "\n", "\n", "test_generator", "=", "self", ".", "val_generator_dict", "[", "valset", "]", "\n", "for", "_", ",", "batch", ",", "batch_2d", "in", "test_generator", ".", "next_epoch", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "# inputs_3d[:, :, 0] = 0", "\n", "", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "-", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "\n", "\n", "# Predict 3D poses", "\n", "predicted_3d_pos", "=", "self", ".", "model_pos", "(", "inputs_2d", ")", "\n", "\n", "# Test-time augmentation (if enabled)", "\n", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "# Undo flipping and take average with non-flipped version", "\n", "                    ", "predicted_3d_pos", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_left", "+", "test_generator", ".", "joints_right", "]", "=", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_right", "+", "test_generator", ".", "joints_left", "]", "\n", "\n", "predicted_3d_pos", "=", "torch", ".", "mean", "(", "predicted_3d_pos", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "inputs_3d", "=", "inputs_3d", "[", ":", "1", "]", "\n", "\n", "# to numpy", "\n", "", "predicted_3d_pos", "=", "predicted_3d_pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "inputs_3d", ".", "shape", "[", "-", "2", "]", ",", "inputs_3d", ".", "shape", "[", "-", "1", "]", ")", "\n", "inputs_3d", "=", "inputs_3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "inputs_3d", ".", "shape", "[", "-", "2", "]", ",", "inputs_3d", ".", "shape", "[", "-", "1", "]", ")", "\n", "# align a pose result", "\n", "predicted_3d_pos_aligned", "=", "pose_align", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "# align a pose result", "\n", "predicted_3d_pos_scaled", "=", "pose_scaled", "(", "torch", ".", "from_numpy", "(", "predicted_3d_pos", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "from_numpy", "(", "inputs_3d", ")", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# caculate p1 p2 pck auc", "\n", "loss_3d_pos", "=", "mpjpe", "(", "torch", ".", "from_numpy", "(", "predicted_3d_pos", ")", ",", "torch", ".", "from_numpy", "(", "inputs_3d", ")", ")", ".", "item", "(", ")", "*", "1000.0", "\n", "p2_3d_pos", "=", "p_mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", ".", "item", "(", ")", "*", "1000.0", "\n", "# compute AUC and PCK", "\n", "pck", "=", "compute_PCK", "(", "inputs_3d", ",", "predicted_3d_pos", ")", "\n", "auc", "=", "compute_AUC", "(", "inputs_3d", ",", "predicted_3d_pos", ")", "\n", "\n", "# compute AUC and PCK after aligned", "\n", "pck_aligned", "=", "compute_PCK", "(", "inputs_3d", ",", "predicted_3d_pos_aligned", ")", "\n", "auc_aligned", "=", "compute_AUC", "(", "inputs_3d", ",", "predicted_3d_pos_aligned", ")", "\n", "\n", "# compute AUC and PCK after aligned", "\n", "pck_scaled", "=", "compute_PCK", "(", "inputs_3d", ",", "predicted_3d_pos_scaled", ")", "\n", "auc_scaled", "=", "compute_AUC", "(", "inputs_3d", ",", "predicted_3d_pos_scaled", ")", "\n", "\n", "epoch_p1_3d_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "loss_3d_pos", "\n", "epoch_p2_3d_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "p2_3d_pos", "\n", "epoch_pck_3d_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "pck", "\n", "epoch_auc_3d_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "auc", "\n", "\n", "epoch_pck_3daligned_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "pck_aligned", "\n", "epoch_auc_3daligned_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "auc_aligned", "\n", "\n", "epoch_pck_3dscaled_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "pck_scaled", "\n", "epoch_auc_3dscaled_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "auc_scaled", "\n", "\n", "N_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "\n", "\n", "# analysis result", "\n", "", "epoch_p1_3d_valid", "=", "epoch_p1_3d_valid", "/", "N_valid", "\n", "epoch_p2_3d_valid", "=", "epoch_p2_3d_valid", "/", "N_valid", "\n", "epoch_pck_3d_valid", "=", "epoch_pck_3d_valid", "/", "N_valid", "\n", "epoch_auc_3d_valid", "=", "epoch_auc_3d_valid", "/", "N_valid", "\n", "\n", "epoch_pck_3daligned_valid", "=", "epoch_pck_3daligned_valid", "/", "N_valid", "\n", "epoch_auc_3daligned_valid", "=", "epoch_auc_3daligned_valid", "/", "N_valid", "\n", "\n", "epoch_pck_3dscaled_valid", "=", "epoch_pck_3dscaled_valid", "/", "N_valid", "\n", "epoch_auc_3dscaled_valid", "=", "epoch_auc_3dscaled_valid", "/", "N_valid", "\n", "\n", "", "elapsed", "=", "(", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "\n", "# epoch-wise log.", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_pck_epoch_{}/{}_p1'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_p1_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_pck_epoch_{}/{}_p2'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_p2_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_pck_epoch_{}/{}_pck'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_pck_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_pck_epoch_{}/{}_auc'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_auc_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_pck_epoch_{}/{}_pck_aligned'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_pck_3daligned_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_pck_epoch_{}/{}_auc_aligned'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_auc_3daligned_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_pck_epoch_{}/{}_pck_scaled'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_pck_3dscaled_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_pck_epoch_{}/{}_auc_scaled'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_auc_3dscaled_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "\n", "return", "{", "\n", "'p1'", ":", "epoch_p1_3d_valid", ",", "\n", "'p2'", ":", "epoch_p2_3d_valid", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.evaluate_trajnet": [[988, 1025], ["time.time.time", "posegan_basementclass.PoseGANBasement.writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "posegan_basementclass.PoseGANBasement.model_traj.load_state_dict", "posegan_basementclass.PoseGANBasement.model_traj.eval", "posegan_basementclass.PoseGANBasement.val_generator_dict[].next_epoch", "posegan_basementclass.PoseGANBasement.model_traj_train.state_dict", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "posegan_basementclass.PoseGANBasement.model_traj", "common.loss.mpjpe", "time.time.time", "batch.astype", "batch_2d.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "common.loss.mpjpe.item"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.mpjpe", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["", "def", "evaluate_trajnet", "(", "self", ",", "tag", "=", "'real'", ",", "valset", "=", "'s911'", ")", ":", "\n", "        ", "\"\"\"\n        evaluate the performance of posenet\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "# End-of-epoch evaluation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model_traj", ".", "load_state_dict", "(", "self", ".", "model_traj_train", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "model_traj", ".", "eval", "(", ")", "\n", "\n", "epoch_p1_3d_valid", "=", "0", "\n", "N_valid", "=", "0", "\n", "\n", "# Evaluate on test set", "\n", "for", "cam", ",", "batch", ",", "batch_2d", "in", "self", ".", "val_generator_dict", "[", "valset", "]", ".", "next_epoch", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "", "target_3d_traj", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "*", "1.", "# focus on root traj.", "\n", "\n", "# Predict 3D trajes", "\n", "predicted_3d_traj", "=", "self", ".", "model_traj", "(", "inputs_2d", ")", "\n", "loss_3d_traj", "=", "mpjpe", "(", "predicted_3d_traj", ",", "target_3d_traj", ")", "\n", "epoch_p1_3d_valid", "+=", "target_3d_traj", ".", "shape", "[", "0", "]", "*", "target_3d_traj", ".", "shape", "[", "1", "]", "*", "loss_3d_traj", ".", "item", "(", ")", "\n", "N_valid", "+=", "target_3d_traj", ".", "shape", "[", "0", "]", "*", "target_3d_traj", ".", "shape", "[", "1", "]", "\n", "\n", "# analysis result", "\n", "", "epoch_p1_3d_valid", "=", "epoch_p1_3d_valid", "/", "N_valid", "*", "1000", "\n", "\n", "", "elapsed", "=", "(", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "\n", "# epoch-wise log.", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_T_epoch_{}/{}_p1'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_p1_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "\n", "return", "{", "'p1'", ":", "epoch_p1_3d_valid", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._zip_GIFplot_array": [[1026, 1041], ["numpy.concatenate", "lst.append", "numpy.concatenate", "lst.append", "item.detach().cpu().numpy", "item.detach().cpu().numpy", "item.detach().cpu", "item.detach().cpu", "numpy.zeros_like", "item.detach", "item.detach"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "_zip_GIFplot_array", "(", "self", ",", "tensor_lst", ")", ":", "\n", "        ", "\"\"\"\n        for plot function pre-preocess\n        \"\"\"", "\n", "lst", "=", "[", "]", "\n", "for", "item", "in", "tensor_lst", ":", "\n", "            ", "if", "item", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "# for 3D case", "\n", "                ", "lst", ".", "append", "(", "item", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", "1", "]", ")", "\n", "", "elif", "item", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "                ", "tmp2d", "=", "item", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", "1", "]", "\n", "tmp2d", "=", "np", ".", "concatenate", "(", "[", "tmp2d", ",", "np", ".", "zeros_like", "(", "tmp2d", ")", "[", "...", ",", "-", "1", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "lst", ".", "append", "(", "tmp2d", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "'wrong data get'", "\n", "", "", "return", "np", ".", "concatenate", "(", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.random_aug_d2d": [[1042, 1047], ["torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "random_aug_d2d", "(", "self", ",", "x", ")", ":", "\n", "        ", "r1", "=", "self", ".", "args", ".", "d2d_random_lb", "\n", "r2", "=", "self", ".", "args", ".", "d2d_random_ub", "\n", "random_weight", "=", "torch", ".", "FloatTensor", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ".", "uniform_", "(", "r1", ",", "r2", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "return", "x", "*", "random_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.__init__": [[34, 44], ["posegan_basementclass.PoseGANBasement.__init__", "nn.MSELoss().to", "posegan_evaluate.PoseGAN.data_preparation", "posegan_evaluate.PoseGAN.dataloader_preparation", "posegan_evaluate.PoseGAN.model_preparation", "nn.MSELoss"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.data_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement.dataloader_preparation", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.model_preparation"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "PoseGANBasement", ".", "__init__", "(", "self", ",", "args", ")", "\n", "# init param", "\n", "# self.augment_len = 32", "\n", "self", ".", "MSE", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# prepare data and dataloader", "\n", "self", ".", "data_preparation", "(", ")", "\n", "self", ".", "dataloader_preparation", "(", ")", "\n", "# prepare model", "\n", "self", ".", "model_preparation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.model_preparation": [[45, 48], ["posegan_evaluate.PoseGAN._model_preparation_pos", "posegan_evaluate.PoseGAN._model_preparation_traj"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._model_preparation_pos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._model_preparation_traj"], ["", "def", "model_preparation", "(", "self", ")", ":", "\n", "        ", "self", ".", "_model_preparation_pos", "(", ")", "\n", "self", ".", "_model_preparation_traj", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.fit": [[49, 70], ["posegan_evaluate.PoseGAN.logger.info", "posegan_evaluate.PoseGAN.save_result", "posegan_evaluate.PoseGAN.vis_result", "posegan_evaluate.PoseGAN.evaluate_posenet", "posegan_evaluate.PoseGAN.evaluate_trajnet"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.save_result", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.vis_result", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_posenet", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_trajnet"], ["", "def", "fit", "(", "self", ",", "args", ")", ":", "\n", "###################################", "\n", "# Train start here.", "\n", "###################################", "\n", "# load pretrain.", "\n", "        ", "if", "args", ".", "pretrain", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Check pretrain model performance.'", ")", "\n", "val_rlt", "=", "{", "}", "\n", "for", "val_set_key", "in", "self", ".", "val_generator_dict", ":", "\n", "                ", "self", ".", "evaluate_posenet", "(", "tag", "=", "'fake'", ",", "valset", "=", "val_set_key", ")", "\n", "self", ".", "evaluate_trajnet", "(", "tag", "=", "'fake'", ",", "valset", "=", "val_set_key", ")", "\n", "# for val_set_key in self.val_generator_dict:", "\n", "#     val_rlt[val_set_key] = self.evaluate_posenet(tag='real', valset=val_set_key)", "\n", "# self.summary.summary_epoch_update()", "\n", "\n", "# vis result on s15678", "\n", "", "val_set_key", "=", "'s15678'", "\n", "# val_set_key = 's15678_flip'", "\n", "tag", "=", "'fake'", "\n", "self", ".", "save_result", "(", "valset", "=", "val_set_key", ")", "\n", "self", ".", "vis_result", "(", "tag", "=", "'fake'", ",", "valset", "=", "val_set_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_posenet": [[72, 127], ["time.time.time", "posegan_evaluate.PoseGAN.writer.add_scalar", "torch.no_grad", "posegan_evaluate.PoseGAN.model_pos.load_state_dict", "posegan_evaluate.PoseGAN.model_pos.eval", "test_generator.next_epoch", "posegan_evaluate.PoseGAN.model_pos_train.state_dict", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "posegan_evaluate.PoseGAN.model_pos", "test_generator.augment_enabled", "common.loss.mpjpe", "posegan_evaluate.PoseGAN.writer.add_scalar", "posegan_evaluate.PoseGAN.summary.summary_test_iter_num_update", "time.time.time", "batch.astype", "batch_2d.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "torch.mean", "common.loss.mpjpe.item", "common.loss.mpjpe.item"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.augment_enabled", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.mpjpe", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_test_iter_num_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "", "def", "evaluate_posenet", "(", "self", ",", "tag", "=", "'real'", ",", "valset", "=", "'s911'", ")", ":", "\n", "        ", "\"\"\"\n        evaluate the performance of posenet on 3 kinds of dataset\n        check every clip performance.\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "# End-of-epoch evaluation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model_pos", ".", "load_state_dict", "(", "self", ".", "model_pos_train", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "model_pos", ".", "eval", "(", ")", "\n", "\n", "epoch_p1_3d_valid", "=", "0", "\n", "N_valid", "=", "0", "\n", "\n", "test_generator", "=", "self", ".", "val_generator_dict", "[", "valset", "]", "\n", "for", "cam_ex", ",", "batch", ",", "batch_2d", "in", "test_generator", ".", "next_epoch", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "# inputs_3d[:, :, 0] = 0", "\n", "", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "-", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "\n", "\n", "# Predict 3D poses", "\n", "predicted_3d_pos", "=", "self", ".", "model_pos", "(", "inputs_2d", ")", "\n", "\n", "# Test-time augmentation (if enabled)", "\n", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "# Undo flipping and take average with non-flipped version", "\n", "                    ", "predicted_3d_pos", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_left", "+", "test_generator", ".", "joints_right", "]", "=", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_right", "+", "test_generator", ".", "joints_left", "]", "\n", "\n", "predicted_3d_pos", "=", "torch", ".", "mean", "(", "predicted_3d_pos", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "inputs_3d", "=", "inputs_3d", "[", ":", "1", "]", "\n", "\n", "", "loss_3d_pos", "=", "mpjpe", "(", "predicted_3d_pos", ",", "inputs_3d", ")", "\n", "epoch_p1_3d_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "*", "loss_3d_pos", ".", "item", "(", ")", "\n", "N_valid", "+=", "inputs_3d", ".", "shape", "[", "0", "]", "*", "inputs_3d", ".", "shape", "[", "1", "]", "\n", "\n", "# batch-wise log.", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_iter_{}/{}_p1'", ".", "format", "(", "tag", ",", "valset", ")", ",", "loss_3d_pos", ".", "item", "(", ")", "*", "1000", ",", "\n", "self", ".", "summary", ".", "test_iter_num", ")", "\n", "self", ".", "summary", ".", "summary_test_iter_num_update", "(", ")", "\n", "\n", "# analysis result", "\n", "", "epoch_p1_3d_valid", "=", "epoch_p1_3d_valid", "/", "N_valid", "*", "1000", "\n", "\n", "", "elapsed", "=", "(", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "\n", "# epoch-wise log.", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_P_epoch_{}/{}_p1'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_p1_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.evaluate_trajnet": [[128, 184], ["time.time.time", "posegan_evaluate.PoseGAN.writer.add_scalar", "torch.no_grad", "posegan_evaluate.PoseGAN.model_traj.load_state_dict", "posegan_evaluate.PoseGAN.model_traj.eval", "posegan_evaluate.PoseGAN.val_generator_dict[].next_epoch", "posegan_evaluate.PoseGAN.model_traj_train.state_dict", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "posegan_evaluate.PoseGAN.model_traj", "common.loss.mpjpe", "posegan_evaluate.PoseGAN.writer.add_scalar", "torch.max", "torch.max", "torch.max", "posegan_evaluate.PoseGAN.writer.add_scalar", "posegan_evaluate.PoseGAN.writer.add_scalar", "posegan_evaluate.PoseGAN.writer.add_scalar", "posegan_evaluate.PoseGAN.summary.summary_test_iter_num_update", "time.time.time", "batch.astype", "batch_2d.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "common.loss.mpjpe.item", "torch.norm", "torch.norm", "torch.norm", "common.loss.mpjpe.item", "torch.max.item", "torch.max.item", "torch.max.item", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.loss.mpjpe", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_test_iter_num_update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "evaluate_trajnet", "(", "self", ",", "tag", "=", "'real'", ",", "valset", "=", "'s911'", ")", ":", "\n", "        ", "\"\"\"\n        evaluate the performance of posenet on 3 kinds of dataset\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "# End-of-epoch evaluation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model_traj", ".", "load_state_dict", "(", "self", ".", "model_traj_train", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "model_traj", ".", "eval", "(", ")", "\n", "\n", "epoch_p1_3d_valid", "=", "0", "\n", "N_valid", "=", "0", "\n", "self", ".", "summary", ".", "test_iter_num", "=", "0", "# reset here.", "\n", "\n", "# Evaluate on test set", "\n", "for", "cam", ",", "batch", ",", "batch_2d", "in", "self", ".", "val_generator_dict", "[", "valset", "]", ".", "next_epoch", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "# else:", "\n", "", "target_3d_traj", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "*", "1.", "# focus on root traj.", "\n", "\n", "# Predict 3D trajes", "\n", "predicted_3d_traj", "=", "self", ".", "model_traj", "(", "inputs_2d", ")", "\n", "loss_3d_traj", "=", "mpjpe", "(", "predicted_3d_traj", ",", "target_3d_traj", ")", "\n", "epoch_p1_3d_valid", "+=", "target_3d_traj", ".", "shape", "[", "0", "]", "*", "target_3d_traj", ".", "shape", "[", "1", "]", "*", "loss_3d_traj", ".", "item", "(", ")", "\n", "N_valid", "+=", "target_3d_traj", ".", "shape", "[", "0", "]", "*", "target_3d_traj", ".", "shape", "[", "1", "]", "\n", "\n", "# batch-wise log.", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_T_iter_{}_traj_error/{}'", ".", "format", "(", "tag", ",", "valset", ")", ",", "loss_3d_traj", ".", "item", "(", ")", "*", "1000", ",", "\n", "self", ".", "summary", ".", "test_iter_num", ")", "\n", "\n", "# check vel.", "\n", "max_traj_pred", "=", "torch", ".", "max", "(", "torch", ".", "norm", "(", "predicted_3d_traj", ",", "dim", "=", "len", "(", "predicted_3d_traj", ".", "shape", ")", "-", "1", ")", ")", "\n", "max_traj_gt", "=", "torch", ".", "max", "(", "torch", ".", "norm", "(", "target_3d_traj", ",", "dim", "=", "len", "(", "target_3d_traj", ".", "shape", ")", "-", "1", ")", ")", "\n", "max_traj_error", "=", "torch", ".", "max", "(", "torch", ".", "norm", "(", "predicted_3d_traj", "-", "target_3d_traj", ",", "dim", "=", "len", "(", "target_3d_traj", ".", "shape", ")", "-", "1", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_T_iter_{}_max_traj_pred/{}'", ".", "format", "(", "tag", ",", "valset", ")", ",", "\n", "max_traj_pred", ".", "item", "(", ")", "*", "1000", ",", "self", ".", "summary", ".", "test_iter_num", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_T_iter_{}_max_traj_gt/{}'", ".", "format", "(", "tag", ",", "valset", ")", ",", "\n", "max_traj_gt", ".", "item", "(", ")", "*", "1000", ",", "self", ".", "summary", ".", "test_iter_num", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_T_iter_{}_max_traj_error/{}'", ".", "format", "(", "tag", ",", "valset", ")", ",", "\n", "max_traj_error", ".", "item", "(", ")", "*", "1000", ",", "self", ".", "summary", ".", "test_iter_num", ")", "\n", "\n", "self", ".", "summary", ".", "summary_test_iter_num_update", "(", ")", "\n", "\n", "# analysis result", "\n", "", "epoch_p1_3d_valid", "=", "epoch_p1_3d_valid", "/", "N_valid", "*", "1000", "\n", "\n", "", "elapsed", "=", "(", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "\n", "# epoch-wise log.", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'eval_T_epoch_{}/{}_p1'", ".", "format", "(", "tag", ",", "valset", ")", ",", "epoch_p1_3d_valid", ",", "self", ".", "summary", ".", "epoch", ")", "\n", "\n", "return", "{", "'p1'", ":", "epoch_p1_3d_valid", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.vis_result": [[185, 264], ["time.time.time", "torch.no_grad", "posegan_evaluate.PoseGAN.model_pos.load_state_dict", "posegan_evaluate.PoseGAN.model_pos.eval", "posegan_evaluate.PoseGAN.model_traj.load_state_dict", "posegan_evaluate.PoseGAN.model_traj.eval", "test_generator.next_epoch", "posegan_evaluate.PoseGAN.model_pos_train.state_dict", "posegan_evaluate.PoseGAN.model_traj_train.state_dict", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "posegan_evaluate.PoseGAN.model_pos", "test_generator.augment_enabled", "posegan_evaluate.PoseGAN.model_traj", "common.camera2world.camera_to_worldByPCA", "batch.astype", "batch_2d.astype", "cam_ex.cuda.cuda.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "cam_ex.cuda.cuda.cuda", "torch.mean", "numpy.arange", "posegan_evaluate.PoseGAN._zip_GIFplot_array", "os.path.join", "posegan_evaluate.PoseGAN.logger.info", "function.viz.Wrap_plot_seq_gif"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.augment_enabled", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.camera_to_worldByPCA", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_basementclass.PoseGANBasement._zip_GIFplot_array", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.Wrap_plot_seq_gif"], ["", "def", "vis_result", "(", "self", ",", "tag", "=", "'real'", ",", "valset", "=", "'s911'", ")", ":", "\n", "        ", "\"\"\"\n        evaluate the performance of posenet on 3 kinds of dataset\n        check every clip performance.\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "# End-of-epoch evaluation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model_pos", ".", "load_state_dict", "(", "self", ".", "model_pos_train", ".", "state_dict", "(", ")", ")", "# \u8fd9\u4e2a\u64cd\u4f5c\u6211\u5f88\u559c\u6b22", "\n", "self", ".", "model_pos", ".", "eval", "(", ")", "\n", "self", ".", "model_traj", ".", "load_state_dict", "(", "self", ".", "model_traj_train", ".", "state_dict", "(", ")", ")", "# \u8fd9\u4e2a\u64cd\u4f5c\u6211\u5f88\u559c\u6b22", "\n", "self", ".", "model_traj", ".", "eval", "(", ")", "\n", "\n", "epoch_p1_3d_valid", "=", "0", "\n", "N_valid", "=", "0", "\n", "batch_num", "=", "0", "\n", "\n", "# Evaluate on test set", "\n", "test_generator", "=", "self", ".", "val_generator_dict", "[", "valset", "]", "\n", "for", "cam_ex", ",", "batch", ",", "batch_2d", "in", "test_generator", ".", "next_epoch", "(", ")", ":", "\n", "                ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "cam_ex", "=", "torch", ".", "from_numpy", "(", "cam_ex", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "cam_ex", "=", "cam_ex", ".", "cuda", "(", ")", "\n", "# inputs_3d[:, :, 0] = 0", "\n", "", "inputs_3d_origin", "=", "inputs_3d", "*", "1.", "# a copy.", "\n", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "-", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "\n", "\n", "# Predict 3D poses", "\n", "predicted_3d_pos", "=", "self", ".", "model_pos", "(", "inputs_2d", ")", "\n", "\n", "# Test-time augmentation (if enabled)", "\n", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "# Undo flipping and take average with non-flipped version", "\n", "                    ", "predicted_3d_pos", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_left", "+", "test_generator", ".", "joints_right", "]", "=", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_right", "+", "test_generator", ".", "joints_left", "]", "\n", "\n", "predicted_3d_pos", "=", "torch", ".", "mean", "(", "predicted_3d_pos", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "inputs_3d", "=", "inputs_3d", "[", ":", "1", "]", "\n", "cam_ex", "=", "cam_ex", "[", ":", "1", "]", "\n", "\n", "# Predict 3D traj", "\n", "", "predicted_3d_traj", "=", "self", ".", "model_traj", "(", "inputs_2d", ")", "\n", "predicted_3d_traj_withroot", "=", "predicted_3d_traj", "[", ":", "1", "]", "\n", "# combine root and pose.", "\n", "predicted_3d_pos_withroot", "=", "predicted_3d_pos", "+", "predicted_3d_traj_withroot", "\n", "# convert to the world space.", "\n", "# predicted_3d_wpos_withroot = cam2world_sktpos(predicted_3d_pos_withroot)", "\n", "# predicted_3d_wpos_withroot = camera_to_worldByTensor(predicted_3d_pos_withroot, cam_ex[..., :4], cam_ex[..., 4:])", "\n", "# predicted_3d_wpos_withroot = camera_to_worldByTensor(predicted_3d_pos_withroot, cam_ex[..., :4],", "\n", "#                                                      torch.zeros_like(cam_ex[..., 4:]))", "\n", "predicted_3d_wpos_withroot", "=", "camera_to_worldByPCA", "(", "predicted_3d_pos_withroot", ")", "\n", "\n", "# visualize result", "\n", "if", "batch_num", "%", "100", "==", "0", "or", "batch_num", "in", "[", "599", "]", ":", "\n", "                    ", "lables", "=", "[", "'predict_cam3d'", ",", "'input_cam3d'", ",", "'input_cam2d'", ",", "'predict_withroot_cam3d'", ",", "\n", "'predict_withroot_world'", "]", "\n", "\n", "clip_len", "=", "predicted_3d_pos", ".", "shape", "[", "1", "]", "\n", "vis_len", "=", "clip_len", "if", "clip_len", "<", "1000", "else", "1000", "\n", "downsample_idx", "=", "np", ".", "arange", "(", "0", ",", "vis_len", ",", "10", ")", "\n", "\n", "seqs", "=", "self", ".", "_zip_GIFplot_array", "(", "[", "\n", "predicted_3d_pos", "[", ":", ",", "downsample_idx", "]", ",", "inputs_3d_origin", "[", ":", ",", "downsample_idx", "]", ",", "\n", "inputs_2d", "[", ":", ",", "downsample_idx", "]", ",", "predicted_3d_pos_withroot", "[", ":", ",", "downsample_idx", "]", ",", "\n", "predicted_3d_wpos_withroot", "[", ":", ",", "downsample_idx", "]", ",", "\n", "]", ")", "\n", "gif_save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "'EvaluationGif/{}/epoch{:0>3d}_batch{:0>3d}.gif'", ".", "format", "(", "valset", ",", "\n", "self", ".", "summary", ".", "epoch", ",", "batch_num", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'plotting image-->{}'", ".", "format", "(", "gif_save_path", ")", ")", "\n", "Wrap_plot_seq_gif", "(", "seqs", "=", "seqs", ",", "labs", "=", "lables", ",", "save_path", "=", "gif_save_path", ")", "\n", "\n", "", "batch_num", "=", "batch_num", "+", "1", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.save_result": [[265, 352], ["time.time.time", "enumerate", "function.utils.mkd", "posegan_evaluate.PoseGAN.write_standard_bvh_multi_process", "torch.no_grad", "posegan_evaluate.PoseGAN.model_pos.load_state_dict", "posegan_evaluate.PoseGAN.model_pos.eval", "posegan_evaluate.PoseGAN.model_traj.load_state_dict", "posegan_evaluate.PoseGAN.model_traj.eval", "test_generator.next_epoch", "open", "pickle.dump", "posegan_evaluate.PoseGAN.model_pos_train.state_dict", "posegan_evaluate.PoseGAN.model_traj_train.state_dict", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "posegan_evaluate.PoseGAN.model_pos", "test_generator.augment_enabled", "posegan_evaluate.PoseGAN.model_traj", "common.camera2world.camera_to_worldByPCA", "numpy.random.randn", "numpy.array", "result_all_lst.append", "range", "batch.astype", "batch_2d.astype", "cam_ex.cuda.cuda.astype", "inputs_3d.cuda.cuda.cuda", "inputs_2d.cuda.cuda.cuda", "cam_ex.cuda.cuda.cuda", "torch.mean", "cam_ex.cuda.cuda.detach().cpu().numpy", "inputs_2d.cuda.cuda.detach().cpu().numpy", "inputs_3d_origin.detach().cpu().numpy", "predicted_3d_pos_withroot.detach().cpu().numpy", "common.camera2world.camera_to_worldByPCA.detach().cpu().numpy", "cam_ex.cuda.cuda.detach().cpu", "inputs_2d.cuda.cuda.detach().cpu", "inputs_3d_origin.detach().cpu", "predicted_3d_pos_withroot.detach().cpu", "common.camera2world.camera_to_worldByPCA.detach().cpu", "cam_ex.cuda.cuda.detach", "inputs_2d.cuda.cuda.detach", "inputs_3d_origin.detach", "predicted_3d_pos_withroot.detach", "common.camera2world.camera_to_worldByPCA.detach"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.write_standard_bvh_multi_process", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.next_epoch", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.generators.ChunkedNoPadGenerator_Dcam.augment_enabled", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera2world.camera_to_worldByPCA", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "save_result", "(", "self", ",", "valset", ")", ":", "\n", "        ", "\"\"\"\n        evaluate and save the s15678 / s15678_flip\n        \"\"\"", "\n", "start_time", "=", "time", "(", ")", "\n", "# result_lst = []", "\n", "result_all_lst", "=", "[", "]", "\n", "# End-of-epoch evaluation", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model_pos", ".", "load_state_dict", "(", "self", ".", "model_pos_train", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "model_pos", ".", "eval", "(", ")", "\n", "self", ".", "model_traj", ".", "load_state_dict", "(", "self", ".", "model_traj_train", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "model_traj", ".", "eval", "(", ")", "\n", "\n", "# Evaluate on test set", "\n", "test_generator", "=", "self", ".", "val_generator_dict", "[", "valset", "]", "\n", "for", "cam_ex", ",", "batch", ",", "batch_2d", "in", "test_generator", ".", "next_epoch", "(", ")", ":", "\n", "# for cam_ex, batch, batch_2d in self.val_generator_dict[valset].next_epoch():", "\n", "                ", "inputs_3d", "=", "torch", ".", "from_numpy", "(", "batch", ".", "astype", "(", "'float32'", ")", ")", "\n", "inputs_2d", "=", "torch", ".", "from_numpy", "(", "batch_2d", ".", "astype", "(", "'float32'", ")", ")", "\n", "cam_ex", "=", "torch", ".", "from_numpy", "(", "cam_ex", ".", "astype", "(", "'float32'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "inputs_3d", "=", "inputs_3d", ".", "cuda", "(", ")", "\n", "inputs_2d", "=", "inputs_2d", ".", "cuda", "(", ")", "\n", "cam_ex", "=", "cam_ex", ".", "cuda", "(", ")", "\n", "# inputs_3d[:, :, 0] = 0", "\n", "", "inputs_3d_origin", "=", "inputs_3d", "*", "1.", "# a copy.", "\n", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "inputs_3d", "[", ":", ",", ":", ",", ":", ",", ":", "]", "-", "inputs_3d", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "\n", "\n", "# Predict 3D poses", "\n", "predicted_3d_pos", "=", "self", ".", "model_pos", "(", "inputs_2d", ")", "\n", "\n", "# Test-time augmentation (if enabled)", "\n", "if", "test_generator", ".", "augment_enabled", "(", ")", ":", "\n", "# Undo flipping and take average with non-flipped version", "\n", "                    ", "predicted_3d_pos", "[", "1", ",", ":", ",", ":", ",", "0", "]", "*=", "-", "1", "\n", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_left", "+", "test_generator", ".", "joints_right", "]", "=", "predicted_3d_pos", "[", "1", ",", ":", ",", "test_generator", ".", "joints_right", "+", "test_generator", ".", "joints_left", "]", "\n", "\n", "predicted_3d_pos", "=", "torch", ".", "mean", "(", "predicted_3d_pos", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "inputs_3d", "=", "inputs_3d", "[", ":", "1", "]", "\n", "cam_ex", "=", "cam_ex", "[", ":", "1", "]", "\n", "\n", "# Predict 3D traj", "\n", "", "predicted_3d_traj", "=", "self", ".", "model_traj", "(", "inputs_2d", ")", "\n", "predicted_3d_traj_withroot", "=", "predicted_3d_traj", "[", ":", "1", "]", "\n", "# combine root and pose.", "\n", "predicted_3d_pos_withroot", "=", "predicted_3d_pos", "+", "predicted_3d_traj_withroot", "\n", "# change to world space", "\n", "# predicted_3d_wpos_withroot = cam2world_sktpos(predicted_3d_pos_withroot)", "\n", "# predicted_3d_wpos_withroot = camera_to_worldByTensor(predicted_3d_pos_withroot, cam_ex[..., :4], cam_ex[..., 4:])", "\n", "# predicted_3d_wpos_withroot = camera_to_worldByTensor(predicted_3d_pos_withroot, cam_ex[..., :4],", "\n", "#                                                  torch.zeros_like(cam_ex[..., 4:]))", "\n", "predicted_3d_wpos_withroot", "=", "camera_to_worldByPCA", "(", "predicted_3d_pos_withroot", ",", "cam_ex", "[", "...", ",", ":", "4", "]", ")", "\n", "\n", "# fake some qpos data, later will be replaced.", "\n", "predicted_3d_qpos", "=", "np", ".", "random", ".", "randn", "(", "inputs_3d", ".", "shape", "[", "1", "]", ",", "59", ")", "\n", "predicted_3d_qpos", "[", ":", ",", ":", "7", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "2", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "result_all_lst", ".", "append", "(", "{", "\n", "'cam_ex'", ":", "cam_ex", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "\n", "'inputs_2d'", ":", "inputs_2d", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "self", ".", "pad", ":", "-", "self", ".", "pad", "]", ",", "\n", "'inputs_3d'", ":", "inputs_3d_origin", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "\n", "'predicted_3d'", ":", "predicted_3d_pos_withroot", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "\n", "'predicted_3d_wpos'", ":", "predicted_3d_wpos_withroot", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "\n", "'predicted_3d_qpos'", ":", "predicted_3d_qpos", ",", "\n", "}", ")", "\n", "\n", "##########################################################", "\n", "# save result.", "\n", "# result_dict = {}", "\n", "", "", "takes", "=", "[", "'h36m_take_{:0>3d}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "600", ")", "]", "\n", "# takes = ['h36m_take_{:0>3d}'.format(i) for i in range(60)]", "\n", "result_all_dict", "=", "{", "}", "\n", "for", "i", ",", "take", "in", "enumerate", "(", "takes", ")", ":", "\n", "            ", "result_all_dict", "[", "take", "]", "=", "result_all_lst", "[", "i", "]", "\n", "", "mkd", "(", "self", ".", "args", ".", "traj_save_path", ")", "\n", "with", "open", "(", "self", ".", "args", ".", "traj_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "result_all_dict", ",", "f", ")", "\n", "# save bvh in multi-process.", "\n", "# for i, take in enumerate(takes):", "\n", "#     predicted_3d_wpos_withroot = result_all_dict[take]['predicted_3d_wpos']", "\n", "#     bvhfileName = self.args.traj_save_path.replace('traj_dict/traj_dict.pkl', 'traj_bvh/'+take+'.bvh')", "\n", "#     self.write_standard_bvh(bvhfileName, predicted_3d_wpos_withroot)", "\n", "", "self", ".", "write_standard_bvh_multi_process", "(", "takes", ",", "result_all_dict", ")", "\n", "##########################################################", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.write_standard_bvh_multi_process": [[353, 386], ["range", "numpy.copy", "function.gan_utils.pose_seq_bl_reset().numpy", "numpy.min", "posegan_evaluate.PoseGAN.args.traj_save_path.replace", "posegan_evaluate.PoseGAN.write_standard_bvh", "math.ceil", "range", "print", "multiprocessing.Process", "p_lst.append", "multiprocessing.Process.start", "multiprocessing.Process.join", "function.gan_utils.pose_seq_bl_reset", "len", "len", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.write_standard_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.pose_seq_bl_reset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "write_standard_bvh_multi_process", "(", "self", ",", "takes", ",", "result_all_dict", ")", ":", "\n", "\n", "        ", "def", "wrap_write_standard_bvh", "(", "take", ")", ":", "\n", "            ", "predicted_3d_wpos_withroot", "=", "np", ".", "copy", "(", "result_all_dict", "[", "take", "]", "[", "'predicted_3d_wpos'", "]", ")", "\n", "# reset bl to rl setting", "\n", "predicted_3d_wpos_withroot", "=", "pose_seq_bl_reset", "(", "torch", ".", "from_numpy", "(", "predicted_3d_wpos_withroot", ")", ")", ".", "numpy", "(", ")", "\n", "# ground_z = np.min(predicted_3d_wpos_withroot[:, :, -1:])", "\n", "ground_z", "=", "np", ".", "min", "(", "predicted_3d_wpos_withroot", "[", ":", ",", ":", ",", "-", "1", ":", "]", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "predicted_3d_wpos_withroot", "[", ":", ",", ":", ",", "-", "1", ":", "]", "=", "predicted_3d_wpos_withroot", "[", ":", ",", ":", ",", "-", "1", ":", "]", "-", "ground_z", "\n", "bvhfileName", "=", "self", ".", "args", ".", "traj_save_path", ".", "replace", "(", "'traj_dict/traj_dict.pkl'", ",", "'traj_bvh/'", "+", "take", "+", "'.bvh'", ")", "\n", "self", ".", "write_standard_bvh", "(", "bvhfileName", ",", "predicted_3d_wpos_withroot", ")", "\n", "\n", "# start", "\n", "", "task_lst", "=", "takes", "\n", "num_threads", "=", "args", ".", "num_threads", "\n", "\n", "for", "ep", "in", "range", "(", "math", ".", "ceil", "(", "len", "(", "task_lst", ")", "/", "num_threads", ")", ")", ":", "\n", "\n", "            ", "p_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_threads", ")", ":", "\n", "                ", "idx", "=", "ep", "*", "num_threads", "+", "i", "\n", "if", "idx", ">=", "len", "(", "task_lst", ")", ":", "\n", "                    ", "break", "\n", "", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "wrap_write_standard_bvh", ",", "args", "=", "(", "task_lst", "[", "idx", "]", ",", ")", ")", "\n", "p_lst", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "p_lst", ":", "\n", "                ", "p", ".", "start", "(", ")", "\n", "\n", "", "for", "p", "in", "p_lst", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "\n", "", "print", "(", "'complete ep:'", ",", "ep", ")", "\n", "# end.", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.estimator.posegan_evaluate.PoseGAN.write_standard_bvh": [[388, 409], ["function.utils.mkd", "bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter", "bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint", "bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton", "bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton.poses2bvh"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.poses2bvh"], ["", "", "def", "write_standard_bvh", "(", "self", ",", "bvhfileName", ",", "prediction3dpoint", ")", ":", "\n", "        ", "'''\n        :param outbvhfilepath:\n        :param prediction3dpoint:\n        :return:\n        '''", "\n", "\n", "# scale 100 for bvhacker vis.", "\n", "for", "frame", "in", "prediction3dpoint", ":", "\n", "            ", "for", "point3d", "in", "frame", ":", "\n", "                ", "point3d", "[", "0", "]", "*=", "100", "\n", "point3d", "[", "1", "]", "*=", "100", "\n", "point3d", "[", "2", "]", "*=", "100", "\n", "\n", "", "", "mkd", "(", "bvhfileName", ")", "\n", "# 16 joint to 21 joint", "\n", "Converter", "=", "humanoid_1205_skeleton", ".", "SkeletonConverter", "(", ")", "\n", "prediction3dpoint", "=", "Converter", ".", "convert_to_21joint", "(", "prediction3dpoint", ")", "\n", "# save bvh.", "\n", "human36m_skeleton", "=", "humanoid_1205_skeleton", ".", "H36mSkeleton", "(", ")", "\n", "human36m_skeleton", ".", "poses2bvh", "(", "prediction3dpoint", ",", "output_file", "=", "bvhfileName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.counter.Counter.update": [[26, 28], ["counter.Counter.write", "str"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "write", "(", "str", "(", "self", ".", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.counter.Countdown.update": [[33, 35], ["counter.Countdown.write", "str"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "write", "(", "str", "(", "self", ".", "remaining", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.counter.Stack.update": [[41, 45], ["len", "min", "counter.Stack.write", "int"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["def", "update", "(", "self", ")", ":", "\n", "        ", "nphases", "=", "len", "(", "self", ".", "phases", ")", "\n", "i", "=", "min", "(", "nphases", "-", "1", ",", "int", "(", "self", ".", "progress", "*", "nphases", ")", ")", "\n", "self", ".", "write", "(", "self", ".", "phases", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.spinner.Spinner.update": [[27, 30], ["spinner.Spinner.write", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "update", "(", "self", ")", ":", "\n", "        ", "i", "=", "self", ".", "index", "%", "len", "(", "self", ".", "phases", ")", "\n", "self", ".", "write", "(", "self", ".", "phases", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.bar.Bar.update": [[32, 43], ["int", "bar.Bar.writeln"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WritelnMixin.writeln"], ["def", "update", "(", "self", ")", ":", "\n", "        ", "filled_length", "=", "int", "(", "self", ".", "width", "*", "self", ".", "progress", ")", "\n", "empty_length", "=", "self", ".", "width", "-", "filled_length", "\n", "\n", "message", "=", "self", ".", "message", "%", "self", "\n", "bar", "=", "self", ".", "fill", "*", "filled_length", "\n", "empty", "=", "self", ".", "empty_fill", "*", "empty_length", "\n", "suffix", "=", "self", ".", "suffix", "%", "self", "\n", "line", "=", "''", ".", "join", "(", "[", "message", ",", "self", ".", "bar_prefix", ",", "bar", ",", "empty", ",", "self", ".", "bar_suffix", ",", "\n", "suffix", "]", ")", "\n", "self", ".", "writeln", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.bar.IncrementalBar.update": [[66, 81], ["len", "int", "int", "bar.IncrementalBar.writeln", "max", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WritelnMixin.writeln", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "update", "(", "self", ")", ":", "\n", "        ", "nphases", "=", "len", "(", "self", ".", "phases", ")", "\n", "filled_len", "=", "self", ".", "width", "*", "self", ".", "progress", "\n", "nfull", "=", "int", "(", "filled_len", ")", "# Number of full chars", "\n", "phase", "=", "int", "(", "(", "filled_len", "-", "nfull", ")", "*", "nphases", ")", "# Phase of last char", "\n", "nempty", "=", "self", ".", "width", "-", "nfull", "# Number of empty chars", "\n", "\n", "message", "=", "self", ".", "message", "%", "self", "\n", "bar", "=", "self", ".", "phases", "[", "-", "1", "]", "*", "nfull", "\n", "current", "=", "self", ".", "phases", "[", "phase", "]", "if", "phase", ">", "0", "else", "''", "\n", "empty", "=", "self", ".", "empty_fill", "*", "max", "(", "0", ",", "nempty", "-", "len", "(", "current", ")", ")", "\n", "suffix", "=", "self", ".", "suffix", "%", "self", "\n", "line", "=", "''", ".", "join", "(", "[", "message", ",", "self", ".", "bar_prefix", ",", "bar", ",", "current", ",", "empty", ",", "\n", "self", ".", "bar_suffix", ",", "suffix", "]", ")", "\n", "self", ".", "writeln", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.__init__": [[25, 36], ["object.__init__", "helpers.WriteMixin.file.isatty", "print", "helpers.WriteMixin.file.flush", "print"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "message", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WriteMixin", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_width", "=", "0", "\n", "if", "message", ":", "\n", "            ", "self", ".", "message", "=", "message", "\n", "\n", "", "if", "self", ".", "file", ".", "isatty", "(", ")", ":", "\n", "            ", "if", "self", ".", "hide_cursor", ":", "\n", "                ", "print", "(", "HIDE_CURSOR", ",", "end", "=", "''", ",", "file", "=", "self", ".", "file", ")", "\n", "", "print", "(", "self", ".", "message", ",", "end", "=", "''", ",", "file", "=", "self", ".", "file", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write": [[37, 44], ["helpers.WriteMixin.file.isatty", "s.ljust", "print", "max", "helpers.WriteMixin.file.flush", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "def", "write", "(", "self", ",", "s", ")", ":", "\n", "        ", "if", "self", ".", "file", ".", "isatty", "(", ")", ":", "\n", "            ", "b", "=", "'\\b'", "*", "self", ".", "_width", "\n", "c", "=", "s", ".", "ljust", "(", "self", ".", "_width", ")", "\n", "print", "(", "b", "+", "c", ",", "end", "=", "''", ",", "file", "=", "self", ".", "file", ")", "\n", "self", ".", "_width", "=", "max", "(", "self", ".", "_width", ",", "len", "(", "s", ")", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.finish": [[45, 48], ["helpers.WriteMixin.file.isatty", "print"], "methods", ["None"], ["", "", "def", "finish", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", ".", "isatty", "(", ")", "and", "self", ".", "hide_cursor", ":", "\n", "            ", "print", "(", "SHOW_CURSOR", ",", "end", "=", "''", ",", "file", "=", "self", ".", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WritelnMixin.__init__": [[53, 60], ["object.__init__", "helpers.WritelnMixin.file.isatty", "print"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "message", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WritelnMixin", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "message", ":", "\n", "            ", "self", ".", "message", "=", "message", "\n", "\n", "", "if", "self", ".", "file", ".", "isatty", "(", ")", "and", "self", ".", "hide_cursor", ":", "\n", "            ", "print", "(", "HIDE_CURSOR", ",", "end", "=", "''", ",", "file", "=", "self", ".", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WritelnMixin.clearln": [[61, 64], ["helpers.WritelnMixin.file.isatty", "print"], "methods", ["None"], ["", "", "def", "clearln", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", ".", "isatty", "(", ")", ":", "\n", "            ", "print", "(", "'\\r\\x1b[K'", ",", "end", "=", "''", ",", "file", "=", "self", ".", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WritelnMixin.writeln": [[65, 70], ["helpers.WritelnMixin.file.isatty", "helpers.WritelnMixin.clearln", "print", "helpers.WritelnMixin.file.flush"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WritelnMixin.clearln"], ["", "", "def", "writeln", "(", "self", ",", "line", ")", ":", "\n", "        ", "if", "self", ".", "file", ".", "isatty", "(", ")", ":", "\n", "            ", "self", ".", "clearln", "(", ")", "\n", "print", "(", "line", ",", "end", "=", "''", ",", "file", "=", "self", ".", "file", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WritelnMixin.finish": [[71, 76], ["helpers.WritelnMixin.file.isatty", "print", "print"], "methods", ["None"], ["", "", "def", "finish", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", ".", "isatty", "(", ")", ":", "\n", "            ", "print", "(", "file", "=", "self", ".", "file", ")", "\n", "if", "self", ".", "hide_cursor", ":", "\n", "                ", "print", "(", "SHOW_CURSOR", ",", "end", "=", "''", ",", "file", "=", "self", ".", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.SigIntMixin.__init__": [[85, 88], ["object.__init__", "signal.signal.signal"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SigIntMixin", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "signal", "(", "SIGINT", ",", "self", ".", "_sigint_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.SigIntMixin._sigint_handler": [[89, 92], ["helpers.SigIntMixin.finish", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.finish"], ["", "def", "_sigint_handler", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "        ", "self", ".", "finish", "(", ")", "\n", "exit", "(", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.__init__": [[31, 39], ["time.time.time", "collections.deque", "kwargs.items", "setattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.__getitem__": [[40, 44], ["key.startswith", "getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.elapsed": [[45, 48], ["int", "time.time.time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.elapsed_td": [[49, 52], ["datetime.timedelta"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.update_avg": [[53, 57], ["__init__.Infinite._xput.append", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.update": [[58, 60], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.start": [[61, 63], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.finish": [[64, 66], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next": [[67, 74], ["time.time.time", "__init__.Infinite.update_avg", "__init__.Infinite.update"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.update_avg", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.iter": [[75, 82], ["__init__.Infinite.finish", "__init__.Infinite.next"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.finish", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.__init__": [[85, 88], ["__init__.Infinite.__init__", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.eta": [[89, 92], ["int", "math.ceil"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.eta_td": [[93, 96], ["datetime.timedelta"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.percent": [[97, 100], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.progress": [[101, 104], ["min"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.remaining": [[105, 108], ["max"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start": [[109, 111], ["__init__.Progress.update"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.goto": [[112, 115], ["__init__.Progress.next"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.iter": [[116, 128], ["len", "__init__.Progress.finish", "__init__.Progress.next"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.finish", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Infinite.next"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.prepare_data_2d_custom.decode": [[18, 62], ["print", "numpy.load", "data[].item", "range", "numpy.array", "numpy.array", "numpy.arange", "range", "range", "print", "print", "print", "len", "numpy.argmax", "[].T.copy", "results_bb.append", "results_kp.append", "numpy.isnan", "len", "numpy.interp", "range", "results_bb.append", "results_kp.append", "numpy.interp", "len", "numpy.sum", "len", "len", "numpy.full", "numpy.full", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "decode", "(", "filename", ")", ":", "\n", "# Latin1 encoding because Detectron runs on Python 2.7", "\n", "    ", "print", "(", "'Processing {}'", ".", "format", "(", "filename", ")", ")", "\n", "data", "=", "np", ".", "load", "(", "filename", ",", "encoding", "=", "'latin1'", ",", "allow_pickle", "=", "True", ")", "\n", "bb", "=", "data", "[", "'boxes'", "]", "\n", "kp", "=", "data", "[", "'keypoints'", "]", "\n", "metadata", "=", "data", "[", "'metadata'", "]", ".", "item", "(", ")", "\n", "results_bb", "=", "[", "]", "\n", "results_kp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bb", ")", ")", ":", "\n", "        ", "if", "len", "(", "bb", "[", "i", "]", "[", "1", "]", ")", "==", "0", "or", "len", "(", "kp", "[", "i", "]", "[", "1", "]", ")", "==", "0", ":", "\n", "# No bbox/keypoints detected for this frame -> will be interpolated", "\n", "            ", "results_bb", ".", "append", "(", "np", ".", "full", "(", "4", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", ")", "# 4 bounding box coordinates", "\n", "results_kp", ".", "append", "(", "np", ".", "full", "(", "(", "17", ",", "4", ")", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", ")", "# 17 COCO keypoints", "\n", "continue", "\n", "", "best_match", "=", "np", ".", "argmax", "(", "bb", "[", "i", "]", "[", "1", "]", "[", ":", ",", "4", "]", ")", "\n", "best_bb", "=", "bb", "[", "i", "]", "[", "1", "]", "[", "best_match", ",", ":", "4", "]", "\n", "best_kp", "=", "kp", "[", "i", "]", "[", "1", "]", "[", "best_match", "]", ".", "T", ".", "copy", "(", ")", "\n", "results_bb", ".", "append", "(", "best_bb", ")", "\n", "results_kp", ".", "append", "(", "best_kp", ")", "\n", "\n", "", "bb", "=", "np", ".", "array", "(", "results_bb", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kp", "=", "np", ".", "array", "(", "results_kp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kp", "=", "kp", "[", ":", ",", ":", ",", ":", "2", "]", "# Extract (x, y)", "\n", "\n", "# Fix missing bboxes/keypoints by linear interpolation", "\n", "mask", "=", "~", "np", ".", "isnan", "(", "bb", "[", ":", ",", "0", "]", ")", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "bb", ")", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "bb", "[", ":", ",", "i", "]", "=", "np", ".", "interp", "(", "indices", ",", "indices", "[", "mask", "]", ",", "bb", "[", "mask", ",", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "17", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "kp", "[", ":", ",", "i", ",", "j", "]", "=", "np", ".", "interp", "(", "indices", ",", "indices", "[", "mask", "]", ",", "kp", "[", "mask", ",", "i", ",", "j", "]", ")", "\n", "\n", "", "", "print", "(", "'{} total frames processed'", ".", "format", "(", "len", "(", "bb", ")", ")", ")", "\n", "print", "(", "'{} frames were interpolated'", ".", "format", "(", "np", ".", "sum", "(", "~", "mask", ")", ")", ")", "\n", "print", "(", "'----------'", ")", "\n", "\n", "return", "[", "{", "\n", "'start_frame'", ":", "0", ",", "# Inclusive", "\n", "'end_frame'", ":", "len", "(", "kp", ")", ",", "# Exclusive", "\n", "'bounding_boxes'", ":", "bb", ",", "\n", "'keypoints'", ":", "kp", ",", "\n", "}", "]", ",", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.data_utils.suggest_metadata": [[55, 62], ["KeyError", "names.append"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["def", "suggest_metadata", "(", "name", ")", ":", "\n", "    ", "names", "=", "[", "]", "\n", "for", "metadata", "in", "[", "mpii_metadata", ",", "coco_metadata", ",", "h36m_metadata", ",", "humaneva15_metadata", ",", "humaneva20_metadata", "]", ":", "\n", "        ", "if", "metadata", "[", "'layout_name'", "]", "in", "name", ":", "\n", "            ", "return", "metadata", "\n", "", "names", ".", "append", "(", "metadata", "[", "'layout_name'", "]", ")", "\n", "", "raise", "KeyError", "(", "'Cannot infer keypoint layout from name \"{}\". Tried {}.'", ".", "format", "(", "name", ",", "names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.data_utils.import_detectron_poses": [[63, 80], ["numpy.load", "range", "numpy.array", "len", "numpy.argmax", "[].T.copy", "np.array.append", "len", "np.array.append"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "import_detectron_poses", "(", "path", ")", ":", "\n", "# Latin1 encoding because Detectron runs on Python 2.7", "\n", "    ", "data", "=", "np", ".", "load", "(", "path", ",", "encoding", "=", "'latin1'", ")", "\n", "kp", "=", "data", "[", "'keypoints'", "]", "\n", "bb", "=", "data", "[", "'boxes'", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bb", ")", ")", ":", "\n", "        ", "if", "len", "(", "bb", "[", "i", "]", "[", "1", "]", ")", "==", "0", ":", "\n", "            ", "assert", "i", ">", "0", "\n", "# Use last pose in case of detection failure", "\n", "results", ".", "append", "(", "results", "[", "-", "1", "]", ")", "\n", "continue", "\n", "", "best_match", "=", "np", ".", "argmax", "(", "bb", "[", "i", "]", "[", "1", "]", "[", ":", ",", "4", "]", ")", "\n", "keypoints", "=", "kp", "[", "i", "]", "[", "1", "]", "[", "best_match", "]", ".", "T", ".", "copy", "(", ")", "\n", "results", ".", "append", "(", "keypoints", ")", "\n", "", "results", "=", "np", ".", "array", "(", "results", ")", "\n", "return", "results", "[", ":", ",", ":", ",", "4", ":", "6", "]", "# Soft-argmax", "\n", "#return results[:, :, [0, 1, 3]] # Argmax + score", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.data_utils.import_cpn_poses": [[83, 87], ["numpy.load"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["", "def", "import_cpn_poses", "(", "path", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "path", ")", "\n", "kp", "=", "data", "[", "'keypoints'", "]", "\n", "return", "kp", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.data_utils.import_sh_poses": [[89, 94], ["positions.astype", "h5py.File"], "function", ["None"], ["", "def", "import_sh_poses", "(", "path", ")", ":", "\n", "    ", "import", "h5py", "\n", "with", "h5py", ".", "File", "(", "path", ")", "as", "hf", ":", "\n", "        ", "positions", "=", "hf", "[", "'poses'", "]", ".", "value", "\n", "", "return", "positions", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.data_utils.suggest_pose_importer": [[95, 103], ["KeyError"], "function", ["None"], ["", "def", "suggest_pose_importer", "(", "name", ")", ":", "\n", "    ", "if", "'detectron'", "in", "name", ":", "\n", "        ", "return", "import_detectron_poses", "\n", "", "if", "'cpn'", "in", "name", ":", "\n", "        ", "return", "import_cpn_poses", "\n", "", "if", "'sh'", "in", "name", ":", "\n", "        ", "return", "import_sh_poses", "\n", "", "raise", "KeyError", "(", "'Cannot infer keypoint format from name \"{}\". Tried detectron, cpn, sh.'", ".", "format", "(", "name", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.data.prepare_data_2d_h36m_sh.process_subject": [[41, 59], ["[].replace().split", "len", "str", "len", "str", "h5py.File", "positions.astype", "len", "len", "[].replace", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "process_subject", "(", "subject", ",", "file_list", ",", "output", ")", ":", "\n", "    ", "if", "subject", "==", "'S11'", ":", "\n", "        ", "assert", "len", "(", "file_list", ")", "==", "119", ",", "\"Expected 119 files for subject \"", "+", "subject", "+", "\", got \"", "+", "str", "(", "len", "(", "file_list", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "file_list", ")", "==", "120", ",", "\"Expected 120 files for subject \"", "+", "subject", "+", "\", got \"", "+", "str", "(", "len", "(", "file_list", ")", ")", "\n", "\n", "", "for", "f", "in", "file_list", ":", "\n", "        ", "action", ",", "cam", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "f", ")", ")", "[", "0", "]", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "split", "(", "'.'", ")", "\n", "\n", "if", "subject", "==", "'S11'", "and", "action", "==", "'Directions'", ":", "\n", "            ", "continue", "# Discard corrupted video", "\n", "\n", "", "if", "action", "not", "in", "output", "[", "subject", "]", ":", "\n", "            ", "output", "[", "subject", "]", "[", "action", "]", "=", "[", "None", ",", "None", ",", "None", ",", "None", "]", "\n", "\n", "", "with", "h5py", ".", "File", "(", "f", ")", "as", "hf", ":", "\n", "            ", "positions", "=", "hf", "[", "'poses'", "]", ".", "value", "\n", "output", "[", "subject", "]", "[", "action", "]", "[", "cam_map", "[", "cam", "]", "]", "=", "positions", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter.__init__": [[12, 71], ["len", "len", "humanoid_1205_skeleton.SkeletonConverter.keypoint2index.items", "humanoid_1205_skeleton.SkeletonConverter.keypoint2index_21joint.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "\n", "\n", "class", "SkeletonConverter", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'Hips'", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Hips'", ":", "0", ",", "\n", "'RightUpLeg'", ":", "1", ",", "\n", "'RightLeg'", ":", "2", ",", "\n", "'RightFoot'", ":", "3", ",", "\n", "'LeftUpLeg'", ":", "4", ",", "\n", "'LeftLeg'", ":", "5", ",", "\n", "'LeftFoot'", ":", "6", ",", "\n", "'Spine2'", ":", "7", ",", "\n", "# 'Spine3': 8,", "\n", "'Neck'", ":", "8", ",", "\n", "'Head'", ":", "9", ",", "\n", "'LeftArm'", ":", "10", ",", "\n", "'LeftForeArm'", ":", "11", ",", "\n", "'LeftHand'", ":", "12", ",", "\n", "'RightArm'", ":", "13", ",", "\n", "'RightForeArm'", ":", "14", ",", "\n", "'RightHand'", ":", "15", ",", "\n", "# 'RightFootEndSite': -1,", "\n", "# 'LeftFootEndSite': -1,", "\n", "# 'LeftHandEndSite': -1,", "\n", "# 'RightHandEndSite': -1", "\n", "}", "\n", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "# new joint index keypoint setting", "\n", "self", ".", "keypoint2index_21joint", "=", "{", "\n", "'Hips'", ":", "0", ",", "\n", "'RightUpLeg'", ":", "1", ",", "\n", "'RightLeg'", ":", "2", ",", "\n", "'RightFoot'", ":", "3", ",", "\n", "'LeftUpLeg'", ":", "4", ",", "\n", "'LeftLeg'", ":", "5", ",", "\n", "'LeftFoot'", ":", "6", ",", "\n", "'Spine'", ":", "7", ",", "\n", "'Spine1'", ":", "8", ",", "\n", "'Spine2'", ":", "9", ",", "\n", "'Spine3'", ":", "10", ",", "\n", "'Neck'", ":", "11", ",", "\n", "'Head'", ":", "12", ",", "\n", "'LeftShoulder'", ":", "13", ",", "\n", "'LeftArm'", ":", "14", ",", "\n", "'LeftForeArm'", ":", "15", ",", "\n", "'LeftHand'", ":", "16", ",", "\n", "'RightShoulder'", ":", "17", ",", "\n", "'RightArm'", ":", "18", ",", "\n", "'RightForeArm'", ":", "19", ",", "\n", "'RightHand'", ":", "20", ",", "\n", "# 'RightFootEndSite': -1,", "\n", "# 'LeftFootEndSite': -1,", "\n", "# 'LeftHandEndSite': -1,", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint": [[72, 102], ["numpy.zeros"], "methods", ["None"], ["# 'RightHandEndSite': -1", "\n", "}", "\n", "\n", "self", ".", "index2keypoint_21joint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index_21joint", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num_21joint", "=", "len", "(", "self", ".", "keypoint2index_21joint", ")", "\n", "\n", "", "def", "convert_to_21joint", "(", "self", ",", "poses_3d", ")", ":", "\n", "        ", "\"\"\"\n        add spine, spine1, spine3, head end site, LeftShoulder, RightShoulder\n        poses_3d: tx16x3\n        :return:\n        \"\"\"", "\n", "tmp_poses_dict", "=", "{", "}", "\n", "\"\"\" spine, spine1 <- Hips,Spine2 \"\"\"", "\n", "vec_Hips2Spine2", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Spine2'", "]", "]", "-", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Hips'", "]", "]", "\n", "tmp_poses_dict", "[", "'Spine'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Hips'", "]", "]", "+", "1", "/", "3", "*", "vec_Hips2Spine2", "\n", "tmp_poses_dict", "[", "'Spine1'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Hips'", "]", "]", "+", "2", "/", "3", "*", "vec_Hips2Spine2", "\n", "\"\"\" spine3 <- Spine2, Neck\"\"\"", "\n", "vec_Spine22Neck", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "-", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Spine2'", "]", "]", "\n", "tmp_poses_dict", "[", "'Spine3'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Spine2'", "]", "]", "+", "1", "/", "2", "*", "vec_Spine22Neck", "\n", "\"\"\" LeftShoulder <- Neck,  LeftArm\"\"\"", "\n", "vec_Neck2LeftArm", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'LeftArm'", "]", "]", "-", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "\n", "tmp_poses_dict", "[", "'LeftShoulder'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "+", "1", "/", "6", "*", "vec_Neck2LeftArm", "\n", "\"\"\" RightShoulder <- Neck,  RightArm\"\"\"", "\n", "vec_Neck2RightArm", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'RightArm'", "]", "]", "-", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "\n", "tmp_poses_dict", "[", "'RightShoulder'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "+", "1", "/", "6", "*", "vec_Neck2RightArm", "\n", "\n", "\"\"\" expand current tmp_poses_dict \"\"\"", "\n", "for", "keypoint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "tmp_poses_dict", "[", "keypoint", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "keypoint", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton.__init__": [[109, 219], ["len", "humanoid_1205_skeleton.H36mSkeleton.children.items", "humanoid_1205_skeleton.H36mSkeleton.keypoint2index.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "", "", "class", "H36mSkeleton", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'Hips'", "\n", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Hips'", ":", "0", ",", "\n", "'RightUpLeg'", ":", "1", ",", "\n", "'RightLeg'", ":", "2", ",", "\n", "'RightFoot'", ":", "3", ",", "\n", "'LeftUpLeg'", ":", "4", ",", "\n", "'LeftLeg'", ":", "5", ",", "\n", "'LeftFoot'", ":", "6", ",", "\n", "'Spine'", ":", "7", ",", "\n", "'Spine1'", ":", "8", ",", "\n", "'Spine2'", ":", "9", ",", "\n", "'Spine3'", ":", "10", ",", "\n", "'Neck'", ":", "11", ",", "\n", "'Head'", ":", "12", ",", "\n", "'HeadEndSite'", ":", "-", "1", ",", "\n", "'LeftShoulder'", ":", "13", ",", "\n", "'LeftArm'", ":", "14", ",", "\n", "'LeftForeArm'", ":", "15", ",", "\n", "'LeftHand'", ":", "16", ",", "\n", "'RightShoulder'", ":", "17", ",", "\n", "'RightArm'", ":", "18", ",", "\n", "'RightForeArm'", ":", "19", ",", "\n", "'RightHand'", ":", "20", ",", "\n", "'RightFootEndSite'", ":", "-", "1", ",", "\n", "'LeftFootEndSite'", ":", "-", "1", ",", "\n", "'LeftHandEndSite'", ":", "-", "1", ",", "\n", "'RightHandEndSite'", ":", "-", "1", "\n", "}", "\n", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "self", ".", "children", "=", "{", "\n", "'Hips'", ":", "[", "'RightUpLeg'", ",", "'LeftUpLeg'", ",", "'Spine'", "]", ",", "\n", "'RightUpLeg'", ":", "[", "'RightLeg'", "]", ",", "\n", "'RightLeg'", ":", "[", "'RightFoot'", "]", ",", "\n", "'RightFoot'", ":", "[", "'RightFootEndSite'", "]", ",", "\n", "'RightFootEndSite'", ":", "[", "]", ",", "\n", "'LeftUpLeg'", ":", "[", "'LeftLeg'", "]", ",", "\n", "'LeftLeg'", ":", "[", "'LeftFoot'", "]", ",", "\n", "'LeftFoot'", ":", "[", "'LeftFootEndSite'", "]", ",", "\n", "'LeftFootEndSite'", ":", "[", "]", ",", "\n", "'Spine'", ":", "[", "'Spine1'", "]", ",", "\n", "'Spine1'", ":", "[", "'Spine2'", "]", ",", "\n", "'Spine2'", ":", "[", "'Spine3'", "]", ",", "\n", "'Spine3'", ":", "[", "'Neck'", ",", "'LeftShoulder'", ",", "'RightShoulder'", "]", ",", "\n", "'Neck'", ":", "[", "'Head'", "]", ",", "\n", "'Head'", ":", "[", "'HeadEndSite'", "]", ",", "\n", "'HeadEndSite'", ":", "[", "]", ",", "\n", "'LeftShoulder'", ":", "[", "'LeftArm'", "]", ",", "\n", "'LeftArm'", ":", "[", "'LeftForeArm'", "]", ",", "\n", "'LeftForeArm'", ":", "[", "'LeftHand'", "]", ",", "\n", "'LeftHand'", ":", "[", "'LeftHandEndSite'", "]", ",", "\n", "'LeftHandEndSite'", ":", "[", "]", ",", "\n", "'RightShoulder'", ":", "[", "'RightArm'", "]", ",", "\n", "'RightArm'", ":", "[", "'RightForeArm'", "]", ",", "\n", "'RightForeArm'", ":", "[", "'RightHand'", "]", ",", "\n", "'RightHand'", ":", "[", "'RightHandEndSite'", "]", ",", "\n", "'RightHandEndSite'", ":", "[", "]", "\n", "}", "\n", "\n", "self", ".", "parent", "=", "{", "self", ".", "root", ":", "None", "}", "\n", "for", "parent", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "for", "child", "in", "children", ":", "\n", "                ", "self", ".", "parent", "[", "child", "]", "=", "parent", "\n", "\n", "", "", "self", ".", "left_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Left'", "in", "joint", "\n", "]", "\n", "self", ".", "right_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Right'", "in", "joint", "\n", "]", "\n", "\n", "# define the offset pose", "\n", "self", ".", "initial_directions", "=", "{", "\n", "'Hips'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "'RightUpLeg'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightLeg'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightFoot'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightFootEndSite'", ":", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "'LeftUpLeg'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftLeg'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftFoot'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftFootEndSite'", ":", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "'Spine'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Spine1'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Spine2'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Spine3'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Neck'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Head'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'HeadEndSite'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'LeftShoulder'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftArm'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftForeArm'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftHand'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftHandEndSite'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightShoulder'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightArm'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightForeArm'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightHand'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightHandEndSite'", ":", "[", "-", "1", ",", "0", ",", "0", "]", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton.get_initial_offset": [[221, 256], ["humanoid_1205_skeleton.H36mSkeleton.initial_directions.items", "stack.pop", "stack.append", "numpy.linalg.norm", "joint.replace().replace", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "max", "numpy.linalg.norm", "joint.replace"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "self", ".", "dcms", "[", "joint", "]", "=", "None", "\n", "\n", "", "", "def", "get_initial_offset", "(", "self", ",", "poses_3d", ")", ":", "\n", "# TODO: RANSAC", "\n", "        ", "bone_lens", "=", "{", "self", ".", "root", ":", "[", "0", "]", "}", "\n", "stack", "=", "[", "self", ".", "root", "]", "\n", "while", "stack", ":", "\n", "            ", "parent", "=", "stack", ".", "pop", "(", ")", "\n", "p_idx", "=", "self", ".", "keypoint2index", "[", "parent", "]", "\n", "for", "child", "in", "self", ".", "children", "[", "parent", "]", ":", "\n", "                ", "if", "'EndSite'", "in", "child", ":", "\n", "                    ", "bone_lens", "[", "child", "]", "=", "0.4", "*", "bone_lens", "[", "parent", "]", "\n", "continue", "\n", "", "stack", ".", "append", "(", "child", ")", "\n", "\n", "c_idx", "=", "self", ".", "keypoint2index", "[", "child", "]", "\n", "bone_lens", "[", "child", "]", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "poses_3d", "[", ":", ",", "p_idx", "]", "-", "poses_3d", "[", ":", ",", "c_idx", "]", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "\n", "", "", "bone_len", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "if", "'Left'", "in", "joint", "or", "'Right'", "in", "joint", ":", "\n", "                ", "base_name", "=", "joint", ".", "replace", "(", "'Left'", ",", "''", ")", ".", "replace", "(", "'Right'", ",", "''", ")", "\n", "left_len", "=", "np", ".", "mean", "(", "bone_lens", "[", "'Left'", "+", "base_name", "]", ")", "\n", "right_len", "=", "np", ".", "mean", "(", "bone_lens", "[", "'Right'", "+", "base_name", "]", ")", "\n", "bone_len", "[", "joint", "]", "=", "(", "left_len", "+", "right_len", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "bone_len", "[", "joint", "]", "=", "np", ".", "mean", "(", "bone_lens", "[", "joint", "]", ")", "\n", "\n", "", "", "initial_offset", "=", "{", "}", "\n", "for", "joint", ",", "direction", "in", "self", ".", "initial_directions", ".", "items", "(", ")", ":", "\n", "            ", "direction", "=", "np", ".", "array", "(", "direction", ")", "/", "max", "(", "np", ".", "linalg", ".", "norm", "(", "direction", ")", ",", "1e-12", ")", "\n", "initial_offset", "[", "joint", "]", "=", "direction", "*", "bone_len", "[", "joint", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton.get_bvh_header": [[258, 279], ["humanoid_1205_skeleton.H36mSkeleton.get_initial_offset", "humanoid_1205_skeleton.H36mSkeleton.children.items", "bvh_helper.BvhHeader", "bvh_helper.BvhNode"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_initial_offset"], ["", "return", "initial_offset", "\n", "\n", "", "def", "get_bvh_header", "(", "self", ",", "poses_3d", ")", ":", "\n", "        ", "initial_offset", "=", "self", ".", "get_initial_offset", "(", "poses_3d", ")", "\n", "\n", "nodes", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "is_root", "=", "joint", "==", "self", ".", "root", "\n", "is_end_site", "=", "'EndSite'", "in", "joint", "\n", "nodes", "[", "joint", "]", "=", "bvh_helper", ".", "BvhNode", "(", "\n", "name", "=", "joint", ",", "\n", "offset", "=", "initial_offset", "[", "joint", "]", ",", "\n", "rotation_order", "=", "'xyz'", "if", "not", "is_end_site", "else", "''", ",", "# default zxy", "\n", "is_root", "=", "is_root", ",", "\n", "is_end_site", "=", "is_end_site", ",", "\n", ")", "\n", "", "for", "joint", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "nodes", "[", "joint", "]", ".", "children", "=", "[", "nodes", "[", "child", "]", "for", "child", "in", "children", "]", "\n", "for", "child", "in", "children", ":", "\n", "                ", "nodes", "[", "child", "]", ".", "parent", "=", "nodes", "[", "joint", "]", "\n", "\n", "", "", "header", "=", "bvh_helper", ".", "BvhHeader", "(", "root", "=", "nodes", "[", "self", ".", "root", "]", ",", "nodes", "=", "nodes", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton.pose2euler": [[281, 435], ["math3d.anglefrom3points", "math3d.anglefrom3points", "numpy.abs", "numpy.abs", "stack.pop", "quats[].copy", "math3d.quat2euler", "numpy.rad2deg", "channel.extend", "channel.extend", "math3d.dcm_from_axis", "math3d.dcm_from_axis.copy", "math3d.dcm2quat", "quats[].copy", "math3d.quat_divide", "math3d.euler2quat", "math3d.quat_mul", "stack.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.anglefrom3points", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.anglefrom3points", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat2euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm_from_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divide", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.euler2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["\n", "", "def", "pose2euler", "(", "self", ",", "pose", ",", "header", ")", ":", "\n", "        ", "channel", "=", "[", "]", "\n", "quats", "=", "{", "}", "\n", "# quatsV1 = {}", "\n", "eulers", "=", "{", "}", "\n", "stack", "=", "[", "header", ".", "root", "]", "\n", "\n", "# check is hand in singularity.", "\n", "index", "=", "self", ".", "keypoint2index", "\n", "LeftForeArm_angle", "=", "math3d", ".", "anglefrom3points", "(", "pose", "[", "index", "[", "'LeftArm'", "]", "]", ",", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", ",", "\n", "pose", "[", "index", "[", "'LeftHand'", "]", "]", ")", "\n", "LeftForeArm_straight", "=", "np", ".", "abs", "(", "LeftForeArm_angle", "-", "180", ")", "<", "10", "\n", "RightForeArm_angle", "=", "math3d", ".", "anglefrom3points", "(", "pose", "[", "index", "[", "'RightArm'", "]", "]", ",", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", ",", "\n", "pose", "[", "index", "[", "'RightHand'", "]", "]", ")", "\n", "RightForeArm_straight", "=", "np", ".", "abs", "(", "RightForeArm_angle", "-", "180", ")", "<", "10", "\n", "\n", "while", "stack", ":", "\n", "            ", "node", "=", "stack", ".", "pop", "(", ")", "\n", "joint", "=", "node", ".", "name", "\n", "joint_idx", "=", "self", ".", "keypoint2index", "[", "joint", "]", "\n", "\n", "if", "node", ".", "is_root", ":", "\n", "                ", "channel", ".", "extend", "(", "pose", "[", "joint_idx", "]", ")", "\n", "\n", "", "index", "=", "self", ".", "keypoint2index", "\n", "order", "=", "None", "\n", "if", "joint", "==", "'Hips'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Spine'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "in", "[", "'RightUpLeg'", ",", "'RightLeg'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'Hips'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'zyx'", "\n", "\n", "", "elif", "joint", "in", "[", "'LeftUpLeg'", ",", "'LeftLeg'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'Hips'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'zyx'", "\n", "\n", "\n", "", "elif", "joint", "==", "'Spine'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Spine1'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'zyx'", "\n", "\n", "", "elif", "joint", "==", "'Spine2'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'Spine1'", "]", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Spine3'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'Spine2'", "]", "]", "\n", "order", "=", "'zyx'", "\n", "\n", "", "elif", "joint", "==", "'Neck'", ":", "\n", "                ", "x_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Spine3'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Head'", "]", "]", "-", "pose", "[", "index", "[", "'Spine3'", "]", "]", "\n", "order", "=", "'zxy'", "\n", "", "elif", "joint", "==", "'LeftShoulder'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'LeftArm'", ":", "\n", "                ", "if", "LeftForeArm_straight", "and", "self", ".", "dcms", "[", "'LeftForeArm'", "]", "is", "not", "None", ":", "\n", "                    ", "\"\"\"in case of singularity, use z from forearm\"\"\"", "\n", "x_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "self", ".", "dcms", "[", "'LeftForeArm'", "]", "[", "2", "]", "*", "1.", "\n", "order", "=", "'xyz'", "\n", "", "else", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "", "elif", "joint", "==", "'LeftForeArm'", ":", "\n", "                ", "if", "LeftForeArm_straight", "and", "self", ".", "dcms", "[", "'LeftForeArm'", "]", "is", "not", "None", ":", "\n", "                    ", "\"\"\"in case of singularity, use z from forearm\"\"\"", "\n", "x_dir", "=", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "self", ".", "dcms", "[", "'LeftForeArm'", "]", "[", "2", "]", "*", "1.", "\n", "order", "=", "'xyz'", "\n", "", "else", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "", "elif", "joint", "==", "'RightShoulder'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'RightArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'RightArm'", ":", "\n", "                ", "if", "RightForeArm_straight", "and", "self", ".", "dcms", "[", "'RightForeArm'", "]", "is", "not", "None", ":", "\n", "                    ", "\"\"\"in case of singularity, use z from forearm\"\"\"", "\n", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "self", ".", "dcms", "[", "'RightForeArm'", "]", "[", "2", "]", "*", "1.", "\n", "order", "=", "'xyz'", "\n", "", "else", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "", "elif", "joint", "==", "'RightForeArm'", ":", "\n", "                ", "if", "RightForeArm_straight", "and", "self", ".", "dcms", "[", "'RightForeArm'", "]", "is", "not", "None", ":", "\n", "                    ", "\"\"\"in case of singularity, use z from forearm\"\"\"", "\n", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "self", ".", "dcms", "[", "'RightForeArm'", "]", "[", "2", "]", "*", "1.", "\n", "order", "=", "'xyz'", "\n", "", "else", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "", "if", "order", ":", "\n", "                ", "dcm", "=", "math3d", ".", "dcm_from_axis", "(", "x_dir", ",", "y_dir", ",", "z_dir", ",", "order", ")", "# 3x3 [axis['x'], axis['y'], axis['z']]", "\n", "self", ".", "dcms", "[", "joint", "]", "=", "dcm", ".", "copy", "(", ")", "\n", "quats", "[", "joint", "]", "=", "math3d", ".", "dcm2quat", "(", "dcm", ")", "\n", "", "else", ":", "\n", "                ", "quats", "[", "joint", "]", "=", "quats", "[", "self", ".", "parent", "[", "joint", "]", "]", ".", "copy", "(", ")", "\n", "\n", "", "local_quat", "=", "quats", "[", "joint", "]", ".", "copy", "(", ")", "\n", "if", "node", ".", "parent", ":", "\n", "                ", "local_quat", "=", "math3d", ".", "quat_divide", "(", "\n", "q", "=", "quats", "[", "joint", "]", ",", "r", "=", "quats", "[", "node", ".", "parent", ".", "name", "]", "\n", ")", "\n", "\n", "", "euler", "=", "math3d", ".", "quat2euler", "(", "\n", "q", "=", "local_quat", ",", "order", "=", "node", ".", "rotation_order", "\n", ")", "\n", "\n", "# reset shoulder x rotation to 0, and update its local_quat ---> quats.", "\n", "if", "joint", "in", "[", "'LeftShoulder'", ",", "'RightShoulder'", ",", "'Neck'", "]", ":", "\n", "                ", "tmp_idx", "=", "2", "if", "joint", "==", "'Neck'", "else", "0", "\n", "euler", "[", "tmp_idx", "]", "=", "tmp_idx", "# 3", "\n", "local_quat", "=", "math3d", ".", "euler2quat", "(", "euler", ")", "\n", "# use local_quat * parents_quat -> quat in world coord.", "\n", "quat", "=", "math3d", ".", "quat_mul", "(", "quats", "[", "node", ".", "parent", ".", "name", "]", ",", "local_quat", ")", "\n", "# update quats[joint]", "\n", "quats", "[", "joint", "]", "=", "quat", "*", "1.", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton.poses2bvh": [[438, 452], ["enumerate", "humanoid_1205_skeleton.H36mSkeleton.get_bvh_header", "channels.append", "bvh_helper.write_bvh", "humanoid_1205_skeleton.H36mSkeleton.pose2euler"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_bvh_header", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.pose2euler"], ["\n", "eulers", "[", "joint", "]", "=", "euler", "\n", "channel", ".", "extend", "(", "euler", ")", "\n", "\n", "for", "child", "in", "node", ".", "children", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "if", "not", "child", ".", "is_end_site", ":", "\n", "                    ", "stack", ".", "append", "(", "child", ")", "\n", "\n", "", "", "", "return", "channel", "\n", "\n", "", "def", "poses2bvh", "(", "self", ",", "poses_3d", ",", "header", "=", "None", ",", "output_file", "=", "None", ")", ":", "\n", "        ", "if", "not", "header", ":", "\n", "            ", "header", "=", "self", ".", "get_bvh_header", "(", "poses_3d", ")", "\n", "\n", "", "channels", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.write_standard_bvh": [[457, 491], ["os.path.dirname", "os.path.basename", "os.path.join", "os.path.join", "humanoid_1205_skeleton.SkeletonConverter", "humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint", "humanoid_1205_skeleton.H36mSkeleton", "humanoid_1205_skeleton.H36mSkeleton.poses2bvh", "os.path.exists", "os.makedirs", "os.path.basename.rfind"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.poses2bvh"], ["            ", "bvh_helper", ".", "write_bvh", "(", "output_file", ",", "header", ",", "channels", ")", "\n", "\n", "", "return", "channels", ",", "header", "\n", "\n", "\n", "\n", "", "", "import", "os", "\n", "\n", "\n", "# convert 3D pose to bvh format and save at outputs/outputvideo/alpha_pose_xxx/bvh", "\n", "def", "write_standard_bvh", "(", "outbvhfilepath", ",", "prediction3dpoint", ")", ":", "\n", "    ", "'''\n    :param outbvhfilepath:\n    :param prediction3dpoint:\n    :return:\n    '''", "\n", "\n", "# scale 100 for bvhacker viewer", "\n", "for", "frame", "in", "prediction3dpoint", ":", "\n", "        ", "for", "point3d", "in", "frame", ":", "\n", "            ", "point3d", "[", "0", "]", "*=", "100", "\n", "point3d", "[", "1", "]", "*=", "100", "\n", "point3d", "[", "2", "]", "*=", "100", "\n", "\n", "# exchange y and z for coordinate rotation.", "\n", "# X = point3d[0]", "\n", "# Y = point3d[1]", "\n", "# Z = point3d[2]", "\n", "\n", "# point3d[0] = -X", "\n", "# point3d[1] = Z", "\n", "# point3d[2] = Y", "\n", "\n", "", "", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "outbvhfilepath", ")", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "outbvhfilepath", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper.BvhNode.__init__": [[6, 19], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "name", ",", "offset", ",", "rotation_order", ",", "\n", "children", "=", "None", ",", "parent", "=", "None", ",", "is_root", "=", "False", ",", "is_end_site", "=", "False", ")", ":", "\n", "        ", "if", "not", "is_end_site", "and", "rotation_order", "not", "in", "[", "'xyz'", ",", "'xzy'", ",", "'yxz'", ",", "'yzx'", ",", "'zxy'", ",", "'zyx'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "f'Rotation order invalid.'", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "rotation_order", "=", "rotation_order", "\n", "self", ".", "children", "=", "children", "\n", "self", ".", "parent", "=", "parent", "\n", "self", ".", "is_root", "=", "is_root", "\n", "self", ".", "is_end_site", "=", "is_end_site", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper.BvhHeader.__init__": [[22, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "nodes", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "nodes", "=", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper.write_header": [[27, 60], ["writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "bvh_helper.write_header", "writer.write", "writer.write", "axis.upper"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_header", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["", "", "def", "write_header", "(", "writer", ",", "node", ",", "level", ")", ":", "\n", "    ", "indent", "=", "' '", "*", "4", "*", "level", "\n", "if", "node", ".", "is_root", ":", "\n", "        ", "writer", ".", "write", "(", "f'{indent}ROOT {node.name}\\n'", ")", "\n", "channel_num", "=", "6", "\n", "", "elif", "node", ".", "is_end_site", ":", "\n", "        ", "writer", ".", "write", "(", "f'{indent}End Site\\n'", ")", "\n", "channel_num", "=", "0", "\n", "", "else", ":", "\n", "        ", "writer", ".", "write", "(", "f'{indent}JOINT {node.name}\\n'", ")", "\n", "channel_num", "=", "3", "\n", "", "writer", ".", "write", "(", "f'{indent}{\"{\"}\\n'", ")", "\n", "\n", "indent", "=", "' '", "*", "4", "*", "(", "level", "+", "1", ")", "\n", "writer", ".", "write", "(", "\n", "f'{indent}OFFSET '", "\n", "f'{node.offset[0]} {node.offset[1]} {node.offset[2]}\\n'", "\n", ")", "\n", "if", "channel_num", ":", "\n", "        ", "channel_line", "=", "f'{indent}CHANNELS {channel_num} '", "\n", "if", "node", ".", "is_root", ":", "\n", "            ", "channel_line", "+=", "f'Xposition Yposition Zposition '", "\n", "", "channel_line", "+=", "' '", ".", "join", "(", "[", "\n", "f'{axis.upper()}rotation'", "\n", "for", "axis", "in", "node", ".", "rotation_order", "\n", "]", ")", "\n", "writer", ".", "write", "(", "channel_line", "+", "'\\n'", ")", "\n", "\n", "", "for", "child", "in", "node", ".", "children", ":", "\n", "        ", "write_header", "(", "writer", ",", "child", ",", "level", "+", "1", ")", "\n", "\n", "", "indent", "=", "' '", "*", "4", "*", "level", "\n", "writer", ".", "write", "(", "f'{indent}{\"}\"}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper.write_bvh": [[62, 77], ["pathlib.Path", "pathlib.Path.parent.exists", "os.makedirs", "pathlib.Path.open", "f.write", "bvh_helper.write_header", "f.write", "f.write", "f.write", "f.write", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_header", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "write_bvh", "(", "output_file", ",", "header", ",", "channels", ",", "frame_rate", "=", "30", ")", ":", "\n", "    ", "output_file", "=", "Path", "(", "output_file", ")", "\n", "if", "not", "output_file", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_file", ".", "parent", ")", "\n", "\n", "", "with", "output_file", ".", "open", "(", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'HIERARCHY\\n'", ")", "\n", "write_header", "(", "writer", "=", "f", ",", "node", "=", "header", ".", "root", ",", "level", "=", "0", ")", "\n", "\n", "f", ".", "write", "(", "'MOTION\\n'", ")", "\n", "f", ".", "write", "(", "f'Frames: {len(channels)}\\n'", ")", "\n", "f", ".", "write", "(", "f'Frame Time: {1 / frame_rate}\\n'", ")", "\n", "\n", "for", "channel", "in", "channels", ":", "\n", "            ", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "f'{element}'", "for", "element", "in", "channel", "]", ")", "+", "'\\n'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.normalize": [[12, 14], ["max", "numpy.linalg.norm"], "function", ["None"], ["def", "normalize", "(", "x", ")", ":", "\n", "    ", "return", "x", "/", "max", "(", "np", ".", "linalg", ".", "norm", "(", "x", ")", ",", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm_from_axis": [[15, 42], ["name.index", "name.index", "name.index", "math3d.normalize", "math3d.normalize", "math3d.normalize", "numpy.asarray", "numpy.cross", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.normalize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.normalize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.normalize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross"], ["# (direction cosine matrix)", "\n", "", "def", "dcm_from_axis", "(", "x_dir", ",", "y_dir", ",", "z_dir", ",", "order", ")", ":", "\n", "    ", "assert", "order", "in", "[", "'yzx'", ",", "'yxz'", ",", "'xyz'", ",", "'xzy'", ",", "'zxy'", ",", "'zyx'", "]", "\n", "\n", "axis", "=", "{", "'x'", ":", "x_dir", ",", "'y'", ":", "y_dir", ",", "'z'", ":", "z_dir", "}", "\n", "name", "=", "[", "'x'", ",", "'y'", ",", "'z'", "]", "\n", "idx0", "=", "name", ".", "index", "(", "order", "[", "0", "]", ")", "\n", "idx1", "=", "name", ".", "index", "(", "order", "[", "1", "]", ")", "\n", "idx2", "=", "name", ".", "index", "(", "order", "[", "2", "]", ")", "\n", "\n", "axis", "[", "order", "[", "0", "]", "]", "=", "normalize", "(", "axis", "[", "order", "[", "0", "]", "]", ")", "\n", "test1", "=", "name", "[", "(", "idx1", "+", "1", ")", "%", "3", "]", "# debug", "\n", "test2", "=", "name", "[", "(", "idx1", "+", "2", ")", "%", "3", "]", "# debug", "\n", "axis", "[", "order", "[", "1", "]", "]", "=", "normalize", "(", "np", ".", "cross", "(", "\n", "axis", "[", "name", "[", "(", "idx1", "+", "1", ")", "%", "3", "]", "]", ",", "axis", "[", "name", "[", "(", "idx1", "+", "2", ")", "%", "3", "]", "]", "\n", ")", ")", "\n", "\n", "test3", "=", "name", "[", "(", "idx2", "+", "1", ")", "%", "3", "]", "# debug", "\n", "test4", "=", "name", "[", "(", "idx2", "+", "2", ")", "%", "3", "]", "# debug", "\n", "\n", "axis", "[", "order", "[", "2", "]", "]", "=", "normalize", "(", "np", ".", "cross", "(", "\n", "axis", "[", "name", "[", "(", "idx2", "+", "1", ")", "%", "3", "]", "]", ",", "axis", "[", "name", "[", "(", "idx2", "+", "2", ")", "%", "3", "]", "]", "\n", ")", ")", "\n", "\n", "dcm", "=", "np", ".", "asarray", "(", "[", "axis", "[", "'x'", "]", ",", "axis", "[", "'y'", "]", ",", "axis", "[", "'z'", "]", "]", ")", "# dcm[0, :]=axis['x']", "\n", "\n", "return", "dcm", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quatV1": [[45, 54], ["scipy.spatial.transform.Rotation.from_dcm", "Rotation.from_dcm.as_quat", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "dcm2quatV1", "(", "dcm", ")", ":", "\n", "    ", "r", "=", "Rotation", ".", "from_dcm", "(", "dcm", ")", "\n", "q", "=", "r", ".", "as_quat", "(", ")", "\n", "if", "q", "[", "3", "]", ">", "0", ":", "\n", "        ", "newq", "=", "np", ".", "stack", "(", "[", "q", "[", "3", "]", ",", "-", "q", "[", "0", "]", ",", "-", "q", "[", "1", "]", ",", "-", "q", "[", "2", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "newq", "=", "np", ".", "stack", "(", "[", "-", "q", "[", "3", "]", ",", "q", "[", "0", "]", ",", "q", "[", "1", "]", ",", "q", "[", "2", "]", "]", ",", "axis", "=", "0", ")", "\n", "# newq = np.stack([q[3], q[0], q[1], q[2]], axis=0)", "\n", "", "return", "newq", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat": [[55, 105], ["numpy.zeros", "numpy.trace", "numpy.sqrt", "numpy.diag", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "dcm2quat", "(", "dcm", ")", ":", "\n", "    ", "q", "=", "np", ".", "zeros", "(", "[", "4", "]", ")", "\n", "tr", "=", "np", ".", "trace", "(", "dcm", ")", "\n", "\n", "if", "tr", ">", "0", ":", "\n", "        ", "sqtrp1", "=", "np", ".", "sqrt", "(", "tr", "+", "1.0", ")", "\n", "q", "[", "0", "]", "=", "0.5", "*", "sqtrp1", "\n", "q", "[", "1", "]", "=", "(", "dcm", "[", "1", ",", "2", "]", "-", "dcm", "[", "2", ",", "1", "]", ")", "/", "(", "2.0", "*", "sqtrp1", ")", "\n", "q", "[", "2", "]", "=", "(", "dcm", "[", "2", ",", "0", "]", "-", "dcm", "[", "0", ",", "2", "]", ")", "/", "(", "2.0", "*", "sqtrp1", ")", "\n", "q", "[", "3", "]", "=", "(", "dcm", "[", "0", ",", "1", "]", "-", "dcm", "[", "1", ",", "0", "]", ")", "/", "(", "2.0", "*", "sqtrp1", ")", "\n", "", "else", ":", "\n", "        ", "d", "=", "np", ".", "diag", "(", "dcm", ")", "\n", "if", "d", "[", "1", "]", ">", "d", "[", "0", "]", "and", "d", "[", "1", "]", ">", "d", "[", "2", "]", ":", "\n", "            ", "sqdip1", "=", "np", ".", "sqrt", "(", "d", "[", "1", "]", "-", "d", "[", "0", "]", "-", "d", "[", "2", "]", "+", "1.0", ")", "\n", "q", "[", "2", "]", "=", "0.5", "*", "sqdip1", "\n", "\n", "if", "sqdip1", "!=", "0", ":", "\n", "                ", "sqdip1", "=", "0.5", "/", "sqdip1", "\n", "\n", "", "q", "[", "0", "]", "=", "(", "dcm", "[", "2", ",", "0", "]", "-", "dcm", "[", "0", ",", "2", "]", ")", "*", "sqdip1", "\n", "q", "[", "1", "]", "=", "(", "dcm", "[", "0", ",", "1", "]", "+", "dcm", "[", "1", ",", "0", "]", ")", "*", "sqdip1", "\n", "q", "[", "3", "]", "=", "(", "dcm", "[", "1", ",", "2", "]", "+", "dcm", "[", "2", ",", "1", "]", ")", "*", "sqdip1", "\n", "\n", "", "elif", "d", "[", "2", "]", ">", "d", "[", "0", "]", ":", "\n", "            ", "sqdip1", "=", "np", ".", "sqrt", "(", "d", "[", "2", "]", "-", "d", "[", "0", "]", "-", "d", "[", "1", "]", "+", "1.0", ")", "\n", "q", "[", "3", "]", "=", "0.5", "*", "sqdip1", "\n", "\n", "if", "sqdip1", "!=", "0", ":", "\n", "                ", "sqdip1", "=", "0.5", "/", "sqdip1", "\n", "\n", "", "q", "[", "0", "]", "=", "(", "dcm", "[", "0", ",", "1", "]", "-", "dcm", "[", "1", ",", "0", "]", ")", "*", "sqdip1", "\n", "q", "[", "1", "]", "=", "(", "dcm", "[", "2", ",", "0", "]", "+", "dcm", "[", "0", ",", "2", "]", ")", "*", "sqdip1", "\n", "q", "[", "2", "]", "=", "(", "dcm", "[", "1", ",", "2", "]", "+", "dcm", "[", "2", ",", "1", "]", ")", "*", "sqdip1", "\n", "\n", "", "else", ":", "\n", "            ", "sqdip1", "=", "np", ".", "sqrt", "(", "d", "[", "0", "]", "-", "d", "[", "1", "]", "-", "d", "[", "2", "]", "+", "1.0", ")", "\n", "q", "[", "1", "]", "=", "0.5", "*", "sqdip1", "\n", "\n", "if", "sqdip1", "!=", "0", ":", "\n", "                ", "sqdip1", "=", "0.5", "/", "sqdip1", "\n", "\n", "", "q", "[", "0", "]", "=", "(", "dcm", "[", "1", ",", "2", "]", "-", "dcm", "[", "2", ",", "1", "]", ")", "*", "sqdip1", "\n", "q", "[", "2", "]", "=", "(", "dcm", "[", "0", ",", "1", "]", "+", "dcm", "[", "1", ",", "0", "]", ")", "*", "sqdip1", "\n", "q", "[", "3", "]", "=", "(", "dcm", "[", "2", ",", "0", "]", "+", "dcm", "[", "0", ",", "2", "]", ")", "*", "sqdip1", "\n", "\n", "", "", "if", "q", "[", "0", "]", ">", "0", ":", "\n", "        ", "q", "=", "q", "*", "1.", "\n", "", "else", ":", "\n", "        ", "q", "=", "q", "*", "-", "1.", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_dot": [[107, 119], ["numpy.reshape", "numpy.reshape", "numpy.expand_dims", "numpy.tile", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "quat_dot", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "original_shape", "=", "q0", ".", "shape", "\n", "q0", "=", "np", ".", "reshape", "(", "q0", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "q1", "=", "np", ".", "reshape", "(", "q1", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "w0", ",", "x0", ",", "y0", ",", "z0", "=", "q0", "[", ":", ",", "0", "]", ",", "q0", "[", ":", ",", "1", "]", ",", "q0", "[", ":", ",", "2", "]", ",", "q0", "[", ":", ",", "3", "]", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "q1", "[", ":", ",", "0", "]", ",", "q1", "[", ":", ",", "1", "]", ",", "q1", "[", ":", ",", "2", "]", ",", "q1", "[", ":", ",", "3", "]", "\n", "q_product", "=", "w0", "*", "w1", "+", "x1", "*", "x1", "+", "y0", "*", "y1", "+", "z0", "*", "z1", "\n", "q_product", "=", "np", ".", "expand_dims", "(", "q_product", ",", "axis", "=", "1", ")", "\n", "q_product", "=", "np", ".", "tile", "(", "q_product", ",", "[", "1", ",", "4", "]", ")", "\n", "\n", "return", "np", ".", "reshape", "(", "q_product", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_inverse": [[121, 130], ["numpy.reshape", "numpy.stack", "numpy.divide", "numpy.reshape", "math3d.quat_dot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_dot"], ["", "def", "quat_inverse", "(", "q", ")", ":", "\n", "    ", "original_shape", "=", "q", ".", "shape", "\n", "q", "=", "np", ".", "reshape", "(", "q", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "q_conj", "=", "[", "q", "[", ":", ",", "0", "]", ",", "-", "q", "[", ":", ",", "1", "]", ",", "-", "q", "[", ":", ",", "2", "]", ",", "-", "q", "[", ":", ",", "3", "]", "]", "\n", "q_conj", "=", "np", ".", "stack", "(", "q_conj", ",", "axis", "=", "1", ")", "\n", "q_inv", "=", "np", ".", "divide", "(", "q_conj", ",", "quat_dot", "(", "q_conj", ",", "q_conj", ")", ")", "\n", "\n", "return", "np", ".", "reshape", "(", "q_inv", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_mul": [[132, 144], ["numpy.reshape", "numpy.reshape", "numpy.matmul", "numpy.stack", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "quat_mul", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "original_shape", "=", "q0", ".", "shape", "\n", "q1", "=", "np", ".", "reshape", "(", "q1", ",", "[", "-", "1", ",", "4", ",", "1", "]", ")", "\n", "q0", "=", "np", ".", "reshape", "(", "q0", ",", "[", "-", "1", ",", "1", ",", "4", "]", ")", "\n", "terms", "=", "np", ".", "matmul", "(", "q1", ",", "q0", ")", "\n", "w", "=", "terms", "[", ":", ",", "0", ",", "0", "]", "-", "terms", "[", ":", ",", "1", ",", "1", "]", "-", "terms", "[", ":", ",", "2", ",", "2", "]", "-", "terms", "[", ":", ",", "3", ",", "3", "]", "\n", "x", "=", "terms", "[", ":", ",", "0", ",", "1", "]", "+", "terms", "[", ":", ",", "1", ",", "0", "]", "-", "terms", "[", ":", ",", "2", ",", "3", "]", "+", "terms", "[", ":", ",", "3", ",", "2", "]", "\n", "y", "=", "terms", "[", ":", ",", "0", ",", "2", "]", "+", "terms", "[", ":", ",", "1", ",", "3", "]", "+", "terms", "[", ":", ",", "2", ",", "0", "]", "-", "terms", "[", ":", ",", "3", ",", "1", "]", "\n", "z", "=", "terms", "[", ":", ",", "0", ",", "3", "]", "-", "terms", "[", ":", ",", "1", ",", "2", "]", "+", "terms", "[", ":", ",", "2", ",", "1", "]", "+", "terms", "[", ":", ",", "3", ",", "0", "]", "\n", "\n", "q_product", "=", "np", ".", "stack", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "reshape", "(", "q_product", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.wxyz2xyzw": [[146, 149], ["numpy.stack"], "function", ["None"], ["", "def", "wxyz2xyzw", "(", "wfist", ")", ":", "\n", "    ", "\"convert w x y z to x y z w\"", "\n", "return", "np", ".", "stack", "(", "[", "wfist", "[", "1", "]", ",", "wfist", "[", "2", "]", ",", "wfist", "[", "3", "]", ",", "wfist", "[", "0", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.xyzw2wxyz": [[150, 153], ["numpy.stack"], "function", ["None"], ["", "def", "xyzw2wxyz", "(", "wfist", ")", ":", "\n", "    ", "\"convert x y z w to w x y z\"", "\n", "return", "np", ".", "stack", "(", "[", "wfist", "[", "3", "]", ",", "wfist", "[", "0", "]", ",", "wfist", "[", "1", "]", ",", "wfist", "[", "2", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_mulV1": [[155, 163], ["scipy.spatial.transform.Rotation.from_quat", "scipy.spatial.transform.Rotation.from_quat", "math3d.xyzw2wxyz", "math3d.wxyz2xyzw", "math3d.wxyz2xyzw", "r.as_quat"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.xyzw2wxyz", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.wxyz2xyzw", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.wxyz2xyzw"], ["", "def", "quat_mulV1", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "rp", "=", "Rotation", ".", "from_quat", "(", "wxyz2xyzw", "(", "q0", ")", ")", "\n", "rq", "=", "Rotation", ".", "from_quat", "(", "wxyz2xyzw", "(", "q1", ")", ")", "\n", "# p.as_matrix()", "\n", "# q.as_matrix()", "\n", "r", "=", "rp", "*", "rq", "\n", "# r.as_matrix()", "\n", "return", "xyzw2wxyz", "(", "r", ".", "as_quat", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_inverseV1": [[164, 168], ["scipy.spatial.transform.Rotation.from_quat", "Rotation.from_quat.inv", "math3d.xyzw2wxyz", "math3d.wxyz2xyzw", "rq.inv.as_quat"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.xyzw2wxyz", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.wxyz2xyzw"], ["", "def", "quat_inverseV1", "(", "q", ")", ":", "\n", "    ", "rq", "=", "Rotation", ".", "from_quat", "(", "wxyz2xyzw", "(", "q", ")", ")", "\n", "irq", "=", "rq", ".", "inv", "(", ")", "\n", "return", "xyzw2wxyz", "(", "irq", ".", "as_quat", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divide": [[170, 174], ["math3d.quat_mul", "math3d.quat_inverse"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_inverse"], ["", "def", "quat_divide", "(", "q", ",", "r", ")", ":", "\n", "# tmp1 = quat_mulV1(quat_inverseV1(r), q)", "\n", "# tmp2 = quat_mul(quat_inverse(r), q)", "\n", "    ", "return", "quat_mul", "(", "quat_inverse", "(", "r", ")", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divideV1": [[175, 177], ["math3d.quat_mulV1", "math3d.quat_inverseV1"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_mulV1", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_inverseV1"], ["", "def", "quat_divideV1", "(", "q", ",", "r", ")", ":", "\n", "    ", "return", "quat_mulV1", "(", "quat_inverseV1", "(", "r", ")", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat2euler": [[179, 219], ["list", "numpy.reshape", "numpy.reshape", "numpy.arcsin", "numpy.arctan2", "numpy.arctan2", "numpy.stack", "numpy.clip", "numpy.stack", "scipy.spatial.transform.Rotation.from_quat", "Rotation.from_quat.as_euler", "ValueError"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "quat2euler", "(", "q", ",", "order", "=", "'zxy'", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "original_shape", "=", "list", "(", "q", ".", "shape", ")", "\n", "original_shape", "[", "-", "1", "]", "=", "3", "\n", "q", "=", "np", ".", "reshape", "(", "q", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "q0", "=", "q", "[", ":", ",", "0", "]", "\n", "q1", "=", "q", "[", ":", ",", "1", "]", "\n", "q2", "=", "q", "[", ":", ",", "2", "]", "\n", "q3", "=", "q", "[", ":", ",", "3", "]", "\n", "\n", "if", "order", "==", "'zxy'", ":", "\n", "        ", "x", "=", "np", ".", "arcsin", "(", "np", ".", "clip", "(", "2", "*", "(", "q0", "*", "q1", "+", "q2", "*", "q3", ")", ",", "-", "1", "+", "eps", ",", "1", "-", "eps", ")", ")", "\n", "y", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q2", "-", "q1", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q2", "*", "q2", ")", ")", "\n", "z", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q3", "-", "q1", "*", "q2", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q3", "*", "q3", ")", ")", "\n", "euler", "=", "np", ".", "stack", "(", "[", "z", ",", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "# else:", "\n", "#     raise ValueError('Not implemented')", "\n", "# todo adding order xyz", "\n", "", "elif", "order", "==", "'xyz'", ":", "\n", "# x = np.arcsin(np.clip(2 * (q0 * q1 + q2 * q3), -1 + eps, 1 - eps))", "\n", "# y = np.arctan2(2 * (q0 * q2 - q1 * q3), 1 - 2 * (q1 * q1 + q2 * q2))", "\n", "# z = np.arctan2(2 * (q0 * q3 - q1 * q2), 1 - 2 * (q1 * q1 + q3 * q3))", "\n", "# euler = np.stack([z, x, y], axis=1)", "\n", "# euler = np.stack([x, y, z], axis=1)", "\n", "\n", "# for debug - zxy, xyz", "\n", "# rot = Rotation.from_quat(q)", "\n", "        ", "newq", "=", "np", ".", "stack", "(", "[", "q1", ",", "q2", ",", "q3", ",", "q0", "]", ",", "axis", "=", "1", ")", "\n", "rot", "=", "Rotation", ".", "from_quat", "(", "newq", ")", "\n", "# rot = Rotation.from_euler('ZXY', euler) #, degrees=True)", "\n", "# euler = rot.as_euler('xyz') #, degrees=True)", "\n", "euler", "=", "rot", ".", "as_euler", "(", "'XYZ'", ")", "#, degrees=True)", "\n", "# euler3 = rot.as_euler('zxy') #, degrees=True)", "\n", "# euler4 = rot.as_euler('ZXY') #, degrees=True)", "\n", "# debug = euler4 - euler", "\n", "# euler4 = rot.as_euler('ZXY') #, degrees=True)", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Not implemented'", ")", "\n", "\n", "", "return", "np", ".", "reshape", "(", "euler", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.anglefrom3points": [[223, 242], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.abs", "numpy.abs", "numpy.clip", "print", "numpy.arccos"], "function", ["None"], ["", "def", "anglefrom3points", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "# a = np.array([1, 0, 0])", "\n", "# b = np.array([0, 0, 0])", "\n", "# c = np.array([-1, 0, 0])", "\n", "    ", "f", "=", "b", "-", "a", "\n", "e", "=", "b", "-", "c", "\n", "abVec", "=", "np", ".", "linalg", ".", "norm", "(", "f", ")", "\n", "bcVec", "=", "np", ".", "linalg", ".", "norm", "(", "e", ")", "\n", "abNorm", "=", "f", "/", "abVec", "\n", "bcNorm", "=", "e", "/", "bcVec", "\n", "res", "=", "abNorm", "[", "0", "]", "*", "bcNorm", "[", "0", "]", "+", "abNorm", "[", "1", "]", "*", "bcNorm", "[", "1", "]", "+", "abNorm", "[", "2", "]", "*", "bcNorm", "[", "2", "]", "\n", "if", "np", ".", "abs", "(", "res", ")", ">", "1", ":", "\n", "        ", "if", "np", ".", "abs", "(", "res", ")", "<", "1", "+", "1e-5", ":", "\n", "            ", "res", "=", "np", ".", "clip", "(", "res", ",", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "a", ",", "b", ",", "c", ",", "res", ")", "\n", "assert", "False", ",", "'invalid value appear'", "\n", "", "", "angle", "=", "np", ".", "arccos", "(", "res", ")", "*", "180.0", "/", "np", ".", "pi", "\n", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.euler2quat": [[244, 259], ["scipy.spatial.transform.Rotation.from_euler", "Rotation.from_euler.as_quat", "numpy.reshape", "numpy.stack", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "euler2quat", "(", "euler", ")", ":", "\n", "    ", "rot", "=", "Rotation", ".", "from_euler", "(", "'XYZ'", ",", "euler", ")", "\n", "q", "=", "rot", ".", "as_quat", "(", ")", "# The returned value is in scalar-last (x, y, z, w) format.", "\n", "q", "=", "np", ".", "reshape", "(", "q", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "q0", "=", "q", "[", ":", ",", "0", "]", "\n", "q1", "=", "q", "[", ":", ",", "1", "]", "\n", "q2", "=", "q", "[", ":", ",", "2", "]", "\n", "q3", "=", "q", "[", ":", ",", "3", "]", "\n", "newq", "=", "np", ".", "stack", "(", "[", "q3", ",", "q0", ",", "q1", ",", "q2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "q3", ">", "0", ":", "\n", "        ", "newq", "=", "newq", "*", "1", "\n", "", "else", ":", "\n", "        ", "newq", "=", "newq", "*", "-", "1", "\n", "", "return", "np", ".", "squeeze", "(", "newq", ")", "# The returned value is in scalar-last (w, x, y, z) format.", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.cmu_skeleton.CMUSkeleton.__init__": [[10, 116], ["len", "cmu_skeleton.CMUSkeleton.children.items", "cmu_skeleton.CMUSkeleton.keypoint2index.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'Hips'", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Hips'", ":", "0", ",", "\n", "'RightUpLeg'", ":", "1", ",", "\n", "'RightLeg'", ":", "2", ",", "\n", "'RightFoot'", ":", "3", ",", "\n", "'LeftUpLeg'", ":", "4", ",", "\n", "'LeftLeg'", ":", "5", ",", "\n", "'LeftFoot'", ":", "6", ",", "\n", "'Spine'", ":", "7", ",", "\n", "'Spine1'", ":", "8", ",", "\n", "'Neck1'", ":", "9", ",", "\n", "'HeadEndSite'", ":", "10", ",", "\n", "'LeftArm'", ":", "11", ",", "\n", "'LeftForeArm'", ":", "12", ",", "\n", "'LeftHand'", ":", "13", ",", "\n", "'RightArm'", ":", "14", ",", "\n", "'RightForeArm'", ":", "15", ",", "\n", "'RightHand'", ":", "16", ",", "\n", "'RightHipJoint'", ":", "-", "1", ",", "\n", "'RightFootEndSite'", ":", "-", "1", ",", "\n", "'LeftHipJoint'", ":", "-", "1", ",", "\n", "'LeftFootEndSite'", ":", "-", "1", ",", "\n", "'LeftShoulder'", ":", "-", "1", ",", "\n", "'LeftHandEndSite'", ":", "-", "1", ",", "\n", "'RightShoulder'", ":", "-", "1", ",", "\n", "'RightHandEndSite'", ":", "-", "1", ",", "\n", "'LowerBack'", ":", "-", "1", ",", "\n", "'Neck'", ":", "-", "1", "\n", "}", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "self", ".", "children", "=", "{", "\n", "'Hips'", ":", "[", "'LeftHipJoint'", ",", "'LowerBack'", ",", "'RightHipJoint'", "]", ",", "\n", "'LeftHipJoint'", ":", "[", "'LeftUpLeg'", "]", ",", "\n", "'LeftUpLeg'", ":", "[", "'LeftLeg'", "]", ",", "\n", "'LeftLeg'", ":", "[", "'LeftFoot'", "]", ",", "\n", "'LeftFoot'", ":", "[", "'LeftFootEndSite'", "]", ",", "\n", "'LeftFootEndSite'", ":", "[", "]", ",", "\n", "'LowerBack'", ":", "[", "'Spine'", "]", ",", "\n", "'Spine'", ":", "[", "'Spine1'", "]", ",", "\n", "'Spine1'", ":", "[", "'LeftShoulder'", ",", "'Neck'", ",", "'RightShoulder'", "]", ",", "\n", "'LeftShoulder'", ":", "[", "'LeftArm'", "]", ",", "\n", "'LeftArm'", ":", "[", "'LeftForeArm'", "]", ",", "\n", "'LeftForeArm'", ":", "[", "'LeftHand'", "]", ",", "\n", "'LeftHand'", ":", "[", "'LeftHandEndSite'", "]", ",", "\n", "'LeftHandEndSite'", ":", "[", "]", ",", "\n", "'Neck'", ":", "[", "'Neck1'", "]", ",", "\n", "'Neck1'", ":", "[", "'HeadEndSite'", "]", ",", "\n", "'HeadEndSite'", ":", "[", "]", ",", "\n", "'RightShoulder'", ":", "[", "'RightArm'", "]", ",", "\n", "'RightArm'", ":", "[", "'RightForeArm'", "]", ",", "\n", "'RightForeArm'", ":", "[", "'RightHand'", "]", ",", "\n", "'RightHand'", ":", "[", "'RightHandEndSite'", "]", ",", "\n", "'RightHandEndSite'", ":", "[", "]", ",", "\n", "'RightHipJoint'", ":", "[", "'RightUpLeg'", "]", ",", "\n", "'RightUpLeg'", ":", "[", "'RightLeg'", "]", ",", "\n", "'RightLeg'", ":", "[", "'RightFoot'", "]", ",", "\n", "'RightFoot'", ":", "[", "'RightFootEndSite'", "]", ",", "\n", "'RightFootEndSite'", ":", "[", "]", ",", "\n", "}", "\n", "self", ".", "parent", "=", "{", "self", ".", "root", ":", "None", "}", "\n", "for", "parent", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "for", "child", "in", "children", ":", "\n", "                ", "self", ".", "parent", "[", "child", "]", "=", "parent", "\n", "\n", "", "", "self", ".", "left_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Left'", "in", "joint", "\n", "]", "\n", "self", ".", "right_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Right'", "in", "joint", "\n", "]", "\n", "\n", "# T-pose", "\n", "self", ".", "initial_directions", "=", "{", "\n", "'Hips'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "'LeftHipJoint'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftUpLeg'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftLeg'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftFoot'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftFootEndSite'", ":", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "'LowerBack'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Spine'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Spine1'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'LeftShoulder'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftArm'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftForeArm'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftHand'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftHandEndSite'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'Neck'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Neck1'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'HeadEndSite'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'RightShoulder'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightArm'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightForeArm'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightHand'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightHandEndSite'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightHipJoint'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightUpLeg'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightLeg'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightFoot'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightFootEndSite'", ":", "[", "0", ",", "-", "1", ",", "0", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.cmu_skeleton.CMUSkeleton.get_initial_offset": [[119, 159], ["cmu_skeleton.CMUSkeleton.initial_directions.items", "stack.pop", "stack.append", "joint.replace().replace", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "max", "numpy.linalg.norm", "numpy.linalg.norm", "joint.replace"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "get_initial_offset", "(", "self", ",", "poses_3d", ")", ":", "\n", "# TODO: RANSAC", "\n", "        ", "bone_lens", "=", "{", "self", ".", "root", ":", "[", "0", "]", "}", "\n", "stack", "=", "[", "self", ".", "root", "]", "\n", "while", "stack", ":", "\n", "            ", "parent", "=", "stack", ".", "pop", "(", ")", "\n", "p_idx", "=", "self", ".", "keypoint2index", "[", "parent", "]", "\n", "p_name", "=", "parent", "\n", "while", "p_idx", "==", "-", "1", ":", "\n", "# find real parent", "\n", "                ", "p_name", "=", "self", ".", "parent", "[", "p_name", "]", "\n", "p_idx", "=", "self", ".", "keypoint2index", "[", "p_name", "]", "\n", "", "for", "child", "in", "self", ".", "children", "[", "parent", "]", ":", "\n", "                ", "stack", ".", "append", "(", "child", ")", "\n", "\n", "if", "self", ".", "keypoint2index", "[", "child", "]", "==", "-", "1", ":", "\n", "                    ", "bone_lens", "[", "child", "]", "=", "[", "0.1", "]", "\n", "", "else", ":", "\n", "                    ", "c_idx", "=", "self", ".", "keypoint2index", "[", "child", "]", "\n", "bone_lens", "[", "child", "]", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "poses_3d", "[", ":", ",", "p_idx", "]", "-", "poses_3d", "[", ":", ",", "c_idx", "]", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "\n", "", "", "", "bone_len", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "if", "'Left'", "in", "joint", "or", "'Right'", "in", "joint", ":", "\n", "                ", "base_name", "=", "joint", ".", "replace", "(", "'Left'", ",", "''", ")", ".", "replace", "(", "'Right'", ",", "''", ")", "\n", "left_len", "=", "np", ".", "mean", "(", "bone_lens", "[", "'Left'", "+", "base_name", "]", ")", "\n", "right_len", "=", "np", ".", "mean", "(", "bone_lens", "[", "'Right'", "+", "base_name", "]", ")", "\n", "bone_len", "[", "joint", "]", "=", "(", "left_len", "+", "right_len", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "bone_len", "[", "joint", "]", "=", "np", ".", "mean", "(", "bone_lens", "[", "joint", "]", ")", "\n", "\n", "", "", "initial_offset", "=", "{", "}", "\n", "for", "joint", ",", "direction", "in", "self", ".", "initial_directions", ".", "items", "(", ")", ":", "\n", "            ", "direction", "=", "np", ".", "array", "(", "direction", ")", "/", "max", "(", "np", ".", "linalg", ".", "norm", "(", "direction", ")", ",", "1e-12", ")", "\n", "initial_offset", "[", "joint", "]", "=", "direction", "*", "bone_len", "[", "joint", "]", "\n", "\n", "", "return", "initial_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.cmu_skeleton.CMUSkeleton.get_bvh_header": [[161, 182], ["cmu_skeleton.CMUSkeleton.get_initial_offset", "cmu_skeleton.CMUSkeleton.children.items", "bvh_helper.BvhHeader", "bvh_helper.BvhNode"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_initial_offset"], ["", "def", "get_bvh_header", "(", "self", ",", "poses_3d", ")", ":", "\n", "        ", "initial_offset", "=", "self", ".", "get_initial_offset", "(", "poses_3d", ")", "\n", "\n", "nodes", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "is_root", "=", "joint", "==", "self", ".", "root", "\n", "is_end_site", "=", "'EndSite'", "in", "joint", "\n", "nodes", "[", "joint", "]", "=", "bvh_helper", ".", "BvhNode", "(", "\n", "name", "=", "joint", ",", "\n", "offset", "=", "initial_offset", "[", "joint", "]", ",", "\n", "rotation_order", "=", "'zxy'", "if", "not", "is_end_site", "else", "''", ",", "\n", "is_root", "=", "is_root", ",", "\n", "is_end_site", "=", "is_end_site", ",", "\n", ")", "\n", "", "for", "joint", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "nodes", "[", "joint", "]", ".", "children", "=", "[", "nodes", "[", "child", "]", "for", "child", "in", "children", "]", "\n", "for", "child", "in", "children", ":", "\n", "                ", "nodes", "[", "child", "]", ".", "parent", "=", "nodes", "[", "joint", "]", "\n", "\n", "", "", "header", "=", "bvh_helper", ".", "BvhHeader", "(", "root", "=", "nodes", "[", "self", ".", "root", "]", ",", "nodes", "=", "nodes", ")", "\n", "return", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.cmu_skeleton.CMUSkeleton.pose2euler": [[184, 277], ["stack.pop", "quats[].copy", "math3d.quat2euler", "numpy.rad2deg", "channel.extend", "channel.extend", "math3d.dcm_from_axis", "math3d.dcm2quat", "quats[].copy", "math3d.quat_divide", "stack.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat2euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm_from_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divide", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "pose2euler", "(", "self", ",", "pose", ",", "header", ")", ":", "\n", "        ", "channel", "=", "[", "]", "\n", "quats", "=", "{", "}", "\n", "eulers", "=", "{", "}", "\n", "stack", "=", "[", "header", ".", "root", "]", "\n", "while", "stack", ":", "\n", "            ", "node", "=", "stack", ".", "pop", "(", ")", "\n", "joint", "=", "node", ".", "name", "\n", "joint_idx", "=", "self", ".", "keypoint2index", "[", "joint", "]", "\n", "\n", "if", "node", ".", "is_root", ":", "\n", "                ", "channel", ".", "extend", "(", "pose", "[", "joint_idx", "]", ")", "\n", "\n", "", "index", "=", "self", ".", "keypoint2index", "\n", "order", "=", "None", "\n", "if", "joint", "==", "'Hips'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Spine'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "in", "[", "'RightUpLeg'", ",", "'RightLeg'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'Hips'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "in", "[", "'LeftUpLeg'", ",", "'LeftLeg'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'Hips'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Spine'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Spine1'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Spine1'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'Spine'", "]", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Neck1'", ":", "\n", "                ", "x_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Spine1'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "z_dir", "=", "pose", "[", "index", "[", "'HeadEndSite'", "]", "]", "-", "pose", "[", "index", "[", "'Spine1'", "]", "]", "\n", "order", "=", "'zxy'", "\n", "", "elif", "joint", "==", "'LeftArm'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'LeftForeArm'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'RightArm'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'RightForeArm'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "\n", "", "if", "order", ":", "\n", "                ", "dcm", "=", "math3d", ".", "dcm_from_axis", "(", "x_dir", ",", "y_dir", ",", "z_dir", ",", "order", ")", "\n", "quats", "[", "joint", "]", "=", "math3d", ".", "dcm2quat", "(", "dcm", ")", "\n", "", "else", ":", "\n", "                ", "quats", "[", "joint", "]", "=", "quats", "[", "self", ".", "parent", "[", "joint", "]", "]", ".", "copy", "(", ")", "\n", "\n", "", "local_quat", "=", "quats", "[", "joint", "]", ".", "copy", "(", ")", "\n", "if", "node", ".", "parent", ":", "\n", "                ", "local_quat", "=", "math3d", ".", "quat_divide", "(", "\n", "q", "=", "quats", "[", "joint", "]", ",", "r", "=", "quats", "[", "node", ".", "parent", ".", "name", "]", "\n", ")", "\n", "\n", "", "euler", "=", "math3d", ".", "quat2euler", "(", "\n", "q", "=", "local_quat", ",", "order", "=", "node", ".", "rotation_order", "\n", ")", "\n", "euler", "=", "np", ".", "rad2deg", "(", "euler", ")", "\n", "eulers", "[", "joint", "]", "=", "euler", "\n", "channel", ".", "extend", "(", "euler", ")", "\n", "\n", "for", "child", "in", "node", ".", "children", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "if", "not", "child", ".", "is_end_site", ":", "\n", "                    ", "stack", ".", "append", "(", "child", ")", "\n", "\n", "", "", "", "return", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.cmu_skeleton.CMUSkeleton.poses2bvh": [[279, 291], ["enumerate", "cmu_skeleton.CMUSkeleton.get_bvh_header", "channels.append", "bvh_helper.write_bvh", "cmu_skeleton.CMUSkeleton.pose2euler"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_bvh_header", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.pose2euler"], ["", "def", "poses2bvh", "(", "self", ",", "poses_3d", ",", "header", "=", "None", ",", "output_file", "=", "None", ")", ":", "\n", "        ", "if", "not", "header", ":", "\n", "            ", "header", "=", "self", ".", "get_bvh_header", "(", "poses_3d", ")", "\n", "\n", "", "channels", "=", "[", "]", "\n", "for", "frame", ",", "pose", "in", "enumerate", "(", "poses_3d", ")", ":", "\n", "            ", "channels", ".", "append", "(", "self", ".", "pose2euler", "(", "pose", ",", "header", ")", ")", "\n", "\n", "", "if", "output_file", ":", "\n", "            ", "bvh_helper", ".", "write_bvh", "(", "output_file", ",", "header", ",", "channels", ")", "\n", "\n", "", "return", "channels", ",", "header", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.SkeletonConverter.__init__": [[19, 80], ["len", "len", "humanoid_rib_skeleton.SkeletonConverter.keypoint2index.items", "humanoid_rib_skeleton.SkeletonConverter.keypoint2index_22joint.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'Hips'", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Hips'", ":", "0", ",", "\n", "'RightUpLeg'", ":", "1", ",", "\n", "'RightLeg'", ":", "2", ",", "\n", "'RightFoot'", ":", "3", ",", "\n", "'LeftUpLeg'", ":", "4", ",", "\n", "'LeftLeg'", ":", "5", ",", "\n", "'LeftFoot'", ":", "6", ",", "\n", "'Spine2'", ":", "7", ",", "\n", "# 'Spine3': 8,", "\n", "'Neck'", ":", "8", ",", "\n", "'Head'", ":", "9", ",", "\n", "'LeftArm'", ":", "10", ",", "\n", "'LeftForeArm'", ":", "11", ",", "\n", "'LeftHand'", ":", "12", ",", "\n", "'RightArm'", ":", "13", ",", "\n", "'RightForeArm'", ":", "14", ",", "\n", "'RightHand'", ":", "15", ",", "\n", "# 'RightFootEndSite': -1,", "\n", "# 'LeftFootEndSite': -1,", "\n", "# 'LeftHandEndSite': -1,", "\n", "# 'RightHandEndSite': -1", "\n", "}", "\n", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "# new joint index keypoint", "\n", "self", ".", "keypoint2index_22joint", "=", "{", "\n", "'Hips'", ":", "0", ",", "\n", "'LeftUpLeg'", ":", "1", ",", "\n", "'LeftLeg'", ":", "2", ",", "\n", "'LeftFoot'", ":", "3", ",", "\n", "'LeftToe'", ":", "4", ",", "\n", "'RightUpLeg'", ":", "5", ",", "\n", "'RightLeg'", ":", "6", ",", "\n", "'RightFoot'", ":", "7", ",", "\n", "'RightToe'", ":", "8", ",", "\n", "'Spine'", ":", "9", ",", "\n", "'Spine1'", ":", "10", ",", "\n", "'Spine2'", ":", "11", ",", "\n", "'Neck'", ":", "12", ",", "\n", "'Head'", ":", "13", ",", "\n", "'LeftShoulder'", ":", "14", ",", "\n", "'LeftArm'", ":", "15", ",", "\n", "'LeftForeArm'", ":", "16", ",", "\n", "'LeftHand'", ":", "17", ",", "\n", "'RightShoulder'", ":", "18", ",", "\n", "'RightArm'", ":", "19", ",", "\n", "'RightForeArm'", ":", "20", ",", "\n", "'RightHand'", ":", "21", ",", "\n", "# 'RightFootEndSite': -1,", "\n", "# 'LeftFootEndSite': -1,", "\n", "# 'LeftHandEndSite': -1,", "\n", "# 'RightHandEndSite': -1", "\n", "}", "\n", "\n", "self", ".", "index2keypoint_22joint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index_22joint", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num_22joint", "=", "len", "(", "self", ".", "keypoint2index_22joint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.SkeletonConverter.convert_to_22joint": [[81, 118], ["numpy.zeros"], "methods", ["None"], ["", "def", "convert_to_22joint", "(", "self", ",", "poses_3d", ")", ":", "\n", "        ", "\"\"\"\n        add spine, spine1, head end site, LeftShoulder, RightShoulder\n        feet with toe together\n        poses_3d: tx16x3\n        :return:\n        \"\"\"", "\n", "tmp_poses_dict", "=", "{", "}", "\n", "\"\"\" redefine Spine2\"\"\"", "\n", "poseSpine2", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "*", "0.5", "+", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Hips'", "]", "]", "*", "0.5", "\n", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Spine2'", "]", "]", "=", "poseSpine2", "*", "1.", "\n", "\"\"\" spine, spine1 <- Hips,Spine2 \"\"\"", "\n", "vec_Hips2Spine2", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Spine2'", "]", "]", "-", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Hips'", "]", "]", "\n", "tmp_poses_dict", "[", "'Spine'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Hips'", "]", "]", "+", "1", "/", "3", "*", "vec_Hips2Spine2", "\n", "tmp_poses_dict", "[", "'Spine1'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Hips'", "]", "]", "+", "2", "/", "3", "*", "vec_Hips2Spine2", "\n", "# \"\"\" spine3 <- Spine2, Neck\"\"\"", "\n", "# vec_Spine22Neck = poses_3d[:, self.keypoint2index['Neck']] - poses_3d[:, self.keypoint2index['Spine2']]", "\n", "# tmp_poses_dict['Spine3'] = poses_3d[:, self.keypoint2index['Spine2']] + 1/2*vec_Spine22Neck", "\n", "\"\"\" LeftShoulder <- Neck,  LeftArm\"\"\"", "\n", "vec_Neck2LeftArm", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'LeftArm'", "]", "]", "-", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "\n", "tmp_poses_dict", "[", "'LeftShoulder'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "+", "1", "/", "6", "*", "vec_Neck2LeftArm", "\n", "\"\"\" RightShoulder <- Neck,  RightArm\"\"\"", "\n", "vec_Neck2RightArm", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'RightArm'", "]", "]", "-", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "\n", "tmp_poses_dict", "[", "'RightShoulder'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'Neck'", "]", "]", "+", "1", "/", "6", "*", "vec_Neck2RightArm", "\n", "# LeftToe, RightToe", "\n", "tmp_poses_dict", "[", "'LeftToe'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'LeftFoot'", "]", "]", "\n", "tmp_poses_dict", "[", "'RightToe'", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "'RightFoot'", "]", "]", "\n", "\n", "\"\"\" tmp_poses_dict \"\"\"", "\n", "for", "keypoint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "tmp_poses_dict", "[", "keypoint", "]", "=", "poses_3d", "[", ":", ",", "self", ".", "keypoint2index", "[", "keypoint", "]", "]", "\n", "\n", "", "\"\"\" re-order \"\"\"", "\n", "poses_3d_22joint", "=", "np", ".", "zeros", "(", "(", "poses_3d", ".", "shape", "[", "0", "]", ",", "22", ",", "3", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "idx", "in", "self", ".", "index2keypoint_22joint", ":", "\n", "            ", "poses_3d_22joint", "[", ":", ",", "idx", "]", "=", "tmp_poses_dict", "[", "self", ".", "index2keypoint_22joint", "[", "idx", "]", "]", "\n", "", "return", "poses_3d_22joint", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.H36mSkeleton.__init__": [[122, 236], ["len", "humanoid_rib_skeleton.H36mSkeleton.children.items", "humanoid_rib_skeleton.H36mSkeleton.keypoint2index.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'Hips'", "\n", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Hips'", ":", "0", ",", "\n", "'LeftUpLeg'", ":", "1", ",", "\n", "'LeftLeg'", ":", "2", ",", "\n", "'LeftFoot'", ":", "3", ",", "\n", "'LeftToe'", ":", "4", ",", "\n", "'RightUpLeg'", ":", "5", ",", "\n", "'RightLeg'", ":", "6", ",", "\n", "'RightFoot'", ":", "7", ",", "\n", "'RightToe'", ":", "8", ",", "\n", "'Spine'", ":", "9", ",", "\n", "'Spine1'", ":", "10", ",", "\n", "'Spine2'", ":", "11", ",", "\n", "'Neck'", ":", "12", ",", "\n", "'Head'", ":", "13", ",", "\n", "'HeadEndSite'", ":", "-", "1", ",", "\n", "'LeftShoulder'", ":", "14", ",", "\n", "'LeftArm'", ":", "15", ",", "\n", "'LeftForeArm'", ":", "16", ",", "\n", "'LeftHand'", ":", "17", ",", "\n", "'RightShoulder'", ":", "18", ",", "\n", "'RightArm'", ":", "19", ",", "\n", "'RightForeArm'", ":", "20", ",", "\n", "'RightHand'", ":", "21", ",", "\n", "'RightFootEndSite'", ":", "-", "1", ",", "\n", "'LeftFootEndSite'", ":", "-", "1", ",", "\n", "'LeftHandEndSite'", ":", "-", "1", ",", "\n", "'RightHandEndSite'", ":", "-", "1", "\n", "}", "\n", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "self", ".", "children", "=", "{", "\n", "'Hips'", ":", "[", "'RightUpLeg'", ",", "'LeftUpLeg'", ",", "'Spine'", "]", ",", "\n", "'LeftUpLeg'", ":", "[", "'LeftLeg'", "]", ",", "\n", "'LeftLeg'", ":", "[", "'LeftFoot'", "]", ",", "\n", "'LeftFoot'", ":", "[", "'LeftToe'", "]", ",", "\n", "'LeftToe'", ":", "[", "'LeftFootEndSite'", "]", ",", "\n", "'LeftFootEndSite'", ":", "[", "]", ",", "\n", "'RightUpLeg'", ":", "[", "'RightLeg'", "]", ",", "\n", "'RightLeg'", ":", "[", "'RightFoot'", "]", ",", "\n", "'RightFoot'", ":", "[", "'RightToe'", "]", ",", "\n", "'RightToe'", ":", "[", "'RightFootEndSite'", "]", ",", "\n", "'RightFootEndSite'", ":", "[", "]", ",", "\n", "'Spine'", ":", "[", "'Spine1'", "]", ",", "\n", "'Spine1'", ":", "[", "'Spine2'", "]", ",", "\n", "'Spine2'", ":", "[", "'Neck'", ",", "'LeftShoulder'", ",", "'RightShoulder'", "]", ",", "\n", "'Neck'", ":", "[", "'Head'", "]", ",", "\n", "'Head'", ":", "[", "'HeadEndSite'", "]", ",", "\n", "'HeadEndSite'", ":", "[", "]", ",", "\n", "'LeftShoulder'", ":", "[", "'LeftArm'", "]", ",", "\n", "'LeftArm'", ":", "[", "'LeftForeArm'", "]", ",", "\n", "'LeftForeArm'", ":", "[", "'LeftHand'", "]", ",", "\n", "'LeftHand'", ":", "[", "'LeftHandEndSite'", "]", ",", "\n", "'LeftHandEndSite'", ":", "[", "]", ",", "\n", "'RightShoulder'", ":", "[", "'RightArm'", "]", ",", "\n", "'RightArm'", ":", "[", "'RightForeArm'", "]", ",", "\n", "'RightForeArm'", ":", "[", "'RightHand'", "]", ",", "\n", "'RightHand'", ":", "[", "'RightHandEndSite'", "]", ",", "\n", "'RightHandEndSite'", ":", "[", "]", "\n", "}", "\n", "\n", "self", ".", "parent", "=", "{", "self", ".", "root", ":", "None", "}", "\n", "for", "parent", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "for", "child", "in", "children", ":", "\n", "                ", "self", ".", "parent", "[", "child", "]", "=", "parent", "\n", "\n", "", "", "self", ".", "left_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Left'", "in", "joint", "\n", "]", "\n", "self", ".", "right_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Right'", "in", "joint", "\n", "]", "\n", "\n", "self", ".", "initial_directions", "=", "{", "\n", "'Hips'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "'LeftUpLeg'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftLeg'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftFoot'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftToe'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftFootEndSite'", ":", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "'RightUpLeg'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightLeg'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightFoot'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightToe'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightFootEndSite'", ":", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "'Spine'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Spine1'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Spine2'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Neck'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Head'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'HeadEndSite'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'LeftShoulder'", ":", "[", "1", ",", "0", ",", "5", "]", ",", "\n", "'LeftArm'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftForeArm'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftHand'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftHandEndSite'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightShoulder'", ":", "[", "-", "1", ",", "0", ",", "5", "]", ",", "\n", "'RightArm'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightForeArm'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightHand'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightHandEndSite'", ":", "[", "-", "1", ",", "0", ",", "0", "]", "\n", "}", "\n", "\n", "\n", "self", ".", "dcms", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "self", ".", "dcms", "[", "joint", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.H36mSkeleton.get_initial_offset": [[238, 273], ["humanoid_rib_skeleton.H36mSkeleton.initial_directions.items", "stack.pop", "stack.append", "numpy.linalg.norm", "joint.replace().replace", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "max", "numpy.linalg.norm", "joint.replace"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "", "def", "get_initial_offset", "(", "self", ",", "poses_3d", ")", ":", "\n", "# TODO: RANSAC", "\n", "        ", "bone_lens", "=", "{", "self", ".", "root", ":", "[", "0", "]", "}", "\n", "stack", "=", "[", "self", ".", "root", "]", "\n", "while", "stack", ":", "\n", "            ", "parent", "=", "stack", ".", "pop", "(", ")", "\n", "p_idx", "=", "self", ".", "keypoint2index", "[", "parent", "]", "\n", "for", "child", "in", "self", ".", "children", "[", "parent", "]", ":", "\n", "                ", "if", "'EndSite'", "in", "child", ":", "\n", "                    ", "bone_lens", "[", "child", "]", "=", "0.4", "*", "bone_lens", "[", "parent", "]", "\n", "continue", "\n", "", "stack", ".", "append", "(", "child", ")", "\n", "\n", "c_idx", "=", "self", ".", "keypoint2index", "[", "child", "]", "\n", "bone_lens", "[", "child", "]", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "poses_3d", "[", ":", ",", "p_idx", "]", "-", "poses_3d", "[", ":", ",", "c_idx", "]", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "\n", "", "", "bone_len", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "if", "'Left'", "in", "joint", "or", "'Right'", "in", "joint", ":", "\n", "                ", "base_name", "=", "joint", ".", "replace", "(", "'Left'", ",", "''", ")", ".", "replace", "(", "'Right'", ",", "''", ")", "\n", "left_len", "=", "np", ".", "mean", "(", "bone_lens", "[", "'Left'", "+", "base_name", "]", ")", "\n", "right_len", "=", "np", ".", "mean", "(", "bone_lens", "[", "'Right'", "+", "base_name", "]", ")", "\n", "bone_len", "[", "joint", "]", "=", "(", "left_len", "+", "right_len", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "bone_len", "[", "joint", "]", "=", "np", ".", "mean", "(", "bone_lens", "[", "joint", "]", ")", "\n", "\n", "", "", "initial_offset", "=", "{", "}", "\n", "for", "joint", ",", "direction", "in", "self", ".", "initial_directions", ".", "items", "(", ")", ":", "\n", "            ", "direction", "=", "np", ".", "array", "(", "direction", ")", "/", "max", "(", "np", ".", "linalg", ".", "norm", "(", "direction", ")", ",", "1e-12", ")", "\n", "initial_offset", "[", "joint", "]", "=", "direction", "*", "bone_len", "[", "joint", "]", "\n", "\n", "", "return", "initial_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.H36mSkeleton.get_bvh_header": [[275, 296], ["humanoid_rib_skeleton.H36mSkeleton.get_initial_offset", "humanoid_rib_skeleton.H36mSkeleton.children.items", "bvh_helper.BvhHeader", "bvh_helper.BvhNode"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_initial_offset"], ["", "def", "get_bvh_header", "(", "self", ",", "poses_3d", ")", ":", "\n", "        ", "initial_offset", "=", "self", ".", "get_initial_offset", "(", "poses_3d", ")", "\n", "\n", "nodes", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "is_root", "=", "joint", "==", "self", ".", "root", "\n", "is_end_site", "=", "'EndSite'", "in", "joint", "\n", "nodes", "[", "joint", "]", "=", "bvh_helper", ".", "BvhNode", "(", "\n", "name", "=", "joint", ",", "\n", "offset", "=", "initial_offset", "[", "joint", "]", ",", "\n", "rotation_order", "=", "'xyz'", "if", "not", "is_end_site", "else", "''", ",", "# default zxy", "\n", "is_root", "=", "is_root", ",", "\n", "is_end_site", "=", "is_end_site", ",", "\n", ")", "\n", "", "for", "joint", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "nodes", "[", "joint", "]", ".", "children", "=", "[", "nodes", "[", "child", "]", "for", "child", "in", "children", "]", "\n", "for", "child", "in", "children", ":", "\n", "                ", "nodes", "[", "child", "]", ".", "parent", "=", "nodes", "[", "joint", "]", "\n", "\n", "", "", "header", "=", "bvh_helper", ".", "BvhHeader", "(", "root", "=", "nodes", "[", "self", ".", "root", "]", ",", "nodes", "=", "nodes", ")", "\n", "return", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.H36mSkeleton.pose2euler": [[298, 451], ["math3d.anglefrom3points", "math3d.anglefrom3points", "numpy.abs", "numpy.abs", "stack.pop", "quats[].copy", "math3d.quat2euler", "numpy.rad2deg", "channel.extend", "channel.extend", "math3d.dcm_from_axis", "math3d.dcm_from_axis.copy", "math3d.dcm2quat", "quats[].copy", "math3d.quat_divide", "math3d.euler2quat", "math3d.quat_mul", "stack.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.anglefrom3points", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.anglefrom3points", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat2euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm_from_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divide", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.euler2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "pose2euler", "(", "self", ",", "pose", ",", "header", ")", ":", "\n", "        ", "channel", "=", "[", "]", "\n", "quats", "=", "{", "}", "\n", "# quatsV1 = {}", "\n", "eulers", "=", "{", "}", "\n", "stack", "=", "[", "header", ".", "root", "]", "\n", "\n", "index", "=", "self", ".", "keypoint2index", "\n", "LeftForeArm_angle", "=", "math3d", ".", "anglefrom3points", "(", "pose", "[", "index", "[", "'LeftArm'", "]", "]", ",", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", ",", "pose", "[", "index", "[", "'LeftHand'", "]", "]", ")", "\n", "LeftForeArm_straight", "=", "np", ".", "abs", "(", "LeftForeArm_angle", "-", "180", ")", "<", "10", "\n", "RightForeArm_angle", "=", "math3d", ".", "anglefrom3points", "(", "pose", "[", "index", "[", "'RightArm'", "]", "]", ",", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", ",", "pose", "[", "index", "[", "'RightHand'", "]", "]", ")", "\n", "RightForeArm_straight", "=", "np", ".", "abs", "(", "RightForeArm_angle", "-", "180", ")", "<", "10", "\n", "\n", "while", "stack", ":", "\n", "            ", "node", "=", "stack", ".", "pop", "(", ")", "\n", "joint", "=", "node", ".", "name", "\n", "joint_idx", "=", "self", ".", "keypoint2index", "[", "joint", "]", "\n", "\n", "if", "node", ".", "is_root", ":", "\n", "                ", "channel", ".", "extend", "(", "pose", "[", "joint_idx", "]", ")", "\n", "\n", "", "index", "=", "self", ".", "keypoint2index", "\n", "order", "=", "None", "\n", "if", "joint", "==", "'Hips'", ":", "\n", "# debug_1 = pose[index['Hips']]", "\n", "# debug_2 = pose[index['Spine']]", "\n", "# debug_3 = pose[index['LeftUpLeg']]", "\n", "# debug_4 = pose[index['RightUpLeg']]", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Spine'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'zyx'", "\n", "# order = 'xyz'", "\n", "", "elif", "joint", "in", "[", "'RightUpLeg'", ",", "'RightLeg'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'Hips'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'zyx'", "\n", "\n", "", "elif", "joint", "in", "[", "'LeftUpLeg'", ",", "'LeftLeg'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'Hips'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'zyx'", "\n", "\n", "\n", "", "elif", "joint", "==", "'Spine'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Spine1'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Spine2'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'Spine1'", "]", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Neck'", ":", "\n", "                ", "x_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Spine2'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Head'", "]", "]", "-", "pose", "[", "index", "[", "'Spine2'", "]", "]", "\n", "order", "=", "'zxy'", "\n", "", "elif", "joint", "==", "'LeftShoulder'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'LeftArm'", ":", "\n", "                ", "if", "LeftForeArm_straight", "and", "self", ".", "dcms", "[", "'LeftForeArm'", "]", "is", "not", "None", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "self", ".", "dcms", "[", "'LeftForeArm'", "]", "[", "2", "]", "*", "1.", "\n", "order", "=", "'xyz'", "\n", "", "else", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "", "elif", "joint", "==", "'LeftForeArm'", ":", "\n", "                ", "if", "LeftForeArm_straight", "and", "self", ".", "dcms", "[", "'LeftForeArm'", "]", "is", "not", "None", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "self", ".", "dcms", "[", "'LeftForeArm'", "]", "[", "2", "]", "*", "1.", "\n", "order", "=", "'xyz'", "\n", "", "else", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "", "elif", "joint", "==", "'RightShoulder'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'RightArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'RightArm'", ":", "\n", "                ", "if", "RightForeArm_straight", "and", "self", ".", "dcms", "[", "'RightForeArm'", "]", "is", "not", "None", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "self", ".", "dcms", "[", "'RightForeArm'", "]", "[", "2", "]", "*", "1.", "\n", "order", "=", "'xyz'", "\n", "", "else", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "", "elif", "joint", "==", "'RightForeArm'", ":", "\n", "                ", "if", "RightForeArm_straight", "and", "self", ".", "dcms", "[", "'RightForeArm'", "]", "is", "not", "None", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "self", ".", "dcms", "[", "'RightForeArm'", "]", "[", "2", "]", "*", "1.", "\n", "order", "=", "'xyz'", "\n", "", "else", ":", "\n", "                    ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "", "if", "order", ":", "\n", "                ", "dcm", "=", "math3d", ".", "dcm_from_axis", "(", "x_dir", ",", "y_dir", ",", "z_dir", ",", "order", ")", "# 3x3 [axis['x'], axis['y'], axis['z']]", "\n", "self", ".", "dcms", "[", "joint", "]", "=", "dcm", ".", "copy", "(", ")", "\n", "quats", "[", "joint", "]", "=", "math3d", ".", "dcm2quat", "(", "dcm", ")", "\n", "", "else", ":", "\n", "                ", "quats", "[", "joint", "]", "=", "quats", "[", "self", ".", "parent", "[", "joint", "]", "]", ".", "copy", "(", ")", "\n", "\n", "", "local_quat", "=", "quats", "[", "joint", "]", ".", "copy", "(", ")", "\n", "# local_quatV1 = quatsV1[joint].copy()", "\n", "if", "node", ".", "parent", ":", "\n", "                ", "local_quat", "=", "math3d", ".", "quat_divide", "(", "\n", "q", "=", "quats", "[", "joint", "]", ",", "r", "=", "quats", "[", "node", ".", "parent", ".", "name", "]", "\n", ")", "\n", "\n", "", "euler", "=", "math3d", ".", "quat2euler", "(", "\n", "q", "=", "local_quat", ",", "order", "=", "node", ".", "rotation_order", "\n", ")", "\n", "\n", "if", "joint", "in", "[", "'LeftShoulder'", ",", "'RightShoulder'", ",", "'Neck'", "]", ":", "\n", "                ", "tmp_idx", "=", "2", "if", "joint", "==", "'Neck'", "else", "0", "\n", "euler", "[", "tmp_idx", "]", "=", "tmp_idx", "# 3", "\n", "local_quat", "=", "math3d", ".", "euler2quat", "(", "euler", ")", "\n", "quat", "=", "math3d", ".", "quat_mul", "(", "quats", "[", "node", ".", "parent", ".", "name", "]", ",", "local_quat", ")", "\n", "quats", "[", "joint", "]", "=", "quat", "*", "1.", "\n", "\n", "", "euler", "=", "np", ".", "rad2deg", "(", "euler", ")", "\n", "\n", "eulers", "[", "joint", "]", "=", "euler", "\n", "channel", ".", "extend", "(", "euler", ")", "\n", "\n", "for", "child", "in", "node", ".", "children", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "if", "not", "child", ".", "is_end_site", ":", "\n", "                    ", "stack", ".", "append", "(", "child", ")", "\n", "\n", "", "", "", "return", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.H36mSkeleton.poses2bvh": [[454, 468], ["enumerate", "humanoid_rib_skeleton.H36mSkeleton.get_bvh_header", "channels.append", "bvh_helper.write_bvh", "humanoid_rib_skeleton.H36mSkeleton.pose2euler"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_bvh_header", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.pose2euler"], ["", "def", "poses2bvh", "(", "self", ",", "poses_3d", ",", "header", "=", "None", ",", "output_file", "=", "None", ")", ":", "\n", "        ", "if", "not", "header", ":", "\n", "            ", "header", "=", "self", ".", "get_bvh_header", "(", "poses_3d", ")", "\n", "\n", "", "channels", "=", "[", "]", "\n", "for", "frame", ",", "pose", "in", "enumerate", "(", "poses_3d", ")", ":", "\n", "            ", "channels", ".", "append", "(", "self", ".", "pose2euler", "(", "pose", ",", "header", ")", ")", "\n", "#channels.append(self.pose2euler_SmartBody(pose, header))", "\n", "#channels.append(self.pose2euler_SmartBody_Modify(pose, header))", "\n", "\n", "", "if", "output_file", ":", "\n", "            ", "bvh_helper", ".", "write_bvh", "(", "output_file", ",", "header", ",", "channels", ")", "\n", "\n", "", "return", "channels", ",", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.write_standard_bvh": [[473, 507], ["os.path.dirname", "os.path.basename", "os.path.join", "os.path.join", "humanoid_rib_skeleton.SkeletonConverter", "humanoid_rib_skeleton.SkeletonConverter.convert_to_22joint", "humanoid_rib_skeleton.H36mSkeleton", "humanoid_rib_skeleton.H36mSkeleton.poses2bvh", "os.path.exists", "os.makedirs", "os.path.basename.rfind"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.SkeletonConverter.convert_to_22joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.poses2bvh"], ["def", "write_standard_bvh", "(", "outbvhfilepath", ",", "prediction3dpoint", ")", ":", "\n", "    ", "'''\n    :param outbvhfilepath:\n    :param prediction3dpoint:\n    :return:\n    '''", "\n", "\n", "for", "frame", "in", "prediction3dpoint", ":", "\n", "        ", "for", "point3d", "in", "frame", ":", "\n", "            ", "point3d", "[", "0", "]", "*=", "100", "\n", "point3d", "[", "1", "]", "*=", "100", "\n", "point3d", "[", "2", "]", "*=", "100", "\n", "\n", "# X = point3d[0]", "\n", "# Y = point3d[1]", "\n", "# Z = point3d[2]", "\n", "\n", "# point3d[0] = -X", "\n", "# point3d[1] = Z", "\n", "# point3d[2] = Y", "\n", "\n", "", "", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "outbvhfilepath", ")", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "outbvhfilepath", ")", "\n", "video_name", "=", "basename", "[", ":", "basename", ".", "rfind", "(", "'.'", ")", "]", "\n", "bvhfileDirectory", "=", "os", ".", "path", ".", "join", "(", "dir_name", ",", "video_name", ",", "\"bvh\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "bvhfileDirectory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "bvhfileDirectory", ")", "\n", "", "bvhfileName", "=", "os", ".", "path", ".", "join", "(", "dir_name", ",", "video_name", ",", "\"bvh\"", ",", "\"{}_h36m.bvh\"", ".", "format", "(", "video_name", ")", ")", "\n", "\n", "Converter", "=", "SkeletonConverter", "(", ")", "\n", "prediction3dpoint", "=", "Converter", ".", "convert_to_22joint", "(", "prediction3dpoint", ")", "\n", "\n", "human36m_skeleton", "=", "H36mSkeleton", "(", ")", "\n", "human36m_skeleton", ".", "poses2bvh", "(", "prediction3dpoint", ",", "output_file", "=", "bvhfileName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.camera.world2cam_sktpos": [[3, 12], ["skt_in.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["#", "\n", "# This source code is licensed under the license found in the", "\n", "# LICENSE file in the root directory of this source tree.", "\n", "#", "\n", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "\n", "from", "common", ".", "quaternion", "import", "qrot", ",", "qinverse", "\n", "from", "common", ".", "utils", "import", "wrap", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.camera.cam2world_sktpos": [[13, 20], ["None"], "function", ["None"], ["\n", "\n", "def", "normalize_screen_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "# Normalize so that [0, w] is mapped to [-1, 1], while preserving the aspect ratio", "\n", "return", "X", "/", "w", "*", "2", "-", "[", "1", ",", "h", "/", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.BvhNode.__init__": [[6, 19], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "name", ",", "offset", ",", "rotation_order", ",", "\n", "children", "=", "None", ",", "parent", "=", "None", ",", "is_root", "=", "False", ",", "is_end_site", "=", "False", ")", ":", "\n", "        ", "if", "not", "is_end_site", "and", "rotation_order", "not", "in", "[", "'xyz'", ",", "'xzy'", ",", "'yxz'", ",", "'yzx'", ",", "'zxy'", ",", "'zyx'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "f'Rotation order invalid.'", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "rotation_order", "=", "rotation_order", "\n", "self", ".", "children", "=", "children", "\n", "self", ".", "parent", "=", "parent", "\n", "self", ".", "is_root", "=", "is_root", "\n", "self", ".", "is_end_site", "=", "is_end_site", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.BvhHeader.__init__": [[22, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "nodes", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "nodes", "=", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_header": [[27, 60], ["writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "bvh_helper_SmartBody.write_header", "writer.write", "writer.write", "axis.upper"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_header", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["", "", "def", "write_header", "(", "writer", ",", "node", ",", "level", ")", ":", "\n", "    ", "indent", "=", "' '", "*", "4", "*", "level", "\n", "if", "node", ".", "is_root", ":", "\n", "        ", "writer", ".", "write", "(", "f'{indent}ROOT {node.name}\\n'", ")", "\n", "channel_num", "=", "6", "\n", "", "elif", "node", ".", "is_end_site", ":", "\n", "        ", "writer", ".", "write", "(", "f'{indent}End Site\\n'", ")", "\n", "channel_num", "=", "0", "\n", "", "else", ":", "\n", "        ", "writer", ".", "write", "(", "f'{indent}JOINT {node.name}\\n'", ")", "\n", "channel_num", "=", "3", "\n", "", "writer", ".", "write", "(", "f'{indent}{\"{\"}\\n'", ")", "\n", "\n", "indent", "=", "' '", "*", "4", "*", "(", "level", "+", "1", ")", "\n", "writer", ".", "write", "(", "\n", "f'{indent}OFFSET '", "\n", "f'{node.offset[0]} {node.offset[1]} {node.offset[2]}\\n'", "\n", ")", "\n", "if", "channel_num", ":", "\n", "        ", "channel_line", "=", "f'{indent}CHANNELS {channel_num} '", "\n", "if", "node", ".", "is_root", ":", "\n", "            ", "channel_line", "+=", "f'Xposition Yposition Zposition '", "\n", "", "channel_line", "+=", "' '", ".", "join", "(", "[", "\n", "f'{axis.upper()}rotation'", "\n", "for", "axis", "in", "node", ".", "rotation_order", "\n", "]", ")", "\n", "writer", ".", "write", "(", "channel_line", "+", "'\\n'", ")", "\n", "\n", "", "for", "child", "in", "node", ".", "children", ":", "\n", "        ", "write_header", "(", "writer", ",", "child", ",", "level", "+", "1", ")", "\n", "\n", "", "indent", "=", "' '", "*", "4", "*", "level", "\n", "writer", ".", "write", "(", "f'{indent}{\"}\"}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_bvh": [[61, 76], ["pathlib.Path", "pathlib.Path.parent.exists", "os.makedirs", "pathlib.Path.open", "f.write", "bvh_helper_SmartBody.write_header", "f.write", "f.write", "f.write", "f.write", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_header", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "write_bvh", "(", "output_file", ",", "header", ",", "channels", ",", "frame_rate", "=", "30", ")", ":", "\n", "    ", "output_file", "=", "Path", "(", "output_file", ")", "\n", "if", "not", "output_file", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_file", ".", "parent", ")", "\n", "\n", "", "with", "output_file", ".", "open", "(", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'HIERARCHY\\n'", ")", "\n", "write_header", "(", "writer", "=", "f", ",", "node", "=", "header", ".", "root", ",", "level", "=", "0", ")", "\n", "\n", "f", ".", "write", "(", "'MOTION\\n'", ")", "\n", "f", ".", "write", "(", "f'Frames: {len(channels)}\\n'", ")", "\n", "f", ".", "write", "(", "f'Frame Time: {1 / frame_rate}\\n'", ")", "\n", "\n", "for", "channel", "in", "channels", ":", "\n", "            ", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "f'{element}'", "for", "element", "in", "channel", "]", ")", "+", "'\\n'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_original_skeleton.H36mOriginalSkeleton.__init__": [[3, 88], ["len", "h36m_original_skeleton.H36mOriginalSkeleton.children.items", "h36m_original_skeleton.H36mOriginalSkeleton.keypoint2index.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'Hip'", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Hip'", ":", "0", ",", "\n", "'RightUpLeg'", ":", "1", ",", "\n", "'RightLeg'", ":", "2", ",", "\n", "'RightFoot'", ":", "3", ",", "\n", "'RightToeBase'", ":", "4", ",", "\n", "'RightToeBaseEndSite'", ":", "5", ",", "\n", "'LeftUpLeg'", ":", "6", ",", "\n", "'LeftLeg'", ":", "7", ",", "\n", "'LeftFoot'", ":", "8", ",", "\n", "'LeftToeBase'", ":", "9", ",", "\n", "'LeftToeBaseEndSite'", ":", "10", ",", "\n", "'Spine'", ":", "11", ",", "\n", "'Spine1'", ":", "12", ",", "\n", "'Neck'", ":", "13", ",", "\n", "'Head'", ":", "14", ",", "\n", "'HeadEndSite'", ":", "15", ",", "\n", "'LeftShoulder'", ":", "16", ",", "\n", "'LeftArm'", ":", "17", ",", "\n", "'LeftForeArm'", ":", "18", ",", "\n", "'LeftHand'", ":", "19", ",", "\n", "'LeftHandThumb'", ":", "20", ",", "\n", "'LeftHandThumbEndSite'", ":", "21", ",", "\n", "'LeftWristEnd'", ":", "22", ",", "\n", "'LeftWristEndEndSite'", ":", "23", ",", "\n", "'RightShoulder'", ":", "24", ",", "\n", "'RightArm'", ":", "25", ",", "\n", "'RightForeArm'", ":", "26", ",", "\n", "'RightHand'", ":", "27", ",", "\n", "'RightHandThumb'", ":", "28", ",", "\n", "'RightHandThumbEndSite'", ":", "29", ",", "\n", "'RightWristEnd'", ":", "30", ",", "\n", "'RightWristEndEndSite'", ":", "31", "\n", "}", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "self", ".", "children", "=", "{", "\n", "'Hip'", ":", "[", "'RightUpLeg'", ",", "'LeftUpLeg'", ",", "'Spine'", "]", ",", "\n", "'RightUpLeg'", ":", "[", "'RightLeg'", "]", ",", "\n", "'RightLeg'", ":", "[", "'RightFoot'", "]", ",", "\n", "'RightFoot'", ":", "[", "'RightToeBase'", "]", ",", "\n", "'RightToeBase'", ":", "[", "'RightToeBaseEndSite'", "]", ",", "\n", "'RightToeBaseEndSite'", ":", "[", "]", ",", "\n", "'LeftUpLeg'", ":", "[", "'LeftLeg'", "]", ",", "\n", "'LeftLeg'", ":", "[", "'LeftFoot'", "]", ",", "\n", "'LeftFoot'", ":", "[", "'LeftToeBase'", "]", ",", "\n", "'LeftToeBase'", ":", "[", "'LeftToeBaseEndSite'", "]", ",", "\n", "'LeftToeBaseEndSite'", ":", "[", "]", ",", "\n", "'Spine'", ":", "[", "'Spine1'", "]", ",", "\n", "'Spine1'", ":", "[", "'Neck'", ",", "'LeftShoulder'", ",", "'RightShoulder'", "]", ",", "\n", "'Neck'", ":", "[", "'Head'", "]", ",", "\n", "'Head'", ":", "[", "'HeadEndSite'", "]", ",", "\n", "'HeadEndSite'", ":", "[", "]", ",", "\n", "'LeftShoulder'", ":", "[", "'LeftArm'", "]", ",", "\n", "'LeftArm'", ":", "[", "'LeftForeArm'", "]", ",", "\n", "'LeftForeArm'", ":", "[", "'LeftHand'", "]", ",", "\n", "'LeftHand'", ":", "[", "'LeftHandThumb'", ",", "'LeftWristEnd'", "]", ",", "\n", "'LeftHandThumb'", ":", "[", "'LeftHandThumbEndSite'", "]", ",", "\n", "'LeftHandThumbEndSite'", ":", "[", "]", ",", "\n", "'LeftWristEnd'", ":", "[", "'LeftWristEndEndSite'", "]", ",", "\n", "'LeftWristEndEndSite'", ":", "[", "]", ",", "\n", "'RightShoulder'", ":", "[", "'RightArm'", "]", ",", "\n", "'RightArm'", ":", "[", "'RightForeArm'", "]", ",", "\n", "'RightForeArm'", ":", "[", "'RightHand'", "]", ",", "\n", "'RightHand'", ":", "[", "'RightHandThumb'", ",", "'RightWristEnd'", "]", ",", "\n", "'RightHandThumb'", ":", "[", "'RightHandThumbEndSite'", "]", ",", "\n", "'RightHandThumbEndSite'", ":", "[", "]", ",", "\n", "'RightWristEnd'", ":", "[", "'RightWristEndEndSite'", "]", ",", "\n", "'RightWristEndEndSite'", ":", "[", "]", ",", "\n", "}", "\n", "self", ".", "parent", "=", "{", "self", ".", "root", ":", "None", "}", "\n", "for", "parent", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "for", "child", "in", "children", ":", "\n", "                ", "self", ".", "parent", "[", "child", "]", "=", "parent", "\n", "\n", "", "", "self", ".", "left_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Left'", "in", "joint", "\n", "]", "\n", "self", ".", "right_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Right'", "in", "joint", "\n", "]", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.__init__": [[9, 99], ["len", "h36m_skeleton.H36mSkeleton.children.items", "h36m_skeleton.H36mSkeleton.keypoint2index.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'Hip'", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Hip'", ":", "0", ",", "\n", "'RightHip'", ":", "1", ",", "\n", "'RightKnee'", ":", "2", ",", "\n", "'RightAnkle'", ":", "3", ",", "\n", "'LeftHip'", ":", "4", ",", "\n", "'LeftKnee'", ":", "5", ",", "\n", "'LeftAnkle'", ":", "6", ",", "\n", "'Spine'", ":", "7", ",", "\n", "'Thorax'", ":", "8", ",", "\n", "'Neck'", ":", "9", ",", "\n", "'HeadEndSite'", ":", "10", ",", "\n", "'LeftShoulder'", ":", "11", ",", "\n", "'LeftElbow'", ":", "12", ",", "\n", "'LeftWrist'", ":", "13", ",", "\n", "'RightShoulder'", ":", "14", ",", "\n", "'RightElbow'", ":", "15", ",", "\n", "'RightWrist'", ":", "16", ",", "\n", "'RightAnkleEndSite'", ":", "-", "1", ",", "\n", "'LeftAnkleEndSite'", ":", "-", "1", ",", "\n", "'LeftWristEndSite'", ":", "-", "1", ",", "\n", "'RightWristEndSite'", ":", "-", "1", "\n", "}", "\n", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "self", ".", "children", "=", "{", "\n", "'Hip'", ":", "[", "'RightHip'", ",", "'LeftHip'", ",", "'Spine'", "]", ",", "\n", "'RightHip'", ":", "[", "'RightKnee'", "]", ",", "\n", "'RightKnee'", ":", "[", "'RightAnkle'", "]", ",", "\n", "'RightAnkle'", ":", "[", "'RightAnkleEndSite'", "]", ",", "\n", "'RightAnkleEndSite'", ":", "[", "]", ",", "\n", "'LeftHip'", ":", "[", "'LeftKnee'", "]", ",", "\n", "'LeftKnee'", ":", "[", "'LeftAnkle'", "]", ",", "\n", "'LeftAnkle'", ":", "[", "'LeftAnkleEndSite'", "]", ",", "\n", "'LeftAnkleEndSite'", ":", "[", "]", ",", "\n", "'Spine'", ":", "[", "'Thorax'", "]", ",", "\n", "'Thorax'", ":", "[", "'Neck'", ",", "'LeftShoulder'", ",", "'RightShoulder'", "]", ",", "\n", "'Neck'", ":", "[", "'HeadEndSite'", "]", ",", "\n", "'HeadEndSite'", ":", "[", "]", ",", "# Head is an end site", "\n", "'LeftShoulder'", ":", "[", "'LeftElbow'", "]", ",", "\n", "'LeftElbow'", ":", "[", "'LeftWrist'", "]", ",", "\n", "'LeftWrist'", ":", "[", "'LeftWristEndSite'", "]", ",", "\n", "'LeftWristEndSite'", ":", "[", "]", ",", "\n", "'RightShoulder'", ":", "[", "'RightElbow'", "]", ",", "\n", "'RightElbow'", ":", "[", "'RightWrist'", "]", ",", "\n", "'RightWrist'", ":", "[", "'RightWristEndSite'", "]", ",", "\n", "'RightWristEndSite'", ":", "[", "]", "\n", "}", "\n", "\n", "self", ".", "parent", "=", "{", "self", ".", "root", ":", "None", "}", "\n", "for", "parent", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "for", "child", "in", "children", ":", "\n", "                ", "self", ".", "parent", "[", "child", "]", "=", "parent", "\n", "\n", "", "", "self", ".", "left_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Left'", "in", "joint", "\n", "]", "\n", "self", ".", "right_joints", "=", "[", "\n", "joint", "for", "joint", "in", "self", ".", "keypoint2index", "\n", "if", "'Right'", "in", "joint", "\n", "]", "\n", "\n", "# human3.6m\u5750\u6807\u7cfb(Z\u5411\u4e0a\uff0cY\u5411\u524d\uff0cX\u5411\u5de6)\u4e0b\u7684T-pose", "\n", "self", ".", "initial_directions", "=", "{", "\n", "'Hip'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "'RightHip'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightKnee'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightAnkle'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'RightAnkleEndSite'", ":", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "'LeftHip'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftKnee'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftAnkle'", ":", "[", "0", ",", "0", ",", "-", "1", "]", ",", "\n", "'LeftAnkleEndSite'", ":", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "'Spine'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Thorax'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'Neck'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'HeadEndSite'", ":", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "'LeftShoulder'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftElbow'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftWrist'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'LeftWristEndSite'", ":", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightShoulder'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightElbow'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightWrist'", ":", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "'RightWristEndSite'", ":", "[", "-", "1", ",", "0", ",", "0", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_initial_offset": [[150, 185], ["h36m_skeleton.H36mSkeleton.initial_directions.items", "stack.pop", "stack.append", "numpy.linalg.norm", "joint.replace().replace", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "max", "numpy.linalg.norm", "joint.replace"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "def", "get_initial_offset", "(", "self", ",", "poses_3d", ")", ":", "\n", "# TODO: RANSAC", "\n", "        ", "bone_lens", "=", "{", "self", ".", "root", ":", "[", "0", "]", "}", "\n", "stack", "=", "[", "self", ".", "root", "]", "\n", "while", "stack", ":", "\n", "            ", "parent", "=", "stack", ".", "pop", "(", ")", "\n", "p_idx", "=", "self", ".", "keypoint2index", "[", "parent", "]", "\n", "for", "child", "in", "self", ".", "children", "[", "parent", "]", ":", "\n", "                ", "if", "'EndSite'", "in", "child", ":", "\n", "                    ", "bone_lens", "[", "child", "]", "=", "0.4", "*", "bone_lens", "[", "parent", "]", "\n", "continue", "\n", "", "stack", ".", "append", "(", "child", ")", "\n", "\n", "c_idx", "=", "self", ".", "keypoint2index", "[", "child", "]", "\n", "bone_lens", "[", "child", "]", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "poses_3d", "[", ":", ",", "p_idx", "]", "-", "poses_3d", "[", ":", ",", "c_idx", "]", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "\n", "", "", "bone_len", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "if", "'Left'", "in", "joint", "or", "'Right'", "in", "joint", ":", "\n", "                ", "base_name", "=", "joint", ".", "replace", "(", "'Left'", ",", "''", ")", ".", "replace", "(", "'Right'", ",", "''", ")", "\n", "left_len", "=", "np", ".", "mean", "(", "bone_lens", "[", "'Left'", "+", "base_name", "]", ")", "\n", "right_len", "=", "np", ".", "mean", "(", "bone_lens", "[", "'Right'", "+", "base_name", "]", ")", "\n", "bone_len", "[", "joint", "]", "=", "(", "left_len", "+", "right_len", ")", "/", "2", "\n", "", "else", ":", "\n", "                ", "bone_len", "[", "joint", "]", "=", "np", ".", "mean", "(", "bone_lens", "[", "joint", "]", ")", "\n", "\n", "", "", "initial_offset", "=", "{", "}", "\n", "for", "joint", ",", "direction", "in", "self", ".", "initial_directions", ".", "items", "(", ")", ":", "\n", "            ", "direction", "=", "np", ".", "array", "(", "direction", ")", "/", "max", "(", "np", ".", "linalg", ".", "norm", "(", "direction", ")", ",", "1e-12", ")", "\n", "initial_offset", "[", "joint", "]", "=", "direction", "*", "bone_len", "[", "joint", "]", "\n", "\n", "", "return", "initial_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_bvh_header": [[187, 208], ["h36m_skeleton.H36mSkeleton.get_initial_offset", "h36m_skeleton.H36mSkeleton.children.items", "bvh_helper.BvhHeader", "bvh_helper.BvhNode"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_initial_offset"], ["", "def", "get_bvh_header", "(", "self", ",", "poses_3d", ")", ":", "\n", "        ", "initial_offset", "=", "self", ".", "get_initial_offset", "(", "poses_3d", ")", "\n", "\n", "nodes", "=", "{", "}", "\n", "for", "joint", "in", "self", ".", "keypoint2index", ":", "\n", "            ", "is_root", "=", "joint", "==", "self", ".", "root", "\n", "is_end_site", "=", "'EndSite'", "in", "joint", "\n", "nodes", "[", "joint", "]", "=", "bvh_helper", ".", "BvhNode", "(", "\n", "name", "=", "joint", ",", "\n", "offset", "=", "initial_offset", "[", "joint", "]", ",", "\n", "rotation_order", "=", "'zxy'", "if", "not", "is_end_site", "else", "''", ",", "\n", "is_root", "=", "is_root", ",", "\n", "is_end_site", "=", "is_end_site", ",", "\n", ")", "\n", "", "for", "joint", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "nodes", "[", "joint", "]", ".", "children", "=", "[", "nodes", "[", "child", "]", "for", "child", "in", "children", "]", "\n", "for", "child", "in", "children", ":", "\n", "                ", "nodes", "[", "child", "]", ".", "parent", "=", "nodes", "[", "joint", "]", "\n", "\n", "", "", "header", "=", "bvh_helper", ".", "BvhHeader", "(", "root", "=", "nodes", "[", "self", ".", "root", "]", ",", "nodes", "=", "nodes", ")", "\n", "return", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.pose2euler": [[210, 302], ["stack.pop", "quats[].copy", "math3d.quat2euler", "numpy.rad2deg", "channel.extend", "channel.extend", "math3d.dcm_from_axis", "math3d.dcm2quat", "quats[].copy", "math3d.quat_divide", "stack.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat2euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm_from_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divide", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "pose2euler", "(", "self", ",", "pose", ",", "header", ")", ":", "\n", "        ", "channel", "=", "[", "]", "\n", "quats", "=", "{", "}", "\n", "eulers", "=", "{", "}", "\n", "stack", "=", "[", "header", ".", "root", "]", "\n", "while", "stack", ":", "\n", "            ", "node", "=", "stack", ".", "pop", "(", ")", "\n", "joint", "=", "node", ".", "name", "\n", "joint_idx", "=", "self", ".", "keypoint2index", "[", "joint", "]", "\n", "\n", "if", "node", ".", "is_root", ":", "\n", "                ", "channel", ".", "extend", "(", "pose", "[", "joint_idx", "]", ")", "\n", "\n", "", "index", "=", "self", ".", "keypoint2index", "\n", "order", "=", "None", "\n", "if", "joint", "==", "'Hip'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHip'", "]", "]", "-", "pose", "[", "index", "[", "'RightHip'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Spine'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "in", "[", "'RightHip'", ",", "'RightKnee'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'Hip'", "]", "]", "-", "pose", "[", "index", "[", "'RightHip'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "in", "[", "'LeftHip'", ",", "'LeftKnee'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'LeftHip'", "]", "]", "-", "pose", "[", "index", "[", "'Hip'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Spine'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHip'", "]", "]", "-", "pose", "[", "index", "[", "'RightHip'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Thorax'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Thorax'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftShoulder'", "]", "]", "-", "pose", "[", "index", "[", "'RightShoulder'", "]", "]", "\n", "y_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'Spine'", "]", "]", "\n", "order", "=", "'zyx'", "\n", "", "elif", "joint", "==", "'Neck'", ":", "\n", "                ", "x_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Thorax'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "z_dir", "=", "pose", "[", "index", "[", "'HeadEndSite'", "]", "]", "-", "pose", "[", "index", "[", "'Thorax'", "]", "]", "\n", "order", "=", "'zxy'", "\n", "", "elif", "joint", "==", "'LeftShoulder'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftElbow'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'LeftElbow'", "]", "]", "-", "pose", "[", "index", "[", "'LeftWrist'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'LeftElbow'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftWrist'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'LeftShoulder'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'RightShoulder'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightElbow'", "]", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'RightElbow'", "]", "]", "-", "pose", "[", "index", "[", "'RightWrist'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "elif", "joint", "==", "'RightElbow'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightWrist'", "]", "]", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightShoulder'", "]", "]", "\n", "z_dir", "=", "None", "\n", "order", "=", "'xzy'", "\n", "", "if", "order", ":", "\n", "                ", "dcm", "=", "math3d", ".", "dcm_from_axis", "(", "x_dir", ",", "y_dir", ",", "z_dir", ",", "order", ")", "\n", "quats", "[", "joint", "]", "=", "math3d", ".", "dcm2quat", "(", "dcm", ")", "\n", "", "else", ":", "\n", "                ", "quats", "[", "joint", "]", "=", "quats", "[", "self", ".", "parent", "[", "joint", "]", "]", ".", "copy", "(", ")", "\n", "\n", "", "local_quat", "=", "quats", "[", "joint", "]", ".", "copy", "(", ")", "\n", "if", "node", ".", "parent", ":", "\n", "                ", "local_quat", "=", "math3d", ".", "quat_divide", "(", "\n", "q", "=", "quats", "[", "joint", "]", ",", "r", "=", "quats", "[", "node", ".", "parent", ".", "name", "]", "\n", ")", "\n", "\n", "", "euler", "=", "math3d", ".", "quat2euler", "(", "\n", "q", "=", "local_quat", ",", "order", "=", "node", ".", "rotation_order", "\n", ")", "\n", "euler", "=", "np", ".", "rad2deg", "(", "euler", ")", "\n", "eulers", "[", "joint", "]", "=", "euler", "\n", "channel", ".", "extend", "(", "euler", ")", "\n", "\n", "for", "child", "in", "node", ".", "children", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "if", "not", "child", ".", "is_end_site", ":", "\n", "                    ", "stack", ".", "append", "(", "child", ")", "\n", "\n", "", "", "", "return", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.pose2euler_SmartBody": [[303, 395], ["stack.pop", "quats[].copy", "math3d.quat2euler", "numpy.rad2deg", "channel.extend", "channel.extend", "math3d.dcm_from_axis", "math3d.dcm2quat", "quats[].copy", "math3d.quat_divide", "stack.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat2euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm_from_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divide", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "pose2euler_SmartBody", "(", "self", ",", "pose", ",", "header", ")", ":", "\n", "        ", "channel", "=", "[", "]", "\n", "quats", "=", "{", "}", "\n", "eulers", "=", "{", "}", "\n", "stack", "=", "[", "header", ".", "root", "]", "\n", "while", "stack", ":", "\n", "            ", "node", "=", "stack", ".", "pop", "(", ")", "\n", "joint", "=", "node", ".", "name", "\n", "joint_idx", "=", "self", ".", "keypoint2index", "[", "joint", "]", "\n", "\n", "if", "node", ".", "is_root", ":", "\n", "                ", "channel", ".", "extend", "(", "pose", "[", "joint_idx", "]", ")", "\n", "\n", "", "index", "=", "self", ".", "keypoint2index", "\n", "order", "=", "None", "\n", "if", "joint", "==", "'Hip'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHip'", "]", "]", "-", "pose", "[", "index", "[", "'RightHip'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Spine'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "in", "[", "'RightHip'", ",", "'RightKnee'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'Hip'", "]", "]", "-", "pose", "[", "index", "[", "'RightHip'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "in", "[", "'LeftHip'", ",", "'LeftKnee'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'LeftHip'", "]", "]", "-", "pose", "[", "index", "[", "'Hip'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "==", "'Spine'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHip'", "]", "]", "-", "pose", "[", "index", "[", "'RightHip'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Thorax'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "==", "'Thorax'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftShoulder'", "]", "]", "-", "pose", "[", "index", "[", "'RightShoulder'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'Spine'", "]", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "==", "'Neck'", ":", "\n", "                ", "x_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Thorax'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'HeadEndSite'", "]", "]", "-", "pose", "[", "index", "[", "'Thorax'", "]", "]", "\n", "order", "=", "'yxz'", "\n", "", "elif", "joint", "==", "'LeftShoulder'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftElbow'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "z_dir", "=", "pose", "[", "index", "[", "'LeftElbow'", "]", "]", "-", "pose", "[", "index", "[", "'LeftWrist'", "]", "]", "\n", "y_dir", "=", "None", "\n", "order", "=", "'xyz'", "\n", "", "elif", "joint", "==", "'LeftElbow'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftWrist'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'LeftShoulder'", "]", "]", "\n", "y_dir", "=", "None", "\n", "order", "=", "'xyz'", "\n", "", "elif", "joint", "==", "'RightShoulder'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightElbow'", "]", "]", "\n", "z_dir", "=", "pose", "[", "index", "[", "'RightElbow'", "]", "]", "-", "pose", "[", "index", "[", "'RightWrist'", "]", "]", "\n", "y_dir", "=", "None", "\n", "order", "=", "'xyz'", "\n", "", "elif", "joint", "==", "'RightElbow'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightWrist'", "]", "]", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightShoulder'", "]", "]", "\n", "y_dir", "=", "None", "\n", "order", "=", "'xyz'", "\n", "", "if", "order", ":", "\n", "                ", "dcm", "=", "math3d", ".", "dcm_from_axis", "(", "x_dir", ",", "y_dir", ",", "z_dir", ",", "order", ")", "\n", "quats", "[", "joint", "]", "=", "math3d", ".", "dcm2quat", "(", "dcm", ")", "\n", "", "else", ":", "\n", "                ", "quats", "[", "joint", "]", "=", "quats", "[", "self", ".", "parent", "[", "joint", "]", "]", ".", "copy", "(", ")", "\n", "\n", "", "local_quat", "=", "quats", "[", "joint", "]", ".", "copy", "(", ")", "\n", "if", "node", ".", "parent", ":", "\n", "                ", "local_quat", "=", "math3d", ".", "quat_divide", "(", "\n", "q", "=", "quats", "[", "joint", "]", ",", "r", "=", "quats", "[", "node", ".", "parent", ".", "name", "]", "\n", ")", "\n", "\n", "", "euler", "=", "math3d", ".", "quat2euler", "(", "\n", "q", "=", "local_quat", ",", "order", "=", "node", ".", "rotation_order", "\n", ")", "\n", "euler", "=", "np", ".", "rad2deg", "(", "euler", ")", "\n", "eulers", "[", "joint", "]", "=", "euler", "\n", "channel", ".", "extend", "(", "euler", ")", "\n", "\n", "for", "child", "in", "node", ".", "children", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "if", "not", "child", ".", "is_end_site", ":", "\n", "                    ", "stack", ".", "append", "(", "child", ")", "\n", "\n", "", "", "", "return", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.pose2euler_SmartBody_Modify": [[396, 488], ["stack.pop", "quats[].copy", "math3d.quat2euler", "numpy.rad2deg", "channel.extend", "channel.extend", "math3d.dcm_from_axis", "math3d.dcm2quat", "quats[].copy", "math3d.quat_divide", "stack.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat2euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm_from_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.dcm2quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.math3d.quat_divide", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "pose2euler_SmartBody_Modify", "(", "self", ",", "pose", ",", "header", ")", ":", "\n", "        ", "channel", "=", "[", "]", "\n", "quats", "=", "{", "}", "\n", "eulers", "=", "{", "}", "\n", "stack", "=", "[", "header", ".", "root", "]", "\n", "while", "stack", ":", "\n", "            ", "node", "=", "stack", ".", "pop", "(", ")", "\n", "joint", "=", "node", ".", "name", "\n", "joint_idx", "=", "self", ".", "keypoint2index", "[", "joint", "]", "\n", "\n", "if", "node", ".", "is_root", ":", "\n", "                ", "channel", ".", "extend", "(", "pose", "[", "joint_idx", "]", ")", "\n", "\n", "", "index", "=", "self", ".", "keypoint2index", "\n", "order", "=", "None", "\n", "if", "joint", "==", "'Hips'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Spine'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "in", "[", "'LeftUpLeg'", ",", "'RightLeg'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'Hips'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "in", "[", "'LeftUpLeg'", ",", "'LeftLeg'", "]", ":", "\n", "                ", "child_idx", "=", "self", ".", "keypoint2index", "[", "node", ".", "children", "[", "0", "]", ".", "name", "]", "\n", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'Hips'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "child_idx", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "==", "'Spine'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftUpLeg'", "]", "]", "-", "pose", "[", "index", "[", "'RightUpLeg'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Spine3'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "==", "'Spine3'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "z_dir", "=", "None", "\n", "y_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'Spine'", "]", "]", "\n", "order", "=", "'yzx'", "\n", "", "elif", "joint", "==", "'Neck'", ":", "\n", "                ", "x_dir", "=", "None", "\n", "z_dir", "=", "pose", "[", "index", "[", "'Spine3'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "y_dir", "=", "pose", "[", "index", "[", "'Head'", "]", "]", "-", "pose", "[", "index", "[", "'Spine3'", "]", "]", "\n", "order", "=", "'yxz'", "\n", "", "elif", "joint", "==", "'LeftArm'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "z_dir", "=", "pose", "[", "index", "[", "'LeftForeArm'", "]", "]", "-", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "\n", "y_dir", "=", "None", "\n", "order", "=", "'xyz'", "\n", "", "elif", "joint", "==", "'LeftForeArm'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "index", "[", "'LeftHand'", "]", "]", "-", "pose", "[", "joint_idx", "]", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'LeftArm'", "]", "]", "\n", "y_dir", "=", "None", "\n", "order", "=", "'xyz'", "\n", "", "elif", "joint", "==", "'RightArm'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "\n", "z_dir", "=", "pose", "[", "index", "[", "'RightForeArm'", "]", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "y_dir", "=", "None", "\n", "order", "=", "'xyz'", "\n", "", "elif", "joint", "==", "'RightForeArm'", ":", "\n", "                ", "x_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightHand'", "]", "]", "\n", "z_dir", "=", "pose", "[", "joint_idx", "]", "-", "pose", "[", "index", "[", "'RightArm'", "]", "]", "\n", "y_dir", "=", "None", "\n", "order", "=", "'xyz'", "\n", "", "if", "order", ":", "\n", "                ", "dcm", "=", "math3d", ".", "dcm_from_axis", "(", "x_dir", ",", "y_dir", ",", "z_dir", ",", "order", ")", "\n", "quats", "[", "joint", "]", "=", "math3d", ".", "dcm2quat", "(", "dcm", ")", "\n", "", "else", ":", "\n", "                ", "quats", "[", "joint", "]", "=", "quats", "[", "self", ".", "parent", "[", "joint", "]", "]", ".", "copy", "(", ")", "\n", "\n", "", "local_quat", "=", "quats", "[", "joint", "]", ".", "copy", "(", ")", "\n", "if", "node", ".", "parent", ":", "\n", "                ", "local_quat", "=", "math3d", ".", "quat_divide", "(", "\n", "q", "=", "quats", "[", "joint", "]", ",", "r", "=", "quats", "[", "node", ".", "parent", ".", "name", "]", "\n", ")", "\n", "\n", "", "euler", "=", "math3d", ".", "quat2euler", "(", "\n", "q", "=", "local_quat", ",", "order", "=", "node", ".", "rotation_order", "\n", ")", "\n", "euler", "=", "np", ".", "rad2deg", "(", "euler", ")", "\n", "eulers", "[", "joint", "]", "=", "euler", "\n", "channel", ".", "extend", "(", "euler", ")", "\n", "\n", "for", "child", "in", "node", ".", "children", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "if", "not", "child", ".", "is_end_site", ":", "\n", "                    ", "stack", ".", "append", "(", "child", ")", "\n", "\n", "", "", "", "return", "channel", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.poses2bvh": [[491, 505], ["enumerate", "h36m_skeleton.H36mSkeleton.get_bvh_header", "channels.append", "bvh_helper.write_bvh", "h36m_skeleton.H36mSkeleton.pose2euler"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.get_bvh_header", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.bvh_helper_SmartBody.write_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.pose2euler"], ["", "def", "poses2bvh", "(", "self", ",", "poses_3d", ",", "header", "=", "None", ",", "output_file", "=", "None", ")", ":", "\n", "        ", "if", "not", "header", ":", "\n", "            ", "header", "=", "self", ".", "get_bvh_header", "(", "poses_3d", ")", "\n", "\n", "", "channels", "=", "[", "]", "\n", "for", "frame", ",", "pose", "in", "enumerate", "(", "poses_3d", ")", ":", "\n", "            ", "channels", ".", "append", "(", "self", ".", "pose2euler", "(", "pose", ",", "header", ")", ")", "\n", "#channels.append(self.pose2euler_SmartBody(pose, header))", "\n", "#channels.append(self.pose2euler_SmartBody_Modify(pose, header))", "\n", "\n", "", "if", "output_file", ":", "\n", "            ", "bvh_helper", ".", "write_bvh", "(", "output_file", ",", "header", ",", "channels", ")", "\n", "\n", "", "return", "channels", ",", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.coco_skeleton.COCOSkeleton.__init__": [[3, 54], ["len", "coco_skeleton.COCOSkeleton.children.items", "coco_skeleton.COCOSkeleton.keypoint2index.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'Neck'", "# median of left shoulder and right shoulder", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Nose'", ":", "0", ",", "\n", "'LeftEye'", ":", "1", ",", "\n", "'RightEye'", ":", "2", ",", "\n", "'LeftEar'", ":", "3", ",", "\n", "'RightEar'", ":", "4", ",", "\n", "'LeftShoulder'", ":", "5", ",", "\n", "'RightShoulder'", ":", "6", ",", "\n", "'LeftElbow'", ":", "7", ",", "\n", "'RightElbow'", ":", "8", ",", "\n", "'LeftWrist'", ":", "9", ",", "\n", "'RightWrist'", ":", "10", ",", "\n", "'LeftHip'", ":", "11", ",", "\n", "'RightHip'", ":", "12", ",", "\n", "'LeftKnee'", ":", "13", ",", "\n", "'RightKnee'", ":", "14", ",", "\n", "'LeftAnkle'", ":", "15", ",", "\n", "'RightAnkle'", ":", "16", ",", "\n", "'Neck'", ":", "17", "\n", "}", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "self", ".", "children", "=", "{", "\n", "'Neck'", ":", "[", "\n", "'Nose'", ",", "'LeftShoulder'", ",", "'RightShoulder'", ",", "'LeftHip'", ",", "'RightHip'", "\n", "]", ",", "\n", "'Nose'", ":", "[", "'LeftEye'", ",", "'RightEye'", "]", ",", "\n", "'LeftEye'", ":", "[", "'LeftEar'", "]", ",", "\n", "'LeftEar'", ":", "[", "]", ",", "\n", "'RightEye'", ":", "[", "'RightEar'", "]", ",", "\n", "'RightEar'", ":", "[", "]", ",", "\n", "'LeftShoulder'", ":", "[", "'LeftElbow'", "]", ",", "\n", "'LeftElbow'", ":", "[", "'LeftWrist'", "]", ",", "\n", "'LeftWrist'", ":", "[", "]", ",", "\n", "'RightShoulder'", ":", "[", "'RightElbow'", "]", ",", "\n", "'RightElbow'", ":", "[", "'RightWrist'", "]", ",", "\n", "'RightWrist'", ":", "[", "]", ",", "\n", "'LeftHip'", ":", "[", "'LeftKnee'", "]", ",", "\n", "'LeftKnee'", ":", "[", "'LeftAnkle'", "]", ",", "\n", "'LeftAnkle'", ":", "[", "]", ",", "\n", "'RightHip'", ":", "[", "'RightKnee'", "]", ",", "\n", "'RightKnee'", ":", "[", "'RightAnkle'", "]", ",", "\n", "'RightAnkle'", ":", "[", "]", "\n", "}", "\n", "self", ".", "parent", "=", "{", "self", ".", "root", ":", "None", "}", "\n", "for", "parent", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "for", "child", "in", "children", ":", "\n", "                ", "self", ".", "parent", "[", "child", "]", "=", "parent", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.openpose_skeleton.OpenPoseSkeleton.__init__": [[3, 66], ["len", "openpose_skeleton.OpenPoseSkeleton.children.items", "openpose_skeleton.OpenPoseSkeleton.keypoint2index.items"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "'MidHip'", "\n", "self", ".", "keypoint2index", "=", "{", "\n", "'Nose'", ":", "0", ",", "\n", "'Neck'", ":", "1", ",", "\n", "'RShoulder'", ":", "2", ",", "\n", "'RElbow'", ":", "3", ",", "\n", "'RWrist'", ":", "4", ",", "\n", "'LShoulder'", ":", "5", ",", "\n", "'LElbow'", ":", "6", ",", "\n", "'LWrist'", ":", "7", ",", "\n", "'MidHip'", ":", "8", ",", "\n", "'RHip'", ":", "9", ",", "\n", "'RKnee'", ":", "10", ",", "\n", "'RAnkle'", ":", "11", ",", "\n", "'LHip'", ":", "12", ",", "\n", "'LKnee'", ":", "13", ",", "\n", "'LAnkle'", ":", "14", ",", "\n", "'REye'", ":", "15", ",", "\n", "'LEye'", ":", "16", ",", "\n", "'REar'", ":", "17", ",", "\n", "'LEar'", ":", "18", ",", "\n", "'LBigToe'", ":", "19", ",", "\n", "'LSmallToe'", ":", "20", ",", "\n", "'LHeel'", ":", "21", ",", "\n", "'RBigToe'", ":", "22", ",", "\n", "'RSmallToe'", ":", "23", ",", "\n", "'RHeel'", ":", "24", "\n", "}", "\n", "self", ".", "index2keypoint", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keypoint2index", ".", "items", "(", ")", "}", "\n", "self", ".", "keypoint_num", "=", "len", "(", "self", ".", "keypoint2index", ")", "\n", "\n", "self", ".", "children", "=", "{", "\n", "'MidHip'", ":", "[", "'Neck'", ",", "'RHip'", ",", "'LHip'", "]", ",", "\n", "'Neck'", ":", "[", "'Nose'", ",", "'RShoulder'", ",", "'LShoulder'", "]", ",", "\n", "'Nose'", ":", "[", "'REye'", ",", "'LEye'", "]", ",", "\n", "'REye'", ":", "[", "'REar'", "]", ",", "\n", "'REar'", ":", "[", "]", ",", "\n", "'LEye'", ":", "[", "'LEar'", "]", ",", "\n", "'LEar'", ":", "[", "]", ",", "\n", "'RShoulder'", ":", "[", "'RElbow'", "]", ",", "\n", "'RElbow'", ":", "[", "'RWrist'", "]", ",", "\n", "'RWrist'", ":", "[", "]", ",", "\n", "'LShoulder'", ":", "[", "'LElbow'", "]", ",", "\n", "'LElbow'", ":", "[", "'LWrist'", "]", ",", "\n", "'LWrist'", ":", "[", "]", ",", "\n", "'RHip'", ":", "[", "'RKnee'", "]", ",", "\n", "'RKnee'", ":", "[", "'RAnkle'", "]", ",", "\n", "'RAnkle'", ":", "[", "'RBigToe'", ",", "'RSmallToe'", ",", "'RHeel'", "]", ",", "\n", "'RBigToe'", ":", "[", "]", ",", "\n", "'RSmallToe'", ":", "[", "]", ",", "\n", "'RHeel'", ":", "[", "]", ",", "\n", "'LHip'", ":", "[", "'LKnee'", "]", ",", "\n", "'LKnee'", ":", "[", "'LAnkle'", "]", ",", "\n", "'LAnkle'", ":", "[", "'LBigToe'", ",", "'LSmallToe'", ",", "'LHeel'", "]", ",", "\n", "'LBigToe'", ":", "[", "]", ",", "\n", "'LSmallToe'", ":", "[", "]", ",", "\n", "'LHeel'", ":", "[", "]", ",", "\n", "}", "\n", "self", ".", "parent", "=", "{", "self", ".", "root", ":", "None", "}", "\n", "for", "parent", ",", "children", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "for", "child", "in", "children", ":", "\n", "                ", "self", ".", "parent", "[", "child", "]", "=", "parent", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.Ax3DPose.__init__": [[124, 158], ["viz.select_dataset", "viz.Ax3DPose.body_members.values", "range", "viz.Ax3DPose.ax.set_xlabel", "viz.Ax3DPose.ax.set_ylabel", "viz.Ax3DPose.ax.set_zlabel", "range", "viz.Ax3DPose.plots_mask.append", "viz.Ax3DPose.ax.plot", "viz.Ax3DPose.ax.plot", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.select_dataset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ",", "ax", ",", "data_set", ",", "lcolor", "=", "\"#3498db\"", ",", "rcolor", "=", "\"#e74c3c\"", ")", ":", "\n", "        ", "\"\"\"\n        Create a 3d pose visualizer that can be updated with new poses.\n\n        Args\n          ax: 3d axis to plot the 3d pose on\n          lcolor: String. Colour for the left part of the body\n          rcolor: String. Colour for the right part of the body\n        \"\"\"", "\n", "\n", "_", ",", "self", ".", "njoints", ",", "self", ".", "body_members", "=", "select_dataset", "(", "data_set", ")", "\n", "\n", "self", ".", "ax", "=", "ax", "\n", "\n", "# Make connection matrix", "\n", "self", ".", "plots", "=", "{", "}", "\n", "for", "member", "in", "self", ".", "body_members", ".", "values", "(", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "member", "[", "'joints'", "]", ")", "-", "1", ")", ":", "\n", "                ", "j_idx_start", "=", "member", "[", "'joints'", "]", "[", "j", "]", "\n", "j_idx_end", "=", "member", "[", "'joints'", "]", "[", "j", "+", "1", "]", "\n", "self", ".", "plots", "[", "(", "j_idx_start", ",", "j_idx_end", ")", "]", "=", "self", ".", "ax", ".", "plot", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "lw", "=", "2", ",", "c", "=", "lcolor", "if", "member", "[", "'side'", "]", "==", "'left'", "else", "rcolor", ")", "\n", "\n", "", "", "self", ".", "plots_mask", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "njoints", ")", ":", "\n", "            ", "self", ".", "plots_mask", ".", "append", "(", "\n", "self", ".", "ax", ".", "plot", "(", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", ",", "lw", "=", "2", ",", "c", "=", "'black'", ",", "markersize", "=", "8", ",", "marker", "=", "'o'", ",", "linestyle", "=", "'dashed'", ",", "\n", "visible", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "ax", ".", "set_xlabel", "(", "\"x\"", ",", "color", "=", "'r'", ")", "\n", "self", ".", "ax", ".", "set_ylabel", "(", "\"y\"", ",", "color", "=", "'r'", ")", "\n", "self", ".", "ax", ".", "set_zlabel", "(", "\"z\"", ",", "color", "=", "'r'", ")", "\n", "\n", "self", ".", "axes_set", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.Ax3DPose.update": [[159, 208], ["numpy.reshape", "viz.Ax3DPose.body_members.values", "range", "range", "viz.Ax3DPose.ax.set_xlim3d", "viz.Ax3DPose.ax.set_zlim3d", "viz.Ax3DPose.ax.set_ylim3d", "numpy.array", "numpy.array", "numpy.array", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "[].set_xdata", "[].set_ydata", "[].set_3d_properties", "len", "[].set_visible", "[].set_visible"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "update", "(", "self", ",", "channels", ",", "mask", "=", "None", ",", "mode", "=", "'3d'", ")", ":", "\n", "        ", "\"\"\"\n        Update the plotted 3d pose.\n\n        Args\n          channels: njoints * 3-dim long np array. The pose to plot.\n          lcolor: String. Colour for the left part of the body.\n          rcolor: String. Colour for the right part of the body.\n        Returns\n          Nothing. Simply updates the axis with the new pose.\n        \"\"\"", "\n", "\n", "assert", "channels", ".", "size", "==", "self", ".", "njoints", "*", "3", ",", "\"channels should have %d entries, it has %d instead\"", "%", "(", "self", ".", "njoints", "*", "3", ",", "channels", ".", "size", ")", "\n", "vals", "=", "np", ".", "reshape", "(", "channels", ",", "(", "self", ".", "njoints", ",", "-", "1", ")", ")", "\n", "\n", "for", "member", "in", "self", ".", "body_members", ".", "values", "(", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "member", "[", "'joints'", "]", ")", "-", "1", ")", ":", "\n", "                ", "j_idx_start", "=", "member", "[", "'joints'", "]", "[", "j", "]", "\n", "j_idx_end", "=", "member", "[", "'joints'", "]", "[", "j", "+", "1", "]", "\n", "x", "=", "np", ".", "array", "(", "[", "vals", "[", "j_idx_start", ",", "0", "]", ",", "vals", "[", "j_idx_end", ",", "0", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "vals", "[", "j_idx_start", ",", "1", "]", ",", "vals", "[", "j_idx_end", ",", "1", "]", "]", ")", "\n", "z", "=", "np", ".", "array", "(", "[", "vals", "[", "j_idx_start", ",", "2", "]", ",", "vals", "[", "j_idx_end", ",", "2", "]", "]", ")", "\n", "self", ".", "plots", "[", "(", "j_idx_start", ",", "j_idx_end", ")", "]", "[", "0", "]", ".", "set_xdata", "(", "x", ")", "\n", "self", ".", "plots", "[", "(", "j_idx_start", ",", "j_idx_end", ")", "]", "[", "0", "]", ".", "set_ydata", "(", "y", ")", "\n", "self", ".", "plots", "[", "(", "j_idx_start", ",", "j_idx_end", ")", "]", "[", "0", "]", ".", "set_3d_properties", "(", "z", ")", "\n", "\n", "", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "njoints", ")", ":", "\n", "                ", "if", "mask", "[", "j", "]", "==", "0", ":", "\n", "                    ", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_visible", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_visible", "(", "False", ")", "\n", "", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_xdata", "(", "vals", "[", "j", ",", "0", "]", ")", "\n", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_ydata", "(", "vals", "[", "j", ",", "1", "]", ")", "\n", "self", ".", "plots_mask", "[", "j", "]", "[", "0", "]", ".", "set_3d_properties", "(", "vals", "[", "j", ",", "2", "]", ")", "\n", "\n", "", "", "if", "not", "self", ".", "axes_set", ":", "\n", "            ", "r", "=", "1000", ";", "\n", "if", "'cam2d'", "in", "mode", ":", "\n", "                ", "xroot", ",", "yroot", ",", "zroot", "=", "0", ",", "0", ",", "0", "\n", "", "else", ":", "\n", "                ", "xroot", ",", "yroot", ",", "zroot", "=", "vals", "[", "0", ",", "0", "]", ",", "vals", "[", "0", ",", "1", "]", ",", "vals", "[", "0", ",", "2", "]", "\n", "", "self", ".", "ax", ".", "set_xlim3d", "(", "[", "-", "r", "+", "xroot", ",", "r", "+", "xroot", "]", ")", "\n", "self", ".", "ax", ".", "set_zlim3d", "(", "[", "-", "r", "+", "zroot", ",", "r", "+", "zroot", "]", ")", "\n", "self", ".", "ax", ".", "set_ylim3d", "(", "[", "-", "r", "+", "yroot", ",", "r", "+", "yroot", "]", ")", "\n", "\n", "# self.ax.set_aspect('equal')", "\n", "# self.axes_set = True   # \u56fa\u5b9a\u70b9\u7684\u753b\u56fe", "\n", "self", ".", "axes_set", "=", "False", "# \u4e2d\u5fc3\u8ddf\u968f\u7684\u753b\u56fe", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.select_dataset": [[101, 121], ["len", "body_members.items", "value.copy", "H36M_USED_JOINTS.index"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["def", "select_dataset", "(", "data_set", ")", ":", "\n", "    ", "if", "data_set", "==", "\"NTURGBD\"", ":", "\n", "        ", "actions_l", "=", "NTU_ACTIONS", "\n", "njoints", "=", "NTU_NJOINTS", "\n", "body_members", "=", "NTU_BODY_MEMBERS", "\n", "", "elif", "data_set", "==", "\"MSRC12\"", ":", "\n", "        ", "actions_l", "=", "MSRC_ACTIONS", "\n", "njoints", "=", "MSRC_NJOINTS", "\n", "body_members", "=", "MSRC_BODY_MEMBERS", "\n", "", "elif", "data_set", "==", "\"Human36\"", ":", "\n", "        ", "actions_l", "=", "H36_ACTIONS", "\n", "njoints", "=", "len", "(", "H36M_USED_JOINTS", ")", "\n", "body_members", "=", "H36_BODY_MEMBERS", "\n", "new_body_members", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "body_members", ".", "items", "(", ")", ":", "\n", "            ", "new_body_members", "[", "key", "]", "=", "value", ".", "copy", "(", ")", "\n", "new_body_members", "[", "key", "]", "[", "'joints'", "]", "=", "[", "H36M_USED_JOINTS", ".", "index", "(", "j", ")", "for", "j", "in", "new_body_members", "[", "key", "]", "[", "'joints'", "]", "]", "\n", "", "body_members", "=", "new_body_members", "\n", "\n", "", "return", "actions_l", ",", "njoints", ",", "body_members", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_gif_rlt": [[210, 227], ["os.makedirs", "viz.plot_seq_gif", "numpy.transpose", "numpy.transpose", "numpy.transpose", "os.path.dirname", "os.path.abspath", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_seq_gif"], ["\n", "", "", "", "def", "plot_gif_rlt", "(", "pose_gt", ",", "pose_recoverd", ",", "pose_mask", ",", "save_path", ")", ":", "\n", "    ", "'''\n    pose_gt: t j 3\n    pose_recoverd:  t j 3\n    pose_mask:  t j 1\n    save_name: xxx.gif\n    '''", "\n", "pose_gt", "=", "np", ".", "transpose", "(", "pose_gt", "[", "np", ".", "newaxis", ",", "...", "]", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "*", "1e3", "\n", "pose_recoverd", "=", "np", ".", "transpose", "(", "pose_recoverd", "[", "np", ".", "newaxis", ",", "...", "]", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "*", "1e3", "\n", "pose_mask", "=", "np", ".", "transpose", "(", "pose_mask", "[", "np", ".", "newaxis", ",", "...", "]", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "[", "0", "]", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "save_path", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "plot_seq_gif", "(", "seqs", "=", "np", ".", "concatenate", "(", "[", "pose_gt", ",", "pose_recoverd", "]", ")", ",", "\n", "labs", "=", "None", ",", "\n", "data_set", "=", "\"Human36\"", ",", "\n", "seq_masks", "=", "pose_mask", ",", "\n", "extra_text", "=", "None", ",", "\n", "save_path", "=", "save_path", ",", "figwidth", "=", "256", "*", "2", ",", "figheight", "=", "256", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.Wrap_plot_seq_gif": [[228, 240], ["os.makedirs", "viz.plot_seq_gif", "numpy.transpose", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_seq_gif"], ["\n", "", "def", "Wrap_plot_seq_gif", "(", "seqs", ",", "labs", ",", "save_path", ",", "figwidth", "=", "256", "*", "2", ",", "figheight", "=", "256", ")", ":", "\n", "    ", "'''\n    segs: n x t x j x 3\n    labs: input_world, input_cam2d, input_cam3d, recoverd_world, RT3D_cam3d, RT2D_cam2d\n    save_name: xxx.gif\n    '''", "\n", "seqs", "=", "np", ".", "transpose", "(", "seqs", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "*", "1e3", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "save_path", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "plot_seq_gif", "(", "seqs", "=", "seqs", ",", "\n", "labs", "=", "labs", ",", "\n", "data_set", "=", "\"Human36\"", ",", "\n", "save_path", "=", "save_path", ",", "figwidth", "=", "figwidth", ",", "figheight", "=", "figheight", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_seq_gif": [[242, 360], ["viz.select_dataset", "numpy.arange", "numpy.array().reshape", "plt.figure", "range", "plt.figure.text", "plt.figure.tight_layout", "plt.figure.subplots_adjust", "matplotlib.animation.FuncAnimation", "plt.close", "matplotlib.use", "plt.figure.add_subplot", "viz.Ax3DPose", "axs.append", "obs.append", "plt.figure.text", "range", "fig.text.set_text", "fig.text.set_color", "matplotlib.animation.FuncAnimation.save", "int", "int", "len", "numpy.array", "fig.add_subplot.view_init", "fig.add_subplot.view_init", "obs[].update", "numpy.arange", "plt.show", "plt.figure.get_figheight", "plt.figure.get_figwidth", "len", "labs[].split", "axs[].set_xlabel", "axs[].title.set_text"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.select_dataset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["\n", "", "def", "_zip_GIFplot_array", "(", "np_lst", ")", ":", "\n", "    ", "\"\"\"\n    for plot function pre-preocess\n    \"\"\"", "\n", "lst", "=", "[", "]", "\n", "for", "item", "in", "np_lst", ":", "\n", "        ", "if", "item", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "# for 3D case", "\n", "            ", "lst", ".", "append", "(", "np", ".", "expand_dims", "(", "item", ",", "0", ")", ")", "\n", "", "elif", "item", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "            ", "tmp2d", "=", "np", ".", "expand_dims", "(", "item", ",", "0", ")", "\n", "tmp2d", "=", "np", ".", "concatenate", "(", "[", "tmp2d", ",", "np", ".", "zeros_like", "(", "tmp2d", ")", "[", "...", ",", "-", "1", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "lst", ".", "append", "(", "tmp2d", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'wrong data get'", "\n", "", "", "return", "np", ".", "concatenate", "(", "lst", ")", "\n", "\n", "", "def", "save_2dpose_gif", "(", "pose2d_seq", ",", "save_name", ")", ":", "\n", "# b j 2", "\n", "    ", "print", "(", "'save gif: {}'", ".", "format", "(", "save_name", ")", ")", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "pose2d_seq", ".", "shape", "[", "0", "]", ",", "10", ")", "\n", "lables", "=", "[", "'input_cam2d'", "]", "\n", "seqs", "=", "_zip_GIFplot_array", "(", "[", "\n", "pose2d_seq", "[", "idx", "]", ",", "\n", "]", ")", "\n", "gif_save_path", "=", "os", ".", "path", ".", "join", "(", "'./results/gif'", ",", "'{}.gif'", ".", "format", "(", "save_name", ")", ")", "\n", "os", ".", "makedirs", "(", "'./results/gif'", ",", "exist_ok", "=", "True", ")", "\n", "Wrap_plot_seq_gif", "(", "seqs", "=", "seqs", ",", "labs", "=", "lables", ",", "save_path", "=", "gif_save_path", ")", "\n", "\n", "\n", "", "def", "save_3dpose_gif", "(", "pose3d_seq", ",", "pose3d_seq2", ",", "save_name", ",", "downsample", "=", "5", ")", ":", "\n", "# b j 3", "\n", "    ", "print", "(", "'save gif: {}'", ".", "format", "(", "save_name", ")", ")", "\n", "idx", "=", "np", ".", "arange", "(", "0", ",", "pose3d_seq", ".", "shape", "[", "0", "]", ",", "downsample", ")", "\n", "lables", "=", "[", "'sktpose_world'", ",", "'sktposeRef_world'", "]", "\n", "seqs", "=", "_zip_GIFplot_array", "(", "[", "\n", "pose3d_seq", "[", "idx", "]", ",", "\n", "pose3d_seq2", "[", "idx", "]", ",", "\n", "]", ")", "\n", "# gif_save_path = os.path.join('./results/gif', '{}.gif'.format(save_name))", "\n", "# os.makedirs('./results/gif', exist_ok=True)", "\n", "Wrap_plot_seq_gif", "(", "seqs", "=", "seqs", ",", "labs", "=", "lables", ",", "save_path", "=", "save_name", ")", "\n", "\n", "\n", "\n", "\n", "", "def", "plot_seq_gif", "(", "seqs", ",", "labs", ",", "data_set", "=", "\"Human36\"", ",", "seq_masks", "=", "None", ",", "extra_text", "=", "None", ",", "save_path", "=", "None", ",", "figwidth", "=", "768", ",", "\n", "figheight", "=", "384", ",", "dpi", "=", "80", ")", ":", "\n", "# kehong: change labs to string list", "\n", "    ", "import", "matplotlib", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "actions_l", ",", "njoints", ",", "body_members", "=", "select_dataset", "(", "data_set", ")", "\n", "\n", "if", "labs", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "labs", ")", "==", "seqs", ".", "shape", "[", "0", "]", ":", "\n", "            ", "labs_mode", "=", "\"multi\"", "\n", "", "else", ":", "\n", "            ", "assert", "labs", ".", "shape", "[", "0", "]", "==", "4", ",", "\"seqs and labs len must match or be a single lab\"", "\n", "labs_mode", "=", "\"single\"", "\n", "\n", "", "", "if", "seq_masks", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "seq_masks", ".", "shape", ")", ">", "3", "and", "seq_masks", ".", "shape", "[", "0", "]", "==", "seqs", ".", "shape", "[", "0", "]", ":", "\n", "            ", "mask_mode", "=", "\"multi\"", "\n", "", "else", ":", "\n", "            ", "assert", "seq_masks", ".", "shape", "[", "0", "]", "==", "njoints", ",", "\"seqs and labs len must match or be a single lab\"", "\n", "mask_mode", "=", "\"single\"", "\n", "\n", "", "", "n_seqs", "=", "seqs", ".", "shape", "[", "0", "]", "\n", "# n_rows = np.int(np.ceil(np.sqrt(n_seqs) * figheight / figwidth))", "\n", "# n_cols = np.int(np.ceil(n_seqs / n_rows))", "\n", "n_rows", "=", "3", "\n", "n_cols", "=", "n_seqs", "//", "3", "+", "1", "\n", "figwidth", "=", "n_cols", "*", "256", "\n", "figheight", "=", "n_rows", "*", "256", "\n", "\n", "# create the index array to plot in cols-wise: re-order the index", "\n", "idex1", "=", "np", ".", "arange", "(", "1", ",", "n_cols", "+", "1", ")", "\n", "idex2", "=", "[", "[", "item", ",", "item", "+", "1", "*", "n_cols", ",", "item", "+", "2", "*", "n_cols", "]", "for", "item", "in", "idex1", "]", "\n", "idex3", "=", "np", ".", "array", "(", "idex2", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# fig = plt.figure(figsize=(figwidth / dpi, figheight / dpi), dpi=dpi)", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "figwidth", "/", "dpi", ",", "figheight", "/", "dpi", ")", ",", "dpi", "=", "dpi", ",", "\n", "tight_layout", "=", "{", "'pad'", ":", "0", ",", "'h_pad'", ":", "0", ",", "'w_pad'", ":", "0", "}", ")", "\n", "\n", "# if labs is not None:", "\n", "#     title = 'Plotting samples from %s dataset' % data_set", "\n", "#     if labs_mode == \"single\":", "\n", "#         # seq_idx, subject, action, plen = labs", "\n", "#         # title += \"\\n action: %s  subject: %d  seq_idx: %d  length: %d\" % \\", "\n", "#         #           (actions_l[action], subject, seq_idx, plen)", "\n", "#         title += \"\\n {}\".format(labs)", "\n", "#     fig.suptitle(title)", "\n", "\n", "axs", "=", "[", "]", "\n", "obs", "=", "[", "]", "\n", "view_dict", "=", "{", "\n", "'cam2d'", ":", "[", "-", "90", ",", "-", "90", "]", ",", "\n", "'cam3d'", ":", "[", "-", "70", ",", "-", "89", "]", ",", "\n", "'world'", ":", "[", "30", ",", "-", "30", "]", "\n", "}", "\n", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "# ax = fig.add_subplot(n_rows, n_cols, i + 1, projection='3d')", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "n_rows", ",", "n_cols", ",", "idex3", "[", "i", "]", ",", "projection", "=", "'3d'", ")", "\n", "if", "labs", "is", "not", "None", ":", "\n", "            ", "view_key", "=", "labs", "[", "i", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "# e.g., cam3d", "\n", "ax", ".", "view_init", "(", "elev", "=", "view_dict", "[", "view_key", "]", "[", "0", "]", ",", "azim", "=", "view_dict", "[", "view_key", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "view_init", "(", "elev", "=", "30", ",", "azim", "=", "-", "30", ")", "\n", "", "ob", "=", "Ax3DPose", "(", "ax", ",", "data_set", ")", "\n", "axs", ".", "append", "(", "ax", ")", "\n", "obs", ".", "append", "(", "ob", ")", "\n", "\n", "", "seq_len", "=", "seqs", ".", "shape", "[", "2", "]", "\n", "frame_counter", "=", "fig", ".", "text", "(", "0.9", "if", "labs", "is", "not", "None", "else", "0.05", ",", "0.1", "if", "labs", "is", "not", "None", "else", "0.95", ",", "'frame: 0'", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_seq_pano": [[362, 472], ["viz.select_dataset", "numpy.int", "numpy.int", "plt.figure", "range", "range", "plt.close", "matplotlib.use", "numpy.ceil", "numpy.ceil", "plt.figure.suptitle", "plt.figure.add_subplot", "fig.add_subplot.view_init", "viz.Ax3DPose", "axs.append", "obs.append", "plt.figure.text", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].set_zlabel", "axs[].set_xlim3d", "axs[].set_zlim3d", "axs[].set_ylim3d", "range", "plt.figure.savefig", "int", "int", "body_members.values", "plt.show", "plt.figure.get_figheight", "plt.figure.get_figwidth", "range", "range", "numpy.sqrt", "numpy.array", "numpy.array", "numpy.array", "axs[].plot", "numpy.array", "numpy.array", "numpy.array", "axs[].plot", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.select_dataset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["        ", "fig", ".", "text", "(", "0.1", ",", "0.1", ",", "extra_text", ")", "\n", "\n", "# Tight layout often produces nice results", "\n", "# but requires the title to be spaced accordingly", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "subplots_adjust", "(", "top", "=", "0.58", ")", "\n", "\n", "def", "update", "(", "frame", ")", ":", "\n", "        ", "if", "frame", ">=", "seq_len", ":", "\n", "            ", "return", "\n", "", "for", "i", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "mask", "=", "None", "\n", "if", "seq_masks", "is", "not", "None", ":", "\n", "                ", "if", "mask_mode", "==", "\"single\"", "and", "i", "==", "0", ":", "\n", "                    ", "mask", "=", "seq_masks", "[", ":", ",", "frame", ",", "0", "]", "\n", "", "elif", "mask_mode", "==", "\"multi\"", ":", "\n", "                    ", "mask", "=", "seq_masks", "[", "i", ",", ":", ",", "frame", ",", "0", "]", "\n", "", "", "obs", "[", "i", "]", ".", "update", "(", "seqs", "[", "i", ",", ":", ",", "frame", ",", ":", "]", ",", "mask", ",", "labs", "[", "i", "]", ")", "\n", "if", "labs", "is", "not", "None", ":", "\n", "                ", "if", "labs_mode", "==", "\"multi\"", ":", "\n", "# seq_idx, subject, action, plen = labs[i, ...]", "\n", "# axs[i].set_xlabel('idx: %d \\n act: %s' % (seq_idx, actions_l[action]))", "\n", "# axs[i].set_title('label: {}'.format(labs[i]), fontsize=20, color='red')", "\n", "                    ", "axs", "[", "i", "]", ".", "title", ".", "set_text", "(", "'\\n\\nlabel: {}'", ".", "format", "(", "labs", "[", "i", "]", ")", ")", "\n", "# axs[i].text(.5, .9, s='label: {}'.format(labs[i]), color='red', fontweight='bold', fontsize=14,", "\n", "#             horizontalalignment='center', transform=axs[i].transAxes)", "\n", "", "", "else", ":", "\n", "                ", "axs", "[", "i", "]", ".", "set_xlabel", "(", "'sequence %d'", "%", "i", ")", "\n", "", "", "frame_counter", ".", "set_text", "(", "'frame: %d'", "%", "frame", ")", "\n", "frame_counter", ".", "set_color", "(", "'red'", "if", "frame", ">", "seq_len", "//", "2", "else", "'blue'", ")", "\n", "\n", "", "anim", "=", "FuncAnimation", "(", "fig", ",", "update", ",", "frames", "=", "np", ".", "arange", "(", "0", ",", "seq_len", "+", "10", ")", ",", "interval", "=", "100", ",", "repeat_delay", "=", "1000", ")", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "anim", ".", "save", "(", "save_path", ",", "dpi", "=", "dpi", ",", "writer", "=", "'imagemagick'", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "", "except", "(", "KeyboardInterrupt", ",", "AttributeError", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "", "fig_size", "=", "(", "int", "(", "fig", ".", "get_figheight", "(", ")", ")", ",", "int", "(", "fig", ".", "get_figwidth", "(", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "return", "fig_size", "\n", "\n", "\n", "# def plot_seq_pano(seqs, labs, data_set, seq_masks=None, extra_text=None, save_path=None, figwidth=768, figheight=768,", "\n", "#                   dpi=80):", "\n", "#     import matplotlib", "\n", "#     if save_path is not None:", "\n", "#         matplotlib.use('Agg')", "\n", "#     import matplotlib.pyplot as plt", "\n", "#", "\n", "#     actions_l, njoints, body_members = select_dataset(data_set)", "\n", "#", "\n", "#     if labs is not None:", "\n", "#         if labs.shape[0] == seqs.shape[0]:", "\n", "#             labs_mode = \"multi\"", "\n", "#         else:", "\n", "#             assert labs.shape[0] == 4, \\", "\n", "#                 \"seqs and labs len must match or be a single lab\"", "\n", "#             labs_mode = \"single\"", "\n", "#", "\n", "#     if seq_masks is not None:", "\n", "#         if seq_masks.shape[0] == seqs.shape[0]:", "\n", "#             mask_mode = \"multi\"", "\n", "#         else:", "\n", "#             assert seq_masks.shape[0] == njoints, \\", "\n", "#                 \"seqs and labs len must match or be a single lab\"", "\n", "#             mask_mode = \"single\"", "\n", "#", "\n", "#     n_seqs = seqs.shape[0]", "\n", "#     n_rows = np.int(np.ceil(np.sqrt(n_seqs) * figheight / figwidth))", "\n", "#     n_cols = np.int(np.ceil(n_seqs / n_rows))", "\n", "#", "\n", "#     fig = plt.figure(figsize=(figwidth / dpi, figheight / dpi), dpi=dpi,", "\n", "#                      tight_layout={'pad': 0, 'h_pad': 0, 'w_pad': 0})", "\n", "#", "\n", "#     if labs is not None:", "\n", "#         title = 'Plotting samples from %s dataset' % data_set", "\n", "#         if labs_mode == \"single\":", "\n", "#             seq_idx, subject, action, plen = labs", "\n", "#             title += \"\\n action: %s  subject: %d  seq_idx: %d  length: %d\" % \\", "\n", "#                      (actions_l[action], subject, seq_idx, plen)", "\n", "#         fig.suptitle(title)", "\n", "#", "\n", "#     axs = []", "\n", "#     obs = []", "\n", "#     for i in range(n_seqs):", "\n", "#         ax = fig.add_subplot(n_rows, n_cols, i + 1, projection='3d')", "\n", "#         ax.view_init(elev=0, azim=-90)", "\n", "#         ob = Ax3DPose(ax, data_set)", "\n", "#         axs.append(ax)", "\n", "#         obs.append(ob)", "\n", "#", "\n", "#     seq_len = seqs.shape[2]", "\n", "#     if extra_text is not None:", "\n", "#         fig.text(0.1, 0.1, extra_text)", "\n", "#", "\n", "#     pano_len = seq_len / 2", "\n", "#     lcolor = \"#3498db\"", "\n", "#     rcolor = \"#e74c3c\"", "\n", "#     for i in range(n_seqs):", "\n", "#         axs[i].set_xlabel(\"time\")", "\n", "#         axs[i].set_ylabel(\"y\")", "\n", "#         axs[i].set_zlabel(\"z\")", "\n", "#         r = 1000", "\n", "#", "\n", "#         yroot, zroot = 0, seqs[i, 0, 0, 2]", "\n", "#         axs[i].set_xlim3d([0, r * pano_len])", "\n", "#         axs[i].set_zlim3d([-r + zroot, r + zroot])", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_seq_frozen": [[474, 594], ["viz.select_dataset", "numpy.int", "numpy.int", "plt.figure", "range", "range", "plt.close", "matplotlib.use", "numpy.ceil", "numpy.ceil", "plt.figure.add_subplot", "fig.add_subplot.view_init", "viz.Ax3DPose", "axs.append", "obs.append", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].set_zlabel", "axs[].set_xticklabels", "axs[].set_yticklabels", "axs[].set_zticklabels", "axs[].set_xlim3d", "axs[].set_ylim3d", "axs[].set_zlim3d", "matplotlib.cm.get_cmap", "range", "plt.figure.savefig", "int", "int", "body_members.values", "plt.show", "plt.figure.get_figheight", "plt.figure.get_figwidth", "range", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "numpy.array", "matplotlib.cm.get_cmap.", "axs[].plot", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.select_dataset", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["#         # axs[i].set_aspect('equal')", "\n", "#", "\n", "#         mask = None", "\n", "#         if seq_masks is not None:", "\n", "#             if mask_mode == \"single\" and i == 0:", "\n", "#                 mask = seq_masks[:, :, 0]", "\n", "#             elif mask_mode == \"multi\":", "\n", "#                 mask = seq_masks[i, :, :, 0]", "\n", "#", "\n", "#         for f in range(seq_len):", "\n", "#             x_hip = seqs[i, 0, f, 0]", "\n", "#             f_pos = (f / seq_len) * pano_len * r", "\n", "#", "\n", "#             for member in body_members.values():", "\n", "#                 for j in range(len(member['joints']) - 1):", "\n", "#                     j_idx_start = member['joints'][j]", "\n", "#                     j_idx_end = member['joints'][j + 1]", "\n", "#                     x = np.array([seqs[i, j_idx_start, f, 0] - x_hip + f_pos,", "\n", "#                                   seqs[i, j_idx_end, f, 0] - x_hip + f_pos])", "\n", "#                     y = np.array([seqs[i, j_idx_start, f, 1], seqs[i, j_idx_end, f, 1]])", "\n", "#                     z = np.array([seqs[i, j_idx_start, f, 2], seqs[i, j_idx_end, f, 2]])", "\n", "#                     axs[i].plot(x, y, z, lw=2, c=lcolor if member['side'] == 'left' else rcolor)", "\n", "#", "\n", "#             if mask is not None:", "\n", "#                 for j in range(njoints):", "\n", "#                     x = np.array([seqs[i, j, f, 0] - x_hip + f_pos])", "\n", "#                     y = np.array([seqs[i, j, f, 1]])", "\n", "#                     z = np.array([seqs[i, j, f, 2]])", "\n", "#                     axs[i].plot(x, y, z, lw=2, c='black', markersize=8,", "\n", "#                                 marker='o', linestyle='dashed',", "\n", "#                                 visible=True if mask[j, f] == 0 else False)", "\n", "#", "\n", "#     if save_path is not None:", "\n", "#         fig.savefig(save_path, dpi=dpi)", "\n", "#     else:", "\n", "#         try:", "\n", "#             plt.show()", "\n", "#         except (KeyboardInterrupt, AttributeError):", "\n", "#             pass", "\n", "#", "\n", "#     fig_size = (int(fig.get_figheight()), int(fig.get_figwidth()))", "\n", "#     plt.close(fig)", "\n", "#", "\n", "#     return fig_size", "\n", "#", "\n", "#", "\n", "# def plot_seq_frozen(seqs, labs, data_set, seq_masks=None, extra_text=None, save_path=None, figwidth=768, figheight=768,", "\n", "#                     dpi=80):", "\n", "#     import matplotlib", "\n", "#     if save_path is not None:", "\n", "#         matplotlib.use('Agg')", "\n", "#     import matplotlib.pyplot as plt", "\n", "#", "\n", "#     actions_l, njoints, body_members = select_dataset(data_set)", "\n", "#", "\n", "#     if labs is not None:", "\n", "#         if labs.shape[0] == seqs.shape[0]:", "\n", "#             labs_mode = \"multi\"", "\n", "#         else:", "\n", "#             assert labs.shape[0] == 4, \\", "\n", "#                 \"seqs and labs len must match or be a single lab\"", "\n", "#             labs_mode = \"single\"", "\n", "#", "\n", "#     if seq_masks is not None:", "\n", "#         if seq_masks.shape[0] == seqs.shape[0]:", "\n", "#             mask_mode = \"multi\"", "\n", "#         else:", "\n", "#             assert seq_masks.shape[0] == njoints, \\", "\n", "#                 \"seqs and labs len must match or be a single lab\"", "\n", "#             mask_mode = \"single\"", "\n", "#", "\n", "#     n_seqs = seqs.shape[0]", "\n", "#     n_rows = np.int(np.ceil(np.sqrt(n_seqs) * figheight / figwidth))", "\n", "#     n_cols = np.int(np.ceil(n_seqs / n_rows))", "\n", "#", "\n", "#     fig = plt.figure(figsize=(figwidth / dpi, figheight / dpi), dpi=dpi,", "\n", "#                      tight_layout={'pad': 0, 'h_pad': 0, 'w_pad': 0})", "\n", "#", "\n", "#     # if labs is not None:", "\n", "#     #     title = 'Plotting samples from %s dataset' % data_set", "\n", "#     #     if labs_mode == \"single\":", "\n", "#     #         seq_idx, subject, action, plen = labs", "\n", "#     #         title += \"\\n action: %s  subject: %d  seq_idx: %d  length: %d\" % \\", "\n", "#     #                   (actions_l[action], subject, seq_idx, plen)", "\n", "#     #     fig.suptitle(title)", "\n", "#", "\n", "#     axs = []", "\n", "#     obs = []", "\n", "#     for i in range(n_seqs):", "\n", "#         ax = fig.add_subplot(n_rows, n_cols, i + 1, projection='3d')", "\n", "#         ax.view_init(elev=30, azim=-30)", "\n", "#         ob = Ax3DPose(ax, data_set)", "\n", "#         axs.append(ax)", "\n", "#         obs.append(ob)", "\n", "#", "\n", "#     seq_len = seqs.shape[2]", "\n", "#     # if extra_text is not None:", "\n", "#     #     fig.text(0.1, 0.1, extra_text)", "\n", "#", "\n", "#     lcolor = \"#3498db\"", "\n", "#     rcolor = \"#e74c3c\"", "\n", "#     for i in range(n_seqs):", "\n", "#         axs[i].set_xlabel(\"\")", "\n", "#         axs[i].set_ylabel(\"\")", "\n", "#         axs[i].set_zlabel(\"\")", "\n", "#         axs[i].set_xticklabels([])", "\n", "#         axs[i].set_yticklabels([])", "\n", "#         axs[i].set_zticklabels([])", "\n", "#         r = 1000", "\n", "#         axs[i].set_xlim3d([np.mean(seqs[:, :, :, 0]) - r, np.mean(seqs[:, :, :, 0]) + r])", "\n", "#         axs[i].set_ylim3d([np.mean(seqs[:, :, :, 1]) - r, np.mean(seqs[:, :, :, 1]) + r])", "\n", "#         axs[i].set_zlim3d([np.mean(seqs[:, :, :, 2]) - r, np.mean(seqs[:, :, :, 2]) + r])", "\n", "#         # axs[i].set_aspect('equal')", "\n", "#", "\n", "#         mask = None", "\n", "#         if seq_masks is not None:", "\n", "#             if mask_mode == \"single\" and i == 0:", "\n", "#                 mask = seq_masks[:, :, 0]", "\n", "#             elif mask_mode == \"multi\":", "\n", "#                 mask = seq_masks[i, :, :, 0]", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.viz.plot_seq_emb": [[596, 601], ["PIL.Image.fromarray", "Image.fromarray.save", "numpy.min", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save"], ["#         #     return ((color_b[0]/255 * f/seq_len) + (color_a[0]/255*(1-(f/seq_len))),", "\n", "#         #             (color_b[1]/255 * f/seq_len) + (color_a[1]/255*(1-(f/seq_len))),", "\n", "#         #             (color_b[2]/255 * f/seq_len) + (color_a[2]/255*(1-(f/seq_len))), 1.0)", "\n", "#         cmap = matplotlib.cm.get_cmap('jet')", "\n", "#", "\n", "#         for f in range(seq_len):", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.logger.create_logger": [[5, 27], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.makedirs", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.dirname"], "function", ["None"], ["def", "create_logger", "(", "filename", ",", "file_handle", "=", "True", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "filename", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# create console handler with a higher log level", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "stream_formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "ch", ".", "setFormatter", "(", "stream_formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "file_handle", ":", "\n", "# create file handler which logs even debug messages", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "exist_ok", "=", "True", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "filename", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s] %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.Sample_from_Pool.__init__": [[258, 262], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_elements", "=", "4096", ")", ":", "\n", "        ", "self", ".", "max_elements", "=", "max_elements", "\n", "self", ".", "cur_elements", "=", "0", "\n", "self", ".", "items", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.Sample_from_Pool.__call__": [[263, 279], ["gan_utils.Sample_from_Pool.items.append", "return_items.append", "numpy.random.ranf", "numpy.random.randint", "copy.copy", "return_items.append", "return_items.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "__call__", "(", "self", ",", "in_items", ")", ":", "\n", "        ", "return_items", "=", "[", "]", "\n", "for", "in_item", "in", "in_items", ":", "\n", "            ", "if", "self", ".", "cur_elements", "<", "self", ".", "max_elements", ":", "\n", "                ", "self", ".", "items", ".", "append", "(", "in_item", ")", "\n", "self", ".", "cur_elements", "=", "self", ".", "cur_elements", "+", "1", "\n", "return_items", ".", "append", "(", "in_item", ")", "\n", "", "else", ":", "\n", "                ", "if", "np", ".", "random", ".", "ranf", "(", ")", ">", "0.5", ":", "\n", "                    ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "max_elements", ")", "\n", "tmp", "=", "copy", ".", "copy", "(", "self", ".", "items", "[", "idx", "]", ")", "\n", "self", ".", "items", "[", "idx", "]", "=", "in_item", "\n", "return_items", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_items", ".", "append", "(", "in_item", ")", "\n", "", "", "", "return", "return_items", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_pose3dbyBoneVec": [[11, 42], ["torch.Tensor().transpose", "torch.Tensor().transpose", "Ctinverse.to.to", "Ctinverse.to.repeat().reshape", "bones.permute().contiguous", "torch.matmul", "torch.matmul", "pose3d.permute().contiguous.permute().contiguous", "torch.Tensor", "torch.Tensor", "Ctinverse.to.repeat", "bones.permute", "pose3d.permute().contiguous.permute", "bones.size"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["def", "get_pose3dbyBoneVec", "(", "bones", ",", "num_joints", "=", "16", ")", ":", "\n", "    ", "'''\n    conver bone vect to pose3d\uff0cis the inverse of get_bone_vector\n    :param bones:\n    :return:\n    '''", "\n", "Ctinverse", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 basement", "\n", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 1", "\n", "[", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 1 2", "\n", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 2 3", "\n", "[", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 4", "\n", "[", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 4 5", "\n", "[", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 5 6", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 7", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 7 8", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 8 9", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 8 10", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 10 11", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# 11 12", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", "]", ",", "# 8 13", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", "]", ",", "# 13 14", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "# 14 15", "\n", "]", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "Ctinverse", "=", "Ctinverse", ".", "to", "(", "bones", ".", "device", ")", "\n", "C", "=", "Ctinverse", ".", "repeat", "(", "[", "bones", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ")", ".", "reshape", "(", "-", "1", ",", "num_joints", "-", "1", ",", "num_joints", ")", "\n", "bonesT", "=", "bones", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "pose3d", "=", "torch", ".", "matmul", "(", "bonesT", ",", "C", ")", "\n", "pose3d", "=", "pose3d", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# back to N x 16 x 3", "\n", "return", "pose3d", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_BoneVecbypose3d": [[44, 74], ["torch.Tensor().transpose", "torch.Tensor().transpose", "Ct.to.to", "Ct.to.repeat().reshape", "x.permute().contiguous", "torch.matmul", "torch.matmul", "B.permute.permute", "torch.Tensor", "torch.Tensor", "Ct.to.repeat", "x.permute", "x.size"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "get_BoneVecbypose3d", "(", "x", ",", "num_joints", "=", "16", ")", ":", "\n", "    ", "'''\n    convert 3D point to bone vector\n    :param x: N x number of joint x 3\n    :return: N x number of bone x 3  number of bone = number of joint - 1\n    '''", "\n", "Ct", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 1", "\n", "[", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 1 2", "\n", "[", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 2 3", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 4", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 4 5", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 5 6", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 7", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 7 8", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 8 9", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 8 10", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 10 11", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# 11 12", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", "]", ",", "# 8 13", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", "]", ",", "# 13 14", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", "]", ",", "# 14 15", "\n", "]", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "Ct", "=", "Ct", ".", "to", "(", "x", ".", "device", ")", "\n", "C", "=", "Ct", ".", "repeat", "(", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ")", ".", "reshape", "(", "-", "1", ",", "num_joints", ",", "num_joints", "-", "1", ")", "\n", "pose3", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "B", "=", "torch", ".", "matmul", "(", "pose3", ",", "C", ")", "\n", "B", "=", "B", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# back to N x 15 x 3", "\n", "return", "B", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_lengthbypose3d": [[76, 84], ["gan_utils.get_BoneVecbypose3d", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_BoneVecbypose3d"], ["", "def", "get_bone_lengthbypose3d", "(", "x", ",", "bone_dim", "=", "2", ")", ":", "\n", "    ", "'''\n    :param bone_dim: dim=2\n    :return:\n    '''", "\n", "bonevec", "=", "get_BoneVecbypose3d", "(", "x", ")", "\n", "bones_length", "=", "torch", ".", "norm", "(", "bonevec", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "return", "bones_length", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_unit_vecbypose3d": [[86, 91], ["gan_utils.get_BoneVecbypose3d", "gan_utils.get_bone_lengthbypose3d"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_BoneVecbypose3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_lengthbypose3d"], ["", "def", "get_bone_unit_vecbypose3d", "(", "x", ",", "num_joints", "=", "16", ",", "bone_dim", "=", "2", ")", ":", "\n", "    ", "bonevec", "=", "get_BoneVecbypose3d", "(", "x", ")", "\n", "bonelength", "=", "get_bone_lengthbypose3d", "(", "x", ")", "\n", "bone_unitvec", "=", "bonevec", "/", "bonelength", "\n", "return", "bone_unitvec", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_leg_ratio": [[95, 105], ["len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "get_leg_ratio", "(", "bl_old", ",", "bl_new", ")", ":", "\n", "    ", "\"\"\"\n    bl: bx15x1\n    \"\"\"", "\n", "assert", "len", "(", "bl_old", ".", "shape", ")", "==", "4", "\n", "assert", "len", "(", "bl_new", ".", "shape", ")", "==", "4", "\n", "leg_len_old", "=", "bl_old", "[", ":", ",", "0", ",", "1", ",", "0", "]", "+", "bl_old", "[", ":", ",", "0", ",", "2", ",", "0", "]", "\n", "leg_len_new", "=", "bl_new", "[", ":", ",", "0", ",", "1", ",", "0", "]", "+", "bl_new", "[", ":", ",", "0", ",", "2", ",", "0", "]", "\n", "leg_ratio", "=", "leg_len_new", "/", "leg_len_old", "\n", "return", "leg_ratio", "# bx1", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.pose_seq_bl_aug": [[106, 127], ["numpy.random.randint", "bl.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "gan_utils.get_bone_unit_vecbypose3d", "gan_utils.get_pose3dbyBoneVec", "gan_utils.get_bone_lengthbypose3d", "gan_utils.get_leg_ratio", "numpy.load().astype", "torch.from_numpy", "torch.from_numpy", "get_bone_lengthbypose3d.unsqueeze", "bl.unsqueeze().unsqueeze.unsqueeze", "bl.unsqueeze().unsqueeze.unsqueeze", "numpy.load"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_unit_vecbypose3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_pose3dbyBoneVec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_lengthbypose3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_leg_ratio", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["", "def", "pose_seq_bl_aug", "(", "pose_seq_in", ",", "kbl", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    kbl: kx15 from S15678 or s911\n    pose_seq: tx16x3\n    \"\"\"", "\n", "if", "not", "kbl", ":", "\n", "        ", "kbl", "=", "np", ".", "load", "(", "'./data/bonelength/bl_15segs_templates_mdifyed.npy'", ")", ".", "astype", "(", "'float32'", ")", "# 15 bl from Evol(cvpr2020).", "\n", "kbl", "=", "torch", ".", "from_numpy", "(", "kbl", ")", "\n", "# size match", "\n", "", "pose_seq", "=", "pose_seq_in", "*", "1.", "\n", "root_pose", "=", "pose_seq", "[", ":", ",", ":", "1", ",", ":", "]", "*", "1.", "\n", "# get BL BV then convert back.", "\n", "i", "=", "np", ".", "random", ".", "randint", "(", "kbl", ".", "shape", "[", "0", "]", ")", "\n", "bl", "=", "kbl", "[", "i", "]", "*", "1.", "\n", "bl", "=", "bl", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "bv", "=", "get_bone_unit_vecbypose3d", "(", "pose_seq", ")", "\n", "out", "=", "get_pose3dbyBoneVec", "(", "bv", "*", "bl", ")", "\n", "bl_old", "=", "get_bone_lengthbypose3d", "(", "pose_seq", ")", "\n", "leg_ratio", "=", "get_leg_ratio", "(", "bl_old", ".", "unsqueeze", "(", "0", ")", ",", "bl", ".", "unsqueeze", "(", "0", ")", ")", "\n", "out", "=", "out", "+", "root_pose", "*", "leg_ratio", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.pose_seq_bl_reset": [[131, 156], ["numpy.array", "torch.from_numpy", "torch.from_numpy", "gan_utils.get_bone_unit_vecbypose3d", "gan_utils.get_pose3dbyBoneVec", "gan_utils.get_bone_lengthbypose3d", "gan_utils.get_leg_ratio", "get_bone_lengthbypose3d.unsqueeze", "torch.from_numpy.unsqueeze"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_unit_vecbypose3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_pose3dbyBoneVec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_lengthbypose3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_leg_ratio"], ["", "def", "pose_seq_bl_reset", "(", "pose_seq_in", ")", ":", "\n", "    ", "\"\"\"\n    pose_seq: tx16x3\n    reset to RL bone length (average of s15678)\n    \"\"\"", "\n", "# size match", "\n", "pose_seq", "=", "pose_seq_in", "*", "1.", "\n", "root_pose", "=", "pose_seq", "[", ":", ",", ":", "1", ",", ":", "]", "*", "1.", "\n", "# bl = np.array([[[0.1332899], [0.4379], [0.447],", "\n", "#                [0.1332899], [0.4379], [0.447],", "\n", "#                [0.24004446], [0.2710998], [0.16976325],", "\n", "#                [0.15269038], [0.2798], [0.25],", "\n", "#                [0.15269038], [0.2798], [0.25]]], dtype='float32')", "\n", "bl", "=", "np", ".", "array", "(", "[", "[", "[", "0.13545841", "]", ",", "[", "0.45170274", "]", ",", "[", "0.4469572", "]", ",", "\n", "[", "0.13545777", "]", ",", "[", "0.45170122", "]", ",", "[", "0.44695726", "]", ",", "\n", "[", "0.2414928", "]", ",", "[", "0.25551477", "]", ",", "[", "0.18441138", "]", ",", "\n", "[", "0.15050778", "]", ",", "[", "0.28198972", "]", ",", "[", "0.24994883", "]", ",", "\n", "[", "0.15050682", "]", ",", "[", "0.28199276", "]", ",", "[", "0.24994786", "]", "]", "]", ",", "dtype", "=", "'float32'", ")", "# bone length used in RL", "\n", "bl", "=", "torch", ".", "from_numpy", "(", "bl", ")", "\n", "bv", "=", "get_bone_unit_vecbypose3d", "(", "pose_seq", ")", "\n", "out", "=", "get_pose3dbyBoneVec", "(", "bv", "*", "bl", ")", "\n", "bl_old", "=", "get_bone_lengthbypose3d", "(", "pose_seq", ")", "\n", "leg_ratio", "=", "get_leg_ratio", "(", "bl_old", ".", "unsqueeze", "(", "0", ")", ",", "bl", ".", "unsqueeze", "(", "0", ")", ")", "\n", "out", "=", "out", "+", "root_pose", "*", "leg_ratio", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.pose_seq_bl_aug_batch": [[159, 190], ["numpy.load().astype", "torch.from_numpy().to", "torch.from_numpy().to", "numpy.random.choice", "bbl.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "gan_utils.get_bone_lengthbypose3d", "get_bone_lengthbypose3d.reshape", "get_leg_ratio().unsqueeze().unsqueeze().unsqueeze", "gan_utils.get_bone_unit_vecbypose3d", "bv.reshape.reshape", "bv_bt.reshape.reshape", "gan_utils.get_pose3dbyBoneVec", "get_pose3dbyBoneVec.reshape", "pose_seq_batch.reshape", "numpy.load", "torch.from_numpy", "torch.from_numpy", "bbl.unsqueeze().unsqueeze.unsqueeze", "get_leg_ratio().unsqueeze().unsqueeze", "torch.from_numpy().to.astype", "get_leg_ratio().unsqueeze", "gan_utils.get_leg_ratio"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_lengthbypose3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_bone_unit_vecbypose3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_pose3dbyBoneVec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_leg_ratio"], ["", "def", "pose_seq_bl_aug_batch", "(", "pose_seq_batch", ")", ":", "\n", "    ", "\"\"\"\n    pose_seq_batch: b x t x j x c\n    \"\"\"", "\n", "b", ",", "t", ",", "j", ",", "c", "=", "pose_seq_batch", ".", "shape", "\n", "# s15678bl  5x15", "\n", "# kbl = np.load('./data/bonelength/hm36s15678_bl_templates.npy')", "\n", "kbl", "=", "np", ".", "load", "(", "'./data/bonelength/bl_15segs_templates_mdifyed.npy'", ")", ".", "astype", "(", "'float32'", ")", "# 15 bl from Evol git.", "\n", "kbl", "=", "torch", ".", "from_numpy", "(", "kbl", ".", "astype", "(", "'float32'", ")", ")", ".", "to", "(", "pose_seq_batch", ".", "device", ")", "\n", "# random b bl", "\n", "bbl_idx", "=", "np", ".", "random", ".", "choice", "(", "kbl", ".", "shape", "[", "0", "]", ",", "b", ")", "\n", "bbl", "=", "kbl", "[", "bbl_idx", "]", "# b x 15", "\n", "bbl", "=", "bbl", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# bx1x15x1", "\n", "# root traj", "\n", "root_pose", "=", "pose_seq_batch", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", "*", "1.", "\n", "pose_seq_bt", "=", "pose_seq_batch", ".", "reshape", "(", "b", "*", "t", ",", "16", ",", "3", ")", "*", "1.", "\n", "# calculate bl", "\n", "bl_old_bt", "=", "get_bone_lengthbypose3d", "(", "pose_seq_bt", ")", "# bt x 15 x 1", "\n", "bl_old", "=", "bl_old_bt", ".", "reshape", "(", "b", ",", "t", ",", "15", ",", "1", ")", "\n", "# calculate ratio", "\n", "leg_ratio", "=", "get_leg_ratio", "(", "bl_old", ",", "bbl", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# bx1x1x1", "\n", "\n", "# change BL", "\n", "bv_bt", "=", "get_bone_unit_vecbypose3d", "(", "pose_seq_bt", ")", "\n", "bv", "=", "bv_bt", ".", "reshape", "(", "b", ",", "t", ",", "15", ",", "3", ")", "\n", "bv", "=", "bv", "*", "bbl", "\n", "bv_bt", "=", "bv", ".", "reshape", "(", "b", "*", "t", ",", "15", ",", "3", ")", "\n", "out_bt", "=", "get_pose3dbyBoneVec", "(", "bv_bt", ")", "\n", "out", "=", "out_bt", ".", "reshape", "(", "b", ",", "t", ",", "16", ",", "3", ")", "\n", "out", "=", "out", "+", "root_pose", "*", "leg_ratio", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.kcs_layer_unit": [[193, 224], ["torch.Tensor().transpose", "torch.Tensor().transpose", "Ct.to.to", "Ct.to.repeat().reshape", "x.reshape.reshape", "x.reshape.permute().contiguous", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "x.reshape.size", "torch.norm", "torch.norm", "torch.matmul.permute", "torch.Tensor", "torch.Tensor", "Ct.to.repeat", "x.reshape.permute", "x.reshape.size"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "kcs_layer_unit", "(", "x", ",", "num_joints", "=", "16", ")", ":", "\n", "# implementation of the Kinematic Chain Space as described in the paper", "\n", "# apply local KCS later. by mask the Ct.", "\n", "# KCS matrix", "\n", "    ", "Ct", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 1", "\n", "[", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 1 2", "\n", "[", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 2 3", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 4", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 4 5", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 5 6", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 0 7", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 7 8", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 8 9", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 8 10", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# 10 11", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# 11 12", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", "]", ",", "# 8 13", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", "]", ",", "# 13 14", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", "]", ",", "# 14 15", "\n", "]", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "Ct", "=", "Ct", ".", "to", "(", "x", ".", "device", ")", "\n", "C", "=", "Ct", ".", "repeat", "(", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ")", ".", "reshape", "(", "-", "1", ",", "num_joints", ",", "num_joints", "-", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "3", ")", "\n", "pose3", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# \u8fd9\u91cc16x3\u53d8\u62103x16\u7684\u8bdd \u5e94\u8be5\u7528permute\u5427", "\n", "B", "=", "torch", ".", "matmul", "(", "pose3", ",", "C", ")", "\n", "B", "=", "B", "/", "torch", ".", "norm", "(", "B", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "Psi", "=", "torch", ".", "matmul", "(", "B", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "B", ")", "\n", "\n", "return", "Psi", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_discriminator_accuracy": [[226, 241], ["prediction.cpu().detach().numpy.cpu().detach().numpy", "label.cpu().detach().numpy.cpu().detach().numpy", "numpy.abs", "numpy.where", "numpy.sum", "prediction.cpu().detach().numpy.cpu().detach", "label.cpu().detach().numpy.cpu().detach", "prediction.cpu().detach().numpy.cpu", "label.cpu().detach().numpy.cpu"], "function", ["None"], ["", "def", "get_discriminator_accuracy", "(", "prediction", ",", "label", ")", ":", "\n", "    ", "'''\n    this is to get discriminator accuracy for tensorboard\n    input is tensor -> convert to numpy\n    :param tensor_in: Bs x Score :: where score > 0.5 mean True.\n    :return:\n    '''", "\n", "# get numpy from tensor", "\n", "prediction", "=", "prediction", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "rlt", "=", "np", ".", "abs", "(", "prediction", "-", "label", ")", "\n", "rlt", "=", "np", ".", "where", "(", "rlt", ">", "0.5", ",", "0", ",", "1", ")", "\n", "num_of_correct", "=", "np", ".", "sum", "(", "rlt", ")", "\n", "accuracy", "=", "num_of_correct", "/", "label", ".", "shape", "[", "0", "]", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff": [[246, 250], ["torch.cat", "torch.cat"], "function", ["None"], ["", "def", "diff", "(", "input", ",", "axis", "=", "None", ")", ":", "\n", "# now is b t j 3", "\n", "    ", "tmp", "=", "input", "[", ":", ",", "1", ":", "]", "-", "input", "[", ":", ",", ":", "-", "1", "]", "\n", "return", "torch", ".", "cat", "(", "[", "tmp", ",", "tmp", "[", ":", ",", "-", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff_range_loss": [[281, 287], ["torch.mean", "torch.mean", "torch.where", "torch.where", "diff_weighted.mean", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "", "def", "diff_range_loss", "(", "a", ",", "b", ",", "std", ")", ":", "\n", "    ", "diff", "=", "(", "torch", ".", "abs", "(", "a", ")", "-", "b", ")", "**", "2", "\n", "diff", "=", "torch", ".", "mean", "(", "diff", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "torch", ".", "where", "(", "diff", ">", "std", "**", "2", ",", "torch", ".", "ones_like", "(", "diff", ")", ",", "torch", ".", "zeros_like", "(", "diff", ")", ")", "\n", "diff_weighted", "=", "diff", "*", "weight", "\n", "return", "diff_weighted", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.btjd2bft": [[290, 301], ["x.permute.view", "x.permute.permute", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "btjd2bft", "(", "x", ")", ":", "\n", "    ", "'''\n    convert bxtxjx3 to b x j x t for 1D conv\n    '''", "\n", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", "\n", "assert", "x", ".", "shape", "[", "-", "2", "]", "==", "16", "\n", "\n", "sz", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.bft2btjd": [[303, 313], ["x.view.permute", "x.view.view", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "bft2btjd", "(", "x", ")", ":", "\n", "    ", "'''\n    convert bxtxjx3 to b x j x t for 1D conv\n    '''", "\n", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "\n", "\n", "sz", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "sz", "[", "0", "]", ",", "sz", "[", "2", "]", ",", "16", ",", "-", "1", ")", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.__init__": [[11, 23], ["None"], "methods", ["None"], ["        ", "return", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ",", "time", ".", "time", "(", ")", "\n", "\n", "", "", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "", "def", "convert_AlphaOpenposeCoco_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.create_summary": [[24, 27], ["tensorboardX.SummaryWriter", "os.path.join"], "methods", ["None"], ["\n", "hip", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "11", "]", "+", "pose_x", "[", ":", ",", "12", "]", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_iter_num_update": [[28, 30], ["None"], "methods", ["None"], ["neck", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "5", "]", "+", "pose_x", "[", ":", ",", "6", "]", ")", "\n", "spine", "=", "0.5", "*", "(", "neck", "+", "hip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_realpose_iter_num_update": [[31, 33], ["None"], "methods", ["None"], ["# head = 0.5 * (pose_x[:, 1] + pose_x[:, 2])", "\n", "\n", "head_0", "=", "pose_x", "[", ":", ",", "0", "]", "# by noise", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_fakepose_iter_num_update": [[34, 36], ["None"], "methods", ["None"], ["head_1", "=", "(", "neck", "-", "hip", ")", "*", "0.5", "+", "neck", "# by backbone", "\n", "head_2", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "1", "]", "+", "pose_x", "[", ":", ",", "2", "]", ")", "# by two eye", "\n", "head_3", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "3", "]", "+", "pose_x", "[", ":", ",", "4", "]", ")", "# by two ear", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_realtraj_iter_num_update": [[37, 39], ["None"], "methods", ["None"], ["head", "=", "head_0", "*", "0.1", "+", "head_1", "*", "0.6", "+", "head_2", "*", "0.1", "+", "head_3", "*", "0.2", "\n", "\n", "combine", "=", "np", ".", "stack", "(", "[", "hip", ",", "spine", ",", "neck", ",", "head", "]", ")", "# 0 1 2 3 ---> 17, 18, 19 ,20", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_train_faketraj_iter_num_update": [[40, 42], ["None"], "methods", ["None"], ["combine", "=", "np", ".", "transpose", "(", "combine", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "combine", "=", "np", ".", "concatenate", "(", "[", "pose_x", ",", "combine", "]", ",", "axis", "=", "1", ")", "\n", "reorder", "=", "[", "17", ",", "12", ",", "14", ",", "16", ",", "11", ",", "13", ",", "15", ",", "18", ",", "19", ",", "20", ",", "5", ",", "7", ",", "9", ",", "6", ",", "8", ",", "10", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_test_iter_num_update": [[43, 45], ["None"], "methods", ["None"], ["standart_16joint", "=", "combine", "[", ":", ",", "reorder", "]", "\n", "return", "standart_16joint", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_test_MPI3D_iter_num_update": [[46, 48], ["None"], "methods", ["None"], ["", "def", "convert_hhr_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_epoch_update": [[49, 51], ["None"], "methods", ["None"], ["\n", "re_order", "=", "[", "3", ",", "12", ",", "14", ",", "16", ",", "11", ",", "13", ",", "15", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "7", ",", "9", ",", "6", ",", "8", ",", "10", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Summary.summary_phase_update": [[52, 54], ["None"], "methods", ["None"], ["standart_17joint", "=", "pose_x", "[", ":", ",", "re_order", "]", "\n", "standart_16joint", "=", "np", ".", "delete", "(", "standart_17joint", ",", "9", ",", "axis", "=", "1", ")", "\n", "# standart_16joint = np.delete(standart_17joint, 10, axis=1)", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.__init__": [[59, 61], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.reset"], ["        ", "from", "joints_detectors", ".", "Alphapose", ".", "gene_npz", "import", "generate_kpts", "as", "alpha_pose", "\n", "return", "alpha_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.reset": [[62, 67], ["None"], "methods", ["None"], ["# def get_hr_pose():", "\n", "#     from joints_detectors.hrnet.pose_estimation.video import generate_kpts as hr_pose", "\n", "#     return hr_pose", "\n", "\n", "", "detector_map", "=", "{", "\n", "'alpha_pose'", ":", "get_alpha_pose", ",", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.AverageMeter.update": [[68, 73], ["None"], "methods", ["None"], ["# 'hr_pose': get_hr_pose,", "\n", "}", "\n", "\n", "assert", "detector_name", "in", "detector_map", ",", "f'2D detector: {detector_name} not implemented yet!'", "\n", "\n", "return", "detector_map", "[", "detector_name", "]", "(", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Sample_from_Pool.__init__": [[162, 166], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.Sample_from_Pool.__call__": [[167, 183], ["utils.Sample_from_Pool.items.append", "return_items.append", "numpy.random.ranf", "numpy.random.ranf", "numpy.random.randint", "numpy.random.randint", "copy.copy", "return_items.append", "return_items.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_scheduler": [[77, 92], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "NotImplementedError", "max", "float"], "function", ["None"], ["    ", "def", "parents", "(", "self", ")", ":", "\n", "# return np.array([-1, 0, 1, 2, 0, 4, 5, 0, 7, 8, 9, 8, 11, 12, 8, 14, 15])", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "8", ",", "10", ",", "11", ",", "8", ",", "13", ",", "14", "]", ")", "\n", "\n", "#   connected son:    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11, 12, 13,14, 15, 16  #### for 16 joint.", "\n", "\n", "", "def", "joints_right", "(", "self", ")", ":", "\n", "# return [1, 2, 3, 9, 10]", "\n", "        ", "return", "[", "1", ",", "2", ",", "3", ",", "13", ",", "14", ",", "15", "]", "\n", "\n", "", "", "import", "cv2", "\n", "import", "moviepy", ".", "video", ".", "io", ".", "ImageSequenceClip", "\n", "\n", "def", "image_sequence_to_video", "(", "img_lst", ",", "output_path", ",", "frame_rate", ")", ":", "\n", "# frame_size = (500, 500)", "\n", "# output_path = 'output_video.mp4'", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.gen_mask": [[109, 133], ["numpy.ones", "numpy.random.randint", "numpy.random.uniform", "set", "numpy.int", "numpy.int", "numpy.int", "numpy.int", "len", "set.add", "list", "list", "numpy.int", "body_members.values", "numpy.random.randint", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.layers.util_models.ConcatTable.add", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.set_grad": [[137, 141], ["net.parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_discriminator_accuracy": [[142, 157], ["prediction.cpu().detach().numpy.cpu().detach().numpy", "label.cpu().detach().numpy.cpu().detach().numpy", "numpy.abs", "numpy.where", "numpy.sum", "prediction.cpu().detach().numpy.cpu().detach", "label.cpu().detach().numpy.cpu().detach", "prediction.cpu().detach().numpy.cpu", "label.cpu().detach().numpy.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.get_contacts": [[187, 206], ["poses.reshape", "numpy.zeros", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.mean", "numpy.mean", "numpy.sort", "numpy.sort"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.check_isNone": [[208, 215], ["torch.isnan().any", "torch.isnan"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.utils.mkd": [[217, 225], ["os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.DoubleConv.__init__": [[10, 27], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "//", "2", "\n", "", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "stride", "=", "1", ",", "padding_mode", "=", "'replicate'", ")", ",", "\n", "# Conv1DPadded(in_channels, mid_channels, kernel_size=kernel_size, padding=padding,", "\n", "#           stride=1, padding_mode='replicate'),", "\n", "nn", ".", "BatchNorm1d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "stride", "=", "stride", ",", "padding_mode", "=", "'replicate'", ")", ",", "\n", "# Conv1DPadded(mid_channels, out_channels, kernel_size=kernel_size, padding=padding,", "\n", "#           stride=stride, padding_mode='replicate'),", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.DoubleConv.forward": [[29, 31], ["conv1d.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.Up.__init__": [[36, 45], ["torch.Module.__init__", "conv1d.DoubleConv", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "conv1d.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "in_channels", "//", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose1d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.Up.forward": [[47, 54], ["conv1d.Up.conv", "torch.functional.interpolate().squeeze", "torch.functional.interpolate().squeeze", "torch.functional.interpolate().squeeze", "conv1d.Up.up", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "conv1d.Up.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.interpolate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.interpolate", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.interpolate"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bilinear", ":", "\n", "            ", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "input", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", ",", "scale_factor", "=", "[", "2", ",", "1", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.OutConv.__init__": [[59, 62], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.OutConv.forward": [[63, 65], ["conv1d.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.OutDoubleConv.__init__": [[69, 79], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "//", "2", "\n", "", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "padding", ",", "stride", "=", "1", ",", "padding_mode", "=", "'replicate'", ")", ",", "\n", "# Conv1DPadded(in_channels, mid_channels, kernel_size=3, padding=padding, stride=1, padding_mode='replicate'),", "\n", "nn", ".", "BatchNorm1d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.OutDoubleConv.forward": [[81, 83], ["conv1d.OutDoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.Conv1dTBlock.__init__": [[93, 111], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "conv1d.Conv1dTBlock.affine_layers.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dims", "=", "[", "128", "]", ",", "ks", "=", "2", ",", "activation", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "tanh", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "relu", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "sigmoid", "\n", "", "elif", "activation", "==", "'leak'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n", "", "self", ".", "out_dim", "=", "hidden_dims", "[", "-", "1", "]", "\n", "self", ".", "affine_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_dim", "=", "input_dim", "\n", "for", "nh", "in", "hidden_dims", ":", "\n", "            ", "self", ".", "affine_layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_dim", ",", "nh", ",", "kernel_size", "=", "ks", ")", ")", "\n", "ks", "=", "1", "# only for first layer.", "\n", "last_dim", "=", "nh", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.Conv1dTBlock.forward": [[112, 116], ["conv1d.Conv1dTBlock.activation", "affine"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "affine", "in", "self", ".", "affine_layers", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "affine", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.Conv1dBlock.__init__": [[118, 136], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "conv1d.Conv1dBlock.affine_layers.append", "conv1d.Conv1dBlock.affine_layers.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dims", "=", "[", "128", "]", ",", "ks", "=", "2", ",", "activation", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "tanh", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "relu", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "sigmoid", "\n", "", "elif", "activation", "==", "'leak'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "", "self", ".", "out_dim", "=", "hidden_dims", "[", "-", "1", "]", "\n", "self", ".", "affine_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_dim", "=", "input_dim", "\n", "for", "nh", "in", "hidden_dims", ":", "\n", "            ", "self", ".", "affine_layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_dim", ",", "nh", ",", "kernel_size", "=", "ks", ")", ")", "\n", "self", ".", "affine_layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "nh", ",", "nh", ",", "kernel_size", "=", "1", ")", ")", "\n", "last_dim", "=", "nh", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_conv1d.conv1d.Conv1dBlock.forward": [[137, 141], ["conv1d.Conv1dBlock.activation", "affine"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "affine", "in", "self", ".", "affine_layers", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "affine", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.DoubleLinear.__init__": [[9, 16], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "linear_size", ")", ":", "\n", "        ", "super", "(", "DoubleLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w1", "=", "nn", ".", "Linear", "(", "linear_size", ",", "linear_size", ")", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm1d", "(", "linear_size", ")", "\n", "self", ".", "w2", "=", "nn", ".", "Linear", "(", "linear_size", ",", "linear_size", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm1d", "(", "linear_size", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.DoubleLinear.forward": [[17, 27], ["virtualCam.DoubleLinear.w1", "virtualCam.DoubleLinear.batch_norm1", "virtualCam.DoubleLinear.relu", "virtualCam.DoubleLinear.w2", "virtualCam.DoubleLinear.batch_norm2", "virtualCam.DoubleLinear.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "w1", "(", "x", ")", "\n", "y", "=", "self", ".", "batch_norm1", "(", "y", ")", "\n", "y", "=", "self", ".", "relu", "(", "y", ")", "\n", "\n", "y", "=", "self", ".", "w2", "(", "y", ")", "\n", "y", "=", "self", ".", "batch_norm2", "(", "y", ")", "\n", "y", "=", "self", ".", "relu", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Dis_Conv1D.__init__": [[30, 37], ["torch.nn.Module.__init__", "poseaugtool.model_conv1d.conv1d.Conv1dBlock", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "ks", "=", "3", ",", "nh_conv1d", "=", "[", "64", ",", "64", "]", ")", ":", "\n", "        ", "super", "(", "Dis_Conv1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nx", "=", "nx", "\n", "self", ".", "nh_conv1d", "=", "nh_conv1d", "# hidden dim of conv1d", "\n", "# encode", "\n", "self", ".", "conv1", "=", "Conv1dBlock", "(", "nx", ",", "nh_conv1d", ",", "activation", "=", "'leak'", ",", "ks", "=", "ks", ")", "\n", "self", ".", "out", "=", "nn", ".", "Conv1d", "(", "nh_conv1d", "[", "-", "1", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Dis_Conv1D.forward": [[38, 53], ["x.view.view.permute().contiguous", "virtualCam.Dis_Conv1D.conv1", "virtualCam.Dis_Conv1D.out", "torch.mean", "len", "x.view.view.view", "x.view.view.permute"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: B x T x jd ---> B x jd x T --> B x nh\n        :return: B\n        '''", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "4", ":", "\n", "            ", "'B x T x 16 x 3'", "\n", "b", ",", "t", ",", "j", ",", "d", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "t", ",", "j", "*", "d", ")", "\n", "\n", "", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# B x T x jd ---> B x jd x T", "\n", "hs_x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "hs_x", "=", "self", ".", "out", "(", "hs_x", ")", "\n", "hs_x", "=", "torch", ".", "mean", "(", "hs_x", ",", "dim", "=", "-", "1", ")", "# B x nh x Ti ---> B x nh", "\n", "return", "hs_x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.G_camera.__init__": [[61, 82], ["torch.nn.Module.__init__", "poseaugtool.model_conv1d.conv1d.Conv1dBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Tanh", "torch.nn.Sigmoid", "virtualCam.DoubleLinear", "torch.nn.Linear", "torch.nn.Tanh", "virtualCam.DoubleLinear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "nx", "=", "48", ",", "ks", "=", "3", ",", "noise_channle", "=", "64", ")", ":", "\n", "        ", "super", "(", "G_camera", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cam_r_range", "=", "args", ".", "cam_r_range", "\n", "self", ".", "cam_t_range", "=", "args", ".", "cam_t_range", "\n", "self", ".", "noise_channle", "=", "noise_channle", "\n", "\n", "nh_conv1d", "=", "[", "64", ",", "64", "]", "# hidden dim of conv1d", "\n", "self", ".", "conv1", "=", "Conv1dBlock", "(", "nx", ",", "nh_conv1d", ",", "activation", "=", "'leak'", ",", "ks", "=", "ks", ")", "\n", "\n", "linear_size", "=", "noise_channle", "+", "nh_conv1d", "[", "-", "1", "]", "\n", "self", ".", "wr", "=", "nn", ".", "Sequential", "(", "\n", "DoubleLinear", "(", "linear_size", ")", ",", "\n", "nn", ".", "Linear", "(", "linear_size", ",", "3", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "wt", "=", "nn", ".", "Sequential", "(", "\n", "DoubleLinear", "(", "linear_size", ")", ",", "\n", "nn", ".", "Linear", "(", "linear_size", ",", "3", ")", ",", "\n", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.G_camera.forward": [[83, 135], ["x.view.view.permute().contiguous", "virtualCam.G_camera.conv1", "torch.mean", "r.view.view.view", "torch.ones_like", "torchgeometry.angle_axis_to_quaternion", "virtualCam.G_camera.wt", "torch.cat", "common.camera.project_to_2d_purelinear", "len", "x.view.view.view", "torch.randn", "virtualCam.G_camera.wr", "r.view.view.size", "torch.randn", "torch.cat", "common.quaternion.qrot", "torch.cat.unsqueeze().unsqueeze().repeat", "x.view.view.permute", "torch.cat", "virtualCam.G_camera.tanh", "virtualCam.G_camera.tanh", "torchgeometry.angle_axis_to_quaternion.unsqueeze().unsqueeze().repeat", "virtualCam.G_camera.sigmoid", "torch.cat.unsqueeze().unsqueeze", "torchgeometry.angle_axis_to_quaternion.unsqueeze().unsqueeze", "torch.cat.unsqueeze", "torchgeometry.angle_axis_to_quaternion.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.project_to_2d_purelinear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "forward", "(", "self", ",", "pose3D", ",", "noise_dict", "=", "None", ")", ":", "\n", "        ", "'''\n        :param pose3D: B x T x j x d, with non-zero root position\n        :return: dict B x T x j x d\n        '''", "\n", "x", "=", "pose3D", "*", "1.", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "4", ":", "\n", "            ", "'B x T x 16 x 3'", "\n", "b", ",", "t", ",", "j", ",", "d", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "t", ",", "j", "*", "d", ")", "\n", "# get the feature for RT", "\n", "", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# B x T x jd ---> B x jd x T", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "# B x c x T", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "-", "1", ")", "# B x nh x Ti ---> B x nh", "\n", "\n", "# caculate R - QR", "\n", "# noise = torch.randn(x.shape[0], self.noise_channle, device=x.device)", "\n", "if", "noise_dict", "is", "None", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "noise_channle", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "noise_dict", "[", "'G-cam-r'", "]", "\n", "\n", "", "r", "=", "self", ".", "wr", "(", "torch", ".", "cat", "(", "(", "x", ",", "noise", ")", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "cam_r_range", "\n", "r", "=", "r", ".", "view", "(", "r", ".", "size", "(", "0", ")", ",", "3", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "r", ")", "\n", "mask", "[", ":", ",", "1", ":", "]", "=", "0", "\n", "r", "=", "r", "*", "mask", "\n", "\n", "qr", "=", "tgm", ".", "angle_axis_to_quaternion", "(", "r", ")", "\n", "\n", "# caculate T", "\n", "# noise = torch.randn(x.shape[0], self.noise_channle, device=x.device)", "\n", "if", "noise_dict", "is", "None", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "noise_channle", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "noise_dict", "[", "'G-cam-t'", "]", "\n", "\n", "", "tmp_t", "=", "self", ".", "wt", "(", "torch", ".", "cat", "(", "(", "x", ",", "noise", ")", ",", "dim", "=", "1", ")", ")", "\n", "tx", "=", "self", ".", "tanh", "(", "tmp_t", "[", ":", ",", ":", "1", "]", ")", "*", "self", ".", "cam_t_range", "*", "1.", "\n", "ty", "=", "self", ".", "tanh", "(", "tmp_t", "[", ":", ",", "1", ":", "2", "]", ")", "*", "self", ".", "cam_t_range", "*", "0.5", "\n", "tz", "=", "self", ".", "sigmoid", "(", "tmp_t", "[", ":", ",", "2", ":", "]", ")", "*", "self", ".", "cam_t_range", "*", "1.", "+", "2.", "\n", "t", "=", "torch", ".", "cat", "(", "[", "tx", ",", "ty", ",", "tz", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# use R T create new 2D-3D pair", "\n", "pose3D_camed", "=", "qrot", "(", "qr", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "*", "pose3D", ".", "shape", "[", "1", ":", "-", "1", "]", ",", "1", ")", ",", "pose3D", ")", "+", "t", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "*", "pose3D", ".", "shape", "[", "1", ":", "-", "1", "]", ",", "1", ")", "\n", "pose2D_camed", "=", "project_to_2d_purelinear", "(", "pose3D_camed", ")", "\n", "return", "{", "\n", "'pose3D_camed'", ":", "pose3D_camed", ",", "\n", "'pose2D_camed'", ":", "pose2D_camed", ",", "\n", "'r'", ":", "r", ",", "\n", "'t'", ":", "t", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.G_camera_v2.__init__": [[142, 163], ["torch.nn.Module.__init__", "poseaugtool.model_conv1d.conv1d.Conv1dBlock", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Tanh", "torch.nn.Sigmoid", "virtualCam.DoubleLinear", "torch.nn.Linear", "torch.nn.Tanh", "virtualCam.DoubleLinear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "nx", "=", "48", ",", "ks", "=", "3", ",", "noise_channle", "=", "64", ")", ":", "\n", "        ", "super", "(", "G_camera_v2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cam_r_range", "=", "args", ".", "cam_r_range", "\n", "self", ".", "cam_t_range", "=", "args", ".", "cam_t_range", "\n", "self", ".", "noise_channle", "=", "noise_channle", "\n", "\n", "nh_conv1d", "=", "[", "64", ",", "64", "]", "# hidden dim of conv1d", "\n", "self", ".", "conv1", "=", "Conv1dBlock", "(", "nx", ",", "nh_conv1d", ",", "activation", "=", "'leak'", ",", "ks", "=", "ks", ")", "\n", "\n", "linear_size", "=", "noise_channle", "+", "nh_conv1d", "[", "-", "1", "]", "\n", "self", ".", "wr", "=", "nn", ".", "Sequential", "(", "\n", "DoubleLinear", "(", "linear_size", ")", ",", "\n", "nn", ".", "Linear", "(", "linear_size", ",", "3", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "wt", "=", "nn", ".", "Sequential", "(", "\n", "DoubleLinear", "(", "linear_size", ")", ",", "\n", "nn", ".", "Linear", "(", "linear_size", ",", "3", ")", ",", "\n", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.G_camera_v2.forward": [[164, 216], ["x.view.view.permute().contiguous", "virtualCam.G_camera_v2.conv1", "torch.mean", "r.view.view.view", "torchgeometry.angle_axis_to_quaternion", "virtualCam.G_camera_v2.wt", "torch.cat", "common.camera.project_to_2d_purelinear", "len", "x.view.view.view", "torch.randn", "virtualCam.G_camera_v2.wr", "r.view.view.size", "torch.randn", "torch.cat", "common.quaternion.qrot", "torch.cat.unsqueeze().unsqueeze().repeat", "x.view.view.permute", "torch.cat", "virtualCam.G_camera_v2.tanh", "virtualCam.G_camera_v2.tanh", "torchgeometry.angle_axis_to_quaternion.unsqueeze().unsqueeze().repeat", "virtualCam.G_camera_v2.sigmoid", "torch.cat.unsqueeze().unsqueeze", "torchgeometry.angle_axis_to_quaternion.unsqueeze().unsqueeze", "torch.cat.unsqueeze", "torchgeometry.angle_axis_to_quaternion.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.camera.project_to_2d_purelinear", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["", "def", "forward", "(", "self", ",", "pose3D", ",", "noise_dict", "=", "None", ")", ":", "\n", "        ", "'''\n        :param pose3D: B x T x j x d, with non-zero root position\n        :return: dict B x T x j x d\n        '''", "\n", "x", "=", "pose3D", "*", "1.", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "4", ":", "\n", "            ", "'B x T x 16 x 3'", "\n", "b", ",", "t", ",", "j", ",", "d", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "t", ",", "j", "*", "d", ")", "\n", "# get the feature for RT", "\n", "", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# B x T x jd ---> B x jd x T", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "# B x c x T", "\n", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "-", "1", ")", "# B x nh x Ti ---> B x nh", "\n", "\n", "# caculate R - QR", "\n", "# noise = torch.randn(x.shape[0], self.noise_channle, device=x.device)", "\n", "if", "noise_dict", "is", "None", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "noise_channle", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "noise_dict", "[", "'G-cam-r'", "]", "\n", "\n", "", "r", "=", "self", ".", "wr", "(", "torch", ".", "cat", "(", "(", "x", ",", "noise", ")", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "cam_r_range", "\n", "r", "=", "r", ".", "view", "(", "r", ".", "size", "(", "0", ")", ",", "3", ")", "\n", "# mask = torch.ones_like(r)", "\n", "# mask[:, 1:] = 0", "\n", "# r = r * mask", "\n", "\n", "qr", "=", "tgm", ".", "angle_axis_to_quaternion", "(", "r", ")", "\n", "\n", "# caculate T", "\n", "# noise = torch.randn(x.shape[0], self.noise_channle, device=x.device)", "\n", "if", "noise_dict", "is", "None", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "noise_channle", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "noise_dict", "[", "'G-cam-t'", "]", "\n", "\n", "", "tmp_t", "=", "self", ".", "wt", "(", "torch", ".", "cat", "(", "(", "x", ",", "noise", ")", ",", "dim", "=", "1", ")", ")", "\n", "tx", "=", "self", ".", "tanh", "(", "tmp_t", "[", ":", ",", ":", "1", "]", ")", "*", "self", ".", "cam_t_range", "*", "1.", "\n", "ty", "=", "self", ".", "tanh", "(", "tmp_t", "[", ":", ",", "1", ":", "2", "]", ")", "*", "self", ".", "cam_t_range", "*", "1.", "# 0922 0.5", "\n", "tz", "=", "self", ".", "sigmoid", "(", "tmp_t", "[", ":", ",", "2", ":", "]", ")", "*", "self", ".", "cam_t_range", "*", "1.", "+", "2.", "\n", "t", "=", "torch", ".", "cat", "(", "[", "tx", ",", "ty", ",", "tz", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# use R T create new 2D-3D pair", "\n", "pose3D_camed", "=", "qrot", "(", "qr", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "*", "pose3D", ".", "shape", "[", "1", ":", "-", "1", "]", ",", "1", ")", ",", "pose3D", ")", "+", "t", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "*", "pose3D", ".", "shape", "[", "1", ":", "-", "1", "]", ",", "1", ")", "\n", "pose2D_camed", "=", "project_to_2d_purelinear", "(", "pose3D_camed", ")", "\n", "return", "{", "\n", "'pose3D_camed'", ":", "pose3D_camed", ",", "\n", "'pose2D_camed'", ":", "pose2D_camed", ",", "\n", "'r'", ":", "r", ",", "\n", "'t'", ":", "t", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pose2DVideoDiscriminator.__init__": [[229, 235], ["torch.nn.Module.__init__", "virtualCam.Dis_Conv1D"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ks", "=", "3", ",", "nh_conv1d", "=", "[", "64", ",", "64", "]", ")", ":", "\n", "        ", "super", "(", "Pose2DVideoDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# only check on bone angle, not bone vector.", "\n", "num_joints", "=", "16", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "self", ".", "traj_path", "=", "Dis_Conv1D", "(", "16", "*", "3", ",", "ks", ",", "nh_conv1d", "=", "nh_conv1d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pose2DVideoDiscriminator.forward": [[236, 258], ["function.gan_utils.diff", "torch.norm", "torch.cat", "virtualCam.Pose2DVideoDiscriminator.traj_path", "inputs_2d.view.view.view", "len", "inputs_2d.view.view.reshape", "torch.norm.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.diff", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "forward", "(", "self", ",", "inputs_2d", ")", ":", "\n", "        ", "'''\n        inputs_2d: B x T x 16 x 2\n        '''", "\n", "if", "len", "(", "inputs_2d", ".", "shape", ")", "==", "3", "and", "inputs_2d", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "num_joints", "*", "2", ":", "\n", "            ", "'B x T x 48'", "\n", "b", ",", "t", ",", "jd", "=", "inputs_2d", ".", "shape", "\n", "inputs_2d", "=", "inputs_2d", ".", "view", "(", "b", ",", "t", ",", "self", ".", "num_joints", ",", "2", ")", "\n", "\n", "", "b", ",", "t", ",", "j", ",", "d", "=", "inputs_2d", ".", "shape", "\n", "assert", "j", "==", "self", ".", "num_joints", "\n", "\n", "#################", "\n", "traj_velocity", "=", "diff", "(", "inputs_2d", ")", "\n", "traj_velocity", "=", "torch", ".", "norm", "(", "traj_velocity", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "\n", "traj_x", "=", "torch", ".", "cat", "(", "[", "inputs_2d", ".", "reshape", "(", "b", ",", "t", ",", "-", "1", ")", ",", "\n", "traj_velocity", ".", "reshape", "(", "b", ",", "t", ",", "-", "1", ")", ",", "\n", "]", ",", "dim", "=", "2", ")", "\n", "\n", "out", "=", "self", ".", "traj_path", "(", "traj_x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pose2DVideoDiscriminatorV2.__init__": [[260, 266], ["torch.nn.Module.__init__", "virtualCam.Dis_Conv1D"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ks", "=", "3", ",", "nh_conv1d", "=", "[", "64", ",", "64", "]", ")", ":", "\n", "        ", "super", "(", "Pose2DVideoDiscriminatorV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# only check on bone angle, not bone vector.", "\n", "num_joints", "=", "16", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "self", ".", "traj_path", "=", "Dis_Conv1D", "(", "16", "*", "2", ",", "ks", ",", "nh_conv1d", "=", "nh_conv1d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pose2DVideoDiscriminatorV2.forward": [[267, 281], ["virtualCam.Pose2DVideoDiscriminatorV2.traj_path", "inputs_2d.view.view.view", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "forward", "(", "self", ",", "inputs_2d", ")", ":", "\n", "        ", "'''\n        inputs_2d: B x T x 16 x 2\n        '''", "\n", "if", "len", "(", "inputs_2d", ".", "shape", ")", "==", "3", "and", "inputs_2d", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "num_joints", "*", "2", ":", "\n", "            ", "'B x T x 48'", "\n", "b", ",", "t", ",", "jd", "=", "inputs_2d", ".", "shape", "\n", "inputs_2d", "=", "inputs_2d", ".", "view", "(", "b", ",", "t", ",", "self", ".", "num_joints", ",", "2", ")", "\n", "\n", "", "b", ",", "t", ",", "j", ",", "d", "=", "inputs_2d", ".", "shape", "\n", "assert", "j", "==", "self", ".", "num_joints", "\n", "#################", "\n", "out", "=", "self", ".", "traj_path", "(", "inputs_2d", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pos2dPairDiscriminator.__init__": [[284, 297], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_joints", "=", "16", ",", "d_ch_num", "=", "64", ")", ":", "# d_ch_num=100 default", "\n", "        ", "super", "(", "Pos2dPairDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Pose path", "\n", "self", ".", "pose_layer_1", "=", "nn", ".", "Linear", "(", "num_joints", "*", "2", "*", "2", ",", "d_ch_num", ")", "\n", "self", ".", "pose_layer_2", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "d_ch_num", ")", "\n", "self", ".", "pose_layer_3", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "d_ch_num", ")", "\n", "# self.pose_layer_4 = nn.Linear(d_ch_num, d_ch_num)", "\n", "\n", "self", ".", "layer_last", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "d_ch_num", ")", "\n", "self", ".", "layer_pred", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pos2dPairDiscriminator.forward": [[298, 315], ["x.contiguous().view.contiguous().view.contiguous().view", "virtualCam.Pos2dPairDiscriminator.relu", "virtualCam.Pos2dPairDiscriminator.relu", "virtualCam.Pos2dPairDiscriminator.relu", "virtualCam.Pos2dPairDiscriminator.layer_pred", "x.contiguous().view.contiguous().view.size", "virtualCam.Pos2dPairDiscriminator.pose_layer_1", "virtualCam.Pos2dPairDiscriminator.pose_layer_2", "virtualCam.Pos2dPairDiscriminator.layer_last", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "\"\"\"\n        input: b x 2 x 16 x 2\n        \"\"\"", "\n", "# Pose path", "\n", "x", "=", "x_in", "[", ":", ",", "[", "0", ",", "-", "1", "]", "]", "*", "1.", "# only use the end frame", "\n", "# x[:, :, [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15]] = x.clone()[:, :, [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15]] * 0.", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "d", "=", "self", ".", "relu", "(", "self", ".", "pose_layer_1", "(", "x", ")", ")", "\n", "d", "=", "self", ".", "relu", "(", "self", ".", "pose_layer_2", "(", "d", ")", ")", "\n", "# d = self.relu(self.pose_layer_3(d) + d)", "\n", "# d = self.pose_layer_4(d)", "\n", "\n", "d_last", "=", "self", ".", "relu", "(", "self", ".", "layer_last", "(", "d", ")", ")", "\n", "d_out", "=", "self", ".", "layer_pred", "(", "d_last", ")", "\n", "\n", "return", "d_out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pos2dPairDiscriminator_v5.__init__": [[318, 335], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_joints", "=", "16", ",", "d_ch_num", "=", "64", ")", ":", "# d_ch_num=100 default", "\n", "        ", "super", "(", "Pos2dPairDiscriminator_v5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Pose path", "\n", "self", ".", "pose_layer_1", "=", "nn", ".", "Linear", "(", "num_joints", "*", "2", "*", "2", ",", "d_ch_num", ")", "\n", "self", ".", "bn_layer_1", "=", "nn", ".", "BatchNorm1d", "(", "d_ch_num", ")", "\n", "self", ".", "pose_layer_2", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "d_ch_num", ")", "\n", "self", ".", "bn_layer_2", "=", "nn", ".", "BatchNorm1d", "(", "d_ch_num", ")", "\n", "# self.pose_layer_3 = nn.Linear(d_ch_num, d_ch_num)", "\n", "# self.bn_layer_3 = nn.BatchNorm1d(d_ch_num)", "\n", "# self.pose_layer_4 = nn.Linear(d_ch_num, d_ch_num)", "\n", "\n", "self", ".", "layer_last", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "d_ch_num", ")", "\n", "self", ".", "bn_last", "=", "nn", ".", "BatchNorm1d", "(", "d_ch_num", ")", "\n", "self", ".", "layer_pred", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pos2dPairDiscriminator_v5.forward": [[336, 353], ["x.contiguous().view.contiguous().view.contiguous().view", "virtualCam.Pos2dPairDiscriminator_v5.relu", "virtualCam.Pos2dPairDiscriminator_v5.relu", "virtualCam.Pos2dPairDiscriminator_v5.relu", "virtualCam.Pos2dPairDiscriminator_v5.layer_pred", "x.contiguous().view.contiguous().view.size", "virtualCam.Pos2dPairDiscriminator_v5.bn_layer_1", "virtualCam.Pos2dPairDiscriminator_v5.bn_layer_2", "virtualCam.Pos2dPairDiscriminator_v5.bn_last", "x.contiguous().view.contiguous().view.contiguous", "virtualCam.Pos2dPairDiscriminator_v5.pose_layer_1", "virtualCam.Pos2dPairDiscriminator_v5.pose_layer_2", "virtualCam.Pos2dPairDiscriminator_v5.layer_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "\"\"\"\n        input: b x 2 x 16 x 2\n        \"\"\"", "\n", "# Pose path", "\n", "x", "=", "x_in", "[", ":", ",", "[", "0", ",", "-", "1", "]", "]", "*", "1.", "# only use the end frame", "\n", "# x[:, :, [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15]] = x.clone()[:, :, [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15]] * 0.", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "d", "=", "self", ".", "relu", "(", "self", ".", "bn_layer_1", "(", "self", ".", "pose_layer_1", "(", "x", ")", ")", ")", "\n", "d", "=", "self", ".", "relu", "(", "self", ".", "bn_layer_2", "(", "self", ".", "pose_layer_2", "(", "d", ")", ")", ")", "\n", "# d = self.relu(self.pose_layer_3(d) + d)", "\n", "# d = self.pose_layer_4(d)", "\n", "\n", "d_last", "=", "self", ".", "relu", "(", "self", ".", "bn_last", "(", "self", ".", "layer_last", "(", "d", ")", ")", ")", "\n", "d_out", "=", "self", ".", "layer_pred", "(", "d_last", ")", "\n", "\n", "return", "d_out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pos2dPairDiscriminator_v6.__init__": [[357, 379], ["torch.nn.Module.__init__", "len", "len", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["    ", "def", "__init__", "(", "self", ",", "num_joints", "=", "16", ",", "d_ch_num", "=", "16", ")", ":", "# d_ch_num=100 default", "\n", "        ", "super", "(", "Pos2dPairDiscriminator_v6", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "joint_idx_toD", "=", "[", "0", "]", "\n", "num_joints", "=", "len", "(", "self", ".", "joint_idx_toD", ")", "\n", "self", ".", "bv_idx_toD", "=", "[", "6", "]", "\n", "num_jbv", "=", "len", "(", "self", ".", "bv_idx_toD", ")", "\n", "\n", "# Pose path", "\n", "self", ".", "pose_layer_1", "=", "nn", ".", "Linear", "(", "(", "num_joints", "+", "num_jbv", ")", "*", "2", "*", "2", ",", "d_ch_num", ")", "\n", "self", ".", "bn_layer_1", "=", "nn", ".", "BatchNorm1d", "(", "d_ch_num", ")", "\n", "self", ".", "pose_layer_2", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "d_ch_num", ")", "\n", "self", ".", "bn_layer_2", "=", "nn", ".", "BatchNorm1d", "(", "d_ch_num", ")", "\n", "# self.pose_layer_3 = nn.Linear(d_ch_num, d_ch_num)", "\n", "# self.bn_layer_3 = nn.BatchNorm1d(d_ch_num)", "\n", "# self.pose_layer_4 = nn.Linear(d_ch_num, d_ch_num)", "\n", "\n", "self", ".", "layer_last", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "d_ch_num", ")", "\n", "self", ".", "bn_last", "=", "nn", ".", "BatchNorm1d", "(", "d_ch_num", ")", "\n", "self", ".", "layer_pred", "=", "nn", ".", "Linear", "(", "d_ch_num", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.model_virtualCam.virtualCam.Pos2dPairDiscriminator_v6.forward": [[380, 401], ["function.gan_utils.get_BoneVecbypose3d().reshape", "torch.cat", "x.contiguous().view.contiguous().view.contiguous().view", "virtualCam.Pos2dPairDiscriminator_v6.relu", "virtualCam.Pos2dPairDiscriminator_v6.relu", "virtualCam.Pos2dPairDiscriminator_v6.relu", "virtualCam.Pos2dPairDiscriminator_v6.layer_pred", "x.contiguous().view.contiguous().view.size", "virtualCam.Pos2dPairDiscriminator_v6.bn_layer_1", "virtualCam.Pos2dPairDiscriminator_v6.bn_layer_2", "virtualCam.Pos2dPairDiscriminator_v6.bn_last", "function.gan_utils.get_BoneVecbypose3d", "x.contiguous().view.contiguous().view.contiguous", "virtualCam.Pos2dPairDiscriminator_v6.pose_layer_1", "virtualCam.Pos2dPairDiscriminator_v6.pose_layer_2", "virtualCam.Pos2dPairDiscriminator_v6.layer_last", "x_in.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.function.gan_utils.get_BoneVecbypose3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "\"\"\"\n        input: b x 2 x 16 x 2\n        \"\"\"", "\n", "# Pose path", "\n", "sz", "=", "x_in", ".", "shape", "\n", "x_bv", "=", "get_BoneVecbypose3d", "(", "x_in", ".", "reshape", "(", "-", "1", ",", "16", ",", "2", ")", ")", ".", "reshape", "(", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ",", "15", ",", "2", ")", "\n", "x1", "=", "x_bv", "[", ":", ",", "[", "0", ",", "-", "1", "]", ",", "self", ".", "bv_idx_toD", "]", "*", "1.", "# only use the end frame", "\n", "x2", "=", "x_in", "[", ":", ",", "[", "0", ",", "-", "1", "]", ",", "self", ".", "joint_idx_toD", "]", "*", "1.", "# only use the end frame", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "2", ")", "\n", "# x[:, :, [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15]] = x.clone()[:, :, [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15]] * 0.", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "d", "=", "self", ".", "relu", "(", "self", ".", "bn_layer_1", "(", "self", ".", "pose_layer_1", "(", "x", ")", ")", ")", "\n", "d", "=", "self", ".", "relu", "(", "self", ".", "bn_layer_2", "(", "self", ".", "pose_layer_2", "(", "d", ")", ")", ")", "\n", "# d = self.relu(self.pose_layer_3(d) + d)", "\n", "# d = self.pose_layer_4(d)", "\n", "\n", "d_last", "=", "self", ".", "relu", "(", "self", ".", "bn_last", "(", "self", ".", "layer_last", "(", "d", ")", ")", ")", "\n", "d_out", "=", "self", ".", "layer_pred", "(", "d_last", ")", "\n", "\n", "return", "d_out", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.merge_dict": [[5, 15], ["dict.items"], "function", ["None"], ["def", "merge_dict", "(", "dict_list", ")", ":", "\n", "    ", "ret", "=", "{", "}", "\n", "for", "dict", "in", "dict_list", ":", "\n", "        ", "for", "key", ",", "value", "in", "dict", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "ret", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "ret", "[", "key", "]", "=", "0.0", "\n", "", "ret", "[", "key", "]", "+=", "value", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.update_dict": [[17, 20], ["new_dict.items"], "function", ["None"], ["", "def", "update_dict", "(", "old_dict", ",", "new_dict", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "new_dict", ".", "items", "(", ")", ":", "\n", "        ", "old_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.ensure_dir": [[22, 33], ["os.path.exists", "print", "os.makedirs", "print"], "function", ["None"], ["", "", "def", "ensure_dir", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    create path by first checking its existence,\n    :param paths: path\n    :return:\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "\"Create folder \"", ",", "path", ")", "\n", "os", ".", "makedirs", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "path", ",", "\" already exists.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.ensure_dirs": [[35, 46], ["isinstance", "py_utils.ensure_dir", "isinstance", "py_utils.ensure_dir"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.ensure_dir", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.ensure_dir"], ["", "", "def", "ensure_dirs", "(", "paths", ")", ":", "\n", "    ", "\"\"\"\n    create paths by first checking their existence\n    :param paths: list of path\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "ensure_dir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "ensure_dir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.write_loss": [[48, 51], ["trainer.loss_dict.items", "train_writer.add_scalar"], "function", ["None"], ["", "", "def", "write_loss", "(", "iterations", ",", "trainer", ",", "train_writer", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "trainer", ".", "loss_dict", ".", "items", "(", ")", ":", "\n", "        ", "train_writer", ".", "add_scalar", "(", "key", ",", "value", ",", "iterations", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.print_composite": [[53, 68], ["isinstance", "print", "data.items", "isinstance", "print", "py_utils.print_composite", "print", "enumerate", "print", "py_utils.print_composite", "isinstance", "isinstance", "print", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.print_composite", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.print_composite", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "", "def", "print_composite", "(", "data", ",", "beg", "=", "\"\"", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "        ", "print", "(", "f'{beg} dict, size = {len(data)}'", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f'  {beg}{key}:'", ")", "\n", "print_composite", "(", "value", ",", "beg", "+", "\"    \"", ")", "\n", "", "", "elif", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "print", "(", "f'{beg} list, len = {len(data)}'", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "print", "(", "f'  {beg}item {i}'", ")", "\n", "print_composite", "(", "item", ",", "beg", "+", "\"    \"", ")", "\n", "", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", "or", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "print", "(", "f'{beg} array of size {data.shape}'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'{beg} {data}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.to_float": [[70, 77], ["isinstance", "isinstance", "float.to().numpy", "len", "float", "float.to", "float.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "", "def", "to_float", "(", "item", ")", ":", "\n", "    ", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "item", "=", "item", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "item", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "len", "(", "item", ".", "reshape", "(", "-", "1", ")", ")", "==", "1", ":", "\n", "            ", "item", "=", "float", "(", "item", ")", "\n", "", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.mkd": [[79, 87], ["os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "False", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.count_param": [[88, 94], ["model.parameters", "print", "parameter.numel"], "function", ["None"], ["", "", "def", "count_param", "(", "model", ",", "name", ")", ":", "\n", "# print param number size.", "\n", "    ", "model_params", "=", "0", "\n", "for", "parameter", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "model_params", "+=", "parameter", ".", "numel", "(", ")", "\n", "", "print", "(", "'INFO: Trainable parameter count for model {} is:{}'", ".", "format", "(", "name", ",", "model_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.flip_bvh.flip_bvh": [[6, 33], ["open", "open", "os.path.join", "os.path.join", "filename.replace", "open.write", "numpy.reshape", "quaternion.euler_to_quaternion", "line[].copy", "numpy.reshape", "open.write", "[].split", "numpy.array", "str", "quaternion.qeuler_np", "str", "float", "np.reshape.split"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.euler_to_quaternion", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qeuler_np"], ["def", "flip_bvh", "(", "filename", ")", ":", "\n", "    ", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ".", "replace", "(", "'.bvh'", ",", "'_flip.bvh'", ")", ")", ",", "'w'", ")", "\n", "cnt", "=", "0", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ",", "'r'", ")", ":", "\n", "        ", "cnt", "+=", "1", "\n", "if", "cnt", "<=", "134", ":", "\n", "            ", "fout", ".", "write", "(", "line", ")", "\n", "", "else", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ".", "split", "(", "' '", ")", "[", ":", "69", "]", "\n", "line", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "line", "]", ")", ",", "[", "23", ",", "3", "]", ")", "\n", "line", "[", "0", ",", "2", "]", "*=", "-", "1.0", "\n", "\n", "quat", "=", "euler_to_quaternion", "(", "line", "[", "1", ":", "]", "/", "180.0", "*", "np", ".", "pi", ",", "'zyx'", ")", "\n", "quat", "[", ":", ",", "0", "]", "*=", "-", "1.0", "\n", "quat", "[", ":", ",", "1", "]", "*=", "-", "1.0", "\n", "line", "[", "1", ":", "]", "=", "qeuler_np", "(", "quat", ",", "'zyx'", ")", "/", "np", ".", "pi", "*", "180.0", "\n", "\n", "left_idx", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "15", ",", "16", ",", "17", ",", "18", "]", "\n", "right_idx", "=", "[", "6", ",", "7", ",", "8", ",", "9", ",", "19", ",", "20", ",", "21", ",", "22", "]", "\n", "line", "[", "left_idx", "+", "right_idx", "]", "=", "line", "[", "right_idx", "+", "left_idx", "]", ".", "copy", "(", ")", "\n", "\n", "line", "=", "np", ".", "reshape", "(", "line", ",", "(", "69", ",", ")", ")", "\n", "new_line", "=", "''", "\n", "for", "s", "in", "line", "[", ":", "-", "1", "]", ":", "\n", "                ", "new_line", "+=", "(", "str", "(", "s", ")", "+", "' '", ")", "\n", "", "new_line", "+=", "(", "str", "(", "line", "[", "-", "1", "]", ")", "+", "'\\n'", ")", "\n", "fout", ".", "write", "(", "new_line", ")", "\n", "", "", "", "for", "filename", "in", "os", ".", "listdir", "(", "root", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.ribpose2bvh.ribpose2bvh": [[28, 38], ["ribpose2bvh.write_standard_bvh_multi_process"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.write_standard_bvh_multi_process"], ["def", "ribpose2bvh", "(", "take_list", ",", "expert_dict", ")", ":", "\n", "##########################################################", "\n", "# save .", "\n", "# result_dict = {}", "\n", "    ", "takes", "=", "take_list", "\n", "result_all_dict", "=", "expert_dict", "\n", "\n", "write_standard_bvh_multi_process", "(", "takes", ",", "result_all_dict", ")", "\n", "##########################################################", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.ribpose2bvh.write_standard_bvh_multi_process": [[39, 71], ["range", "numpy.copy().reshape", "ribpose2bvh.write_standard_bvh", "math.ceil", "range", "print", "multiprocessing.Process", "p_lst.append", "multiprocessing.Process.start", "multiprocessing.Process.join", "numpy.copy", "len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.write_standard_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "write_standard_bvh_multi_process", "(", "takes", ",", "result_all_dict", ")", ":", "\n", "\n", "    ", "def", "wrap_write_standard_bvh", "(", "take", ")", ":", "\n", "        ", "predicted_3d_wpos_withroot", "=", "np", ".", "copy", "(", "result_all_dict", "[", "take", "]", "[", "'skt_wpos'", "]", ")", ".", "reshape", "(", "-", "1", ",", "16", ",", "3", ")", "\n", "# ground_z = np.min(predicted_3d_wpos_withroot[:, :, -1:])", "\n", "# ground_z = np.min(predicted_3d_wpos_withroot[:, :, -1:], axis=(1,2), keepdims=True)", "\n", "# predicted_3d_wpos_withroot[:, :, -1:] = predicted_3d_wpos_withroot[:, :, -1:] - ground_z", "\n", "\n", "bvhfileName", "=", "'{}/{}.bvh'", ".", "format", "(", "traj_save_path", ",", "take", ")", "\n", "write_standard_bvh", "(", "bvhfileName", ",", "predicted_3d_wpos_withroot", ")", "\n", "\n", "# start", "\n", "", "task_lst", "=", "takes", "\n", "# num_threads = args.num_threads", "\n", "\n", "for", "ep", "in", "range", "(", "math", ".", "ceil", "(", "len", "(", "task_lst", ")", "/", "num_threads", ")", ")", ":", "\n", "\n", "        ", "p_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_threads", ")", ":", "\n", "            ", "idx", "=", "ep", "*", "num_threads", "+", "i", "\n", "if", "idx", ">=", "len", "(", "task_lst", ")", ":", "\n", "                ", "break", "\n", "", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "wrap_write_standard_bvh", ",", "args", "=", "(", "task_lst", "[", "idx", "]", ",", ")", ")", "\n", "p_lst", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "p_lst", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "for", "p", "in", "p_lst", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "", "print", "(", "'complete ep:'", ",", "ep", ")", "\n", "# end.", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.ribpose2bvh.write_standard_bvh": [[73, 93], ["bvh_skeleton.camera.cam2world_sktpos", "ribpose2bvh.mkd", "bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter", "humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint", "bvh_skeleton.humanoid_1205_skeleton.H36mSkeleton", "humanoid_1205_skeleton.H36mSkeleton.poses2bvh"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.camera.cam2world_sktpos", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_1205_skeleton.SkeletonConverter.convert_to_21joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.poses2bvh"], ["", "", "def", "write_standard_bvh", "(", "bvhfileName", ",", "prediction3dpoint", ")", ":", "\n", "    ", "'''\n    :param outbvhfilepath:\n    :param prediction3dpoint:\n    :return:\n    '''", "\n", "\n", "#", "\n", "# prediction3dpoint = world2cam_sktpos(prediction3dpoint) * -1", "\n", "prediction3dpoint", "=", "cam2world_sktpos", "(", "prediction3dpoint", "*", "-", "1", ")", "\n", "\n", "\n", "\n", "mkd", "(", "bvhfileName", ")", "\n", "# 16 joint 21 joint", "\n", "Converter", "=", "humanoid_1205_skeleton", ".", "SkeletonConverter", "(", ")", "\n", "prediction3dpoint", "=", "Converter", ".", "convert_to_21joint", "(", "prediction3dpoint", ")", "\n", "#  bvh .", "\n", "human36m_skeleton", "=", "humanoid_1205_skeleton", ".", "H36mSkeleton", "(", ")", "\n", "human36m_skeleton", ".", "poses2bvh", "(", "prediction3dpoint", ",", "output_file", "=", "bvhfileName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.ribpose2bvh.mkd": [[96, 104], ["os.path.abspath", "os.path.abspath", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.LaFan.LaFan1.__init__": [[12, 32], ["LaFan.LaFan1.load_data", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.LaFan.LaFan1.load_data"], ["    ", "def", "__init__", "(", "self", ",", "bvh_path", ",", "train", "=", "False", ",", "seq_len", "=", "50", ",", "offset", "=", "10", ",", "debug", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            bvh_path (string): Path to the bvh files.\n            seq_len (int): The max len of the sequence for interpolation.\n        \"\"\"", "\n", "if", "train", ":", "\n", "            ", "self", ".", "actors", "=", "[", "'h36m_take_{:0>3d}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "600", ")", "]", "[", ":", "550", "]", "\n", "\n", "", "else", ":", "\n", "# self.actors = ['subject5']", "\n", "            ", "self", ".", "actors", "=", "[", "'h36m_take_{:0>3d}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "600", ")", "]", "[", "550", ":", "]", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "debug", "=", "debug", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "actors", "=", "[", "'h36m_take_{:0>3d}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "600", ")", "]", "[", ":", "2", "]", "\n", "", "self", ".", "offset", "=", "offset", "\n", "self", ".", "data", "=", "self", ".", "load_data", "(", "bvh_path", ")", "\n", "self", ".", "cur_seq_length", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.LaFan.LaFan1.load_data": [[34, 78], ["print", "lafan1.extract.get_lafan1_set", "lafan1.utils.quat_fk", "numpy.mean", "numpy.std", "torch.from_numpy", "torch.from_numpy", "numpy.concatenate", "print", "x_glbl.reshape().transpose", "x_glbl.reshape().transpose", "x_glbl.reshape", "x_glbl.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.get_lafan1_set", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_fk", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.std", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "load_data", "(", "self", ",", "bvh_path", ")", ":", "\n", "# Get test-set for windows of 65 frames, offset by 40 frames", "\n", "        ", "print", "(", "'Building the data set...'", ")", "\n", "X", ",", "Q", ",", "parents", ",", "contacts_l", ",", "contacts_r", "=", "extract", ".", "get_lafan1_set", "(", "bvh_path", ",", "self", ".", "actors", ",", "window", "=", "self", ".", "seq_len", ",", "offset", "=", "self", ".", "offset", ",", "debug", "=", "self", ".", "debug", ")", "\n", "# Global representation:", "\n", "q_glbl", ",", "x_glbl", "=", "utils", ".", "quat_fk", "(", "Q", ",", "X", ",", "parents", ")", "\n", "\n", "# if self.train:", "\n", "# Global positions stats:", "\n", "x_mean", "=", "np", ".", "mean", "(", "x_glbl", ".", "reshape", "(", "[", "x_glbl", ".", "shape", "[", "0", "]", ",", "x_glbl", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", ",", "axis", "=", "(", "0", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "x_std", "=", "np", ".", "std", "(", "x_glbl", ".", "reshape", "(", "[", "x_glbl", ".", "shape", "[", "0", "]", ",", "x_glbl", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", ",", "axis", "=", "(", "0", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "self", ".", "x_mean", "=", "torch", ".", "from_numpy", "(", "x_mean", ")", "\n", "self", ".", "x_std", "=", "torch", ".", "from_numpy", "(", "x_std", ")", "\n", "\n", "input_", "=", "{", "}", "\n", "# The following features are inputs:", "\n", "# 1. local quaternion vector (J * 4d)", "\n", "input_", "[", "'local_q'", "]", "=", "Q", "\n", "\n", "# 2. global root velocity vector (3d)", "\n", "input_", "[", "'root_v'", "]", "=", "x_glbl", "[", ":", ",", "1", ":", ",", "0", ",", ":", "]", "-", "x_glbl", "[", ":", ",", ":", "-", "1", ",", "0", ",", ":", "]", "\n", "\n", "# 3. contact information vector (4d)", "\n", "input_", "[", "'contact'", "]", "=", "np", ".", "concatenate", "(", "[", "contacts_l", ",", "contacts_r", "]", ",", "-", "1", ")", "\n", "\n", "# 4. global root position offset (?d)", "\n", "input_", "[", "'root_p_offset'", "]", "=", "x_glbl", "[", ":", ",", "-", "1", ",", "0", ",", ":", "]", "\n", "\n", "# 5. local quaternion offset (?d)", "\n", "input_", "[", "'local_q_offset'", "]", "=", "Q", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "\n", "\n", "# 6. target ", "\n", "input_", "[", "'target'", "]", "=", "Q", "[", ":", ",", "-", "1", ",", ":", ",", ":", "]", "\n", "\n", "# 7. root pos", "\n", "input_", "[", "'root_p'", "]", "=", "x_glbl", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "\n", "# 8. X", "\n", "input_", "[", "'X'", "]", "=", "x_glbl", "[", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "print", "(", "'Nb of sequences : {}\\n'", ".", "format", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "return", "input_", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.LaFan.LaFan1.__len__": [[79, 81], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", "[", "'local_q'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.LaFan.LaFan1.__getitem__": [[82, 108], ["[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx_", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "idx_", "=", "0", "\n", "", "else", ":", "\n", "            ", "idx_", "=", "idx", "\n", "", "sample", "=", "{", "}", "\n", "sample", "[", "'local_q'", "]", "=", "self", ".", "data", "[", "'local_q'", "]", "[", "idx_", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "'root_v'", "]", "=", "self", ".", "data", "[", "'root_v'", "]", "[", "idx_", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "'contact'", "]", "=", "self", ".", "data", "[", "'contact'", "]", "[", "idx_", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "'root_p_offset'", "]", "=", "self", ".", "data", "[", "'root_p_offset'", "]", "[", "idx_", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "'local_q_offset'", "]", "=", "self", ".", "data", "[", "'local_q_offset'", "]", "[", "idx_", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "'target'", "]", "=", "self", ".", "data", "[", "'target'", "]", "[", "idx_", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "'root_p'", "]", "=", "self", ".", "data", "[", "'root_p'", "]", "[", "idx_", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "'X'", "]", "=", "self", ".", "data", "[", "'X'", "]", "[", "idx_", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# sample['local_q_aug'] = self.data['local_q'][idx_].astype(np.float32)", "\n", "# sample['root_v_aug'] = self.data['root_v'][idx_].astype(np.float32)", "\n", "# sample['contact_aug'] = self.data['contact'][idx_].astype(np.float32)", "\n", "# ## data aug ##", "\n", "# sample['root_p_offset'] = self.data['root_p_offset'][idx_].astype(np.float32)", "\n", "# sample['local_q_offset'] = self.data['local_q_offset'][idx_].astype(np.float32)", "\n", "# sample['target'] = self.data['target'][idx_].astype(np.float32)", "\n", "# sample['root_p'] = self.data['root_p'][idx_].astype(np.float32)", "\n", "# sample['X'] = self.data['X'][idx_].astype(np.float32)", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.softmax": [[17, 21], ["kw.pop", "numpy.max", "numpy.min", "numpy.log", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp"], ["def", "softmax", "(", "x", ",", "**", "kw", ")", ":", "\n", "    ", "softness", "=", "kw", ".", "pop", "(", "\"softness\"", ",", "1.0", ")", "\n", "maxi", ",", "mini", "=", "np", ".", "max", "(", "x", ",", "**", "kw", ")", ",", "np", ".", "min", "(", "x", ",", "**", "kw", ")", "\n", "return", "maxi", "+", "np", ".", "log", "(", "softness", "+", "np", ".", "exp", "(", "mini", "-", "maxi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.softmin": [[23, 25], ["remove_fs.softmax"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.softmax"], ["", "def", "softmin", "(", "x", ",", "**", "kw", ")", ":", "\n", "    ", "return", "-", "softmax", "(", "-", "x", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.alpha": [[27, 29], ["None"], "function", ["None"], ["", "def", "alpha", "(", "t", ")", ":", "\n", "    ", "return", "2.0", "*", "t", "*", "t", "*", "t", "-", "3.0", "*", "t", "*", "t", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.lerp": [[31, 33], ["None"], "function", ["None"], ["", "def", "lerp", "(", "a", ",", "l", ",", "r", ")", ":", "\n", "    ", "return", "(", "1", "-", "a", ")", "*", "l", "+", "a", "*", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.parse_args": [[35, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "type", "=", "str", ",", "default", "=", "\"bla_3d\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.nrot2anim": [[41, 50], ["foot_sliding.animation_data.AnimationData.from_BVH", "AnimationData.from_rotations_and_root_positions.get_BVH", "foot_sliding.animation_data.AnimationData.from_rotations_and_root_positions", "AnimationData.from_rotations_and_root_positions.get_global_positions", "numpy.array"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_BVH", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_BVH", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_rotations_and_root_positions", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_global_positions"], ["", "def", "nrot2anim", "(", "filename", ")", ":", "\n", "    ", "anim", "=", "AnimationData", ".", "from_BVH", "(", "filename", ",", "downsample", "=", "1", ")", "\n", "# anim = AnimationData.from_network_output(nrot)", "\n", "bvh", ",", "names", ",", "ftime", "=", "anim", ".", "get_BVH", "(", ")", "\n", "anim", "=", "AnimationData", ".", "from_rotations_and_root_positions", "(", "np", ".", "array", "(", "bvh", ".", "rotations", ")", ",", "bvh", ".", "positions", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "glb", "=", "anim", ".", "get_global_positions", "(", "trim", "=", "False", ")", "\n", "# print('bvh.rotations:', np.array(bvh.rotations)[0,0])", "\n", "# assert 0", "\n", "return", "(", "bvh", ",", "names", ",", "ftime", ")", ",", "glb", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.save_bvh_from_network_output": [[52, 58], ["foot_sliding.animation_data.AnimationData.from_network_output", "AnimationData.from_network_output.get_BVH", "foot_sliding.save", "os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_network_output", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_BVH", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save"], ["", "def", "save_bvh_from_network_output", "(", "nrot", ",", "output_path", ")", ":", "\n", "    ", "anim", "=", "AnimationData", ".", "from_network_output", "(", "nrot", ")", "\n", "bvh", ",", "names", ",", "ftime", "=", "anim", ".", "get_BVH", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "output_path", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "output_path", ")", ")", "\n", "", "BVH", ".", "save", "(", "output_path", ",", "bvh", ",", "names", ",", "ftime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.remove_fs": [[60, 159], ["remove_fs.nrot2anim", "len", "numpy.minimum().min", "remove_fs.softmin", "glb.copy", "enumerate", "range", "foot_sliding.InverseKinematics.JacobianInverseKinematics", "foot_sliding.InverseKinematics.JacobianInverseKinematics.", "foot_sliding.save", "list", "list", "numpy.array", "numpy.array", "range", "os.path.exists", "os.makedirs", "numpy.minimum", "glb[].copy", "range", "range", "range", "os.path.dirname", "os.path.dirname", "glb[].copy", "glb[].copy.copy", "remove_fs.lerp", "remove_fs.lerp", "remove_fs.lerp", "lerp.copy", "remove_fs.lerp", "lerp.copy", "remove_fs.lerp", "lerp.copy", "remove_fs.alpha", "remove_fs.alpha", "remove_fs.alpha", "remove_fs.alpha", "remove_fs.alpha"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.nrot2anim", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.softmin", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.lerp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.lerp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.lerp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.lerp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.lerp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.alpha", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.alpha", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.alpha", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.alpha", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.alpha"], ["", "def", "remove_fs", "(", "filename", ",", "foot", ",", "output_path", ",", "fid_l", "=", "(", "4", ",", "5", ")", ",", "fid_r", "=", "(", "9", ",", "10", ")", ",", "interp_length", "=", "5", ",", "force_on_floor", "=", "False", ")", ":", "\n", "    ", "(", "anim", ",", "names", ",", "ftime", ")", ",", "glb", "=", "nrot2anim", "(", "filename", ")", "\n", "T", "=", "len", "(", "glb", ")", "\n", "\n", "fid", "=", "list", "(", "fid_l", ")", "+", "list", "(", "fid_r", ")", "\n", "fid_l", ",", "fid_r", "=", "np", ".", "array", "(", "fid_l", ")", ",", "np", ".", "array", "(", "fid_r", ")", "\n", "foot_heights", "=", "np", ".", "minimum", "(", "glb", "[", ":", ",", "fid_l", ",", "1", "]", ",", "\n", "glb", "[", ":", ",", "fid_r", ",", "1", "]", ")", ".", "min", "(", "axis", "=", "1", ")", "# [T, 2] -> [T]", "\n", "# print(np.min(foot_heights))", "\n", "floor_height", "=", "softmin", "(", "foot_heights", ",", "softness", "=", "0.5", ",", "axis", "=", "0", ")", "\n", "# print(floor_height)", "\n", "glb", "[", ":", ",", ":", ",", "1", "]", "-=", "floor_height", "\n", "anim", ".", "positions", "[", ":", ",", "0", ",", "1", "]", "-=", "floor_height", "\n", "glb_cp", "=", "glb", ".", "copy", "(", ")", "\n", "\n", "for", "i", ",", "fidx", "in", "enumerate", "(", "fid", ")", ":", "\n", "        ", "fixed", "=", "foot", "[", "i", "]", "# [T]", "\n", "\n", "\"\"\"\n        for t in range(T):\n            glb[t, fidx][1] = max(glb[t, fidx][1], 0.25)\n        \"\"\"", "\n", "\n", "s", "=", "0", "\n", "while", "s", "<", "T", ":", "\n", "            ", "while", "s", "<", "T", "and", "fixed", "[", "s", "]", "==", "0", ":", "\n", "                ", "s", "+=", "1", "\n", "", "if", "s", ">=", "T", ":", "\n", "                ", "break", "\n", "", "t", "=", "s", "\n", "avg", "=", "glb", "[", "t", ",", "fidx", "]", ".", "copy", "(", ")", "\n", "while", "t", "+", "1", "<", "T", "and", "fixed", "[", "t", "+", "1", "]", "==", "1", ":", "\n", "                ", "t", "+=", "1", "\n", "avg", "+=", "glb", "[", "t", ",", "fidx", "]", ".", "copy", "(", ")", "\n", "", "avg", "/=", "(", "t", "-", "s", "+", "1", ")", "\n", "\n", "if", "force_on_floor", ":", "\n", "                ", "avg", "[", "1", "]", "=", "0.0", "\n", "\n", "", "for", "j", "in", "range", "(", "s", ",", "t", "+", "1", ")", ":", "\n", "                ", "glb", "[", "j", ",", "fidx", "]", "=", "avg", ".", "copy", "(", ")", "\n", "\n", "# print(fixed[s - 1:t + 2])", "\n", "\n", "", "s", "=", "t", "+", "1", "\n", "\n", "", "for", "s", "in", "range", "(", "T", ")", ":", "\n", "            ", "if", "fixed", "[", "s", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "", "l", ",", "r", "=", "None", ",", "None", "\n", "consl", ",", "consr", "=", "False", ",", "False", "\n", "for", "k", "in", "range", "(", "interp_length", ")", ":", "\n", "                ", "if", "s", "-", "k", "-", "1", "<", "0", ":", "\n", "                    ", "break", "\n", "", "if", "fixed", "[", "s", "-", "k", "-", "1", "]", ":", "\n", "                    ", "l", "=", "s", "-", "k", "-", "1", "\n", "consl", "=", "True", "\n", "break", "\n", "", "", "for", "k", "in", "range", "(", "interp_length", ")", ":", "\n", "                ", "if", "s", "+", "k", "+", "1", ">=", "T", ":", "\n", "                    ", "break", "\n", "", "if", "fixed", "[", "s", "+", "k", "+", "1", "]", ":", "\n", "                    ", "r", "=", "s", "+", "k", "+", "1", "\n", "consr", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "consl", "and", "not", "consr", ":", "\n", "                ", "continue", "\n", "", "if", "consl", "and", "consr", ":", "\n", "                ", "litp", "=", "lerp", "(", "alpha", "(", "1.0", "*", "(", "s", "-", "l", "+", "1", ")", "/", "(", "interp_length", "+", "1", ")", ")", ",", "\n", "glb", "[", "s", ",", "fidx", "]", ",", "glb", "[", "l", ",", "fidx", "]", ")", "\n", "ritp", "=", "lerp", "(", "alpha", "(", "1.0", "*", "(", "r", "-", "s", "+", "1", ")", "/", "(", "interp_length", "+", "1", ")", ")", ",", "\n", "glb", "[", "s", ",", "fidx", "]", ",", "glb", "[", "r", ",", "fidx", "]", ")", "\n", "itp", "=", "lerp", "(", "alpha", "(", "1.0", "*", "(", "s", "-", "l", "+", "1", ")", "/", "(", "r", "-", "l", "+", "1", ")", ")", ",", "\n", "ritp", ",", "litp", ")", "\n", "glb", "[", "s", ",", "fidx", "]", "=", "itp", ".", "copy", "(", ")", "\n", "continue", "\n", "", "if", "consl", ":", "\n", "                ", "litp", "=", "lerp", "(", "alpha", "(", "1.0", "*", "(", "s", "-", "l", "+", "1", ")", "/", "(", "interp_length", "+", "1", ")", ")", ",", "\n", "glb", "[", "s", ",", "fidx", "]", ",", "glb", "[", "l", ",", "fidx", "]", ")", "\n", "glb", "[", "s", ",", "fidx", "]", "=", "litp", ".", "copy", "(", ")", "\n", "continue", "\n", "", "if", "consr", ":", "\n", "                ", "ritp", "=", "lerp", "(", "alpha", "(", "1.0", "*", "(", "r", "-", "s", "+", "1", ")", "/", "(", "interp_length", "+", "1", ")", ")", ",", "\n", "glb", "[", "s", ",", "fidx", "]", ",", "glb", "[", "r", ",", "fidx", "]", ")", "\n", "glb", "[", "s", ",", "fidx", "]", "=", "ritp", ".", "copy", "(", ")", "\n", "\n", "", "", "", "targetmap", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "glb", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "targetmap", "[", "j", "]", "=", "glb", "[", ":", ",", "j", "]", "\n", "\n", "", "ik", "=", "JacobianInverseKinematics", "(", "anim", ",", "targetmap", ",", "iterations", "=", "10", ",", "damping", "=", "4.0", ",", "\n", "silent", "=", "False", ")", "\n", "ik", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "output_path", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "output_path", ")", ")", "\n", "", "BVH", ".", "save", "(", "output_path", ",", "anim", ",", "names", ",", "ftime", ")", "\n", "return", "glb", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.process_data": [[161, 183], ["range", "numpy.ones", "numpy.zeros", "remove_fs.save_bvh_from_network_output", "remove_fs.remove_fs", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.save_bvh_from_network_output", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.remove_fs"], ["", "def", "process_data", "(", "filename", ",", "style_and_content", "=", "True", ",", "output_dir", "=", "None", ",", "selected", "=", "None", ")", ":", "\n", "\n", "# data = torch.load(filename, map_location=\"cpu\")", "\n", "# feet = data[\"foot_contact\"]", "\n", "# motions = data[\"trans\"]", "\n", "\n", "# if selected is None:", "\n", "#     selected = range(len(motions))", "\n", "\n", "# for num in tqdm(selected):", "\n", "    ", "for", "num", "in", "range", "(", "1", ")", ":", "\n", "# feet = feet[num].detach().numpy()", "\n", "# if style_and_content:", "\n", "#     style = styles[num].detach().numpy()", "\n", "#     content = contents[num].detach().numpy()", "\n", "#     save_bvh_from_network_output(style.copy(), output_path=pjoin(output_dir, \"style_%02d.bvh\" % num))", "\n", "#     save_bvh_from_network_output(content.copy(), output_path=pjoin(output_dir, \"content_%02d.bvh\" % num))", "\n", "        ", "motion", "=", "np", ".", "ones", "(", "(", "92", ",", "100", ")", ")", "\n", "foot", "=", "np", ".", "zeros", "(", "(", "4", ",", "100", ")", ")", "\n", "# motion = motions[num].detach().numpy()", "\n", "save_bvh_from_network_output", "(", "motion", ",", "output_path", "=", "pjoin", "(", "output_dir", ",", "\"raw_%02d.bvh\"", "%", "num", ")", ")", "\n", "remove_fs", "(", "motion", ",", "foot", ",", "output_path", "=", "pjoin", "(", "output_dir", ",", "\"after_%02d.bvh\"", "%", "num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.main": [[185, 193], ["remove_fs.process_data", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.remove_fs.process_data"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "output_dir", "=", "args", ".", "data", "+", "\"_bvh\"", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "except", "FileExistsError", ":", "\n", "        ", "pass", "\n", "\n", "", "process_data", "(", "args", ".", "data", ",", "output_dir", "=", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.test-randomfuture-v1.plot_pose": [[37, 76], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.cla", "enumerate", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "matplotlib.draw", "matplotlib.savefig", "matplotlib.close", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close"], ["def", "plot_pose", "(", "pose", ",", "cur_frame", ",", "prefix", ")", ":", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "parents", "=", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "3", ",", "0", ",", "5", ",", "6", ",", "7", ",", "0", ",", "9", ",", "10", ",", "11", ",", "12", ",", "11", ",", "14", ",", "15", ",", "16", ",", "11", ",", "18", ",", "19", ",", "20", "]", "\n", "ax", ".", "cla", "(", ")", "\n", "num_joint", "=", "pose", ".", "shape", "[", "0", "]", "//", "3", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "parents", ")", ":", "\n", "        ", "if", "i", ">", "0", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "pose", "[", "i", ",", "0", "]", ",", "pose", "[", "p", ",", "0", "]", "]", ",", "[", "pose", "[", "i", ",", "2", "]", ",", "pose", "[", "p", ",", "2", "]", "]", ",", "[", "pose", "[", "i", ",", "1", "]", ",", "pose", "[", "p", ",", "1", "]", "]", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "[", "pose", "[", "i", "+", "num_joint", ",", "0", "]", ",", "pose", "[", "p", "+", "num_joint", ",", "0", "]", "]", ",", "[", "pose", "[", "i", "+", "num_joint", ",", "2", "]", ",", "pose", "[", "p", "+", "num_joint", ",", "2", "]", "]", ",", "[", "pose", "[", "i", "+", "num_joint", ",", "1", "]", ",", "pose", "[", "p", "+", "num_joint", ",", "1", "]", "]", ",", "c", "=", "'b'", ")", "\n", "ax", ".", "plot", "(", "[", "pose", "[", "i", "+", "num_joint", "*", "2", ",", "0", "]", ",", "pose", "[", "p", "+", "num_joint", "*", "2", ",", "0", "]", "]", ",", "[", "pose", "[", "i", "+", "num_joint", "*", "2", ",", "2", "]", ",", "pose", "[", "p", "+", "num_joint", "*", "2", ",", "2", "]", "]", ",", "[", "pose", "[", "i", "+", "num_joint", "*", "2", ",", "1", "]", ",", "pose", "[", "p", "+", "num_joint", "*", "2", ",", "1", "]", "]", ",", "c", "=", "'g'", ")", "\n", "# ax.scatter(pose[:num_joint, 0], pose[:num_joint, 2], pose[:num_joint, 1],c='b')", "\n", "# ax.scatter(pose[num_joint:num_joint*2, 0], pose[num_joint:num_joint*2, 2], pose[num_joint:num_joint*2, 1],c='b')", "\n", "# ax.scatter(pose[num_joint*2:num_joint*3, 0], pose[num_joint*2:num_joint*3, 2], pose[num_joint*2:num_joint*3, 1],c='g')", "\n", "", "", "xmin", "=", "np", ".", "min", "(", "pose", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "pose", "[", ":", ",", "2", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "pose", "[", ":", ",", "1", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "pose", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "pose", "[", ":", ",", "2", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "pose", "[", ":", ",", "1", "]", ")", "\n", "scale", "=", "np", ".", "max", "(", "[", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", "]", ")", "\n", "xmid", "=", "(", "xmax", "+", "xmin", ")", "//", "2", "\n", "ymid", "=", "(", "ymax", "+", "ymin", ")", "//", "2", "\n", "zmid", "=", "(", "zmax", "+", "zmin", ")", "//", "2", "\n", "ax", ".", "set_xlim", "(", "xmid", "-", "scale", "//", "2", ",", "xmid", "+", "scale", "//", "2", ")", "\n", "ax", ".", "set_ylim", "(", "ymid", "-", "scale", "//", "2", ",", "ymid", "+", "scale", "//", "2", ")", "\n", "ax", ".", "set_zlim", "(", "zmid", "-", "scale", "//", "2", ",", "zmid", "+", "scale", "//", "2", ")", "\n", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "savefig", "(", "prefix", "+", "'_'", "+", "str", "(", "cur_frame", ")", "+", "'.png'", ",", "dpi", "=", "200", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.rlpose2bvh": [[26, 36], ["rlpose2bvh.write_standard_bvh_multi_process"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.write_standard_bvh_multi_process"], ["def", "rlpose2bvh", "(", "take_list", ",", "expert_dict", ")", ":", "\n", "##########################################################", "\n", "# save .", "\n", "# result_dict = {}", "\n", "    ", "takes", "=", "take_list", "\n", "result_all_dict", "=", "expert_dict", "\n", "\n", "write_standard_bvh_multi_process", "(", "takes", ",", "result_all_dict", ")", "\n", "##########################################################", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.write_standard_bvh_multi_process": [[37, 69], ["range", "numpy.copy().reshape", "rlpose2bvh.write_standard_bvh", "math.ceil", "range", "print", "multiprocessing.Process", "p_lst.append", "multiprocessing.Process.start", "multiprocessing.Process.join", "numpy.copy", "len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.write_standard_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.start", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "write_standard_bvh_multi_process", "(", "takes", ",", "result_all_dict", ")", ":", "\n", "\n", "    ", "def", "wrap_write_standard_bvh", "(", "take", ")", ":", "\n", "        ", "predicted_3d_wpos_withroot", "=", "np", ".", "copy", "(", "result_all_dict", "[", "take", "]", "[", "'skt_wpos'", "]", ")", ".", "reshape", "(", "-", "1", ",", "16", ",", "3", ")", "\n", "# ground_z = np.min(predicted_3d_wpos_withroot[:, :, -1:])", "\n", "# ground_z = np.min(predicted_3d_wpos_withroot[:, :, -1:], axis=(1,2), keepdims=True)", "\n", "# predicted_3d_wpos_withroot[:, :, -1:] = predicted_3d_wpos_withroot[:, :, -1:] - ground_z", "\n", "\n", "bvhfileName", "=", "'{}/{}.bvh'", ".", "format", "(", "traj_save_path", ",", "take", ")", "\n", "write_standard_bvh", "(", "bvhfileName", ",", "predicted_3d_wpos_withroot", ")", "\n", "\n", "# start", "\n", "", "task_lst", "=", "takes", "\n", "# num_threads = args.num_threads", "\n", "\n", "for", "ep", "in", "range", "(", "math", ".", "ceil", "(", "len", "(", "task_lst", ")", "/", "num_threads", ")", ")", ":", "\n", "\n", "        ", "p_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_threads", ")", ":", "\n", "            ", "idx", "=", "ep", "*", "num_threads", "+", "i", "\n", "if", "idx", ">=", "len", "(", "task_lst", ")", ":", "\n", "                ", "break", "\n", "", "p", "=", "multiprocessing", ".", "Process", "(", "target", "=", "wrap_write_standard_bvh", ",", "args", "=", "(", "task_lst", "[", "idx", "]", ",", ")", ")", "\n", "p_lst", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "p_lst", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "for", "p", "in", "p_lst", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "", "print", "(", "'complete ep:'", ",", "ep", ")", "\n", "# end.", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.write_standard_bvh": [[71, 94], ["rlpose2bvh.mkd", "bvh_skeleton.humanoid_rib_skeleton.SkeletonConverter", "humanoid_rib_skeleton.SkeletonConverter.convert_to_22joint", "bvh_skeleton.humanoid_rib_skeleton.H36mSkeleton", "humanoid_rib_skeleton.H36mSkeleton.poses2bvh", "bvh_skeleton.camera.world2cam_sktpos"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.humanoid_rib_skeleton.SkeletonConverter.convert_to_22joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.h36m_skeleton.H36mSkeleton.poses2bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.bvh_skeleton.camera.world2cam_sktpos"], ["", "", "def", "write_standard_bvh", "(", "bvhfileName", ",", "prediction3dpoint", ")", ":", "\n", "    ", "'''\n    :param outbvhfilepath:\n    :param prediction3dpoint:\n    :return:\n    '''", "\n", "\n", "#", "\n", "prediction3dpoint", "=", "world2cam_sktpos", "(", "prediction3dpoint", ")", "*", "-", "1", "\n", "\n", "for", "frame", "in", "prediction3dpoint", ":", "\n", "        ", "for", "point3d", "in", "frame", ":", "\n", "            ", "point3d", "[", "0", "]", "*=", "100", "\n", "point3d", "[", "1", "]", "*=", "100", "\n", "point3d", "[", "2", "]", "*=", "100", "\n", "\n", "", "", "mkd", "(", "bvhfileName", ")", "\n", "# 16 joint  21 joint", "\n", "Converter", "=", "humanoid_rib_skeleton", ".", "SkeletonConverter", "(", ")", "\n", "prediction3dpoint", "=", "Converter", ".", "convert_to_22joint", "(", "prediction3dpoint", ")", "\n", "# bvh .", "\n", "human36m_skeleton", "=", "humanoid_rib_skeleton", ".", "H36mSkeleton", "(", ")", "\n", "human36m_skeleton", ".", "poses2bvh", "(", "prediction3dpoint", ",", "output_file", "=", "bvhfileName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.rlpose2bvh.mkd": [[97, 105], ["os.path.abspath", "os.path.abspath", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n", "        ", "savedir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "target_dir", ",", "os", ".", "pardir", ")", ")", "\n", "", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qmul": [[7, 26], ["torch.bmm", "torch.stack().view", "r.view", "q.view", "torch.stack"], "function", ["None"], ["\n", "import", "torch", "\n", "\n", "\n", "def", "qrot", "(", "q", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    Rotate vector(s) v about the rotation described by \u56db\u5143\u6570quaternion(s) q.\n    Expects a tensor of shape (*, 4) for q and a tensor of shape (*, 3) for v,\n    where * denotes any number of dimensions.\n    Returns a tensor of shape (*, 3).\n    \"\"\"", "\n", "assert", "q", ".", "shape", "[", "-", "1", "]", "==", "4", "\n", "assert", "v", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "q", ".", "shape", "[", ":", "-", "1", "]", "==", "v", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "qvec", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "uv", "=", "torch", ".", "cross", "(", "qvec", ",", "v", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "uuv", "=", "torch", ".", "cross", "(", "qvec", ",", "uv", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "return", "(", "v", "+", "2", "*", "(", "q", "[", "...", ",", ":", "1", "]", "*", "uv", "+", "uuv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot": [[27, 46], ["list", "q.view.view", "v.view.view", "torch.cross", "torch.cross"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross"], ["\n", "", "def", "qinverse", "(", "q", ",", "inplace", "=", "False", ")", ":", "\n", "# We assume the quaternion to be normalized", "\n", "    ", "if", "inplace", ":", "\n", "        ", "q", "[", "...", ",", "1", ":", "]", "*=", "-", "1", "\n", "return", "q", "\n", "", "else", ":", "\n", "        ", "w", "=", "q", "[", "...", ",", ":", "1", "]", "\n", "xyz", "=", "q", "[", "...", ",", "1", ":", "]", "\n", "return", "torch", ".", "cat", "(", "(", "w", ",", "-", "xyz", ")", ",", "dim", "=", "len", "(", "q", ".", "shape", ")", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qeuler": [[47, 92], ["list", "q.view.view", "torch.stack().view", "torch.atan2", "torch.asin", "torch.atan2", "torch.clamp", "torch.atan2", "torch.atan2", "torch.asin", "torch.stack", "torch.clamp", "torch.asin", "torch.atan2", "torch.atan2", "torch.clamp", "torch.atan2", "torch.atan2", "torch.asin", "torch.clamp", "torch.asin", "torch.atan2", "torch.atan2", "torch.clamp", "torch.atan2", "torch.asin", "torch.atan2", "torch.clamp"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qmul_np": [[95, 99], ["torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "qmul().numpy", "torch.from_numpy", "torch.from_numpy", "quaternion.qmul"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qmul"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot_np": [[100, 104], ["torch.from_numpy().contiguous", "torch.from_numpy().contiguous", "qrot().numpy", "torch.from_numpy", "torch.from_numpy", "quaternion.qrot"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qeuler_np": [[105, 112], ["torch.from_numpy().cuda", "qeuler().cpu().numpy", "torch.from_numpy().contiguous", "qeuler().numpy", "torch.from_numpy", "qeuler().cpu", "torch.from_numpy", "quaternion.qeuler", "quaternion.qeuler"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qeuler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qeuler"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qfix": [[113, 131], ["q.copy", "numpy.sum", "len", "numpy.cumsum"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.expmap_to_quaternion": [[132, 149], ["list", "e.reshape.reshape", "numpy.linalg.norm().reshape", "numpy.cos().reshape", "numpy.concatenate().reshape", "numpy.linalg.norm", "numpy.cos", "numpy.sinc", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.euler_to_quaternion": [[150, 189], ["list", "e.reshape.reshape", "numpy.stack", "numpy.stack", "numpy.stack", "qmul_np.reshape", "numpy.cos", "numpy.sin", "numpy.zeros_like", "numpy.zeros_like", "numpy.cos", "numpy.zeros_like", "numpy.sin", "numpy.zeros_like", "numpy.cos", "numpy.zeros_like", "numpy.zeros_like", "numpy.sin", "quaternion.qmul_np"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qmul_np"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU": [[7, 14], ["torch.ReLU", "nn.ReLU.", "nn.ReLU."], "function", ["None"], ["\n", "mask", "=", "np", ".", "zeros_like", "(", "features", ")", "\n", "mask", "[", ":", ":", "masked_freq", "]", "=", "1.", "\n", "feature_out", "=", "features", "*", "mask", "\n", "return", "feature_out", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.gen_ztta": [[15, 25], ["numpy.zeros", "range", "torch.from_numpy", "torch.from_numpy", "range", "np.zeros.astype", "numpy.sin", "numpy.cos"], "function", ["None"], ["\n", "\n", "", "def", "mask_features_withshuffle", "(", "features", ",", "masked_freq", ")", ":", "\n", "    ", "\"\"\"\n    mask feature with give frequency\n    :param features: t x feature size\n    :return:\n    \"\"\"", "\n", "# mask feature", "\n", "mask", "=", "np", ".", "zeros_like", "(", "features", ")", "\n", "mask", "[", ":", ":", "masked_freq", "]", "=", "1.", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.gen_ztar": [[26, 38], ["range", "numpy.array", "torch.from_numpy", "torch.from_numpy", "np.array.append", "np.array.append", "np.array.append"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["feature_out", "=", "features", "*", "mask", "\n", "# shuffle feature", "\n", "b", "=", "feature_out", "[", ":", ":", "masked_freq", "]", "*", "1.", "\n", "np", ".", "random", ".", "shuffle", "(", "b", ")", "\n", "feature_out", "[", ":", ":", "masked_freq", ",", "2", ":", "]", "=", "b", "[", ":", ",", "2", ":", "]", "*", "1", "\n", "return", "feature_out", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.write_to_bvhfile": [[39, 63], ["open", "open", "open.write", "open.write", "quaternion.qeuler_np", "range", "open.close", "open.write", "data[].reshape", "range", "open.write"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qeuler_np", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.test.plot_pose": [[29, 68], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.cla", "enumerate", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "matplotlib.draw", "matplotlib.savefig", "matplotlib.close", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close"], ["def", "plot_pose", "(", "pose", ",", "cur_frame", ",", "prefix", ")", ":", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "parents", "=", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "3", ",", "0", ",", "5", ",", "6", ",", "7", ",", "0", ",", "9", ",", "10", ",", "11", ",", "12", ",", "11", ",", "14", ",", "15", ",", "16", ",", "11", ",", "18", ",", "19", ",", "20", "]", "\n", "ax", ".", "cla", "(", ")", "\n", "num_joint", "=", "pose", ".", "shape", "[", "0", "]", "//", "3", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "parents", ")", ":", "\n", "        ", "if", "i", ">", "0", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "pose", "[", "i", ",", "0", "]", ",", "pose", "[", "p", ",", "0", "]", "]", ",", "[", "pose", "[", "i", ",", "2", "]", ",", "pose", "[", "p", ",", "2", "]", "]", ",", "[", "pose", "[", "i", ",", "1", "]", ",", "pose", "[", "p", ",", "1", "]", "]", ",", "c", "=", "'r'", ")", "\n", "ax", ".", "plot", "(", "[", "pose", "[", "i", "+", "num_joint", ",", "0", "]", ",", "pose", "[", "p", "+", "num_joint", ",", "0", "]", "]", ",", "[", "pose", "[", "i", "+", "num_joint", ",", "2", "]", ",", "pose", "[", "p", "+", "num_joint", ",", "2", "]", "]", ",", "[", "pose", "[", "i", "+", "num_joint", ",", "1", "]", ",", "pose", "[", "p", "+", "num_joint", ",", "1", "]", "]", ",", "c", "=", "'b'", ")", "\n", "ax", ".", "plot", "(", "[", "pose", "[", "i", "+", "num_joint", "*", "2", ",", "0", "]", ",", "pose", "[", "p", "+", "num_joint", "*", "2", ",", "0", "]", "]", ",", "[", "pose", "[", "i", "+", "num_joint", "*", "2", ",", "2", "]", ",", "pose", "[", "p", "+", "num_joint", "*", "2", ",", "2", "]", "]", ",", "[", "pose", "[", "i", "+", "num_joint", "*", "2", ",", "1", "]", ",", "pose", "[", "p", "+", "num_joint", "*", "2", ",", "1", "]", "]", ",", "c", "=", "'g'", ")", "\n", "# ax.scatter(pose[:num_joint, 0], pose[:num_joint, 2], pose[:num_joint, 1],c='b')", "\n", "# ax.scatter(pose[num_joint:num_joint*2, 0], pose[num_joint:num_joint*2, 2], pose[num_joint:num_joint*2, 1],c='b')", "\n", "# ax.scatter(pose[num_joint*2:num_joint*3, 0], pose[num_joint*2:num_joint*3, 2], pose[num_joint*2:num_joint*3, 1],c='g')", "\n", "", "", "xmin", "=", "np", ".", "min", "(", "pose", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "pose", "[", ":", ",", "2", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "pose", "[", ":", ",", "1", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "pose", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "pose", "[", ":", ",", "2", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "pose", "[", ":", ",", "1", "]", ")", "\n", "scale", "=", "np", ".", "max", "(", "[", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", "]", ")", "\n", "xmid", "=", "(", "xmax", "+", "xmin", ")", "//", "2", "\n", "ymid", "=", "(", "ymax", "+", "ymin", ")", "//", "2", "\n", "zmid", "=", "(", "zmax", "+", "zmin", ")", "//", "2", "\n", "ax", ".", "set_xlim", "(", "xmid", "-", "scale", "//", "2", ",", "xmid", "+", "scale", "//", "2", ")", "\n", "ax", ".", "set_ylim", "(", "ymid", "-", "scale", "//", "2", ",", "ymid", "+", "scale", "//", "2", ")", "\n", "ax", ".", "set_zlim", "(", "zmid", "-", "scale", "//", "2", ",", "zmid", "+", "scale", "//", "2", ")", "\n", "\n", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "savefig", "(", "prefix", "+", "'_'", "+", "str", "(", "cur_frame", ")", "+", "'.png'", ",", "dpi", "=", "200", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.StateEncoder.__init__": [[8, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["import", "torch", ".", "nn", "as", "nn", "\n", "\n", "\n", "class", "TemporalModelBase", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Do not instantiate this class.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.StateEncoder.forward": [[17, 23], ["model.StateEncoder.fc0", "functions.PLU", "model.StateEncoder.fc1", "functions.PLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU"], ["filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Validate input", "\n", "for", "fw", "in", "filter_widths", ":", "\n", "            ", "assert", "fw", "%", "2", "!=", "0", ",", "'Only odd filter widths are supported'", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.OffsetEncoder.__init__": [[25, 33], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["self", ".", "in_features", "=", "in_features", "\n", "self", ".", "num_joints_out", "=", "num_joints_out", "\n", "self", ".", "filter_widths", "=", "filter_widths", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "pad", "=", "[", "filter_widths", "[", "0", "]", "//", "2", "]", "\n", "self", ".", "expand_bn", "=", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.OffsetEncoder.forward": [[34, 40], ["model.OffsetEncoder.fc0", "functions.PLU", "model.OffsetEncoder.fc1", "functions.PLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU"], ["self", ".", "shrink", "=", "nn", ".", "Conv1d", "(", "channels", ",", "num_joints_out", "*", "3", ",", "1", ")", "\n", "\n", "", "def", "set_bn_momentum", "(", "self", ",", "momentum", ")", ":", "\n", "        ", "self", ".", "expand_bn", ".", "momentum", "=", "momentum", "\n", "for", "bn", "in", "self", ".", "layers_bn", ":", "\n", "            ", "bn", ".", "momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.TargetEncoder.__init__": [[42, 50], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["        ", "\"\"\"\n        Return the total receptive field of this model as # of frames.\n        \"\"\"", "\n", "frames", "=", "0", "\n", "for", "f", "in", "self", ".", "pad", ":", "\n", "            ", "frames", "+=", "f", "\n", "", "return", "1", "+", "2", "*", "frames", "\n", "\n", "", "def", "total_causal_shift", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.TargetEncoder.forward": [[51, 57], ["model.TargetEncoder.fc0", "functions.PLU", "model.TargetEncoder.fc1", "functions.PLU"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU"], ["        ", "\"\"\"\n        Return the asymmetric offset for sequence padding.\n        The returned value is typically 0 if causal convolutions are disabled,\n        otherwise it is half the receptive field.\n        \"\"\"", "\n", "frames", "=", "self", ".", "causal_shift", "[", "0", "]", "\n", "next_dilation", "=", "self", ".", "filter_widths", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LSTM.__init__": [[59, 65], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["            ", "frames", "+=", "self", ".", "causal_shift", "[", "i", "]", "*", "next_dilation", "\n", "next_dilation", "*=", "self", ".", "filter_widths", "[", "i", "]", "\n", "", "return", "frames", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", "\n", "assert", "x", ".", "shape", "[", "-", "2", "]", "==", "self", ".", "num_joints_in", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LSTM.init_hidden": [[66, 69], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["assert", "x", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "in_features", "\n", "\n", "sz", "=", "x", ".", "shape", "[", ":", "3", "]", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LSTM.forward": [[70, 73], ["model.LSTM.rnn"], "methods", ["None"], ["x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "_forward_blocks", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.Decoder.__init__": [[76, 87], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["\n", "return", "x", "\n", "\n", "\n", "", "", "class", "TemporalModel", "(", "TemporalModelBase", ")", ":", "\n", "    ", "\"\"\"\n    Reference 3D pose estimation model with temporal convolutions.\n    This implementation can be used for all use-cases.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "\n", "filter_widths", ",", "causal", "=", "False", ",", "dropout", "=", "0.25", ",", "channels", "=", "1024", ",", "dense", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.Decoder.forward": [[88, 96], ["model.Decoder.fc0", "functions.PLU", "model.Decoder.fc1", "functions.PLU", "model.Decoder.fc2", "model.Decoder.ac_sig", "model.Decoder.fc_conct"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU"], ["        "]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.ShortMotionDiscriminator.__init__": [[98, 108], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["\n", "super", "(", ")", ".", "__init__", "(", "num_joints_in", ",", "in_features", ",", "num_joints_out", ",", "filter_widths", ",", "causal", ",", "dropout", ",", "channels", ")", "\n", "\n", "self", ".", "expand_conv", "=", "nn", ".", "Conv1d", "(", "num_joints_in", "*", "in_features", ",", "channels", ",", "filter_widths", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "\n", "layers_conv", "=", "[", "]", "\n", "layers_bn", "=", "[", "]", "\n", "\n", "self", ".", "causal_shift", "=", "[", "(", "filter_widths", "[", "0", "]", ")", "//", "2", "if", "causal", "else", "0", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.ShortMotionDiscriminator.forward": [[109, 116], ["model.ShortMotionDiscriminator.fc0", "functions.PLU", "model.ShortMotionDiscriminator.fc1", "functions.PLU", "model.ShortMotionDiscriminator.fc2"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU"], ["next_dilation", "=", "filter_widths", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "filter_widths", ")", ")", ":", "\n", "            ", "self", ".", "pad", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "-", "1", ")", "*", "next_dilation", "//", "2", ")", "\n", "self", ".", "causal_shift", ".", "append", "(", "(", "filter_widths", "[", "i", "]", "//", "2", "*", "next_dilation", ")", "if", "causal", "else", "0", ")", "\n", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "\n", "filter_widths", "[", "i", "]", "if", "not", "dense", "else", "(", "2", "*", "self", ".", "pad", "[", "-", "1", "]", "+", "1", ")", ",", "\n", "dilation", "=", "next_dilation", "if", "not", "dense", "else", "1", ",", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.__init__": [[118, 128], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__"], ["layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "layers_conv", ".", "append", "(", "nn", ".", "Conv1d", "(", "channels", ",", "channels", ",", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers_bn", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "channels", ",", "momentum", "=", "0.1", ")", ")", "\n", "\n", "next_dilation", "*=", "filter_widths", "[", "i", "]", "\n", "\n", "", "self", ".", "layers_conv", "=", "nn", ".", "ModuleList", "(", "layers_conv", ")", "\n", "self", ".", "layers_bn", "=", "nn", ".", "ModuleList", "(", "layers_bn", ")", "\n", "\n", "", "def", "_forward_blocks", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "expand_bn", "(", "self", ".", "expand_conv", "(", "x", ")", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.model.LongMotionDiscriminator.forward": [[129, 136], ["model.LongMotionDiscriminator.fc0", "functions.PLU", "model.LongMotionDiscriminator.fc1", "functions.PLU", "model.LongMotionDiscriminator.fc2"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.functions.PLU"], ["\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pad", ")", "-", "1", ")", ":", "\n", "            ", "pad", "=", "self", ".", "pad", "[", "i", "+", "1", "]", "\n", "shift", "=", "self", ".", "causal_shift", "[", "i", "+", "1", "]", "\n", "# clip", "\n", "res", "=", "x", "[", ":", ",", ":", ",", "pad", "+", "shift", ":", "x", ".", "shape", "[", "2", "]", "-", "pad", "+", "shift", "]", "\n", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "relu", "(", "self", ".", "layers_bn", "[", "2", "*", "i", "]", "(", "self", ".", "layers_conv", "[", "2", "*", "i", "]", "(", "x", ")", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.__init__": [[11, 19], ["torch.FloatTensor", "numpy.array", "skeleton.Skeleton._compute_metadata", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton._compute_metadata", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["class", "Skeleton", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "parents", ",", "joints_left", ",", "joints_right", ")", ":", "\n", "        ", "assert", "len", "(", "joints_left", ")", "==", "len", "(", "joints_right", ")", "\n", "\n", "self", ".", "_parents", "=", "np", ".", "array", "(", "parents", ")", "\n", "self", ".", "_joints_left", "=", "joints_left", "\n", "self", ".", "_joints_right", "=", "joints_right", "\n", "self", ".", "_compute_metadata", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda": [[20, 23], ["skeleton.Skeleton._offsets.cuda"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.cuda"], ["", "def", "num_joints", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_parents", ")", "\n", "\n", "", "def", "parents", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.num_joints": [[24, 26], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_parents", "\n", "\n", "", "def", "has_children", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.offsets": [[27, 29], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_has_children", "\n", "\n", "", "def", "children", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.parents": [[30, 32], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_children", "\n", "\n", "", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.has_children": [[33, 35], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Remove the joints specified in 'joints_to_remove'.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.children": [[36, 38], ["None"], "methods", ["None"], ["valid_joints", "=", "[", "]", "\n", "for", "joint", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "if", "joint", "not", "in", "joints_to_remove", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.remove_joints": [[39, 61], ["range", "numpy.zeros", "enumerate", "numpy.array", "skeleton.Skeleton._compute_metadata", "len", "len", "valid_joints.append", "new_parents.append"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton._compute_metadata", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["                ", "valid_joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_parents", ")", ")", ":", "\n", "            ", "while", "self", ".", "_parents", "[", "i", "]", "in", "joints_to_remove", ":", "\n", "                ", "self", ".", "_parents", "[", "i", "]", "=", "self", ".", "_parents", "[", "self", ".", "_parents", "[", "i", "]", "]", "\n", "\n", "", "", "index_offsets", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ",", "dtype", "=", "int", ")", "\n", "new_parents", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "i", "not", "in", "joints_to_remove", ":", "\n", "                ", "new_parents", ".", "append", "(", "parent", "-", "index_offsets", "[", "parent", "]", ")", "\n", "", "else", ":", "\n", "                ", "index_offsets", "[", "i", ":", "]", "+=", "1", "\n", "", "", "self", ".", "_parents", "=", "np", ".", "array", "(", "new_parents", ")", "\n", "\n", "if", "self", ".", "_joints_left", "is", "not", "None", ":", "\n", "            ", "new_joints_left", "=", "[", "]", "\n", "for", "joint", "in", "self", ".", "_joints_left", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_left", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_left", "=", "new_joints_left", "\n", "", "if", "self", ".", "_joints_right", "is", "not", "None", ":", "\n", "            ", "new_joints_right", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.forward_kinematics": [[62, 93], ["skeleton.Skeleton._offsets.expand", "range", "torch.stack().permute", "len", "positions_world.append", "rotations_world.append", "positions_world.append", "torch.stack", "rotations_world.append", "rotations_world.append", "quaternion.qrot", "quaternion.qmul"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qrot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.quaternion.qmul"], ["for", "joint", "in", "self", ".", "_joints_right", ":", "\n", "                ", "if", "joint", "in", "valid_joints", ":", "\n", "                    ", "new_joints_right", ".", "append", "(", "joint", "-", "index_offsets", "[", "joint", "]", ")", "\n", "", "", "self", ".", "_joints_right", "=", "new_joints_right", "\n", "\n", "", "self", ".", "_compute_metadata", "(", ")", "\n", "\n", "return", "valid_joints", "\n", "\n", "", "def", "joints_left", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_left", "\n", "\n", "", "def", "joints_right", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_joints_right", "\n", "\n", "", "def", "_compute_metadata", "(", "self", ")", ":", "\n", "        ", "self", ".", "_has_children", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "_parents", ")", ")", ".", "astype", "(", "bool", ")", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_has_children", "[", "parent", "]", "=", "True", "\n", "\n", "", "", "self", ".", "_children", "=", "[", "]", "\n", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "self", ".", "_children", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", ",", "parent", "in", "enumerate", "(", "self", ".", "_parents", ")", ":", "\n", "            ", "if", "parent", "!=", "-", "1", ":", "\n", "                ", "self", ".", "_children", "[", "parent", "]", ".", "append", "(", "i", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_left": [[94, 96], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton.joints_right": [[97, 99], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.skeleton.Skeleton._compute_metadata": [[100, 112], ["numpy.zeros().astype", "enumerate", "enumerate", "enumerate", "skeleton.Skeleton._children.append", "numpy.zeros", "skeleton.Skeleton._children[].append", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.plot_clusters.get_all_codes": [[19, 68], ["print", "os.path.exists", "py_utils.ensure_dirs", "print", "data_loader.get_dataloader", "data_loader.get_dataloader", "trainer.Trainer", "trainer.Trainer.to", "trainer.Trainer.resume", "[].item", "os.path.dirname", "torch.no_grad", "numpy.savez_compressed", "enumerate", "vis_dict.items", "trainer.Trainer.get_latent_codes", "numpy.load", "trainer.get_latent_codes.items", "trainer.get_latent_codes.items", "value[].keys", "len", "torch.cat", "vis_dict[].cpu().numpy", "py_utils.to_float", "vis_dict[].append", "vis_dict[].reshape", "py_utils.to_float", "vis_dict[].cpu", "range"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.ensure_dirs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.to_float", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.to_float"], ["def", "get_all_codes", "(", "cfg", ",", "output_path", ")", ":", "\n", "\n", "    ", "print", "(", "output_path", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "return", "np", ".", "load", "(", "output_path", ",", "allow_pickle", "=", "True", ")", "[", "'data'", "]", ".", "item", "(", ")", "\n", "", "ensure_dirs", "(", "os", ".", "path", ".", "dirname", "(", "output_path", ")", ")", "\n", "\n", "print", "(", "\"start over\"", ")", "\n", "# Dataloader", "\n", "train_loader", "=", "get_dataloader", "(", "cfg", ",", "'train'", ",", "shuffle", "=", "False", ")", "\n", "test_loader", "=", "get_dataloader", "(", "cfg", ",", "'test'", ",", "shuffle", "=", "False", ")", "\n", "\n", "# Trainer", "\n", "trainer", "=", "Trainer", "(", "cfg", ")", "\n", "trainer", ".", "to", "(", "cfg", ".", "device", ")", "\n", "trainer", ".", "resume", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "vis_dicts", "=", "{", "}", "\n", "for", "phase", ",", "loader", "in", "[", "[", "'train'", ",", "train_loader", "]", ",", "\n", "[", "'test'", ",", "test_loader", "]", "]", ":", "\n", "\n", "            ", "vis_dict", "=", "None", "\n", "for", "t", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "vis_codes", "=", "trainer", ".", "get_latent_codes", "(", "data", ")", "\n", "if", "vis_dict", "is", "None", ":", "\n", "                    ", "vis_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "vis_codes", ".", "items", "(", ")", ":", "\n", "                        ", "vis_dict", "[", "key", "]", "=", "[", "value", "]", "\n", "", "", "else", ":", "\n", "                    ", "for", "key", ",", "value", "in", "vis_codes", ".", "items", "(", ")", ":", "\n", "                        ", "vis_dict", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "", "", "for", "key", ",", "value", "in", "vis_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "phase", "==", "\"test\"", "and", "key", "==", "\"content_code\"", ":", "\n", "                    ", "continue", "\n", "", "if", "key", "==", "\"meta\"", ":", "\n", "                    ", "secondary_keys", "=", "value", "[", "0", "]", ".", "keys", "(", ")", "\n", "num", "=", "len", "(", "value", ")", "\n", "vis_dict", "[", "key", "]", "=", "{", "\n", "secondary_key", ":", "[", "to_float", "(", "item", ")", "for", "i", "in", "range", "(", "num", ")", "for", "item", "in", "value", "[", "i", "]", "[", "secondary_key", "]", "]", "\n", "for", "secondary_key", "in", "secondary_keys", "}", "\n", "", "else", ":", "\n", "                    ", "vis_dict", "[", "key", "]", "=", "torch", ".", "cat", "(", "vis_dict", "[", "key", "]", ",", "0", ")", "\n", "vis_dict", "[", "key", "]", "=", "vis_dict", "[", "key", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vis_dict", "[", "key", "]", "=", "to_float", "(", "vis_dict", "[", "key", "]", ".", "reshape", "(", "vis_dict", "[", "key", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "", "vis_dicts", "[", "phase", "]", "=", "vis_dict", "\n", "\n", "", "np", ".", "savez_compressed", "(", "output_path", ",", "data", "=", "vis_dicts", ")", "\n", "return", "vis_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.plot_clusters.plot_all": [[70, 76], ["os.path.join", "plot_clusters.get_all_codes", "latent_plot_utils.get_all_plots", "os.path.join"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.plot_clusters.get_all_codes", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.get_all_plots"], ["", "", "def", "plot_all", "(", "cfg", ")", ":", "\n", "    ", "output_path", "=", "pjoin", "(", "cfg", ".", "main_dir", ",", "'test_probe'", ")", "\n", "vis_dicts", "=", "get_all_codes", "(", "cfg", ",", "pjoin", "(", "output_path", ",", "'output_codes.npz'", ")", ")", "\n", "get_all_plots", "(", "vis_dicts", ",", "output_path", ",", "{", "}", ",", "0", ",", "summary", "=", "False", ",", "\n", "style_cluster_protocols", "=", "(", "'tsne'", ")", ",", "\n", "separate_compute", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.plot_clusters.plot_demo": [[78, 83], ["os.path.join", "os.path.join", "plot_clusters.get_all_codes", "latent_plot_utils.get_demo_plots", "os.path.dirname", "os.path.join"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.plot_clusters.get_all_codes", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.get_demo_plots"], ["", "def", "plot_demo", "(", "cfg", ")", ":", "\n", "    ", "BASEPATH", "=", "pjoin", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ")", "\n", "output_path", "=", "pjoin", "(", "BASEPATH", ",", "\"demo_results\"", ",", "\"figures\"", ")", "\n", "vis_dicts", "=", "get_all_codes", "(", "cfg", ",", "pjoin", "(", "output_path", ",", "'output_codes.npz'", ")", ")", "\n", "get_demo_plots", "(", "vis_dicts", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.plot_clusters.parse_args": [[85, 92], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'config'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.plot_clusters.main": [[94, 99], ["importlib.import_module", "importlib.import_module.Config", "config_module.Config.initialize", "plot_clusters.plot_demo"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.models.video_forecast_net.VideoForecastNet.initialize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.plot_clusters.plot_demo"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "config_module", "=", "importlib", ".", "import_module", "(", "args", ".", "config", ")", "\n", "config", "=", "config_module", ".", "Config", "(", ")", "\n", "config", ".", "initialize", "(", "args", ")", "\n", "plot_demo", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.distinct_labels_and_indices": [[19, 28], ["list", "list.sort", "len", "enumerate", "set", "indices_i[].append", "numpy.array", "indices_i.items"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["def", "distinct_labels_and_indices", "(", "labels", ")", ":", "\n", "    ", "distinct_labels", "=", "list", "(", "set", "(", "labels", ")", ")", "\n", "distinct_labels", ".", "sort", "(", ")", "\n", "num_labels", "=", "len", "(", "distinct_labels", ")", "\n", "indices_i", "=", "{", "label", ":", "[", "]", "for", "label", "in", "distinct_labels", "}", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "indices_i", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "indices_i", "=", "{", "label", ":", "np", ".", "array", "(", "indices", ")", "for", "label", ",", "indices", "in", "indices_i", ".", "items", "(", ")", "}", "\n", "return", "num_labels", ",", "distinct_labels", ",", "indices_i", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D": [[30, 51], ["matplotlib.subplots", "matplotlib.cm.get_cmap", "latent_plot_utils.distinct_labels_and_indices", "enumerate", "ax.legend", "fig.tight_layout", "tikzplotlib.save", "matplotlib.savefig", "numpy.min", "numpy.max", "ax.scatter", "title.split", "cm.get_cmap."], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.distinct_labels_and_indices", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save"], ["", "def", "plot2D", "(", "data", ",", "labels", ",", "title", ")", ":", "\n", "    ", "x_min", ",", "x_max", "=", "np", ".", "min", "(", "data", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "data", ",", "axis", "=", "0", ")", "\n", "data", "=", "(", "data", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "8", ",", "8", ")", ")", "\n", "cjet", "=", "cm", ".", "get_cmap", "(", "\"jet\"", ")", "\n", "\n", "num_labels", ",", "distinct_labels", ",", "indices", "=", "distinct_labels_and_indices", "(", "labels", ")", "\n", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "distinct_labels", ")", ":", "\n", "        ", "index", "=", "indices", "[", "label", "]", "\n", "ax", ".", "scatter", "(", "data", "[", "index", ",", "0", "]", ",", "data", "[", "index", ",", "1", "]", ",", "label", "=", "label", ",", "c", "=", "[", "cjet", "(", "1.0", "*", "i", "/", "num_labels", ")", "]", ",", "linewidths", "=", "0.", ")", "\n", "\n", "", "ax", ".", "legend", "(", "loc", "=", "\"center left\"", ",", "bbox_to_anchor", "=", "(", "1", ",", "0", ",", "1", ",", "1", ")", ",", "\n", "title", "=", "title", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "tikzplotlib", ".", "save", "(", "\"%s.tex\"", "%", "title", ",", "figure", "=", "fig", ",", "strict", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "\"%s.png\"", "%", "title", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D_overlay": [[52, 101], ["range", "matplotlib.subplots", "matplotlib.cm.get_cmap", "len", "enumerate", "ax.get_legend_handles_labels", "range", "ax.legend", "fig.tight_layout", "tikzplotlib.save", "matplotlib.savefig", "numpy.array", "numpy.array", "numpy.minimum", "numpy.maximum", "len", "latent_plot_utils.distinct_labels_and_indices", "indices_list.append", "zip", "len", "paired_handles.append", "numpy.min", "numpy.max", "cm.get_cmap.", "ax.scatter", "distinct_labels.append", "indices.keys", "numpy.array", "matplotlib.legend_handler.HandlerTuple", "title.split"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.distinct_labels_and_indices", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "plot2D_overlay", "(", "data_list", ",", "labels_list", ",", "alpha_list", ",", "title", ")", ":", "\n", "\n", "    ", "x_min", ",", "x_max", "=", "np", ".", "array", "(", "(", "1e9", ",", "1e9", ")", ")", ",", "np", ".", "array", "(", "(", "-", "1e9", ",", "-", "1e9", ")", ")", "\n", "for", "data", "in", "data_list", ":", "\n", "        ", "x_min", "=", "np", ".", "minimum", "(", "x_min", ",", "np", ".", "min", "(", "data", ",", "axis", "=", "0", ")", ")", "\n", "x_max", "=", "np", ".", "maximum", "(", "x_max", ",", "np", ".", "max", "(", "data", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "data_list", ")", ")", ":", "\n", "        ", "data_list", "[", "i", "]", "=", "(", "data_list", "[", "i", "]", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", ")", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "8", ",", "8", ")", ")", "\n", "cjet", "=", "cm", ".", "get_cmap", "(", "\"jet\"", ")", "\n", "\n", "indices_list", "=", "[", "]", "\n", "distinct_labels", "=", "[", "]", "\n", "for", "labels", "in", "labels_list", ":", "\n", "        ", "_", ",", "cur_labels", ",", "indices", "=", "distinct_labels_and_indices", "(", "labels", ")", "\n", "indices_list", ".", "append", "(", "indices", ")", "\n", "for", "label", "in", "cur_labels", ":", "\n", "            ", "if", "label", "not", "in", "distinct_labels", ":", "\n", "                ", "distinct_labels", ".", "append", "(", "label", ")", "\n", "", "", "", "num_labels", "=", "len", "(", "distinct_labels", ")", "\n", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "distinct_labels", ")", ":", "\n", "        ", "res", "=", "0.0", "\n", "for", "data", ",", "labels", ",", "indices", ",", "alpha", "in", "zip", "(", "data_list", ",", "labels_list", ",", "indices_list", ",", "alpha_list", ")", ":", "\n", "            ", "if", "label", "in", "indices", ".", "keys", "(", ")", ":", "\n", "                ", "index", "=", "indices", "[", "label", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "c", "=", "cjet", "(", "(", "1.0", "*", "i", "+", "res", ")", "/", "(", "num_labels", "+", "1", ")", ")", "\n", "ax", ".", "scatter", "(", "data", "[", "index", ",", "0", "]", ",", "data", "[", "index", ",", "1", "]", ",", "label", "=", "label", ",", "c", "=", "[", "c", "]", ",", "alpha", "=", "alpha", ",", "linewidths", "=", "0.", ")", "\n", "res", "+=", "0.3", "\n", "\n", "", "", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "\n", "paired_handles", "=", "[", "]", "\n", "handles_tot", "=", "len", "(", "handles", ")", "//", "2", "\n", "for", "i", "in", "range", "(", "handles_tot", ")", ":", "\n", "        ", "paired_handles", ".", "append", "(", "(", "handles", "[", "i", "*", "2", "]", ",", "handles", "[", "i", "*", "2", "+", "1", "]", ")", ")", "\n", "\n", "", "ax", ".", "legend", "(", "handles", "=", "paired_handles", ",", "labels", "=", "distinct_labels", ",", "numpoints", "=", "1", ",", "\n", "handler_map", "=", "{", "tuple", ":", "HandlerTuple", "(", "ndivide", "=", "None", ")", "}", ",", "\n", "loc", "=", "\"center left\"", ",", "bbox_to_anchor", "=", "(", "1", ",", "0", ",", "1", ",", "1", ")", ",", "\n", "title", "=", "title", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "tikzplotlib", ".", "save", "(", "\"%s.tex\"", "%", "title", ",", "figure", "=", "fig", ",", "strict", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "\"%s.png\"", "%", "title", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D_phase": [[103, 130], ["matplotlib.figure", "plt.figure.add_axes", "plt.figure.add_axes", "list", "fig.add_axes.scatter", "tikzplotlib.save", "matplotlib.savefig", "numpy.min", "numpy.max", "map", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.sin", "float"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save"], ["", "def", "plot2D_phase", "(", "data", ",", "labels", ",", "title", ")", ":", "\n", "    ", "x_min", ",", "x_max", "=", "np", ".", "min", "(", "data", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "data", ",", "axis", "=", "0", ")", "\n", "data", "=", "(", "data", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", ")", "\n", "\n", "figsize", "=", "(", "8", ",", "8", ")", "\n", "add_width", "=", "2", "\n", "new_width", "=", "figsize", "[", "0", "]", "+", "add_width", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "new_width", ",", "figsize", "[", "1", "]", ")", ")", "\n", "\n", "fac_l", ",", "fac_r", "=", "figsize", "[", "0", "]", "/", "new_width", ",", "add_width", "/", "new_width", "\n", "\n", "rect_l", "=", "[", "0.1", ",", "0.1", ",", "0.8", ",", "0.8", "]", "\n", "rect_r", "=", "[", "0.", ",", "0.1", ",", "0.2", ",", "0.8", "]", "\n", "\n", "ax", "=", "fig", ".", "add_axes", "(", "np", ".", "array", "(", "rect_l", ")", "*", "np", ".", "array", "(", "[", "fac_l", ",", "1", ",", "fac_l", ",", "1", "]", ")", ")", "\n", "cax", "=", "fig", ".", "add_axes", "(", "np", ".", "array", "(", "rect_r", ")", "*", "np", ".", "array", "(", "[", "fac_r", ",", "1", ",", "fac_r", ",", "1", "]", ")", "+", "np", ".", "array", "(", "[", "fac_l", ",", "0", ",", "0", ",", "0", "]", ")", ")", "\n", "\n", "sin_labels", "=", "list", "(", "map", "(", "lambda", "l", ":", "np", ".", "sin", "(", "float", "(", "l", ")", ")", ",", "labels", ")", ")", "\n", "\n", "bla", "=", "ax", ".", "scatter", "(", "data", "[", ":", ",", "0", "]", ",", "data", "[", ":", ",", "1", "]", ",", "c", "=", "sin_labels", ",", "cmap", "=", "\"jet\"", ",", "alpha", "=", "1.0", ")", "\n", "\n", "# plt.colorbar(bla, cax=cax) <- some problem with the color bar..", "\n", "# fig.tight_layout()", "\n", "tikzplotlib", ".", "save", "(", "\"%s.tex\"", "%", "title", ",", "figure", "=", "fig", ",", "strict", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "\"%s.png\"", "%", "title", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_tsne": [[133, 139], ["sklearn.manifold.TSNE.fit_transform", "sklearn.manifold.TSNE"], "function", ["None"], ["def", "calc_tsne", "(", "raw", ")", ":", "\n", "    ", "global", "tsne", "\n", "if", "tsne", "is", "None", ":", "\n", "        ", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "'pca'", ",", "random_state", "=", "7", ")", "# n_iter = xxx", "\n", "", "result", "=", "tsne", ".", "fit_transform", "(", "raw", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_pca": [[141, 146], ["sklearn.decomposition.PCA.fit_transform", "sklearn.decomposition.PCA"], "function", ["None"], ["def", "calc_pca", "(", "raw", ")", ":", "\n", "    ", "global", "pca", "\n", "if", "pca", "is", "None", ":", "\n", "        ", "pca", "=", "PCA", "(", "n_components", "=", "2", ")", "\n", "", "return", "pca", ".", "fit_transform", "(", "raw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_pca_curve": [[147, 173], ["sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "numpy.cumsum", "matplotlib.figure", "plt.figure.add_axes", "fig.add_axes.plot", "fig.add_axes.plot", "fig.add_axes.annotate", "fig.add_axes.set_xticks", "fig.add_axes.set_yticks", "fig.add_axes.set_xlabel", "fig.add_axes.set_ylabel", "tikzplotlib.save", "matplotlib.savefig", "list", "list", "list", "numpy.sum", "range", "range", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save"], ["", "def", "calc_pca_curve", "(", "raw", ")", ":", "\n", "    ", "pcan", "=", "PCA", "(", ")", "\n", "pcan", ".", "fit_transform", "(", "raw", ")", "\n", "pct", "=", "pcan", ".", "explained_variance_ratio_", "\n", "prefix", "=", "np", ".", "cumsum", "(", "pct", "/", "np", ".", "sum", "(", "pct", ")", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "4", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0.2", ",", "0.2", ",", "0.6", ",", "0.6", "]", ")", "\n", "\n", "ax", ".", "plot", "(", "list", "(", "range", "(", "1", ",", "6", ")", ")", ",", "prefix", "[", ":", "5", "]", ")", "\n", "ax", ".", "plot", "(", "2", ",", "prefix", "[", "1", "]", ",", "\"ro\"", ")", "\n", "ax", ".", "annotate", "(", "\"{:.3f}% of variation\"", ".", "format", "(", "prefix", "[", "1", "]", "*", "100", ")", ",", "\n", "(", "2", ",", "prefix", "[", "1", "]", ")", ",", "\n", "textcoords", "=", "\"offset points\"", ",", "\n", "xytext", "=", "(", "60", ",", "-", "20", ")", ",", "\n", "ha", "=", "\"center\"", ")", "\n", "ax", ".", "set_xticks", "(", "list", "(", "range", "(", "1", ",", "6", ")", ")", ")", "\n", "ax", ".", "set_yticks", "(", "list", "(", "np", ".", "arange", "(", "0.5", ",", "1.01", ",", "0.1", ")", ")", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "\"number of components\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"explained variance ratio\"", ")", "\n", "\n", "name", "=", "\"pca_curve\"", "\n", "tikzplotlib", ".", "save", "(", "name", "+", "\".tex\"", ",", "figure", "=", "fig", ",", "strict", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "\"pca_curve.png\"", ")", "\n", "return", "pct", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot_tsne": [[175, 178], ["latent_plot_utils.calc_tsne", "latent_plot_utils.plot2D"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_tsne", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D"], ["", "def", "plot_tsne", "(", "raw", ",", "labels", ",", "title", ")", ":", "\n", "    ", "result", "=", "calc_tsne", "(", "raw", ")", "\n", "return", "plot2D", "(", "result", ",", "labels", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot_content_tsne": [[180, 192], ["os.path.exists", "latent_plot_utils.plot2D", "latent_plot_utils.plot2D", "print", "print", "latent_plot_utils.calc_tsne", "numpy.savez_compressed", "numpy.load"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_tsne", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["", "def", "plot_content_tsne", "(", "raw", ",", "slabels", ",", "clabels", ",", "title", ")", ":", "\n", "    ", "name", "=", "title", "+", "\"_tsne\"", "\n", "path", "=", "name", "+", "\".npz\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "\"%s already exists\"", "%", "path", ")", "\n", "result", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", "[", "\"result\"", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"start to produce %s\"", "%", "path", ")", "\n", "result", "=", "calc_tsne", "(", "raw", ")", "\n", "np", ".", "savez_compressed", "(", "name", ",", "result", "=", "result", ")", "\n", "", "plot2D", "(", "result", ",", "slabels", ",", "title", "+", "\"_style_labels\"", ")", "\n", "plot2D", "(", "result", ",", "clabels", ",", "title", "+", "\"_content_labels\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_many_blas": [[194, 204], ["list", "numpy.concatenate", "map", "len", "latent_plot_utils.calc_tsne"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_tsne"], ["", "def", "calc_many_blas", "(", "raws", ",", "calc_single", ")", ":", "\n", "    ", "lens", "=", "list", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "raws", ")", ")", "\n", "whole", "=", "np", ".", "concatenate", "(", "raws", ",", "axis", "=", "0", ")", "\n", "proj", "=", "calc_single", "(", "whole", ")", "\n", "ret", "=", "(", ")", "\n", "suml", "=", "0", "\n", "for", "l", "in", "lens", ":", "\n", "        ", "ret", "+=", "(", "proj", "[", "suml", ":", "suml", "+", "l", "]", ",", ")", "\n", "suml", "+=", "l", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.get_all_plots": [[206, 280], ["py_utils.ensure_dirs", "data[].keys", "latent_plot_utils.calc_pca", "os.path.join", "zip", "latent_plot_utils.get_all_plots.add_fig"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.ensure_dirs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_pca"], ["", "def", "get_all_plots", "(", "data", ",", "output_path", ",", "writers", ",", "iter", ",", "summary", "=", "True", ",", "\n", "style_cluster_protocols", "=", "(", "'pca'", ")", ",", "\n", "separate_compute", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    data: {\"train\": dict_train, \"test\": dict_test}\n    dict_train: {\"style2d_code\": blabla, etc.}\n    separate_compute: compute t-SNE for 2D & 3D separately\n    \"\"\"", "\n", "ensure_dirs", "(", "output_path", ")", "\n", "\n", "def", "fig_title", "(", "title", ")", ":", "\n", "        ", "return", "pjoin", "(", "output_path", ",", "title", ")", "\n", "\n", "", "def", "add_fig", "(", "fig", ",", "title", ",", "phase", ")", ":", "\n", "        ", "if", "summary", ":", "\n", "            ", "writers", "[", "phase", "]", ".", "add_figure", "(", "title", ",", "fig", ",", "global_step", "=", "iter", ")", "\n", "\n", "", "", "keys", "=", "data", "[", "\"train\"", "]", ".", "keys", "(", ")", "\n", "has2d", "=", "\"style2d_code\"", "in", "keys", "\n", "has3d", "=", "\"style3d_code\"", "in", "keys", "\n", "\n", "# style codes & adain params", "\n", "for", "suffix", "in", "[", "\"_code\"", ",", "\"_adain\"", "]", ":", "\n", "\n", "        ", "codes_raw", "=", "[", "]", "\n", "titles", "=", "[", "]", "\n", "phases", "=", "[", "]", "\n", "\n", "data_keys", "=", "[", "]", "\n", "if", "has2d", ":", "data_keys", ".", "append", "(", "\"style2d\"", "+", "suffix", ")", "\n", "if", "has3d", ":", "data_keys", ".", "append", "(", "\"style3d\"", "+", "suffix", ")", "\n", "for", "key", "in", "data_keys", ":", "\n", "            ", "for", "phase", "in", "[", "\"train\"", ",", "\"test\"", "]", ":", "\n", "                ", "codes_raw", ".", "append", "(", "data", "[", "phase", "]", "[", "key", "]", ")", "\n", "titles", ".", "append", "(", "f'{phase}_{key}'", ")", "\n", "phases", ".", "append", "(", "phase", ")", "\n", "\n", "# calc tsne with style2/3d, train/test altogether", "\n", "", "", "for", "name", ",", "protocol", "in", "zip", "(", "[", "'pca'", ",", "'tsne'", "]", ",", "[", "calc_pca", ",", "calc_tsne", "]", ")", ":", "\n", "            ", "if", "name", "not", "in", "style_cluster_protocols", ":", "\n", "                ", "continue", "\n", "", "style_codes", "=", "calc_many_blas", "(", "codes_raw", ",", "protocol", ")", "\n", "fig", "=", "plot2D_overlay", "(", "[", "style_codes", "[", "0", "]", ",", "style_codes", "[", "2", "]", "]", ",", "\n", "[", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"style\"", "]", ",", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"style\"", "]", "]", ",", "\n", "[", "1.0", ",", "0.5", "]", ",", "\n", "fig_title", "(", "f'joint_embedding_{name}{suffix}'", ")", ")", "\n", "add_fig", "(", "fig", ",", "f'joint_embedding_{name}{suffix}'", ",", "\"train\"", ")", "\n", "\n", "for", "i", ",", "(", "code", ",", "phase", ",", "title", ")", "in", "enumerate", "(", "zip", "(", "style_codes", ",", "phases", ",", "titles", ")", ")", ":", "\n", "                ", "if", "separate_compute", ":", "\n", "                    ", "code", "=", "protocol", "(", "codes_raw", "[", "i", "]", ")", "\n", "", "for", "label_type", "in", "[", "\"style\"", ",", "\"content\"", "]", ":", "\n", "                    ", "fig", "=", "plot2D", "(", "code", ",", "data", "[", "phase", "]", "[", "\"meta\"", "]", "[", "label_type", "]", ",", "fig_title", "(", "f'{title}_{name}_{label_type}'", ")", ")", "\n", "add_fig", "(", "fig", ",", "f'{title}_{name}_{label_type}'", ",", "phase", ")", "\n", "\n", "\n", "# content codes (train only)", "\n", "", "", "", "", "content_code_pca", "=", "calc_pca", "(", "data", "[", "\"train\"", "]", "[", "\"content_code\"", "]", ")", "\n", "\n", "for", "label", "in", "[", "\"style\"", ",", "\"content\"", ",", "\"phase\"", "]", ":", "\n", "        ", "if", "label", "==", "\"phase\"", ":", "\n", "            ", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"content\"", "]", ")", ")", "if", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"content\"", "]", "[", "i", "]", "==", "\"walk\"", "]", "\n", "walk_code", "=", "content_code_pca", "[", "np", ".", "array", "(", "indices", ")", "]", "\n", "phase_labels", "=", "[", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"phase\"", "]", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "fig", "=", "plot2D_phase", "(", "walk_code", ",", "phase_labels", ",", "fig_title", "(", "f'content_by_{label}'", ")", ")", "\n", "", "else", ":", "\n", "            ", "fig", "=", "plot2D", "(", "content_code_pca", ",", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "label", "]", ",", "fig_title", "(", "f'content_by_{label}'", ")", ")", "\n", "", "add_fig", "(", "fig", ",", "f'content_by_{label}'", ",", "\"train\"", ")", "\n", "\n", "", "\"\"\"\n    fig = show_images_from_disk(\"\", all_titles, 2, output_path + \"all_codes\")\n    if summary:\n        writers[\"train\"].add_figure(\"all codes\", fig, global_step=iter)\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.get_demo_plots": [[282, 316], ["py_utils.ensure_dirs", "latent_plot_utils.calc_many_blas", "latent_plot_utils.plot2D_overlay", "latent_plot_utils.calc_pca", "latent_plot_utils.plot2D_phase", "latent_plot_utils.plot2D", "os.path.join", "latent_plot_utils.get_all_plots.fig_title"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.ensure_dirs", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_many_blas", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D_overlay", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.calc_pca", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D_phase", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.plot2D"], ["", "def", "get_demo_plots", "(", "data", ",", "output_path", ")", ":", "\n", "    ", "\"\"\"\n    data: {\"train\": dict_train, \"test\": dict_test}\n    dict_train: {\"style2d_code\": blabla, etc.}\n    \"\"\"", "\n", "ensure_dirs", "(", "output_path", ")", "\n", "\n", "def", "fig_title", "(", "title", ")", ":", "\n", "        ", "return", "pjoin", "(", "output_path", ",", "title", ")", "\n", "\n", "", "style_labels", "=", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"style\"", "]", "\n", "\n", "adain_raw", "=", "[", "]", "\n", "for", "key", "in", "[", "\"style2d_adain\"", ",", "\"style3d_adain\"", "]", ":", "\n", "        ", "for", "phase", "in", "[", "\"train\"", ",", "\"test\"", "]", ":", "\n", "            ", "adain_raw", ".", "append", "(", "data", "[", "phase", "]", "[", "key", "]", ")", "\n", "", "", "adain_tsne", "=", "calc_many_blas", "(", "adain_raw", ",", "calc_tsne", ")", "\n", "plot2D_overlay", "(", "[", "adain_tsne", "[", "0", "]", ",", "adain_tsne", "[", "2", "]", "]", ",", "\n", "[", "style_labels", ",", "style_labels", "]", ",", "\n", "[", "1.0", ",", "0.5", "]", ",", "\n", "fig_title", "(", "f'joint_embedding_adain_tsne'", ")", ")", "\n", "\n", "for", "key", "in", "[", "\"style3d_code\"", ",", "\"style3d_adain\"", "]", ":", "\n", "        ", "tsne_code", "=", "calc_tsne", "(", "data", "[", "\"train\"", "]", "[", "key", "]", ")", "\n", "plot2D", "(", "tsne_code", ",", "style_labels", ",", "fig_title", "(", "f'{key}_tsne'", ")", ")", "\n", "\n", "", "content_code_pca", "=", "calc_pca", "(", "data", "[", "\"train\"", "]", "[", "\"content_code\"", "]", ")", "\n", "\n", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"content\"", "]", ")", ")", "if", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"content\"", "]", "[", "i", "]", "==", "\"walk\"", "]", "\n", "walk_code", "=", "content_code_pca", "[", "np", ".", "array", "(", "indices", ")", "]", "\n", "phase_labels", "=", "[", "data", "[", "\"train\"", "]", "[", "\"meta\"", "]", "[", "\"phase\"", "]", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "plot2D_phase", "(", "walk_code", ",", "phase_labels", ",", "fig_title", "(", "f'content_by_phase'", ")", ")", "\n", "\n", "plot2D", "(", "content_code_pca", ",", "style_labels", ",", "fig_title", "(", "f'content_by_style'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.show_images_from_disk": [[318, 328], ["os.path.join", "latent_plot_utils.show_images", "os.path.join", "images.append", "matplotlib.imread"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.show_images", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "show_images_from_disk", "(", "path", ",", "titles", ",", "rows", ",", "this_title", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "title", "in", "titles", ":", "\n", "        ", "name", "=", "\"%s.png\"", "%", "title", "\n", "input_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", "\n", "images", ".", "append", "(", "plt", ".", "imread", "(", "input_path", ")", ")", "\n", "\n", "", "this_title", "=", "os", ".", "path", ".", "join", "(", "path", ",", "this_title", ")", "\n", "\n", "return", "show_images", "(", "images", ",", "titles", ",", "this_title", ",", "rows", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.latent_plot_utils.show_images": [[330, 363], ["len", "numpy.ceil", "matplotlib.figure", "enumerate", "plt.figure.tight_layout", "matplotlib.subplots_adjust", "matplotlib.savefig", "len", "len", "numpy.array", "numpy.array", "zip", "plt.figure.add_subplot", "fig.add_subplot.set_axis_off", "matplotlib.imshow", "fig.add_subplot.set_title", "float", "matplotlib.gray"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "show_images", "(", "images", ",", "titles", ",", "this_title", ",", "rows", "=", "1", ")", ":", "\n", "    ", "\"\"\"Display a list of images in a single figure with matplotlib.\n\n    Parameters\n    ---------\n    images: List of np.arrays compatible with plt.imshow.\n\n    cols (Default = 1): Number of columns in figure (number of rows is\n                        set to np.ceil(n_images/float(cols))).\n\n    titles: List of titles corresponding to each image. Must have\n            the same length as titles.\n    \"\"\"", "\n", "assert", "(", "len", "(", "images", ")", "==", "len", "(", "titles", ")", ")", "\n", "n_images", "=", "len", "(", "images", ")", "\n", "cols", "=", "np", ".", "ceil", "(", "n_images", "/", "float", "(", "rows", ")", ")", "\n", "# if titles is None: titles = ['Image (%d)' % i for i in range(1,n_images + 1)]", "\n", "size", "=", "np", ".", "array", "(", "(", "8", ",", "8", ")", ")", "*", "np", ".", "array", "(", "rows", ",", "cols", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "size", ")", "\n", "for", "n", ",", "(", "image", ",", "title", ")", "in", "enumerate", "(", "zip", "(", "images", ",", "titles", ")", ")", ":", "\n", "        ", "a", "=", "fig", ".", "add_subplot", "(", "rows", ",", "cols", ",", "n", "+", "1", ")", "\n", "if", "image", ".", "ndim", "==", "2", ":", "\n", "            ", "plt", ".", "gray", "(", ")", "\n", "", "a", ".", "set_axis_off", "(", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "a", ".", "set_title", "(", "title", ")", "\n", "", "fig", ".", "tight_layout", "(", "pad", "=", "0", ",", "w_pad", "=", "0", ",", "h_pad", "=", "0", ")", "\n", "plt", ".", "subplots_adjust", "(", "wspace", "=", "0", ",", "hspace", "=", "0", ")", "\n", "\n", "# plt.show()", "\n", "plt", ".", "savefig", "(", "\"%s.png\"", "%", "this_title", ",", "dpi", "=", "150", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.__init__": [[157, 171], ["anim_view.glb2centered"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.glb2centered"], ["    ", "def", "__init__", "(", "self", ",", "title", ",", "motion", ",", "foot", ",", "limb_color", "=", "limb_colors", "[", "0", "]", ",", "joint_color", "=", "joint_colors", "[", "0", "]", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "motion", "=", "motion", "\n", "if", "centered", ":", "\n", "            ", "self", ".", "motion", "-=", "self", ".", "motion", "[", "0", ":", "1", ",", "0", ":", "1", ",", ":", "]", "\n", "self", ".", "motion", "=", "glb2centered", "(", "motion", ")", "\n", "", "self", ".", "T", "=", "motion", ".", "shape", "[", "0", "]", "\n", "self", ".", "dims", "=", "motion", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "foot", "=", "foot", "\n", "self", ".", "ax", "=", "None", "\n", "self", ".", "lines", "=", "None", "\n", "self", ".", "dots", "=", "None", "\n", "self", ".", "limb_color", "=", "limb_color", "\n", "self", ".", "joint_color", "=", "joint_color", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.set_anim": [[172, 183], ["anim_view.init_lines", "anim_view.init_dots", "anim_view.init_2d_plot", "anim_view.init_3d_plot", "anim_view.Motion4Anim.ax.set_title"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.init_lines", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.init_dots", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.init_2d_plot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.init_3d_plot"], ["", "def", "set_anim", "(", "self", ",", "fig", ",", "pos", ",", "single", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "dims", "==", "2", ":", "\n", "            ", "self", ".", "ax", "=", "init_2d_plot", "(", "fig", ",", "pos", ",", "scale", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ax", "=", "init_3d_plot", "(", "fig", ",", "pos", ",", "scale", ")", "\n", "", "if", "self", ".", "title", "is", "not", "None", ":", "\n", "            ", "self", ".", "ax", ".", "set_title", "(", "self", ".", "title", ")", "\n", "\n", "", "plot_scale", "=", "2.0", "if", "single", "else", "1.0", "\n", "self", ".", "lines", "=", "init_lines", "(", "self", ".", "ax", ",", "self", ".", "motion", ",", "self", ".", "dims", ",", "self", ".", "limb_color", ",", "scale", "=", "plot_scale", ")", "\n", "self", ".", "dots", "=", "init_dots", "(", "self", ".", "ax", ",", "self", ".", "motion", ",", "self", ".", "dims", ",", "self", ".", "joint_color", ",", "scale", "=", "plot_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.anim_skel": [[184, 186], ["anim_view._anim_skel"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view._anim_skel"], ["", "def", "anim_skel", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "_anim_skel", "(", "self", ".", "lines", ",", "self", ".", "dots", ",", "self", ".", "motion", ",", "self", ".", "dims", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.anim_foot_contact": [[187, 192], ["anim_view._anim_foot_contact"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view._anim_foot_contact"], ["", "def", "anim_foot_contact", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "foot", "is", "not", "None", ":", "\n", "            ", "return", "_anim_foot_contact", "(", "self", ".", "dots", ",", "self", ".", "foot", ",", "i", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.anim_i": [[193, 195], ["anim_view.Motion4Anim.anim_skel", "anim_view.Motion4Anim.anim_foot_contact"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.anim_skel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.anim_foot_contact"], ["", "", "def", "anim_i", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "anim_skel", "(", "i", ")", "+", "self", ".", "anim_foot_contact", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.init_2d_plot": [[49, 57], ["fig.add_subplot", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_xticks", "fig.add_subplot.set_yticks"], "function", ["None"], ["def", "init_2d_plot", "(", "fig", ",", "subplot_pos", ",", "scale", ")", ":", "\n", "    ", "ax", "=", "fig", ".", "add_subplot", "(", "subplot_pos", ")", "\n", "ax", ".", "set_xlim", "(", "-", "scale", "*", "40", ",", "scale", "*", "40", ")", "\n", "ax", ".", "set_ylim", "(", "-", "scale", "*", "40", ",", "scale", "*", "40", ")", "\n", "ax", ".", "set_xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.init_3d_plot": [[59, 104], ["fig.add_subplot", "fig.add_subplot.set_xlim3d", "fig.add_subplot.set_zlim3d", "fig.add_subplot.set_ylim3d", "fig.add_subplot.w_zaxis.set_pane_color", "fig.add_subplot.w_yaxis.set_pane_color", "fig.add_subplot.w_xaxis.set_pane_color", "numpy.arange", "numpy.arange", "len", "len", "numpy.meshgrid", "numpy.zeros", "range", "fig.add_subplot.plot_surface", "fig.add_subplot.w_zaxis.line.set_lw", "fig.add_subplot.w_yaxis.line.set_lw", "fig.add_subplot.w_yaxis.line.set_color", "fig.add_subplot.w_xaxis.line.set_lw", "fig.add_subplot.w_xaxis.line.set_color", "fig.add_subplot.set_xticks", "fig.add_subplot.set_yticks", "fig.add_subplot.set_zticks", "fig.add_subplot.view_init", "list", "list", "numpy.zeros", "range", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "init_3d_plot", "(", "fig", ",", "subplot_pos", ",", "scale", ")", ":", "\n", "    ", "ax", "=", "fig", ".", "add_subplot", "(", "subplot_pos", ",", "projection", "=", "'3d'", ")", "# This projection type determines the #axes", "\n", "rscale", "=", "scale", "*", "20", "# 15", "\n", "ax", ".", "set_xlim3d", "(", "-", "rscale", ",", "rscale", ")", "\n", "ax", ".", "set_zlim3d", "(", "-", "rscale", ",", "rscale", ")", "\n", "ax", ".", "set_ylim3d", "(", "-", "rscale", ",", "rscale", ")", "\n", "\n", "facec", "=", "(", "254", ",", "254", ",", "254", ")", "\n", "linec", "=", "(", "240", ",", "240", ",", "240", ")", "\n", "facec", "=", "list", "(", "np", ".", "array", "(", "facec", ")", "/", "256.0", ")", "+", "[", "1.0", "]", "\n", "linec", "=", "list", "(", "np", ".", "array", "(", "linec", ")", "/", "256.0", ")", "+", "[", "1.0", "]", "\n", "\n", "ax", ".", "w_zaxis", ".", "set_pane_color", "(", "facec", ")", "\n", "ax", ".", "w_yaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "w_xaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "\n", "X", "=", "np", ".", "arange", "(", "-", "20", ",", "25", ",", "5", ")", "\n", "Y", "=", "np", ".", "arange", "(", "-", "20", ",", "25", ",", "5", ")", "\n", "xlen", "=", "len", "(", "X", ")", "\n", "ylen", "=", "len", "(", "Y", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "X", ",", "Y", ")", "\n", "Z", "=", "np", ".", "zeros", "(", "X", ".", "shape", ")", "-", "rscale", "# place it at a lower surface", "\n", "\n", "colortuple", "=", "(", "facec", ",", "linec", ")", "\n", "colors", "=", "np", ".", "zeros", "(", "(", "Z", ".", "shape", "+", "(", "4", ",", ")", ")", ")", "\n", "for", "y", "in", "range", "(", "ylen", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "xlen", ")", ":", "\n", "            ", "colors", "[", "y", ",", "x", "]", "=", "colortuple", "[", "(", "x", "+", "y", ")", "%", "len", "(", "colortuple", ")", "]", "\n", "\n", "# Plot the surface with face colors taken from the array we made.", "\n", "", "", "surf", "=", "ax", ".", "plot_surface", "(", "X", ",", "Y", ",", "Z", ",", "facecolors", "=", "colors", ",", "linewidth", "=", "0.", ",", "zorder", "=", "-", "1", ",", "shade", "=", "False", ")", "\n", "\n", "ax", ".", "w_zaxis", ".", "line", ".", "set_lw", "(", "0.", ")", "\n", "ax", ".", "w_yaxis", ".", "line", ".", "set_lw", "(", "0.", ")", "\n", "ax", ".", "w_yaxis", ".", "line", ".", "set_color", "(", "linec", ")", "\n", "ax", ".", "w_xaxis", ".", "line", ".", "set_lw", "(", "0.", ")", "\n", "ax", ".", "w_xaxis", ".", "line", ".", "set_color", "(", "linec", ")", "\n", "\n", "ax", ".", "set_xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "ax", ".", "set_zticks", "(", "[", "]", ",", "[", "]", ")", "\n", "\n", "ax", ".", "view_init", "(", "20", ",", "-", "60", ")", "# -40 for the other direction", "\n", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.init_lines": [[106, 112], ["range", "ax.plot", "range", "matplotlib.Stroke", "matplotlib.Normal"], "function", ["None"], ["", "def", "init_lines", "(", "ax", ",", "anim", ",", "dim", ",", "color", "=", "limb_colors", "[", "0", "]", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "init_pos", "=", "[", "[", "0", ",", "0", "]", "for", "i", "in", "range", "(", "dim", ")", "]", "\n", "return", "[", "ax", ".", "plot", "(", "*", "init_pos", ",", "color", "=", "color", ",", "zorder", "=", "3", ",", "\n", "linewidth", "=", "2", "*", "scale", ",", "solid_capstyle", "=", "'round'", ",", "\n", "path_effects", "=", "[", "pe", ".", "Stroke", "(", "linewidth", "=", "3", "*", "scale", ",", "foreground", "=", "'black'", ")", ",", "\n", "pe", ".", "Normal", "(", ")", "]", ")", "[", "0", "]", "for", "_", "in", "range", "(", "anim", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.init_dots": [[114, 121], ["range", "ax.plot", "range", "matplotlib.Stroke", "matplotlib.Normal"], "function", ["None"], ["", "def", "init_dots", "(", "ax", ",", "anim", ",", "dim", ",", "color", "=", "'white'", ",", "scale", "=", "1.0", ")", ":", "\n", "    ", "init_pos", "=", "[", "[", "0", "]", "for", "i", "in", "range", "(", "dim", ")", "]", "\n", "return", "[", "ax", ".", "plot", "(", "*", "init_pos", ",", "color", "=", "color", ",", "zorder", "=", "3", ",", "\n", "linewidth", "=", "2", ",", "linestyle", "=", "''", ",", "\n", "marker", "=", "\"o\"", ",", "markersize", "=", "joint_sizes", "[", "i", "]", "*", "scale", ",", "\n", "path_effects", "=", "[", "pe", ".", "Stroke", "(", "linewidth", "=", "1.5", "*", "scale", ",", "foreground", "=", "'black'", ")", ",", "pe", ".", "Normal", "(", ")", "]", "\n", ")", "[", "0", "]", "for", "i", "in", "range", "(", "anim", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view._anim_skel": [[123, 146], ["min", "range", "range", "len", "len", "dots[].set_data", "dots[].set_3d_properties", "len", "dots[].set_data", "lines[].set_data", "lines[].set_3d_properties", "lines[].set_data"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "_anim_skel", "(", "lines", ",", "dots", ",", "anim", ",", "dim", ",", "i", ")", ":", "\n", "    ", "i", "=", "min", "(", "i", ",", "len", "(", "anim", ")", "-", "1", ")", "\n", "if", "dim", "==", "3", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "            ", "if", "parents", "[", "j", "]", "!=", "-", "1", ":", "\n", "                ", "lines", "[", "j", "]", ".", "set_data", "(", "\n", "[", "anim", "[", "i", ",", "j", ",", "0", "]", ",", "anim", "[", "i", ",", "parents", "[", "j", "]", ",", "0", "]", "]", ",", "\n", "[", "-", "anim", "[", "i", ",", "j", ",", "2", "]", ",", "-", "anim", "[", "i", ",", "parents", "[", "j", "]", ",", "2", "]", "]", ")", "\n", "lines", "[", "j", "]", ".", "set_3d_properties", "(", "\n", "[", "anim", "[", "i", ",", "j", ",", "1", "]", ",", "anim", "[", "i", ",", "parents", "[", "j", "]", ",", "1", "]", "]", ")", "\n", "\n", "", "dots", "[", "j", "]", ".", "set_data", "(", "[", "anim", "[", "i", ",", "j", ",", "0", "]", "]", ",", "[", "-", "anim", "[", "i", ",", "j", ",", "2", "]", "]", ")", "\n", "dots", "[", "j", "]", ".", "set_3d_properties", "(", "[", "anim", "[", "i", ",", "j", ",", "1", "]", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "            ", "if", "parents", "[", "j", "]", "!=", "-", "1", ":", "\n", "                ", "lines", "[", "j", "]", ".", "set_data", "(", "\n", "[", "anim", "[", "i", ",", "j", ",", "0", "]", ",", "anim", "[", "i", ",", "parents", "[", "j", "]", ",", "0", "]", "]", ",", "\n", "[", "anim", "[", "i", ",", "j", ",", "1", "]", ",", "anim", "[", "i", ",", "parents", "[", "j", "]", ",", "1", "]", "]", ")", "\n", "", "dots", "[", "j", "]", ".", "set_data", "(", "[", "anim", "[", "i", ",", "j", ",", "0", "]", "]", ",", "[", "anim", "[", "i", ",", "j", ",", "1", "]", "]", ")", "\n", "\n", "", "", "return", "[", "lines", ",", "dots", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view._anim_foot_contact": [[148, 154], ["min", "enumerate", "dots[].set_color", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "_anim_foot_contact", "(", "dots", ",", "foot_contact", ",", "i", ")", ":", "\n", "    ", "i", "=", "min", "(", "i", ",", "len", "(", "foot_contact", ")", "-", "1", ")", "\n", "for", "j", ",", "f_idx", "in", "enumerate", "(", "joint_foot_indices", ")", ":", "\n", "        ", "color", "=", "'red'", "if", "foot_contact", "[", "i", ",", "j", "]", "==", "1.0", "else", "'blue'", "\n", "dots", "[", "f_idx", "]", ".", "set_color", "(", "color", ")", "\n", "", "return", "[", "dots", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.plot_motions": [[197, 235], ["len", "matplotlib.figure", "enumerate", "matplotlib.tight_layout", "matplotlib.FuncAnimation", "isinstance", "max", "mt.set_anim", "numpy.arange", "print", "animation.FuncAnimation.save", "print", "matplotlib.show", "input", "mt.anim_i", "os.path.exists", "os.mkdir", "save_path.endswith", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.set_anim", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.Motion4Anim.anim_i"], ["", "", "def", "plot_motions", "(", "motions", ",", "size", "=", "4", ",", "interval", "=", "26.67", ",", "fps", "=", "10", ",", "save", "=", "False", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"motions: list of Motion4Anim}\"\"\"", "\n", "if", "not", "isinstance", "(", "motions", ",", "list", ")", ":", "\n", "        ", "motions", "=", "[", "motions", "]", "\n", "\n", "", "N", "=", "len", "(", "motions", ")", "\n", "T", "=", "0", "\n", "for", "mt", "in", "motions", ":", "\n", "        ", "T", "=", "max", "(", "T", ",", "mt", ".", "T", ")", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "N", "*", "size", ",", "size", ")", ")", "\n", "init_pos", "=", "100", "+", "10", "*", "N", "+", "1", "\n", "\n", "for", "i", ",", "mt", "in", "enumerate", "(", "motions", ")", ":", "\n", "        ", "mt", ".", "set_anim", "(", "fig", ",", "init_pos", "+", "i", ")", "\n", "\n", "", "def", "animate", "(", "i", ")", ":", "\n", "        ", "changed", "=", "[", "]", "\n", "for", "mt", "in", "motions", ":", "\n", "            ", "changed", "+=", "mt", ".", "anim_i", "(", "i", ")", "\n", "", "return", "changed", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "ani", "=", "animation", ".", "FuncAnimation", "(", "fig", ",", "animate", ",", "np", ".", "arange", "(", "T", ")", ",", "interval", "=", "interval", ")", "\n", "\n", "if", "save", ":", "\n", "        ", "assert", "save_path", "is", "not", "None", ",", "\"save_path is None!\"", "\n", "print", "(", "f'Start saving motion to {save_path}'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ")", "\n", "", "if", "not", "save_path", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "            ", "save_path", "+=", "'.mp4'", "\n", "", "ani", ".", "save", "(", "save_path", ",", "writer", "=", "'ffmpeg'", ",", "fps", "=", "fps", ")", "\n", "print", "(", "f'Motion saved to {save_path}'", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "opt", "=", "input", "(", "\"save? Yes/No/Exit\"", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.glb2centered": [[237, 245], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean"], ["", "", "def", "glb2centered", "(", "glb", ")", ":", "\n", "    ", "\"\"\"\n    input: positions - glb [T, J, (3/2)] -- single clip!\n    output: motion with average root (x(, z)) = (0(, 0))\n    \"\"\"", "\n", "root_avg", "=", "np", ".", "mean", "(", "glb", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "root_avg", "[", "0", ",", "0", ",", "1", "]", "=", "0", "# y shouldn't change", "\n", "return", "glb", "-", "root_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.rotate_motion": [[247, 272], ["anim_view.rotate_motion.rotate_motion2d"], "function", ["None"], ["", "def", "rotate_motion", "(", "mt", ")", ":", "\n", "    ", "def", "rotate_motion3d", "(", "mt", ")", ":", "\n", "        ", "if", "mt", "[", "-", "1", ",", "0", ",", "0", "]", "-", "mt", "[", "0", ",", "0", ",", "0", "]", "<", "0", ":", "\n", "            ", "mt", "[", "...", ",", "0", "]", "=", "-", "mt", "[", "...", ",", "0", "]", "\n", "", "if", "mt", "[", "-", "1", ",", "0", ",", "2", "]", "-", "mt", "[", "0", ",", "0", ",", "2", "]", "<", "0", ":", "\n", "            ", "mt", "[", "...", ",", "2", "]", "=", "-", "mt", "[", "...", ",", "2", "]", "\n", "", "if", "mt", "[", "-", "1", ",", "0", ",", "0", "]", "-", "mt", "[", "0", ",", "0", ",", "0", "]", "<", "mt", "[", "-", "1", ",", "0", ",", "2", "]", "-", "mt", "[", "0", ",", "0", ",", "2", "]", ":", "# move in z dir", "\n", "            ", "tmp", "=", "mt", "[", "...", ",", "0", "]", ".", "copy", "(", ")", "\n", "mt", "[", "...", ",", "0", "]", "=", "mt", "[", "...", ",", "2", "]", ".", "copy", "(", ")", "\n", "mt", "[", "...", ",", "2", "]", "=", "tmp", "\n", "", "return", "mt", "\n", "\n", "", "def", "rotate_motion2d", "(", "mt", ")", ":", "\n", "        ", "\"\"\"\n        if mt[-1, 0, 0] > mt[0, 0, 0]:\n            mt[..., 0] = -mt[..., 0]\n        \"\"\"", "\n", "return", "mt", "\n", "\n", "", "if", "mt", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "return", "rotate_motion2d", "(", "mt", ")", "\n", "", "elif", "mt", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "return", "rotate_motion3d", "(", "mt", ")", "\n", "", "else", ":", "\n", "        ", "assert", "0", ",", "\"motion dimension is {mt.shape[-1]}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.visualize": [[274, 291], ["enumerate", "anim_view.plot_motions", "data.items", "py_utils.to_float().copy", "anim_view.rotate_motion", "motions.append", "anim_view.Motion4Anim", "py_utils.to_float"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.plot_motions", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.rotate_motion", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.to_float"], ["", "", "def", "visualize", "(", "data", ",", "save", "=", "False", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"data: dict {title: {motion:xxx, foot_contact:xxx}}\"\"\"", "\n", "\n", "motions", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "title", ",", "motion_dict", ")", "in", "enumerate", "(", "data", ".", "items", "(", ")", ")", ":", "\n", "        ", "motion", "=", "to_float", "(", "motion_dict", "[", "'motion'", "]", ")", ".", "copy", "(", ")", "\n", "motion", "=", "rotate_motion", "(", "motion", ")", "# [T, J, 2/3]", "\n", "foot_contact", "=", "motion_dict", "[", "'foot_contact'", "]", "# [T, 4]", "\n", "\n", "motions", ".", "append", "(", "Motion4Anim", "(", "title", ",", "\n", "motion", ",", "\n", "foot_contact", ",", "\n", "limb_colors", "[", "i", "]", ",", "\n", "joint_colors", "[", "i", "]", "\n", ")", ")", "\n", "", "plot_motions", "(", "motions", ",", "save", "=", "save", ",", "save_path", "=", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.to_numpy": [[293, 301], ["isinstance", "output.append", "output.append", "d.detach().numpy", "d.detach"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "to_numpy", "(", "data", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "for", "d", "in", "data", ":", "\n", "        ", "if", "isinstance", "(", "d", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "output", ".", "append", "(", "d", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", ".", "append", "(", "d", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.parse_args": [[303, 308], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--file'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.load_output": [[310, 314], ["torch.load", "print", "list", "torch.load.keys"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["", "def", "load_output", "(", "filename", ")", ":", "\n", "    ", "data", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "'cpu'", ")", "\n", "print", "(", "list", "(", "data", ".", "keys", "(", ")", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.main": [[316, 347], ["anim_view.load_output", "len", "list", "print", "range", "foot_contact[].transpose", "anim_view.visualize", "AnimationData.from_network_output().get_global_positions", "AnimationData2D.from_style2d().get_projection", "AnimationData.from_network_output().get_global_positions", "str", "str", "AnimationData.from_network_output", "AnimationData2D.from_style2d", "AnimationData.from_network_output", "py_utils.to_float", "py_utils.to_float", "py_utils.to_float"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.load_output", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.visualize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_global_positions", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.get_projection", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_global_positions", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_network_output", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.from_style2d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_network_output", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.to_float", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.to_float", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.code_rib.py_utils.to_float"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "from", "utils", ".", "animation_data", "import", "AnimationData", "\n", "from", "utils", ".", "animation_2d_data", "import", "AnimationData2D", "\n", "data", "=", "load_output", "(", "args", ".", "file", ")", "\n", "total", "=", "len", "(", "data", "[", "\"trans\"", "]", ")", "\n", "content", ",", "style", ",", "foot_contact", ",", "trans", ",", "recon", "=", "data", "[", "\"content\"", "]", ",", "data", "[", "\"style\"", "]", ",", "data", "[", "\"foot_contact\"", "]", ",", "data", "[", "\"trans\"", "]", ",", "data", "[", "\"recon\"", "]", "\n", "content_meta", ",", "style_meta", "=", "data", "[", "\"content_meta\"", "]", ",", "data", "[", "\"style_meta\"", "]", "\n", "selected", "=", "list", "(", "range", "(", "total", ")", ")", "\n", "print", "(", "total", ")", "\n", "# for test, selected = [6, 12, 7, 11, 4]", "\n", "for", "i", "in", "selected", ":", "\n", "\n", "        ", "if", "style_meta", "[", "i", "]", "==", "0", ":", "\n", "            ", "style_meta", "[", "i", "]", "=", "{", "\"style\"", ":", "[", "str", "(", "i", ")", "]", "}", "\n", "", "if", "content_meta", "[", "i", "]", "==", "0", ":", "\n", "            ", "content_meta", "[", "i", "]", "=", "{", "\"style\"", ":", "[", "str", "(", "i", ")", "]", "}", "\n", "\n", "", "vis_dict", "=", "{", "}", "\n", "cur_foot_contact", "=", "foot_contact", "[", "i", "]", ".", "transpose", "(", "1", ",", "0", ")", "\n", "if", "style", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "content", "[", "i", "]", ".", "shape", "[", "0", "]", ":", "# 3d", "\n", "            ", "cur_style", "=", "AnimationData", ".", "from_network_output", "(", "to_float", "(", "style", "[", "i", "]", ")", ")", ".", "get_global_positions", "(", ")", "\n", "", "else", ":", "# 2d", "\n", "            ", "cur_style", "=", "AnimationData2D", ".", "from_style2d", "(", "to_float", "(", "style", "[", "i", "]", ")", ")", ".", "get_projection", "(", ")", "\n", "", "raws", "=", "[", "trans", "[", "i", "]", ",", "recon", "[", "i", "]", ",", "content", "[", "i", "]", "]", "\n", "cur_trans", ",", "cur_recon", ",", "cur_content", "=", "[", "AnimationData", ".", "from_network_output", "(", "to_float", "(", "raw", ")", ")", ".", "get_global_positions", "(", ")", "for", "raw", "in", "raws", "]", "\n", "vis_dict", "[", "\" \"", ".", "join", "(", "(", "\"style\"", ",", "style_meta", "[", "i", "]", "[", "\"style\"", "]", "[", "0", "]", ")", ")", "]", "=", "{", "\"motion\"", ":", "cur_style", ",", "\"foot_contact\"", ":", "None", "}", "\n", "vis_dict", "[", "\"trans\"", "]", "=", "{", "\"motion\"", ":", "cur_trans", ",", "\"foot_contact\"", ":", "cur_foot_contact", "}", "\n", "vis_dict", "[", "\"recon\"", "]", "=", "{", "\"motion\"", ":", "cur_recon", ",", "\"foot_contact\"", ":", "cur_foot_contact", "}", "\n", "vis_dict", "[", "\" \"", ".", "join", "(", "(", "\"content\"", ",", "content_meta", "[", "i", "]", "[", "\"style\"", "]", "[", "0", "]", ")", ")", "]", "=", "{", "\"motion\"", ":", "cur_content", ",", "\"foot_contact\"", ":", "cur_foot_contact", "}", "\n", "\n", "visualize", "(", "vis_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__init__": [[23, 35], ["isinstance", "isinstance", "TypeError", "len", "numpy.array", "type"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "__init__", "(", "self", ",", "qs", ")", ":", "\n", "        ", "if", "isinstance", "(", "qs", ",", "np", ".", "ndarray", ")", ":", "\n", "\n", "            ", "if", "len", "(", "qs", ".", "shape", ")", "==", "1", ":", "qs", "=", "np", ".", "array", "(", "[", "qs", "]", ")", "\n", "self", ".", "qs", "=", "qs", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "qs", ",", "Quaternions", ")", ":", "\n", "            ", "self", ".", "qs", "=", "qs", ".", "qs", "\n", "return", "\n", "\n", "", "raise", "TypeError", "(", "'Quaternions must be constructed from iterable, numpy array, or Quaternions, not %s'", "%", "type", "(", "qs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__str__": [[36, 37], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "return", "\"Quaternions(\"", "+", "str", "(", "self", ".", "qs", ")", "+", "\")\"", "\n", "def", "__repr__", "(", "self", ")", ":", "return", "\"Quaternions(\"", "+", "repr", "(", "self", ".", "qs", ")", "+", "\")\"", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__repr__": [[37, 38], ["repr"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "return", "\"Quaternions(\"", "+", "repr", "(", "self", ".", "qs", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions._broadcast": [[41, 62], ["isinstance", "numpy.array", "numpy.all", "numpy.array", "numpy.array", "len", "len", "TypeError", "numpy.all", "TypeError", "sqs.copy", "oqs.copy", "numpy.where", "sqsn.repeat.repeat.repeat", "numpy.where", "oqsn.repeat.repeat.repeat", "numpy.ones", "numpy.ones", "numpy.ones", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["@", "classmethod", "\n", "def", "_broadcast", "(", "cls", ",", "sqs", ",", "oqs", ",", "scalar", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "oqs", ",", "float", ")", ":", "return", "sqs", ",", "oqs", "*", "np", ".", "ones", "(", "sqs", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "ss", "=", "np", ".", "array", "(", "sqs", ".", "shape", ")", "if", "not", "scalar", "else", "np", ".", "array", "(", "sqs", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "os", "=", "np", ".", "array", "(", "oqs", ".", "shape", ")", "\n", "\n", "if", "len", "(", "ss", ")", "!=", "len", "(", "os", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Quaternions cannot broadcast together shapes %s and %s'", "%", "(", "sqs", ".", "shape", ",", "oqs", ".", "shape", ")", ")", "\n", "\n", "", "if", "np", ".", "all", "(", "ss", "==", "os", ")", ":", "return", "sqs", ",", "oqs", "\n", "\n", "if", "not", "np", ".", "all", "(", "(", "ss", "==", "os", ")", "|", "(", "os", "==", "np", ".", "ones", "(", "len", "(", "os", ")", ")", ")", "|", "(", "ss", "==", "np", ".", "ones", "(", "len", "(", "ss", ")", ")", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Quaternions cannot broadcast together shapes %s and %s'", "%", "(", "sqs", ".", "shape", ",", "oqs", ".", "shape", ")", ")", "\n", "\n", "", "sqsn", ",", "oqsn", "=", "sqs", ".", "copy", "(", ")", ",", "oqs", ".", "copy", "(", ")", "\n", "\n", "for", "a", "in", "np", ".", "where", "(", "ss", "==", "1", ")", "[", "0", "]", ":", "sqsn", "=", "sqsn", ".", "repeat", "(", "os", "[", "a", "]", ",", "axis", "=", "a", ")", "\n", "for", "a", "in", "np", ".", "where", "(", "os", "==", "1", ")", "[", "0", "]", ":", "oqsn", "=", "oqsn", ".", "repeat", "(", "ss", "[", "a", "]", ",", "axis", "=", "a", ")", "\n", "\n", "return", "sqsn", ",", "oqsn", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__add__": [[65, 66], ["None"], "methods", ["None"], ["def", "__add__", "(", "self", ",", "other", ")", ":", "return", "self", "*", "other", "\n", "def", "__sub__", "(", "self", ",", "other", ")", ":", "return", "self", "/", "other", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__sub__": [[66, 67], ["None"], "methods", ["None"], ["def", "__sub__", "(", "self", ",", "other", ")", ":", "return", "self", "/", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__mul__": [[70, 118], ["isinstance", "TypeError", "Quaternions_old.Quaternions._broadcast", "numpy.empty", "Quaternions_old.Quaternions", "isinstance", "Quaternions_old.Quaternions", "isinstance", "isinstance", "Quaternions_old.Quaternions.slerp", "numpy.concatenate", "Quaternions_old.Quaternions.id_like", "str", "type", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.slerp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id_like"], ["def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        Quaternion multiplication has three main methods.\n        \n        When multiplying a Quaternions array by Quaternions\n        normal quaternion multiplication is performed.\n        \n        When multiplying a Quaternions array by a vector\n        array of the same shape, where the last axis is 3,\n        it is assumed to be a Quaternion by 3D-Vector \n        multiplication and the 3D-Vectors are rotated\n        in space by the Quaternions.\n        \n        When multipplying a Quaternions array by a scalar\n        or vector of different shape it is assumed to be\n        a Quaternions by Scalars multiplication and the\n        Quaternions are scaled using Slerp and the identity\n        quaternions.\n        \"\"\"", "\n", "\n", "\"\"\" If Quaternions type do Quaternions * Quaternions \"\"\"", "\n", "if", "isinstance", "(", "other", ",", "Quaternions", ")", ":", "\n", "            ", "sqs", ",", "oqs", "=", "Quaternions", ".", "_broadcast", "(", "self", ".", "qs", ",", "other", ".", "qs", ")", "\n", "\n", "q0", "=", "sqs", "[", "...", ",", "0", "]", ";", "q1", "=", "sqs", "[", "...", ",", "1", "]", ";", "\n", "q2", "=", "sqs", "[", "...", ",", "2", "]", ";", "q3", "=", "sqs", "[", "...", ",", "3", "]", ";", "\n", "r0", "=", "oqs", "[", "...", ",", "0", "]", ";", "r1", "=", "oqs", "[", "...", ",", "1", "]", ";", "\n", "r2", "=", "oqs", "[", "...", ",", "2", "]", ";", "r3", "=", "oqs", "[", "...", ",", "3", "]", ";", "\n", "\n", "qs", "=", "np", ".", "empty", "(", "sqs", ".", "shape", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "r0", "*", "q0", "-", "r1", "*", "q1", "-", "r2", "*", "q2", "-", "r3", "*", "q3", "\n", "qs", "[", "...", ",", "1", "]", "=", "r0", "*", "q1", "+", "r1", "*", "q0", "-", "r2", "*", "q3", "+", "r3", "*", "q2", "\n", "qs", "[", "...", ",", "2", "]", "=", "r0", "*", "q2", "+", "r1", "*", "q3", "+", "r2", "*", "q0", "-", "r3", "*", "q1", "\n", "qs", "[", "...", ",", "3", "]", "=", "r0", "*", "q3", "-", "r1", "*", "q2", "+", "r2", "*", "q1", "+", "r3", "*", "q0", "\n", "\n", "return", "Quaternions", "(", "qs", ")", "\n", "\n", "", "\"\"\" If array type do Quaternions * Vectors \"\"\"", "\n", "if", "isinstance", "(", "other", ",", "np", ".", "ndarray", ")", "and", "other", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "            ", "vs", "=", "Quaternions", "(", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "other", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "1", ",", ")", ")", ",", "other", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "return", "(", "self", "*", "(", "vs", "*", "-", "self", ")", ")", ".", "imaginaries", "\n", "\n", "", "\"\"\" If float do Quaternions * Scalars \"\"\"", "\n", "if", "isinstance", "(", "other", ",", "np", ".", "ndarray", ")", "or", "isinstance", "(", "other", ",", "float", ")", ":", "\n", "            ", "return", "Quaternions", ".", "slerp", "(", "Quaternions", ".", "id_like", "(", "self", ")", ",", "self", ",", "other", ")", "\n", "\n", "", "raise", "TypeError", "(", "'Cannot multiply/add Quaternions with type %s'", "%", "str", "(", "type", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__div__": [[119, 133], ["isinstance", "isinstance", "isinstance", "TypeError", "str", "type"], "methods", ["None"], ["", "def", "__div__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        When a Quaternion type is supplied, division is defined\n        as multiplication by the inverse of that Quaternion.\n        \n        When a scalar or vector is supplied it is defined\n        as multiplicaion of one over the supplied value.\n        Essentially a scaling.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "other", ",", "Quaternions", ")", ":", "return", "self", "*", "(", "-", "other", ")", "\n", "if", "isinstance", "(", "other", ",", "np", ".", "ndarray", ")", ":", "return", "self", "*", "(", "1.0", "/", "other", ")", "\n", "if", "isinstance", "(", "other", ",", "float", ")", ":", "return", "self", "*", "(", "1.0", "/", "other", ")", "\n", "raise", "TypeError", "(", "'Cannot divide/subtract Quaternions with type %s'", "+", "str", "(", "type", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__eq__": [[134, 135], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "qs", "==", "other", ".", "qs", "\n", "def", "__ne__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "qs", "!=", "other", ".", "qs", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__ne__": [[135, 136], ["None"], "methods", ["None"], ["def", "__ne__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "qs", "!=", "other", ".", "qs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__neg__": [[137, 140], ["Quaternions_old.Quaternions", "numpy.array"], "methods", ["None"], ["def", "__neg__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Invert Quaternions \"\"\"", "\n", "return", "Quaternions", "(", "self", ".", "qs", "*", "np", ".", "array", "(", "[", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__abs__": [[141, 148], ["Quaternions_old.Quaternions.normalized().copy", "numpy.sum", "numpy.sum", "Quaternions_old.Quaternions.normalized", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "def", "__abs__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Unify Quaternions To Single Pole \"\"\"", "\n", "qabs", "=", "self", ".", "normalized", "(", ")", ".", "copy", "(", ")", "\n", "top", "=", "np", ".", "sum", "(", "(", "qabs", ".", "qs", ")", "*", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "bot", "=", "np", ".", "sum", "(", "(", "-", "qabs", ".", "qs", ")", "*", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "qabs", ".", "qs", "[", "top", "<", "bot", "]", "=", "-", "qabs", ".", "qs", "[", "top", "<", "bot", "]", "\n", "return", "qabs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__iter__": [[149, 150], ["iter"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "return", "iter", "(", "self", ".", "qs", ")", "\n", "def", "__len__", "(", "self", ")", ":", "return", "len", "(", "self", ".", "qs", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__len__": [[150, 151], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "__len__", "(", "self", ")", ":", "return", "len", "(", "self", ".", "qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__getitem__": [[152, 153], ["Quaternions_old.Quaternions"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "k", ")", ":", "return", "Quaternions", "(", "self", ".", "qs", "[", "k", "]", ")", "\n", "def", "__setitem__", "(", "self", ",", "k", ",", "v", ")", ":", "self", ".", "qs", "[", "k", "]", "=", "v", ".", "qs", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.__setitem__": [[153, 154], ["None"], "methods", ["None"], ["def", "__setitem__", "(", "self", ",", "k", ",", "v", ")", ":", "self", ".", "qs", "[", "k", "]", "=", "v", ".", "qs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.lengths": [[155, 158], ["numpy.sum"], "methods", ["None"], ["@", "property", "\n", "def", "lengths", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "self", ".", "qs", "**", "2.0", ",", "axis", "=", "-", "1", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.reals": [[159, 162], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "qs", "[", "...", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.imaginaries": [[163, 166], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "imaginaries", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "qs", "[", "...", ",", "1", ":", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.shape": [[167, 169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "return", "self", ".", "qs", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.repeat": [[170, 172], ["Quaternions_old.Quaternions", "Quaternions_old.Quaternions.qs.repeat"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["def", "repeat", "(", "self", ",", "n", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "Quaternions", "(", "self", ".", "qs", ".", "repeat", "(", "n", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.normalized": [[173, 175], ["Quaternions_old.Quaternions"], "methods", ["None"], ["", "def", "normalized", "(", "self", ")", ":", "\n", "        ", "return", "Quaternions", "(", "self", ".", "qs", "/", "self", ".", "lengths", "[", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.log": [[176, 182], ["abs", "numpy.sqrt", "Quaternions_old.Quaternions.normalized", "numpy.sum", "numpy.arctan2"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "norm", "=", "abs", "(", "self", ".", "normalized", "(", ")", ")", "\n", "imgs", "=", "norm", ".", "imaginaries", "\n", "lens", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "imgs", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "lens", "=", "np", ".", "arctan2", "(", "lens", ",", "norm", ".", "reals", ")", "/", "(", "lens", "+", "1e-10", ")", "\n", "return", "imgs", "*", "lens", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.constrained": [[183, 199], ["numpy.sum", "Quaternions_old.Quaternions.exp", "Quaternions_old.Quaternions.exp", "Quaternions_old.Quaternions.exp", "Quaternions_old.Quaternions.dot", "Quaternions_old.Quaternions.dot", "numpy.arctan2", "numpy.arctan2"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "constrained", "(", "self", ",", "axis", ")", ":", "\n", "\n", "        ", "rl", "=", "self", ".", "reals", "\n", "im", "=", "np", ".", "sum", "(", "axis", "*", "self", ".", "imaginaries", ",", "axis", "=", "-", "1", ")", "\n", "\n", "t1", "=", "-", "2", "*", "np", ".", "arctan2", "(", "rl", ",", "im", ")", "+", "np", ".", "pi", "\n", "t2", "=", "-", "2", "*", "np", ".", "arctan2", "(", "rl", ",", "im", ")", "-", "np", ".", "pi", "\n", "\n", "top", "=", "Quaternions", ".", "exp", "(", "axis", "[", "np", ".", "newaxis", "]", "*", "(", "t1", "[", ":", ",", "np", ".", "newaxis", "]", "/", "2.0", ")", ")", "\n", "bot", "=", "Quaternions", ".", "exp", "(", "axis", "[", "np", ".", "newaxis", "]", "*", "(", "t2", "[", ":", ",", "np", ".", "newaxis", "]", "/", "2.0", ")", ")", "\n", "img", "=", "self", ".", "dot", "(", "top", ")", ">", "self", ".", "dot", "(", "bot", ")", "\n", "\n", "ret", "=", "top", ".", "copy", "(", ")", "\n", "ret", "[", "img", "]", "=", "top", "[", "img", "]", "\n", "ret", "[", "~", "img", "]", "=", "bot", "[", "~", "img", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.constrained_x": [[200, 201], ["Quaternions_old.Quaternions.constrained", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained"], ["", "def", "constrained_x", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "def", "constrained_y", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.constrained_y": [[201, 202], ["Quaternions_old.Quaternions.constrained", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained"], ["def", "constrained_y", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ")", "\n", "def", "constrained_z", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.constrained_z": [[202, 203], ["Quaternions_old.Quaternions.constrained", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained"], ["def", "constrained_z", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.dot": [[204, 205], ["numpy.sum"], "methods", ["None"], ["def", "dot", "(", "self", ",", "q", ")", ":", "return", "np", ".", "sum", "(", "self", ".", "qs", "*", "q", ".", "qs", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.copy": [[206, 207], ["Quaternions_old.Quaternions", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["def", "copy", "(", "self", ")", ":", "return", "Quaternions", "(", "np", ".", "copy", "(", "self", ".", "qs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.reshape": [[208, 211], ["Quaternions_old.Quaternions.qs.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["def", "reshape", "(", "self", ",", "s", ")", ":", "\n", "        ", "self", ".", "qs", ".", "reshape", "(", "s", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.interpolate": [[212, 214], ["Quaternions_old.Quaternions.exp", "numpy.average", "abs"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.average"], ["", "def", "interpolate", "(", "self", ",", "ws", ")", ":", "\n", "        ", "return", "Quaternions", ".", "exp", "(", "np", ".", "average", "(", "abs", "(", "self", ")", ".", "log", ",", "axis", "=", "0", ",", "weights", "=", "ws", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.euler": [[215, 273], ["numpy.zeros", "Quaternions_old.Quaternions.normalized", "numpy.arctan2", "numpy.arcsin", "numpy.arctan2", "numpy.arctan2", "numpy.arctan2", "numpy.arcsin", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "def", "euler", "(", "self", ",", "order", "=", "'xyz'", ")", ":", "\n", "\n", "        ", "q", "=", "self", ".", "normalized", "(", ")", ".", "qs", "\n", "q0", "=", "q", "[", "...", ",", "0", "]", "\n", "q1", "=", "q", "[", "...", ",", "1", "]", "\n", "q2", "=", "q", "[", "...", ",", "2", "]", "\n", "q3", "=", "q", "[", "...", ",", "3", "]", "\n", "es", "=", "np", ".", "zeros", "(", "self", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "\n", "if", "order", "==", "'xyz'", ":", "\n", "            ", "es", "[", "...", ",", "0", "]", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q1", "+", "q2", "*", "q3", ")", ",", "1", "-", "2", "*", "(", "q1", "*", "q1", "+", "q2", "*", "q2", ")", ")", "\n", "es", "[", "...", ",", "1", "]", "=", "np", ".", "arcsin", "(", "(", "2", "*", "(", "q0", "*", "q2", "-", "q3", "*", "q1", ")", ")", ".", "clip", "(", "-", "1", ",", "1", ")", ")", "\n", "es", "[", "...", ",", "2", "]", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q3", "+", "q1", "*", "q2", ")", ",", "1", "-", "2", "*", "(", "q2", "*", "q2", "+", "q3", "*", "q3", ")", ")", "\n", "", "elif", "order", "==", "'yzx'", ":", "\n", "            ", "es", "[", "...", ",", "0", "]", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q1", "*", "q0", "-", "q2", "*", "q3", ")", ",", "-", "q1", "*", "q1", "+", "q2", "*", "q2", "-", "q3", "*", "q3", "+", "q0", "*", "q0", ")", "\n", "es", "[", "...", ",", "1", "]", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q2", "*", "q0", "-", "q1", "*", "q3", ")", ",", "q1", "*", "q1", "-", "q2", "*", "q2", "-", "q3", "*", "q3", "+", "q0", "*", "q0", ")", "\n", "es", "[", "...", ",", "2", "]", "=", "np", ".", "arcsin", "(", "(", "2", "*", "(", "q1", "*", "q2", "+", "q3", "*", "q0", ")", ")", ".", "clip", "(", "-", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Cannot convert from ordering %s'", "%", "order", ")", "\n", "\n", "", "\"\"\"\n        \n        # These conversion don't appear to work correctly for Maya.\n        # http://bediyap.com/programming/convert-quaternion-to-euler-rotations/\n        \n        if   order == 'xyz':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q3 - q1 * q2), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q1 * q3 + q0 * q2)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q1 - q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3)\n        elif order == 'yzx':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q1 - q2 * q3), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q1 * q2 + q0 * q3)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q2 - q1 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3)\n        elif order == 'zxy':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q2 - q1 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q0 * q1 + q2 * q3)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q3 - q1 * q2), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3) \n        elif order == 'xzy':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q2 + q1 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q0 * q3 - q1 * q2)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3)\n        elif order == 'yxz':\n            es[fa + (0,)] = np.arctan2(2 * (q1 * q2 + q0 * q3), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q0 * q1 - q2 * q3)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q1 * q3 + q0 * q2), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3)\n        elif order == 'zyx':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q0 * q2 - q1 * q3)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q3 + q1 * q2), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3)\n        else:\n            raise KeyError('Unknown ordering %s' % order)\n        \n        \"\"\"", "\n", "\n", "# https://github.com/ehsan/ogre/blob/master/OgreMain/src/OgreMatrix3.cpp", "\n", "# Use this class and convert from matrix", "\n", "\n", "return", "es", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.average": [[275, 288], ["len", "ut.matrix_multiply().sum", "numpy.linalg.eigh", "Quaternions_old.Quaternions", "NotImplementedError", "ut.matrix_multiply", "numpy.argmin"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "average", "(", "self", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "shape", ")", "==", "1", ":", "\n", "\n", "            ", "import", "numpy", ".", "core", ".", "umath_tests", "as", "ut", "\n", "system", "=", "ut", ".", "matrix_multiply", "(", "self", ".", "qs", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "self", ".", "qs", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "w", ",", "v", "=", "np", ".", "linalg", ".", "eigh", "(", "system", ")", "\n", "qiT_dot_qref", "=", "(", "self", ".", "qs", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "v", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "return", "Quaternions", "(", "v", "[", ":", ",", "np", ".", "argmin", "(", "(", "1.", "-", "qiT_dot_qref", "**", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", "]", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "raise", "NotImplementedError", "(", "'Cannot average multi-dimensionsal Quaternions'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.angle_axis": [[289, 299], ["Quaternions_old.Quaternions.normalized", "numpy.sqrt", "numpy.arccos"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "", "def", "angle_axis", "(", "self", ")", ":", "\n", "\n", "        ", "norm", "=", "self", ".", "normalized", "(", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "1", "-", "(", "norm", ".", "reals", "**", "2.0", ")", ")", "\n", "s", "[", "s", "==", "0", "]", "=", "0.001", "\n", "\n", "angles", "=", "2.0", "*", "np", ".", "arccos", "(", "norm", ".", "reals", ")", "\n", "axis", "=", "norm", ".", "imaginaries", "/", "s", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "angles", ",", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.transforms": [[301, 325], ["numpy.empty"], "methods", ["None"], ["", "def", "transforms", "(", "self", ")", ":", "\n", "\n", "        ", "qw", "=", "self", ".", "qs", "[", "...", ",", "0", "]", "\n", "qx", "=", "self", ".", "qs", "[", "...", ",", "1", "]", "\n", "qy", "=", "self", ".", "qs", "[", "...", ",", "2", "]", "\n", "qz", "=", "self", ".", "qs", "[", "...", ",", "3", "]", "\n", "\n", "x2", "=", "qx", "+", "qx", ";", "y2", "=", "qy", "+", "qy", ";", "z2", "=", "qz", "+", "qz", ";", "\n", "xx", "=", "qx", "*", "x2", ";", "yy", "=", "qy", "*", "y2", ";", "wx", "=", "qw", "*", "x2", ";", "\n", "xy", "=", "qx", "*", "y2", ";", "yz", "=", "qy", "*", "z2", ";", "wy", "=", "qw", "*", "y2", ";", "\n", "xz", "=", "qx", "*", "z2", ";", "zz", "=", "qz", "*", "z2", ";", "wz", "=", "qw", "*", "z2", ";", "\n", "\n", "m", "=", "np", ".", "empty", "(", "self", ".", "shape", "+", "(", "3", ",", "3", ")", ")", "\n", "m", "[", "...", ",", "0", ",", "0", "]", "=", "1.0", "-", "(", "yy", "+", "zz", ")", "\n", "m", "[", "...", ",", "0", ",", "1", "]", "=", "xy", "-", "wz", "\n", "m", "[", "...", ",", "0", ",", "2", "]", "=", "xz", "+", "wy", "\n", "m", "[", "...", ",", "1", ",", "0", "]", "=", "xy", "+", "wz", "\n", "m", "[", "...", ",", "1", ",", "1", "]", "=", "1.0", "-", "(", "xx", "+", "zz", ")", "\n", "m", "[", "...", ",", "1", ",", "2", "]", "=", "yz", "-", "wx", "\n", "m", "[", "...", ",", "2", ",", "0", "]", "=", "xz", "-", "wy", "\n", "m", "[", "...", ",", "2", ",", "1", "]", "=", "yz", "+", "wx", "\n", "m", "[", "...", ",", "2", ",", "2", "]", "=", "1.0", "-", "(", "xx", "+", "yy", ")", "\n", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.ravel": [[326, 328], ["Quaternions_old.Quaternions.qs.ravel"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel"], ["", "def", "ravel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "qs", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.id": [[329, 343], ["isinstance", "TypeError", "numpy.zeros", "Quaternions_old.Quaternions", "isinstance", "isinstance", "numpy.zeros", "Quaternions_old.Quaternions", "str", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "id", "(", "cls", ",", "n", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "n", ",", "tuple", ")", ":", "\n", "            ", "qs", "=", "np", ".", "zeros", "(", "n", "+", "(", "4", ",", ")", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "1.0", "\n", "return", "Quaternions", "(", "qs", ")", "\n", "\n", "", "if", "isinstance", "(", "n", ",", "int", ")", "or", "isinstance", "(", "n", ",", "long", ")", ":", "\n", "            ", "qs", "=", "np", ".", "zeros", "(", "(", "n", ",", "4", ")", ")", "\n", "qs", "[", ":", ",", "0", "]", "=", "1.0", "\n", "return", "Quaternions", "(", "qs", ")", "\n", "\n", "", "raise", "TypeError", "(", "'Cannot Construct Quaternion from %s type'", "%", "str", "(", "type", "(", "n", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.id_like": [[344, 349], ["numpy.zeros", "Quaternions_old.Quaternions"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "id_like", "(", "cls", ",", "a", ")", ":", "\n", "        ", "qs", "=", "np", ".", "zeros", "(", "a", ".", "shape", "+", "(", "4", ",", ")", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "1.0", "\n", "return", "Quaternions", "(", "qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.exp": [[350, 364], ["numpy.empty", "numpy.cos", "Quaternions_old.Quaternions.normalized", "numpy.sum", "numpy.sin", "Quaternions_old.Quaternions"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "@", "classmethod", "\n", "def", "exp", "(", "cls", ",", "ws", ")", ":", "\n", "\n", "        ", "ts", "=", "np", ".", "sum", "(", "ws", "**", "2.0", ",", "axis", "=", "-", "1", ")", "**", "0.5", "\n", "ts", "[", "ts", "==", "0", "]", "=", "0.001", "\n", "ls", "=", "np", ".", "sin", "(", "ts", ")", "/", "ts", "\n", "\n", "qs", "=", "np", ".", "empty", "(", "ws", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "4", ",", ")", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "np", ".", "cos", "(", "ts", ")", "\n", "qs", "[", "...", ",", "1", "]", "=", "ws", "[", "...", ",", "0", "]", "*", "ls", "\n", "qs", "[", "...", ",", "2", "]", "=", "ws", "[", "...", ",", "1", "]", "*", "ls", "\n", "qs", "[", "...", ",", "3", "]", "=", "ws", "[", "...", ",", "2", "]", "*", "ls", "\n", "\n", "return", "Quaternions", "(", "qs", ")", ".", "normalized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.slerp": [[365, 393], ["cls._broadcast", "cls._broadcast", "cls._broadcast", "numpy.sum", "numpy.zeros", "numpy.zeros", "numpy.arccos", "numpy.sin", "Quaternions_old.Quaternions", "numpy.sin", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast"], ["", "@", "classmethod", "\n", "def", "slerp", "(", "cls", ",", "q0s", ",", "q1s", ",", "a", ")", ":", "\n", "\n", "        ", "fst", ",", "snd", "=", "cls", ".", "_broadcast", "(", "q0s", ".", "qs", ",", "q1s", ".", "qs", ")", "\n", "fst", ",", "a", "=", "cls", ".", "_broadcast", "(", "fst", ",", "a", ",", "scalar", "=", "True", ")", "\n", "snd", ",", "a", "=", "cls", ".", "_broadcast", "(", "snd", ",", "a", ",", "scalar", "=", "True", ")", "\n", "\n", "len", "=", "np", ".", "sum", "(", "fst", "*", "snd", ",", "axis", "=", "-", "1", ")", "\n", "\n", "neg", "=", "len", "<", "0.0", "\n", "len", "[", "neg", "]", "=", "-", "len", "[", "neg", "]", "\n", "snd", "[", "neg", "]", "=", "-", "snd", "[", "neg", "]", "\n", "\n", "amount0", "=", "np", ".", "zeros", "(", "a", ".", "shape", ")", "\n", "amount1", "=", "np", ".", "zeros", "(", "a", ".", "shape", ")", "\n", "\n", "linear", "=", "(", "1.0", "-", "len", ")", "<", "0.01", "\n", "omegas", "=", "np", ".", "arccos", "(", "len", "[", "~", "linear", "]", ")", "\n", "sinoms", "=", "np", ".", "sin", "(", "omegas", ")", "\n", "\n", "amount0", "[", "linear", "]", "=", "1.0", "-", "a", "[", "linear", "]", "\n", "amount1", "[", "linear", "]", "=", "a", "[", "linear", "]", "\n", "amount0", "[", "~", "linear", "]", "=", "np", ".", "sin", "(", "(", "1.0", "-", "a", "[", "~", "linear", "]", ")", "*", "omegas", ")", "/", "sinoms", "\n", "amount1", "[", "~", "linear", "]", "=", "np", ".", "sin", "(", "a", "[", "~", "linear", "]", "*", "omegas", ")", "/", "sinoms", "\n", "\n", "return", "Quaternions", "(", "\n", "amount0", "[", "...", ",", "np", ".", "newaxis", "]", "*", "fst", "+", "\n", "amount1", "[", "...", ",", "np", ".", "newaxis", "]", "*", "snd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.between": [[394, 399], ["numpy.cross", "Quaternions_old.Quaternions.normalized", "numpy.sqrt", "Quaternions_old.Quaternions", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "@", "classmethod", "\n", "def", "between", "(", "cls", ",", "v0s", ",", "v1s", ")", ":", "\n", "        ", "a", "=", "np", ".", "cross", "(", "v0s", ",", "v1s", ")", "\n", "w", "=", "np", ".", "sqrt", "(", "(", "v0s", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "*", "(", "v1s", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "+", "(", "v0s", "*", "v1s", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "return", "Quaternions", "(", "np", ".", "concatenate", "(", "[", "w", "[", "...", ",", "np", ".", "newaxis", "]", ",", "a", "]", ",", "axis", "=", "-", "1", ")", ")", ".", "normalized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.from_angle_axis": [[400, 406], ["Quaternions_old.Quaternions", "numpy.sin", "numpy.cos", "numpy.concatenate", "numpy.sqrt", "numpy.sum"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_angle_axis", "(", "cls", ",", "angles", ",", "axis", ")", ":", "\n", "        ", "axis", "=", "axis", "/", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "axis", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "+", "1e-10", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "sines", "=", "np", ".", "sin", "(", "angles", "/", "2.0", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "cosines", "=", "np", ".", "cos", "(", "angles", "/", "2.0", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "return", "Quaternions", "(", "np", ".", "concatenate", "(", "[", "cosines", ",", "axis", "*", "sines", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.from_euler": [[407, 421], ["Quaternions_old.Quaternions.from_angle_axis", "Quaternions_old.Quaternions.from_angle_axis", "Quaternions_old.Quaternions.from_angle_axis", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis"], ["", "@", "classmethod", "\n", "def", "from_euler", "(", "cls", ",", "es", ",", "order", "=", "'xyz'", ",", "world", "=", "False", ")", ":", "\n", "\n", "        ", "axis", "=", "{", "\n", "'x'", ":", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ",", "\n", "'y'", ":", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ",", "\n", "'z'", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "\n", "}", "\n", "\n", "q0s", "=", "Quaternions", ".", "from_angle_axis", "(", "es", "[", "...", ",", "0", "]", ",", "axis", "[", "order", "[", "0", "]", "]", ")", "\n", "q1s", "=", "Quaternions", ".", "from_angle_axis", "(", "es", "[", "...", ",", "1", "]", ",", "axis", "[", "order", "[", "1", "]", "]", ")", "\n", "q2s", "=", "Quaternions", ".", "from_angle_axis", "(", "es", "[", "...", ",", "2", "]", ",", "axis", "[", "order", "[", "2", "]", "]", ")", "\n", "\n", "return", "(", "q2s", "*", "(", "q1s", "*", "q0s", ")", ")", "if", "world", "else", "(", "q0s", "*", "(", "q1s", "*", "q2s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions_old.Quaternions.from_transforms": [[422, 465], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.empty", "cls", "numpy.sqrt.clip", "numpy.sqrt.clip", "numpy.sqrt.clip", "numpy.sqrt.clip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_transforms", "(", "cls", ",", "ts", ")", ":", "\n", "\n", "        ", "d0", ",", "d1", ",", "d2", "=", "ts", "[", "...", ",", "0", ",", "0", "]", ",", "ts", "[", "...", ",", "1", ",", "1", "]", ",", "ts", "[", "...", ",", "2", ",", "2", "]", "\n", "\n", "q0", "=", "(", "d0", "+", "d1", "+", "d2", "+", "1.0", ")", "/", "4.0", "\n", "q1", "=", "(", "d0", "-", "d1", "-", "d2", "+", "1.0", ")", "/", "4.0", "\n", "q2", "=", "(", "-", "d0", "+", "d1", "-", "d2", "+", "1.0", ")", "/", "4.0", "\n", "q3", "=", "(", "-", "d0", "-", "d1", "+", "d2", "+", "1.0", ")", "/", "4.0", "\n", "\n", "q0", "=", "np", ".", "sqrt", "(", "q0", ".", "clip", "(", "0", ",", "None", ")", ")", "\n", "q1", "=", "np", ".", "sqrt", "(", "q1", ".", "clip", "(", "0", ",", "None", ")", ")", "\n", "q2", "=", "np", ".", "sqrt", "(", "q2", ".", "clip", "(", "0", ",", "None", ")", ")", "\n", "q3", "=", "np", ".", "sqrt", "(", "q3", ".", "clip", "(", "0", ",", "None", ")", ")", "\n", "\n", "c0", "=", "(", "q0", ">=", "q1", ")", "&", "(", "q0", ">=", "q2", ")", "&", "(", "q0", ">=", "q3", ")", "\n", "c1", "=", "(", "q1", ">=", "q0", ")", "&", "(", "q1", ">=", "q2", ")", "&", "(", "q1", ">=", "q3", ")", "\n", "c2", "=", "(", "q2", ">=", "q0", ")", "&", "(", "q2", ">=", "q1", ")", "&", "(", "q2", ">=", "q3", ")", "\n", "c3", "=", "(", "q3", ">=", "q0", ")", "&", "(", "q3", ">=", "q1", ")", "&", "(", "q3", ">=", "q2", ")", "\n", "\n", "q1", "[", "c0", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c0", ",", "2", ",", "1", "]", "-", "ts", "[", "c0", ",", "1", ",", "2", "]", ")", "\n", "q2", "[", "c0", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c0", ",", "0", ",", "2", "]", "-", "ts", "[", "c0", ",", "2", ",", "0", "]", ")", "\n", "q3", "[", "c0", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c0", ",", "1", ",", "0", "]", "-", "ts", "[", "c0", ",", "0", ",", "1", "]", ")", "\n", "\n", "q0", "[", "c1", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c1", ",", "2", ",", "1", "]", "-", "ts", "[", "c1", ",", "1", ",", "2", "]", ")", "\n", "q2", "[", "c1", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c1", ",", "1", ",", "0", "]", "+", "ts", "[", "c1", ",", "0", ",", "1", "]", ")", "\n", "q3", "[", "c1", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c1", ",", "0", ",", "2", "]", "+", "ts", "[", "c1", ",", "2", ",", "0", "]", ")", "\n", "\n", "q0", "[", "c2", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c2", ",", "0", ",", "2", "]", "-", "ts", "[", "c2", ",", "2", ",", "0", "]", ")", "\n", "q1", "[", "c2", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c2", ",", "1", ",", "0", "]", "+", "ts", "[", "c2", ",", "0", ",", "1", "]", ")", "\n", "q3", "[", "c2", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c2", ",", "2", ",", "1", "]", "+", "ts", "[", "c2", ",", "1", ",", "2", "]", ")", "\n", "\n", "q0", "[", "c3", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c3", ",", "1", ",", "0", "]", "-", "ts", "[", "c3", ",", "0", ",", "1", "]", ")", "\n", "q1", "[", "c3", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c3", ",", "2", ",", "0", "]", "+", "ts", "[", "c3", ",", "0", ",", "2", "]", ")", "\n", "q2", "[", "c3", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c3", ",", "2", ",", "1", "]", "+", "ts", "[", "c3", ",", "1", ",", "2", "]", ")", "\n", "\n", "qs", "=", "np", ".", "empty", "(", "ts", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "4", ",", ")", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "q0", "\n", "qs", "[", "...", ",", "1", "]", "=", "q1", "\n", "qs", "[", "...", ",", "2", "]", "=", "q2", "\n", "qs", "[", "...", ",", "3", "]", "=", "q3", "\n", "\n", "return", "cls", "(", "qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.__init__": [[235, 252], ["len", "full[].reshape", "numpy.concatenate", "load_skeleton.Skel", "len", "numpy.sqrt", "numpy.sum", "animation_data.AnimationData.rotations.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["def", "__init__", "(", "self", ",", "full", ",", "skel", "=", "None", ",", "frametime", "=", "1", "/", "30", ")", ":", "\n", "        ", "if", "skel", "is", "None", ":", "\n", "            ", "skel", "=", "Skel", "(", ")", "\n", "", "self", ".", "skel", "=", "skel", "\n", "self", ".", "frametime", "=", "frametime", "\n", "self", ".", "len", "=", "len", "(", "full", ")", "\n", "self", ".", "rotations", "=", "full", "[", ":", ",", ":", "-", "8", "]", ".", "reshape", "(", "self", ".", "len", ",", "-", "1", ",", "4", ")", "# [T, Jo, 4]", "\n", "assert", "self", ".", "rotations", ".", "shape", "[", "1", "]", "==", "len", "(", "self", ".", "skel", ".", "topology", ")", ",", "\"Rotations do not match the skeleton.\"", "\n", "self", ".", "rotations", "/=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "self", ".", "rotations", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "self", ".", "rt_pos", "=", "full", "[", ":", ",", "-", "8", ":", "-", "5", "]", "# [T, 3]", "\n", "self", ".", "rt_rot", "=", "full", "[", ":", ",", "-", "5", ":", "-", "4", "]", "# [T, 1]", "\n", "self", ".", "foot_contact", "=", "full", "[", ":", ",", "-", "4", ":", "]", "# [T, 4]", "\n", "self", ".", "full", "=", "np", ".", "concatenate", "(", "[", "self", ".", "rotations", ".", "reshape", "(", "self", ".", "len", ",", "-", "1", ")", ",", "self", ".", "rt_pos", ",", "self", ".", "rt_rot", ",", "self", ".", "foot_contact", "]", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "phases", "=", "None", "# [T, 1]", "\n", "self", ".", "local_x", "=", "None", "# [3]", "\n", "self", ".", "positions_for_proj", "=", "None", "# [T, (J - 1) + 1, 3], trimmed and not forward facing", "\n", "self", ".", "global_positions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_full": [[254, 256], ["None"], "methods", ["None"], ["", "def", "get_full", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "full", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_root_positions": [[257, 259], ["None"], "methods", ["None"], ["", "def", "get_root_positions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rt_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_original_rotations": [[260, 268], ["Quaternions_old.Quaternions", "Quaternions_old.Quaternions", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.sqrt", "Pivots.Pivots.Pivots().quaternions", "Pivots.Pivots.Pivots"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.quaternions"], ["", "def", "get_original_rotations", "(", "self", ",", "rt_rot", "=", "None", ")", ":", "\n", "        ", "if", "rt_rot", "is", "None", ":", "\n", "            ", "rt_rot", "=", "self", ".", "rt_rot", "\n", "", "yaxis_rotations", "=", "Quaternions", "(", "np", ".", "array", "(", "Pivots", "(", "rt_rot", ")", ".", "quaternions", "(", ")", ")", ")", "\n", "rt_rotations", "=", "Quaternions", "(", "self", ".", "rotations", "[", ":", ",", ":", "1", "]", ")", "# [T, 1, 4]", "\n", "rt_rotations", "=", "np", ".", "array", "(", "yaxis_rotations", "*", "rt_rotations", ")", "\n", "rt_rotations", "/=", "np", ".", "sqrt", "(", "(", "rt_rotations", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "return", "np", ".", "concatenate", "(", "(", "rt_rotations", ",", "self", ".", "rotations", "[", ":", ",", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "# [T, J, 4]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_foot_contact": [[269, 274], ["animation_data.AnimationData.foot_contact.transpose"], "methods", ["None"], ["", "def", "get_foot_contact", "(", "self", ",", "transpose", "=", "False", ")", ":", "\n", "        ", "if", "transpose", ":", "\n", "            ", "return", "self", ".", "foot_contact", ".", "transpose", "(", "1", ",", "0", ")", "# [4, T]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "foot_contact", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_phases": [[275, 279], ["animation_data.phase_from_ft"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.phase_from_ft"], ["", "", "def", "get_phases", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "phases", "is", "None", ":", "\n", "            ", "self", ".", "phases", "=", "phase_from_ft", "(", "self", ".", "foot_contact", ")", "\n", "", "return", "self", ".", "phases", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_local_x": [[280, 286], ["numpy.mean", "Pivots.Pivots.Pivots().directions", "numpy.cross().reshape", "Pivots.Pivots.Pivots", "numpy.cross", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.directions", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross"], ["", "def", "get_local_x", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "local_x", "is", "None", ":", "\n", "            ", "forward_pivot", "=", "np", ".", "mean", "(", "self", ".", "rt_rot", ",", "axis", "=", "0", ")", "# [T, 1] -> [1]", "\n", "forward_dir", "=", "Pivots", "(", "forward_pivot", ")", ".", "directions", "(", ")", "\n", "self", ".", "local_x", "=", "np", ".", "cross", "(", "np", ".", "array", "(", "(", "0", ",", "1", ",", "0", ")", ")", ",", "forward_dir", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "return", "self", ".", "local_x", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_content_input": [[287, 290], ["animation_data.AnimationData.rotations.reshape", "numpy.concatenate().transpose", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "get_content_input", "(", "self", ")", ":", "\n", "        ", "rotations", "=", "self", ".", "rotations", ".", "reshape", "(", "self", ".", "len", ",", "-", "1", ")", "# [T, Jo * 4]", "\n", "return", "np", ".", "concatenate", "(", "(", "rotations", ",", "self", ".", "rt_pos", ",", "self", ".", "rt_rot", ")", ",", "axis", "=", "-", "1", ")", ".", "transpose", "(", "1", ",", "0", ")", "# [Jo * 4 + 3 + 1, T]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_style3d_input": [[291, 295], ["pos3d.reshape.reshape.reshape", "numpy.concatenate().transpose", "animation_data.forward_rotations", "len", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.forward_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "get_style3d_input", "(", "self", ")", ":", "\n", "        ", "pos3d", "=", "forward_rotations", "(", "self", ".", "skel", ",", "self", ".", "rotations", ",", "trim", "=", "True", ")", "[", ":", ",", "1", ":", "]", "# [T, J - 1, 3]", "\n", "pos3d", "=", "pos3d", ".", "reshape", "(", "(", "len", "(", "pos3d", ")", ",", "-", "1", ")", ")", "# [T, (J - 1) * 3]", "\n", "return", "np", ".", "concatenate", "(", "(", "pos3d", ",", "self", ".", "rt_pos", ",", "self", ".", "rt_rot", ")", ",", "axis", "=", "-", "1", ")", ".", "transpose", "(", "1", ",", "0", ")", "# [(J - 1) * 3 + 3 + 1, T]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_projections": [[296, 311], ["zip", "numpy.stack", "animation_data.AnimationData.get_original_rotations", "numpy.concatenate", "animation_data.AnimationData.copy", "animation_data.AnimationData.positions_for_proj.copy", "numpy.ones", "numpy.stack.append", "animation_data.forward_rotations", "len", "animation_data.motion_projection", "animation_data.AnimationData.get_local_x"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_original_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.forward_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.motion_projection", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_local_x"], ["", "def", "get_projections", "(", "self", ",", "view_angles", ",", "scales", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "positions_for_proj", "is", "None", ":", "\n", "            ", "rotations", "=", "self", ".", "get_original_rotations", "(", ")", "\n", "positions", "=", "forward_rotations", "(", "self", ".", "skel", ",", "rotations", ",", "trim", "=", "True", ")", "[", ":", ",", "1", ":", "]", "# [T, J - 1, 3]", "\n", "positions", "=", "np", ".", "concatenate", "(", "(", "positions", ",", "self", ".", "rt_pos", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "# [T, J, 3]", "\n", "self", ".", "positions_for_proj", "=", "positions", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "positions", "=", "self", ".", "positions_for_proj", ".", "copy", "(", ")", "\n", "", "projections", "=", "[", "]", "\n", "if", "scales", "is", "None", ":", "\n", "            ", "scales", "=", "np", ".", "ones", "(", "(", "len", "(", "view_angles", ")", ")", ")", "\n", "", "for", "angle", ",", "scale", "in", "zip", "(", "view_angles", ",", "scales", ")", ":", "\n", "            ", "projections", ".", "append", "(", "motion_projection", "(", "positions", ",", "self", ".", "get_local_x", "(", ")", ",", "angle", ")", "*", "scale", ")", "\n", "", "projections", "=", "np", ".", "stack", "(", "projections", ",", "axis", "=", "-", "3", ")", "# [V, J * 2, T]", "\n", "return", "projections", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_global_positions": [[312, 320], ["animation_data.forward_rotations", "animation_data.AnimationData.get_original_rotations", "animation_data.forward_rotations", "animation_data.AnimationData.get_original_rotations"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.forward_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_original_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.forward_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_original_rotations"], ["", "def", "get_global_positions", "(", "self", ",", "trim", "=", "True", ")", ":", "# for visualization", "\n", "        ", "if", "not", "trim", ":", "\n", "            ", "return", "forward_rotations", "(", "self", ".", "skel", ",", "self", ".", "get_original_rotations", "(", ")", ",", "rtpos", "=", "self", ".", "rt_pos", ",", "trim", "=", "False", ")", "\n", "", "if", "self", ".", "global_positions", "is", "None", ":", "\n", "            ", "rotations", "=", "self", ".", "get_original_rotations", "(", ")", "\n", "positions", "=", "forward_rotations", "(", "self", ".", "skel", ",", "rotations", ",", "rtpos", "=", "self", ".", "rt_pos", ",", "trim", "=", "True", ")", "\n", "self", ".", "global_positions", "=", "positions", "\n", "", "return", "self", ".", "global_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_velocity_factor": [[321, 328], ["numpy.sqrt", "numpy.max", "numpy.mean", "animation_data.forward_rotations", "numpy.sum", "animation_data.AnimationData.get_original_rotations"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.forward_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_original_rotations"], ["", "def", "get_velocity_factor", "(", "self", ")", ":", "\n", "        ", "positions", "=", "forward_rotations", "(", "self", ".", "skel", ",", "self", ".", "get_original_rotations", "(", ")", ",", "trim", "=", "True", ")", "[", ":", ",", "1", ":", "]", "# [T, J - 1, 3]", "\n", "velocity", "=", "positions", "[", "1", ":", "]", "-", "positions", "[", ":", "-", "1", "]", "# [T - 1, J - 1, 3]", "\n", "velocity", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "velocity", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "# [T - 1, J - 1]", "\n", "max_velocity", "=", "np", ".", "max", "(", "velocity", ",", "axis", "=", "-", "1", ")", "# [T - 1]", "\n", "velocity_factor", "=", "np", ".", "mean", "(", "max_velocity", ")", "\n", "return", "velocity_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_BVH": [[329, 356], ["animation_data.AnimationData.get_original_rotations", "rest.copy", "rest.copy.positions.repeat", "numpy.minimum", "numpy.sum", "numpy.argmin", "range", "numpy.abs", "rt_pos[].copy", "numpy.array", "numpy.abs", "rt_pos[].copy", "range"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.get_original_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "get_BVH", "(", "self", ",", "forward", "=", "True", ")", ":", "\n", "        ", "rt_pos", "=", "self", ".", "rt_pos", "# [T, 3]", "\n", "rt_rot", "=", "self", ".", "rt_rot", "# [T, 1]", "\n", "if", "forward", ":", "# choose a direction in [z+, x+, z-, x-], which is closest to \"forward\", as the new z+", "\n", "\n", "            ", "directions", "=", "np", ".", "array", "(", "range", "(", "4", ")", ")", "*", "np", ".", "pi", "*", "0.5", "# [0, 1, 2, 3] * 0.5pi", "\n", "diff", "=", "rt_rot", "[", "np", ".", "newaxis", ",", ":", "]", "-", "directions", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "# [1, T, 1] - [4, 1, 1]", "\n", "diff", "=", "np", ".", "minimum", "(", "np", ".", "abs", "(", "diff", ")", ",", "2.0", "*", "np", ".", "pi", "-", "np", ".", "abs", "(", "diff", ")", ")", "\n", "diff", "=", "np", ".", "sum", "(", "diff", ",", "axis", "=", "(", "-", "1", ",", "-", "2", ")", ")", "# [4, T, 1] -> [4]", "\n", "\n", "new_forward", "=", "np", ".", "argmin", "(", "diff", ")", "\n", "rt_rot", "-=", "new_forward", "*", "np", ".", "pi", "*", "0.5", "\n", "\n", "for", "d", "in", "range", "(", "new_forward", ")", ":", "\n", "                ", "tmp", "=", "rt_pos", "[", "...", ",", "0", "]", ".", "copy", "(", ")", "\n", "rt_pos", "[", "...", ",", "0", "]", "=", "-", "rt_pos", "[", "...", ",", "2", "]", ".", "copy", "(", ")", "\n", "rt_pos", "[", "...", ",", "2", "]", "=", "tmp", "\n", "\n", "", "", "rotations", "=", "self", ".", "get_original_rotations", "(", "rt_rot", "=", "rt_rot", ")", "\n", "\n", "rest", ",", "names", ",", "_", "=", "self", ".", "skel", ".", "rest_bvh", "\n", "anim", "=", "rest", ".", "copy", "(", ")", "\n", "anim", ".", "positions", "=", "anim", ".", "positions", ".", "repeat", "(", "self", ".", "len", ",", "axis", "=", "0", ")", "\n", "anim", ".", "positions", "[", ":", ",", "0", ",", ":", "]", "=", "rt_pos", "\n", "anim", ".", "rotations", ".", "qs", "=", "rotations", "\n", "\n", "return", "(", "anim", ",", "names", ",", "self", ".", "frametime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_network_output": [[357, 362], ["numpy.concatenate.transpose", "numpy.concatenate", "cls", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "@", "classmethod", "\n", "def", "from_network_output", "(", "cls", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "transpose", "(", "1", ",", "0", ")", "\n", "input", "=", "np", ".", "concatenate", "(", "(", "input", ",", "np", ".", "zeros", "(", "(", "len", "(", "input", ")", ",", "4", ")", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "cls", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_rotations_and_root_positions": [[363, 384], ["animation_data.forward_rotations", "animation_data.foot_contact_from_positions", "animation_data.y_rotation_from_positions", "Quaternions_old.Quaternions", "numpy.array().reshape", "numpy.concatenate", "cls", "load_skeleton.Skel", "numpy.sqrt", "rotations[].copy", "numpy.sum", "numpy.array", "rotations.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.forward_rotations", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.foot_contact_from_positions", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.y_rotation_from_positions", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "@", "classmethod", "\n", "def", "from_rotations_and_root_positions", "(", "cls", ",", "rotations", ",", "root_positions", ",", "skel", "=", "None", ",", "frametime", "=", "1", "/", "30", ")", ":", "\n", "        ", "\"\"\"\n        rotations: [T, J, 4]\n        root_positions: [T, 3]\n        \"\"\"", "\n", "if", "skel", "is", "None", ":", "\n", "            ", "skel", "=", "Skel", "(", ")", "\n", "\n", "", "rotations", "/=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "rotations", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "global_positions", "=", "forward_rotations", "(", "skel", ",", "rotations", ",", "root_positions", ",", "trim", "=", "True", ")", "\n", "foot_contact", "=", "foot_contact_from_positions", "(", "global_positions", ",", "fid_l", "=", "skel", ".", "fid_l", ",", "fid_r", "=", "skel", ".", "fid_r", ")", "\n", "quaters", ",", "pivots", "=", "y_rotation_from_positions", "(", "global_positions", ",", "hips", "=", "skel", ".", "hips", ",", "sdrs", "=", "skel", ".", "sdrs", ")", "\n", "\n", "root_rotations", "=", "Quaternions", "(", "rotations", "[", ":", ",", "0", ":", "1", ",", ":", "]", ".", "copy", "(", ")", ")", "# [T, 1, 4]", "\n", "root_rotations", "=", "quaters", "*", "root_rotations", "# facing [0, 0, 1]", "\n", "root_rotations", "=", "np", ".", "array", "(", "root_rotations", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "4", ")", ")", "# [T, 1, 4]", "\n", "rotations", "[", ":", ",", "0", ":", "1", ",", ":", "]", "=", "root_rotations", "\n", "\n", "full", "=", "np", ".", "concatenate", "(", "[", "rotations", ".", "reshape", "(", "(", "len", "(", "rotations", ")", ",", "-", "1", ")", ")", ",", "root_positions", ",", "pivots", ",", "foot_contact", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "cls", "(", "full", ",", "skel", ",", "frametime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_BVH": [[385, 395], ["BVH.load", "numpy.array", "cls.from_rotations_and_root_positions", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.AnimationData.from_rotations_and_root_positions", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "@", "classmethod", "\n", "def", "from_BVH", "(", "cls", ",", "filename", ",", "downsample", "=", "4", ",", "skel", "=", "None", ",", "trim_scale", "=", "None", ")", ":", "\n", "        ", "anim", ",", "names", ",", "frametime", "=", "BVH", ".", "load", "(", "filename", ")", "\n", "anim", "=", "anim", "[", ":", ":", "downsample", "]", "\n", "if", "trim_scale", "is", "not", "None", ":", "\n", "            ", "length", "=", "(", "len", "(", "anim", ")", "//", "trim_scale", ")", "*", "trim_scale", "\n", "anim", "=", "anim", "[", ":", "length", "]", "\n", "", "rotations", "=", "np", ".", "array", "(", "anim", ".", "rotations", ")", "# [T, J, 4]", "\n", "root_positions", "=", "anim", ".", "positions", "[", ":", ",", "0", ",", ":", "]", "\n", "return", "cls", ".", "from_rotations_and_root_positions", "(", "rotations", ",", "root_positions", ",", "skel", "=", "skel", ",", "frametime", "=", "frametime", "*", "downsample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.forward_rotations": [[19, 39], ["Quaternions_old.Quaternions().transforms", "numpy.zeros", "enumerate", "numpy.matmul", "numpy.matmul", "Quaternions_old.Quaternions"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.transforms"], ["def", "forward_rotations", "(", "skel", ",", "rotations", ",", "rtpos", "=", "None", ",", "trim", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    input: rotations [T, J, 4], rtpos [T, 3]\n    output: positions [T, J, 3]\n    \"\"\"", "\n", "transforms", "=", "Quaternions", "(", "rotations", ")", ".", "transforms", "(", ")", "# [..., J, 3, 3]", "\n", "glb", "=", "np", ".", "zeros", "(", "rotations", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "3", ",", ")", ")", "# [T, J, 3]", "\n", "if", "rtpos", "is", "not", "None", ":", "\n", "        ", "glb", "[", "...", ",", "0", ",", ":", "]", "=", "rtpos", "\n", "", "for", "i", ",", "pi", "in", "enumerate", "(", "skel", ".", "topology", ")", ":", "\n", "        ", "if", "pi", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "glb", "[", "...", ",", "i", ",", ":", "]", "=", "np", ".", "matmul", "(", "transforms", "[", "...", ",", "pi", ",", ":", ",", ":", "]", ",", "\n", "skel", ".", "offset", "[", "i", "]", ")", "\n", "glb", "[", "...", ",", "i", ",", ":", "]", "+=", "glb", "[", "...", ",", "pi", ",", ":", "]", "\n", "transforms", "[", "...", ",", "i", ",", ":", ",", ":", "]", "=", "np", ".", "matmul", "(", "transforms", "[", "...", ",", "pi", ",", ":", ",", ":", "]", ",", "\n", "transforms", "[", "...", ",", "i", ",", ":", ",", ":", "]", ")", "\n", "", "if", "trim", ":", "\n", "        ", "glb", "=", "glb", "[", "...", ",", "skel", ".", "chosen_joints", ",", ":", "]", "\n", "", "return", "glb", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.rotate_coordinates": [[41, 70], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "rotate_coordinates", "(", "local3d", ",", "angles", ")", ":", "\n", "    ", "\"\"\"\n    Rotate xyz coordinates from given view_angles.\n    local3d: numpy array. Unit LOCAL xyz vectors\n    angles: tuple of length 3. Rotation angles around each GLOBAL axis.\n    \"\"\"", "\n", "cx", ",", "cy", ",", "cz", "=", "np", ".", "cos", "(", "angles", ")", "\n", "sx", ",", "sy", ",", "sz", "=", "np", ".", "sin", "(", "angles", ")", "\n", "\n", "mat33_x", "=", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cx", ",", "sx", "]", ",", "\n", "[", "0", ",", "-", "sx", ",", "cx", "]", "\n", "]", ",", "dtype", "=", "'float'", ")", "\n", "\n", "mat33_y", "=", "np", ".", "array", "(", "[", "\n", "[", "cy", ",", "0", ",", "sy", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sy", ",", "0", ",", "cy", "]", "\n", "]", ",", "dtype", "=", "'float'", ")", "\n", "\n", "mat33_z", "=", "np", ".", "array", "(", "[", "\n", "[", "cz", ",", "sz", ",", "0", "]", ",", "\n", "[", "-", "sz", ",", "cz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "dtype", "=", "'float'", ")", "\n", "\n", "local3d", "=", "local3d", "@", "mat33_x", "@", "mat33_y", "@", "mat33_z", "\n", "return", "local3d", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.get_local3d": [[72, 89], ["numpy.zeros_like", "numpy.array", "numpy.cross", "numpy.stack", "numpy.linalg.norm", "animation_data.rotate_coordinates"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.rotate_coordinates"], ["", "def", "get_local3d", "(", "local_x", ",", "view_angle", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Get the unit vectors for local rectangular coordinates for given 3D motion\n    :param local_x: local x axis, (B *) [*, 0, *]\n    :return: numpy array. unit vectors for local rectangular coordinates's , shape (3, 3).\n    \"\"\"", "\n", "local_y", "=", "np", ".", "zeros_like", "(", "local_x", ")", "# [(B,) 3]", "\n", "local_y", "[", "...", ",", ":", "]", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "local_z", "=", "np", ".", "cross", "(", "local_x", ",", "local_y", ")", "\n", "local_z", "=", "local_z", "/", "np", ".", "linalg", ".", "norm", "(", "local_z", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "local", "=", "np", ".", "stack", "(", "[", "local_x", ",", "local_y", ",", "local_z", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n", "if", "view_angle", "is", "not", "None", ":", "\n", "        ", "local", "=", "rotate_coordinates", "(", "local", ",", "view_angle", ")", "\n", "\n", "", "return", "local", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.motion_projection": [[91, 112], ["animation_data.get_local3d", "motion_proj.swapaxes.reshape", "motion_proj.swapaxes.swapaxes"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.get_local3d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "motion_projection", "(", "motion", ",", "local_x", ",", "view_angle", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    motion: motion in relative joint positions & global root positions\n                   [(B,) T, (J - 1) + 1, 3]\n    local_x: [(B,) 3], local x-axis\n    view_angle: [3], the angles to rotate\n    output: motion_proj [(B,) J * 2, T]\n    \"\"\"", "\n", "\n", "local", "=", "get_local3d", "(", "local_x", ",", "view_angle", ")", "# [(B,) 3, 3]", "\n", "\n", "T", "=", "motion", ".", "shape", "[", "-", "1", "]", "\n", "# proj on xy-plane", "\n", "# motion_proj = (local[[0, 1], :] @ motion)  this used to be [2, 3] @ [J, 3, T]", "\n", "# but T doesn't matter here ... what we care is the \"3\", using [T, J, 3, 1] would also be OK", "\n", "motion", "=", "motion", "[", "...", ",", "np", ".", "newaxis", "]", "# [(B,) T, J, 3, 1]", "\n", "motion_proj", "=", "local", "[", "...", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "[", "0", ",", "1", "]", ",", ":", "]", "@", "motion", "# [(B,), 1, 1, 2, 3] @ [(B,), T, J, 3, 1] => [(B,), T, J, 2, 1]", "\n", "motion_proj", "=", "motion_proj", ".", "reshape", "(", "motion_proj", ".", "shape", "[", ":", "-", "3", "]", "+", "(", "-", "1", ",", ")", ")", "# [(B,) T, -1]", "\n", "motion_proj", "=", "motion_proj", ".", "swapaxes", "(", "-", "1", ",", "-", "2", ")", "# [(B,) J * 2, T]", "\n", "\n", "return", "motion_proj", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.foot_contact_from_positions": [[114, 131], ["numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.sum", "np.concatenate.append", "feet_contact[].copy"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "foot_contact_from_positions", "(", "positions", ",", "fid_l", "=", "(", "3", ",", "4", ")", ",", "fid_r", "=", "(", "7", ",", "8", ")", ")", ":", "\n", "    ", "\"\"\"\n    positions: [T, J, 3], trimmed (only \"chosen_joints\")\n    fid_l, fid_r: indices of feet joints (in \"chosen_joints\")\n    \"\"\"", "\n", "fid_l", ",", "fid_r", "=", "np", ".", "array", "(", "fid_l", ")", ",", "np", ".", "array", "(", "fid_r", ")", "\n", "velfactor", "=", "np", ".", "array", "(", "[", "0.05", ",", "0.05", "]", ")", "\n", "feet_contact", "=", "[", "]", "\n", "for", "fid_index", "in", "[", "fid_l", ",", "fid_r", "]", ":", "\n", "        ", "foot_vel", "=", "(", "positions", "[", "1", ":", ",", "fid_index", "]", "-", "positions", "[", ":", "-", "1", ",", "fid_index", "]", ")", "**", "2", "# [T - 1, 2, 3]", "\n", "foot_vel", "=", "np", ".", "sum", "(", "foot_vel", ",", "axis", "=", "-", "1", ")", "# [T - 1, 2]", "\n", "foot_contact", "=", "(", "foot_vel", "<", "velfactor", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "feet_contact", ".", "append", "(", "foot_contact", ")", "\n", "", "feet_contact", "=", "np", ".", "concatenate", "(", "feet_contact", ",", "axis", "=", "-", "1", ")", "# [T - 1, 4]", "\n", "feet_contact", "=", "np", ".", "concatenate", "(", "(", "feet_contact", "[", "0", ":", "1", "]", ".", "copy", "(", ")", ",", "feet_contact", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "feet_contact", "# [T, 4]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.phase_from_ft": [[133, 196], ["len", "foot_contact[].astype", "numpy.zeros", "numpy.zeros", "range", "range", "min", "range", "range", "print", "print", "len", "print", "starts.append", "len", "max"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "phase_from_ft", "(", "foot_contact", ",", "is_debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    foot_contact: [T, 4] -> take joints 0, 2 as standards\n    phase = left foot in contact (0) --> right foot in contact (pi) --> left foot in contact (2pi),\n            in range [0, 2pi)\n    \"\"\"", "\n", "num_circles", "=", "0", "\n", "circle_length", "=", "0", "\n", "total_length", "=", "len", "(", "foot_contact", ")", "\n", "ft", "=", "foot_contact", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "ft_start", "=", "np", ".", "zeros", "(", "(", "total_length", ",", "2", ")", ")", "\n", "phases", "=", "np", ".", "zeros", "(", "(", "total_length", ",", "1", ")", ")", "\n", "\n", "\"\"\"\n    calculate the average \"half-phase length\"\n    find the first and last \"01\" pattern\n    \"\"\"", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "total_length", ")", ":", "\n", "            ", "ft_start", "[", "i", ",", "j", "]", "=", "(", "ft", "[", "i", "-", "1", ",", "j", "]", "==", "0", "and", "ft", "[", "i", ",", "j", "]", "==", "1", ")", "\n", "", "", "if", "is_debug", ":", "\n", "        ", "print", "(", "'ft_start,'", ",", "ft_start", ")", "\n", "\n", "", "last", ",", "beg_i", "=", "-", "1", ",", "-", "1", "\n", "starts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "total_length", ")", ":", "\n", "        ", "if", "ft_start", "[", "i", ",", "0", "]", "or", "ft_start", "[", "i", ",", "1", "]", ":", "\n", "            ", "if", "last", "!=", "-", "1", ":", "\n", "                ", "num_circles", "+=", "1", "\n", "circle_length", "+=", "i", "-", "last", "\n", "", "else", ":", "\n", "                ", "beg_i", "=", "i", "\n", "", "last", "=", "i", "\n", "starts", ".", "append", "(", "i", ")", "\n", "\n", "", "", "avg_circle", "=", "0", "if", "num_circles", "==", "0", "else", "circle_length", "*", "1.0", "/", "num_circles", "\n", "if", "is_debug", ":", "\n", "        ", "print", "(", "\"%d circles, total length = %d, avg length = %.3lf\"", "%", "(", "num_circles", ",", "circle_length", ",", "avg_circle", ")", ")", "\n", "\n", "", "if", "len", "(", "starts", ")", "==", "0", ":", "# phase never changed", "\n", "        ", "return", "phases", "\n", "\n", "", "\"\"\"[0, beg_i - 1]: first incomplete circle\"\"\"", "\n", "prev_pos", "=", "min", "(", "0", ",", "beg_i", "-", "avg_circle", ")", "\n", "prev_val", "=", "0", "if", "ft_start", "[", "beg_i", ",", "1", "]", "==", "1", "else", "1", "# 0 if next step is on the right", "\n", "cir_i", "=", "0", "\n", "next_pos", "=", "starts", "[", "cir_i", "]", "\n", "\n", "for", "i", "in", "range", "(", "total_length", ")", ":", "\n", "        ", "if", "i", "==", "next_pos", ":", "\n", "            ", "prev_pos", "=", "next_pos", "\n", "prev_val", "=", "1", "-", "prev_val", "\n", "cir_i", "+=", "1", "\n", "if", "cir_i", ">=", "len", "(", "starts", ")", ":", "\n", "                ", "next_pos", "=", "max", "(", "total_length", "+", "1", ",", "next_pos", "+", "avg_circle", ")", "\n", "", "else", ":", "\n", "                ", "next_pos", "=", "starts", "[", "cir_i", "]", "\n", "", "", "phases", "[", "i", "]", "=", "prev_val", "+", "(", "i", "-", "prev_pos", ")", "*", "1.0", "/", "(", "next_pos", "-", "prev_pos", ")", "\n", "\n", "", "phases", "*=", "np", ".", "pi", "\n", "if", "is_debug", ":", "\n", "        ", "print", "(", "'phases:'", ",", "phases", ")", "\n", "", "return", "phases", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.across_from_glb": [[198, 209], ["numpy.sqrt"], "function", ["None"], ["", "def", "across_from_glb", "(", "positions", ",", "hips", "=", "(", "2", ",", "6", ")", ",", "sdrs", "=", "(", "14", ",", "18", ")", ")", ":", "\n", "    ", "\"\"\"\n    positions: positions [T, J, 3], trimmed (only \"chosen_joints\")\n    hips, sdrs: left/right hip joints, left/right shoulder joints\n    output: local x-axis for each frame [T, 3]\n    \"\"\"", "\n", "across", "=", "positions", "[", "...", ",", "hips", "[", "0", "]", ",", ":", "]", "-", "positions", "[", "...", ",", "hips", "[", "1", "]", ",", ":", "]", "+", "positions", "[", "...", ",", "sdrs", "[", "0", "]", ",", ":", "]", "-", "positions", "[", "...", ",", "sdrs", "[", "1", "]", ",", ":", "]", "# [T, 3]", "\n", "across", "=", "across", "/", "np", ".", "sqrt", "(", "(", "across", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "across", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.y_rotation_from_positions": [[211, 227], ["animation_data.across_from_glb", "numpy.cross", "scipy.gaussian_filter1d", "numpy.tile", "numpy.array", "numpy.array", "Quaternions_old.Quaternions.between", "Pivots.Pivots.from_quaternions", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.across_from_glb", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.between", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.from_quaternions"], ["", "def", "y_rotation_from_positions", "(", "positions", ",", "hips", "=", "(", "2", ",", "6", ")", ",", "sdrs", "=", "(", "14", ",", "18", ")", ")", ":", "\n", "    ", "\"\"\"\n    input: positions [T, J, 3]\n    output: quaters: [T, 1, 4], quaternions that rotate the character around the y-axis to face [0, 0, 1]\n            pivots: [T, 1] in [0, 2pi], the angle from [0, 0, 1] to the current facing direction\n    \"\"\"", "\n", "across", "=", "across_from_glb", "(", "positions", ",", "hips", "=", "hips", ",", "sdrs", "=", "sdrs", ")", "\n", "direction_filterwidth", "=", "20", "\n", "forward", "=", "np", ".", "cross", "(", "across", ",", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", "]", "]", ")", ")", "\n", "forward", "=", "filters", ".", "gaussian_filter1d", "(", "forward", ",", "direction_filterwidth", ",", "axis", "=", "0", ",", "mode", "=", "'nearest'", ")", "\n", "forward", "=", "forward", "/", "np", ".", "sqrt", "(", "(", "forward", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "target", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "forward", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "1", ",", ")", ")", "\n", "quaters", "=", "Quaternions", ".", "between", "(", "forward", ",", "target", ")", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", "# [T, 4] -> [T, 1, 4]", "\n", "pivots", "=", "Pivots", ".", "from_quaternions", "(", "-", "quaters", ")", ".", "ps", "# from \"target\"[0, 0, 1] to current facing direction \"forward\"", "\n", "return", "quaters", ",", "pivots", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args": [[397, 403], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"test\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bvh_in'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_data.test_all": [[405, 503], ["[].item", "animation_data.test_all.check_velocity"], "function", ["None"], ["", "def", "test_all", "(", "args", ")", ":", "\n", "\n", "    ", "def", "mse", "(", "a", ",", "b", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "(", "a", "-", "b", ")", "**", "2", ")", "\n", "\n", "", "def", "test_phase_from_ft", "(", ")", ":", "\n", "        ", "pace", "=", "np", ".", "zeros", "(", "(", "100", ",", "1", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "pace", "[", ":", ":", "8", "]", "=", "1", "\n", "left", "=", "pace", "[", ":", "-", "4", "]", "\n", "right", "=", "pace", "[", "4", ":", "]", "\n", "phase_from_ft", "(", "np", ".", "concatenate", "(", "[", "left", ",", "left", ",", "right", ",", "right", "]", ",", "axis", "=", "-", "1", ")", ",", "is_debug", "=", "True", ")", "\n", "\n", "", "def", "BVH_and_back", "(", "filename", ")", ":", "\n", "        ", "anim", ",", "names", ",", "frametime", "=", "BVH", ".", "load", "(", "filename", ")", "\n", "anim", "=", "anim", "[", ":", ":", "4", "]", "\n", "rotations", "=", "np", ".", "array", "(", "anim", ".", "rotations", ")", "# [T, J, 4]", "\n", "root_positions", "=", "anim", ".", "positions", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "anim_a", "=", "AnimationData", ".", "from_BVH", "(", "filename", ")", "\n", "rotations", "=", "rotations", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "rotations", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "f'rotations: {mse(anim_a.get_original_rotations(), rotations)}'", ")", "\n", "print", "(", "f'root_positions: {mse(anim_a.get_root_positions(), root_positions)}'", ")", "\n", "\n", "content_input", "=", "anim_a", ".", "get_content_input", "(", ")", "\n", "style3d_input", "=", "anim_a", ".", "get_style3d_input", "(", ")", "\n", "view_points", "=", "(", ")", "\n", "for", "i", "in", "range", "(", "7", ")", ":", "\n", "            ", "view_points", "+=", "(", "(", "0", ",", "-", "np", ".", "pi", "/", "2", "+", "i", "*", "np", ".", "pi", "/", "6", ",", "0", ")", ",", ")", "\n", "", "view_points", "=", "(", ")", "\n", "scales", "=", "(", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "view_points", "+=", "(", "(", "0", ",", "-", "np", ".", "pi", "/", "2", "+", "float", "(", "np", ".", "random", ".", "rand", "(", "1", ")", ")", "*", "np", ".", "pi", ",", "0", ")", ",", ")", "\n", "scales", "+=", "(", "float", "(", "np", ".", "random", ".", "rand", "(", "1", ")", ")", "*", "0.4", "+", "0.8", ",", ")", "\n", "", "style2d_input", "=", "anim_a", ".", "get_projections", "(", "view_points", ",", "scales", ")", "\n", "\n", "print", "(", "f'content {content_input.shape}, style3d {style3d_input.shape}, style2d {style2d_input.shape}'", ")", "\n", "\n", "foot_contact", "=", "anim_a", ".", "get_foot_contact", "(", ")", "\n", "T", "=", "content_input", ".", "shape", "[", "-", "1", "]", "\n", "inplace_no_rot", "=", "style3d_input", ".", "transpose", "(", "1", ",", "0", ")", "[", ":", ",", ":", "-", "4", "]", ".", "reshape", "(", "T", ",", "-", "1", ",", "3", ")", "\n", "inplace_no_rot", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "T", ",", "1", ",", "3", ")", ")", ",", "inplace_no_rot", ")", ",", "axis", "=", "1", ")", "\n", "inplace", "=", "anim_a", ".", "positions_for_proj", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "inplace", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "T", ",", "1", ",", "3", ")", ")", ",", "inplace", ")", ",", "axis", "=", "1", ")", "\n", "original", "=", "anim_a", ".", "get_global_positions", "(", ")", "\n", "print", "(", "f'inplace no rot {inplace_no_rot.shape}, inplace {inplace.shape}, original {original.shape}'", ")", "\n", "\n", "\"\"\"\n        visualize({\n            \"inplace_no_rot\": {\"motion\": inplace_no_rot, \"foot_contact\": foot_contact},\n            \"inplace\": {\"motion\": inplace, \"foot_contact\": foot_contact},\n            \"original\": {\"motion\": original, \"foot_contact\": foot_contact},\n        })\n        \"\"\"", "\n", "\n", "motion_proj", "=", "{", "}", "\n", "for", "(", "view_point", ",", "scale", ",", "proj", ")", "in", "zip", "(", "view_points", ",", "scales", ",", "style2d_input", ")", ":", "# [V, J * 2, T]", "\n", "            ", "proj", "=", "proj", ".", "copy", "(", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "T", ",", "-", "1", ",", "2", ")", "# [T, J, 2]", "\n", "proj", "=", "np", ".", "concatenate", "(", "[", "proj", "[", ":", ",", "-", "1", ":", "]", ",", "proj", "[", ":", ",", ":", "-", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "ori_proj", "=", "np", ".", "concatenate", "(", "[", "proj", "[", ":", ",", ":", "1", "]", ",", "proj", "[", ":", ",", "1", ":", "]", "+", "proj", "[", ":", ",", ":", "1", "]", ".", "copy", "(", ")", "]", ",", "axis", "=", "1", ")", "\n", "proj", "[", ":", ",", ":", "1", "]", "=", "0", "\n", "motion_proj", "[", "f'angle: {(view_point[1] / np.pi * 180):3f} scale: {scale:3f}'", "]", "=", "{", "\"motion\"", ":", "ori_proj", ",", "\"foot_contact\"", ":", "foot_contact", "}", "\n", "\"\"\"\n            visualize({\n                \"inplace_proj\": {\"motion\": proj, \"foot_contact\": foot_contact},\n                \"original_proj\": {\"motion\": ori_proj, \"foot_contact\": foot_contact}\n            })\n            \"\"\"", "\n", "", "visualize", "(", "motion_proj", ")", "\n", "\n", "BVH", ".", "save", "(", "\"bla.bvh\"", ",", "*", "anim_a", ".", "get_BVH", "(", ")", ")", "\n", "\n", "", "def", "check_velocity", "(", "dataset", ")", ":", "\n", "        ", "skel", "=", "Skel", "(", ")", "\n", "motions", ",", "labels", ",", "metas", "=", "dataset", "[", "\"motion\"", "]", ",", "dataset", "[", "\"style\"", "]", ",", "dataset", "[", "\"meta\"", "]", "\n", "style_names", "=", "list", "(", "set", "(", "metas", "[", "\"style\"", "]", ")", ")", "\n", "content_names", "=", "list", "(", "set", "(", "metas", "[", "\"content\"", "]", ")", ")", "\n", "info", "=", "{", "content", ":", "{", "style", ":", "[", "]", "for", "style", "in", "style_names", "}", "for", "content", "in", "content_names", "}", "\n", "for", "i", ",", "motion", "in", "enumerate", "(", "motions", ")", ":", "\n", "            ", "anim", "=", "AnimationData", "(", "motion", ",", "skel", "=", "skel", ")", "\n", "vel", "=", "anim", ".", "get_velocity_factor", "(", ")", "\n", "info", "[", "metas", "[", "\"content\"", "]", "[", "i", "]", "]", "[", "metas", "[", "\"style\"", "]", "[", "i", "]", "]", ".", "append", "(", "vel", ")", "\n", "\n", "", "for", "content", "in", "info", ":", "\n", "            ", "all", "=", "[", "]", "\n", "for", "style", "in", "info", "[", "content", "]", ":", "\n", "                ", "all", "+=", "info", "[", "content", "]", "[", "style", "]", "\n", "info", "[", "content", "]", "[", "style", "]", "=", "np", ".", "mean", "(", "info", "[", "content", "]", "[", "style", "]", ")", "\n", "", "info", "[", "content", "]", "[", "\"all\"", "]", "=", "np", ".", "mean", "(", "all", ")", "\n", "\n", "", "with", "open", "(", "\"probe_velocity.csv\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "columns", "=", "[", "'all'", "]", "+", "style_names", "\n", "f", ".", "write", "(", "','", "+", "','", ".", "join", "(", "columns", ")", "+", "'\\n'", ")", "\n", "for", "content", "in", "info", ":", "\n", "                ", "values", "=", "[", "f'{info[content][key]}'", "for", "key", "in", "columns", "]", "\n", "f", ".", "write", "(", "','", ".", "join", "(", "[", "content", "]", "+", "values", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "", "dataset", "=", "np", ".", "load", "(", "args", ".", "dataset", ",", "allow_pickle", "=", "True", ")", "[", "\"trainfull\"", "]", ".", "item", "(", ")", "\n", "check_velocity", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.load_from_maya": [[8, 52], ["AnimationStructure.load_from_maya.unload_joint"], "function", ["None"], ["def", "load_from_maya", "(", "root", ")", ":", "\n", "    ", "\"\"\"\n    Load joint parents and names from maya\n    \n    Parameters\n    ----------\n    \n    root : PyNode\n        Root Maya Node\n        \n    Returns\n    -------\n    \n    (names, parents) : ([str], (J) ndarray)\n        List of joint names and array\n        of indices representing the parent\n        joint for each joint J.\n        \n        Joint index -1 is used to represent\n        that there is no parent joint\n    \"\"\"", "\n", "\n", "import", "pymel", ".", "core", "as", "pm", "\n", "\n", "names", "=", "[", "]", "\n", "parents", "=", "[", "]", "\n", "\n", "def", "unload_joint", "(", "j", ",", "parents", ",", "par", ")", ":", "\n", "\n", "        ", "id", "=", "len", "(", "names", ")", "\n", "names", ".", "append", "(", "j", ")", "\n", "parents", ".", "append", "(", "par", ")", "\n", "\n", "children", "=", "[", "c", "for", "c", "in", "j", ".", "getChildren", "(", ")", "if", "\n", "isinstance", "(", "c", ",", "pm", ".", "nt", ".", "Transform", ")", "and", "\n", "not", "isinstance", "(", "c", ",", "pm", ".", "nt", ".", "Constraint", ")", "and", "\n", "not", "any", "(", "pm", ".", "listRelatives", "(", "c", ",", "s", "=", "True", ")", ")", "and", "\n", "(", "any", "(", "pm", ".", "listRelatives", "(", "c", ",", "ad", "=", "True", ",", "ap", "=", "False", ",", "type", "=", "'joint'", ")", ")", "or", "isinstance", "(", "c", ",", "pm", ".", "nt", ".", "Joint", ")", ")", "]", "\n", "\n", "map", "(", "lambda", "c", ":", "unload_joint", "(", "c", ",", "parents", ",", "id", ")", ",", "children", ")", "\n", "\n", "", "unload_joint", "(", "root", ",", "parents", ",", "-", "1", ")", "\n", "\n", "return", "(", "names", ",", "parents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints": [[56, 71], ["numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "joints", "(", "parents", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n    \n    Returns\n    -------\n    \n    joints : (J) ndarray\n        Array of joint indices\n    \"\"\"", "\n", "return", "np", ".", "arange", "(", "len", "(", "parents", ")", ",", "dtype", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints_list": [[72, 88], ["list", "AnimationStructure.joints"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints"], ["", "def", "joints_list", "(", "parents", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n    \n    Returns\n    -------\n    \n    joints : [ndarray]\n        List of arrays of joint idices for\n        each joint\n    \"\"\"", "\n", "return", "list", "(", "joints", "(", "parents", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.parents_list": [[89, 105], ["list"], "function", ["None"], ["", "def", "parents_list", "(", "parents", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n    \n    Returns\n    -------\n    \n    parents : [ndarray]\n        List of arrays of joint idices for\n        the parents of each joint\n    \"\"\"", "\n", "return", "list", "(", "parents", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.children_list": [[107, 127], ["list", "map", "AnimationStructure.joints", "enumerate", "numpy.array", "AnimationStructure.children_list.joint_children"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints"], ["", "def", "children_list", "(", "parents", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n    \n    Returns\n    -------\n    \n    children : [ndarray]\n        List of arrays of joint indices for\n        the children of each joint\n    \"\"\"", "\n", "\n", "def", "joint_children", "(", "i", ")", ":", "\n", "        ", "return", "[", "j", "for", "j", ",", "p", "in", "enumerate", "(", "parents", ")", "if", "p", "==", "i", "]", "\n", "\n", "", "return", "list", "(", "map", "(", "lambda", "j", ":", "np", ".", "array", "(", "joint_children", "(", "j", ")", ")", ",", "joints", "(", "parents", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.descendants_list": [[129, 151], ["AnimationStructure.children_list", "list", "sum", "map", "list", "AnimationStructure.joints", "AnimationStructure.descendants_list.joint_descendants"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.children_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints"], ["", "def", "descendants_list", "(", "parents", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n    \n    Returns\n    -------\n    \n    descendants : [ndarray]\n        List of arrays of joint idices for\n        the descendants of each joint\n    \"\"\"", "\n", "\n", "children", "=", "children_list", "(", "parents", ")", "\n", "\n", "def", "joint_descendants", "(", "i", ")", ":", "\n", "        ", "return", "sum", "(", "[", "joint_descendants", "(", "j", ")", "for", "j", "in", "children", "[", "i", "]", "]", ",", "list", "(", "children", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "list", "(", "map", "(", "lambda", "j", ":", "np", ".", "array", "(", "joint_descendants", "(", "j", ")", ")", ",", "joints", "(", "parents", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.ancestors_list": [[153, 175], ["AnimationStructure.descendants_list", "list", "map", "AnimationStructure.joints", "AnimationStructure.joints", "numpy.array", "AnimationStructure.ancestors_list.joint_ancestors"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.descendants_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints"], ["", "def", "ancestors_list", "(", "parents", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n    \n    Returns\n    -------\n    \n    ancestors : [ndarray]\n        List of arrays of joint idices for\n        the ancestors of each joint\n    \"\"\"", "\n", "\n", "decendants", "=", "descendants_list", "(", "parents", ")", "\n", "\n", "def", "joint_ancestors", "(", "i", ")", ":", "\n", "        ", "return", "[", "j", "for", "j", "in", "joints", "(", "parents", ")", "if", "i", "in", "decendants", "[", "j", "]", "]", "\n", "\n", "", "return", "list", "(", "map", "(", "lambda", "j", ":", "np", ".", "array", "(", "joint_ancestors", "(", "j", ")", ")", ",", "joints", "(", "parents", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.mask": [[179, 213], ["numpy.zeros().astype", "AnimationStructure.joints", "enumerate", "numpy.any", "numpy.zeros", "len", "len", "AnimationStructure.children_list", "AnimationStructure.parents_list", "AnimationStructure.descendants_list", "AnimationStructure.ancestors_list"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.children_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.parents_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.descendants_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.ancestors_list"], ["def", "mask", "(", "parents", ",", "filter", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a Mask for a give filter\n    \n    A mask is a (J, J) ndarray truth table for a given\n    condition over J joints. For example there\n    may be a mask specifying if a joint N is a\n    child of another joint M.\n\n    This could be constructed into a mask using\n    `m = mask(parents, children_list)` and the condition\n    of childhood tested using `m[N, M]`.\n    \n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n        \n    filter : (J) ndarray -> [ndarray]\n        function that outputs a list of arrays\n        of joint indices for some condition\n\n    Returns\n    -------\n    \n    mask : (N, N) ndarray\n        boolean truth table of given condition\n    \"\"\"", "\n", "m", "=", "np", ".", "zeros", "(", "(", "len", "(", "parents", ")", ",", "len", "(", "parents", ")", ")", ")", ".", "astype", "(", "bool", ")", "\n", "jnts", "=", "joints", "(", "parents", ")", "\n", "fltr", "=", "filter", "(", "parents", ")", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "fltr", ")", ":", "m", "[", "i", ",", ":", "]", "=", "np", ".", "any", "(", "jnts", "[", ":", ",", "np", ".", "newaxis", "]", "==", "f", "[", "np", ".", "newaxis", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints_mask": [[214, 215], ["numpy.eye().astype", "numpy.eye", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "joints_mask", "(", "parents", ")", ":", "return", "np", ".", "eye", "(", "len", "(", "parents", ")", ")", ".", "astype", "(", "bool", ")", "\n", "def", "children_mask", "(", "parents", ")", ":", "return", "mask", "(", "parents", ",", "children_list", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.children_mask": [[215, 216], ["AnimationStructure.mask"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.mask"], ["def", "children_mask", "(", "parents", ")", ":", "return", "mask", "(", "parents", ",", "children_list", ")", "\n", "def", "parents_mask", "(", "parents", ")", ":", "return", "mask", "(", "parents", ",", "parents_list", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.parents_mask": [[216, 217], ["AnimationStructure.mask"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.mask"], ["def", "parents_mask", "(", "parents", ")", ":", "return", "mask", "(", "parents", ",", "parents_list", ")", "\n", "def", "descendants_mask", "(", "parents", ")", ":", "return", "mask", "(", "parents", ",", "descendants_list", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.descendants_mask": [[217, 218], ["AnimationStructure.mask"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.mask"], ["def", "descendants_mask", "(", "parents", ")", ":", "return", "mask", "(", "parents", ",", "descendants_list", ")", "\n", "def", "ancestors_mask", "(", "parents", ")", ":", "return", "mask", "(", "parents", ",", "ancestors_list", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.ancestors_mask": [[218, 219], ["AnimationStructure.mask"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.mask"], ["def", "ancestors_mask", "(", "parents", ")", ":", "return", "mask", "(", "parents", ",", "ancestors_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joint_chain_ascend": [[222, 229], ["chain.append", "numpy.array", "chain.append"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["def", "joint_chain_ascend", "(", "parents", ",", "start", ",", "end", ")", ":", "\n", "    ", "chain", "=", "[", "]", "\n", "while", "start", "!=", "end", ":", "\n", "        ", "chain", ".", "append", "(", "start", ")", "\n", "start", "=", "parents", "[", "start", "]", "\n", "", "chain", ".", "append", "(", "end", ")", "\n", "return", "np", ".", "array", "(", "chain", ",", "dtype", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.constraints": [[233, 290], ["kwargs.pop", "AnimationStructure.children_list", "Animation.offsets_global", "Animation.positions_global", "xrange", "masses[].repeat", "len", "constraints.append", "numpy.absolute", "numpy.sum", "constraints.append", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.children_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.offsets_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.positions_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["def", "constraints", "(", "anim", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constraint list for Animation\n    \n    This constraint list can be used in the\n    VerletParticle solver to constrain\n    a animation global joint positions.\n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        Input animation\n        \n    masses : (F, J) ndarray\n        Optional list of masses\n        for joints J across frames F\n        defaults to weighting by\n        vertical height\n    \n    Returns\n    -------\n    \n    constraints : [(int, int, (F, J) ndarray, (F, J) ndarray, (F, J) ndarray)]\n        A list of constraints in the format:\n        (Joint1, Joint2, Masses1, Masses2, Lengths)\n    \n    \"\"\"", "\n", "\n", "masses", "=", "kwargs", ".", "pop", "(", "'masses'", ",", "None", ")", "\n", "\n", "children", "=", "children_list", "(", "anim", ".", "parents", ")", "\n", "constraints", "=", "[", "]", "\n", "\n", "points_offsets", "=", "Animation", ".", "offsets_global", "(", "anim", ")", "\n", "points", "=", "Animation", ".", "positions_global", "(", "anim", ")", "\n", "\n", "if", "masses", "is", "None", ":", "\n", "        ", "masses", "=", "1.0", "/", "(", "0.1", "+", "np", ".", "absolute", "(", "points_offsets", "[", ":", ",", "1", "]", ")", ")", "\n", "masses", "=", "masses", "[", "np", ".", "newaxis", "]", ".", "repeat", "(", "len", "(", "anim", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "j", "in", "xrange", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "        ", "\"\"\" Add constraints between all joints and their children \"\"\"", "\n", "for", "c0", "in", "children", "[", "j", "]", ":", "\n", "\n", "            ", "dists", "=", "np", ".", "sum", "(", "(", "points", "[", ":", ",", "c0", "]", "-", "points", "[", ":", ",", "j", "]", ")", "**", "2.0", ",", "axis", "=", "1", ")", "**", "0.5", "\n", "constraints", ".", "append", "(", "(", "c0", ",", "j", ",", "masses", "[", ":", ",", "c0", "]", ",", "masses", "[", ":", ",", "j", "]", ",", "dists", ")", ")", "\n", "\n", "\"\"\" Add constraints between all children of joint \"\"\"", "\n", "for", "c1", "in", "children", "[", "j", "]", ":", "\n", "                ", "if", "c0", "==", "c1", ":", "continue", "\n", "\n", "dists", "=", "np", ".", "sum", "(", "(", "points", "[", ":", ",", "c0", "]", "-", "points", "[", ":", ",", "c1", "]", ")", "**", "2.0", ",", "axis", "=", "1", ")", "**", "0.5", "\n", "constraints", ".", "append", "(", "(", "c0", ",", "c1", ",", "masses", "[", ":", ",", "c0", "]", ",", "masses", "[", ":", ",", "c1", "]", ",", "dists", ")", ")", "\n", "\n", "", "", "", "return", "constraints", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.graph": [[293, 337], ["numpy.zeros", "enumerate", "numpy.sum"], "function", ["None"], ["def", "graph", "(", "anim", ")", ":", "\n", "    ", "\"\"\"\n    Generates a weighted adjacency matrix\n    using local joint distances along\n    the skeletal structure.\n    \n    Joints which are not connected\n    are assigned the weight `0`.\n    \n    Joints which actually have zero distance\n    between them, but are still connected, are\n    perturbed by some minimal amount.\n    \n    The output of this routine can be used\n    with the `scipy.sparse.csgraph`\n    routines for graph analysis.\n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        input animation\n        \n    Returns\n    -------\n    \n    graph : (N, N) ndarray\n        weight adjacency matrix using\n        local distances along the\n        skeletal structure from joint\n        N to joint M. If joints are not\n        directly connected are assigned\n        the weight `0`.\n    \"\"\"", "\n", "\n", "graph", "=", "np", ".", "zeros", "(", "anim", ".", "shape", "[", "1", "]", ",", "anim", ".", "shape", "[", "1", "]", ")", "\n", "lengths", "=", "np", ".", "sum", "(", "anim", ".", "offsets", "**", "2.0", ",", "axis", "=", "1", ")", "**", "0.5", "+", "0.001", "\n", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "anim", ".", "parents", ")", ":", "\n", "        ", "if", "p", "==", "-", "1", ":", "continue", "\n", "graph", "[", "i", ",", "p", "]", "=", "lengths", "[", "p", "]", "\n", "graph", "[", "p", ",", "i", "]", "=", "lengths", "[", "p", "]", "\n", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.distances": [[339, 396], ["numpy.zeros", "np.zeros.copy().astype", "AnimationStructure.children_list", "AnimationStructure.parents_list", "xrange", "numpy.sum", "min", "xrange", "np.zeros.copy", "AnimationStructure.distances.find_distance"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.children_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.parents_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "distances", "(", "anim", ")", ":", "\n", "    ", "\"\"\"\n    Generates a distance matrix for\n    pairwise joint distances along\n    the skeletal structure\n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        input animation\n        \n    Returns\n    -------\n    \n    distances : (N, N) ndarray\n        array of pairwise distances\n        along skeletal structure\n        from some joint N to some\n        joint M\n    \"\"\"", "\n", "\n", "distances", "=", "np", ".", "zeros", "(", "(", "anim", ".", "shape", "[", "1", "]", ",", "anim", ".", "shape", "[", "1", "]", ")", ")", "\n", "generated", "=", "distances", ".", "copy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "joint_lengths", "=", "np", ".", "sum", "(", "anim", ".", "offsets", "**", "2.0", ",", "axis", "=", "1", ")", "**", "0.5", "\n", "joint_children", "=", "children_list", "(", "anim", ")", "\n", "joint_parents", "=", "parents_list", "(", "anim", ")", "\n", "\n", "def", "find_distance", "(", "distances", ",", "generated", ",", "prev", ",", "i", ",", "j", ")", ":", "\n", "\n", "        ", "\"\"\" If root, identity, or already generated, return \"\"\"", "\n", "if", "j", "==", "-", "1", ":", "return", "(", "0.0", ",", "True", ")", "\n", "if", "j", "==", "i", ":", "return", "(", "0.0", ",", "True", ")", "\n", "if", "generated", "[", "i", ",", "j", "]", ":", "return", "(", "distances", "[", "i", ",", "j", "]", ",", "True", ")", "\n", "\n", "\"\"\" Find best distances along parents and children \"\"\"", "\n", "par_dists", "=", "[", "(", "joint_lengths", "[", "j", "]", ",", "find_distance", "(", "distances", ",", "generated", ",", "j", ",", "i", ",", "p", ")", ")", "for", "p", "in", "joint_parents", "[", "j", "]", "if", "p", "!=", "prev", "]", "\n", "out_dists", "=", "[", "(", "joint_lengths", "[", "c", "]", ",", "find_distance", "(", "distances", ",", "generated", ",", "j", ",", "i", ",", "c", ")", ")", "for", "c", "in", "joint_children", "[", "j", "]", "if", "c", "!=", "prev", "]", "\n", "\n", "\"\"\" Check valid distance and not dead end \"\"\"", "\n", "par_dists", "=", "[", "a", "+", "d", "for", "(", "a", ",", "(", "d", ",", "f", ")", ")", "in", "par_dists", "if", "f", "]", "\n", "out_dists", "=", "[", "a", "+", "d", "for", "(", "a", ",", "(", "d", ",", "f", ")", ")", "in", "out_dists", "if", "f", "]", "\n", "\n", "\"\"\" All dead ends \"\"\"", "\n", "if", "(", "out_dists", "+", "par_dists", ")", "==", "[", "]", ":", "return", "(", "0.0", ",", "False", ")", "\n", "\n", "\"\"\" Get minimum path \"\"\"", "\n", "dist", "=", "min", "(", "out_dists", "+", "par_dists", ")", "\n", "distances", "[", "i", ",", "j", "]", "=", "dist", ";", "distances", "[", "j", ",", "i", "]", "=", "dist", "\n", "generated", "[", "i", ",", "j", "]", "=", "True", ";", "generated", "[", "j", ",", "i", "]", "=", "True", "\n", "\n", "", "for", "i", "in", "xrange", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "for", "j", "in", "xrange", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "find_distance", "(", "distances", ",", "generated", ",", "-", "1", ",", "i", ",", "j", ")", "\n", "\n", "", "", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.edges": [[397, 418], ["numpy.array", "list", "zip", "AnimationStructure.joints"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints"], ["", "def", "edges", "(", "parents", ")", ":", "\n", "    ", "\"\"\"\n    Animation structure edges\n    \n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n        \n    Returns\n    -------\n    \n    edges : (M, 2) ndarray\n        array of pairs where each\n        pair contains two indices of a joints\n        which corrisponds to an edge in the\n        joint structure going from parent to child.\n    \"\"\"", "\n", "\n", "return", "np", ".", "array", "(", "list", "(", "zip", "(", "parents", ",", "joints", "(", "parents", ")", ")", ")", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.incidence": [[420, 451], ["AnimationStructure.edges", "numpy.zeros().astype", "enumerate", "numpy.zeros", "len", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.edges", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "incidence", "(", "parents", ")", ":", "\n", "    ", "\"\"\"\n    Incidence Matrix\n    \n    Parameters\n    ----------\n    \n    parents : (J) ndarray\n        parents array\n        \n    Returns\n    -------\n    \n    incidence : (N, M) ndarray\n        \n        Matrix of N joint positions by\n        M edges which each entry is either\n        1 or -1 and multiplication by the\n        joint positions returns the an\n        array of vectors along each edge\n        of the structure\n    \"\"\"", "\n", "\n", "es", "=", "edges", "(", "parents", ")", "\n", "\n", "inc", "=", "np", ".", "zeros", "(", "(", "len", "(", "parents", ")", "-", "1", ",", "len", "(", "parents", ")", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "es", ")", ":", "\n", "        ", "inc", "[", "i", ",", "e", "[", "0", "]", "]", "=", "1", "\n", "inc", "[", "i", ",", "e", "[", "1", "]", "]", "=", "-", "1", "\n", "\n", "", "return", "inc", ".", "T", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.__init__": [[15, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "projection", ")", ":", "\n", "        ", "self", ".", "projection", "=", "projection", "# [T, J, 2]", "\n", "self", ".", "style2d", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.get_style2d": [[19, 28], ["animation_2d_data.AnimationData2D.projection[].copy", "numpy.concatenate", "style2d.reshape().swapaxes.reshape().swapaxes.reshape().swapaxes", "animation_2d_data.AnimationData2D.projection[].copy", "style2d.reshape().swapaxes.reshape().swapaxes.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "get_style2d", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "style2d", "is", "None", ":", "\n", "            ", "root", "=", "self", ".", "projection", "[", "...", ",", ":", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "relative", "=", "self", ".", "projection", "[", "...", ",", "1", ":", ",", ":", "]", ".", "copy", "(", ")", "-", "root", "\n", "style2d", "=", "np", ".", "concatenate", "(", "[", "relative", ",", "root", "]", ",", "axis", "=", "-", "2", ")", "\n", "style2d", "=", "style2d", ".", "reshape", "(", "style2d", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", ".", "swapaxes", "(", "-", "1", ",", "-", "2", ")", "\n", "self", ".", "style2d", "=", "style2d", "\n", "\n", "", "return", "self", ".", "style2d", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.get_projection": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_projection", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "projection", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.from_style2d": [[32, 40], ["style2d.reshape.reshape.swapaxes", "style2d.reshape.reshape.reshape", "numpy.concatenate", "cls"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "@", "classmethod", "\n", "def", "from_style2d", "(", "cls", ",", "style2d", ")", ":", "\n", "        ", "style2d", "=", "style2d", ".", "swapaxes", "(", "-", "1", ",", "-", "2", ")", "# [J * 2, T] -> [T, J * 2]", "\n", "style2d", "=", "style2d", ".", "reshape", "(", "style2d", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", "2", ")", ")", "# [T, J, 2]", "\n", "root", ",", "relative", "=", "style2d", "[", "...", ",", "-", "1", ":", ",", ":", "]", ",", "style2d", "[", "...", ",", ":", "-", "1", ",", ":", "]", "\n", "relative", "=", "relative", "+", "root", "\n", "projection", "=", "np", ".", "concatenate", "(", "[", "root", ",", "relative", "]", ",", "axis", "=", "-", "2", ")", "\n", "return", "cls", "(", "projection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.from_openpose_json": [[41, 111], ["sorted", "range", "numpy.stack", "numpy.zeros", "range", "cls", "os.listdir", "os.path.join", "scipy.ndimage.gaussian_filter1d", "len", "open", "json.load", "numpy.concatenate", "scipy.ndimage.gaussian_filter1d.append", "len", "len", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "len", "numpy.where", "numpy.where", "scipy.ndimage.gaussian_filter1d.append", "numpy.array", "numpy.array", "numpy.array", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "@", "classmethod", "\n", "def", "from_openpose_json", "(", "cls", ",", "json_dir", ",", "scale", "=", "0.07", ",", "smooth", "=", "True", ")", ":", "\n", "        ", "json_files", "=", "sorted", "(", "os", ".", "listdir", "(", "json_dir", ")", ")", "\n", "length", "=", "len", "(", "json_files", ")", "//", "4", "*", "4", "\n", "json_files", "=", "json_files", "[", ":", "length", "]", "\n", "json_files", "=", "[", "os", ".", "path", ".", "join", "(", "json_dir", ",", "x", ")", "for", "x", "in", "json_files", "]", "\n", "\n", "motion", "=", "[", "]", "\n", "joint_map", "=", "{", "\n", "0", ":", "8", ",", "\n", "1", ":", "12", ",", "2", ":", "13", ",", "3", ":", "14", ",", "4", ":", "19", ",", "\n", "5", ":", "9", ",", "6", ":", "10", ",", "7", ":", "11", ",", "8", ":", "22", ",", "\n", "# 9 is somewhere between 0 & 10", "\n", "10", ":", "1", ",", "\n", "# 11 is somewhere between 10 and 12", "\n", "12", ":", "0", ",", "\n", "13", ":", "5", ",", "14", ":", "6", ",", "15", ":", "7", ",", "# 16 is a little bit further", "\n", "17", ":", "2", ",", "18", ":", "3", ",", "19", ":", "4", ",", "# 20 is a little bit further", "\n", "}", "\n", "\n", "num_joints", "=", "21", "\n", "start", "=", "False", "\n", "\n", "for", "path", "in", "json_files", ":", "\n", "            ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "                ", "joint_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "len", "(", "joint_dict", "[", "'people'", "]", ")", "==", "0", ":", "\n", "                    ", "if", "start", ":", "\n", "                        ", "raw_joint", "=", "motion", "[", "-", "1", "]", "\n", "motion", ".", "append", "(", "raw_joint", ")", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "", "", "start", "=", "True", "\n", "body_joint", "=", "np", ".", "array", "(", "joint_dict", "[", "'people'", "]", "[", "0", "]", "[", "'pose_keypoints_2d'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "[", ":", ",", ":", "2", "]", "\n", "lhand_joint", "=", "np", ".", "array", "(", "joint_dict", "[", "'people'", "]", "[", "0", "]", "[", "'hand_left_keypoints_2d'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "[", ":", ",", ":", "2", "]", "\n", "rhand_joint", "=", "np", ".", "array", "(", "joint_dict", "[", "'people'", "]", "[", "0", "]", "[", "'hand_right_keypoints_2d'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "[", ":", ",", ":", "2", "]", "\n", "raw_joint", "=", "np", ".", "concatenate", "(", "[", "body_joint", ",", "lhand_joint", ",", "rhand_joint", "]", ",", "axis", "=", "-", "2", ")", "\n", "if", "len", "(", "motion", ")", ">", "0", ":", "\n", "                    ", "raw_joint", "[", "np", ".", "where", "(", "raw_joint", "==", "0", ")", "]", "=", "motion", "[", "-", "1", "]", "[", "np", ".", "where", "(", "raw_joint", "==", "0", ")", "]", "\n", "", "motion", ".", "append", "(", "raw_joint", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "motion", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "motion", "[", "i", "-", "1", "]", "[", "np", ".", "where", "(", "motion", "[", "i", "-", "1", "]", "==", "0", ")", "]", "=", "motion", "[", "i", "]", "[", "np", ".", "where", "(", "motion", "[", "i", "-", "1", "]", "==", "0", ")", "]", "\n", "\n", "", "motion", "=", "np", ".", "stack", "(", "motion", ",", "axis", "=", "0", ")", "\n", "# motion: [T, J, 2]", "\n", "\n", "trans_motion", "=", "np", ".", "zeros", "(", "(", "motion", ".", "shape", "[", "0", "]", ",", "num_joints", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "if", "i", "in", "[", "9", ",", "11", ",", "12", ",", "16", ",", "20", "]", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "trans_motion", "[", ":", ",", "i", ",", ":", "]", "=", "motion", "[", ":", ",", "joint_map", "[", "i", "]", ",", ":", "]", "\n", "\n", "", "", "trans_motion", "[", ":", ",", "12", ",", ":", "]", "=", "(", "motion", "[", ":", ",", "15", ",", ":", "]", "+", "motion", "[", ":", ",", "16", ",", ":", "]", ")", "/", "2.0", "\n", "trans_motion", "[", ":", ",", "16", ",", ":", "]", "=", "motion", "[", ":", ",", "35", ",", ":", "]", "# 25 + 10", "\n", "trans_motion", "[", ":", ",", "20", ",", ":", "]", "=", "motion", "[", ":", ",", "56", ",", ":", "]", "# 25 + 21 + 10", "\n", "\n", "trans_motion", "[", ":", ",", "9", ",", ":", "]", "=", "(", "trans_motion", "[", ":", ",", "0", ",", ":", "]", "+", "trans_motion", "[", ":", ",", "10", ",", ":", "]", ")", "/", "2", "\n", "trans_motion", "[", ":", ",", "11", ",", ":", "]", "=", "(", "trans_motion", "[", ":", ",", "10", ",", ":", "]", "+", "trans_motion", "[", ":", ",", "12", ",", ":", "]", ")", "/", "2", "\n", "\n", "motion", "=", "trans_motion", "\n", "motion", "[", ":", ",", ":", ",", "1", "]", "=", "-", "motion", "[", ":", ",", ":", ",", "1", "]", "# upside-down", "\n", "motion", "[", ":", ",", ":", ",", ":", "]", "-=", "motion", "[", "0", ":", "1", ",", "0", ":", "1", ",", ":", "]", "# start from zero", "\n", "\n", "if", "smooth", ":", "\n", "            ", "motion", "=", "gaussian_filter1d", "(", "motion", ",", "sigma", "=", "2", ",", "axis", "=", "0", ")", "\n", "\n", "", "motion", "=", "motion", "*", "scale", "\n", "return", "cls", "(", "motion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.test": [[113, 126], ["numpy.random.rand", "animation_2d_data.AnimationData2D.from_style2d", "AnimationData2D.from_style2d.get_style2d", "print", "style_transfer.probe.anim_view.visualize", "numpy.sum", "animation_2d_data.AnimationData2D.from_openpose_json", "AnimationData2D.from_openpose_json.get_projection", "str"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.from_style2d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.get_style2d", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.probe.anim_view.visualize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.from_openpose_json", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.animation_2d_data.AnimationData2D.get_projection"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "style2d", "=", "np", ".", "random", ".", "rand", "(", "42", ",", "60", ")", "\n", "anim", "=", "AnimationData2D", ".", "from_style2d", "(", "style2d", ")", "\n", "bla", "=", "anim", ".", "get_style2d", "(", ")", "\n", "\n", "print", "(", "np", ".", "sum", "(", "style2d", "-", "bla", ")", ")", "\n", "\n", "bla", "=", "{", "}", "\n", "for", "num", "in", "[", "27", ",", "32", ",", "95", "]", ":", "\n", "        ", "anim2d", "=", "AnimationData2D", ".", "from_openpose_json", "(", "f'../../data/treadmill/json_inputs/{num}'", ")", "\n", "bla", "[", "str", "(", "num", ")", "]", "=", "{", "\"motion\"", ":", "anim2d", ".", "get_projection", "(", ")", ",", "\"foot_contact\"", ":", "None", "}", "\n", "\n", "", "visualize", "(", "bla", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH.load": [[27, 172], ["open", "Quaternions_old.Quaternions.id", "numpy.array().reshape", "numpy.array", "open.close", "Quaternions_old.Quaternions.from_euler", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "line.strip().split", "numpy.radians", "Animation.Animation", "numpy.array", "names.append", "numpy.append", "numpy.append", "numpy.append", "int", "names.append", "numpy.append", "numpy.append", "numpy.append", "len", "offsets[].repeat", "numpy.zeros", "float", "numpy.array", "len", "re.match.group", "numpy.array", "numpy.array", "len", "numpy.array", "re.match.group", "any", "re.match.group", "numpy.array", "numpy.array", "len", "int", "re.match.group", "line.strip", "list", "data_block[].reshape", "line.split", "re.match.group", "len", "map", "data_block[].reshape.reshape", "list", "data_block[].reshape", "Exception", "map", "re.match.groups"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["def", "load", "(", "filename", ",", "start", "=", "None", ",", "end", "=", "None", ",", "order", "=", "None", ",", "world", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Reads a BVH file and constructs an animation\n    \n    Parameters\n    ----------\n    filename: str\n        File to be opened\n        \n    start : int\n        Optional Starting Frame\n        \n    end : int\n        Optional Ending Frame\n    \n    order : str\n        Optional Specifier for joint order.\n        Given as string E.G 'xyz', 'zxy'\n        \n    world : bool\n        If set to true euler angles are applied\n        together in world space rather than local\n        space\n\n    Returns\n    -------\n    \n    (animation, joint_names, frametime)\n        Tuple of loaded animation and joint names\n    \"\"\"", "\n", "\n", "f", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "\n", "i", "=", "0", "\n", "active", "=", "-", "1", "\n", "end_site", "=", "False", "\n", "\n", "names", "=", "[", "]", "\n", "orients", "=", "Quaternions", ".", "id", "(", "0", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "(", "0", ",", "3", ")", ")", "\n", "parents", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "for", "line", "in", "f", ":", "\n", "\n", "        ", "if", "\"HIERARCHY\"", "in", "line", ":", "continue", "\n", "if", "\"MOTION\"", "in", "line", ":", "continue", "\n", "\n", "rmatch", "=", "re", ".", "match", "(", "r\"ROOT (\\w+)\"", ",", "line", ")", "\n", "if", "rmatch", ":", "\n", "            ", "names", ".", "append", "(", "rmatch", ".", "group", "(", "1", ")", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", ".", "qs", "=", "np", ".", "append", "(", "orients", ".", "qs", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "continue", "\n", "\n", "", "if", "\"{\"", "in", "line", ":", "continue", "\n", "\n", "if", "\"}\"", "in", "line", ":", "\n", "            ", "if", "end_site", ":", "end_site", "=", "False", "\n", "else", ":", "active", "=", "parents", "[", "active", "]", "\n", "continue", "\n", "\n", "", "offmatch", "=", "re", ".", "match", "(", "r\"\\s*OFFSET\\s+([\\-\\d\\.e]+)\\s+([\\-\\d\\.e]+)\\s+([\\-\\d\\.e]+)\"", ",", "line", ")", "\n", "if", "offmatch", ":", "\n", "            ", "if", "not", "end_site", ":", "\n", "                ", "offsets", "[", "active", "]", "=", "np", ".", "array", "(", "[", "list", "(", "map", "(", "float", ",", "offmatch", ".", "groups", "(", ")", ")", ")", "]", ")", "\n", "", "continue", "\n", "\n", "", "chanmatch", "=", "re", ".", "match", "(", "r\"\\s*CHANNELS\\s+(\\d+)\"", ",", "line", ")", "\n", "if", "chanmatch", ":", "\n", "            ", "channels", "=", "int", "(", "chanmatch", ".", "group", "(", "1", ")", ")", "\n", "if", "order", "is", "None", ":", "\n", "                ", "channelis", "=", "0", "if", "channels", "==", "3", "else", "3", "\n", "channelie", "=", "3", "if", "channels", "==", "3", "else", "6", "\n", "parts", "=", "line", ".", "split", "(", ")", "[", "2", "+", "channelis", ":", "2", "+", "channelie", "]", "\n", "if", "any", "(", "[", "p", "not", "in", "channelmap", "for", "p", "in", "parts", "]", ")", ":", "\n", "                    ", "continue", "\n", "", "order", "=", "\"\"", ".", "join", "(", "[", "channelmap", "[", "p", "]", "for", "p", "in", "parts", "]", ")", "\n", "", "continue", "\n", "\n", "", "jmatch", "=", "re", ".", "match", "(", "\"\\s*JOINT\\s+(\\w+)\"", ",", "line", ")", "\n", "if", "jmatch", ":", "\n", "            ", "names", ".", "append", "(", "jmatch", ".", "group", "(", "1", ")", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", ".", "qs", "=", "np", ".", "append", "(", "orients", ".", "qs", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "continue", "\n", "\n", "", "if", "\"End Site\"", "in", "line", ":", "\n", "            ", "end_site", "=", "True", "\n", "continue", "\n", "\n", "", "fmatch", "=", "re", ".", "match", "(", "\"\\s*Frames:\\s+(\\d+)\"", ",", "line", ")", "\n", "if", "fmatch", ":", "\n", "            ", "if", "start", "and", "end", ":", "\n", "                ", "fnum", "=", "(", "end", "-", "start", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "fnum", "=", "int", "(", "fmatch", ".", "group", "(", "1", ")", ")", "\n", "", "jnum", "=", "len", "(", "parents", ")", "\n", "# result: [fnum, J, 3]", "\n", "positions", "=", "offsets", "[", "np", ".", "newaxis", "]", ".", "repeat", "(", "fnum", ",", "axis", "=", "0", ")", "\n", "# result: [fnum, len(orients), 3]", "\n", "rotations", "=", "np", ".", "zeros", "(", "(", "fnum", ",", "len", "(", "orients", ")", ",", "3", ")", ")", "\n", "continue", "\n", "\n", "", "fmatch", "=", "re", ".", "match", "(", "\"\\s*Frame Time:\\s+([\\d\\.]+)\"", ",", "line", ")", "\n", "if", "fmatch", ":", "\n", "            ", "frametime", "=", "float", "(", "fmatch", ".", "group", "(", "1", ")", ")", "\n", "continue", "\n", "\n", "", "if", "(", "start", "and", "end", ")", "and", "(", "i", "<", "start", "or", "i", ">=", "end", "-", "1", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "continue", "\n", "\n", "", "dmatch", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "dmatch", ":", "\n", "            ", "data_block", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "dmatch", ")", ")", ")", "\n", "N", "=", "len", "(", "parents", ")", "\n", "fi", "=", "i", "-", "start", "if", "start", "else", "i", "\n", "if", "channels", "==", "3", ":", "\n", "# This should be root positions[0:1] & all rotations", "\n", "                ", "positions", "[", "fi", ",", "0", ":", "1", "]", "=", "data_block", "[", "0", ":", "3", "]", "\n", "rotations", "[", "fi", ",", ":", "]", "=", "data_block", "[", "3", ":", "]", ".", "reshape", "(", "N", ",", "3", ")", "\n", "", "elif", "channels", "==", "6", ":", "\n", "                ", "data_block", "=", "data_block", ".", "reshape", "(", "N", ",", "6", ")", "\n", "# fill in all positions", "\n", "positions", "[", "fi", ",", ":", "]", "=", "data_block", "[", ":", ",", "0", ":", "3", "]", "\n", "rotations", "[", "fi", ",", ":", "]", "=", "data_block", "[", ":", ",", "3", ":", "6", "]", "\n", "", "elif", "channels", "==", "9", ":", "\n", "                ", "positions", "[", "fi", ",", "0", "]", "=", "data_block", "[", "0", ":", "3", "]", "\n", "data_block", "=", "data_block", "[", "3", ":", "]", ".", "reshape", "(", "N", "-", "1", ",", "9", ")", "\n", "rotations", "[", "fi", ",", "1", ":", "]", "=", "data_block", "[", ":", ",", "3", ":", "6", "]", "\n", "positions", "[", "fi", ",", "1", ":", "]", "+=", "data_block", "[", ":", ",", "0", ":", "3", "]", "*", "data_block", "[", ":", ",", "6", ":", "9", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Too many channels! %i\"", "%", "channels", ")", "\n", "\n", "", "i", "+=", "1", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "rotations", "=", "Quaternions", ".", "from_euler", "(", "np", ".", "radians", "(", "rotations", ")", ",", "order", "=", "order", ",", "world", "=", "world", ")", "\n", "\n", "return", "(", "Animation", "(", "rotations", ",", "positions", ",", "orients", ",", "offsets", ",", "parents", ")", ",", "names", ",", "frametime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH.load_bfa": [[173, 343], ["open", "Quaternions_old.Quaternions.id", "numpy.array().reshape", "numpy.array", "open.close", "Quaternions_old.Quaternions.from_euler", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "line.strip().split", "numpy.radians", "Animation.Animation", "numpy.array", "names.append", "numpy.append", "numpy.append", "numpy.append", "int", "names.append", "numpy.append", "numpy.append", "numpy.append", "len", "offsets[].repeat", "numpy.zeros", "float", "numpy.array", "len", "re.match.group", "numpy.array", "numpy.array", "len", "numpy.array", "re.match.group", "any", "re.match.group", "numpy.array", "numpy.array", "len", "print", "names.append", "numpy.append", "numpy.append", "numpy.append", "int", "re.match.group", "line.strip", "list", "data_block[].reshape", "numpy.concatenate", "np.concatenate.reshape", "line.split", "numpy.array", "numpy.array", "len", "re.match.group", "len", "map", "data_block[].reshape.reshape", "list", "numpy.array", "numpy.array", "data_block[].reshape", "Exception", "map", "re.match.groups"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "load_bfa", "(", "filename", ",", "start", "=", "None", ",", "end", "=", "None", ",", "order", "=", "None", ",", "world", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Reads a BVH file and constructs an animation\n\n    !!! Read from bfa, will replace the end sites of arms by two joints (w/ unit rotation)\n\n    Parameters\n    ----------\n    filename: str\n        File to be opened\n\n    start : int\n        Optional Starting Frame\n\n    end : int\n        Optional Ending Frame\n\n    order : str\n        Optional Specifier for joint order.\n        Given as string E.G 'xyz', 'zxy'\n\n    world : bool\n        If set to true euler angles are applied\n        together in world space rather than local\n        space\n\n    Returns\n    -------\n\n    (animation, joint_names, frametime)\n        Tuple of loaded animation and joint names\n    \"\"\"", "\n", "\n", "f", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "\n", "i", "=", "0", "\n", "active", "=", "-", "1", "\n", "end_site", "=", "False", "\n", "\n", "hand_idx", "=", "[", "9", ",", "14", "]", "\n", "\n", "names", "=", "[", "]", "\n", "orients", "=", "Quaternions", ".", "id", "(", "0", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "(", "0", ",", "3", ")", ")", "\n", "parents", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "for", "line", "in", "f", ":", "\n", "\n", "        ", "if", "\"HIERARCHY\"", "in", "line", ":", "continue", "\n", "if", "\"MOTION\"", "in", "line", ":", "continue", "\n", "\n", "rmatch", "=", "re", ".", "match", "(", "r\"ROOT (\\w+)\"", ",", "line", ")", "\n", "if", "rmatch", ":", "\n", "            ", "names", ".", "append", "(", "rmatch", ".", "group", "(", "1", ")", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", ".", "qs", "=", "np", ".", "append", "(", "orients", ".", "qs", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "continue", "\n", "\n", "", "if", "\"{\"", "in", "line", ":", "continue", "\n", "\n", "if", "\"}\"", "in", "line", ":", "\n", "            ", "if", "end_site", ":", "end_site", "=", "False", "\n", "else", ":", "active", "=", "parents", "[", "active", "]", "\n", "continue", "\n", "\n", "", "offmatch", "=", "re", ".", "match", "(", "r\"\\s*OFFSET\\s+([\\-\\d\\.e]+)\\s+([\\-\\d\\.e]+)\\s+([\\-\\d\\.e]+)\"", ",", "line", ")", "\n", "if", "offmatch", ":", "\n", "            ", "if", "not", "end_site", ":", "\n", "                ", "offsets", "[", "active", "]", "=", "np", ".", "array", "(", "[", "list", "(", "map", "(", "float", ",", "offmatch", ".", "groups", "(", ")", ")", ")", "]", ")", "\n", "", "\"\"\"\n            else:\n                print(\"active = \", active)\n                if active in hand_idx:\n                    offsets[active] = np.array([list(map(float, offmatch.groups()))])\n            \"\"\"", "\n", "continue", "\n", "\n", "", "chanmatch", "=", "re", ".", "match", "(", "r\"\\s*CHANNELS\\s+(\\d+)\"", ",", "line", ")", "\n", "if", "chanmatch", ":", "\n", "            ", "channels", "=", "int", "(", "chanmatch", ".", "group", "(", "1", ")", ")", "\n", "if", "order", "is", "None", ":", "\n", "                ", "channelis", "=", "0", "if", "channels", "==", "3", "else", "3", "\n", "channelie", "=", "3", "if", "channels", "==", "3", "else", "6", "\n", "parts", "=", "line", ".", "split", "(", ")", "[", "2", "+", "channelis", ":", "2", "+", "channelie", "]", "\n", "if", "any", "(", "[", "p", "not", "in", "channelmap", "for", "p", "in", "parts", "]", ")", ":", "\n", "                    ", "continue", "\n", "", "order", "=", "\"\"", ".", "join", "(", "[", "channelmap", "[", "p", "]", "for", "p", "in", "parts", "]", ")", "\n", "", "continue", "\n", "\n", "", "jmatch", "=", "re", ".", "match", "(", "\"\\s*JOINT\\s+(\\w+)\"", ",", "line", ")", "\n", "if", "jmatch", ":", "\n", "            ", "names", ".", "append", "(", "jmatch", ".", "group", "(", "1", ")", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", ".", "qs", "=", "np", ".", "append", "(", "orients", ".", "qs", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "continue", "\n", "\n", "", "if", "\"End Site\"", "in", "line", ":", "\n", "            ", "if", "active", "+", "1", "in", "hand_idx", ":", "\n", "                ", "print", "(", "\"parent:\"", ",", "names", "[", "-", "1", "]", ")", "\n", "name", "=", "\"LeftHandIndex\"", "if", "active", "+", "1", "==", "hand_idx", "[", "0", "]", "else", "\"RightHandIndex\"", "\n", "names", ".", "append", "(", "name", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", ".", "qs", "=", "np", ".", "append", "(", "orients", ".", "qs", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "end_site", "=", "True", "\n", "", "continue", "\n", "\n", "", "fmatch", "=", "re", ".", "match", "(", "\"\\s*Frames:\\s+(\\d+)\"", ",", "line", ")", "\n", "if", "fmatch", ":", "\n", "            ", "if", "start", "and", "end", ":", "\n", "                ", "fnum", "=", "(", "end", "-", "start", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "fnum", "=", "int", "(", "fmatch", ".", "group", "(", "1", ")", ")", "\n", "", "jnum", "=", "len", "(", "parents", ")", "\n", "# result: [fnum, J, 3]", "\n", "positions", "=", "offsets", "[", "np", ".", "newaxis", "]", ".", "repeat", "(", "fnum", ",", "axis", "=", "0", ")", "\n", "# result: [fnum, len(orients), 3]", "\n", "rotations", "=", "np", ".", "zeros", "(", "(", "fnum", ",", "len", "(", "orients", ")", ",", "3", ")", ")", "\n", "continue", "\n", "\n", "", "fmatch", "=", "re", ".", "match", "(", "\"\\s*Frame Time:\\s+([\\d\\.]+)\"", ",", "line", ")", "\n", "if", "fmatch", ":", "\n", "            ", "frametime", "=", "float", "(", "fmatch", ".", "group", "(", "1", ")", ")", "\n", "continue", "\n", "\n", "", "if", "(", "start", "and", "end", ")", "and", "(", "i", "<", "start", "or", "i", ">=", "end", "-", "1", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "continue", "\n", "\n", "", "dmatch", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "dmatch", ":", "\n", "            ", "data_block", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "dmatch", ")", ")", ")", "\n", "N", "=", "len", "(", "parents", ")", "\n", "fi", "=", "i", "-", "start", "if", "start", "else", "i", "\n", "if", "channels", "==", "3", ":", "\n", "# This should be root positions[0:1] & all rotations", "\n", "                ", "positions", "[", "fi", ",", "0", ":", "1", "]", "=", "data_block", "[", "0", ":", "3", "]", "\n", "tmp", "=", "data_block", "[", "3", ":", "]", ".", "reshape", "(", "N", "-", "2", ",", "3", ")", "\n", "tmp", "=", "np", ".", "concatenate", "(", "[", "tmp", "[", ":", "hand_idx", "[", "0", "]", "]", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "tmp", "[", "hand_idx", "[", "0", "]", ":", "hand_idx", "[", "1", "]", "-", "1", "]", ",", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "\n", "tmp", "[", "hand_idx", "[", "1", "]", "-", "1", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "rotations", "[", "fi", ",", ":", "]", "=", "tmp", ".", "reshape", "(", "N", ",", "3", ")", "\n", "", "elif", "channels", "==", "6", ":", "\n", "                ", "data_block", "=", "data_block", ".", "reshape", "(", "N", ",", "6", ")", "\n", "# fill in all positions", "\n", "positions", "[", "fi", ",", ":", "]", "=", "data_block", "[", ":", ",", "0", ":", "3", "]", "\n", "rotations", "[", "fi", ",", ":", "]", "=", "data_block", "[", ":", ",", "3", ":", "6", "]", "\n", "", "elif", "channels", "==", "9", ":", "\n", "                ", "positions", "[", "fi", ",", "0", "]", "=", "data_block", "[", "0", ":", "3", "]", "\n", "data_block", "=", "data_block", "[", "3", ":", "]", ".", "reshape", "(", "N", "-", "1", ",", "9", ")", "\n", "rotations", "[", "fi", ",", "1", ":", "]", "=", "data_block", "[", ":", ",", "3", ":", "6", "]", "\n", "positions", "[", "fi", ",", "1", ":", "]", "+=", "data_block", "[", ":", ",", "0", ":", "3", "]", "*", "data_block", "[", ":", ",", "6", ":", "9", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Too many channels! %i\"", "%", "channels", ")", "\n", "\n", "", "i", "+=", "1", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "rotations", "=", "Quaternions", ".", "from_euler", "(", "np", ".", "radians", "(", "rotations", ")", ",", "order", "=", "order", ",", "world", "=", "world", ")", "\n", "\n", "return", "(", "Animation", "(", "rotations", ",", "positions", ",", "orients", ",", "offsets", ",", "parents", ")", ",", "names", ",", "frametime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH.save": [[345, 425], ["open", "f.write", "f.write", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "f.write", "f.write", "numpy.degrees", "range", "anim.rotations.euler", "range", "f.write", "str", "range", "BVH.save_joint", "len", "f.write", "f.write"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save_joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["", "def", "save", "(", "filename", ",", "anim", ",", "names", "=", "None", ",", "frametime", "=", "1.0", "/", "24.0", ",", "order", "=", "'zyx'", ",", "positions", "=", "False", ",", "orients", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Saves an Animation to file as BVH\n    \n    Parameters\n    ----------\n    filename: str\n        File to be saved to\n        \n    anim : Animation\n        Animation to save\n        \n    names : [str]\n        List of joint names\n    \n    order : str\n        Optional Specifier for joint order.\n        Given as string E.G 'xyz', 'zxy'\n    \n    frametime : float\n        Optional Animation Frame time\n        \n    positions : bool\n        Optional specfier to save bone\n        positions for each frame\n        \n    orients : bool\n        Multiply joint orients to the rotations\n        before saving.\n        \n    \"\"\"", "\n", "\n", "if", "names", "is", "None", ":", "\n", "        ", "names", "=", "[", "\"joint_\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "anim", ".", "parents", ")", ")", "]", "\n", "\n", "", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "\n", "        ", "t", "=", "\"\"", "\n", "f", ".", "write", "(", "\"%sHIERARCHY\\n\"", "%", "t", ")", "\n", "f", ".", "write", "(", "\"%sROOT %s\\n\"", "%", "(", "t", ",", "names", "[", "0", "]", ")", ")", "\n", "f", ".", "write", "(", "\"%s{\\n\"", "%", "t", ")", "\n", "t", "+=", "'\\t'", "\n", "\n", "f", ".", "write", "(", "\"%sOFFSET %f %f %f\\n\"", "%", "(", "t", ",", "anim", ".", "offsets", "[", "0", ",", "0", "]", ",", "anim", ".", "offsets", "[", "0", ",", "1", "]", ",", "anim", ".", "offsets", "[", "0", ",", "2", "]", ")", ")", "\n", "f", ".", "write", "(", "\"%sCHANNELS 6 Xposition Yposition Zposition %s %s %s \\n\"", "%", "\n", "(", "t", ",", "channelmap_inv", "[", "order", "[", "0", "]", "]", ",", "channelmap_inv", "[", "order", "[", "1", "]", "]", ",", "channelmap_inv", "[", "order", "[", "2", "]", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "anim", ".", "parents", "[", "i", "]", "==", "0", ":", "\n", "                ", "t", "=", "save_joint", "(", "f", ",", "anim", ",", "names", ",", "t", ",", "i", ",", "order", "=", "order", ",", "positions", "=", "positions", ")", "\n", "\n", "", "", "t", "=", "t", "[", ":", "-", "1", "]", "\n", "f", ".", "write", "(", "\"%s}\\n\"", "%", "t", ")", "\n", "\n", "f", ".", "write", "(", "\"MOTION\\n\"", ")", "\n", "f", ".", "write", "(", "\"Frames: %i\\n\"", "%", "anim", ".", "shape", "[", "0", "]", ")", ";", "\n", "f", ".", "write", "(", "\"Frame Time: %f\\n\"", "%", "frametime", ")", ";", "\n", "\n", "#if orients:        ", "\n", "#    rots = np.degrees((-anim.orients[np.newaxis] * anim.rotations).euler(order=order[::-1]))", "\n", "#else:", "\n", "#    rots = np.degrees(anim.rotations.euler(order=order[::-1]))", "\n", "rots", "=", "np", ".", "degrees", "(", "anim", ".", "rotations", ".", "euler", "(", "order", "=", "order", "[", ":", ":", "-", "1", "]", ")", ")", "\n", "poss", "=", "anim", ".", "positions", "\n", "\n", "for", "i", "in", "range", "(", "anim", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "                ", "if", "positions", "or", "j", "==", "0", ":", "\n", "\n", "                    ", "f", ".", "write", "(", "\"%f %f %f %f %f %f \"", "%", "(", "\n", "poss", "[", "i", ",", "j", ",", "0", "]", ",", "poss", "[", "i", ",", "j", ",", "1", "]", ",", "poss", "[", "i", ",", "j", ",", "2", "]", ",", "\n", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "0", "]", "]", "]", ",", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "1", "]", "]", "]", ",", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "2", "]", "]", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                    ", "f", ".", "write", "(", "\"%f %f %f \"", "%", "(", "\n", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "0", "]", "]", "]", ",", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "1", "]", "]", "]", ",", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "2", "]", "]", "]", ")", ")", "\n", "\n", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH.save_joint": [[427, 461], ["f.write", "f.write", "f.write", "range", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "BVH.save_joint"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save_joint"], ["", "", "", "def", "save_joint", "(", "f", ",", "anim", ",", "names", ",", "t", ",", "i", ",", "order", "=", "'zyx'", ",", "positions", "=", "False", ")", ":", "\n", "\n", "    ", "f", ".", "write", "(", "\"%sJOINT %s\\n\"", "%", "(", "t", ",", "names", "[", "i", "]", ")", ")", "\n", "f", ".", "write", "(", "\"%s{\\n\"", "%", "t", ")", "\n", "t", "+=", "'\\t'", "\n", "\n", "f", ".", "write", "(", "\"%sOFFSET %f %f %f\\n\"", "%", "(", "t", ",", "anim", ".", "offsets", "[", "i", ",", "0", "]", ",", "anim", ".", "offsets", "[", "i", ",", "1", "]", ",", "anim", ".", "offsets", "[", "i", ",", "2", "]", ")", ")", "\n", "\n", "if", "positions", ":", "\n", "        ", "f", ".", "write", "(", "\"%sCHANNELS 6 Xposition Yposition Zposition %s %s %s \\n\"", "%", "(", "t", ",", "\n", "channelmap_inv", "[", "order", "[", "0", "]", "]", ",", "channelmap_inv", "[", "order", "[", "1", "]", "]", ",", "channelmap_inv", "[", "order", "[", "2", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", ".", "write", "(", "\"%sCHANNELS 3 %s %s %s\\n\"", "%", "(", "t", ",", "\n", "channelmap_inv", "[", "order", "[", "0", "]", "]", ",", "channelmap_inv", "[", "order", "[", "1", "]", "]", ",", "channelmap_inv", "[", "order", "[", "2", "]", "]", ")", ")", "\n", "\n", "", "end_site", "=", "True", "\n", "\n", "for", "j", "in", "range", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "anim", ".", "parents", "[", "j", "]", "==", "i", ":", "\n", "            ", "t", "=", "save_joint", "(", "f", ",", "anim", ",", "names", ",", "t", ",", "j", ",", "order", "=", "order", ",", "positions", "=", "positions", ")", "\n", "end_site", "=", "False", "\n", "\n", "", "", "if", "end_site", ":", "\n", "        ", "f", ".", "write", "(", "\"%sEnd Site\\n\"", "%", "t", ")", "\n", "f", ".", "write", "(", "\"%s{\\n\"", "%", "t", ")", "\n", "t", "+=", "'\\t'", "\n", "f", ".", "write", "(", "\"%sOFFSET %f %f %f\\n\"", "%", "(", "t", ",", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "t", "=", "t", "[", ":", "-", "1", "]", "\n", "f", ".", "write", "(", "\"%s}\\n\"", "%", "t", ")", "\n", "\n", "", "t", "=", "t", "[", ":", "-", "1", "]", "\n", "f", ".", "write", "(", "\"%s}\\n\"", "%", "t", ")", "\n", "\n", "return", "t", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load": [[25, 175], ["open", "Quaternions.Quaternions.id", "numpy.array().reshape", "numpy.array", "open.close", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "line.strip().split", "Quaternions.Quaternions.from_euler", "Animation.Animation", "numpy.array", "names.append", "numpy.append", "numpy.append", "numpy.append", "int", "names.append", "numpy.append", "numpy.append", "numpy.append", "len", "offsets[].repeat", "numpy.zeros", "float", "numpy.array", "len", "numpy.radians", "Quaternions.Quaternions.from_euler", "numpy.degrees", "re.match.group", "numpy.array", "numpy.array", "len", "numpy.array", "re.match.group", "any", "re.match.group", "numpy.array", "numpy.array", "len", "int", "re.match.group", "line.strip", "list", "data_block[].reshape", "numpy.radians", "np.degrees.euler", "line.split", "re.match.group", "len", "map", "data_block[].reshape.reshape", "list", "data_block[].reshape", "Exception", "map", "re.match.groups"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["def", "load", "(", "filename", ",", "start", "=", "None", ",", "end", "=", "None", ",", "order", "=", "None", ",", "world", "=", "False", ",", "need_quater", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Reads a BVH file and constructs an animation\n    \n    Parameters\n    ----------\n    filename: str\n        File to be opened\n        \n    start : int\n        Optional Starting Frame\n        \n    end : int\n        Optional Ending Frame\n    \n    order : str\n        Optional Specifier for joint order.\n        Given as string E.G 'xyz', 'zxy'\n        \n    world : bool\n        If set to true euler angles are applied\n        together in world space rather than local\n        space\n\n    Returns\n    -------\n    \n    (animation, joint_names, frametime)\n        Tuple of loaded animation and joint names\n    \"\"\"", "\n", "\n", "f", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "\n", "i", "=", "0", "\n", "active", "=", "-", "1", "\n", "end_site", "=", "False", "\n", "\n", "names", "=", "[", "]", "\n", "orients", "=", "Quaternions", ".", "id", "(", "0", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "(", "0", ",", "3", ")", ")", "\n", "parents", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "for", "line", "in", "f", ":", "\n", "\n", "        ", "if", "\"HIERARCHY\"", "in", "line", ":", "continue", "\n", "if", "\"MOTION\"", "in", "line", ":", "continue", "\n", "\n", "\"\"\" Modified line read to handle mixamo data \"\"\"", "\n", "#        rmatch = re.match(r\"ROOT (\\w+)\", line)", "\n", "rmatch", "=", "re", ".", "match", "(", "r\"ROOT (\\w+:?\\w+)\"", ",", "line", ")", "\n", "if", "rmatch", ":", "\n", "            ", "names", ".", "append", "(", "rmatch", ".", "group", "(", "1", ")", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", ".", "qs", "=", "np", ".", "append", "(", "orients", ".", "qs", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "continue", "\n", "\n", "", "if", "\"{\"", "in", "line", ":", "continue", "\n", "\n", "if", "\"}\"", "in", "line", ":", "\n", "            ", "if", "end_site", ":", "end_site", "=", "False", "\n", "else", ":", "active", "=", "parents", "[", "active", "]", "\n", "continue", "\n", "\n", "", "offmatch", "=", "re", ".", "match", "(", "r\"\\s*OFFSET\\s+([\\-\\d\\.e]+)\\s+([\\-\\d\\.e]+)\\s+([\\-\\d\\.e]+)\"", ",", "line", ")", "\n", "if", "offmatch", ":", "\n", "            ", "if", "not", "end_site", ":", "\n", "                ", "offsets", "[", "active", "]", "=", "np", ".", "array", "(", "[", "list", "(", "map", "(", "float", ",", "offmatch", ".", "groups", "(", ")", ")", ")", "]", ")", "\n", "", "continue", "\n", "\n", "", "chanmatch", "=", "re", ".", "match", "(", "r\"\\s*CHANNELS\\s+(\\d+)\"", ",", "line", ")", "\n", "if", "chanmatch", ":", "\n", "            ", "channels", "=", "int", "(", "chanmatch", ".", "group", "(", "1", ")", ")", "\n", "if", "order", "is", "None", ":", "\n", "                ", "channelis", "=", "0", "if", "channels", "==", "3", "else", "3", "\n", "channelie", "=", "3", "if", "channels", "==", "3", "else", "6", "\n", "parts", "=", "line", ".", "split", "(", ")", "[", "2", "+", "channelis", ":", "2", "+", "channelie", "]", "\n", "if", "any", "(", "[", "p", "not", "in", "channelmap", "for", "p", "in", "parts", "]", ")", ":", "\n", "                    ", "continue", "\n", "", "order", "=", "\"\"", ".", "join", "(", "[", "channelmap", "[", "p", "]", "for", "p", "in", "parts", "]", ")", "\n", "", "continue", "\n", "\n", "", "\"\"\" Modified line read to handle mixamo data \"\"\"", "\n", "#        jmatch = re.match(\"\\s*JOINT\\s+(\\w+)\", line)", "\n", "jmatch", "=", "re", ".", "match", "(", "\"\\s*JOINT\\s+(\\w+:?\\w+)\"", ",", "line", ")", "\n", "if", "jmatch", ":", "\n", "            ", "names", ".", "append", "(", "jmatch", ".", "group", "(", "1", ")", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", ".", "qs", "=", "np", ".", "append", "(", "orients", ".", "qs", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "continue", "\n", "\n", "", "if", "\"End Site\"", "in", "line", ":", "\n", "            ", "end_site", "=", "True", "\n", "continue", "\n", "\n", "", "fmatch", "=", "re", ".", "match", "(", "\"\\s*Frames:\\s+(\\d+)\"", ",", "line", ")", "\n", "if", "fmatch", ":", "\n", "            ", "if", "start", "and", "end", ":", "\n", "                ", "fnum", "=", "(", "end", "-", "start", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "fnum", "=", "int", "(", "fmatch", ".", "group", "(", "1", ")", ")", "\n", "", "jnum", "=", "len", "(", "parents", ")", "\n", "positions", "=", "offsets", "[", "np", ".", "newaxis", "]", ".", "repeat", "(", "fnum", ",", "axis", "=", "0", ")", "\n", "rotations", "=", "np", ".", "zeros", "(", "(", "fnum", ",", "len", "(", "orients", ")", ",", "3", ")", ")", "\n", "continue", "\n", "\n", "", "fmatch", "=", "re", ".", "match", "(", "\"\\s*Frame Time:\\s+([\\d\\.]+)\"", ",", "line", ")", "\n", "if", "fmatch", ":", "\n", "            ", "frametime", "=", "float", "(", "fmatch", ".", "group", "(", "1", ")", ")", "\n", "continue", "\n", "\n", "", "if", "(", "start", "and", "end", ")", "and", "(", "i", "<", "start", "or", "i", ">=", "end", "-", "1", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "continue", "\n", "\n", "# dmatch = line.strip().split(' ')", "\n", "", "dmatch", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "dmatch", ":", "\n", "            ", "data_block", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "dmatch", ")", ")", ")", "\n", "N", "=", "len", "(", "parents", ")", "\n", "fi", "=", "i", "-", "start", "if", "start", "else", "i", "\n", "if", "channels", "==", "3", ":", "\n", "                ", "positions", "[", "fi", ",", "0", ":", "1", "]", "=", "data_block", "[", "0", ":", "3", "]", "\n", "rotations", "[", "fi", ",", ":", "]", "=", "data_block", "[", "3", ":", "]", ".", "reshape", "(", "N", ",", "3", ")", "\n", "", "elif", "channels", "==", "6", ":", "\n", "                ", "data_block", "=", "data_block", ".", "reshape", "(", "N", ",", "6", ")", "\n", "positions", "[", "fi", ",", ":", "]", "=", "data_block", "[", ":", ",", "0", ":", "3", "]", "\n", "rotations", "[", "fi", ",", ":", "]", "=", "data_block", "[", ":", ",", "3", ":", "6", "]", "\n", "", "elif", "channels", "==", "9", ":", "\n", "                ", "positions", "[", "fi", ",", "0", "]", "=", "data_block", "[", "0", ":", "3", "]", "\n", "data_block", "=", "data_block", "[", "3", ":", "]", ".", "reshape", "(", "N", "-", "1", ",", "9", ")", "\n", "rotations", "[", "fi", ",", "1", ":", "]", "=", "data_block", "[", ":", ",", "3", ":", "6", "]", "\n", "positions", "[", "fi", ",", "1", ":", "]", "+=", "data_block", "[", ":", ",", "0", ":", "3", "]", "*", "data_block", "[", ":", ",", "6", ":", "9", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Too many channels! %i\"", "%", "channels", ")", "\n", "\n", "", "i", "+=", "1", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "if", "need_quater", ":", "\n", "        ", "rotations", "=", "Quaternions", ".", "from_euler", "(", "np", ".", "radians", "(", "rotations", ")", ",", "order", "=", "order", ",", "world", "=", "world", ")", "\n", "", "elif", "order", "!=", "'xyz'", ":", "\n", "        ", "rotations", "=", "Quaternions", ".", "from_euler", "(", "np", ".", "radians", "(", "rotations", ")", ",", "order", "=", "order", ",", "world", "=", "world", ")", "\n", "rotations", "=", "np", ".", "degrees", "(", "rotations", ".", "euler", "(", ")", ")", "\n", "\n", "", "return", "(", "Animation", "(", "rotations", ",", "positions", ",", "orients", ",", "offsets", ",", "parents", ")", ",", "names", ",", "frametime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save": [[178, 264], ["open", "f.write", "f.write", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "f.write", "f.write", "range", "numpy.degrees", "range", "f.write", "str", "range", "BVH_mod.save_joint", "anim.rotations.euler", "len", "f.write", "f.write", "f.write"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save_joint", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write"], ["", "def", "save", "(", "filename", ",", "anim", ",", "names", "=", "None", ",", "frametime", "=", "1.0", "/", "24.0", ",", "order", "=", "'zyx'", ",", "positions", "=", "False", ",", "orients", "=", "True", ",", "mask", "=", "None", ",", "quater", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Saves an Animation to file as BVH\n    \n    Parameters\n    ----------\n    filename: str\n        File to be saved to\n        \n    anim : Animation\n        Animation to save\n        \n    names : [str]\n        List of joint names\n    \n    order : str\n        Optional Specifier for joint order.\n        Given as string E.G 'xyz', 'zxy'\n    \n    frametime : float\n        Optional Animation Frame time\n        \n    positions : bool\n        Optional specfier to save bone\n        positions for each frame\n        \n    orients : bool\n        Multiply joint orients to the rotations\n        before saving.\n        \n    \"\"\"", "\n", "\n", "if", "names", "is", "None", ":", "\n", "        ", "names", "=", "[", "\"joint_\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "anim", ".", "parents", ")", ")", "]", "\n", "\n", "", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "\n", "        ", "t", "=", "\"\"", "\n", "f", ".", "write", "(", "\"%sHIERARCHY\\n\"", "%", "t", ")", "\n", "f", ".", "write", "(", "\"%sROOT %s\\n\"", "%", "(", "t", ",", "names", "[", "0", "]", ")", ")", "\n", "f", ".", "write", "(", "\"%s{\\n\"", "%", "t", ")", "\n", "t", "+=", "'\\t'", "\n", "\n", "f", ".", "write", "(", "\"%sOFFSET %f %f %f\\n\"", "%", "(", "t", ",", "anim", ".", "offsets", "[", "0", ",", "0", "]", ",", "anim", ".", "offsets", "[", "0", ",", "1", "]", ",", "anim", ".", "offsets", "[", "0", ",", "2", "]", ")", ")", "\n", "f", ".", "write", "(", "\"%sCHANNELS 6 Xposition Yposition Zposition %s %s %s \\n\"", "%", "\n", "(", "t", ",", "channelmap_inv", "[", "order", "[", "0", "]", "]", ",", "channelmap_inv", "[", "order", "[", "1", "]", "]", ",", "channelmap_inv", "[", "order", "[", "2", "]", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "anim", ".", "parents", "[", "i", "]", "==", "0", ":", "\n", "                ", "t", "=", "save_joint", "(", "f", ",", "anim", ",", "names", ",", "t", ",", "i", ",", "order", "=", "order", ",", "positions", "=", "positions", ")", "\n", "\n", "", "", "t", "=", "t", "[", ":", "-", "1", "]", "\n", "f", ".", "write", "(", "\"%s}\\n\"", "%", "t", ")", "\n", "\n", "f", ".", "write", "(", "\"MOTION\\n\"", ")", "\n", "f", ".", "write", "(", "\"Frames: %i\\n\"", "%", "anim", ".", "shape", "[", "0", "]", ")", ";", "\n", "f", ".", "write", "(", "\"Frame Time: %f\\n\"", "%", "frametime", ")", ";", "\n", "\n", "#if orients:        ", "\n", "#    rots = np.degrees((-anim.orients[np.newaxis] * anim.rotations).euler(order=order[::-1]))", "\n", "#else:", "\n", "#    rots = np.degrees(anim.rotations.euler(order=order[::-1]))", "\n", "# rots = np.degrees(anim.rotations.euler(order=order[::-1]))", "\n", "if", "quater", ":", "\n", "            ", "rots", "=", "np", ".", "degrees", "(", "anim", ".", "rotations", ".", "euler", "(", "order", "=", "order", "[", ":", ":", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "rots", "=", "anim", ".", "rotations", "\n", "", "poss", "=", "anim", ".", "positions", "\n", "\n", "for", "i", "in", "range", "(", "anim", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "                ", "if", "positions", "or", "j", "==", "0", ":", "\n", "\n", "                    ", "f", ".", "write", "(", "\"%f %f %f %f %f %f \"", "%", "(", "\n", "poss", "[", "i", ",", "j", ",", "0", "]", ",", "poss", "[", "i", ",", "j", ",", "1", "]", ",", "poss", "[", "i", ",", "j", ",", "2", "]", ",", "\n", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "0", "]", "]", "]", ",", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "1", "]", "]", "]", ",", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "2", "]", "]", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "if", "mask", "==", "None", "or", "mask", "[", "j", "]", "==", "1", ":", "\n", "                        ", "f", ".", "write", "(", "\"%f %f %f \"", "%", "(", "\n", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "0", "]", "]", "]", ",", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "1", "]", "]", "]", ",", "rots", "[", "i", ",", "j", ",", "ordermap", "[", "order", "[", "2", "]", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "f", ".", "write", "(", "\"%f %f %f \"", "%", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "", "", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save_joint": [[266, 300], ["f.write", "f.write", "f.write", "range", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "BVH_mod.save_joint"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.save_joint"], ["", "", "", "def", "save_joint", "(", "f", ",", "anim", ",", "names", ",", "t", ",", "i", ",", "order", "=", "'zyx'", ",", "positions", "=", "False", ")", ":", "\n", "\n", "    ", "f", ".", "write", "(", "\"%sJOINT %s\\n\"", "%", "(", "t", ",", "names", "[", "i", "]", ")", ")", "\n", "f", ".", "write", "(", "\"%s{\\n\"", "%", "t", ")", "\n", "t", "+=", "'\\t'", "\n", "\n", "f", ".", "write", "(", "\"%sOFFSET %f %f %f\\n\"", "%", "(", "t", ",", "anim", ".", "offsets", "[", "i", ",", "0", "]", ",", "anim", ".", "offsets", "[", "i", ",", "1", "]", ",", "anim", ".", "offsets", "[", "i", ",", "2", "]", ")", ")", "\n", "\n", "if", "positions", ":", "\n", "        ", "f", ".", "write", "(", "\"%sCHANNELS 6 Xposition Yposition Zposition %s %s %s \\n\"", "%", "(", "t", ",", "\n", "channelmap_inv", "[", "order", "[", "0", "]", "]", ",", "channelmap_inv", "[", "order", "[", "1", "]", "]", ",", "channelmap_inv", "[", "order", "[", "2", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", ".", "write", "(", "\"%sCHANNELS 3 %s %s %s\\n\"", "%", "(", "t", ",", "\n", "channelmap_inv", "[", "order", "[", "0", "]", "]", ",", "channelmap_inv", "[", "order", "[", "1", "]", "]", ",", "channelmap_inv", "[", "order", "[", "2", "]", "]", ")", ")", "\n", "\n", "", "end_site", "=", "True", "\n", "\n", "for", "j", "in", "range", "(", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "anim", ".", "parents", "[", "j", "]", "==", "i", ":", "\n", "            ", "t", "=", "save_joint", "(", "f", ",", "anim", ",", "names", ",", "t", ",", "j", ",", "order", "=", "order", ",", "positions", "=", "positions", ")", "\n", "end_site", "=", "False", "\n", "\n", "", "", "if", "end_site", ":", "\n", "        ", "f", ".", "write", "(", "\"%sEnd Site\\n\"", "%", "t", ")", "\n", "f", ".", "write", "(", "\"%s{\\n\"", "%", "t", ")", "\n", "t", "+=", "'\\t'", "\n", "f", ".", "write", "(", "\"%sOFFSET %f %f %f\\n\"", "%", "(", "t", ",", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "t", "=", "t", "[", ":", "-", "1", "]", "\n", "f", ".", "write", "(", "\"%s}\\n\"", "%", "t", ")", "\n", "\n", "", "t", "=", "t", "[", ":", "-", "1", "]", "\n", "f", ".", "write", "(", "\"%s}\\n\"", "%", "t", ")", "\n", "\n", "return", "t", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__init__": [[31, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rotations", ",", "positions", ",", "orients", ",", "offsets", ",", "parents", ")", ":", "\n", "\n", "        ", "self", ".", "rotations", "=", "rotations", "\n", "self", ".", "positions", "=", "positions", "\n", "self", ".", "orients", "=", "orients", "\n", "self", ".", "offsets", "=", "offsets", "\n", "self", ".", "parents", "=", "parents", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__op__": [[39, 46], ["Animation.Animation", "op", "op", "op", "op", "op"], "methods", ["None"], ["", "def", "__op__", "(", "self", ",", "op", ",", "other", ")", ":", "\n", "        ", "return", "Animation", "(", "\n", "op", "(", "self", ".", "rotations", ",", "other", ".", "rotations", ")", ",", "\n", "op", "(", "self", ".", "positions", ",", "other", ".", "positions", ")", ",", "\n", "op", "(", "self", ".", "orients", ",", "other", ".", "orients", ")", ",", "\n", "op", "(", "self", ".", "offsets", ",", "other", ".", "offsets", ")", ",", "\n", "op", "(", "self", ".", "parents", ",", "other", ".", "parents", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__iop__": [[47, 54], ["op", "op", "op", "op", "op"], "methods", ["None"], ["", "def", "__iop__", "(", "self", ",", "op", ",", "other", ")", ":", "\n", "        ", "self", ".", "rotations", "=", "op", "(", "self", ".", "roations", ",", "other", ".", "rotations", ")", "\n", "self", ".", "positions", "=", "op", "(", "self", ".", "roations", ",", "other", ".", "positions", ")", "\n", "self", ".", "orients", "=", "op", "(", "self", ".", "orients", ",", "other", ".", "orients", ")", "\n", "self", ".", "offsets", "=", "op", "(", "self", ".", "offsets", ",", "other", ".", "offsets", ")", "\n", "self", ".", "parents", "=", "op", "(", "self", ".", "parents", ",", "other", ".", "parents", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__sop__": [[55, 62], ["Animation.Animation", "op", "op", "op", "op", "op"], "methods", ["None"], ["", "def", "__sop__", "(", "self", ",", "op", ")", ":", "\n", "        ", "return", "Animation", "(", "\n", "op", "(", "self", ".", "rotations", ")", ",", "\n", "op", "(", "self", ".", "positions", ")", ",", "\n", "op", "(", "self", ".", "orients", ")", ",", "\n", "op", "(", "self", ".", "offsets", ")", ",", "\n", "op", "(", "self", ".", "parents", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__add__": [[63, 64], ["Animation.Animation.__op__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__op__"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__op__", "(", "operator", ".", "add", ",", "other", ")", "\n", "def", "__sub__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__op__", "(", "operator", ".", "sub", ",", "other", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__sub__": [[64, 65], ["Animation.Animation.__op__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__op__"], ["def", "__sub__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__op__", "(", "operator", ".", "sub", ",", "other", ")", "\n", "def", "__mul__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__op__", "(", "operator", ".", "mul", ",", "other", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__mul__": [[65, 66], ["Animation.Animation.__op__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__op__"], ["def", "__mul__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__op__", "(", "operator", ".", "mul", ",", "other", ")", "\n", "def", "__div__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__op__", "(", "operator", ".", "div", ",", "other", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__div__": [[66, 67], ["Animation.Animation.__op__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__op__"], ["def", "__div__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__op__", "(", "operator", ".", "div", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__abs__": [[68, 69], ["Animation.Animation.__sop__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__sop__"], ["def", "__abs__", "(", "self", ")", ":", "return", "self", ".", "__sop__", "(", "operator", ".", "abs", ")", "\n", "def", "__neg__", "(", "self", ")", ":", "return", "self", ".", "__sop__", "(", "operator", ".", "neg", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__neg__": [[69, 70], ["Animation.Animation.__sop__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__sop__"], ["def", "__neg__", "(", "self", ")", ":", "return", "self", ".", "__sop__", "(", "operator", ".", "neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__iadd__": [[71, 72], ["Animation.Animation.__iop__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__iop__"], ["def", "__iadd__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__iop__", "(", "operator", ".", "iadd", ",", "other", ")", "\n", "def", "__isub__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__iop__", "(", "operator", ".", "isub", ",", "other", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__isub__": [[72, 73], ["Animation.Animation.__iop__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__iop__"], ["def", "__isub__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__iop__", "(", "operator", ".", "isub", ",", "other", ")", "\n", "def", "__imul__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__iop__", "(", "operator", ".", "imul", ",", "other", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__imul__": [[73, 74], ["Animation.Animation.__iop__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__iop__"], ["def", "__imul__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__iop__", "(", "operator", ".", "imul", ",", "other", ")", "\n", "def", "__idiv__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__iop__", "(", "operator", ".", "idiv", ",", "other", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__idiv__": [[74, 75], ["Animation.Animation.__iop__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__iop__"], ["def", "__idiv__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "__iop__", "(", "operator", ".", "idiv", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__len__": [[76, 77], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "__len__", "(", "self", ")", ":", "return", "len", "(", "self", ".", "rotations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__getitem__": [[78, 93], ["isinstance", "Animation.Animation", "Animation.Animation"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "k", ")", ":", "\n", "        ", "if", "isinstance", "(", "k", ",", "tuple", ")", ":", "\n", "            ", "return", "Animation", "(", "\n", "self", ".", "rotations", "[", "k", "]", ",", "\n", "self", ".", "positions", "[", "k", "]", ",", "\n", "self", ".", "orients", "[", "k", "[", "1", ":", "]", "]", ",", "\n", "self", ".", "offsets", "[", "k", "[", "1", ":", "]", "]", ",", "\n", "self", ".", "parents", "[", "k", "[", "1", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "Animation", "(", "\n", "self", ".", "rotations", "[", "k", "]", ",", "\n", "self", ".", "positions", "[", "k", "]", ",", "\n", "self", ".", "orients", ",", "\n", "self", ".", "offsets", ",", "\n", "self", ".", "parents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.__setitem__": [[94, 107], ["isinstance", "Animation.Animation.rotations.__setitem__", "Animation.Animation.positions.__setitem__", "Animation.Animation.orients.__setitem__", "Animation.Animation.offsets.__setitem__", "Animation.Animation.parents.__setitem__", "Animation.Animation.rotations.__setitem__", "Animation.Animation.positions.__setitem__", "Animation.Animation.orients.__setitem__", "Animation.Animation.offsets.__setitem__", "Animation.Animation.parents.__setitem__"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__"], ["", "", "def", "__setitem__", "(", "self", ",", "k", ",", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "k", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "rotations", ".", "__setitem__", "(", "k", ",", "v", ".", "rotations", ")", "\n", "self", ".", "positions", ".", "__setitem__", "(", "k", ",", "v", ".", "positions", ")", "\n", "self", ".", "orients", ".", "__setitem__", "(", "k", "[", "1", ":", "]", ",", "v", ".", "orients", ")", "\n", "self", ".", "offsets", ".", "__setitem__", "(", "k", "[", "1", ":", "]", ",", "v", ".", "offsets", ")", "\n", "self", ".", "parents", ".", "__setitem__", "(", "k", "[", "1", ":", "]", ",", "v", ".", "parents", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rotations", ".", "__setitem__", "(", "k", ",", "v", ".", "rotations", ")", "\n", "self", ".", "positions", ".", "__setitem__", "(", "k", ",", "v", ".", "positions", ")", "\n", "self", ".", "orients", ".", "__setitem__", "(", "k", ",", "v", ".", "orients", ")", "\n", "self", ".", "offsets", ".", "__setitem__", "(", "k", ",", "v", ".", "offsets", ")", "\n", "self", ".", "parents", ".", "__setitem__", "(", "k", ",", "v", ".", "parents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.shape": [[108, 110], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "return", "(", "self", ".", "rotations", ".", "shape", "[", "0", "]", ",", "self", ".", "rotations", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.copy": [[111, 115], ["Animation.Animation", "Animation.Animation.rotations.copy", "Animation.Animation.positions.copy", "Animation.Animation.orients.copy", "Animation.Animation.offsets.copy", "Animation.Animation.parents.copy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["def", "copy", "(", "self", ")", ":", "return", "Animation", "(", "\n", "self", ".", "rotations", ".", "copy", "(", ")", ",", "self", ".", "positions", ".", "copy", "(", ")", ",", "\n", "self", ".", "orients", ".", "copy", "(", ")", ",", "self", ".", "offsets", ".", "copy", "(", ")", ",", "\n", "self", ".", "parents", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.repeat": [[116, 121], ["Animation.Animation", "Animation.Animation.rotations.repeat", "Animation.Animation.positions.repeat"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["def", "repeat", "(", "self", ",", "*", "args", ",", "**", "kw", ")", ":", "\n", "        ", "return", "Animation", "(", "\n", "self", ".", "rotations", ".", "repeat", "(", "*", "args", ",", "**", "kw", ")", ",", "\n", "self", ".", "positions", ".", "repeat", "(", "*", "args", ",", "**", "kw", ")", ",", "\n", "self", ".", "orients", ",", "self", ".", "offsets", ",", "self", ".", "parents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.ravel": [[122, 128], ["numpy.hstack", "numpy.hstack", "Animation.Animation.rotations.log().ravel", "Animation.Animation.positions.ravel", "Animation.Animation.orients.log().ravel", "Animation.Animation.offsets.ravel", "Animation.Animation.rotations.log", "Animation.Animation.orients.log"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log"], ["", "def", "ravel", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "hstack", "(", "[", "\n", "self", ".", "rotations", ".", "log", "(", ")", ".", "ravel", "(", ")", ",", "\n", "self", ".", "positions", ".", "ravel", "(", ")", ",", "\n", "self", ".", "orients", ".", "log", "(", ")", ".", "ravel", "(", ")", ",", "\n", "self", ".", "offsets", ".", "ravel", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.Animation.unravel": [[129, 140], ["cls", "Quaternions_old.Quaternions.exp", "Quaternions_old.Quaternions.exp", "parents.copy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "@", "classmethod", "\n", "def", "unravel", "(", "clas", ",", "anim", ",", "shape", ",", "parents", ")", ":", "\n", "        ", "nf", ",", "nj", "=", "shape", "\n", "rotations", "=", "anim", "[", "nf", "*", "nj", "*", "0", ":", "nf", "*", "nj", "*", "3", "]", "\n", "positions", "=", "anim", "[", "nf", "*", "nj", "*", "3", ":", "nf", "*", "nj", "*", "6", "]", "\n", "orients", "=", "anim", "[", "nf", "*", "nj", "*", "6", "+", "nj", "*", "0", ":", "nf", "*", "nj", "*", "6", "+", "nj", "*", "3", "]", "\n", "offsets", "=", "anim", "[", "nf", "*", "nj", "*", "6", "+", "nj", "*", "3", ":", "nf", "*", "nj", "*", "6", "+", "nj", "*", "6", "]", "\n", "return", "cls", "(", "\n", "Quaternions", ".", "exp", "(", "rotations", ")", ",", "positions", ",", "\n", "Quaternions", ".", "exp", "(", "orients", ")", ",", "offsets", ",", "\n", "parents", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.load_to_maya": [[144, 214], ["range", "zip", "range", "pm.joint", "pm.joint.setOrientation", "pm.nodetypes.AnimCurveTA", "pm.nodetypes.AnimCurveTA", "pm.nodetypes.AnimCurveTA", "pm.nodetypes.AnimCurveTA.addKeys", "pm.nodetypes.AnimCurveTA.addKeys", "pm.nodetypes.AnimCurveTA.addKeys", "pm.connectAttr", "pm.connectAttr", "pm.connectAttr", "pm.nodetypes.AnimCurveTU", "pm.nodetypes.AnimCurveTU", "pm.nodetypes.AnimCurveTU", "pm.nodetypes.AnimCurveTU.addKeys", "pm.nodetypes.AnimCurveTU.addKeys", "pm.nodetypes.AnimCurveTU.addKeys", "pm.connectAttr", "pm.connectAttr", "pm.connectAttr", "joints.append", "len", "len", "pm.select", "pm.select", "str", "range", "len", "Quaternions_old.Quaternions"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "load_to_maya", "(", "anim", ",", "names", "=", "None", ",", "radius", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Load Animation Object into Maya as Joint Skeleton\n    loads each frame as a new keyfame in maya.\n    \n    If the animation is too slow or too fast perhaps\n    the framerate needs adjusting before being loaded\n    such that it matches the maya scene framerate.\n    \n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        Animation to load into Scene\n        \n    names : [str]\n        Optional list of Joint names for Skeleton\n    \n    Returns\n    -------\n    \n    List of Maya Joint Nodes loaded into scene\n    \"\"\"", "\n", "\n", "import", "pymel", ".", "core", "as", "pm", "\n", "\n", "joints", "=", "[", "]", "\n", "frames", "=", "range", "(", "1", ",", "len", "(", "anim", ")", "+", "1", ")", "\n", "\n", "if", "names", "is", "None", ":", "names", "=", "[", "\"joint_\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "anim", ".", "parents", ")", ")", "]", "\n", "\n", "for", "i", ",", "offset", ",", "orient", ",", "parent", ",", "name", "in", "zip", "(", "range", "(", "len", "(", "anim", ".", "offsets", ")", ")", ",", "anim", ".", "offsets", ",", "anim", ".", "orients", ",", "anim", ".", "parents", ",", "names", ")", ":", "\n", "\n", "        ", "if", "parent", "<", "0", ":", "\n", "            ", "pm", ".", "select", "(", "d", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pm", ".", "select", "(", "joints", "[", "parent", "]", ")", "\n", "\n", "", "joint", "=", "pm", ".", "joint", "(", "n", "=", "name", ",", "p", "=", "offset", ",", "relative", "=", "True", ",", "radius", "=", "radius", ")", "\n", "joint", ".", "setOrientation", "(", "[", "orient", "[", "1", "]", ",", "orient", "[", "2", "]", ",", "orient", "[", "3", "]", ",", "orient", "[", "0", "]", "]", ")", "\n", "\n", "curvex", "=", "pm", ".", "nodetypes", ".", "AnimCurveTA", "(", "n", "=", "name", "+", "\"_rotateX\"", ")", "\n", "curvey", "=", "pm", ".", "nodetypes", ".", "AnimCurveTA", "(", "n", "=", "name", "+", "\"_rotateY\"", ")", "\n", "curvez", "=", "pm", ".", "nodetypes", ".", "AnimCurveTA", "(", "n", "=", "name", "+", "\"_rotateZ\"", ")", "\n", "\n", "jrotations", "=", "(", "-", "Quaternions", "(", "orient", "[", "np", ".", "newaxis", "]", ")", "*", "anim", ".", "rotations", "[", ":", ",", "i", "]", ")", ".", "euler", "(", ")", "\n", "curvex", ".", "addKeys", "(", "frames", ",", "jrotations", "[", ":", ",", "0", "]", ")", "\n", "curvey", ".", "addKeys", "(", "frames", ",", "jrotations", "[", ":", ",", "1", "]", ")", "\n", "curvez", ".", "addKeys", "(", "frames", ",", "jrotations", "[", ":", ",", "2", "]", ")", "\n", "\n", "pm", ".", "connectAttr", "(", "curvex", ".", "output", ",", "joint", ".", "rotateX", ")", "\n", "pm", ".", "connectAttr", "(", "curvey", ".", "output", ",", "joint", ".", "rotateY", ")", "\n", "pm", ".", "connectAttr", "(", "curvez", ".", "output", ",", "joint", ".", "rotateZ", ")", "\n", "\n", "offsetx", "=", "pm", ".", "nodetypes", ".", "AnimCurveTU", "(", "n", "=", "name", "+", "\"_translateX\"", ")", "\n", "offsety", "=", "pm", ".", "nodetypes", ".", "AnimCurveTU", "(", "n", "=", "name", "+", "\"_translateY\"", ")", "\n", "offsetz", "=", "pm", ".", "nodetypes", ".", "AnimCurveTU", "(", "n", "=", "name", "+", "\"_translateZ\"", ")", "\n", "\n", "offsetx", ".", "addKeys", "(", "frames", ",", "anim", ".", "positions", "[", ":", ",", "i", ",", "0", "]", ")", "\n", "offsety", ".", "addKeys", "(", "frames", ",", "anim", ".", "positions", "[", ":", ",", "i", ",", "1", "]", ")", "\n", "offsetz", ".", "addKeys", "(", "frames", ",", "anim", ".", "positions", "[", ":", ",", "i", ",", "2", "]", ")", "\n", "\n", "pm", ".", "connectAttr", "(", "offsetx", ".", "output", ",", "joint", ".", "translateX", ")", "\n", "pm", ".", "connectAttr", "(", "offsety", ".", "output", ",", "joint", ".", "translateY", ")", "\n", "pm", ".", "connectAttr", "(", "offsetz", ".", "output", ",", "joint", ".", "translateZ", ")", "\n", "\n", "joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "return", "joints", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.load_from_maya": [[215, 292], ["pm.currentTime", "pm.currentTime", "AnimationStructure.load_from_maya", "AnimationStructure.descendants_list", "Quaternions_old.Quaternions.id", "numpy.array", "enumerate", "numpy.zeros", "numpy.zeros", "Quaternions_old.Quaternions.id", "range", "pm.currentTime", "len", "pm.xform", "pm.currentTime", "zip", "pm.xform", "Quaternions_old.Quaternions.from_euler", "Animation.Animation", "pm.xform", "pm.PyNode", "len", "len", "len", "len", "range", "pm.PyNode", "pm.hasAttr", "pm.hasAttr", "pm.hasAttr", "len", "pm.hasAttr", "pm.PyNode.getOrientation", "Quaternions_old.Quaternions", "numpy.radians", "pm.xform", "pm.xform", "len", "numpy.array", "pm.xform"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.load_from_maya", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.descendants_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "load_from_maya", "(", "root", ",", "start", ",", "end", ")", ":", "\n", "    ", "\"\"\"\n    Load Animation Object from Maya Joint Skeleton    \n    \n    Parameters\n    ----------\n    \n    root : PyNode\n        Root Joint of Maya Skeleton\n        \n    start, end : int, int\n        Start and End frame index of Maya Animation\n    \n    Returns\n    -------\n    \n    animation : Animation\n        Loaded animation from maya\n        \n    names : [str]\n        Joint names from maya   \n    \"\"\"", "\n", "\n", "import", "pymel", ".", "core", "as", "pm", "\n", "\n", "original_time", "=", "pm", ".", "currentTime", "(", "q", "=", "True", ")", "\n", "pm", ".", "currentTime", "(", "start", ")", "\n", "\n", "\"\"\" Build Structure \"\"\"", "\n", "\n", "names", ",", "parents", "=", "AnimationStructure", ".", "load_from_maya", "(", "root", ")", "\n", "descendants", "=", "AnimationStructure", ".", "descendants_list", "(", "parents", ")", "\n", "orients", "=", "Quaternions", ".", "id", "(", "len", "(", "names", ")", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "pm", ".", "xform", "(", "j", ",", "q", "=", "True", ",", "translation", "=", "True", ")", "for", "j", "in", "names", "]", ")", "\n", "\n", "for", "j", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "scale", "=", "pm", ".", "xform", "(", "pm", ".", "PyNode", "(", "name", ")", ",", "q", "=", "True", ",", "scale", "=", "True", ",", "relative", "=", "True", ")", "\n", "if", "len", "(", "descendants", "[", "j", "]", ")", "==", "0", ":", "continue", "\n", "offsets", "[", "descendants", "[", "j", "]", "]", "*=", "scale", "\n", "\n", "", "\"\"\" Load Animation \"\"\"", "\n", "\n", "eulers", "=", "np", ".", "zeros", "(", "(", "end", "-", "start", ",", "len", "(", "names", ")", ",", "3", ")", ")", "\n", "positions", "=", "np", ".", "zeros", "(", "(", "end", "-", "start", ",", "len", "(", "names", ")", ",", "3", ")", ")", "\n", "rotations", "=", "Quaternions", ".", "id", "(", "(", "end", "-", "start", ",", "len", "(", "names", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "end", "-", "start", ")", ":", "\n", "\n", "        ", "pm", ".", "currentTime", "(", "start", "+", "i", "+", "1", ",", "u", "=", "True", ")", "\n", "\n", "scales", "=", "{", "}", "\n", "\n", "for", "j", ",", "name", ",", "parent", "in", "zip", "(", "range", "(", "len", "(", "names", ")", ")", ",", "names", ",", "parents", ")", ":", "\n", "\n", "            ", "node", "=", "pm", ".", "PyNode", "(", "name", ")", "\n", "\n", "if", "i", "==", "0", "and", "pm", ".", "hasAttr", "(", "node", ",", "'jointOrient'", ")", ":", "\n", "                ", "ort", "=", "node", ".", "getOrientation", "(", ")", "\n", "orients", "[", "j", "]", "=", "Quaternions", "(", "np", ".", "array", "(", "[", "ort", "[", "3", "]", ",", "ort", "[", "0", "]", ",", "ort", "[", "1", "]", ",", "ort", "[", "2", "]", "]", ")", ")", "\n", "\n", "", "if", "pm", ".", "hasAttr", "(", "node", ",", "'rotate'", ")", ":", "eulers", "[", "i", ",", "j", "]", "=", "np", ".", "radians", "(", "pm", ".", "xform", "(", "node", ",", "q", "=", "True", ",", "rotation", "=", "True", ")", ")", "\n", "if", "pm", ".", "hasAttr", "(", "node", ",", "'translate'", ")", ":", "positions", "[", "i", ",", "j", "]", "=", "pm", ".", "xform", "(", "node", ",", "q", "=", "True", ",", "translation", "=", "True", ")", "\n", "if", "pm", ".", "hasAttr", "(", "node", ",", "'scale'", ")", ":", "scales", "[", "j", "]", "=", "pm", ".", "xform", "(", "node", ",", "q", "=", "True", ",", "scale", "=", "True", ",", "relative", "=", "True", ")", "\n", "\n", "", "for", "j", "in", "scales", ":", "\n", "            ", "if", "len", "(", "descendants", "[", "j", "]", ")", "==", "0", ":", "continue", "\n", "positions", "[", "i", ",", "descendants", "[", "j", "]", "]", "*=", "scales", "[", "j", "]", "\n", "\n", "", "positions", "[", "i", ",", "0", "]", "=", "pm", ".", "xform", "(", "root", ",", "q", "=", "True", ",", "translation", "=", "True", ",", "worldSpace", "=", "True", ")", "\n", "\n", "", "rotations", "=", "orients", "[", "np", ".", "newaxis", "]", "*", "Quaternions", ".", "from_euler", "(", "eulers", ",", "order", "=", "'xyz'", ",", "world", "=", "True", ")", "\n", "\n", "\"\"\" Done \"\"\"", "\n", "\n", "pm", ".", "currentTime", "(", "original_time", ")", "\n", "\n", "return", "Animation", "(", "rotations", ",", "positions", ",", "orients", ",", "offsets", ",", "parents", ")", ",", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_local": [[294, 325], ["anim.rotations.transforms", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.transforms"], ["", "def", "transforms_local", "(", "anim", ")", ":", "\n", "    ", "\"\"\"\n    Computes Animation Local Transforms\n    \n    As well as a number of other uses this can\n    be used to compute global joint transforms,\n    which in turn can be used to compete global\n    joint positions\n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        Input animation\n        \n    Returns\n    -------\n    \n    transforms : (F, J, 4, 4) ndarray\n    \n        For each frame F, joint local\n        transforms for each joint J\n    \"\"\"", "\n", "\n", "transforms", "=", "anim", ".", "rotations", ".", "transforms", "(", ")", "\n", "transforms", "=", "np", ".", "concatenate", "(", "[", "transforms", ",", "np", ".", "zeros", "(", "transforms", ".", "shape", "[", ":", "2", "]", "+", "(", "3", ",", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "transforms", "=", "np", ".", "concatenate", "(", "[", "transforms", ",", "np", ".", "zeros", "(", "transforms", ".", "shape", "[", ":", "2", "]", "+", "(", "1", ",", "4", ")", ")", "]", ",", "axis", "=", "-", "2", ")", "\n", "# the last column is filled with the joint positions!", "\n", "transforms", "[", ":", ",", ":", ",", "0", ":", "3", ",", "3", "]", "=", "anim", ".", "positions", "\n", "transforms", "[", ":", ",", ":", ",", "3", ":", "4", ",", "3", "]", "=", "1.0", "\n", "return", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_multiply": [[327, 351], ["numpy.matrix_multiply"], "function", ["None"], ["", "def", "transforms_multiply", "(", "t0s", ",", "t1s", ")", ":", "\n", "    ", "\"\"\"\n    Transforms Multiply\n    \n    Multiplies two arrays of animation transforms\n    \n    Parameters\n    ----------\n    \n    t0s, t1s : (F, J, 4, 4) ndarray\n        Two arrays of transforms\n        for each frame F and each\n        joint J\n        \n    Returns\n    -------\n    \n    transforms : (F, J, 4, 4) ndarray\n        Array of transforms for each\n        frame F and joint J multiplied\n        together\n    \"\"\"", "\n", "\n", "return", "ut", ".", "matrix_multiply", "(", "t0s", ",", "t1s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_inv": [[352, 356], ["ts.reshape", "numpy.array", "np.array.reshape", "list", "map", "numpy.linalg.inv"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "transforms_inv", "(", "ts", ")", ":", "\n", "    ", "fts", "=", "ts", ".", "reshape", "(", "-", "1", ",", "4", ",", "4", ")", "\n", "fts", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "x", ":", "np", ".", "linalg", ".", "inv", "(", "x", ")", ",", "fts", ")", ")", ")", "\n", "return", "fts", ".", "reshape", "(", "ts", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_blank": [[357, 379], ["numpy.zeros"], "function", ["None"], ["", "def", "transforms_blank", "(", "anim", ")", ":", "\n", "    ", "\"\"\"\n    Blank Transforms\n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        Input animation\n    \n    Returns\n    -------\n    \n    transforms : (F, J, 4, 4) ndarray\n        Array of identity transforms for \n        each frame F and joint J\n    \"\"\"", "\n", "\n", "ts", "=", "np", ".", "zeros", "(", "anim", ".", "shape", "+", "(", "4", ",", "4", ")", ")", "\n", "ts", "[", ":", ",", ":", ",", "0", ",", "0", "]", "=", "1.0", ";", "ts", "[", ":", ",", ":", ",", "1", ",", "1", "]", "=", "1.0", ";", "\n", "ts", "[", ":", ",", ":", ",", "2", ",", "2", "]", "=", "1.0", ";", "ts", "[", ":", ",", ":", ",", "3", ",", "3", "]", "=", "1.0", ";", "\n", "return", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_global": [[381, 416], ["numpy.arange", "numpy.arange", "Animation.transforms_local", "Animation.transforms_blank", "range", "Animation.transforms_multiply"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_local", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_blank", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_multiply"], ["", "def", "transforms_global", "(", "anim", ")", ":", "\n", "    ", "\"\"\"\n    Global Animation Transforms\n    \n    This relies on joint ordering\n    being incremental. That means a joint\n    J1 must not be a ancestor of J0 if\n    J0 appears before J1 in the joint\n    ordering.\n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        Input animation\n    \n    Returns\n    ------\n    \n    transforms : (F, J, 4, 4) ndarray\n        Array of global transforms for \n        each frame F and joint J\n    \"\"\"", "\n", "\n", "joints", "=", "np", ".", "arange", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "parents", "=", "np", ".", "arange", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "locals", "=", "transforms_local", "(", "anim", ")", "\n", "globals", "=", "transforms_blank", "(", "anim", ")", "\n", "\n", "globals", "[", ":", ",", "0", "]", "=", "locals", "[", ":", ",", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "globals", "[", ":", ",", "i", "]", "=", "transforms_multiply", "(", "globals", "[", ":", ",", "anim", ".", "parents", "[", "i", "]", "]", ",", "locals", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "return", "globals", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.positions_global": [[418, 442], ["Animation.transforms_global"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_global"], ["", "def", "positions_global", "(", "anim", ")", ":", "\n", "    ", "\"\"\"\n    Global Joint Positions\n    \n    Given an animation compute the global joint\n    positions at at every frame\n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        Input animation\n        \n    Returns\n    -------\n    \n    positions : (F, J, 3) ndarray\n        Positions for every frame F \n        and joint position J\n    \"\"\"", "\n", "\n", "# get the last column -- corresponding to the coordinates", "\n", "positions", "=", "transforms_global", "(", "anim", ")", "[", ":", ",", ":", ",", ":", ",", "3", "]", "\n", "return", "positions", "[", ":", ",", ":", ",", ":", "3", "]", "/", "positions", "[", ":", ",", ":", ",", "3", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.rotations_global": [[445, 480], ["numpy.arange", "numpy.arange", "Quaternions_old.Quaternions.id", "range"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id"], ["def", "rotations_global", "(", "anim", ")", ":", "\n", "    ", "\"\"\"\n    Global Animation Rotations\n    \n    This relies on joint ordering\n    being incremental. That means a joint\n    J1 must not be a ancestor of J0 if\n    J0 appears before J1 in the joint\n    ordering.\n    \n    Parameters\n    ----------\n    \n    anim : Animation\n        Input animation\n        \n    Returns\n    -------\n    \n    points : (F, J) Quaternions\n        global rotations for every frame F \n        and joint J\n    \"\"\"", "\n", "\n", "joints", "=", "np", ".", "arange", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "parents", "=", "np", ".", "arange", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "locals", "=", "anim", ".", "rotations", "\n", "globals", "=", "Quaternions", ".", "id", "(", "anim", ".", "shape", ")", "\n", "\n", "globals", "[", ":", ",", "0", "]", "=", "locals", "[", ":", ",", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "globals", "[", ":", ",", "i", "]", "=", "globals", "[", ":", ",", "anim", ".", "parents", "[", "i", "]", "]", "*", "locals", "[", ":", ",", "i", "]", "\n", "\n", "", "return", "globals", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.rotations_parents_global": [[481, 486], ["Animation.rotations_global", "Quaternions_old.Quaternions.id", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.rotations_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "rotations_parents_global", "(", "anim", ")", ":", "\n", "    ", "rotations", "=", "rotations_global", "(", "anim", ")", "\n", "rotations", "=", "rotations", "[", ":", ",", "anim", ".", "parents", "]", "\n", "rotations", "[", ":", ",", "0", "]", "=", "Quaternions", ".", "id", "(", "len", "(", "anim", ")", ")", "\n", "return", "rotations", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.rotations_load_to_maya": [[487, 568], ["range", "enumerate", "pm.group", "pm.group", "pm.group.rotatePivot.set", "pm.group.scalePivot.set", "pm.group.childAtIndex().overrideEnabled.set", "pm.group.childAtIndex().overrideColor.set", "pm.group.childAtIndex().overrideEnabled.set", "pm.group.childAtIndex().overrideColor.set", "pm.group.childAtIndex().overrideEnabled.set", "pm.group.childAtIndex().overrideColor.set", "pm.nodetypes.AnimCurveTA", "pm.nodetypes.AnimCurveTA", "pm.nodetypes.AnimCurveTA", "rotations[].euler", "pm.nodetypes.AnimCurveTA.addKeys", "pm.nodetypes.AnimCurveTA.addKeys", "pm.nodetypes.AnimCurveTA.addKeys", "pm.connectAttr", "pm.connectAttr", "pm.connectAttr", "pm.nodetypes.AnimCurveTU", "pm.nodetypes.AnimCurveTU", "pm.nodetypes.AnimCurveTU", "pm.nodetypes.AnimCurveTU.addKeys", "pm.nodetypes.AnimCurveTU.addKeys", "pm.nodetypes.AnimCurveTU.addKeys", "pm.connectAttr", "pm.connectAttr", "pm.connectAttr", "maxis.append", "len", "pm.curve", "pm.curve", "pm.curve", "str", "range", "pm.group.childAtIndex", "pm.group.childAtIndex", "pm.group.childAtIndex", "pm.group.childAtIndex", "pm.group.childAtIndex", "pm.group.childAtIndex"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "rotations_load_to_maya", "(", "rotations", ",", "positions", ",", "names", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Load Rotations into Maya\n    \n    Loads a Quaternions array into the scene\n    via the representation of axis\n    \n    Parameters\n    ----------\n    \n    rotations : (F, J) Quaternions \n        array of rotations to load\n        into the scene where\n            F = number of frames\n            J = number of joints\n    \n    positions : (F, J, 3) ndarray \n        array of positions to load\n        rotation axis at where:\n            F = number of frames\n            J = number of joints\n            \n    names : [str]\n        List of joint names\n    \n    Returns\n    -------\n    \n    maxies : Group\n        Grouped Maya Node of all Axis nodes\n    \"\"\"", "\n", "\n", "import", "pymel", ".", "core", "as", "pm", "\n", "\n", "if", "names", "is", "None", ":", "names", "=", "[", "\"joint_\"", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "rotations", ".", "shape", "[", "1", "]", ")", "]", "\n", "\n", "maxis", "=", "[", "]", "\n", "frames", "=", "range", "(", "1", ",", "len", "(", "positions", ")", "+", "1", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "\n", "        ", "name", "=", "name", "+", "\"_axis\"", "\n", "axis", "=", "pm", ".", "group", "(", "\n", "pm", ".", "curve", "(", "p", "=", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "1", ",", "0", ",", "0", ")", "]", ",", "d", "=", "1", ",", "n", "=", "name", "+", "'_axis_x'", ")", ",", "\n", "pm", ".", "curve", "(", "p", "=", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "1", ",", "0", ")", "]", ",", "d", "=", "1", ",", "n", "=", "name", "+", "'_axis_y'", ")", ",", "\n", "pm", ".", "curve", "(", "p", "=", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "1", ")", "]", ",", "d", "=", "1", ",", "n", "=", "name", "+", "'_axis_z'", ")", ",", "\n", "n", "=", "name", ")", "\n", "\n", "axis", ".", "rotatePivot", ".", "set", "(", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "axis", ".", "scalePivot", ".", "set", "(", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "axis", ".", "childAtIndex", "(", "0", ")", ".", "overrideEnabled", ".", "set", "(", "1", ")", ";", "axis", ".", "childAtIndex", "(", "0", ")", ".", "overrideColor", ".", "set", "(", "13", ")", "\n", "axis", ".", "childAtIndex", "(", "1", ")", ".", "overrideEnabled", ".", "set", "(", "1", ")", ";", "axis", ".", "childAtIndex", "(", "1", ")", ".", "overrideColor", ".", "set", "(", "14", ")", "\n", "axis", ".", "childAtIndex", "(", "2", ")", ".", "overrideEnabled", ".", "set", "(", "1", ")", ";", "axis", ".", "childAtIndex", "(", "2", ")", ".", "overrideColor", ".", "set", "(", "15", ")", "\n", "\n", "curvex", "=", "pm", ".", "nodetypes", ".", "AnimCurveTA", "(", "n", "=", "name", "+", "\"_rotateX\"", ")", "\n", "curvey", "=", "pm", ".", "nodetypes", ".", "AnimCurveTA", "(", "n", "=", "name", "+", "\"_rotateY\"", ")", "\n", "curvez", "=", "pm", ".", "nodetypes", ".", "AnimCurveTA", "(", "n", "=", "name", "+", "\"_rotateZ\"", ")", "\n", "\n", "arotations", "=", "rotations", "[", ":", ",", "i", "]", ".", "euler", "(", ")", "\n", "curvex", ".", "addKeys", "(", "frames", ",", "arotations", "[", ":", ",", "0", "]", ")", "\n", "curvey", ".", "addKeys", "(", "frames", ",", "arotations", "[", ":", ",", "1", "]", ")", "\n", "curvez", ".", "addKeys", "(", "frames", ",", "arotations", "[", ":", ",", "2", "]", ")", "\n", "\n", "pm", ".", "connectAttr", "(", "curvex", ".", "output", ",", "axis", ".", "rotateX", ")", "\n", "pm", ".", "connectAttr", "(", "curvey", ".", "output", ",", "axis", ".", "rotateY", ")", "\n", "pm", ".", "connectAttr", "(", "curvez", ".", "output", ",", "axis", ".", "rotateZ", ")", "\n", "\n", "offsetx", "=", "pm", ".", "nodetypes", ".", "AnimCurveTU", "(", "n", "=", "name", "+", "\"_translateX\"", ")", "\n", "offsety", "=", "pm", ".", "nodetypes", ".", "AnimCurveTU", "(", "n", "=", "name", "+", "\"_translateY\"", ")", "\n", "offsetz", "=", "pm", ".", "nodetypes", ".", "AnimCurveTU", "(", "n", "=", "name", "+", "\"_translateZ\"", ")", "\n", "\n", "offsetx", ".", "addKeys", "(", "frames", ",", "positions", "[", ":", ",", "i", ",", "0", "]", ")", "\n", "offsety", ".", "addKeys", "(", "frames", ",", "positions", "[", ":", ",", "i", ",", "1", "]", ")", "\n", "offsetz", ".", "addKeys", "(", "frames", ",", "positions", "[", ":", ",", "i", ",", "2", "]", ")", "\n", "\n", "pm", ".", "connectAttr", "(", "offsetx", ".", "output", ",", "axis", ".", "translateX", ")", "\n", "pm", ".", "connectAttr", "(", "offsety", ".", "output", ",", "axis", ".", "translateY", ")", "\n", "pm", ".", "connectAttr", "(", "offsetz", ".", "output", ",", "axis", ".", "translateZ", ")", "\n", "\n", "maxis", ".", "append", "(", "axis", ")", "\n", "\n", "", "return", "pm", ".", "group", "(", "*", "maxis", ",", "n", "=", "'RotationAnimation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.orients_global": [[571, 584], ["numpy.arange", "numpy.arange", "Quaternions_old.Quaternions.id", "range"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id"], ["def", "orients_global", "(", "anim", ")", ":", "\n", "\n", "    ", "joints", "=", "np", ".", "arange", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "parents", "=", "np", ".", "arange", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "locals", "=", "anim", ".", "orients", "\n", "globals", "=", "Quaternions", ".", "id", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "\n", "globals", "[", ":", ",", "0", "]", "=", "locals", "[", ":", ",", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "globals", "[", ":", ",", "i", "]", "=", "globals", "[", ":", ",", "anim", ".", "parents", "[", "i", "]", "]", "*", "locals", "[", ":", ",", "i", "]", "\n", "\n", "", "return", "globals", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.offsets_transforms_local": [[586, 594], ["anim.orients[].transforms", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.transforms"], ["", "def", "offsets_transforms_local", "(", "anim", ")", ":", "\n", "\n", "    ", "transforms", "=", "anim", ".", "orients", "[", "np", ".", "newaxis", "]", ".", "transforms", "(", ")", "\n", "transforms", "=", "np", ".", "concatenate", "(", "[", "transforms", ",", "np", ".", "zeros", "(", "transforms", ".", "shape", "[", ":", "2", "]", "+", "(", "3", ",", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "transforms", "=", "np", ".", "concatenate", "(", "[", "transforms", ",", "np", ".", "zeros", "(", "transforms", ".", "shape", "[", ":", "2", "]", "+", "(", "1", ",", "4", ")", ")", "]", ",", "axis", "=", "-", "2", ")", "\n", "transforms", "[", ":", ",", ":", ",", "0", ":", "3", ",", "3", "]", "=", "anim", ".", "offsets", "[", "np", ".", "newaxis", "]", "\n", "transforms", "[", ":", ",", ":", ",", "3", ":", "4", ",", "3", "]", "=", "1.0", "\n", "return", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.offsets_transforms_global": [[596, 609], ["numpy.arange", "numpy.arange", "Animation.offsets_transforms_local", "Animation.transforms_blank", "range", "Animation.transforms_multiply"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.offsets_transforms_local", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_blank", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_multiply"], ["", "def", "offsets_transforms_global", "(", "anim", ")", ":", "\n", "\n", "    ", "joints", "=", "np", ".", "arange", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "parents", "=", "np", ".", "arange", "(", "anim", ".", "shape", "[", "1", "]", ")", "\n", "locals", "=", "offsets_transforms_local", "(", "anim", ")", "\n", "globals", "=", "transforms_blank", "(", "anim", ")", "\n", "\n", "globals", "[", ":", ",", "0", "]", "=", "locals", "[", ":", ",", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "anim", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "globals", "[", ":", ",", "i", "]", "=", "transforms_multiply", "(", "globals", "[", ":", ",", "anim", ".", "parents", "[", "i", "]", "]", ",", "locals", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "return", "globals", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.offsets_global": [[610, 613], ["Animation.offsets_transforms_global"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.offsets_transforms_global"], ["", "def", "offsets_global", "(", "anim", ")", ":", "\n", "    ", "offsets", "=", "offsets_transforms_global", "(", "anim", ")", "[", ":", ",", ":", ",", ":", ",", "3", "]", "\n", "return", "offsets", "[", "0", ",", ":", ",", ":", "3", "]", "/", "offsets", "[", "0", ",", ":", ",", "3", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.offset_lengths": [[616, 618], ["numpy.sum"], "function", ["None"], ["def", "offset_lengths", "(", "anim", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "anim", ".", "offsets", "[", "1", ":", "]", "**", "2.0", ",", "axis", "=", "1", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.position_lengths": [[620, 622], ["numpy.sum"], "function", ["None"], ["", "def", "position_lengths", "(", "anim", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "anim", ".", "positions", "[", ":", ",", "1", ":", "]", "**", "2.0", ",", "axis", "=", "2", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.skin": [[626, 642], ["Animation.transforms_multiply", "numpy.array", "numpy.hstack", "Animation.transforms_multiply", "numpy.sum", "Animation.transforms_global", "Animation.transforms_inv", "numpy.argsort", "list", "Animation.transforms_global", "map", "np.array.sum", "numpy.ones", "len"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_multiply", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_inv", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "skin", "(", "anim", ",", "rest", ",", "weights", ",", "mesh", ",", "maxjoints", "=", "4", ")", ":", "\n", "\n", "    ", "full_transforms", "=", "transforms_multiply", "(", "\n", "transforms_global", "(", "anim", ")", ",", "\n", "transforms_inv", "(", "transforms_global", "(", "rest", "[", "0", ":", "1", "]", ")", ")", ")", "\n", "\n", "weightids", "=", "np", ".", "argsort", "(", "-", "weights", ",", "axis", "=", "1", ")", "[", ":", ",", ":", "maxjoints", "]", "\n", "weightvls", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "w", ",", "i", ":", "w", "[", "i", "]", ",", "weights", ",", "weightids", ")", ")", ")", "\n", "weightvls", "=", "weightvls", "/", "weightvls", ".", "sum", "(", "axis", "=", "1", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "verts", "=", "np", ".", "hstack", "(", "[", "mesh", ",", "np", ".", "ones", "(", "(", "len", "(", "mesh", ")", ",", "1", ")", ")", "]", ")", "\n", "verts", "=", "verts", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "verts", "=", "transforms_multiply", "(", "full_transforms", "[", ":", ",", "weightids", "]", ",", "verts", ")", "\n", "verts", "=", "(", "verts", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "/", "verts", "[", ":", ",", ":", ",", ":", ",", "3", ":", "4", "]", ")", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "\n", "return", "np", ".", "sum", "(", "weightvls", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "verts", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__init__": [[19, 20], ["numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ps", ")", ":", "self", ".", "ps", "=", "np", ".", "array", "(", "ps", ")", "\n", "def", "__str__", "(", "self", ")", ":", "return", "\"Pivots(\"", "+", "str", "(", "self", ".", "ps", ")", "+", "\")\"", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__str__": [[20, 21], ["str"], "methods", ["None"], ["def", "__str__", "(", "self", ")", ":", "return", "\"Pivots(\"", "+", "str", "(", "self", ".", "ps", ")", "+", "\")\"", "\n", "def", "__repr__", "(", "self", ")", ":", "return", "\"Pivots(\"", "+", "repr", "(", "self", ".", "ps", ")", "+", "\")\"", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__repr__": [[21, 22], ["repr"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "return", "\"Pivots(\"", "+", "repr", "(", "self", ".", "ps", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__add__": [[23, 24], ["Pivots.Pivots", "numpy.arctan2", "numpy.sin", "numpy.cos"], "methods", ["None"], ["def", "__add__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "np", ".", "arctan2", "(", "np", ".", "sin", "(", "self", ".", "ps", "+", "other", ".", "ps", ")", ",", "np", ".", "cos", "(", "self", ".", "ps", "+", "other", ".", "ps", ")", ")", ")", "\n", "def", "__sub__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "np", ".", "arctan2", "(", "np", ".", "sin", "(", "self", ".", "ps", "-", "other", ".", "ps", ")", ",", "np", ".", "cos", "(", "self", ".", "ps", "-", "other", ".", "ps", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__sub__": [[24, 25], ["Pivots.Pivots", "numpy.arctan2", "numpy.sin", "numpy.cos"], "methods", ["None"], ["def", "__sub__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "np", ".", "arctan2", "(", "np", ".", "sin", "(", "self", ".", "ps", "-", "other", ".", "ps", ")", ",", "np", ".", "cos", "(", "self", ".", "ps", "-", "other", ".", "ps", ")", ")", ")", "\n", "def", "__mul__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "*", "other", ".", "ps", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__mul__": [[25, 26], ["Pivots.Pivots"], "methods", ["None"], ["def", "__mul__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "*", "other", ".", "ps", ")", "\n", "def", "__div__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "/", "other", ".", "ps", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__div__": [[26, 27], ["Pivots.Pivots"], "methods", ["None"], ["def", "__div__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "/", "other", ".", "ps", ")", "\n", "def", "__mod__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "%", "other", ".", "ps", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__mod__": [[27, 28], ["Pivots.Pivots"], "methods", ["None"], ["def", "__mod__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "%", "other", ".", "ps", ")", "\n", "def", "__pow__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "**", "other", ".", "ps", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__pow__": [[28, 29], ["Pivots.Pivots"], "methods", ["None"], ["def", "__pow__", "(", "self", ",", "other", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "**", "other", ".", "ps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__lt__": [[30, 31], ["None"], "methods", ["None"], ["def", "__lt__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", "<", "other", ".", "ps", "\n", "def", "__le__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", "<=", "other", ".", "ps", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__le__": [[31, 32], ["None"], "methods", ["None"], ["def", "__le__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", "<=", "other", ".", "ps", "\n", "def", "__eq__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", "==", "other", ".", "ps", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__eq__": [[32, 33], ["None"], "methods", ["None"], ["def", "__eq__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", "==", "other", ".", "ps", "\n", "def", "__ne__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", "!=", "other", ".", "ps", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__ne__": [[33, 34], ["None"], "methods", ["None"], ["def", "__ne__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", "!=", "other", ".", "ps", "\n", "def", "__ge__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", ">=", "other", ".", "ps", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__ge__": [[34, 35], ["None"], "methods", ["None"], ["def", "__ge__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", ">=", "other", ".", "ps", "\n", "def", "__gt__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", ">", "other", ".", "ps", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__gt__": [[35, 36], ["None"], "methods", ["None"], ["def", "__gt__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "ps", ">", "other", ".", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__abs__": [[37, 38], ["Pivots.Pivots", "abs"], "methods", ["None"], ["def", "__abs__", "(", "self", ")", ":", "return", "Pivots", "(", "abs", "(", "self", ".", "ps", ")", ")", "\n", "def", "__neg__", "(", "self", ")", ":", "return", "Pivots", "(", "-", "self", ".", "ps", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__neg__": [[38, 39], ["Pivots.Pivots"], "methods", ["None"], ["def", "__neg__", "(", "self", ")", ":", "return", "Pivots", "(", "-", "self", ".", "ps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__iter__": [[40, 41], ["iter"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.iter"], ["def", "__iter__", "(", "self", ")", ":", "return", "iter", "(", "self", ".", "ps", ")", "\n", "def", "__len__", "(", "self", ")", ":", "return", "len", "(", "self", ".", "ps", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__len__": [[41, 42], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "__len__", "(", "self", ")", ":", "return", "len", "(", "self", ".", "ps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__getitem__": [[43, 44], ["Pivots.Pivots"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "k", ")", ":", "return", "Pivots", "(", "self", ".", "ps", "[", "k", "]", ")", "\n", "def", "__setitem__", "(", "self", ",", "k", ",", "v", ")", ":", "self", ".", "ps", "[", "k", "]", "=", "v", ".", "ps", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.__setitem__": [[44, 45], ["None"], "methods", ["None"], ["def", "__setitem__", "(", "self", ",", "k", ",", "v", ")", ":", "self", ".", "ps", "[", "k", "]", "=", "v", ".", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots._ellipsis": [[46, 47], ["tuple", "map", "slice"], "methods", ["None"], ["def", "_ellipsis", "(", "self", ")", ":", "return", "tuple", "(", "map", "(", "lambda", "x", ":", "slice", "(", "None", ")", ",", "self", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.quaternions": [[48, 54], ["Pivots.Pivots._ellipsis", "numpy.ones", "Quaternions_old.Quaternions.from_angle_axis"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots._ellipsis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis"], ["def", "quaternions", "(", "self", ",", "plane", "=", "'xz'", ")", ":", "\n", "        ", "fa", "=", "self", ".", "_ellipsis", "(", ")", "\n", "axises", "=", "np", ".", "ones", "(", "self", ".", "ps", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "axises", "[", "fa", "+", "(", "\"xyz\"", ".", "index", "(", "plane", "[", "0", "]", ")", ",", ")", "]", "=", "0.0", "\n", "axises", "[", "fa", "+", "(", "\"xyz\"", ".", "index", "(", "plane", "[", "1", "]", ")", ",", ")", "]", "=", "0.0", "\n", "return", "Quaternions", ".", "from_angle_axis", "(", "self", ".", "ps", ",", "axises", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.directions": [[55, 60], ["numpy.zeros", "numpy.sin", "numpy.cos", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "directions", "(", "self", ",", "plane", "=", "'xz'", ")", ":", "\n", "        ", "dirs", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "ps", ")", ",", "3", ")", ")", "\n", "dirs", "[", "...", ",", "\"xyz\"", ".", "index", "(", "plane", "[", "0", "]", ")", "]", "=", "np", ".", "sin", "(", "self", ".", "ps", ")", "\n", "dirs", "[", "...", ",", "\"xyz\"", ".", "index", "(", "plane", "[", "1", "]", ")", "]", "=", "np", ".", "cos", "(", "self", ".", "ps", ")", "\n", "return", "dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.normalized": [[61, 66], ["numpy.copy", "numpy.any", "numpy.any", "Pivots.Pivots"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "normalized", "(", "self", ")", ":", "\n", "        ", "xs", "=", "np", ".", "copy", "(", "self", ".", "ps", ")", "\n", "while", "np", ".", "any", "(", "xs", ">", "np", ".", "pi", ")", ":", "xs", "[", "xs", ">", "np", ".", "pi", "]", "=", "xs", "[", "xs", ">", "np", ".", "pi", "]", "-", "2", "*", "np", ".", "pi", "\n", "while", "np", ".", "any", "(", "xs", "<", "-", "np", ".", "pi", ")", ":", "xs", "[", "xs", "<", "-", "np", ".", "pi", "]", "=", "xs", "[", "xs", "<", "-", "np", ".", "pi", "]", "+", "2", "*", "np", ".", "pi", "\n", "return", "Pivots", "(", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.interpolate": [[67, 70], ["numpy.average", "numpy.arctan2"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.average"], ["", "def", "interpolate", "(", "self", ",", "ws", ")", ":", "\n", "        ", "dir", "=", "np", ".", "average", "(", "self", ".", "directions", ",", "weights", "=", "ws", ",", "axis", "=", "0", ")", "\n", "return", "np", ".", "arctan2", "(", "dir", "[", "2", "]", ",", "dir", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.copy": [[71, 73], ["Pivots.Pivots", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "Pivots", "(", "np", ".", "copy", "(", "self", ".", "ps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.shape": [[74, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ps", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.from_quaternions": [[78, 83], ["numpy.zeros", "Pivots.from_directions"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.from_directions"], ["", "@", "classmethod", "\n", "def", "from_quaternions", "(", "cls", ",", "qs", ",", "forward", "=", "'z'", ",", "plane", "=", "'xz'", ")", ":", "\n", "        ", "ds", "=", "np", ".", "zeros", "(", "qs", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "ds", "[", "...", ",", "'xyz'", ".", "index", "(", "forward", ")", "]", "=", "1.0", "\n", "return", "Pivots", ".", "from_directions", "(", "qs", "*", "ds", ",", "plane", "=", "plane", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Pivots.Pivots.from_directions": [[84, 89], ["Pivots.Pivots", "numpy.arctan2"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_directions", "(", "cls", ",", "ds", ",", "plane", "=", "'xz'", ")", ":", "\n", "        ", "ys", "=", "ds", "[", "...", ",", "'xyz'", ".", "index", "(", "plane", "[", "0", "]", ")", "]", "\n", "xs", "=", "ds", "[", "...", ",", "'xyz'", ".", "index", "(", "plane", "[", "1", "]", ")", "]", "\n", "return", "Pivots", "(", "np", ".", "arctan2", "(", "ys", ",", "xs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__init__": [[23, 34], ["isinstance", "isinstance", "TypeError", "len", "numpy.array", "type"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "__init__", "(", "self", ",", "qs", ")", ":", "\n", "        ", "if", "isinstance", "(", "qs", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "len", "(", "qs", ".", "shape", ")", "==", "1", ":", "qs", "=", "np", ".", "array", "(", "[", "qs", "]", ")", "\n", "self", ".", "qs", "=", "qs", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "qs", ",", "Quaternions", ")", ":", "\n", "            ", "self", ".", "qs", "=", "qs", "\n", "return", "\n", "\n", "", "raise", "TypeError", "(", "'Quaternions must be constructed from iterable, numpy array, or Quaternions, not %s'", "%", "type", "(", "qs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__str__": [[35, 36], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "return", "\"Quaternions(\"", "+", "str", "(", "self", ".", "qs", ")", "+", "\")\"", "\n", "def", "__repr__", "(", "self", ")", ":", "return", "\"Quaternions(\"", "+", "repr", "(", "self", ".", "qs", ")", "+", "\")\"", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__repr__": [[36, 37], ["repr"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "return", "\"Quaternions(\"", "+", "repr", "(", "self", ".", "qs", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast": [[40, 61], ["isinstance", "numpy.array", "numpy.all", "numpy.array", "numpy.array", "len", "len", "TypeError", "numpy.all", "TypeError", "sqs.copy", "oqs.copy", "numpy.where", "sqsn.repeat.repeat.repeat", "numpy.where", "oqsn.repeat.repeat.repeat", "numpy.ones", "numpy.ones", "numpy.ones", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["@", "classmethod", "\n", "def", "_broadcast", "(", "cls", ",", "sqs", ",", "oqs", ",", "scalar", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "oqs", ",", "float", ")", ":", "return", "sqs", ",", "oqs", "*", "np", ".", "ones", "(", "sqs", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "ss", "=", "np", ".", "array", "(", "sqs", ".", "shape", ")", "if", "not", "scalar", "else", "np", ".", "array", "(", "sqs", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "os", "=", "np", ".", "array", "(", "oqs", ".", "shape", ")", "\n", "\n", "if", "len", "(", "ss", ")", "!=", "len", "(", "os", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Quaternions cannot broadcast together shapes %s and %s'", "%", "(", "sqs", ".", "shape", ",", "oqs", ".", "shape", ")", ")", "\n", "\n", "", "if", "np", ".", "all", "(", "ss", "==", "os", ")", ":", "return", "sqs", ",", "oqs", "\n", "\n", "if", "not", "np", ".", "all", "(", "(", "ss", "==", "os", ")", "|", "(", "os", "==", "np", ".", "ones", "(", "len", "(", "os", ")", ")", ")", "|", "(", "ss", "==", "np", ".", "ones", "(", "len", "(", "ss", ")", ")", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Quaternions cannot broadcast together shapes %s and %s'", "%", "(", "sqs", ".", "shape", ",", "oqs", ".", "shape", ")", ")", "\n", "\n", "", "sqsn", ",", "oqsn", "=", "sqs", ".", "copy", "(", ")", ",", "oqs", ".", "copy", "(", ")", "\n", "\n", "for", "a", "in", "np", ".", "where", "(", "ss", "==", "1", ")", "[", "0", "]", ":", "sqsn", "=", "sqsn", ".", "repeat", "(", "os", "[", "a", "]", ",", "axis", "=", "a", ")", "\n", "for", "a", "in", "np", ".", "where", "(", "os", "==", "1", ")", "[", "0", "]", ":", "oqsn", "=", "oqsn", ".", "repeat", "(", "ss", "[", "a", "]", ",", "axis", "=", "a", ")", "\n", "\n", "return", "sqsn", ",", "oqsn", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__add__": [[64, 65], ["None"], "methods", ["None"], ["def", "__add__", "(", "self", ",", "other", ")", ":", "return", "self", "*", "other", "\n", "def", "__sub__", "(", "self", ",", "other", ")", ":", "return", "self", "/", "other", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__sub__": [[65, 66], ["None"], "methods", ["None"], ["def", "__sub__", "(", "self", ",", "other", ")", ":", "return", "self", "/", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__mul__": [[69, 117], ["isinstance", "TypeError", "Quaternions._broadcast", "numpy.empty", "Quaternions.Quaternions", "isinstance", "Quaternions.Quaternions", "isinstance", "isinstance", "Quaternions.slerp", "numpy.concatenate", "Quaternions.id_like", "str", "type", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.slerp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id_like"], ["def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        Quaternion multiplication has three main methods.\n        \n        When multiplying a Quaternions array by Quaternions\n        normal quater multiplication is performed.\n        \n        When multiplying a Quaternions array by a vector\n        array of the same shape, where the last axis is 3,\n        it is assumed to be a Quaternion by 3D-Vector \n        multiplication and the 3D-Vectors are rotated\n        in space by the Quaternions.\n        \n        When multipplying a Quaternions array by a scalar\n        or vector of different shape it is assumed to be\n        a Quaternions by Scalars multiplication and the\n        Quaternions are scaled using Slerp and the identity\n        quaternions.\n        \"\"\"", "\n", "\n", "\"\"\" If Quaternions type do Quaternions * Quaternions \"\"\"", "\n", "if", "isinstance", "(", "other", ",", "Quaternions", ")", ":", "\n", "            ", "sqs", ",", "oqs", "=", "Quaternions", ".", "_broadcast", "(", "self", ".", "qs", ",", "other", ".", "qs", ")", "\n", "\n", "q0", "=", "sqs", "[", "...", ",", "0", "]", ";", "q1", "=", "sqs", "[", "...", ",", "1", "]", ";", "\n", "q2", "=", "sqs", "[", "...", ",", "2", "]", ";", "q3", "=", "sqs", "[", "...", ",", "3", "]", ";", "\n", "r0", "=", "oqs", "[", "...", ",", "0", "]", ";", "r1", "=", "oqs", "[", "...", ",", "1", "]", ";", "\n", "r2", "=", "oqs", "[", "...", ",", "2", "]", ";", "r3", "=", "oqs", "[", "...", ",", "3", "]", ";", "\n", "\n", "qs", "=", "np", ".", "empty", "(", "sqs", ".", "shape", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "r0", "*", "q0", "-", "r1", "*", "q1", "-", "r2", "*", "q2", "-", "r3", "*", "q3", "\n", "qs", "[", "...", ",", "1", "]", "=", "r0", "*", "q1", "+", "r1", "*", "q0", "-", "r2", "*", "q3", "+", "r3", "*", "q2", "\n", "qs", "[", "...", ",", "2", "]", "=", "r0", "*", "q2", "+", "r1", "*", "q3", "+", "r2", "*", "q0", "-", "r3", "*", "q1", "\n", "qs", "[", "...", ",", "3", "]", "=", "r0", "*", "q3", "-", "r1", "*", "q2", "+", "r2", "*", "q1", "+", "r3", "*", "q0", "\n", "\n", "return", "Quaternions", "(", "qs", ")", "\n", "\n", "", "\"\"\" If array type do Quaternions * Vectors \"\"\"", "\n", "if", "isinstance", "(", "other", ",", "np", ".", "ndarray", ")", "and", "other", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "            ", "vs", "=", "Quaternions", "(", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "other", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "1", ",", ")", ")", ",", "other", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "return", "(", "self", "*", "(", "vs", "*", "-", "self", ")", ")", ".", "imaginaries", "\n", "\n", "", "\"\"\" If float do Quaternions * Scalars \"\"\"", "\n", "if", "isinstance", "(", "other", ",", "np", ".", "ndarray", ")", "or", "isinstance", "(", "other", ",", "float", ")", ":", "\n", "            ", "return", "Quaternions", ".", "slerp", "(", "Quaternions", ".", "id_like", "(", "self", ")", ",", "self", ",", "other", ")", "\n", "\n", "", "raise", "TypeError", "(", "'Cannot multiply/add Quaternions with type %s'", "%", "str", "(", "type", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__div__": [[118, 132], ["isinstance", "isinstance", "isinstance", "TypeError", "str", "type"], "methods", ["None"], ["", "def", "__div__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        When a Quaternion type is supplied, division is defined\n        as multiplication by the inverse of that Quaternion.\n        \n        When a scalar or vector is supplied it is defined\n        as multiplicaion of one over the supplied value.\n        Essentially a scaling.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "other", ",", "Quaternions", ")", ":", "return", "self", "*", "(", "-", "other", ")", "\n", "if", "isinstance", "(", "other", ",", "np", ".", "ndarray", ")", ":", "return", "self", "*", "(", "1.0", "/", "other", ")", "\n", "if", "isinstance", "(", "other", ",", "float", ")", ":", "return", "self", "*", "(", "1.0", "/", "other", ")", "\n", "raise", "TypeError", "(", "'Cannot divide/subtract Quaternions with type %s'", "+", "str", "(", "type", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__eq__": [[133, 134], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "qs", "==", "other", ".", "qs", "\n", "def", "__ne__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "qs", "!=", "other", ".", "qs", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__ne__": [[134, 135], ["None"], "methods", ["None"], ["def", "__ne__", "(", "self", ",", "other", ")", ":", "return", "self", ".", "qs", "!=", "other", ".", "qs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__neg__": [[136, 139], ["Quaternions.Quaternions", "numpy.array"], "methods", ["None"], ["def", "__neg__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Invert Quaternions \"\"\"", "\n", "return", "Quaternions", "(", "self", ".", "qs", "*", "np", ".", "array", "(", "[", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__abs__": [[140, 147], ["Quaternions.Quaternions.normalized().copy", "numpy.sum", "numpy.sum", "Quaternions.Quaternions.normalized", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "def", "__abs__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Unify Quaternions To Single Pole \"\"\"", "\n", "qabs", "=", "self", ".", "normalized", "(", ")", ".", "copy", "(", ")", "\n", "top", "=", "np", ".", "sum", "(", "(", "qabs", ".", "qs", ")", "*", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "bot", "=", "np", ".", "sum", "(", "(", "-", "qabs", ".", "qs", ")", "*", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "qabs", ".", "qs", "[", "top", "<", "bot", "]", "=", "-", "qabs", ".", "qs", "[", "top", "<", "bot", "]", "\n", "return", "qabs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__iter__": [[148, 149], ["iter"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.__init__.Progress.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "return", "iter", "(", "self", ".", "qs", ")", "\n", "def", "__len__", "(", "self", ")", ":", "return", "len", "(", "self", ".", "qs", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__len__": [[149, 150], ["len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["def", "__len__", "(", "self", ")", ":", "return", "len", "(", "self", ".", "qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__getitem__": [[151, 152], ["Quaternions.Quaternions"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "k", ")", ":", "return", "Quaternions", "(", "self", ".", "qs", "[", "k", "]", ")", "\n", "def", "__setitem__", "(", "self", ",", "k", ",", "v", ")", ":", "self", ".", "qs", "[", "k", "]", "=", "v", ".", "qs", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.__setitem__": [[152, 153], ["None"], "methods", ["None"], ["def", "__setitem__", "(", "self", ",", "k", ",", "v", ")", ":", "self", ".", "qs", "[", "k", "]", "=", "v", ".", "qs", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.lengths": [[154, 157], ["numpy.sum"], "methods", ["None"], ["@", "property", "\n", "def", "lengths", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "self", ".", "qs", "**", "2.0", ",", "axis", "=", "-", "1", ")", "**", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reals": [[158, 161], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "qs", "[", "...", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.imaginaries": [[162, 165], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "imaginaries", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "qs", "[", "...", ",", "1", ":", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.shape": [[166, 168], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "return", "self", ".", "qs", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat": [[169, 171], ["Quaternions.Quaternions", "Quaternions.Quaternions.qs.repeat"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat"], ["def", "repeat", "(", "self", ",", "n", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "Quaternions", "(", "self", ".", "qs", ".", "repeat", "(", "n", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized": [[172, 174], ["Quaternions.Quaternions"], "methods", ["None"], ["", "def", "normalized", "(", "self", ")", ":", "\n", "        ", "return", "Quaternions", "(", "self", ".", "qs", "/", "self", ".", "lengths", "[", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log": [[175, 181], ["abs", "numpy.sqrt", "Quaternions.Quaternions.normalized", "numpy.sum", "numpy.arctan2"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "norm", "=", "abs", "(", "self", ".", "normalized", "(", ")", ")", "\n", "imgs", "=", "norm", ".", "imaginaries", "\n", "lens", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "imgs", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "lens", "=", "np", ".", "arctan2", "(", "lens", ",", "norm", ".", "reals", ")", "/", "(", "lens", "+", "1e-10", ")", "\n", "return", "imgs", "*", "lens", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained": [[182, 198], ["numpy.sum", "Quaternions.exp", "Quaternions.exp", "Quaternions.exp.copy", "Quaternions.Quaternions.dot", "Quaternions.Quaternions.dot", "numpy.arctan2", "numpy.arctan2"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "constrained", "(", "self", ",", "axis", ")", ":", "\n", "\n", "        ", "rl", "=", "self", ".", "reals", "\n", "im", "=", "np", ".", "sum", "(", "axis", "*", "self", ".", "imaginaries", ",", "axis", "=", "-", "1", ")", "\n", "\n", "t1", "=", "-", "2", "*", "np", ".", "arctan2", "(", "rl", ",", "im", ")", "+", "np", ".", "pi", "\n", "t2", "=", "-", "2", "*", "np", ".", "arctan2", "(", "rl", ",", "im", ")", "-", "np", ".", "pi", "\n", "\n", "top", "=", "Quaternions", ".", "exp", "(", "axis", "[", "np", ".", "newaxis", "]", "*", "(", "t1", "[", ":", ",", "np", ".", "newaxis", "]", "/", "2.0", ")", ")", "\n", "bot", "=", "Quaternions", ".", "exp", "(", "axis", "[", "np", ".", "newaxis", "]", "*", "(", "t2", "[", ":", ",", "np", ".", "newaxis", "]", "/", "2.0", ")", ")", "\n", "img", "=", "self", ".", "dot", "(", "top", ")", ">", "self", ".", "dot", "(", "bot", ")", "\n", "\n", "ret", "=", "top", ".", "copy", "(", ")", "\n", "ret", "[", "img", "]", "=", "top", "[", "img", "]", "\n", "ret", "[", "~", "img", "]", "=", "bot", "[", "~", "img", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained_x": [[199, 200], ["Quaternions.Quaternions.constrained", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained"], ["", "def", "constrained_x", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "def", "constrained_y", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained_y": [[200, 201], ["Quaternions.Quaternions.constrained", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained"], ["def", "constrained_y", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ")", "\n", "def", "constrained_z", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained_z": [[201, 202], ["Quaternions.Quaternions.constrained", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.constrained"], ["def", "constrained_z", "(", "self", ")", ":", "return", "self", ".", "constrained", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot": [[203, 204], ["numpy.sum"], "methods", ["None"], ["def", "dot", "(", "self", ",", "q", ")", ":", "return", "np", ".", "sum", "(", "self", ".", "qs", "*", "q", ".", "qs", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy": [[205, 206], ["Quaternions.Quaternions", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.copy"], ["def", "copy", "(", "self", ")", ":", "return", "Quaternions", "(", "np", ".", "copy", "(", "self", ".", "qs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape": [[207, 210], ["Quaternions.Quaternions.qs.reshape"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["def", "reshape", "(", "self", ",", "s", ")", ":", "\n", "        ", "self", ".", "qs", ".", "reshape", "(", "s", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.interpolate": [[211, 213], ["Quaternions.exp", "numpy.average", "abs"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.average"], ["", "def", "interpolate", "(", "self", ",", "ws", ")", ":", "\n", "        ", "return", "Quaternions", ".", "exp", "(", "np", ".", "average", "(", "abs", "(", "self", ")", ".", "log", ",", "axis", "=", "0", ",", "weights", "=", "ws", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.euler": [[214, 282], ["numpy.zeros", "Quaternions.Quaternions.normalized", "numpy.arctan2", "numpy.arcsin", "numpy.arctan2", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "def", "euler", "(", "self", ",", "order", "=", "'xyz'", ")", ":", "\n", "\n", "        ", "q", "=", "self", ".", "normalized", "(", ")", ".", "qs", "\n", "q0", "=", "q", "[", "...", ",", "0", "]", "\n", "q1", "=", "q", "[", "...", ",", "1", "]", "\n", "q2", "=", "q", "[", "...", ",", "2", "]", "\n", "q3", "=", "q", "[", "...", ",", "3", "]", "\n", "es", "=", "np", ".", "zeros", "(", "self", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "\n", "# These version is wrong on converting", "\n", "'''\n        if   order == 'xyz':\n            es[...,0] = np.arctan2(2 * (q0 * q1 + q2 * q3), 1 - 2 * (q1 * q1 + q2 * q2))\n            es[...,1] = np.arcsin((2 * (q0 * q2 - q3 * q1)).clip(-1,1))\n            es[...,2] = np.arctan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3))\n        elif order == 'yzx':\n            es[...,0] = np.arctan2(2 * (q1 * q0 - q2 * q3), -q1 * q1 + q2 * q2 - q3 * q3 + q0 * q0)\n            es[...,1] = np.arctan2(2 * (q2 * q0 - q1 * q3),  q1 * q1 - q2 * q2 - q3 * q3 + q0 * q0)\n            es[...,2] = np.arcsin((2 * (q1 * q2 + q3 * q0)).clip(-1,1))\n        else:\n            raise NotImplementedError('Cannot convert from ordering %s' % order)\n        \n        '''", "\n", "\n", "if", "order", "==", "'xyz'", ":", "\n", "            ", "es", "[", "...", ",", "2", "]", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q3", "-", "q1", "*", "q2", ")", ",", "q0", "*", "q0", "+", "q1", "*", "q1", "-", "q2", "*", "q2", "-", "q3", "*", "q3", ")", "\n", "es", "[", "...", ",", "1", "]", "=", "np", ".", "arcsin", "(", "(", "2", "*", "(", "q1", "*", "q3", "+", "q0", "*", "q2", ")", ")", ".", "clip", "(", "-", "1", ",", "1", ")", ")", "\n", "es", "[", "...", ",", "0", "]", "=", "np", ".", "arctan2", "(", "2", "*", "(", "q0", "*", "q1", "-", "q2", "*", "q3", ")", ",", "q0", "*", "q0", "-", "q1", "*", "q1", "-", "q2", "*", "q2", "+", "q3", "*", "q3", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Cannot convert from ordering %s'", "%", "order", ")", "\n", "\n", "# These conversion don't appear to work correctly for Maya.", "\n", "# http://bediyap.com/programming/convert-quaternion-to-euler-rotations/", "\n", "", "'''\n        if   order == 'xyz':\n            es[..., 0] = np.arctan2(2 * (q0 * q3 - q1 * q2), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3)\n            es[..., 1] = np.arcsin((2 * (q1 * q3 + q0 * q2)).clip(-1,1))\n            es[..., 2] = np.arctan2(2 * (q0 * q1 - q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3)\n        elif order == 'yzx':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q1 - q2 * q3), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q1 * q2 + q0 * q3)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q2 - q1 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3)\n        elif order == 'zxy':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q2 - q1 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q0 * q1 + q2 * q3)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q3 - q1 * q2), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3) \n        elif order == 'xzy':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q2 + q1 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q0 * q3 - q1 * q2)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3)\n        elif order == 'yxz':\n            es[fa + (0,)] = np.arctan2(2 * (q1 * q2 + q0 * q3), q0 * q0 - q1 * q1 + q2 * q2 - q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q0 * q1 - q2 * q3)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q1 * q3 + q0 * q2), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3)\n        elif order == 'zyx':\n            es[fa + (0,)] = np.arctan2(2 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3)\n            es[fa + (1,)] = np.arcsin((2 * (q0 * q2 - q1 * q3)).clip(-1,1))\n            es[fa + (2,)] = np.arctan2(2 * (q0 * q3 + q1 * q2), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3)\n        \n        else:\n            raise KeyError('Unknown ordering %s' % order)\n        '''", "\n", "\n", "\n", "# https://github.com/ehsan/ogre/blob/master/OgreMain/src/OgreMatrix3.cpp", "\n", "# Use this class and convert from matrix", "\n", "\n", "return", "es", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.average": [[284, 297], ["len", "ut.matrix_multiply().sum", "numpy.linalg.eigh", "Quaternions.Quaternions", "NotImplementedError", "ut.matrix_multiply", "numpy.argmin"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "average", "(", "self", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "shape", ")", "==", "1", ":", "\n", "\n", "            ", "import", "numpy", ".", "core", ".", "umath_tests", "as", "ut", "\n", "system", "=", "ut", ".", "matrix_multiply", "(", "self", ".", "qs", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "self", ".", "qs", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "w", ",", "v", "=", "np", ".", "linalg", ".", "eigh", "(", "system", ")", "\n", "qiT_dot_qref", "=", "(", "self", ".", "qs", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "v", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "return", "Quaternions", "(", "v", "[", ":", ",", "np", ".", "argmin", "(", "(", "1.", "-", "qiT_dot_qref", "**", "2", ")", ".", "sum", "(", "axis", "=", "0", ")", ")", "]", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "raise", "NotImplementedError", "(", "'Cannot average multi-dimensionsal Quaternions'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.angle_axis": [[298, 308], ["Quaternions.Quaternions.normalized", "numpy.sqrt", "numpy.arccos"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "", "def", "angle_axis", "(", "self", ")", ":", "\n", "\n", "        ", "norm", "=", "self", ".", "normalized", "(", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "1", "-", "(", "norm", ".", "reals", "**", "2.0", ")", ")", "\n", "s", "[", "s", "==", "0", "]", "=", "0.001", "\n", "\n", "angles", "=", "2.0", "*", "np", ".", "arccos", "(", "norm", ".", "reals", ")", "\n", "axis", "=", "norm", ".", "imaginaries", "/", "s", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "angles", ",", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.transforms": [[310, 334], ["numpy.empty"], "methods", ["None"], ["", "def", "transforms", "(", "self", ")", ":", "\n", "\n", "        ", "qw", "=", "self", ".", "qs", "[", "...", ",", "0", "]", "\n", "qx", "=", "self", ".", "qs", "[", "...", ",", "1", "]", "\n", "qy", "=", "self", ".", "qs", "[", "...", ",", "2", "]", "\n", "qz", "=", "self", ".", "qs", "[", "...", ",", "3", "]", "\n", "\n", "x2", "=", "qx", "+", "qx", ";", "y2", "=", "qy", "+", "qy", ";", "z2", "=", "qz", "+", "qz", ";", "\n", "xx", "=", "qx", "*", "x2", ";", "yy", "=", "qy", "*", "y2", ";", "wx", "=", "qw", "*", "x2", ";", "\n", "xy", "=", "qx", "*", "y2", ";", "yz", "=", "qy", "*", "z2", ";", "wy", "=", "qw", "*", "y2", ";", "\n", "xz", "=", "qx", "*", "z2", ";", "zz", "=", "qz", "*", "z2", ";", "wz", "=", "qw", "*", "z2", ";", "\n", "\n", "m", "=", "np", ".", "empty", "(", "self", ".", "shape", "+", "(", "3", ",", "3", ")", ")", "\n", "m", "[", "...", ",", "0", ",", "0", "]", "=", "1.0", "-", "(", "yy", "+", "zz", ")", "\n", "m", "[", "...", ",", "0", ",", "1", "]", "=", "xy", "-", "wz", "\n", "m", "[", "...", ",", "0", ",", "2", "]", "=", "xz", "+", "wy", "\n", "m", "[", "...", ",", "1", ",", "0", "]", "=", "xy", "+", "wz", "\n", "m", "[", "...", ",", "1", ",", "1", "]", "=", "1.0", "-", "(", "xx", "+", "zz", ")", "\n", "m", "[", "...", ",", "1", ",", "2", "]", "=", "yz", "-", "wx", "\n", "m", "[", "...", ",", "2", ",", "0", "]", "=", "xz", "-", "wy", "\n", "m", "[", "...", ",", "2", ",", "1", "]", "=", "yz", "+", "wx", "\n", "m", "[", "...", ",", "2", ",", "2", "]", "=", "1.0", "-", "(", "xx", "+", "yy", ")", "\n", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel": [[335, 337], ["Quaternions.Quaternions.qs.ravel"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.ravel"], ["", "def", "ravel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "qs", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id": [[338, 352], ["isinstance", "TypeError", "numpy.zeros", "Quaternions.Quaternions", "isinstance", "isinstance", "numpy.zeros", "Quaternions.Quaternions", "str", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "id", "(", "cls", ",", "n", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "n", ",", "tuple", ")", ":", "\n", "            ", "qs", "=", "np", ".", "zeros", "(", "n", "+", "(", "4", ",", ")", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "1.0", "\n", "return", "Quaternions", "(", "qs", ")", "\n", "\n", "", "if", "isinstance", "(", "n", ",", "int", ")", "or", "isinstance", "(", "n", ",", "long", ")", ":", "\n", "            ", "qs", "=", "np", ".", "zeros", "(", "(", "n", ",", "4", ")", ")", "\n", "qs", "[", ":", ",", "0", "]", "=", "1.0", "\n", "return", "Quaternions", "(", "qs", ")", "\n", "\n", "", "raise", "TypeError", "(", "'Cannot Construct Quaternion from %s type'", "%", "str", "(", "type", "(", "n", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id_like": [[353, 358], ["numpy.zeros", "Quaternions.Quaternions"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "id_like", "(", "cls", ",", "a", ")", ":", "\n", "        ", "qs", "=", "np", ".", "zeros", "(", "a", ".", "shape", "+", "(", "4", ",", ")", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "1.0", "\n", "return", "Quaternions", "(", "qs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp": [[359, 373], ["numpy.empty", "numpy.cos", "Quaternions().normalized", "numpy.sum", "numpy.sin", "Quaternions.Quaternions"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "@", "classmethod", "\n", "def", "exp", "(", "cls", ",", "ws", ")", ":", "\n", "\n", "        ", "ts", "=", "np", ".", "sum", "(", "ws", "**", "2.0", ",", "axis", "=", "-", "1", ")", "**", "0.5", "\n", "ts", "[", "ts", "==", "0", "]", "=", "0.001", "\n", "ls", "=", "np", ".", "sin", "(", "ts", ")", "/", "ts", "\n", "\n", "qs", "=", "np", ".", "empty", "(", "ws", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "4", ",", ")", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "np", ".", "cos", "(", "ts", ")", "\n", "qs", "[", "...", ",", "1", "]", "=", "ws", "[", "...", ",", "0", "]", "*", "ls", "\n", "qs", "[", "...", ",", "2", "]", "=", "ws", "[", "...", ",", "1", "]", "*", "ls", "\n", "qs", "[", "...", ",", "3", "]", "=", "ws", "[", "...", ",", "2", "]", "*", "ls", "\n", "\n", "return", "Quaternions", "(", "qs", ")", ".", "normalized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.slerp": [[374, 402], ["cls._broadcast", "cls._broadcast", "cls._broadcast", "numpy.sum", "numpy.zeros", "numpy.zeros", "numpy.arccos", "numpy.sin", "Quaternions.Quaternions", "numpy.sin", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions._broadcast"], ["", "@", "classmethod", "\n", "def", "slerp", "(", "cls", ",", "q0s", ",", "q1s", ",", "a", ")", ":", "\n", "\n", "        ", "fst", ",", "snd", "=", "cls", ".", "_broadcast", "(", "q0s", ".", "qs", ",", "q1s", ".", "qs", ")", "\n", "fst", ",", "a", "=", "cls", ".", "_broadcast", "(", "fst", ",", "a", ",", "scalar", "=", "True", ")", "\n", "snd", ",", "a", "=", "cls", ".", "_broadcast", "(", "snd", ",", "a", ",", "scalar", "=", "True", ")", "\n", "\n", "len", "=", "np", ".", "sum", "(", "fst", "*", "snd", ",", "axis", "=", "-", "1", ")", "\n", "\n", "neg", "=", "len", "<", "0.0", "\n", "len", "[", "neg", "]", "=", "-", "len", "[", "neg", "]", "\n", "snd", "[", "neg", "]", "=", "-", "snd", "[", "neg", "]", "\n", "\n", "amount0", "=", "np", ".", "zeros", "(", "a", ".", "shape", ")", "\n", "amount1", "=", "np", ".", "zeros", "(", "a", ".", "shape", ")", "\n", "\n", "linear", "=", "(", "1.0", "-", "len", ")", "<", "0.01", "\n", "omegas", "=", "np", ".", "arccos", "(", "len", "[", "~", "linear", "]", ")", "\n", "sinoms", "=", "np", ".", "sin", "(", "omegas", ")", "\n", "\n", "amount0", "[", "linear", "]", "=", "1.0", "-", "a", "[", "linear", "]", "\n", "amount1", "[", "linear", "]", "=", "a", "[", "linear", "]", "\n", "amount0", "[", "~", "linear", "]", "=", "np", ".", "sin", "(", "(", "1.0", "-", "a", "[", "~", "linear", "]", ")", "*", "omegas", ")", "/", "sinoms", "\n", "amount1", "[", "~", "linear", "]", "=", "np", ".", "sin", "(", "a", "[", "~", "linear", "]", "*", "omegas", ")", "/", "sinoms", "\n", "\n", "return", "Quaternions", "(", "\n", "amount0", "[", "...", ",", "np", ".", "newaxis", "]", "*", "fst", "+", "\n", "amount1", "[", "...", ",", "np", ".", "newaxis", "]", "*", "snd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.between": [[403, 408], ["numpy.cross", "Quaternions().normalized", "numpy.sqrt", "Quaternions.Quaternions", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.normalized"], ["", "@", "classmethod", "\n", "def", "between", "(", "cls", ",", "v0s", ",", "v1s", ")", ":", "\n", "        ", "a", "=", "np", ".", "cross", "(", "v0s", ",", "v1s", ")", "\n", "w", "=", "np", ".", "sqrt", "(", "(", "v0s", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "*", "(", "v1s", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "+", "(", "v0s", "*", "v1s", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "return", "Quaternions", "(", "np", ".", "concatenate", "(", "[", "w", "[", "...", ",", "np", ".", "newaxis", "]", ",", "a", "]", ",", "axis", "=", "-", "1", ")", ")", ".", "normalized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis": [[409, 415], ["Quaternions.Quaternions", "numpy.sin", "numpy.cos", "numpy.concatenate", "numpy.sqrt", "numpy.sum"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_angle_axis", "(", "cls", ",", "angles", ",", "axis", ")", ":", "\n", "        ", "axis", "=", "axis", "/", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "axis", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "+", "1e-10", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "sines", "=", "np", ".", "sin", "(", "angles", "/", "2.0", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "cosines", "=", "np", ".", "cos", "(", "angles", "/", "2.0", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "return", "Quaternions", "(", "np", ".", "concatenate", "(", "[", "cosines", ",", "axis", "*", "sines", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler": [[416, 430], ["Quaternions.from_angle_axis", "Quaternions.from_angle_axis", "Quaternions.from_angle_axis", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis"], ["", "@", "classmethod", "\n", "def", "from_euler", "(", "cls", ",", "es", ",", "order", "=", "'xyz'", ",", "world", "=", "False", ")", ":", "\n", "\n", "        ", "axis", "=", "{", "\n", "'x'", ":", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", ",", "\n", "'y'", ":", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", ",", "\n", "'z'", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "\n", "}", "\n", "\n", "q0s", "=", "Quaternions", ".", "from_angle_axis", "(", "es", "[", "...", ",", "0", "]", ",", "axis", "[", "order", "[", "0", "]", "]", ")", "\n", "q1s", "=", "Quaternions", ".", "from_angle_axis", "(", "es", "[", "...", ",", "1", "]", ",", "axis", "[", "order", "[", "1", "]", "]", ")", "\n", "q2s", "=", "Quaternions", ".", "from_angle_axis", "(", "es", "[", "...", ",", "2", "]", ",", "axis", "[", "order", "[", "2", "]", "]", ")", "\n", "\n", "return", "(", "q2s", "*", "(", "q1s", "*", "q0s", ")", ")", "if", "world", "else", "(", "q0s", "*", "(", "q1s", "*", "q2s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_transforms": [[431, 474], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.empty", "cls", "numpy.sqrt.clip", "numpy.sqrt.clip", "numpy.sqrt.clip", "numpy.sqrt.clip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_transforms", "(", "cls", ",", "ts", ")", ":", "\n", "\n", "        ", "d0", ",", "d1", ",", "d2", "=", "ts", "[", "...", ",", "0", ",", "0", "]", ",", "ts", "[", "...", ",", "1", ",", "1", "]", ",", "ts", "[", "...", ",", "2", ",", "2", "]", "\n", "\n", "q0", "=", "(", "d0", "+", "d1", "+", "d2", "+", "1.0", ")", "/", "4.0", "\n", "q1", "=", "(", "d0", "-", "d1", "-", "d2", "+", "1.0", ")", "/", "4.0", "\n", "q2", "=", "(", "-", "d0", "+", "d1", "-", "d2", "+", "1.0", ")", "/", "4.0", "\n", "q3", "=", "(", "-", "d0", "-", "d1", "+", "d2", "+", "1.0", ")", "/", "4.0", "\n", "\n", "q0", "=", "np", ".", "sqrt", "(", "q0", ".", "clip", "(", "0", ",", "None", ")", ")", "\n", "q1", "=", "np", ".", "sqrt", "(", "q1", ".", "clip", "(", "0", ",", "None", ")", ")", "\n", "q2", "=", "np", ".", "sqrt", "(", "q2", ".", "clip", "(", "0", ",", "None", ")", ")", "\n", "q3", "=", "np", ".", "sqrt", "(", "q3", ".", "clip", "(", "0", ",", "None", ")", ")", "\n", "\n", "c0", "=", "(", "q0", ">=", "q1", ")", "&", "(", "q0", ">=", "q2", ")", "&", "(", "q0", ">=", "q3", ")", "\n", "c1", "=", "(", "q1", ">=", "q0", ")", "&", "(", "q1", ">=", "q2", ")", "&", "(", "q1", ">=", "q3", ")", "\n", "c2", "=", "(", "q2", ">=", "q0", ")", "&", "(", "q2", ">=", "q1", ")", "&", "(", "q2", ">=", "q3", ")", "\n", "c3", "=", "(", "q3", ">=", "q0", ")", "&", "(", "q3", ">=", "q1", ")", "&", "(", "q3", ">=", "q2", ")", "\n", "\n", "q1", "[", "c0", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c0", ",", "2", ",", "1", "]", "-", "ts", "[", "c0", ",", "1", ",", "2", "]", ")", "\n", "q2", "[", "c0", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c0", ",", "0", ",", "2", "]", "-", "ts", "[", "c0", ",", "2", ",", "0", "]", ")", "\n", "q3", "[", "c0", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c0", ",", "1", ",", "0", "]", "-", "ts", "[", "c0", ",", "0", ",", "1", "]", ")", "\n", "\n", "q0", "[", "c1", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c1", ",", "2", ",", "1", "]", "-", "ts", "[", "c1", ",", "1", ",", "2", "]", ")", "\n", "q2", "[", "c1", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c1", ",", "1", ",", "0", "]", "+", "ts", "[", "c1", ",", "0", ",", "1", "]", ")", "\n", "q3", "[", "c1", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c1", ",", "0", ",", "2", "]", "+", "ts", "[", "c1", ",", "2", ",", "0", "]", ")", "\n", "\n", "q0", "[", "c2", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c2", ",", "0", ",", "2", "]", "-", "ts", "[", "c2", ",", "2", ",", "0", "]", ")", "\n", "q1", "[", "c2", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c2", ",", "1", ",", "0", "]", "+", "ts", "[", "c2", ",", "0", ",", "1", "]", ")", "\n", "q3", "[", "c2", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c2", ",", "2", ",", "1", "]", "+", "ts", "[", "c2", ",", "1", ",", "2", "]", ")", "\n", "\n", "q0", "[", "c3", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c3", ",", "1", ",", "0", "]", "-", "ts", "[", "c3", ",", "0", ",", "1", "]", ")", "\n", "q1", "[", "c3", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c3", ",", "2", ",", "0", "]", "+", "ts", "[", "c3", ",", "0", ",", "2", "]", ")", "\n", "q2", "[", "c3", "]", "*=", "np", ".", "sign", "(", "ts", "[", "c3", ",", "2", ",", "1", "]", "+", "ts", "[", "c3", ",", "1", ",", "2", "]", ")", "\n", "\n", "qs", "=", "np", ".", "empty", "(", "ts", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "4", ",", ")", ")", "\n", "qs", "[", "...", ",", "0", "]", "=", "q0", "\n", "qs", "[", "...", ",", "1", "]", "=", "q1", "\n", "qs", "[", "...", ",", "2", "]", "=", "q2", "\n", "qs", "[", "...", ",", "3", "]", "=", "q3", "\n", "\n", "return", "cls", "(", "qs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.load_skeleton.Skel.__init__": [[12, 25], ["os.path.join", "open", "yaml.load", "os.path.join", "BVH.load", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.BVH_mod.load"], ["    ", "def", "__init__", "(", "self", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "BASEPATH", ",", "\"skeleton_lafan.yml\"", ")", ")", ":", "\n", "        ", "f", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "skel", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "Loader", ")", "\n", "self", ".", "bvh_name", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "skel", "[", "'BVH'", "]", ")", "\n", "self", ".", "rest_bvh", "=", "BVH", ".", "load", "(", "self", ".", "bvh_name", ")", "\n", "self", ".", "offset", "=", "np", ".", "array", "(", "skel", "[", "'offsets'", "]", ")", "\n", "self", ".", "topology", "=", "np", ".", "array", "(", "skel", "[", "'parents'", "]", ")", "\n", "self", ".", "chosen_joints", "=", "np", ".", "array", "(", "skel", "[", "'chosen_joints'", "]", ")", "\n", "self", ".", "chosen_parents", "=", "np", ".", "array", "(", "skel", "[", "'chosen_parents'", "]", ")", "\n", "self", ".", "fid_l", ",", "self", ".", "fid_r", "=", "skel", "[", "'left_foot'", "]", ",", "skel", "[", "'right_foot'", "]", "\n", "self", ".", "hips", ",", "self", ".", "sdrs", "=", "skel", "[", "'hips'", "]", ",", "skel", "[", "'shoulders'", "]", "\n", "self", ".", "head", "=", "skel", "[", "'head'", "]", "\n", "self", ".", "visualization", "=", "skel", "[", "'visualization'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.BasicInverseKinematics.__init__": [[58, 64], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "animation", ",", "positions", ",", "iterations", "=", "1", ",", "silent", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "animation", "=", "animation", "\n", "self", ".", "positions", "=", "positions", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "silent", "=", "silent", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.BasicInverseKinematics.__call__": [[65, 108], ["AnimationStructure.children_list", "range", "AnimationStructure.joints", "numpy.array", "Animation.transforms_global", "Quaternions_old.Quaternions.from_transforms", "numpy.arccos", "numpy.cross", "Quaternions_old.Quaternions.from_angle_axis", "Animation.positions_global", "numpy.mean", "print", "len", "numpy.sqrt", "numpy.sqrt", "numpy.sum().clip", "Quaternions_old.Quaternions.exp", "numpy.sum", "numpy.sum", "Quaternions_old.Quaternions.from_angle_axis.log().mean", "numpy.sum", "numpy.sum", "Quaternions_old.Quaternions.from_angle_axis.log"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.children_list", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.joints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_transforms", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.positions_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.exp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.log"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "\n", "        ", "children", "=", "AnimationStructure", ".", "children_list", "(", "self", ".", "animation", ".", "parents", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "\n", "            ", "for", "j", "in", "AnimationStructure", ".", "joints", "(", "self", ".", "animation", ".", "parents", ")", ":", "\n", "\n", "                ", "c", "=", "np", ".", "array", "(", "children", "[", "j", "]", ")", "\n", "if", "len", "(", "c", ")", "==", "0", ":", "continue", "\n", "\n", "anim_transforms", "=", "Animation", ".", "transforms_global", "(", "self", ".", "animation", ")", "\n", "anim_positions", "=", "anim_transforms", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "anim_rotations", "=", "Quaternions", ".", "from_transforms", "(", "anim_transforms", ")", "\n", "\n", "jdirs", "=", "anim_positions", "[", ":", ",", "c", "]", "-", "anim_positions", "[", ":", ",", "np", ".", "newaxis", ",", "j", "]", "\n", "ddirs", "=", "self", ".", "positions", "[", ":", ",", "c", "]", "-", "anim_positions", "[", ":", ",", "np", ".", "newaxis", ",", "j", "]", "\n", "\n", "jsums", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "jdirs", "**", "2.0", ",", "axis", "=", "-", "1", ")", ")", "+", "1e-10", "\n", "dsums", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "ddirs", "**", "2.0", ",", "axis", "=", "-", "1", ")", ")", "+", "1e-10", "\n", "\n", "jdirs", "=", "jdirs", "/", "jsums", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "ddirs", "=", "ddirs", "/", "dsums", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "angles", "=", "np", ".", "arccos", "(", "np", ".", "sum", "(", "jdirs", "*", "ddirs", ",", "axis", "=", "2", ")", ".", "clip", "(", "-", "1", ",", "1", ")", ")", "\n", "axises", "=", "np", ".", "cross", "(", "jdirs", ",", "ddirs", ")", "\n", "axises", "=", "-", "anim_rotations", "[", ":", ",", "j", ",", "np", ".", "newaxis", "]", "*", "axises", "\n", "\n", "rotations", "=", "Quaternions", ".", "from_angle_axis", "(", "angles", ",", "axises", ")", "\n", "\n", "if", "rotations", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                    ", "averages", "=", "rotations", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                    ", "averages", "=", "Quaternions", ".", "exp", "(", "rotations", ".", "log", "(", ")", ".", "mean", "(", "axis", "=", "-", "2", ")", ")", "\n", "\n", "", "self", ".", "animation", ".", "rotations", "[", ":", ",", "j", "]", "=", "self", ".", "animation", ".", "rotations", "[", ":", ",", "j", "]", "*", "averages", "\n", "\n", "", "if", "not", "self", ".", "silent", ":", "\n", "                ", "anim_positions", "=", "Animation", ".", "positions_global", "(", "self", ".", "animation", ")", "\n", "error", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "(", "anim_positions", "-", "self", ".", "positions", ")", "**", "2.0", ",", "axis", "=", "-", "1", ")", "**", "0.5", ",", "axis", "=", "-", "1", ")", "\n", "print", "(", "'[BasicInverseKinematics] Iteration %i Error: %f'", "%", "(", "i", "+", "1", ",", "error", ")", ")", "\n", "\n", "", "", "return", "self", ".", "animation", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.JacobianInverseKinematics.__init__": [[165, 184], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "animation", ",", "targets", ",", "\n", "references", "=", "None", ",", "iterations", "=", "10", ",", "\n", "recalculate", "=", "True", ",", "damping", "=", "2.0", ",", "\n", "secondary", "=", "0.25", ",", "translate", "=", "False", ",", "\n", "silent", "=", "False", ",", "weights", "=", "None", ",", "\n", "weights_translate", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "animation", "=", "animation", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "references", "=", "references", "\n", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "recalculate", "=", "recalculate", "\n", "self", ".", "damping", "=", "damping", "\n", "self", ".", "secondary", "=", "secondary", "\n", "self", ".", "translate", "=", "translate", "\n", "self", ".", "silent", "=", "silent", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "weights_translate", "=", "weights_translate", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.JacobianInverseKinematics.cross": [[185, 191], ["numpy.empty"], "methods", ["None"], ["", "def", "cross", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "o", "=", "np", ".", "empty", "(", "b", ".", "shape", ")", "\n", "o", "[", "...", ",", "0", "]", "=", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "2", "]", "-", "a", "[", "...", ",", "2", "]", "*", "b", "[", "...", ",", "1", "]", "\n", "o", "[", "...", ",", "1", "]", "=", "a", "[", "...", ",", "2", "]", "*", "b", "[", "...", ",", "0", "]", "-", "a", "[", "...", ",", "0", "]", "*", "b", "[", "...", ",", "2", "]", "\n", "o", "[", "...", ",", "2", "]", "=", "a", "[", "...", ",", "0", "]", "*", "b", "[", "...", ",", "1", "]", "-", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "0", "]", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.JacobianInverseKinematics.jacobian": [[192, 230], ["Quaternions_old.Quaternions.id", "Quaternions_old.Quaternions.from_angle_axis", "Quaternions_old.Quaternions.from_angle_axis", "numpy.empty", "fp.repeat", "InverseKinematics.JacobianInverseKinematics.cross", "numpy.swapaxes", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate.reshape", "numpy.empty", "numpy.swapaxes", "numpy.concatenate", "len", "numpy.array", "numpy.array", "numpy.array", "es[].repeat", "numpy.swapaxes.reshape", "numpy.array", "len", "len", "list", "len", "len", "ts.keys", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "jacobian", "(", "self", ",", "x", ",", "fp", ",", "fr", ",", "ts", ",", "dsc", ",", "tdsc", ")", ":", "\n", "\n", "        ", "\"\"\" Find parent rotations \"\"\"", "\n", "prs", "=", "fr", "[", ":", ",", "self", ".", "animation", ".", "parents", "]", "\n", "prs", "[", ":", ",", "0", "]", "=", "Quaternions", ".", "id", "(", "(", "1", ")", ")", "\n", "\n", "\"\"\" Find global positions of target joints \"\"\"", "\n", "tps", "=", "fp", "[", ":", ",", "np", ".", "array", "(", "list", "(", "ts", ".", "keys", "(", ")", ")", ")", "]", "\n", "\n", "\"\"\" Get partial rotations \"\"\"", "\n", "qys", "=", "Quaternions", ".", "from_angle_axis", "(", "x", "[", ":", ",", "1", ":", "prs", ".", "shape", "[", "1", "]", "*", "3", ":", "3", "]", ",", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "0", "]", "]", "]", ")", ")", "\n", "qzs", "=", "Quaternions", ".", "from_angle_axis", "(", "x", "[", ":", ",", "2", ":", "prs", ".", "shape", "[", "1", "]", "*", "3", ":", "3", "]", ",", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "1", "]", "]", "]", ")", ")", "\n", "\n", "\"\"\" Find axis of rotations \"\"\"", "\n", "es", "=", "np", ".", "empty", "(", "(", "len", "(", "x", ")", ",", "fr", ".", "shape", "[", "1", "]", "*", "3", ",", "3", ")", ")", "\n", "es", "[", ":", ",", "0", ":", ":", "3", "]", "=", "(", "(", "prs", "*", "qzs", ")", "*", "qys", ")", "*", "np", ".", "array", "(", "[", "[", "[", "1", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "es", "[", ":", ",", "1", ":", ":", "3", "]", "=", "(", "(", "prs", "*", "qzs", ")", "*", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "0", "]", "]", "]", ")", ")", "\n", "es", "[", ":", ",", "2", ":", ":", "3", "]", "=", "(", "(", "prs", "*", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "1", "]", "]", "]", ")", ")", ")", "\n", "\n", "\"\"\" Construct Jacobian \"\"\"", "\n", "j", "=", "fp", ".", "repeat", "(", "3", ",", "axis", "=", "1", ")", "\n", "j", "=", "dsc", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "(", "tps", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "-", "j", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "j", "=", "self", ".", "cross", "(", "es", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "j", ")", "\n", "j", "=", "np", ".", "swapaxes", "(", "j", ".", "reshape", "(", "(", "len", "(", "x", ")", ",", "fr", ".", "shape", "[", "1", "]", "*", "3", ",", "len", "(", "ts", ")", "*", "3", ")", ")", ",", "1", ",", "2", ")", "\n", "\n", "if", "self", ".", "translate", ":", "\n", "\n", "            ", "es", "=", "np", ".", "empty", "(", "(", "len", "(", "x", ")", ",", "fr", ".", "shape", "[", "1", "]", "*", "3", ",", "3", ")", ")", "\n", "es", "[", ":", ",", "0", ":", ":", "3", "]", "=", "prs", "*", "np", ".", "array", "(", "[", "[", "[", "1", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "es", "[", ":", ",", "1", ":", ":", "3", "]", "=", "prs", "*", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "0", "]", "]", "]", ")", "\n", "es", "[", ":", ",", "2", ":", ":", "3", "]", "=", "prs", "*", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "1", "]", "]", "]", ")", "\n", "\n", "jt", "=", "tdsc", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "es", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", ":", "]", ".", "repeat", "(", "tps", ".", "shape", "[", "1", "]", ",", "axis", "=", "2", ")", "\n", "jt", "=", "np", ".", "swapaxes", "(", "jt", ".", "reshape", "(", "(", "len", "(", "x", ")", ",", "fr", ".", "shape", "[", "1", "]", "*", "3", ",", "len", "(", "ts", ")", "*", "3", ")", ")", ",", "1", ",", "2", ")", "\n", "\n", "j", "=", "np", ".", "concatenate", "(", "[", "j", ",", "jt", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.JacobianInverseKinematics.__call__": [[232, 325], ["InverseKinematics.JacobianInverseKinematics.descendants[].repeat().astype", "InverseKinematics.JacobianInverseKinematics.tdescendants[].repeat().astype", "numpy.array", "numpy.swapaxes", "len", "range", "numpy.ones", "numpy.ones", "AnimationStructure.descendants_mask", "numpy.eye", "list", "InverseKinematics.JacobianInverseKinematics.descendants.repeat().astype", "InverseKinematics.JacobianInverseKinematics.tdescendants.repeat().astype", "dict", "Animation.positions_global", "numpy.mean", "print", "Animation.transforms_global", "Quaternions_old.Quaternions.from_transforms", "InverseKinematics.JacobianInverseKinematics.animation.rotations.euler().reshape", "InverseKinematics.JacobianInverseKinematics.weights.repeat", "numpy.array", "Quaternions_old.Quaternions.from_euler", "InverseKinematics.JacobianInverseKinematics.descendants[].repeat", "InverseKinematics.JacobianInverseKinematics.tdescendants[].repeat", "InverseKinematics.JacobianInverseKinematics.targets.values", "numpy.sqrt", "numpy.hstack", "numpy.hstack", "InverseKinematics.JacobianInverseKinematics.jacobian", "numpy.eye", "list", "numpy.array", "numpy.array", "x[].reshape", "x[].reshape", "Animation.positions_global", "numpy.mean", "print", "InverseKinematics.JacobianInverseKinematics.descendants.repeat", "InverseKinematics.JacobianInverseKinematics.tdescendants.repeat", "numpy.sum", "InverseKinematics.JacobianInverseKinematics.animation.rotations.euler", "InverseKinematics.JacobianInverseKinematics.endeff.reshape", "gp[].reshape", "map", "list", "InverseKinematics.JacobianInverseKinematics.jacobian", "list", "xrange", "numpy.array", "InverseKinematics.JacobianInverseKinematics.animation.positions.reshape", "InverseKinematics.JacobianInverseKinematics.weights_translate.repeat", "map", "InverseKinematics.JacobianInverseKinematics.references.reshape", "Animation.positions_global.reshape", "map", "numpy.sum", "list", "scipy.lu_solve", "numpy.array", "InverseKinematics.JacobianInverseKinematics.targets.keys", "scipy.lu_factor", "jf.T.dot", "nsf.dot", "list", "numpy.array", "numpy.array", "numpy.eye", "scipy.solve", "scipy.lu_solve", "InverseKinematics.JacobianInverseKinematics.targets.keys", "list", "list", "numpy.array", "jf.T.dot", "jf.T.dot", "scipy.lu_factor", "j2f.T.dot", "InverseKinematics.JacobianInverseKinematics.targets.keys", "InverseKinematics.JacobianInverseKinematics.targets.keys", "list", "jf.T.dot", "InverseKinematics.JacobianInverseKinematics.targets.keys", "j2f.T.dot"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.descendants_mask", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.positions_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_transforms", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.jacobian", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.positions_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.jacobian", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "__call__", "(", "self", ",", "descendants", "=", "None", ",", "gamma", "=", "1.0", ")", ":", "\n", "\n", "        ", "self", ".", "descendants", "=", "descendants", "\n", "\n", "\"\"\" Calculate Masses \"\"\"", "\n", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "np", ".", "ones", "(", "self", ".", "animation", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "weights_translate", "is", "None", ":", "\n", "            ", "self", ".", "weights_translate", "=", "np", ".", "ones", "(", "self", ".", "animation", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "\"\"\" Calculate Descendants \"\"\"", "\n", "if", "self", ".", "descendants", "is", "None", ":", "\n", "            ", "self", ".", "descendants", "=", "AnimationStructure", ".", "descendants_mask", "(", "self", ".", "animation", ".", "parents", ")", "\n", "\n", "", "self", ".", "tdescendants", "=", "np", ".", "eye", "(", "self", ".", "animation", ".", "shape", "[", "1", "]", ")", "+", "self", ".", "descendants", "\n", "\n", "self", ".", "first_descendants", "=", "self", ".", "descendants", "[", ":", ",", "np", ".", "array", "(", "list", "(", "self", ".", "targets", ".", "keys", "(", ")", ")", ")", "]", ".", "repeat", "(", "3", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "first_tdescendants", "=", "self", ".", "tdescendants", "[", ":", ",", "np", ".", "array", "(", "list", "(", "self", ".", "targets", ".", "keys", "(", ")", ")", ")", "]", ".", "repeat", "(", "3", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "\n", "\n", "\"\"\" Calculate End Effectors \"\"\"", "\n", "self", ".", "endeff", "=", "np", ".", "array", "(", "list", "(", "self", ".", "targets", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "endeff", "=", "np", ".", "swapaxes", "(", "self", ".", "endeff", ",", "0", ",", "1", ")", "\n", "\n", "if", "not", "self", ".", "references", "is", "None", ":", "\n", "            ", "self", ".", "second_descendants", "=", "self", ".", "descendants", ".", "repeat", "(", "3", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "second_tdescendants", "=", "self", ".", "tdescendants", ".", "repeat", "(", "3", ",", "axis", "=", "0", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "second_targets", "=", "dict", "(", "[", "(", "i", ",", "self", ".", "references", "[", ":", ",", "i", "]", ")", "for", "i", "in", "xrange", "(", "self", ".", "references", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "\n", "", "nf", "=", "len", "(", "self", ".", "animation", ")", "\n", "nj", "=", "self", ".", "animation", ".", "shape", "[", "1", "]", "\n", "\n", "if", "not", "self", ".", "silent", ":", "\n", "            ", "gp", "=", "Animation", ".", "positions_global", "(", "self", ".", "animation", ")", "\n", "gp", "=", "gp", "[", ":", ",", "np", ".", "array", "(", "list", "(", "self", ".", "targets", ".", "keys", "(", ")", ")", ")", "]", "\n", "error", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "self", ".", "endeff", "-", "gp", ")", "**", "2.0", ",", "axis", "=", "2", ")", ")", ")", "\n", "print", "(", "'[JacobianInverseKinematics] Start | Error: %f'", "%", "error", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "\n", "            ", "\"\"\" Get Global Rotations & Positions \"\"\"", "\n", "gt", "=", "Animation", ".", "transforms_global", "(", "self", ".", "animation", ")", "\n", "gp", "=", "gt", "[", ":", ",", ":", ",", ":", ",", "3", "]", "\n", "gp", "=", "gp", "[", ":", ",", ":", ",", ":", "3", "]", "/", "gp", "[", ":", ",", ":", ",", "3", ",", "np", ".", "newaxis", "]", "\n", "gr", "=", "Quaternions", ".", "from_transforms", "(", "gt", ")", "\n", "\n", "x", "=", "self", ".", "animation", ".", "rotations", ".", "euler", "(", ")", ".", "reshape", "(", "nf", ",", "-", "1", ")", "\n", "w", "=", "self", ".", "weights", ".", "repeat", "(", "3", ")", "\n", "\n", "if", "self", ".", "translate", ":", "\n", "                ", "x", "=", "np", ".", "hstack", "(", "[", "x", ",", "self", ".", "animation", ".", "positions", ".", "reshape", "(", "nf", ",", "-", "1", ")", "]", ")", "\n", "w", "=", "np", ".", "hstack", "(", "[", "w", ",", "self", ".", "weights_translate", ".", "repeat", "(", "3", ")", "]", ")", "\n", "\n", "", "\"\"\" Generate Jacobian \"\"\"", "\n", "if", "self", ".", "recalculate", "or", "i", "==", "0", ":", "\n", "                ", "j", "=", "self", ".", "jacobian", "(", "x", ",", "gp", ",", "gr", ",", "self", ".", "targets", ",", "self", ".", "first_descendants", ",", "self", ".", "first_tdescendants", ")", "\n", "\n", "", "\"\"\" Update Variables \"\"\"", "\n", "l", "=", "self", ".", "damping", "*", "(", "1.0", "/", "(", "w", "+", "0.001", ")", ")", "\n", "d", "=", "(", "l", "*", "l", ")", "*", "np", ".", "eye", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "e", "=", "gamma", "*", "(", "self", ".", "endeff", ".", "reshape", "(", "nf", ",", "-", "1", ")", "-", "gp", "[", ":", ",", "np", ".", "array", "(", "list", "(", "self", ".", "targets", ".", "keys", "(", ")", ")", ")", "]", ".", "reshape", "(", "nf", ",", "-", "1", ")", ")", "\n", "\n", "x", "+=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "jf", ",", "ef", ":", "\n", "linalg", ".", "lu_solve", "(", "linalg", ".", "lu_factor", "(", "jf", ".", "T", ".", "dot", "(", "jf", ")", "+", "d", ")", ",", "jf", ".", "T", ".", "dot", "(", "ef", ")", ")", ",", "j", ",", "e", ")", ")", ")", "\n", "\n", "\"\"\" Generate Secondary Jacobian \"\"\"", "\n", "if", "self", ".", "references", "is", "not", "None", ":", "\n", "\n", "                ", "ns", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "jf", ":", "\n", "np", ".", "eye", "(", "x", ".", "shape", "[", "1", "]", ")", "-", "linalg", ".", "solve", "(", "jf", ".", "T", ".", "dot", "(", "jf", ")", "+", "d", ",", "jf", ".", "T", ".", "dot", "(", "jf", ")", ")", ",", "j", ")", ")", ")", "\n", "\n", "if", "self", ".", "recalculate", "or", "i", "==", "0", ":", "\n", "                    ", "j2", "=", "self", ".", "jacobian", "(", "x", ",", "gp", ",", "gr", ",", "self", ".", "second_targets", ",", "self", ".", "second_descendants", ",", "self", ".", "second_tdescendants", ")", "\n", "\n", "", "e2", "=", "self", ".", "secondary", "*", "(", "self", ".", "references", ".", "reshape", "(", "nf", ",", "-", "1", ")", "-", "gp", ".", "reshape", "(", "nf", ",", "-", "1", ")", ")", "\n", "\n", "x", "+=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "nsf", ",", "j2f", ",", "e2f", ":", "\n", "nsf", ".", "dot", "(", "linalg", ".", "lu_solve", "(", "linalg", ".", "lu_factor", "(", "j2f", ".", "T", ".", "dot", "(", "j2f", ")", "+", "d", ")", ",", "j2f", ".", "T", ".", "dot", "(", "e2f", ")", ")", ")", ",", "ns", ",", "j2", ",", "e2", ")", ")", ")", "\n", "\n", "", "\"\"\" Set Back Rotations / Translations \"\"\"", "\n", "self", ".", "animation", ".", "rotations", "=", "Quaternions", ".", "from_euler", "(", "\n", "x", "[", ":", ",", ":", "nj", "*", "3", "]", ".", "reshape", "(", "(", "nf", ",", "nj", ",", "3", ")", ")", ",", "order", "=", "'xyz'", ",", "world", "=", "True", ")", "\n", "\n", "if", "self", ".", "translate", ":", "\n", "                ", "self", ".", "animation", ".", "positions", "=", "x", "[", ":", ",", "nj", "*", "3", ":", "]", ".", "reshape", "(", "(", "nf", ",", "nj", ",", "3", ")", ")", "\n", "\n", "", "\"\"\" Generate Error \"\"\"", "\n", "\n", "if", "not", "self", ".", "silent", ":", "\n", "                ", "gp", "=", "Animation", ".", "positions_global", "(", "self", ".", "animation", ")", "\n", "gp", "=", "gp", "[", ":", ",", "np", ".", "array", "(", "list", "(", "self", ".", "targets", ".", "keys", "(", ")", ")", ")", "]", "\n", "error", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "(", "self", ".", "endeff", "-", "gp", ")", "**", "2.0", ",", "axis", "=", "2", ")", "**", "0.5", ")", "\n", "print", "(", "'[JacobianInverseKinematics] Iteration %i | Error: %f'", "%", "(", "i", "+", "1", ",", "error", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.BasicJacobianIK.__init__": [[333, 337], ["dict", "InverseKinematics.JacobianInverseKinematics", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "animation", ",", "positions", ",", "iterations", "=", "10", ",", "silent", "=", "True", ",", "**", "kw", ")", ":", "\n", "\n", "        ", "targets", "=", "dict", "(", "[", "(", "i", ",", "positions", "[", ":", ",", "i", "]", ")", "for", "i", "in", "range", "(", "positions", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "self", ".", "ik", "=", "JacobianInverseKinematics", "(", "animation", ",", "targets", ",", "iterations", "=", "iterations", ",", "silent", "=", "silent", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.BasicJacobianIK.__call__": [[338, 340], ["InverseKinematics.BasicJacobianIK.ik"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "**", "kw", ")", ":", "\n", "        ", "return", "self", ".", "ik", "(", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.__init__": [[345, 365], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "anim", ",", "rest", ",", "weights", ",", "mesh", ",", "goal", ",", "\n", "find_closest", "=", "True", ",", "damping", "=", "10", ",", "\n", "iterations", "=", "10", ",", "silent", "=", "True", ",", "\n", "translate", "=", "True", ",", "recalculate", "=", "True", ",", "\n", "weights_translate", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "animation", "=", "anim", "\n", "self", ".", "rest", "=", "rest", "\n", "self", ".", "vweights", "=", "weights", "\n", "self", ".", "mesh", "=", "mesh", "\n", "self", ".", "goal", "=", "goal", "\n", "self", ".", "find_closest", "=", "find_closest", "\n", "self", ".", "iterations", "=", "iterations", "\n", "self", ".", "silent", "=", "silent", "\n", "self", ".", "translate", "=", "translate", "\n", "self", ".", "damping", "=", "damping", "\n", "self", ".", "weights", "=", "None", "\n", "self", ".", "weights_translate", "=", "weights_translate", "\n", "self", ".", "recalculate", "=", "recalculate", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross": [[366, 372], ["numpy.empty"], "methods", ["None"], ["", "def", "cross", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "o", "=", "np", ".", "empty", "(", "b", ".", "shape", ")", "\n", "o", "[", "...", ",", "0", "]", "=", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "2", "]", "-", "a", "[", "...", ",", "2", "]", "*", "b", "[", "...", ",", "1", "]", "\n", "o", "[", "...", ",", "1", "]", "=", "a", "[", "...", ",", "2", "]", "*", "b", "[", "...", ",", "0", "]", "-", "a", "[", "...", ",", "0", "]", "*", "b", "[", "...", ",", "2", "]", "\n", "o", "[", "...", ",", "2", "]", "=", "a", "[", "...", ",", "0", "]", "*", "b", "[", "...", ",", "1", "]", "-", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "0", "]", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.jacobian": [[373, 410], ["Quaternions_old.Quaternions.id", "Quaternions_old.Quaternions.from_angle_axis", "Quaternions_old.Quaternions.from_angle_axis", "numpy.empty", "fp.repeat", "numpy.sum", "InverseKinematics.ICP.cross", "numpy.swapaxes", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate.reshape", "numpy.empty", "numpy.sum", "numpy.swapaxes", "numpy.concatenate", "len", "numpy.array", "numpy.array", "numpy.array", "es[].repeat", "numpy.swapaxes.reshape", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.id", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_angle_axis", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len"], ["", "def", "jacobian", "(", "self", ",", "x", ",", "fp", ",", "fr", ",", "goal", ",", "weights", ",", "des_r", ",", "des_t", ")", ":", "\n", "\n", "        ", "\"\"\" Find parent rotations \"\"\"", "\n", "prs", "=", "fr", "[", ":", ",", "self", ".", "animation", ".", "parents", "]", "\n", "prs", "[", ":", ",", "0", "]", "=", "Quaternions", ".", "id", "(", "(", "1", ")", ")", "\n", "\n", "\"\"\" Get partial rotations \"\"\"", "\n", "qys", "=", "Quaternions", ".", "from_angle_axis", "(", "x", "[", ":", ",", "1", ":", "prs", ".", "shape", "[", "1", "]", "*", "3", ":", "3", "]", ",", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "0", "]", "]", "]", ")", ")", "\n", "qzs", "=", "Quaternions", ".", "from_angle_axis", "(", "x", "[", ":", ",", "2", ":", "prs", ".", "shape", "[", "1", "]", "*", "3", ":", "3", "]", ",", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "1", "]", "]", "]", ")", ")", "\n", "\n", "\"\"\" Find axis of rotations \"\"\"", "\n", "es", "=", "np", ".", "empty", "(", "(", "len", "(", "x", ")", ",", "fr", ".", "shape", "[", "1", "]", "*", "3", ",", "3", ")", ")", "\n", "es", "[", ":", ",", "0", ":", ":", "3", "]", "=", "(", "(", "prs", "*", "qzs", ")", "*", "qys", ")", "*", "np", ".", "array", "(", "[", "[", "[", "1", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "es", "[", ":", ",", "1", ":", ":", "3", "]", "=", "(", "(", "prs", "*", "qzs", ")", "*", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "0", "]", "]", "]", ")", ")", "\n", "es", "[", ":", ",", "2", ":", ":", "3", "]", "=", "(", "(", "prs", "*", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "1", "]", "]", "]", ")", ")", ")", "\n", "\n", "\"\"\" Construct Jacobian \"\"\"", "\n", "j", "=", "fp", ".", "repeat", "(", "3", ",", "axis", "=", "1", ")", "\n", "j", "=", "des_r", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "(", "goal", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "-", "j", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ")", "\n", "j", "=", "np", ".", "sum", "(", "j", "*", "weights", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ")", "\n", "j", "=", "self", ".", "cross", "(", "es", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "j", ")", "\n", "j", "=", "np", ".", "swapaxes", "(", "j", ".", "reshape", "(", "(", "len", "(", "x", ")", ",", "fr", ".", "shape", "[", "1", "]", "*", "3", ",", "goal", ".", "shape", "[", "1", "]", "*", "3", ")", ")", ",", "1", ",", "2", ")", "\n", "\n", "if", "self", ".", "translate", ":", "\n", "\n", "            ", "es", "=", "np", ".", "empty", "(", "(", "len", "(", "x", ")", ",", "fr", ".", "shape", "[", "1", "]", "*", "3", ",", "3", ")", ")", "\n", "es", "[", ":", ",", "0", ":", ":", "3", "]", "=", "prs", "*", "np", ".", "array", "(", "[", "[", "[", "1", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "es", "[", ":", ",", "1", ":", ":", "3", "]", "=", "prs", "*", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "0", "]", "]", "]", ")", "\n", "es", "[", ":", ",", "2", ":", ":", "3", "]", "=", "prs", "*", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "1", "]", "]", "]", ")", "\n", "\n", "jt", "=", "des_t", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "*", "es", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", ".", "repeat", "(", "goal", ".", "shape", "[", "1", "]", ",", "axis", "=", "2", ")", "\n", "jt", "=", "np", ".", "sum", "(", "jt", "*", "weights", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ")", "\n", "jt", "=", "np", ".", "swapaxes", "(", "jt", ".", "reshape", "(", "(", "len", "(", "x", ")", ",", "fr", ".", "shape", "[", "1", "]", "*", "3", ",", "goal", ".", "shape", "[", "1", "]", "*", "3", ")", ")", ",", "1", ",", "2", ")", "\n", "\n", "j", "=", "np", ".", "concatenate", "(", "[", "j", ",", "jt", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.__call__": [[412, 497], ["len", "numpy.array", "des_r[].repeat", "des_t[].repeat", "range", "numpy.ones", "numpy.ones", "numpy.argsort", "list", "AnimationStructure.descendants_mask", "numpy.eye", "numpy.eye", "Animation.skin", "numpy.mean", "print", "Animation.transforms_global", "Quaternions_old.Quaternions.from_transforms", "InverseKinematics.ICP.animation.rotations.euler().reshape", "InverseKinematics.ICP.weights.repeat", "Animation.skin", "Quaternions_old.Quaternions.from_euler", "map", "numpy.array.sum", "numpy.sqrt", "numpy.hstack", "numpy.hstack", "numpy.argmin", "InverseKinematics.ICP.jacobian", "numpy.eye", "numpy.array", "numpy.array", "x[].reshape", "x[].reshape", "Animation.skin", "numpy.mean", "print", "numpy.sum", "InverseKinematics.ICP.animation.rotations.euler", "list", "list", "numpy.sqrt", "InverseKinematics.ICP.animation.positions.reshape", "InverseKinematics.ICP.weights_translate.repeat", "map", "map", "numpy.sum", "numpy.array", "jf.T.dot", "scipy.lu_solve", "list", "scipy.lu_factor", "jf.T.dot", "map", "jf.T.dot"], "methods", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.AnimationStructure.descendants_mask", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.skin", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.transforms_global", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_transforms", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.skin", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.from_euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.jacobian", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Animation.skin", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.euler", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.dot"], ["", "def", "__call__", "(", "self", ",", "descendants", "=", "None", ",", "maxjoints", "=", "4", ",", "gamma", "=", "1.0", ",", "transpose", "=", "False", ")", ":", "\n", "\n", "        ", "\"\"\" Calculate Masses \"\"\"", "\n", "if", "self", ".", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "np", ".", "ones", "(", "self", ".", "animation", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "weights_translate", "is", "None", ":", "\n", "            ", "self", ".", "weights_translate", "=", "np", ".", "ones", "(", "self", ".", "animation", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "nf", "=", "len", "(", "self", ".", "animation", ")", "\n", "nj", "=", "self", ".", "animation", ".", "shape", "[", "1", "]", "\n", "nv", "=", "self", ".", "goal", ".", "shape", "[", "1", "]", "\n", "\n", "weightids", "=", "np", ".", "argsort", "(", "-", "self", ".", "vweights", ",", "axis", "=", "1", ")", "[", ":", ",", ":", "maxjoints", "]", "\n", "weightvls", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "w", ",", "i", ":", "w", "[", "i", "]", ",", "self", ".", "vweights", ",", "weightids", ")", ")", ")", "\n", "weightvls", "=", "weightvls", "/", "weightvls", ".", "sum", "(", "axis", "=", "1", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "if", "descendants", "is", "None", ":", "\n", "            ", "self", ".", "descendants", "=", "AnimationStructure", ".", "descendants_mask", "(", "self", ".", "animation", ".", "parents", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "descendants", "=", "descendants", "\n", "\n", "", "des_r", "=", "np", ".", "eye", "(", "nj", ")", "+", "self", ".", "descendants", "\n", "des_r", "=", "des_r", "[", ":", ",", "weightids", "]", ".", "repeat", "(", "3", ",", "axis", "=", "0", ")", "\n", "\n", "des_t", "=", "np", ".", "eye", "(", "nj", ")", "+", "self", ".", "descendants", "\n", "des_t", "=", "des_t", "[", ":", ",", "weightids", "]", ".", "repeat", "(", "3", ",", "axis", "=", "0", ")", "\n", "\n", "if", "not", "self", ".", "silent", ":", "\n", "            ", "curr", "=", "Animation", ".", "skin", "(", "self", ".", "animation", ",", "self", ".", "rest", ",", "self", ".", "vweights", ",", "self", ".", "mesh", ",", "maxjoints", "=", "maxjoints", ")", "\n", "error", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "curr", "-", "self", ".", "goal", ")", "**", "2.0", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "print", "(", "'[ICP] Start | Error: %f'", "%", "error", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "\n", "            ", "\"\"\" Get Global Rotations & Positions \"\"\"", "\n", "gt", "=", "Animation", ".", "transforms_global", "(", "self", ".", "animation", ")", "\n", "gp", "=", "gt", "[", ":", ",", ":", ",", ":", ",", "3", "]", "\n", "gp", "=", "gp", "[", ":", ",", ":", ",", ":", "3", "]", "/", "gp", "[", ":", ",", ":", ",", "3", ",", "np", ".", "newaxis", "]", "\n", "gr", "=", "Quaternions", ".", "from_transforms", "(", "gt", ")", "\n", "\n", "x", "=", "self", ".", "animation", ".", "rotations", ".", "euler", "(", ")", ".", "reshape", "(", "nf", ",", "-", "1", ")", "\n", "w", "=", "self", ".", "weights", ".", "repeat", "(", "3", ")", "\n", "\n", "if", "self", ".", "translate", ":", "\n", "                ", "x", "=", "np", ".", "hstack", "(", "[", "x", ",", "self", ".", "animation", ".", "positions", ".", "reshape", "(", "nf", ",", "-", "1", ")", "]", ")", "\n", "w", "=", "np", ".", "hstack", "(", "[", "w", ",", "self", ".", "weights_translate", ".", "repeat", "(", "3", ")", "]", ")", "\n", "\n", "", "\"\"\" Get Current State \"\"\"", "\n", "curr", "=", "Animation", ".", "skin", "(", "self", ".", "animation", ",", "self", ".", "rest", ",", "self", ".", "vweights", ",", "self", ".", "mesh", ",", "maxjoints", "=", "maxjoints", ")", "\n", "\n", "\"\"\" Find Cloest Points \"\"\"", "\n", "if", "self", ".", "find_closest", ":", "\n", "                ", "mapping", "=", "np", ".", "argmin", "(", "\n", "(", "curr", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "-", "\n", "self", ".", "goal", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ")", "**", "2.0", ",", "axis", "=", "2", ")", "\n", "e", "=", "gamma", "*", "(", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "g", ",", "m", ":", "g", "[", "m", "]", ",", "self", ".", "goal", ",", "mapping", ")", ")", ")", "-", "curr", ")", ".", "reshape", "(", "nf", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "e", "=", "gamma", "*", "(", "self", ".", "goal", "-", "curr", ")", ".", "reshape", "(", "nf", ",", "-", "1", ")", "\n", "\n", "", "\"\"\" Generate Jacobian \"\"\"", "\n", "if", "self", ".", "recalculate", "or", "i", "==", "0", ":", "\n", "                ", "j", "=", "self", ".", "jacobian", "(", "x", ",", "gp", ",", "gr", ",", "self", ".", "goal", ",", "weightvls", ",", "des_r", ",", "des_t", ")", "\n", "\n", "", "\"\"\" Update Variables \"\"\"", "\n", "l", "=", "self", ".", "damping", "*", "(", "1.0", "/", "(", "w", "+", "1e-10", ")", ")", "\n", "d", "=", "(", "l", "*", "l", ")", "*", "np", ".", "eye", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "transpose", ":", "\n", "                ", "x", "+=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "jf", ",", "ef", ":", "jf", ".", "T", ".", "dot", "(", "ef", ")", ",", "j", ",", "e", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "x", "+=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "jf", ",", "ef", ":", "\n", "linalg", ".", "lu_solve", "(", "linalg", ".", "lu_factor", "(", "jf", ".", "T", ".", "dot", "(", "jf", ")", "+", "d", ")", ",", "jf", ".", "T", ".", "dot", "(", "ef", ")", ")", ",", "j", ",", "e", ")", ")", ")", "\n", "\n", "", "\"\"\" Set Back Rotations / Translations \"\"\"", "\n", "self", ".", "animation", ".", "rotations", "=", "Quaternions", ".", "from_euler", "(", "\n", "x", "[", ":", ",", ":", "nj", "*", "3", "]", ".", "reshape", "(", "(", "nf", ",", "nj", ",", "3", ")", ")", ",", "order", "=", "'xyz'", ",", "world", "=", "True", ")", "\n", "\n", "if", "self", ".", "translate", ":", "\n", "                ", "self", ".", "animation", ".", "positions", "=", "x", "[", ":", ",", "nj", "*", "3", ":", "]", ".", "reshape", "(", "(", "nf", ",", "nj", ",", "3", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "silent", ":", "\n", "                ", "curr", "=", "Animation", ".", "skin", "(", "self", ".", "animation", ",", "self", ".", "rest", ",", "self", ".", "vweights", ",", "self", ".", "mesh", ")", "\n", "error", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "curr", "-", "self", ".", "goal", ")", "**", "2.0", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "print", "(", "'[ICP] Iteration %i | Error: %f'", "%", "(", "i", "+", "1", ",", "error", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.Anim.__init__": [[28, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "quats", ",", "pos", ",", "offsets", ",", "parents", ",", "bones", ")", ":", "\n", "        ", "\"\"\"\n        :param quats: local quaternions tensor\n        :param pos: local positions tensor\n        :param offsets: local joint offsets\n        :param parents: bone hierarchy\n        :param bones: bone names\n        \"\"\"", "\n", "self", ".", "quats", "=", "quats", "\n", "self", ".", "pos", "=", "pos", "\n", "self", ".", "offsets", "=", "offsets", "\n", "self", ".", "parents", "=", "parents", "\n", "self", ".", "bones", "=", "bones", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.read_bvh": [[43, 167], ["open", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "open.close", "utils.euler_to_quat", "utils.remove_quat_discontinuities", "extract.Anim", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "line.strip().split", "numpy.radians", "numpy.array", "numpy.array", "names.append", "numpy.append", "numpy.append", "numpy.append", "int", "names.append", "numpy.append", "numpy.append", "numpy.append", "offsets[].repeat", "numpy.zeros", "float", "numpy.array", "len", "re.match.group", "numpy.array", "numpy.array", "len", "numpy.array", "re.match.group", "any", "re.match.group", "numpy.array", "numpy.array", "len", "int", "re.match.group", "line.strip", "list", "data_block[].reshape", "line.split", "re.match.group", "len", "map", "data_block[].reshape.reshape", "list", "data_block[].reshape", "Exception", "map", "re.match.groups"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.euler_to_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.remove_quat_discontinuities", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.repeat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "", "def", "read_bvh", "(", "filename", ",", "start", "=", "None", ",", "end", "=", "None", ",", "order", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Reads a BVH file and extracts animation information.\n\n    :param filename: BVh filename\n    :param start: start frame\n    :param end: end frame\n    :param order: order of euler rotations\n    :return: A simple Anim object conatining the extracted information.\n    \"\"\"", "\n", "\n", "f", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "\n", "i", "=", "0", "\n", "active", "=", "-", "1", "\n", "end_site", "=", "False", "\n", "\n", "names", "=", "[", "]", "\n", "orients", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "(", "0", ",", "4", ")", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "(", "0", ",", "3", ")", ")", "\n", "parents", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "# Parse the  file, line by line", "\n", "for", "line", "in", "f", ":", "\n", "\n", "        ", "if", "\"HIERARCHY\"", "in", "line", ":", "continue", "\n", "if", "\"MOTION\"", "in", "line", ":", "continue", "\n", "\n", "rmatch", "=", "re", ".", "match", "(", "r\"ROOT (\\w+)\"", ",", "line", ")", "\n", "if", "rmatch", ":", "\n", "            ", "names", ".", "append", "(", "rmatch", ".", "group", "(", "1", ")", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", "=", "np", ".", "append", "(", "orients", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "continue", "\n", "\n", "", "if", "\"{\"", "in", "line", ":", "continue", "\n", "\n", "if", "\"}\"", "in", "line", ":", "\n", "            ", "if", "end_site", ":", "\n", "                ", "end_site", "=", "False", "\n", "", "else", ":", "\n", "                ", "active", "=", "parents", "[", "active", "]", "\n", "", "continue", "\n", "\n", "", "offmatch", "=", "re", ".", "match", "(", "r\"\\s*OFFSET\\s+([\\-\\d\\.e]+)\\s+([\\-\\d\\.e]+)\\s+([\\-\\d\\.e]+)\"", ",", "line", ")", "\n", "if", "offmatch", ":", "\n", "            ", "if", "not", "end_site", ":", "\n", "                ", "offsets", "[", "active", "]", "=", "np", ".", "array", "(", "[", "list", "(", "map", "(", "float", ",", "offmatch", ".", "groups", "(", ")", ")", ")", "]", ")", "\n", "", "continue", "\n", "\n", "", "chanmatch", "=", "re", ".", "match", "(", "r\"\\s*CHANNELS\\s+(\\d+)\"", ",", "line", ")", "\n", "if", "chanmatch", ":", "\n", "            ", "channels", "=", "int", "(", "chanmatch", ".", "group", "(", "1", ")", ")", "\n", "if", "order", "is", "None", ":", "\n", "                ", "channelis", "=", "0", "if", "channels", "==", "3", "else", "3", "\n", "channelie", "=", "3", "if", "channels", "==", "3", "else", "6", "\n", "parts", "=", "line", ".", "split", "(", ")", "[", "2", "+", "channelis", ":", "2", "+", "channelie", "]", "\n", "if", "any", "(", "[", "p", "not", "in", "channelmap", "for", "p", "in", "parts", "]", ")", ":", "\n", "                    ", "continue", "\n", "", "order", "=", "\"\"", ".", "join", "(", "[", "channelmap", "[", "p", "]", "for", "p", "in", "parts", "]", ")", "\n", "", "continue", "\n", "\n", "", "jmatch", "=", "re", ".", "match", "(", "\"\\s*JOINT\\s+(\\w+)\"", ",", "line", ")", "\n", "if", "jmatch", ":", "\n", "            ", "names", ".", "append", "(", "jmatch", ".", "group", "(", "1", ")", ")", "\n", "offsets", "=", "np", ".", "append", "(", "offsets", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "orients", "=", "np", ".", "append", "(", "orients", ",", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "parents", "=", "np", ".", "append", "(", "parents", ",", "active", ")", "\n", "active", "=", "(", "len", "(", "parents", ")", "-", "1", ")", "\n", "continue", "\n", "\n", "", "if", "\"End Site\"", "in", "line", ":", "\n", "            ", "end_site", "=", "True", "\n", "continue", "\n", "\n", "", "fmatch", "=", "re", ".", "match", "(", "\"\\s*Frames:\\s+(\\d+)\"", ",", "line", ")", "\n", "if", "fmatch", ":", "\n", "            ", "if", "start", "and", "end", ":", "\n", "                ", "fnum", "=", "(", "end", "-", "start", ")", "-", "1", "\n", "", "else", ":", "\n", "                ", "fnum", "=", "int", "(", "fmatch", ".", "group", "(", "1", ")", ")", "\n", "", "positions", "=", "offsets", "[", "np", ".", "newaxis", "]", ".", "repeat", "(", "fnum", ",", "axis", "=", "0", ")", "\n", "rotations", "=", "np", ".", "zeros", "(", "(", "fnum", ",", "len", "(", "orients", ")", ",", "3", ")", ")", "\n", "continue", "\n", "\n", "", "fmatch", "=", "re", ".", "match", "(", "\"\\s*Frame Time:\\s+([\\d\\.]+)\"", ",", "line", ")", "\n", "if", "fmatch", ":", "\n", "            ", "frametime", "=", "float", "(", "fmatch", ".", "group", "(", "1", ")", ")", "\n", "continue", "\n", "\n", "", "if", "(", "start", "and", "end", ")", "and", "(", "i", "<", "start", "or", "i", ">=", "end", "-", "1", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "continue", "\n", "\n", "", "dmatch", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "dmatch", ":", "\n", "            ", "data_block", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "dmatch", ")", ")", ")", "\n", "N", "=", "len", "(", "parents", ")", "\n", "fi", "=", "i", "-", "start", "if", "start", "else", "i", "\n", "if", "channels", "==", "3", ":", "\n", "                ", "positions", "[", "fi", ",", "0", ":", "1", "]", "=", "data_block", "[", "0", ":", "3", "]", "\n", "rotations", "[", "fi", ",", ":", "]", "=", "data_block", "[", "3", ":", "]", ".", "reshape", "(", "N", ",", "3", ")", "\n", "", "elif", "channels", "==", "6", ":", "\n", "                ", "data_block", "=", "data_block", ".", "reshape", "(", "N", ",", "6", ")", "\n", "positions", "[", "fi", ",", ":", "]", "=", "data_block", "[", ":", ",", "0", ":", "3", "]", "\n", "rotations", "[", "fi", ",", ":", "]", "=", "data_block", "[", ":", ",", "3", ":", "6", "]", "\n", "", "elif", "channels", "==", "9", ":", "\n", "                ", "positions", "[", "fi", ",", "0", "]", "=", "data_block", "[", "0", ":", "3", "]", "\n", "data_block", "=", "data_block", "[", "3", ":", "]", ".", "reshape", "(", "N", "-", "1", ",", "9", ")", "\n", "rotations", "[", "fi", ",", "1", ":", "]", "=", "data_block", "[", ":", ",", "3", ":", "6", "]", "\n", "positions", "[", "fi", ",", "1", ":", "]", "+=", "data_block", "[", ":", ",", "0", ":", "3", "]", "*", "data_block", "[", ":", ",", "6", ":", "9", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"Too many channels! %i\"", "%", "channels", ")", "\n", "\n", "", "i", "+=", "1", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "rotations", "=", "utils", ".", "euler_to_quat", "(", "np", ".", "radians", "(", "rotations", ")", ",", "order", "=", "order", ")", "\n", "rotations", "=", "utils", ".", "remove_quat_discontinuities", "(", "rotations", ")", "\n", "\n", "return", "Anim", "(", "rotations", ",", "positions", ",", "offsets", ",", "parents", ",", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.get_lafan1_set": [[169, 238], ["os.listdir", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.mean", "file.endswith", "np.asarray().astype.astype", "np.asarray().astype.astype", "ntpath.basename", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "print", "os.path.join", "extract.read_bvh", "utils.quat_fk", "utils.extract_feet_contacts", "np.asarray().astype.append", "np.asarray().astype.append", "seq_names.append", "subjects.append", "np.asarray().astype.append", "np.asarray().astype.append"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.read_bvh", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_fk", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.extract_feet_contacts", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append"], ["", "def", "get_lafan1_set", "(", "bvh_path", ",", "actors", ",", "window", "=", "50", ",", "offset", "=", "20", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Extract the same test set as in the article, given the location of the BVH files.\n\n    :param bvh_path: Path to the dataset BVH files\n    :param list: actor prefixes to use in set\n    :param window: width  of the sliding windows (in timesteps)\n    :param offset: offset between windows (in timesteps)\n    :return: tuple:\n        X: local positions\n        Q: local quaternions\n        parents: list of parent indices defining the bone hierarchy\n        contacts_l: binary tensor of left-foot contacts of shape (Batchsize, Timesteps, 2)\n        contacts_r: binary tensor of right-foot contacts of shape (Batchsize, Timesteps, 2)\n    \"\"\"", "\n", "npast", "=", "10", "\n", "subjects", "=", "[", "]", "\n", "seq_names", "=", "[", "]", "\n", "X", "=", "[", "]", "\n", "Q", "=", "[", "]", "\n", "contacts_l", "=", "[", "]", "\n", "contacts_r", "=", "[", "]", "\n", "\n", "# Extract", "\n", "bvh_files", "=", "os", ".", "listdir", "(", "bvh_path", ")", "\n", "if", "debug", ":", "\n", "        ", "bvh_files", "=", "bvh_files", "[", ":", "3", "]", "\n", "\n", "", "for", "file", "in", "bvh_files", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "'.bvh'", ")", ":", "\n", "# basename = ntpath.basename(file)[:-4].split('_')", "\n", "# seq_name, subject = basename[0], basename[1]", "\n", "# seq_name, subject = ntpath.basename(file[:-4]).split('_')", "\n", "            ", "seq_name", "=", "subject", "=", "ntpath", ".", "basename", "(", "file", "[", ":", "-", "4", "]", ")", "\n", "\n", "if", "subject", "in", "actors", ":", "\n", "                ", "print", "(", "'Processing file {}'", ".", "format", "(", "file", ")", ")", "\n", "seq_path", "=", "os", ".", "path", ".", "join", "(", "bvh_path", ",", "file", ")", "\n", "anim", "=", "read_bvh", "(", "seq_path", ")", "\n", "\n", "# Sliding windows", "\n", "i", "=", "0", "\n", "while", "i", "+", "window", "<", "anim", ".", "pos", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "q", ",", "x", "=", "utils", ".", "quat_fk", "(", "anim", ".", "quats", "[", "i", ":", "i", "+", "window", "]", ",", "anim", ".", "pos", "[", "i", ":", "i", "+", "window", "]", ",", "anim", ".", "parents", ")", "\n", "# Extract contacts", "\n", "c_l", ",", "c_r", "=", "utils", ".", "extract_feet_contacts", "(", "x", ",", "[", "3", ",", "4", "]", ",", "[", "7", ",", "8", "]", ",", "velfactor", "=", "0.02", ")", "\n", "X", ".", "append", "(", "anim", ".", "pos", "[", "i", ":", "i", "+", "window", "]", ")", "\n", "Q", ".", "append", "(", "anim", ".", "quats", "[", "i", ":", "i", "+", "window", "]", ")", "\n", "seq_names", ".", "append", "(", "seq_name", ")", "\n", "subjects", ".", "append", "(", "subjects", ")", "\n", "contacts_l", ".", "append", "(", "c_l", ")", "\n", "contacts_r", ".", "append", "(", "c_r", ")", "\n", "\n", "i", "+=", "offset", "\n", "\n", "", "", "", "", "X", "=", "np", ".", "asarray", "(", "X", ")", ".", "astype", "(", "'float32'", ")", "\n", "Q", "=", "np", ".", "asarray", "(", "Q", ")", ".", "astype", "(", "'float32'", ")", "\n", "contacts_l", "=", "np", ".", "asarray", "(", "contacts_l", ")", ".", "astype", "(", "'float32'", ")", "\n", "contacts_r", "=", "np", ".", "asarray", "(", "contacts_r", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "# Sequences around XZ = 0", "\n", "xzs", "=", "np", ".", "mean", "(", "X", "[", ":", ",", ":", ",", "0", ",", ":", ":", "2", "]", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X", "[", ":", ",", ":", ",", "0", ",", "0", "]", "=", "X", "[", ":", ",", ":", ",", "0", ",", "0", "]", "-", "xzs", "[", "...", ",", "0", "]", "\n", "X", "[", ":", ",", ":", ",", "0", ",", "2", "]", "=", "X", "[", ":", ",", ":", ",", "0", ",", "2", "]", "-", "xzs", "[", "...", ",", "1", "]", "\n", "\n", "# Unify facing on last seed frame", "\n", "# X, Q = utils.rotate_at_frame(X, Q, anim.parents, n_past=npast)", "\n", "\n", "return", "X", ".", "astype", "(", "'float32'", ")", ",", "Q", ".", "astype", "(", "'float32'", ")", ",", "anim", ".", "parents", ",", "contacts_l", ",", "contacts_r", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.get_train_stats": [[240, 260], ["print", "extract.get_lafan1_set", "print", "utils.quat_fk", "numpy.mean", "numpy.std", "x_glbl.reshape().transpose", "x_glbl.reshape().transpose", "x_glbl.reshape", "x_glbl.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.extract.get_lafan1_set", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_fk", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.std", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "get_train_stats", "(", "bvh_folder", ",", "train_set", ")", ":", "\n", "    ", "\"\"\"\n    Extract the same training set as in the paper in order to compute the normalizing statistics\n    :return: Tuple of (local position mean vector, local position standard deviation vector, local joint offsets tensor)\n    \"\"\"", "\n", "print", "(", "'Building the train set...'", ")", "\n", "xtrain", ",", "qtrain", ",", "parents", ",", "_", ",", "_", "=", "get_lafan1_set", "(", "bvh_folder", ",", "train_set", ",", "window", "=", "50", ",", "offset", "=", "20", ")", "\n", "\n", "print", "(", "'Computing stats...\\n'", ")", "\n", "# Joint offsets : are constant, so just take the first frame:", "\n", "offsets", "=", "xtrain", "[", "0", ":", "1", ",", "0", ":", "1", ",", "1", ":", ",", ":", "]", "# Shape : (1, 1, J, 3)", "\n", "\n", "# Global representation:", "\n", "q_glbl", ",", "x_glbl", "=", "utils", ".", "quat_fk", "(", "qtrain", ",", "xtrain", ",", "parents", ")", "\n", "\n", "# Global positions stats:", "\n", "x_mean", "=", "np", ".", "mean", "(", "x_glbl", ".", "reshape", "(", "[", "x_glbl", ".", "shape", "[", "0", "]", ",", "x_glbl", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", ",", "axis", "=", "(", "0", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "x_std", "=", "np", ".", "std", "(", "x_glbl", ".", "reshape", "(", "[", "x_glbl", ".", "shape", "[", "0", "]", ",", "x_glbl", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", ",", "axis", "=", "(", "0", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "x_mean", ",", "x_std", ",", "offsets", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.length": [[4, 15], ["numpy.sqrt", "numpy.sum"], "function", ["None"], ["from", "common", ".", "loss", "import", "*", "\n", "\n", "# record time", "\n", "def", "update_time", "(", "ckpt", "=", "None", ")", ":", "\n", "    ", "if", "not", "ckpt", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "-", "float", "(", "ckpt", ")", ",", "time", ".", "time", "(", ")", "\n", "\n", "", "", "def", "mkd", "(", "target_dir", ",", "get_parent", "=", "True", ")", ":", "\n", "# get parent path and create", "\n", "    ", "if", "get_parent", ":", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.normalize": [[17, 28], ["utils.length"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.length"], ["", "else", ":", "\n", "        ", "savedir", "=", "target_dir", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "", "def", "convert_AlphaOpenposeCoco_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    ", "\"\"\"\n    pose_x: nx17x2\n    https://zhuanlan.zhihu.com/p/367707179\n    \"\"\"", "\n", "hip", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "11", "]", "+", "pose_x", "[", ":", ",", "12", "]", ")", "\n", "neck", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "5", "]", "+", "pose_x", "[", ":", ",", "6", "]", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_normalize": [[30, 40], ["utils.normalize"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.normalize"], ["\n", "# head = 0.5 * (pose_x[:, 1] + pose_x[:, 2])", "\n", "\n", "head_0", "=", "pose_x", "[", ":", ",", "0", "]", "# by noise", "\n", "head_1", "=", "(", "neck", "-", "hip", ")", "*", "0.5", "+", "neck", "# by backbone", "\n", "head_2", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "1", "]", "+", "pose_x", "[", ":", ",", "2", "]", ")", "# by two eye", "\n", "head_3", "=", "0.5", "*", "(", "pose_x", "[", ":", ",", "3", "]", "+", "pose_x", "[", ":", ",", "4", "]", ")", "# by two ear", "\n", "head", "=", "head_0", "*", "0.1", "+", "head_1", "*", "0.6", "+", "head_2", "*", "0.1", "+", "head_3", "*", "0.2", "\n", "\n", "combine", "=", "np", ".", "stack", "(", "[", "hip", ",", "spine", ",", "neck", ",", "head", "]", ")", "# 0 1 2 3 ---> 17, 18, 19 ,20", "\n", "combine", "=", "np", ".", "transpose", "(", "combine", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.angle_axis_to_quat": [[42, 54], ["numpy.concatenate", "numpy.cos", "numpy.sin"], "function", ["None"], ["reorder", "=", "[", "17", ",", "12", ",", "14", ",", "16", ",", "11", ",", "13", ",", "15", ",", "18", ",", "19", ",", "20", ",", "5", ",", "7", ",", "9", ",", "6", ",", "8", ",", "10", "]", "\n", "standart_16joint", "=", "combine", "[", ":", ",", "reorder", "]", "\n", "return", "standart_16joint", "\n", "\n", "", "def", "convert_hhr_to_standard16Joint", "(", "pose_x", ")", ":", "\n", "    ", "\"\"\"\n    pose_x: nx17x2\n    https://zhuanlan.zhihu.com/p/367707179\n    \"\"\"", "\n", "re_order", "=", "[", "3", ",", "12", ",", "14", ",", "16", ",", "11", ",", "13", ",", "15", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "7", ",", "9", ",", "6", ",", "8", ",", "10", "]", "\n", "standart_17joint", "=", "pose_x", "[", ":", ",", "re_order", "]", "\n", "standart_16joint", "=", "np", ".", "delete", "(", "standart_17joint", ",", "9", ",", "axis", "=", "1", ")", "\n", "# standart_16joint = np.delete(standart_17joint, 10, axis=1)", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.euler_to_quat": [[56, 75], ["utils.angle_axis_to_quat", "utils.angle_axis_to_quat", "utils.angle_axis_to_quat", "utils.quat_mul", "numpy.asarray", "numpy.asarray", "numpy.asarray", "utils.quat_mul"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.angle_axis_to_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.angle_axis_to_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.angle_axis_to_quat", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul"], ["\n", "", "def", "get_detector_2d", "(", "detector_name", ")", ":", "\n", "    ", "def", "get_alpha_pose", "(", ")", ":", "\n", "        ", "from", "joints_detectors", ".", "Alphapose", ".", "gene_npz", "import", "generate_kpts", "as", "alpha_pose", "\n", "return", "alpha_pose", "\n", "\n", "# def get_hr_pose():", "\n", "#     from joints_detectors.hrnet.pose_estimation.video import generate_kpts as hr_pose", "\n", "#     return hr_pose", "\n", "\n", "", "detector_map", "=", "{", "\n", "'alpha_pose'", ":", "get_alpha_pose", ",", "\n", "# 'hr_pose': get_hr_pose,", "\n", "}", "\n", "\n", "assert", "detector_name", "in", "detector_map", ",", "f'2D detector: {detector_name} not implemented yet!'", "\n", "\n", "return", "detector_map", "[", "detector_name", "]", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_inv": [[77, 86], ["numpy.asarray"], "function", ["None"], ["    ", "def", "parents", "(", "self", ")", ":", "\n", "# return np.array([-1, 0, 1, 2, 0, 4, 5, 0, 7, 8, 9, 8, 11, 12, 8, 14, 15])", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "0", ",", "7", ",", "8", ",", "8", ",", "10", ",", "11", ",", "8", ",", "13", ",", "14", "]", ")", "\n", "\n", "#   connected son:    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11, 12, 13,14, 15, 16  #### for 16 joint.", "\n", "\n", "", "def", "joints_right", "(", "self", ")", ":", "\n", "# return [1, 2, 3, 9, 10]", "\n", "        ", "return", "[", "1", ",", "2", ",", "3", ",", "13", ",", "14", ",", "15", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_fk": [[88, 104], ["range", "len", "gp.append", "gr.append", "numpy.concatenate", "numpy.concatenate", "utils.quat_mul", "utils.quat_mul_vec"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.Alphapose.dataloader.DataWriter.len", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.memory.Memory.append", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec"], ["import", "moviepy", ".", "video", ".", "io", ".", "ImageSequenceClip", "\n", "\n", "def", "image_sequence_to_video", "(", "img_lst", ",", "output_path", ",", "frame_rate", ")", ":", "\n", "# frame_size = (500, 500)", "\n", "# output_path = 'output_video.mp4'", "\n", "# frame_rate = 25", "\n", "    ", "frame_size", "=", "cv2", ".", "imread", "(", "img_lst", "[", "0", "]", ")", ".", "shape", "[", ":", "2", "]", "\n", "print", "(", "'frame_size: {}'", ".", "format", "(", "frame_size", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "output_path", ")", ":", "\n", "        ", "clip", "=", "moviepy", ".", "video", ".", "io", ".", "ImageSequenceClip", ".", "ImageSequenceClip", "(", "img_lst", ",", "fps", "=", "frame_rate", ")", "\n", "clip", ".", "write_videofile", "(", "output_path", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'{} exist already.'", ".", "format", "(", "output_path", ")", ")", "\n", "", "return", "frame_size", "\n", "", ""]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_ik": [[106, 129], ["numpy.concatenate", "numpy.concatenate", "utils.quat_mul", "utils.quat_mul_vec", "utils.quat_inv", "utils.quat_inv"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_inv", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_inv"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul": [[131, 149], ["numpy.concatenate"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec": [[151, 163], ["numpy.cross", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_slerp": [[165, 196], ["numpy.sum", "numpy.zeros", "numpy.zeros", "numpy.arccos", "numpy.sin", "numpy.zeros_like", "numpy.sin", "numpy.sin"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_between": [[198, 211], ["numpy.concatenate", "numpy.cross", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.InverseKinematics.ICP.cross"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.interpolate_local": [[213, 249], ["numpy.linspace", "numpy.tile", "numpy.linspace", "numpy.stack", "utils.quat_normalize", "utils.quat_slerp", "utils.quat_normalize", "utils.quat_normalize"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_normalize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_slerp", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_normalize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_normalize"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.remove_quat_discontinuities": [[251, 269], ["range", "numpy.sum", "numpy.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.rotate_at_frame": [[272, 297], ["utils.quat_fk", "utils.normalize", "utils.quat_normalize", "quat_mul().astype", "quat_mul_vec().astype", "utils.quat_ik", "utils.quat_mul_vec", "utils.quat_between", "numpy.array", "numpy.array", "utils.quat_mul", "utils.quat_mul_vec", "numpy.array", "utils.quat_inv", "utils.quat_inv"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_fk", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.normalize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_normalize", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_ik", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_between", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_mul_vec", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_inv", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_inv"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.extract_feet_contacts": [[299, 320], ["numpy.concatenate", "numpy.concatenate", "numpy.sum", "numpy.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.fast_npss": [[9, 47], ["numpy.real", "numpy.real", "numpy.square", "numpy.square", "numpy.sum", "numpy.sum", "numpy.cumsum", "numpy.cumsum", "numpy.linalg.norm", "numpy.average", "numpy.fft.fft", "numpy.fft.fft"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.average"], ["def", "fast_npss", "(", "gt_seq", ",", "pred_seq", ")", ":", "\n", "    ", "\"\"\"\n    Computes Normalized Power Spectrum Similarity (NPSS).\n\n    This is the metric proposed by Gropalakrishnan et al (2019).\n    This implementation uses numpy parallelism for improved performance.\n\n    :param gt_seq: ground-truth array of shape : (Batchsize, Timesteps, Dimension)\n    :param pred_seq: shape : (Batchsize, Timesteps, Dimension)\n    :return: The average npss metric for the batch\n    \"\"\"", "\n", "# Fourier coefficients along the time dimension", "\n", "gt_fourier_coeffs", "=", "np", ".", "real", "(", "np", ".", "fft", ".", "fft", "(", "gt_seq", ",", "axis", "=", "1", ")", ")", "\n", "pred_fourier_coeffs", "=", "np", ".", "real", "(", "np", ".", "fft", ".", "fft", "(", "pred_seq", ",", "axis", "=", "1", ")", ")", "\n", "\n", "# Square of the Fourier coefficients", "\n", "gt_power", "=", "np", ".", "square", "(", "gt_fourier_coeffs", ")", "\n", "pred_power", "=", "np", ".", "square", "(", "pred_fourier_coeffs", ")", "\n", "\n", "# Sum of powers over time dimension", "\n", "gt_total_power", "=", "np", ".", "sum", "(", "gt_power", ",", "axis", "=", "1", ")", "\n", "pred_total_power", "=", "np", ".", "sum", "(", "pred_power", ",", "axis", "=", "1", ")", "\n", "\n", "# Normalize powers with totals", "\n", "gt_norm_power", "=", "gt_power", "/", "gt_total_power", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "pred_norm_power", "=", "pred_power", "/", "pred_total_power", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Cumulative sum over time", "\n", "cdf_gt_power", "=", "np", ".", "cumsum", "(", "gt_norm_power", ",", "axis", "=", "1", ")", "\n", "cdf_pred_power", "=", "np", ".", "cumsum", "(", "pred_norm_power", ",", "axis", "=", "1", ")", "\n", "\n", "# Earth mover distance", "\n", "emd", "=", "np", ".", "linalg", ".", "norm", "(", "(", "cdf_pred_power", "-", "cdf_gt_power", ")", ",", "ord", "=", "1", ",", "axis", "=", "1", ")", "\n", "\n", "# Weighted EMD", "\n", "power_weighted_emd", "=", "np", ".", "average", "(", "emd", ",", "weights", "=", "gt_total_power", ")", "\n", "\n", "return", "power_weighted_emd", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.flatjoints": [[49, 56], ["x.reshape"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "flatjoints", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Shorthand for a common reshape pattern. Collapses all but the two first dimensions of a tensor.\n    :param x: Data tensor of at least 3 dimensions.\n    :return: The flattened tensor.\n    \"\"\"", "\n", "return", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.benchmark_interpolation": [[58, 180], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "numpy.tile", "numpy.concatenate", "utils.quat_fk", "trans_gt_global_poses.reshape().transpose.reshape().transpose", "utils.quat_fk", "trans_zerov_global_poses.reshape().transpose.reshape().transpose", "utils.interpolate_local", "numpy.tile", "numpy.concatenate", "utils.quat_fk", "trans_interp_global_poses.reshape().transpose.reshape().transpose", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "benchmarks.fast_npss", "benchmarks.fast_npss", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "numpy.zeros_like", "numpy.zeros_like", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "benchmarks.flatjoints", "benchmarks.flatjoints", "benchmarks.flatjoints", "benchmarks.flatjoints", "os.path.join", "trans_gt_global_poses.reshape().transpose.reshape", "trans_zerov_global_poses.reshape().transpose.reshape", "trans_interp_global_poses.reshape().transpose.reshape", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_fk", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_fk", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.interpolate_local", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.utils.quat_fk", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.utils.zfilter.RunningStat.mean", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.fast_npss", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.fast_npss", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.progress.helpers.WriteMixin.write", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.common.mujoco_env.MujocoEnv.close", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.flatjoints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.flatjoints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.flatjoints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.lafan1.benchmarks.flatjoints", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape", "home.repos.pwc.inspect_result.garfield-kh_posetriplet.foot_sliding.Quaternions.Quaternions.reshape"], ["", "def", "benchmark_interpolation", "(", "X", ",", "Q", ",", "x_mean", ",", "x_std", ",", "offsets", ",", "parents", ",", "out_path", "=", "None", ",", "n_past", "=", "10", ",", "n_future", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate naive baselines (zero-velocity and interpolation) for transition generation on given data.\n    :param X: Local positions array of shape (Batchsize, Timesteps, Joints, 3)\n    :param Q: Local quaternions array of shape (B, T, J, 4)\n    :param x_mean : Mean vector of local positions of shape (1, J*3, 1)\n    :param out_path: Standard deviation vector of local positions (1, J*3, 1)\n    :param offsets: Local bone offsets tensor of shape (1, 1, J, 3)\n    :param parents: List of bone parents indices defining the hierarchy\n    :param out_path: optional path for saving the results\n    :param n_past: Number of frames used as past context\n    :param n_future: Number of frames used as future context (only the first frame is used as the target)\n    :return: Results dictionary\n    \"\"\"", "\n", "\n", "trans_lengths", "=", "[", "5", ",", "15", ",", "30", ",", "45", "]", "\n", "n_joints", "=", "22", "\n", "res", "=", "{", "}", "\n", "\n", "for", "n_trans", "in", "trans_lengths", ":", "\n", "        ", "print", "(", "'Computing errors for transition length = {}...'", ".", "format", "(", "n_trans", ")", ")", "\n", "\n", "# Format the data for the current transition lengths. The number of samples and the offset stays unchanged.", "\n", "curr_window", "=", "n_trans", "+", "n_past", "+", "n_future", "\n", "curr_x", "=", "X", "[", ":", ",", ":", "curr_window", ",", "...", "]", "\n", "curr_q", "=", "Q", "[", ":", ",", ":", "curr_window", ",", "...", "]", "\n", "batchsize", "=", "curr_x", ".", "shape", "[", "0", "]", "\n", "\n", "# Ground-truth positions/quats/eulers", "\n", "gt_local_quats", "=", "curr_q", "\n", "gt_roots", "=", "curr_x", "[", ":", ",", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "gt_offsets", "=", "np", ".", "tile", "(", "offsets", ",", "[", "batchsize", ",", "curr_window", ",", "1", ",", "1", "]", ")", "\n", "gt_local_poses", "=", "np", ".", "concatenate", "(", "[", "gt_roots", ",", "gt_offsets", "]", ",", "axis", "=", "2", ")", "\n", "trans_gt_local_poses", "=", "gt_local_poses", "[", ":", ",", "n_past", ":", "-", "n_future", ",", "...", "]", "\n", "trans_gt_local_quats", "=", "gt_local_quats", "[", ":", ",", "n_past", ":", "-", "n_future", ",", "...", "]", "\n", "# Local to global with Forward Kinematics (FK)", "\n", "trans_gt_global_quats", ",", "trans_gt_global_poses", "=", "utils", ".", "quat_fk", "(", "trans_gt_local_quats", ",", "trans_gt_local_poses", ",", "parents", ")", "\n", "trans_gt_global_poses", "=", "trans_gt_global_poses", ".", "reshape", "(", "(", "trans_gt_global_poses", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "n_joints", "*", "3", ")", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "# Normalize", "\n", "trans_gt_global_poses", "=", "(", "trans_gt_global_poses", "-", "x_mean", ")", "/", "x_std", "\n", "\n", "# Zero-velocity pos/quats", "\n", "zerov_trans_local_quats", ",", "zerov_trans_local_poses", "=", "np", ".", "zeros_like", "(", "trans_gt_local_quats", ")", ",", "np", ".", "zeros_like", "(", "trans_gt_local_poses", ")", "\n", "zerov_trans_local_quats", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "gt_local_quats", "[", ":", ",", "n_past", "-", "1", ":", "n_past", ",", ":", ",", ":", "]", "\n", "zerov_trans_local_poses", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "gt_local_poses", "[", ":", ",", "n_past", "-", "1", ":", "n_past", ",", ":", ",", ":", "]", "\n", "# To global", "\n", "trans_zerov_global_quats", ",", "trans_zerov_global_poses", "=", "utils", ".", "quat_fk", "(", "zerov_trans_local_quats", ",", "zerov_trans_local_poses", ",", "parents", ")", "\n", "trans_zerov_global_poses", "=", "trans_zerov_global_poses", ".", "reshape", "(", "(", "trans_zerov_global_poses", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "n_joints", "*", "3", ")", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "# Normalize", "\n", "trans_zerov_global_poses", "=", "(", "trans_zerov_global_poses", "-", "x_mean", ")", "/", "x_std", "\n", "\n", "# Interpolation pos/quats", "\n", "r", ",", "q", "=", "curr_x", "[", ":", ",", ":", ",", "0", ":", "1", "]", ",", "curr_q", "\n", "inter_root", ",", "inter_local_quats", "=", "utils", ".", "interpolate_local", "(", "r", ",", "q", ",", "n_past", ",", "n_future", ")", "\n", "trans_inter_root", "=", "inter_root", "[", ":", ",", "1", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "trans_inter_offsets", "=", "np", ".", "tile", "(", "offsets", ",", "[", "batchsize", ",", "n_trans", ",", "1", ",", "1", "]", ")", "\n", "trans_inter_local_poses", "=", "np", ".", "concatenate", "(", "[", "trans_inter_root", ",", "trans_inter_offsets", "]", ",", "axis", "=", "2", ")", "\n", "inter_local_quats", "=", "inter_local_quats", "[", ":", ",", "1", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "# To global", "\n", "trans_interp_global_quats", ",", "trans_interp_global_poses", "=", "utils", ".", "quat_fk", "(", "inter_local_quats", ",", "trans_inter_local_poses", ",", "parents", ")", "\n", "trans_interp_global_poses", "=", "trans_interp_global_poses", ".", "reshape", "(", "(", "trans_interp_global_poses", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "n_joints", "*", "3", ")", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "# Normalize", "\n", "trans_interp_global_poses", "=", "(", "trans_interp_global_poses", "-", "x_mean", ")", "/", "x_std", "\n", "\n", "# Local quaternion loss", "\n", "res", "[", "(", "'zerov_quat_loss'", ",", "n_trans", ")", "]", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "trans_zerov_global_quats", "-", "trans_gt_global_quats", ")", "**", "2.0", ",", "axis", "=", "(", "2", ",", "3", ")", ")", ")", ")", "\n", "res", "[", "(", "'interp_quat_loss'", ",", "n_trans", ")", "]", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "trans_interp_global_quats", "-", "trans_gt_global_quats", ")", "**", "2.0", ",", "axis", "=", "(", "2", ",", "3", ")", ")", ")", ")", "\n", "\n", "# Global positions loss", "\n", "res", "[", "(", "'zerov_pos_loss'", ",", "n_trans", ")", "]", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "trans_zerov_global_poses", "-", "trans_gt_global_poses", ")", "**", "2.0", ",", "axis", "=", "1", ")", ")", ")", "\n", "res", "[", "(", "'interp_pos_loss'", ",", "n_trans", ")", "]", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "trans_interp_global_poses", "-", "trans_gt_global_poses", ")", "**", "2.0", ",", "axis", "=", "1", ")", ")", ")", "\n", "\n", "# NPSS loss on global quaternions", "\n", "res", "[", "(", "'zerov_npss_loss'", ",", "n_trans", ")", "]", "=", "fast_npss", "(", "flatjoints", "(", "trans_gt_global_quats", ")", ",", "flatjoints", "(", "trans_zerov_global_quats", ")", ")", "\n", "res", "[", "(", "'interp_npss_loss'", ",", "n_trans", ")", "]", "=", "fast_npss", "(", "flatjoints", "(", "trans_gt_global_quats", ")", ",", "flatjoints", "(", "trans_interp_global_quats", ")", ")", "\n", "\n", "", "print", "(", ")", "\n", "avg_zerov_quat_losses", "=", "[", "res", "[", "(", "'zerov_quat_loss'", ",", "n", ")", "]", "for", "n", "in", "trans_lengths", "]", "\n", "avg_interp_quat_losses", "=", "[", "res", "[", "(", "'interp_quat_loss'", ",", "n", ")", "]", "for", "n", "in", "trans_lengths", "]", "\n", "print", "(", "\"=== Global quat losses ===\"", ")", "\n", "print", "(", "\"{0: <16} | {1:6d} | {2:6d} | {3:6d} | {4:6d}\"", ".", "format", "(", "\"Lengths\"", ",", "5", ",", "15", ",", "30", ",", "45", ")", ")", "\n", "print", "(", "\"{0: <16} | {1:6.2f} | {2:6.2f} | {3:6.2f} | {4:6.2f}\"", ".", "format", "(", "\"Zero-V\"", ",", "*", "avg_zerov_quat_losses", ")", ")", "\n", "print", "(", "\"{0: <16} | {1:6.2f} | {2:6.2f} | {3:6.2f} | {4:6.2f}\"", ".", "format", "(", "\"Interp.\"", ",", "*", "avg_interp_quat_losses", ")", ")", "\n", "print", "(", ")", "\n", "\n", "avg_zerov_pos_losses", "=", "[", "res", "[", "(", "'zerov_pos_loss'", ",", "n", ")", "]", "for", "n", "in", "trans_lengths", "]", "\n", "avg_interp_pos_losses", "=", "[", "res", "[", "(", "'interp_pos_loss'", ",", "n", ")", "]", "for", "n", "in", "trans_lengths", "]", "\n", "print", "(", "\"=== Global pos losses ===\"", ")", "\n", "print", "(", "\"{0: <16} | {1:6d} | {2:6d} | {3:6d} | {4:6d}\"", ".", "format", "(", "\"Lengths\"", ",", "5", ",", "15", ",", "30", ",", "45", ")", ")", "\n", "print", "(", "\"{0: <16} | {1:6.3f} | {2:6.3f} | {3:6.3f} | {4:6.3f}\"", ".", "format", "(", "\"Zero-V\"", ",", "*", "avg_zerov_pos_losses", ")", ")", "\n", "print", "(", "\"{0: <16} | {1:6.3f} | {2:6.3f} | {3:6.3f} | {4:6.3f}\"", ".", "format", "(", "\"Interp.\"", ",", "*", "avg_interp_pos_losses", ")", ")", "\n", "print", "(", ")", "\n", "\n", "avg_zerov_npss_losses", "=", "[", "res", "[", "(", "'zerov_npss_loss'", ",", "n", ")", "]", "for", "n", "in", "trans_lengths", "]", "\n", "avg_interp_npss_losses", "=", "[", "res", "[", "(", "'interp_npss_loss'", ",", "n", ")", "]", "for", "n", "in", "trans_lengths", "]", "\n", "print", "(", "\"=== NPSS on global quats ===\"", ")", "\n", "print", "(", "\"{0: <16} | {1:5d}  | {2:5d}  | {3:5d}  | {4:5d}\"", ".", "format", "(", "\"Lengths\"", ",", "5", ",", "15", ",", "30", ",", "45", ")", ")", "\n", "print", "(", "\"{0: <16} | {1:5.4f} | {2:5.4f} | {3:5.4f} | {4:5.4f}\"", ".", "format", "(", "\"Zero-V\"", ",", "*", "avg_zerov_npss_losses", ")", ")", "\n", "print", "(", "\"{0: <16} | {1:5.4f} | {2:5.4f} | {3:5.4f} | {4:5.4f}\"", ".", "format", "(", "\"Interp.\"", ",", "*", "avg_interp_npss_losses", ")", ")", "\n", "print", "(", ")", "\n", "\n", "# Write to file is desired", "\n", "if", "out_path", "is", "not", "None", ":", "\n", "        ", "res_txt_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'h36m_transitions_benchmark.txt'", ")", ",", "\"a\"", ")", "\n", "res_txt_file", ".", "write", "(", "\"\\n=== Global quat losses ===\\n\"", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:6d} | {2:6d} | {3:6d} | {4:6d}\\n\"", ".", "format", "(", "\"Lengths\"", ",", "5", ",", "15", ",", "30", ",", "45", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:6.2f} | {2:6.2f} | {3:6.2f} | {4:6.2f}\\n\"", ".", "format", "(", "\"Zero-V\"", ",", "*", "avg_zerov_quat_losses", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:6.2f} | {2:6.2f} | {3:6.2f} | {4:6.2f}\\n\"", ".", "format", "(", "\"Interp.\"", ",", "*", "avg_interp_quat_losses", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "res_txt_file", ".", "write", "(", "\"=== Global pos losses ===\\n\"", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:5d}  | {2:5d}  | {3:5d}  | {4:5d}\\n\"", ".", "format", "(", "\"Lengths\"", ",", "5", ",", "15", ",", "30", ",", "45", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:5.4f} | {2:5.4f} | {3:5.4f} | {4:5.4f}\\n\"", ".", "format", "(", "\"Zero-V\"", ",", "*", "avg_zerov_pos_losses", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:5.4f} | {2:5.4f} | {3:5.4f} | {4:5.4f}\\n\"", ".", "format", "(", "\"Interp.\"", ",", "*", "avg_interp_pos_losses", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "res_txt_file", ".", "write", "(", "\"=== NPSS on global quats ===\\n\"", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:5d}  | {2:5d}  | {3:5d}  | {4:5d}\\n\"", ".", "format", "(", "\"Lengths\"", ",", "5", ",", "15", ",", "30", ",", "45", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:5.4f} | {2:5.4f} | {3:5.4f} | {4:5.4f}\\n\"", ".", "format", "(", "\"Zero-V\"", ",", "*", "avg_zerov_npss_losses", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"{0: <16} | {1:5.4f} | {2:5.4f} | {3:5.4f} | {4:5.4f}\\n\"", ".", "format", "(", "\"Interp.\"", ",", "*", "avg_interp_npss_losses", ")", ")", "\n", "res_txt_file", ".", "write", "(", "\"\\n\\n\\n\\n\"", ")", "\n", "res_txt_file", ".", "close", "(", ")", "\n", "\n", "", "return", "res", "\n", "\n"]]}