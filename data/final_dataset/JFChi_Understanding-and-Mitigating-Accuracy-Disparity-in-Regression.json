{"home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.GradReverse.forward": [[19, 22], ["x.view_as"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.GradReverse.backward": [[23, 26], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ".", "neg", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.MLPNet.__init__": [[34, 48], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.MMDBiasedStatistic.__init__"], ["def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "MLPNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "configs", "[", "\"input_dim\"", "]", "\n", "self", ".", "num_hidden_layers", "=", "len", "(", "configs", "[", "\"hidden_layers\"", "]", ")", "\n", "self", ".", "num_neurons", "=", "[", "self", ".", "input_dim", "]", "+", "configs", "[", "\"hidden_layers\"", "]", "\n", "# Parameters of hidden, fully-connected layers.", "\n", "self", ".", "hiddens", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "num_neurons", "[", "i", "]", ",", "self", ".", "num_neurons", "[", "i", "+", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hidden_layers", ")", "]", ")", "\n", "# Parameter of the final regression layer.", "\n", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "num_neurons", "[", "-", "1", "]", ",", "1", ")", "\n", "# whether use sigmoid in the last layer", "\n", "self", ".", "use_sigmoid", "=", "configs", "[", "\"use_sigmoid\"", "]", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "sigmoid_layer", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.MLPNet.forward": [[49, 57], ["models.MLPNet.output_layer", "torch.relu", "torch.relu", "torch.relu", "models.MLPNet.sigmoid_layer", "hidden"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "h_relu", "=", "inputs", "\n", "for", "hidden", "in", "self", ".", "hiddens", ":", "\n", "            ", "h_relu", "=", "F", ".", "relu", "(", "hidden", "(", "h_relu", ")", ")", "\n", "", "out", "=", "self", ".", "output_layer", "(", "h_relu", ")", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "out", "=", "self", ".", "sigmoid_layer", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.WassersteinNet.__init__": [[62, 82], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range"], "methods", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.MMDBiasedStatistic.__init__"], ["def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "WassersteinNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "configs", "[", "\"input_dim\"", "]", "\n", "self", ".", "num_hidden_layers", "=", "len", "(", "configs", "[", "\"hidden_layers\"", "]", ")", "\n", "self", ".", "num_neurons", "=", "[", "self", ".", "input_dim", "]", "+", "configs", "[", "\"hidden_layers\"", "]", "\n", "# Parameters of hidden, fully-connected layers, feature learning component.", "\n", "self", ".", "hiddens", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "num_neurons", "[", "i", "]", ",", "self", ".", "num_neurons", "[", "i", "+", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hidden_layers", ")", "]", ")", "\n", "# Parameter of the final regression layer.", "\n", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "num_neurons", "[", "-", "1", "]", ",", "1", ")", "\n", "# Parameter of the adversary regression layer.", "\n", "self", ".", "num_adversaries", "=", "[", "self", ".", "num_neurons", "[", "-", "1", "]", "+", "1", "]", "+", "configs", "[", "\"adversary_layers\"", "]", "# adv input dimension = hidden + ydim", "\n", "self", ".", "num_adversaries_layers", "=", "len", "(", "configs", "[", "\"adversary_layers\"", "]", ")", "\n", "self", ".", "adversaries", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "num_adversaries", "[", "i", "]", ",", "self", ".", "num_adversaries", "[", "i", "+", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_adversaries_layers", ")", "]", ")", "\n", "self", ".", "sensitive_output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "num_adversaries", "[", "-", "1", "]", ",", "1", ")", "\n", "# whether use sigmoid in the last layer", "\n", "self", ".", "use_sigmoid", "=", "configs", "[", "\"use_sigmoid\"", "]", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "sigmoid_layer", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.WassersteinNet.forward": [[83, 99], ["models.WassersteinNet.output_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.grad_reverse", "models.WassersteinNet.sensitive_output_layer", "torch.relu", "torch.relu", "torch.relu", "models.WassersteinNet.sigmoid_layer", "torch.relu", "torch.relu", "torch.relu", "hidden", "adversary"], "methods", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.grad_reverse"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "h_relu", "=", "inputs", "\n", "for", "hidden", "in", "self", ".", "hiddens", ":", "\n", "            ", "h_relu", "=", "F", ".", "relu", "(", "hidden", "(", "h_relu", ")", ")", "\n", "# regression", "\n", "", "out", "=", "self", ".", "output_layer", "(", "h_relu", ")", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "out", "=", "self", ".", "sigmoid_layer", "(", "out", ")", "\n", "# Adversary component.", "\n", "# include targets in the component", "\n", "", "h_relu", "=", "torch", ".", "cat", "(", "(", "h_relu", ",", "targets", ")", ",", "dim", "=", "-", "1", ")", "\n", "h_relu", "=", "grad_reverse", "(", "h_relu", ")", "\n", "for", "adversary", "in", "self", ".", "adversaries", ":", "\n", "            ", "h_relu", "=", "F", ".", "relu", "(", "adversary", "(", "h_relu", ")", ")", "\n", "", "adversary_out", "=", "self", ".", "sensitive_output_layer", "(", "h_relu", ")", "\n", "return", "out", ",", "adversary_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.WassersteinNet.inference": [[100, 108], ["models.WassersteinNet.output_layer", "torch.relu", "torch.relu", "torch.relu", "models.WassersteinNet.sigmoid_layer", "hidden"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "h_relu", "=", "inputs", "\n", "for", "hidden", "in", "self", ".", "hiddens", ":", "\n", "            ", "h_relu", "=", "F", ".", "relu", "(", "hidden", "(", "h_relu", ")", ")", "\n", "", "out", "=", "self", ".", "output_layer", "(", "h_relu", ")", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "out", "=", "self", ".", "sigmoid_layer", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.CENet.__init__": [[113, 133], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range"], "methods", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.MMDBiasedStatistic.__init__"], ["def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "configs", "[", "\"input_dim\"", "]", "\n", "self", ".", "num_hidden_layers", "=", "len", "(", "configs", "[", "\"hidden_layers\"", "]", ")", "\n", "self", ".", "num_neurons", "=", "[", "self", ".", "input_dim", "]", "+", "configs", "[", "\"hidden_layers\"", "]", "\n", "# Parameters of hidden, fully-connected layers, feature learning component.", "\n", "self", ".", "hiddens", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "num_neurons", "[", "i", "]", ",", "self", ".", "num_neurons", "[", "i", "+", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hidden_layers", ")", "]", ")", "\n", "# Parameter of the final regression layer.", "\n", "self", ".", "output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "num_neurons", "[", "-", "1", "]", ",", "1", ")", "\n", "# Parameter of the adversary regression layer.", "\n", "self", ".", "num_adversaries", "=", "[", "self", ".", "num_neurons", "[", "-", "1", "]", "+", "1", "]", "+", "configs", "[", "\"adversary_layers\"", "]", "# adv input dimension = hidden + ydim", "\n", "self", ".", "num_adversaries_layers", "=", "len", "(", "configs", "[", "\"adversary_layers\"", "]", ")", "\n", "self", ".", "adversaries", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "num_adversaries", "[", "i", "]", ",", "self", ".", "num_adversaries", "[", "i", "+", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_adversaries_layers", ")", "]", ")", "\n", "self", ".", "sensitive_output_layer", "=", "nn", ".", "Linear", "(", "self", ".", "num_adversaries", "[", "-", "1", "]", ",", "2", ")", "\n", "# whether use sigmoid in the last layer", "\n", "self", ".", "use_sigmoid", "=", "configs", "[", "\"use_sigmoid\"", "]", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "sigmoid_layer", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.CENet.forward": [[134, 150], ["models.CENet.output_layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.grad_reverse", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.relu", "torch.relu", "torch.relu", "models.CENet.sigmoid_layer", "torch.relu", "torch.relu", "torch.relu", "models.CENet.sensitive_output_layer", "hidden", "adversary"], "methods", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.grad_reverse"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "h_relu", "=", "inputs", "\n", "for", "hidden", "in", "self", ".", "hiddens", ":", "\n", "            ", "h_relu", "=", "F", ".", "relu", "(", "hidden", "(", "h_relu", ")", ")", "\n", "# regression", "\n", "", "out", "=", "self", ".", "output_layer", "(", "h_relu", ")", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "out", "=", "self", ".", "sigmoid_layer", "(", "out", ")", "\n", "# Adversary classification component.", "\n", "# include targets in the component", "\n", "", "h_relu", "=", "torch", ".", "cat", "(", "(", "h_relu", ",", "targets", ")", ",", "dim", "=", "-", "1", ")", "\n", "h_relu", "=", "grad_reverse", "(", "h_relu", ")", "\n", "for", "adversary", "in", "self", ".", "adversaries", ":", "\n", "            ", "h_relu", "=", "F", ".", "relu", "(", "adversary", "(", "h_relu", ")", ")", "\n", "", "adversary_out", "=", "F", ".", "log_softmax", "(", "self", ".", "sensitive_output_layer", "(", "h_relu", ")", ",", "dim", "=", "1", ")", "\n", "return", "out", ",", "adversary_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.CENet.inference": [[151, 159], ["models.CENet.output_layer", "torch.relu", "torch.relu", "torch.relu", "models.CENet.sigmoid_layer", "hidden"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "h_relu", "=", "inputs", "\n", "for", "hidden", "in", "self", ".", "hiddens", ":", "\n", "            ", "h_relu", "=", "F", ".", "relu", "(", "hidden", "(", "h_relu", ")", ")", "\n", "", "out", "=", "self", ".", "output_layer", "(", "h_relu", ")", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "out", "=", "self", ".", "sigmoid_layer", "(", "out", ")", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.models.grad_reverse": [[27, 29], ["GradReverse.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ")", ":", "\n", "    ", "return", "GradReverse", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_law.clean_dataset": [[16, 50], ["pandas.read_csv", "pandas.read_csv", "print", "print", "prep_law.one_hot_code", "print", "str", "len", "ValueError", "len", "ValueError", "str", "prep_law.center", "sens_dict.keys", "len", "numpy.min", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_law.one_hot_code", "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_law.center"], ["def", "clean_dataset", "(", "dataset", ",", "attributes", ",", "centered", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "dataset", ")", "\n", "sens_df", "=", "pd", ".", "read_csv", "(", "attributes", ")", "\n", "\n", "## Get and remove label Y", "\n", "y_col", "=", "[", "str", "(", "c", ")", "for", "c", "in", "sens_df", ".", "columns", "if", "sens_df", "[", "c", "]", "[", "0", "]", "==", "2", "]", "\n", "print", "(", "'label feature: {}'", ".", "format", "(", "y_col", ")", ")", "\n", "if", "(", "len", "(", "y_col", ")", ">", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'More than 1 label column used'", ")", "\n", "", "if", "(", "len", "(", "y_col", ")", "<", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'No label column used'", ")", "\n", "\n", "", "y", "=", "df", "[", "y_col", "[", "0", "]", "]", "\n", "\n", "## Do not use labels in rest of data", "\n", "X", "=", "df", ".", "loc", "[", ":", ",", "df", ".", "columns", "!=", "y_col", "[", "0", "]", "]", "\n", "X", "=", "X", ".", "loc", "[", ":", ",", "X", ".", "columns", "!=", "'Unnamed: 0'", "]", "\n", "## Create X_prime, by getting protected attributes", "\n", "sens_cols", "=", "[", "str", "(", "c", ")", "for", "c", "in", "sens_df", ".", "columns", "if", "sens_df", "[", "c", "]", "[", "0", "]", "==", "1", "]", "\n", "print", "(", "'sensitive features: {}'", ".", "format", "(", "sens_cols", ")", ")", "\n", "sens_dict", "=", "{", "c", ":", "1", "if", "c", "in", "sens_cols", "else", "0", "for", "c", "in", "df", ".", "columns", "}", "\n", "X", ",", "sens_dict", "=", "one_hot_code", "(", "X", ",", "sens_dict", ")", "\n", "sens_names", "=", "[", "key", "for", "key", "in", "sens_dict", ".", "keys", "(", ")", "if", "sens_dict", "[", "key", "]", "==", "1", "]", "\n", "print", "(", "'there are {} sensitive features including derivative features'", ".", "format", "(", "len", "(", "sens_names", ")", ")", ")", "\n", "\n", "X_prime", "=", "X", "[", "sens_names", "]", "\n", "\n", "if", "(", "centered", ")", ":", "\n", "        ", "X", "=", "center", "(", "X", ")", "\n", "\n", "# normalize y to [0, 1]", "\n", "", "y", "=", "(", "y", "-", "np", ".", "min", "(", "y", ")", ")", "/", "(", "np", ".", "max", "(", "y", ")", "-", "np", ".", "min", "(", "y", ")", ")", "\n", "\n", "return", "X", ",", "X_prime", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_law.center": [[51, 56], ["numpy.std", "numpy.mean"], "function", ["None"], ["", "def", "center", "(", "X", ")", ":", "\n", "    ", "for", "col", "in", "X", ".", "columns", ":", "\n", "        ", "X", ".", "loc", "[", ":", ",", "col", "]", "=", "(", "X", ".", "loc", "[", ":", ",", "col", "]", "-", "np", ".", "mean", "(", "X", ".", "loc", "[", ":", ",", "col", "]", ")", ")", "/", "np", ".", "std", "(", "X", ".", "loc", "[", ":", ",", "col", "]", ")", "\n", "# X.loc[:, col] =  X.loc[:, col]-np.mean(X.loc[:, col])", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_law.one_hot_code": [[57, 77], ["isinstance", "df1.drop.drop", "list", "len", "set", "range"], "function", ["None"], ["", "def", "one_hot_code", "(", "df1", ",", "sens_dict", ")", ":", "\n", "    ", "cols", "=", "df1", ".", "columns", "\n", "for", "c", "in", "cols", ":", "\n", "        ", "if", "isinstance", "(", "df1", "[", "c", "]", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "column", "=", "df1", "[", "c", "]", "\n", "df1", "=", "df1", ".", "drop", "(", "c", ",", "1", ")", "\n", "unique_values", "=", "list", "(", "set", "(", "column", ")", ")", "\n", "n", "=", "len", "(", "unique_values", ")", "\n", "if", "n", ">", "2", ":", "\n", "                ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "col_name", "=", "'{}.{}'", ".", "format", "(", "c", ",", "i", ")", "\n", "col_i", "=", "[", "1", "if", "el", "==", "unique_values", "[", "i", "]", "else", "0", "for", "el", "in", "column", "]", "\n", "df1", "[", "col_name", "]", "=", "col_i", "\n", "sens_dict", "[", "col_name", "]", "=", "sens_dict", "[", "c", "]", "\n", "", "del", "sens_dict", "[", "c", "]", "\n", "", "else", ":", "\n", "                ", "col_name", "=", "c", "\n", "col", "=", "[", "1", "if", "el", "==", "unique_values", "[", "0", "]", "else", "0", "for", "el", "in", "column", "]", "\n", "df1", "[", "col_name", "]", "=", "col", "\n", "", "", "", "return", "df1", ",", "sens_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.AdultDataset.__init__": [[16, 43], ["os.path.join", "numpy.load", "numpy.argmax", "numpy.expand_dims", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "phase", ",", "tar_attr", ",", "priv_attr", ")", ":", "\n", "        ", "self", ".", "tar_attr", "=", "tar_attr", "\n", "self", ".", "priv_attr", "=", "priv_attr", "\n", "self", ".", "npz_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'adult_%s_%s.npz'", "%", "(", "tar_attr", ",", "priv_attr", ")", ")", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "npz_file", ")", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "data", "[", "\"x_train\"", "]", "\n", "self", ".", "Y", "=", "self", ".", "data", "[", "\"y_train\"", "]", "\n", "self", ".", "A", "=", "self", ".", "data", "[", "\"attr_train\"", "]", "\n", "", "elif", "phase", "==", "\"test\"", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "data", "[", "\"x_test\"", "]", "\n", "self", ".", "Y", "=", "self", ".", "data", "[", "\"y_test\"", "]", "\n", "self", ".", "A", "=", "self", ".", "data", "[", "\"attr_test\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "xdim", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "ydim", "=", "self", ".", "Y", ".", "shape", "[", "1", "]", "\n", "self", ".", "adim", "=", "self", ".", "A", ".", "shape", "[", "1", "]", "\n", "\n", "if", "self", ".", "ydim", "!=", "1", ":", "\n", "# one-hot encoding", "\n", "# change it to regression problem", "\n", "            ", "self", ".", "Y", "=", "np", ".", "argmax", "(", "self", ".", "Y", ",", "axis", "=", "1", ")", "\n", "self", ".", "Y", "=", "np", ".", "expand_dims", "(", "self", ".", "Y", ",", "-", "1", ")", "\n", "assert", "self", ".", "Y", ".", "shape", "[", "1", "]", "==", "1", "and", "len", "(", "self", ".", "Y", ".", "shape", ")", "==", "2", "\n", "self", ".", "ydim", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.AdultDataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.AdultDataset.__getitem__": [[48, 52], ["torch.from_numpy().float", "torch.from_numpy().float", "dataset.AdultDataset.onehot_2_int", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.AdultDataset.onehot_2_int"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "X", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "self", ".", "Y", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "self", ".", "onehot_2_int", "(", "torch", ".", "from_numpy", "(", "self", ".", "A", "[", "idx", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.AdultDataset.onehot_2_int": [[53, 59], ["len", "torch.argmax", "len", "torch.argmax"], "methods", ["None"], ["", "def", "onehot_2_int", "(", "self", ",", "ts", ")", ":", "\n", "        ", "if", "len", "(", "ts", ".", "shape", ")", "==", "2", ":", "# batch", "\n", "            ", "return", "torch", ".", "argmax", "(", "ts", ",", "dim", "=", "1", ")", "\n", "", "if", "len", "(", "ts", ".", "shape", ")", "==", "1", ":", "# one instance", "\n", "            ", "return", "torch", ".", "argmax", "(", "ts", ",", "dim", "=", "0", ")", "\n", "", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.AdultDataset.get_YA_distribution": [[60, 69], ["numpy.argmax", "numpy.mean", "numpy.mean", "numpy.argwhere().squeeze", "numpy.argwhere().squeeze", "numpy.argwhere", "numpy.argwhere"], "methods", ["None"], ["", "def", "get_YA_distribution", "(", "self", ")", ":", "\n", "        ", "'''get the the mean Y when in different sensitive groups\n        '''", "\n", "A_num_class", "=", "self", ".", "A", ".", "shape", "[", "1", "]", "\n", "assert", "A_num_class", "==", "2", "\n", "A_label", "=", "np", ".", "argmax", "(", "self", ".", "A", ",", "axis", "=", "1", ")", "\n", "A_0_mean_y", "=", "np", ".", "mean", "(", "self", ".", "Y", "[", "np", ".", "argwhere", "(", "A_label", "==", "0", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "A_1_mean_y", "=", "np", ".", "mean", "(", "self", ".", "Y", "[", "np", ".", "argwhere", "(", "A_label", "==", "1", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "return", "A_0_mean_y", ",", "A_1_mean_y", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.CrimeDataset.__init__": [[75, 94], ["os.path.join", "numpy.load", "numpy.expand_dims"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "phase", ")", ":", "\n", "        ", "self", ".", "npz_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'communities_crime.npz'", ")", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "npz_file", ")", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "data", "[", "\"x_train\"", "]", "\n", "self", ".", "Y", "=", "self", ".", "data", "[", "\"y_train\"", "]", "\n", "self", ".", "A", "=", "self", ".", "data", "[", "\"attr_train\"", "]", "\n", "", "elif", "phase", "==", "\"test\"", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "data", "[", "\"x_test\"", "]", "\n", "self", ".", "Y", "=", "self", ".", "data", "[", "\"y_test\"", "]", "\n", "self", ".", "A", "=", "self", ".", "data", "[", "\"attr_test\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "Y", "=", "np", ".", "expand_dims", "(", "self", ".", "Y", ",", "axis", "=", "-", "1", ")", "\n", "\n", "self", ".", "xdim", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "ydim", "=", "self", ".", "Y", ".", "shape", "[", "1", "]", "\n", "self", ".", "adim", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.CrimeDataset.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.CrimeDataset.__getitem__": [[99, 103], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "X", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "self", ".", "Y", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "self", ".", "A", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.CrimeDataset.get_YA_distribution": [[104, 113], ["numpy.mean", "numpy.mean", "numpy.argwhere().squeeze", "numpy.argwhere().squeeze", "numpy.argwhere", "numpy.argwhere"], "methods", ["None"], ["", "def", "get_YA_distribution", "(", "self", ")", ":", "\n", "        ", "'''get the the mean Y when in different sensitive groups\n        '''", "\n", "A_num_class", "=", "self", ".", "adim", "\n", "assert", "A_num_class", "==", "2", "\n", "A_label", "=", "self", ".", "A", "\n", "A_0_mean_y", "=", "np", ".", "mean", "(", "self", ".", "Y", "[", "np", ".", "argwhere", "(", "A_label", "==", "0", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "A_1_mean_y", "=", "np", ".", "mean", "(", "self", ".", "Y", "[", "np", ".", "argwhere", "(", "A_label", "==", "1", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "return", "A_0_mean_y", ",", "A_1_mean_y", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.COMPAS.__init__": [[118, 129], ["data[].astype", "data[].astype", "data[].astype", "numpy.expand_dims"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        :param data:    Numpy array that contains all the data.\n        \"\"\"", "\n", "# Data, label and sensitive attribute partition.", "\n", "self", ".", "insts", "=", "data", "[", ":", ",", "1", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "labels", "=", "data", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "attrs", "=", "data", "[", ":", ",", "5", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "xdim", "=", "self", ".", "insts", ".", "shape", "[", "1", "]", "\n", "\n", "self", ".", "labels", "=", "np", ".", "expand_dims", "(", "self", ".", "labels", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.COMPAS.__len__": [[130, 132], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "insts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.COMPAS.__getitem__": [[133, 137], ["torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "self", ".", "insts", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "self", ".", "labels", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "self", ".", "attrs", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.LawSchoolDataset.__init__": [[143, 162], ["os.path.join", "numpy.load", "numpy.expand_dims"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "phase", ")", ":", "\n", "        ", "self", ".", "npz_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'law_school.npz'", ")", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "npz_file", ")", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "data", "[", "\"x_train\"", "]", "\n", "self", ".", "Y", "=", "self", ".", "data", "[", "\"y_train\"", "]", "\n", "self", ".", "A", "=", "self", ".", "data", "[", "\"attr_train\"", "]", "\n", "", "elif", "phase", "==", "\"test\"", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "data", "[", "\"x_test\"", "]", "\n", "self", ".", "Y", "=", "self", ".", "data", "[", "\"y_test\"", "]", "\n", "self", ".", "A", "=", "self", ".", "data", "[", "\"attr_test\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "Y", "=", "np", ".", "expand_dims", "(", "self", ".", "Y", ",", "axis", "=", "-", "1", ")", "\n", "\n", "self", ".", "xdim", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "ydim", "=", "self", ".", "Y", ".", "shape", "[", "1", "]", "\n", "self", ".", "adim", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.LawSchoolDataset.__len__": [[164, 166], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.LawSchoolDataset.__getitem__": [[167, 171], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "X", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "self", ".", "Y", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "self", ".", "A", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.LawSchoolDataset.get_YA_distribution": [[172, 181], ["numpy.mean", "numpy.mean", "numpy.argwhere().squeeze", "numpy.argwhere().squeeze", "numpy.argwhere", "numpy.argwhere"], "methods", ["None"], ["", "def", "get_YA_distribution", "(", "self", ")", ":", "\n", "        ", "'''get the the mean Y when in different sensitive groups\n        '''", "\n", "A_num_class", "=", "self", ".", "adim", "\n", "assert", "A_num_class", "==", "2", "\n", "A_label", "=", "self", ".", "A", "\n", "A_0_mean_y", "=", "np", ".", "mean", "(", "self", ".", "Y", "[", "np", ".", "argwhere", "(", "A_label", "==", "0", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "A_1_mean_y", "=", "np", ".", "mean", "(", "self", ".", "Y", "[", "np", ".", "argwhere", "(", "A_label", "==", "1", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "return", "A_0_mean_y", ",", "A_1_mean_y", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.InsuranceDataset.__init__": [[187, 206], ["os.path.join", "numpy.load", "numpy.expand_dims"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "phase", ")", ":", "\n", "        ", "self", ".", "npz_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'insurance.npz'", ")", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "self", ".", "npz_file", ")", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "data", "[", "\"x_train\"", "]", "\n", "self", ".", "Y", "=", "self", ".", "data", "[", "\"y_train\"", "]", "\n", "self", ".", "A", "=", "self", ".", "data", "[", "\"attr_train\"", "]", "\n", "", "elif", "phase", "==", "\"test\"", ":", "\n", "            ", "self", ".", "X", "=", "self", ".", "data", "[", "\"x_test\"", "]", "\n", "self", ".", "Y", "=", "self", ".", "data", "[", "\"y_test\"", "]", "\n", "self", ".", "A", "=", "self", ".", "data", "[", "\"attr_test\"", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "Y", "=", "np", ".", "expand_dims", "(", "self", ".", "Y", ",", "axis", "=", "-", "1", ")", "\n", "\n", "self", ".", "xdim", "=", "self", ".", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "ydim", "=", "self", ".", "Y", ".", "shape", "[", "1", "]", "\n", "self", ".", "adim", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.InsuranceDataset.__len__": [[208, 210], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.InsuranceDataset.__getitem__": [[211, 215], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "X", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "self", ".", "Y", "[", "idx", "]", ")", ".", "float", "(", ")", ",", "self", ".", "A", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.dataset.InsuranceDataset.get_YA_distribution": [[216, 225], ["numpy.mean", "numpy.mean", "numpy.argwhere().squeeze", "numpy.argwhere().squeeze", "numpy.argwhere", "numpy.argwhere"], "methods", ["None"], ["", "def", "get_YA_distribution", "(", "self", ")", ":", "\n", "        ", "'''get the the mean Y when in different sensitive groups\n        '''", "\n", "A_num_class", "=", "self", ".", "adim", "\n", "assert", "A_num_class", "==", "2", "\n", "A_label", "=", "self", ".", "A", "\n", "A_0_mean_y", "=", "np", ".", "mean", "(", "self", ".", "Y", "[", "np", ".", "argwhere", "(", "A_label", "==", "0", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "A_1_mean_y", "=", "np", ".", "mean", "(", "self", ".", "Y", "[", "np", ".", "argwhere", "(", "A_label", "==", "1", ")", ".", "squeeze", "(", ")", "]", ")", "\n", "return", "A_0_mean_y", ",", "A_1_mean_y", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_adult.bucket": [[10, 21], ["float", "len", "range", "len", "range"], "function", ["None"], ["def", "bucket", "(", "x", ",", "buckets", ")", ":", "\n", "    ", "x", "=", "float", "(", "x", ")", "\n", "n", "=", "len", "(", "buckets", ")", "\n", "label", "=", "n", "\n", "for", "i", "in", "range", "(", "len", "(", "buckets", ")", ")", ":", "\n", "        ", "if", "x", "<=", "buckets", "[", "i", "]", ":", "\n", "            ", "label", "=", "i", "\n", "break", "\n", "", "", "template", "=", "[", "0.", "for", "j", "in", "range", "(", "n", "+", "1", ")", "]", "\n", "template", "[", "label", "]", "=", "1.", "\n", "return", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_adult.onehot": [[22, 31], ["choices.index", "print", "print", "Exception", "range", "len"], "function", ["None"], ["", "def", "onehot", "(", "x", ",", "choices", ")", ":", "\n", "    ", "if", "not", "x", "in", "choices", ":", "\n", "        ", "print", "(", "'could not find \"{}\" in choices'", ".", "format", "(", "x", ")", ")", "\n", "print", "(", "choices", ")", "\n", "raise", "Exception", "(", ")", "\n", "", "label", "=", "choices", ".", "index", "(", "x", ")", "\n", "template", "=", "[", "0.", "for", "j", "in", "range", "(", "len", "(", "choices", ")", ")", "]", "\n", "template", "[", "label", "]", "=", "1.", "\n", "return", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_adult.continuous": [[32, 34], ["float"], "function", ["None"], ["", "def", "continuous", "(", "x", ")", ":", "\n", "    ", "return", "[", "float", "(", "x", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_adult.toBinaryAttr": [[35, 78], ["len", "len", "ValueError", "numpy.argmax", "print", "ValueError", "numpy.argmax", "print", "ValueError", "numpy.argmax", "print", "ValueError"], "function", ["None"], ["", "def", "toBinaryAttr", "(", "sent_attr", ",", "val", ")", ":", "\n", "# convert sensitive attribute to binary", "\n", "    ", "if", "len", "(", "val", ")", "==", "2", ":", "\n", "# print('sensitive variable is already binary')", "\n", "        ", "return", "val", "\n", "\n", "", "if", "len", "(", "val", ")", "==", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"No implmentation for converting continuous variable to binary variable\"", ")", "\n", "\n", "# convert sensitive attribute to binary", "\n", "", "if", "sensitive", "==", "'race'", ":", "\n", "        ", "label", "=", "np", ".", "argmax", "(", "val", ")", "\n", "cat2bin", "=", "{", "4", ":", "0", ",", "0", ":", "1", ",", "1", ":", "1", ",", "2", ":", "1", ",", "3", ":", "1", "}", "# white, Nonwhite", "\n", "if", "label", "not", "in", "cat2bin", ":", "\n", "            ", "print", "(", "label", ")", "\n", "raise", "ValueError", "(", "'fail to convert sent variable to binary'", ")", "\n", "", "label", "=", "cat2bin", "[", "label", "]", "\n", "template", "=", "[", "0.", ",", "0.", "]", "\n", "template", "[", "label", "]", "=", "1.", "\n", "return", "template", "\n", "", "elif", "sensitive", "==", "'age'", ":", "\n", "        ", "label", "=", "np", ".", "argmax", "(", "val", ")", "\n", "cat2bin", "=", "{", "0", ":", "0", ",", "1", ":", "0", ",", "2", ":", "0", ",", "3", ":", "0", ",", "4", ":", "1", ",", "5", ":", "1", ",", "6", ":", "1", ",", "7", ":", "1", ",", "8", ":", "1", ",", "9", ":", "1", ",", "10", ":", "1", "}", "# <= 35,  > 35", "\n", "if", "label", "not", "in", "cat2bin", ":", "\n", "            ", "print", "(", "label", ")", "\n", "raise", "ValueError", "(", "'fail to convert sent variable to binary'", ")", "\n", "", "label", "=", "cat2bin", "[", "label", "]", "\n", "template", "=", "[", "0.", ",", "0.", "]", "\n", "template", "[", "label", "]", "=", "1.", "\n", "return", "template", "\n", "", "elif", "sensitive", "==", "'education'", ":", "\n", "        ", "label", "=", "np", ".", "argmax", "(", "val", ")", "\n", "# low education: 0 all other ; high education: 1 (Some-college, Bachelors, Masters, Doctorate)", "\n", "cat2bin", "=", "{", "0", ":", "0", ",", "1", ":", "0", ",", "2", ":", "0", ",", "3", ":", "0", ",", "4", ":", "0", ",", "5", ":", "0", ",", "6", ":", "0", ",", "7", ":", "0", ",", "8", ":", "0", ",", "9", ":", "1", ",", "10", ":", "0", ",", "11", ":", "1", ",", "12", ":", "0", ",", "13", ":", "0", ",", "14", ":", "1", ",", "15", ":", "1", "}", "\n", "if", "label", "not", "in", "cat2bin", ":", "\n", "            ", "print", "(", "label", ")", "\n", "raise", "ValueError", "(", "'fail to convert sent variable to binary'", ")", "\n", "", "label", "=", "cat2bin", "[", "label", "]", "\n", "template", "=", "[", "0.", ",", "0.", "]", "\n", "template", "[", "label", "]", "=", "1.", "\n", "return", "template", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_adult.parse_row": [[79, 91], ["range", "len"], "function", ["None"], ["", "", "def", "parse_row", "(", "row", ",", "headers", ",", "headers_use", ")", ":", "\n", "    ", "new_row_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "row", ")", ")", ":", "\n", "        ", "x", "=", "row", "[", "i", "]", "\n", "hdr", "=", "headers", "[", "i", "]", "\n", "new_row_dict", "[", "hdr", "]", "=", "fns", "[", "hdr", "]", "(", "x", ")", "\n", "", "sens_att", "=", "new_row_dict", "[", "sensitive", "]", "# sens_att = toBinaryAttr(sensitive, new_row_dict[sensitive])", "\n", "label", "=", "new_row_dict", "[", "target", "]", "\n", "new_row", "=", "[", "]", "\n", "for", "h", "in", "headers_use", ":", "\n", "        ", "new_row", "=", "new_row", "+", "new_row_dict", "[", "h", "]", "\n", "", "return", "new_row", ",", "label", ",", "sens_att", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.prep_adult.whiten": [[92, 98], ["numpy.tile", "numpy.maximum", "numpy.divide", "numpy.tile"], "function", ["None"], ["", "def", "whiten", "(", "X", ",", "mn", ",", "std", ")", ":", "\n", "    ", "mntile", "=", "np", ".", "tile", "(", "mn", ",", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "stdtile", "=", "np", ".", "maximum", "(", "np", ".", "tile", "(", "std", ",", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "EPS", ")", "\n", "X", "=", "X", "-", "mntile", "\n", "X", "=", "np", ".", "divide", "(", "X", ",", "stdtile", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.MMDStatistic.__init__": [[69, 73], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphas", ",", "kernel_name", "=", "\"gaussian\"", ")", ":", "\n", "\t\t", "self", ".", "alphas", "=", "alphas", "\n", "self", ".", "kernel_name", "=", "kernel_name", "\n", "assert", "kernel_name", "in", "[", "\"gaussian\"", ",", "\"laplacian\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.MMDStatistic.__call__": [[74, 140], ["torch.cat", "utils.pdist", "utils.pdist", "torch.exp", "torch.exp", "k_12.sum", "k_2.sum", "torch.trace", "k_1.sum", "torch.trace"], "methods", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.pdist", "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.pdist"], ["", "def", "__call__", "(", "self", ",", "sample_1", ",", "sample_2", ",", "ret_matrix", "=", "False", ")", ":", "\n", "\t\t", "r\"\"\"\n\t\tArguments\n\t\t---------\n\t\tsample_1: :class:`torch:torch.autograd.Variable`\n\t\t\tThe first sample, of size ``(n_1, d)``.\n\t\tsample_2: variable of shape (n_2, d)\n\t\t\tThe second sample, of size ``(n_2, d)``.\n\t\talphas : list of :class:`float`\n\t\t\tThe kernel parameters.\n\t\tret_matrix: bool\n\t\t\tIf set, the call with also return a second variable.\n\n\t\t\tThis variable can be then used to compute a p-value using\n\t\t\t:py:meth:`~.MMDStatistic.pval`.\n\n\t\tReturns\n\t\t-------\n\t\t:class:`float`\n\t\t\tThe test statistic.\n\t\t:class:`torch:torch.autograd.Variable`\n\t\t\tReturned only if ``ret_matrix`` was set to true.\"\"\"", "\n", "\n", "self", ".", "n_1", "=", "sample_1", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_2", "=", "sample_2", ".", "shape", "[", "0", "]", "\n", "\n", "# The three constants used in the test.", "\n", "self", ".", "a00", "=", "1.", "/", "(", "self", ".", "n_1", "*", "(", "self", ".", "n_1", "-", "1", ")", ")", "\n", "self", ".", "a11", "=", "1.", "/", "(", "self", ".", "n_2", "*", "(", "self", ".", "n_2", "-", "1", ")", ")", "\n", "self", ".", "a01", "=", "-", "1.", "/", "(", "self", ".", "n_1", "*", "self", ".", "n_2", ")", "\n", "\n", "\n", "sample_12", "=", "torch", ".", "cat", "(", "(", "sample_1", ",", "sample_2", ")", ",", "0", ")", "\n", "if", "self", ".", "kernel_name", "==", "\"gaussian\"", ":", "\n", "\t\t\t", "distances", "=", "pdist", "(", "sample_12", ",", "sample_12", ",", "norm", "=", "2", ")", "\n", "", "elif", "self", ".", "kernel_name", "==", "\"laplacian\"", ":", "\n", "\t\t\t", "distances", "=", "pdist", "(", "sample_12", ",", "sample_12", ",", "norm", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "kernels", "=", "None", "\n", "for", "alpha", "in", "self", ".", "alphas", ":", "\n", "# For single kernel", "\n", "\t\t\t", "if", "self", ".", "kernel_name", "==", "\"gaussian\"", ":", "\n", "\t\t\t\t", "kernels_a", "=", "torch", ".", "exp", "(", "-", "alpha", "*", "distances", "**", "2", ")", "\n", "", "elif", "self", ".", "kernel_name", "==", "\"laplacian\"", ":", "\n", "\t\t\t\t", "kernels_a", "=", "torch", ".", "exp", "(", "-", "alpha", "*", "distances", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "# For multiple kernel, append kernel", "\n", "", "if", "kernels", "is", "None", ":", "\n", "\t\t\t\t", "kernels", "=", "kernels_a", "\n", "", "else", ":", "\n", "\t\t\t\t", "kernels", "=", "kernels", "+", "kernels_a", "\n", "\n", "", "", "k_1", "=", "kernels", "[", ":", "self", ".", "n_1", ",", ":", "self", ".", "n_1", "]", "\n", "k_2", "=", "kernels", "[", "self", ".", "n_1", ":", ",", "self", ".", "n_1", ":", "]", "\n", "k_12", "=", "kernels", "[", ":", "self", ".", "n_1", ",", "self", ".", "n_1", ":", "]", "\n", "\n", "mmd", "=", "(", "2", "*", "self", ".", "a01", "*", "k_12", ".", "sum", "(", ")", "+", "\n", "self", ".", "a00", "*", "(", "k_1", ".", "sum", "(", ")", "-", "torch", ".", "trace", "(", "k_1", ")", ")", "+", "\n", "self", ".", "a11", "*", "(", "k_2", ".", "sum", "(", ")", "-", "torch", ".", "trace", "(", "k_2", ")", ")", ")", "\n", "if", "ret_matrix", ":", "\n", "\t\t\t", "return", "mmd", ",", "kernels", "\n", "", "else", ":", "\n", "\t\t\t", "return", "mmd", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.MMDBiasedStatistic.__init__": [[193, 197], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphas", ",", "kernel_name", "=", "\"gaussian\"", ")", ":", "\n", "\t\t", "self", ".", "alphas", "=", "alphas", "\n", "self", ".", "kernel_name", "=", "kernel_name", "\n", "assert", "kernel_name", "in", "[", "\"gaussian\"", ",", "\"laplacian\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.MMDBiasedStatistic.__call__": [[198, 243], ["torch.cat", "utils.pdist", "utils.pdist", "torch.exp", "k_2.sum", "torch.exp", "k_12.sum", "k_1.sum"], "methods", ["home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.pdist", "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.pdist"], ["", "def", "__call__", "(", "self", ",", "sample_1", ",", "sample_2", ",", "ret_matrix", "=", "False", ")", ":", "\n", "\n", "\t\t", "self", ".", "n_1", "=", "sample_1", ".", "shape", "[", "0", "]", "\n", "self", ".", "n_2", "=", "sample_2", ".", "shape", "[", "0", "]", "\n", "\n", "# The three constants used in the test.", "\n", "self", ".", "a00", "=", "1.", "/", "(", "self", ".", "n_1", "*", "self", ".", "n_1", ")", "\n", "self", ".", "a11", "=", "1.", "/", "(", "self", ".", "n_2", "*", "self", ".", "n_2", ")", "\n", "self", ".", "a01", "=", "-", "1.", "/", "(", "self", ".", "n_1", "*", "self", ".", "n_2", ")", "\n", "\n", "\n", "sample_12", "=", "torch", ".", "cat", "(", "(", "sample_1", ",", "sample_2", ")", ",", "0", ")", "\n", "if", "self", ".", "kernel_name", "==", "\"gaussian\"", ":", "\n", "\t\t\t", "distances", "=", "pdist", "(", "sample_12", ",", "sample_12", ",", "norm", "=", "2", ")", "\n", "", "elif", "self", ".", "kernel_name", "==", "\"laplacian\"", ":", "\n", "\t\t\t", "distances", "=", "pdist", "(", "sample_12", ",", "sample_12", ",", "norm", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "\n", "\n", "", "kernels", "=", "None", "\n", "for", "alpha", "in", "self", ".", "alphas", ":", "\n", "# For single kernel", "\n", "\t\t\t", "if", "self", ".", "kernel_name", "==", "\"gaussian\"", ":", "\n", "\t\t\t\t", "kernels_a", "=", "torch", ".", "exp", "(", "-", "alpha", "*", "distances", "**", "2", ")", "\n", "", "elif", "self", ".", "kernel_name", "==", "\"laplacian\"", ":", "\n", "\t\t\t\t", "kernels_a", "=", "torch", ".", "exp", "(", "-", "alpha", "*", "distances", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "# For multiple kernel, append kernel", "\n", "", "if", "kernels", "is", "None", ":", "\n", "\t\t\t\t", "kernels", "=", "kernels_a", "\n", "", "else", ":", "\n", "\t\t\t\t", "kernels", "=", "kernels", "+", "kernels_a", "\n", "\n", "", "", "k_1", "=", "kernels", "[", ":", "self", ".", "n_1", ",", ":", "self", ".", "n_1", "]", "\n", "k_2", "=", "kernels", "[", "self", ".", "n_1", ":", ",", "self", ".", "n_1", ":", "]", "\n", "k_12", "=", "kernels", "[", ":", "self", ".", "n_1", ",", "self", ".", "n_1", ":", "]", "\n", "\n", "mmd", "=", "(", "2", "*", "self", ".", "a01", "*", "k_12", ".", "sum", "(", ")", "+", "\n", "self", ".", "a00", "*", "k_1", ".", "sum", "(", ")", "+", "\n", "self", ".", "a11", "*", "k_2", ".", "sum", "(", ")", ")", "\n", "if", "ret_matrix", ":", "\n", "\t\t\t", "return", "mmd", ",", "kernels", "\n", "", "else", ":", "\n", "\t\t\t", "return", "mmd", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.get_logger": [[8, 25], ["logging.Formatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_logger", "(", "filename", ")", ":", "\n", "# Logging configuration: set the basic configuration of the logging system", "\n", "\t", "log_formatter", "=", "logging", ".", "Formatter", "(", "fmt", "=", "'%(asctime)s [%(processName)s, %(process)s] [%(levelname)-5.5s]  %(message)s'", ",", "\n", "datefmt", "=", "'%m-%d %H:%M'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# File logger", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "\"{}.log\"", ".", "format", "(", "filename", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "# Stderr logger", "\n", "std_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "std_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "std_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "addHandler", "(", "std_handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.conditional_mse_errors": [[42, 56], ["numpy.mean", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "conditional_mse_errors", "(", "preds", ",", "labels", ",", "attrs", ")", ":", "\n", "\t", "\"\"\"\n\tCompute the conditional errors of A = 0/1. All the arguments need to be one-dimensional vectors.\n\t:param preds: The predicted label given by a model.\n\t:param labels: The groundtruth label.\n\t:param attrs: The label of sensitive attribute.\n\t:return: Overall classification error, error | A = 0, error | A = 1.\n\t\"\"\"", "\n", "assert", "preds", ".", "shape", "==", "labels", ".", "shape", "\n", "cls_error", "=", "np", ".", "mean", "(", "(", "preds", "-", "labels", ")", "**", "2", ")", "\n", "idx", "=", "attrs", "==", "0", "\n", "error_0", "=", "np", ".", "mean", "(", "(", "preds", "[", "idx", "]", "-", "labels", "[", "idx", "]", ")", "**", "2", ")", "\n", "error_1", "=", "np", ".", "mean", "(", "(", "preds", "[", "~", "idx", "]", "-", "labels", "[", "~", "idx", "]", ")", "**", "2", ")", "\n", "return", "cls_error", ",", "error_0", ",", "error_1", "\n", "\n"]], "home.repos.pwc.inspect_result.JFChi_Understanding-and-Mitigating-Accuracy-Disparity-in-Regression.None.utils.pdist": [[141, 186], ["float", "sample_1.size", "sample_2.size", "torch.sum", "torch.sum", "torch.sqrt", "sample_1.size", "sample_1.unsqueeze().expand", "sample_2.unsqueeze().expand", "torch.sum", "torch.sum.expand", "torch.sum.transpose().expand", "torch.abs", "sample_1.mm", "torch.abs", "sample_1.unsqueeze", "sample_2.unsqueeze", "torch.sum.transpose", "sample_2.t"], "function", ["None"], ["", "", "", "def", "pdist", "(", "sample_1", ",", "sample_2", ",", "norm", "=", "2", ",", "eps", "=", "1e-9", ")", ":", "\n", "\t", "r\"\"\"Compute the matrix of all squared pairwise distances.\n\n\tArguments\n\t---------\n\tsample_1 : torch.Tensor or Variable\n\t\tThe first sample, should be of shape ``(n_1, d)``.\n\tsample_2 : torch.Tensor or Variable\n\t\tThe second sample, should be of shape ``(n_2, d)``.\n\tnorm : float\n\t\tThe l_p norm to be used.\n\n\tReturns\n\t-------\n\ttorch.Tensor or Variable\n\t\tMatrix of shape (n_1, n_2). The [i, j]-th entry is equal to\n\t\t``|| sample_1[i, :] - sample_2[j, :] ||_p``.\"\"\"", "\n", "n_1", ",", "n_2", "=", "sample_1", ".", "size", "(", "0", ")", ",", "sample_2", ".", "size", "(", "0", ")", "\n", "norm", "=", "float", "(", "norm", ")", "\n", "if", "norm", "==", "2.", ":", "\n", "\t\t", "norms_1", "=", "torch", ".", "sum", "(", "sample_1", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "norms_2", "=", "torch", ".", "sum", "(", "sample_2", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "norms", "=", "(", "norms_1", ".", "expand", "(", "n_1", ",", "n_2", ")", "+", "\n", "norms_2", ".", "transpose", "(", "0", ",", "1", ")", ".", "expand", "(", "n_1", ",", "n_2", ")", ")", "\n", "distances_squared", "=", "norms", "-", "2", "*", "sample_1", ".", "mm", "(", "sample_2", ".", "t", "(", ")", ")", "\n", "\n", "### test shape ####", "\n", "# print(\"In pdist\")", "\n", "# print(norms_1)", "\n", "# print(norms_2)", "\n", "# print(norms_1.expand(n_1, n_2))", "\n", "# print(norms_2.transpose(0, 1).expand(n_1, n_2))", "\n", "# print(norms_1.shape, norms_2.shape, norms.shape)", "\n", "# print(distances_squared)", "\n", "# print(distances_squared.shape)", "\n", "###################", "\n", "\n", "return", "torch", ".", "sqrt", "(", "eps", "+", "torch", ".", "abs", "(", "distances_squared", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "dim", "=", "sample_1", ".", "size", "(", "1", ")", "\n", "expanded_1", "=", "sample_1", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n_1", ",", "n_2", ",", "dim", ")", "\n", "expanded_2", "=", "sample_2", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n_1", ",", "n_2", ",", "dim", ")", "\n", "differences", "=", "torch", ".", "abs", "(", "expanded_1", "-", "expanded_2", ")", "**", "norm", "\n", "inner", "=", "torch", ".", "sum", "(", "differences", ",", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "return", "(", "eps", "+", "inner", ")", "**", "(", "1.", "/", "norm", ")", "\n", "\n"]]}