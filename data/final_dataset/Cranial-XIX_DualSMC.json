{"home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.ReplayMemory.__init__": [[16, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "buffer", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.ReplayMemory.push": [[21, 26], ["len", "dual_smc.ReplayMemory.buffer.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "s_t", ",", "a_t", ",", "r_t", ",", "s_tp1", ",", "done", ",", "obs", ",", "curr_ps", ",", "mean_state", ",", "hidden", ",", "cell", ",", "pf_sample", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "buffer", ")", "<", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "buffer", ".", "append", "(", "None", ")", "\n", "", "self", ".", "buffer", "[", "self", ".", "position", "]", "=", "(", "s_t", ",", "a_t", ",", "r_t", ",", "s_tp1", ",", "done", ",", "obs", ",", "curr_ps", ",", "mean_state", ",", "hidden", ",", "cell", ",", "pf_sample", ")", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.ReplayMemory.sample": [[27, 32], ["random.sample", "map", "zip"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "batch", "=", "random", ".", "sample", "(", "self", ".", "buffer", ",", "batch_size", ")", "\n", "state", ",", "action", ",", "reward", ",", "next_state", ",", "done", ",", "obs", ",", "curr_ps", ",", "mean_state", ",", "hidden", ",", "cell", ",", "pf_sample", "=", "map", "(", "\n", "np", ".", "stack", ",", "zip", "(", "*", "batch", ")", ")", "\n", "return", "state", ",", "action", ",", "reward", ",", "next_state", ",", "done", ",", "obs", ",", "curr_ps", ",", "mean_state", ",", "hidden", ",", "cell", ",", "pf_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.ReplayMemory.__len__": [[33, 35], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.QNetwork.__init__": [[52, 63], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "dual_smc.QNetwork.apply"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_actions", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "QNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Q1 architecture", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "num_inputs", "+", "num_actions", ",", "hidden_dim", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "# Q2 architecture", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "num_inputs", "+", "num_actions", ",", "hidden_dim", ")", "\n", "self", ".", "linear5", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear6", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "self", ".", "apply", "(", "weights_init_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.QNetwork.forward": [[64, 73], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dual_smc.QNetwork.linear3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dual_smc.QNetwork.linear6", "dual_smc.QNetwork.linear1", "dual_smc.QNetwork.linear2", "dual_smc.QNetwork.linear4", "dual_smc.QNetwork.linear5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "xu", "=", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "1", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "linear1", "(", "xu", ")", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "linear2", "(", "x1", ")", ")", "\n", "x1", "=", "self", ".", "linear3", "(", "x1", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "linear4", "(", "xu", ")", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "linear5", "(", "x2", ")", ")", "\n", "x2", "=", "self", ".", "linear6", "(", "x2", ")", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.__init__": [[75, 82], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "dual_smc.GaussianPolicy.apply"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_actions", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_dim", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "mean_linear", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_actions", ")", "\n", "self", ".", "log_std_linear", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_actions", ")", "\n", "self", ".", "apply", "(", "weights_init_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.forward": [[83, 90], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dual_smc.GaussianPolicy.mean_linear", "dual_smc.GaussianPolicy.log_std_linear", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "dual_smc.GaussianPolicy.linear1", "dual_smc.GaussianPolicy.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "linear1", "(", "state", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "linear2", "(", "x", ")", ")", "\n", "mean", "=", "self", ".", "mean_linear", "(", "x", ")", "\n", "log_std", "=", "self", ".", "log_std_linear", "(", "x", ")", "\n", "log_std", "=", "torch", ".", "clamp", "(", "log_std", ",", "min", "=", "LOG_SIG_MIN", ",", "max", "=", "LOG_SIG_MAX", ")", "\n", "return", "mean", ",", "log_std", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.sample": [[91, 103], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dual_smc.GaussianPolicy.forward", "log_std.exp", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal.rsample", "torch.distributions.Normal.rsample", "torch.distributions.Normal.rsample", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.distributions.Normal.log_prob", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "log_prob.sum.sum.sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh.pow", "torch.tanh.pow", "torch.tanh.pow"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.ProposerNetwork.forward"], ["", "def", "sample", "(", "self", ",", "mean_state", ",", "par_states", ")", ":", "\n", "        ", "state", "=", "torch", ".", "cat", "(", "(", "mean_state", ",", "par_states", ")", ",", "-", "1", ")", "\n", "mean", ",", "log_std", "=", "self", ".", "forward", "(", "state", ")", "\n", "std", "=", "log_std", ".", "exp", "(", ")", "\n", "normal", "=", "Normal", "(", "mean", ",", "std", ")", "\n", "x_t", "=", "normal", ".", "rsample", "(", ")", "# for reparameterization trick (mean + std * N(0,1))", "\n", "action", "=", "torch", ".", "tanh", "(", "x_t", ")", "\n", "log_prob", "=", "normal", ".", "log_prob", "(", "x_t", ")", "\n", "# Enforcing Action Bound", "\n", "log_prob", "-=", "torch", ".", "log", "(", "1", "-", "action", ".", "pow", "(", "2", ")", "+", "const", ")", "\n", "log_prob", "=", "log_prob", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "action", ",", "log_prob", ",", "torch", ".", "tanh", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.get_action": [[104, 107], ["dual_smc.GaussianPolicy.sample"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.sample"], ["", "def", "get_action", "(", "self", ",", "mean_state", ",", "par_states", ")", ":", "\n", "        ", "a", ",", "log_prob", ",", "_", "=", "self", ".", "sample", "(", "mean_state", ",", "par_states", ")", "\n", "return", "a", ",", "log_prob", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DynamicNetwork.__init__": [[111, 121], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DynamicNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t_enc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "DIM_STATE", "+", "DIM_ACTION", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_STATE", "*", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DynamicNetwork.t_model": [[123, 133], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dual_smc.DynamicNetwork.t_enc", "x[].exp", "len", "action.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "action.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "t_model", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "if", "len", "(", "action", ".", "shape", ")", "==", "1", ":", "\n", "            ", "action", "=", "action", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "state", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "state", ",", "action", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "t_enc", "(", "x", ")", "\n", "mean", "=", "x", "[", ":", ",", ":", "DIM_STATE", "]", "\n", "std", "=", "x", "[", ":", ",", "DIM_STATE", ":", "]", ".", "exp", "(", ")", "\n", "delta", "=", "torch", ".", "randn_like", "(", "state", ")", "*", "std", "+", "mean", "\n", "next_state", "=", "state", "+", "action", "+", "delta", "\n", "return", "next_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.ProposerNetwork.__init__": [[138, 157], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ProposerNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "64", "\n", "self", ".", "obs_encode", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "DIM_OBS", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "self", ".", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "p_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim", "*", "2", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.ProposerNetwork.forward": [[159, 166], ["dual_smc.ProposerNetwork.obs_encode", "obs_enc.repeat.repeat.repeat", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dual_smc.ProposerNetwork.p_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "obs", ",", "num_par", "=", "NUM_PAR_PF", ")", ":", "\n", "        ", "obs_enc", "=", "self", ".", "obs_encode", "(", "obs", ")", "# (B, C)", "\n", "obs_enc", "=", "obs_enc", ".", "repeat", "(", "num_par", ",", "1", ")", "# (B * num_par, C)", "\n", "z", "=", "torch", ".", "randn_like", "(", "obs_enc", ")", "# (B * num_par, C)", "\n", "x", "=", "torch", ".", "cat", "(", "[", "obs_enc", ",", "z", "]", ",", "-", "1", ")", "# (B * num_par, 2C)", "\n", "proposal", "=", "self", ".", "p_net", "(", "x", ")", "# [B * num_par, 2]", "\n", "return", "proposal", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.MeasureNetwork.__init__": [[168, 191], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MeasureNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_m", "=", "16", "\n", "self", ".", "obs_encode", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "DIM_OBS", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "DIM_HIDDEN", ",", "DIM_LSTM_HIDDEN", ",", "NUM_LSTM_LAYER", ")", "\n", "self", ".", "lstm_out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "DIM_LSTM_HIDDEN", ",", "self", ".", "dim_m", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "m_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_m", "+", "DIM_STATE", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "DIM_HIDDEN", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM_HIDDEN", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.MeasureNetwork.m_model": [[193, 204], ["dual_smc.MeasureNetwork.obs_encode", "dual_smc.MeasureNetwork.unsqueeze", "dual_smc.MeasureNetwork.lstm", "dual_smc.MeasureNetwork.lstm_out", "torch.cat.repeat", "torch.cat.repeat", "torch.cat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dual_smc.MeasureNetwork.m_net().view", "dual_smc.MeasureNetwork.m_net"], "methods", ["None"], ["", "def", "m_model", "(", "self", ",", "state", ",", "obs", ",", "hidden", ",", "cell", ",", "num_par", "=", "NUM_PAR_PF", ")", ":", "\n", "# state: (B * K, dim_s)", "\n", "# obs: (B, dim_s)", "\n", "        ", "obs_enc", "=", "self", ".", "obs_encode", "(", "obs", ")", "# (batch, dim_m)", "\n", "x", "=", "obs_enc", ".", "unsqueeze", "(", "0", ")", "# -> [1, batch_size, dim_obs]", "\n", "x", ",", "(", "h", ",", "c", ")", "=", "self", ".", "lstm", "(", "x", ",", "(", "hidden", ",", "cell", ")", ")", "\n", "x", "=", "self", ".", "lstm_out", "(", "x", "[", "0", "]", ")", "# (batch, dim_m)", "\n", "x", "=", "x", ".", "repeat", "(", "num_par", ",", "1", ")", "# (batch * num_par, dim_m)", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "state", ")", ",", "-", "1", ")", "# (batch * num_par, dim_m + 2)", "\n", "lik", "=", "self", ".", "m_net", "(", "x", ")", ".", "view", "(", "-", "1", ",", "num_par", ")", "# (batch, num_par)", "\n", "return", "lik", ",", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.__init__": [[208, 232], ["dual_smc.ReplayMemory", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "DynamicNetwork().to", "MeasureNetwork().to", "ProposerNetwork().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "QNetwork().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "QNetwork().to", "dual_smc.hard_update", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "GaussianPolicy().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "dual_smc.DUAL_SMC.dynamic_net.parameters", "dual_smc.DUAL_SMC.measure_net.parameters", "dual_smc.DUAL_SMC.pp_net.parameters", "dual_smc.DUAL_SMC.critic.parameters", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "dual_smc.DUAL_SMC.policy.parameters", "dual_smc.DynamicNetwork", "dual_smc.MeasureNetwork", "dual_smc.ProposerNetwork", "dual_smc.QNetwork", "dual_smc.QNetwork", "dual_smc.GaussianPolicy", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.hard_update"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "replay_buffer", "=", "ReplayMemory", "(", "replay_buffer_size", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "MSE_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "BCE_criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n", "# Filtering", "\n", "self", ".", "dynamic_net", "=", "DynamicNetwork", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "measure_net", "=", "MeasureNetwork", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "pp_net", "=", "ProposerNetwork", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "dynamic_optimizer", "=", "Adam", "(", "self", ".", "dynamic_net", ".", "parameters", "(", ")", ",", "lr", "=", "FIL_LR", ")", "\n", "self", ".", "measure_optimizer", "=", "Adam", "(", "self", ".", "measure_net", ".", "parameters", "(", ")", ",", "lr", "=", "FIL_LR", ")", "\n", "self", ".", "pp_optimizer", "=", "Adam", "(", "self", ".", "pp_net", ".", "parameters", "(", ")", ",", "lr", "=", "FIL_LR", ")", "\n", "# Planning", "\n", "self", ".", "critic", "=", "QNetwork", "(", "DIM_STATE", ",", "DIM_ACTION", ",", "DIM_HIDDEN", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "self", ".", "critic_optim", "=", "Adam", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "PLA_LR", ")", "\n", "self", ".", "critic_target", "=", "QNetwork", "(", "DIM_STATE", ",", "DIM_ACTION", ",", "DIM_HIDDEN", ")", ".", "to", "(", "device", ")", "\n", "hard_update", "(", "self", ".", "critic_target", ",", "self", ".", "critic", ")", "\n", "self", ".", "target_entropy", "=", "-", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "DIM_ACTION", ")", ".", "to", "(", "device", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "log_alpha", "=", "torch", ".", "zeros", "(", "1", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "self", ".", "alpha_optim", "=", "Adam", "(", "[", "self", ".", "log_alpha", "]", ",", "lr", "=", "PLA_LR", ")", "\n", "self", ".", "policy", "=", "GaussianPolicy", "(", "DIM_STATE", "*", "(", "NUM_PAR_SMC_INIT", "+", "1", ")", ",", "DIM_ACTION", ",", "DIM_HIDDEN", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "policy_optim", "=", "Adam", "(", "self", ".", "policy", ".", "parameters", "(", ")", ",", "lr", "=", "PLA_LR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.save_model": [[233, 241], ["dual_smc.DUAL_SMC.policy.state_dict", "dual_smc.DUAL_SMC.critic.state_dict", "dual_smc.DUAL_SMC.dynamic_net.state_dict", "dual_smc.DUAL_SMC.measure_net.state_dict", "dual_smc.DUAL_SMC.pp_net.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "stats", "=", "{", "}", "\n", "stats", "[", "'p_net'", "]", "=", "self", ".", "policy", ".", "state_dict", "(", ")", "\n", "stats", "[", "'c_net'", "]", "=", "self", ".", "critic", ".", "state_dict", "(", ")", "\n", "stats", "[", "'d_net'", "]", "=", "self", ".", "dynamic_net", ".", "state_dict", "(", ")", "\n", "stats", "[", "'m_net'", "]", "=", "self", ".", "measure_net", ".", "state_dict", "(", ")", "\n", "stats", "[", "'pp_net'", "]", "=", "self", ".", "pp_net", ".", "state_dict", "(", ")", "\n", "torch", ".", "save", "(", "stats", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.load_model": [[242, 252], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "dual_smc.DUAL_SMC.dynamic_net.load_state_dict", "dual_smc.DUAL_SMC.measure_net.load_state_dict", "dual_smc.DUAL_SMC.pp_net.load_state_dict", "dual_smc.DUAL_SMC.policy.load_state_dict", "dual_smc.DUAL_SMC.critic.load_state_dict", "dual_smc.DUAL_SMC.dynamic_net.load_state_dict"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "stats", "=", "torch", ".", "load", "(", "path", ")", "\n", "# Filtering", "\n", "self", ".", "dynamic_net", ".", "load_state_dict", "(", "stats", "[", "'d_net'", "]", ")", "\n", "self", ".", "measure_net", ".", "load_state_dict", "(", "stats", "[", "'m_net'", "]", ")", "\n", "self", ".", "pp_net", ".", "load_state_dict", "(", "stats", "[", "'pp_net'", "]", ")", "\n", "# Planning", "\n", "self", ".", "policy", ".", "load_state_dict", "(", "stats", "[", "'p_net'", "]", ")", "\n", "self", ".", "critic", ".", "load_state_dict", "(", "stats", "[", "'c_net'", "]", ")", "\n", "self", ".", "dynamic_net", ".", "load_state_dict", "(", "stats", "[", "'d_net'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.get_mean_state": [[253, 267], ["len", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "weight.unsqueeze().to.unsqueeze().to.unsqueeze().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "weight.unsqueeze().to.unsqueeze().to.unsqueeze().to", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "weight.unsqueeze().to.unsqueeze().to.unsqueeze", "weight.unsqueeze().to.unsqueeze().to.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "get_mean_state", "(", "self", ",", "state", ",", "weight", ")", ":", "\n", "        ", "if", "len", "(", "state", ".", "shape", ")", "==", "2", ":", "\n", "# states: [num_particles, dim_state]", "\n", "# weights: [num_particles]", "\n", "            ", "state", "=", "torch", ".", "FloatTensor", "(", "state", ")", ".", "to", "(", "device", ")", "\n", "weight", "=", "weight", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "mean_state", "=", "torch", ".", "sum", "(", "state", "*", "weight", ",", "0", ")", "\n", "", "elif", "len", "(", "state", ".", "shape", ")", "==", "3", ":", "\n", "# states: torch.Size([batch, num_particles, dim_state])", "\n", "# weights: torch.Size([batch, num_particles])", "\n", "# return: torch.Size([batch, dim_state])", "\n", "            ", "weight", "=", "weight", ".", "unsqueeze", "(", "2", ")", ".", "to", "(", "device", ")", "\n", "mean_state", "=", "torch", ".", "sum", "(", "state", "*", "weight", ",", "1", ")", ".", "view", "(", "state", ".", "shape", "[", "0", "]", ",", "state", ".", "shape", "[", "2", "]", ")", "\n", "", "return", "mean_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.density_loss": [[268, 277], ["s.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "s.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "density_loss", "(", "self", ",", "p", ",", "w", ",", "s", ")", ":", "\n", "# p: [B * K, dim_s]", "\n", "# w: [B, K]", "\n", "# s: [B, dim_s]", "\n", "        ", "s", "=", "s", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "NUM_PAR_PF", ",", "1", ")", "# [B, K, dim_s]", "\n", "x", "=", "torch", ".", "exp", "(", "-", "(", "p", "-", "s", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "# [B, K]", "\n", "x", "=", "(", "w", "*", "x", ")", ".", "sum", "(", "-", "1", ")", "# [B]", "\n", "loss", "=", "-", "torch", ".", "log", "(", "const", "+", "x", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.par_weighted_var": [[278, 286], ["mean_state.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "x.sum", "mean_state.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "par_weighted_var", "(", "self", ",", "par_states", ",", "par_weight", ",", "mean_state", ")", ":", "\n", "# par_states: [B, K, dim_s]", "\n", "# par_weight: [B, K]", "\n", "# mean_state: [B, dim_s]", "\n", "        ", "num_par", "=", "par_states", ".", "shape", "[", "1", "]", "\n", "mean_state", "=", "mean_state", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_par", ",", "1", ")", "# [B, K, dim_s]", "\n", "x", "=", "par_weight", "*", "(", "par_states", "-", "mean_state", ")", ".", "abs", "(", ")", ".", "sum", "(", "-", "1", ")", "# [B, K]", "\n", "return", "x", ".", "sum", "(", "-", "1", ")", "# [B]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.par_var": [[287, 292], ["par_states.mean().unsqueeze().repeat", "x.mean", "par_states.mean().unsqueeze", "par_states.mean"], "methods", ["None"], ["", "def", "par_var", "(", "self", ",", "par_states", ")", ":", "\n", "# par_states: [B, K, dim_s]", "\n", "        ", "mean_state", "=", "par_states", ".", "mean", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "NUM_PAR_PF", ",", "1", ")", "# mean_state: [B, K, dim_s]", "\n", "x", "=", "(", "par_states", "-", "mean_state", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", "# [B, K]", "\n", "return", "x", ".", "mean", "(", "-", "1", ")", "# [B]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.get_q": [[293, 297], ["dual_smc.DUAL_SMC.critic", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "get_q", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "qf1", ",", "qf2", "=", "self", ".", "critic", "(", "state", ",", "action", ")", "\n", "q", "=", "torch", ".", "min", "(", "qf1", ",", "qf2", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.soft_q_update": [[298, 412], ["dual_smc.DUAL_SMC.replay_buffer.sample", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "dual_smc.DUAL_SMC.measure_optimizer.zero_grad", "dual_smc.DUAL_SMC.measure_net.m_model", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "dual_smc.DUAL_SMC.BCE_criterion", "dual_smc.DUAL_SMC.measure_net.m_model", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "dual_smc.DUAL_SMC.BCE_criterion", "OM_loss.backward", "dual_smc.DUAL_SMC.measure_optimizer.step", "dual_smc.DUAL_SMC.dynamic_optimizer.zero_grad", "dual_smc.DUAL_SMC.dynamic_net.t_model", "dual_smc.DUAL_SMC.MSE_criterion", "dual_smc.DUAL_SMC.backward", "dual_smc.DUAL_SMC.dynamic_optimizer.step", "dual_smc.DUAL_SMC.dynamic_net.t_model", "dual_smc.DUAL_SMC.dynamic_net.t_model", "dual_smc.DUAL_SMC.critic", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "dual_smc.DUAL_SMC.critic_optim.zero_grad", "torch.mse_loss.backward", "dual_smc.DUAL_SMC.critic_optim.step", "dual_smc.DUAL_SMC.critic_optim.zero_grad", "torch.mse_loss.backward", "dual_smc.DUAL_SMC.critic_optim.step", "dual_smc.DUAL_SMC.policy.sample", "dual_smc.DUAL_SMC.critic", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "dual_smc.DUAL_SMC.policy_optim.zero_grad", "policy_loss.backward", "dual_smc.DUAL_SMC.policy_optim.step", "dual_smc.DUAL_SMC.alpha_optim.zero_grad", "alpha_loss.backward", "dual_smc.DUAL_SMC.alpha_optim.step", "dual_smc.DUAL_SMC.log_alpha.exp", "dual_smc.soft_update", "dual_smc.DUAL_SMC.pp_optimizer.zero_grad", "dual_smc.DUAL_SMC.pp_net", "PP_loss.backward", "dual_smc.DUAL_SMC.pp_optimizer.step", "torch.FloatTensor().to.view", "torch.FloatTensor().to.view", "torch.FloatTensor().to.view", "dual_smc.DUAL_SMC.measure_net.m_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.FloatTensor().to.view", "torch.FloatTensor().to.view", "torch.FloatTensor().to.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dual_smc.DUAL_SMC.policy.sample", "dual_smc.DUAL_SMC.critic_target", "torch.FloatTensor().to.view", "torch.FloatTensor().to.view", "torch.FloatTensor().to.view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "dual_smc.DUAL_SMC.MSE_criterion", "dual_smc.DUAL_SMC.measure_net.m_model", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "dual_smc.DUAL_SMC.BCE_criterion", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "dual_smc.DUAL_SMC.view", "torch.FloatTensor().to.unsqueeze().repeat", "torch.FloatTensor().to.unsqueeze().repeat", "torch.FloatTensor().to.unsqueeze().repeat", "dual_smc.DUAL_SMC.detach", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "dual_smc.DUAL_SMC.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "torch.FloatTensor().to.repeat", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().to.unsqueeze", "torch.FloatTensor().to.unsqueeze", "torch.FloatTensor().to.unsqueeze", "numpy.float32", "numpy.array", "true_state_lik.mean"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.sample", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.MeasureNetwork.m_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.MeasureNetwork.m_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DynamicNetwork.t_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DynamicNetwork.t_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DynamicNetwork.t_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.sample", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.soft_update", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.MeasureNetwork.m_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.sample", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.MeasureNetwork.m_model"], ["", "def", "soft_q_update", "(", "self", ")", ":", "\n", "        ", "state_batch", ",", "action_batch", ",", "reward_batch", ",", "next_state_batch", ",", "done_batch", ",", "obs", ",", "curr_par", ",", "mean_state", ",", "hidden", ",", "cell", ",", "pf_sample", "=", "self", ".", "replay_buffer", ".", "sample", "(", "BATCH_SIZE", ")", "\n", "state_batch", "=", "torch", ".", "FloatTensor", "(", "state_batch", ")", ".", "to", "(", "device", ")", "\n", "next_state_batch", "=", "torch", ".", "FloatTensor", "(", "next_state_batch", ")", ".", "to", "(", "device", ")", "\n", "action_batch", "=", "torch", ".", "FloatTensor", "(", "action_batch", ")", ".", "to", "(", "device", ")", "\n", "reward_batch", "=", "torch", ".", "FloatTensor", "(", "reward_batch", ")", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "device", ")", "# (B, 1)", "\n", "mask_batch", "=", "torch", ".", "FloatTensor", "(", "np", ".", "float32", "(", "1", "-", "done_batch", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "curr_obs", "=", "torch", ".", "FloatTensor", "(", "obs", ")", ".", "to", "(", "device", ")", "\n", "curr_par", "=", "torch", ".", "FloatTensor", "(", "curr_par", ")", ".", "to", "(", "device", ")", "# (B, K, dim_s)", "\n", "mean_state", "=", "torch", ".", "FloatTensor", "(", "mean_state", ")", ".", "to", "(", "device", ")", "# (B, dim_s)", "\n", "curr_par_sample", "=", "torch", ".", "FloatTensor", "(", "pf_sample", ")", ".", "to", "(", "device", ")", "# (B, M, 2)", "\n", "hidden", "=", "torch", ".", "FloatTensor", "(", "hidden", ")", ".", "to", "(", "device", ")", "# [128, NUM_LSTM_LAYER, 1, DIM_LSTM_HIDDEN]", "\n", "hidden", "=", "torch", ".", "transpose", "(", "torch", ".", "squeeze", "(", "hidden", ")", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "cell", "=", "torch", ".", "FloatTensor", "(", "cell", ")", ".", "to", "(", "device", ")", "\n", "cell", "=", "torch", ".", "transpose", "(", "torch", ".", "squeeze", "(", "cell", ")", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# ------------------------", "\n", "#  Train Particle Proposer", "\n", "# ------------------------", "\n", "if", "PP_EXIST", ":", "\n", "            ", "self", ".", "pp_optimizer", ".", "zero_grad", "(", ")", "\n", "state_propose", "=", "self", ".", "pp_net", "(", "curr_obs", ",", "NUM_PAR_PF", ")", "\n", "PP_loss", "=", "0", "\n", "if", "'mse'", "in", "PP_LOSS_TYPE", ":", "\n", "                ", "PP_loss", "+=", "self", ".", "MSE_criterion", "(", "state_batch", ".", "repeat", "(", "NUM_PAR_PF", ",", "1", ")", ",", "state_propose", ")", "\n", "", "if", "'adv'", "in", "PP_LOSS_TYPE", ":", "\n", "                ", "fake_logit", ",", "_", ",", "_", "=", "self", ".", "measure_net", ".", "m_model", "(", "state_propose", ",", "curr_obs", ",", "hidden", ",", "cell", ",", "NUM_PAR_PF", ")", "# (B, K)", "\n", "real_target", "=", "torch", ".", "ones_like", "(", "fake_logit", ")", "\n", "PP_loss", "+=", "self", ".", "BCE_criterion", "(", "fake_logit", ",", "real_target", ")", "\n", "", "if", "'density'", "in", "PP_LOSS_TYPE", ":", "\n", "                ", "std", "=", "0.1", "\n", "DEN_COEF", "=", "1", "\n", "std_scale", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "[", "2", ",", "1", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "par_s", "=", "state_propose", ".", "view", "(", "BATCH_SIZE", ",", "-", "1", ",", "DIM_STATE", ")", "# [B * K, 2] -> [B, K, 2]", "\n", "true_s", "=", "state_batch", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "NUM_PAR_PF", ",", "1", ")", "# [B, 2] -> [B, K, 2]", "\n", "square_distance", "=", "(", "(", "par_s", "-", "true_s", ")", "*", "std_scale", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", "# [B, K] scale all dimension to -1, +1", "\n", "true_state_lik", "=", "1.", "/", "(", "2", "*", "np", ".", "pi", "*", "std", "**", "2", ")", "*", "(", "-", "square_distance", "/", "(", "2", "*", "std", "**", "2", ")", ")", ".", "exp", "(", ")", "\n", "pp_nll", "=", "-", "(", "const", "+", "true_state_lik", ".", "mean", "(", "1", ")", ")", ".", "log", "(", ")", ".", "mean", "(", ")", "\n", "PP_loss", "+=", "DEN_COEF", "*", "pp_nll", "\n", "", "PP_loss", ".", "backward", "(", ")", "\n", "self", ".", "pp_optimizer", ".", "step", "(", ")", "\n", "\n", "# ------------------------", "\n", "#  Train Observation Model", "\n", "# ------------------------", "\n", "", "self", ".", "measure_optimizer", ".", "zero_grad", "(", ")", "\n", "fake_logit", ",", "next_hidden", ",", "next_cell", "=", "self", ".", "measure_net", ".", "m_model", "(", "curr_par", ".", "view", "(", "-", "1", ",", "DIM_STATE", ")", ",", "\n", "curr_obs", ",", "hidden", ",", "cell", ",", "NUM_PAR_PF", ")", "# (B, K)", "\n", "if", "PP_EXIST", ":", "\n", "            ", "fake_logit_pp", ",", "_", ",", "_", "=", "self", ".", "measure_net", ".", "m_model", "(", "state_propose", ".", "detach", "(", ")", ",", "\n", "curr_obs", ",", "hidden", ",", "cell", ",", "NUM_PAR_PF", ")", "# (B, K)", "\n", "fake_logit", "=", "torch", ".", "cat", "(", "(", "fake_logit", ",", "fake_logit_pp", ")", ",", "-", "1", ")", "# (B, 2K)", "\n", "", "fake_target", "=", "torch", ".", "zeros_like", "(", "fake_logit", ")", "\n", "fake_loss", "=", "self", ".", "BCE_criterion", "(", "fake_logit", ",", "fake_target", ")", "\n", "real_logit", ",", "_", ",", "_", "=", "self", ".", "measure_net", ".", "m_model", "(", "state_batch", ",", "curr_obs", ",", "hidden", ",", "cell", ",", "1", ")", "# (batch, num_pars)", "\n", "real_target", "=", "torch", ".", "ones_like", "(", "real_logit", ")", "\n", "real_loss", "=", "self", ".", "BCE_criterion", "(", "real_logit", ",", "real_target", ")", "\n", "OM_loss", "=", "real_loss", "+", "fake_loss", "\n", "OM_loss", ".", "backward", "(", ")", "\n", "self", ".", "measure_optimizer", ".", "step", "(", ")", "\n", "\n", "# ------------------------", "\n", "#  Train Transition Model", "\n", "# ------------------------", "\n", "self", ".", "dynamic_optimizer", ".", "zero_grad", "(", ")", "\n", "state_predict", "=", "self", ".", "dynamic_net", ".", "t_model", "(", "state_batch", ",", "action_batch", "*", "STEP_RANGE", ")", "\n", "TM_loss", "=", "self", ".", "MSE_criterion", "(", "state_predict", ",", "next_state_batch", ")", "\n", "TM_loss", ".", "backward", "(", ")", "\n", "self", ".", "dynamic_optimizer", ".", "step", "(", ")", "\n", "\n", "# ------------------------", "\n", "#  Train SAC", "\n", "# ------------------------", "\n", "next_mean_state", "=", "self", ".", "dynamic_net", ".", "t_model", "(", "mean_state", ",", "action_batch", "*", "STEP_RANGE", ")", "\n", "next_par_sample", "=", "self", ".", "dynamic_net", ".", "t_model", "(", "\n", "curr_par_sample", ".", "view", "(", "-", "1", ",", "DIM_STATE", ")", ",", "\n", "action_batch", ".", "repeat", "(", "NUM_PAR_SMC_INIT", ",", "1", ")", "*", "STEP_RANGE", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_state_action", ",", "next_state_log_pi", ",", "_", "=", "self", ".", "policy", ".", "sample", "(", "\n", "next_mean_state", ",", "next_par_sample", ".", "view", "(", "BATCH_SIZE", ",", "-", "1", ")", ")", "\n", "qf1_next_target", ",", "qf2_next_target", "=", "self", ".", "critic_target", "(", "next_state_batch", ",", "next_state_action", ")", "\n", "min_qf_next_target", "=", "torch", ".", "min", "(", "qf1_next_target", ",", "qf2_next_target", ")", "-", "self", ".", "alpha", "*", "next_state_log_pi", "\n", "next_q_value", "=", "reward_batch", "+", "mask_batch", "*", "self", ".", "gamma", "*", "(", "min_qf_next_target", ")", "\n", "\n", "", "qf1", ",", "qf2", "=", "self", ".", "critic", "(", "state_batch", ",", "action_batch", ")", "\n", "qf1_loss", "=", "F", ".", "mse_loss", "(", "qf1", ",", "next_q_value", ")", "\n", "qf2_loss", "=", "F", ".", "mse_loss", "(", "qf2", ",", "next_q_value", ")", "\n", "\n", "self", ".", "critic_optim", ".", "zero_grad", "(", ")", "\n", "qf1_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optim", ".", "step", "(", ")", "\n", "\n", "self", ".", "critic_optim", ".", "zero_grad", "(", ")", "\n", "qf2_loss", ".", "backward", "(", ")", "\n", "self", ".", "critic_optim", ".", "step", "(", ")", "\n", "\n", "pi", ",", "log_pi", ",", "_", "=", "self", ".", "policy", ".", "sample", "(", "mean_state", ",", "curr_par_sample", ".", "view", "(", "BATCH_SIZE", ",", "-", "1", ")", ")", "\n", "qf1_pi", ",", "qf2_pi", "=", "self", ".", "critic", "(", "state_batch", ",", "pi", ")", "\n", "min_qf_pi", "=", "torch", ".", "min", "(", "qf1_pi", ",", "qf2_pi", ")", "\n", "policy_loss", "=", "(", "(", "self", ".", "alpha", "*", "log_pi", ")", "-", "min_qf_pi", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "policy_optim", ".", "zero_grad", "(", ")", "\n", "policy_loss", ".", "backward", "(", ")", "\n", "self", ".", "policy_optim", ".", "step", "(", ")", "\n", "\n", "alpha_loss", "=", "-", "(", "self", ".", "log_alpha", "*", "(", "log_pi", "+", "self", ".", "target_entropy", ")", ".", "detach", "(", ")", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "alpha_optim", ".", "zero_grad", "(", ")", "\n", "alpha_loss", ".", "backward", "(", ")", "\n", "self", ".", "alpha_optim", ".", "step", "(", ")", "\n", "self", ".", "alpha", "=", "self", ".", "log_alpha", ".", "exp", "(", ")", "\n", "\n", "soft_update", "(", "self", ".", "critic_target", ",", "self", ".", "critic", ",", "self", ".", "tau", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.soft_update": [[38, 41], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "", "def", "soft_update", "(", "target", ",", "source", ",", "tau", ")", ":", "\n", "    ", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "target_param", ".", "data", "*", "(", "1.0", "-", "tau", ")", "+", "param", ".", "data", "*", "tau", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.hard_update": [[42, 45], ["zip", "target.parameters", "source.parameters", "target_param.data.copy_"], "function", ["None"], ["", "", "def", "hard_update", "(", "target", ",", "source", ")", ":", "\n", "    ", "for", "target_param", ",", "param", "in", "zip", "(", "target", ".", "parameters", "(", ")", ",", "source", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "target_param", ".", "data", ".", "copy_", "(", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.weights_init_": [[46, 50], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.run.dualsmc": [[18, 256], ["dual_smc.DUAL_SMC", "numpy.zeros", "utils.check_path", "utils.check_path", "range", "print", "len", "dual_smc.DUAL_SMC.load_model", "utils.get_datetime", "env.Environment", "numpy.zeros", "numpy.zeros", "env.Environment.get_observation", "trajectory.append", "numpy.random.rand", "torch.log", "torch.log", "torch.softmax", "torch.softmax", "dual_smc.DUAL_SMC.get_mean_state().detach().cpu().numpy", "int", "range", "dist_list.append", "step_list.append", "os.path.exists", "os.mkdir", "dual_smc.DUAL_SMC.measure_net.m_model", "lik.squeeze", "torch.softmax", "torch.softmax", "np.concatenate.copy", "torch.softmax().unsqueeze().repeat", "torch.softmax().unsqueeze().repeat", "numpy.reshape", "numpy.tile", "numpy.zeros", "torch.log", "torch.log", "numpy.reshape", "numpy.tile", "range", "numpy.reshape", "dual_smc.DUAL_SMC.get_mean_state().detach().cpu().numpy", "math.sqrt", "env.Environment.step", "env.Environment.get_observation", "dual_smc.DUAL_SMC.dynamic_net.t_model", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "np.concatenate.detach().cpu().numpy", "next_hidden.detach().cpu().numpy", "next_cell.detach().cpu().numpy", "trajectory.append", "step_list.pop", "dist_list.pop", "dual_smc.DUAL_SMC.save_model", "print", "print", "utils.plot_maze", "sum", "print", "numpy.random.randint", "torch.ones().to", "torch.ones().to", "dual_smc.DUAL_SMC.get_mean_state().detach().cpu", "str", "shutil.rmtree", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.softmax.detach().cpu().numpy", "matplotlib.subplots", "matplotlib.hist", "ax1.set_xscale", "ax1.set_xlim", "matplotlib.savefig", "matplotlib.close", "torch.topk", "torch.topk", "torch.multinomial().detach().cpu().numpy.detach().cpu().numpy", "torch.FloatTensor().to", "torch.FloatTensor().to", "dual_smc.DUAL_SMC.policy.get_action", "action.unsqueeze().repeat().view", "dual_smc.DUAL_SMC.dynamic_net.t_model", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "next_smc_state.view.view", "dual_smc.DUAL_SMC.dynamic_net.t_model", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "dual_smc.DUAL_SMC.get_q().view", "torch.sum().squeeze", "torch.sum().squeeze", "torch.softmax", "torch.distributions.categorical.Categorical().sample().detach().cpu().item", "torch.log", "torch.log", "torch.softmax", "torch.softmax", "dual_smc.DUAL_SMC.replay_buffer.push", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "str", "numpy.array", "float", "torch.multinomial().detach().cpu().numpy", "torch.multinomial().detach().cpu().numpy", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.ones().to", "torch.ones().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.transpose().contiguous().view", "torch.transpose().contiguous().view", "torch.FloatTensor().to().view", "torch.FloatTensor().to().view", "torch.FloatTensor().to", "torch.FloatTensor().to", "action.detach().cpu().numpy", "next_smc_state.view.detach().cpu().numpy", "model.dynamic_net.t_model.detach().cpu().numpy", "log_prob.unsqueeze().repeat", "torch.multinomial().detach().cpu().numpy", "torch.multinomial().detach().cpu().numpy", "torch.log", "torch.log", "torch.softmax", "numpy.random.randint", "torch.multinomial().detach().cpu().numpy", "torch.multinomial().detach().cpu().numpy", "dual_smc.DUAL_SMC.pp_net", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "proposal_state.detach().cpu().numpy.detach().cpu().numpy", "numpy.concatenate", "torch.multinomial().detach().cpu().numpy", "torch.multinomial().detach().cpu().numpy", "dual_smc.DUAL_SMC.get_mean_state().detach().cpu", "pow", "pow", "utils.plot_par", "len", "dual_smc.DUAL_SMC.soft_q_update", "np.concatenate.detach().cpu", "next_hidden.detach().cpu", "next_cell.detach().cpu", "numpy.array", "torch.ones", "torch.ones", "dual_smc.DUAL_SMC.get_mean_state().detach", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str", "torch.softmax.detach().cpu", "numpy.logspace", "torch.multinomial().detach().cpu().numpy.detach().cpu", "float", "torch.FloatTensor", "torch.FloatTensor", "action.unsqueeze().repeat", "dual_smc.DUAL_SMC.get_q", "torch.sum", "torch.sum", "torch.distributions.categorical.Categorical().sample().detach().cpu", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.ones().to", "torch.ones().to", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "str", "sum", "sum", "str", "str", "torch.multinomial().detach().cpu", "torch.multinomial().detach().cpu", "torch.softmax", "torch.softmax", "torch.ones", "torch.ones", "torch.FloatTensor", "torch.FloatTensor", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "action.detach().cpu", "next_smc_state.view.detach().cpu", "model.dynamic_net.t_model.detach().cpu", "torch.FloatTensor().to.view", "log_prob.unsqueeze", "torch.multinomial().detach().cpu", "torch.multinomial().detach().cpu", "torch.ones().to", "torch.ones().to", "torch.multinomial().detach().cpu", "torch.multinomial().detach().cpu", "proposal_state.detach().cpu().numpy.detach().cpu", "torch.multinomial().detach().cpu", "torch.multinomial().detach().cpu", "float", "dual_smc.DUAL_SMC.get_mean_state().detach", "str", "str", "np.concatenate.detach", "next_hidden.detach", "next_cell.detach", "dual_smc.DUAL_SMC.get_mean_state", "torch.FloatTensor", "torch.FloatTensor", "torch.softmax.detach", "torch.multinomial().detach().cpu().numpy.detach", "action.unsqueeze", "float", "torch.distributions.categorical.Categorical().sample().detach", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.ones", "torch.ones", "torch.multinomial().detach", "torch.multinomial().detach", "torch.transpose", "torch.transpose", "torch.FloatTensor", "torch.FloatTensor", "action.detach", "next_smc_state.view.detach", "model.dynamic_net.t_model.detach", "torch.multinomial().detach", "torch.multinomial().detach", "torch.ones", "torch.ones", "torch.multinomial().detach", "torch.multinomial().detach", "proposal_state.detach().cpu().numpy.detach", "torch.multinomial().detach", "torch.multinomial().detach", "dual_smc.DUAL_SMC.get_mean_state", "torch.distributions.categorical.Categorical().sample", "torch.FloatTensor", "torch.FloatTensor", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.distributions.categorical.Categorical"], "function", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.check_path", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.check_path", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.load_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.get_datetime", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.get_observation", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.MeasureNetwork.m_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.get_observation", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DynamicNetwork.t_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.save_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.plot_maze", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.get_action", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DynamicNetwork.t_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DynamicNetwork.t_model", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.ReplayMemory.push", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.plot_par", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.soft_q_update", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.get_q", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.get_mean_state", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.DUAL_SMC.get_mean_state", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.dual_smc.GaussianPolicy.sample"], ["def", "dualsmc", "(", ")", ":", "\n", "    ", "model", "=", "DUAL_SMC", "(", ")", "\n", "step_list", "=", "[", "]", "\n", "dist_list", "=", "[", "]", "\n", "rmse_per_step", "=", "np", ".", "zeros", "(", "(", "MAX_STEPS", ")", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", ">", "1", ":", "\n", "        ", "load_path", "=", "sys", ".", "argv", "[", "1", "]", "\n", "model", ".", "load_model", "(", "load_path", ")", "\n", "\n", "", "experiment_id", "=", "\"dualsmc\"", "+", "get_datetime", "(", ")", "\n", "save_path", "=", "CKPT", "+", "experiment_id", "\n", "img_path", "=", "IMG", "+", "experiment_id", "\n", "check_path", "(", "save_path", ")", "\n", "check_path", "(", "img_path", ")", "\n", "\n", "for", "episode", "in", "range", "(", "MAX_EPISODES", ")", ":", "\n", "        ", "episode", "+=", "1", "\n", "env", "=", "Environment", "(", ")", "\n", "filter_dist", "=", "0", "\n", "trajectory", "=", "[", "]", "\n", "\n", "hidden", "=", "np", ".", "zeros", "(", "(", "NUM_LSTM_LAYER", ",", "1", ",", "DIM_LSTM_HIDDEN", ")", ")", "\n", "cell", "=", "np", ".", "zeros", "(", "(", "NUM_LSTM_LAYER", ",", "1", ",", "DIM_LSTM_HIDDEN", ")", ")", "\n", "\n", "curr_state", "=", "env", ".", "state", "\n", "curr_obs", "=", "env", ".", "get_observation", "(", ")", "\n", "trajectory", ".", "append", "(", "curr_state", ")", "\n", "\n", "par_states", "=", "np", ".", "random", ".", "rand", "(", "NUM_PAR_PF", ",", "2", ")", "\n", "par_states", "[", ":", ",", "0", "]", "=", "par_states", "[", ":", ",", "0", "]", "*", "0.4", "+", "0.8", "\n", "par_states", "[", ":", ",", "1", "]", "=", "par_states", "[", ":", ",", "1", "]", "*", "0.3", "+", "0.1", "+", "np", ".", "random", ".", "randint", "(", "2", ",", "size", "=", "NUM_PAR_PF", ")", "*", "0.5", "\n", "par_weight", "=", "torch", ".", "log", "(", "torch", ".", "ones", "(", "(", "NUM_PAR_PF", ")", ")", ".", "to", "(", "device", ")", "*", "(", "1.0", "/", "float", "(", "NUM_PAR_PF", ")", ")", ")", "\n", "normalized_weights", "=", "torch", ".", "softmax", "(", "par_weight", ",", "-", "1", ")", "\n", "mean_state", "=", "model", ".", "get_mean_state", "(", "par_states", ",", "normalized_weights", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "SHOW_TRAJ", "and", "episode", "%", "DISPLAY_ITER", "==", "0", ":", "\n", "            ", "traj_dir", "=", "img_path", "+", "\"/iter-\"", "+", "str", "(", "episode", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "traj_dir", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "traj_dir", ")", "\n", "", "os", ".", "mkdir", "(", "traj_dir", ")", "\n", "\n", "", "num_par_propose", "=", "int", "(", "NUM_PAR_PF", "*", "PP_RATIO", ")", "\n", "for", "step", "in", "range", "(", "MAX_STEPS", ")", ":", "\n", "# 1. observation model", "\n", "# 2. planning", "\n", "# 3. re-sample", "\n", "# 4. transition model", "\n", "\n", "#######################################", "\n", "# Observation model", "\n", "            ", "lik", ",", "next_hidden", ",", "next_cell", "=", "model", ".", "measure_net", ".", "m_model", "(", "\n", "torch", ".", "FloatTensor", "(", "par_states", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "curr_obs", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "hidden", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "cell", ")", ".", "to", "(", "device", ")", ")", "\n", "par_weight", "+=", "lik", ".", "squeeze", "(", ")", "# (NUM_PAR_PF)", "\n", "normalized_weights", "=", "torch", ".", "softmax", "(", "par_weight", ",", "-", "1", ")", "\n", "\n", "if", "SHOW_DISTR", "and", "episode", "%", "DISPLAY_ITER", "==", "0", ":", "\n", "                ", "if", "step", "<", "10", ":", "\n", "                    ", "file_name", "=", "'im00'", "+", "str", "(", "step", ")", "\n", "", "elif", "step", "<", "100", ":", "\n", "                    ", "file_name", "=", "'im0'", "+", "str", "(", "step", ")", "\n", "", "else", ":", "\n", "                    ", "file_name", "=", "'im'", "+", "str", "(", "step", ")", "\n", "", "frm_name", "=", "traj_dir", "+", "'/'", "+", "file_name", "+", "'_distr'", "+", "FIG_FORMAT", "\n", "weights", "=", "normalized_weights", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fig1", ",", "ax1", "=", "plt", ".", "subplots", "(", ")", "\n", "plt", ".", "hist", "(", "weights", ",", "bins", "=", "np", ".", "logspace", "(", "-", "5", ",", "0", ",", "50", ")", ")", "\n", "ax1", ".", "set_xscale", "(", "\"log\"", ")", "\n", "ax1", ".", "set_xlim", "(", "1e-5", ",", "1e0", ")", "\n", "plt", ".", "savefig", "(", "frm_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "curr_s", "=", "par_states", ".", "copy", "(", ")", "\n", "\n", "#######################################", "\n", "# Planning", "\n", "if", "SMCP_MODE", "==", "'topk'", ":", "\n", "                ", "weight_init", ",", "idx", "=", "torch", ".", "topk", "(", "par_weight", ",", "NUM_PAR_SMC_INIT", ")", "\n", "idx", "=", "idx", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "SMCP_MODE", "==", "'samp'", ":", "\n", "                ", "idx", "=", "torch", ".", "multinomial", "(", "normalized_weights", ",", "NUM_PAR_SMC_INIT", ",", "replacement", "=", "True", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "weight_init", "=", "par_weight", "[", "idx", "]", "\n", "", "weight_init", "=", "torch", ".", "softmax", "(", "weight_init", ",", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "NUM_PAR_SMC", ")", "# [M, N]", "\n", "states_init", "=", "par_states", "[", "idx", "]", "# [K, C] -> [M, C]", "\n", "states_init_", "=", "np", ".", "reshape", "(", "states_init", ",", "(", "1", ",", "NUM_PAR_SMC_INIT", ",", "1", ",", "DIM_STATE", ")", ")", "# [1, M, 1, C]", "\n", "smc_states", "=", "np", ".", "tile", "(", "states_init_", ",", "(", "HORIZON", ",", "1", ",", "NUM_PAR_SMC", ",", "1", ")", ")", "# [1, M, 1, C] -> [T, M, N, C]", "\n", "smc_action", "=", "np", ".", "zeros", "(", "(", "HORIZON", ",", "NUM_PAR_SMC", ",", "DIM_ACTION", ")", ")", "# [T, N, dim_a]", "\n", "smc_weight", "=", "torch", ".", "log", "(", "torch", ".", "ones", "(", "(", "NUM_PAR_SMC", ")", ")", ".", "to", "(", "device", ")", "*", "(", "1.0", "/", "float", "(", "NUM_PAR_SMC", ")", ")", ")", "# [N]", "\n", "mean_state", "=", "np", ".", "reshape", "(", "mean_state", ",", "(", "1", ",", "1", ",", "DIM_STATE", ")", ")", "# [1, 1, C]", "\n", "smc_mean_state", "=", "np", ".", "tile", "(", "mean_state", ",", "(", "HORIZON", ",", "NUM_PAR_SMC", ",", "1", ")", ")", "# [T, N, C]", "\n", "prev_q", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "HORIZON", ")", ":", "\n", "                ", "curr_smc_state", "=", "torch", ".", "FloatTensor", "(", "smc_states", "[", "i", "]", ")", ".", "to", "(", "device", ")", "# [M, N, C]", "\n", "action", ",", "log_prob", "=", "model", ".", "policy", ".", "get_action", "(", "\n", "torch", ".", "FloatTensor", "(", "smc_mean_state", "[", "i", "]", ")", ".", "to", "(", "device", ")", ",", "# [N, C]", "\n", "torch", ".", "transpose", "(", "curr_smc_state", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "NUM_PAR_SMC", ",", "-", "1", ")", ")", "# [N, M * C]", "\n", "action_tile", "=", "action", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "NUM_PAR_SMC_INIT", ",", "1", ",", "1", ")", ".", "view", "(", "-", "1", ",", "DIM_ACTION", ")", "\n", "\n", "next_smc_state", "=", "model", ".", "dynamic_net", ".", "t_model", "(", "\n", "torch", ".", "FloatTensor", "(", "smc_states", "[", "i", "]", ")", ".", "to", "(", "device", ")", ".", "view", "(", "-", "1", ",", "DIM_STATE", ")", ",", "action_tile", "*", "STEP_RANGE", ")", "\n", "next_smc_state", "[", ":", ",", "0", "]", "=", "torch", ".", "clamp", "(", "next_smc_state", "[", ":", ",", "0", "]", ",", "0", ",", "2", ")", "\n", "next_smc_state", "[", ":", ",", "1", "]", "=", "torch", ".", "clamp", "(", "next_smc_state", "[", ":", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "next_smc_state", "=", "next_smc_state", ".", "view", "(", "NUM_PAR_SMC_INIT", ",", "NUM_PAR_SMC", ",", "DIM_STATE", ")", "\n", "\n", "mean_par", "=", "model", ".", "dynamic_net", ".", "t_model", "(", "\n", "torch", ".", "FloatTensor", "(", "smc_mean_state", "[", "i", "]", ")", ".", "to", "(", "device", ")", ",", "action", "*", "STEP_RANGE", ")", "\n", "mean_par", "[", ":", ",", "0", "]", "=", "torch", ".", "clamp", "(", "mean_par", "[", ":", ",", "0", "]", ",", "0", ",", "2", ")", "\n", "mean_par", "[", ":", ",", "1", "]", "=", "torch", ".", "clamp", "(", "mean_par", "[", ":", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "\n", "if", "i", "<", "HORIZON", "-", "1", ":", "\n", "                    ", "smc_action", "[", "i", "]", "=", "action", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "smc_states", "[", "i", "+", "1", "]", "=", "next_smc_state", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "smc_mean_state", "[", "i", "+", "1", "]", "=", "mean_par", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "q", "=", "model", ".", "get_q", "(", "curr_smc_state", ".", "view", "(", "-", "1", ",", "DIM_STATE", ")", ",", "action_tile", ")", ".", "view", "(", "NUM_PAR_SMC_INIT", ",", "-", "1", ")", "\n", "advantage", "=", "q", "-", "prev_q", "-", "log_prob", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "NUM_PAR_SMC_INIT", ",", "1", ")", "# [M, N]", "\n", "advantage", "=", "torch", ".", "sum", "(", "weight_init", "*", "advantage", ",", "0", ")", ".", "squeeze", "(", ")", "# [N]", "\n", "smc_weight", "+=", "advantage", "\n", "prev_q", "=", "q", "\n", "normalized_smc_weight", "=", "F", ".", "softmax", "(", "smc_weight", ",", "-", "1", ")", "# [N]", "\n", "\n", "if", "SMCP_RESAMPLE", "and", "(", "i", "%", "SMCP_RESAMPLE_STEP", "==", "1", ")", ":", "\n", "                    ", "idx", "=", "torch", ".", "multinomial", "(", "normalized_smc_weight", ",", "NUM_PAR_SMC", ",", "replacement", "=", "True", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "smc_action", "=", "smc_action", "[", ":", ",", "idx", ",", ":", "]", "\n", "smc_states", "=", "smc_states", "[", ":", ",", ":", ",", "idx", ",", ":", "]", "\n", "smc_mean_state", "=", "smc_mean_state", "[", ":", ",", "idx", ",", ":", "]", "\n", "smc_weight", "=", "torch", ".", "log", "(", "torch", ".", "ones", "(", "(", "NUM_PAR_SMC", ")", ")", ".", "to", "(", "device", ")", "*", "(", "1.0", "/", "float", "(", "NUM_PAR_SMC", ")", ")", ")", "\n", "normalized_smc_weight", "=", "F", ".", "softmax", "(", "smc_weight", ",", "-", "1", ")", "# [N]", "\n", "\n", "", "", "smc_xy", "=", "np", ".", "reshape", "(", "smc_states", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "(", "-", "1", ",", "NUM_PAR_SMC_INIT", "*", "NUM_PAR_SMC", ",", "2", ")", ")", "\n", "\n", "if", "SMCP_RESAMPLE", "and", "(", "HORIZON", "%", "SMCP_RESAMPLE_STEP", "==", "0", ")", ":", "\n", "                ", "n", "=", "np", ".", "random", ".", "randint", "(", "NUM_PAR_SMC", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "n", "=", "Categorical", "(", "normalized_smc_weight", ")", ".", "sample", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "", "action", "=", "smc_action", "[", "0", ",", "n", ",", ":", "]", "\n", "\n", "#######################################", "\n", "if", "step", "%", "PF_RESAMPLE_STEP", "==", "0", ":", "\n", "                ", "if", "PP_EXIST", ":", "\n", "                    ", "idx", "=", "torch", ".", "multinomial", "(", "normalized_weights", ",", "NUM_PAR_PF", "-", "num_par_propose", ",", "\n", "replacement", "=", "True", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "resample_state", "=", "par_states", "[", "idx", "]", "\n", "proposal_state", "=", "model", ".", "pp_net", "(", "torch", ".", "FloatTensor", "(", "curr_obs", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "num_par_propose", ")", "\n", "proposal_state", "[", ":", ",", "0", "]", "=", "torch", ".", "clamp", "(", "proposal_state", "[", ":", ",", "0", "]", ",", "0", ",", "2", ")", "\n", "proposal_state", "[", ":", ",", "1", "]", "=", "torch", ".", "clamp", "(", "proposal_state", "[", ":", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "proposal_state", "=", "proposal_state", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "par_states", "=", "np", ".", "concatenate", "(", "(", "resample_state", ",", "proposal_state", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "idx", "=", "torch", ".", "multinomial", "(", "normalized_weights", ",", "NUM_PAR_PF", ",", "replacement", "=", "True", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "par_states", "=", "par_states", "[", "idx", "]", "\n", "\n", "", "par_weight", "=", "torch", ".", "log", "(", "torch", ".", "ones", "(", "(", "NUM_PAR_PF", ")", ")", ".", "to", "(", "device", ")", "*", "(", "1.0", "/", "float", "(", "NUM_PAR_PF", ")", ")", ")", "\n", "normalized_weights", "=", "torch", ".", "softmax", "(", "par_weight", ",", "-", "1", ")", "\n", "\n", "", "mean_state", "=", "model", ".", "get_mean_state", "(", "par_states", ",", "normalized_weights", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "filter_rmse", "=", "math", ".", "sqrt", "(", "pow", "(", "mean_state", "[", "0", "]", "-", "curr_state", "[", "0", "]", ",", "2", ")", "+", "pow", "(", "mean_state", "[", "1", "]", "-", "curr_state", "[", "1", "]", ",", "2", ")", ")", "\n", "rmse_per_step", "[", "step", "]", "+=", "filter_rmse", "\n", "filter_dist", "+=", "filter_rmse", "\n", "\n", "#######################################", "\n", "if", "SHOW_TRAJ", "and", "episode", "%", "DISPLAY_ITER", "==", "0", ":", "\n", "                ", "if", "step", "<", "10", ":", "\n", "                    ", "file_name", "=", "'im00'", "+", "str", "(", "step", ")", "\n", "", "elif", "step", "<", "100", ":", "\n", "                    ", "file_name", "=", "'im0'", "+", "str", "(", "step", ")", "\n", "", "else", ":", "\n", "                    ", "file_name", "=", "'im'", "+", "str", "(", "step", ")", "\n", "", "frm_name", "=", "traj_dir", "+", "'/'", "+", "file_name", "+", "'_par'", "+", "FIG_FORMAT", "\n", "\n", "if", "PP_EXIST", "and", "step", "%", "PF_RESAMPLE_STEP", "==", "0", ":", "\n", "                    ", "plot_par", "(", "frm_name", ",", "curr_state", ",", "mean_state", ",", "resample_state", ",", "proposal_state", ",", "smc_xy", ")", "\n", "\n", "#######################################", "\n", "# Update the environment", "\n", "", "", "reward", "=", "env", ".", "step", "(", "action", "*", "STEP_RANGE", ")", "\n", "next_state", "=", "env", ".", "state", "\n", "next_obs", "=", "env", ".", "get_observation", "(", ")", "\n", "\n", "#######################################", "\n", "if", "TRAIN", ":", "\n", "                ", "model", ".", "replay_buffer", ".", "push", "(", "curr_state", ",", "action", ",", "reward", ",", "next_state", ",", "env", ".", "done", ",", "curr_obs", ",", "\n", "curr_s", ",", "mean_state", ",", "hidden", ",", "cell", ",", "states_init", ")", "\n", "if", "len", "(", "model", ".", "replay_buffer", ")", ">", "BATCH_SIZE", ":", "\n", "                    ", "model", ".", "soft_q_update", "(", ")", "\n", "\n", "#######################################", "\n", "# Transition Model", "\n", "", "", "par_states", "=", "model", ".", "dynamic_net", ".", "t_model", "(", "torch", ".", "FloatTensor", "(", "par_states", ")", ".", "to", "(", "device", ")", ",", "\n", "torch", ".", "FloatTensor", "(", "action", "*", "STEP_RANGE", ")", ".", "to", "(", "device", ")", ")", "\n", "par_states", "[", ":", ",", "0", "]", "=", "torch", ".", "clamp", "(", "par_states", "[", ":", ",", "0", "]", ",", "0", ",", "2", ")", "\n", "par_states", "[", ":", ",", "1", "]", "=", "torch", ".", "clamp", "(", "par_states", "[", ":", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "par_states", "=", "par_states", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "#######################################", "\n", "curr_state", "=", "next_state", "\n", "curr_obs", "=", "next_obs", "\n", "hidden", "=", "next_hidden", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cell", "=", "next_cell", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "trajectory", ".", "append", "(", "next_state", ")", "\n", "if", "env", ".", "done", ":", "\n", "                ", "break", "\n", "\n", "", "", "filter_dist", "=", "filter_dist", "/", "(", "step", "+", "1", ")", "\n", "dist_list", ".", "append", "(", "filter_dist", ")", "\n", "step_list", ".", "append", "(", "step", ")", "\n", "\n", "if", "episode", ">=", "SUMMARY_ITER", ":", "\n", "            ", "step_list", ".", "pop", "(", "0", ")", "\n", "dist_list", ".", "pop", "(", "0", ")", "\n", "\n", "", "if", "episode", "%", "SAVE_ITER", "==", "0", ":", "\n", "            ", "model_path", "=", "save_path", "+", "'_'", "+", "str", "(", "episode", ")", "\n", "model", ".", "save_model", "(", "model_path", ")", "\n", "print", "(", "\"save model to %s\"", "%", "model_path", ")", "\n", "\n", "", "if", "episode", "%", "DISPLAY_ITER", "==", "0", ":", "\n", "            ", "st", "=", "img_path", "+", "\"/\"", "+", "str", "(", "episode", ")", "+", "\"-trj\"", "+", "FIG_FORMAT", "\n", "print", "(", "\"plotting ... save to %s\"", "%", "st", ")", "\n", "plot_maze", "(", "figure_name", "=", "st", ",", "states", "=", "np", ".", "array", "(", "trajectory", ")", ")", "\n", "\n", "if", "episode", ">=", "SUMMARY_ITER", ":", "\n", "                ", "total_iter", "=", "SUMMARY_ITER", "\n", "", "else", ":", "\n", "                ", "total_iter", "=", "episode", "\n", "", "reach", "=", "np", ".", "array", "(", "step_list", ")", "<", "(", "MAX_STEPS", "-", "1", ")", "\n", "num_reach", "=", "sum", "(", "reach", ")", "\n", "step_reach", "=", "step_list", "*", "reach", "\n", "interaction", "=", "'Episode %s: steps = %s, success = %s, avg_steps = %s, avg_dist = %s'", "%", "(", "\n", "episode", ",", "step", ",", "num_reach", "/", "total_iter", ",", "sum", "(", "step_reach", ")", "/", "(", "num_reach", "+", "const", ")", ",", "sum", "(", "dist_list", ")", "/", "total_iter", ")", "\n", "print", "(", "'\\r{}'", ".", "format", "(", "interaction", ")", ")", "\n", "\n", "", "", "rmse_per_step", "=", "rmse_per_step", "/", "MAX_EPISODES", "\n", "print", "(", "rmse_per_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.check_path": [[11, 15], ["os.path.exists", "print", "os.makedirs"], "function", ["None"], ["def", "check_path", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "\"[INFO] making folder %s\"", "%", "path", ")", "\n", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.get_datetime": [[16, 19], ["datetime.datetime.now", "datetime.datetime.now.strftime"], "function", ["None"], ["", "", "def", "get_datetime", "(", ")", ":", "\n", "    ", "currentDT", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "return", "currentDT", ".", "strftime", "(", "\"%m%d%H%M\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.detect_collison": [[20, 43], ["len", "len"], "function", ["None"], ["", "def", "detect_collison", "(", "curr_state", ",", "next_state", ")", ":", "\n", "    ", "if", "len", "(", "curr_state", ".", "shape", ")", "==", "1", ":", "\n", "        ", "cx", "=", "curr_state", "[", "0", "]", "\n", "cy", "=", "curr_state", "[", "1", "]", "\n", "nx", "=", "next_state", "[", "0", "]", "\n", "ny", "=", "next_state", "[", "1", "]", "\n", "", "elif", "len", "(", "curr_state", ".", "shape", ")", "==", "2", ":", "\n", "        ", "cx", "=", "curr_state", "[", ":", ",", "0", "]", "\n", "cy", "=", "curr_state", "[", ":", ",", "1", "]", "\n", "nx", "=", "next_state", "[", ":", ",", "0", "]", "\n", "ny", "=", "next_state", "[", ":", ",", "1", "]", "\n", "", "cond_hit", "=", "(", "nx", "<", "0", ")", "+", "(", "nx", ">", "2", ")", "+", "(", "ny", "<", "0", ")", "+", "(", "ny", ">", "1", ")", "# hit the surrounding walls", "\n", "cond_hit", "+=", "(", "cy", "<=", "0.5", ")", "*", "(", "ny", ">", "0.5", ")", "# cross the middle wall", "\n", "cond_hit", "+=", "(", "cy", ">=", "0.5", ")", "*", "(", "ny", "<", "0.5", ")", "# cross the middle wall", "\n", "cond_hit", "+=", "(", "cx", "<=", "1.2", ")", "*", "(", "nx", ">", "1.2", ")", "*", "(", "(", "cy", ">", "0.9", ")", "*", "(", "cy", "<", "1", ")", "+", "(", "ny", ">", "0.9", ")", "*", "(", "ny", "<", "1", ")", ")", "\n", "cond_hit", "+=", "(", "cx", ">=", "1.2", ")", "*", "(", "nx", "<", "1.2", ")", "*", "(", "(", "cy", ">", "0.9", ")", "*", "(", "cy", "<", "1", ")", "+", "(", "ny", ">", "0.9", ")", "*", "(", "ny", "<", "1", ")", ")", "\n", "cond_hit", "+=", "(", "cx", "<=", "0.4", ")", "*", "(", "nx", ">", "0.4", ")", "*", "(", "(", "cy", ">", "0.4", ")", "*", "(", "cy", "<", "0.5", ")", "+", "(", "ny", ">", "0.4", ")", "*", "(", "ny", "<", "0.5", ")", ")", "\n", "cond_hit", "+=", "(", "cx", ">=", "0.4", ")", "*", "(", "nx", "<", "0.4", ")", "*", "(", "(", "cy", ">", "0.4", ")", "*", "(", "cy", "<", "0.5", ")", "+", "(", "ny", ">", "0.4", ")", "*", "(", "ny", "<", "0.5", ")", ")", "\n", "cond_hit", "+=", "(", "cx", "<=", "1.2", ")", "*", "(", "nx", ">", "1.2", ")", "*", "(", "(", "cy", ">", "0.5", ")", "*", "(", "cy", "<", "0.6", ")", "+", "(", "ny", ">", "0.5", ")", "*", "(", "ny", "<", "0.6", ")", ")", "\n", "cond_hit", "+=", "(", "cx", ">=", "1.2", ")", "*", "(", "nx", "<", "1.2", ")", "*", "(", "(", "cy", ">", "0.5", ")", "*", "(", "cy", "<", "0.6", ")", "+", "(", "ny", ">", "0.5", ")", "*", "(", "ny", "<", "0.6", ")", ")", "\n", "cond_hit", "+=", "(", "cx", "<=", "0.4", ")", "*", "(", "nx", ">", "0.4", ")", "*", "(", "(", "cy", ">", "0.0", ")", "*", "(", "cy", "<", "0.1", ")", "+", "(", "ny", ">", "0.0", ")", "*", "(", "ny", "<", "0.1", ")", ")", "\n", "cond_hit", "+=", "(", "cx", ">=", "0.4", ")", "*", "(", "nx", "<", "0.4", ")", "*", "(", "(", "cy", ">", "0.0", ")", "*", "(", "cy", "<", "0.1", ")", "+", "(", "ny", ">", "0.0", ")", "*", "(", "ny", "<", "0.1", ")", ")", "\n", "return", "cond_hit", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.l2_distance": [[44, 52], ["len", "len", "numpy.power", "numpy.power", "len"], "function", ["None"], ["", "def", "l2_distance", "(", "state", ",", "goal", ")", ":", "\n", "    ", "if", "len", "(", "state", ".", "shape", ")", "==", "1", ":", "\n", "        ", "dist", "=", "np", ".", "power", "(", "(", "state", "[", "0", "]", "-", "goal", "[", "0", "]", ")", ",", "2", ")", "+", "np", ".", "power", "(", "(", "state", "[", "1", "]", "-", "goal", "[", "1", "]", ")", ",", "2", ")", "+", "const", "\n", "", "elif", "len", "(", "state", ".", "shape", ")", "==", "2", ":", "\n", "        ", "dist", "=", "(", "state", "[", ":", ",", "0", "]", "-", "goal", "[", ":", ",", "0", "]", ")", ".", "pow", "(", "2", ")", "+", "(", "state", "[", ":", ",", "1", "]", "-", "goal", "[", ":", ",", "1", "]", ")", ".", "pow", "(", "2", ")", "+", "const", "\n", "", "elif", "len", "(", "state", ".", "shape", ")", "==", "3", ":", "\n", "        ", "dist", "=", "(", "state", "[", ":", ",", ":", ",", "0", "]", "-", "goal", "[", ":", ",", ":", ",", "0", "]", ")", ".", "pow", "(", "2", ")", "+", "(", "state", "[", ":", ",", ":", ",", "1", "]", "-", "goal", "[", ":", ",", ":", ",", "1", "]", ")", ".", "pow", "(", "2", ")", "+", "const", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.plot_maze": [[53, 102], ["matplotlib.figure", "matplotlib.axes", "plt.axes.set_xlim", "plt.axes.set_ylim", "plt.axes.add_artist", "numpy.array", "numpy.array", "plt.axes.plot", "plt.axes.plot", "plt.axes.set_aspect", "matplotlib.savefig", "matplotlib.close", "matplotlib.Circle", "matplotlib.Circle", "type", "zip", "plt.axes.plot", "plt.axes.plot"], "function", ["None"], ["", "def", "plot_maze", "(", "figure_name", "=", "'default'", ",", "states", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figure_name", ")", "\n", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "\n", "ax", ".", "set_xlim", "(", "[", "0", ",", "2", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "\n", "# goals", "\n", "if", "states", "[", "0", ",", "1", "]", "<=", "0.5", ":", "\n", "        ", "cir", "=", "plt", ".", "Circle", "(", "(", "2", ",", "0.25", ")", ",", "0.07", ",", "color", "=", "'orange'", ")", "\n", "", "else", ":", "\n", "        ", "cir", "=", "plt", ".", "Circle", "(", "(", "0", ",", "0.75", ")", ",", "0.07", ",", "color", "=", "'orange'", ")", "\n", "", "ax", ".", "add_artist", "(", "cir", ")", "\n", "\n", "walls", "=", "np", ".", "array", "(", "[", "\n", "# horizontal", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "2", ",", "0", "]", "]", ",", "\n", "[", "[", "0", ",", "0.5", "]", ",", "[", "2", ",", "0.5", "]", "]", ",", "\n", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "1", "]", "]", ",", "\n", "# vertical", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ",", "\n", "[", "[", "2", ",", "0", "]", ",", "[", "2", ",", "1", "]", "]", ",", "\n", "[", "[", "0.4", ",", "0.4", "]", ",", "[", "0.4", ",", "0.5", "]", "]", ",", "\n", "[", "[", "1.2", ",", "0.9", "]", ",", "[", "1.2", ",", "1", "]", "]", ",", "\n", "[", "[", "0.4", ",", "0.0", "]", ",", "[", "0.4", ",", "0.1", "]", "]", ",", "\n", "[", "[", "1.2", ",", "0.5", "]", ",", "[", "1.2", ",", "0.6", "]", "]", ",", "\n", "]", ")", "\n", "walls_dotted", "=", "np", ".", "array", "(", "[", "\n", "[", "[", "0", ",", "0.4", "]", ",", "[", "2", ",", "0.4", "]", "]", ",", "\n", "[", "[", "0", ",", "0.9", "]", ",", "[", "2", ",", "0.9", "]", "]", ",", "\n", "[", "[", "0", ",", "0.6", "]", ",", "[", "2", ",", "0.6", "]", "]", ",", "\n", "[", "[", "0", ",", "0.1", "]", ",", "[", "2", ",", "0.1", "]", "]", ",", "\n", "]", ")", "\n", "\n", "color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "ax", ".", "plot", "(", "walls", "[", ":", ",", ":", ",", "0", "]", ".", "T", ",", "walls", "[", ":", ",", ":", ",", "1", "]", ".", "T", ",", "color", "=", "color", ",", "linewidth", "=", "1.0", ")", "\n", "\n", "color", "=", "(", "0", ",", "0", ",", "1", ")", "\n", "ax", ".", "plot", "(", "walls_dotted", "[", ":", ",", ":", ",", "0", "]", ".", "T", ",", "walls_dotted", "[", ":", ",", ":", ",", "1", "]", ".", "T", ",", "color", "=", "color", ",", "linewidth", "=", "1.0", ",", "linestyle", "=", "'--'", ")", "\n", "\n", "if", "type", "(", "states", ")", "is", "np", ".", "ndarray", ":", "\n", "        ", "xy", "=", "states", "[", ":", ",", ":", "2", "]", "\n", "x", ",", "y", "=", "zip", "(", "*", "xy", ")", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "'ro'", ")", "\n", "ax", ".", "plot", "(", "x", "[", "0", "]", ",", "y", "[", "0", "]", ",", "'bo'", ")", "\n", "\n", "", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "plt", ".", "savefig", "(", "figure_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.plot_par": [[104, 164], ["matplotlib.figure", "matplotlib.axes", "plt.axes.set_xlim", "plt.axes.set_ylim", "plt.axes.add_artist", "numpy.array", "numpy.array", "plt.axes.plot", "plt.axes.plot", "range", "plt.axes.plot", "plt.axes.plot", "zip", "plt.axes.plot", "zip", "plt.axes.plot", "plt.axes.set_aspect", "matplotlib.savefig", "matplotlib.close", "matplotlib.Circle", "matplotlib.Circle", "plt.axes.plot"], "function", ["None"], ["", "def", "plot_par", "(", "figure_name", "=", "'default'", ",", "true_state", "=", "None", ",", "mean_state", "=", "None", ",", "pf_state", "=", "None", ",", "\n", "pp_state", "=", "None", ",", "smc_traj", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figure_name", ")", "\n", "ax", "=", "plt", ".", "axes", "(", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0", ",", "2", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "\n", "# goals", "\n", "if", "true_state", "[", "1", "]", "<=", "0.5", ":", "\n", "        ", "cir", "=", "plt", ".", "Circle", "(", "(", "2", ",", "0.25", ")", ",", "0.07", ",", "color", "=", "'orange'", ")", "\n", "", "else", ":", "\n", "        ", "cir", "=", "plt", ".", "Circle", "(", "(", "0", ",", "0.75", ")", ",", "0.07", ",", "color", "=", "'orange'", ")", "\n", "", "ax", ".", "add_artist", "(", "cir", ")", "\n", "\n", "walls", "=", "np", ".", "array", "(", "[", "\n", "# horizontal", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "2", ",", "0", "]", "]", ",", "\n", "[", "[", "0", ",", "0.5", "]", ",", "[", "2", ",", "0.5", "]", "]", ",", "\n", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "1", "]", "]", ",", "\n", "# vertical", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "1", "]", "]", ",", "\n", "[", "[", "2", ",", "0", "]", ",", "[", "2", ",", "1", "]", "]", ",", "\n", "[", "[", "0.4", ",", "0.4", "]", ",", "[", "0.4", ",", "0.5", "]", "]", ",", "\n", "[", "[", "1.2", ",", "0.9", "]", ",", "[", "1.2", ",", "1", "]", "]", ",", "\n", "[", "[", "0.4", ",", "0.0", "]", ",", "[", "0.4", ",", "0.1", "]", "]", ",", "\n", "[", "[", "1.2", ",", "0.5", "]", ",", "[", "1.2", ",", "0.6", "]", "]", ",", "\n", "]", ")", "\n", "walls_dotted", "=", "np", ".", "array", "(", "[", "\n", "[", "[", "0", ",", "0.4", "]", ",", "[", "2", ",", "0.4", "]", "]", ",", "\n", "[", "[", "0", ",", "0.9", "]", ",", "[", "2", ",", "0.9", "]", "]", ",", "\n", "[", "[", "0", ",", "0.6", "]", ",", "[", "2", ",", "0.6", "]", "]", ",", "\n", "[", "[", "0", ",", "0.1", "]", ",", "[", "2", ",", "0.1", "]", "]", ",", "\n", "]", ")", "\n", "\n", "color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "ax", ".", "plot", "(", "walls", "[", ":", ",", ":", ",", "0", "]", ".", "T", ",", "walls", "[", ":", ",", ":", ",", "1", "]", ".", "T", ",", "color", "=", "color", ",", "linewidth", "=", "1.0", ")", "\n", "\n", "color", "=", "(", "0", ",", "0", ",", "1", ")", "\n", "ax", ".", "plot", "(", "walls_dotted", "[", ":", ",", ":", ",", "0", "]", ".", "T", ",", "walls_dotted", "[", ":", ",", ":", ",", "1", "]", ".", "T", ",", "color", "=", "color", ",", "linewidth", "=", "1.0", ",", "linestyle", "=", "'--'", ")", "\n", "\n", "# planning trajectories", "\n", "num_par_smc", "=", "smc_traj", ".", "shape", "[", "1", "]", "\n", "for", "k", "in", "range", "(", "num_par_smc", ")", ":", "\n", "        ", "points", "=", "smc_traj", "[", ":", ",", "k", ",", ":", "]", "\n", "ax", ".", "plot", "(", "*", "points", ".", "T", ",", "lw", "=", "1", ",", "color", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "# RGB", "\n", "\n", "", "ax", ".", "plot", "(", "mean_state", "[", "0", "]", ",", "mean_state", "[", "1", "]", ",", "'ko'", ")", "\n", "ax", ".", "plot", "(", "true_state", "[", "0", "]", ",", "true_state", "[", "1", "]", ",", "'ro'", ")", "\n", "\n", "xy", "=", "pf_state", "[", ":", ",", ":", "2", "]", "\n", "x", ",", "y", "=", "zip", "(", "*", "xy", ")", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "'gx'", ")", "\n", "\n", "xy", "=", "pp_state", "[", ":", ",", ":", "2", "]", "\n", "x", ",", "y", "=", "zip", "(", "*", "xy", ")", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "'bx'", ")", "\n", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "plt", ".", "savefig", "(", "figure_name", ")", "\n", "plt", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.__init__": [[9, 20], ["numpy.random.rand", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "done", "=", "False", "\n", "self", ".", "state", "=", "np", ".", "random", ".", "rand", "(", "2", ")", "\n", "self", ".", "state", "[", "0", "]", "=", "self", ".", "state", "[", "0", "]", "*", "0.4", "+", "0.8", "\n", "self", ".", "state", "[", "1", "]", "=", "self", ".", "state", "[", "1", "]", "*", "0.3", "+", "0.1", "+", "np", ".", "random", ".", "randint", "(", "2", ")", "*", "0.5", "\n", "self", ".", "target1", "=", "np", ".", "array", "(", "[", "2", ",", "0.25", "]", ")", "\n", "self", ".", "target2", "=", "np", ".", "array", "(", "[", "0", ",", "0.75", "]", ")", "\n", "self", ".", "false_target1", "=", "np", ".", "array", "(", "[", "0", ",", "0.25", "]", ")", "\n", "self", ".", "false_target2", "=", "np", ".", "array", "(", "[", "2", ",", "0.75", "]", ")", "\n", "self", ".", "walls_x", "=", "[", "[", "1.2", ",", "0.9", ",", "1", "]", ",", "[", "0.4", ",", "0.4", ",", "0.5", "]", ",", "[", "1.2", ",", "0.5", ",", "0.6", "]", ",", "[", "0.4", ",", "0.0", ",", "0.1", "]", "]", "\n", "self", ".", "walls_y", "=", "[", "[", "0.5", ",", "0", ",", "2", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.get_observation": [[21, 53], ["len", "len", "range", "range", "numpy.array", "numpy.random.normal", "min", "min", "min", "min"], "methods", ["None"], ["", "def", "get_observation", "(", "self", ")", ":", "\n", "        ", "x", "=", "self", ".", "state", "[", "0", "]", "\n", "y", "=", "self", ".", "state", "[", "1", "]", "\n", "obs_x1", "=", "x", "\n", "obs_y1", "=", "y", "\n", "obs_x2", "=", "1", "-", "x", "\n", "obs_y2", "=", "1", "-", "y", "\n", "num_wall_x", "=", "len", "(", "self", ".", "walls_x", ")", "\n", "num_wall_y", "=", "len", "(", "self", ".", "walls_y", ")", "\n", "for", "i", "in", "range", "(", "num_wall_x", ")", ":", "\n", "            ", "wx", "=", "self", ".", "walls_x", "[", "i", "]", "[", "0", "]", "\n", "wy1", "=", "self", ".", "walls_x", "[", "i", "]", "[", "1", "]", "\n", "wy2", "=", "self", ".", "walls_x", "[", "i", "]", "[", "2", "]", "\n", "if", "y", ">", "wy1", "and", "y", "<", "wy2", "and", "x", ">", "wx", ":", "\n", "                ", "dist_x1", "=", "x", "-", "wx", "\n", "obs_x1", "=", "min", "(", "obs_x1", ",", "dist_x1", ")", "\n", "", "if", "y", ">", "wy1", "and", "y", "<", "wy2", "and", "x", "<", "wx", ":", "\n", "                ", "dist_x2", "=", "wx", "-", "x", "\n", "obs_x2", "=", "min", "(", "obs_x2", ",", "dist_x2", ")", "\n", "", "", "for", "i", "in", "range", "(", "num_wall_y", ")", ":", "\n", "            ", "wy", "=", "self", ".", "walls_y", "[", "i", "]", "[", "0", "]", "\n", "wx1", "=", "self", ".", "walls_y", "[", "i", "]", "[", "1", "]", "\n", "wx2", "=", "self", ".", "walls_y", "[", "i", "]", "[", "2", "]", "\n", "if", "x", ">", "wx1", "and", "x", "<", "wx2", "and", "y", ">", "wy", ":", "\n", "                ", "dist_y1", "=", "y", "-", "wy", "\n", "obs_y1", "=", "min", "(", "obs_y1", ",", "dist_y1", ")", "\n", "", "if", "x", ">", "wx1", "and", "x", "<", "wx2", "and", "y", "<", "wy", ":", "\n", "                ", "dist_y2", "=", "wy", "-", "y", "\n", "obs_y2", "=", "min", "(", "obs_y2", ",", "dist_y2", ")", "\n", "", "", "obs", "=", "np", ".", "array", "(", "[", "obs_x1", ",", "obs_y1", ",", "obs_x2", ",", "obs_y2", "]", ")", "\n", "obs", "+=", "np", ".", "random", ".", "normal", "(", "0", ",", "0.01", ",", "DIM_OBS", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.env.Environment.step": [[54, 78], ["utils.l2_distance", "utils.detect_collison", "utils.l2_distance", "utils.l2_distance"], "methods", ["home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.l2_distance", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.detect_collison", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.l2_distance", "home.repos.pwc.inspect_result.Cranial-XIX_DualSMC.None.utils.l2_distance"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "done", "=", "False", "\n", "curr_state", "=", "self", ".", "state", "\n", "next_state", "=", "curr_state", "+", "action", "\n", "\n", "cond", "=", "(", "curr_state", "[", "1", "]", "<=", "0.5", ")", "\n", "target", "=", "cond", "*", "self", ".", "target1", "+", "(", "1", "-", "cond", ")", "*", "self", ".", "target2", "\n", "\n", "next_dist", "=", "l2_distance", "(", "next_state", ",", "target", ")", "\n", "cond_hit", "=", "detect_collison", "(", "curr_state", ",", "next_state", ")", "\n", "\n", "if", "next_dist", "<=", "END_RANGE", ":", "\n", "            ", "self", ".", "state", "=", "next_state", "\n", "self", ".", "done", "=", "True", "\n", "", "elif", "cond_hit", "==", "False", ":", "\n", "            ", "self", ".", "state", "=", "next_state", "\n", "", "reward", "=", "EPI_REWARD", "*", "self", ".", "done", "\n", "\n", "false_target", "=", "cond", "*", "self", ".", "false_target1", "+", "(", "1", "-", "cond", ")", "*", "self", ".", "false_target2", "\n", "curr_false_dist", "=", "l2_distance", "(", "curr_state", ",", "false_target", ")", "\n", "next_false_dist", "=", "l2_distance", "(", "next_state", ",", "false_target", ")", "\n", "cond_false", "=", "(", "curr_false_dist", ">=", "END_RANGE", ")", "*", "(", "next_false_dist", "<", "END_RANGE", ")", "\n", "reward", "-=", "EPI_REWARD", "*", "cond_false", "\n", "return", "reward", "\n", "", "", ""]]}