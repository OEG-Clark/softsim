{"home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.adv_train_pgd.evaluate": [[90, 96], ["time.time", "utils.construct_feed_dict", "utils.construct_feed_dict.update", "sess.run", "time.time", "range", "len"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.construct_feed_dict"], ["def", "evaluate", "(", "features", ",", "support", ",", "labels", ",", "mask", ",", "placeholders", ")", ":", "\n", "    ", "t_test", "=", "time", ".", "time", "(", ")", "\n", "feed_dict_val", "=", "construct_feed_dict", "(", "features", ",", "support", ",", "labels", ",", "mask", ",", "placeholders", ")", "\n", "feed_dict_val", ".", "update", "(", "{", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "\n", "outs_val", "=", "sess", ".", "run", "(", "[", "model", ".", "attack_loss", ",", "model", ".", "accuracy", "]", ",", "feed_dict", "=", "feed_dict_val", ")", "\n", "return", "outs_val", "[", "0", "]", ",", "outs_val", "[", "1", "]", ",", "(", "time", ".", "time", "(", ")", "-", "t_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.__init__": [[12, 37], ["kwargs.keys", "kwargs.get", "kwargs.get", "models.Model.__class__.__name__.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "\n", "self", ".", "vars", "=", "{", "}", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "activations", "=", "[", "]", "\n", "\n", "self", ".", "inputs", "=", "None", "\n", "self", ".", "outputs", "=", "None", "\n", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "accuracy", "=", "0", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "opt_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model._build": [[38, 40], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.build": [[41, 63], ["models.Model.activations.append", "tensorflow.get_collection", "models.Model._loss", "models.Model._attack_loss", "models.Model._accuracy", "models.Model.optimizer.minimize", "tensorflow.variable_scope", "models.Model._build", "layer", "models.Model.activations.append"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN._loss", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN._attack_loss", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN._accuracy", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Build sequential layer model", "\n", "", "self", ".", "activations", ".", "append", "(", "self", ".", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "hidden", "=", "layer", "(", "self", ".", "activations", "[", "-", "1", "]", ")", "\n", "self", ".", "activations", ".", "append", "(", "hidden", ")", "\n", "", "self", ".", "outputs", "=", "self", ".", "activations", "[", "-", "1", "]", "\n", "\n", "# Store model variables for easy access", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n", "# Build metrics", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_attack_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.predict": [[64, 66], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model._loss": [[67, 69], ["None"], "methods", ["None"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model._attack_loss": [[70, 72], ["None"], "methods", ["None"], ["", "def", "_attack_loss", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model._accuracy": [[73, 75], ["None"], "methods", ["None"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.save": [[76, 85], ["tensorflow.train.Saver", "print", "AttributeError", "tensorflow.train.Saver.save", "tensorflow.train.Saver.save"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.save", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.save"], ["", "def", "save", "(", "self", ",", "sess", "=", "None", ",", "path", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "if", "not", "path", ":", "\n", "            ", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "\"tmp1/%s.ckpt\"", "%", "self", ".", "name", ")", "\n", "", "else", ":", "\n", "            ", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "path", ")", "\n", "", "print", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.load_original": [[86, 93], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["None"], ["", "def", "load_original", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "\"tmp1/%s.ckpt\"", "%", "self", ".", "name", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.load": [[94, 101], ["tensorflow.train.Saver", "tensorflow.train.latest_checkpoint", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "path", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "path", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.MLP.__init__": [[104, 116], ["models.Model.__init__", "tensorflow.train.AdamOptimizer", "models.MLP.build", "placeholders[].get_shape().as_list", "placeholders[].get_shape"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.__init__", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.build"], ["    ", "def", "__init__", "(", "self", ",", "placeholders", ",", "input_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "# self.input_dim = self.inputs.get_shape().as_list()[1]  # To be supported in future Tensorflow versions", "\n", "self", ".", "output_dim", "=", "placeholders", "[", "'labels'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.MLP._loss": [[117, 125], ["models.MLP.layers[].vars.values", "metrics.masked_softmax_cross_entropy", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.metrics.masked_softmax_cross_entropy"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "var", "in", "self", ".", "layers", "[", "0", "]", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# Cross entropy error", "\n", "", "self", ".", "loss", "+=", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.MLP._accuracy": [[126, 129], ["metrics.masked_accuracy"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.metrics.masked_accuracy"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "self", ".", "accuracy", "=", "masked_accuracy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.MLP._build": [[130, 145], ["models.MLP.layers.append", "models.MLP.layers.append", "layers.Dense", "layers.Dense"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "hidden1", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "True", ",", "\n", "sparse_inputs", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "FLAGS", ".", "hidden1", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.MLP.predict": [[146, 148], ["tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN.__init__": [[151, 230], ["models.Model.__init__", "print", "placeholders[].get_shape().as_list", "len", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.math.reciprocal", "tensorflow.multiply", "tensorflow.train.AdamOptimizer", "models.GCN.build", "tensorflow.train.AdamOptimizer", "models.GCN.build", "tensorflow.constant", "tensorflow.cast", "tensorflow.transpose", "tensorflow.gradients", "placeholders[].get_shape", "numpy.triu", "tensorflow.eye", "range", "tensorflow.matrix_band_part", "tensorflow.matrix_band_part", "range", "tensorflow.transpose", "range", "tensorflow.multiply", "range", "range", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.gradients", "numpy.ones", "tensorflow.eye", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.reduce_sum", "tensorflow.gradients", "models.GCN.A[].get_shape().as_list", "models.GCN.A[].get_shape().as_list", "tensorflow.maximum", "models.GCN.modified_A[].get_shape().as_list", "models.GCN.modified_A[].get_shape().as_list", "models.GCN.A[].get_shape", "models.GCN.A[].get_shape", "models.GCN.modified_A[].get_shape", "models.GCN.modified_A[].get_shape", "models.GCN.A[].get_shape"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.__init__", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.build", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.build", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.ones"], ["    ", "def", "__init__", "(", "self", ",", "placeholders", ",", "input_dim", ",", "attack", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "print", "(", "'attack method:'", ",", "attack", ")", "\n", "# if attack is False, placeholders['support'] feeds in normalized pre-processed adjacent matrix, ", "\n", "# if attack is True, placeholders['adj'] feeds in raw adjacent matrix and placeholdder['s'] feeds in attack placeholders", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "# self.input_dim = self.inputs.get_shape().as_list()[1]  # To be supported in future Tensorflow versions", "\n", "self", ".", "output_dim", "=", "placeholders", "[", "'labels'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "lmd", "=", "placeholders", "[", "'lmd'", "]", "\n", "self", ".", "attack", "=", "attack", "\n", "\n", "if", "self", ".", "attack", ":", "\n", "            ", "mu", "=", "placeholders", "[", "'mu'", "]", "\n", "\n", "# the length of A list, in fact, self.num_support is always 1", "\n", "self", ".", "num_supports", "=", "len", "(", "placeholders", "[", "'adj'", "]", ")", "\n", "# original adjacent matrix A", "\n", "self", ".", "A", "=", "placeholders", "[", "'adj'", "]", "\n", "self", ".", "mask", "=", "[", "tf", ".", "constant", "(", "np", ".", "triu", "(", "np", ".", "ones", "(", "[", "self", ".", "A", "[", "0", "]", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "]", "*", "2", ",", "dtype", "=", "np", ".", "float32", ")", ",", "1", ")", ")", "]", "\n", "\n", "self", ".", "C", "=", "[", "1", "-", "2", "*", "self", ".", "A", "[", "i", "]", "-", "tf", ".", "eye", "(", "self", ".", "A", "[", "i", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "self", ".", "A", "[", "i", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ")", "for", "i", "in", "range", "(", "self", ".", "num_supports", ")", "]", "\n", "# placeholder for adding edges", "\n", "self", ".", "upper_S_0", "=", "placeholders", "[", "'s'", "]", "\n", "# a strict upper triangular matrix to ensure only N(N-1)/2 trainable variables", "\n", "# here use matrix_band_part to ensure a stricly upper triangular matrix     ", "\n", "self", ".", "upper_S_real", "=", "[", "tf", ".", "matrix_band_part", "(", "self", ".", "upper_S_0", "[", "i", "]", ",", "0", ",", "-", "1", ")", "-", "tf", ".", "matrix_band_part", "(", "self", ".", "upper_S_0", "[", "i", "]", ",", "0", ",", "0", ")", "for", "i", "in", "range", "(", "self", ".", "num_supports", ")", "]", "\n", "# modified_A is the new adjacent matrix", "\n", "self", ".", "upper_S_real2", "=", "[", "self", ".", "upper_S_real", "[", "i", "]", "+", "tf", ".", "transpose", "(", "self", ".", "upper_S_real", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "num_supports", ")", "]", "\n", "self", ".", "modified_A", "=", "[", "self", ".", "A", "[", "i", "]", "+", "tf", ".", "multiply", "(", "self", ".", "upper_S_real2", "[", "i", "]", ",", "self", ".", "C", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "num_supports", ")", "]", "\n", "\"\"\"Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation.\"\"\"", "\n", "self", ".", "hat_A", "=", "[", "tf", ".", "cast", "(", "self", ".", "modified_A", "[", "i", "]", "+", "tf", ".", "eye", "(", "self", ".", "modified_A", "[", "i", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "self", ".", "modified_A", "[", "i", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "for", "i", "in", "range", "(", "self", ".", "num_supports", ")", "]", "\n", "\n", "# get degree by row sum", "\n", "self", ".", "rowsum", "=", "tf", ".", "reduce_sum", "(", "self", ".", "hat_A", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "d_sqrt", "=", "tf", ".", "sqrt", "(", "self", ".", "rowsum", ")", "# square root", "\n", "self", ".", "d_sqrt_inv", "=", "tf", ".", "math", ".", "reciprocal", "(", "self", ".", "d_sqrt", ")", "# reciprocal", "\n", "\n", "self", ".", "support_real", "=", "tf", ".", "multiply", "(", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "self", ".", "hat_A", "[", "0", "]", ",", "self", ".", "d_sqrt_inv", ")", ")", ",", "self", ".", "d_sqrt_inv", ")", "\n", "# this self.support is a list of \\tilde{A} in the paper", "\n", "# replace the 'support' in the placeholders dictionary", "\n", "self", ".", "placeholders", "[", "'support'", "]", "=", "[", "self", ".", "support_real", "]", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "self", ".", "build", "(", ")", "\n", "\n", "\n", "\n", "# proximal gradient algorithm", "\n", "if", "self", ".", "attack", "==", "'PGD'", ":", "\n", "                ", "self", ".", "Sgrad", "=", "tf", ".", "gradients", "(", "self", ".", "attack_loss", ",", "self", ".", "upper_S_real", "[", "0", "]", ")", "\n", "self", ".", "a", "=", "self", ".", "upper_S_real", "[", "0", "]", "+", "mu", "*", "self", ".", "Sgrad", "*", "lmd", "*", "self", ".", "mask", "\n", "", "elif", "self", ".", "attack", "==", "'CW'", ":", "\n", "                ", "label", "=", "placeholders", "[", "'labels'", "]", "\n", "real", "=", "tf", ".", "reduce_sum", "(", "label", "*", "self", ".", "outputs", ",", "1", ")", "\n", "label_mask_expand", "=", "placeholders", "[", "'label_mask_expand'", "]", "\n", "other", "=", "tf", ".", "reduce_max", "(", "(", "1", "-", "label", ")", "*", "label_mask_expand", "*", "self", ".", "outputs", "-", "label", "*", "10000", ",", "1", ")", "\n", "self", ".", "loss1", "=", "tf", ".", "maximum", "(", "0.0", ",", "(", "real", "-", "other", "+", "50", ")", "*", "label_mask_expand", "[", ":", ",", "0", "]", ")", "\n", "self", ".", "loss2", "=", "tf", ".", "reduce_sum", "(", "self", ".", "loss1", ")", "\n", "self", ".", "Sgrad", "=", "tf", ".", "gradients", "(", "self", ".", "loss2", ",", "self", ".", "upper_S_real", "[", "0", "]", ")", "\n", "self", ".", "a", "=", "self", ".", "upper_S_real", "[", "0", "]", "-", "mu", "*", "self", ".", "Sgrad", "*", "lmd", "*", "self", ".", "mask", "\n", "", "elif", "self", ".", "attack", "==", "'minmax'", ":", "\n", "                ", "self", ".", "w", "=", "placeholders", "[", "'w'", "]", "\n", "label", "=", "placeholders", "[", "'labels'", "]", "\n", "self", ".", "real", "=", "tf", ".", "reduce_sum", "(", "label", "*", "self", ".", "outputs", ",", "1", ")", "\n", "label_mask_expand", "=", "placeholders", "[", "'label_mask_expand'", "]", "\n", "self", ".", "other", "=", "tf", ".", "reduce_max", "(", "(", "1", "-", "label", ")", "*", "label_mask_expand", "*", "self", ".", "outputs", "-", "label", "*", "10000", ",", "1", ")", "\n", "self", ".", "loss1", "=", "self", ".", "w", "*", "tf", ".", "maximum", "(", "0.0", ",", "self", ".", "real", "-", "self", ".", "other", "+", "0.", ")", "\n", "self", ".", "loss2", "=", "tf", ".", "reduce_sum", "(", "self", ".", "loss1", ")", "\n", "self", ".", "Sgrad", "=", "tf", ".", "gradients", "(", "self", ".", "loss2", ",", "self", ".", "upper_S_real", "[", "0", "]", ")", "\n", "self", ".", "a", "=", "self", ".", "upper_S_real", "[", "0", "]", "-", "mu", "*", "self", ".", "Sgrad", "*", "self", ".", "mask", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "FLAGS", ".", "learning_rate", ")", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN._attack_loss": [[232, 236], ["metrics.masked_softmax_cross_entropy"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.metrics.masked_softmax_cross_entropy"], ["", "", "def", "_attack_loss", "(", "self", ")", ":", "\n", "# Cross entropy error", "\n", "        ", "self", ".", "attack_loss", "=", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN._loss": [[237, 245], ["models.GCN.layers[].vars.values", "metrics.masked_softmax_cross_entropy", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.metrics.masked_softmax_cross_entropy"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "var", "in", "self", ".", "layers", "[", "0", "]", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "FLAGS", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# Cross entropy error", "\n", "", "self", ".", "loss", "+=", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN._accuracy": [[246, 249], ["metrics.masked_accuracy"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.metrics.masked_accuracy"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "self", ".", "accuracy", "=", "masked_accuracy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN._build": [[250, 266], ["models.GCN.layers.append", "models.GCN.layers.append", "layers.GraphConvolution", "layers.GraphConvolution"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "FLAGS", ".", "hidden1", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "True", ",", "\n", "sparse_inputs", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "FLAGS", ".", "hidden1", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.GCN.predict": [[267, 269], ["tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.metrics.masked_softmax_cross_entropy": [[4, 11], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["def", "masked_softmax_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Softmax cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.metrics.masked_accuracy": [[13, 21], ["tensorflow.equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.argmax"], "function", ["None"], ["", "def", "masked_accuracy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Accuracy with masking.\"\"\"", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "preds", ",", "1", ")", ",", "tf", ".", "argmax", "(", "labels", ",", "1", ")", ")", "\n", "accuracy_all", "=", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "accuracy_all", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "accuracy_all", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.attack.evaluate": [[72, 78], ["time.time", "utils.construct_feed_dict", "utils.construct_feed_dict.update", "sess.run", "time.time", "range", "len"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.construct_feed_dict"], ["def", "evaluate", "(", "features", ",", "support", ",", "labels", ",", "mask", ",", "placeholders", ")", ":", "\n", "    ", "t_test", "=", "time", ".", "time", "(", ")", "\n", "feed_dict_val", "=", "construct_feed_dict", "(", "features", ",", "support", ",", "labels", ",", "mask", ",", "placeholders", ")", "\n", "feed_dict_val", ".", "update", "(", "{", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "\n", "outs_val", "=", "sess", ".", "run", "(", "[", "model", ".", "attack_loss", ",", "model", ".", "accuracy", "]", ",", "feed_dict", "=", "feed_dict_val", ")", "\n", "return", "outs_val", "[", "0", "]", ",", "outs_val", "[", "1", "]", ",", "(", "time", ".", "time", "(", ")", "-", "t_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.train.evaluate": [[76, 82], ["time.time", "utils.construct_feed_dict", "utils.construct_feed_dict.update", "sess.run", "time.time", "range", "len"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.construct_feed_dict"], ["def", "evaluate", "(", "features", ",", "support", ",", "labels", ",", "mask", ",", "placeholders", ")", ":", "\n", "    ", "t_test", "=", "time", ".", "time", "(", ")", "\n", "feed_dict_val", "=", "construct_feed_dict", "(", "features", ",", "support", ",", "labels", ",", "mask", ",", "placeholders", ",", "train", "=", "True", ")", "\n", "feed_dict_val", ".", "update", "(", "{", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "\n", "outs_val", "=", "sess", ".", "run", "(", "[", "model", ".", "attack_loss", ",", "model", ".", "accuracy", ",", "model", ".", "outputs", "]", ",", "feed_dict", "=", "feed_dict_val", ")", "\n", "return", "outs_val", "[", "0", "]", ",", "outs_val", "[", "1", "]", ",", "(", "time", ".", "time", "(", ")", "-", "t_test", ")", ",", "outs_val", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.Layer.__init__": [[54, 67], ["kwargs.keys", "kwargs.get", "kwargs.get", "layers.Layer.__class__.__name__.lower", "str", "layers.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "sparse_inputs", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.Layer._call": [[68, 70], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.Layer.__call__": [[71, 79], ["tensorflow.name_scope", "layers.Layer._call", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.GraphConvolution._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "if", "self", ".", "logging", "and", "not", "self", ".", "sparse_inputs", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/inputs'", ",", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "if", "self", ".", "logging", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/outputs'", ",", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.Layer._log_vars": [[80, 83], ["tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "_log_vars", "(", "self", ")", ":", "\n", "        ", "for", "var", "in", "self", ".", "vars", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/vars/'", "+", "var", ",", "self", ".", "vars", "[", "var", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.Dense.__init__": [[87, 112], ["layers.Layer.__init__", "tensorflow.variable_scope", "inits.glorot", "layers.Dense._log_vars", "inits.zeros"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.__init__", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.glorot", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.Layer._log_vars", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "placeholders", ",", "dropout", "=", "0.", ",", "sparse_inputs", "=", "False", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "bias", "=", "False", ",", "featureless", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "", "self", ".", "act", "=", "act", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.Dense._call": [[113, 130], ["layers.dot", "layers.Dense.act", "layers.sparse_dropout", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.dot", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.sparse_dropout"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# dropout", "\n", "if", "self", ".", "sparse_inputs", ":", "\n", "            ", "x", "=", "sparse_dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ",", "self", ".", "num_features_nonzero", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# transform", "\n", "", "output", "=", "dot", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ",", "sparse", "=", "self", ".", "sparse_inputs", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.GraphConvolution.__init__": [[134, 162], ["layers.Layer.__init__", "tensorflow.variable_scope", "range", "layers.GraphConvolution._log_vars", "len", "inits.glorot", "inits.zeros", "str", "str"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.__init__", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.Layer._log_vars", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.glorot", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "placeholders", ",", "dropout", "=", "0.", ",", "\n", "sparse_inputs", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "bias", "=", "False", ",", "\n", "featureless", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "", "self", ".", "act", "=", "act", "\n", "self", ".", "support", "=", "placeholders", "[", "'support'", "]", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "support", ")", ")", ":", "\n", "                ", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'weights_'", "+", "str", "(", "i", ")", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.GraphConvolution._call": [[163, 189], ["list", "range", "tensorflow.add_n", "layers.GraphConvolution.act", "layers.sparse_dropout", "tensorflow.nn.dropout", "len", "layers.dot", "list.append", "layers.dot", "str", "str"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.sparse_dropout", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.dot", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.dot"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# dropout", "\n", "if", "self", ".", "sparse_inputs", ":", "\n", "            ", "x", "=", "sparse_dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ",", "self", ".", "num_features_nonzero", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# convolve", "\n", "", "supports", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "support", ")", ")", ":", "\n", "            ", "if", "not", "self", ".", "featureless", ":", "\n", "                ", "pre_sup", "=", "dot", "(", "x", ",", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", ",", "\n", "sparse", "=", "self", ".", "sparse_inputs", ")", "\n", "", "else", ":", "\n", "                ", "pre_sup", "=", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", "\n", "", "support", "=", "dot", "(", "self", ".", "support", "[", "i", "]", ",", "pre_sup", ",", "sparse", "=", "self", ".", "sparse_inputs", ")", "\n", "supports", ".", "append", "(", "support", ")", "\n", "", "output", "=", "tf", ".", "add_n", "(", "supports", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "#return output", ""]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.get_layer_uid": [[11, 19], ["None"], "function", ["None"], ["def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.sparse_dropout": [[21, 28], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor"], "function", ["None"], ["", "", "def", "sparse_dropout", "(", "x", ",", "keep_prob", ",", "noise_shape", ")", ":", "\n", "    ", "\"\"\"Dropout for sparse tensors.\"\"\"", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.dot": [[30, 37], ["tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "function", ["None"], ["", "def", "dot", "(", "x", ",", "y", ",", "sparse", "=", "False", ")", ":", "\n", "    ", "\"\"\"Wrapper for tf.matmul (sparse vs dense).\"\"\"", "\n", "if", "sparse", ":", "\n", "        ", "res", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "        ", "res", "=", "tf", ".", "matmul", "(", "x", ",", "y", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.__init__": [[13, 24], ["numpy.sum"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "sess", ",", "model", ",", "features", ",", "epsilon", ",", "k", ",", "mu", ",", "ori_adj", ",", "ratio", ")", ":", "\n", "    ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "eps", "=", "epsilon", "\n", "self", ".", "ori_adj", "=", "ori_adj", "\n", "self", ".", "total_edges", "=", "np", ".", "sum", "(", "self", ".", "ori_adj", ")", "/", "2", "\n", "self", ".", "n_node", "=", "self", ".", "ori_adj", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "xi", "=", "1e-5", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.evaluate": [[25, 31], ["time.time", "utils.construct_feed_dict", "utils.construct_feed_dict.update", "PGD_attack.PGDAttack.sess.run", "time.time", "range", "len"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.construct_feed_dict"], ["", "def", "evaluate", "(", "self", ",", "support", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "t_test", "=", "time", ".", "time", "(", ")", "\n", "feed_dict_val", "=", "construct_feed_dict", "(", "self", ".", "features", ",", "support", ",", "labels", ",", "mask", ",", "self", ".", "model", ".", "placeholders", ")", "\n", "feed_dict_val", ".", "update", "(", "{", "self", ".", "model", ".", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "\n", "outs_val", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "attack_loss", ",", "self", ".", "model", ".", "accuracy", "]", ",", "feed_dict", "=", "feed_dict_val", ")", "\n", "return", "outs_val", "[", "0", "]", ",", "outs_val", "[", "1", "]", ",", "(", "time", ".", "time", "(", ")", "-", "t_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.perturb": [[32, 90], ["range", "time.time", "feed_dict.update", "PGD_attack.PGDAttack.sess.run", "numpy.array", "utils.bisection", "feed_dict.update", "PGD_attack.PGDAttack.evaluate", "print", "print", "range", "print", "numpy.sqrt", "range", "numpy.random.uniform", "numpy.where", "feed_dict.update", "PGD_attack.PGDAttack.sess.run", "PGD_attack.PGDAttack.evaluate", "len", "len", "numpy.count_nonzero", "acc_record.append", "support_record.append", "p_ratio_record.append", "time.time", "time.time", "numpy.argmin", "range", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.bisection", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.evaluate", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.uniform", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.PGD_attack.PGDAttack.evaluate"], ["", "def", "perturb", "(", "self", ",", "feed_dict", ",", "discrete", ",", "y_test", ",", "test_mask", ",", "k", ",", "eps", "=", "None", ",", "ori_support", "=", "None", ")", ":", "\n", "    ", "if", "self", ".", "ratio", "==", "0", ":", "\n", "        ", "return", "ori_support", "\n", "\n", "", "if", "eps", ":", "self", ".", "eps", "=", "eps", "\n", "\n", "for", "epoch", "in", "range", "(", "k", ")", ":", "\n", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "model", ".", "placeholders", "[", "'mu'", "]", ":", "self", ".", "mu", "/", "np", ".", "sqrt", "(", "epoch", "+", "1", ")", "}", ")", "\n", "\n", "# s \\in [0,1]", "\n", "a", ",", "support", ",", "modified_adj", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "a", ",", "self", ".", "model", ".", "placeholders", "[", "'support'", "]", ",", "self", ".", "model", ".", "modified_A", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "modified_adj", "=", "np", ".", "array", "(", "modified_adj", "[", "0", "]", ")", "\n", "upper_S_update", "=", "bisection", "(", "a", ",", "self", ".", "eps", ",", "self", ".", "xi", ")", "\n", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "model", ".", "placeholders", "[", "'s'", "]", "[", "i", "]", ":", "upper_S_update", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "upper_S_update", ")", ")", "}", ")", "\n", "\n", "if", "discrete", ":", "\n", "            ", "upper_S_update_tmp", "=", "upper_S_update", "[", ":", "]", "\n", "if", "epoch", "==", "k", "-", "1", ":", "\n", "                ", "acc_record", ",", "support_record", ",", "p_ratio_record", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "print", "(", "'last round, perturb edges by probabilities!'", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                    ", "randm", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "self", ".", "n_node", ",", "self", ".", "n_node", ")", ")", "\n", "upper_S_update", "=", "np", ".", "where", "(", "upper_S_update_tmp", ">", "randm", ",", "1", ",", "0", ")", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "model", ".", "placeholders", "[", "'s'", "]", "[", "i", "]", ":", "upper_S_update", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "upper_S_update", ")", ")", "}", ")", "\n", "a", ",", "support_d", ",", "modified_adj_d", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "a", ",", "self", ".", "model", ".", "placeholders", "[", "'support'", "]", ",", "self", ".", "model", ".", "modified_A", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "# modified_adj_d = np.array(modified_adj_d[0])", "\n", "#plt.plot(np.sort(upper_S_update[np.nonzero(upper_S_update)]))", "\n", "cost", ",", "acc", ",", "duration", "=", "self", ".", "evaluate", "(", "support_d", ",", "y_test", ",", "test_mask", ")", "\n", "pr", "=", "np", ".", "count_nonzero", "(", "upper_S_update", "[", "0", "]", ")", "/", "self", ".", "total_edges", "\n", "if", "pr", "<=", "self", ".", "ratio", ":", "\n", "                        ", "acc_record", ".", "append", "(", "acc", ")", "\n", "support_record", ".", "append", "(", "support_d", ")", "\n", "p_ratio_record", ".", "append", "(", "pr", ")", "\n", "", "", "print", "(", "\"Step:\"", ",", "'%04d'", "%", "(", "epoch", "+", "1", ")", ",", "\"test_loss=\"", ",", "\"{:.5f},\"", ".", "format", "(", "cost", ")", ",", "\n", "\"test_acc=\"", ",", "\"{:.5f}\"", ".", "format", "(", "acc", ")", ",", "\"time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "if", "len", "(", "acc_record", ")", ">", "0", ":", "\n", "                    ", "support_d", "=", "support_record", "[", "np", ".", "argmin", "(", "np", ".", "array", "(", "acc_record", ")", ")", "]", "\n", "", "break", "\n", "", "", "cost", ",", "acc", ",", "duration", "=", "self", ".", "evaluate", "(", "support", ",", "y_test", ",", "test_mask", ")", "\n", "\n", "# Print results", "\n", "if", "epoch", "==", "k", "-", "1", "or", "epoch", "==", "0", ":", "\n", "            ", "print", "(", "\"Step:\"", ",", "'%04d'", "%", "(", "epoch", "+", "1", ")", ",", "\"test_loss=\"", ",", "\"{:.5f}\"", ".", "format", "(", "cost", ")", ",", "\n", "\"test_acc=\"", ",", "\"{:.5f}\"", ".", "format", "(", "acc", ")", ",", "\"time=\"", ",", "\"{:.5f}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n", "# if epoch > FLAGS.early_stopping and cost_val[-1] > np.mean(cost_val[-(FLAGS.early_stopping+1):-1]):", "\n", "#     print(\"Early stopping...\")", "\n", "#     break", "\n", "# if discrete:", "\n", "#     print(\"perturb ratio\", np.count_nonzero(upper_S_update[0])/self.total_edges)", "\n", "# else:", "\n", "#     print(\"perturb ratio (count by L1)\", np.sum(upper_S_update[0])/self.total_edges)", "\n", "\n", "#return modified_adj_d,feed_dict if discrete else modified_adj,feed_dict", "\n", "", "", "return", "support_d", "if", "discrete", "else", "support", "\n", "", "", ""]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.uniform": [[5, 9], ["tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.glorot": [[11, 16], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros": [[18, 22], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.ones": [[24, 28], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.ones"], ["", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "", "", ""]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.parse_index_file": [[9, 15], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Parse index file.\"\"\"", "\n", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.sample_mask": [[17, 22], ["numpy.zeros", "numpy.array"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros"], ["", "def", "sample_mask", "(", "idx", ",", "l", ")", ":", "\n", "    ", "\"\"\"Create mask.\"\"\"", "\n", "mask", "=", "np", ".", "zeros", "(", "l", ")", "\n", "mask", "[", "idx", "]", "=", "1", "\n", "return", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.load_data": [[24, 91], ["range", "tuple", "utils.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "np.sort.tolist", "range", "range", "utils.sample_mask", "utils.sample_mask", "utils.sample_mask", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "range", "scipy.lil_matrix", "numpy.zeros", "networkx.from_dict_of_lists", "len", "len", "open", "min", "scipy.vstack", "len", "objects.append", "objects.append", "max", "len", "len", "pickle.load", "pickle.load", "min", "min"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.parse_index_file", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.sample_mask", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.sample_mask", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.sample_mask", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.inits.zeros", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.load", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.models.Model.load"], ["", "def", "load_data", "(", "dataset_str", ")", ":", "\n", "    ", "\"\"\"\n    Loads input data from gcn/data directory\n\n    ind.dataset_str.x => the feature vectors of the training instances as scipy.sparse.csr.csr_matrix object;\n    ind.dataset_str.tx => the feature vectors of the test instances as scipy.sparse.csr.csr_matrix object;\n    ind.dataset_str.allx => the feature vectors of both labeled and unlabeled training instances\n        (a superset of ind.dataset_str.x) as scipy.sparse.csr.csr_matrix object;\n    ind.dataset_str.y => the one-hot labels of the labeled training instances as numpy.ndarray object;\n    ind.dataset_str.ty => the one-hot labels of the test instances as numpy.ndarray object;\n    ind.dataset_str.ally => the labels for instances in ind.dataset_str.allx as numpy.ndarray object;\n    ind.dataset_str.graph => a dict in the format {index: [index_of_neighbor_nodes]} as collections.defaultdict\n        object;\n    ind.dataset_str.test.index => the indices of test instances in graph, for the inductive setting as list object.\n\n    All objects above must be saved using python pickle module.\n\n    :param dataset_str: Dataset name\n    :return: All data input files loaded (as well the training/test data).\n    \"\"\"", "\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "with", "open", "(", "\"data/ind.{}.{}\"", ".", "format", "(", "dataset_str", ",", "names", "[", "i", "]", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "test_idx_reorder", "=", "parse_index_file", "(", "\"data/ind.{}.test.index\"", ".", "format", "(", "dataset_str", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "if", "dataset_str", "==", "'citeseer'", ":", "\n", "# Fix citeseer dataset (there are some isolated nodes in the graph)", "\n", "# Find isolated nodes, add them as zero-vecs into the right position", "\n", "        ", "test_idx_range_full", "=", "range", "(", "min", "(", "test_idx_reorder", ")", ",", "max", "(", "test_idx_reorder", ")", "+", "1", ")", "\n", "tx_extended", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "tx_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "tx", "\n", "tx", "=", "tx_extended", "\n", "ty_extended", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_idx_range_full", ")", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "ty_extended", "[", "test_idx_range", "-", "min", "(", "test_idx_range", ")", ",", ":", "]", "=", "ty", "\n", "ty", "=", "ty_extended", "\n", "\n", "", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "\n", "idx_test", "=", "test_idx_range", ".", "tolist", "(", ")", "\n", "idx_train", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "idx_val", "=", "range", "(", "len", "(", "y", ")", ",", "len", "(", "y", ")", "+", "500", ")", "\n", "\n", "train_mask", "=", "sample_mask", "(", "idx_train", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "val_mask", "=", "sample_mask", "(", "idx_val", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "test_mask", "=", "sample_mask", "(", "idx_test", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y_train", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_val", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_test", "=", "np", ".", "zeros", "(", "labels", ".", "shape", ")", "\n", "y_train", "[", "train_mask", ",", ":", "]", "=", "labels", "[", "train_mask", ",", ":", "]", "\n", "y_val", "[", "val_mask", ",", ":", "]", "=", "labels", "[", "val_mask", ",", ":", "]", "\n", "y_test", "[", "test_mask", ",", ":", "]", "=", "labels", "[", "test_mask", ",", ":", "]", "\n", "\n", "return", "adj", ",", "features", ",", "y_train", ",", "y_val", ",", "y_test", ",", "train_mask", ",", "val_mask", ",", "test_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.sparse_to_tuple": [[93, 110], ["isinstance", "numpy.vstack().transpose", "range", "utils.sparse_to_tuple.to_tuple"], "function", ["None"], ["", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert sparse matrix to tuple representation.\"\"\"", "\n", "def", "to_tuple", "(", "mx", ")", ":", "\n", "        ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "            ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "            ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n", "", "return", "sparse_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.preprocess_features": [[112, 120], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "utils.sparse_to_tuple", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.dot", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.sparse_to_tuple"], ["", "def", "preprocess_features", "(", "features", ")", ":", "\n", "    ", "\"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "return", "sparse_to_tuple", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.normalize_adj": [[122, 130], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.dot", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.layers.dot"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.preprocess_adj": [[132, 136], ["utils.normalize_adj", "utils.sparse_to_tuple", "scipy.eye"], "function", ["home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.normalize_adj", "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.sparse_to_tuple"], ["", "def", "preprocess_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.construct_feed_dict": [[138, 148], ["dict", "dict.update", "dict.update", "dict.update", "dict.update", "dict.update", "range", "len"], "function", ["None"], ["", "def", "construct_feed_dict", "(", "features", ",", "support", ",", "labels", ",", "labels_mask", ",", "placeholders", ",", "train", "=", "False", ")", ":", "\n", "    ", "\"\"\"Construct feed dictionary.\"\"\"", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'labels'", "]", ":", "labels", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'labels_mask'", "]", ":", "labels_mask", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'features'", "]", ":", "features", "}", ")", "\n", "if", "train", ":", "\n", "        ", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "# if attack: do not feed in support", "\n", "", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'num_features_nonzero'", "]", ":", "features", "[", "1", "]", ".", "shape", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.bisection": [[149, 175], ["numpy.clip", "numpy.sum", "numpy.min", "numpy.max", "numpy.clip", "numpy.abs", "numpy.sum", "numpy.sum", "print", "numpy.sign", "numpy.sign", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "bisection", "(", "a", ",", "eps", ",", "xi", ",", "ub", "=", "1", ")", ":", "\n", "    ", "pa", "=", "np", ".", "clip", "(", "a", ",", "0", ",", "ub", ")", "\n", "if", "np", ".", "sum", "(", "pa", ")", "<=", "eps", ":", "\n", "# print('np.sum(pa) <= eps !!!!')", "\n", "        ", "upper_S_update", "=", "pa", "\n", "", "else", ":", "\n", "        ", "mu_l", "=", "np", ".", "min", "(", "a", "-", "1", ")", "\n", "mu_u", "=", "np", ".", "max", "(", "a", ")", "\n", "#mu_a = (mu_u + mu_l)/2", "\n", "while", "np", ".", "abs", "(", "mu_u", "-", "mu_l", ")", ">", "xi", ":", "\n", "#print('|mu_u - mu_l|:',np.abs(mu_u - mu_l))", "\n", "            ", "mu_a", "=", "(", "mu_u", "+", "mu_l", ")", "/", "2", "\n", "gu", "=", "np", ".", "sum", "(", "np", ".", "clip", "(", "a", "-", "mu_a", ",", "0", ",", "ub", ")", ")", "-", "eps", "\n", "gu_l", "=", "np", ".", "sum", "(", "np", ".", "clip", "(", "a", "-", "mu_l", ",", "0", ",", "ub", ")", ")", "-", "eps", "\n", "#print('gu:',gu)", "\n", "if", "gu", "==", "0", ":", "\n", "                ", "print", "(", "'gu == 0 !!!!!'", ")", "\n", "break", "\n", "", "if", "np", ".", "sign", "(", "gu", ")", "==", "np", ".", "sign", "(", "gu_l", ")", ":", "\n", "                ", "mu_l", "=", "mu_a", "\n", "", "else", ":", "\n", "                ", "mu_u", "=", "mu_a", "\n", "\n", "", "", "upper_S_update", "=", "np", ".", "clip", "(", "a", "-", "mu_a", ",", "0", ",", "ub", ")", "\n", "\n", "", "return", "upper_S_update", "\n", "\n"]], "home.repos.pwc.inspect_result.KaidiXu_GCN_ADV_Train.None.utils.filter_potential_singletons": [[176, 193], ["numpy.squeeze", "numpy.sum", "numpy.equal", "numpy.reshape", "numpy.logical_and", "numpy.logical_or", "numpy.tile", "numpy.equal", "numpy.transpose"], "function", ["None"], ["", "def", "filter_potential_singletons", "(", "adj", ")", ":", "\n", "    ", "\"\"\"\n    Computes a mask for entries potentially leading to singleton nodes, i.e. one of the two nodes corresponding to\n    the entry have degree 1 and there is an edge between the two nodes.\n    Returns\n    -------\n    tf.Tensor shape [N, N], float with ones everywhere except the entries of potential singleton nodes,\n    where the returned tensor has value 0.\n    \"\"\"", "\n", "adj", "=", "np", ".", "squeeze", "(", "adj", ")", "\n", "N", "=", "adj", ".", "shape", "[", "-", "1", "]", "\n", "degrees", "=", "np", ".", "sum", "(", "adj", ",", "axis", "=", "0", ")", "\n", "degree_one", "=", "np", ".", "equal", "(", "degrees", ",", "1", ")", "\n", "resh", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "degree_one", ",", "[", "N", "]", ")", ",", "[", "N", ",", "N", "]", ")", "\n", "l_and", "=", "np", ".", "logical_and", "(", "resh", ",", "np", ".", "equal", "(", "adj", ",", "1", ")", ")", "\n", "logical_and_symmetric", "=", "np", ".", "logical_or", "(", "l_and", ",", "np", ".", "transpose", "(", "l_and", ")", ")", "\n", "return", "logical_and_symmetric", "\n", "\n"]]}