{"home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.ImageFolderInstance.__init__": [[14, 17], ["torchvision.ImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "two_crop", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImageFolderInstance", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "target_transform", ")", "\n", "self", ".", "two_crop", "=", "two_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.ImageFolderInstance.__getitem__": [[18, 37], ["dataset.ImageFolderInstance.loader", "dataset.ImageFolderInstance.transform", "dataset.ImageFolderInstance.target_transform", "dataset.ImageFolderInstance.transform", "torch.cat"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target, index) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "image", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "if", "self", ".", "two_crop", ":", "\n", "            ", "img2", "=", "self", ".", "transform", "(", "image", ")", "\n", "img", "=", "torch", ".", "cat", "(", "[", "img", ",", "img2", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2Lab.__call__": [[41, 45], ["numpy.asarray", "skimage.color.rgb2lab"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2lab", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2HSV.__call__": [[49, 53], ["numpy.asarray", "skimage.color.rgb2hsv"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2hsv", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2HED.__call__": [[57, 61], ["numpy.asarray", "skimage.color.rgb2hed"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2hed", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2LUV.__call__": [[65, 69], ["numpy.asarray", "skimage.color.rgb2luv"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2luv", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2YUV.__call__": [[73, 77], ["numpy.asarray", "skimage.color.rgb2yuv"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2yuv", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2XYZ.__call__": [[81, 85], ["numpy.asarray", "skimage.color.rgb2xyz"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2xyz", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2YCbCr.__call__": [[89, 93], ["numpy.asarray", "skimage.color.rgb2ycbcr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ycbcr", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2YDbDr.__call__": [[97, 101], ["numpy.asarray", "skimage.color.rgb2ydbdr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ydbdr", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2YPbPr.__call__": [[105, 109], ["numpy.asarray", "skimage.color.rgb2ypbpr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2ypbpr", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2YIQ.__call__": [[113, 117], ["numpy.asarray", "skimage.color.rgb2yiq"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2yiq", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.dataset.RGB2CIERGB.__call__": [[121, 125], ["numpy.asarray", "skimage.color.rgb2rgbcie"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "uint8", ")", "\n", "img", "=", "color", ".", "rgb2rgbcie", "(", "img", ")", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.train_MetAug.parse_option": [[34, 154], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.lr_decay_epochs.split", "list", "os.path.join", "os.path.join", "ValueError", "parser.parse_args.lr_decay_epochs.append", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "int"], "function", ["None"], ["", "def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'argument for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_version'", ",", "type", "=", "str", ",", "default", "=", "'MetAug_1e-5_1e-11'", ",", "choices", "=", "[", "'cmvc'", ",", "'meta_aug'", ",", "'MetAug'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_freq'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'tb frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "config", ".", "BATCH_SIZE_DEFAULT", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "18", ",", "help", "=", "'num of workers to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "config", ".", "EPOCHS", ",", "help", "=", "'number of training epochs'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.03", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'120,160,200'", ",", "help", "=", "'where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'beta1 for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'beta2 for Adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "\n", "# metagenaug optimization", "\n", "parser", ".", "add_argument", "(", "'--mt_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.03", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--mt_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--mt_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--mt_loss_hp'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "help", "=", "'hyper-param for metaaug losses'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--bb_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'bb_learning_rate'", ")", "\n", "\n", "# margin", "\n", "parser", ".", "add_argument", "(", "'--margin_injection'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the flag of margin injection'", "\n", "'1: inject margin when train main_model and metaauggen'", "\n", "'2: inject margin only when train metaauggen'", "\n", "'0: NOT inject margin'", ")", "\n", "parser", ".", "add_argument", "(", "'--margin_type'", ",", "type", "=", "str", ",", "default", "=", "'large'", ",", "help", "=", "'the selection type of the margin'", "\n", "'small: the max of possim max and negsim min'", "\n", "'large: the min of possim max and negsim min'", "\n", "'mean: the mean of possim max and negsim min'", ")", "\n", "parser", ".", "add_argument", "(", "'--mj_loss_hp'", ",", "type", "=", "float", ",", "default", "=", "1e-11", ",", "help", "=", "'hyper-param for margin injection losses'", ")", "\n", "\n", "# resume path", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "\n", "# model definition", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'alexnet'", ",", "choices", "=", "[", "'alexnet'", ",", "\n", "'resnet50v1'", ",", "'resnet101v1'", ",", "'resnet18v1'", ",", "\n", "'resnet50v2'", ",", "'resnet101v2'", ",", "'resnet18v2'", ",", "\n", "'resnet50v3'", ",", "'resnet101v3'", ",", "'resnet18v3'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--softmax'", ",", "action", "=", "'store_true'", ",", "help", "=", "'using softmax contrastive loss rather than NCE'", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_k'", ",", "type", "=", "int", ",", "default", "=", "config", ".", "DEFAULT_K", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_t'", ",", "type", "=", "float", ",", "default", "=", "0.07", ")", "\n", "parser", ".", "add_argument", "(", "'--nce_m'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_dim'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'dim of feat for inner product'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar-10'", ",", "choices", "=", "[", "'cifar-10'", ",", "'cifar-100'", ",", "'stl-10'", ",", "\n", "'tiny-imagenet'", ",", "'imagenet100'", ",", "'imagenet'", "]", ")", "\n", "\n", "# specify folder", "\n", "parser", ".", "add_argument", "(", "'--data_folder'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'path to data'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'path to save model'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'path to tensorboard'", ")", "\n", "\n", "# add new views", "\n", "parser", ".", "add_argument", "(", "'--view'", ",", "type", "=", "str", ",", "default", "=", "'Lab'", ",", "choices", "=", "[", "'Lab'", ",", "'YCbCr'", "]", ")", "\n", "\n", "# mixed precision setting", "\n", "parser", ".", "add_argument", "(", "'--amp'", ",", "action", "=", "'store_true'", ",", "help", "=", "'using mixed precision'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O2'", ",", "choices", "=", "[", "'O1'", ",", "'O2'", "]", ")", "\n", "\n", "# data crop threshold", "\n", "parser", ".", "add_argument", "(", "'--crop_low'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'low area in crop'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--mark_gh'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'mark'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_enable_gh'", ",", "type", "=", "str", ",", "default", "=", "'no'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--delta_enable_gh'", ",", "type", "=", "str", ",", "default", "=", "'no'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--delta_m_gh'", ",", "type", "=", "float", ",", "default", "=", "0.25", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_m_gh'", ",", "type", "=", "float", ",", "default", "=", "0.25", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_de_gh'", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--gama_gh'", ",", "type", "=", "float", ",", "default", "=", "16", ")", "\n", "\n", "# GPU setting", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'GPU id to use.'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "(", "opt", ".", "data_folder", "is", "None", ")", "or", "(", "opt", ".", "model_path", "is", "None", ")", "or", "(", "opt", ".", "tb_path", "is", "None", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'one or more of the folders is None: data_folder | model_path | tb_path'", ")", "\n", "\n", "", "if", "opt", ".", "dataset", "==", "'imagenet'", ":", "\n", "        ", "if", "'alexnet'", "not", "in", "opt", ".", "model", ":", "\n", "            ", "opt", ".", "crop_low", "=", "0.08", "\n", "\n", "", "", "iterations", "=", "opt", ".", "lr_decay_epochs", ".", "split", "(", "','", ")", "\n", "opt", ".", "lr_decay_epochs", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "iterations", ":", "\n", "        ", "opt", ".", "lr_decay_epochs", ".", "append", "(", "int", "(", "it", ")", ")", "\n", "\n", "", "opt", ".", "method", "=", "'softmax'", "if", "opt", ".", "softmax", "else", "'nce'", "\n", "opt", ".", "model_name", "=", "'memory_{}_{}_{}_{}_lr_{}_decay_{}_bsz_{}'", ".", "format", "(", "opt", ".", "model_version", ",", "opt", ".", "method", ",", "opt", ".", "nce_k", ",", "\n", "opt", ".", "model", ",", "opt", ".", "learning_rate", ",", "opt", ".", "weight_decay", ",", "\n", "opt", ".", "batch_size", ")", "\n", "\n", "if", "opt", ".", "amp", ":", "\n", "        ", "opt", ".", "model_name", "=", "'{}_amp_{}'", ".", "format", "(", "opt", ".", "model_name", ",", "opt", ".", "opt_level", ")", "\n", "\n", "", "opt", ".", "model_name", "=", "'{}_view_{}'", ".", "format", "(", "opt", ".", "model_name", ",", "opt", ".", "view", ")", "\n", "\n", "opt", ".", "model_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "model_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "model_folder", ")", "\n", "\n", "", "opt", ".", "tb_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tb_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "tb_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "tb_folder", ")", "\n", "\n", "", "opt", ".", "data_folder", "=", "'../../datasets/'", "+", "opt", ".", "dataset", "+", "'/'", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.train_MetAug.get_train_loader": [[156, 192], ["os.path.join", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "dataset.ImageFolderInstance", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "print", "dataset.RGB2Lab", "dataset.RGB2YCbCr", "NotImplemented", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_train_loader", "(", "args", ")", ":", "\n", "    ", "\"\"\"get the train loader\"\"\"", "\n", "data_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_folder", ",", "'train'", ")", "\n", "\n", "if", "args", ".", "view", "==", "'Lab'", ":", "\n", "        ", "mean", "=", "[", "(", "0", "+", "100", ")", "/", "2", ",", "(", "-", "86.183", "+", "98.233", ")", "/", "2", ",", "(", "-", "107.857", "+", "94.478", ")", "/", "2", "]", "\n", "std", "=", "[", "(", "100", "-", "0", ")", "/", "2", ",", "(", "86.183", "+", "98.233", ")", "/", "2", ",", "(", "107.857", "+", "94.478", ")", "/", "2", "]", "\n", "color_transfer", "=", "RGB2Lab", "(", ")", "\n", "", "elif", "args", ".", "view", "==", "'YCbCr'", ":", "\n", "        ", "mean", "=", "[", "116.151", ",", "121.080", ",", "132.342", "]", "\n", "std", "=", "[", "109.500", ",", "111.855", ",", "111.964", "]", "\n", "color_transfer", "=", "RGB2YCbCr", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "(", "'view not implemented {}'", ".", "format", "(", "args", ".", "view", ")", ")", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "args", ".", "crop_low", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "train_dataset", "=", "ImageFolderInstance", "(", "data_folder", ",", "transform", "=", "train_transform", ")", "\n", "train_sampler", "=", "None", "\n", "\n", "# train loader", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "# num of samples", "\n", "n_data", "=", "len", "(", "train_dataset", ")", "\n", "print", "(", "'number of samples: {}'", ".", "format", "(", "n_data", ")", ")", "\n", "\n", "return", "train_loader", ",", "n_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.train_MetAug.set_model": [[194, 220], ["NCE.NCEAverage_MetAug.NCEAverage().to", "NCE.NCECriterion_MetAug.CircleLoss().to", "models.alexnet_MetAug.MyMetaGenNet().to", "models.alexnet_MetAug.MyMetaGenNet().to", "models.alexnet_MetAug.MyMetaGenNet().to", "torch.cuda.is_available", "torch.cuda.is_available", "int", "torch.device", "torch.device", "models.alexnet_MetAug.MyAlexNetCMC().to", "ValueError", "torch.device", "torch.device", "NCE.NCEAverage_MetAug.NCEAverage", "NCE.NCECriterion_MetAug.CircleLoss", "models.alexnet_MetAug.MyMetaGenNet", "models.alexnet_MetAug.MyMetaGenNet", "models.alexnet_MetAug.MyMetaGenNet", "torch.cuda.is_available", "torch.cuda.is_available", "models.alexnet_MetAug.MyAlexNetCMC", "str", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["None"], ["", "def", "set_model", "(", "args", ",", "n_data", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "_", "=", "int", "(", "args", ".", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "gpu", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "", "except", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# set the model", "\n", "", "if", "args", ".", "model", "==", "'alexnet'", ":", "\n", "        ", "model", "=", "MyAlexNetCMC", "(", "device", ",", "args", ".", "feat_dim", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'model not supported yet {}'", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "", "contrast", "=", "NCEAverage", "(", "args", ".", "feat_dim", ",", "n_data", ",", "args", ".", "nce_k", ",", "args", ".", "nce_t", ",", "args", ".", "nce_m", ",", "args", ".", "softmax", ")", ".", "to", "(", "device", ")", "\n", "criterion_gh", "=", "CircleLoss", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "\n", "l_mtgen", "=", "MyMetaGenNet", "(", "device", ")", ".", "to", "(", "device", ")", "\n", "\n", "ab_mtgen", "=", "MyMetaGenNet", "(", "device", ")", ".", "to", "(", "device", ")", "\n", "\n", "ori_mtgen", "=", "MyMetaGenNet", "(", "device", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "return", "model", ",", "contrast", ",", "criterion_gh", ",", "l_mtgen", ",", "ab_mtgen", ",", "ori_mtgen", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.train_MetAug.set_optimizer": [[222, 229], ["torch.optim.SGD", "torch.optim.SGD", "model.parameters"], "function", ["None"], ["", "def", "set_optimizer", "(", "args", ",", "model", ")", ":", "\n", "# return optimizer", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.train_MetAug.train": [[231, 526], ["model.train", "contrast.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "util.AverageMeter.update", "inputs.cuda.size", "inputs.cuda.float", "torch.cuda.is_available", "torch.cuda.is_available", "l_mtgen.parameters", "ab_mtgen.parameters", "ori_mtgen.parameters", "model.parameters", "optimizer.zero_grad", "model", "l_mtgen", "ab_mtgen", "ori_mtgen", "contrast", "criterion_gh", "contrast", "contrast", "contrast", "contrast", "optimizer.step", "util.AverageMeter.update", "l_mtgen.parameters", "ab_mtgen.parameters", "ori_mtgen.parameters", "l_mtgen_op.zero_grad", "ab_mtgen_op.zero_grad", "ori_mtgen_op.zero_grad", "model", "l_mtgen", "ab_mtgen", "ori_mtgen", "contrast", "criterion_gh", "contrast", "contrast", "contrast", "contrast", "model", "collections.OrderedDict", "torch.autograd.grad", "torch.autograd.grad", "collections.OrderedDict", "l_mtgen", "collections.OrderedDict", "torch.autograd.grad", "torch.autograd.grad", "collections.OrderedDict", "ab_mtgen", "collections.OrderedDict", "torch.autograd.grad", "torch.autograd.grad", "collections.OrderedDict", "ori_mtgen", "contrast", "criterion_gh", "contrast", "contrast", "contrast", "contrast", "l_mtgen_op.step", "ab_mtgen_op.step", "ori_mtgen_op.step", "l_mtgen.parameters", "ab_mtgen.parameters", "ori_mtgen.parameters", "optimizer.zero_grad", "model", "l_mtgen", "ab_mtgen", "ori_mtgen", "contrast", "criterion_gh", "contrast", "contrast", "contrast", "contrast", "collections.OrderedDict", "torch.autograd.grad", "torch.autograd.grad", "collections.OrderedDict", "model", "l_mtgen", "ab_mtgen", "ori_mtgen", "contrast", "criterion_gh", "contrast", "contrast", "contrast", "contrast", "optimizer.step", "torch.cuda.synchronize", "torch.cuda.synchronize", "util.AverageMeter.update", "time.time", "index.cuda.cuda", "inputs.cuda.cuda", "criterion_gh", "criterion_gh", "criterion_gh", "criterion_gh", "criterion_gh.backward", "criterion_gh.item", "criterion_gh", "criterion_gh", "criterion_gh", "criterion_gh", "l_mtgen.parameters", "ab_mtgen.parameters", "ori_mtgen.parameters", "criterion_gh", "criterion_gh", "criterion_gh", "criterion_gh", "criterion_gh.backward", "criterion_gh", "criterion_gh", "criterion_gh", "criterion_gh", "model.parameters", "criterion_gh", "criterion_gh", "criterion_gh", "criterion_gh", "criterion_gh.backward", "print", "sys.stdout.flush", "time.time", "util.margin_injection_loss_calc", "amp.scale_loss", "scaled_loss.backward", "util.margin_injection_loss_calc", "list", "list", "list", "util.margin_injection_loss_calc", "amp.scale_loss", "scaled_loss.backward", "util.margin_injection_loss_calc", "list", "util.margin_injection_loss_calc", "amp.scale_loss", "scaled_loss.backward", "time.time", "l_mtgen.named_parameters", "l_mtgen.parameters", "zip", "ab_mtgen.named_parameters", "ab_mtgen.parameters", "zip", "ori_mtgen.named_parameters", "ori_mtgen.parameters", "zip", "model.named_parameters", "model.parameters", "zip", "len", "collections.OrderedDict.items", "collections.OrderedDict.items", "collections.OrderedDict.items", "collections.OrderedDict.items"], "function", ["home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.train", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.train", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.margin_injection_loss_calc", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.margin_injection_loss_calc", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.margin_injection_loss_calc", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.margin_injection_loss_calc", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.margin_injection_loss_calc"], ["", "def", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "criterion_gh", ",", "optimizer", ",", "l_mtgen", ",", "l_mtgen_op", ",", "ab_mtgen", ",", "ab_mtgen_op", ",", "ori_mtgen", ",", "ori_mtgen_op", ",", "opt", ")", ":", "\n", "    ", "\"\"\"\n    one epoch training\n    \"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "contrast", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "inputs", ",", "_", ",", "index", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "bsz", "=", "inputs", ".", "size", "(", "0", ")", "\n", "inputs", "=", "inputs", ".", "float", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "index", "=", "index", ".", "cuda", "(", ")", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "# Step 1: Fix metagen aug, and optimize main_model -------------------------------------------------------------", "\n", "", "for", "param", "in", "l_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "ab_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "ori_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "# ===================forward=====================", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "feat_l", ",", "feat_ab", ",", "feat_ori", "=", "model", "(", "inputs", ",", "False", ")", "\n", "\n", "mt_feat_l", "=", "l_mtgen", "(", "feat_l", ",", "False", ")", "\n", "mt_feat_ab", "=", "ab_mtgen", "(", "feat_ab", ",", "False", ")", "\n", "mt_feat_ori", "=", "ori_mtgen", "(", "feat_ori", ",", "False", ")", "\n", "\n", "# ori loss calc", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ")", "\n", "\n", "loss", "=", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "\n", "# aug loss calc", "\n", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "mt_feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ")", "\n", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ")", "\n", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "mt_feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", ")", "\n", "\n", "# margin-injection", "\n", "if", "opt", ".", "margin_injection", "==", "1", ":", "\n", "            ", "loss", "+=", "opt", ".", "mj_loss_hp", "*", "margin_injection_loss_calc", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ",", "\n", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ",", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ",", "\n", "opt", ".", "margin_type", ")", "\n", "\n", "# backward", "\n", "", "if", "opt", ".", "amp", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "bsz", ")", "\n", "\n", "# Step 2: Fix main_model, and optimize metagen aug -------------------------------------------------------------", "\n", "for", "param", "in", "l_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "ab_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "ori_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "# =================meta forward==================", "\n", "", "l_mtgen_op", ".", "zero_grad", "(", ")", "\n", "ab_mtgen_op", ".", "zero_grad", "(", ")", "\n", "ori_mtgen_op", ".", "zero_grad", "(", ")", "\n", "\n", "feat_l", ",", "feat_ab", ",", "feat_ori", "=", "model", "(", "inputs", ",", "False", ")", "\n", "\n", "mt_feat_l", "=", "l_mtgen", "(", "feat_l", ",", "False", ")", "\n", "mt_feat_ab", "=", "ab_mtgen", "(", "feat_ab", ",", "False", ")", "\n", "mt_feat_ori", "=", "ori_mtgen", "(", "feat_ori", ",", "False", ")", "\n", "\n", "# ori loss calc", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ")", "\n", "\n", "loss", "=", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "\n", "# aug loss calc", "\n", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "mt_feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ")", "\n", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ")", "\n", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "mt_feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", ")", "\n", "\n", "# margin-injection", "\n", "if", "opt", ".", "margin_injection", ">=", "1", ":", "\n", "            ", "loss", "+=", "opt", ".", "mj_loss_hp", "*", "margin_injection_loss_calc", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ",", "\n", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ",", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ",", "\n", "opt", ".", "margin_type", ")", "\n", "\n", "# meta feat generation", "\n", "", "feat_l", ",", "feat_ab", ",", "feat_ori", "=", "model", "(", "inputs", ",", "False", ")", "\n", "# get meta weights", "\n", "fast_weights", "=", "OrderedDict", "(", "(", "name", ",", "param", ")", "for", "(", "name", ",", "param", ")", "in", "l_mtgen", ".", "named_parameters", "(", ")", ")", "\n", "# create_graph flag for computing second-derivative", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "l_mtgen", ".", "parameters", "(", ")", ",", "create_graph", "=", "True", ")", "\n", "data", "=", "[", "p", ".", "data", "for", "p", "in", "list", "(", "l_mtgen", ".", "parameters", "(", ")", ")", "]", "\n", "# compute theta_1^+ by applying sgd on multi-task loss", "\n", "fast_weights", "=", "OrderedDict", "(", "(", "name", ",", "param", "-", "opt", ".", "bb_learning_rate", "*", "grad", ")", "for", "(", "(", "name", ",", "param", ")", ",", "grad", ",", "data", ")", "in", "zip", "(", "fast_weights", ".", "items", "(", ")", ",", "grads", ",", "data", ")", ")", "\n", "mt_feat_l", "=", "l_mtgen", "(", "feat_l", ",", "fast_weights", ")", "\n", "\n", "# get meta weights", "\n", "fast_weights", "=", "OrderedDict", "(", "(", "name", ",", "param", ")", "for", "(", "name", ",", "param", ")", "in", "ab_mtgen", ".", "named_parameters", "(", ")", ")", "\n", "# create_graph flag for computing second-derivative", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "ab_mtgen", ".", "parameters", "(", ")", ",", "create_graph", "=", "True", ")", "\n", "data", "=", "[", "p", ".", "data", "for", "p", "in", "list", "(", "ab_mtgen", ".", "parameters", "(", ")", ")", "]", "\n", "# compute theta_1^+ by applying sgd on multi-task loss", "\n", "fast_weights", "=", "OrderedDict", "(", "(", "name", ",", "param", "-", "opt", ".", "bb_learning_rate", "*", "grad", ")", "for", "(", "(", "name", ",", "param", ")", ",", "grad", ",", "data", ")", "in", "zip", "(", "fast_weights", ".", "items", "(", ")", ",", "grads", ",", "data", ")", ")", "\n", "mt_feat_ab", "=", "ab_mtgen", "(", "feat_ab", ",", "fast_weights", ")", "\n", "\n", "# get meta weights", "\n", "fast_weights", "=", "OrderedDict", "(", "(", "name", ",", "param", ")", "for", "(", "name", ",", "param", ")", "in", "ori_mtgen", ".", "named_parameters", "(", ")", ")", "\n", "# create_graph flag for computing second-derivative", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "ori_mtgen", ".", "parameters", "(", ")", ",", "create_graph", "=", "True", ")", "\n", "data", "=", "[", "p", ".", "data", "for", "p", "in", "list", "(", "ori_mtgen", ".", "parameters", "(", ")", ")", "]", "\n", "# compute theta_1^+ by applying sgd on multi-task loss", "\n", "fast_weights", "=", "OrderedDict", "(", "(", "name", ",", "param", "-", "opt", ".", "bb_learning_rate", "*", "grad", ")", "for", "(", "(", "name", ",", "param", ")", ",", "grad", ",", "data", ")", "in", "zip", "(", "fast_weights", ".", "items", "(", ")", ",", "grads", ",", "data", ")", ")", "\n", "mt_feat_ori", "=", "ori_mtgen", "(", "feat_ori", ",", "fast_weights", ")", "\n", "\n", "# ori loss calc", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ")", "\n", "\n", "loss", "=", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "\n", "# aug loss calc", "\n", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "mt_feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ")", "\n", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ")", "\n", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "mt_feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", ")", "\n", "\n", "# margin-injection", "\n", "if", "opt", ".", "margin_injection", ">=", "1", ":", "\n", "            ", "loss", "+=", "opt", ".", "mj_loss_hp", "*", "margin_injection_loss_calc", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ",", "\n", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ",", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ",", "\n", "opt", ".", "margin_type", ")", "\n", "\n", "# backward", "\n", "", "if", "opt", ".", "amp", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "l_mtgen_op", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "", "l_mtgen_op", ".", "step", "(", ")", "\n", "ab_mtgen_op", ".", "step", "(", ")", "\n", "ori_mtgen_op", ".", "step", "(", ")", "\n", "\n", "# Step 3: Fix metagen aug, and optimize main_model by using the updated meta feature aug -----------------------", "\n", "for", "param", "in", "l_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "ab_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "ori_mtgen", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "# ===================forward=====================", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "feat_l", ",", "feat_ab", ",", "feat_ori", "=", "model", "(", "inputs", ",", "False", ")", "\n", "\n", "mt_feat_l", "=", "l_mtgen", "(", "feat_l", ",", "False", ")", "\n", "mt_feat_ab", "=", "ab_mtgen", "(", "feat_ab", ",", "False", ")", "\n", "mt_feat_ori", "=", "ori_mtgen", "(", "feat_ori", ",", "False", ")", "\n", "\n", "# ori loss calc", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ")", "\n", "\n", "loss", "=", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "\n", "# aug loss calc", "\n", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "mt_feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ")", "\n", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ")", "\n", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "mt_feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", ")", "\n", "\n", "# margin-injection", "\n", "if", "opt", ".", "margin_injection", "==", "1", ":", "\n", "            ", "loss", "+=", "opt", ".", "mj_loss_hp", "*", "margin_injection_loss_calc", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ",", "\n", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ",", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ",", "\n", "opt", ".", "margin_type", ")", "\n", "\n", "# get meta weights", "\n", "", "fast_weights", "=", "OrderedDict", "(", "(", "name", ",", "param", ")", "for", "(", "name", ",", "param", ")", "in", "model", ".", "named_parameters", "(", ")", ")", "\n", "# create_graph flag for computing second-derivative", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "model", ".", "parameters", "(", ")", ",", "create_graph", "=", "True", ")", "\n", "data", "=", "[", "p", ".", "data", "for", "p", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", "]", "\n", "# compute theta_1^+ by applying sgd on multi-task loss", "\n", "fast_weights", "=", "OrderedDict", "(", "(", "name", ",", "param", "-", "opt", ".", "bb_learning_rate", "*", "grad", ")", "for", "(", "(", "name", ",", "param", ")", ",", "grad", ",", "data", ")", "in", "zip", "(", "fast_weights", ".", "items", "(", ")", ",", "grads", ",", "data", ")", ")", "\n", "\n", "# meta feat generation", "\n", "feat_l", ",", "feat_ab", ",", "feat_ori", "=", "model", "(", "inputs", ",", "fast_weights", ")", "\n", "\n", "mt_feat_l", "=", "l_mtgen", "(", "feat_l", ",", "False", ")", "\n", "mt_feat_ab", "=", "ab_mtgen", "(", "feat_ab", ",", "False", ")", "\n", "mt_feat_ori", "=", "ori_mtgen", "(", "feat_ori", ",", "False", ")", "\n", "\n", "# ori loss calc", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ")", "\n", "\n", "loss", "=", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "\n", "# aug loss calc", "\n", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "mt_feat_ab", ",", "feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ")", "\n", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", "=", "contrast", "(", "feat_l", ",", "feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "out_ab2l", ",", "out_l2ab", ",", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ")", "\n", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", "=", "contrast", "(", "mt_feat_l", ",", "mt_feat_ab", ",", "mt_feat_ori", ",", "index", ",", "\n", "updatemem", "=", "False", ")", "\n", "loss", "+=", "opt", ".", "mt_loss_hp", "*", "criterion_gh", "(", "mt_out_ab2l", ",", "mt_out_l2ab", ",", "mt_out_ori2l", ",", "mt_out_l2ori", ",", "mt_out_ab2ori", ",", "mt_out_ori2ab", ")", "\n", "\n", "# margin-injection", "\n", "if", "opt", ".", "margin_injection", "==", "1", ":", "\n", "            ", "loss", "+=", "opt", ".", "mj_loss_hp", "*", "margin_injection_loss_calc", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ",", "\n", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ",", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ",", "\n", "opt", ".", "margin_type", ")", "\n", "\n", "# backward", "\n", "", "if", "opt", ".", "amp", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "(", "idx", "+", "1", ")", "%", "opt", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Train: [{0}][{1}/{2}]\\t'", "\n", "'BT {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'DT {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'loss {loss.val:.3f} ({loss.avg:.3f})\\t'", ".", "format", "(", "\n", "epoch", ",", "idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.train_MetAug.main": [[527, 622], ["train_MetAug.parse_option", "train_MetAug.get_train_loader", "train_MetAug.set_model", "train_MetAug.set_optimizer", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "tensorboard_logger.Logger", "range", "l_mtgen.parameters", "ab_mtgen.parameters", "ori_mtgen.parameters", "amp.initialize", "os.path.isfile", "util.adjust_learning_rate", "print", "time.time", "train_MetAug.train", "time.time", "print", "tb_logger.Logger.log_value", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "torch.load", "torch.load", "model.load_state_dict", "set_optimizer.load_state_dict", "contrast.load_state_dict", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "print", "os.path.join", "torch.save", "torch.save", "print", "amp.load_state_dict", "model.state_dict", "contrast.state_dict", "set_optimizer.state_dict", "l_mtgen.state_dict", "torch.optim.SGD.state_dict", "ab_mtgen.state_dict", "torch.optim.SGD.state_dict", "ori_mtgen.state_dict", "torch.optim.SGD.state_dict", "amp.state_dict"], "function", ["home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.parse_option", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.train_MetAug.get_train_loader", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.set_model", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.set_optimizer", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.adjust_learning_rate", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.train"], ["", "def", "main", "(", ")", ":", "\n", "# parse the args", "\n", "    ", "args", "=", "parse_option", "(", ")", "\n", "\n", "# set the loader", "\n", "train_loader", ",", "n_data", "=", "get_train_loader", "(", "args", ")", "\n", "\n", "# set the model", "\n", "model", ",", "contrast", ",", "criterion_gh", ",", "l_mtgen", ",", "ab_mtgen", ",", "ori_mtgen", "=", "set_model", "(", "args", ",", "n_data", ")", "\n", "\n", "# set the optimizer", "\n", "optimizer", "=", "set_optimizer", "(", "args", ",", "model", ")", "\n", "\n", "l_mtgen_op", "=", "torch", ".", "optim", ".", "SGD", "(", "l_mtgen", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "mt_learning_rate", ",", "\n", "momentum", "=", "args", ".", "mt_momentum", ",", "\n", "weight_decay", "=", "args", ".", "mt_weight_decay", ")", "\n", "\n", "ab_mtgen_op", "=", "torch", ".", "optim", ".", "SGD", "(", "ab_mtgen", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "mt_learning_rate", ",", "\n", "momentum", "=", "args", ".", "mt_momentum", ",", "\n", "weight_decay", "=", "args", ".", "mt_weight_decay", ")", "\n", "\n", "ori_mtgen_op", "=", "torch", ".", "optim", ".", "SGD", "(", "ori_mtgen", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "mt_learning_rate", ",", "\n", "momentum", "=", "args", ".", "mt_momentum", ",", "\n", "weight_decay", "=", "args", ".", "mt_weight_decay", ")", "\n", "\n", "# set mixed precision", "\n", "if", "args", ".", "amp", ":", "\n", "        ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "args", ".", "opt_level", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "args", ".", "start_epoch", "=", "1", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "contrast", ".", "load_state_dict", "(", "checkpoint", "[", "'contrast'", "]", ")", "\n", "if", "args", ".", "amp", "and", "checkpoint", "[", "'opt'", "]", ".", "amp", ":", "\n", "                ", "print", "(", "'==> resuming amp state_dict'", ")", "\n", "amp", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# tensorboard", "\n", "", "", "logger", "=", "tb_logger", ".", "Logger", "(", "logdir", "=", "args", ".", "tb_folder", ",", "flush_secs", "=", "2", ")", "\n", "\n", "# routine", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "epoch", ",", "args", ",", "optimizer", ")", "\n", "print", "(", "\"==> training...\"", ")", "\n", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "losses", "=", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "contrast", ",", "criterion_gh", ",", "optimizer", ",", "l_mtgen", ",", "l_mtgen_op", ",", "ab_mtgen", ",", "\n", "ab_mtgen_op", ",", "ori_mtgen", ",", "ori_mtgen_op", ",", "args", ")", "\n", "\n", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "logger", ".", "log_value", "(", "'losses'", ",", "losses", ",", "epoch", ")", "\n", "\n", "# save model", "\n", "if", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'opt'", ":", "args", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'contrast'", ":", "contrast", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'l_mtgen'", ":", "l_mtgen", ".", "state_dict", "(", ")", ",", "\n", "'l_mtgen_op'", ":", "l_mtgen_op", ".", "state_dict", "(", ")", ",", "\n", "'ab_mtgen'", ":", "ab_mtgen", ".", "state_dict", "(", ")", ",", "\n", "'ab_mtgen_op'", ":", "ab_mtgen_op", ".", "state_dict", "(", ")", ",", "\n", "'ori_mtgen'", ":", "ori_mtgen", ".", "state_dict", "(", ")", ",", "\n", "'ori_mtgen_op'", ":", "ori_mtgen_op", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "if", "args", ".", "amp", ":", "\n", "                ", "state", "[", "'amp'", "]", "=", "amp", ".", "state_dict", "(", ")", "\n", "", "save_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'ckpt_epoch_{epoch}.pth'", ".", "format", "(", "epoch", "=", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "# help release GPU memory", "\n", "del", "state", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.__init__": [[20, 26], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.reset": [[27, 32], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update": [[33, 38], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.adjust_learning_rate": [[9, 16], ["numpy.sum", "numpy.asarray"], "function", ["None"], ["def", "adjust_learning_rate", "(", "epoch", ",", "opt", ",", "optimizer", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 0.2 every steep step\"\"\"", "\n", "steps", "=", "np", ".", "sum", "(", "epoch", ">", "np", ".", "asarray", "(", "opt", ".", "lr_decay_epochs", ")", ")", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "new_lr", "=", "opt", ".", "learning_rate", "*", "(", "opt", ".", "lr_decay_rate", "**", "steps", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.accuracy": [[40, 55], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.margin_injection_loss_calc": [[57, 158], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "mtl_pos_ab2l.squeeze().add().div.squeeze().add().div", "mtl_neg_ab2l.squeeze().add().div.squeeze().add().div", "mtl_pos_l2ab.squeeze().add().div.squeeze().add().div", "mtl_neg_l2ab.squeeze().add().div.squeeze().add().div", "mtl_pos_ori2l.squeeze().add().div.squeeze().add().div", "mtl_neg_ori2l.squeeze().add().div.squeeze().add().div", "mtl_pos_l2ori.squeeze().add().div.squeeze().add().div", "mtl_neg_l2ori.squeeze().add().div.squeeze().add().div", "mtab_pos_ab2l.squeeze().add().div.squeeze().add().div", "mtab_neg_ab2l.squeeze().add().div.squeeze().add().div", "mtab_pos_l2ab.squeeze().add().div.squeeze().add().div", "mtab_neg_l2ab.squeeze().add().div.squeeze().add().div", "mtab_pos_ab2ori.squeeze().add().div.squeeze().add().div", "mtab_neg_ab2ori.squeeze().add().div.squeeze().add().div", "mtab_pos_ori2ab.squeeze().add().div.squeeze().add().div", "mtab_neg_ori2ab.squeeze().add().div.squeeze().add().div", "mtori_pos_ori2l.squeeze().add().div.squeeze().add().div", "mtori_neg_ori2l.squeeze().add().div.squeeze().add().div", "mtori_pos_l2ori.squeeze().add().div.squeeze().add().div", "mtori_neg_l2ori.squeeze().add().div.squeeze().add().div", "mtori_pos_ab2ori.squeeze().add().div.squeeze().add().div", "mtori_neg_ab2ori.squeeze().add().div.squeeze().add().div", "mtori_pos_ori2ab.squeeze().add().div.squeeze().add().div", "mtori_neg_ori2ab.squeeze().add().div.squeeze().add().div", "torch.cat", "torch.cat", "pos_ab2l.squeeze().add().div.squeeze().add().div", "neg_ab2l.squeeze().add().div.squeeze().add().div", "pos_l2ab.squeeze().add().div.squeeze().add().div", "neg_l2ab.squeeze().add().div.squeeze().add().div", "pos_ori2l.squeeze().add().div.squeeze().add().div", "neg_ori2l.squeeze().add().div.squeeze().add().div", "pos_l2ori.squeeze().add().div.squeeze().add().div", "neg_l2ori.squeeze().add().div.squeeze().add().div", "pos_ab2ori.squeeze().add().div.squeeze().add().div", "neg_ab2ori.squeeze().add().div.squeeze().add().div", "pos_ori2ab.squeeze().add().div.squeeze().add().div", "neg_ori2ab.squeeze().add().div.squeeze().add().div", "torch.cat", "torch.cat", "torch.min", "torch.max", "torch.mean", "torch.max", "torch.mean.unsqueeze", "torch.min", "lgamma_margin_neg.unsqueeze.unsqueeze", "torch.mean", "torch.clamp", "mtl_pos_ab2l.squeeze().add().div.squeeze().add", "mtl_neg_ab2l.squeeze().add().div.squeeze().add", "mtl_pos_l2ab.squeeze().add().div.squeeze().add", "mtl_neg_l2ab.squeeze().add().div.squeeze().add", "mtl_pos_ori2l.squeeze().add().div.squeeze().add", "mtl_neg_ori2l.squeeze().add().div.squeeze().add", "mtl_pos_l2ori.squeeze().add().div.squeeze().add", "mtl_neg_l2ori.squeeze().add().div.squeeze().add", "mtab_pos_ab2l.squeeze().add().div.squeeze().add", "mtab_neg_ab2l.squeeze().add().div.squeeze().add", "mtab_pos_l2ab.squeeze().add().div.squeeze().add", "mtab_neg_l2ab.squeeze().add().div.squeeze().add", "mtab_pos_ab2ori.squeeze().add().div.squeeze().add", "mtab_neg_ab2ori.squeeze().add().div.squeeze().add", "mtab_pos_ori2ab.squeeze().add().div.squeeze().add", "mtab_neg_ori2ab.squeeze().add().div.squeeze().add", "mtori_pos_ori2l.squeeze().add().div.squeeze().add", "mtori_neg_ori2l.squeeze().add().div.squeeze().add", "mtori_pos_l2ori.squeeze().add().div.squeeze().add", "mtori_neg_l2ori.squeeze().add().div.squeeze().add", "mtori_pos_ab2ori.squeeze().add().div.squeeze().add", "mtori_neg_ab2ori.squeeze().add().div.squeeze().add", "mtori_pos_ori2ab.squeeze().add().div.squeeze().add", "mtori_neg_ori2ab.squeeze().add().div.squeeze().add", "pos_ab2l.squeeze().add().div.squeeze().add", "neg_ab2l.squeeze().add().div.squeeze().add", "pos_l2ab.squeeze().add().div.squeeze().add", "neg_l2ab.squeeze().add().div.squeeze().add", "pos_ori2l.squeeze().add().div.squeeze().add", "neg_ori2l.squeeze().add().div.squeeze().add", "pos_l2ori.squeeze().add().div.squeeze().add", "neg_l2ori.squeeze().add().div.squeeze().add", "pos_ab2ori.squeeze().add().div.squeeze().add", "neg_ab2ori.squeeze().add().div.squeeze().add", "pos_ori2ab.squeeze().add().div.squeeze().add", "neg_ori2ab.squeeze().add().div.squeeze().add", "torch.cat", "torch.cat", "torch.min", "torch.mean.unsqueeze", "torch.max", "lgamma_margin_neg.unsqueeze.unsqueeze", "torch.mean", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "mtl_pos_ab2l.squeeze().add().div.squeeze", "mtl_neg_ab2l.squeeze().add().div.squeeze", "mtl_pos_l2ab.squeeze().add().div.squeeze", "mtl_neg_l2ab.squeeze().add().div.squeeze", "mtl_pos_ori2l.squeeze().add().div.squeeze", "mtl_neg_ori2l.squeeze().add().div.squeeze", "mtl_pos_l2ori.squeeze().add().div.squeeze", "mtl_neg_l2ori.squeeze().add().div.squeeze", "mtab_pos_ab2l.squeeze().add().div.squeeze", "mtab_neg_ab2l.squeeze().add().div.squeeze", "mtab_pos_l2ab.squeeze().add().div.squeeze", "mtab_neg_l2ab.squeeze().add().div.squeeze", "mtab_pos_ab2ori.squeeze().add().div.squeeze", "mtab_neg_ab2ori.squeeze().add().div.squeeze", "mtab_pos_ori2ab.squeeze().add().div.squeeze", "mtab_neg_ori2ab.squeeze().add().div.squeeze", "mtori_pos_ori2l.squeeze().add().div.squeeze", "mtori_neg_ori2l.squeeze().add().div.squeeze", "mtori_pos_l2ori.squeeze().add().div.squeeze", "mtori_neg_l2ori.squeeze().add().div.squeeze", "mtori_pos_ab2ori.squeeze().add().div.squeeze", "mtori_neg_ab2ori.squeeze().add().div.squeeze", "mtori_pos_ori2ab.squeeze().add().div.squeeze", "mtori_neg_ori2ab.squeeze().add().div.squeeze", "pos_ab2l.squeeze().add().div.squeeze", "neg_ab2l.squeeze().add().div.squeeze", "pos_l2ab.squeeze().add().div.squeeze", "neg_l2ab.squeeze().add().div.squeeze", "pos_ori2l.squeeze().add().div.squeeze", "neg_ori2l.squeeze().add().div.squeeze", "pos_l2ori.squeeze().add().div.squeeze", "neg_l2ori.squeeze().add().div.squeeze", "pos_ab2ori.squeeze().add().div.squeeze", "neg_ab2ori.squeeze().add().div.squeeze", "pos_ori2ab.squeeze().add().div.squeeze", "neg_ori2ab.squeeze().add().div.squeeze", "min_positive_value.unsqueeze", "max_negative_value.unsqueeze", "min_positive_value.unsqueeze", "max_negative_value.unsqueeze", "min_positive_value.unsqueeze", "max_negative_value.unsqueeze", "min_positive_value.unsqueeze", "max_negative_value.unsqueeze", "min_positive_value.unsqueeze", "max_negative_value.unsqueeze"], "function", ["None"], ["", "", "def", "margin_injection_loss_calc", "(", "mtl_out_ab2l", ",", "mtl_out_l2ab", ",", "mtl_out_ori2l", ",", "mtl_out_l2ori", ",", "\n", "mtab_out_ab2l", ",", "mtab_out_l2ab", ",", "mtab_out_ab2ori", ",", "mtab_out_ori2ab", ",", "\n", "mtori_out_ori2l", ",", "mtori_out_l2ori", ",", "mtori_out_ab2ori", ",", "mtori_out_ori2ab", ",", "\n", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ",", "\n", "margin_type", ",", "margin_loss_type", ")", ":", "\n", "# split pos neg", "\n", "    ", "mtl_pos_ab2l", ",", "mtl_neg_ab2l", "=", "torch", ".", "split", "(", "mtl_out_ab2l", ",", "[", "1", ",", "mtl_out_ab2l", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtl_pos_l2ab", ",", "mtl_neg_l2ab", "=", "torch", ".", "split", "(", "mtl_out_l2ab", ",", "[", "1", ",", "mtl_out_l2ab", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtl_pos_ori2l", ",", "mtl_neg_ori2l", "=", "torch", ".", "split", "(", "mtl_out_ori2l", ",", "[", "1", ",", "mtl_out_ori2l", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtl_pos_l2ori", ",", "mtl_neg_l2ori", "=", "torch", ".", "split", "(", "mtl_out_l2ori", ",", "[", "1", ",", "mtl_out_l2ori", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "mtab_pos_ab2l", ",", "mtab_neg_ab2l", "=", "torch", ".", "split", "(", "mtab_out_ab2l", ",", "[", "1", ",", "mtab_out_ab2l", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtab_pos_l2ab", ",", "mtab_neg_l2ab", "=", "torch", ".", "split", "(", "mtab_out_l2ab", ",", "[", "1", ",", "mtab_out_l2ab", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtab_pos_ab2ori", ",", "mtab_neg_ab2ori", "=", "torch", ".", "split", "(", "mtab_out_ab2ori", ",", "[", "1", ",", "mtab_out_ab2ori", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtab_pos_ori2ab", ",", "mtab_neg_ori2ab", "=", "torch", ".", "split", "(", "mtab_out_ori2ab", ",", "[", "1", ",", "mtab_out_ori2ab", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "mtori_pos_ori2l", ",", "mtori_neg_ori2l", "=", "torch", ".", "split", "(", "mtori_out_ori2l", ",", "[", "1", ",", "mtori_out_ori2l", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtori_pos_l2ori", ",", "mtori_neg_l2ori", "=", "torch", ".", "split", "(", "mtori_out_l2ori", ",", "[", "1", ",", "mtori_out_l2ori", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtori_pos_ab2ori", ",", "mtori_neg_ab2ori", "=", "torch", ".", "split", "(", "mtori_out_ab2ori", ",", "[", "1", ",", "mtori_out_ab2ori", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "mtori_pos_ori2ab", ",", "mtori_neg_ori2ab", "=", "torch", ".", "split", "(", "mtori_out_ori2ab", ",", "[", "1", ",", "mtori_out_ori2ab", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "pos_ab2l", ",", "neg_ab2l", "=", "torch", ".", "split", "(", "out_ab2l", ",", "[", "1", ",", "out_ab2l", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_l2ab", ",", "neg_l2ab", "=", "torch", ".", "split", "(", "out_l2ab", ",", "[", "1", ",", "out_l2ab", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_ori2l", ",", "neg_ori2l", "=", "torch", ".", "split", "(", "out_ori2l", ",", "[", "1", ",", "out_ori2l", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_l2ori", ",", "neg_l2ori", "=", "torch", ".", "split", "(", "out_l2ori", ",", "[", "1", ",", "out_l2ori", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_ab2ori", ",", "neg_ab2ori", "=", "torch", ".", "split", "(", "out_ab2ori", ",", "[", "1", ",", "out_ab2ori", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_ori2ab", ",", "neg_ori2ab", "=", "torch", ".", "split", "(", "out_ori2ab", ",", "[", "1", ",", "out_ori2ab", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# post-process", "\n", "mtl_pos_ab2l", "=", "mtl_pos_ab2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtl_neg_ab2l", "=", "mtl_neg_ab2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtl_pos_l2ab", "=", "mtl_pos_l2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtl_neg_l2ab", "=", "mtl_neg_l2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtl_pos_ori2l", "=", "mtl_pos_ori2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtl_neg_ori2l", "=", "mtl_neg_ori2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtl_pos_l2ori", "=", "mtl_pos_l2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtl_neg_l2ori", "=", "mtl_neg_l2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "\n", "mtab_pos_ab2l", "=", "mtab_pos_ab2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtab_neg_ab2l", "=", "mtab_neg_ab2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtab_pos_l2ab", "=", "mtab_pos_l2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtab_neg_l2ab", "=", "mtab_neg_l2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtab_pos_ab2ori", "=", "mtab_pos_ab2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtab_neg_ab2ori", "=", "mtab_neg_ab2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtab_pos_ori2ab", "=", "mtab_pos_ori2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtab_neg_ori2ab", "=", "mtab_neg_ori2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "\n", "mtori_pos_ori2l", "=", "mtori_pos_ori2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtori_neg_ori2l", "=", "mtori_neg_ori2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtori_pos_l2ori", "=", "mtori_pos_l2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtori_neg_l2ori", "=", "mtori_neg_l2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtori_pos_ab2ori", "=", "mtori_pos_ab2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtori_neg_ab2ori", "=", "mtori_neg_ab2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtori_pos_ori2ab", "=", "mtori_pos_ori2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mtori_neg_ori2ab", "=", "mtori_neg_ori2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "mt_pos", "=", "torch", ".", "cat", "(", "(", "mtl_pos_ab2l", ",", "mtl_pos_l2ab", ",", "mtl_pos_ori2l", ",", "mtl_pos_l2ori", ",", "mtab_pos_ab2l", ",", "mtab_pos_l2ab", ",", "\n", "mtab_pos_ab2ori", ",", "mtab_pos_ori2ab", ",", "mtori_pos_ori2l", ",", "mtori_pos_l2ori", ",", "mtori_pos_ab2ori", ",", "\n", "mtori_pos_ori2ab", ")", ",", "dim", "=", "1", ")", "\n", "mt_neg", "=", "torch", ".", "cat", "(", "(", "mtl_neg_ab2l", ",", "mtl_neg_l2ab", ",", "mtl_neg_ori2l", ",", "mtl_neg_l2ori", ",", "mtab_neg_ab2l", ",", "mtab_neg_l2ab", ",", "\n", "mtab_neg_ab2ori", ",", "mtab_neg_ori2ab", ",", "mtori_neg_ori2l", ",", "mtori_neg_l2ori", ",", "mtori_neg_ab2ori", ",", "\n", "mtori_neg_ori2ab", ")", ",", "dim", "=", "1", ")", "\n", "\n", "pos_ab2l", "=", "pos_ab2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_ab2l", "=", "neg_ab2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "pos_l2ab", "=", "pos_l2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_l2ab", "=", "neg_l2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "pos_ori2l", "=", "pos_ori2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_ori2l", "=", "neg_ori2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "pos_l2ori", "=", "pos_l2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_l2ori", "=", "neg_l2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "pos_ab2ori", "=", "pos_ab2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_ab2ori", "=", "neg_ab2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "pos_ori2ab", "=", "pos_ori2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_ori2ab", "=", "neg_ori2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_ab2l", ",", "pos_l2ab", ",", "pos_ori2l", ",", "pos_l2ori", ",", "pos_ab2ori", ",", "pos_ori2ab", ")", ",", "dim", "=", "1", ")", "\n", "neg", "=", "torch", ".", "cat", "(", "(", "neg_ab2l", ",", "neg_l2ab", ",", "neg_ori2l", ",", "neg_l2ori", ",", "neg_ab2ori", ",", "neg_ori2ab", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# get max pos min neg", "\n", "min_positive_value", ",", "min_positive_pos", "=", "torch", ".", "min", "(", "pos", ",", "dim", "=", "-", "1", ")", "\n", "max_negative_value", ",", "max_negative_pos", "=", "torch", ".", "max", "(", "neg", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# get large gamma (margin)", "\n", "if", "margin_type", "==", "'small'", ":", "\n", "        ", "lgamma_margin_pos", ",", "_", "=", "torch", ".", "max", "(", "torch", ".", "cat", "(", "(", "min_positive_value", ".", "unsqueeze", "(", "1", ")", ",", "max_negative_value", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "lgamma_margin_pos", "=", "lgamma_margin_pos", ".", "unsqueeze", "(", "1", ")", "\n", "lgamma_margin_neg", ",", "_", "=", "torch", ".", "min", "(", "torch", ".", "cat", "(", "(", "min_positive_value", ".", "unsqueeze", "(", "1", ")", ",", "max_negative_value", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "lgamma_margin_neg", "=", "lgamma_margin_neg", ".", "unsqueeze", "(", "1", ")", "\n", "", "elif", "margin_type", "==", "'large'", ":", "\n", "        ", "lgamma_margin_pos", ",", "_", "=", "torch", ".", "min", "(", "torch", ".", "cat", "(", "(", "min_positive_value", ".", "unsqueeze", "(", "1", ")", ",", "max_negative_value", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "lgamma_margin_pos", "=", "lgamma_margin_pos", ".", "unsqueeze", "(", "1", ")", "\n", "lgamma_margin_neg", ",", "_", "=", "torch", ".", "max", "(", "torch", ".", "cat", "(", "(", "min_positive_value", ".", "unsqueeze", "(", "1", ")", ",", "max_negative_value", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "lgamma_margin_neg", "=", "lgamma_margin_neg", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "lgamma_margin_pos", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "(", "min_positive_value", ".", "unsqueeze", "(", "1", ")", ",", "max_negative_value", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "lgamma_margin_neg", "=", "lgamma_margin_pos", "\n", "\n", "# get margin injection loss", "\n", "", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "clamp", "(", "mt_pos", "-", "lgamma_margin_pos", ",", "min", "=", "0", ")", ")", "*", "margin_hyper", "\n", "loss", "+=", "torch", ".", "mean", "(", "torch", ".", "clamp", "(", "lgamma_margin_neg", "-", "mt_neg", ",", "min", "=", "0", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.parse_option": [[23, 135], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.lr_decay_epochs.split", "list", "os.path.join", "os.path.join", "ValueError", "parser.parse_args.lr_decay_epochs.append", "parser.parse_args.model_path.split", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "str", "int", "str"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'argument for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_version'", ",", "type", "=", "str", ",", "default", "=", "'MetAug_1e-5_1e-9_max'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_epoch'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "'load model epoch'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_freq'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'tb frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "18", ",", "help", "=", "'num of workers to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "60", ",", "help", "=", "'number of training epochs'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'30,40,50'", ",", "help", "=", "'where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'beta1 for Adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'beta2 for Adam'", ")", "\n", "\n", "# metagenaug optimization", "\n", "parser", ".", "add_argument", "(", "'--mt_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.03", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--mt_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--mt_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--bb_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'bb_learning_rate'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "\n", "# model definition", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'alexnet'", ",", "choices", "=", "[", "'alexnet'", ",", "\n", "'resnet50v1'", ",", "'resnet101v1'", ",", "'resnet18v1'", ",", "\n", "'resnet50v2'", ",", "'resnet101v2'", ",", "'resnet18v2'", ",", "\n", "'resnet50v3'", ",", "'resnet101v3'", ",", "'resnet18v3'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'the model to test'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'which layer to evaluate'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar-10'", ",", "choices", "=", "[", "'cifar-10'", ",", "'cifar-100'", ",", "'stl-10'", ",", "\n", "'tiny-imagenet'", ",", "'imagenet100'", ",", "'imagenet'", "]", ")", "\n", "\n", "# add new views", "\n", "parser", ".", "add_argument", "(", "'--view'", ",", "type", "=", "str", ",", "default", "=", "'Lab'", ",", "choices", "=", "[", "'Lab'", ",", "'YCbCr'", "]", ")", "\n", "\n", "# path definition", "\n", "parser", ".", "add_argument", "(", "'--data_folder'", ",", "type", "=", "str", ",", "default", "=", "'../../datasets/'", ",", "help", "=", "'path to data'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "'./save_path/'", ",", "help", "=", "'path to save tensorboard'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_path'", ",", "type", "=", "str", ",", "default", "=", "'./tensorboard_path/'", ",", "help", "=", "'path to tensorboard'", ")", "\n", "\n", "# data crop threshold", "\n", "parser", ".", "add_argument", "(", "'--crop_low'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'low area in crop'", ")", "\n", "\n", "# log file", "\n", "parser", ".", "add_argument", "(", "'--log'", ",", "type", "=", "str", ",", "default", "=", "'time_linear.txt'", ",", "help", "=", "'log file'", ")", "\n", "\n", "# GPU setting", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'GPU id to use.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--mark'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "'mark'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Set model_path", "\n", "opt", ".", "model_path", "=", "'./model_path/memory_'", "+", "str", "(", "opt", ".", "model_version", ")", "+", "'_nce_1024_alexnet_lr_0.03_decay_0.0001_bsz_64_view_Lab/ckpt_epoch_'", "+", "str", "(", "opt", ".", "load_epoch", ")", "+", "'.pth'", "\n", "\n", "if", "(", "opt", ".", "data_folder", "is", "None", ")", "or", "(", "opt", ".", "save_path", "is", "None", ")", "or", "(", "opt", ".", "tb_path", "is", "None", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'one or more of the folders is None: data_folder | save_path | tb_path'", ")", "\n", "\n", "", "if", "opt", ".", "dataset", "==", "'imagenet'", ":", "\n", "        ", "if", "'alexnet'", "not", "in", "opt", ".", "model", ":", "\n", "            ", "opt", ".", "crop_low", "=", "0.08", "\n", "\n", "", "", "iterations", "=", "opt", ".", "lr_decay_epochs", ".", "split", "(", "','", ")", "\n", "opt", ".", "lr_decay_epochs", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "iterations", ":", "\n", "        ", "opt", ".", "lr_decay_epochs", ".", "append", "(", "int", "(", "it", ")", ")", "\n", "\n", "", "opt", ".", "model_name", "=", "opt", ".", "model_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "opt", ".", "model_name", "=", "'calibrated_{}_{}_bsz_{}_lr_{}_decay_{}'", ".", "format", "(", "opt", ".", "model_version", ",", "opt", ".", "model_name", ",", "opt", ".", "batch_size", ",", "\n", "opt", ".", "learning_rate", ",", "opt", ".", "weight_decay", ")", "\n", "\n", "opt", ".", "model_name", "=", "'{}_view_{}'", ".", "format", "(", "opt", ".", "model_name", ",", "opt", ".", "view", ")", "\n", "\n", "opt", ".", "tb_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tb_path", ",", "opt", ".", "model_name", "+", "'_layer{}'", ".", "format", "(", "opt", ".", "layer", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "tb_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "tb_folder", ")", "\n", "\n", "", "opt", ".", "save_folder", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "save_path", ",", "opt", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "save_folder", ")", "\n", "\n", "", "opt", ".", "data_folder", "=", "'../../datasets/'", "+", "opt", ".", "dataset", "+", "'/'", "\n", "\n", "opt", ".", "mtgen_layer", "=", "3", "if", "opt", ".", "layer", "==", "8", "else", "2", "\n", "\n", "if", "opt", ".", "dataset", "==", "'imagenet100'", ":", "\n", "        ", "opt", ".", "n_label", "=", "100", "\n", "", "if", "opt", ".", "dataset", "==", "'imagenet'", ":", "\n", "        ", "opt", ".", "n_label", "=", "1000", "\n", "", "if", "opt", ".", "dataset", "==", "'stl-10'", ":", "\n", "        ", "opt", ".", "n_label", "=", "10", "\n", "", "if", "opt", ".", "dataset", "==", "'tiny-imagenet'", ":", "\n", "        ", "opt", ".", "n_label", "=", "200", "\n", "", "if", "opt", ".", "dataset", "==", "'cifar-10'", ":", "\n", "        ", "opt", ".", "n_label", "=", "10", "\n", "", "if", "opt", ".", "dataset", "==", "'cifar-100'", ":", "\n", "        ", "opt", ".", "n_label", "=", "100", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.get_train_val_loader": [[137, 187], ["os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "print", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.RGB2Lab", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "dataset.RGB2YCbCr", "NotImplemented", "len", "len", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_train_val_loader", "(", "args", ")", ":", "\n", "    ", "train_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_folder", ",", "'train'", ")", "\n", "val_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_folder", ",", "'val'", ")", "\n", "\n", "if", "args", ".", "view", "==", "'Lab'", ":", "\n", "        ", "mean", "=", "[", "(", "0", "+", "100", ")", "/", "2", ",", "(", "-", "86.183", "+", "98.233", ")", "/", "2", ",", "(", "-", "107.857", "+", "94.478", ")", "/", "2", "]", "\n", "std", "=", "[", "(", "100", "-", "0", ")", "/", "2", ",", "(", "86.183", "+", "98.233", ")", "/", "2", ",", "(", "107.857", "+", "94.478", ")", "/", "2", "]", "\n", "color_transfer", "=", "RGB2Lab", "(", ")", "\n", "", "elif", "args", ".", "view", "==", "'YCbCr'", ":", "\n", "        ", "mean", "=", "[", "116.151", ",", "121.080", ",", "132.342", "]", "\n", "std", "=", "[", "109.500", ",", "111.855", ",", "111.964", "]", "\n", "color_transfer", "=", "RGB2YCbCr", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "(", "'view not implemented {}'", ".", "format", "(", "args", ".", "view", ")", ")", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "train_folder", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "args", ".", "crop_low", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "val_folder", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "color_transfer", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", ")", "\n", "print", "(", "'number of train: {}'", ".", "format", "(", "len", "(", "train_dataset", ")", ")", ")", "\n", "print", "(", "'number of val: {}'", ".", "format", "(", "len", "(", "val_dataset", ")", ")", ")", "\n", "\n", "train_sampler", "=", "None", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "train_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.set_model": [[189, 226], ["args.model.startswith", "models.alexnet_MetAug.MyMetaGenNet().to", "models.alexnet_MetAug.MyMetaGenNet().to", "models.alexnet_MetAug.MyMetaGenNet().to", "print", "torch.load", "torch.load", "torch.load", "torch.load", "models.alexnet_MetAug.MyAlexNetCMC.load_state_dict", "MyMetaGenNet().to.load_state_dict", "MyMetaGenNet().to.load_state_dict", "MyMetaGenNet().to.load_state_dict", "print", "print", "models.alexnet_MetAug.MyAlexNetCMC.cuda", "models.LinearModel.LinearClassifierAlexNetFeAug.cuda", "models.alexnet_MetAug.MyAlexNetCMC.eval", "torch.CrossEntropyLoss().cuda", "int", "torch.device", "torch.device", "torch.device", "torch.device", "models.alexnet_MetAug.MyAlexNetCMC", "models.LinearModel.LinearClassifierAlexNetFeAug", "NotImplementedError", "torch.device", "torch.device", "torch.device", "torch.device", "models.alexnet_MetAug.MyMetaGenNet", "models.alexnet_MetAug.MyMetaGenNet", "models.alexnet_MetAug.MyMetaGenNet", "torch.CrossEntropyLoss", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["", "def", "set_model", "(", "args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "_", "=", "int", "(", "args", ".", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "gpu", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "", "except", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "", "if", "args", ".", "model", ".", "startswith", "(", "'alexnet'", ")", ":", "\n", "        ", "model", "=", "MyAlexNetCMC", "(", "device", ")", "\n", "classifier", "=", "LinearClassifierAlexNetFeAug", "(", "layer", "=", "args", ".", "layer", ",", "n_label", "=", "args", ".", "n_label", ",", "pool_type", "=", "'max'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'model not supported {}'", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "", "l_mtgen", "=", "MyMetaGenNet", "(", "device", ")", ".", "to", "(", "device", ")", "\n", "\n", "ab_mtgen", "=", "MyMetaGenNet", "(", "device", ")", ".", "to", "(", "device", ")", "\n", "\n", "ori_mtgen", "=", "MyMetaGenNet", "(", "device", ")", ".", "to", "(", "device", ")", "\n", "\n", "# load pre-trained model", "\n", "print", "(", "'==> loading pre-trained model'", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'model'", "]", ")", "\n", "l_mtgen", ".", "load_state_dict", "(", "ckpt", "[", "'l_mtgen'", "]", ")", "\n", "ab_mtgen", ".", "load_state_dict", "(", "ckpt", "[", "'ab_mtgen'", "]", ")", "\n", "ori_mtgen", ".", "load_state_dict", "(", "ckpt", "[", "'ori_mtgen'", "]", ")", "\n", "print", "(", "\"==> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "model_path", ",", "ckpt", "[", "'epoch'", "]", ")", ")", "\n", "print", "(", "'==> done'", ")", "\n", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "classifier", "=", "classifier", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "return", "model", ",", "classifier", ",", "criterion", ",", "l_mtgen", ",", "ab_mtgen", ",", "ori_mtgen", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.set_optimizer": [[228, 234], ["torch.SGD", "classifier.parameters"], "function", ["None"], ["", "def", "set_optimizer", "(", "args", ",", "classifier", ")", ":", "\n", "    ", "optimizer", "=", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.train": [[236, 299], ["model.eval", "classifier.train", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "time.time", "enumerate", "util.AverageMeter.update", "input.cuda.float", "target.cuda.cuda", "classifier", "criterion", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "util.AverageMeter.update", "time.time", "input.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "l_mtgen", "ab_mtgen", "ori_mtgen", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "sys.stdout.flush", "time.time", "time.time", "feat_l.detach", "feat_ab.detach", "feat_ori.detach", "l_mtgen.detach", "ab_mtgen.detach", "ori_mtgen.detach", "len"], "function", ["home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.train", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.accuracy", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["", "def", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "classifier", ",", "criterion", ",", "optimizer", ",", "l_mtgen", ",", "ab_mtgen", ",", "ori_mtgen", ",", "opt", ")", ":", "\n", "    ", "\"\"\"\n    one epoch training\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "if", "opt", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", "opt", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "opt", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# ===================forward=====================", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feat_l", ",", "feat_ab", ",", "feat_ori", "=", "model", "(", "input", ",", "False", ",", "opt", ".", "layer", ")", "\n", "mt_feat_l", "=", "l_mtgen", "(", "feat_l", ",", "False", ",", "layer", "=", "opt", ".", "mtgen_layer", ")", "\n", "mt_feat_ab", "=", "ab_mtgen", "(", "feat_ab", ",", "False", ",", "layer", "=", "opt", ".", "mtgen_layer", ")", "\n", "mt_feat_ori", "=", "ori_mtgen", "(", "feat_ori", ",", "False", ",", "layer", "=", "opt", ".", "mtgen_layer", ")", "\n", "\n", "feat", "=", "torch", ".", "cat", "(", "(", "feat_l", ".", "detach", "(", ")", ",", "feat_ab", ".", "detach", "(", ")", ",", "feat_ori", ".", "detach", "(", ")", ",", "mt_feat_l", ".", "detach", "(", ")", ",", "\n", "mt_feat_ab", ".", "detach", "(", ")", ",", "mt_feat_ori", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "output", "=", "classifier", "(", "feat", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "10", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# ===================backward=====================", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# ===================meters=====================", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print info", "\n", "if", "idx", "%", "opt", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.validate": [[301, 358], ["util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "model.eval", "classifier.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "input.cuda.float", "target.cuda.cuda", "model", "l_mtgen", "ab_mtgen", "ori_mtgen", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier", "criterion", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "input.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "print", "feat_l.detach", "feat_ab.detach", "feat_ori.detach", "l_mtgen.detach", "ab_mtgen.detach", "ori_mtgen.detach", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.accuracy", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.AverageMeter.update", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "classifier", ",", "criterion", ",", "l_mtgen", ",", "ab_mtgen", ",", "ori_mtgen", ",", "opt", ")", ":", "\n", "    ", "\"\"\"\n    evaluation\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "            ", "input", "=", "input", ".", "float", "(", ")", "\n", "if", "opt", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", "opt", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "opt", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "feat_l", ",", "feat_ab", ",", "feat_ori", "=", "model", "(", "input", ",", "False", ",", "opt", ".", "layer", ")", "\n", "mt_feat_l", "=", "l_mtgen", "(", "feat_l", ",", "False", ",", "layer", "=", "opt", ".", "mtgen_layer", ")", "\n", "mt_feat_ab", "=", "ab_mtgen", "(", "feat_ab", ",", "False", ",", "layer", "=", "opt", ".", "mtgen_layer", ")", "\n", "mt_feat_ori", "=", "ori_mtgen", "(", "feat_ori", ",", "False", ",", "layer", "=", "opt", ".", "mtgen_layer", ")", "\n", "\n", "feat", "=", "torch", ".", "cat", "(", "(", "feat_l", ".", "detach", "(", ")", ",", "feat_ab", ".", "detach", "(", ")", ",", "feat_ori", ".", "detach", "(", ")", ",", "mt_feat_l", ".", "detach", "(", ")", ",", "\n", "mt_feat_ab", ".", "detach", "(", ")", ",", "mt_feat_ori", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "output", "=", "classifier", "(", "feat", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "idx", "%", "opt", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "idx", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.main": [[360, 474], ["LinearProbing_MetAug.parse_option", "LinearProbing_MetAug.get_train_val_loader", "LinearProbing_MetAug.set_model", "LinearProbing_MetAug.set_optimizer", "tensorboard_logger.Logger", "range", "print", "os.path.isfile", "os.path.isfile", "util.adjust_learning_rate", "print", "time.time", "LinearProbing_MetAug.train", "time.time", "print", "tb_logger.Logger.log_value", "tb_logger.Logger.log_value", "tb_logger.Logger.log_value", "print", "LinearProbing_MetAug.validate", "tb_logger.Logger.log_value", "tb_logger.Logger.log_value", "tb_logger.Logger.log_value", "print", "torch.load", "torch.load", "torch.load", "torch.load", "classifier.load_state_dict", "set_optimizer.load_state_dict", "print", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "classifier.load_state_dict", "set_optimizer.load_state_dict", "best_acc1.to.cuda", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "os.path.join", "print", "torch.save", "torch.save", "torch.save", "torch.save", "print", "os.path.join", "print", "torch.save", "torch.save", "torch.save", "torch.save", "best_acc1.to.to", "classifier.state_dict", "set_optimizer.state_dict", "classifier.state_dict", "set_optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.parse_option", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.get_train_val_loader", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.set_model", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.set_optimizer", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.util.adjust_learning_rate", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.train", "home.repos.pwc.inspect_result.lionellee9089_metaug.None.LinearProbing_MetAug.validate", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "best_acc1", "=", "0", "\n", "\n", "args", "=", "parse_option", "(", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "# set the data loader", "\n", "", "train_loader", ",", "val_loader", ",", "train_sampler", "=", "get_train_val_loader", "(", "args", ")", "\n", "\n", "# set the model", "\n", "model", ",", "classifier", ",", "criterion", ",", "l_mtgen", ",", "ab_mtgen", ",", "ori_mtgen", "=", "set_model", "(", "args", ")", "\n", "\n", "# set optimizer", "\n", "optimizer", "=", "set_optimizer", "(", "args", ",", "classifier", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# optionally resume linear classifier", "\n", "args", ".", "start_epoch", "=", "1", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'classifier'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "args", ".", "start_epoch", "=", "1", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "classifier", ".", "load_state_dict", "(", "checkpoint", "[", "'classifier'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "best_acc1", "=", "best_acc1", ".", "cuda", "(", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# tensorboard", "\n", "", "", "logger", "=", "tb_logger", ".", "Logger", "(", "logdir", "=", "args", ".", "tb_folder", ",", "flush_secs", "=", "2", ")", "\n", "\n", "# routine", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "epoch", ",", "args", ",", "optimizer", ")", "\n", "print", "(", "\"==> training...\"", ")", "\n", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_acc5", ",", "train_loss", "=", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "classifier", ",", "criterion", ",", "optimizer", ",", "l_mtgen", ",", "\n", "ab_mtgen", ",", "ori_mtgen", ",", "args", ")", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'train epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "logger", ".", "log_value", "(", "'train_acc'", ",", "train_acc", ",", "epoch", ")", "\n", "logger", ".", "log_value", "(", "'train_acc5'", ",", "train_acc5", ",", "epoch", ")", "\n", "logger", ".", "log_value", "(", "'train_loss'", ",", "train_loss", ",", "epoch", ")", "\n", "\n", "print", "(", "\"==> testing...\"", ")", "\n", "test_acc", ",", "test_acc5", ",", "test_loss", "=", "validate", "(", "val_loader", ",", "model", ",", "classifier", ",", "criterion", ",", "l_mtgen", ",", "ab_mtgen", ",", "\n", "ori_mtgen", ",", "args", ")", "\n", "\n", "logger", ".", "log_value", "(", "'test_acc'", ",", "test_acc", ",", "epoch", ")", "\n", "logger", ".", "log_value", "(", "'test_acc5'", ",", "test_acc5", ",", "epoch", ")", "\n", "logger", ".", "log_value", "(", "'test_loss'", ",", "test_loss", ",", "epoch", ")", "\n", "\n", "# save the best model", "\n", "if", "test_acc", ">", "best_acc1", ":", "\n", "            ", "best_acc1", "=", "test_acc", "\n", "state", "=", "{", "\n", "'opt'", ":", "args", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'classifier'", ":", "classifier", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "save_name", "=", "'{}_layer{}.pth'", ".", "format", "(", "args", ".", "model", ",", "args", ".", "layer", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_folder", ",", "save_name", ")", "\n", "print", "(", "'saving best model!'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_name", ")", "\n", "\n", "# save model", "\n", "", "if", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "            ", "print", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'opt'", ":", "args", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'classifier'", ":", "classifier", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "test_acc", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "save_name", "=", "'ckpt_epoch_{epoch}.pth'", ".", "format", "(", "epoch", "=", "epoch", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_folder", ",", "save_name", ")", "\n", "print", "(", "'saving regular model!'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_name", ")", "\n", "\n", "# tensorboard logger", "\n", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCEAverage_MetAug.NCEAverage.__init__": [[9, 23], ["torch.nn.Module.__init__", "torch.ones", "alias_multinomial.AliasMethod", "NCEAverage_MetAug.NCEAverage.multinomial.cuda", "NCEAverage_MetAug.NCEAverage.register_buffer", "NCEAverage_MetAug.NCEAverage.register_buffer", "NCEAverage_MetAug.NCEAverage.register_buffer", "NCEAverage_MetAug.NCEAverage.register_buffer", "torch.tensor", "math.sqrt", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_().add_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand().mul_", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["    ", "def", "__init__", "(", "self", ",", "inputSize", ",", "outputSize", ",", "K", ",", "T", "=", "0.07", ",", "momentum", "=", "0.5", ",", "use_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "NCEAverage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nLem", "=", "outputSize", "\n", "self", ".", "unigrams", "=", "torch", ".", "ones", "(", "self", ".", "nLem", ")", "\n", "self", ".", "multinomial", "=", "AliasMethod", "(", "self", ".", "unigrams", ")", "\n", "self", ".", "multinomial", ".", "cuda", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "use_softmax", "=", "use_softmax", "\n", "\n", "self", ".", "register_buffer", "(", "'params'", ",", "torch", ".", "tensor", "(", "[", "K", ",", "T", ",", "-", "1", ",", "-", "1", ",", "momentum", "]", ")", ")", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "inputSize", "/", "3", ")", "\n", "self", ".", "register_buffer", "(", "'memory_l'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ab'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "self", ".", "register_buffer", "(", "'memory_ori'", ",", "torch", ".", "rand", "(", "outputSize", ",", "inputSize", ")", ".", "mul_", "(", "2", "*", "stdv", ")", ".", "add_", "(", "-", "stdv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCEAverage_MetAug.NCEAverage.forward": [[24, 86], ["int", "NCEAverage_MetAug.NCEAverage.params[].item", "l.size", "NCEAverage_MetAug.NCEAverage.memory_l.size", "torch.index_select().detach", "weight_l.view.view.view", "torch.bmm", "torch.index_select().detach", "weight_ab.view.view.view", "torch.bmm", "torch.index_select().detach", "weight_ori.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out_ab2l.contiguous.contiguous.contiguous", "out_l2ab.contiguous.contiguous.contiguous", "out_ori2l.contiguous.contiguous.contiguous", "out_l2ori.contiguous.contiguous.contiguous", "out_ab2ori.contiguous.contiguous.contiguous", "out_ori2ab.contiguous.contiguous.contiguous", "NCEAverage_MetAug.NCEAverage.params[].item", "NCEAverage_MetAug.NCEAverage.multinomial.draw().view", "NCEAverage_MetAug.NCEAverage.select().copy_", "ab.view", "l.view", "l.view", "ori.view", "ori.view", "ab.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.no_grad", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage_MetAug.NCEAverage.memory_l.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage_MetAug.NCEAverage.memory_ab.index_copy_", "torch.index_select", "torch.index_select.mul_", "torch.index_select.add_", "torch.index_select.pow().sum().pow", "torch.index_select.div", "NCEAverage_MetAug.NCEAverage.memory_ori.index_copy_", "NCEAverage_MetAug.NCEAverage.multinomial.draw", "NCEAverage_MetAug.NCEAverage.select", "NCEAverage_MetAug.NCEAverage.view", "NCEAverage_MetAug.NCEAverage.view", "NCEAverage_MetAug.NCEAverage.view", "y.view", "torch.mul", "y.view", "torch.mul", "y.view", "torch.mul", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "torch.index_select.pow().sum", "torch.index_select.pow", "torch.index_select.pow", "torch.index_select.pow"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.draw"], ["", "def", "forward", "(", "self", ",", "l", ",", "ab", ",", "ori", ",", "y", ",", "idx", "=", "None", ",", "updatemem", "=", "True", ")", ":", "\n", "        ", "K", "=", "int", "(", "self", ".", "params", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "\n", "momentum", "=", "self", ".", "params", "[", "4", "]", ".", "item", "(", ")", "\n", "batchSize", "=", "l", ".", "size", "(", "0", ")", "\n", "inputSize", "=", "self", ".", "memory_l", ".", "size", "(", "1", ")", "\n", "\n", "# score computation", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "multinomial", ".", "draw", "(", "batchSize", "*", "(", "self", ".", "K", "+", "1", ")", ")", ".", "view", "(", "batchSize", ",", "-", "1", ")", "\n", "idx", ".", "select", "(", "1", ",", "0", ")", ".", "copy_", "(", "y", ".", "data", ")", "\n", "\n", "# sample", "\n", "", "weight_l", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_l", "=", "weight_l", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_ab2l", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "\n", "# sample", "\n", "weight_ab", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_ab", "=", "weight_ab", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_l2ab", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "# sample", "\n", "weight_ori", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ori", ",", "0", ",", "idx", ".", "view", "(", "-", "1", ")", ")", ".", "detach", "(", ")", "\n", "weight_ori", "=", "weight_ori", ".", "view", "(", "batchSize", ",", "K", "+", "1", ",", "inputSize", ")", "\n", "out_l2ori", "=", "torch", ".", "bmm", "(", "weight_ori", ",", "l", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "\n", "# other", "\n", "out_ori2l", "=", "torch", ".", "bmm", "(", "weight_l", ",", "ori", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_ori2ab", "=", "torch", ".", "bmm", "(", "weight_ab", ",", "ori", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_ab2ori", "=", "torch", ".", "bmm", "(", "weight_ori", ",", "ab", ".", "view", "(", "batchSize", ",", "inputSize", ",", "1", ")", ")", "\n", "out_ab2l", "=", "out_ab2l", ".", "contiguous", "(", ")", "\n", "out_l2ab", "=", "out_l2ab", ".", "contiguous", "(", ")", "\n", "out_ori2l", "=", "out_ori2l", ".", "contiguous", "(", ")", "\n", "out_l2ori", "=", "out_l2ori", ".", "contiguous", "(", ")", "\n", "out_ab2ori", "=", "out_ab2ori", ".", "contiguous", "(", ")", "\n", "out_ori2ab", "=", "out_ori2ab", ".", "contiguous", "(", ")", "\n", "\n", "# update memory", "\n", "if", "updatemem", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "l_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_l", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "l_pos", ".", "mul_", "(", "momentum", ")", "\n", "l_pos", ".", "add_", "(", "torch", ".", "mul", "(", "l", ",", "1", "-", "momentum", ")", ")", "\n", "l_norm", "=", "l_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_l", "=", "l_pos", ".", "div", "(", "l_norm", ")", "\n", "self", ".", "memory_l", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_l", ")", "\n", "\n", "ab_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ab", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ab_pos", ".", "mul_", "(", "momentum", ")", "\n", "ab_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ab", ",", "1", "-", "momentum", ")", ")", "\n", "ab_norm", "=", "ab_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ab", "=", "ab_pos", ".", "div", "(", "ab_norm", ")", "\n", "self", ".", "memory_ab", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ab", ")", "\n", "\n", "ori_pos", "=", "torch", ".", "index_select", "(", "self", ".", "memory_ori", ",", "0", ",", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "ori_pos", ".", "mul_", "(", "momentum", ")", "\n", "ori_pos", ".", "add_", "(", "torch", ".", "mul", "(", "ori", ",", "1", "-", "momentum", ")", ")", "\n", "ori_norm", "=", "ori_pos", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "0.5", ")", "\n", "updated_ori", "=", "ori_pos", ".", "div", "(", "ori_norm", ")", "\n", "self", ".", "memory_ori", ".", "index_copy_", "(", "0", ",", "y", ",", "updated_ori", ")", "\n", "\n", "", "", "return", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.__init__": [[8, 44], ["len", "torch.zeros", "torch.LongTensor", "enumerate", "probs.sum", "probs.div_", "smaller.pop", "larger.pop", "probs.sum", "smaller.append", "larger.append", "len", "len", "smaller.append", "larger.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probs", ")", ":", "\n", "\n", "        ", "if", "probs", ".", "sum", "(", ")", ">", "1", ":", "\n", "            ", "probs", ".", "div_", "(", "probs", ".", "sum", "(", ")", ")", "\n", "", "K", "=", "len", "(", "probs", ")", "\n", "self", ".", "prob", "=", "torch", ".", "zeros", "(", "K", ")", "\n", "self", ".", "alias", "=", "torch", ".", "LongTensor", "(", "[", "0", "]", "*", "K", ")", "\n", "\n", "# Sort the data into the outcomes with probabilities", "\n", "# that are larger and smaller than 1/K.", "\n", "smaller", "=", "[", "]", "\n", "larger", "=", "[", "]", "\n", "for", "kk", ",", "prob", "in", "enumerate", "(", "probs", ")", ":", "\n", "            ", "self", ".", "prob", "[", "kk", "]", "=", "K", "*", "prob", "\n", "if", "self", ".", "prob", "[", "kk", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "kk", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "kk", ")", "\n", "\n", "# Loop though and create little binary mixtures that", "\n", "# appropriately allocate the larger outcomes over the", "\n", "# overall uniform mixture.", "\n", "", "", "while", "len", "(", "smaller", ")", ">", "0", "and", "len", "(", "larger", ")", ">", "0", ":", "\n", "            ", "small", "=", "smaller", ".", "pop", "(", ")", "\n", "large", "=", "larger", ".", "pop", "(", ")", "\n", "\n", "self", ".", "alias", "[", "small", "]", "=", "large", "\n", "self", ".", "prob", "[", "large", "]", "=", "(", "self", ".", "prob", "[", "large", "]", "-", "1.0", ")", "+", "self", ".", "prob", "[", "small", "]", "\n", "\n", "if", "self", ".", "prob", "[", "large", "]", "<", "1.0", ":", "\n", "                ", "smaller", ".", "append", "(", "large", ")", "\n", "", "else", ":", "\n", "                ", "larger", ".", "append", "(", "large", ")", "\n", "\n", "", "", "for", "last_one", "in", "smaller", "+", "larger", ":", "\n", "            ", "self", ".", "prob", "[", "last_one", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda": [[45, 48], ["alias_multinomial.AliasMethod.prob.cuda", "alias_multinomial.AliasMethod.alias.cuda"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda", "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["", "", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "prob", "=", "self", ".", "prob", ".", "cuda", "(", ")", "\n", "self", ".", "alias", "=", "self", ".", "alias", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.draw": [[49, 66], ["alias_multinomial.AliasMethod.alias.size", "torch.zeros().random_", "alias_multinomial.AliasMethod.prob.index_select", "alias_multinomial.AliasMethod.alias.index_select", "torch.bernoulli", "torch.zeros().random_.mul", "alias_multinomial.AliasMethod.mul", "torch.bernoulli.long", "torch.zeros"], "methods", ["None"], ["", "def", "draw", "(", "self", ",", "N", ")", ":", "\n", "        ", "\"\"\"\n        Draw N samples from multinomial\n        :param N: number of samples\n        :return: samples\n        \"\"\"", "\n", "K", "=", "self", ".", "alias", ".", "size", "(", "0", ")", "\n", "\n", "kk", "=", "torch", ".", "zeros", "(", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "prob", ".", "device", ")", ".", "random_", "(", "0", ",", "K", ")", "\n", "prob", "=", "self", ".", "prob", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "alias", "=", "self", ".", "alias", ".", "index_select", "(", "0", ",", "kk", ")", "\n", "# b is whether a random number is greater than q", "\n", "b", "=", "torch", ".", "bernoulli", "(", "prob", ")", "\n", "oq", "=", "kk", ".", "mul", "(", "b", ".", "long", "(", ")", ")", "\n", "oj", "=", "alias", ".", "mul", "(", "(", "1", "-", "b", ")", ".", "long", "(", ")", ")", "\n", "\n", "return", "oq", "+", "oj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.NCECriterion.__init__": [[10, 13], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_data", ")", ":", "\n", "        ", "super", "(", "NCECriterion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_data", "=", "n_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.NCECriterion.forward": [[14, 36], ["x.squeeze.squeeze.squeeze", "torch.zeros().cuda().long", "NCECriterion_MetAug.NCECriterion.criterion", "torch.zeros().cuda", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        bsz = x.shape[0]\n        m = x.size(1) - 1\n        # noise distribution\n        Pn = 1 / float(self.n_data)\n        # loss for positive pair\n        P_pos = x.select(1, 0)\n        log_D1 = torch.div(P_pos, P_pos.add(m * Pn + eps)).log_()\n        # loss for K negative pair\n        P_neg = x.narrow(1, 1, m)\n        a = P_neg.clone().fill_(m * Pn)\n        log_D0 = torch.div(P_neg.clone().fill_(m * Pn), P_neg.add(m * Pn + eps)).log_()\n        loss = - (log_D1.sum(0) + log_D0.view(-1, 1).sum(0)) / bsz\n        '''", "\n", "\n", "bsz", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "bsz", "]", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.NCESoftmaxLoss.__init__": [[41, 44], ["torch.nn.Module.__init__", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "NCESoftmaxLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.NCESoftmaxLoss.forward": [[45, 51], ["x.squeeze.squeeze.squeeze", "torch.zeros().cuda().long", "NCECriterion_MetAug.NCESoftmaxLoss.criterion", "torch.zeros().cuda", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bsz", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "bsz", "]", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.CircleLoss.__init__": [[56, 67], ["torch.nn.Module.__init__", "torch.nn.CrossEntropyLoss", "torch.nn.Softplus"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CircleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "soft_plus", "=", "nn", ".", "Softplus", "(", ")", "\n", "self", ".", "delta_m", "=", "args", ".", "delta_m_gh", "\n", "self", ".", "alpha_m", "=", "args", ".", "alpha_m_gh", "\n", "self", ".", "alpha_de", "=", "args", ".", "alpha_de_gh", "\n", "self", ".", "alpha_enable", "=", "args", ".", "alpha_enable_gh", "\n", "self", ".", "delta_enable", "=", "args", ".", "delta_enable_gh", "\n", "self", ".", "gamma", "=", "args", ".", "gama_gh", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.CircleLoss.circle_loss_ite": [[68, 81], ["torch.clamp", "torch.clamp", "NCECriterion_MetAug.CircleLoss.soft_plus", "sn.detach", "torch.logsumexp", "torch.logsumexp", "sp.detach"], "methods", ["None"], ["", "def", "circle_loss_ite", "(", "self", ",", "sp", ",", "sn", ")", ":", "\n", "        ", "ap", "=", "torch", ".", "clamp", "(", "-", "sp", ".", "detach", "(", ")", "+", "1", "+", "self", ".", "m", ",", "max", "=", "1000", ",", "min", "=", "0.", ")", "\n", "an", "=", "torch", ".", "clamp", "(", "sn", ".", "detach", "(", ")", "+", "self", ".", "m", ",", "max", "=", "1000", ",", "min", "=", "0.", ")", "\n", "\n", "delta_p", "=", "1", "-", "self", ".", "m", "\n", "delta_n", "=", "self", ".", "m", "\n", "\n", "logit_p", "=", "-", "ap", "*", "(", "sp", "-", "delta_p", "+", "eps", ")", "*", "self", ".", "gamma", "\n", "logit_n", "=", "an", "*", "(", "sn", "-", "delta_n", ")", "*", "self", ".", "gamma", "\n", "\n", "loss", "=", "self", ".", "soft_plus", "(", "torch", ".", "logsumexp", "(", "logit_n", ",", "dim", "=", "1", ")", "+", "torch", ".", "logsumexp", "(", "logit_p", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.CircleLoss.circle_loss_ite_de_to_softmax": [[82, 111], ["NCECriterion_MetAug.CircleLoss.soft_plus().sum().div", "loss.div().mul.div().mul.div().mul", "torch.clamp", "torch.clamp", "ValueError", "ValueError", "NCECriterion_MetAug.CircleLoss.soft_plus().sum", "loss.div().mul.div().mul.div", "sn.detach().div", "sp.detach().div", "NCECriterion_MetAug.CircleLoss.soft_plus", "sn.detach", "sp.detach", "torch.logsumexp", "torch.logsumexp"], "methods", ["None"], ["", "def", "circle_loss_ite_de_to_softmax", "(", "self", ",", "sp", ",", "sn", ")", ":", "\n", "        ", "if", "self", ".", "alpha_enable", "==", "'yes'", ":", "\n", "            ", "ap", "=", "torch", ".", "clamp", "(", "1", "/", "self", ".", "alpha_de", "-", "sp", ".", "detach", "(", ")", ".", "div", "(", "self", ".", "alpha_de", ")", "+", "self", ".", "alpha_m", ",", "max", "=", "1000", ",", "min", "=", "0.", ")", "\n", "an", "=", "torch", ".", "clamp", "(", "sn", ".", "detach", "(", ")", ".", "div", "(", "self", ".", "alpha_de", ")", "+", "self", ".", "alpha_m", ",", "max", "=", "1000", ",", "min", "=", "0.", ")", "\n", "ap", "=", "1", "\n", "an", "=", "1", "\n", "", "elif", "self", ".", "alpha_enable", "==", "'no'", ":", "\n", "            ", "ap", "=", "1", "\n", "an", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'alpha enable must be yes or no,but get :{}'", ".", "format", "(", "self", ".", "alpha_enable", ")", ")", "\n", "\n", "", "if", "self", ".", "delta_enable", "==", "'yes'", ":", "\n", "            ", "delta_p", "=", "1", "-", "self", ".", "delta_m", "\n", "delta_n", "=", "self", ".", "delta_m", "\n", "", "elif", "self", ".", "delta_enable", "==", "'no'", ":", "\n", "            ", "delta_p", "=", "0", "\n", "delta_n", "=", "0", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'alpha enable must be yes or no,but get :{}'", ".", "format", "(", "self", ".", "alpha_enable", ")", ")", "\n", "\n", "", "logit_p", "=", "-", "ap", "*", "(", "sp", "-", "delta_p", ")", "*", "self", ".", "gamma", "\n", "logit_n", "=", "an", "*", "(", "sn", "-", "delta_n", ")", "*", "self", ".", "gamma", "\n", "\n", "loss", "=", "self", ".", "soft_plus", "(", "torch", ".", "logsumexp", "(", "logit_n", ",", "dim", "=", "1", ")", "+", "torch", ".", "logsumexp", "(", "logit_p", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", ")", ".", "div", "(", "sp", ".", "shape", "[", "0", "]", ")", "\n", "\n", "loss", "=", "loss", ".", "div", "(", "self", ".", "gamma", ")", ".", "mul", "(", "16", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.CircleLoss.calculate_original_softmax": [[112, 118], ["x.squeeze.squeeze.squeeze", "torch.zeros().cuda().long", "NCECriterion_MetAug.CircleLoss.criterion", "torch.zeros().cuda", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.alias_multinomial.AliasMethod.cuda"], ["", "def", "calculate_original_softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "bsz", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "label", "=", "torch", ".", "zeros", "(", "[", "bsz", "]", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "x", ",", "label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.CircleLoss.forward": [[119, 159], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "pos_ab2l.squeeze().add().div.squeeze().add().div.squeeze().add().div", "neg_ab2l.squeeze().add().div.squeeze().add().div.squeeze().add().div", "pos_l2ab.squeeze().add().div.squeeze().add().div.squeeze().add().div", "neg_l2ab.squeeze().add().div.squeeze().add().div.squeeze().add().div", "pos_ori2l.squeeze().add().div.squeeze().add().div.squeeze().add().div", "neg_ori2l.squeeze().add().div.squeeze().add().div.squeeze().add().div", "pos_l2ori.squeeze().add().div.squeeze().add().div.squeeze().add().div", "neg_l2ori.squeeze().add().div.squeeze().add().div.squeeze().add().div", "pos_ab2ori.squeeze().add().div.squeeze().add().div.squeeze().add().div", "neg_ab2ori.squeeze().add().div.squeeze().add().div.squeeze().add().div", "pos_ori2ab.squeeze().add().div.squeeze().add().div.squeeze().add().div", "neg_ori2ab.squeeze().add().div.squeeze().add().div.squeeze().add().div", "torch.cat", "torch.cat", "NCECriterion_MetAug.CircleLoss.circle_loss_ite_de_to_softmax().sum", "pos_ab2l.squeeze().add().div.squeeze().add().div.squeeze().add", "neg_ab2l.squeeze().add().div.squeeze().add().div.squeeze().add", "pos_l2ab.squeeze().add().div.squeeze().add().div.squeeze().add", "neg_l2ab.squeeze().add().div.squeeze().add().div.squeeze().add", "pos_ori2l.squeeze().add().div.squeeze().add().div.squeeze().add", "neg_ori2l.squeeze().add().div.squeeze().add().div.squeeze().add", "pos_l2ori.squeeze().add().div.squeeze().add().div.squeeze().add", "neg_l2ori.squeeze().add().div.squeeze().add().div.squeeze().add", "pos_ab2ori.squeeze().add().div.squeeze().add().div.squeeze().add", "neg_ab2ori.squeeze().add().div.squeeze().add().div.squeeze().add", "pos_ori2ab.squeeze().add().div.squeeze().add().div.squeeze().add", "neg_ori2ab.squeeze().add().div.squeeze().add().div.squeeze().add", "out_ab2l[].detach", "print", "NCECriterion_MetAug.CircleLoss.circle_loss_ite_de_to_softmax", "pos_ab2l.squeeze().add().div.squeeze().add().div.squeeze", "neg_ab2l.squeeze().add().div.squeeze().add().div.squeeze", "pos_l2ab.squeeze().add().div.squeeze().add().div.squeeze", "neg_l2ab.squeeze().add().div.squeeze().add().div.squeeze", "pos_ori2l.squeeze().add().div.squeeze().add().div.squeeze", "neg_ori2l.squeeze().add().div.squeeze().add().div.squeeze", "pos_l2ori.squeeze().add().div.squeeze().add().div.squeeze", "neg_l2ori.squeeze().add().div.squeeze().add().div.squeeze", "pos_ab2ori.squeeze().add().div.squeeze().add().div.squeeze", "neg_ab2ori.squeeze().add().div.squeeze().add().div.squeeze", "pos_ori2ab.squeeze().add().div.squeeze().add().div.squeeze", "neg_ori2ab.squeeze().add().div.squeeze().add().div.squeeze", "[].sum().detach", "out_ab2l_print_n[].sum", "[].sum", "torch.arange", "out_ab2l.size"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.NCE.NCECriterion_MetAug.CircleLoss.circle_loss_ite_de_to_softmax"], ["", "def", "forward", "(", "self", ",", "out_ab2l", ",", "out_l2ab", ",", "out_ori2l", ",", "out_l2ori", ",", "out_ab2ori", ",", "out_ori2ab", ")", ":", "\n", "        ", "pos_ab2l", ",", "neg_ab2l", "=", "torch", ".", "split", "(", "out_ab2l", ",", "[", "1", ",", "out_ab2l", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_l2ab", ",", "neg_l2ab", "=", "torch", ".", "split", "(", "out_l2ab", ",", "[", "1", ",", "out_l2ab", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_ori2l", ",", "neg_ori2l", "=", "torch", ".", "split", "(", "out_ori2l", ",", "[", "1", ",", "out_ori2l", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_l2ori", ",", "neg_l2ori", "=", "torch", ".", "split", "(", "out_l2ori", ",", "[", "1", ",", "out_l2ori", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_ab2ori", ",", "neg_ab2ori", "=", "torch", ".", "split", "(", "out_ab2ori", ",", "[", "1", ",", "out_ab2ori", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "pos_ori2ab", ",", "neg_ori2ab", "=", "torch", ".", "split", "(", "out_ori2ab", ",", "[", "1", ",", "out_ori2ab", ".", "shape", "[", "1", "]", "-", "1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "pos_ab2l", "=", "pos_ab2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_ab2l", "=", "neg_ab2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "\n", "pos_l2ab", "=", "pos_l2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_l2ab", "=", "neg_l2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "\n", "pos_ori2l", "=", "pos_ori2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_ori2l", "=", "neg_ori2l", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "\n", "pos_l2ori", "=", "pos_l2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_l2ori", "=", "neg_l2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "\n", "pos_ab2ori", "=", "pos_ab2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_ab2ori", "=", "neg_ab2ori", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "\n", "pos_ori2ab", "=", "pos_ori2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "neg_ori2ab", "=", "neg_ori2ab", ".", "squeeze", "(", "2", ")", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", "\n", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_ab2l", ",", "pos_l2ab", ",", "pos_ori2l", ",", "pos_l2ori", ",", "pos_ab2ori", ",", "pos_ori2ab", ")", ",", "dim", "=", "1", ")", "\n", "neg", "=", "torch", ".", "cat", "(", "(", "neg_ab2l", ",", "neg_l2ab", ",", "neg_ori2l", ",", "neg_l2ori", ",", "neg_ab2ori", ",", "neg_ori2ab", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "config", ".", "SHOW_OUT_LAB", ":", "\n", "            ", "if", "self", ".", "counter", ">", "30", ":", "\n", "                ", "out_ab2l_print_n", "=", "out_ab2l", "[", ":", ",", "torch", ".", "arange", "(", "out_ab2l", ".", "size", "(", "1", ")", ")", "!=", "0", "]", ".", "detach", "(", ")", "\n", "print", "(", "\"out_ab2l minus is \"", ",", "out_ab2l", "[", "0", "]", "[", "0", "]", ".", "sum", "(", ")", ".", "detach", "(", ")", "-", "out_ab2l_print_n", "[", "0", "]", ".", "sum", "(", ")", "/", "(", "out_ab2l", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "self", ".", "counter", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "counter", "=", "self", ".", "counter", "+", "1", "\n", "\n", "", "", "loss", "=", "self", ".", "circle_loss_ite_de_to_softmax", "(", "pos", ",", "neg", ")", ".", "sum", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.MyAlexNetCMC.__init__": [[9, 13], ["torch.Module.__init__", "alexnet_MetAug.alexnet", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "MyAlexNetCMC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "alexnet", "(", "device", ",", "feat_dim", "=", "feat_dim", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "DataParallel", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.MyAlexNetCMC.forward": [[14, 16], ["alexnet_MetAug.MyAlexNetCMC.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "fast_weights", ",", "layer", "=", "8", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "x", ",", "fast_weights", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.alexnet.__init__": [[19, 27], ["torch.Module.__init__", "alexnet_MetAug.alexnet_half", "alexnet_MetAug.alexnet_half", "alexnet_MetAug.alexnet_half"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l_to_ab", "=", "alexnet_half", "(", "device", ",", "in_channel", "=", "1", ",", "feat_dim", "=", "feat_dim", ")", "\n", "self", ".", "ab_to_l", "=", "alexnet_half", "(", "device", ",", "in_channel", "=", "2", ",", "feat_dim", "=", "feat_dim", ")", "\n", "self", ".", "ori", "=", "alexnet_half", "(", "device", ",", "in_channel", "=", "3", ",", "feat_dim", "=", "feat_dim", ")", "\n", "a", "=", "1", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.alexnet.forward": [[29, 36], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "alexnet_MetAug.alexnet.l_to_ab", "alexnet_MetAug.alexnet.ab_to_l", "alexnet_MetAug.alexnet.ori"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "fast_weights", ",", "layer", "=", "8", ")", ":", "\n", "        ", "l", ",", "ab", "=", "torch", ".", "split", "(", "x", ",", "[", "1", ",", "2", "]", ",", "dim", "=", "1", ")", "\n", "feat_l", "=", "self", ".", "l_to_ab", "(", "l", ",", "fast_weights", ",", "layer", ",", "'l_to_ab'", ")", "\n", "feat_ab", "=", "self", ".", "ab_to_l", "(", "ab", ",", "fast_weights", ",", "layer", ",", "'ab_to_l'", ")", "\n", "feat_ori", "=", "self", ".", "ori", "(", "x", ",", "fast_weights", ",", "layer", ",", "'ori'", ")", "\n", "\n", "return", "feat_l", ",", "feat_ab", ",", "feat_ori", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.alexnet_half.__init__": [[39, 84], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "alexnet_MetAug.Normalize", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "in_channel", "=", "1", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "alexnet_half", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "conv_block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "96", "//", "2", ",", "11", ",", "4", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "96", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ")", ",", "\n", ")", "\n", "self", ".", "conv_block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "96", "//", "2", ",", "256", "//", "2", ",", "5", ",", "1", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ")", ",", "\n", ")", "\n", "self", ".", "conv_block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "//", "2", ",", "384", "//", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "384", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_block_4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "384", "//", "2", ",", "384", "//", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "384", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "conv_block_5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "384", "//", "2", ",", "256", "//", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ")", ",", "\n", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", "//", "2", ",", "4096", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "4096", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", "//", "2", ",", "4096", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "4096", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", "//", "2", ",", "feat_dim", ")", "\n", ")", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.alexnet_half.forward": [[85, 210], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "alexnet_MetAug.alexnet_half.view", "torch.linear", "torch.linear", "torch.linear", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.linear", "torch.linear", "torch.linear", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.linear", "torch.linear", "torch.linear", "torch.normalize", "torch.normalize", "torch.normalize", "alexnet_MetAug.alexnet_half.conv_block_1", "alexnet_MetAug.alexnet_half.conv_block_2", "alexnet_MetAug.alexnet_half.conv_block_3", "alexnet_MetAug.alexnet_half.conv_block_4", "alexnet_MetAug.alexnet_half.conv_block_5", "alexnet_MetAug.alexnet_half.view", "alexnet_MetAug.alexnet_half.fc6", "alexnet_MetAug.alexnet_half.fc7", "alexnet_MetAug.alexnet_half.fc8", "alexnet_MetAug.alexnet_half.l2norm", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "str", "alexnet_MetAug.alexnet_half.data.size", "alexnet_MetAug.alexnet_half.data.size", "str", "str", "str", "alexnet_MetAug.alexnet_half.data.size", "alexnet_MetAug.alexnet_half.data.size", "str", "str", "str", "alexnet_MetAug.alexnet_half.data.size", "alexnet_MetAug.alexnet_half.data.size", "str", "str", "str", "alexnet_MetAug.alexnet_half.data.size", "alexnet_MetAug.alexnet_half.data.size", "str", "str", "str", "alexnet_MetAug.alexnet_half.data.size", "alexnet_MetAug.alexnet_half.data.size", "str", "str", "str", "str", "alexnet_MetAug.alexnet_half.data.size", "alexnet_MetAug.alexnet_half.data.size", "str", "str", "str", "str", "alexnet_MetAug.alexnet_half.data.size", "alexnet_MetAug.alexnet_half.data.size", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "layer", ",", "feat_type", ",", "index", "=", "0", ")", ":", "\n", "        ", "if", "weights", ":", "\n", "            ", "if", "layer", "<=", "0", ":", "\n", "                ", "return", "x", "\n", "# conv1", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "stride", "=", "4", ",", "padding", "=", "2", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", ")", "\n", "if", "layer", "==", "1", ":", "\n", "                ", "return", "x", "\n", "# conv2", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "2", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", ")", "\n", "if", "layer", "==", "2", ":", "\n", "                ", "return", "x", "\n", "# conv3", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "if", "layer", "==", "3", ":", "\n", "                ", "return", "x", "\n", "# conv4", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "if", "layer", "==", "4", ":", "\n", "                ", "return", "x", "\n", "# conv5", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.conv_block_{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", ")", "\n", "if", "layer", "==", "5", ":", "\n", "                ", "return", "x", "\n", "# fc6", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "index", "+=", "1", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.0.bias'", ".", "format", "(", "index", ")", "]", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "if", "layer", "==", "6", ":", "\n", "                ", "return", "x", "\n", "# fc7", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.0.bias'", ".", "format", "(", "index", ")", "]", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "if", "layer", "==", "7", ":", "\n", "                ", "return", "x", "\n", "# fc8", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.'", "+", "str", "(", "feat_type", ")", "+", "'.fc{:d}.0.bias'", ".", "format", "(", "index", ")", "]", ")", "\n", "x", "=", "F", ".", "normalize", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "if", "layer", "<=", "0", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "conv_block_1", "(", "x", ")", "\n", "if", "layer", "==", "1", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "conv_block_2", "(", "x", ")", "\n", "if", "layer", "==", "2", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "conv_block_3", "(", "x", ")", "\n", "if", "layer", "==", "3", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "conv_block_4", "(", "x", ")", "\n", "if", "layer", "==", "4", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "conv_block_5", "(", "x", ")", "\n", "if", "layer", "==", "5", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc6", "(", "x", ")", "\n", "if", "layer", "==", "6", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "fc7", "(", "x", ")", "\n", "if", "layer", "==", "7", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "fc8", "(", "x", ")", "\n", "x", "=", "self", ".", "l2norm", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.MyMetaGenNet.__init__": [[213, 217], ["torch.Module.__init__", "alexnet_MetAug.metagen_net", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "MyMetaGenNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "metagen_net", "(", "device", ",", "feat_dim", "=", "feat_dim", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "DataParallel", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.MyMetaGenNet.forward": [[218, 220], ["alexnet_MetAug.MyMetaGenNet.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "fast_weights", ",", "layer", "=", "3", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "x", ",", "fast_weights", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.metagen_net.__init__": [[223, 241], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "alexnet_MetAug.Normalize", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "feat_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "metagen_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "4096", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "4096", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", "//", "2", ",", "4096", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "4096", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", "//", "2", ",", "feat_dim", ")", "\n", ")", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.metagen_net.forward": [[242, 290], ["torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to.", "alexnet_MetAug.metagen_net.view", "torch.linear", "torch.linear", "torch.linear", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.linear", "torch.linear", "torch.linear", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.relu", "torch.relu", "torch.relu", "torch.linear", "torch.linear", "torch.linear", "torch.normalize", "torch.normalize", "torch.normalize", "alexnet_MetAug.metagen_net.fc1", "alexnet_MetAug.metagen_net.fc2", "alexnet_MetAug.metagen_net.fc3", "alexnet_MetAug.metagen_net.l2norm", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "alexnet_MetAug.metagen_net.data.size", "alexnet_MetAug.metagen_net.data.size", "alexnet_MetAug.metagen_net.data.size", "alexnet_MetAug.metagen_net.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "layer", "=", "3", ",", "index", "=", "0", ")", ":", "\n", "        ", "if", "not", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "feat_dim", ":", "\n", "            ", "feat_convert_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "x", ".", "shape", "[", "1", "]", ",", "self", ".", "feat_dim", ")", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x", "=", "feat_convert_fc", "(", "x", ")", "\n", "", "if", "weights", ":", "\n", "# fc1", "\n", "            ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "index", "+=", "1", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weights", "[", "'encoder.module.fc{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.fc{:d}.0.bias'", ".", "format", "(", "index", ")", "]", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.fc{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.fc{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "if", "layer", "==", "1", ":", "\n", "                ", "return", "x", "\n", "# fc2", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weights", "[", "'encoder.module.fc{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.fc{:d}.0.bias'", ".", "format", "(", "index", ")", "]", ")", "\n", "x", "=", "F", ".", "batch_norm", "(", "x", ",", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "weights", "[", "'encoder.module.fc{:d}.1.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.fc{:d}.1.bias'", ".", "format", "(", "index", ")", "]", ",", "\n", "training", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "if", "layer", "==", "2", ":", "\n", "                ", "return", "x", "\n", "# fc3", "\n", "", "index", "+=", "1", "\n", "x", "=", "F", ".", "linear", "(", "x", ",", "weights", "[", "'encoder.module.fc{:d}.0.weight'", ".", "format", "(", "index", ")", "]", ",", "\n", "weights", "[", "'encoder.module.fc{:d}.0.bias'", ".", "format", "(", "index", ")", "]", ")", "\n", "x", "=", "F", ".", "normalize", "(", "x", ")", "\n", "return", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "layer", "==", "1", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "if", "layer", "==", "2", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "x", "=", "self", ".", "l2norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.Normalize.__init__": [[294, 297], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.alexnet_MetAug.Normalize.forward": [[298, 302], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.Flatten.__init__": [[7, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.Flatten.forward": [[10, 12], ["feat.view", "feat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feat", ")", ":", "\n", "        ", "return", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierAlexNet.__init__": [[15, 52], ["torch.Module.__init__", "torch.Sequential", "LinearModel.LinearClassifierAlexNet.classifier.add_module", "LinearModel.LinearClassifierAlexNet.classifier.add_module", "LinearModel.LinearClassifierAlexNet.initilize", "LinearModel.Flatten", "torch.Linear", "LinearModel.LinearClassifierAlexNet.classifier.add_module", "torch.AdaptiveMaxPool2d", "LinearModel.LinearClassifierAlexNet.classifier.add_module", "torch.AdaptiveAvgPool2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__", "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.initilize"], ["    ", "def", "__init__", "(", "self", ",", "layer", "=", "5", ",", "n_label", "=", "1000", ",", "pool_type", "=", "'max'", ")", ":", "\n", "        ", "super", "(", "LinearClassifierAlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "layer", "==", "1", ":", "\n", "            ", "pool_size", "=", "10", "\n", "nChannels", "=", "96", "\n", "", "elif", "layer", "==", "2", ":", "\n", "            ", "pool_size", "=", "6", "\n", "nChannels", "=", "256", "\n", "", "elif", "layer", "==", "3", ":", "\n", "            ", "pool_size", "=", "5", "\n", "nChannels", "=", "384", "\n", "", "elif", "layer", "==", "4", ":", "\n", "            ", "pool_size", "=", "5", "\n", "nChannels", "=", "384", "\n", "", "elif", "layer", "==", "5", ":", "\n", "            ", "pool_size", "=", "6", "\n", "nChannels", "=", "384", "\n", "", "elif", "layer", "==", "6", ":", "\n", "            ", "pool_size", "=", "1", "\n", "nChannels", "=", "2048", "*", "3", "\n", "", "elif", "layer", "==", "7", ":", "\n", "            ", "pool_size", "=", "1", "\n", "nChannels", "=", "2048", "*", "3", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'layer not supported: {}'", ".", "format", "(", "layer", ")", ")", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "layer", "<", "5", ":", "\n", "            ", "if", "pool_type", "==", "'max'", ":", "\n", "                ", "self", ".", "classifier", ".", "add_module", "(", "'MaxPool'", ",", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "pool_size", ",", "pool_size", ")", ")", ")", "\n", "", "elif", "pool_type", "==", "'avg'", ":", "\n", "                ", "self", ".", "classifier", ".", "add_module", "(", "'AvgPool'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "pool_size", ",", "pool_size", ")", ")", ")", "\n", "\n", "", "", "self", ".", "classifier", ".", "add_module", "(", "'Flatten'", ",", "Flatten", "(", ")", ")", "\n", "self", ".", "classifier", ".", "add_module", "(", "'LinearClassifier'", ",", "nn", ".", "Linear", "(", "nChannels", "*", "pool_size", "*", "pool_size", ",", "n_label", ")", ")", "\n", "self", ".", "initilize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierAlexNet.initilize": [[53, 58], ["LinearModel.LinearClassifierAlexNet.modules", "isinstance", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "initilize", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierAlexNet.forward": [[59, 61], ["LinearModel.LinearClassifierAlexNet.classifier"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierAlexNetFeAug.__init__": [[64, 101], ["torch.Module.__init__", "torch.Sequential", "LinearModel.LinearClassifierAlexNetFeAug.classifier.add_module", "LinearModel.LinearClassifierAlexNetFeAug.classifier.add_module", "LinearModel.LinearClassifierAlexNetFeAug.initilize", "LinearModel.Flatten", "torch.Linear", "LinearModel.LinearClassifierAlexNetFeAug.classifier.add_module", "torch.AdaptiveMaxPool2d", "LinearModel.LinearClassifierAlexNetFeAug.classifier.add_module", "torch.AdaptiveAvgPool2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__", "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.initilize"], ["    ", "def", "__init__", "(", "self", ",", "layer", "=", "5", ",", "n_label", "=", "1000", ",", "pool_type", "=", "'max'", ")", ":", "\n", "        ", "super", "(", "LinearClassifierAlexNetFeAug", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "layer", "==", "1", ":", "\n", "            ", "pool_size", "=", "10", "\n", "nChannels", "=", "96", "\n", "", "elif", "layer", "==", "2", ":", "\n", "            ", "pool_size", "=", "6", "\n", "nChannels", "=", "256", "\n", "", "elif", "layer", "==", "3", ":", "\n", "            ", "pool_size", "=", "5", "\n", "nChannels", "=", "384", "\n", "", "elif", "layer", "==", "4", ":", "\n", "            ", "pool_size", "=", "5", "\n", "nChannels", "=", "384", "\n", "", "elif", "layer", "==", "5", ":", "\n", "            ", "pool_size", "=", "6", "\n", "nChannels", "=", "384", "\n", "", "elif", "layer", "==", "6", ":", "\n", "            ", "pool_size", "=", "1", "\n", "nChannels", "=", "2048", "*", "3", "*", "2", "\n", "", "elif", "layer", "==", "7", ":", "\n", "            ", "pool_size", "=", "1", "\n", "nChannels", "=", "2048", "*", "3", "*", "2", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'layer not supported: {}'", ".", "format", "(", "layer", ")", ")", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "layer", "<", "5", ":", "\n", "            ", "if", "pool_type", "==", "'max'", ":", "\n", "                ", "self", ".", "classifier", ".", "add_module", "(", "'MaxPool'", ",", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "pool_size", ",", "pool_size", ")", ")", ")", "\n", "", "elif", "pool_type", "==", "'avg'", ":", "\n", "                ", "self", ".", "classifier", ".", "add_module", "(", "'AvgPool'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "pool_size", ",", "pool_size", ")", ")", ")", "\n", "\n", "", "", "self", ".", "classifier", ".", "add_module", "(", "'Flatten'", ",", "Flatten", "(", ")", ")", "\n", "self", ".", "classifier", ".", "add_module", "(", "'LinearClassifier'", ",", "nn", ".", "Linear", "(", "nChannels", "*", "pool_size", "*", "pool_size", ",", "n_label", ")", ")", "\n", "self", ".", "initilize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierAlexNetFeAug.initilize": [[102, 107], ["LinearModel.LinearClassifierAlexNetFeAug.modules", "isinstance", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "initilize", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierAlexNetFeAug.forward": [[108, 110], ["LinearModel.LinearClassifierAlexNetFeAug.classifier"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__": [[113, 155], ["torch.Module.__init__", "torch.Sequential", "LinearModel.LinearClassifierResNet.classifier.add_module", "print", "LinearModel.LinearClassifierResNet.classifier.add_module", "LinearModel.LinearClassifierResNet.initilize", "LinearModel.Flatten", "torch.Linear", "LinearModel.LinearClassifierResNet.classifier.add_module", "torch.AdaptiveMaxPool2d", "LinearModel.LinearClassifierResNet.classifier.add_module", "torch.AdaptiveAvgPool2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.__init__", "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.initilize"], ["    ", "def", "__init__", "(", "self", ",", "layer", "=", "6", ",", "n_label", "=", "1000", ",", "pool_type", "=", "'avg'", ",", "width", "=", "1", ")", ":", "\n", "        ", "super", "(", "LinearClassifierResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "layer", "==", "1", ":", "\n", "            ", "pool_size", "=", "8", "\n", "nChannels", "=", "128", "*", "width", "\n", "pool", "=", "pool_type", "\n", "", "elif", "layer", "==", "2", ":", "\n", "            ", "pool_size", "=", "6", "\n", "nChannels", "=", "256", "*", "width", "\n", "pool", "=", "pool_type", "\n", "", "elif", "layer", "==", "3", ":", "\n", "            ", "pool_size", "=", "4", "\n", "nChannels", "=", "512", "*", "width", "\n", "pool", "=", "pool_type", "\n", "", "elif", "layer", "==", "4", ":", "\n", "            ", "pool_size", "=", "3", "\n", "nChannels", "=", "1024", "*", "width", "\n", "pool", "=", "pool_type", "\n", "", "elif", "layer", "==", "5", ":", "\n", "            ", "pool_size", "=", "7", "\n", "nChannels", "=", "2048", "*", "width", "\n", "pool", "=", "pool_type", "\n", "", "elif", "layer", "==", "6", ":", "\n", "            ", "pool_size", "=", "1", "\n", "nChannels", "=", "2048", "*", "width", "\n", "pool", "=", "pool_type", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'layer not supported: {}'", ".", "format", "(", "layer", ")", ")", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "layer", "<", "5", ":", "\n", "            ", "if", "pool", "==", "'max'", ":", "\n", "                ", "self", ".", "classifier", ".", "add_module", "(", "'MaxPool'", ",", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "pool_size", ",", "pool_size", ")", ")", ")", "\n", "", "elif", "pool", "==", "'avg'", ":", "\n", "                ", "self", ".", "classifier", ".", "add_module", "(", "'AvgPool'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "pool_size", ",", "pool_size", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "classifier", ".", "add_module", "(", "'Flatten'", ",", "Flatten", "(", ")", ")", "\n", "print", "(", "'classifier input: {}'", ".", "format", "(", "nChannels", "*", "pool_size", "*", "pool_size", ")", ")", "\n", "self", ".", "classifier", ".", "add_module", "(", "'LiniearClassifier'", ",", "nn", ".", "Linear", "(", "nChannels", "*", "pool_size", "*", "pool_size", ",", "n_label", ")", ")", "\n", "self", ".", "initilize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.initilize": [[156, 161], ["LinearModel.LinearClassifierResNet.modules", "isinstance", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "initilize", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lionellee9089_metaug.models.LinearModel.LinearClassifierResNet.forward": [[162, 164], ["LinearModel.LinearClassifierResNet.classifier"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "x", ")", "\n", "", "", ""]]}