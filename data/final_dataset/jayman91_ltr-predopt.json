{"home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_pointwise.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.EnergyDatasetWrapper.__init__": [[128, 135], ["X.astype", "y.astype", "numpy.array().astype", "PO_model_energy.batch_solve", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "y", ",", "param", ",", "sol", "=", "None", ",", "relax", "=", "False", ")", ":", "\n", "        ", "self", ".", "X", "=", "X", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "y", "=", "y", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "sol", "is", "None", ":", "\n", "            ", "sol", "=", "batch_solve", "(", "param", ",", "y", ",", "relax", ")", "\n", "\n", "", "self", ".", "sol", "=", "np", ".", "array", "(", "sol", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.EnergyDatasetWrapper.__len__": [[136, 138], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.EnergyDatasetWrapper.__getitem__": [[139, 141], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "X", "[", "idx", "]", ",", "self", ".", "y", "[", "idx", "]", ",", "self", ".", "sol", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.twostage_regression.__init__": [[145, 162], ["pytorch_lightning.LightningModule.__init__", "pytorch_lightning.seed_everything", "PO_model_energy.twostage_regression.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "net", ",", "lr", "=", "1e-1", ",", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "\"\"\"\n        A class to implement two stage mse based model and with test and validation module\n        Args:\n            net: the neural network model\n            param: the parameter of the scheduling problem\n            lr: learning rate\n            max_epochs: maximum number of epcohs\n            seed: seed for reproducibility \n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "pl", ".", "seed_everything", "(", "seed", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "param", "=", "param", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.twostage_regression.forward": [[163, 165], ["PO_model_energy.twostage_regression.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.twostage_regression.training_step": [[165, 172], ["PO_model_energy.twostage_regression.squeeze", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss.", "PO_model_energy.twostage_regression.log", "PO_model_energy.twostage_regression."], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "loss", "=", "criterion", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.twostage_regression.validation_step": [[172, 182], ["torch.nn.MSELoss", "torch.nn.MSELoss", "PO_model_energy.twostage_regression.squeeze", "PO_model_energy.regret_fn", "torch.nn.MSELoss.", "PO_model_energy.twostage_regression.log", "PO_model_energy.twostage_regression.log", "PO_model_energy.twostage_regression."], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.regret_fn"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "x", ",", "y", ",", "sol", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "val_loss", "=", "regret_fn", "(", "y_hat", ",", "y", ",", "sol", ",", "self", ".", "param", ")", "\n", "mseloss", "=", "criterion", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "\"val_regret\"", ",", "val_loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"val_mse\"", ",", "mseloss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "\n", "return", "{", "\"val_regret\"", ":", "val_loss", ",", "\"val_mse\"", ":", "mseloss", "}", "\n", "", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.twostage_regression.validation_epoch_end": [[182, 188], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "PO_model_energy.twostage_regression.log", "PO_model_energy.twostage_regression.log", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_regret", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"val_regret\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "avg_mse", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"val_mse\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "log", "(", "\"ptl/val_regret\"", ",", "avg_regret", ")", "\n", "self", ".", "log", "(", "\"ptl/val_mse\"", ",", "avg_mse", ")", "\n", "# self.log(\"ptl/val_accuracy\", avg_acc)", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.twostage_regression.test_step": [[189, 192], ["PO_model_energy.twostage_regression.validation_step"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.validation_step"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# Here we just reuse the validation_step for testing", "\n", "        ", "return", "self", ".", "validation_step", "(", "batch", ",", "batch_idx", ")", "\n", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.twostage_regression.configure_optimizers": [[192, 200], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "PO_model_energy.twostage_regression.parameters", "len", "PO_model_energy.twostage_regression.train_dataloader"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "num_batches", "=", "len", "(", "self", ".", "train_dataloader", "(", ")", ")", "//", "self", ".", "trainer", ".", "accumulate_grad_batches", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "OneCycleLR", "(", "optimizer", ",", "max_lr", "=", "self", ".", "lr", ",", "epochs", "=", "self", ".", "max_epochs", ",", "\n", "steps_per_epoch", "=", "num_batches", ")", "\n", "# scheduler = torch.optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.8)", "\n", "# # scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min',patience=1)", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.SPO.__init__": [[238, 240], ["PO_model_energy.twostage_regression.__init__"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "net", ",", "lr", "=", "1e-1", ",", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "param", ",", "net", ",", "lr", ",", "max_epochs", ",", "seed", ")", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.SPO.training_step": [[240, 246], ["PO_model_energy.SPO.squeeze", "PO_model_energy.SPO.log", "PO_model_energy.spograd", "PO_model_energy.SPO."], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.spograd"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "loss", "=", "spograd", "(", "y", ",", "sol", ",", "self", ".", "param", ")", "(", "y_hat", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "", "", "class", "Blackbox", "(", "twostage_regression", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.Blackbox.__init__": [[247, 250], ["PO_model_energy.twostage_regression.__init__"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "net", ",", "mu", ",", "lr", "=", "1e-1", ",", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "param", ",", "net", ",", "lr", ",", "max_epochs", ",", "seed", ")", "\n", "self", ".", "mu", "=", "mu", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.Blackbox.training_step": [[250, 256], ["PO_model_energy.Blackbox.squeeze", "PO_model_energy.Blackbox.log", "PO_model_energy.bbgrad", "PO_model_energy.Blackbox."], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.bbgrad"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "loss", "=", "bbgrad", "(", "y", ",", "sol", ",", "self", ".", "param", ",", "self", ".", "mu", ")", "(", "y_hat", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.CachingPO.__init__": [[386, 403], ["PO_model_energy.twostage_regression.__init__", "init_cache.detach().numpy", "numpy.unique", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "PO_model_energy.CachingPO.save_hyperparameters", "init_cache.detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fn", ",", "param", ",", "net", ",", "init_cache", ",", "growth", "=", "0.1", ",", "lr", "=", "1e-1", ",", "tau", "=", "0.", ",", "\n", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "'''\n        tau: the margin parameter for pairwise ranking / temperatrure for listwise ranking\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", "param", ",", "net", ",", "lr", ",", "max_epochs", ",", "seed", ")", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "# self.save_hyperparameters()", "\n", "\n", "### The cache", "\n", "init_cache_np", "=", "init_cache", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "init_cache_np", "=", "np", ".", "unique", "(", "init_cache_np", ",", "axis", "=", "0", ")", "\n", "# torch has no unique function, so we have to do this", "\n", "self", ".", "cache", "=", "torch", ".", "from_numpy", "(", "init_cache_np", ")", ".", "float", "(", ")", "\n", "self", ".", "growth", "=", "growth", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ",", "\"growth\"", ",", "\"tau\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.CachingPO.training_step": [[405, 414], ["PO_model_energy.CachingPO.squeeze", "PO_model_energy.CachingPO.loss_fn", "PO_model_energy.CachingPO.log", "PO_model_energy.growcache", "PO_model_energy.CachingPO.", "len", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.growcache"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "if", "(", "np", ".", "random", ".", "random", "(", "1", ")", "[", "0", "]", "<", "self", ".", "growth", ")", "or", "len", "(", "self", ".", "cache", ")", "==", "0", ":", "\n", "            ", "self", ".", "cache", "=", "growcache", "(", "self", ".", "cache", ",", "y_hat", ",", "self", ".", "param", ")", "\n", "\n", "", "loss", "=", "self", ".", "loss_fn", "(", "y_hat", ",", "y", ",", "sol", ",", "self", ".", "cache", ",", "tau", "=", "self", ".", "tau", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.CombinedPO.__init__": [[416, 424], ["PO_model_energy.CachingPO.__init__", "PO_model_energy.CombinedPO.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "loss_fn", ",", "param", ",", "net", ",", "init_cache", ",", "growth", "=", "0.1", ",", "lr", "=", "1e-1", ",", "tau", "=", "0.", ",", "\n", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "'''\n        tau: the margin parameter for pairwise ranking / temperatrure for listwise ranking\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", "loss_fn", ",", "param", ",", "net", ",", "init_cache", ",", "growth", ",", "lr", ",", "tau", ",", "max_epochs", ",", "seed", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ",", "\"growth\"", ",", "\"tau\"", ",", "\"alpha\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.CombinedPO.training_step": [[426, 435], ["PO_model_energy.CombinedPO.squeeze", "torch.nn.MSELoss", "torch.nn.MSELoss", "PO_model_energy.CombinedPO.log", "PO_model_energy.growcache", "PO_model_energy.CombinedPO.", "len", "PO_model_energy.CombinedPO.loss_fn", "torch.nn.MSELoss.", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.growcache"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "if", "(", "np", ".", "random", ".", "random", "(", "1", ")", "[", "0", "]", "<", "self", ".", "growth", ")", "or", "len", "(", "self", ".", "cache", ")", "==", "0", ":", "\n", "            ", "self", ".", "cache", "=", "growcache", "(", "self", ".", "cache", ",", "y_hat", ",", "self", ".", "param", ")", "\n", "", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "loss", "=", "self", ".", "alpha", "*", "self", ".", "loss_fn", "(", "y_hat", ",", "y", ",", "sol", ",", "self", ".", "cache", ",", "tau", "=", "self", ".", "tau", ")", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "criterion", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.MakeLpMat": [[12, 79], ["range", "range", "range", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.eye", "torch.eye", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.eye", "torch.eye", "torch.transpose", "torch.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "max", "max"], "function", ["None"], ["def", "MakeLpMat", "(", "nbMachines", ",", "nbTasks", ",", "nbResources", ",", "MC", ",", "U", ",", "D", ",", "E", ",", "L", ",", "P", ",", "idle", ",", "up", ",", "down", ",", "q", ",", "**", "h", ")", ":", "\n", "# nbMachines: number of machine", "\n", "# nbTasks: number of task", "\n", "# nb resources: number of resources", "\n", "# MC[m][r] resource capacity of machine m for resource r ", "\n", "# U[f][r] resource use of task f for resource r", "\n", "# D[f] duration of tasks f", "\n", "# E[f] earliest start of task f", "\n", "# L[f] latest end of task f", "\n", "# P[f] power use of tasks f", "\n", "# idle[m] idle cost of server m", "\n", "# up[m] startup cost of server m", "\n", "# down[m] shut-down cost of server m", "\n", "# q time resolution", "\n", "# timelimit in seconds", "\n", "    ", "\"\"\"\n    G1: rows: n_machine * Time; cols: n_task*n_machine* Time\n        first T row for machine1, next T: (2T) for machine 2 and so on\n        first n_task column for task 1 of machine 1 in time slot 0 then for task 1 machine 2 and so on\n    x: decisiion variable-vector of n_task*n_machine* Time. x[  f*(n_task*n_machine* Time)+m*(n_machine* Time)+Time ]=1 if task f starts at time t on machine m.\n    A1: To ensure each task is scheduled only once.\n    A2: To respect early start time\n    A3: To respect late start time\n    F: rows:Time , cols: n_task*n_machine* Time, bookkeping for power power use for each time unit\n    Code is written assuming nb resources=1\n    \"\"\"", "\n", "Machines", "=", "range", "(", "nbMachines", ")", "\n", "Tasks", "=", "range", "(", "nbTasks", ")", "\n", "Resources", "=", "range", "(", "nbResources", ")", "\n", "N", "=", "1440", "//", "q", "\n", "\n", "### G and h", "\n", "G1", "=", "torch", ".", "zeros", "(", "(", "nbMachines", "*", "N", ",", "nbTasks", "*", "nbMachines", "*", "N", ")", ")", ".", "float", "(", ")", "\n", "h1", "=", "torch", ".", "zeros", "(", "nbMachines", "*", "N", ")", ".", "float", "(", ")", "\n", "F", "=", "torch", ".", "zeros", "(", "(", "N", ",", "nbTasks", "*", "nbMachines", "*", "N", ")", ")", ".", "float", "(", ")", "\n", "for", "m", "in", "Machines", ":", "\n", "        ", "for", "t", "in", "range", "(", "N", ")", ":", "\n", "## in all of our problem, we have only one resource", "\n", "            ", "h1", "[", "m", "*", "N", "+", "t", "]", "=", "MC", "[", "m", "]", "[", "0", "]", "\n", "for", "f", "in", "Tasks", ":", "\n", "                ", "c_index", "=", "(", "f", "*", "nbMachines", "+", "m", ")", "*", "N", "\n", "G1", "[", "t", "+", "m", "*", "N", ",", "(", "c_index", "+", "max", "(", "0", ",", "t", "-", "D", "[", "f", "]", "+", "1", ")", ")", ":", "(", "c_index", "+", "(", "t", "+", "1", ")", ")", "]", "=", "U", "[", "f", "]", "[", "0", "]", "\n", "F", "[", "t", ",", "(", "c_index", "+", "max", "(", "0", ",", "t", "-", "D", "[", "f", "]", "+", "1", ")", ")", ":", "(", "c_index", "+", "(", "t", "+", "1", ")", ")", "]", "=", "P", "[", "f", "]", "\n", "\n", "", "", "", "G2", "=", "torch", ".", "eye", "(", "(", "nbTasks", "*", "nbMachines", "*", "N", ")", ")", "\n", "G3", "=", "-", "1", "*", "torch", ".", "eye", "(", "(", "nbTasks", "*", "nbMachines", "*", "N", ")", ")", "\n", "h2", "=", "torch", ".", "ones", "(", "nbTasks", "*", "nbMachines", "*", "N", ")", "\n", "h3", "=", "torch", ".", "zeros", "(", "nbTasks", "*", "nbMachines", "*", "N", ")", "\n", "\n", "G", "=", "G1", "# torch.cat((G1,G2,G3)) ", "\n", "h", "=", "h1", "# torch.cat((h1,h2,h3))", "\n", "### A and b", "\n", "A1", "=", "torch", ".", "zeros", "(", "(", "nbTasks", ",", "nbTasks", "*", "nbMachines", "*", "N", ")", ")", ".", "float", "(", ")", "\n", "A2", "=", "torch", ".", "zeros", "(", "(", "nbTasks", ",", "nbTasks", "*", "nbMachines", "*", "N", ")", ")", ".", "float", "(", ")", "\n", "A3", "=", "torch", ".", "zeros", "(", "(", "nbTasks", ",", "nbTasks", "*", "nbMachines", "*", "N", ")", ")", ".", "float", "(", ")", "\n", "\n", "for", "f", "in", "Tasks", ":", "\n", "        ", "A1", "[", "f", ",", "(", "f", "*", "N", "*", "nbMachines", ")", ":", "(", "(", "f", "+", "1", ")", "*", "N", "*", "nbMachines", ")", "]", "=", "1", "\n", "for", "m", "in", "Machines", ":", "\n", "            ", "start_index", "=", "f", "*", "N", "*", "nbMachines", "+", "m", "*", "N", "# Time 0 for task f machine m", "\n", "## early start time", "\n", "A2", "[", "f", ",", "start_index", ":", "(", "start_index", "+", "E", "[", "f", "]", ")", "]", "=", "1", "\n", "## latest end time", "\n", "A3", "[", "f", ",", "(", "start_index", "+", "L", "[", "f", "]", "-", "D", "[", "f", "]", "+", "1", ")", ":", "(", "start_index", "+", "N", ")", "]", "=", "1", "\n", "", "", "b", "=", "torch", ".", "cat", "(", "(", "torch", ".", "ones", "(", "nbTasks", ")", ",", "torch", ".", "zeros", "(", "2", "*", "nbTasks", ")", ")", ")", "\n", "A", "=", "torch", ".", "cat", "(", "(", "A1", ",", "A2", ",", "A3", ")", ")", "\n", "return", "A", ",", "b", ",", "G", ",", "h", ",", "torch", ".", "transpose", "(", "F", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.IconMatrixsolver": [[80, 98], ["gurobipy.Model", "gp.Model.addMVar", "gp.Model.addConstr", "gp.Model.addConstr", "numpy.matmul().squeeze", "gp.Model.setObjective", "gp.Model.optimize", "numpy.matmul"], "function", ["None"], ["", "def", "IconMatrixsolver", "(", "A", ",", "b", ",", "G", ",", "h", ",", "F", ",", "y", ")", ":", "\n", "    ", "'''\n    A,b,G,h define the problem\n    y: the price of each hour\n    Multiply y with F to reach the granularity of x\n    x is the solution vector for each hour for each machine for each task \n    '''", "\n", "n", "=", "A", ".", "shape", "[", "1", "]", "\n", "m", "=", "gp", ".", "Model", "(", "\"matrix1\"", ")", "\n", "x", "=", "m", ".", "addMVar", "(", "shape", "=", "n", ",", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"x\"", ")", "\n", "\n", "m", ".", "addConstr", "(", "A", "@", "x", "==", "b", ",", "name", "=", "\"eq\"", ")", "\n", "m", ".", "addConstr", "(", "G", "@", "x", "<=", "h", ",", "name", "=", "\"ineq\"", ")", "\n", "c", "=", "np", ".", "matmul", "(", "F", ",", "y", ")", ".", "squeeze", "(", ")", "\n", "m", ".", "setObjective", "(", "c", "@", "x", ",", "GRB", ".", "MINIMIZE", ")", "\n", "m", ".", "optimize", "(", ")", "\n", "if", "m", ".", "status", "==", "2", ":", "\n", "        ", "return", "x", ".", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.batch_solve": [[100, 110], ["ICON_solving.SolveICON", "ICON_solving.SolveICON.make_model", "range", "numpy.array", "len", "sol.append", "ICON_solving.SolveICON.solve_model"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.ICON_solving.SolveICON.make_model", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.ICON_solving.SolveICON.solve_model"], ["", "", "def", "batch_solve", "(", "param", ",", "y", ",", "relax", "=", "False", ")", ":", "\n", "    ", "'''\n    wrapper around te solver to return solution of a vector of cost coefficients\n    '''", "\n", "clf", "=", "SolveICON", "(", "relax", "=", "relax", ",", "**", "param", ")", "\n", "clf", ".", "make_model", "(", ")", "\n", "sol", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "sol", ".", "append", "(", "clf", ".", "solve_model", "(", "y", "[", "i", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "sol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.regret_fn": [[111, 119], ["torch.from_numpy", "torch.from_numpy", "PO_model_energy.batch_solve", "y_hat.detach().numpy", "y_hat.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "regret_fn", "(", "y_hat", ",", "y", ",", "sol_true", ",", "param", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "'''\n    computes average regret given a predicted cost vector and the true solution vector and the true cost vector\n    y_hat,y, sol_true are torch tensors\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "sol_hat", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_hat", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "return", "(", "(", "mm", "*", "(", "sol_hat", "-", "sol_true", ")", "*", "y", ")", ".", "sum", "(", "1", ")", "/", "(", "sol_true", "*", "y", ")", ".", "sum", "(", "1", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.regret_aslist": [[120, 127], ["torch.from_numpy", "torch.from_numpy", "PO_model_energy.batch_solve", "y_hat.detach().numpy", "y_hat.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "regret_aslist", "(", "y_hat", ",", "y", ",", "sol_true", ",", "param", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "'''\n    computes regret of more than one cost vectors\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "sol_hat", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_hat", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "return", "(", "(", "mm", "*", "(", "sol_hat", "-", "sol_true", ")", "*", "y", ")", ".", "sum", "(", "1", ")", "/", "(", "sol_true", "*", "y", ")", ".", "sum", "(", "1", ")", ")", "\n", "", "class", "EnergyDatasetWrapper", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.spograd": [[201, 218], ["ctx.save_for_backward", "torch.from_numpy", "torch.from_numpy", "PO_model_energy.batch_solve", "y_spo.detach().numpy", "y_spo.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "", "def", "spograd", "(", "y", ",", "sol", ",", "param", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "class", "spograd_cls", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "y_hat", ")", ":", "\n", "\n", "            ", "ctx", ".", "save_for_backward", "(", "y_hat", ")", "\n", "return", "mm", "*", "(", "(", "y_hat", "-", "y", ")", "*", "sol", ")", ".", "sum", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "y_hat", ",", "=", "ctx", ".", "saved_tensors", "\n", "y_spo", "=", "2", "*", "y_hat", "-", "y", "\n", "sol_spo", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_spo", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "return", "(", "sol", "-", "sol_spo", ")", "*", "mm", "\n", "", "", "return", "spograd_cls", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.bbgrad": [[219, 237], ["ctx.save_for_backward", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PO_model_energy.batch_solve", "PO_model_energy.batch_solve", "y_hat.detach().numpy", "y_perturbed.detach().numpy", "y_hat.detach", "y_perturbed.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "bbgrad", "(", "y", ",", "sol", ",", "param", ",", "mu", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "class", "bbgrad_cls", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "y_hat", ")", ":", "\n", "            ", "y_perturbed", "=", "(", "y_hat", "+", "mu", "*", "y", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "y_hat", ",", "y_perturbed", ")", "\n", "return", "mm", "*", "(", "(", "y_hat", "-", "y", ")", "*", "sol", ")", ".", "sum", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "y_hat", ",", "y_perturbed", "=", "ctx", ".", "saved_tensors", "\n", "sol_hat", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_hat", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "sol_perturbed", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_perturbed", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "return", "-", "mm", "*", "(", "sol_hat", "-", "sol_perturbed", ")", "/", "mu", "\n", "", "", "return", "bbgrad_cls", ".", "apply", "\n", "", "class", "SPO", "(", "twostage_regression", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.pointwise_loss": [[262, 269], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cache.transpose", "cache.transpose"], "function", ["None"], ["", "", "def", "pointwise_loss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "loss", "=", "(", "torch", ".", "matmul", "(", "y_hat", ",", "cache", ".", "transpose", "(", "0", ",", "1", ")", ")", "-", "torch", ".", "matmul", "(", "y_true", ",", "cache", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "", "def", "pairwise_diffloss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "mode", "=", "'B'", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.pairwise_diffloss": [[269, 293], ["range", "len", "numpy.unique", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "pairwise_diffloss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "mode", "=", "'B'", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "        ", "_", ",", "indices", "=", "np", ".", "unique", "(", "(", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "return_index", "=", "True", ")", "\n", "## return indices after sorting the array in ascending order", "\n", "if", "mode", "==", "'B'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "0", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'W'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "-", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'S'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "\n", "", "loss", "+=", "(", "mm", "*", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "\n", "-", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_true", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_true", "[", "ii", "]", ")", ")", ")", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss", "\n", "", "def", "pairwise_loss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "tau", "=", "0", ",", "minimize", "=", "True", ",", "mode", "=", "'B'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.pairwise_loss": [[293, 316], ["torch.nn.ReLU", "range", "len", "numpy.unique", "nn.ReLU.mean", "nn.ReLU.", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "pairwise_loss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "tau", "=", "0", ",", "minimize", "=", "True", ",", "mode", "=", "'B'", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "        ", "_", ",", "indices", "=", "np", ".", "unique", "(", "(", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "return_index", "=", "True", ")", "\n", "## return indices after sorting the array in ascending order", "\n", "\n", "if", "mode", "==", "'B'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "0", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'W'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "-", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'S'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "loss", "+=", "relu", "(", "tau", "+", "mm", "*", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_hat", "[", "ii", "]", ")", ")", ")", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.Listnet_loss": [[318, 325], ["range", "len", "torch.log_softmax", "torch.softmax"], "function", ["None"], ["", "def", "Listnet_loss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "tau", "=", "1", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "         ", "loss", "+=", "-", "(", "F", ".", "log_softmax", "(", "(", "-", "mm", "*", "y_hat", "[", "ii", "]", "*", "cache", "/", "tau", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "\n", "dim", "=", "0", ")", "*", "F", ".", "softmax", "(", "(", "-", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", "/", "tau", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", ")", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.Listnet_KLloss": [[326, 334], ["range", "len", "torch.log_softmax", "torch.log_softmax", "torch.softmax"], "function", ["None"], ["", "def", "Listnet_KLloss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "tau", "=", "1", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "         ", "loss", "+=", "(", "F", ".", "log_softmax", "(", "(", "-", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "-", "\n", "F", ".", "log_softmax", "(", "(", "-", "mm", "*", "y_hat", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "\n", "dim", "=", "0", ")", "*", "F", ".", "softmax", "(", "(", "-", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", ")", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.MAP": [[336, 347], ["range", "len", "torch.max", "torch.max"], "function", ["None"], ["", "def", "MAP", "(", "sol", ",", "y", ",", "cache", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "# print(\"shape check\", sol.shape, y.shape,y_hat.shape, cache.shape)", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "loss", "+=", "torch", ".", "max", "(", "(", "(", "sol", "[", "ii", "]", "-", "cache", ")", "*", "(", "y", "[", "ii", "]", "*", "mm", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "", "return", "loss", "\n", "", "def", "MAP_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.MAP_c": [[347, 350], ["PO_model_energy.MAP"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP"], ["", "def", "MAP_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "y", "=", "y_hat", "\n", "return", "MAP", "(", "sol", ",", "y", ",", "cache", ",", "minimize", ")", "\n", "", "def", "MAP_hatc_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.MAP_hatc_c": [[350, 353], ["PO_model_energy.MAP"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP"], ["", "def", "MAP_hatc_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "y", "=", "y_hat", "-", "y_true", "\n", "return", "MAP", "(", "sol", ",", "y", ",", "cache", ",", "minimize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.NCE": [[354, 365], ["range", "len", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "NCE", "(", "sol", ",", "y", ",", "cache", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "# print(\"shape check\", sol.shape, y.shape,y_hat.shape, cache.shape)", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "loss", "+=", "torch", ".", "mean", "(", "(", "(", "sol", "[", "ii", "]", "-", "cache", ")", "*", "(", "y", "[", "ii", "]", "*", "mm", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "", "return", "loss", "\n", "", "def", "NCE_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.NCE_c": [[365, 368], ["PO_model_energy.NCE"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE"], ["", "def", "NCE_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "y", "=", "y_hat", "\n", "return", "NCE", "(", "sol", ",", "y", ",", "cache", ",", "minimize", ")", "\n", "", "def", "NCE_hatc_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.NCE_hatc_c": [[368, 371], ["PO_model_energy.NCE"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE"], ["", "def", "NCE_hatc_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "y", "=", "y_hat", "-", "y_true", "\n", "return", "NCE", "(", "sol", ",", "y", ",", "cache", ",", "minimize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.PO_model_energy.growcache": [[373, 383], ["PO_model_energy.batch_solve", "cache.detach().numpy", "numpy.unique", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.append", "cache.detach", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "growcache", "(", "cache", ",", "y_hat", ",", "param", ")", ":", "\n", "    ", "'''\n    cache is torch array [currentpoolsize,48]\n    y_hat is  torch array [batch_size,48]\n    '''", "\n", "sol", "=", "batch_solve", "(", "param", ",", "y_hat", ")", "\n", "cache_np", "=", "cache", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "cache_np", "=", "np", ".", "unique", "(", "np", ".", "append", "(", "cache_np", ",", "sol", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "# torch has no unique function, so we have to do this", "\n", "return", "torch", ".", "from_numpy", "(", "cache_np", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_Listwise.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.ICON_solving.SolveICON.__init__": [[126, 145], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nbMachines", ",", "nbTasks", ",", "nbResources", ",", "MC", ",", "U", ",", "D", ",", "E", ",", "L", ",", "P", ",", "idle", ",", "up", ",", "down", ",", "q", ",", "\n", "relax", "=", "True", ",", "\n", "verbose", "=", "False", ",", "method", "=", "-", "1", ",", "**", "h", ")", ":", "\n", "        ", "self", ".", "nbMachines", "=", "nbMachines", "\n", "self", ".", "nbTasks", "=", "nbTasks", "\n", "self", ".", "nbResources", "=", "nbResources", "\n", "self", ".", "MC", "=", "MC", "\n", "self", ".", "U", "=", "U", "\n", "self", ".", "D", "=", "D", "\n", "self", ".", "E", "=", "E", "\n", "self", ".", "L", "=", "L", "\n", "self", ".", "P", "=", "P", "\n", "self", ".", "idle", "=", "idle", "\n", "self", ".", "up", "=", "up", "\n", "self", ".", "down", "=", "down", "\n", "self", ".", "q", "=", "q", "\n", "self", ".", "relax", "=", "relax", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "method", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.ICON_solving.SolveICON.make_model": [[148, 195], ["range", "range", "range", "Model", "Model.addConstrs", "Model.addConstrs", "Model.addConstrs", "Model.update", "dict", "Model.getVars", "Model.setParam", "Model.addVars", "Model.addVars", "name.startswith", "range", "range", "range", "map", "Model.addVars.sum", "Model.addVars.sum", "quicksum", "Model.addConstr", "name[].split", "range", "range", "quicksum", "range", "quicksum", "range", "max"], "methods", ["None"], ["", "def", "make_model", "(", "self", ")", ":", "\n", "        ", "Machines", "=", "range", "(", "self", ".", "nbMachines", ")", "\n", "Tasks", "=", "range", "(", "self", ".", "nbTasks", ")", "\n", "Resources", "=", "range", "(", "self", ".", "nbResources", ")", "\n", "\n", "MC", "=", "self", ".", "MC", "\n", "U", "=", "self", ".", "U", "\n", "D", "=", "self", ".", "D", "\n", "E", "=", "self", ".", "E", "\n", "L", "=", "self", ".", "L", "\n", "P", "=", "self", ".", "P", "\n", "idle", "=", "self", ".", "idle", "\n", "up", "=", "self", ".", "up", "\n", "down", "=", "self", ".", "down", "\n", "relax", "=", "self", ".", "relax", "\n", "q", "=", "self", ".", "q", "\n", "N", "=", "1440", "//", "q", "\n", "\n", "M", "=", "Model", "(", "\"icon\"", ")", "\n", "if", "not", "self", ".", "verbose", ":", "\n", "            ", "M", ".", "setParam", "(", "'OutputFlag'", ",", "0", ")", "\n", "", "if", "relax", ":", "\n", "            ", "x", "=", "M", ".", "addVars", "(", "Tasks", ",", "Machines", ",", "range", "(", "N", ")", ",", "lb", "=", "0.", ",", "ub", "=", "1.", ",", "vtype", "=", "GRB", ".", "CONTINUOUS", ",", "name", "=", "\"x\"", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "M", ".", "addVars", "(", "Tasks", ",", "Machines", ",", "range", "(", "N", ")", ",", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"x\"", ")", "\n", "\n", "\n", "", "M", ".", "addConstrs", "(", "x", ".", "sum", "(", "f", ",", "'*'", ",", "range", "(", "E", "[", "f", "]", ")", ")", "==", "0", "for", "f", "in", "Tasks", ")", "\n", "M", ".", "addConstrs", "(", "x", ".", "sum", "(", "f", ",", "'*'", ",", "range", "(", "L", "[", "f", "]", "-", "D", "[", "f", "]", "+", "1", ",", "N", ")", ")", "==", "0", "for", "f", "in", "Tasks", ")", "\n", "M", ".", "addConstrs", "(", "(", "quicksum", "(", "x", "[", "(", "f", ",", "m", ",", "t", ")", "]", "for", "t", "in", "range", "(", "N", ")", "for", "m", "in", "Machines", ")", "==", "1", "for", "f", "in", "Tasks", ")", ")", "\n", "\n", "# capacity requirement", "\n", "for", "r", "in", "Resources", ":", "\n", "            ", "for", "m", "in", "Machines", ":", "\n", "                ", "for", "t", "in", "range", "(", "N", ")", ":", "\n", "                    ", "M", ".", "addConstr", "(", "quicksum", "(", "quicksum", "(", "x", "[", "(", "f", ",", "m", ",", "t1", ")", "]", "for", "t1", "in", "range", "(", "max", "(", "0", ",", "t", "-", "D", "[", "f", "]", "+", "1", ")", ",", "t", "+", "1", ")", ")", "*", "\n", "U", "[", "f", "]", "[", "r", "]", "for", "f", "in", "Tasks", ")", "<=", "MC", "[", "m", "]", "[", "r", "]", ")", "\n", "# M = M.presolve()", "\n", "", "", "", "M", ".", "update", "(", ")", "\n", "self", ".", "model", "=", "M", "\n", "\n", "self", ".", "x", "=", "dict", "(", ")", "\n", "for", "var", "in", "M", ".", "getVars", "(", ")", ":", "\n", "            ", "name", "=", "var", ".", "varName", "\n", "if", "name", ".", "startswith", "(", "'x['", ")", ":", "\n", "                ", "(", "f", ",", "m", ",", "t", ")", "=", "map", "(", "int", ",", "name", "[", "2", ":", "-", "1", "]", ".", "split", "(", "','", ")", ")", "\n", "self", ".", "x", "[", "(", "f", ",", "m", ",", "t", ")", "]", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.ICON_solving.SolveICON.solve_model": [[196, 274], ["range", "range", "range", "quicksum", "Model.setObjective", "Model.setParam", "Model.optimize", "numpy.zeros", "ICON_solving.SolveICON.model.reset", "Model.setParam", "numpy.zeros", "x.items", "range", "ICON_solving.SolveICON.model.reset", "print", "range", "print", "print", "print", "sum", "print", "ICON_solving.SolveICON.model.reset", "print", "numpy.argwhere", "print", "print", "print", "print", "sum", "numpy.sum", "max"], "methods", ["None"], ["", "", "", "def", "solve_model", "(", "self", ",", "price", ",", "timelimit", "=", "None", ")", ":", "\n", "        ", "Model", "=", "self", ".", "model", "\n", "MC", "=", "self", ".", "MC", "\n", "U", "=", "self", ".", "U", "\n", "D", "=", "self", ".", "D", "\n", "E", "=", "self", ".", "E", "\n", "L", "=", "self", ".", "L", "\n", "P", "=", "self", ".", "P", "\n", "idle", "=", "self", ".", "idle", "\n", "up", "=", "self", ".", "up", "\n", "down", "=", "self", ".", "down", "\n", "q", "=", "self", ".", "q", "\n", "N", "=", "1440", "//", "q", "\n", "\n", "verbose", "=", "self", ".", "verbose", "\n", "x", "=", "self", ".", "x", "\n", "nbMachines", "=", "self", ".", "nbMachines", "\n", "nbTasks", "=", "self", ".", "nbTasks", "\n", "nbResources", "=", "self", ".", "nbResources", "\n", "Machines", "=", "range", "(", "nbMachines", ")", "\n", "Tasks", "=", "range", "(", "nbTasks", ")", "\n", "Resources", "=", "range", "(", "nbResources", ")", "\n", "obj_expr", "=", "quicksum", "(", "[", "x", "[", "(", "f", ",", "m", ",", "t", ")", "]", "*", "sum", "(", "price", "[", "t", ":", "t", "+", "D", "[", "f", "]", "]", ")", "*", "P", "[", "f", "]", "*", "q", "/", "60", "\n", "for", "f", "in", "Tasks", "for", "t", "in", "range", "(", "N", "-", "D", "[", "f", "]", "+", "1", ")", "for", "m", "in", "Machines", "if", "(", "f", ",", "m", ",", "t", ")", "in", "x", "]", ")", "\n", "\n", "Model", ".", "setObjective", "(", "obj_expr", ",", "GRB", ".", "MINIMIZE", ")", "\n", "#Model.setObjective( quicksum( (x[(f,m,t)]*P[f]*quicksum([price[t+i] for i in range(D[f])])*q/60) for f in Tasks", "\n", "#                for m in Machines for t in range(N-D[f]+1)), GRB.MINIMIZE)", "\n", "if", "timelimit", ":", "\n", "            ", "Model", ".", "setParam", "(", "'TimeLimit'", ",", "timelimit", ")", "\n", "#if relax:", "\n", "#    Model = Model.relax()", "\n", "", "Model", ".", "setParam", "(", "'Method'", ",", "self", ".", "method", ")", "\n", "#logging.info(\"Number of constraints%d\",Model.NumConstrs)", "\n", "Model", ".", "optimize", "(", ")", "\n", "\n", "solver", "=", "np", ".", "zeros", "(", "N", ")", "\n", "if", "Model", ".", "status", "in", "[", "GRB", ".", "Status", ".", "OPTIMAL", "]", ":", "\n", "            ", "try", ":", "\n", "#task_on = Model.getAttr('x',x)", "\n", "                ", "task_on", "=", "np", ".", "zeros", "(", "(", "nbTasks", ",", "nbMachines", ",", "N", ")", ")", "\n", "for", "(", "(", "f", ",", "m", ",", "t", ")", ",", "var", ")", "in", "x", ".", "items", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "task_on", "[", "f", ",", "m", ",", "t", "]", "=", "var", ".", "X", "\n", "", "except", "AttributeError", ":", "\n", "                        ", "task_on", "[", "f", ",", "m", ",", "t", "]", "=", "0.", "\n", "print", "(", "\"AttributeError: b' Unable to retrieve attribute 'X'\"", ")", "\n", "print", "(", "\"__________Something WRONG___________________________\"", ")", "\n", "\n", "\n", "", "", "if", "verbose", ":", "\n", "\n", "                    ", "print", "(", "'\\nCost: %g'", "%", "Model", ".", "objVal", ")", "\n", "print", "(", "'\\nExecution Time: %f'", "%", "Model", ".", "Runtime", ")", "\n", "print", "(", "\"where the variables is one: \"", ",", "np", ".", "argwhere", "(", "task_on", "==", "1", ")", ")", "\n", "", "for", "t", "in", "range", "(", "N", ")", ":", "\n", "                    ", "solver", "[", "t", "]", "=", "sum", "(", "np", ".", "sum", "(", "task_on", "[", "f", ",", ":", ",", "max", "(", "0", ",", "t", "-", "D", "[", "f", "]", "+", "1", ")", ":", "t", "+", "1", "]", ")", "*", "P", "[", "f", "]", "for", "f", "in", "Tasks", ")", "\n", "", "solver", "=", "solver", "*", "q", "/", "60", "\n", "self", ".", "model", ".", "reset", "(", "0", ")", "\n", "return", "solver", "\n", "", "except", "NameError", ":", "\n", "                ", "print", "(", "\"\\n__________Something wrong_______ \\n \"", ")", "\n", "# make sure cut is removed! (modifies model)", "\n", "self", ".", "model", ".", "reset", "(", "0", ")", "\n", "\n", "return", "solver", "\n", "\n", "", "", "elif", "Model", ".", "status", "==", "GRB", ".", "Status", ".", "INF_OR_UNBD", ":", "\n", "            ", "print", "(", "'Model is infeasible or unbounded'", ")", "\n", "", "elif", "Model", ".", "status", "==", "GRB", ".", "Status", ".", "INFEASIBLE", ":", "\n", "            ", "print", "(", "'Model is infeasible'", ")", "\n", "", "elif", "Model", ".", "status", "==", "GRB", ".", "Status", ".", "UNBOUNDED", ":", "\n", "            ", "print", "(", "'Model is unbounded'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Optimization ended with status %d'", "%", "Model", ".", "status", ")", "\n", "", "self", ".", "model", ".", "reset", "(", "0", ")", "\n", "\n", "return", "solver", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.ICON_solving.ICONSolutionPool": [[5, 63], ["range", "range", "range", "Model", "Model.addVars", "Model.addConstrs", "Model.addConstrs", "Model.addConstrs", "Model.setObjective", "Model.setParam", "Model.setParam", "Model.optimize", "Model.setParam", "range", "range", "range", "M.addVars.sum", "M.addVars.sum", "quicksum", "Model.addConstr", "Model.setParam", "numpy.zeros", "numpy.zeros", "M.addVars.items", "range", "batch_sol_spos.append", "print", "range", "range", "numpy.sum", "quicksum", "range", "numpy.sum", "quicksum", "range", "max", "max"], "function", ["None"], ["def", "ICONSolutionPool", "(", "nbMachines", ",", "nbTasks", ",", "nbResources", ",", "MC", ",", "U", ",", "D", ",", "E", ",", "L", ",", "P", ",", "idle", ",", "up", ",", "down", ",", "q", ",", "\n", "verbose", "=", "False", ",", "method", "=", "-", "1", ",", "**", "h", ")", ":", "\n", "\n", "\n", "    ", "Machines", "=", "range", "(", "nbMachines", ")", "\n", "Tasks", "=", "range", "(", "nbTasks", ")", "\n", "Resources", "=", "range", "(", "nbResources", ")", "\n", "\n", "\n", "N", "=", "1440", "//", "q", "\n", "\n", "M", "=", "Model", "(", "\"icon\"", ")", "\n", "if", "not", "verbose", ":", "\n", "        ", "M", ".", "setParam", "(", "'OutputFlag'", ",", "0", ")", "\n", "\n", "", "x", "=", "M", ".", "addVars", "(", "Tasks", ",", "Machines", ",", "range", "(", "N", ")", ",", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"x\"", ")", "\n", "\n", "\n", "M", ".", "addConstrs", "(", "x", ".", "sum", "(", "f", ",", "'*'", ",", "range", "(", "E", "[", "f", "]", ")", ")", "==", "0", "for", "f", "in", "Tasks", ")", "\n", "M", ".", "addConstrs", "(", "x", ".", "sum", "(", "f", ",", "'*'", ",", "range", "(", "L", "[", "f", "]", "-", "D", "[", "f", "]", "+", "1", ",", "N", ")", ")", "==", "0", "for", "f", "in", "Tasks", ")", "\n", "M", ".", "addConstrs", "(", "(", "quicksum", "(", "x", "[", "(", "f", ",", "m", ",", "t", ")", "]", "for", "t", "in", "range", "(", "N", ")", "for", "m", "in", "Machines", ")", "==", "1", "for", "f", "in", "Tasks", ")", ")", "\n", "\n", "# capacity requirement", "\n", "for", "r", "in", "Resources", ":", "\n", "        ", "for", "m", "in", "Machines", ":", "\n", "            ", "for", "t", "in", "range", "(", "N", ")", ":", "\n", "                ", "M", ".", "addConstr", "(", "quicksum", "(", "quicksum", "(", "x", "[", "(", "f", ",", "m", ",", "t1", ")", "]", "for", "t1", "in", "range", "(", "max", "(", "0", ",", "t", "-", "D", "[", "f", "]", "+", "1", ")", ",", "t", "+", "1", ")", ")", "*", "\n", "U", "[", "f", "]", "[", "r", "]", "for", "f", "in", "Tasks", ")", "<=", "MC", "[", "m", "]", "[", "r", "]", ")", "\n", "", "", "", "M", ".", "setObjective", "(", "0", ",", "GRB", ".", "MINIMIZE", ")", "\n", "M", ".", "setParam", "(", "'PoolSearchMode'", ",", "2", ")", "\n", "M", ".", "setParam", "(", "'PoolSolutions'", ",", "100", ")", "\n", "#     M = M.presolve()", "\n", "#     M.update()", "\n", "M", ".", "optimize", "(", ")", "\n", "\n", "batch_sol_spos", "=", "[", "]", "\n", "\n", "if", "M", ".", "status", "in", "[", "GRB", ".", "Status", ".", "OPTIMAL", "]", ":", "\n", "        ", "try", ":", "\n", "            ", "for", "i", "in", "range", "(", "M", ".", "SolCount", ")", ":", "\n", "                ", "M", ".", "setParam", "(", "'SolutionNumber'", ",", "i", ")", "\n", "sol", "=", "np", ".", "zeros", "(", "N", ")", "\n", "\n", "task_on", "=", "np", ".", "zeros", "(", "(", "nbTasks", ",", "nbMachines", ",", "N", ")", ")", "\n", "for", "(", "(", "f", ",", "m", ",", "t", ")", ",", "var", ")", "in", "x", ".", "items", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "task_on", "[", "f", ",", "m", ",", "t", "]", "=", "var", ".", "Xn", "\n", "", "except", "AttributeError", ":", "\n", "                        ", "raise", "\n", "\n", "", "", "for", "t", "in", "range", "(", "N", ")", ":", "\n", "                    ", "sol", "[", "t", "]", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "task_on", "[", "f", ",", ":", ",", "max", "(", "0", ",", "t", "-", "D", "[", "f", "]", "+", "1", ")", ":", "t", "+", "1", "]", ")", "*", "P", "[", "f", "]", "for", "f", "in", "Tasks", ")", "\n", "", "sol", "=", "sol", "*", "q", "/", "60", "\n", "batch_sol_spos", ".", "append", "(", "sol", ")", "\n", "", "return", "batch_sol_spos", "\n", "", "except", "NameError", ":", "\n", "                ", "print", "(", "\"\\n__________Something wrong_______ \\n \"", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.ICON_solving.data_reading": [[65, 108], ["int", "int", "int", "range", "int", "range", "open", "f.read().splitlines", "mylist[].split", "int", "float", "float", "list", "mylist[].split", "int", "int", "int", "float", "list", "map", "map", "f.read", "mylist[].split", "mylist[].split"], "function", ["None"], ["", "", "", "def", "data_reading", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "mylist", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "q", "=", "int", "(", "mylist", "[", "0", "]", ")", "\n", "nbResources", "=", "int", "(", "mylist", "[", "1", "]", ")", "\n", "nbMachines", "=", "int", "(", "mylist", "[", "2", "]", ")", "\n", "idle", "=", "[", "None", "]", "*", "nbMachines", "\n", "up", "=", "[", "None", "]", "*", "nbMachines", "\n", "down", "=", "[", "None", "]", "*", "nbMachines", "\n", "MC", "=", "[", "None", "]", "*", "nbMachines", "\n", "for", "m", "in", "range", "(", "nbMachines", ")", ":", "\n", "        ", "l", "=", "mylist", "[", "2", "*", "m", "+", "3", "]", ".", "split", "(", ")", "\n", "idle", "[", "m", "]", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "up", "[", "m", "]", "=", "float", "(", "l", "[", "2", "]", ")", "\n", "down", "[", "m", "]", "=", "float", "(", "l", "[", "3", "]", ")", "\n", "MC", "[", "m", "]", "=", "list", "(", "map", "(", "int", ",", "mylist", "[", "2", "*", "(", "m", "+", "2", ")", "]", ".", "split", "(", ")", ")", ")", "\n", "", "lines_read", "=", "2", "*", "nbMachines", "+", "2", "\n", "nbTasks", "=", "int", "(", "mylist", "[", "lines_read", "+", "1", "]", ")", "\n", "U", "=", "[", "None", "]", "*", "nbTasks", "\n", "D", "=", "[", "None", "]", "*", "nbTasks", "\n", "E", "=", "[", "None", "]", "*", "nbTasks", "\n", "L", "=", "[", "None", "]", "*", "nbTasks", "\n", "P", "=", "[", "None", "]", "*", "nbTasks", "\n", "for", "f", "in", "range", "(", "nbTasks", ")", ":", "\n", "        ", "l", "=", "mylist", "[", "2", "*", "f", "+", "lines_read", "+", "2", "]", ".", "split", "(", ")", "\n", "D", "[", "f", "]", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "E", "[", "f", "]", "=", "int", "(", "l", "[", "2", "]", ")", "\n", "L", "[", "f", "]", "=", "int", "(", "l", "[", "3", "]", ")", "\n", "P", "[", "f", "]", "=", "float", "(", "l", "[", "4", "]", ")", "\n", "U", "[", "f", "]", "=", "list", "(", "map", "(", "int", ",", "mylist", "[", "2", "*", "f", "+", "lines_read", "+", "3", "]", ".", "split", "(", ")", ")", ")", "\n", "", "return", "{", "\"nbMachines\"", ":", "nbMachines", ",", "\n", "\"nbTasks\"", ":", "nbTasks", ",", "\"nbResources\"", ":", "nbResources", ",", "\n", "\"MC\"", ":", "MC", ",", "\n", "\"U\"", ":", "U", ",", "\n", "\"D\"", ":", "D", ",", "\n", "\"E\"", ":", "E", ",", "\n", "\"L\"", ":", "L", ",", "\n", "\"P\"", ":", "P", ",", "\n", "\"idle\"", ":", "idle", ",", "\n", "\"up\"", ":", "up", ",", "\n", "\"down\"", ":", "down", ",", "\n", "\"q\"", ":", "q", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_pairwise_diff.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.get_energy.get_energy": [[16, 44], ["get_energy.get_energy_pandas", "df[].nunique", "int"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.get_energy.get_energy_pandas"], ["def", "get_energy", "(", "fname", "=", "None", ",", "trainTestRatio", "=", "0.70", ")", ":", "\n", "    ", "df", "=", "get_energy_pandas", "(", "fname", ")", "\n", "\n", "length", "=", "df", "[", "'groupID'", "]", ".", "nunique", "(", ")", "\n", "grouplength", "=", "48", "\n", "\n", "# numpy arrays, X contains groupID as first column", "\n", "X1g", "=", "df", ".", "loc", "[", ":", ",", "df", ".", "columns", "!=", "'SMPEP2'", "]", ".", "values", "\n", "y", "=", "df", ".", "loc", "[", ":", ",", "'SMPEP2'", "]", ".", "values", "\n", "\n", "# no negative values allowed...for now I just clamp these values to zero. They occur three times in the training data.", "\n", "# for i in range(len(y)):", "\n", "#     y[i] = max(y[i], 0)", "\n", "\n", "\n", "# ordered split per complete group", "\n", "train_len", "=", "int", "(", "trainTestRatio", "*", "length", ")", "\n", "\n", "# the splitting", "\n", "X_1gtrain", "=", "X1g", "[", ":", "grouplength", "*", "train_len", "]", "\n", "y_train", "=", "y", "[", ":", "grouplength", "*", "train_len", "]", "\n", "X_1gtest", "=", "X1g", "[", "grouplength", "*", "train_len", ":", "]", "\n", "y_test", "=", "y", "[", "grouplength", "*", "train_len", ":", "]", "\n", "\n", "\n", "\n", "#print(len(X1g_train),len(X1g_test),len(X),len(X1g_train)+len(X1g_test))", "\n", "return", "(", "X_1gtrain", ",", "y_train", ",", "X_1gtest", ",", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.get_energy.get_energy_grouped": [[46, 60], ["get_energy.get_energy_pandas", "[].apply", "numpy.vstack", "sklearn.model_selection.train_test_split", "get_energy_pandas.loc[].groupby().mean", "get_energy_pandas.groupby", "get_energy_pandas.loc[].groupby"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.get_energy.get_energy_pandas"], ["", "def", "get_energy_grouped", "(", "fname", "=", "None", ")", ":", "\n", "    ", "df", "=", "get_energy_pandas", "(", "fname", ")", "\n", "\n", "# put the 'y's into columns (I hope this respects the ordering!)", "\n", "t", "=", "df", ".", "groupby", "(", "'groupID'", ")", "[", "'SMPEP2'", "]", ".", "apply", "(", "np", ".", "array", ")", "\n", "grpY", "=", "np", ".", "vstack", "(", "t", ".", "values", ")", "# stack into a 2D array", "\n", "# now something similar but for the features... lets naively just take averages", "\n", "grpX", "=", "df", ".", "loc", "[", ":", ",", "df", ".", "columns", "!=", "'SMPEP2'", "]", ".", "groupby", "(", "'groupID'", ")", ".", "mean", "(", ")", ".", "values", "\n", "\n", "# train/test splitting, sklearn is so convenient", "\n", "(", "grpX_train", ",", "grpX_test", ",", "grpY_train", ",", "grpY_test", ")", "=", "train_test_split", "(", "grpX", ",", "grpY", ",", "test_size", "=", "0.3", ",", "shuffle", "=", "False", ")", "\n", "\n", "return", "(", "grpX_train", ",", "grpY_train", ",", "grpX_test", ",", "grpY_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.get_energy.get_energy_pandas": [[62, 94], ["pandas.read_csv", "pd.read_csv.drop", "pd.read_csv.drop", "pd.read_csv.loc[].interpolate", "range", "pd.read_csv.drop", "int", "pd.read_csv.insert", "len", "pandas.isnull().any().any", "pd.read_csv.drop", "len", "range", "range", "pandas.isnull().any", "range", "pandas.isnull"], "function", ["None"], ["", "def", "get_energy_pandas", "(", "fname", "=", "None", ")", ":", "\n", "    ", "if", "fname", "==", "None", ":", "\n", "        ", "fname", "=", "\"prices2013.dat\"", "\n", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "fname", ",", "delim_whitespace", "=", "True", ",", "quotechar", "=", "'\"'", ")", "\n", "# remove unnecessary columns", "\n", "df", ".", "drop", "(", "[", "'#DateTime'", ",", "'Holiday'", ",", "'ActualWindProduction'", ",", "'SystemLoadEP2'", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "# remove columns with missing values", "\n", "df", ".", "drop", "(", "[", "'ORKTemperature'", ",", "'ORKWindspeed'", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "# missing value treatment", "\n", "# df[pd.isnull(df).any(axis=1)]", "\n", "# impute missing CO2 intensities linearly", "\n", "df", ".", "loc", "[", "df", ".", "loc", "[", ":", ",", "'CO2Intensity'", "]", "==", "0", ",", "'CO2Intensity'", "]", "=", "np", ".", "nan", "# an odity", "\n", "df", ".", "loc", "[", ":", ",", "'CO2Intensity'", "]", ".", "interpolate", "(", "inplace", "=", "True", ")", "\n", "# remove remaining 3 days with missing values", "\n", "grouplength", "=", "48", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "df", ")", ",", "grouplength", ")", ":", "\n", "        ", "day_has_nan", "=", "pd", ".", "isnull", "(", "df", ".", "loc", "[", "i", ":", "i", "+", "(", "grouplength", "-", "1", ")", "]", ")", ".", "any", "(", "axis", "=", "1", ")", ".", "any", "(", ")", "\n", "if", "day_has_nan", ":", "\n", "#print(\"Dropping\",i)", "\n", "            ", "df", ".", "drop", "(", "range", "(", "i", ",", "i", "+", "grouplength", ")", ",", "inplace", "=", "True", ")", "\n", "# data is sorted by year, month, day, periodofday; don't want learning over this", "\n", "", "", "df", ".", "drop", "(", "[", "'Day'", ",", "'Year'", ",", "'PeriodOfDay'", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "# insert group identifier at beginning", "\n", "grouplength", "=", "48", "\n", "length", "=", "int", "(", "len", "(", "df", ")", "/", "48", ")", "# 792", "\n", "gids", "=", "[", "gid", "for", "gid", "in", "range", "(", "length", ")", "for", "i", "in", "range", "(", "grouplength", ")", "]", "\n", "df", ".", "insert", "(", "0", ",", "'groupID'", ",", "gids", ")", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_MAP.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_pairwise.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_NCE.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_spo.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_twostage.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_bb.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.EnergyExperiment.test_energy_combined.seed_all": [[14, 22], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testListwiseKL.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testBB.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testMAP.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testSPO.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testTwostage.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/Twostage_rslt.csv\"", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testNCE.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testListwise.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testPointwise.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testPairwise_diff.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.testPairwise.seed_all": [[9, 17], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.__init__": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "G", "=", "G", ")", ":", "\n", "        ", "self", ".", "G", "=", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.shortest_pathsolution": [[31, 47], ["networkx.incidence_matrix().todense", "numpy.zeros", "gurobipy.Model", "gurobipy.Model.setParam", "gurobipy.Model.addMVar", "gurobipy.Model.setObjective", "gurobipy.Model.addConstr", "gurobipy.Model.optimize", "len", "networkx.incidence_matrix"], "methods", ["None"], ["", "def", "shortest_pathsolution", "(", "self", ",", "y", ")", ":", "\n", "        ", "'''\n        y the vector of  edge weight\n        '''", "\n", "A", "=", "nx", ".", "incidence_matrix", "(", "G", ",", "oriented", "=", "True", ")", ".", "todense", "(", ")", "\n", "b", "=", "np", ".", "zeros", "(", "len", "(", "A", ")", ")", "\n", "b", "[", "0", "]", "=", "-", "1", "\n", "b", "[", "-", "1", "]", "=", "1", "\n", "model", "=", "gp", ".", "Model", "(", ")", "\n", "model", ".", "setParam", "(", "'OutputFlag'", ",", "0", ")", "\n", "x", "=", "model", ".", "addMVar", "(", "shape", "=", "A", ".", "shape", "[", "1", "]", ",", "vtype", "=", "gp", ".", "GRB", ".", "BINARY", ",", "name", "=", "\"x\"", ")", "\n", "model", ".", "setObjective", "(", "y", "@", "x", ",", "gp", ".", "GRB", ".", "MINIMIZE", ")", "\n", "model", ".", "addConstr", "(", "A", "@", "x", "==", "b", ",", "name", "=", "\"eq\"", ")", "\n", "model", ".", "optimize", "(", ")", "\n", "if", "model", ".", "status", "==", "2", ":", "\n", "            ", "return", "x", ".", "x", "\n", "", "", "def", "solution_fromtorch", "(", "self", ",", "y_torch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.solution_fromtorch": [[47, 49], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PO_modelsSP.shortestpath_solver.shortest_pathsolution", "y_torch.detach().numpy", "y_torch.detach"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.shortest_pathsolution"], ["", "", "def", "solution_fromtorch", "(", "self", ",", "y_torch", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "self", ".", "shortest_pathsolution", "(", "y_torch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ")", ".", "float", "(", ")", "\n", "", "", "spsolver", "=", "shortestpath_solver", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.datawrapper.__init__": [[52, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.datawrapper.__len__": [[56, 58], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.datawrapper.__getitem__": [[59, 61], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "x", "[", "index", "]", ",", "self", ".", "y", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.twostage_regression.__init__": [[90, 109], ["pytorch_lightning.LightningModule.__init__", "pytorch_lightning.seed_everything", "PO_modelsSP.twostage_regression.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "exact_solver", "=", "spsolver", ",", "lr", "=", "1e-1", ",", "l1_weight", "=", "0.1", ",", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "\"\"\"\n        A class to implement two stage mse based model and with test and validation module\n        Args:\n            net: the neural network model\n            exact_solver: the solver which returns a shortest path solution given the edge cost\n            lr: learning rate\n            l1_weight: the lasso regularization weight\n            max_epoch: maximum number of epcohs\n            seed: seed for reproducibility \n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "pl", ".", "seed_everything", "(", "seed", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "l1_weight", "=", "l1_weight", "\n", "self", ".", "exact_solver", "=", "exact_solver", "\n", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ",", "'l1_weight'", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.twostage_regression.forward": [[109, 111], ["PO_modelsSP.twostage_regression.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.twostage_regression.training_step": [[111, 122], ["PO_modelsSP.twostage_regression.squeeze", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss.", "sum", "PO_modelsSP.twostage_regression.log", "PO_modelsSP.twostage_regression.log", "PO_modelsSP.twostage_regression.log", "PO_modelsSP.twostage_regression.", "param.abs().sum", "PO_modelsSP.twostage_regression.net.parameters", "param.abs"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "loss", "=", "criterion", "(", "y_hat", ",", "y", ")", "\n", "l1penalty", "=", "sum", "(", "[", "(", "param", ".", "abs", "(", ")", ")", ".", "sum", "(", ")", "for", "param", "in", "self", ".", "net", ".", "parameters", "(", ")", "]", ")", "\n", "training_loss", "=", "loss", "+", "l1penalty", "*", "self", ".", "l1_weight", "\n", "self", ".", "log", "(", "\"train_totalloss\"", ",", "training_loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"train_l1penalty\"", ",", "l1penalty", "*", "self", ".", "l1_weight", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "training_loss", "\n", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.twostage_regression.validation_step": [[122, 135], ["torch.nn.MSELoss", "torch.nn.MSELoss", "PO_modelsSP.twostage_regression.squeeze", "torch.nn.MSELoss.", "PO_modelsSP.regret_fn", "PO_modelsSP.pointwise_crossproduct_loss", "PO_modelsSP.twostage_regression.log", "PO_modelsSP.twostage_regression.log", "PO_modelsSP.twostage_regression.log", "PO_modelsSP.twostage_regression."], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.regret_fn", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pointwise_crossproduct_loss"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "mseloss", "=", "criterion", "(", "y_hat", ",", "y", ")", "\n", "regret_loss", "=", "regret_fn", "(", "self", ".", "exact_solver", ",", "y_hat", ",", "y", ")", "\n", "pointwise_loss", "=", "pointwise_crossproduct_loss", "(", "y_hat", ",", "y", ")", "\n", "\n", "self", ".", "log", "(", "\"val_mse\"", ",", "mseloss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"val_regret\"", ",", "regret_loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"val_pointwise\"", ",", "pointwise_loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "\n", "return", "{", "\"val_mse\"", ":", "mseloss", ",", "\"val_regret\"", ":", "regret_loss", "}", "\n", "", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.twostage_regression.validation_epoch_end": [[135, 141], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "PO_modelsSP.twostage_regression.log", "PO_modelsSP.twostage_regression.log", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_regret", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"val_regret\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "avg_mse", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"val_mse\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "log", "(", "\"ptl/val_regret\"", ",", "avg_regret", ")", "\n", "self", ".", "log", "(", "\"ptl/val_mse\"", ",", "avg_mse", ")", "\n", "# self.log(\"ptl/val_accuracy\", avg_acc)", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.twostage_regression.test_step": [[143, 149], ["PO_modelsSP.twostage_regression.validation_step"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.validation_step"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# num = np.random.random(11)", "\n", "# print(\"test number\",num)", "\n", "# self.log(\"length\", num, prog_bar=True, on_step=True, on_epoch=True,)", "\n", "# # return {\"length\":len(batch)}", "\n", "        ", "return", "self", ".", "validation_step", "(", "batch", ",", "batch_idx", ")", "\n", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.twostage_regression.configure_optimizers": [[149, 155], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "PO_modelsSP.twostage_regression.parameters", "len", "PO_modelsSP.twostage_regression.train_dataloader"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "num_batches", "=", "len", "(", "self", ".", "train_dataloader", "(", ")", ")", "//", "self", ".", "trainer", ".", "accumulate_grad_batches", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "OneCycleLR", "(", "optimizer", ",", "max_lr", "=", "self", ".", "lr", ",", "epochs", "=", "self", ".", "max_epochs", ",", "\n", "steps_per_epoch", "=", "num_batches", ")", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.SPO.__init__": [[197, 203], ["PO_modelsSP.twostage_regression.__init__"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "exact_solver", "=", "spsolver", ",", "lr", "=", "1e-1", ",", "l1_weight", "=", "0.1", ",", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "\"\"\"\n        Implementaion of SPO+ loss subclass of twostage model\n \n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "net", ",", "exact_solver", ",", "lr", ",", "l1_weight", ",", "max_epochs", ",", "seed", ")", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.SPO.training_step": [[203, 215], ["PO_modelsSP.SPO.squeeze", "sum", "range", "PO_modelsSP.SPO.log", "PO_modelsSP.SPO.log", "PO_modelsSP.SPO.log", "len", "PO_modelsSP.SPO.", "param.abs().sum", "PO_modelsSP.SPOLoss", "len", "len", "PO_modelsSP.SPO.net.parameters", "param.abs"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.SPOLoss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "loss", "=", "0", "\n", "l1penalty", "=", "sum", "(", "[", "(", "param", ".", "abs", "(", ")", ")", ".", "sum", "(", ")", "for", "param", "in", "self", ".", "net", ".", "parameters", "(", ")", "]", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "            ", "loss", "+=", "SPOLoss", "(", "self", ".", "exact_solver", ")", "(", "y_hat", "[", "ii", "]", ",", "y", "[", "ii", "]", ")", "\n", "", "training_loss", "=", "loss", "/", "len", "(", "y", ")", "+", "l1penalty", "*", "self", ".", "l1_weight", "\n", "self", ".", "log", "(", "\"train_totalloss\"", ",", "training_loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"train_l1penalty\"", ",", "l1penalty", "*", "self", ".", "l1_weight", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", "/", "len", "(", "y", ")", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "training_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.Blackbox.__init__": [[220, 224], ["PO_modelsSP.twostage_regression.__init__", "PO_modelsSP.Blackbox.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["def", "__init__", "(", "self", ",", "net", ",", "exact_solver", "=", "spsolver", ",", "lr", "=", "1e-1", ",", "mu", "=", "0.1", ",", "l1_weight", "=", "0.1", ",", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "net", ",", "exact_solver", ",", "lr", ",", "l1_weight", ",", "max_epochs", ",", "seed", ")", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ",", "\"mu\"", ")", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.Blackbox.training_step": [[224, 237], ["PO_modelsSP.Blackbox.squeeze", "sum", "range", "PO_modelsSP.Blackbox.log", "PO_modelsSP.Blackbox.log", "PO_modelsSP.Blackbox.log", "len", "PO_modelsSP.Blackbox.", "param.abs().sum", "PO_modelsSP.BlackboxLoss", "len", "len", "PO_modelsSP.Blackbox.net.parameters", "param.abs"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.BlackboxLoss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "loss", "=", "0", "\n", "l1penalty", "=", "sum", "(", "[", "(", "param", ".", "abs", "(", ")", ")", ".", "sum", "(", ")", "for", "param", "in", "self", ".", "net", ".", "parameters", "(", ")", "]", ")", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "            ", "loss", "+=", "BlackboxLoss", "(", "self", ".", "exact_solver", ",", "self", ".", "mu", ")", "(", "y_hat", "[", "ii", "]", ",", "y", "[", "ii", "]", ")", "\n", "", "training_loss", "=", "loss", "/", "len", "(", "y", ")", "+", "l1penalty", "*", "self", ".", "l1_weight", "\n", "self", ".", "log", "(", "\"train_totalloss\"", ",", "training_loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"train_l1penalty\"", ",", "l1penalty", "*", "self", ".", "l1_weight", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", "/", "len", "(", "y", ")", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "training_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.CachingPO.__init__": [[396, 424], ["PO_modelsSP.twostage_regression.__init__", "init_cache.detach().numpy", "numpy.unique", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "PO_modelsSP.CachingPO.save_hyperparameters", "init_cache.detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fn", ",", "init_cache", ",", "net", ",", "exact_solver", "=", "spsolver", ",", "growth", "=", "0.1", ",", "tau", "=", "0.", ",", "lr", "=", "1e-1", ",", "\n", "l1_weight", "=", "0.1", ",", "max_epochs", "=", "30", ",", "seed", "=", "20", ")", ":", "\n", "        ", "\"\"\"\n        A class to implement loss functions using soluton cache\n        Args:\n            loss_fn: the loss function (NCE, MAP or the rank-based ones)\n            init_cache: initial solution cache\n            growth: p_solve\n            tau: the margin parameter for pairwise ranking / temperatrure for listwise ranking\n            net: the neural network model\n            exact_solver: the solver which returns a shortest path solution given the edge cost\n            lr: learning rate\n            l1_weight: the lasso regularization weight\n            max_epoch: maximum number of epcohs\n            seed: seed for reproducibility \n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "net", ",", "exact_solver", ",", "lr", ",", "l1_weight", ",", "max_epochs", ",", "seed", ")", "\n", "# self.save_hyperparameters()", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "### The cache", "\n", "init_cache_np", "=", "init_cache", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "init_cache_np", "=", "np", ".", "unique", "(", "init_cache_np", ",", "axis", "=", "0", ")", "\n", "# torch has no unique function, so we have to do this", "\n", "self", ".", "cache", "=", "torch", ".", "from_numpy", "(", "init_cache_np", ")", ".", "float", "(", ")", "\n", "self", ".", "growth", "=", "growth", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ",", "\"growth\"", ",", "\"tau\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.CachingPO.training_step": [[426, 440], ["PO_modelsSP.CachingPO.squeeze", "PO_modelsSP.CachingPO.loss_fn", "sum", "PO_modelsSP.CachingPO.log", "PO_modelsSP.CachingPO.log", "PO_modelsSP.CachingPO.log", "PO_modelsSP.growcache", "PO_modelsSP.CachingPO.", "len", "param.abs().sum", "len", "len", "numpy.random.random", "PO_modelsSP.CachingPO.net.parameters", "param.abs"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.growcache"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "if", "(", "np", ".", "random", ".", "random", "(", "1", ")", "[", "0", "]", "<=", "self", ".", "growth", ")", "or", "len", "(", "self", ".", "cache", ")", "==", "0", ":", "\n", "            ", "self", ".", "cache", "=", "growcache", "(", "self", ".", "exact_solver", ",", "self", ".", "cache", ",", "y_hat", ")", "\n", "\n", "\n", "", "loss", "=", "self", ".", "loss_fn", "(", "y_hat", ",", "y", ",", "self", ".", "cache", ",", "self", ".", "tau", ")", "\n", "l1penalty", "=", "sum", "(", "[", "(", "param", ".", "abs", "(", ")", ")", ".", "sum", "(", ")", "for", "param", "in", "self", ".", "net", ".", "parameters", "(", ")", "]", ")", "\n", "training_loss", "=", "loss", "/", "len", "(", "y", ")", "+", "l1penalty", "*", "self", ".", "l1_weight", "\n", "self", ".", "log", "(", "\"train_totalloss\"", ",", "training_loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"train_l1penalty\"", ",", "l1penalty", "*", "self", ".", "l1_weight", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", "/", "len", "(", "y", ")", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "training_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.batch_solve": [[64, 69], ["range", "torch.cat", "torch.cat", "len", "sol.append", "solver.solution_fromtorch().reshape", "solver.solution_fromtorch"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.solution_fromtorch"], ["", "", "def", "batch_solve", "(", "solver", ",", "y", ",", "relaxation", "=", "False", ")", ":", "\n", "    ", "sol", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "sol", ".", "append", "(", "solver", ".", "solution_fromtorch", "(", "y", "[", "i", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "sol", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.regret_fn": [[71, 79], ["range", "torch.mean", "torch.mean", "len", "regret_list.append", "torch.tensor", "torch.tensor", "PO_modelsSP.SPOLoss"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.SPOLoss"], ["", "def", "regret_fn", "(", "solver", ",", "y_hat", ",", "y", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "'''\n    computes regret given predicted y_hat and true y\n    '''", "\n", "regret_list", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "regret_list", ".", "append", "(", "SPOLoss", "(", "solver", ",", "minimize", ")", "(", "y_hat", "[", "ii", "]", ",", "y", "[", "ii", "]", ")", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "regret_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.regret_aslist": [[80, 88], ["range", "numpy.array", "len", "regret_list.append", "PO_modelsSP.SPOLoss"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.SPOLoss"], ["", "def", "regret_aslist", "(", "solver", ",", "y_hat", ",", "y", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "'''\n    computes regret of more than one cost vectors\n    '''", "\n", "regret_list", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "regret_list", ".", "append", "(", "SPOLoss", "(", "solver", ",", "minimize", ")", "(", "y_hat", "[", "ii", "]", ",", "y", "[", "ii", "]", ")", ".", "item", "(", ")", ")", "\n", "", "return", "np", ".", "array", "(", "regret_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.SPOLoss": [[158, 176], ["solver.solution_fromtorch", "solver.solution_fromtorch", "solver.solution_fromtorch", "ctx.save_for_backward", "solver.solution_fromtorch.dot"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.solution_fromtorch", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.solution_fromtorch", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.solution_fromtorch"], ["", "", "def", "SPOLoss", "(", "solver", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "class", "SPOLoss_cls", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "y_pred", ",", "y_true", ")", ":", "\n", "\n", "            ", "sol_hat", "=", "solver", ".", "solution_fromtorch", "(", "y_pred", ")", "\n", "sol_spo", "=", "solver", ".", "solution_fromtorch", "(", "2", "*", "y_pred", "-", "y_true", ")", "\n", "sol_true", "=", "solver", ".", "solution_fromtorch", "(", "y_true", ")", "\n", "ctx", ".", "save_for_backward", "(", "sol_spo", ",", "sol_true", ",", "sol_hat", ")", "\n", "return", "mm", "*", "(", "sol_hat", "-", "sol_true", ")", ".", "dot", "(", "y_true", ")", "/", "(", "sol_true", ".", "dot", "(", "y_true", ")", ")", "# changed to per cent rgeret", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "sol_spo", ",", "sol_true", ",", "sol_hat", "=", "ctx", ".", "saved_tensors", "\n", "return", "mm", "*", "(", "sol_true", "-", "sol_spo", ")", ",", "None", "\n", "\n", "", "", "return", "SPOLoss_cls", ".", "apply", "\n", "", "def", "BlackboxLoss", "(", "solver", ",", "mu", "=", "0.1", ",", "minimize", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.BlackboxLoss": [[176, 193], ["solver.solution_fromtorch", "solver.solution_fromtorch", "solver.solution_fromtorch", "ctx.save_for_backward", "solver.solution_fromtorch.dot"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.solution_fromtorch", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.solution_fromtorch", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.shortestpath_solver.solution_fromtorch"], ["", "def", "BlackboxLoss", "(", "solver", ",", "mu", "=", "0.1", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "class", "BlackboxLoss_cls", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "y_pred", ",", "y_true", ")", ":", "\n", "            ", "sol_hat", "=", "solver", ".", "solution_fromtorch", "(", "y_pred", ")", "\n", "sol_perturbed", "=", "solver", ".", "solution_fromtorch", "(", "y_pred", "+", "mu", "*", "y_true", ")", "\n", "sol_true", "=", "solver", ".", "solution_fromtorch", "(", "y_true", ")", "\n", "ctx", ".", "save_for_backward", "(", "sol_perturbed", ",", "sol_true", ",", "sol_hat", ")", "\n", "return", "mm", "*", "(", "sol_hat", "-", "sol_true", ")", ".", "dot", "(", "y_true", ")", "/", "(", "sol_true", ".", "dot", "(", "y_true", ")", ")", "# changed to per cent rgeret", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "sol_perturbed", ",", "sol_true", ",", "sol_hat", "=", "ctx", ".", "saved_tensors", "\n", "return", "-", "mm", "*", "(", "sol_hat", "-", "sol_perturbed", ")", "/", "mu", ",", "None", "\n", "\n", "", "", "return", "BlackboxLoss_cls", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pointwise_mse_loss": [[241, 247], ["y_hat.unsqueeze", "y_true.unsqueeze", "c_diff.square().sum", "len", "c_diff.square"], "function", ["None"], ["", "", "def", "pointwise_mse_loss", "(", "y_hat", ",", "y_true", ")", ":", "\n", "    ", "c_hat", "=", "y_hat", ".", "unsqueeze", "(", "-", "1", ")", "\n", "c_true", "=", "y_true", ".", "unsqueeze", "(", "-", "1", ")", "\n", "c_diff", "=", "c_hat", "-", "c_true", "\n", "loss", "=", "(", "c_diff", ".", "square", "(", ")", ".", "sum", "(", ")", ")", "/", "len", "(", "c_diff", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pointwise_crossproduct_loss": [[248, 254], ["y_hat.unsqueeze", "y_true.unsqueeze", "torch.bmm().sum", "torch.bmm().sum", "len", "torch.bmm", "torch.bmm", "c_diff.transpose"], "function", ["None"], ["", "def", "pointwise_crossproduct_loss", "(", "y_hat", ",", "y_true", ")", ":", "\n", "    ", "c_hat", "=", "y_hat", ".", "unsqueeze", "(", "-", "1", ")", "\n", "c_true", "=", "y_true", ".", "unsqueeze", "(", "-", "1", ")", "\n", "c_diff", "=", "c_hat", "-", "c_true", "\n", "loss", "=", "(", "torch", ".", "bmm", "(", "c_diff", ",", "c_diff", ".", "transpose", "(", "2", ",", "1", ")", ")", ".", "sum", "(", ")", ")", "/", "len", "(", "c_diff", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pointwise_custom_loss": [[255, 258], ["PO_modelsSP.pointwise_mse_loss", "PO_modelsSP.pointwise_crossproduct_loss"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pointwise_mse_loss", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pointwise_crossproduct_loss"], ["", "def", "pointwise_custom_loss", "(", "y_hat", ",", "y_true", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "loss", "=", "pointwise_mse_loss", "(", "y_hat", ",", "y_true", ")", "+", "pointwise_crossproduct_loss", "(", "y_hat", ",", "y_true", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pointwise_loss": [[262, 271], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cache.transpose", "cache.transpose"], "function", ["None"], ["", "def", "pointwise_loss", "(", "y_hat", ",", "y_true", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    f(y_hat,s) is regresson on f(y,s)\n    '''", "\n", "loss", "=", "(", "torch", ".", "matmul", "(", "y_hat", ",", "cache", ".", "transpose", "(", "0", ",", "1", ")", ")", "-", "torch", ".", "matmul", "(", "y_true", ",", "cache", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pairwise_loss": [[274, 299], ["torch.nn.ReLU", "range", "len", "numpy.unique", "nn.ReLU.mean", "nn.ReLU.", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "pairwise_loss", "(", "y_hat", ",", "y_true", ",", "cache", ",", "tau", "=", "0", ",", "minimize", "=", "True", ",", "mode", "=", "'B'", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "        ", "_", ",", "indices", "=", "np", ".", "unique", "(", "(", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "return_index", "=", "True", ")", "\n", "## return indices after sorting the array in ascending order", "\n", "if", "mode", "==", "'B'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "0", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'W'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "-", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'S'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "\n", "\n", "", "loss", "+=", "relu", "(", "tau", "+", "mm", "*", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_hat", "[", "ii", "]", ")", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.pairwise_diffloss": [[300, 324], ["range", "len", "numpy.unique", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "pairwise_diffloss", "(", "y_hat", ",", "y_true", ",", "cache", ",", "tau", "=", "0", ",", "minimize", "=", "True", ",", "mode", "=", "'B'", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "        ", "_", ",", "indices", "=", "np", ".", "unique", "(", "(", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "return_index", "=", "True", ")", "\n", "## return indices after sorting the array in ascending order", "\n", "if", "mode", "==", "'B'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "0", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'W'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "-", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'S'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "\n", "", "loss", "+=", "(", "mm", "*", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "\n", "-", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_true", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_true", "[", "ii", "]", ")", ")", ")", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.Listnet_loss": [[325, 332], ["range", "len", "torch.log_softmax", "torch.softmax"], "function", ["None"], ["", "def", "Listnet_loss", "(", "y_hat", ",", "y_true", ",", "cache", ",", "tau", "=", "1", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "         ", "loss", "+=", "-", "(", "F", ".", "log_softmax", "(", "(", "-", "mm", "*", "y_hat", "[", "ii", "]", "*", "cache", "/", "tau", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "\n", "dim", "=", "0", ")", "*", "F", ".", "softmax", "(", "(", "-", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", "/", "tau", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", ")", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "", "def", "Listnet_KLloss", "(", "y_hat", ",", "y_true", ",", "cache", ",", "tau", "=", "1", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.Listnet_KLloss": [[332, 340], ["range", "len", "torch.log_softmax", "torch.log_softmax", "torch.softmax"], "function", ["None"], ["", "def", "Listnet_KLloss", "(", "y_hat", ",", "y_true", ",", "cache", ",", "tau", "=", "1", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "         ", "loss", "+=", "(", "F", ".", "log_softmax", "(", "(", "-", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", "/", "tau", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "-", "\n", "F", ".", "log_softmax", "(", "(", "-", "mm", "*", "y_hat", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "\n", "dim", "=", "0", ")", "*", "F", ".", "softmax", "(", "(", "-", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", "/", "tau", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", ")", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.MAP": [[341, 352], ["range", "len", "torch.max", "torch.max"], "function", ["None"], ["", "def", "MAP", "(", "sol", ",", "y", ",", "cache", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "# print(\"shape check\", sol.shape, y.shape,y_hat.shape, cache.shape)", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "loss", "+=", "torch", ".", "max", "(", "(", "(", "sol", "[", "ii", "]", "-", "cache", ")", "*", "(", "mm", "*", "y", "[", "ii", "]", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "", "return", "loss", "\n", "", "def", "MAP_c", "(", "y_hat", ",", "y_true", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.MAP_c": [[352, 356], ["PO_modelsSP.batch_solve", "PO_modelsSP.MAP"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP"], ["", "def", "MAP_c", "(", "y_hat", ",", "y_true", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "sol", "=", "batch_solve", "(", "spsolver", ",", "y_hat", ",", "relaxation", "=", "False", ")", "\n", "y", "=", "y_hat", "\n", "return", "MAP", "(", "sol", ",", "y", ",", "cache", ",", "minimize", ")", "\n", "", "def", "MAP_hatc_c", "(", "y_hat", ",", "y_true", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.MAP_hatc_c": [[356, 360], ["PO_modelsSP.batch_solve", "PO_modelsSP.MAP"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP"], ["", "def", "MAP_hatc_c", "(", "y_hat", ",", "y_true", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "sol", "=", "batch_solve", "(", "spsolver", ",", "y_hat", ",", "relaxation", "=", "False", ")", "\n", "y", "=", "y_hat", "-", "y_true", "\n", "return", "MAP", "(", "sol", ",", "y", ",", "cache", ",", "minimize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.NCE": [[361, 372], ["range", "len", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "NCE", "(", "sol", ",", "y", ",", "cache", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "# print(\"shape check\", sol.shape, y.shape,y_hat.shape, cache.shape)", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "loss", "+=", "torch", ".", "mean", "(", "(", "(", "sol", "[", "ii", "]", "-", "cache", ")", "*", "(", "mm", "*", "y", "[", "ii", "]", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "", "return", "loss", "\n", "", "def", "NCE_c", "(", "y_hat", ",", "y_true", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.NCE_c": [[372, 376], ["PO_modelsSP.batch_solve", "PO_modelsSP.NCE"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE"], ["", "def", "NCE_c", "(", "y_hat", ",", "y_true", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "sol", "=", "batch_solve", "(", "spsolver", ",", "y_hat", ",", "relaxation", "=", "False", ")", "\n", "y", "=", "y_hat", "\n", "return", "NCE", "(", "sol", ",", "y", ",", "cache", ",", "minimize", ")", "\n", "", "def", "NCE_hatc_c", "(", "y_hat", ",", "y_true", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.NCE_hatc_c": [[376, 380], ["PO_modelsSP.batch_solve", "PO_modelsSP.NCE"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE"], ["", "def", "NCE_hatc_c", "(", "y_hat", ",", "y_true", ",", "cache", ",", "minimize", "=", "True", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "sol", "=", "batch_solve", "(", "spsolver", ",", "y_hat", ",", "relaxation", "=", "False", ")", "\n", "y", "=", "y_hat", "-", "y_true", "\n", "return", "NCE", "(", "sol", ",", "y", ",", "cache", ",", "minimize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.ShortestPathExperiment.PO_modelsSP.growcache": [[383, 393], ["batch_solve().detach().numpy", "cache.detach().numpy", "numpy.unique", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.append", "batch_solve().detach", "cache.detach", "torch.from_numpy", "torch.from_numpy", "PO_modelsSP.batch_solve"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "growcache", "(", "solver", ",", "cache", ",", "y_hat", ")", ":", "\n", "    ", "'''\n    cache is torch array [currentpoolsize,48]\n    y_hat is  torch array [batch_size,48]\n    '''", "\n", "sol", "=", "batch_solve", "(", "solver", ",", "y_hat", ",", "relaxation", "=", "False", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "cache_np", "=", "cache", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "cache_np", "=", "np", ".", "unique", "(", "np", ".", "append", "(", "cache_np", ",", "sol", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "# torch has no unique function, so we need to do this", "\n", "return", "torch", ".", "from_numpy", "(", "cache_np", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_pointwise.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/Pointwise_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_pairwise.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/Pairwise_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_MAP.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/MAP_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_NCE.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/NCE_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_pairwise_diff.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/Pairwisediff_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.__init__": [[59, 67], ["pytorch_lightning.LightningModule.__init__", "pytorch_lightning.seed_everything", "PO_model_matching.make_cora_net", "PO_model_matching.twostage_regression.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.make_cora_net"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "lr", "=", "1e-1", ",", "seed", "=", "2", ",", "max_epochs", "=", "50", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "pl", ".", "seed_everything", "(", "seed", ")", "\n", "self", ".", "param", "=", "param", "\n", "self", ".", "net", "=", "make_cora_net", "(", "n_layers", "=", "2", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.forward": [[67, 69], ["PO_model_matching.twostage_regression.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.training_step": [[69, 76], ["PO_model_matching.twostage_regression.squeeze", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss.", "PO_model_matching.twostage_regression.log", "PO_model_matching.twostage_regression."], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", ",", "m", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "loss", "=", "criterion", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.validation_step": [[76, 89], ["torch.nn.MSELoss", "torch.nn.MSELoss", "PO_model_matching.twostage_regression.squeeze", "PO_model_matching.regret_fn", "torch.nn.MSELoss.", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "PO_model_matching.twostage_regression.log", "PO_model_matching.twostage_regression.log", "PO_model_matching.twostage_regression.log", "PO_model_matching.twostage_regression.", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torchmetrics.functional.auc", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.regret_fn"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "x", ",", "y", ",", "sol", ",", "m", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "val_loss", "=", "regret_fn", "(", "y_hat", ",", "y", ",", "sol", ",", "m", ",", "self", ".", "param", ")", "\n", "mseloss", "=", "criterion", "(", "y_hat", ",", "y", ")", "\n", "# aucloss = auc(y,y_hat,reorder=True)", "\n", "aucloss", "=", "torch", ".", "tensor", "(", "[", "auc", "(", "y", "[", "i", "]", ",", "y_hat", "[", "i", "]", ",", "reorder", "=", "True", ")", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", "]", ")", ".", "mean", "(", ")", "\n", "self", ".", "log", "(", "\"val_regret\"", ",", "val_loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"val_mse\"", ",", "mseloss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "self", ".", "log", "(", "\"val_auc\"", ",", "aucloss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "\n", "return", "{", "\"val_regret\"", ":", "val_loss", ",", "\"val_mse\"", ":", "mseloss", ",", "\"val_auc\"", ":", "aucloss", "}", "\n", "", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.validation_epoch_end": [[89, 95], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "PO_model_matching.twostage_regression.log", "PO_model_matching.twostage_regression.log", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_regret", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"val_regret\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "avg_mse", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"val_mse\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "log", "(", "\"ptl/val_regret\"", ",", "avg_regret", ")", "\n", "self", ".", "log", "(", "\"ptl/val_mse\"", ",", "avg_mse", ")", "\n", "# self.log(\"ptl/val_accuracy\", avg_acc)", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.test_step": [[96, 99], ["PO_model_matching.twostage_regression.validation_step"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.validation_step"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# Here we just reuse the validation_step for testing", "\n", "        ", "return", "self", ".", "validation_step", "(", "batch", ",", "batch_idx", ")", "\n", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.twostage_regression.configure_optimizers": [[99, 105], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "torch.optim.lr_scheduler.OneCycleLR", "PO_model_matching.twostage_regression.parameters", "len", "PO_model_matching.twostage_regression.train_dataloader"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "num_batches", "=", "len", "(", "self", ".", "train_dataloader", "(", ")", ")", "//", "self", ".", "trainer", ".", "accumulate_grad_batches", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "OneCycleLR", "(", "optimizer", ",", "max_lr", "=", "self", ".", "lr", ",", "epochs", "=", "self", ".", "max_epochs", ",", "\n", "steps_per_epoch", "=", "num_batches", ")", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.SPO.__init__": [[148, 150], ["PO_model_matching.twostage_regression.__init__"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "lr", "=", "1e-1", ",", "seed", "=", "2", ",", "max_epochs", "=", "50", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "param", ",", "lr", ",", "seed", ",", "max_epochs", ")", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.SPO.training_step": [[150, 156], ["PO_model_matching.SPO.squeeze", "PO_model_matching.SPO.log", "PO_model_matching.spograd", "PO_model_matching.SPO."], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.spograd"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", ",", "m", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "loss", "=", "spograd", "(", "y", ",", "sol", ",", "m", ",", "self", ".", "param", ")", "(", "y_hat", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.Blackbox.__init__": [[158, 161], ["PO_model_matching.twostage_regression.__init__"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "lr", "=", "1e-1", ",", "mu", "=", "0.1", ",", "seed", "=", "2", ",", "max_epochs", "=", "50", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "param", ",", "lr", ",", "seed", ",", "max_epochs", ")", "\n", "self", ".", "mu", "=", "mu", "\n", "# self.automatic_optimization = False", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.Blackbox.training_step": [[162, 168], ["PO_model_matching.Blackbox.squeeze", "PO_model_matching.Blackbox.log", "PO_model_matching.bbgrad", "PO_model_matching.Blackbox."], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.bbgrad"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", ",", "m", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "loss", "=", "bbgrad", "(", "y", ",", "sol", ",", "m", ",", "self", ".", "param", ",", "self", ".", "mu", ")", "(", "y_hat", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CachingPO.__init__": [[290, 302], ["PO_model_matching.twostage_regression.__init__", "init_cache.detach().numpy", "numpy.unique", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "PO_model_matching.CachingPO.save_hyperparameters", "init_cache.detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "loss_fn", ",", "init_cache", ",", "growth", "=", "0.1", ",", "tau", "=", "1.", ",", "lr", "=", "1e-1", ",", "seed", "=", "2", ",", "max_epochs", "=", "50", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "param", ",", "lr", ",", "seed", ",", "max_epochs", ")", "\n", "# self.save_hyperparameters()", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "### The cache", "\n", "init_cache_np", "=", "init_cache", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "init_cache_np", "=", "np", ".", "unique", "(", "init_cache_np", ",", "axis", "=", "0", ")", "\n", "# torch has no unique function, so we have to do this", "\n", "self", ".", "cache", "=", "torch", ".", "from_numpy", "(", "init_cache_np", ")", ".", "float", "(", ")", "\n", "self", ".", "growth", "=", "growth", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ",", "\"growth\"", ",", "\"tau\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CachingPO.training_step": [[303, 312], ["PO_model_matching.CachingPO.squeeze", "PO_model_matching.CachingPO.loss_fn", "PO_model_matching.CachingPO.log", "PO_model_matching.growcache", "PO_model_matching.CachingPO.", "len", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.growcache"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", ",", "m", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "if", "(", "np", ".", "random", ".", "random", "(", "1", ")", "[", "0", "]", "<", "self", ".", "growth", ")", "or", "len", "(", "self", ".", "cache", ")", "==", "0", ":", "\n", "            ", "self", ".", "cache", "=", "growcache", "(", "self", ".", "cache", ",", "y_hat", ",", "m", ",", "self", ".", "param", ")", "\n", "\n", "", "loss", "=", "self", ".", "loss_fn", "(", "y_hat", ",", "y", ",", "sol", ",", "self", ".", "cache", ",", "tau", "=", "self", ".", "tau", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CombinedPO.__init__": [[314, 328], ["PO_model_matching.twostage_regression.__init__", "init_cache.detach().numpy", "numpy.unique", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "PO_model_matching.CombinedPO.save_hyperparameters", "init_cache.detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_fn", ",", "init_cache", ",", "growpool_fn", ",", "growth", "=", "0.0", ",", "lr", "=", "1e-1", ",", "tau", "=", "0.", ",", "alpha", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lr", ")", "\n", "# self.save_hyperparameters()", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "### The cache", "\n", "init_cache_np", "=", "init_cache", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "init_cache_np", "=", "np", ".", "unique", "(", "init_cache_np", ",", "axis", "=", "0", ")", "\n", "# torch has no unique function, so we have to do this", "\n", "self", ".", "cache", "=", "torch", ".", "from_numpy", "(", "init_cache_np", ")", ".", "float", "(", ")", "\n", "self", ".", "growpool_fn", "=", "growpool_fn", "\n", "self", ".", "growth", "=", "growth", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "save_hyperparameters", "(", "\"lr\"", ",", "\"growth\"", ",", "\"tau\"", ",", "\"alpha\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CombinedPO.add_model_specific_args": [[329, 334], ["parent_parser.add_argument_group", "parent_parser.add_argument_group.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "\n", "        ", "parser", "=", "parent_parser", ".", "add_argument_group", "(", "\"SemanticPO\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "return", "parent_parser", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CombinedPO.training_step": [[334, 344], ["PO_model_matching.CombinedPO.squeeze", "torch.nn.MSELoss", "torch.nn.MSELoss", "PO_model_matching.CombinedPO.log", "PO_model_matching.CombinedPO.growpool_fn", "PO_model_matching.CombinedPO.", "len", "PO_model_matching.CombinedPO.loss_fn", "torch.nn.MSELoss.", "numpy.random.random"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "sol", ",", "m", "=", "batch", "\n", "y_hat", "=", "self", "(", "x", ")", ".", "squeeze", "(", ")", "\n", "if", "(", "np", ".", "random", ".", "random", "(", "1", ")", "[", "0", "]", "<", "self", ".", "growth", ")", "or", "len", "(", "self", ".", "cache", ")", "==", "0", ":", "\n", "            ", "self", ".", "cache", "=", "self", ".", "growpool_fn", "(", "self", ".", "cache", ",", "y_hat", ",", "m", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'mean'", ")", "\n", "loss", "=", "self", ".", "alpha", "*", "self", ".", "loss_fn", "(", "y_hat", ",", "y", ",", "sol", ",", "self", ".", "cache", ",", "tau", "=", "self", ".", "tau", ")", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "criterion", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__init__": [[346, 359], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "range", "PO_model_matching.batch_solve", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "tqdm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ",", "M", ",", "param", "=", "{", "'p'", ":", "0.25", ",", "'q'", ":", "0.25", "}", ",", "relaxation", "=", "False", ",", "sols", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "        ", "if", "sols", "is", "not", "None", ":", "\n", "            ", "self", ".", "sols", "=", "sols", "\n", "", "else", ":", "\n", "            ", "y_iter", "=", "range", "(", "len", "(", "y", ")", ")", "\n", "it", "=", "tqdm", "(", "y_iter", ")", "if", "verbose", "else", "y_iter", "\n", "self", ".", "sols", "=", "batch_solve", "(", "param", ",", "y", ",", "M", ",", "relaxation", "=", "False", ")", "\n", "self", ".", "sols", "=", "torch", ".", "from_numpy", "(", "self", ".", "sols", ")", ".", "float", "(", ")", "\n", "\n", "", "self", ".", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", "\n", "self", ".", "y", "=", "torch", ".", "from_numpy", "(", "y", ")", ".", "float", "(", ")", "\n", "self", ".", "m", "=", "torch", ".", "from_numpy", "(", "M", ")", ".", "float", "(", ")", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__len__": [[359, 361], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.CoraDataset.__getitem__": [[362, 364], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "x", "[", "index", "]", ",", "self", ".", "y", "[", "index", "]", ",", "self", ".", "sols", "[", "index", "]", ",", "self", ".", "m", "[", "index", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.make_cora_net": [[12, 34], ["torch.nn.Sequential", "layers.append", "range", "layers.append", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sequential", "layers.append", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.ReLU"], "function", ["None"], ["def", "make_cora_net", "(", "n_features", "=", "2866", ",", "n_hidden", "=", "200", ",", "n_layers", "=", "2", ",", "n_targets", "=", "1", ")", ":", "\n", "    ", "if", "n_layers", "==", "1", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_features", ",", "n_targets", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "# input layer", "\n", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_features", ",", "n_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", ")", "\n", "# hidden layers", "\n", "for", "_", "in", "range", "(", "n_layers", "-", "2", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_hidden", ",", "n_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", ")", "\n", "# output layer", "\n", "", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_hidden", ",", "n_targets", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve": [[42, 48], ["range", "numpy.array", "len", "sol.append", "solver"], "function", ["None"], ["def", "batch_solve", "(", "param", ",", "y", ",", "m", ",", "relaxation", "=", "False", ")", ":", "\n", "\n", "    ", "sol", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "sol", ".", "append", "(", "solver", "(", "y", "[", "i", "]", ",", "m", "[", "i", "]", ",", "relaxation", "=", "relaxation", ",", "**", "param", ")", ")", "\n", "", "return", "np", ".", "array", "(", "sol", ")", "\n", "", "def", "regret_fn", "(", "y_hat", ",", "y", ",", "sol_true", ",", "m", ",", "param", ",", "minimize", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.regret_fn": [[48, 52], ["torch.from_numpy", "torch.from_numpy", "PO_model_matching.batch_solve", "y_hat.detach().numpy", "m.numpy", "y_hat.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "regret_fn", "(", "y_hat", ",", "y", ",", "sol_true", ",", "m", ",", "param", ",", "minimize", "=", "False", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "sol_hat", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_hat", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "m", ".", "numpy", "(", ")", ")", ")", "\n", "return", "(", "(", "mm", "*", "(", "sol_hat", "-", "sol_true", ")", "*", "y", ")", ".", "sum", "(", "1", ")", "/", "(", "sol_true", "*", "y", ")", ".", "sum", "(", "1", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.regret_aslist": [[53, 57], ["torch.from_numpy", "torch.from_numpy", "PO_model_matching.batch_solve", "y_hat.detach().numpy", "m.numpy", "y_hat.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "regret_aslist", "(", "y_hat", ",", "y", ",", "sol_true", ",", "m", ",", "param", ",", "minimize", "=", "False", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "sol_hat", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_hat", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "m", ".", "numpy", "(", ")", ")", ")", "\n", "return", "(", "(", "mm", "*", "(", "sol_hat", "-", "sol_true", ")", "*", "y", ")", ".", "sum", "(", "1", ")", "/", "(", "sol_true", "*", "y", ")", ".", "sum", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.spograd": [[108, 125], ["ctx.save_for_backward", "torch.from_numpy", "torch.from_numpy", "PO_model_matching.batch_solve", "y_spo.detach().numpy", "m.numpy", "y_spo.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "", "def", "spograd", "(", "y", ",", "sol", ",", "m", ",", "param", ",", "minimize", "=", "False", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "class", "spograd_cls", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "y_hat", ")", ":", "\n", "\n", "            ", "ctx", ".", "save_for_backward", "(", "y_hat", ")", "\n", "return", "mm", "*", "(", "(", "y_hat", "-", "y", ")", "*", "sol", ")", ".", "sum", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "y_hat", ",", "=", "ctx", ".", "saved_tensors", "\n", "y_spo", "=", "2", "*", "y_hat", "-", "y", "\n", "sol_spo", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_spo", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "m", ".", "numpy", "(", ")", ")", ")", "\n", "return", "(", "sol", "-", "sol_spo", ")", "*", "mm", "\n", "", "", "return", "spograd_cls", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.bbgrad": [[126, 144], ["ctx.save_for_backward", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PO_model_matching.batch_solve", "PO_model_matching.batch_solve", "y_hat.detach().numpy", "m.numpy", "y_perturbed.detach().numpy", "m.numpy", "y_hat.detach", "y_perturbed.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve", "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "bbgrad", "(", "y", ",", "sol", ",", "m", ",", "param", ",", "mu", ",", "minimize", "=", "True", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "class", "bbgrad_cls", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "y_hat", ")", ":", "\n", "            ", "y_perturbed", "=", "(", "y_hat", "+", "mu", "*", "y", ")", "\n", "\n", "ctx", ".", "save_for_backward", "(", "y_hat", ",", "y_perturbed", ")", "\n", "return", "mm", "*", "(", "(", "y_hat", "-", "y", ")", "*", "sol", ")", ".", "sum", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "y_hat", ",", "y_perturbed", "=", "ctx", ".", "saved_tensors", "\n", "sol_hat", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_hat", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "m", ".", "numpy", "(", ")", ")", ")", "\n", "sol_perturbed", "=", "torch", ".", "from_numpy", "(", "batch_solve", "(", "param", ",", "y_perturbed", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "m", ".", "numpy", "(", ")", ")", ")", "\n", "return", "-", "mm", "*", "(", "sol_hat", "-", "sol_perturbed", ")", "/", "mu", "\n", "", "", "return", "bbgrad_cls", ".", "apply", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP": [[170, 181], ["range", "len", "torch.max", "torch.max"], "function", ["None"], ["", "", "def", "MAP", "(", "sol", ",", "y", ",", "cache", ",", "minimize", "=", "False", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "# print(\"shape check\", sol.shape, y.shape,y_hat.shape, cache.shape)", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "loss", "+=", "torch", ".", "max", "(", "(", "(", "sol", "[", "ii", "]", "-", "cache", ")", "*", "(", "mm", "*", "y", "[", "ii", "]", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "", "return", "loss", "\n", "", "def", "MAP_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP_c": [[181, 184], ["PO_model_matching.MAP"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP"], ["", "def", "MAP_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "y", "=", "y_hat", "\n", "return", "MAP", "(", "sol", ",", "y", ",", "cache", ")", "\n", "", "def", "MAP_hatc_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP_hatc_c": [[184, 187], ["PO_model_matching.MAP"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.MAP"], ["", "def", "MAP_hatc_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "y", "=", "y_hat", "-", "y_true", "\n", "return", "MAP", "(", "sol", ",", "y", ",", "cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE": [[188, 199], ["range", "len", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "NCE", "(", "sol", ",", "y", ",", "cache", ",", "minimize", "=", "False", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "# print(\"shape check\", sol.shape, y.shape,y_hat.shape, cache.shape)", "\n", "for", "ii", "in", "range", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "loss", "+=", "torch", ".", "mean", "(", "(", "(", "sol", "[", "ii", "]", "-", "cache", ")", "*", "(", "mm", "*", "y", "[", "ii", "]", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "", "return", "loss", "\n", "", "def", "NCE_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE_c": [[199, 202], ["PO_model_matching.NCE"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE"], ["", "def", "NCE_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "y", "=", "y_hat", "\n", "return", "NCE", "(", "sol", ",", "y", ",", "cache", ")", "\n", "", "def", "NCE_hatc_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE_hatc_c": [[202, 205], ["PO_model_matching.NCE"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.NCE"], ["", "def", "NCE_hatc_c", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "y", "=", "y_hat", "-", "y_true", "\n", "return", "NCE", "(", "sol", ",", "y", ",", "cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.pointwise_loss": [[209, 218], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cache.transpose", "cache.transpose"], "function", ["None"], ["", "def", "pointwise_loss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    f(y_hat,s) is regresson on f(y,s)\n    '''", "\n", "loss", "=", "(", "torch", ".", "matmul", "(", "y_hat", ",", "cache", ".", "transpose", "(", "0", ",", "1", ")", ")", "-", "torch", ".", "matmul", "(", "y_true", ",", "cache", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.pairwise_loss": [[219, 244], ["torch.nn.ReLU", "range", "len", "numpy.unique", "nn.ReLU.mean", "nn.ReLU.", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "pairwise_loss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "tau", "=", "0", ",", "minimize", "=", "False", ",", "mode", "=", "'B'", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "        ", "_", ",", "indices", "=", "np", ".", "unique", "(", "(", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "return_index", "=", "True", ")", "\n", "## return indices after sorting the array in ascending order", "\n", "if", "mode", "==", "'B'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "0", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'W'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "-", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'S'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "\n", "\n", "", "loss", "+=", "relu", "(", "tau", "+", "mm", "*", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_hat", "[", "ii", "]", ")", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.pairwise_diffloss": [[245, 269], ["range", "len", "numpy.unique", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "pairwise_diffloss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "minimize", "=", "False", ",", "mode", "=", "'B'", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "'''\n    sol, y and y_hat are torch array [batch_size,48]\n    cache is torch array [currentpoolsize,48]\n    '''", "\n", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "        ", "_", ",", "indices", "=", "np", ".", "unique", "(", "(", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "return_index", "=", "True", ")", "\n", "## return indices after sorting the array in ascending order", "\n", "if", "mode", "==", "'B'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "0", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'W'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "-", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "", "if", "mode", "==", "'S'", ":", "\n", "            ", "big_ind", "=", "[", "indices", "[", "p", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#good one", "\n", "small_ind", "=", "[", "indices", "[", "p", "+", "1", "]", "for", "p", "in", "range", "(", "len", "(", "indices", ")", "-", "1", ")", "]", "#bad one", "\n", "\n", "", "loss", "+=", "(", "mm", "*", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_hat", "[", "ii", "]", ")", "\n", "-", "(", "torch", ".", "matmul", "(", "cache", "[", "big_ind", "]", ",", "y_true", "[", "ii", "]", ")", "-", "torch", ".", "matmul", "(", "cache", "[", "small_ind", "]", ",", "y_true", "[", "ii", "]", ")", ")", ")", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.Listnet_loss": [[271, 278], ["range", "len", "torch.log_softmax", "torch.softmax"], "function", ["None"], ["", "def", "Listnet_loss", "(", "y_hat", ",", "y_true", ",", "sol", ",", "cache", ",", "tau", "=", "1.", ",", "minimize", "=", "False", ",", "*", "wd", ",", "**", "kwd", ")", ":", "\n", "    ", "mm", "=", "1", "if", "minimize", "else", "-", "1", "\n", "loss", "=", "0", "\n", "for", "ii", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "         ", "loss", "+=", "-", "(", "F", ".", "log_softmax", "(", "(", "-", "mm", "*", "y_hat", "[", "ii", "]", "*", "cache", "/", "tau", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "\n", "dim", "=", "0", ")", "*", "F", ".", "softmax", "(", "(", "-", "mm", "*", "y_true", "[", "ii", "]", "*", "cache", "/", "tau", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", ")", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "### function to grow the cache", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.growcache": [[279, 289], ["PO_model_matching.batch_solve", "cache.detach().numpy", "numpy.unique", "torch.from_numpy().float", "torch.from_numpy().float", "y_hat.detach().numpy", "m.numpy", "numpy.append", "cache.detach", "torch.from_numpy", "torch.from_numpy", "y_hat.detach"], "function", ["home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.PO_model_matching.batch_solve"], ["", "def", "growcache", "(", "cache", ",", "y_hat", ",", "m", ",", "param", ")", ":", "\n", "    ", "'''\n    cache is torch array [currentpoolsize,48]\n    y_hat is  torch array [batch_size,48]\n    '''", "\n", "sol", "=", "batch_solve", "(", "param", ",", "y_hat", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "m", ".", "numpy", "(", ")", ",", "relaxation", "=", "False", ")", "\n", "cache_np", "=", "cache", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "cache_np", "=", "np", ".", "unique", "(", "np", ".", "append", "(", "cache_np", ",", "sol", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "# torch has no unique function, so we have to do this", "\n", "return", "torch", ".", "from_numpy", "(", "cache_np", ")", ".", "float", "(", ")", "\n", "", "class", "CachingPO", "(", "twostage_regression", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_twostage.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/Twostage_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_spo.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/SPO_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_bb.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/Blackbox_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.test_matching_Listwise.seed_all": [[12, 20], ["print", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "np.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"[ Using Seed : \"", ",", "seed", ",", "\" ]\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "", "outputfile", "=", "\"Rslt/Listwise_{}_rslt.csv\"", ".", "format", "(", "exp", ")", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.bipartite.linearobj": [[12, 14], ["None"], "function", ["None"], ["def", "linearobj", "(", "x", ",", "v", ",", "**", "params", ")", ":", "\n", "    ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.bipartite.bmatching": [[15, 29], ["ortools.graph.pywrapgraph.LinearSumAssignment", "len", "len", "range", "pywrapgraph.LinearSumAssignment.Solve", "numpy.zeros", "range", "np.zeros.reshape", "range", "pywrapgraph.LinearSumAssignment.NumNodes", "pywrapgraph.LinearSumAssignment.RightMate", "preds.reshape", "pywrapgraph.LinearSumAssignment.AddArcWithCost", "int"], "function", ["None"], ["", "def", "bmatching", "(", "preds", ",", "mult", "=", "1000", ",", "**", "kwargs", ")", ":", "\n", "    ", "assignment", "=", "pywrapgraph", ".", "LinearSumAssignment", "(", ")", "\n", "cost", "=", "-", "preds", ".", "reshape", "(", "50", ",", "50", ")", "*", "mult", "\n", "n1", "=", "len", "(", "cost", ")", "\n", "n2", "=", "len", "(", "cost", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "n1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n2", ")", ":", "\n", "          ", "assignment", ".", "AddArcWithCost", "(", "i", ",", "j", ",", "int", "(", "cost", "[", "i", ",", "j", "]", ")", ")", "\n", "", "", "solve_status", "=", "assignment", ".", "Solve", "(", ")", "\n", "solution", "=", "np", ".", "zeros", "(", "(", "50", ",", "50", ")", ")", "\n", "for", "i", "in", "range", "(", "assignment", ".", "NumNodes", "(", ")", ")", ":", "\n", "        ", "mate", "=", "assignment", ".", "RightMate", "(", "i", ")", "\n", "solution", "[", "i", ",", "mate", "]", "=", "1", "\n", "", "return", "solution", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.bipartite.bmatching_diverse": [[32, 82], ["solver.Clear", "match_subs.reshape", "len", "len", "range", "range", "range", "range", "solver.Add", "range", "solver.Add", "range", "solver.Minimize", "solver.Solve", "numpy.zeros", "np.zeros.reshape", "range", "solver.Add", "solver.Add", "range", "range", "range", "solver.Sum", "range", "preds.reshape", "pairing_same.append", "allvars.append", "solver.Sum", "pairing_dis.append", "solver.Sum", "obj.append", "range", "solver.NumVar", "solver.IntVar", "solver.Sum", "solver.Sum", "solver.Sum", "solver.Sum", "x[].solution_value", "range", "range"], "function", ["None"], ["def", "bmatching_diverse", "(", "preds", ",", "match_subs", ",", "p", "=", "0.25", ",", "q", "=", "0.25", ",", "relaxation", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "solver", ".", "Clear", "(", ")", "\n", "mult", "=", "1000", "\n", "cost", "=", "-", "preds", ".", "reshape", "(", "50", ",", "50", ")", "*", "mult", "\n", "m", "=", "match_subs", ".", "reshape", "(", "50", ",", "50", ")", "\n", "n1", "=", "len", "(", "cost", ")", "\n", "n2", "=", "len", "(", "cost", "[", "0", "]", ")", "\n", "x", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "n1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n2", ")", ":", "\n", "            ", "x", "[", "i", ",", "j", "]", "=", "solver", ".", "NumVar", "(", "0", ",", "1", ",", "''", ")", "if", "relaxation", "else", "solver", ".", "IntVar", "(", "0", ",", "1", ",", "''", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "n1", ")", ":", "\n", "        ", "solver", ".", "Add", "(", "solver", ".", "Sum", "(", "[", "x", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "n2", ")", "]", ")", "<=", "1", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "n2", ")", ":", "\n", "        ", "solver", ".", "Add", "(", "solver", ".", "Sum", "(", "[", "x", "[", "i", ",", "j", "]", "for", "i", "in", "range", "(", "n1", ")", "]", ")", "<=", "1", ")", "\n", "\n", "# pairing in same field", "\n", "", "pairing_same", "=", "[", "]", "\n", "allvars", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n2", ")", ":", "\n", "            ", "pairing_same", ".", "append", "(", "x", "[", "i", ",", "j", "]", "*", "m", "[", "i", ",", "j", "]", ")", "\n", "allvars", ".", "append", "(", "x", "[", "i", ",", "j", "]", ")", "\n", "", "", "solver", ".", "Add", "(", "solver", ".", "Sum", "(", "pairing_same", ")", ">=", "p", "*", "solver", ".", "Sum", "(", "allvars", ")", ")", "\n", "\n", "# pairing in distinct field", "\n", "pairing_dis", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n2", ")", ":", "\n", "            ", "pairing_dis", ".", "append", "(", "x", "[", "i", ",", "j", "]", "*", "(", "1", "-", "m", "[", "i", ",", "j", "]", ")", ")", "\n", "", "", "solver", ".", "Add", "(", "solver", ".", "Sum", "(", "pairing_dis", ")", ">=", "q", "*", "solver", ".", "Sum", "(", "allvars", ")", ")", "\n", "\n", "obj", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n2", ")", ":", "\n", "            ", "obj", ".", "append", "(", "cost", "[", "i", ",", "j", "]", "*", "x", "[", "i", ",", "j", "]", ")", "\n", "", "", "solver", ".", "Minimize", "(", "solver", ".", "Sum", "(", "obj", ")", ")", "\n", "\n", "status", "=", "solver", ".", "Solve", "(", ")", "\n", "solution", "=", "np", ".", "zeros", "(", "(", "50", ",", "50", ")", ")", "\n", "\n", "if", "status", "==", "pywraplp", ".", "Solver", ".", "OPTIMAL", ":", "\n", "        ", "for", "i", "in", "range", "(", "n1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n2", ")", ":", "\n", "                ", "solution", "[", "i", ",", "j", "]", "=", "x", "[", "i", ",", "j", "]", ".", "solution_value", "(", ")", "\n", "#solver.Clear()", "\n", "", "", "", "return", "solution", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.bipartite.get_qpt_matrices": [[83, 113], ["numpy.zeros", "numpy.zeros_like", "numpy.ones", "numpy.ones_like", "range", "numpy.zeros", "numpy.zeros_like", "numpy.vstack", "numpy.concatenate", "numpy.zeros", "numpy.zeros_like", "np.zeros.flatten", "np.zeros_like.flatten"], "function", ["None"], ["", "def", "get_qpt_matrices", "(", "match_subs", ",", "p", "=", "0.25", ",", "q", "=", "0.25", ",", "**", "kwargs", ")", ":", "\n", "# we only have G * x <= h", "\n", "\n", "# Matching", "\n", "    ", "N1", "=", "np", ".", "zeros", "(", "(", "50", ",", "2500", ")", ")", "\n", "N2", "=", "np", ".", "zeros_like", "(", "N1", ")", "\n", "b1", "=", "np", ".", "ones", "(", "50", ")", "\n", "b2", "=", "np", ".", "ones_like", "(", "b1", ")", "\n", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "rowmask", "=", "np", ".", "zeros", "(", "(", "50", ",", "50", ")", ")", "\n", "colmask", "=", "np", ".", "zeros_like", "(", "rowmask", ")", "\n", "rowmask", "[", "i", ",", ":", "]", "=", "1", "\n", "colmask", "[", ":", ",", "i", "]", "=", "1", "\n", "N1", "[", "i", "]", "=", "rowmask", ".", "flatten", "(", ")", "\n", "N2", "[", "i", "]", "=", "colmask", ".", "flatten", "(", ")", "\n", "\n", "# Similarity constraint", "\n", "", "Sim", "=", "p", "-", "match_subs", "\n", "bsim", "=", "np", ".", "zeros", "(", "1", ")", "\n", "\n", "# Diversity constraint ", "\n", "Div", "=", "q", "-", "1", "+", "match_subs", "\n", "bdiv", "=", "np", ".", "zeros_like", "(", "bsim", ")", "\n", "\n", "G", "=", "np", ".", "vstack", "(", "(", "N1", ",", "N2", ",", "Sim", ",", "Div", ")", ")", "\n", "h", "=", "np", ".", "concatenate", "(", "(", "b1", ",", "b2", ",", "bsim", ",", "bdiv", ")", ")", "\n", "A", "=", "None", "\n", "b", "=", "None", "\n", "return", "A", ",", "b", ",", "G", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jayman91_ltr-predopt.BipartiteMatchingExperiment.bipartite.get_cora": [[117, 125], ["open", "pickle.load"], "function", ["None"], ["", "def", "get_cora", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get X,y\n    \"\"\"", "\n", "# ", "\n", "with", "open", "(", "'data/cora_data.pickle'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "gt", ",", "ft", ",", "M", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "ft", ",", "gt", ",", "M", "\n", "\n"]]}