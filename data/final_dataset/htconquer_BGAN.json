{"home.repos.pwc.inspect_result.htconquer_BGAN.None.deconv.deconv2d.__call__": [[29, 129], ["deconv._kernel", "deconv._stride", "deconv.deconv2d.variable", "deconv.get2d_deconv_output_size", "tensorflow.nn.conv2d_transpose", "prettytensor.pretty_tensor_class.layers.add_l2loss", "books.add_scalar_summary", "input_layer.with_tensor", "len", "ValueError", "ValueError", "deconv.deconv2d.variable", "tensorflow.reduce_mean", "input_layer.with_tensor().batch_normalize", "prettytensor.pretty_tensor_class.layers.apply_activation", "prettytensor.pretty_tensor_class.layers.xavier_init", "ValueError", "tensorflow.zeros_initializer", "prettytensor.pretty_tensor_class.layers.spatial_slice_zeros", "isinstance", "tensorflow.truncated_normal_initializer", "input_layer.with_tensor"], "methods", ["home.repos.pwc.inspect_result.htconquer_BGAN.None.deconv._kernel", "home.repos.pwc.inspect_result.htconquer_BGAN.None.deconv._stride", "home.repos.pwc.inspect_result.htconquer_BGAN.None.deconv.get2d_deconv_output_size"], ["  ", "def", "__call__", "(", "self", ",", "\n", "input_layer", ",", "\n", "kernel", ",", "\n", "depth", ",", "\n", "name", "=", "PROVIDED", ",", "\n", "stride", "=", "None", ",", "\n", "activation_fn", "=", "None", ",", "\n", "l2loss", "=", "None", ",", "\n", "init", "=", "None", ",", "\n", "stddev", "=", "None", ",", "\n", "bias", "=", "True", ",", "\n", "edges", "=", "PAD_SAME", ",", "\n", "batch_normalize", "=", "False", ")", ":", "\n", "    ", "\"\"\"Adds a convolution to the stack of operations.\n    The current head must be a rank 4 Tensor.\n    Args:\n      input_layer: The chainable object, supplied.\n      kernel: The size of the patch for the pool, either an int or a length 1 or\n        2 sequence (if length 1 or int, it is expanded).\n      depth: The depth of the new Tensor.\n      name: The name for this operation is also used to create/find the\n        parameter variables.\n      stride: The strides as a length 1, 2 or 4 sequence or an integer. If an\n        int, length 1 or 2, the stride in the first and last dimensions are 1.\n      activation_fn: A tuple of (activation_function, extra_parameters). Any\n        function that takes a tensor as its first argument can be used. More\n        common functions will have summaries added (e.g. relu).\n      l2loss: Set to a value greater than 0 to use L2 regularization to decay\n        the weights.\n      init: An optional initialization. If not specified, uses Xavier\n        initialization.\n      stddev: A standard deviation to use in parameter initialization.\n      bias: Set to False to not have a bias.\n      edges: Either SAME to use 0s for the out of bounds area or VALID to shrink\n        the output size and only uses valid input pixels.\n      batch_normalize: Set to True to batch_normalize this layer.\n    Returns:\n      Handle to the generated layer.\n    Raises:\n      ValueError: If head is not a rank 4 tensor or the  depth of the input\n        (4th dim) is not known.\n    \"\"\"", "\n", "if", "len", "(", "input_layer", ".", "shape", ")", "!=", "4", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Cannot perform conv2d on tensor with shape %s'", "%", "input_layer", ".", "shape", ")", "\n", "", "if", "input_layer", ".", "shape", "[", "3", "]", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Input depth must be known'", ")", "\n", "", "kernel", "=", "_kernel", "(", "kernel", ")", "\n", "stride", "=", "_stride", "(", "stride", ")", "\n", "size", "=", "[", "kernel", "[", "0", "]", ",", "kernel", "[", "1", "]", ",", "depth", ",", "input_layer", ".", "shape", "[", "3", "]", "]", "\n", "\n", "books", "=", "input_layer", ".", "bookkeeper", "\n", "if", "init", "is", "None", ":", "\n", "      ", "if", "stddev", "is", "None", ":", "\n", "        ", "patch_size", "=", "size", "[", "0", "]", "*", "size", "[", "1", "]", "\n", "init", "=", "layers", ".", "xavier_init", "(", "size", "[", "2", "]", "*", "patch_size", ",", "size", "[", "3", "]", "*", "patch_size", ")", "\n", "", "elif", "stddev", ":", "\n", "        ", "init", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "else", ":", "\n", "        ", "init", "=", "tf", ".", "zeros_initializer", "\n", "", "", "elif", "stddev", "is", "not", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'Do not set both init and stddev.'", ")", "\n", "", "dtype", "=", "input_layer", ".", "tensor", ".", "dtype", "\n", "params", "=", "self", ".", "variable", "(", "'weights'", ",", "size", ",", "init", ",", "dt", "=", "dtype", ")", "\n", "\n", "input_height", "=", "input_layer", ".", "shape", "[", "1", "]", "\n", "input_width", "=", "input_layer", ".", "shape", "[", "2", "]", "\n", "\n", "filter_height", "=", "kernel", "[", "0", "]", "\n", "filter_width", "=", "kernel", "[", "1", "]", "\n", "\n", "row_stride", "=", "stride", "[", "1", "]", "\n", "col_stride", "=", "stride", "[", "2", "]", "\n", "\n", "out_rows", ",", "out_cols", "=", "get2d_deconv_output_size", "(", "input_height", ",", "input_width", ",", "filter_height", ",", "\n", "filter_width", ",", "row_stride", ",", "col_stride", ",", "edges", ")", "\n", "\n", "output_shape", "=", "[", "input_layer", ".", "shape", "[", "0", "]", ",", "out_rows", ",", "out_cols", ",", "depth", "]", "\n", "y", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "input_layer", ",", "params", ",", "output_shape", ",", "stride", ",", "edges", ")", "\n", "layers", ".", "add_l2loss", "(", "books", ",", "params", ",", "l2loss", ")", "\n", "if", "bias", ":", "\n", "      ", "y", "+=", "self", ".", "variable", "(", "\n", "'bias'", ",", "\n", "[", "size", "[", "-", "2", "]", "]", ",", "\n", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "dt", "=", "dtype", ")", "\n", "", "books", ".", "add_scalar_summary", "(", "\n", "tf", ".", "reduce_mean", "(", "\n", "layers", ".", "spatial_slice_zeros", "(", "y", ")", ")", ",", "'%s/zeros_spatial'", "%", "y", ".", "op", ".", "name", ")", "\n", "if", "batch_normalize", ":", "\n", "      ", "y", "=", "input_layer", ".", "with_tensor", "(", "y", ")", ".", "batch_normalize", "(", ")", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "if", "not", "isinstance", "(", "activation_fn", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "activation_fn", "=", "(", "activation_fn", ",", ")", "\n", "", "y", "=", "layers", ".", "apply_activation", "(", "\n", "books", ",", "\n", "y", ",", "\n", "activation_fn", "[", "0", "]", ",", "\n", "activation_args", "=", "activation_fn", "[", "1", ":", "]", ")", "\n", "", "return", "input_layer", ".", "with_tensor", "(", "y", ")", "\n", "# pylint: enable=redefined-outer-name,invalid-name", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.deconv.get2d_deconv_output_size": [[133, 162], ["tensorflow.python.framework.tensor_shape.as_dimension", "tensorflow.python.framework.tensor_shape.as_dimension", "tensorflow.python.framework.tensor_shape.as_dimension", "tensorflow.python.framework.tensor_shape.as_dimension", "int", "int", "ValueError"], "function", ["None"], ["", "", "def", "get2d_deconv_output_size", "(", "input_height", ",", "input_width", ",", "filter_height", ",", "\n", "filter_width", ",", "row_stride", ",", "col_stride", ",", "padding_type", ")", ":", "\n", "    ", "\"\"\"Returns the number of rows and columns in a convolution/pooling output.\"\"\"", "\n", "input_height", "=", "tensor_shape", ".", "as_dimension", "(", "input_height", ")", "\n", "input_width", "=", "tensor_shape", ".", "as_dimension", "(", "input_width", ")", "\n", "filter_height", "=", "tensor_shape", ".", "as_dimension", "(", "filter_height", ")", "\n", "filter_width", "=", "tensor_shape", ".", "as_dimension", "(", "filter_width", ")", "\n", "row_stride", "=", "int", "(", "row_stride", ")", "\n", "col_stride", "=", "int", "(", "col_stride", ")", "\n", "\n", "# Compute number of rows in the output, based on the padding.", "\n", "if", "input_height", ".", "value", "is", "None", "or", "filter_height", ".", "value", "is", "None", ":", "\n", "      ", "out_rows", "=", "None", "\n", "", "elif", "padding_type", "==", "\"VALID\"", ":", "\n", "      ", "out_rows", "=", "(", "input_height", ".", "value", "-", "1", ")", "*", "row_stride", "+", "filter_height", ".", "value", "\n", "", "elif", "padding_type", "==", "\"SAME\"", ":", "\n", "      ", "out_rows", "=", "input_height", ".", "value", "*", "row_stride", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Invalid value for padding: %r\"", "%", "padding_type", ")", "\n", "\n", "# Compute number of columns in the output, based on the padding.", "\n", "", "if", "input_width", ".", "value", "is", "None", "or", "filter_width", ".", "value", "is", "None", ":", "\n", "      ", "out_cols", "=", "None", "\n", "", "elif", "padding_type", "==", "\"VALID\"", ":", "\n", "      ", "out_cols", "=", "(", "input_width", ".", "value", "-", "1", ")", "*", "col_stride", "+", "filter_width", ".", "value", "\n", "", "elif", "padding_type", "==", "\"SAME\"", ":", "\n", "      ", "out_cols", "=", "input_width", ".", "value", "*", "col_stride", "\n", "\n", "", "return", "out_rows", ",", "out_cols", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.deconv._kernel": [[163, 178], ["isinstance", "len", "len"], "function", ["None"], ["", "def", "_kernel", "(", "kernel_spec", ")", ":", "\n", "  ", "\"\"\"Expands the kernel spec into a length 2 list.\n  Args:\n    kernel_spec: An integer or a length 1 or 2 sequence that is expanded to a\n      list.\n  Returns:\n    A length 2 list.\n  \"\"\"", "\n", "if", "isinstance", "(", "kernel_spec", ",", "int", ")", ":", "\n", "    ", "return", "[", "kernel_spec", ",", "kernel_spec", "]", "\n", "", "elif", "len", "(", "kernel_spec", ")", "==", "1", ":", "\n", "    ", "return", "[", "kernel_spec", "[", "0", "]", ",", "kernel_spec", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "    ", "assert", "len", "(", "kernel_spec", ")", "==", "2", "\n", "return", "kernel_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.deconv._stride": [[180, 198], ["isinstance", "len", "len", "len"], "function", ["None"], ["", "", "def", "_stride", "(", "stride_spec", ")", ":", "\n", "  ", "\"\"\"Expands the stride spec into a length 4 list.\n  Args:\n    stride_spec: None, an integer or a length 1, 2, or 4 sequence.\n  Returns:\n    A length 4 list.\n  \"\"\"", "\n", "if", "stride_spec", "is", "None", ":", "\n", "    ", "return", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "", "elif", "isinstance", "(", "stride_spec", ",", "int", ")", ":", "\n", "    ", "return", "[", "1", ",", "stride_spec", ",", "stride_spec", ",", "1", "]", "\n", "", "elif", "len", "(", "stride_spec", ")", "==", "1", ":", "\n", "    ", "return", "[", "1", ",", "stride_spec", "[", "0", "]", ",", "stride_spec", "[", "0", "]", ",", "1", "]", "\n", "", "elif", "len", "(", "stride_spec", ")", "==", "2", ":", "\n", "    ", "return", "[", "1", ",", "stride_spec", "[", "0", "]", ",", "stride_spec", "[", "1", "]", ",", "1", "]", "\n", "", "else", ":", "\n", "    ", "assert", "len", "(", "stride_spec", ")", "==", "4", "\n", "return", "stride_spec", "\n", "", "", ""]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__init__": [[31, 33], ["utils.Opt.__dict__.update"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__setitem__": [[34, 36], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__getitem__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__delitem__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__delitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "del", "self", ".", "__dict__", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__getattr__": [[44, 46], ["None"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__iter__": [[47, 49], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__len__": [[50, 52], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__str__": [[53, 55], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__repr__": [[56, 58], ["utils.Opt.__dict__.__repr__"], "methods", ["home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__add__": [[59, 79], ["utils.Opt", "six.iteritems"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "r\"\"\"Overloads `+` operator.\n        \n        It does NOT overwrite the existing item.\n        \n        For example,\n        \n        ```python\n        import sugartensor as tf\n\n        opt = tf.sg_opt(size=1)\n        opt += tf.sg_opt(size=2)\n        print(opt) # Should be {'size': 1}\n        ```\n        \"\"\"", "\n", "res", "=", "Opt", "(", "self", ".", "__dict__", ")", "\n", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "other", ")", ":", "\n", "            ", "if", "k", "not", "in", "res", ".", "__dict__", "or", "res", ".", "__dict__", "[", "k", "]", "is", "None", ":", "\n", "                ", "res", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.Opt.__mul__": [[80, 99], ["utils.Opt", "six.iteritems"], "methods", ["None"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "r\"\"\"Overloads `*` operator.\n        \n        It overwrites the existing item.\n        \n        For example,\n        \n        ```python\n        import sugartensor as tf\n\n        opt = tf.sg_opt(size=1)\n        opt *= tf.sg_opt(size=2)\n        print(opt) # Should be {'size': 2}\n        ```\n        \"\"\"", "\n", "res", "=", "Opt", "(", "self", ".", "__dict__", ")", "\n", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "other", ")", ":", "\n", "            ", "res", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.load_image": [[9, 23], ["skimage.io.imread", "skimage.io.imread", "skimage.io.imread", "min", "int", "int", "skimage.transform.resize", "skimage.transform.resize", "skimage.transform.resize"], "function", ["None"], ["def", "load_image", "(", "path", ")", ":", "\n", "# load image", "\n", "    ", "img", "=", "skimage", ".", "io", ".", "imread", "(", "path", ")", "\n", "img", "=", "img", "/", "255.0", "\n", "assert", "(", "0", "<=", "img", ")", ".", "all", "(", ")", "and", "(", "img", "<=", "1.0", ")", ".", "all", "(", ")", "\n", "# print \"Original Image Shape: \", img.shape", "\n", "# we crop image from center", "\n", "short_edge", "=", "min", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "yy", "=", "int", "(", "(", "img", ".", "shape", "[", "0", "]", "-", "short_edge", ")", "/", "2", ")", "\n", "xx", "=", "int", "(", "(", "img", ".", "shape", "[", "1", "]", "-", "short_edge", ")", "/", "2", ")", "\n", "crop_img", "=", "img", "[", "yy", ":", "yy", "+", "short_edge", ",", "xx", ":", "xx", "+", "short_edge", "]", "\n", "# resize to 224, 224", "\n", "resized_img", "=", "skimage", ".", "transform", ".", "resize", "(", "crop_img", ",", "(", "224", ",", "224", ")", ")", "\n", "return", "resized_img", "\n", "\n"]], "home.repos.pwc.inspect_result.htconquer_BGAN.None.utils.data_to_tensor": [[101, 121], ["tensorflow.train.slice_input_producer", "tensorflow.train.shuffle_batch", "tensorflow.constant"], "function", ["None"], ["", "", "def", "data_to_tensor", "(", "data_list", ",", "batch_size", ",", "name", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Returns batch queues from the whole data. \n    \n    Args:\n      data_list: A list of ndarrays. Every array must have the same size in the first dimension.\n      batch_size: An integer.\n      name: A name for the operations (optional).\n      \n    Returns:\n      A list of tensors of `batch_size`.\n    \"\"\"", "\n", "# convert to constant tensor", "\n", "const_list", "=", "[", "tf", ".", "constant", "(", "data", ")", "for", "data", "in", "data_list", "]", "\n", "\n", "# create queue from constant tensor", "\n", "queue_list", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "const_list", ",", "capacity", "=", "batch_size", "*", "128", ",", "name", "=", "name", ")", "\n", "\n", "# create batch queue", "\n", "return", "tf", ".", "train", ".", "shuffle_batch", "(", "queue_list", ",", "batch_size", ",", "capacity", "=", "batch_size", "*", "128", ",", "\n", "min_after_dequeue", "=", "batch_size", "*", "32", ",", "name", "=", "name", ")", "\n", "", ""]]}