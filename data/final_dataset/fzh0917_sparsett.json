{"home.repos.pwc.inspect_result.fzh0917_sparsett.main.train.set_seed": [[39, 46], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if you are using multi-GPU.", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.main.train.make_parser": [[48, 67], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "make_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test'", ")", "\n", "parser", ".", "add_argument", "(", "'-cfg'", ",", "\n", "'--config'", ",", "\n", "default", "=", "''", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path to experiment configuration'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-r'", ",", "\n", "'--resume'", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "r\"completed epoch's number, latest or one model path\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-v'", ",", "\n", "'--validate'", ",", "\n", "default", "=", "\"15\"", ",", "\n", "help", "=", "r\"Epoch's number to start to validate\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.main.test.make_parser": [[18, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "make_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test'", ")", "\n", "parser", ".", "add_argument", "(", "'-cfg'", ",", "\n", "'--config'", ",", "\n", "default", "=", "''", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'experiment configuration'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.main.test.build_sparsett_tester": [[29, 37], ["videoanalyst.model.builder.build", "videoanalyst.pipeline.builder.build", "videoanalyst.engine.builder.build"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build"], ["", "def", "build_sparsett_tester", "(", "task_cfg", ")", ":", "\n", "# build model", "\n", "    ", "model", "=", "model_builder", ".", "build", "(", "\"track\"", ",", "task_cfg", ".", "model", ")", "\n", "# build pipeline", "\n", "pipeline", "=", "pipeline_builder", ".", "build", "(", "\"track\"", ",", "task_cfg", ".", "pipeline", ",", "model", ")", "\n", "# build tester", "\n", "testers", "=", "tester_builder", "(", "\"track\"", ",", "task_cfg", ".", "tester", ",", "\"tester\"", ",", "pipeline", ")", "\n", "return", "testers", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.main.test.build_sat_tester": [[39, 54], ["videoanalyst.model.builder.build", "videoanalyst.pipeline.builder.build", "videoanalyst.model.builder.build", "videoanalyst.pipeline.builder.build", "videoanalyst.engine.builder.build"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build"], ["", "def", "build_sat_tester", "(", "task_cfg", ")", ":", "\n", "# build model", "\n", "    ", "tracker_model", "=", "model_builder", ".", "build", "(", "\"track\"", ",", "task_cfg", ".", "tracker_model", ")", "\n", "tracker", "=", "pipeline_builder", ".", "build", "(", "\"track\"", ",", "\n", "task_cfg", ".", "tracker_pipeline", ",", "\n", "model", "=", "tracker_model", ")", "\n", "segmenter", "=", "model_builder", ".", "build", "(", "'vos'", ",", "task_cfg", ".", "segmenter", ")", "\n", "# build pipeline", "\n", "pipeline", "=", "pipeline_builder", ".", "build", "(", "'vos'", ",", "\n", "task_cfg", ".", "pipeline", ",", "\n", "segmenter", "=", "segmenter", ",", "\n", "tracker", "=", "tracker", ")", "\n", "# build tester", "\n", "testers", "=", "tester_builder", "(", "'vos'", ",", "task_cfg", ".", "tester", ",", "\"tester\"", ",", "pipeline", ")", "\n", "return", "testers", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.main.hpo.make_parser": [[18, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "make_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test'", ")", "\n", "parser", ".", "add_argument", "(", "'-cfg'", ",", "\n", "'--config'", ",", "\n", "default", "=", "'experiments/sparsett/test/otb2015/sparsett_swin_otb2015.yaml'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'experiment configuration'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-hpocfg'", ",", "\n", "'--hpo-config'", ",", "\n", "default", "=", "'experiments/sparsett/hpo/sparsett_swin_hpo_otb2015.yaml'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'experiment configuration'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size": [[23, 29], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size"], ["def", "get_world_size", "(", ")", "->", "int", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_rank": [[31, 37], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_rank"], ["", "def", "get_rank", "(", ")", "->", "int", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_local_rank": [[39, 50], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_rank"], ["", "def", "get_local_rank", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Returns:\n        The rank of the current process within the local (per-machine) process group.\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "assert", "_LOCAL_PROCESS_GROUP", "is", "not", "None", "\n", "return", "dist", ".", "get_rank", "(", "group", "=", "_LOCAL_PROCESS_GROUP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_local_size": [[52, 63], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size"], ["", "def", "get_local_size", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Returns:\n        The size of the per-machine process group,\n        i.e. the number of processes per machine.\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", "group", "=", "_LOCAL_PROCESS_GROUP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.is_main_process": [[65, 67], ["dist_utils.get_rank"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_rank"], ["", "def", "is_main_process", "(", ")", "->", "bool", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.synchronize": [[69, 82], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._get_global_gloo_group": [[84, 94], ["functools.lru_cache", "torch.get_backend", "torch.new_group"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "_get_global_gloo_group", "(", ")", ":", "\n", "    ", "\"\"\"\n    Return a process group based on gloo backend, containing all the ranks\n    The result is cached.\n    \"\"\"", "\n", "if", "dist", ".", "get_backend", "(", ")", "==", "\"nccl\"", ":", "\n", "        ", "return", "dist", ".", "new_group", "(", "backend", "=", "\"gloo\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "dist", ".", "group", ".", "WORLD", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._serialize_to_tensor": [[96, 110], ["torch.get_backend", "torch.device", "torch.device", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "len", "loguru.logger.warning", "torch.ByteTensor", "torch.ByteTensor", "dist_utils.get_rank", "len"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_rank"], ["", "", "def", "_serialize_to_tensor", "(", "data", ",", "group", ")", ":", "\n", "    ", "backend", "=", "dist", ".", "get_backend", "(", "group", ")", "\n", "assert", "backend", "in", "[", "\"gloo\"", ",", "\"nccl\"", "]", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", "if", "backend", "==", "\"gloo\"", "else", "\"cuda\"", ")", "\n", "\n", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "if", "len", "(", "buffer", ")", ">", "1024", "**", "3", ":", "\n", "        ", "logger", ".", "warning", "(", "\n", "\"Rank {} trying to all-gather {:.2f} GB of data on device {}\"", ".", "\n", "format", "(", "get_rank", "(", ")", ",", "\n", "len", "(", "buffer", ")", "/", "(", "1024", "**", "3", ")", ",", "device", ")", ")", "\n", "", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._pad_to_largest_tensor": [[112, 142], ["torch.get_world_size", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.zeros", "torch.zeros", "int", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat.numel", "range", "size.item"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.all_gather"], ["", "def", "_pad_to_largest_tensor", "(", "tensor", ",", "group", ")", ":", "\n", "    ", "\"\"\"\n    Returns:\n        list[int]: size of the tensor, on each rank\n        Tensor: padded tensor that has the max size\n    \"\"\"", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", "group", "=", "group", ")", "\n", "assert", "(", "\n", "world_size", ">=", "1", "\n", ")", ",", "\"comm.gather/all_gather must be called from ranks within the given group!\"", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "\n", "device", "=", "tensor", ".", "device", ")", "\n", "size_list", "=", "[", "\n", "torch", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "tensor", ".", "device", ")", "\n", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ",", "group", "=", "group", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "zeros", "(", "(", "max_size", "-", "local_size", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "tensor", ".", "device", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "size_list", ",", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.all_gather": [[144, 181], ["dist_utils._serialize_to_tensor", "dist_utils._pad_to_largest_tensor", "max", "torch.all_gather", "zip", "dist_utils.get_world_size", "dist_utils._get_global_gloo_group", "torch.get_world_size", "torch.empty", "torch.empty", "data_list.append", "_serialize_to_tensor.cpu().numpy().tobytes", "pickle.loads", "_serialize_to_tensor.cpu().numpy", "_serialize_to_tensor.cpu"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._serialize_to_tensor", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._pad_to_largest_tensor", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.all_gather", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._get_global_gloo_group", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size"], ["", "def", "all_gather", "(", "data", ",", "group", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors).\n\n    Args:\n        data: any picklable object\n        group: a torch process group. By default, will use a group which\n            contains all ranks on gloo backend.\n\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "if", "get_world_size", "(", ")", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "", "if", "group", "is", "None", ":", "\n", "        ", "group", "=", "_get_global_gloo_group", "(", ")", "\n", "", "if", "dist", ".", "get_world_size", "(", "group", ")", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "", "tensor", "=", "_serialize_to_tensor", "(", "data", ",", "group", ")", "\n", "\n", "size_list", ",", "tensor", "=", "_pad_to_largest_tensor", "(", "tensor", ",", "group", ")", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "tensor_list", "=", "[", "\n", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "tensor", ".", "device", ")", "\n", "for", "_", "in", "size_list", "\n", "]", "\n", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ",", "group", "=", "group", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.gather": [[183, 225], ["torch.get_rank", "dist_utils._serialize_to_tensor", "dist_utils._pad_to_largest_tensor", "dist_utils.get_world_size", "dist_utils._get_global_gloo_group", "torch.get_world_size", "max", "torch.gather", "zip", "torch.gather", "torch.empty", "torch.empty", "data_list.append", "_serialize_to_tensor.cpu().numpy().tobytes", "pickle.loads", "_serialize_to_tensor.cpu().numpy", "_serialize_to_tensor.cpu"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_rank", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._serialize_to_tensor", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._pad_to_largest_tensor", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils._get_global_gloo_group", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.gather", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.gather"], ["", "def", "gather", "(", "data", ",", "dst", "=", "0", ",", "group", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Run gather on arbitrary picklable data (not necessarily tensors).\n\n    Args:\n        data: any picklable object\n        dst (int): destination rank\n        group: a torch process group. By default, will use a group which\n            contains all ranks on gloo backend.\n\n    Returns:\n        list[data]: on dst, a list of data gathered from each rank. Otherwise,\n            an empty list.\n    \"\"\"", "\n", "if", "get_world_size", "(", ")", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "", "if", "group", "is", "None", ":", "\n", "        ", "group", "=", "_get_global_gloo_group", "(", ")", "\n", "", "if", "dist", ".", "get_world_size", "(", "group", "=", "group", ")", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", "group", "=", "group", ")", "\n", "\n", "tensor", "=", "_serialize_to_tensor", "(", "data", ",", "group", ")", "\n", "size_list", ",", "tensor", "=", "_pad_to_largest_tensor", "(", "tensor", ",", "group", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "if", "rank", "==", "dst", ":", "\n", "        ", "max_size", "=", "max", "(", "size_list", ")", "\n", "tensor_list", "=", "[", "\n", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "tensor", ".", "device", ")", "\n", "for", "_", "in", "size_list", "\n", "]", "\n", "dist", ".", "gather", "(", "tensor", ",", "tensor_list", ",", "dst", "=", "dst", ",", "group", "=", "group", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "            ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "", "return", "data_list", "\n", "", "else", ":", "\n", "        ", "dist", ".", "gather", "(", "tensor", ",", "[", "]", ",", "dst", "=", "dst", ",", "group", "=", "group", ")", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.shared_random_seed": [[227, 239], ["numpy.random.randint", "dist_utils.all_gather"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.all_gather"], ["", "", "def", "shared_random_seed", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns:\n        int: a random number that is the same across all workers.\n            If workers need a shared RNG, they can use this shared seed to\n            create one.\n\n    All workers must call this function, otherwise it will deadlock.\n    \"\"\"", "\n", "ints", "=", "np", ".", "random", ".", "randint", "(", "2", "**", "31", ")", "\n", "all_ints", "=", "all_gather", "(", "ints", ")", "\n", "return", "all_ints", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.reduce_dict": [[241, 271], ["dist_utils.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the reduced results.\n\n    Args:\n        input_dict (dict): inputs to be reduced. All the values must be scalar CUDA Tensor.\n        average (bool): whether to do average or sum\n\n    Returns:\n        a dict with the same keys as input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.visualization.VideoWriter.__init__": [[17, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "video_file", ",", "fps", "=", "25", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n\n        :param video_file: path to write video. Perform nothing in case of None\n        :param fps: frame per second\n        :param scale: resize scale\n        \"\"\"", "\n", "self", ".", "video_file", "=", "video_file", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "writer", "=", "None", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.visualization.VideoWriter.write": [[29, 46], ["cv2.resize", "visualization.VideoWriter.writer.write", "int", "int", "os.dirname", "os.dirname", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "os.realpath", "os.realpath", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "tuple"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["", "def", "write", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n\n        :param frame: numpy array, (H, W, 3), BGR, frame to write\n        :return:\n        \"\"\"", "\n", "h", ",", "w", "=", "frame", ".", "shape", "[", ":", "2", "]", "\n", "h_rsz", ",", "w_rsz", "=", "int", "(", "h", "*", "self", ".", "scale", ")", ",", "int", "(", "w", "*", "self", ".", "scale", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "w_rsz", ",", "h_rsz", ")", ")", "\n", "if", "self", ".", "writer", "is", "None", ":", "\n", "            ", "video_dir", "=", "osp", ".", "dirname", "(", "osp", ".", "realpath", "(", "self", ".", "video_file", ")", ")", "\n", "if", "not", "osp", ".", "exists", "(", "video_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "video_dir", ")", "\n", "", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'MJPG'", ")", "\n", "self", ".", "writer", "=", "cv2", ".", "VideoWriter", "(", "self", ".", "video_file", ",", "fourcc", ",", "self", ".", "fps", ",", "\n", "tuple", "(", "frame", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ")", ")", "\n", "", "self", ".", "writer", ".", "write", "(", "frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.visualization.VideoWriter.release": [[47, 56], ["visualization.VideoWriter.writer.release", "loguru.logger.info"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.release"], ["", "def", "release", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Manually release\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "writer", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "writer", ".", "release", "(", ")", "\n", "logger", ".", "info", "(", "\"video file dumped at {}\"", ".", "format", "(", "self", ".", "video_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.visualization.VideoWriter.__del__": [[57, 59], ["visualization.VideoWriter.release"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.release"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "release", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir": [[7, 17], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "ensure_dir", "(", "dir_path", ":", "str", ")", ":", "\n", "    ", "r\"\"\"\n    Ensure the existence of path (i.e. mkdir -p)\n    Arguments\n    ---------\n    dir_path: str\n        path to be ensured\n    \"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "dir_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.complete_path_wt_root_in_cfg": [[19, 41], ["isinstance", "path.complete_path_wt_root_in_cfg", "isinstance", "os.join", "os.exists", "len"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.complete_path_wt_root_in_cfg"], ["", "", "def", "complete_path_wt_root_in_cfg", "(", "\n", "cfg", ":", "CfgNode", ",", "\n", "root_dir", ":", "str", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Arguments\n    ---------\n    cfg: CfgNode\n        yacs configuration object to be completed\n    root_dir: str\n        root path\n    \"\"\"", "\n", "if", "isinstance", "(", "cfg", ",", "CfgNode", ")", ":", "\n", "        ", "for", "k", "in", "cfg", ":", "\n", "            ", "cfg", "[", "k", "]", "=", "complete_path_wt_root_in_cfg", "(", "cfg", "[", "k", "]", ",", "root_dir", ")", "\n", "", "", "elif", "isinstance", "(", "cfg", ",", "str", ")", "and", "len", "(", "cfg", ")", ">", "0", ":", "\n", "        ", "realpath", "=", "osp", ".", "join", "(", "root_dir", ",", "cfg", ")", "\n", "if", "osp", ".", "exists", "(", "realpath", ")", ":", "\n", "            ", "cfg", "=", "realpath", "\n", "# print(realpath)", "\n", "\n", "", "", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.move_data_to_device": [[18, 23], ["data_dict[].to"], "function", ["None"], ["def", "move_data_to_device", "(", "data_dict", ":", "Dict", ",", "dev", ":", "torch", ".", "device", ")", ":", "\n", "    ", "for", "k", "in", "data_dict", ":", "\n", "        ", "data_dict", "[", "k", "]", "=", "data_dict", "[", "k", "]", ".", "to", "(", "dev", ")", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.unwrap_model": [[25, 30], ["isinstance"], "function", ["None"], ["", "def", "unwrap_model", "(", "model", ")", ":", "\n", "    ", "r\"\"\" unwrap nn.dataparallel wrapped module for model serialization \"\"\"", "\n", "return", "model", ".", "module", "if", "isinstance", "(", "\n", "model", ",", "\n", "(", "nn", ".", "DataParallel", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ")", "else", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.convert_numpy_to_tensor": [[32, 49], ["type", "torch.from_numpy().float", "torch.from_numpy().float", "isinstance", "isinstance", "torch.from_numpy", "torch.from_numpy", "torch_module.convert_numpy_to_tensor", "data[].permute", "torch_module.convert_numpy_to_tensor"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.convert_numpy_to_tensor", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.convert_numpy_to_tensor"], ["", "def", "convert_numpy_to_tensor", "(", "raw_data", ")", ":", "\n", "    ", "r\"\"\"\n    convert numpy array dict or list to torch.Tensor\n    \"\"\"", "\n", "elem_type", "=", "type", "(", "raw_data", ")", "\n", "if", "(", "elem_type", ".", "__module__", "==", "\"numpy\"", "and", "elem_type", ".", "__name__", "!=", "\"str_\"", "\n", "and", "elem_type", ".", "__name__", "!=", "\"string_\"", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "raw_data", ")", ".", "float", "(", ")", "\n", "", "elif", "isinstance", "(", "raw_data", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "        ", "data", "=", "{", "key", ":", "convert_numpy_to_tensor", "(", "raw_data", "[", "key", "]", ")", "for", "key", "in", "raw_data", "}", "\n", "if", "'image'", "in", "data", ":", "\n", "            ", "data", "[", "'image'", "]", "=", "data", "[", "'image'", "]", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "return", "data", "\n", "", "elif", "isinstance", "(", "raw_data", ",", "collections", ".", "abc", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "convert_numpy_to_tensor", "(", "data", ")", "for", "data", "in", "raw_data", "]", "\n", "", "else", ":", "\n", "        ", "return", "raw_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.convert_tensor_to_numpy": [[51, 64], ["isinstance", "raw_data.cpu().numpy", "isinstance", "isinstance", "raw_data.cpu", "torch_module.convert_tensor_to_numpy", "data[].transpose().astype", "torch_module.convert_tensor_to_numpy", "data[].transpose"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.convert_tensor_to_numpy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.convert_tensor_to_numpy"], ["", "", "def", "convert_tensor_to_numpy", "(", "raw_data", ")", ":", "\n", "    ", "r\"\"\"\n    convert numpy array dict or list to torch.Tensor\n    \"\"\"", "\n", "if", "isinstance", "(", "raw_data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "raw_data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "raw_data", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "        ", "data", "=", "{", "key", ":", "convert_tensor_to_numpy", "(", "raw_data", "[", "key", "]", ")", "for", "key", "in", "raw_data", "}", "\n", "if", "'image'", "in", "data", ":", "\n", "            ", "data", "[", "'image'", "]", "=", "data", "[", "'image'", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "data", "\n", "", "elif", "isinstance", "(", "raw_data", ",", "collections", ".", "abc", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "convert_tensor_to_numpy", "(", "data", ")", "for", "data", "in", "raw_data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.average_gradients": [[66, 75], ["float", "model.parameters", "torch.get_world_size", "torch.all_reduce"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size"], ["", "", "def", "average_gradients", "(", "model", ")", ":", "\n", "    ", "r\"\"\" Gradient averaging. \n         from https://pytorch.org/tutorials/intermediate/dist_tuto.html\n         to be called after _loss.backward()_ and before _optimizer.step()_\n    \"\"\"", "\n", "size", "=", "float", "(", "dist", ".", "get_world_size", "(", ")", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "param", ".", "grad", ".", "data", "/=", "size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.Registry.__init__": [[32, 38], ["dict.__init__", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Registry'", "\n", "if", "len", "(", "args", ")", ">", "0", "and", "isinstance", "(", "args", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "name", ",", "*", "args", "=", "args", "\n", "self", ".", "name", "=", "name", "\n", "", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.Registry.register": [[39, 44], ["misc._register_generic"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc._register_generic"], ["", "def", "register", "(", "self", ",", "module", ")", ":", "\n", "        ", "name", "=", "module", ".", "__name__", "\n", "_register_generic", "(", "self", ",", "name", ",", "module", ")", "\n", "#logger.debug('%s: %s registered' % (self.name, name))", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.Timer.__init__": [[73, 91], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", "=", "\"\"", ",", "\n", "output_dict", ":", "Dict", "=", "None", ",", "\n", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Timing usage\n        \n        Parameters\n        ----------\n        name : str, optional\n            name of timer, used in verbose & output_dict, by default ''\n        output_dict : Dict, optional\n            dict-like object to receive elapsed time in output_dict[name], by default None\n        verbose : bool, optional\n            verbose or not via logger, by default False\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "output_dict", "=", "output_dict", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.Timer.__enter__": [[92, 94], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.Timer.__exit__": [[95, 103], ["time.time", "loguru.logger.info"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "toc", "=", "time", ".", "time", "(", ")", "\n", "elapsed_time", "=", "self", ".", "toc", "-", "self", ".", "tic", "\n", "if", "self", ".", "output_dict", "is", "not", "None", ":", "\n", "            ", "self", ".", "output_dict", "[", "self", ".", "name", "]", "=", "elapsed_time", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print_str", "=", "'%s elapsed time: %f'", "%", "(", "self", ".", "name", ",", "elapsed_time", ")", "\n", "logger", ".", "info", "(", "print_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc._register_generic": [[10, 14], ["print"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", ",", "print", "(", "\n", "module_name", ",", "module_dict", ",", "'defined in several script files'", ")", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.load_cfg": [[46, 59], ["open", "yacs.config.CfgNode.load_cfg"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.load_cfg"], ["", "", "def", "load_cfg", "(", "path", ":", "str", ")", ":", "\n", "    ", "r\"\"\"\n    Load yaml with yacs\n\n    Arguments\n    ---------\n    path: str\n        yaml path\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config_node", "=", "CN", ".", "load_cfg", "(", "f", ")", "\n", "\n", "", "return", "config_node", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps": [[61, 67], ["None"], "function", ["None"], ["", "def", "merge_cfg_into_hps", "(", "cfg", ":", "CN", ",", "hps", ":", "Dict", ")", ":", "\n", "    ", "for", "hp_name", "in", "hps", ":", "\n", "        ", "if", "hp_name", "in", "cfg", ":", "\n", "            ", "new_value", "=", "cfg", "[", "hp_name", "]", "\n", "hps", "[", "hp_name", "]", "=", "new_value", "\n", "", "", "return", "hps", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.md5sum": [[105, 121], ["open", "hashlib.md5().hexdigest", "hashlib.md5", "f.read"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], ["", "", "", "def", "md5sum", "(", "file_path", ")", "->", "str", ":", "\n", "    ", "\"\"\"Get md5sum string\n    \n    Parameters\n    ----------\n    file_path : str\n        path to file to calculate md5sum\n    \n    Returns\n    -------\n    str\n        md5 value string in hex\n    \"\"\"", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "md5sum_str", "=", "hashlib", ".", "md5", "(", "f", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "\n", "", "return", "md5sum_str", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.parse_hp_path_and_range": [[16, 49], ["hpo_cfg.items", "k.endswith", "parsed_results.append", "isinstance", "len", "hpo.parse_hp_path_and_range", "range", "parsed_results.extend", "len", "len"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.parse_hp_path_and_range"], ["\n", "\n", "def", "make_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test'", ")", "\n", "parser", ".", "add_argument", "(", "'-cfg'", ",", "\n", "'--config'", ",", "\n", "default", "=", "'experiments/sparsett/test/otb2015/sparsett_swin_otb2015.yaml'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'experiment configuration'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-hpocfg'", ",", "\n", "'--hpo-config'", ",", "\n", "default", "=", "'experiments/sparsett/hpo/sparsett_swin_hpo_otb2015.yaml'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'experiment configuration'", ")", "\n", "\n", "return", "parser", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "# parsing", "\n", "    ", "parser", "=", "make_parser", "(", ")", "\n", "parsed_args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# experiment config", "\n", "exp_cfg_path", "=", "osp", ".", "realpath", "(", "parsed_args", ".", "config", ")", "\n", "root_cfg", ".", "merge_from_file", "(", "exp_cfg_path", ")", "\n", "logger", ".", "info", "(", "\"Load experiment configuration at: %s\"", "%", "exp_cfg_path", ")", "\n", "\n", "# resolve config", "\n", "root_cfg", "=", "complete_path_wt_root_in_cfg", "(", "root_cfg", ",", "ROOT_PATH", ")", "\n", "root_cfg", "=", "root_cfg", ".", "test", "\n", "task", ",", "task_cfg_origin", "=", "specify_task", "(", "root_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.get_cfg_value_wt_path": [[51, 55], ["None"], "function", ["None"], ["with", "open", "(", "parsed_args", ".", "hpo_config", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "hpo_cfg", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "hpo_cfg", "=", "hpo_cfg", "[", "\"test\"", "]", "[", "task", "]", "\n", "hpo_schedules", "=", "hpo", ".", "parse_hp_path_and_range", "(", "hpo_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.set_cfg_value_wt_path": [[57, 62], ["None"], "function", ["None"], ["\"hpo_{}.csv\"", ".", "format", "(", "task_cfg_origin", "[", "\"exp_name\"", "]", ")", ")", "\n", "\n", "torch", ".", "multiprocessing", ".", "set_start_method", "(", "'spawn'", ",", "force", "=", "True", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "task_cfg", "=", "deepcopy", "(", "task_cfg_origin", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.sample_and_update_single_hp": [[64, 98], ["hpo.set_cfg_value_wt_path", "len", "numpy.random.choice", "len", "len", "isinstance", "isinstance", "numpy.random.randint", "round", "float", "float", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.set_cfg_value_wt_path"], ["if", "task", "==", "\"track\"", ":", "\n", "            ", "testers", "=", "build_sparsett_tester", "(", "task_cfg", ")", "\n", "", "elif", "task", "==", "\"vos\"", ":", "\n", "            ", "testers", "=", "build_sat_tester", "(", "task_cfg", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "\"task {} is not supported\"", ".", "format", "(", "task_cfg", ")", ")", "\n", "exit", "(", ")", "\n", "", "task_cfg", ".", "freeze", "(", ")", "\n", "tester", "=", "testers", "[", "0", "]", "\n", "test_result_dict", "=", "tester", ".", "test", "(", ")", "\n", "hpo_exp_dict", "[", "\"main_performance\"", "]", "=", "test_result_dict", "[", "\"main_performance\"", "]", "\n", "df", "=", "hpo", ".", "dump_result_dict", "(", "csv_file", ",", "hpo_exp_dict", ")", "\n", "df", ".", "sort_values", "(", "by", "=", "'main_performance'", ",", "inplace", "=", "True", ")", "\n", "df", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "print", "(", "df", ")", "\n", "del", "testers", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.sample_and_update_hps": [[100, 109], ["collections.OrderedDict", "hpo.sample_and_update_single_hp"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.sample_and_update_single_hp"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.merge_result_dict": [[111, 135], ["list", "isinstance", "result_dicts[].keys", "isinstance", "merged_result[].extend", "merged_result[].append"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.dump_result_dict": [[137, 169], ["os.exists", "hpo.merge_result_dict", "pandas.DataFrame", "pandas.concat", "pd.DataFrame.reset_index", "pd.DataFrame.to_csv", "pandas.read_csv", "path.ensure_dir", "pandas.DataFrame", "os.dirname", "list", "result_dict.keys"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.hpo.merge_result_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.__init__": [[61, 67], ["dict", "sorted", "len", "glob.glob"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "video_dir", ",", "init_counter", "=", "0", ")", ":", "\n", "        ", "self", ".", "_state", "=", "dict", "(", ")", "\n", "self", ".", "_state", "[", "\"video_dir\"", "]", "=", "video_dir", "\n", "self", ".", "_state", "[", "\"frame_files\"", "]", "=", "sorted", "(", "glob", ".", "glob", "(", "video_dir", ")", ")", "\n", "self", ".", "_state", "[", "\"video_length\"", "]", "=", "len", "(", "self", ".", "_state", "[", "\"frame_files\"", "]", ")", "\n", "self", ".", "_state", "[", "\"counter\"", "]", "=", "init_counter", "# 0", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.isOpened": [[68, 70], ["None"], "methods", ["None"], ["", "def", "isOpened", "(", "self", ",", ")", ":", "\n", "        ", "return", "(", "self", ".", "_state", "[", "\"counter\"", "]", "<", "self", ".", "_state", "[", "\"video_length\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read": [[71, 77], ["image.load_image"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.load_image"], ["", "def", "read", "(", "self", ",", ")", ":", "\n", "        ", "frame_idx", "=", "self", ".", "_state", "[", "\"counter\"", "]", "\n", "frame_file", "=", "self", ".", "_state", "[", "\"frame_files\"", "]", "[", "frame_idx", "]", "\n", "frame_img", "=", "load_image", "(", "frame_file", ")", "\n", "self", ".", "_state", "[", "\"counter\"", "]", "+=", "1", "\n", "return", "frame_idx", ",", "frame_img", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.release": [[78, 80], ["None"], "methods", ["None"], ["", "def", "release", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "_state", "[", "\"counter\"", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.__init__": [[86, 91], ["dict", "loguru.logger.info"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "video_dir", ")", ":", "\n", "        ", "self", ".", "_state", "=", "dict", "(", ")", "\n", "self", ".", "_state", "[", "\"video_dir\"", "]", "=", "video_dir", "\n", "self", ".", "_state", "[", "\"counter\"", "]", "=", "0", "\n", "logger", ".", "info", "(", "\"Frame results will be dumped at: {}\"", ".", "format", "(", "video_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write": [[92, 100], ["os.join", "os.join", "cv2.imwrite", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "im", ")", ":", "\n", "        ", "frame_idx", "=", "self", ".", "_state", "[", "\"counter\"", "]", "\n", "frame_file", "=", "osp", ".", "join", "(", "self", ".", "_state", "[", "\"video_dir\"", "]", ",", "\n", "\"{:06d}.jpg\"", ".", "format", "(", "frame_idx", ")", ")", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "_state", "[", "\"video_dir\"", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "_state", "[", "\"video_dir\"", "]", ")", "\n", "", "cv2", ".", "imwrite", "(", "frame_file", ",", "im", ")", "\n", "self", ".", "_state", "[", "\"counter\"", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.release": [[101, 103], ["None"], "methods", ["None"], ["", "def", "release", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "_state", "[", "\"counter\"", "]", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.load_image": [[14, 55], ["cv2.imread", "os.isfile", "loguru.logger.info", "range", "loguru.logger.info", "PIL.Image.open", "numpy.array", "loguru.logger.info", "loguru.logger.info", "cv2.imread"], "function", ["None"], ["def", "load_image", "(", "img_file", ":", "str", ")", "->", "np", ".", "array", ":", "\n", "    ", "\"\"\"Image loader used by data module (e.g. image sampler)\n    \n    Parameters\n    ----------\n    img_file: str\n        path to image file\n    Returns\n    -------\n    np.array\n        loaded image\n    \n    Raises\n    ------\n    FileExistsError\n        invalid image file\n    RuntimeError\n        unloadable image file\n    \"\"\"", "\n", "if", "not", "osp", ".", "isfile", "(", "img_file", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Image file %s does not exist.\"", "%", "img_file", ")", "\n", "# read with OpenCV", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_file", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "if", "img", "is", "None", ":", "\n", "# retrying", "\n", "        ", "for", "ith", "in", "range", "(", "_RETRY_NUM", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"cv2 retrying (counter: %d) to load image file: %s\"", "%", "\n", "(", "ith", "+", "1", ",", "img_file", ")", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_file", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "                ", "break", "\n", "# read with PIL", "\n", "", "", "", "if", "img", "is", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"PIL used in loading image file: %s\"", "%", "img_file", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "# RGB -> BGR", "\n", "", "if", "img", "is", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Fail to load Image file %s\"", "%", "img_file", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.freeze.FreezeStateMonitor.__init__": [[14, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "module", ":", "nn", ".", "Module", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param module: module to be monitored\n        :param verbose:\n        \"\"\"", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.freeze.FreezeStateMonitor.__enter__": [[22, 25], ["collections.OrderedDict", "freeze.FreezeStateMonitor.module.named_parameters"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "old_freeze_state", "=", "OrderedDict", "(", "[", "\n", "(", "k", ",", "v", ".", "requires_grad", ")", "for", "k", ",", "v", "in", "self", ".", "module", ".", "named_parameters", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.freeze.FreezeStateMonitor.__exit__": [[27, 41], ["collections.OrderedDict", "freeze.FreezeStateMonitor.new_freeze_state.keys", "set", "set", "freeze.FreezeStateMonitor.module.named_parameters", "list", "list", "loguru.logger.info", "freeze.FreezeStateMonitor.new_freeze_state.keys", "freeze.FreezeStateMonitor.old_freeze_state.keys"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "new_freeze_state", "=", "OrderedDict", "(", "[", "\n", "(", "k", ",", "v", ".", "requires_grad", ")", "for", "k", ",", "v", "in", "self", ".", "module", ".", "named_parameters", "(", ")", "\n", "]", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "assert", "set", "(", "list", "(", "self", ".", "new_freeze_state", ".", "keys", "(", ")", ")", ")", "==", "set", "(", "\n", "list", "(", "self", ".", "old_freeze_state", ".", "keys", "(", ")", ")", ")", "\n", "any_change", "=", "False", "\n", "for", "k", "in", "self", ".", "new_freeze_state", ".", "keys", "(", ")", ":", "\n", "                ", "change", "=", "(", "self", ".", "old_freeze_state", "[", "k", "]", "!=", "self", ".", "new_freeze_state", "[", "k", "]", ")", "\n", "if", "change", ":", "\n", "                    ", "logger", ".", "info", "(", "k", ",", "\"changed:\"", ",", "self", ".", "old_freeze_state", "[", "k", "]", ",", "\"->\"", ",", "\n", "self", ".", "new_freeze_state", "[", "k", "]", ")", "\n", "", "any_change", "=", "any_change", "or", "change", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.freeze.dynamic_freeze": [[43, 64], ["re.compile", "freeze.FreezeStateMonitor", "module.named_parameters", "compiled_regex.search"], "function", ["None"], ["", "", "", "", "def", "dynamic_freeze", "(", "module", ":", "nn", ".", "Module", ",", "\n", "compiled_regex", "=", "re", ".", "compile", "(", "\".*\"", ")", ",", "\n", "requires_grad", ":", "bool", "=", "False", ",", "\n", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Perform dynamic freezing\n    \n    Parameters\n    ----------\n    module : [type]\n        [description]\n    compiled_regex : [type], optional\n        compiled regular expression, by default re.compile(\".*\")\n    requires_grad : bool, optional\n        [description], by default False\n    verbose : bool, optional\n        [description], by default False\n    \"\"\"", "\n", "with", "FreezeStateMonitor", "(", "module", ",", "verbose", "=", "verbose", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "(", "compiled_regex", ".", "search", "(", "k", ")", "is", "not", "None", ")", ":", "\n", "                ", "v", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.freeze.apply_freeze_schedule": [[74, 104], ["freeze.FreezeStateMonitor", "freeze.dynamic_freeze"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.freeze.dynamic_freeze"], ["", "", "", "", "def", "apply_freeze_schedule", "(", "module", ":", "nn", ".", "Module", ",", "\n", "epoch", ":", "int", ",", "\n", "schedule", ":", "List", "[", "Dict", "]", ",", "\n", "verbose", ":", "bool", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    Apply dynamic freezing schedule with verbose\n    \n    Arguments:\n    module: nn.Module\n        model to be scheduled\n    epoch: int\n        current epoch\n    schedules: List[Dict]\n        lsit of schedule\n        schedule: Dict\n            \"regex\": regex to filter parameters\n            \"epoch\": epoch where the schedule starts from\n            \"freezed\": freeze or not\n\n    \"\"\"", "\n", "with", "FreezeStateMonitor", "(", "module", ",", "verbose", "=", "verbose", ")", ":", "\n", "        ", "for", "freeze_action", "in", "schedule", ":", "\n", "# param_filter, requires_grad_cond", "\n", "            ", "compiled_regex", "=", "freeze_action", "[", "\"compiled_regex\"", "]", "\n", "requires_grad", "=", "(", "\n", "(", "epoch", ">=", "freeze_action", "[", "\"epoch\"", "]", ")", "!=", "freeze_action", "[", "\"freezed\"", "]", "\n", ")", "# XOR", "\n", "dynamic_freeze", "(", "module", ",", "\n", "compiled_regex", "=", "compiled_regex", ",", "\n", "requires_grad", "=", "requires_grad", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.BaseLR.get_lr": [[77, 80], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "get_lr", "(", "self", ",", "epoch", "=", "0", ",", "iter", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.BaseLR.max_epoch": [[81, 85], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "max_epoch", "(", "self", ",", "epoch", ",", "iter", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.ListLR.__init__": [[88, 90], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "LRs", "=", "[", "LR", "for", "LR", "in", "args", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.ListLR.get_lr": [[91, 98], ["LR.get_lr", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.TransitionLR.get_lr"], ["", "def", "get_lr", "(", "self", ",", "epoch", "=", "0", ",", "iter", "=", "0", ")", ":", "\n", "        ", "for", "LR", "in", "self", ".", "LRs", ":", "\n", "            ", "if", "epoch", "<", "len", "(", "LR", ")", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "epoch", "-=", "len", "(", "LR", ")", "\n", "", "", "return", "LR", ".", "get_lr", "(", "epoch", ",", "iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.ListLR.__add__": [[99, 108], ["isinstance", "lr_policy.ListLR.LRs.extend", "isinstance", "lr_policy.ListLR.LRs.append", "TypeError", "lr_policy.ListLR"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "ListLR", ")", ":", "\n", "            ", "self", ".", "LRs", ".", "extend", "(", "other", ".", "LRs", ")", "\n", "", "elif", "isinstance", "(", "other", ",", "BaseLR", ")", ":", "\n", "            ", "self", ".", "LRs", ".", "append", "(", "ListLR", "(", "other", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'Argument other must be either ListLR or BaseLR object.'", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.ListLR.__len__": [[109, 111], ["sum", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ",", ")", ":", "\n", "        ", "return", "sum", "(", "[", "len", "(", "LR", ")", "for", "LR", "in", "self", ".", "LRs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.ListLR.max_iter": [[112, 115], ["max"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_iter", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "[", "LR", ".", "max_iter", "for", "LR", "in", "self", ".", "LRs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.MultiStageLR.__init__": [[121, 129], ["type", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lr_stages", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param lr_stages: list, [(milestone1, lr1), (milestone2, lr2), ...]\n        \"\"\"", "\n", "assert", "type", "(", "lr_stages", ")", "in", "[", "list", ",", "tuple", "]", "and", "len", "(", "lr_stages", "[", "0", "]", ")", "==", "2", ",", "'lr_stages must be list or tuple, with [iters, lr] format'", "\n", "self", ".", "_lr_stages", "=", "lr_stages", "\n", "self", ".", "max_iter", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.MultiStageLR.get_lr": [[130, 135], ["ValueError"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "epoch", "=", "0", ",", "iter", "=", "0", ")", ":", "\n", "        ", "for", "(", "stage_epoch", ",", "lr", ")", "in", "self", ".", "_lr_stages", ":", "\n", "            ", "if", "0", "<=", "epoch", "<", "stage_epoch", ":", "\n", "                ", "return", "lr", "\n", "", "", "raise", "ValueError", "(", "'Invalid epoch.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.MultiStageLR.__len__": [[136, 138], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_lr_stages", "[", "-", "1", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.TransitionLR.__init__": [[163, 171], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "start_lr", "=", "0", ",", "end_lr", "=", "0", ",", "max_epoch", "=", "1", ",", "max_iter", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_start_lr", "=", "start_lr", "\n", "self", ".", "_end_lr", "=", "end_lr", "\n", "self", ".", "_max_epoch", "=", "max_epoch", "\n", "self", ".", "_max_iter", "=", "max_iter", "\n", "self", ".", "_pre_func", "=", "_IDENTITY", "\n", "self", ".", "_trans_func", "=", "_IDENTITY", "\n", "self", ".", "_post_func", "=", "_IDENTITY", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.TransitionLR.get_lr": [[172, 184], ["lr_policy.TransitionLR._pre_func", "lr_policy.TransitionLR._pre_func", "lr_policy.TransitionLR._trans_func", "lr_policy.TransitionLR._post_func", "ValueError", "ValueError"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "epoch", "=", "0", ",", "iter", "=", "0", ")", ":", "\n", "        ", "if", "not", "(", "0", "<=", "epoch", "<", "self", ".", "_max_epoch", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid epoch.'", ")", "\n", "", "if", "not", "(", "0", "<=", "iter", "<", "self", ".", "_max_iter", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid iter.'", ")", "\n", "", "start_value", "=", "self", ".", "_pre_func", "(", "self", ".", "_start_lr", ")", "\n", "end_value", "=", "self", ".", "_pre_func", "(", "self", ".", "_end_lr", ")", "\n", "trans_ratio", "=", "self", ".", "_trans_func", "(", "(", "epoch", "*", "self", ".", "_max_iter", "+", "iter", ")", "/", "\n", "(", "self", ".", "_max_epoch", "*", "self", ".", "_max_iter", ")", ")", "\n", "value", "=", "self", ".", "_post_func", "(", "start_value", "+", "\n", "(", "end_value", "-", "start_value", ")", "*", "trans_ratio", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.TransitionLR.__len__": [[185, 187], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.TransitionLR.max_iter": [[188, 191], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_iter", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.LinearLR.__init__": [[195, 200], ["lr_policy.TransitionLR.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_pre_func", "=", "_IDENTITY", "\n", "self", ".", "_trans_func", "=", "_IDENTITY", "\n", "self", ".", "_post_func", "=", "_IDENTITY", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.ExponentialLR.__init__": [[204, 209], ["lr_policy.TransitionLR.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_pre_func", "=", "math", ".", "log", "\n", "self", ".", "_trans_func", "=", "_IDENTITY", "\n", "self", ".", "_post_func", "=", "math", ".", "exp", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.CosineLR.__init__": [[213, 218], ["lr_policy.TransitionLR.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_pre_func", "=", "_IDENTITY", "\n", "self", ".", "_trans_func", "=", "self", ".", "_cosine_curve", "\n", "self", ".", "_post_func", "=", "_IDENTITY", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.CosineLR._cosine_curve": [[219, 225], ["math.cos"], "methods", ["None"], ["", "def", "_cosine_curve", "(", "self", ",", "x", ")", ":", "\n", "# recall that _cosine_curve(x) is assigned to _trans_func(x)", "\n", "#   which stands for the transition progress from 0 to 1", "\n", "#   so the following formula is reanable to increase", "\n", "#   \"decay\" is determined by start_value and end_value", "\n", "        ", "return", "(", "1", "-", "math", ".", "cos", "(", "x", "*", "math", ".", "pi", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.build": [[44, 71], ["lr_policy.ListLR", "json.loads", "phase_cfg.update", "SingleLRs.append"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["def", "build", "(", "cfg", ":", "List", "[", "str", "]", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"\n    Build lr scheduler with configuration\n\n    Arguments\n    ---------\n    cfg: List[str]\n        list of JSON string containing lr scheduling\n    **kwargs\n        extra keyword argument that apply to all schedule\n\n    Returns\n    -------\n    ListLR\n\n    \"\"\"", "\n", "cfg", "=", "[", "json", ".", "loads", "(", "c", ")", "for", "c", "in", "cfg", "]", "\n", "\n", "SingleLRs", "=", "[", "]", "\n", "for", "phase_cfg", "in", "cfg", ":", "\n", "        ", "phase_cfg", ".", "update", "(", "kwargs", ")", "\n", "policy", "=", "LR_POLICIES", "[", "phase_cfg", "[", "\"name\"", "]", "]", "(", "**", "phase_cfg", ")", "\n", "SingleLRs", ".", "append", "(", "policy", ")", "\n", "\n", "", "LR", "=", "ListLR", "(", "*", "SingleLRs", ")", "\n", "\n", "return", "LR", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy._IDENTITY": [[140, 142], ["None"], "function", ["None"], ["", "", "def", "_IDENTITY", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.plot_LR": [[227, 251], ["isinstance", "len", "numpy.arange", "numpy.arange", "itertools.product", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.title", "plt.show", "max", "LR.get_lr", "accum_iters.append", "lrs.append"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.show", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.TransitionLR.get_lr"], ["", "", "def", "plot_LR", "(", "LR", ":", "BaseLR", ",", "title", "=", "'Untitled'", ")", ":", "\n", "    ", "\"\"\" plot learning rate scheduling plan of an BaseLR object \"\"\"", "\n", "assert", "isinstance", "(", "LR", ",", "BaseLR", ")", "\n", "import", "itertools", "\n", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "max_iter", "=", "LR", ".", "max_iter", "\n", "max_epoch", "=", "len", "(", "LR", ")", "\n", "epochs", "=", "np", ".", "arange", "(", "0", ",", "max_epoch", ")", "\n", "iters", "=", "np", ".", "arange", "(", "0", ",", "max_iter", ",", "max", "(", "max_iter", "//", "10", ",", "1", ")", ")", "\n", "\n", "accum_iters", "=", "[", "]", "\n", "lrs", "=", "[", "]", "\n", "for", "epoch", ",", "iter", "in", "itertools", ".", "product", "(", "epochs", ",", "iters", ")", ":", "\n", "        ", "accum_iter", "=", "epoch", "*", "max_iter", "+", "iter", "\n", "lr", "=", "LR", ".", "get_lr", "(", "epoch", ",", "iter", ")", "\n", "accum_iters", ".", "append", "(", "accum_iter", ")", "\n", "lrs", ".", "append", "(", "lr", ")", "\n", "", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "accum_iters", ",", "lrs", ")", "\n", "plt", ".", "xlabel", "(", "'iterations'", ")", "\n", "plt", ".", "ylabel", "(", "'learning rate'", ")", "\n", "plt", ".", "title", "(", "'%s learning rate scheduling'", "%", "title", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.schedule_lr": [[253, 258], ["None"], "function", ["None"], ["", "def", "schedule_lr", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "\"\"\" adjust learning rate of a PyTorch optimizer \"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.LRMultiplier.__init__": [[40, 56], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "names", ":", "List", "[", "str", "]", ",", "compiled_regexes", ":", "List", ",", "\n", "ratios", ":", "List", "[", "float", "]", ")", ":", "\n", "        ", "\"\"\"multiplier\n        \n        Parameters\n        ----------\n        names : List[str]\n            name of group\n        filters : List\n            function for filter parameters by name (e.g. compiled regex with re package)\n        ratios : List[float]\n            multiplication ratio\n        \"\"\"", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "compiled_regexes", "=", "compiled_regexes", "\n", "self", ".", "ratios", "=", "ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.LRMultiplier.divide_into_param_groups": [[57, 69], ["lr_multiply.LRMultiplier.divide_into_param_groups"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.divide_into_param_groups"], ["", "def", "divide_into_param_groups", "(", "self", ",", "module", ":", "nn", ".", "Module", ")", ":", "\n", "        ", "\"\"\"divide into param_groups which need to be set to torch.optim.Optimizer\n        \n        Parameters\n        ----------\n        module : nn.Module\n            module whose parameters are to be divided\n        \"\"\"", "\n", "compiled_regexes", "=", "self", ".", "compiled_regexes", "\n", "param_groups", "=", "divide_into_param_groups", "(", "module", ",", "compiled_regexes", ")", "\n", "\n", "return", "param_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.LRMultiplier.multiply_lr": [[70, 81], ["lr_multiply.LRMultiplier.multiply_lr"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.multiply_lr"], ["", "def", "multiply_lr", "(", "self", ",", "optimizer", ":", "optim", ".", "Optimizer", ")", ":", "\n", "        ", "\"\"\"Multiply lr \n        \n        Parameters\n        ----------\n        optimizer : optim.Optimizer\n            \n        \"\"\"", "\n", "lr_ratios", "=", "self", ".", "ratios", "\n", "multiply_lr", "(", "optimizer", ",", "lr_ratios", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.build": [[11, 37], ["dict", "lr_multiply.LRMultiplier", "json.loads", "schedule[].append", "schedule[].append", "schedule[].append", "re.compile", "schedule[].append"], "function", ["None"], ["def", "build", "(", "cfg", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "\"\"\"Build lr multiplier\n    \n    Parameters\n    ----------\n    cfg : List[str]\n        list of JSON string, containing multiplier info (e.g. name, regex, ratio, etc.)\n    \n    Returns\n    -------\n    LRMultiplier\n        multiplier providing following operation: divide_into_param_groups and lr_multiply\n    \"\"\"", "\n", "schedule", "=", "dict", "(", "name", "=", "[", "]", ",", "regex", "=", "[", "]", ",", "ratio", "=", "[", "]", ",", "compiled_regex", "=", "[", "]", ")", "\n", "for", "mult_str", "in", "cfg", ":", "\n", "        ", "mult_cfg", "=", "json", ".", "loads", "(", "mult_str", ")", "\n", "schedule", "[", "\"name\"", "]", ".", "append", "(", "mult_cfg", "[", "\"name\"", "]", ")", "\n", "schedule", "[", "\"regex\"", "]", ".", "append", "(", "mult_cfg", "[", "\"regex\"", "]", ")", "\n", "schedule", "[", "\"ratio\"", "]", ".", "append", "(", "mult_cfg", "[", "\"ratio\"", "]", ")", "\n", "compiled_regex", "=", "re", ".", "compile", "(", "mult_cfg", "[", "\"regex\"", "]", ")", "\n", "schedule", "[", "\"compiled_regex\"", "]", ".", "append", "(", "compiled_regex", ")", "\n", "\n", "", "multipiler", "=", "LRMultiplier", "(", "schedule", "[", "\"name\"", "]", ",", "schedule", "[", "\"compiled_regex\"", "]", ",", "\n", "schedule", "[", "\"ratio\"", "]", ")", "\n", "\n", "return", "multipiler", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.divide_into_param_groups": [[83, 91], ["enumerate", "dict", "module.named_parameters", "range", "list", "len", "compiled_regex.search", "[].append"], "function", ["None"], ["", "", "def", "divide_into_param_groups", "(", "module", ",", "compiled_regexes", ")", ":", "\n", "    ", "param_groups", "=", "[", "dict", "(", "params", "=", "list", "(", ")", ",", ")", "for", "_", "in", "range", "(", "len", "(", "compiled_regexes", ")", ")", "]", "\n", "for", "ith", ",", "compiled_regex", "in", "enumerate", "(", "compiled_regexes", ")", ":", "\n", "        ", "for", "param_name", ",", "param", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "(", "compiled_regex", ".", "search", "(", "param_name", ")", "is", "not", "None", ")", ":", "\n", "                ", "param_groups", "[", "ith", "]", "[", "'params'", "]", ".", "append", "(", "param", ")", "\n", "\n", "", "", "", "return", "param_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.multiply_lr": [[93, 103], ["enumerate", "len", "len", "zip", "loguru.logger.info", "len"], "function", ["None"], ["", "def", "multiply_lr", "(", "optimizer", ",", "lr_ratios", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\" apply learning rate ratio for per-layer adjustment \"\"\"", "\n", "assert", "len", "(", "optimizer", ".", "param_groups", ")", "==", "len", "(", "lr_ratios", ")", "\n", "for", "ith", ",", "(", "param_group", ",", "\n", "lr_ratio", ")", "in", "enumerate", "(", "zip", "(", "optimizer", ".", "param_groups", ",", "lr_ratios", ")", ")", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "*=", "lr_ratio", "\n", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "\"%d params in param_group %d multiplied by ratio %.2g\"", "%", "\n", "(", "len", "(", "param_group", "[", "'params'", "]", ")", ",", "ith", ",", "lr_ratio", ")", ")", "\n", "", "", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.group_checkpoint_keys": [[7, 26], ["collections.defaultdict", "key.rfind", "groups[].extend"], "function", ["None"], ["def", "group_checkpoint_keys", "(", "keys", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    Group keys based on common prefixes. A prefix is the string up to the final\n    \".\" in each key.\n    Args:\n        keys (list[str]): list of parameter names, i.e. keys in the model\n            checkpoint dict.\n    Returns:\n        dict[list]: keys with common prefixes are grouped into lists.\n    \"\"\"", "\n", "groups", "=", "defaultdict", "(", "list", ")", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "pos", "=", "key", ".", "rfind", "(", "\".\"", ")", "\n", "if", "pos", ">=", "0", ":", "\n", "            ", "head", ",", "tail", "=", "key", "[", ":", "pos", "]", ",", "[", "key", "[", "pos", "+", "1", ":", "]", "]", "\n", "", "else", ":", "\n", "            ", "head", ",", "tail", "=", "key", ",", "[", "]", "\n", "", "groups", "[", "head", "]", ".", "extend", "(", "tail", ")", "\n", "", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.strip_prefix_if_present": [[28, 59], ["sorted", "state_dict.keys", "all", "state_dict.pop", "list", "metadata.keys", "metadata.pop", "len", "len", "key.startswith", "len", "len"], "function", ["None"], ["", "def", "strip_prefix_if_present", "(", "state_dict", ":", "Dict", "[", "str", ",", "Any", "]", ",", "prefix", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Strip the prefix in metadata, if any.\n    Args:\n        state_dict (OrderedDict): a state-dict to be loaded to the model.\n        prefix (str): prefix.\n    \"\"\"", "\n", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "len", "(", "key", ")", "==", "0", "or", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "\n", "\n", "", "for", "key", "in", "keys", ":", "\n", "        ", "newkey", "=", "key", "[", "len", "(", "prefix", ")", ":", "]", "\n", "state_dict", "[", "newkey", "]", "=", "state_dict", ".", "pop", "(", "key", ")", "\n", "\n", "# also strip the prefix in metadata, if any..", "\n", "", "try", ":", "\n", "        ", "metadata", "=", "state_dict", ".", "_metadata", "# pyre-ignore", "\n", "", "except", "AttributeError", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "for", "key", "in", "list", "(", "metadata", ".", "keys", "(", ")", ")", ":", "\n", "# for the metadata dict, the key can be:", "\n", "# '': for the DDP module, which we want to remove.", "\n", "# 'module': for the actual model.", "\n", "# 'module.xx.xx': for the rest.", "\n", "\n", "            ", "if", "len", "(", "key", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "newkey", "=", "key", "[", "len", "(", "prefix", ")", ":", "]", "\n", "metadata", "[", "newkey", "]", "=", "metadata", ".", "pop", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.get_missing_parameters_message": [[61, 75], ["load_state.group_checkpoint_keys", "group_checkpoint_keys.items"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.group_checkpoint_keys"], ["", "", "", "def", "get_missing_parameters_message", "(", "keys", ":", "List", "[", "str", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Get a logging-friendly message to report parameter names (keys) that are in\n    the model but not found in a checkpoint.\n    Args:\n        keys (list[str]): List of keys that were not found in the checkpoint.\n    Returns:\n        str: message.\n    \"\"\"", "\n", "groups", "=", "group_checkpoint_keys", "(", "keys", ")", "\n", "msg", "=", "\"Some model parameters are not in the checkpoint:\\n\"", "\n", "for", "k", ",", "v", "in", "groups", ".", "items", "(", ")", ":", "\n", "        ", "msg", "+=", "\"{}:{}\\n\"", ".", "format", "(", "k", ",", "v", ")", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.named_modules_with_dup": [[77, 89], ["model._modules.items", "load_state.named_modules_with_dup"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.named_modules_with_dup"], ["", "def", "named_modules_with_dup", "(", "model", ":", "nn", ".", "Module", ",", "\n", "prefix", ":", "str", "=", "\"\"", ")", "->", "Iterable", "[", "Tuple", "[", "str", ",", "nn", ".", "Module", "]", "]", ":", "\n", "    ", "\"\"\"\n    The same as `model.named_modules()`, except that it includes\n    duplicated modules that have more than one name.\n    \"\"\"", "\n", "yield", "prefix", ",", "model", "\n", "for", "name", ",", "module", "in", "model", ".", "_modules", ".", "items", "(", ")", ":", "# pyre-ignore", "\n", "        ", "if", "module", "is", "None", ":", "\n", "            ", "continue", "\n", "", "submodule_prefix", "=", "prefix", "+", "(", "\".\"", "if", "prefix", "else", "\"\"", ")", "+", "name", "\n", "yield", "from", "named_modules_with_dup", "(", "module", ",", "submodule_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.get_unexpected_parameters_message": [[91, 105], ["load_state.group_checkpoint_keys", "group_checkpoint_keys.items"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.group_checkpoint_keys"], ["", "", "def", "get_unexpected_parameters_message", "(", "keys", ":", "List", "[", "str", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Get a logging-friendly message to report parameter names (keys) that are in\n    the checkpoint but not found in the model.\n    Args:\n        keys (list[str]): List of keys that were not found in the model.\n    Returns:\n        str: message.\n    \"\"\"", "\n", "groups", "=", "group_checkpoint_keys", "(", "keys", ")", "\n", "msg", "=", "\"The checkpoint contains parameters not used by the model:\\n\"", "\n", "for", "k", ",", "v", "in", "groups", ".", "items", "(", ")", ":", "\n", "        ", "msg", "+=", "\"{}:{}\\n\"", ".", "format", "(", "k", ",", "v", ")", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.filter_reused_missing_keys": [[107, 126], ["set", "collections.defaultdict", "load_state.named_modules_with_dup", "collections.defaultdict.values", "list", "list", "list", "param_to_names[].add", "any", "module.named_parameters", "module.named_buffers", "all", "set.remove"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.named_modules_with_dup"], ["", "def", "filter_reused_missing_keys", "(", "model", ":", "nn", ".", "Module", ",", "keys", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Filter \"missing keys\" to not include keys that have been loaded with another name.\n    \"\"\"", "\n", "keyset", "=", "set", "(", "keys", ")", "\n", "param_to_names", "=", "defaultdict", "(", "set", ")", "# param -> names that points to it", "\n", "for", "module_prefix", ",", "module", "in", "named_modules_with_dup", "(", "model", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "list", "(", "module", ".", "named_parameters", "(", "recurse", "=", "False", ")", ")", "+", "list", "(", "\n", "module", ".", "named_buffers", "(", "recurse", "=", "False", ")", "# pyre-ignore", "\n", ")", ":", "\n", "            ", "full_name", "=", "(", "module_prefix", "+", "\".\"", "if", "module_prefix", "else", "\"\"", ")", "+", "name", "\n", "param_to_names", "[", "param", "]", ".", "add", "(", "full_name", ")", "\n", "", "", "for", "names", "in", "param_to_names", ".", "values", "(", ")", ":", "\n", "# if one name appears missing but its alias exists, then this", "\n", "# name is not considered missing", "\n", "        ", "if", "any", "(", "n", "in", "keyset", "for", "n", "in", "names", ")", "and", "not", "all", "(", "n", "in", "keyset", "\n", "for", "n", "in", "names", ")", ":", "\n", "            ", "[", "keyset", ".", "remove", "(", "n", ")", "for", "n", "in", "names", "if", "n", "in", "keyset", "]", "\n", "", "", "return", "list", "(", "keyset", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingSine.__init__": [[7, 10], ["torch.Module.__init__", "transformer_layers.SpatialPositionEncodingSine.init"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "score_size", ")", ":", "\n", "        ", "super", "(", "SpatialPositionEncodingSine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "position_encoding", "=", "self", ".", "init", "(", "d_model", ",", "score_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingSine.init": [[11, 35], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones.cumsum", "torch.ones.cumsum", "torch.ones.cumsum", "torch.ones.cumsum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute().contiguous", "torch.cat().permute().contiguous", "torch.cat().permute().contiguous", "torch.cat().permute().contiguous", "pos.unsqueeze.unsqueeze.unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "d_model", ",", "score_size", ")", ":", "\n", "        ", "eps", "=", "1e-6", "\n", "norm_scale", "=", "2", "*", "math", ".", "pi", "\n", "temperature", "=", "10000", "\n", "num_pos_feats", "=", "d_model", "//", "2", "\n", "\n", "ones", "=", "torch", ".", "ones", "(", "1", ",", "score_size", ",", "score_size", ")", "\n", "y_embed", "=", "ones", ".", "cumsum", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "x_embed", "=", "ones", ".", "cumsum", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# normalize", "\n", "y_embed", "=", "y_embed", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "eps", ")", "*", "norm_scale", "\n", "x_embed", "=", "x_embed", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "eps", ")", "*", "norm_scale", "\n", "\n", "dim_t", "=", "torch", ".", "arange", "(", "num_pos_feats", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "dim_t", "=", "temperature", "**", "(", "2", "*", "(", "dim_t", "//", "2", ")", "/", "num_pos_feats", ")", "\n", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_x", "=", "torch", ".", "stack", "(", "(", "pos_x", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos_y", "=", "torch", ".", "stack", "(", "(", "pos_y", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_y", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# B, C, H, W", "\n", "pos", "=", "pos", ".", "unsqueeze", "(", "1", ")", "# B, C, H, W", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingSine.forward": [[36, 44], ["len", "transformer_layers.SpatialPositionEncodingSine.position_encoding.to", "len", "transformer_layers.SpatialPositionEncodingSine.position_encoding.to().unsqueeze", "ValueError", "transformer_layers.SpatialPositionEncodingSine.position_encoding.to"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", "==", "4", ":", "\n", "            ", "pos", "=", "self", ".", "position_encoding", ".", "to", "(", "x", ".", "device", ")", "\n", "", "elif", "len", "(", "x", ".", "shape", ")", "==", "5", ":", "\n", "            ", "pos", "=", "self", ".", "position_encoding", ".", "to", "(", "x", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'The shape [{}] of input is invalid'", ".", "format", "(", "x", ".", "shape", ")", ")", "\n", "", "return", "x", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingLearned.__init__": [[47, 54], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "transformer_layers.SpatialPositionEncodingLearned.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "score_size", ")", ":", "\n", "        ", "super", "(", "SpatialPositionEncodingLearned", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "row_embed", "=", "nn", ".", "Embedding", "(", "score_size", ",", "d_model", "//", "2", ")", "\n", "self", ".", "col_embed", "=", "nn", ".", "Embedding", "(", "score_size", ",", "d_model", "//", "2", ")", "\n", "self", ".", "spatial_size", "=", "score_size", "\n", "self", ".", "pos", "=", "None", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingLearned.reset_parameters": [[55, 58], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "row_embed", ".", "weight", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "col_embed", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingLearned.get_position_encoding": [[59, 69], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "transformer_layers.SpatialPositionEncodingLearned.col_embed", "transformer_layers.SpatialPositionEncodingLearned.row_embed", "torch.cat().permute().unsqueeze().contiguous", "torch.cat().permute().unsqueeze().contiguous", "torch.cat().permute().unsqueeze().contiguous", "torch.cat().permute().unsqueeze().contiguous", "torch.cat().permute().unsqueeze", "torch.cat().permute().unsqueeze", "torch.cat().permute().unsqueeze", "torch.cat().permute().unsqueeze", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer_layers.SpatialPositionEncodingLearned.unsqueeze().repeat", "transformer_layers.SpatialPositionEncodingLearned.unsqueeze().repeat", "transformer_layers.SpatialPositionEncodingLearned.unsqueeze", "transformer_layers.SpatialPositionEncodingLearned.unsqueeze"], "methods", ["None"], ["", "def", "get_position_encoding", "(", "self", ",", "x", ")", ":", "\n", "        ", "i", "=", "torch", ".", "arange", "(", "self", ".", "spatial_size", ",", "device", "=", "x", ".", "device", ")", "\n", "j", "=", "torch", ".", "arange", "(", "self", ".", "spatial_size", ",", "device", "=", "x", ".", "device", ")", "\n", "x_emb", "=", "self", ".", "col_embed", "(", "i", ")", "\n", "y_emb", "=", "self", ".", "row_embed", "(", "j", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "\n", "x_emb", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "self", ".", "spatial_size", ",", "1", ",", "1", ")", ",", "\n", "y_emb", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "spatial_size", ",", "1", ")", ",", "\n", "]", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", "# 1, C, H, W", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingLearned.forward": [[70, 77], ["transformer_layers.SpatialPositionEncodingLearned.get_position_encoding", "transformer_layers.SpatialPositionEncodingLearned.get_position_encoding"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingLearned.get_position_encoding", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.SpatialPositionEncodingLearned.get_position_encoding"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "pos", "=", "self", ".", "get_position_encoding", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pos", "is", "None", ":", "\n", "                ", "self", ".", "pos", "=", "self", ".", "get_position_encoding", "(", "x", ")", "\n", "", "", "return", "x", "+", "self", ".", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.TemporalPositionEncoding.__init__": [[80, 83], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ")", ":", "\n", "        ", "super", "(", "TemporalPositionEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.TemporalPositionEncoding.forward": [[84, 94], ["torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.pow().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "sinusoid_table[].sin", "sinusoid_table[].cos", "sinusoid_table.permute().contiguous.permute().contiguous.permute().contiguous", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "sinusoid_table.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ic", "=", "torch", ".", "arange", "(", "self", ".", "d_model", ",", "device", "=", "x", ".", "device", ")", ".", "float", "(", ")", "\n", "dem", "=", "torch", ".", "pow", "(", "10000", ",", "2", "*", "(", "ic", "//", "2", ")", "/", "self", ".", "d_model", ")", ".", "unsqueeze", "(", "0", ")", "\n", "it", "=", "torch", ".", "arange", "(", "x", ".", "shape", "[", "1", "]", ",", "device", "=", "x", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "sinusoid_table", "=", "it", "/", "dem", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", "\n", "sinusoid_table", "=", "sinusoid_table", "[", "None", ",", ":", ",", "None", ",", "None", ",", ":", "]", "# B, T, 1, 1, C", "\n", "sinusoid_table", "=", "sinusoid_table", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "# B, T, C, 1, 1", "\n", "return", "x", "+", "sinusoid_table", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.ScaledDotProductAttention.__init__": [[99, 103], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.ScaledDotProductAttention.forward": [[104, 115], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "transformer_layers.ScaledDotProductAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "k.transpose", "attn.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "        ", "attn", "=", "torch", ".", "matmul", "(", "q", "/", "self", ".", "temperature", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "# B, #heads, THW, (T)HW", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "attn", "=", "self", ".", "dropout", "(", "torch", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.MultiHeadAttention.__init__": [[120, 137], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "transformer_layers.ScaledDotProductAttention", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm", "transformer_layers.MultiHeadAttention._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.PositionWiseFeedForward._reset_parameters"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "d_k", "**", "0.5", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.MultiHeadAttention._reset_parameters": [[138, 147], ["transformer_layers.MultiHeadAttention.modules", "isinstance", "math.sqrt", "hasattr", "p.weight.data.uniform_", "hasattr", "p.bias.data.fill_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "p", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "p", ".", "in_features", "\n", "y", "=", "1.0", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "if", "hasattr", "(", "p", ",", "\"weight\"", ")", "and", "p", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "p", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "y", ",", "y", ")", "\n", "", "if", "hasattr", "(", "p", ",", "\"bias\"", ")", "and", "p", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "p", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.MultiHeadAttention.forward": [[148, 175], ["transformer_layers.MultiHeadAttention.w_qs().view().transpose().contiguous", "transformer_layers.MultiHeadAttention.w_ks().view().transpose().contiguous", "transformer_layers.MultiHeadAttention.w_vs().view().transpose().contiguous", "transformer_layers.MultiHeadAttention.attention", "transformer_layers.MultiHeadAttention.transpose().contiguous().view", "transformer_layers.MultiHeadAttention.dropout", "transformer_layers.MultiHeadAttention.layer_norm", "mask.unsqueeze.unsqueeze.unsqueeze", "transformer_layers.MultiHeadAttention.fc", "transformer_layers.MultiHeadAttention.w_qs().view().transpose", "transformer_layers.MultiHeadAttention.w_ks().view().transpose", "transformer_layers.MultiHeadAttention.w_vs().view().transpose", "transformer_layers.MultiHeadAttention.transpose().contiguous", "transformer_layers.MultiHeadAttention.w_qs().view", "transformer_layers.MultiHeadAttention.w_ks().view", "transformer_layers.MultiHeadAttention.w_vs().view", "transformer_layers.MultiHeadAttention.transpose", "transformer_layers.MultiHeadAttention.w_qs", "transformer_layers.MultiHeadAttention.w_ks", "transformer_layers.MultiHeadAttention.w_vs"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "# q: B, THW, C", "\n", "# k: B, HW, C", "\n", "# k: B, HW, C", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "\n", "residual", "=", "q", "\n", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "*", "q", ".", "shape", "[", ":", "2", "]", ",", "n_head", ",", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "*", "k", ".", "shape", "[", ":", "2", "]", ",", "n_head", ",", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "*", "v", ".", "shape", "[", ":", "2", "]", ",", "n_head", ",", "d_v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Transpose for attention dot product: [B, #heads, THW, d_k/d_v]", "\n", "# q, k, v = q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2)", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# For head axis broadcasting.", "\n", "\n", "", "out", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "out", "=", "out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "*", "residual", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "out", ")", ")", "\n", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "layer_norm", "(", "out", ")", "\n", "\n", "return", "out", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.PositionWiseFeedForward.__init__": [[180, 187], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "transformer_layers.PositionWiseFeedForward._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.PositionWiseFeedForward._reset_parameters"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_in", ",", "d_hid", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_hid", ",", "d_in", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.PositionWiseFeedForward._reset_parameters": [[188, 197], ["transformer_layers.PositionWiseFeedForward.modules", "isinstance", "math.sqrt", "hasattr", "p.weight.data.uniform_", "hasattr", "p.bias.data.fill_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "p", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "p", ".", "in_features", "\n", "y", "=", "1.0", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "if", "hasattr", "(", "p", ",", "\"weight\"", ")", "and", "p", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "p", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "y", ",", "y", ")", "\n", "", "if", "hasattr", "(", "p", ",", "\"bias\"", ")", "and", "p", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "p", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.transformer_layers.PositionWiseFeedForward.forward": [[198, 208], ["transformer_layers.PositionWiseFeedForward.w_2", "transformer_layers.PositionWiseFeedForward.dropout", "transformer_layers.PositionWiseFeedForward.layer_norm", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "transformer_layers.PositionWiseFeedForward.w_1"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "x", "=", "self", ".", "w_2", "(", "torch", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "+=", "residual", "\n", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk.MultiHeadAttentionTopK.__init__": [[13, 27], ["torch.MultiheadAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "top_k", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "add_bias_kv", "=", "False", ",", "add_zero_attn", "=", "False", ",", "\n", "kdim", "=", "None", ",", "vdim", "=", "None", ",", "batch_first", "=", "False", ",", "device", "=", "None", ",", "dtype", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "MultiHeadAttentionTopK", ",", "self", ")", ".", "__init__", "(", "embed_dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bias", "=", "bias", ",", "\n", "add_bias_kv", "=", "add_bias_kv", ",", "\n", "add_zero_attn", "=", "add_zero_attn", ",", "\n", "kdim", "=", "kdim", ",", "\n", "vdim", "=", "vdim", ",", "\n", "batch_first", "=", "batch_first", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "dtype", ")", "\n", "self", ".", "top_k", "=", "top_k", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk.MultiHeadAttentionTopK.forward": [[28, 97], ["multi_head_attention_topk.multi_head_attention_forward_topk", "multi_head_attention_topk.multi_head_attention_forward_topk", "x.transpose", "attn_output.transpose"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk.multi_head_attention_forward_topk", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk.multi_head_attention_forward_topk"], ["", "def", "forward", "(", "self", ",", "query", ":", "Tensor", ",", "key", ":", "Tensor", ",", "value", ":", "Tensor", ",", "key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "need_weights", ":", "bool", "=", "True", ",", "attn_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tuple", "[", "Tensor", ",", "Optional", "[", "Tensor", "]", "]", ":", "\n", "        ", "r\"\"\"\n    Args:\n        query, key, value: map a query and a set of key-value pairs to an output.\n            See \"Attention Is All You Need\" for more details.\n        key_padding_mask: if provided, specified padding elements in the key will\n            be ignored by the attention. When given a binary mask and a value is True,\n            the corresponding value on the attention layer will be ignored. When given\n            a byte mask and a value is non-zero, the corresponding value on the attention\n            layer will be ignored\n        need_weights: output attn_output_weights.\n        attn_mask: 2D or 3D mask that prevents attention to certain positions. A 2D mask will be broadcasted for all\n            the batches while a 3D mask allows to specify a different mask for the entries of each batch.\n\n    Shapes for inputs:\n        - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is\n          the embedding dimension. :math:`(N, L, E)` if ``batch_first`` is ``True``.\n        - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is\n          the embedding dimension. :math:`(N, S, E)` if ``batch_first`` is ``True``.\n        - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is\n          the embedding dimension. :math:`(N, S, E)` if ``batch_first`` is ``True``.\n        - key_padding_mask: :math:`(N, S)` where N is the batch size, S is the source sequence length.\n          If a ByteTensor is provided, the non-zero positions will be ignored while the position\n          with the zero positions will be unchanged. If a BoolTensor is provided, the positions with the\n          value of ``True`` will be ignored while the position with the value of ``False`` will be unchanged.\n        - attn_mask: if a 2D mask: :math:`(L, S)` where L is the target sequence length, S is the\n          source sequence length.\n\n          If a 3D mask: :math:`(N\\cdot\\text{num\\_heads}, L, S)` where N is the batch size, L is the target sequence\n          length, S is the source sequence length. ``attn_mask`` ensure that position i is allowed to attend\n          the unmasked positions. If a ByteTensor is provided, the non-zero positions are not allowed to attend\n          while the zero positions will be unchanged. If a BoolTensor is provided, positions with ``True``\n          is not allowed to attend while ``False`` values will be unchanged. If a FloatTensor\n          is provided, it will be added to the attention weight.\n\n    Shapes for outputs:\n        - attn_output: :math:`(L, N, E)` where L is the target sequence length, N is the batch size,\n          E is the embedding dimension. :math:`(N, L, E)` if ``batch_first`` is ``True``.\n        - attn_output_weights: :math:`(N, L, S)` where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n        \"\"\"", "\n", "if", "self", ".", "batch_first", ":", "\n", "            ", "query", ",", "key", ",", "value", "=", "[", "x", ".", "transpose", "(", "1", ",", "0", ")", "for", "x", "in", "(", "query", ",", "key", ",", "value", ")", "]", "\n", "\n", "", "if", "not", "self", ".", "_qkv_same_embed_dim", ":", "\n", "            ", "attn_output", ",", "attn_output_weights", "=", "multi_head_attention_forward_topk", "(", "\n", "query", ",", "key", ",", "value", ",", "self", ".", "embed_dim", ",", "self", ".", "num_heads", ",", "self", ".", "top_k", ",", "\n", "self", ".", "in_proj_weight", ",", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "self", ".", "bias_v", ",", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "self", ".", "out_proj", ".", "weight", ",", "self", ".", "out_proj", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ",", "use_separate_proj_weight", "=", "True", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj_weight", ",", "k_proj_weight", "=", "self", ".", "k_proj_weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj_weight", ")", "\n", "", "else", ":", "\n", "            ", "attn_output", ",", "attn_output_weights", "=", "multi_head_attention_forward_topk", "(", "\n", "query", ",", "key", ",", "value", ",", "self", ".", "embed_dim", ",", "self", ".", "num_heads", ",", "self", ".", "top_k", ",", "\n", "self", ".", "in_proj_weight", ",", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "self", ".", "bias_v", ",", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "self", ".", "out_proj", ".", "weight", ",", "self", ".", "out_proj", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ")", "\n", "", "if", "self", ".", "batch_first", ":", "\n", "            ", "return", "attn_output", ".", "transpose", "(", "1", ",", "0", ")", ",", "attn_output_weights", "\n", "", "else", ":", "\n", "            ", "return", "attn_output", ",", "attn_output_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk._in_projection_packed": [[99, 153], ["q.size", "w.chunk", "torch.linear().chunk", "w.split", "b.chunk", "torch.linear", "torch.linear", "torch.linear", "b.split", "torch.linear().chunk", "torch.linear", "torch.linear", "torch.linear"], "function", ["None"], ["", "", "", "def", "_in_projection_packed", "(", "\n", "q", ":", "Tensor", ",", "\n", "k", ":", "Tensor", ",", "\n", "v", ":", "Tensor", ",", "\n", "w", ":", "Tensor", ",", "\n", "b", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "    ", "r\"\"\"\n    Performs the in-projection step of the attention operation, using packed weights.\n    Output is a triple containing projection tensors for query, key and value.\n\n    Args:\n        q, k, v: query, key and value tensors to be projected. For self-attention,\n            these are typically the same tensor; for encoder-decoder attention,\n            k and v are typically the same tensor. (We take advantage of these\n            identities for performance if they are present.) Regardless, q, k and v\n            must share a common embedding dimension; otherwise their shapes may vary.\n        w: projection weights for q, k and v, packed into a single tensor. Weights\n            are packed along dimension 0, in q, k, v order.\n        b: optional projection biases for q, k and v, packed into a single tensor\n            in q, k, v order.\n\n    Shape:\n        Inputs:\n        - q: :math:`(..., E)` where E is the embedding dimension\n        - k: :math:`(..., E)` where E is the embedding dimension\n        - v: :math:`(..., E)` where E is the embedding dimension\n        - w: :math:`(E * 3, E)` where E is the embedding dimension\n        - b: :math:`E * 3` where E is the embedding dimension\n\n        Output:\n        - in output list :math:`[q', k', v']`, each output tensor will have the\n            same shape as the corresponding input tensor.\n    \"\"\"", "\n", "E", "=", "q", ".", "size", "(", "-", "1", ")", "\n", "if", "k", "is", "v", ":", "\n", "        ", "if", "q", "is", "k", ":", "\n", "# self-attention", "\n", "            ", "return", "F", ".", "linear", "(", "q", ",", "w", ",", "b", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# encoder-decoder attention", "\n", "            ", "w_q", ",", "w_kv", "=", "w", ".", "split", "(", "[", "E", ",", "E", "*", "2", "]", ")", "\n", "if", "b", "is", "None", ":", "\n", "                ", "b_q", "=", "b_kv", "=", "None", "\n", "", "else", ":", "\n", "                ", "b_q", ",", "b_kv", "=", "b", ".", "split", "(", "[", "E", ",", "E", "*", "2", "]", ")", "\n", "", "return", "(", "F", ".", "linear", "(", "q", ",", "w_q", ",", "b_q", ")", ",", ")", "+", "F", ".", "linear", "(", "k", ",", "w_kv", ",", "b_kv", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "w_q", ",", "w_k", ",", "w_v", "=", "w", ".", "chunk", "(", "3", ")", "\n", "if", "b", "is", "None", ":", "\n", "            ", "b_q", "=", "b_k", "=", "b_v", "=", "None", "\n", "", "else", ":", "\n", "            ", "b_q", ",", "b_k", ",", "b_v", "=", "b", ".", "chunk", "(", "3", ")", "\n", "", "return", "F", ".", "linear", "(", "q", ",", "w_q", ",", "b_q", ")", ",", "F", ".", "linear", "(", "k", ",", "w_k", ",", "b_k", ")", ",", "F", ".", "linear", "(", "v", ",", "w_v", ",", "b_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk._in_projection": [[155, 206], ["q.size", "k.size", "v.size", "torch.linear", "torch.linear", "torch.linear"], "function", ["None"], ["", "", "def", "_in_projection", "(", "\n", "q", ":", "Tensor", ",", "\n", "k", ":", "Tensor", ",", "\n", "v", ":", "Tensor", ",", "\n", "w_q", ":", "Tensor", ",", "\n", "w_k", ":", "Tensor", ",", "\n", "w_v", ":", "Tensor", ",", "\n", "b_q", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "b_k", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "b_v", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "    ", "r\"\"\"\n    Performs the in-projection step of the attention operation. This is simply\n    a triple of linear projections, with shape constraints on the weights which\n    ensure embedding dimension uniformity in the projected outputs.\n    Output is a triple containing projection tensors for query, key and value.\n\n    Args:\n        q, k, v: query, key and value tensors to be projected.\n        w_q, w_k, w_v: weights for q, k and v, respectively.\n        b_q, b_k, b_v: optional biases for q, k and v, respectively.\n\n    Shape:\n        Inputs:\n        - q: :math:`(Qdims..., Eq)` where Eq is the query embedding dimension and Qdims are any\n            number of leading dimensions.\n        - k: :math:`(Kdims..., Ek)` where Ek is the key embedding dimension and Kdims are any\n            number of leading dimensions.\n        - v: :math:`(Vdims..., Ev)` where Ev is the value embedding dimension and Vdims are any\n            number of leading dimensions.\n        - w_q: :math:`(Eq, Eq)`\n        - w_k: :math:`(Eq, Ek)`\n        - w_v: :math:`(Eq, Ev)`\n        - b_q: :math:`(Eq)`\n        - b_k: :math:`(Eq)`\n        - b_v: :math:`(Eq)`\n\n        Output: in output triple :math:`(q', k', v')`,\n         - q': :math:`[Qdims..., Eq]`\n         - k': :math:`[Kdims..., Eq]`\n         - v': :math:`[Vdims..., Eq]`\n\n    \"\"\"", "\n", "Eq", ",", "Ek", ",", "Ev", "=", "q", ".", "size", "(", "-", "1", ")", ",", "k", ".", "size", "(", "-", "1", ")", ",", "v", ".", "size", "(", "-", "1", ")", "\n", "assert", "w_q", ".", "shape", "==", "(", "Eq", ",", "Eq", ")", ",", "f\"expecting query weights shape of {(Eq, Eq)}, but got {w_q.shape}\"", "\n", "assert", "w_k", ".", "shape", "==", "(", "Eq", ",", "Ek", ")", ",", "f\"expecting key weights shape of {(Eq, Ek)}, but got {w_k.shape}\"", "\n", "assert", "w_v", ".", "shape", "==", "(", "Eq", ",", "Ev", ")", ",", "f\"expecting value weights shape of {(Eq, Ev)}, but got {w_v.shape}\"", "\n", "assert", "b_q", "is", "None", "or", "b_q", ".", "shape", "==", "(", "Eq", ",", ")", ",", "f\"expecting query bias shape of {(Eq,)}, but got {b_q.shape}\"", "\n", "assert", "b_k", "is", "None", "or", "b_k", ".", "shape", "==", "(", "Eq", ",", ")", ",", "f\"expecting key bias shape of {(Eq,)}, but got {b_k.shape}\"", "\n", "assert", "b_v", "is", "None", "or", "b_v", ".", "shape", "==", "(", "Eq", ",", ")", ",", "f\"expecting value bias shape of {(Eq,)}, but got {b_v.shape}\"", "\n", "return", "F", ".", "linear", "(", "q", ",", "w_q", ",", "b_q", ")", ",", "F", ".", "linear", "(", "k", ",", "w_k", ",", "b_k", ")", ",", "F", ".", "linear", "(", "v", ",", "w_v", ",", "b_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk._scaled_dot_product_attention_topk": [[208, 267], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "math.sqrt", "k.transpose", "torch.softmax", "isinstance", "torch.topk", "torch.topk", "torch.topk", "torch.max", "torch.max", "torch.max", "torch.softmax", "torch.softmax", "torch.softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.scatter", "torch.scatter", "torch.scatter", "torch.dropout", "type"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax"], ["", "def", "_scaled_dot_product_attention_topk", "(", "\n", "q", ":", "Tensor", ",", "\n", "k", ":", "Tensor", ",", "\n", "v", ":", "Tensor", ",", "\n", "top_k", ":", "int", "=", "None", ",", "\n", "attn_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "dropout_p", ":", "float", "=", "0.0", ",", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "    ", "r\"\"\"\n    Computes scaled dot product attention on query, key and value tensors, using\n    an optional attention mask if passed, and applying dropout if a probability\n    greater than 0.0 is specified.\n    Returns a tensor pair containing attended values and attention weights.\n\n    Args:\n        q, k, v: query, key and value tensors. See Shape section for shape details.\n        attn_mask: optional tensor containing mask values to be added to calculated\n            attention. May be 2D or 3D; see Shape section for details.\n        dropout_p: dropout probability. If greater than 0.0, dropout is applied.\n\n    Shape:\n        - q: :math:`(B, Nt, E)` where B is batch size, Nt is the target sequence length,\n            and E is embedding dimension.\n        - key: :math:`(B, Ns, E)` where B is batch size, Ns is the source sequence length,\n            and E is embedding dimension.\n        - value: :math:`(B, Ns, E)` where B is batch size, Ns is the source sequence length,\n            and E is embedding dimension.\n        - attn_mask: either a 3D tensor of shape :math:`(B, Nt, Ns)` or a 2D tensor of\n            shape :math:`(Nt, Ns)`.\n\n        - Output: attention values have shape :math:`(B, Nt, E)`; attention weights\n            have shape :math:`(B, Nt, Ns)`\n    \"\"\"", "\n", "B", ",", "Nt", ",", "E", "=", "q", ".", "shape", "\n", "q", "=", "q", "/", "math", ".", "sqrt", "(", "E", ")", "\n", "# (B, Nt, E) x (B, E, Ns) -> (B, Nt, Ns)", "\n", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "        ", "attn", "+=", "attn_mask", "\n", "", "if", "top_k", "is", "None", ":", "\n", "        ", "attn", "=", "F", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "top_k", ",", "int", ")", ",", "\"type of top_k ({}) must be int.\"", ".", "format", "(", "type", "(", "top_k", ")", ")", "\n", "assert", "top_k", ">", "0", ",", "\"top_k ({}) must be a positive integer.\"", ".", "format", "(", "top_k", ")", "\n", "attn_topk", ",", "indices", "=", "torch", ".", "topk", "(", "attn", ",", "k", "=", "top_k", ",", "dim", "=", "-", "1", ")", "\n", "max_vals", ",", "_", "=", "torch", ".", "max", "(", "attn_topk", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# attn_topk_exp = torch.exp(attn_topk - max_vals)", "\n", "# attn_topk_exp_sum = torch.sum(attn_topk_exp, dim=-1, keepdim=True)", "\n", "# attn_topk_softmax /= (attn_topk_exp_sum + 1e-6)", "\n", "attn_topk_softmax", "=", "torch", ".", "softmax", "(", "attn_topk", "-", "max_vals", ",", "dim", "=", "-", "1", ")", "\n", "new_attn", "=", "torch", ".", "zeros_like", "(", "attn", ",", "dtype", "=", "attn", ".", "dtype", ",", "device", "=", "attn", ".", "device", ",", "requires_grad", "=", "True", ")", "\n", "new_attn", "=", "torch", ".", "scatter", "(", "new_attn", ",", "-", "1", ",", "indices", ",", "attn_topk_softmax", ")", "\n", "attn", "=", "new_attn", "\n", "\n", "", "if", "dropout_p", ">", "0.0", ":", "\n", "        ", "attn", "=", "F", ".", "dropout", "(", "attn", ",", "p", "=", "dropout_p", ")", "\n", "# (B, Nt, Ns) x (B, Ns, E) -> (B, Nt, E)", "\n", "", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk.multi_head_attention_forward_topk": [[269, 526], ["torch.overrides.has_torch_function", "isinstance", "q.contiguous().view().transpose.contiguous().view().transpose", "torch.cat.size", "multi_head_attention_topk._scaled_dot_product_attention_topk", "F.linear.transpose().contiguous().view", "torch.linear", "torch.overrides.handle_torch_function", "embed_dim.div", "multi_head_attention_topk._in_projection_packed", "multi_head_attention_topk._in_projection", "warnings.warn", "F.pad.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "F.pad.view().expand().reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.masked_fill_", "attn_output_weights.view.view", "in_proj_bias.chunk", "warnings.warn", "attn_mask.masked_fill.to", "attn_mask.masked_fill.dim", "attn_mask.masked_fill.unsqueeze", "torch.pad", "torch.pad", "q.contiguous().view().transpose.contiguous().view", "static_k.size", "static_k.size", "static_v.size", "static_v.size", "torch.pad", "torch.pad", "float", "F.linear.transpose().contiguous", "attn_mask.masked_fill.is_floating_point", "RuntimeError", "attn_mask.masked_fill.dim", "RuntimeError", "bias_k.repeat", "bias_v.repeat", "torch.cat.contiguous().view", "static_k.size", "static_k.size", "torch.cat.contiguous().view", "static_v.size", "static_v.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "F.pad.view().expand", "attn_mask.masked_fill.logical_or", "attn_mask.masked_fill.masked_fill", "attn_output_weights.view.sum", "RuntimeError", "q.contiguous().view().transpose.contiguous", "float", "F.linear.transpose", "torch.cat.contiguous", "torch.cat.contiguous", "F.pad.view", "attn_mask.masked_fill.dim"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk._scaled_dot_product_attention_topk", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.div", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk._in_projection_packed", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.multi_head_attention_topk._in_projection"], ["", "def", "multi_head_attention_forward_topk", "(", "\n", "query", ":", "Tensor", ",", "\n", "key", ":", "Tensor", ",", "\n", "value", ":", "Tensor", ",", "\n", "embed_dim_to_check", ":", "int", ",", "\n", "num_heads", ":", "int", ",", "\n", "top_k", ":", "int", ",", "\n", "in_proj_weight", ":", "Tensor", ",", "\n", "in_proj_bias", ":", "Optional", "[", "Tensor", "]", ",", "\n", "bias_k", ":", "Optional", "[", "Tensor", "]", ",", "\n", "bias_v", ":", "Optional", "[", "Tensor", "]", ",", "\n", "add_zero_attn", ":", "bool", ",", "\n", "dropout_p", ":", "float", ",", "\n", "out_proj_weight", ":", "Tensor", ",", "\n", "out_proj_bias", ":", "Optional", "[", "Tensor", "]", ",", "\n", "training", ":", "bool", "=", "True", ",", "\n", "key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "need_weights", ":", "bool", "=", "True", ",", "\n", "attn_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "use_separate_proj_weight", ":", "bool", "=", "False", ",", "\n", "q_proj_weight", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "k_proj_weight", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "v_proj_weight", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "static_k", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "static_v", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Optional", "[", "Tensor", "]", "]", ":", "\n", "    ", "r\"\"\"\n    Args:\n        query, key, value: map a query and a set of key-value pairs to an output.\n            See \"Attention Is All You Need\" for more details.\n        embed_dim_to_check: total dimension of the model.\n        num_heads: parallel attention heads.\n        in_proj_weight, in_proj_bias: input projection weight and bias.\n        bias_k, bias_v: bias of the key and value sequences to be added at dim=0.\n        add_zero_attn: add a new batch of zeros to the key and\n                       value sequences at dim=1.\n        dropout_p: probability of an element to be zeroed.\n        out_proj_weight, out_proj_bias: the output projection weight and bias.\n        training: apply dropout if is ``True``.\n        key_padding_mask: if provided, specified padding elements in the key will\n            be ignored by the attention. This is an binary mask. When the value is True,\n            the corresponding value on the attention layer will be filled with -inf.\n        need_weights: output attn_output_weights.\n        attn_mask: 2D or 3D mask that prevents attention to certain positions. A 2D mask will be broadcasted for all\n            the batches while a 3D mask allows to specify a different mask for the entries of each batch.\n        use_separate_proj_weight: the function accept the proj. weights for query, key,\n            and value in different forms. If false, in_proj_weight will be used, which is\n            a combination of q_proj_weight, k_proj_weight, v_proj_weight.\n        q_proj_weight, k_proj_weight, v_proj_weight, in_proj_bias: input projection weight and bias.\n        static_k, static_v: static key and value used for attention operators.\n\n\n    Shape:\n        Inputs:\n        - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key_padding_mask: :math:`(N, S)` where N is the batch size, S is the source sequence length.\n          If a ByteTensor is provided, the non-zero positions will be ignored while the zero positions\n          will be unchanged. If a BoolTensor is provided, the positions with the\n          value of ``True`` will be ignored while the position with the value of ``False`` will be unchanged.\n        - attn_mask: 2D mask :math:`(L, S)` where L is the target sequence length, S is the source sequence length.\n          3D mask :math:`(N*num_heads, L, S)` where N is the batch size, L is the target sequence length,\n          S is the source sequence length. attn_mask ensures that position i is allowed to attend the unmasked\n          positions. If a ByteTensor is provided, the non-zero positions are not allowed to attend\n          while the zero positions will be unchanged. If a BoolTensor is provided, positions with ``True``\n          are not allowed to attend while ``False`` values will be unchanged. If a FloatTensor\n          is provided, it will be added to the attention weight.\n        - static_k: :math:`(N*num_heads, S, E/num_heads)`, where S is the source sequence length,\n          N is the batch size, E is the embedding dimension. E/num_heads is the head dimension.\n        - static_v: :math:`(N*num_heads, S, E/num_heads)`, where S is the source sequence length,\n          N is the batch size, E is the embedding dimension. E/num_heads is the head dimension.\n\n        Outputs:\n        - attn_output: :math:`(L, N, E)` where L is the target sequence length, N is the batch size,\n          E is the embedding dimension.\n        - attn_output_weights: :math:`(N, L, S)` where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n    \"\"\"", "\n", "tens_ops", "=", "(", "query", ",", "key", ",", "value", ",", "in_proj_weight", ",", "in_proj_bias", ",", "bias_k", ",", "bias_v", ",", "out_proj_weight", ",", "out_proj_bias", ")", "\n", "if", "has_torch_function", "(", "tens_ops", ")", ":", "\n", "        ", "return", "handle_torch_function", "(", "\n", "multi_head_attention_forward", ",", "\n", "tens_ops", ",", "\n", "query", ",", "\n", "key", ",", "\n", "value", ",", "\n", "embed_dim_to_check", ",", "\n", "num_heads", ",", "\n", "in_proj_weight", ",", "\n", "in_proj_bias", ",", "\n", "bias_k", ",", "\n", "bias_v", ",", "\n", "add_zero_attn", ",", "\n", "dropout_p", ",", "\n", "out_proj_weight", ",", "\n", "out_proj_bias", ",", "\n", "training", "=", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "\n", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "use_separate_proj_weight", "=", "use_separate_proj_weight", ",", "\n", "q_proj_weight", "=", "q_proj_weight", ",", "\n", "k_proj_weight", "=", "k_proj_weight", ",", "\n", "v_proj_weight", "=", "v_proj_weight", ",", "\n", "static_k", "=", "static_k", ",", "\n", "static_v", "=", "static_v", ",", "\n", ")", "\n", "\n", "# set up shape vars", "\n", "", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "shape", "\n", "src_len", ",", "_", ",", "_", "=", "key", ".", "shape", "\n", "assert", "embed_dim", "==", "embed_dim_to_check", ",", "f\"was expecting embedding dimension of {embed_dim_to_check}, but got {embed_dim}\"", "\n", "if", "isinstance", "(", "embed_dim", ",", "torch", ".", "Tensor", ")", ":", "\n", "# embed_dim can be a tensor when JIT tracing", "\n", "        ", "head_dim", "=", "embed_dim", ".", "div", "(", "num_heads", ",", "rounding_mode", "=", "'trunc'", ")", "\n", "", "else", ":", "\n", "        ", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "", "assert", "head_dim", "*", "num_heads", "==", "embed_dim", ",", "f\"embed_dim {embed_dim} not divisible by num_heads {num_heads}\"", "\n", "if", "use_separate_proj_weight", ":", "\n", "# allow MHA to have different embedding dimensions when separate projection weights are used", "\n", "        ", "assert", "key", ".", "shape", "[", ":", "2", "]", "==", "value", ".", "shape", "[", ":", "2", "]", ",", "f\"key's sequence and batch dims {key.shape[:2]} do not match value's {value.shape[:2]}\"", "\n", "", "else", ":", "\n", "        ", "assert", "key", ".", "shape", "==", "value", ".", "shape", ",", "f\"key shape {key.shape} does not match value shape {value.shape}\"", "\n", "\n", "#", "\n", "# compute in-projection", "\n", "#", "\n", "", "if", "not", "use_separate_proj_weight", ":", "\n", "        ", "q", ",", "k", ",", "v", "=", "_in_projection_packed", "(", "query", ",", "key", ",", "value", ",", "in_proj_weight", ",", "in_proj_bias", ")", "\n", "", "else", ":", "\n", "        ", "assert", "q_proj_weight", "is", "not", "None", ",", "\"use_separate_proj_weight is True but q_proj_weight is None\"", "\n", "assert", "k_proj_weight", "is", "not", "None", ",", "\"use_separate_proj_weight is True but k_proj_weight is None\"", "\n", "assert", "v_proj_weight", "is", "not", "None", ",", "\"use_separate_proj_weight is True but v_proj_weight is None\"", "\n", "if", "in_proj_bias", "is", "None", ":", "\n", "            ", "b_q", "=", "b_k", "=", "b_v", "=", "None", "\n", "", "else", ":", "\n", "            ", "b_q", ",", "b_k", ",", "b_v", "=", "in_proj_bias", ".", "chunk", "(", "3", ")", "\n", "", "q", ",", "k", ",", "v", "=", "_in_projection", "(", "query", ",", "key", ",", "value", ",", "q_proj_weight", ",", "k_proj_weight", ",", "v_proj_weight", ",", "b_q", ",", "b_k", ",", "b_v", ")", "\n", "\n", "# prep attention mask", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "        ", "if", "attn_mask", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Byte tensor for attn_mask in nn.MultiheadAttention is deprecated. Use bool tensor instead.\"", ")", "\n", "attn_mask", "=", "attn_mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "", "else", ":", "\n", "            ", "assert", "attn_mask", ".", "is_floating_point", "(", ")", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "bool", ",", "f\"Only float, byte, and bool types are supported for attn_mask, not {attn_mask.dtype}\"", "\n", "# ensure attn_mask's dim is 3", "\n", "", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "correct_2d_size", "=", "(", "tgt_len", ",", "src_len", ")", "\n", "if", "attn_mask", ".", "shape", "!=", "correct_2d_size", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"The shape of the 2D attn_mask is {attn_mask.shape}, but should be {correct_2d_size}.\"", ")", "\n", "", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "correct_3d_size", "=", "(", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "if", "attn_mask", ".", "shape", "!=", "correct_3d_size", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"The shape of the 3D attn_mask is {attn_mask.shape}, but should be {correct_3d_size}.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"attn_mask's dimension {attn_mask.dim()} is not supported\"", ")", "\n", "\n", "# prep key padding mask", "\n", "", "", "if", "key_padding_mask", "is", "not", "None", "and", "key_padding_mask", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Byte tensor for key_padding_mask in nn.MultiheadAttention is deprecated. Use bool tensor instead.\"", ")", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "\n", "# add bias along batch dimension (currently second)", "\n", "", "if", "bias_k", "is", "not", "None", "and", "bias_v", "is", "not", "None", ":", "\n", "        ", "assert", "static_k", "is", "None", ",", "\"bias cannot be added to static key.\"", "\n", "assert", "static_v", "is", "None", ",", "\"bias cannot be added to static value.\"", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "F", ".", "pad", "(", "attn_mask", ",", "(", "0", ",", "1", ")", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "key_padding_mask", "=", "F", ".", "pad", "(", "key_padding_mask", ",", "(", "0", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "bias_k", "is", "None", "\n", "assert", "bias_v", "is", "None", "\n", "\n", "#", "\n", "# reshape q, k, v for multihead attention and make em batch first", "\n", "#", "\n", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "static_k", "is", "None", ":", "\n", "        ", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "# TODO finish disentangling control flow so we don't do in-projections when statics are passed", "\n", "        ", "assert", "static_k", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", ",", "f\"expecting static_k.size(0) of {bsz * num_heads}, but got {static_k.size(0)}\"", "\n", "assert", "static_k", ".", "size", "(", "2", ")", "==", "head_dim", ",", "f\"expecting static_k.size(2) of {head_dim}, but got {static_k.size(2)}\"", "\n", "k", "=", "static_k", "\n", "", "if", "static_v", "is", "None", ":", "\n", "        ", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "# TODO finish disentangling control flow so we don't do in-projections when statics are passed", "\n", "        ", "assert", "static_v", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", ",", "f\"expecting static_v.size(0) of {bsz * num_heads}, but got {static_v.size(0)}\"", "\n", "assert", "static_v", ".", "size", "(", "2", ")", "==", "head_dim", ",", "f\"expecting static_v.size(2) of {head_dim}, but got {static_v.size(2)}\"", "\n", "v", "=", "static_v", "\n", "\n", "# add zero attention along batch dimension (now first)", "\n", "", "if", "add_zero_attn", ":", "\n", "        ", "zero_attn_shape", "=", "(", "bsz", "*", "num_heads", ",", "1", ",", "head_dim", ")", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "torch", ".", "zeros", "(", "zero_attn_shape", ",", "dtype", "=", "k", ".", "dtype", ",", "device", "=", "k", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "torch", ".", "zeros", "(", "zero_attn_shape", ",", "dtype", "=", "v", ".", "dtype", ",", "device", "=", "v", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "F", ".", "pad", "(", "attn_mask", ",", "(", "0", ",", "1", ")", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "key_padding_mask", "=", "F", ".", "pad", "(", "key_padding_mask", ",", "(", "0", ",", "1", ")", ")", "\n", "\n", "# update source sequence length after adjustments", "\n", "", "", "src_len", "=", "k", ".", "size", "(", "1", ")", "\n", "\n", "# merge key padding and attention masks", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "        ", "assert", "key_padding_mask", ".", "shape", "==", "(", "bsz", ",", "src_len", ")", ",", "f\"expecting key_padding_mask shape of {(bsz, src_len)}, but got {key_padding_mask.shape}\"", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "view", "(", "bsz", ",", "1", ",", "1", ",", "src_len", ")", ".", "expand", "(", "-", "1", ",", "num_heads", ",", "-", "1", ",", "-", "1", ")", ".", "reshape", "(", "bsz", "*", "num_heads", ",", "1", ",", "src_len", ")", "\n", "if", "attn_mask", "is", "None", ":", "\n", "            ", "attn_mask", "=", "key_padding_mask", "\n", "", "elif", "attn_mask", ".", "dtype", "==", "torch", ".", "bool", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "logical_or", "(", "key_padding_mask", ")", "\n", "", "else", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "key_padding_mask", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "\n", "# convert mask to float", "\n", "", "", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "dtype", "==", "torch", ".", "bool", ":", "\n", "        ", "new_attn_mask", "=", "torch", ".", "zeros_like", "(", "attn_mask", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "new_attn_mask", ".", "masked_fill_", "(", "attn_mask", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "attn_mask", "=", "new_attn_mask", "\n", "\n", "# adjust dropout probability", "\n", "", "if", "not", "training", ":", "\n", "        ", "dropout_p", "=", "0.0", "\n", "\n", "#", "\n", "# (deep breath) calculate attention and out projection", "\n", "#", "\n", "", "attn_output", ",", "attn_output_weights", "=", "_scaled_dot_product_attention_topk", "(", "q", ",", "k", ",", "v", ",", "top_k", ",", "attn_mask", ",", "dropout_p", ")", "\n", "attn_output", "=", "attn_output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "attn_output", "=", "F", ".", "linear", "(", "attn_output", ",", "out_proj_weight", ",", "out_proj_bias", ")", "\n", "\n", "if", "need_weights", ":", "\n", "# average attention weights over heads", "\n", "        ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "return", "attn_output", ",", "attn_output_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "num_heads", "\n", "", "else", ":", "\n", "        ", "return", "attn_output", ",", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_axis_aligned_bbox": [[11, 45], ["numpy.mean", "numpy.mean", "min", "max", "min", "max", "numpy.sqrt", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.array"], "function", ["None"], ["def", "get_axis_aligned_bbox", "(", "region", ")", ":", "\n", "    ", "r\"\"\"\n    Get axis-aligned bbox (used to transform annotation in VOT benchmark)\n\n    Arguments\n    ---------\n    region: list (nested)\n        (1, 4, 2), 4 points of the rotated bbox\n\n    Returns\n    -------\n    tuple\n        axis-aligned bbox in format (cx, cy, w, h)\n    \"\"\"", "\n", "try", ":", "\n", "        ", "region", "=", "np", ".", "array", "(", "[", "\n", "region", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "region", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "region", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "region", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "\n", "region", "[", "0", "]", "[", "2", "]", "[", "0", "]", ",", "region", "[", "0", "]", "[", "2", "]", "[", "1", "]", ",", "region", "[", "0", "]", "[", "3", "]", "[", "0", "]", ",", "region", "[", "0", "]", "[", "3", "]", "[", "1", "]", "\n", "]", ")", "\n", "", "except", ":", "\n", "        ", "region", "=", "np", ".", "array", "(", "region", ")", "\n", "", "cx", "=", "np", ".", "mean", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "cy", "=", "np", ".", "mean", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "x1", "=", "min", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "x2", "=", "max", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "y1", "=", "min", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "y2", "=", "max", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "A1", "=", "np", ".", "linalg", ".", "norm", "(", "region", "[", "0", ":", "2", "]", "-", "region", "[", "2", ":", "4", "]", ")", "*", "np", ".", "linalg", ".", "norm", "(", "region", "[", "2", ":", "4", "]", "-", "region", "[", "4", ":", "6", "]", ")", "\n", "A2", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "A1", "/", "A2", ")", "\n", "w", "=", "s", "*", "(", "x2", "-", "x1", ")", "+", "1", "\n", "h", "=", "s", "*", "(", "y2", "-", "y1", ")", "+", "1", "\n", "return", "cx", ",", "cy", ",", "w", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking": [[47, 106], ["numpy.concatenate", "bbox.cxywh2xyxy", "numpy.array().reshape", "cv2.warpAffine", "cv2.warpAffine", "numpy.array", "numpy.array", "numpy.array", "tuple", "map"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xyxy"], ["", "def", "get_subwindow_tracking", "(", "im", ",", "\n", "pos", ",", "\n", "model_sz", ",", "\n", "original_sz", ",", "\n", "avg_chans", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "mask", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    Get subwindow via cv2.warpAffine\n\n    Arguments\n    ---------\n    im: numpy.array\n        original image, (H, W, C)\n    pos: numpy.array\n        subwindow position\n    model_sz: int\n        output size\n    original_sz: int\n        subwindow range on the original image\n    avg_chans: tuple\n        average values per channel\n    mask: numpy.array\n        mask, (H, W)\n\n\n    Returns\n    -------\n    numpy.array\n        image patch within _original_sz_ in _im_ and  resized to _model_sz_, padded by _avg_chans_\n        (model_sz, model_sz, 3)\n    \"\"\"", "\n", "crop_cxywh", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "array", "(", "pos", ")", ",", "np", ".", "array", "(", "(", "original_sz", ",", "original_sz", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "crop_xyxy", "=", "cxywh2xyxy", "(", "crop_cxywh", ")", "\n", "# warpAffine transform matrix", "\n", "M_13", "=", "crop_xyxy", "[", "0", "]", "\n", "M_23", "=", "crop_xyxy", "[", "1", "]", "\n", "M_11", "=", "(", "crop_xyxy", "[", "2", "]", "-", "M_13", ")", "/", "(", "model_sz", "-", "1", ")", "\n", "M_22", "=", "(", "crop_xyxy", "[", "3", "]", "-", "M_23", ")", "/", "(", "model_sz", "-", "1", ")", "\n", "mat2x3", "=", "np", ".", "array", "(", "[", "\n", "M_11", ",", "\n", "0", ",", "\n", "M_13", ",", "\n", "0", ",", "\n", "M_22", ",", "\n", "M_23", ",", "\n", "]", ")", ".", "reshape", "(", "2", ",", "3", ")", "\n", "im_patch", "=", "cv2", ".", "warpAffine", "(", "im", ",", "\n", "mat2x3", ",", "(", "model_sz", ",", "model_sz", ")", ",", "\n", "flags", "=", "(", "cv2", ".", "INTER_LINEAR", "|", "cv2", ".", "WARP_INVERSE_MAP", ")", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "borderValue", "=", "tuple", "(", "map", "(", "int", ",", "avg_chans", ")", ")", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask_patch", "=", "cv2", ".", "warpAffine", "(", "mask", ",", "\n", "mat2x3", ",", "(", "model_sz", ",", "model_sz", ")", ",", "\n", "flags", "=", "(", "cv2", ".", "INTER_NEAREST", "\n", "|", "cv2", ".", "WARP_INVERSE_MAP", ")", ")", "\n", "return", "im_patch", ",", "mask_patch", "\n", "", "return", "im_patch", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_crop": [[108, 173], ["numpy.sqrt", "func_get_subwindow", "func_get_subwindow", "sum", "sum", "round", "round"], "function", ["None"], ["", "def", "get_crop", "(", "im", ",", "\n", "target_pos", ",", "\n", "target_sz", ",", "\n", "z_size", ",", "\n", "x_size", "=", "None", ",", "\n", "avg_chans", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "context_amount", "=", "0.5", ",", "\n", "func_get_subwindow", "=", "get_subwindow_tracking", ",", "\n", "output_size", "=", "None", ",", "\n", "mask", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    Get cropped patch for tracking\n\n    Arguments\n    ---------\n    im: numpy.array\n        input image\n    target_pos: list-like or numpy.array\n        position, (x, y)\n    target_sz: list-like or numpy.array\n        size, (w, h)\n    z_size: int\n        template patch size\n    x_size: int\n        search patch size, None in case of template (z_size == x_size)\n    avg_chans: tuple\n        channel average values, (B, G, R)\n    context_amount: float\n        context to be includede in template, set to 0.5 by convention\n    func_get_subwindow: function object\n        function used to perform cropping & resizing\n    output_size: int\n        the size of output if it is not None\n    mask: numpy.array\n        mask of the object\n\n    Returns\n    -------\n        cropped & resized image, (output_size, output_size) if output_size provied,\n        otherwise, (x_size, x_size, 3) if x_size provided, (z_size, z_size, 3) otherwise\n    \"\"\"", "\n", "wc", "=", "target_sz", "[", "0", "]", "+", "context_amount", "*", "sum", "(", "target_sz", ")", "\n", "hc", "=", "target_sz", "[", "1", "]", "+", "context_amount", "*", "sum", "(", "target_sz", ")", "\n", "s_crop", "=", "np", ".", "sqrt", "(", "wc", "*", "hc", ")", "\n", "scale", "=", "z_size", "/", "s_crop", "\n", "\n", "# im_pad = x_pad / scale", "\n", "if", "x_size", "is", "None", ":", "\n", "        ", "x_size", "=", "z_size", "\n", "", "s_crop", "=", "x_size", "/", "scale", "\n", "\n", "if", "output_size", "is", "None", ":", "\n", "        ", "output_size", "=", "x_size", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "im_crop", ",", "mask_crop", "=", "func_get_subwindow", "(", "im", ",", "\n", "target_pos", ",", "\n", "output_size", ",", "\n", "round", "(", "s_crop", ")", ",", "\n", "avg_chans", ",", "\n", "mask", "=", "mask", ")", "\n", "return", "im_crop", ",", "mask_crop", ",", "scale", "\n", "", "else", ":", "\n", "        ", "im_crop", "=", "func_get_subwindow", "(", "im", ",", "target_pos", ",", "output_size", ",", "round", "(", "s_crop", ")", ",", "\n", "avg_chans", ")", "\n", "return", "im_crop", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop._make_valid_int_pair": [[175, 194], ["isinstance", "tuple", "map", "int"], "function", ["None"], ["", "", "def", "_make_valid_int_pair", "(", "sz", ")", "->", "Tuple", "[", "int", ",", "int", "]", ":", "\n", "    ", "\"\"\"Cast size to int pair\n    \n    Parameters\n    ----------\n    sz : int or Iterable pair\n        size\n    \n    Returns\n    -------\n    Tuple[int, int]\n        int pair\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "sz", ",", "Iterable", ")", ":", "\n", "        ", "sz", "=", "(", "int", "(", "sz", ")", ",", ")", "*", "2", "\n", "", "else", ":", "\n", "        ", "sz", "=", "sz", "[", ":", "2", "]", "\n", "sz", "=", "tuple", "(", "map", "(", "int", ",", "sz", ")", ")", "\n", "", "return", "sz", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow": [[197, 245], ["crop._make_valid_int_pair", "crop._make_valid_int_pair", "numpy.concatenate", "bbox.cxywh2xyxy", "numpy.array().reshape", "cv2.warpAffine", "numpy.array", "numpy.array", "numpy.array", "tuple", "map"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop._make_valid_int_pair", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop._make_valid_int_pair", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xyxy"], ["", "def", "get_subwindow", "(", "im", ":", "np", ".", "array", ",", "src_pos", ",", "src_sz", ",", "dst_sz", ",", "\n", "avg_chans", "=", "(", "0", ",", "0", ",", "0", ")", ")", "->", "np", ".", "array", ":", "\n", "    ", "\"\"\"Get (arbitrary aspect ratio) subwindow via cv2.warpAffine\n\n    Parameters\n    ----------\n    im: np.array\n        image, (H, W, C)\n    src_pos : [type]\n        source position, (cx, cy)\n    src_sz : [type]\n        source size, (w, h)\n    dst_sz : [type]\n        destination size, (w, h)\n    avg_chans : tuple, optional\n        [description], by default (0, 0, 0)\n    \n    Returns\n    -------\n    np.array\n        cropped image, (H, W, C)\n    \"\"\"", "\n", "\n", "src_sz", "=", "_make_valid_int_pair", "(", "src_sz", ")", "\n", "dst_sz", "=", "_make_valid_int_pair", "(", "dst_sz", ")", "\n", "\n", "crop_cxywh", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "src_pos", ")", ",", "np", ".", "array", "(", "src_sz", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "crop_xyxy", "=", "cxywh2xyxy", "(", "crop_cxywh", ")", "\n", "# warpAffine transform matrix", "\n", "M_13", "=", "crop_xyxy", "[", "0", "]", "\n", "M_23", "=", "crop_xyxy", "[", "1", "]", "\n", "M_11", "=", "(", "crop_xyxy", "[", "2", "]", "-", "M_13", ")", "/", "(", "dst_sz", "[", "0", "]", "-", "1", ")", "\n", "M_22", "=", "(", "crop_xyxy", "[", "3", "]", "-", "M_23", ")", "/", "(", "dst_sz", "[", "1", "]", "-", "1", ")", "\n", "mat2x3", "=", "np", ".", "array", "(", "[", "\n", "M_11", ",", "\n", "0", ",", "\n", "M_13", ",", "\n", "0", ",", "\n", "M_22", ",", "\n", "M_23", ",", "\n", "]", ")", ".", "reshape", "(", "2", ",", "3", ")", "\n", "im_patch", "=", "cv2", ".", "warpAffine", "(", "im", ",", "\n", "mat2x3", ",", "\n", "dst_sz", ",", "\n", "flags", "=", "(", "cv2", ".", "INTER_LINEAR", "|", "cv2", ".", "WARP_INVERSE_MAP", ")", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "borderValue", "=", "tuple", "(", "map", "(", "int", ",", "avg_chans", ")", ")", ")", "\n", "return", "im_patch", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.TestBboxTransform.test_clip_bbox": [[199, 210], ["print", "bbox.clip_bbox", "zip", "bbox.TestBboxTransform.assertEqual"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.clip_bbox"], ["    ", "def", "test_clip_bbox", "(", "self", ")", ":", "\n", "        ", "print", "(", "'test for clip_bbox'", ")", "\n", "for", "case", "in", "clip_bbox_test_cases", ":", "\n", "            ", "case_input", "=", "case", "[", "'bbox'", "]", ",", "case", "[", "'im_size'", "]", "\n", "case_answer", "=", "case", "[", "'bbox_clipped'", "]", "\n", "case_output", "=", "clip_bbox", "(", "*", "case_input", ")", "\n", "for", "out", ",", "ans", "in", "zip", "(", "case_output", ",", "case_answer", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "\n", "out", ",", "ans", ",", "\"test failed in clip_bbox\\n\"", "\n", "\"%s -> %s, expected %s\"", "%", "\n", "(", "case_input", ",", "case_output", ",", "case_answer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.TestBboxTransform.test_bbox_transform": [[211, 241], ["print", "print", "numpy.array", "numpy.array", "func_cvt", "zip", "zip", "func_cvt", "zip", "func_cvt.reshape", "numpy.array.reshape", "bbox.TestBboxTransform.assertEqual", "bbox.TestBboxTransform.assertEqual", "bbox.TestBboxTransform.assertEqual"], "methods", ["None"], ["", "", "", "def", "test_bbox_transform", "(", "self", ")", ":", "\n", "        ", "for", "src_fmt", ",", "dst_fmt", "in", "format_cvt_pairs", ":", "\n", "            ", "func_name", "=", "\"%s2%s\"", "%", "(", "src_fmt", ",", "dst_fmt", ")", "\n", "func_cvt", "=", "var_dict", "[", "func_name", "]", "\n", "\n", "print", "(", "'test for %s'", "%", "func_name", ")", "\n", "for", "case", "in", "bbox_transform_test_cases", ":", "\n", "                ", "case_input", "=", "case", "[", "src_fmt", "]", "\n", "case_answer", "=", "case", "[", "dst_fmt", "]", "\n", "case_output", "=", "func_cvt", "(", "case_input", ")", "\n", "for", "out", ",", "ans", "in", "zip", "(", "case_output", ",", "case_answer", ")", ":", "\n", "                    ", "self", ".", "assertEqual", "(", "out", ",", "ans", ",", "\n", "\"test failed in %s\\n\"", "%", "(", "func_name", ")", "+", "\"%s -> %s, expected %s\"", "%", "(", "case_input", ",", "case_output", ",", "case_answer", ")", ")", "\n", "\n", "", "", "print", "(", "'batch test for %s'", "%", "func_name", ")", "\n", "# for case in bbox_transform_test_cases:", "\n", "case_inputs", "=", "np", ".", "array", "(", "\n", "[", "case", "[", "src_fmt", "]", "for", "case", "in", "bbox_transform_test_cases", "]", ")", "\n", "case_answers", "=", "np", ".", "array", "(", "\n", "[", "case", "[", "dst_fmt", "]", "for", "case", "in", "bbox_transform_test_cases", "]", ")", "\n", "case_outputs", "=", "func_cvt", "(", "case_inputs", ")", "\n", "for", "out", ",", "ans", "in", "zip", "(", "case_outputs", ".", "reshape", "(", "-", "1", ")", ",", "\n", "case_answers", ".", "reshape", "(", "-", "1", ")", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "out", ",", "ans", ",", "\"batch test failed in %s\\n\"", "%", "(", "func_name", ")", "+", "\"%s -> %s, expected %s\"", "%", "(", "case_inputs", ",", "case_outputs", ",", "case_answers", ")", ")", "\n", "", "for", "dim_out", ",", "dim_ans", "in", "zip", "(", "case_outputs", ".", "shape", ",", "case_answers", ".", "shape", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "dim_out", ",", "dim_ans", ",", "\n", "\"batch test failed in %s\\n\"", "%", "(", "func_name", ")", "+", "\"shapes donnot match: output %s, expected %s\"", "%", "(", "case_outputs", ".", "shape", ",", "case_answers", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.clip_bbox": [[23, 46], ["numpy.array", "numpy.array", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["def", "clip_bbox", "(", "bbox", ",", "im_size", ")", ":", "\n", "    ", "r\"\"\"\n    Clip boxes to image boundaries, support batch-wise operation\n\n    Arguments\n    ---------\n    bbox: numpy.array or list-like\n        shape=(..., 4), format=(x1, y1, x2, y2)\n    im_size: numpy.array or list-like\n        shape=(..., 2), format=(w, h)\n\n    Returns\n    -------\n    bbox_clipped: numpy.array\n        shape=(..., 4), format=(x1, y1, x2, y2)\n    \"\"\"", "\n", "bbox", "=", "np", ".", "array", "(", "bbox", ")", "\n", "im_size", "=", "np", ".", "array", "(", "im_size", ")", "\n", "bbox", "[", "...", ",", "0", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "bbox", "[", "...", ",", "0", "]", ",", "im_size", "[", "...", ",", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "bbox", "[", "...", ",", "1", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "bbox", "[", "...", ",", "1", "]", ",", "im_size", "[", "...", ",", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "bbox", "[", "...", ",", "2", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "bbox", "[", "...", ",", "2", "]", ",", "im_size", "[", "...", ",", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "bbox", "[", "...", ",", "3", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "bbox", "[", "...", ",", "3", "]", ",", "im_size", "[", "...", ",", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.calc_IoU": [[48, 82], ["numpy.array", "numpy.array", "numpy.maximum", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["", "def", "calc_IoU", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "    ", "r\"\"\"\n    Calculate IoU, batch-wise\n\n    Arguments\n    ---------\n    bbox1: numpy.array or list-like\n        format=(x1, y1, x2, y2)\n    bbox2: numpy.array or list-like\n        format=(x1, y1, x2, y2)\n\n    Returns\n    -------\n    float\n        Intersection over Union\n    \"\"\"", "\n", "bbox1", "=", "np", ".", "array", "(", "bbox1", ")", "\n", "bbox2", "=", "np", ".", "array", "(", "bbox2", ")", "\n", "area1", "=", "np", ".", "abs", "(", "bbox1", "[", "...", ",", "2", "]", "-", "bbox1", "[", "...", ",", "0", "]", "+", "\n", "1", ")", "*", "np", ".", "abs", "(", "bbox1", "[", "...", ",", "3", "]", "-", "bbox1", "[", "...", ",", "1", "]", "+", "1", ")", "\n", "area2", "=", "np", ".", "abs", "(", "bbox2", "[", "...", ",", "2", "]", "-", "bbox2", "[", "...", ",", "0", "]", "+", "\n", "1", ")", "*", "np", ".", "abs", "(", "bbox2", "[", "...", ",", "3", "]", "-", "bbox2", "[", "...", ",", "1", "]", "+", "1", ")", "\n", "\n", "iw", "=", "np", ".", "minimum", "(", "bbox1", "[", "...", ",", "2", "]", ",", "bbox2", "[", "...", ",", "2", "]", ")", "-", "np", ".", "maximum", "(", "\n", "bbox1", "[", "...", ",", "0", "]", ",", "bbox2", "[", "...", ",", "0", "]", ")", "+", "1", "\n", "ih", "=", "np", ".", "minimum", "(", "bbox1", "[", "...", ",", "3", "]", ",", "bbox2", "[", "...", ",", "3", "]", ")", "-", "np", ".", "maximum", "(", "\n", "bbox1", "[", "...", ",", "1", "]", ",", "bbox2", "[", "...", ",", "1", "]", ")", "+", "1", "\n", "\n", "inter", "=", "np", ".", "maximum", "(", "iw", ",", "0", ")", "*", "np", ".", "maximum", "(", "ih", ",", "0", ")", "\n", "\n", "union", "=", "area1", "+", "area2", "-", "inter", "\n", "iou", "=", "np", ".", "maximum", "(", "inter", "/", "union", ",", "0", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xywh": [[87, 94], ["numpy.array", "numpy.concatenate"], "function", ["None"], ["", "def", "cxywh2xywh", "(", "box", ")", ":", "\n", "    ", "box", "=", "np", ".", "array", "(", "box", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "box", "[", "...", ",", "[", "0", "]", "]", "-", "(", "box", "[", "...", ",", "[", "2", "]", "]", "-", "1", ")", "/", "2", ",", "box", "[", "...", ",", "[", "1", "]", "]", "-", "\n", "(", "box", "[", "...", ",", "[", "3", "]", "]", "-", "1", ")", "/", "2", ",", "box", "[", "...", ",", "[", "2", "]", "]", ",", "box", "[", "...", ",", "[", "3", "]", "]", "\n", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2cxywh": [[96, 103], ["numpy.array", "numpy.concatenate"], "function", ["None"], ["", "def", "xywh2cxywh", "(", "rect", ")", ":", "\n", "    ", "rect", "=", "np", ".", "array", "(", "rect", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "rect", "[", "...", ",", "[", "0", "]", "]", "+", "(", "rect", "[", "...", ",", "[", "2", "]", "]", "-", "1", ")", "/", "2", ",", "rect", "[", "...", ",", "[", "1", "]", "]", "+", "\n", "(", "rect", "[", "...", ",", "[", "3", "]", "]", "-", "1", ")", "/", "2", ",", "rect", "[", "...", ",", "[", "2", "]", "]", ",", "rect", "[", "...", ",", "[", "3", "]", "]", "\n", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xyxy": [[105, 113], ["numpy.array", "numpy.concatenate"], "function", ["None"], ["", "def", "cxywh2xyxy", "(", "box", ")", ":", "\n", "    ", "box", "=", "np", ".", "array", "(", "box", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "box", "[", "...", ",", "[", "0", "]", "]", "-", "(", "box", "[", "...", ",", "[", "2", "]", "]", "-", "1", ")", "/", "2", ",", "box", "[", "...", ",", "[", "1", "]", "]", "-", "\n", "(", "box", "[", "...", ",", "[", "3", "]", "]", "-", "1", ")", "/", "2", ",", "box", "[", "...", ",", "[", "0", "]", "]", "+", "\n", "(", "box", "[", "...", ",", "[", "2", "]", "]", "-", "1", ")", "/", "2", ",", "box", "[", "...", ",", "[", "1", "]", "]", "+", "(", "box", "[", "...", ",", "[", "3", "]", "]", "-", "1", ")", "/", "2", "\n", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xyxy2xywh": [[115, 122], ["numpy.array", "numpy.concatenate"], "function", ["None"], ["", "def", "xyxy2xywh", "(", "bbox", ")", ":", "\n", "    ", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "bbox", "[", "...", ",", "[", "0", "]", "]", ",", "bbox", "[", "...", ",", "[", "1", "]", "]", ",", "bbox", "[", "...", ",", "[", "2", "]", "]", "-", "bbox", "[", "...", ",", "[", "0", "]", "]", "+", "1", ",", "\n", "bbox", "[", "...", ",", "[", "3", "]", "]", "-", "bbox", "[", "...", ",", "[", "1", "]", "]", "+", "1", "\n", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy": [[124, 131], ["numpy.array", "numpy.concatenate"], "function", ["None"], ["", "def", "xywh2xyxy", "(", "rect", ")", ":", "\n", "    ", "rect", "=", "np", ".", "array", "(", "rect", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "\n", "rect", "[", "...", ",", "[", "0", "]", "]", ",", "rect", "[", "...", ",", "[", "1", "]", "]", ",", "rect", "[", "...", ",", "[", "2", "]", "]", "+", "rect", "[", "...", ",", "[", "0", "]", "]", "-", "1", ",", "\n", "rect", "[", "...", ",", "[", "3", "]", "]", "+", "rect", "[", "...", ",", "[", "1", "]", "]", "-", "1", "\n", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xyxy2cxywh": [[133, 140], ["numpy.array", "numpy.concatenate"], "function", ["None"], ["", "def", "xyxy2cxywh", "(", "bbox", ")", ":", "\n", "    ", "bbox", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "(", "bbox", "[", "...", ",", "[", "0", "]", "]", "+", "bbox", "[", "...", ",", "[", "2", "]", "]", ")", "/", "2", ",", "\n", "(", "bbox", "[", "...", ",", "[", "1", "]", "]", "+", "bbox", "[", "...", ",", "[", "3", "]", "]", ")", "/", "2", ",", "\n", "bbox", "[", "...", ",", "[", "2", "]", "]", "-", "bbox", "[", "...", ",", "[", "0", "]", "]", "+", "1", ",", "\n", "bbox", "[", "...", ",", "[", "3", "]", "]", "-", "bbox", "[", "...", ",", "[", "1", "]", "]", "+", "1", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.imarray_to_tensor": [[8, 17], ["numpy.ascontiguousarray", "torch.from_numpy", "np.ascontiguousarray.transpose"], "function", ["None"], ["\n", "\n", "def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", ",", "print", "(", "\n", "module_name", ",", "module_dict", ",", "'defined in several script files'", ")", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n", "\n", "", "class", "Registry", "(", "dict", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.tensor_to_imarray": [[19, 30], ["t.detach().cpu().numpy().astype", "t.detach().cpu().numpy().astype.transpose", "t.detach().cpu().numpy", "t.detach().cpu", "t.detach"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.tensor_to_numpy": [[32, 40], ["t.detach().cpu().numpy", "t.detach().cpu", "t.detach"], "function", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Registry'", "\n", "if", "len", "(", "args", ")", ">", "0", "and", "isinstance", "(", "args", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "name", ",", "*", "args", "=", "args", "\n", "self", ".", "name", "=", "name", "\n", "", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "register", "(", "self", ",", "module", ")", ":", "\n", "        ", "name", "=", "module", ".", "__name__", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.rfftshift2": [[8, 12], ["torch.cat", "torch.cat"], "function", ["None"], ["@", "tensor_operation", "\n", "def", "rfftshift2", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "h", "=", "a", ".", "shape", "[", "2", "]", "+", "2", "\n", "return", "torch", ".", "cat", "(", "(", "a", "[", ":", ",", ":", ",", "(", "h", "-", "1", ")", "//", "2", ":", ",", "...", "]", ",", "a", "[", ":", ",", ":", ",", ":", "h", "//", "2", ",", "...", "]", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.irfftshift2": [[14, 18], ["int", "torch.cat", "torch.cat"], "function", ["None"], ["", "@", "tensor_operation", "\n", "def", "irfftshift2", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "mid", "=", "int", "(", "(", "a", ".", "shape", "[", "2", "]", "-", "1", ")", "/", "2", ")", "\n", "return", "torch", ".", "cat", "(", "(", "a", "[", ":", ",", ":", ",", "mid", ":", ",", "...", "]", ",", "a", "[", ":", ",", ":", ",", ":", "mid", ",", "...", "]", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.cfft2": [[20, 26], ["fourier.rfftshift2", "torch.rfft", "torch.rfft"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.rfftshift2"], ["", "@", "tensor_operation", "\n", "def", "cfft2", "(", "a", ")", ":", "\n", "    ", "\"\"\"Do FFT and center the low frequency component.\n    Always produces odd (full) output sizes.\"\"\"", "\n", "\n", "return", "rfftshift2", "(", "torch", ".", "rfft", "(", "a", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.cifft2": [[28, 33], ["torch.irfft", "torch.irfft", "fourier.irfftshift2"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.irfftshift2"], ["", "@", "tensor_operation", "\n", "def", "cifft2", "(", "a", ",", "signal_sizes", "=", "None", ")", ":", "\n", "    ", "\"\"\"Do inverse FFT corresponding to cfft2.\"\"\"", "\n", "\n", "return", "torch", ".", "irfft", "(", "irfftshift2", "(", "a", ")", ",", "2", ",", "signal_sizes", "=", "signal_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.sample_fs": [[35, 68], ["torch.Tensor().float", "torch.Tensor().float", "int", "int", "fourier.cifft2", "ValueError", "int", "int", "fourier.cifft2", "torch.Tensor", "torch.Tensor", "grid_sz.prod().item", "fourier.cifft2", "torch.pad", "torch.Tensor().float.prod().item", "fourier.cifft2", "s.item", "torch.pad", "grid_sz.long().tolist", "grid_sz.prod", "grid_sz.long().tolist", "torch.Tensor().float.prod", "grid_sz.long", "grid_sz.long"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.cifft2", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.cifft2", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.cifft2", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.cifft2"], ["", "@", "tensor_operation", "\n", "def", "sample_fs", "(", "a", ":", "torch", ".", "Tensor", ",", "grid_sz", ":", "torch", ".", "Tensor", "=", "None", ",", "rescale", "=", "True", ")", ":", "\n", "    ", "\"\"\"Samples the Fourier series.\"\"\"", "\n", "\n", "# Size of the fourier series", "\n", "sz", "=", "torch", ".", "Tensor", "(", "[", "a", ".", "shape", "[", "2", "]", ",", "2", "*", "a", ".", "shape", "[", "3", "]", "-", "1", "]", ")", ".", "float", "(", ")", "\n", "\n", "# Default grid", "\n", "if", "grid_sz", "is", "None", "or", "sz", "[", "0", "]", "==", "grid_sz", "[", "0", "]", "and", "sz", "[", "1", "]", "==", "grid_sz", "[", "1", "]", ":", "\n", "        ", "if", "rescale", ":", "\n", "            ", "return", "sz", ".", "prod", "(", ")", ".", "item", "(", ")", "*", "cifft2", "(", "a", ")", "\n", "", "return", "cifft2", "(", "a", ")", "\n", "\n", "", "if", "sz", "[", "0", "]", ">", "grid_sz", "[", "0", "]", "or", "sz", "[", "1", "]", ">", "grid_sz", "[", "1", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Only grid sizes that are smaller than the Fourier series size are supported.\"", "\n", ")", "\n", "\n", "", "tot_pad", "=", "(", "grid_sz", "-", "sz", ")", ".", "tolist", "(", ")", "\n", "is_even", "=", "[", "s", ".", "item", "(", ")", "%", "2", "==", "0", "for", "s", "in", "sz", "]", "\n", "\n", "# Compute paddings", "\n", "pad_top", "=", "int", "(", "(", "tot_pad", "[", "0", "]", "+", "1", ")", "/", "2", ")", "if", "is_even", "[", "0", "]", "else", "int", "(", "tot_pad", "[", "0", "]", "/", "2", ")", "\n", "pad_bottom", "=", "int", "(", "tot_pad", "[", "0", "]", "-", "pad_top", ")", "\n", "pad_right", "=", "int", "(", "(", "tot_pad", "[", "1", "]", "+", "1", ")", "/", "2", ")", "\n", "\n", "if", "rescale", ":", "\n", "        ", "return", "grid_sz", ".", "prod", "(", ")", ".", "item", "(", ")", "*", "cifft2", "(", "\n", "F", ".", "pad", "(", "a", ",", "(", "0", ",", "0", ",", "0", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", ")", ")", ",", "\n", "signal_sizes", "=", "grid_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "cifft2", "(", "F", ".", "pad", "(", "a", ",", "(", "0", ",", "0", ",", "0", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", ")", ")", ",", "\n", "signal_sizes", "=", "grid_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.get_frequency_coord": [[70, 85], ["torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "ky.unsqueeze.unsqueeze", "kx.unsqueeze.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "int", "int", "int"], "function", ["None"], ["", "", "def", "get_frequency_coord", "(", "sz", ",", "add_complex_dim", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\"Frequency coordinates.\"\"\"", "\n", "\n", "ky", "=", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "0", "]", "-", "1", ")", "/", "2", ")", ",", "\n", "int", "(", "sz", "[", "0", "]", "/", "2", "+", "1", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "kx", "=", "torch", ".", "arange", "(", "0", ",", "int", "(", "sz", "[", "1", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "if", "add_complex_dim", ":", "\n", "        ", "ky", "=", "ky", ".", "unsqueeze", "(", "-", "1", ")", "\n", "kx", "=", "kx", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "ky", ",", "kx", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.shift_fs": [[87, 106], ["fourier.get_frequency_coord", "complex.mult", "a.dim", "ValueError", "complex.mult", "complex.exp_imag", "complex.exp_imag", "shift[].item", "shift[].item"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.get_frequency_coord", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.exp_imag", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.exp_imag"], ["", "@", "tensor_operation", "\n", "def", "shift_fs", "(", "a", ":", "torch", ".", "Tensor", ",", "shift", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Shift a sample a in the Fourier domain.\n    Params:\n        a : The fourier coefficiens of the sample.\n        shift : The shift to be performed normalized to the range [-pi, pi].\"\"\"", "\n", "\n", "if", "a", ".", "dim", "(", ")", "!=", "5", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'a must be the Fourier coefficients, a 5-dimensional tensor.'", ")", "\n", "\n", "", "if", "shift", "[", "0", "]", "==", "0", "and", "shift", "[", "1", "]", "==", "0", ":", "\n", "        ", "return", "a", "\n", "\n", "", "ky", ",", "kx", "=", "get_frequency_coord", "(", "(", "a", ".", "shape", "[", "2", "]", ",", "2", "*", "a", ".", "shape", "[", "3", "]", "-", "1", ")", ",", "\n", "device", "=", "a", ".", "device", ")", "\n", "\n", "return", "mult", "(", "mult", "(", "a", ",", "exp_imag", "(", "shift", "[", "0", "]", ".", "item", "(", ")", "*", "ky", ")", ")", ",", "\n", "exp_imag", "(", "shift", "[", "1", "]", ".", "item", "(", ")", "*", "kx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.sum_fs": [[108, 128], ["sorted", "e.clone", "int", "int", "int"], "function", ["None"], ["", "def", "sum_fs", "(", "a", ":", "TensorList", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Sum a list of Fourier series expansions.\"\"\"", "\n", "\n", "s", "=", "None", "\n", "mid", "=", "None", "\n", "\n", "for", "e", "in", "sorted", "(", "a", ",", "key", "=", "lambda", "elem", ":", "elem", ".", "shape", "[", "-", "3", "]", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "if", "s", "is", "None", ":", "\n", "            ", "s", "=", "e", ".", "clone", "(", ")", "\n", "mid", "=", "int", "(", "(", "s", ".", "shape", "[", "-", "3", "]", "-", "1", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "# Compute coordinates", "\n", "            ", "top", "=", "mid", "-", "int", "(", "(", "e", ".", "shape", "[", "-", "3", "]", "-", "1", ")", "/", "2", ")", "\n", "bottom", "=", "mid", "+", "int", "(", "e", ".", "shape", "[", "-", "3", "]", "/", "2", ")", "+", "1", "\n", "right", "=", "e", ".", "shape", "[", "-", "2", "]", "\n", "\n", "# Add the data", "\n", "s", "[", "...", ",", "top", ":", "bottom", ",", ":", "right", ",", ":", "]", "+=", "e", "\n", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.sum_fs12": [[130, 150], ["sorted", "e.clone", "int", "int", "int"], "function", ["None"], ["", "def", "sum_fs12", "(", "a", ":", "TensorList", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Sum a list of Fourier series expansions.\"\"\"", "\n", "\n", "s", "=", "None", "\n", "mid", "=", "None", "\n", "\n", "for", "e", "in", "sorted", "(", "a", ",", "key", "=", "lambda", "elem", ":", "elem", ".", "shape", "[", "0", "]", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "if", "s", "is", "None", ":", "\n", "            ", "s", "=", "e", ".", "clone", "(", ")", "\n", "mid", "=", "int", "(", "(", "s", ".", "shape", "[", "0", "]", "-", "1", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "# Compute coordinates", "\n", "            ", "top", "=", "mid", "-", "int", "(", "(", "e", ".", "shape", "[", "0", "]", "-", "1", ")", "/", "2", ")", "\n", "bottom", "=", "mid", "+", "int", "(", "e", ".", "shape", "[", "0", "]", "/", "2", ")", "+", "1", "\n", "right", "=", "e", ".", "shape", "[", "1", "]", "\n", "\n", "# Add the data", "\n", "s", "[", "top", ":", "bottom", ",", ":", "right", ",", "...", "]", "+=", "e", "\n", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.inner_prod_fs": [[152, 162], ["complex.is_complex", "complex.is_complex", "complex.is_real", "complex.is_real", "NotImplementedError", "a[].reshape", "b[].reshape", "a.reshape", "b.reshape", "a[].reshape", "b[].reshape", "a.reshape", "b.reshape"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "inner_prod_fs", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "if", "is_complex", "(", "a", ")", "and", "is_complex", "(", "b", ")", ":", "\n", "        ", "return", "2", "*", "(", "a", ".", "reshape", "(", "-", "1", ")", "@", "b", ".", "reshape", "(", "-", "1", ")", ")", "-", "a", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ".", "reshape", "(", "\n", "-", "1", ")", "@", "b", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", "\n", "", "elif", "is_real", "(", "a", ")", "and", "is_real", "(", "b", ")", ":", "\n", "        ", "return", "2", "*", "(", "a", ".", "reshape", "(", "-", "1", ")", "@", "b", ".", "reshape", "(", "-", "1", ")", "\n", ")", "-", "a", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ")", "@", "b", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Not implemented for mixed real and complex.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.show_tensor": [[9, 28], ["a.squeeze().cpu().clone().detach().numpy", "matplotlib.figure", "matplotlib.tight_layout", "matplotlib.cla", "matplotlib.imshow", "matplotlib.axis", "matplotlib.axis", "matplotlib.draw", "matplotlib.pause", "numpy.transpose", "matplotlib.title", "a.squeeze().cpu().clone().detach", "a.squeeze().cpu().clone", "a.squeeze().cpu", "a.squeeze"], "function", ["None"], ["def", "show_tensor", "(", "a", ":", "torch", ".", "Tensor", ",", "fig_num", "=", "None", ",", "title", "=", "None", ")", ":", "\n", "    ", "\"\"\"Display a 2D tensor.\n    args:\n        fig_num: Figure number.\n        title: Title of figure.\n    \"\"\"", "\n", "a_np", "=", "a", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "a_np", ".", "ndim", "==", "3", ":", "\n", "        ", "a_np", "=", "np", ".", "transpose", "(", "a_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "plt", ".", "figure", "(", "fig_num", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "imshow", "(", "a_np", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph": [[30, 47], ["a.squeeze().cpu().clone().detach().numpy", "matplotlib.figure", "matplotlib.cla", "matplotlib.plot", "matplotlib.draw", "matplotlib.pause", "matplotlib.title", "a.squeeze().cpu().clone().detach", "a.squeeze().cpu().clone", "a.squeeze().cpu", "a.squeeze"], "function", ["None"], ["", "def", "plot_graph", "(", "a", ":", "torch", ".", "Tensor", ",", "fig_num", "=", "None", ",", "title", "=", "None", ")", ":", "\n", "    ", "\"\"\"Plot graph. Data is a 1D tensor.\n    args:\n        fig_num: Figure number.\n        title: Title of figure.\n    \"\"\"", "\n", "a_np", "=", "a", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "a_np", ".", "ndim", ">", "1", ":", "\n", "        ", "raise", "ValueError", "\n", "", "plt", ".", "figure", "(", "fig_num", ")", "\n", "# plt.tight_layout()", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "plot", "(", "a_np", ")", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "", "plt", ".", "draw", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.__call__": [[10, 13], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", "->", "TensorList", ":", "\n", "        ", "\"\"\"Shall compute the residuals of the problem.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_input": [[14, 17], ["sum", "a.view", "b.view"], "methods", ["None"], ["", "def", "ip_input", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "\"\"\"Inner product of the input space.\"\"\"", "\n", "return", "sum", "(", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output": [[18, 21], ["sum", "a.view", "b.view"], "methods", ["None"], ["", "def", "ip_output", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "\"\"\"Inner product of the output space.\"\"\"", "\n", "return", "sum", "(", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.M1": [[22, 25], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"M1 preconditioner.\"\"\"", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.M2": [[26, 29], ["None"], "methods", ["None"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"M2 preconditioner.\"\"\"", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.MinimizationProblem.__call__": [[33, 36], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", "->", "TensorList", ":", "\n", "        ", "\"\"\"Shall compute the loss.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.MinimizationProblem.ip_input": [[37, 40], ["sum", "a.view", "b.view"], "methods", ["None"], ["", "def", "ip_input", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "\"\"\"Inner product of the input space.\"\"\"", "\n", "return", "sum", "(", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.MinimizationProblem.M1": [[41, 43], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.MinimizationProblem.M2": [[44, 46], ["None"], "methods", ["None"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.__init__": [[50, 67], ["torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "fletcher_reeves", "=", "True", ",", "\n", "standard_alpha", "=", "True", ",", "\n", "direction_forget_factor", "=", "0", ",", "\n", "debug", "=", "False", ")", ":", "\n", "        ", "self", ".", "fletcher_reeves", "=", "fletcher_reeves", "\n", "self", ".", "standard_alpha", "=", "standard_alpha", "\n", "self", ".", "direction_forget_factor", "=", "direction_forget_factor", "\n", "self", ".", "debug", "=", "debug", "\n", "\n", "# State", "\n", "self", ".", "p", "=", "None", "\n", "self", ".", "rho", "=", "torch", ".", "ones", "(", "1", ")", "\n", "self", ".", "r_prev", "=", "None", "\n", "\n", "# Right hand side", "\n", "self", ".", "b", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.reset_state": [[68, 72], ["torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "None", "\n", "self", ".", "rho", "=", "torch", ".", "ones", "(", "1", ")", "\n", "self", ".", "r_prev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.run_CG": [[73, 165], ["range", "optimization.ConjugateGradientBase.reset_state", "optimization.ConjugateGradientBase.b.clone", "optimization.ConjugateGradientBase.residual_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.ConjugateGradientBase.M1", "optimization.ConjugateGradientBase.M2", "optimization.ConjugateGradientBase.ip", "optimization.ConjugateGradientBase.check_zero", "optimization.ConjugateGradientBase.A", "optimization.ConjugateGradientBase.ip", "optimization.ConjugateGradientBase.A", "optimization.ConjugateGradientBase.clone", "beta.clamp.clamp.clamp", "optimization.ConjugateGradientBase.clone", "optimization.ConjugateGradientBase.residual_norm", "optimization.ConjugateGradientBase.evaluate_CG_iteration", "print", "optimization.ConjugateGradientBase.ip", "optimization.ConjugateGradientBase.ip", "print"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.reset_state", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.residual_norm", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.FactorizedConvProblem.M1", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.M2", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.ip", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.check_zero", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.A", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.ip", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.A", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.residual_norm", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.evaluate_CG_iteration", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.ip", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.ip"], ["", "def", "run_CG", "(", "self", ",", "num_iter", ",", "x", "=", "None", ",", "eps", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Main conjugate gradient method.\n\n        args:\n            num_iter: Number of iterations.\n            x: Initial guess. Assumed zero if None.\n            eps: Stop if the residual norm gets smaller than this.\n        \"\"\"", "\n", "\n", "# Apply forgetting factor", "\n", "if", "self", ".", "direction_forget_factor", "==", "0", ":", "\n", "            ", "self", ".", "reset_state", "(", ")", "\n", "", "elif", "self", ".", "p", "is", "not", "None", ":", "\n", "            ", "self", ".", "rho", "/=", "self", ".", "direction_forget_factor", "\n", "\n", "", "if", "x", "is", "None", ":", "\n", "            ", "r", "=", "self", ".", "b", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "self", ".", "b", "-", "self", ".", "A", "(", "x", ")", "\n", "\n", "# Norms of residuals etc for debugging", "\n", "", "resvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "normr", "=", "self", ".", "residual_norm", "(", "r", ")", "\n", "resvec", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "resvec", "[", "0", "]", "=", "normr", "\n", "\n", "# Loop over iterations", "\n", "", "for", "ii", "in", "range", "(", "num_iter", ")", ":", "\n", "# Preconditioners", "\n", "            ", "y", "=", "self", ".", "M1", "(", "r", ")", "\n", "z", "=", "self", ".", "M2", "(", "y", ")", "\n", "\n", "rho1", "=", "self", ".", "rho", "\n", "self", ".", "rho", "=", "self", ".", "ip", "(", "r", ",", "z", ")", "\n", "\n", "if", "self", ".", "check_zero", "(", "self", ".", "rho", ")", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "print", "(", "'Stopped CG since rho = 0'", ")", "\n", "if", "resvec", "is", "not", "None", ":", "\n", "                        ", "resvec", "=", "resvec", "[", ":", "ii", "+", "1", "]", "\n", "", "", "return", "x", ",", "resvec", "\n", "\n", "", "if", "self", ".", "p", "is", "None", ":", "\n", "                ", "self", ".", "p", "=", "z", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "fletcher_reeves", ":", "\n", "                    ", "beta", "=", "self", ".", "rho", "/", "rho1", "\n", "", "else", ":", "\n", "                    ", "rho2", "=", "self", ".", "ip", "(", "self", ".", "r_prev", ",", "z", ")", "\n", "beta", "=", "(", "self", ".", "rho", "-", "rho2", ")", "/", "rho1", "\n", "\n", "", "beta", "=", "beta", ".", "clamp", "(", "0", ")", "\n", "self", ".", "p", "=", "z", "+", "self", ".", "p", "*", "beta", "\n", "\n", "", "q", "=", "self", ".", "A", "(", "self", ".", "p", ")", "\n", "pq", "=", "self", ".", "ip", "(", "self", ".", "p", ",", "q", ")", "\n", "\n", "if", "self", ".", "standard_alpha", ":", "\n", "                ", "alpha", "=", "self", ".", "rho", "/", "pq", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "self", ".", "ip", "(", "self", ".", "p", ",", "r", ")", "/", "pq", "\n", "\n", "# Save old r for PR formula", "\n", "", "if", "not", "self", ".", "fletcher_reeves", ":", "\n", "                ", "self", ".", "r_prev", "=", "r", ".", "clone", "(", ")", "\n", "\n", "# Form new iterate", "\n", "", "if", "x", "is", "None", ":", "\n", "                ", "x", "=", "self", ".", "p", "*", "alpha", "\n", "", "else", ":", "\n", "                ", "x", "+=", "self", ".", "p", "*", "alpha", "\n", "\n", "", "if", "ii", "<", "num_iter", "-", "1", "or", "self", ".", "debug", ":", "\n", "                ", "r", "-=", "q", "*", "alpha", "\n", "\n", "", "if", "eps", ">", "0.0", "or", "self", ".", "debug", ":", "\n", "                ", "normr", "=", "self", ".", "residual_norm", "(", "r", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "                ", "self", ".", "evaluate_CG_iteration", "(", "x", ")", "\n", "resvec", "[", "ii", "+", "1", "]", "=", "normr", "\n", "\n", "", "if", "eps", ">", "0", "and", "normr", "<=", "eps", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "print", "(", "'Stopped CG since norm smaller than eps'", ")", "\n", "", "break", "\n", "\n", "", "", "if", "resvec", "is", "not", "None", ":", "\n", "            ", "resvec", "=", "resvec", "[", ":", "ii", "+", "2", "]", "\n", "\n", "", "return", "x", ",", "resvec", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.A": [[166, 169], ["None"], "methods", ["None"], ["", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "# Implements the left hand operation", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.ip": [[170, 173], ["a.view", "b.view"], "methods", ["None"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "# Implements the inner product", "\n", "        ", "return", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.residual_norm": [[174, 179], ["optimization.ConjugateGradientBase.ip().sum", "isinstance", "sum.sqrt", "sum", "optimization.ConjugateGradientBase.ip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.ip"], ["", "def", "residual_norm", "(", "self", ",", "r", ")", ":", "\n", "        ", "res", "=", "self", ".", "ip", "(", "r", ",", "r", ")", ".", "sum", "(", ")", "\n", "if", "isinstance", "(", "res", ",", "(", "TensorList", ",", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "res", "=", "sum", "(", "res", ")", "\n", "", "return", "res", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.check_zero": [[180, 187], ["isinstance", "s.abs", "sum", "sum.item"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["", "def", "check_zero", "(", "self", ",", "s", ",", "eps", "=", "0.0", ")", ":", "\n", "        ", "ss", "=", "s", ".", "abs", "(", ")", "<=", "eps", "\n", "if", "isinstance", "(", "ss", ",", "(", "TensorList", ",", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "ss", "=", "sum", "(", "ss", ")", "\n", "", "mark", "=", "ss", ".", "item", "(", ")", ">", "0", "\n", "\n", "return", "mark", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.M1": [[188, 191], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "# M1 preconditioner", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.M2": [[192, 195], ["None"], "methods", ["None"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "# M2 preconditioner", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.evaluate_CG_iteration": [[196, 198], ["None"], "methods", ["None"], ["", "def", "evaluate_CG_iteration", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradient.__init__": [[202, 228], ["optimization.ConjugateGradientBase.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "\n", "problem", ":", "L2Problem", ",", "\n", "variable", ":", "TensorList", ",", "\n", "cg_eps", "=", "0.0", ",", "\n", "fletcher_reeves", "=", "True", ",", "\n", "standard_alpha", "=", "True", ",", "\n", "direction_forget_factor", "=", "0", ",", "\n", "debug", "=", "False", ",", "\n", "plotting", "=", "False", ",", "\n", "fig_num", "=", "(", "10", ",", "11", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fletcher_reeves", ",", "standard_alpha", ",", "\n", "direction_forget_factor", ",", "debug", "or", "plotting", ")", "\n", "\n", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "fig_num", "\n", "\n", "self", ".", "cg_eps", "=", "cg_eps", "\n", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n", "self", ".", "residuals", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradient.clear_temp": [[229, 233], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradient.run": [[234, 283], ["optimization.ConjugateGradient.x.requires_grad_", "optimization.ConjugateGradient.problem", "optimization.ConjugateGradient.f0.detach", "optimization.ConjugateGradient.g.requires_grad_", "tensorlist.TensorList", "optimization.ConjugateGradient.run_CG", "optimization.ConjugateGradient.x.detach_", "optimization.ConjugateGradient.x.detach_", "optimization.ConjugateGradient.clear_temp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.ConjugateGradient.problem.ip_output", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.ConjugateGradient.dfdxt_g.detach", "optimization.ConjugateGradient.problem", "optimization.ConjugateGradient.problem.ip_output", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "plotting.plot_graph", "plotting.plot_graph"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.run_CG", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_cg_iter", ")", ":", "\n", "        ", "\"\"\"Run the oprimizer with the provided number of iterations.\"\"\"", "\n", "\n", "if", "num_cg_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "lossvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "\n", "", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Create copy with graph detached", "\n", "self", ".", "g", "=", "self", ".", "f0", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "[", "0", "]", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "g", ",", "self", ".", "g", ")", "\n", "\n", "", "self", ".", "g", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Get df/dx^t @ f0", "\n", "self", ".", "dfdxt_g", "=", "TensorList", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "self", ".", "g", ",", "create_graph", "=", "True", ")", ")", "\n", "\n", "# Get the right hand side", "\n", "self", ".", "b", "=", "-", "self", ".", "dfdxt_g", ".", "detach", "(", ")", "\n", "\n", "# Run CG", "\n", "delta_x", ",", "res", "=", "self", ".", "run_CG", "(", "num_cg_iter", ",", "eps", "=", "self", ".", "cg_eps", ")", "\n", "\n", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "+=", "delta_x", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "f0", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "lossvec", "[", "-", "1", "]", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "self", ".", "residuals", "=", "torch", ".", "cat", "(", "(", "self", ".", "residuals", ",", "res", ")", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "lossvec", ")", ")", "\n", "if", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "residuals", ",", "\n", "self", ".", "fig_num", "[", "1", "]", ",", "\n", "title", "=", "'CG residuals'", ")", "\n", "\n", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradient.A": [[284, 294], ["torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "tensorlist.TensorList", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["None"], ["", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "        ", "dfdx_x", "=", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "dfdxt_g", ",", "\n", "self", ".", "g", ",", "\n", "grad_outputs", "=", "x", ",", "\n", "retain_graph", "=", "True", ")", "\n", "return", "TensorList", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "\n", "self", ".", "x", ",", "\n", "grad_outputs", "=", "dfdx_x", ",", "\n", "retain_graph", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradient.ip": [[295, 297], ["optimization.ConjugateGradient.problem.ip_input"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.ConvProblem.ip_input"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "ip_input", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradient.M1": [[298, 300], ["optimization.ConjugateGradient.problem.M1"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.FactorizedConvProblem.M1"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradient.M2": [[301, 303], ["optimization.ConjugateGradient.problem.M2"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.M2"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.__init__": [[307, 336], ["optimization.ConjugateGradientBase.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "\n", "problem", ":", "L2Problem", ",", "\n", "variable", ":", "TensorList", ",", "\n", "cg_eps", "=", "0.0", ",", "\n", "fletcher_reeves", "=", "True", ",", "\n", "standard_alpha", "=", "True", ",", "\n", "direction_forget_factor", "=", "0", ",", "\n", "debug", "=", "False", ",", "\n", "analyze", "=", "False", ",", "\n", "plotting", "=", "False", ",", "\n", "fig_num", "=", "(", "10", ",", "11", ",", "12", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fletcher_reeves", ",", "standard_alpha", ",", "\n", "direction_forget_factor", ",", "debug", "or", "analyze", "or", "plotting", ")", "\n", "\n", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "analyze_convergence", "=", "analyze", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "fig_num", "\n", "\n", "self", ".", "cg_eps", "=", "cg_eps", "\n", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n", "self", ".", "residuals", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.clear_temp": [[337, 341], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.run_GN": [[342, 344], ["optimization.GaussNewtonCG.run"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "run_GN", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "run", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.run": [[345, 390], ["isinstance", "len", "optimization.GaussNewtonCG.x.detach_", "optimization.GaussNewtonCG.clear_temp", "optimization.GaussNewtonCG.evaluate_CG_iteration", "optimization.GaussNewtonCG.run_GN_iter", "ValueError", "optimization.GaussNewtonCG.problem", "optimization.GaussNewtonCG.problem.ip_output", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "plotting.plot_graph", "plotting.plot_graph", "plotting.plot_graph", "optimization.GaussNewtonCG.detach().cpu().view", "optimization.GaussNewtonCG.detach().cpu", "optimization.GaussNewtonCG.detach"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.evaluate_CG_iteration", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.run_GN_iter", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_cg_iter", ",", "num_gn_iter", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run the optimizer.\n        args:\n            num_cg_iter: Number of CG iterations per GN iter. If list, then each entry specifies number of CG iterations\n                         and number of GN iterations is given by the length of the list.\n            num_gn_iter: Number of GN iterations. Shall only be given if num_cg_iter is an integer.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "num_cg_iter", ",", "int", ")", ":", "\n", "            ", "if", "num_gn_iter", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'Must specify number of GN iter if CG iter is constant'", ")", "\n", "", "num_cg_iter", "=", "[", "num_cg_iter", "]", "*", "num_gn_iter", "\n", "\n", "", "num_gn_iter", "=", "len", "(", "num_cg_iter", ")", "\n", "if", "num_gn_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "analyze_convergence", ":", "\n", "            ", "self", ".", "evaluate_CG_iteration", "(", "0", ")", "\n", "\n", "# Outer loop for running the GN iterations.", "\n", "", "for", "cg_iter", "in", "num_cg_iter", ":", "\n", "            ", "self", ".", "run_GN_iter", "(", "cg_iter", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "if", "not", "self", ".", "analyze_convergence", ":", "\n", "                ", "self", ".", "f0", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "\n", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "residuals", ",", "\n", "self", ".", "fig_num", "[", "1", "]", ",", "\n", "title", "=", "'CG residuals'", ")", "\n", "if", "self", ".", "analyze_convergence", ":", "\n", "                    ", "plot_graph", "(", "self", ".", "gradient_mags", ",", "self", ".", "fig_num", "[", "2", "]", ",", "\n", "'Gradient magnitude'", ")", "\n", "\n", "", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n", "return", "self", ".", "losses", ",", "self", ".", "residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.run_GN_iter": [[391, 423], ["optimization.GaussNewtonCG.x.requires_grad_", "optimization.GaussNewtonCG.problem", "optimization.GaussNewtonCG.f0.detach", "optimization.GaussNewtonCG.g.requires_grad_", "tensorlist.TensorList", "optimization.GaussNewtonCG.run_CG", "optimization.GaussNewtonCG.x.detach_", "optimization.GaussNewtonCG.problem.ip_output", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.GaussNewtonCG.dfdxt_g.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "optimization.GaussNewtonCG.detach().cpu().view", "optimization.GaussNewtonCG.detach().cpu", "optimization.GaussNewtonCG.detach"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.run_CG", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output"], ["", "def", "run_GN_iter", "(", "self", ",", "num_cg_iter", ")", ":", "\n", "        ", "\"\"\"Runs a single GN iteration.\"\"\"", "\n", "\n", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Create copy with graph detached", "\n", "self", ".", "g", "=", "self", ".", "f0", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "debug", "and", "not", "self", ".", "analyze_convergence", ":", "\n", "            ", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "g", ",", "self", ".", "g", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "", "self", ".", "g", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Get df/dx^t @ f0", "\n", "self", ".", "dfdxt_g", "=", "TensorList", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "self", ".", "g", ",", "create_graph", "=", "True", ")", ")", "\n", "\n", "# Get the right hand side", "\n", "self", ".", "b", "=", "-", "self", ".", "dfdxt_g", ".", "detach", "(", ")", "\n", "\n", "# Run CG", "\n", "delta_x", ",", "res", "=", "self", ".", "run_CG", "(", "num_cg_iter", ",", "eps", "=", "self", ".", "cg_eps", ")", "\n", "\n", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "+=", "delta_x", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "residuals", "=", "torch", ".", "cat", "(", "(", "self", ".", "residuals", ",", "res", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.A": [[424, 431], ["torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "tensorlist.TensorList", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["None"], ["", "", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "        ", "dfdx_x", "=", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "dfdxt_g", ",", "\n", "self", ".", "g", ",", "\n", "grad_outputs", "=", "x", ",", "\n", "retain_graph", "=", "True", ")", "\n", "return", "TensorList", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "dfdx_x", ",", "retain_graph", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.ip": [[432, 434], ["optimization.GaussNewtonCG.problem.ip_input"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.ConvProblem.ip_input"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "ip_input", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.M1": [[435, 437], ["optimization.GaussNewtonCG.problem.M1"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.FactorizedConvProblem.M1"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.M2": [[438, 440], ["optimization.GaussNewtonCG.problem.M2"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.M2"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GaussNewtonCG.evaluate_CG_iteration": [[441, 457], ["x.requires_grad_", "optimization.GaussNewtonCG.problem", "optimization.GaussNewtonCG.problem.ip_output", "tensorlist.TensorList", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.GaussNewtonCG.detach().cpu().view", "sum().cpu().sqrt().detach().view", "optimization.GaussNewtonCG.detach().cpu", "sum().cpu().sqrt().detach", "optimization.GaussNewtonCG.detach", "sum().cpu().sqrt", "sum().cpu", "sum", "tensorlist.TensorList.view", "tensorlist.TensorList.view"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output"], ["", "def", "evaluate_CG_iteration", "(", "self", ",", "delta_x", ")", ":", "\n", "        ", "if", "self", ".", "analyze_convergence", ":", "\n", "            ", "x", "=", "(", "self", ".", "x", "+", "delta_x", ")", ".", "detach", "(", ")", "\n", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# compute loss and gradient", "\n", "f", "=", "self", ".", "problem", "(", "x", ")", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "f", ",", "f", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "x", ")", ")", "\n", "\n", "# store in the vectors", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "\n", "(", "self", ".", "gradient_mags", ",", "\n", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "\n", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescentL2.__init__": [[461, 485], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescentL2.clear_temp"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.clear_temp"], ["def", "__init__", "(", "self", ",", "\n", "problem", ":", "L2Problem", ",", "\n", "variable", ":", "TensorList", ",", "\n", "step_length", ":", "float", ",", "\n", "momentum", ":", "float", "=", "0.0", ",", "\n", "debug", "=", "False", ",", "\n", "plotting", "=", "False", ",", "\n", "fig_num", "=", "(", "10", ",", "11", ")", ")", ":", "\n", "\n", "        ", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "step_legnth", "=", "step_length", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "debug", "=", "debug", "or", "plotting", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "fig_num", "\n", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "residuals", "=", "None", "\n", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescentL2.clear_temp": [[486, 489], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescentL2.run": [[490, 543], ["range", "optimization.GradientDescentL2.x.detach_", "optimization.GradientDescentL2.clear_temp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescentL2.x.requires_grad_", "optimization.GradientDescentL2.problem", "optimization.GradientDescentL2.problem.ip_output", "tensorlist.TensorList", "optimization.GradientDescentL2.x.detach_", "optimization.GradientDescentL2.x.requires_grad_", "optimization.GradientDescentL2.problem", "optimization.GradientDescentL2.problem.ip_output", "tensorlist.TensorList", "optimization.GradientDescentL2.problem.ip_output().item", "sum().cpu().sqrt().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.GradientDescentL2.item", "sum().sqrt().item", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "plotting.plot_graph", "plotting.plot_graph", "optimization.GradientDescentL2.problem.ip_output", "sum().cpu().sqrt", "sum().sqrt", "sum().cpu", "sum", "sum", "tensorlist.TensorList.view", "tensorlist.TensorList.view", "tensorlist.TensorList.view", "tensorlist.TensorList.view"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.L2Problem.ip_output"], ["", "def", "run", "(", "self", ",", "num_iter", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "if", "num_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "lossvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "grad_mags", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Compute loss", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "\n", "# Compute grad", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "\n", "# Update direction", "\n", "if", "self", ".", "dir", "is", "None", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "\n", "", "else", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "+", "self", ".", "momentum", "*", "self", ".", "dir", "\n", "\n", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "-=", "self", ".", "step_legnth", "*", "self", ".", "dir", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "lossvec", "[", "i", "]", "=", "loss", ".", "item", "(", ")", "\n", "grad_mags", "[", "i", "]", "=", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "f0", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "lossvec", "[", "-", "1", "]", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", ".", "item", "(", ")", "\n", "grad_mags", "[", "-", "1", "]", "=", "sum", "(", "\n", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "lossvec", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "(", "self", ".", "gradient_mags", ",", "grad_mags", ")", ")", "\n", "if", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "gradient_mags", ",", "\n", "self", ".", "fig_num", "[", "1", "]", ",", "\n", "title", "=", "'Gradient magnitude'", ")", "\n", "\n", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.__init__": [[547, 579], ["optimization.ConjugateGradientBase.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "\n", "problem", ":", "MinimizationProblem", ",", "\n", "variable", ":", "TensorList", ",", "\n", "init_hessian_reg", "=", "0.0", ",", "\n", "hessian_reg_factor", "=", "1.0", ",", "\n", "cg_eps", "=", "0.0", ",", "\n", "fletcher_reeves", "=", "True", ",", "\n", "standard_alpha", "=", "True", ",", "\n", "direction_forget_factor", "=", "0", ",", "\n", "debug", "=", "False", ",", "\n", "analyze", "=", "False", ",", "\n", "plotting", "=", "False", ",", "\n", "fig_num", "=", "(", "10", ",", "11", ",", "12", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fletcher_reeves", ",", "standard_alpha", ",", "\n", "direction_forget_factor", ",", "debug", "or", "analyze", "or", "plotting", ")", "\n", "\n", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "analyze_convergence", "=", "analyze", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "fig_num", "\n", "\n", "self", ".", "hessian_reg", "=", "init_hessian_reg", "\n", "self", ".", "hessian_reg_factor", "=", "hessian_reg_factor", "\n", "self", ".", "cg_eps", "=", "cg_eps", "\n", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "\n", "self", ".", "residuals", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.clear_temp": [[580, 583], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.run": [[584, 623], ["isinstance", "len", "optimization.NewtonCG.x.detach_", "optimization.NewtonCG.clear_temp", "optimization.NewtonCG.evaluate_CG_iteration", "optimization.NewtonCG.run_newton_iter", "optimization.NewtonCG.problem", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "plotting.plot_graph", "plotting.plot_graph", "plotting.plot_graph", "optimization.NewtonCG.detach().cpu().view", "optimization.NewtonCG.detach().cpu", "optimization.NewtonCG.detach"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.evaluate_CG_iteration", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.run_newton_iter", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_cg_iter", ",", "num_newton_iter", "=", "None", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "num_cg_iter", ",", "int", ")", ":", "\n", "            ", "if", "num_cg_iter", "==", "0", ":", "\n", "                ", "return", "\n", "", "if", "num_newton_iter", "is", "None", ":", "\n", "                ", "num_newton_iter", "=", "1", "\n", "", "num_cg_iter", "=", "[", "num_cg_iter", "]", "*", "num_newton_iter", "\n", "\n", "", "num_newton_iter", "=", "len", "(", "num_cg_iter", ")", "\n", "if", "num_newton_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "analyze_convergence", ":", "\n", "            ", "self", ".", "evaluate_CG_iteration", "(", "0", ")", "\n", "\n", "", "for", "cg_iter", "in", "num_cg_iter", ":", "\n", "            ", "self", ".", "run_newton_iter", "(", "cg_iter", ")", "\n", "self", ".", "hessian_reg", "*=", "self", ".", "hessian_reg_factor", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "if", "not", "self", ".", "analyze_convergence", ":", "\n", "                ", "loss", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "\n", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "residuals", ",", "\n", "self", ".", "fig_num", "[", "1", "]", ",", "\n", "title", "=", "'CG residuals'", ")", "\n", "if", "self", ".", "analyze_convergence", ":", "\n", "                    ", "plot_graph", "(", "self", ".", "gradient_mags", ",", "self", ".", "fig_num", "[", "2", "]", ",", "\n", "'Gradient magnitude'", ")", "\n", "\n", "", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n", "return", "self", ".", "losses", ",", "self", ".", "residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.run_newton_iter": [[624, 650], ["optimization.NewtonCG.x.requires_grad_", "optimization.NewtonCG.problem", "tensorlist.TensorList", "optimization.NewtonCG.run_CG", "optimization.NewtonCG.x.detach_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.NewtonCG.g.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "optimization.NewtonCG.f0.detach().cpu().view", "optimization.NewtonCG.f0.detach().cpu", "optimization.NewtonCG.f0.detach"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.ConjugateGradientBase.run_CG"], ["", "def", "run_newton_iter", "(", "self", ",", "num_cg_iter", ")", ":", "\n", "\n", "        ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "if", "self", ".", "debug", "and", "not", "self", ".", "analyze_convergence", ":", "\n", "            ", "self", ".", "losses", "=", "torch", ".", "cat", "(", "\n", "(", "self", ".", "losses", ",", "self", ".", "f0", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "# Gradient of loss", "\n", "", "self", ".", "g", "=", "TensorList", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "create_graph", "=", "True", ")", ")", "\n", "\n", "# Get the right hand side", "\n", "self", ".", "b", "=", "-", "self", ".", "g", ".", "detach", "(", ")", "\n", "\n", "# Run CG", "\n", "delta_x", ",", "res", "=", "self", ".", "run_CG", "(", "num_cg_iter", ",", "eps", "=", "self", ".", "cg_eps", ")", "\n", "\n", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "+=", "delta_x", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "residuals", "=", "torch", ".", "cat", "(", "(", "self", ".", "residuals", ",", "res", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.A": [[651, 655], ["tensorlist.TensorList", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["None"], ["", "", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "TensorList", "(", "\n", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "g", ",", "self", ".", "x", ",", "x", ",", "\n", "retain_graph", "=", "True", ")", ")", "+", "self", ".", "hessian_reg", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.ip": [[656, 659], ["optimization.NewtonCG.problem.ip_input"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.ConvProblem.ip_input"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "# Implements the inner product", "\n", "        ", "return", "self", ".", "problem", ".", "ip_input", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.M1": [[660, 662], ["optimization.NewtonCG.problem.M1"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.FactorizedConvProblem.M1"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.M2": [[663, 665], ["optimization.NewtonCG.problem.M2"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.M2"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.NewtonCG.evaluate_CG_iteration": [[666, 681], ["x.requires_grad_", "optimization.NewtonCG.problem", "tensorlist.TensorList", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.NewtonCG.detach().cpu().view", "sum().cpu().sqrt().detach().view", "optimization.NewtonCG.detach().cpu", "sum().cpu().sqrt().detach", "optimization.NewtonCG.detach", "sum().cpu().sqrt", "sum().cpu", "sum", "tensorlist.TensorList.view", "tensorlist.TensorList.view"], "methods", ["None"], ["", "def", "evaluate_CG_iteration", "(", "self", ",", "delta_x", ")", ":", "\n", "        ", "if", "self", ".", "analyze_convergence", ":", "\n", "            ", "x", "=", "(", "self", ".", "x", "+", "delta_x", ")", ".", "detach", "(", ")", "\n", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# compute loss and gradient", "\n", "loss", "=", "self", ".", "problem", "(", "x", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "x", ")", ")", "\n", "\n", "# store in the vectors", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "\n", "(", "self", ".", "gradient_mags", ",", "\n", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "\n", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.__init__": [[685, 709], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescent.clear_temp"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.clear_temp"], ["def", "__init__", "(", "self", ",", "\n", "problem", ":", "MinimizationProblem", ",", "\n", "variable", ":", "TensorList", ",", "\n", "step_length", ":", "float", ",", "\n", "momentum", ":", "float", "=", "0.0", ",", "\n", "debug", "=", "False", ",", "\n", "plotting", "=", "False", ",", "\n", "fig_num", "=", "(", "10", ",", "11", ")", ")", ":", "\n", "\n", "        ", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "step_legnth", "=", "step_length", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "debug", "=", "debug", "or", "plotting", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "fig_num", "\n", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "residuals", "=", "None", "\n", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.clear_temp": [[710, 712], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.run": [[713, 762], ["range", "optimization.GradientDescent.x.detach_", "optimization.GradientDescent.clear_temp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescent.x.requires_grad_", "optimization.GradientDescent.problem", "tensorlist.TensorList", "optimization.GradientDescent.x.detach_", "optimization.GradientDescent.x.requires_grad_", "optimization.GradientDescent.problem", "tensorlist.TensorList", "optimization.GradientDescent.item", "sum().cpu().sqrt().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.GradientDescent.item", "sum().sqrt().item", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "plotting.plot_graph", "plotting.plot_graph", "sum().cpu().sqrt", "sum().sqrt", "sum().cpu", "sum", "sum", "tensorlist.TensorList.view", "tensorlist.TensorList.view", "tensorlist.TensorList.view", "tensorlist.TensorList.view"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_iter", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "if", "num_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "lossvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "grad_mags", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "loss", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Compute grad", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "\n", "# Update direction", "\n", "if", "self", ".", "dir", "is", "None", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "\n", "", "else", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "+", "self", ".", "momentum", "*", "self", ".", "dir", "\n", "\n", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "-=", "self", ".", "step_legnth", "*", "self", ".", "dir", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "lossvec", "[", "i", "]", "=", "loss", ".", "item", "(", ")", "\n", "grad_mags", "[", "i", "]", "=", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "loss", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "lossvec", "[", "-", "1", "]", "=", "loss", ".", "item", "(", ")", "\n", "grad_mags", "[", "-", "1", "]", "=", "sum", "(", "\n", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "lossvec", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "(", "self", ".", "gradient_mags", ",", "grad_mags", ")", ")", "\n", "if", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "gradient_mags", ",", "\n", "self", ".", "fig_num", "[", "1", "]", ",", "\n", "title", "=", "'Gradient magnitude'", ")", "\n", "\n", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_complex": [[6, 8], ["a.dim"], "function", ["None"], ["def", "is_complex", "(", "a", ":", "torch", ".", "Tensor", ")", "->", "bool", ":", "\n", "    ", "return", "a", ".", "dim", "(", ")", ">=", "4", "and", "a", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real": [[10, 12], ["complex.is_complex"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_complex"], ["", "def", "is_real", "(", "a", ":", "torch", ".", "Tensor", ")", "->", "bool", ":", "\n", "    ", "return", "not", "is_complex", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult": [[14, 34], ["complex.is_real", "complex.is_real", "complex.mult_real_cplx", "complex.mult_real_cplx", "complex.mult_real_cplx", "a.dim", "b.dim", "ValueError", "b.dim", "a.dim", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_real_cplx", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_real_cplx", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_real_cplx"], ["", "@", "tensor_operation", "\n", "def", "mult", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex multiplication of complex tensors.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "if", "a", ".", "dim", "(", ")", ">=", "b", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# a is real", "\n", "", "return", "mult_real_cplx", "(", "a", ",", "b", ")", "\n", "", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "if", "b", ".", "dim", "(", ")", ">=", "a", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# b is real", "\n", "", "return", "mult_real_cplx", "(", "b", ",", "a", ")", "\n", "\n", "# Both complex", "\n", "", "c", "=", "mult_real_cplx", "(", "a", "[", "...", ",", "0", "]", ",", "b", ")", "\n", "c", "[", "...", ",", "0", "]", "-=", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "1", "]", "\n", "c", "[", "...", ",", "1", "]", "+=", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "0", "]", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_conj": [[36, 56], ["complex.is_real", "complex.is_real", "complex.mult_real_cplx", "complex.mult_real_cplx", "complex.mult_real_cplx", "a.dim", "b.dim", "ValueError", "complex.conj", "b.dim", "a.dim", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_real_cplx", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_real_cplx", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_real_cplx", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.conj"], ["", "@", "tensor_operation", "\n", "def", "mult_conj", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex multiplication of complex tensors, with conjugate on b: a*conj(b).\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "if", "a", ".", "dim", "(", ")", ">=", "b", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# a is real", "\n", "", "return", "mult_real_cplx", "(", "a", ",", "conj", "(", "b", ")", ")", "\n", "", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "if", "b", ".", "dim", "(", ")", ">=", "a", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# b is real", "\n", "", "return", "mult_real_cplx", "(", "b", ",", "a", ")", "\n", "\n", "# Both complex", "\n", "", "c", "=", "mult_real_cplx", "(", "b", "[", "...", ",", "0", "]", ",", "a", ")", "\n", "c", "[", "...", ",", "0", "]", "+=", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "1", "]", "\n", "c", "[", "...", ",", "1", "]", "-=", "a", "[", "...", ",", "0", "]", "*", "b", "[", "...", ",", "1", "]", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_real_cplx": [[58, 66], ["complex.is_real", "ValueError", "a.unsqueeze"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "mult_real_cplx", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex multiplication of real tensor a with complex tensor b.\"\"\"", "\n", "\n", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "a", ".", "unsqueeze", "(", "-", "1", ")", "*", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.div": [[68, 79], ["complex.is_real", "complex.div_cplx_real", "complex.div_cplx_real", "complex.mult_conj", "complex.abs_sqr", "b.dim", "a.dim", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.div_cplx_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.div_cplx_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult_conj", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs_sqr"], ["", "@", "tensor_operation", "\n", "def", "div", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex division of complex tensors.\"\"\"", "\n", "\n", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "if", "b", ".", "dim", "(", ")", ">=", "a", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# b is real", "\n", "", "return", "div_cplx_real", "(", "a", ",", "b", ")", "\n", "\n", "", "return", "div_cplx_real", "(", "mult_conj", "(", "a", ",", "b", ")", ",", "abs_sqr", "(", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.div_cplx_real": [[81, 89], ["complex.is_real", "ValueError", "b.unsqueeze"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "div_cplx_real", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex division of complex tensor a with real tensor b.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "a", "/", "b", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs_sqr": [[91, 99], ["complex.is_real", "torch.sum", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "abs_sqr", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Squared absolute value.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "torch", ".", "sum", "(", "a", "*", "a", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs": [[101, 109], ["complex.is_real", "torch.sqrt", "ValueError", "complex.abs_sqr"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs_sqr"], ["", "@", "tensor_operation", "\n", "def", "abs", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Absolute value.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "torch", ".", "sqrt", "(", "abs_sqr", "(", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.conj": [[111, 120], ["complex.is_real", "complex.complex", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex"], ["", "@", "tensor_operation", "\n", "def", "conj", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Complex conjugate.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "# return a * torch.Tensor([1, -1], device=a.device)", "\n", "", "return", "complex", "(", "a", "[", "...", ",", "0", "]", ",", "-", "a", "[", "...", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.real": [[122, 130], ["complex.is_real", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "real", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Real part.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "a", "[", "...", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.imag": [[132, 140], ["complex.is_real", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "imag", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Imaginary part.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "a", "[", "...", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex": [[142, 152], ["torch.cat", "b.new_zeros.new_zeros", "a.new_zeros.new_zeros", "b.new_zeros.unsqueeze", "a.new_zeros.unsqueeze"], "function", ["None"], ["", "@", "tensor_operation", "\n", "def", "complex", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create complex tensor from real and imaginary part.\"\"\"", "\n", "\n", "if", "b", "is", "None", ":", "\n", "        ", "b", "=", "a", ".", "new_zeros", "(", "a", ".", "shape", ")", "\n", "", "elif", "a", "is", "None", ":", "\n", "        ", "a", "=", "b", ".", "new_zeros", "(", "b", ".", "shape", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "(", "a", ".", "unsqueeze", "(", "-", "1", ")", ",", "b", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mtimes": [[154, 192], ["complex.is_real", "complex.is_real", "complex.mtimes_real_complex", "complex.mtimes_complex_real", "complex.complex", "complex.complex", "complex.complex", "complex.complex", "a.dim", "b.dim", "ValueError", "b.dim", "a.dim", "ValueError", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mtimes_real_complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mtimes_complex_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul"], ["", "@", "tensor_operation", "\n", "def", "mtimes", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ",", "conj_a", "=", "False", ",", "conj_b", "=", "False", ")", ":", "\n", "    ", "\"\"\"Complex matrix multiplication of complex tensors.\n    The dimensions (-3, -2) are matrix multiplied. -1 is the complex dimension.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "if", "a", ".", "dim", "(", ")", ">=", "b", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "", "return", "mtimes_real_complex", "(", "a", ",", "b", ",", "conj_b", "=", "conj_b", ")", "\n", "", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "if", "b", ".", "dim", "(", ")", ">=", "a", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "", "return", "mtimes_complex_real", "(", "a", ",", "b", ",", "conj_a", "=", "conj_a", ")", "\n", "\n", "", "if", "not", "conj_a", "and", "not", "conj_b", ":", "\n", "        ", "return", "complex", "(", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "+", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", ")", "\n", "", "if", "conj_a", "and", "not", "conj_b", ":", "\n", "        ", "return", "complex", "(", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "+", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "-", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", ")", "\n", "", "if", "not", "conj_a", "and", "conj_b", ":", "\n", "        ", "return", "complex", "(", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "+", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", ")", "\n", "", "if", "conj_a", "and", "conj_b", ":", "\n", "        ", "return", "complex", "(", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "-", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mtimes_real_complex": [[194, 203], ["complex.is_real", "ValueError", "complex.complex", "complex.complex", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul"], ["", "", "@", "tensor_operation", "\n", "def", "mtimes_real_complex", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ",", "conj_b", "=", "False", ")", ":", "\n", "    ", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "\n", "", "if", "not", "conj_b", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", ",", "b", "[", "...", ",", "0", "]", ")", ",", "torch", ".", "matmul", "(", "a", ",", "b", "[", "...", ",", "1", "]", ")", ")", "\n", "", "if", "conj_b", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", ",", "b", "[", "...", ",", "0", "]", ")", ",", "-", "torch", ".", "matmul", "(", "a", ",", "b", "[", "...", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mtimes_complex_real": [[205, 214], ["complex.is_real", "ValueError", "complex.complex", "complex.complex", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.is_real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.complex", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul"], ["", "", "@", "tensor_operation", "\n", "def", "mtimes_complex_real", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ",", "conj_a", "=", "False", ")", ":", "\n", "    ", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "\n", "", "if", "not", "conj_a", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", ")", ",", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", ")", ")", "\n", "", "if", "conj_a", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", ")", ",", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.exp_imag": [[216, 222], ["a.unsqueeze.unsqueeze", "torch.cat", "torch.cos", "torch.sin"], "function", ["None"], ["", "", "@", "tensor_operation", "\n", "def", "exp_imag", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Complex exponential with imaginary input: e^(i*a)\"\"\"", "\n", "\n", "a", "=", "a", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "torch", ".", "cat", "(", "(", "torch", ".", "cos", "(", "a", ")", ",", "torch", ".", "sin", "(", "a", ")", ")", ",", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensordict.TensorDict.concat": [[8, 11], ["tensordict.TensorDict"], "methods", ["None"], ["def", "concat", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Concatenates two dicts without copying internal data.\"\"\"", "\n", "return", "TensorDict", "(", "self", ",", "**", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensordict.TensorDict.copy": [[12, 14], ["tensordict.TensorDict", "super().copy"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "TensorDict", "(", "super", "(", "TensorDict", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensordict.TensorDict.__getattr__": [[15, 27], ["hasattr", "AttributeError", "tensordict.TensorDict", "hasattr", "tensordict.TensorDict.items", "getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "torch", ".", "Tensor", ",", "name", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "'\\'TensorDict\\' object has not attribute \\'{}\\''", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "def", "apply_attr", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "TensorDict", "(", "{", "\n", "n", ":", "getattr", "(", "e", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "if", "hasattr", "(", "e", ",", "name", ")", "else", "e", "\n", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "\n", "}", ")", "\n", "\n", "", "return", "apply_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensordict.TensorDict.attribute": [[28, 30], ["tensordict.TensorDict", "getattr", "tensordict.TensorDict.items"], "methods", ["None"], ["", "def", "attribute", "(", "self", ",", "attr", ":", "str", ",", "*", "args", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "n", ":", "getattr", "(", "e", ",", "attr", ",", "*", "args", ")", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensordict.TensorDict.apply": [[31, 33], ["tensordict.TensorDict", "fn", "tensordict.TensorDict.items"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "n", ":", "fn", "(", "e", ",", "*", "args", ",", "**", "kwargs", ")", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensordict.TensorDict._iterable": [[34, 37], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_iterable", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "(", "TensorDict", ",", "list", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.attention.normalize": [[4, 7], ["numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["def", "normalize", "(", "score", ")", ":", "\n", "    ", "score", "=", "(", "score", "-", "np", ".", "min", "(", "score", ")", ")", "/", "(", "np", ".", "max", "(", "score", ")", "-", "np", ".", "min", "(", "score", ")", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.attention.normfun": [[9, 12], ["numpy.exp"], "function", ["None"], ["", "def", "normfun", "(", "x", ",", "mu", ",", "sigma", ")", ":", "\n", "    ", "pdf", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "mu", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "return", "pdf", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.attention.generate_xy_attention": [[14, 21], ["numpy.linspace", "attention.normalize", "normfun().reshape", "normfun().reshape", "numpy.dot", "numpy.abs", "numpy.abs", "attention.normfun", "attention.normfun"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.attention.normalize", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.attention.normfun", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.attention.normfun"], ["", "def", "generate_xy_attention", "(", "center", ",", "size", ")", ":", "\n", "\n", "    ", "a", "=", "np", ".", "linspace", "(", "-", "size", "//", "2", "+", "1", ",", "size", "//", "2", ",", "size", ")", "\n", "x", "=", "-", "normfun", "(", "a", ",", "center", "[", "1", "]", ",", "10", ")", ".", "reshape", "(", "(", "size", ",", "1", ")", ")", "+", "2", "\n", "y", "=", "-", "normfun", "(", "a", ",", "center", "[", "0", "]", ",", "10", ")", ".", "reshape", "(", "(", "1", ",", "size", ")", ")", "+", "2", "\n", "z", "=", "normalize", "(", "1.", "/", "np", ".", "dot", "(", "np", ".", "abs", "(", "x", ")", ",", "np", ".", "abs", "(", "y", ")", ")", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.preprocessing.numpy_to_torch": [[7, 9], ["torch.from_numpy().float().permute().unsqueeze", "torch.from_numpy().float().permute().unsqueeze", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "numpy_to_torch", "(", "a", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "a", ")", ".", "float", "(", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.preprocessing.torch_to_numpy": [[11, 13], ["a.squeeze().permute().numpy", "a.squeeze().permute", "a.squeeze"], "function", ["None"], ["", "def", "torch_to_numpy", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "a", ".", "squeeze", "(", "0", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.preprocessing.sample_patch": [[15, 70], ["pos.long().clone", "torch.max().long", "torch.max().long", "torch.pad", "torch.interpolate", "torch.min().item", "torch.min().item", "int", "int", "sample_sz.float", "output_sz.long().tolist", "pos.long", "max", "torch.max", "torch.max", "torch.min", "torch.min", "int", "sz.round", "torch.Tensor", "torch.Tensor", "tl[].item", "tl[].item", "output_sz.long", "os[].item", "os[].item", "br[].item", "br[].item", "sample_sz.float", "output_sz.float"], "function", ["None"], ["", "def", "sample_patch", "(", "im", ":", "torch", ".", "Tensor", ",", "\n", "pos", ":", "torch", ".", "Tensor", ",", "\n", "sample_sz", ":", "torch", ".", "Tensor", ",", "\n", "output_sz", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Sample an image patch.\n\n    args:\n        im: Image\n        pos: center position of crop\n        sample_sz: size to crop\n        output_sz: size to resize to\n    \"\"\"", "\n", "\n", "# copy and convert", "\n", "posl", "=", "pos", ".", "long", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# Compute pre-downsampling factor", "\n", "if", "output_sz", "is", "not", "None", ":", "\n", "        ", "resize_factor", "=", "torch", ".", "min", "(", "sample_sz", ".", "float", "(", ")", "/", "output_sz", ".", "float", "(", ")", ")", ".", "item", "(", ")", "\n", "df", "=", "int", "(", "max", "(", "int", "(", "resize_factor", "-", "0.1", ")", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "df", "=", "int", "(", "1", ")", "\n", "\n", "", "sz", "=", "sample_sz", ".", "float", "(", ")", "/", "df", "# new size", "\n", "\n", "# Do downsampling", "\n", "if", "df", ">", "1", ":", "\n", "        ", "os", "=", "posl", "%", "df", "# offset", "\n", "posl", "=", "(", "posl", "-", "os", ")", "/", "df", "# new position", "\n", "im2", "=", "im", "[", "...", ",", "os", "[", "0", "]", ".", "item", "(", ")", ":", ":", "df", ",", "os", "[", "1", "]", ".", "item", "(", ")", ":", ":", "df", "]", "# downsample", "\n", "", "else", ":", "\n", "        ", "im2", "=", "im", "\n", "\n", "# compute size to crop", "\n", "", "szl", "=", "torch", ".", "max", "(", "sz", ".", "round", "(", ")", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", ".", "long", "(", ")", "\n", "\n", "# Extract top and bottom coordinates", "\n", "tl", "=", "posl", "-", "(", "szl", "-", "1", ")", "/", "2", "\n", "br", "=", "posl", "+", "szl", "/", "2", "\n", "\n", "# Get image patch", "\n", "im_patch", "=", "F", ".", "pad", "(", "im2", ",", "(", "-", "tl", "[", "1", "]", ".", "item", "(", ")", ",", "br", "[", "1", "]", ".", "item", "(", ")", "-", "im2", ".", "shape", "[", "3", "]", "+", "1", ",", "\n", "-", "tl", "[", "0", "]", ".", "item", "(", ")", ",", "br", "[", "0", "]", ".", "item", "(", ")", "-", "im2", ".", "shape", "[", "2", "]", "+", "1", ")", ",", "\n", "'replicate'", ")", "\n", "\n", "if", "output_sz", "is", "None", "or", "(", "im_patch", ".", "shape", "[", "-", "2", "]", "==", "output_sz", "[", "0", "]", "\n", "and", "im_patch", ".", "shape", "[", "-", "1", "]", "==", "output_sz", "[", "1", "]", ")", ":", "\n", "        ", "return", "im_patch", "\n", "\n", "# Resample", "\n", "", "im_patch", "=", "F", ".", "interpolate", "(", "im_patch", ",", "\n", "output_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "return", "im_patch", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__init__": [[8, 10], ["list", "list.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "list_of_tensors", "=", "list", "(", ")", ")", ":", "\n", "        ", "super", "(", "TensorList", ",", "self", ")", ".", "__init__", "(", "list_of_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__getitem__": [[11, 19], ["isinstance", "list.__getitem__", "isinstance", "tensorlist.TensorList", "tensorlist.TensorList", "list.__getitem__", "list.__getitem__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__getitem__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__getitem__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "TensorList", "(", "\n", "[", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "i", ")", "for", "i", "in", "item", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__add__": [[20, 24], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "+", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "+", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__radd__": [[25, 29], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "+", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "+", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__iadd__": [[30, 38], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "+=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "+=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__sub__": [[39, 43], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "-", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "-", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__rsub__": [[44, 48], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__rsub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "-", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "-", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__isub__": [[49, 57], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__isub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "-=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "-=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__mul__": [[58, 62], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "*", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "*", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__rmul__": [[63, 67], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "*", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "*", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__imul__": [[68, 76], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__imul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "*=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "*=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__truediv__": [[77, 81], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "/", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "/", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__rtruediv__": [[82, 86], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__rtruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "/", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "/", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__itruediv__": [[87, 95], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__itruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "/=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "/=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__matmul__": [[96, 100], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__matmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "@", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "@", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__rmatmul__": [[101, 105], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__rmatmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "@", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "@", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__imatmul__": [[106, 114], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__imatmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "@=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "@=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__mod__": [[115, 119], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__mod__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "%", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "%", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__rmod__": [[120, 124], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__rmod__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "%", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "%", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__pos__": [[125, 127], ["tensorlist.TensorList"], "methods", ["None"], ["", "def", "__pos__", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "+", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__neg__": [[128, 130], ["tensorlist.TensorList"], "methods", ["None"], ["", "def", "__neg__", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "-", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__le__": [[131, 135], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "<=", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "<=", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__ge__": [[136, 140], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", ">=", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", ">=", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat": [[141, 143], ["tensorlist.TensorList", "list.__add__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__add__"], ["", "def", "concat", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "__add__", "(", "other", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy": [[144, 146], ["tensorlist.TensorList", "super().copy"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.unroll": [[147, 158], ["tensorlist.TensorList", "any", "isinstance", "TensorList.extend", "TensorList.append", "isinstance", "t.unroll"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.unroll"], ["", "def", "unroll", "(", "self", ")", ":", "\n", "        ", "if", "not", "any", "(", "isinstance", "(", "t", ",", "TensorList", ")", "for", "t", "in", "self", ")", ":", "\n", "            ", "return", "self", "\n", "\n", "", "new_list", "=", "TensorList", "(", ")", "\n", "for", "t", "in", "self", ":", "\n", "            ", "if", "isinstance", "(", "t", ",", "TensorList", ")", ":", "\n", "                ", "new_list", ".", "extend", "(", "t", ".", "unroll", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "new_list", ".", "append", "(", "t", ")", "\n", "", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.attribute": [[159, 161], ["tensorlist.TensorList", "getattr"], "methods", ["None"], ["", "def", "attribute", "(", "self", ",", "attr", ":", "str", ",", "*", "args", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "getattr", "(", "e", ",", "attr", ",", "*", "args", ")", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply": [[162, 164], ["tensorlist.TensorList", "fn"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "fn", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "fn", "(", "e", ")", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.__getattr__": [[165, 174], ["hasattr", "AttributeError", "tensorlist.TensorList", "getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "torch", ".", "Tensor", ",", "name", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "'\\'TensorList\\' object has not attribute \\'{}\\''", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "def", "apply_attr", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "getattr", "(", "e", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "for", "e", "in", "self", "]", ")", "\n", "\n", "", "return", "apply_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList._iterable": [[175, 178], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_iterable", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "(", "TensorList", ",", "list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.tensor_operation": [[180, 208], ["functools.wraps", "isinstance", "op", "len", "ValueError", "len", "tensorlist.tensor_operation.islist"], "function", ["None"], ["", "", "def", "tensor_operation", "(", "op", ")", ":", "\n", "    ", "def", "islist", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "TensorList", ")", "\n", "\n", "", "@", "functools", ".", "wraps", "(", "op", ")", "\n", "def", "oplist", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Must be at least one argument without keyword (i.e. operand).'", ")", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "if", "islist", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "**", "kwargs", ")", "for", "a", "in", "args", "[", "0", "]", "]", ")", "\n", "", "", "else", ":", "\n", "# Multiple operands, assume max two", "\n", "            ", "if", "islist", "(", "args", "[", "0", "]", ")", "and", "islist", "(", "args", "[", "1", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "\n", "[", "op", "(", "a", ",", "b", ",", "*", "args", "[", "2", ":", "]", ",", "**", "kwargs", ")", "for", "a", ",", "b", "in", "zip", "(", "*", "args", "[", ":", "2", "]", ")", "]", ")", "\n", "", "if", "islist", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "*", "args", "[", "1", ":", "]", ",", "**", "kwargs", ")", "for", "a", "in", "args", "[", "0", "]", "]", ")", "\n", "", "if", "islist", "(", "args", "[", "1", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "\n", "[", "op", "(", "args", "[", "0", "]", ",", "b", ",", "*", "args", "[", "2", ":", "]", ",", "**", "kwargs", ")", "for", "b", "in", "args", "[", "1", "]", "]", ")", "\n", "\n", "# None of the operands are lists", "\n", "", "", "return", "op", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "oplist", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d": [[7, 47], ["torch.conv2d", "ValueError", "ValueError", "slice", "slice", "slice", "slice"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d"], ["@", "tensor_operation", "\n", "def", "conv2d", "(", "input", ":", "torch", ".", "Tensor", ",", "\n", "weight", ":", "torch", ".", "Tensor", ",", "\n", "bias", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Standard conv2d. Returns the input if weight=None.\"\"\"", "\n", "\n", "if", "weight", "is", "None", ":", "\n", "        ", "return", "input", "\n", "\n", "", "ind", "=", "None", "\n", "if", "mode", "is", "not", "None", ":", "\n", "        ", "if", "padding", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot input both padding and mode.'", ")", "\n", "", "if", "mode", "==", "'same'", ":", "\n", "            ", "padding", "=", "(", "weight", ".", "shape", "[", "2", "]", "//", "2", ",", "weight", ".", "shape", "[", "3", "]", "//", "2", ")", "\n", "if", "weight", ".", "shape", "[", "2", "]", "%", "2", "==", "0", "or", "weight", ".", "shape", "[", "3", "]", "%", "2", "==", "0", ":", "\n", "                ", "ind", "=", "(", "slice", "(", "-", "1", ")", "if", "weight", ".", "shape", "[", "2", "]", "%", "2", "==", "0", "else", "slice", "(", "None", ")", ",", "\n", "slice", "(", "-", "1", ")", "if", "weight", ".", "shape", "[", "3", "]", "%", "2", "==", "0", "else", "slice", "(", "None", ")", ")", "\n", "", "", "elif", "mode", "==", "'valid'", ":", "\n", "            ", "padding", "=", "(", "0", ",", "0", ")", "\n", "", "elif", "mode", "==", "'full'", ":", "\n", "            ", "padding", "=", "(", "weight", ".", "shape", "[", "2", "]", "-", "1", ",", "weight", ".", "shape", "[", "3", "]", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode for padding.'", ")", "\n", "\n", "", "", "out", "=", "F", ".", "conv2d", "(", "input", ",", "\n", "weight", ",", "\n", "bias", "=", "bias", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ")", "\n", "if", "ind", "is", "None", ":", "\n", "        ", "return", "out", "\n", "", "return", "out", "[", ":", ",", ":", ",", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv1x1": [[49, 60], ["torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "weight.view", "input.view"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul"], ["", "@", "tensor_operation", "\n", "def", "conv1x1", "(", "input", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Do a convolution with a 1x1 kernel weights. Implemented with matmul, which can be faster than using conv.\"\"\"", "\n", "\n", "if", "weight", "is", "None", ":", "\n", "        ", "return", "input", "\n", "\n", "", "return", "torch", ".", "matmul", "(", "weight", ".", "view", "(", "weight", ".", "shape", "[", "0", "]", ",", "weight", ".", "shape", "[", "1", "]", ")", ",", "\n", "input", ".", "view", "(", "input", ".", "shape", "[", "0", "]", ",", "input", ".", "shape", "[", "1", "]", ",", "\n", "-", "1", ")", ")", ".", "view", "(", "input", ".", "shape", "[", "0", "]", ",", "weight", ".", "shape", "[", "0", "]", ",", "\n", "input", ".", "shape", "[", "2", "]", ",", "input", ".", "shape", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.spatial_attention": [[62, 65], ["torch.sigmoid", "torch.sigmoid", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid"], ["", "@", "tensor_operation", "\n", "def", "spatial_attention", "(", "input", ":", "torch", ".", "Tensor", ",", "dim", ":", "int", "=", "0", ",", "keepdim", ":", "bool", "=", "True", ")", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "(", "torch", ".", "mean", "(", "input", ",", "dim", ",", "keepdim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.adaptive_avg_pool2d": [[67, 70], ["torch.adaptive_avg_pool2d"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.adaptive_avg_pool2d"], ["", "@", "tensor_operation", "\n", "def", "adaptive_avg_pool2d", "(", "input", ":", "torch", ".", "Tensor", ",", "shape", ")", ":", "\n", "    ", "return", "F", ".", "adaptive_avg_pool2d", "(", "input", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid": [[72, 75], ["torch.sigmoid", "torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid"], ["", "@", "tensor_operation", "\n", "def", "sigmoid", "(", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax": [[77, 81], ["input.size", "torch.softmax().reshape", "torch.softmax", "input.reshape"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax"], ["", "@", "tensor_operation", "\n", "def", "softmax", "(", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "x_shape", "=", "input", ".", "size", "(", ")", "\n", "return", "F", ".", "softmax", "(", "input", ".", "reshape", "(", "x_shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "1", ")", ".", "reshape", "(", "x_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul": [[83, 86], ["b.expand_as"], "function", ["None"], ["", "@", "tensor_operation", "\n", "def", "matmul", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "a", "*", "b", ".", "expand_as", "(", "a", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.__init__": [[14, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "self", ".", "output_sz", "=", "output_sz", "\n", "self", ".", "shift", "=", "(", "0", ",", "0", ")", "if", "shift", "is", "None", "else", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.__call__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output": [[21, 40], ["isinstance", "torch.pad", "torch.pad", "math.floor", "math.ceil", "math.floor", "math.ceil"], "methods", ["None"], ["", "def", "crop_to_output", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "imsz", "=", "image", ".", "shape", "[", "2", ":", "]", "\n", "if", "self", ".", "output_sz", "is", "None", ":", "\n", "                ", "pad_h", "=", "0", "\n", "pad_w", "=", "0", "\n", "", "else", ":", "\n", "                ", "pad_h", "=", "(", "self", ".", "output_sz", "[", "0", "]", "-", "imsz", "[", "0", "]", ")", "/", "2", "\n", "pad_w", "=", "(", "self", ".", "output_sz", "[", "1", "]", "-", "imsz", "[", "1", "]", ")", "/", "2", "\n", "\n", "", "pad_left", "=", "math", ".", "floor", "(", "pad_w", ")", "+", "self", ".", "shift", "[", "1", "]", "\n", "pad_right", "=", "math", ".", "ceil", "(", "pad_w", ")", "-", "self", ".", "shift", "[", "1", "]", "\n", "pad_top", "=", "math", ".", "floor", "(", "pad_h", ")", "+", "self", ".", "shift", "[", "0", "]", "\n", "pad_bottom", "=", "math", ".", "ceil", "(", "pad_h", ")", "-", "self", ".", "shift", "[", "0", "]", "\n", "\n", "return", "F", ".", "pad", "(", "image", ",", "(", "pad_left", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", ")", ",", "\n", "'replicate'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Identity.__call__": [[44, 46], ["augmentation.Identity.crop_to_output"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output"], ["def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "crop_to_output", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.FlipHorizontal.__call__": [[50, 55], ["isinstance", "augmentation.FlipHorizontal.crop_to_output", "numpy.fliplr", "image.flip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output"], ["def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "image", ".", "flip", "(", "(", "3", ",", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "fliplr", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.FlipVertical.__call__": [[59, 64], ["isinstance", "augmentation.FlipVertical.crop_to_output", "numpy.flipud", "image.flip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output"], ["def", "__call__", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "image", ".", "flip", "(", "(", "2", ",", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "flipud", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Translation.__init__": [[68, 72], ["augmentation.Transform.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "translation", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "self", ".", "shift", "=", "(", "self", ".", "shift", "[", "0", "]", "+", "translation", "[", "0", "]", ",", "\n", "self", ".", "shift", "[", "1", "]", "+", "translation", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Translation.__call__": [[73, 78], ["isinstance", "augmentation.Translation.crop_to_output"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Scale.__init__": [[82, 85], ["augmentation.Transform.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Scale.__call__": [[86, 105], ["isinstance", "round", "round", "torch.interpolate", "torch.interpolate", "augmentation.Scale.crop_to_output"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "# Calculate new size. Ensure that it is even so that crop/pad becomes easier", "\n", "            ", "h_orig", ",", "w_orig", "=", "image", ".", "shape", "[", "2", ":", "]", "\n", "\n", "if", "h_orig", "!=", "w_orig", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "h_new", "=", "round", "(", "h_orig", "/", "self", ".", "scale_factor", ")", "\n", "h_new", "+=", "(", "h_new", "-", "h_orig", ")", "%", "2", "\n", "w_new", "=", "round", "(", "w_orig", "/", "self", ".", "scale_factor", ")", "\n", "w_new", "+=", "(", "w_new", "-", "w_orig", ")", "%", "2", "\n", "\n", "image_resized", "=", "F", ".", "interpolate", "(", "image", ",", "[", "h_new", ",", "w_new", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "\n", "return", "self", ".", "crop_to_output", "(", "image_resized", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Affine.__init__": [[109, 112], ["augmentation.Transform.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "transform_matrix", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "self", ".", "transform_matrix", "=", "transform_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Affine.__call__": [[113, 122], ["isinstance", "augmentation.Affine.crop_to_output", "cv2.warpAffine", "preprocessing.numpy_to_torch", "augmentation.Affine.", "preprocessing.torch_to_numpy"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.preprocessing.torch_to_numpy"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "\n", "numpy_to_torch", "(", "self", "(", "torch_to_numpy", "(", "image", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "cv", ".", "warpAffine", "(", "image", ",", "\n", "self", ".", "transform_matrix", ",", "\n", "image", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ",", "\n", "borderMode", "=", "cv", ".", "BORDER_REPLICATE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Rotate.__init__": [[126, 129], ["augmentation.Transform.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "angle", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "self", ".", "angle", "=", "math", ".", "pi", "*", "angle", "/", "180", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Rotate.__call__": [[130, 145], ["isinstance", "augmentation.Rotate.crop_to_output", "numpy.array", "numpy.concatenate", "cv2.warpAffine", "preprocessing.numpy_to_torch", "augmentation.Rotate.", "numpy.expand_dims", "preprocessing.torch_to_numpy", "numpy.array", "math.cos", "math.sin", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.preprocessing.torch_to_numpy"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "\n", "numpy_to_torch", "(", "self", "(", "torch_to_numpy", "(", "image", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "image", ".", "shape", "[", ":", "2", "]", ")", ",", "1", ")", "-", "1", ")", "/", "2", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "self", ".", "angle", ")", ",", "\n", "math", ".", "sin", "(", "self", ".", "angle", ")", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "self", ".", "angle", ")", ",", "\n", "math", ".", "cos", "(", "self", ".", "angle", ")", "]", "]", ")", "\n", "H", "=", "np", ".", "concatenate", "(", "[", "R", ",", "c", "-", "R", "@", "c", "]", ",", "1", ")", "\n", "return", "cv", ".", "warpAffine", "(", "image", ",", "\n", "H", ",", "\n", "image", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ",", "\n", "borderMode", "=", "cv", ".", "BORDER_REPLICATE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Blur.__init__": [[149, 165], ["augmentation.Transform.__init__", "isinstance", "math.ceil", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "augmentation.Blur.filter[].view", "augmentation.Blur.filter[].sum", "augmentation.Blur.filter[].view", "augmentation.Blur.filter[].sum", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "sigma", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "if", "isinstance", "(", "sigma", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "sigma", "=", "(", "sigma", ",", "sigma", ")", "\n", "", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "filter_size", "=", "[", "math", ".", "ceil", "(", "2", "*", "s", ")", "for", "s", "in", "self", ".", "sigma", "]", "\n", "x_coord", "=", "[", "\n", "torch", ".", "arange", "(", "-", "sz", ",", "sz", "+", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "sz", "in", "self", ".", "filter_size", "\n", "]", "\n", "self", ".", "filter", "=", "[", "\n", "torch", ".", "exp", "(", "-", "(", "x", "**", "2", ")", "/", "(", "2", "*", "s", "**", "2", ")", ")", "\n", "for", "x", ",", "s", "in", "zip", "(", "x_coord", ",", "self", ".", "sigma", ")", "\n", "]", "\n", "self", ".", "filter", "[", "0", "]", "=", "self", ".", "filter", "[", "0", "]", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "/", "self", ".", "filter", "[", "0", "]", ".", "sum", "(", ")", "\n", "self", ".", "filter", "[", "1", "]", "=", "self", ".", "filter", "[", "1", "]", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "/", "self", ".", "filter", "[", "1", "]", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Blur.__call__": [[166, 178], ["isinstance", "torch.conv2d", "torch.conv2d", "augmentation.Blur.crop_to_output", "image.view", "torch.conv2d().view", "torch.conv2d().view", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.augmentation.Transform.crop_to_output", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "sz", "=", "image", ".", "shape", "[", "2", ":", "]", "\n", "im1", "=", "F", ".", "conv2d", "(", "image", ".", "view", "(", "-", "1", ",", "1", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ")", ",", "\n", "self", ".", "filter", "[", "0", "]", ",", "\n", "padding", "=", "(", "self", ".", "filter_size", "[", "0", "]", ",", "0", ")", ")", "\n", "return", "self", ".", "crop_to_output", "(", "\n", "F", ".", "conv2d", "(", "im1", ",", "self", ".", "filter", "[", "1", "]", ",", "\n", "padding", "=", "(", "0", ",", "self", ".", "filter_size", "[", "1", "]", ")", ")", ".", "view", "(", "\n", "1", ",", "-", "1", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.hann1d": [[11, 19], ["torch.cat", "torch.cat", "torch.cos", "torch.cos", "w[].flip", "torch.cos", "torch.cos", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["def", "hann1d", "(", "sz", ":", "int", ",", "centered", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"1D cosine window.\"\"\"", "\n", "if", "centered", ":", "\n", "        ", "return", "0.5", "*", "(", "1", "-", "torch", ".", "cos", "(", "\n", "(", "2", "*", "math", ".", "pi", "/", "(", "sz", "+", "2", ")", ")", "*", "torch", ".", "arange", "(", "1", ",", "sz", "+", "1", ")", ".", "float", "(", ")", ")", ")", "\n", "", "w", "=", "0.5", "*", "(", "1", "+", "torch", ".", "cos", "(", "\n", "(", "2", "*", "math", ".", "pi", "/", "(", "sz", "+", "2", ")", ")", "*", "torch", ".", "arange", "(", "0", ",", "sz", "//", "2", "+", "1", ")", ".", "float", "(", ")", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "w", ",", "w", "[", "1", ":", "sz", "-", "sz", "//", "2", "]", ".", "flip", "(", "(", "0", ",", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.hann2d": [[21, 25], ["hann1d().reshape", "hann1d().reshape", "dcf.hann1d", "dcf.hann1d", "sz[].item", "sz[].item"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.hann1d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.hann1d"], ["", "def", "hann2d", "(", "sz", ":", "torch", ".", "Tensor", ",", "centered", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"2D cosine window.\"\"\"", "\n", "return", "hann1d", "(", "sz", "[", "0", "]", ".", "item", "(", ")", ",", "centered", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "*", "hann1d", "(", "\n", "sz", "[", "1", "]", ".", "item", "(", ")", ",", "centered", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.hann2d_clipped": [[27, 51], ["torch.pad", "hann1d().reshape", "hann1d().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pad[].item", "pad[].item", "pad[].item", "pad[].item", "dcf.hann1d", "dcf.hann1d", "effective_sz[].item", "effective_sz[].item"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.hann1d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.hann1d"], ["", "def", "hann2d_clipped", "(", "sz", ":", "torch", ".", "Tensor", ",", "effective_sz", ":", "torch", ".", "Tensor", ",", "\n", "centered", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"1D clipped cosine window.\"\"\"", "\n", "\n", "# Ensure that the difference is even", "\n", "effective_sz", "+=", "(", "effective_sz", "-", "sz", ")", "%", "2", "\n", "effective_window", "=", "hann1d", "(", "effective_sz", "[", "0", "]", ".", "item", "(", ")", ",", "True", ")", ".", "reshape", "(", "\n", "1", ",", "1", ",", "-", "1", ",", "1", ")", "*", "hann1d", "(", "effective_sz", "[", "1", "]", ".", "item", "(", ")", ",", "True", ")", ".", "reshape", "(", "\n", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "pad", "=", "(", "sz", "-", "effective_sz", ")", "/", "2", "\n", "\n", "window", "=", "F", ".", "pad", "(", "effective_window", ",", "\n", "(", "pad", "[", "1", "]", ".", "item", "(", ")", ",", "pad", "[", "1", "]", ".", "item", "(", ")", ",", "pad", "[", "0", "]", ".", "item", "(", ")", ",", "pad", "[", "0", "]", ".", "item", "(", ")", ")", ",", "\n", "'replicate'", ")", "\n", "\n", "if", "centered", ":", "\n", "        ", "return", "window", "\n", "", "else", ":", "\n", "        ", "mid", "=", "(", "sz", "/", "2", ")", ".", "int", "(", ")", "\n", "window_shift_lr", "=", "torch", ".", "cat", "(", "\n", "(", "window", "[", ":", ",", ":", ",", ":", ",", "mid", "[", "1", "]", ":", "]", ",", "window", "[", ":", ",", ":", ",", ":", ",", ":", "mid", "[", "1", "]", "]", ")", ",", "3", ")", "\n", "return", "torch", ".", "cat", "(", "(", "window_shift_lr", "[", ":", ",", ":", ",", "mid", "[", "0", "]", ":", ",", ":", "]", ",", "\n", "window_shift_lr", "[", ":", ",", ":", ",", ":", "mid", "[", "0", "]", ",", ":", "]", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.gauss_fourier": [[53, 60], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "int", "int", "int", "math.sqrt", "torch.arange.float"], "function", ["None"], ["", "", "def", "gauss_fourier", "(", "sz", ":", "int", ",", "sigma", ":", "float", ",", "half", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "half", ":", "\n", "        ", "k", "=", "torch", ".", "arange", "(", "0", ",", "int", "(", "sz", "/", "2", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "k", "=", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "-", "1", ")", "/", "2", ")", ",", "int", "(", "sz", "/", "2", "+", "1", ")", ")", "\n", "", "return", "(", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "*", "sigma", "/", "sz", ")", "*", "torch", ".", "exp", "(", "\n", "-", "2", "*", "(", "math", ".", "pi", "*", "sigma", "*", "k", ".", "float", "(", ")", "/", "sz", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.gauss_spatial": [[62, 65], ["torch.arange", "torch.arange", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "gauss_spatial", "(", "sz", ",", "sigma", ",", "center", "=", "0", ",", "end_pad", "=", "0", ")", ":", "\n", "    ", "k", "=", "torch", ".", "arange", "(", "-", "(", "sz", "-", "1", ")", "/", "2", ",", "(", "sz", "+", "1", ")", "/", "2", "+", "end_pad", ")", "\n", "return", "torch", ".", "exp", "(", "-", "1.0", "/", "(", "2", "*", "sigma", "**", "2", ")", "*", "(", "k", "-", "center", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.label_function": [[67, 71], ["gauss_fourier().reshape", "gauss_fourier().reshape", "dcf.gauss_fourier", "dcf.gauss_fourier", "sz[].item", "sigma[].item", "sz[].item", "sigma[].item"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.gauss_fourier", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.gauss_fourier"], ["", "def", "label_function", "(", "sz", ":", "torch", ".", "Tensor", ",", "sigma", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "gauss_fourier", "(", "\n", "sz", "[", "0", "]", ".", "item", "(", ")", ",", "sigma", "[", "0", "]", ".", "item", "(", ")", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "*", "gauss_fourier", "(", "\n", "sz", "[", "1", "]", ".", "item", "(", ")", ",", "sigma", "[", "1", "]", ".", "item", "(", ")", ",", "True", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.label_function_spatial": [[73, 81], ["torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "gauss_spatial().reshape", "gauss_spatial().reshape", "scale.sqrt", "scale.sqrt", "dcf.gauss_spatial", "dcf.gauss_spatial", "sz[].item", "sigma[].item", "end_pad[].item", "sz[].item", "sigma[].item", "end_pad[].item"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.gauss_spatial", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.gauss_spatial"], ["", "def", "label_function_spatial", "(", "sz", ":", "torch", ".", "Tensor", ",", "\n", "sigma", ":", "torch", ".", "Tensor", ",", "\n", "center", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros", "(", "2", ")", ",", "\n", "scale", ":", "torch", ".", "Tensor", "=", "torch", ".", "ones", "(", "1", ")", ",", "\n", "end_pad", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros", "(", "2", ")", ")", ":", "\n", "    ", "\"\"\"The origin is in the middle of the image.\"\"\"", "\n", "return", "gauss_spatial", "(", "sz", "[", "0", "]", ".", "item", "(", ")", ",", "sigma", "[", "0", "]", ".", "item", "(", ")", ",", "center", "[", "0", "]", ",", "end_pad", "[", "0", "]", ".", "item", "(", ")", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "**", "(", "1", "/", "scale", ".", "sqrt", "(", ")", ")", "*", "gauss_spatial", "(", "sz", "[", "1", "]", ".", "item", "(", ")", ",", "sigma", "[", "1", "]", ".", "item", "(", ")", ",", "center", "[", "1", "]", ",", "end_pad", "[", "1", "]", ".", "item", "(", ")", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "**", "(", "scale", ".", "sqrt", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.cubic_spline_fourier": [[83, 93], ["torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "function", ["None"], ["", "def", "cubic_spline_fourier", "(", "f", ",", "a", ")", ":", "\n", "    ", "\"\"\"The continuous Fourier transform of a cubic spline kernel.\"\"\"", "\n", "\n", "bf", "=", "(", "6", "*", "(", "1", "-", "torch", ".", "cos", "(", "2", "*", "math", ".", "pi", "*", "f", ")", ")", "+", "3", "*", "a", "*", "(", "1", "-", "torch", ".", "cos", "(", "4", "*", "math", ".", "pi", "*", "f", ")", ")", "\n", "-", "(", "6", "+", "8", "*", "a", ")", "*", "math", ".", "pi", "*", "f", "*", "torch", ".", "sin", "(", "2", "*", "math", ".", "pi", "*", "f", ")", "-", "2", "*", "a", "*", "math", ".", "pi", "*", "f", "*", "torch", ".", "sin", "(", "4", "*", "math", ".", "pi", "*", "f", ")", ")", "/", "(", "4", "*", "math", ".", "pi", "**", "4", "*", "f", "**", "4", ")", "\n", "\n", "bf", "[", "f", "==", "0", "]", "=", "1", "\n", "\n", "return", "bf", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.get_interp_fourier": [[95, 121], ["fourier.get_frequency_coord", "complex.mult", "complex.mult", "complex.mult.to", "complex.mult.to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ValueError", "complex.exp_imag", "complex.exp_imag", "dcf.cubic_spline_fourier", "dcf.cubic_spline_fourier"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.get_frequency_coord", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.exp_imag", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.exp_imag", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.cubic_spline_fourier", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.cubic_spline_fourier"], ["", "def", "get_interp_fourier", "(", "sz", ":", "torch", ".", "Tensor", ",", "\n", "method", "=", "'ideal'", ",", "\n", "bicubic_param", "=", "0.5", ",", "\n", "centering", "=", "True", ",", "\n", "windowing", "=", "False", ",", "\n", "device", "=", "'cpu'", ")", ":", "\n", "\n", "    ", "ky", ",", "kx", "=", "get_frequency_coord", "(", "sz", ")", "\n", "\n", "if", "method", "==", "'ideal'", ":", "\n", "        ", "interp_y", "=", "torch", ".", "ones", "(", "ky", ".", "shape", ")", "/", "sz", "[", "0", "]", "\n", "interp_x", "=", "torch", ".", "ones", "(", "kx", ".", "shape", ")", "/", "sz", "[", "1", "]", "\n", "", "elif", "method", "==", "'bicubic'", ":", "\n", "        ", "interp_y", "=", "cubic_spline_fourier", "(", "ky", "/", "sz", "[", "0", "]", ",", "bicubic_param", ")", "/", "sz", "[", "0", "]", "\n", "interp_x", "=", "cubic_spline_fourier", "(", "kx", "/", "sz", "[", "1", "]", ",", "bicubic_param", ")", "/", "sz", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown method.'", ")", "\n", "\n", "", "if", "centering", ":", "\n", "        ", "interp_y", "=", "mult", "(", "interp_y", ",", "exp_imag", "(", "(", "-", "math", ".", "pi", "/", "sz", "[", "0", "]", ")", "*", "ky", ")", ")", "\n", "interp_x", "=", "mult", "(", "interp_x", ",", "exp_imag", "(", "(", "-", "math", ".", "pi", "/", "sz", "[", "1", "]", ")", "*", "kx", ")", ")", "\n", "\n", "", "if", "windowing", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "interp_y", ".", "to", "(", "device", ")", ",", "interp_x", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.interpolate_dft": [[123, 130], ["isinstance", "isinstance", "ValueError", "complex.mult", "complex.mult", "complex.mult"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.mult"], ["", "def", "interpolate_dft", "(", "a", ":", "torch", ".", "Tensor", ",", "interp_fs", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "    ", "if", "isinstance", "(", "interp_fs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "mult", "(", "a", ",", "interp_fs", ")", "\n", "", "if", "isinstance", "(", "interp_fs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "return", "mult", "(", "mult", "(", "a", ",", "interp_fs", "[", "0", "]", ")", ",", "interp_fs", "[", "1", "]", ")", "\n", "", "raise", "ValueError", "(", "'\"interp_fs\" must be tensor or tuple of tensors.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.get_reg_filter": [[132, 193], ["getattr", "getattr", "abs", "torch.irfft", "torch.irfft", "complex.real", "torch.cat.nonzero().max", "int", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.rfft", "torch.rfft", "sz.prod", "fourier.rfftshift2", "max_inds[].item", "max_inds[].item", "max_inds[].item", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "target_sz.prod().sqrt", "torch.ones", "torch.ones", "sz.long().tolist", "sz.prod", "torch.irfft.min", "torch.cat.nonzero", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reg_window_dft[].flip", "target_sz.prod", "int", "int", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "sz.long", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "abs.max", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.real", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.rfftshift2", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["", "def", "get_reg_filter", "(", "sz", ":", "torch", ".", "Tensor", ",", "target_sz", ":", "torch", ".", "Tensor", ",", "params", ")", ":", "\n", "    ", "\"\"\"Computes regularization filter in CCOT and ECO.\"\"\"", "\n", "\n", "if", "not", "params", ".", "use_reg_window", ":", "\n", "        ", "return", "params", ".", "reg_window_min", "*", "torch", ".", "ones", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "getattr", "(", "params", ",", "'reg_window_square'", ",", "False", ")", ":", "\n", "        ", "target_sz", "=", "target_sz", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "*", "torch", ".", "ones", "(", "2", ")", "\n", "\n", "# Normalization factor", "\n", "", "reg_scale", "=", "0.5", "*", "target_sz", "\n", "\n", "# Construct grid", "\n", "if", "getattr", "(", "params", ",", "'reg_window_centered'", ",", "True", ")", ":", "\n", "        ", "wrg", "=", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "0", "]", "-", "1", ")", "/", "2", ")", ",", "\n", "int", "(", "sz", "[", "0", "]", "/", "2", "+", "1", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "wcg", "=", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "1", "]", "-", "1", ")", "/", "2", ")", ",", "\n", "int", "(", "sz", "[", "1", "]", "/", "2", "+", "1", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "wrg", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "arange", "(", "0", ",", "int", "(", "sz", "[", "0", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "0", "]", "-", "1", ")", "/", "2", ")", ",", "0", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "]", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "wcg", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "arange", "(", "0", ",", "int", "(", "sz", "[", "1", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "1", "]", "-", "1", ")", "/", "2", ")", ",", "0", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "]", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "# Construct regularization window", "\n", "", "reg_window", "=", "(", "params", ".", "reg_window_edge", "-", "params", ".", "reg_window_min", ")", "*", "(", "torch", ".", "abs", "(", "wrg", "/", "reg_scale", "[", "0", "]", ")", "**", "params", ".", "reg_window_power", "+", "\n", "torch", ".", "abs", "(", "wcg", "/", "reg_scale", "[", "1", "]", ")", "**", "params", ".", "reg_window_power", ")", "+", "params", ".", "reg_window_min", "\n", "\n", "# Compute DFT and enforce sparsity", "\n", "reg_window_dft", "=", "torch", ".", "rfft", "(", "reg_window", ",", "2", ")", "/", "sz", ".", "prod", "(", ")", "\n", "reg_window_dft_abs", "=", "abs", "(", "reg_window_dft", ")", "\n", "reg_window_dft", "[", "reg_window_dft_abs", "<", "params", ".", "reg_sparsity_threshold", "*", "\n", "reg_window_dft_abs", ".", "max", "(", ")", ",", ":", "]", "=", "0", "\n", "\n", "# Do the inverse transform to correct for the window minimum", "\n", "reg_window_sparse", "=", "torch", ".", "irfft", "(", "reg_window_dft", ",", "\n", "2", ",", "\n", "signal_sizes", "=", "sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "\n", "reg_window_dft", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "+=", "params", ".", "reg_window_min", "-", "sz", ".", "prod", "(", "\n", ")", "*", "reg_window_sparse", ".", "min", "(", ")", "\n", "reg_window_dft", "=", "real", "(", "rfftshift2", "(", "reg_window_dft", ")", ")", "\n", "\n", "# Remove zeros", "\n", "max_inds", ",", "_", "=", "reg_window_dft", ".", "nonzero", "(", ")", ".", "max", "(", "dim", "=", "0", ")", "\n", "mid_ind", "=", "int", "(", "(", "reg_window_dft", ".", "shape", "[", "2", "]", "-", "1", ")", "/", "2", ")", "\n", "top", "=", "max_inds", "[", "-", "2", "]", ".", "item", "(", ")", "+", "1", "\n", "bottom", "=", "2", "*", "mid_ind", "-", "max_inds", "[", "-", "2", "]", ".", "item", "(", ")", "\n", "right", "=", "max_inds", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "reg_window_dft", "=", "reg_window_dft", "[", "...", ",", "bottom", ":", "top", ",", ":", "right", "]", "\n", "if", "reg_window_dft", ".", "shape", "[", "-", "1", "]", ">", "1", ":", "\n", "        ", "reg_window_dft", "=", "torch", ".", "cat", "(", "\n", "[", "reg_window_dft", "[", "...", ",", "1", ":", "]", ".", "flip", "(", "(", "2", ",", "3", ")", ")", ",", "reg_window_dft", "]", ",", "-", "1", ")", "\n", "\n", "", "return", "reg_window_dft", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.max2d": [[195, 206], ["torch.max", "torch.max", "torch.max", "torch.max", "argmax_row.reshape.reshape", "torch.cat", "torch.cat", "argmax_row.reshape.view", "argmax_col.numel", "argmax_row.reshape.unsqueeze", "argmax_col.unsqueeze", "torch.arange", "torch.arange", "argmax_col.view", "argmax_col.numel"], "function", ["None"], ["", "def", "max2d", "(", "a", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Computes maximum and argmax in the last two dimensions.\"\"\"", "\n", "\n", "max_val_row", ",", "argmax_row", "=", "torch", ".", "max", "(", "a", ",", "dim", "=", "-", "2", ")", "\n", "max_val", ",", "argmax_col", "=", "torch", ".", "max", "(", "max_val_row", ",", "dim", "=", "-", "1", ")", "\n", "argmax_row", "=", "argmax_row", ".", "view", "(", "\n", "argmax_col", ".", "numel", "(", ")", ",", "-", "1", ")", "[", "torch", ".", "arange", "(", "argmax_col", ".", "numel", "(", "\n", ")", ")", ",", "argmax_col", ".", "view", "(", "-", "1", ")", "]", "\n", "argmax_row", "=", "argmax_row", ".", "reshape", "(", "argmax_col", ".", "shape", ")", "\n", "argmax", "=", "torch", ".", "cat", "(", "(", "argmax_row", ".", "unsqueeze", "(", "-", "1", ")", ",", "argmax_col", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "-", "1", ")", "\n", "return", "max_val", ",", "argmax", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.got_benchmark_helper.PipelineTracker.__init__": [[14, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "name", ":", "str", ",", "\n", "pipeline", ":", "PipelineBase", ",", "\n", "is_deterministic", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"Helper tracker for comptability with \n        \n        Parameters\n        ----------\n        name : str\n            [description]\n        pipeline : PipelineBase\n            [description]\n        is_deterministic : bool, optional\n            [description], by default False\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "is_deterministic", "=", "is_deterministic", "\n", "self", ".", "pipeline", "=", "pipeline", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.got_benchmark_helper.PipelineTracker.init": [[33, 45], ["got_benchmark_helper.PipelineTracker.pipeline.init"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init"], ["", "def", "init", "(", "self", ",", "image", ":", "np", ".", "array", ",", "box", ")", ":", "\n", "        ", "\"\"\"Initialize pipeline tracker\n        \n        Parameters\n        ----------\n        image : np.array\n            image of the first frame\n        box : np.array or List\n            tracking bbox on the first frame\n            formate: (x, y, w, h)\n        \"\"\"", "\n", "self", ".", "pipeline", ".", "init", "(", "image", ",", "box", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.got_benchmark_helper.PipelineTracker.update": [[46, 61], ["got_benchmark_helper.PipelineTracker.pipeline.update"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "def", "update", "(", "self", ",", "image", ":", "np", ".", "array", ")", ":", "\n", "        ", "\"\"\"Perform tracking\n        \n        Parameters\n        ----------\n        image : np.array\n            image of the current frame\n        \n        Returns\n        -------\n        np.array\n            tracking bbox\n            formate: (x, y, w, h)\n        \"\"\"", "\n", "return", "self", ".", "pipeline", ".", "update", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.got_benchmark_helper.PipelineTracker.track": [[62, 101], ["len", "numpy.zeros", "numpy.zeros", "enumerate", "cv2.imread", "time.time", "got_benchmark_helper.PipelineTracker.init", "got_benchmark_helper.PipelineTracker.update", "time.time", "videoanalyst.evaluation.got_benchmark.utils.viz.show_frame"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame"], ["", "def", "track", "(", "self", ",", "img_files", ":", "List", ",", "box", ",", "visualize", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Perform tracking on a given video sequence\n        \n        Parameters\n        ----------\n        img_files : List\n            list of image file paths of the sequence\n        box : np.array or List\n            box of the first frame\n        visualize : bool, optional\n            Visualize or not on each frame, by default False\n        \n        Returns\n        -------\n        [type]\n            [description]\n        \"\"\"", "\n", "frame_num", "=", "len", "(", "img_files", ")", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "4", ")", ")", "\n", "boxes", "[", "0", "]", "=", "box", "\n", "times", "=", "np", ".", "zeros", "(", "frame_num", ")", "\n", "\n", "for", "f", ",", "img_file", "in", "enumerate", "(", "img_files", ")", ":", "\n", "# image = Image.open(img_file)", "\n", "# if not image.mode == 'RGB':", "\n", "#     image = image.convert('RGB')", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "img_file", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "f", "==", "0", ":", "\n", "                ", "self", ".", "init", "(", "image", ",", "box", ")", "\n", "", "else", ":", "\n", "                ", "boxes", "[", "f", ",", ":", "]", "=", "self", ".", "update", "(", "image", ")", "\n", "", "times", "[", "f", "]", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "if", "visualize", ":", "\n", "                ", "show_frame", "(", "image", ",", "boxes", "[", "f", ",", ":", "]", ")", "\n", "\n", "", "", "return", "boxes", ",", "times", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.visualization.show_img_FCOS": [[9, 112], ["videoanalyst.pipeline.utils.misc.tensor_to_imarray", "videoanalyst.pipeline.utils.misc.tensor_to_imarray", "numpy.concatenate", "dict", "cv2.resize", "cv2.rectangle", "gt_indexes.any", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText", "print", "cv2.imshow", "cv2.imshow", "videoanalyst.pipeline.utils.misc.tensor_to_numpy", "print", "cv2.rectangle", "numpy.argsort", "numpy.argsort", "numpy.argsort", "tuple", "cv2.circle", "tuple", "cv2.circle", "cv2.circle", "len", "len", "int", "int", "cv2.rectangle", "int", "int", "int", "int", "len", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "int", "int", "int", "int", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.tensor_to_imarray", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.tensor_to_imarray", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.tensor_to_numpy"], ["class", "VideoWriter", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    Video writer which handles video recording overhead\n    Usage:\n        object creation: provide path to write\n        write:\n        release:\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "video_file", ",", "fps", "=", "25", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n\n        :param video_file: path to write video. Perform nothing in case of None\n        :param fps: frame per second\n        :param scale: resize scale\n        \"\"\"", "\n", "self", ".", "video_file", "=", "video_file", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "writer", "=", "None", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "", "def", "write", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n\n        :param frame: numpy array, (H, W, 3), BGR, frame to write\n        :return:\n        \"\"\"", "\n", "h", ",", "w", "=", "frame", ".", "shape", "[", ":", "2", "]", "\n", "h_rsz", ",", "w_rsz", "=", "int", "(", "h", "*", "self", ".", "scale", ")", ",", "int", "(", "w", "*", "self", ".", "scale", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "w_rsz", ",", "h_rsz", ")", ")", "\n", "if", "self", ".", "writer", "is", "None", ":", "\n", "            ", "video_dir", "=", "osp", ".", "dirname", "(", "osp", ".", "realpath", "(", "self", ".", "video_file", ")", ")", "\n", "if", "not", "osp", ".", "exists", "(", "video_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "video_dir", ")", "\n", "", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'MJPG'", ")", "\n", "self", ".", "writer", "=", "cv2", ".", "VideoWriter", "(", "self", ".", "video_file", ",", "fourcc", ",", "self", ".", "fps", ",", "\n", "tuple", "(", "frame", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ")", ")", "\n", "", "self", ".", "writer", ".", "write", "(", "frame", ")", "\n", "\n", "", "def", "release", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Manually release\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "writer", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "writer", ".", "release", "(", ")", "\n", "logger", ".", "info", "(", "\"video file dumped at {}\"", ".", "format", "(", "self", ".", "video_file", ")", ")", "\n", "\n", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "release", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.index_data": [[5, 18], ["dict"], "function", ["None"], ["\n", "from", "loguru", "import", "logger", "\n", "from", "yacs", ".", "config", "import", "CfgNode", "as", "CN", "\n", "\n", "\n", "def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", ",", "print", "(", "\n", "module_name", ",", "module_dict", ",", "'defined in several script files'", ")", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n", "\n", "", "class", "Registry", "(", "dict", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop_track_pair.crop_track_pair": [[29, 157], ["videoanalyst.pipeline.utils.bbox.xyxy2cxywh", "videoanalyst.pipeline.utils.bbox.xyxy2cxywh", "numpy.sqrt", "numpy.sqrt", "range", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "videoanalyst.pipeline.utils.bbox.cxywh2xyxy", "videoanalyst.pipeline.utils.bbox.cxywh2xyxy", "videoanalyst.pipeline.utils.crop.get_subwindow_tracking", "videoanalyst.pipeline.utils.crop.get_subwindow_tracking", "videoanalyst.pipeline.utils.crop.get_subwindow_tracking", "videoanalyst.pipeline.utils.crop.get_subwindow_tracking", "str", "str", "rng.uniform", "numpy.exp", "numpy.array", "numpy.array", "rng.uniform", "print", "print", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "all", "all", "numpy.log", "numpy.log", "rng.uniform", "rng.uniform", "rng.uniform", "rng.uniform", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xyxy2cxywh", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xyxy2cxywh", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xyxy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xyxy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking"], ["def", "crop_track_pair", "(", "\n", "im_temp", ",", "\n", "bbox_temp", ",", "\n", "im_curr", ",", "\n", "bbox_curr", ",", "\n", "config", "=", "None", ",", "\n", "avg_chans", "=", "None", ",", "\n", "rng", "=", "np", ".", "random", ",", "\n", "DEBUG", "=", "False", ",", "\n", "mask_tmp", "=", "None", ",", "\n", "mask_curr", "=", "None", ",", "\n", ")", ":", "\n", "    ", "context_amount", "=", "config", "[", "\"context_amount\"", "]", "\n", "z_size", "=", "config", "[", "\"z_size\"", "]", "\n", "x_size", "=", "config", "[", "\"x_size\"", "]", "\n", "max_scale", "=", "config", "[", "\"max_scale\"", "]", "\n", "max_shift", "=", "config", "[", "\"max_shift\"", "]", "\n", "max_scale_temp", "=", "config", "[", "\"max_scale_temp\"", "]", "\n", "max_shift_temp", "=", "config", "[", "\"max_shift_temp\"", "]", "\n", "\n", "if", "avg_chans", "is", "None", ":", "\n", "        ", "avg_chans", "=", "np", ".", "mean", "(", "im_temp", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "box_temp", "=", "xyxy2cxywh", "(", "bbox_temp", ")", "\n", "box_curr", "=", "xyxy2cxywh", "(", "bbox_curr", ")", "\n", "\n", "# crop size, st for tamplate & sc for current", "\n", "wt", ",", "ht", "=", "box_temp", "[", "2", ":", "]", "\n", "wt_", "=", "wt", "+", "context_amount", "*", "(", "wt", "+", "ht", ")", "\n", "ht_", "=", "ht", "+", "context_amount", "*", "(", "wt", "+", "ht", ")", "\n", "st_", "=", "np", ".", "sqrt", "(", "wt_", "*", "ht_", ")", "\n", "\n", "wc", ",", "hc", "=", "box_curr", "[", "2", ":", "]", "\n", "wc_", "=", "wc", "+", "context_amount", "*", "(", "wc", "+", "hc", ")", "\n", "hc_", "=", "hc", "+", "context_amount", "*", "(", "wc", "+", "hc", ")", "\n", "sc_", "=", "np", ".", "sqrt", "(", "wc_", "*", "hc_", ")", "\n", "\n", "assert", "(", "st_", ">", "0", ")", "and", "(", "\n", "sc_", ">", "0", ")", ",", "\"Invalid box: box_temp %s and box_curr %s\"", "%", "(", "str", "(", "bbox_temp", ")", ",", "\n", "str", "(", "bbox_curr", ")", ")", "\n", "\n", "scale_temp_", "=", "z_size", "/", "st_", "\n", "scale_curr_", "=", "z_size", "/", "sc_", "\n", "\n", "# loop to generate valid augmentation", "\n", "for", "i", "in", "range", "(", "_MAX_RETRY", "+", "1", ")", ":", "\n", "# random scale", "\n", "        ", "if", "i", "<", "_MAX_RETRY", ":", "\n", "            ", "s_max", "=", "1", "+", "max_scale", "\n", "s_min", "=", "1", "/", "s_max", "\n", "scale_rand", "=", "rng", ".", "uniform", "(", "s_min", ",", "s_max", ")", "\n", "s_max", "=", "1", "+", "max_scale_temp", "\n", "s_min", "=", "1", "/", "s_max", "\n", "scale_rand_temp", "=", "np", ".", "exp", "(", "rng", ".", "uniform", "(", "np", ".", "log", "(", "s_min", ")", ",", "np", ".", "log", "(", "s_max", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "scale_rand", "=", "scale_rand_temp", "=", "1", "\n", "if", "DEBUG", ":", "print", "(", "'not augmented'", ")", "\n", "", "scale_curr", "=", "scale_curr_", "/", "scale_rand", "\n", "scale_temp", "=", "scale_temp_", "/", "scale_rand_temp", "\n", "s_curr", "=", "x_size", "/", "scale_curr", "\n", "s_temp", "=", "z_size", "/", "scale_temp", "\n", "\n", "# random shift", "\n", "if", "i", "<", "_MAX_RETRY", ":", "\n", "            ", "dx", "=", "rng", ".", "uniform", "(", "-", "max_shift", ",", "max_shift", ")", "*", "s_curr", "/", "2", "\n", "dy", "=", "rng", ".", "uniform", "(", "-", "max_shift", ",", "max_shift", ")", "*", "s_curr", "/", "2", "\n", "dx_temp", "=", "rng", ".", "uniform", "(", "-", "max_shift_temp", ",", "max_shift_temp", ")", "*", "s_temp", "/", "2", "\n", "dy_temp", "=", "rng", ".", "uniform", "(", "-", "max_shift_temp", ",", "max_shift_temp", ")", "*", "s_temp", "/", "2", "\n", "", "else", ":", "\n", "            ", "dx", "=", "dy", "=", "dx_temp", "=", "dy_temp", "=", "0", "\n", "if", "DEBUG", ":", "print", "(", "'not augmented'", ")", "\n", "\n", "# calculate bbox for cropping", "\n", "", "box_crop_temp", "=", "np", ".", "concatenate", "(", "[", "\n", "box_temp", "[", ":", "2", "]", "-", "np", ".", "array", "(", "[", "dx_temp", ",", "dy_temp", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "s_temp", ",", "s_temp", "]", ")", "\n", "]", ")", "\n", "box_crop_curr", "=", "np", ".", "concatenate", "(", "\n", "[", "box_curr", "[", ":", "2", "]", "-", "np", ".", "array", "(", "[", "dx", ",", "dy", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "s_curr", ",", "s_curr", "]", ")", "]", ")", "\n", "\n", "# calculate new bbox", "\n", "box_z", "=", "np", ".", "array", "(", "[", "(", "z_size", "-", "1", ")", "/", "2", "]", "*", "2", "+", "[", "0", "]", "*", "2", ")", "+", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "array", "(", "[", "dx_temp", ",", "dy_temp", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "wt", ",", "ht", "]", ")", "]", ")", "*", "scale_temp", "\n", "box_x", "=", "np", ".", "array", "(", "[", "(", "x_size", "-", "1", ")", "/", "2", "]", "*", "2", "+", "[", "0", "]", "*", "2", ")", "+", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "array", "(", "[", "dx", ",", "dy", "]", ")", ",", "np", ".", "array", "(", "[", "wc", ",", "hc", "]", ")", "]", ")", "*", "scale_curr", "\n", "bbox_z", "=", "cxywh2xyxy", "(", "box_z", ")", "\n", "bbox_x", "=", "cxywh2xyxy", "(", "box_x", ")", "\n", "\n", "# check validity of bbox", "\n", "if", "not", "(", "all", "(", "[", "0", "<=", "c", "<=", "z_size", "-", "1", "for", "c", "in", "bbox_z", "]", ")", "\n", "and", "all", "(", "[", "0", "<=", "c", "<=", "x_size", "-", "1", "for", "c", "in", "bbox_x", "]", ")", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "# crop & resize via warpAffine", "\n", "", "", "mask_z", "=", "None", "\n", "mask_x", "=", "None", "\n", "if", "mask_tmp", "is", "not", "None", ":", "\n", "        ", "im_z", ",", "mask_z", "=", "get_subwindow_tracking", "(", "im_temp", ",", "\n", "box_crop_temp", "[", ":", "2", "]", ",", "\n", "z_size", ",", "\n", "s_temp", ",", "\n", "avg_chans", "=", "avg_chans", ",", "\n", "mask", "=", "mask_tmp", ")", "\n", "", "else", ":", "\n", "        ", "im_z", "=", "get_subwindow_tracking", "(", "im_temp", ",", "\n", "box_crop_temp", "[", ":", "2", "]", ",", "\n", "z_size", ",", "\n", "s_temp", ",", "\n", "avg_chans", "=", "avg_chans", ")", "\n", "\n", "", "if", "mask_curr", "is", "not", "None", ":", "\n", "        ", "im_x", ",", "mask_x", "=", "get_subwindow_tracking", "(", "im_curr", ",", "\n", "box_crop_curr", "[", ":", "2", "]", ",", "\n", "x_size", ",", "\n", "s_curr", ",", "\n", "avg_chans", "=", "avg_chans", ",", "\n", "mask", "=", "mask_curr", ")", "\n", "", "else", ":", "\n", "        ", "im_x", "=", "get_subwindow_tracking", "(", "im_curr", ",", "\n", "box_crop_curr", "[", ":", "2", "]", ",", "\n", "x_size", ",", "\n", "s_curr", ",", "\n", "avg_chans", "=", "avg_chans", ")", "\n", "\n", "", "return", "im_z", ",", "bbox_z", ",", "im_x", ",", "bbox_x", ",", "mask_z", ",", "mask_x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop_track_pair.crop_track_pair_for_sat": [[159, 300], ["videoanalyst.pipeline.utils.bbox.xyxy2cxywh", "videoanalyst.pipeline.utils.bbox.xyxy2cxywh", "numpy.sqrt", "numpy.sqrt", "range", "videoanalyst.pipeline.utils.crop.get_subwindow_tracking", "videoanalyst.pipeline.utils.crop.get_subwindow_tracking", "videoanalyst.pipeline.utils.crop.get_subwindow_tracking", "videoanalyst.pipeline.utils.crop.get_subwindow_tracking", "im_z.transpose.transpose", "im_x.transpose.transpose", "seg_img.transpose.transpose", "filtered_global_img.transpose.transpose", "dict", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "videoanalyst.pipeline.utils.bbox.cxywh2xyxy", "videoanalyst.pipeline.utils.bbox.cxywh2xyxy", "str", "str", "rng.uniform", "numpy.exp", "numpy.array", "numpy.array", "rng.uniform", "print", "print", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "all", "all", "numpy.log", "numpy.log", "rng.uniform", "rng.uniform", "rng.uniform", "rng.uniform", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xyxy2cxywh", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xyxy2cxywh", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_subwindow_tracking", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xyxy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xyxy"], ["", "def", "crop_track_pair_for_sat", "(", "\n", "im_temp", ",", "\n", "bbox_temp", ",", "\n", "im_curr", ",", "\n", "bbox_curr", ",", "\n", "config", "=", "None", ",", "\n", "avg_chans", "=", "None", ",", "\n", "rng", "=", "np", ".", "random", ",", "\n", "DEBUG", "=", "False", ",", "\n", "mask_tmp", "=", "None", ",", "\n", "mask_curr", "=", "None", ",", "\n", ")", ":", "\n", "    ", "context_amount", "=", "config", "[", "\"context_amount\"", "]", "\n", "z_size", "=", "config", "[", "\"track_z_size\"", "]", "\n", "x_size", "=", "config", "[", "\"track_x_size\"", "]", "\n", "max_scale", "=", "config", "[", "\"max_scale\"", "]", "\n", "max_shift", "=", "config", "[", "\"max_shift\"", "]", "\n", "max_scale_temp", "=", "config", "[", "\"max_scale_temp\"", "]", "\n", "max_shift_temp", "=", "config", "[", "\"max_shift_temp\"", "]", "\n", "\n", "if", "avg_chans", "is", "None", ":", "\n", "        ", "avg_chans", "=", "np", ".", "mean", "(", "im_temp", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "box_temp", "=", "xyxy2cxywh", "(", "bbox_temp", ")", "\n", "box_curr", "=", "xyxy2cxywh", "(", "bbox_curr", ")", "\n", "\n", "# crop size, st for tamplate & sc for current", "\n", "wt", ",", "ht", "=", "box_temp", "[", "2", ":", "]", "\n", "wt_", "=", "wt", "+", "context_amount", "*", "(", "wt", "+", "ht", ")", "\n", "ht_", "=", "ht", "+", "context_amount", "*", "(", "wt", "+", "ht", ")", "\n", "st_", "=", "np", ".", "sqrt", "(", "wt_", "*", "ht_", ")", "\n", "\n", "wc", ",", "hc", "=", "box_curr", "[", "2", ":", "]", "\n", "wc_", "=", "wc", "+", "context_amount", "*", "(", "wc", "+", "hc", ")", "\n", "hc_", "=", "hc", "+", "context_amount", "*", "(", "wc", "+", "hc", ")", "\n", "sc_", "=", "np", ".", "sqrt", "(", "wc_", "*", "hc_", ")", "\n", "\n", "assert", "(", "st_", ">", "0", ")", "and", "(", "\n", "sc_", ">", "0", ")", ",", "\"Invalid box: box_temp %s and box_curr %s\"", "%", "(", "str", "(", "bbox_temp", ")", ",", "\n", "str", "(", "bbox_curr", ")", ")", "\n", "\n", "scale_temp_", "=", "z_size", "/", "st_", "\n", "scale_curr_", "=", "z_size", "/", "sc_", "\n", "\n", "# loop to generate valid augmentation", "\n", "for", "i", "in", "range", "(", "_MAX_RETRY", "+", "1", ")", ":", "\n", "# random scale", "\n", "        ", "if", "i", "<", "_MAX_RETRY", ":", "\n", "            ", "s_max", "=", "1", "+", "max_scale", "\n", "s_min", "=", "1", "/", "s_max", "\n", "scale_rand", "=", "rng", ".", "uniform", "(", "s_min", ",", "s_max", ")", "\n", "s_max", "=", "1", "+", "max_scale_temp", "\n", "s_min", "=", "1", "/", "s_max", "\n", "scale_rand_temp", "=", "np", ".", "exp", "(", "rng", ".", "uniform", "(", "np", ".", "log", "(", "s_min", ")", ",", "np", ".", "log", "(", "s_max", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "scale_rand", "=", "scale_rand_temp", "=", "1", "\n", "if", "DEBUG", ":", "print", "(", "'not augmented'", ")", "\n", "", "scale_curr", "=", "scale_curr_", "/", "scale_rand", "\n", "scale_temp", "=", "scale_temp_", "/", "scale_rand_temp", "\n", "s_curr", "=", "x_size", "/", "scale_curr", "\n", "s_temp", "=", "z_size", "/", "scale_temp", "\n", "\n", "# random shift", "\n", "if", "i", "<", "_MAX_RETRY", ":", "\n", "            ", "dx", "=", "rng", ".", "uniform", "(", "-", "max_shift", ",", "max_shift", ")", "*", "s_curr", "/", "2", "\n", "dy", "=", "rng", ".", "uniform", "(", "-", "max_shift", ",", "max_shift", ")", "*", "s_curr", "/", "2", "\n", "dx_temp", "=", "rng", ".", "uniform", "(", "-", "max_shift_temp", ",", "max_shift_temp", ")", "*", "s_temp", "/", "2", "\n", "dy_temp", "=", "rng", ".", "uniform", "(", "-", "max_shift_temp", ",", "max_shift_temp", ")", "*", "s_temp", "/", "2", "\n", "", "else", ":", "\n", "            ", "dx", "=", "dy", "=", "dx_temp", "=", "dy_temp", "=", "0", "\n", "if", "DEBUG", ":", "print", "(", "'not augmented'", ")", "\n", "\n", "# calculate bbox for cropping", "\n", "", "box_crop_temp", "=", "np", ".", "concatenate", "(", "[", "\n", "box_temp", "[", ":", "2", "]", "-", "np", ".", "array", "(", "[", "dx_temp", ",", "dy_temp", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "s_temp", ",", "s_temp", "]", ")", "\n", "]", ")", "\n", "box_crop_curr", "=", "np", ".", "concatenate", "(", "\n", "[", "box_curr", "[", ":", "2", "]", "-", "np", ".", "array", "(", "[", "dx", ",", "dy", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "s_curr", ",", "s_curr", "]", ")", "]", ")", "\n", "\n", "# calculate new bbox", "\n", "box_z", "=", "np", ".", "array", "(", "[", "(", "z_size", "-", "1", ")", "/", "2", "]", "*", "2", "+", "[", "0", "]", "*", "2", ")", "+", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "array", "(", "[", "dx_temp", ",", "dy_temp", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "wt", ",", "ht", "]", ")", "]", ")", "*", "scale_temp", "\n", "box_x", "=", "np", ".", "array", "(", "[", "(", "x_size", "-", "1", ")", "/", "2", "]", "*", "2", "+", "[", "0", "]", "*", "2", ")", "+", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "array", "(", "[", "dx", ",", "dy", "]", ")", ",", "np", ".", "array", "(", "[", "wc", ",", "hc", "]", ")", "]", ")", "*", "scale_curr", "\n", "bbox_z", "=", "cxywh2xyxy", "(", "box_z", ")", "\n", "bbox_x", "=", "cxywh2xyxy", "(", "box_x", ")", "\n", "\n", "# check validity of bbox", "\n", "if", "not", "(", "all", "(", "[", "0", "<=", "c", "<=", "z_size", "-", "1", "for", "c", "in", "bbox_z", "]", ")", "\n", "and", "all", "(", "[", "0", "<=", "c", "<=", "x_size", "-", "1", "for", "c", "in", "bbox_x", "]", ")", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "# sot track input z", "\n", "", "", "im_z", "=", "get_subwindow_tracking", "(", "im_temp", ",", "\n", "box_crop_temp", "[", ":", "2", "]", ",", "\n", "z_size", ",", "\n", "s_temp", ",", "\n", "avg_chans", "=", "avg_chans", ",", "\n", "mask", "=", "None", ")", "\n", "# sot track input x", "\n", "im_x", "=", "get_subwindow_tracking", "(", "im_curr", ",", "\n", "box_crop_curr", "[", ":", "2", "]", ",", "\n", "x_size", ",", "\n", "s_curr", ",", "\n", "avg_chans", "=", "avg_chans", ",", "\n", "mask", "=", "None", ")", "\n", "# global feature input", "\n", "\n", "global_fea_input_size", "=", "config", "[", "\"global_fea_input_size\"", "]", "\n", "s_global", "=", "global_fea_input_size", "/", "scale_temp", "\n", "global_img", ",", "global_mask", "=", "get_subwindow_tracking", "(", "im_temp", ",", "\n", "box_crop_temp", "[", ":", "2", "]", ",", "\n", "global_fea_input_size", ",", "\n", "s_global", ",", "\n", "avg_chans", "=", "avg_chans", ",", "\n", "mask", "=", "mask_tmp", ")", "\n", "# saliency input", "\n", "seg_x_size", "=", "config", "[", "\"seg_x_size\"", "]", "\n", "seg_x_resize", "=", "config", "[", "\"seg_x_resize\"", "]", "\n", "s_seg_x", "=", "seg_x_size", "/", "scale_curr", "\n", "seg_img", ",", "seg_mask", "=", "get_subwindow_tracking", "(", "im_curr", ",", "\n", "box_crop_curr", "[", ":", "2", "]", ",", "\n", "seg_x_resize", ",", "\n", "s_seg_x", ",", "\n", "avg_chans", "=", "avg_chans", ",", "\n", "mask", "=", "mask_curr", ")", "\n", "\n", "filtered_global_img", "=", "global_img", "*", "global_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "im_z", "=", "im_z", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "im_x", "=", "im_x", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "seg_img", "=", "seg_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "filtered_global_img", "=", "filtered_global_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "dict", "(", "im_z", "=", "im_z", ",", "\n", "im_x", "=", "im_x", ",", "\n", "seg_img", "=", "seg_img", ",", "\n", "seg_mask", "=", "seg_mask", ",", "\n", "filtered_global_img", "=", "filtered_global_img", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.filter_box.filter_unreasonable_training_boxes": [[9, 37], ["all", "max", "max"], "function", ["None"], ["def", "filter_unreasonable_training_boxes", "(", "im", ":", "np", ".", "array", ",", "bbox", ",", "\n", "config", ":", "Dict", ")", "->", "bool", ":", "\n", "    ", "r\"\"\" \n    Filter too small,too large objects and objects with extreme ratio\n    No input check. Assume that all imput (im, bbox) are valid object\n\n    Arguments\n    ---------\n    im: np.array\n        image, formate=(H, W, C)\n    bbox: np.array or indexable object\n        bounding box annotation in (x, y, w, h) format\n    \"\"\"", "\n", "eps", "=", "1e-6", "\n", "im_area", "=", "im", ".", "shape", "[", "0", "]", "*", "im", ".", "shape", "[", "1", "]", "\n", "_", ",", "_", ",", "w", ",", "h", "=", "bbox", "\n", "bbox_area", "=", "w", "*", "h", "\n", "bbox_area_rate", "=", "bbox_area", "/", "im_area", "\n", "bbox_ratio", "=", "h", "/", "(", "w", "+", "eps", ")", "\n", "\n", "# valid trainng box condition", "\n", "conds", "=", "[", "(", "config", "[", "\"min_area_rate\"", "]", "<", "bbox_area_rate", ",", "\n", "bbox_area_rate", "<", "config", "[", "\"max_area_rate\"", "]", ")", ",", "\n", "max", "(", "bbox_ratio", ",", "1.0", "/", "max", "(", "bbox_ratio", ",", "eps", ")", ")", "<", "config", "[", "\"max_ratio\"", "]", "]", "\n", "# if not all conditions are satisfied, filter the sample", "\n", "filter_flag", "=", "not", "all", "(", "conds", ")", "\n", "\n", "return", "filter_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.filter_box.filter_unreasonable_training_masks": [[39, 71], ["cv2.boundingRect", "all", "loguru.logger.error", "max", "max"], "function", ["None"], ["", "def", "filter_unreasonable_training_masks", "(", "im", ":", "np", ".", "array", ",", "mask", ",", "\n", "config", ":", "Dict", ")", "->", "bool", ":", "\n", "    ", "r\"\"\" \n    Filter too small,too large objects and objects with extreme ratio\n    No input check. Assume that all imput (im, bbox) are valid object\n\n    Arguments\n    ---------\n    im: np.array\n        image, formate=(H, W, C)\n    mask: np.array\n        mask, formate=(H, W) only have 0 and 1\n    \"\"\"", "\n", "eps", "=", "1e-6", "\n", "im_area", "=", "im", ".", "shape", "[", "0", "]", "*", "im", ".", "shape", "[", "1", "]", "\n", "try", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "cv2", ".", "boundingRect", "(", "mask", ")", "\n", "", "except", ":", "\n", "        ", "logger", ".", "error", "(", "\"error while loading mask\"", ")", "\n", "return", "True", "\n", "\n", "", "bbox_area", "=", "w", "*", "h", "\n", "bbox_area_rate", "=", "bbox_area", "/", "im_area", "\n", "bbox_ratio", "=", "h", "/", "(", "w", "+", "eps", ")", "\n", "# valid trainng box condition", "\n", "conds", "=", "[", "(", "config", "[", "\"min_area_rate\"", "]", "<", "bbox_area_rate", ",", "\n", "bbox_area_rate", "<", "config", "[", "\"max_area_rate\"", "]", ")", ",", "\n", "max", "(", "bbox_ratio", ",", "1.0", "/", "max", "(", "bbox_ratio", ",", "eps", ")", ")", "<", "config", "[", "\"max_ratio\"", "]", "]", "\n", "# if not all conditions are satisfied, filter the sample", "\n", "filter_flag", "=", "not", "all", "(", "conds", ")", "\n", "\n", "return", "filter_flag", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.make_densebox_target_v1.make_densebox_target": [[17, 194], ["numpy.concatenate", "numpy.abs", "len", "numpy.arange().reshape", "numpy.arange().reshape", "numpy.meshgrid", "numpy.squeeze", "numpy.concatenate", "range", "enumerate", "[].astype", "[].astype", "numpy.concatenate().astype", "numpy.concatenate", "off_l.dump", "off_t.dump", "off_r.dump", "off_b.dump", "np.squeeze.dump", "numpy.sqrt", "np.concatenate.dump", "len", "fm_size_list.append", "int", "int", "zip", "numpy.arange", "numpy.arange", "numpy.meshgrid", "numpy.vstack().transpose", "numpy.zeros", "numpy.argmax", "numpy.zeros", "gt_boxes_res_list.append", "numpy.zeros", "cls_res_list.append", "numpy.zeros", "ctr_res_list.append", "numpy.zeros", "numpy.argsort", "numpy.arange", "numpy.arange", "numpy.minimum", "numpy.minimum", "numpy.abs", "numpy.ceil", "numpy.ceil", "np.zeros.reshape", "np.zeros.reshape", "np.zeros.reshape", "numpy.concatenate", "numpy.ones", "numpy.maximum", "numpy.maximum", "numpy.vstack", "numpy.concatenate", "numpy.concatenate", "np.arange.ravel", "np.arange.ravel"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["", "def", "make_densebox_target", "(", "gt_boxes", ":", "np", ".", "array", ",", "config", ":", "Dict", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\" v1\n    Model training target generation function for densebox\n\n    Arguments\n    ---------\n    gt_boxes : np.array\n        ground truth bounding boxes with class, shape=(N, 5), order=(x0, y0, x1, y1, class)\n    config: configuration of target making (old format)\n        Keys\n        ----\n        x_size : int\n            search image size\n        score_size : int\n            score feature map size\n        total_stride : int\n            total stride of backbone\n        score_offset : int\n            offset between the edge of score map and the border of the search image\n\n    Returns\n    -------\n    Tuple\n        cls_res_final : np.array\n            class\n            shape=(N, 1)\n        ctr_res_final : np.array\n            shape=(N, 1)\n        gt_boxes_res_final : np.array\n            shape=(N, 4)\n        # previous format\n        # shape=(N, 6), order=(class, center-ness, left_offset, top_offset, right_offset, bottom_offset)\n    \"\"\"", "\n", "x_size", "=", "config", "[", "\"x_size\"", "]", "\n", "score_size", "=", "config", "[", "\"score_size\"", "]", "\n", "total_stride", "=", "config", "[", "\"total_stride\"", "]", "\n", "score_offset", "=", "config", "[", "\"score_offset\"", "]", "\n", "eps", "=", "1e-5", "\n", "raw_height", ",", "raw_width", "=", "x_size", ",", "x_size", "\n", "\n", "# append class dimension to gt_boxes if ignored", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "        ", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_boxes", ",", "np", ".", "ones", "(", "\n", "(", "gt_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "# boxes_cnt x 5", "\n", "# l, t, r, b", "\n", "", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "1", ",", "5", ")", ")", ",", "gt_boxes", "]", ")", "# (boxes_cnt, 5)", "\n", "gt_boxes_area", "=", "(", "np", ".", "abs", "(", "\n", "(", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "0", "]", ")", "*", "(", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "np", ".", "argsort", "(", "\n", "gt_boxes_area", ")", "]", "# sort gt_boxes by area, ascending order", "\n", "boxes_cnt", "=", "len", "(", "gt_boxes", ")", "# number of gt_boxes", "\n", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "raw_width", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "raw_height", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "# (H, W)", "\n", "\n", "# (H, W, #boxes, 1d-offset(l/t/r/b) )", "\n", "off_l", "=", "(", "shift_x", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "0", ",", "np", ".", "newaxis", "]", ")", "\n", "off_t", "=", "(", "shift_y", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "1", ",", "np", ".", "newaxis", "]", ")", "\n", "off_r", "=", "-", "(", "shift_x", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "2", ",", "np", ".", "newaxis", "]", ")", "\n", "off_b", "=", "-", "(", "shift_y", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "3", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "off_l", ".", "dump", "(", "\"{}/off_l_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_t", ".", "dump", "(", "\"{}/off_t_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_r", ".", "dump", "(", "\"{}/off_r_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_b", ".", "dump", "(", "\"{}/off_b_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "\n", "# centerness", "\n", "", "center", "=", "(", "(", "np", ".", "minimum", "(", "off_l", ",", "off_r", ")", "*", "np", ".", "minimum", "(", "off_t", ",", "off_b", ")", ")", "/", "\n", "(", "np", ".", "maximum", "(", "off_l", ",", "off_r", ")", "*", "np", ".", "maximum", "(", "off_t", ",", "off_b", ")", "+", "eps", ")", ")", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "center", ".", "dump", "(", "\"{}/center_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "", "center", "=", "np", ".", "squeeze", "(", "np", ".", "sqrt", "(", "np", ".", "abs", "(", "center", ")", ")", ")", "\n", "center", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "\n", "offset", "=", "np", ".", "concatenate", "(", "[", "off_l", ",", "off_t", ",", "off_r", ",", "off_b", "]", ",", "\n", "axis", "=", "3", ")", "# h x w x boxes_cnt * 4", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "offset", ".", "dump", "(", "\"{}/offset_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "", "cls", "=", "gt_boxes", "[", ":", ",", "4", "]", "\n", "\n", "cls_res_list", "=", "[", "]", "\n", "ctr_res_list", "=", "[", "]", "\n", "gt_boxes_res_list", "=", "[", "]", "\n", "\n", "fm_height", ",", "fm_width", "=", "score_size", ",", "score_size", "\n", "\n", "fm_size_list", "=", "[", "]", "\n", "fm_strides", "=", "[", "total_stride", "]", "\n", "fm_offsets", "=", "[", "score_offset", "]", "\n", "for", "fm_i", "in", "range", "(", "len", "(", "fm_strides", ")", ")", ":", "\n", "        ", "fm_size_list", ".", "append", "(", "[", "fm_height", ",", "fm_width", "]", ")", "\n", "fm_height", "=", "int", "(", "np", ".", "ceil", "(", "fm_height", "/", "2", ")", ")", "\n", "fm_width", "=", "int", "(", "np", ".", "ceil", "(", "fm_width", "/", "2", ")", ")", "\n", "\n", "", "fm_size_list", "=", "fm_size_list", "[", ":", ":", "-", "1", "]", "\n", "for", "fm_i", ",", "(", "stride", ",", "fm_offset", ")", "in", "enumerate", "(", "zip", "(", "fm_strides", ",", "fm_offsets", ")", ")", ":", "\n", "        ", "fm_height", "=", "fm_size_list", "[", "fm_i", "]", "[", "0", "]", "\n", "fm_width", "=", "fm_size_list", "[", "fm_i", "]", "[", "1", "]", "\n", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "fm_width", ")", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "fm_height", ")", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "xy", "=", "np", ".", "vstack", "(", "\n", "(", "shift_y", ".", "ravel", "(", ")", ",", "shift_x", ".", "ravel", "(", ")", ")", ")", ".", "transpose", "(", ")", "# (hxw) x 2", "\n", "# floor(stride / 2) + x * stride?", "\n", "off_xy", "=", "offset", "[", "fm_offset", "+", "xy", "[", ":", ",", "0", "]", "*", "stride", ",", "\n", "fm_offset", "+", "xy", "[", ":", ",", "1", "]", "*", "stride", "]", "# will reduce dim by 1", "\n", "# off_max_xy = off_xy.max(axis=2)  # max of l,t,r,b", "\n", "off_valid", "=", "np", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ",", "boxes_cnt", ")", ")", "\n", "\n", "is_in_boxes", "=", "(", "off_xy", ">", "0", ")", ".", "all", "(", "axis", "=", "2", ")", "\n", "# is_in_layer = (off_max_xy <=", "\n", "#         config.sep_win[fm_i]) & (off_max_xy >= config.sep_win[fm_i + 1])", "\n", "off_valid", "[", "\n", "xy", "[", ":", ",", "0", "]", ",", "\n", "xy", "[", ":", ",", "\n", "1", "]", ",", ":", "]", "=", "is_in_boxes", "#& is_in_layer  # xy[:, 0], xy[:, 1] reduce dim by 1 to match is_in_boxes.shape & is_in_layer.shape", "\n", "off_valid", "[", ":", ",", ":", ",", "0", "]", "=", "0", "# h x w x boxes_cnt", "\n", "\n", "hit_gt_ind", "=", "np", ".", "argmax", "(", "off_valid", ",", "axis", "=", "2", ")", "# h x w", "\n", "\n", "# gt_boxes", "\n", "gt_boxes_res", "=", "np", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ",", "4", ")", ")", "\n", "gt_boxes_res", "[", "xy", "[", ":", ",", "0", "]", ",", "\n", "xy", "[", ":", ",", "1", "]", "]", "=", "gt_boxes", "[", "hit_gt_ind", "[", "xy", "[", ":", ",", "0", "]", ",", "xy", "[", ":", ",", "1", "]", "]", ",", ":", "4", "]", "\n", "gt_boxes_res_list", ".", "append", "(", "gt_boxes_res", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "\n", "# cls", "\n", "cls_res", "=", "np", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ")", ")", "\n", "cls_res", "[", "xy", "[", ":", ",", "0", "]", ",", "xy", "[", ":", ",", "1", "]", "]", "=", "cls", "[", "hit_gt_ind", "[", "xy", "[", ":", ",", "0", "]", ",", "xy", "[", ":", ",", "1", "]", "]", "]", "\n", "cls_res_list", ".", "append", "(", "cls_res", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n", "# center", "\n", "center_res", "=", "np", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ")", ")", "\n", "center_res", "[", "xy", "[", ":", ",", "0", "]", ",", "xy", "[", ":", ",", "1", "]", "]", "=", "center", "[", "fm_offset", "+", "\n", "xy", "[", ":", ",", "0", "]", "*", "stride", ",", "fm_offset", "+", "\n", "xy", "[", ":", ",", "1", "]", "*", "stride", ",", "\n", "hit_gt_ind", "[", "xy", "[", ":", ",", "0", "]", ",", "xy", "[", ":", ",", "1", "]", "]", "]", "\n", "ctr_res_list", ".", "append", "(", "center_res", ".", "reshape", "(", "-", "1", ")", ")", "\n", "# from IPython import embed;embed()", "\n", "\n", "", "cls_res_final", "=", "np", ".", "concatenate", "(", "cls_res_list", ",", "\n", "axis", "=", "0", ")", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ctr_res_final", "=", "np", ".", "concatenate", "(", "ctr_res_list", ",", "\n", "axis", "=", "0", ")", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt_boxes_res_final", "=", "np", ".", "concatenate", "(", "gt_boxes_res_list", ",", "\n", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# choose pos and neg point", "\n", "# labels = np.empty((len(cls_res_final),), dtype=np.float32)", "\n", "# labels.fill(-1)", "\n", "#", "\n", "# pos_index= np.where(cls_res_final > 0)", "\n", "# neg_index = np.where(cls_res_final == 0)", "\n", "# if len(pos_index[0]) > config.rpn_pos_samples:", "\n", "#     np.random.shuffle(pos_index[0])", "\n", "#     selected_pos = pos_index[0][:config.rpn_pos_samples]", "\n", "# else:", "\n", "#     selected_pos = pos_index[0]", "\n", "#", "\n", "# neg_num = config.rpn_total_samples - len(selected_pos)", "\n", "# np.random.shuffle(neg_index[0])", "\n", "# selected_neg = neg_index[0][:neg_num]", "\n", "#", "\n", "# labels[selected_pos] = 1", "\n", "# labels[selected_neg] = 0", "\n", "# labels = labels[:, np.newaxis]", "\n", "\n", "# return np.concatenate([cls_res_final, ctr_res_final, gt_boxes_res_final], axis=1)", "\n", "return", "cls_res_final", ",", "ctr_res_final", ",", "gt_boxes_res_final", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.make_densebox_target.make_densebox_target": [[16, 198], ["torch.from_numpy().type", "torch.cat", "torch.abs", "len", "torch.arange", "torch.arange", "torch.meshgrid", "torch.squeeze", "torch.cat", "torch.arange", "torch.arange", "torch.meshgrid", "y_coords_on_fm.reshape.reshape", "x_coords_on_fm.reshape.reshape", "torch.zeros", "numpy.argmax", "torch.zeros", "gt_boxes_res.reshape.reshape", "torch.zeros", "cls_res.reshape.reshape", "torch.zeros", "center_res.reshape.reshape", "numpy.concatenate", "x_coords[].type", "y_coords[].type", "off_l.numpy().dump", "off_t.numpy().dump", "off_r.numpy().dump", "off_b.numpy().dump", "torch.squeeze.numpy().dump", "torch.sqrt", "torch.cat.numpy().dump", "torch.from_numpy", "torch.zeros", "torch.argsort", "x_coords[].type", "y_coords[].type", "torch.min", "torch.min", "torch.abs", "numpy.ones", "off_l.numpy", "off_t.numpy", "off_r.numpy", "off_b.numpy", "torch.max", "torch.max", "torch.squeeze.numpy", "torch.cat.numpy"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["", "def", "make_densebox_target", "(", "gt_boxes", ":", "np", ".", "array", ",", "config", ":", "Dict", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\" v2.1, \n          fix indexing type cast (compatible with previous)\n    Model training target generation function for densebox\n        Target processing code changed from numpy to pytorch\n        Only one resolution layer is taken into consideration\n        Refined & documented in detail, comparing to precedented version\n    \n    About Training Accuracy w.r.t. previous version (torch==1.5.1)\n        siamfcpp-alexnet: ao@got10k-val = 73.3\n        siamfcpp-googlenet: ao@got10k-val = 76.3\n\n    About alignmenet w.r.t. v2\n    - classification target: aligned\n    - centerness target: aligned\n    - bbox target: aligned\n\n    Arguments\n    ---------\n    gt_boxes : np.array\n        ground truth bounding boxes with class, shape=(N, 5), order=(x0, y0, x1, y1, class)\n    config: configuration of target making (old format)\n        Keys\n        ----\n        x_size : int\n            search image size\n        score_size : int\n            score feature map size\n        total_stride : int\n            total stride of backbone\n        score_offset : int\n            offset between the edge of score map and the border of the search image\n\n    Returns\n    -------\n    Tuple\n        cls_res_final : np.array\n            class\n            shape=(N, 1)\n        ctr_res_final : np.array\n            shape=(N, 1)\n        gt_boxes_res_final : np.array\n            shape=(N, 4)\n        # previous format\n        # shape=(N, 6), order=(class, center-ness, left_offset, top_offset, right_offset, bottom_offset)\n    \"\"\"", "\n", "x_size", "=", "config", "[", "\"x_size\"", "]", "\n", "score_size", "=", "config", "[", "\"score_size\"", "]", "\n", "total_stride", "=", "config", "[", "\"total_stride\"", "]", "\n", "score_offset", "=", "config", "[", "\"score_offset\"", "]", "\n", "eps", "=", "1e-5", "\n", "raw_height", ",", "raw_width", "=", "x_size", ",", "x_size", "\n", "\n", "# append class dimension to gt_boxes if ignored", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "        ", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_boxes", ",", "np", ".", "ones", "(", "\n", "(", "gt_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "# boxes_cnt x 5", "\n", "\n", "", "gt_boxes", "=", "torch", ".", "from_numpy", "(", "gt_boxes", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "# gt box area", "\n", "#   TODO: consider change to max - min + 1?", "\n", "# (#boxes, 4-d_box + 1-d_cls)", "\n", "#   append dummy box (0, 0, 0, 0) at first for convenient", "\n", "#   #boxes++", "\n", "gt_boxes", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ",", "5", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "gt_boxes", "]", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "gt_boxes_area", "=", "(", "torch", ".", "abs", "(", "\n", "(", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "0", "]", ")", "*", "(", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "# sort gt_boxes by area, ascending order", "\n", "#   small box priviledged to large box", "\n", "gt_boxes", "=", "gt_boxes", "[", "torch", ".", "argsort", "(", "gt_boxes_area", ")", "]", "\n", "# #boxes", "\n", "boxes_cnt", "=", "len", "(", "gt_boxes", ")", "\n", "\n", "# coordinate meshgrid on image, shape=(H. W)", "\n", "x_coords", "=", "torch", ".", "arange", "(", "0", ",", "raw_width", ",", "dtype", "=", "torch", ".", "int64", ")", "# (W, )", "\n", "y_coords", "=", "torch", ".", "arange", "(", "0", ",", "raw_height", ",", "dtype", "=", "torch", ".", "int64", ")", "# (H, )", "\n", "y_coords", ",", "x_coords", "=", "torch", ".", "meshgrid", "(", "x_coords", ",", "y_coords", ")", "# (H, W)", "\n", "\n", "off_l", "=", "(", "x_coords", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "type", "(", "torch", ".", "float32", ")", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "0", ",", "np", ".", "newaxis", "]", ")", "\n", "off_t", "=", "(", "y_coords", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "type", "(", "torch", ".", "float32", ")", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "1", ",", "np", ".", "newaxis", "]", ")", "\n", "off_r", "=", "-", "(", "x_coords", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "type", "(", "torch", ".", "float32", ")", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "2", ",", "np", ".", "newaxis", "]", ")", "\n", "off_b", "=", "-", "(", "y_coords", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "type", "(", "torch", ".", "float32", ")", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "3", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "off_l", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/off_l_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_t", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/off_t_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_r", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/off_r_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_b", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/off_b_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "\n", "# centerness", "\n", "# (H, W, #boxes, 1-d_centerness)", "\n", "#     CAUTION: division / broadcast operation can vary across computing framework (pytorch/numpy/etc.)", "\n", "#                  which may cause computation result misalignement (but should be really slight)", "\n", "", "center", "=", "(", "(", "torch", ".", "min", "(", "off_l", ",", "off_r", ")", "*", "torch", ".", "min", "(", "off_t", ",", "off_b", ")", ")", "/", "\n", "(", "torch", ".", "max", "(", "off_l", ",", "off_r", ")", "*", "torch", ".", "max", "(", "off_t", ",", "off_b", ")", "+", "eps", ")", ")", "\n", "# TODO: consider using clamp rather than adding epsilon?", "\n", "# center = ((torch.min(off_l, off_r) * torch.min(off_t, off_b)) /", "\n", "#           torch.clamp(torch.max(off_l, off_r) * torch.max(off_t, off_b), min=eps))", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "center", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/center_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "# (H, W, #boxes, )", "\n", "", "center", "=", "torch", ".", "squeeze", "(", "torch", ".", "sqrt", "(", "torch", ".", "abs", "(", "center", ")", ")", ",", "dim", "=", "3", ")", "\n", "center", "[", ":", ",", ":", ",", "0", "]", "=", "0", "# mask centerness for dummy box as zero", "\n", "\n", "# (H, W, #boxes, 4)", "\n", "offset", "=", "torch", ".", "cat", "(", "[", "off_l", ",", "off_t", ",", "off_r", ",", "off_b", "]", ",", "dim", "=", "3", ")", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "offset", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/offset_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "\n", "# (#boxes, )", "\n", "#   store cls index of each box", "\n", "#   class 0 is background", "\n", "#   dummy box assigned as 0", "\n", "", "cls", "=", "gt_boxes", "[", ":", ",", "4", "]", "\n", "\n", "fm_height", ",", "fm_width", "=", "score_size", ",", "score_size", "# h, w", "\n", "fm_offset", "=", "score_offset", "\n", "stride", "=", "total_stride", "\n", "\n", "# coordinate meshgrid on feature map, shape=(h, w)", "\n", "x_coords_on_fm", "=", "torch", ".", "arange", "(", "0", ",", "fm_width", ",", "dtype", "=", "torch", ".", "int64", ")", "# (w, )", "\n", "y_coords_on_fm", "=", "torch", ".", "arange", "(", "0", ",", "fm_height", ",", "dtype", "=", "torch", ".", "int64", ")", "# (h, )", "\n", "y_coords_on_fm", ",", "x_coords_on_fm", "=", "torch", ".", "meshgrid", "(", "x_coords_on_fm", ",", "\n", "y_coords_on_fm", ")", "# (h, w)", "\n", "y_coords_on_fm", "=", "y_coords_on_fm", ".", "reshape", "(", "-", "1", ")", "# (hxw, ), flattened", "\n", "x_coords_on_fm", "=", "x_coords_on_fm", ".", "reshape", "(", "-", "1", ")", "# (hxw, ), flattened", "\n", "\n", "# (hxw, #boxes, 4-d_offset_(l/t/r/b), )", "\n", "offset_on_fm", "=", "offset", "[", "fm_offset", "+", "y_coords_on_fm", "*", "stride", ",", "fm_offset", "+", "\n", "x_coords_on_fm", "*", "stride", "]", "# will reduce dim by 1", "\n", "# (hxw, #gt_boxes, )", "\n", "is_in_boxes", "=", "(", "offset_on_fm", ">", "0", ")", ".", "all", "(", "dim", "=", "2", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "# (h, w, #gt_boxes, ), boolean", "\n", "#   valid mask", "\n", "offset_valid", "=", "torch", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ",", "boxes_cnt", ")", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", "\n", "offset_valid", "[", "\n", "y_coords_on_fm", ",", "\n", "x_coords_on_fm", ",", ":", "]", "=", "is_in_boxes", "#& is_in_layer  # xy[:, 0], xy[:, 1] reduce dim by 1 to match is_in_boxes.shape & is_in_layer.shape", "\n", "offset_valid", "[", ":", ",", ":", ",", "0", "]", "=", "0", "# h x w x boxes_cnt", "\n", "\n", "# (h, w), boolean", "\n", "#   index of pixel on feature map", "\n", "#     used for indexing on gt_boxes, cls", "\n", "#   if not match any box, fall on dummy box at index 0", "\n", "#   if conflict, choose box with smaller index", "\n", "#   P.S. boxes already ordered by box's area", "\n", "#   Attention: be aware of definition of _argmax_ here", "\n", "#       which is assumed to find the FIRST OCCURENCE of the max value", "\n", "#       currently torch.argmax's behavior is not aligned with np.argmax", "\n", "#       c.f. https://github.com/pytorch/pytorch/issues/22853", "\n", "hit_gt_ind", "=", "np", ".", "argmax", "(", "offset_valid", ",", "axis", "=", "2", ")", "\n", "\n", "# (h, w, 4-d_box)", "\n", "#   gt_boxes", "\n", "gt_boxes_res", "=", "torch", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ",", "4", ")", ")", "\n", "gt_boxes_res", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "=", "gt_boxes", "[", "\n", "hit_gt_ind", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", ",", ":", "4", "]", "# gt_boxes: (#boxes, 5)", "\n", "gt_boxes_res", "=", "gt_boxes_res", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# gt_boxes_res_list.append(gt_boxes_res.reshape(-1, 4))", "\n", "\n", "# (h, w, 1-d_cls_score)", "\n", "cls_res", "=", "torch", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ")", ")", "\n", "cls_res", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "=", "cls", "[", "\n", "hit_gt_ind", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "]", "\n", "cls_res", "=", "cls_res", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# (h, w, 1-d_centerness)", "\n", "center_res", "=", "torch", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ")", ")", "\n", "center_res", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "=", "center", "[", "\n", "fm_offset", "+", "y_coords_on_fm", "*", "stride", ",", "fm_offset", "+", "\n", "x_coords_on_fm", "*", "stride", ",", "hit_gt_ind", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "]", "\n", "center_res", "=", "center_res", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "cls_res", ",", "center_res", ",", "gt_boxes_res", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.make_densebox_target_v2.make_densebox_target": [[16, 197], ["torch.from_numpy().type", "torch.cat", "torch.abs", "len", "torch.arange", "torch.arange", "torch.meshgrid", "torch.squeeze", "torch.cat", "torch.arange", "torch.arange", "torch.meshgrid", "y_coords_on_fm.reshape.reshape", "x_coords_on_fm.reshape.reshape", "numpy.zeros", "numpy.argmax", "torch.zeros", "gt_boxes_res.reshape.reshape", "torch.zeros", "cls_res.reshape.reshape", "torch.zeros", "center_res.reshape.reshape", "numpy.concatenate", "off_l.numpy().dump", "off_t.numpy().dump", "off_r.numpy().dump", "off_b.numpy().dump", "torch.squeeze.numpy().dump", "torch.sqrt", "torch.cat.numpy().dump", "torch.from_numpy", "torch.zeros", "torch.argsort", "torch.min", "torch.min", "torch.abs", "numpy.ones", "off_l.numpy", "off_t.numpy", "off_r.numpy", "off_b.numpy", "torch.max", "torch.max", "torch.squeeze.numpy", "torch.cat.numpy"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["", "def", "make_densebox_target", "(", "gt_boxes", ":", "np", ".", "array", ",", "config", ":", "Dict", ")", "->", "Tuple", ":", "\n", "    ", "\"\"\" v2\n          move label generation from numpy to pytorch\n    Model training target generation function for densebox\n        Target processing code changed from numpy to pytorch\n        Only one resolution layer is taken into consideration\n        Refined & documented in detail, comparing to precedented version\n    \n    About Training Accuracy w.r.t. previous version (torch==1.4.0 [?])\n        siamfcpp-alexnet: ao@got10k-val = 73.4\n        siamfcpp-googlenet: ao@got10k-val = 75.5\n\n    About alignmenet w.r.t. v1\n    - classification target: aligned\n    - centerness target: slightly differ, \n                           e.g. \n                             max_err ~= 1e-8 in final centerness\n                             max_err ~= 1e-6 in dense centerness\n                         May due to the difference in implementation\n                         of math operation (e.g. division)\n    - bbox target: aligned\n\n    Arguments\n    ---------\n    gt_boxes : np.array\n        ground truth bounding boxes with class, shape=(N, 5), order=(x0, y0, x1, y1, class)\n    config: configuration of target making (old format)\n        Keys\n        ----\n        x_size : int\n            search image size\n        score_size : int\n            score feature map size\n        total_stride : int\n            total stride of backbone\n        score_offset : int\n            offset between the edge of score map and the border of the search image\n\n    Returns\n    -------\n    Tuple\n        cls_res_final : np.array\n            class\n            shape=(N, 1)\n        ctr_res_final : np.array\n            shape=(N, 1)\n        gt_boxes_res_final : np.array\n            shape=(N, 4)\n        # previous format\n        # shape=(N, 6), order=(class, center-ness, left_offset, top_offset, right_offset, bottom_offset)\n    \"\"\"", "\n", "x_size", "=", "config", "[", "\"x_size\"", "]", "\n", "score_size", "=", "config", "[", "\"score_size\"", "]", "\n", "total_stride", "=", "config", "[", "\"total_stride\"", "]", "\n", "score_offset", "=", "config", "[", "\"score_offset\"", "]", "\n", "eps", "=", "1e-5", "\n", "raw_height", ",", "raw_width", "=", "x_size", ",", "x_size", "\n", "\n", "# append class dimension to gt_boxes if ignored", "\n", "if", "gt_boxes", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "        ", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_boxes", ",", "np", ".", "ones", "(", "\n", "(", "gt_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "# boxes_cnt x 5", "\n", "\n", "", "gt_boxes", "=", "torch", ".", "from_numpy", "(", "gt_boxes", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "# gt box area", "\n", "#   TODO: consider change to max - min + 1?", "\n", "# (#boxes, 4-d_box + 1-d_cls)", "\n", "#   append dummy box (0, 0, 0, 0) at first for convenient", "\n", "#   #boxes++", "\n", "gt_boxes", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "1", ",", "5", ")", ",", "gt_boxes", "]", ",", "dim", "=", "0", ")", "\n", "\n", "gt_boxes_area", "=", "(", "torch", ".", "abs", "(", "\n", "(", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "0", "]", ")", "*", "(", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "# sort gt_boxes by area, ascending order", "\n", "#   small box priviledged to large box", "\n", "gt_boxes", "=", "gt_boxes", "[", "torch", ".", "argsort", "(", "gt_boxes_area", ")", "]", "\n", "# #boxes", "\n", "boxes_cnt", "=", "len", "(", "gt_boxes", ")", "\n", "\n", "# coordinate meshgrid on image, shape=(H. W)", "\n", "x_coords", "=", "torch", ".", "arange", "(", "0", ",", "raw_width", ")", "# (W, )", "\n", "y_coords", "=", "torch", ".", "arange", "(", "0", ",", "raw_height", ")", "# (H, )", "\n", "y_coords", ",", "x_coords", "=", "torch", ".", "meshgrid", "(", "x_coords", ",", "y_coords", ")", "# (H, W)", "\n", "\n", "off_l", "=", "(", "x_coords", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "0", ",", "np", ".", "newaxis", "]", ")", "\n", "off_t", "=", "(", "y_coords", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "1", ",", "np", ".", "newaxis", "]", ")", "\n", "off_r", "=", "-", "(", "x_coords", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "2", ",", "np", ".", "newaxis", "]", ")", "\n", "off_b", "=", "-", "(", "y_coords", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "-", "\n", "gt_boxes", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "3", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "off_l", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/off_l_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_t", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/off_t_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_r", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/off_r_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "off_b", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/off_b_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "\n", "# centerness", "\n", "# (H, W, #boxes, 1-d_centerness)", "\n", "#     CAUTION: division / broadcast operation can vary across computing framework (pytorch/numpy/etc.)", "\n", "#                  which may cause computation result misalignement (but should be really slight)", "\n", "", "center", "=", "(", "(", "torch", ".", "min", "(", "off_l", ",", "off_r", ")", "*", "torch", ".", "min", "(", "off_t", ",", "off_b", ")", ")", "/", "\n", "(", "torch", ".", "max", "(", "off_l", ",", "off_r", ")", "*", "torch", ".", "max", "(", "off_t", ",", "off_b", ")", "+", "eps", ")", ")", "\n", "# TODO: consider using clamp rather than adding epsilon?", "\n", "# center = ((torch.min(off_l, off_r) * torch.min(off_t, off_b)) /", "\n", "#           torch.clamp(torch.max(off_l, off_r) * torch.max(off_t, off_b), min=eps))", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "center", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/center_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "# (H, W, #boxes, )", "\n", "", "center", "=", "torch", ".", "squeeze", "(", "torch", ".", "sqrt", "(", "torch", ".", "abs", "(", "center", ")", ")", ",", "dim", "=", "3", ")", "\n", "center", "[", ":", ",", ":", ",", "0", "]", "=", "0", "# mask centerness for dummy box as zero", "\n", "\n", "# (H, W, #boxes, 4)", "\n", "offset", "=", "torch", ".", "cat", "(", "[", "off_l", ",", "off_t", ",", "off_r", ",", "off_b", "]", ",", "dim", "=", "3", ")", "\n", "if", "DUMP_FLAG", ":", "\n", "        ", "offset", ".", "numpy", "(", ")", ".", "dump", "(", "\"{}/offset_{}.npz\"", ".", "format", "(", "DUMP_DIR", ",", "DUMP_SUFFIX", ")", ")", "\n", "\n", "# (#boxes, )", "\n", "#   store cls index of each box", "\n", "#   class 0 is background", "\n", "#   dummy box assigned as 0", "\n", "", "cls", "=", "gt_boxes", "[", ":", ",", "4", "]", "\n", "\n", "fm_height", ",", "fm_width", "=", "score_size", ",", "score_size", "# h, w", "\n", "fm_offset", "=", "score_offset", "\n", "stride", "=", "total_stride", "\n", "\n", "# coordinate meshgrid on feature map, shape=(h, w)", "\n", "x_coords_on_fm", "=", "torch", ".", "arange", "(", "0", ",", "fm_width", ")", "# (w, )", "\n", "y_coords_on_fm", "=", "torch", ".", "arange", "(", "0", ",", "fm_height", ")", "# (h, )", "\n", "y_coords_on_fm", ",", "x_coords_on_fm", "=", "torch", ".", "meshgrid", "(", "x_coords_on_fm", ",", "\n", "y_coords_on_fm", ")", "# (h, w)", "\n", "y_coords_on_fm", "=", "y_coords_on_fm", ".", "reshape", "(", "-", "1", ")", "# (hxw, ), flattened", "\n", "x_coords_on_fm", "=", "x_coords_on_fm", ".", "reshape", "(", "-", "1", ")", "# (hxw, ), flattened", "\n", "\n", "# (hxw, #boxes, 4-d_offset_(l/t/r/b), )", "\n", "offset_on_fm", "=", "offset", "[", "fm_offset", "+", "y_coords_on_fm", "*", "stride", ",", "fm_offset", "+", "\n", "x_coords_on_fm", "*", "stride", "]", "# will reduce dim by 1", "\n", "# (hxw, #gt_boxes, )", "\n", "is_in_boxes", "=", "(", "offset_on_fm", ">", "0", ")", ".", "all", "(", "axis", "=", "2", ")", "\n", "# (h, w, #gt_boxes, ), boolean", "\n", "#   valid mask", "\n", "offset_valid", "=", "np", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ",", "boxes_cnt", ")", ")", "\n", "offset_valid", "[", "\n", "y_coords_on_fm", ",", "\n", "x_coords_on_fm", ",", ":", "]", "=", "is_in_boxes", "#& is_in_layer  # xy[:, 0], xy[:, 1] reduce dim by 1 to match is_in_boxes.shape & is_in_layer.shape", "\n", "offset_valid", "[", ":", ",", ":", ",", "0", "]", "=", "0", "# h x w x boxes_cnt", "\n", "\n", "# (h, w), boolean", "\n", "#   index of pixel on feature map", "\n", "#     used for indexing on gt_boxes, cls", "\n", "#   if not match any box, fall on dummy box at index 0", "\n", "#   if conflict, choose box with smaller index", "\n", "#   P.S. boxes already ordered by box's area", "\n", "hit_gt_ind", "=", "np", ".", "argmax", "(", "offset_valid", ",", "axis", "=", "2", ")", "\n", "\n", "# (h, w, 4-d_box)", "\n", "#   gt_boxes", "\n", "gt_boxes_res", "=", "torch", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ",", "4", ")", ")", "\n", "gt_boxes_res", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "=", "gt_boxes", "[", "\n", "hit_gt_ind", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", ",", ":", "4", "]", "# gt_boxes: (#boxes, 5)", "\n", "gt_boxes_res", "=", "gt_boxes_res", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# gt_boxes_res_list.append(gt_boxes_res.reshape(-1, 4))", "\n", "\n", "# (h, w, 1-d_cls_score)", "\n", "cls_res", "=", "torch", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ")", ")", "\n", "cls_res", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "=", "cls", "[", "\n", "hit_gt_ind", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "]", "\n", "cls_res", "=", "cls_res", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# (h, w, 1-d_centerness)", "\n", "center_res", "=", "torch", ".", "zeros", "(", "(", "fm_height", ",", "fm_width", ")", ")", "\n", "center_res", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "=", "center", "[", "\n", "fm_offset", "+", "y_coords_on_fm", "*", "stride", ",", "fm_offset", "+", "\n", "x_coords_on_fm", "*", "stride", ",", "hit_gt_ind", "[", "y_coords_on_fm", ",", "x_coords_on_fm", "]", "]", "\n", "center_res", "=", "center_res", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "return", "cls_res", ",", "center_res", ",", "gt_boxes_res", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame": [[13, 85], ["isinstance", "matplotlib.pause", "matplotlib.draw", "PIL.Image.fromarray", "matplotlib.figure", "matplotlib.axis", "plt.figure.tight_layout", "matplotlib.imshow", "fig_dict[].set_data", "fig_dict[].get_size", "isinstance", "isinstance", "enumerate", "zip", "fig_dict[].axes.legend", "list", "patch_dict[].append", "fig_dict[].axes.add_patch", "patch.set_xy", "patch.set_width", "patch.set_height", "matplotlib.CSS4_COLORS.keys", "matplotlib.Rectangle", "len", "len"], "function", ["None"], ["def", "show_frame", "(", "image", ",", "\n", "boxes", "=", "None", ",", "\n", "fig_n", "=", "1", ",", "\n", "pause", "=", "0.001", ",", "\n", "linewidth", "=", "3", ",", "\n", "cmap", "=", "None", ",", "\n", "colors", "=", "None", ",", "\n", "legends", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Visualize an image w/o drawing rectangle(s).\n    \n    Args:\n        image (numpy.ndarray or PIL.Image): Image to show.\n        boxes (numpy.array or a list of numpy.ndarray, optional): A 4 dimensional array\n            specifying rectangle [left, top, width, height] to draw, or a list of arrays\n            representing multiple rectangles. Default is ``None``.\n        fig_n (integer, optional): Figure ID. Default is 1.\n        pause (float, optional): Time delay for the plot. Default is 0.001 second.\n        linewidth (int, optional): Thickness for drawing the rectangle. Default is 3 pixels.\n        cmap (string): Color map. Default is None.\n        color (tuple): Color of drawed rectanlge. Default is None.\n    \"\"\"", "\n", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "image", "=", "Image", ".", "fromarray", "(", "image", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "if", "not", "fig_n", "in", "fig_dict", "or", "fig_dict", "[", "fig_n", "]", ".", "get_size", "(", ")", "!=", "image", ".", "size", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "fig_n", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig_dict", "[", "fig_n", "]", "=", "plt", ".", "imshow", "(", "image", ",", "cmap", "=", "cmap", ")", "\n", "", "else", ":", "\n", "        ", "fig_dict", "[", "fig_n", "]", ".", "set_data", "(", "image", ")", "\n", "\n", "", "if", "boxes", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "boxes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "boxes", "=", "[", "boxes", "]", "\n", "\n", "", "if", "colors", "is", "None", ":", "\n", "            ", "colors", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'m'", ",", "'y'", "]", "+", "list", "(", "mcolors", ".", "CSS4_COLORS", ".", "keys", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "colors", ",", "str", ")", ":", "\n", "            ", "colors", "=", "[", "colors", "]", "\n", "\n", "", "if", "not", "fig_n", "in", "patch_dict", ":", "\n", "            ", "patch_dict", "[", "fig_n", "]", "=", "[", "]", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "                ", "patch_dict", "[", "fig_n", "]", ".", "append", "(", "\n", "patches", ".", "Rectangle", "(", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ")", ",", "\n", "box", "[", "2", "]", ",", "\n", "box", "[", "3", "]", ",", "\n", "linewidth", "=", "linewidth", ",", "\n", "edgecolor", "=", "colors", "[", "i", "%", "len", "(", "colors", ")", "]", ",", "\n", "facecolor", "=", "'none'", ",", "\n", "alpha", "=", "0.7", "if", "len", "(", "boxes", ")", ">", "1", "else", "1.0", ")", ")", "\n", "", "for", "patch", "in", "patch_dict", "[", "fig_n", "]", ":", "\n", "                ", "fig_dict", "[", "fig_n", "]", ".", "axes", ".", "add_patch", "(", "patch", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "patch", ",", "box", "in", "zip", "(", "patch_dict", "[", "fig_n", "]", ",", "boxes", ")", ":", "\n", "                ", "patch", ".", "set_xy", "(", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ")", ")", "\n", "patch", ".", "set_width", "(", "box", "[", "2", "]", ")", "\n", "patch", ".", "set_height", "(", "box", "[", "3", "]", ")", "\n", "\n", "", "", "if", "legends", "is", "not", "None", ":", "\n", "            ", "fig_dict", "[", "fig_n", "]", ".", "axes", ".", "legend", "(", "patch_dict", "[", "fig_n", "]", ",", "\n", "legends", ",", "\n", "loc", "=", "1", ",", "\n", "prop", "=", "{", "'size'", ":", "8", "}", ",", "\n", "fancybox", "=", "True", ",", "\n", "framealpha", "=", "0.5", ")", "\n", "\n", "", "", "plt", ".", "pause", "(", "pause", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.center_error": [[7, 21], ["numpy.sqrt", "numpy.sum", "numpy.power"], "function", ["None"], ["def", "center_error", "(", "rects1", ",", "rects2", ")", ":", "\n", "    ", "r\"\"\"Center error.\n\n    Args:\n        rects1 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        rects2 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n    \"\"\"", "\n", "centers1", "=", "rects1", "[", "...", ",", ":", "2", "]", "+", "(", "rects1", "[", "...", ",", "2", ":", "]", "-", "1", ")", "/", "2", "\n", "centers2", "=", "rects2", "[", "...", ",", ":", "2", "]", "+", "(", "rects2", "[", "...", ",", "2", ":", "]", "-", "1", ")", "/", "2", "\n", "errors", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "centers1", "-", "centers2", ",", "2", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.normalized_center_error": [[23, 40], ["numpy.sqrt", "numpy.sum", "numpy.power", "numpy.maximum", "numpy.array"], "function", ["None"], ["", "def", "normalized_center_error", "(", "rects1", ",", "rects2", ")", ":", "\n", "    ", "r\"\"\"Center error normalized by the size of ground truth.\n\n    Args:\n        rects1 (numpy.ndarray): prediction box. An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        rects2 (numpy.ndarray): groudn truth box. An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n    \"\"\"", "\n", "centers1", "=", "rects1", "[", "...", ",", ":", "2", "]", "+", "(", "rects1", "[", "...", ",", "2", ":", "]", "-", "1", ")", "/", "2", "\n", "centers2", "=", "rects2", "[", "...", ",", ":", "2", "]", "+", "(", "rects2", "[", "...", ",", "2", ":", "]", "-", "1", ")", "/", "2", "\n", "errors", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "sum", "(", "np", ".", "power", "(", "(", "centers1", "-", "centers2", ")", "/", "\n", "np", ".", "maximum", "(", "np", ".", "array", "(", "[", "[", "1.", ",", "1.", "]", "]", ")", ",", "rects2", "[", ":", ",", "2", ":", "]", ")", ",", "2", ")", ",", "\n", "axis", "=", "-", "1", ")", ")", "\n", "\n", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.rect_iou": [[42, 78], ["metrics._intersection", "numpy.prod", "numpy.prod", "numpy.prod", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics._intersection"], ["", "def", "rect_iou", "(", "rects1", ",", "rects2", ",", "bound", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Intersection over union.\n\n    Args:\n        rects1 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        rects2 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        bound (numpy.ndarray): A 4 dimensional array, denotes the bound\n            (min_left, min_top, max_width, max_height) for ``rects1`` and ``rects2``.\n    \"\"\"", "\n", "assert", "rects1", ".", "shape", "==", "rects2", ".", "shape", "\n", "if", "bound", "is", "not", "None", ":", "\n", "# bounded rects1", "\n", "        ", "rects1", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "rects1", "[", ":", ",", "0", "]", ",", "0", ",", "bound", "[", "0", "]", ")", "\n", "rects1", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "rects1", "[", ":", ",", "1", "]", ",", "0", ",", "bound", "[", "1", "]", ")", "\n", "rects1", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "rects1", "[", ":", ",", "2", "]", ",", "0", ",", "bound", "[", "0", "]", "-", "rects1", "[", ":", ",", "0", "]", ")", "\n", "rects1", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "rects1", "[", ":", ",", "3", "]", ",", "0", ",", "bound", "[", "1", "]", "-", "rects1", "[", ":", ",", "1", "]", ")", "\n", "# bounded rects2", "\n", "rects2", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "rects2", "[", ":", ",", "0", "]", ",", "0", ",", "bound", "[", "0", "]", ")", "\n", "rects2", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "rects2", "[", ":", ",", "1", "]", ",", "0", ",", "bound", "[", "1", "]", ")", "\n", "rects2", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "rects2", "[", ":", ",", "2", "]", ",", "0", ",", "bound", "[", "0", "]", "-", "rects2", "[", ":", ",", "0", "]", ")", "\n", "rects2", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "rects2", "[", ":", ",", "3", "]", ",", "0", ",", "bound", "[", "1", "]", "-", "rects2", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "rects_inter", "=", "_intersection", "(", "rects1", ",", "rects2", ")", "\n", "areas_inter", "=", "np", ".", "prod", "(", "rects_inter", "[", "...", ",", "2", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "areas1", "=", "np", ".", "prod", "(", "rects1", "[", "...", ",", "2", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "areas2", "=", "np", ".", "prod", "(", "rects2", "[", "...", ",", "2", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "areas_union", "=", "areas1", "+", "areas2", "-", "areas_inter", "\n", "\n", "eps", "=", "np", ".", "finfo", "(", "float", ")", ".", "eps", "\n", "ious", "=", "areas_inter", "/", "(", "areas_union", "+", "eps", ")", "\n", "ious", "=", "np", ".", "clip", "(", "ious", ",", "0.0", ",", "1.0", ")", "\n", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics._intersection": [[80, 101], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.stack"], "function", ["None"], ["", "def", "_intersection", "(", "rects1", ",", "rects2", ")", ":", "\n", "    ", "r\"\"\"Rectangle intersection.\n\n    Args:\n        rects1 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        rects2 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n    \"\"\"", "\n", "assert", "rects1", ".", "shape", "==", "rects2", ".", "shape", "\n", "x1", "=", "np", ".", "maximum", "(", "rects1", "[", "...", ",", "0", "]", ",", "rects2", "[", "...", ",", "0", "]", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "rects1", "[", "...", ",", "1", "]", ",", "rects2", "[", "...", ",", "1", "]", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "rects1", "[", "...", ",", "0", "]", "+", "rects1", "[", "...", ",", "2", "]", ",", "\n", "rects2", "[", "...", ",", "0", "]", "+", "rects2", "[", "...", ",", "2", "]", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "rects1", "[", "...", ",", "1", "]", "+", "rects1", "[", "...", ",", "3", "]", ",", "\n", "rects2", "[", "...", ",", "1", "]", "+", "rects2", "[", "...", ",", "3", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "x2", "-", "x1", ",", "0", ")", "\n", "h", "=", "np", ".", "maximum", "(", "y2", "-", "y1", ",", "0", ")", "\n", "\n", "return", "np", ".", "stack", "(", "[", "x1", ",", "y1", ",", "w", ",", "h", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.poly_iou": [[103, 138], ["metrics._to_polygon", "metrics._to_polygon", "zip", "numpy.clip", "numpy.array", "numpy.array", "len", "len", "shapely.geometry.box", "numpy.finfo", "np.clip.append", "p.intersection", "p.intersection", "poly1.intersection", "poly1.union"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics._to_polygon", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics._to_polygon"], ["", "def", "poly_iou", "(", "polys1", ",", "polys2", ",", "bound", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Intersection over union of polygons.\n\n    Args:\n        polys1 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height); or an N x 8 numpy array, each line represent\n            the coordinates (x1, y1, x2, y2, x3, y3, x4, y4) of 4 corners.\n        polys2 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height); or an N x 8 numpy array, each line represent\n            the coordinates (x1, y1, x2, y2, x3, y3, x4, y4) of 4 corners.\n        bound (numpy.ndarray, optional): A 2 dimensional array, denotes the image bound\n            (width, height) for ``rects1`` and ``rects2``.\n    \"\"\"", "\n", "assert", "polys1", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "if", "polys1", ".", "ndim", "==", "1", ":", "\n", "        ", "polys1", "=", "np", ".", "array", "(", "[", "polys1", "]", ")", "\n", "polys2", "=", "np", ".", "array", "(", "[", "polys2", "]", ")", "\n", "", "assert", "len", "(", "polys1", ")", "==", "len", "(", "polys2", ")", "\n", "\n", "polys1", "=", "_to_polygon", "(", "polys1", ")", "\n", "polys2", "=", "_to_polygon", "(", "polys2", ")", "\n", "if", "bound", "is", "not", "None", ":", "\n", "        ", "bound", "=", "box", "(", "0", ",", "0", ",", "bound", "[", "0", "]", ",", "bound", "[", "1", "]", ")", "\n", "polys1", "=", "[", "p", ".", "intersection", "(", "bound", ")", "for", "p", "in", "polys1", "]", "\n", "polys2", "=", "[", "p", ".", "intersection", "(", "bound", ")", "for", "p", "in", "polys2", "]", "\n", "\n", "", "eps", "=", "np", ".", "finfo", "(", "float", ")", ".", "eps", "\n", "ious", "=", "[", "]", "\n", "for", "poly1", ",", "poly2", "in", "zip", "(", "polys1", ",", "polys2", ")", ":", "\n", "        ", "area_inter", "=", "poly1", ".", "intersection", "(", "poly2", ")", ".", "area", "\n", "area_union", "=", "poly1", ".", "union", "(", "poly2", ")", ".", "area", "\n", "ious", ".", "append", "(", "area_inter", "/", "(", "area_union", "+", "eps", ")", ")", "\n", "", "ious", "=", "np", ".", "clip", "(", "ious", ",", "0.0", ",", "1.0", ")", "\n", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics._to_polygon": [[140, 159], ["metrics._to_polygon.to_polygon"], "function", ["None"], ["", "def", "_to_polygon", "(", "polys", ")", ":", "\n", "    ", "r\"\"\"Convert 4 or 8 dimensional array to Polygons\n\n    Args:\n        polys (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height); or an N x 8 numpy array, each line represent\n            the coordinates (x1, y1, x2, y2, x3, y3, x4, y4) of 4 corners.\n    \"\"\"", "\n", "def", "to_polygon", "(", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "in", "[", "4", ",", "8", "]", "\n", "if", "len", "(", "x", ")", "==", "4", ":", "\n", "            ", "return", "box", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "0", "]", "+", "x", "[", "2", "]", ",", "x", "[", "1", "]", "+", "x", "[", "3", "]", ")", "\n", "", "elif", "len", "(", "x", ")", "==", "8", ":", "\n", "            ", "return", "Polygon", "(", "[", "(", "x", "[", "2", "*", "i", "]", ",", "x", "[", "2", "*", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "\n", "", "", "if", "polys", ".", "ndim", "==", "1", ":", "\n", "        ", "return", "to_polygon", "(", "polys", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "to_polygon", "(", "t", ")", "for", "t", "in", "polys", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.download": [[10, 18], ["wget.download"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.download"], ["def", "download", "(", "url", ",", "filename", ")", ":", "\n", "    ", "r\"\"\"Download file from the internet.\n    \n    Args:\n        url (string): URL of the internet file.\n        filename (string): Path to store the downloaded file.\n    \"\"\"", "\n", "return", "wget", ".", "download", "(", "url", ",", "out", "=", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.extract": [[20, 36], ["Exception", "os.path.splitext", "os.path.isdir", "os.makedirs", "zipfile.ZipFile", "z.extractall", "os.path.splitext"], "function", ["None"], ["", "def", "extract", "(", "filename", ",", "extract_dir", ")", ":", "\n", "    ", "r\"\"\"Extract zip file.\n    \n    Args:\n        filename (string): Path of the zip file.\n        extract_dir (string): Directory to store the extracted results.\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "1", "]", "==", "'.zip'", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "extract_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "extract_dir", ")", "\n", "", "with", "zipfile", ".", "ZipFile", "(", "filename", ")", "as", "z", ":", "\n", "            ", "z", ".", "extractall", "(", "extract_dir", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'Unsupport extension {} of the compressed file {}.'", ".", "format", "(", "\n", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "1", "]", ")", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.compress": [[38, 46], ["shutil.make_archive"], "function", ["None"], ["", "", "def", "compress", "(", "dirname", ",", "save_file", ")", ":", "\n", "    ", "\"\"\"Compress a folder to a zip file.\n    \n    Arguments:\n        dirname {string} -- Directory of all files to be compressed.\n        save_file {string} -- Path to store the zip file.\n    \"\"\"", "\n", "shutil", ".", "make_archive", "(", "save_file", ",", "'zip'", ",", "dirname", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_failures": [[16, 30], ["len", "zip", "range", "len", "len"], "function", ["None"], ["def", "calculate_failures", "(", "trajectory", ")", ":", "\n", "    ", "\"\"\" Calculate number of failures\n    Args:\n        trajectory: list of bbox\n    Returns:\n        num_failures: number of failures\n        failures: failures point in trajectory, start with 0\n    \"\"\"", "\n", "failures", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "zip", "(", "range", "(", "len", "(", "trajectory", ")", ")", ",", "trajectory", ")", "\n", "if", "len", "(", "x", ")", "==", "1", "and", "x", "[", "0", "]", "==", "2", "\n", "]", "\n", "num_failures", "=", "len", "(", "failures", ")", "\n", "return", "num_failures", ",", "failures", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_accuracy": [[32, 71], ["min", "region.vot_overlap_traj", "range", "len", "len", "len", "numpy.nanmean", "len", "range", "len", "len", "len"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "pred_trajectory", ",", "\n", "gt_trajectory", ",", "\n", "burnin", "=", "0", ",", "\n", "ignore_unknown", "=", "True", ",", "\n", "bound", "=", "None", ")", ":", "\n", "    ", "\"\"\"Caculate accuracy socre as average overlap over the entire sequence\n    Args:\n        trajectory: list of bbox\n        gt_trajectory: list of bbox\n        burnin: number of frames that have to be ignored after the failure\n        ignore_unknown: ignore frames where the overlap is unknown\n        bound: bounding region\n    Return:\n        acc: average overlap\n        overlaps: per frame overlaps\n    \"\"\"", "\n", "pred_trajectory_", "=", "pred_trajectory", "\n", "if", "not", "ignore_unknown", ":", "\n", "        ", "unkown", "=", "[", "len", "(", "x", ")", "==", "1", "and", "x", "[", "0", "]", "==", "0", "for", "x", "in", "pred_trajectory", "]", "\n", "\n", "", "if", "burnin", ">", "0", ":", "\n", "        ", "pred_trajectory_", "=", "pred_trajectory", "[", ":", "]", "\n", "mask", "=", "[", "len", "(", "x", ")", "==", "1", "and", "x", "[", "0", "]", "==", "1", "for", "x", "in", "pred_trajectory", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mask", ")", ")", ":", "\n", "            ", "if", "mask", "[", "i", "]", ":", "\n", "                ", "for", "j", "in", "range", "(", "burnin", ")", ":", "\n", "                    ", "if", "i", "+", "j", "<", "len", "(", "mask", ")", ":", "\n", "                        ", "pred_trajectory_", "[", "i", "+", "j", "]", "=", "[", "0", "]", "\n", "", "", "", "", "", "min_len", "=", "min", "(", "len", "(", "pred_trajectory_", ")", ",", "len", "(", "gt_trajectory", ")", ")", "\n", "overlaps", "=", "region", ".", "vot_overlap_traj", "(", "pred_trajectory_", "[", ":", "min_len", "]", ",", "\n", "gt_trajectory", "[", ":", "min_len", "]", ",", "bound", ")", "\n", "\n", "if", "not", "ignore_unknown", ":", "\n", "        ", "overlaps", "=", "[", "u", "if", "u", "else", "0", "for", "u", "in", "unkown", "]", "\n", "\n", "", "acc", "=", "0", "\n", "if", "len", "(", "overlaps", ")", ">", "0", ":", "\n", "        ", "acc", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "", "return", "acc", ",", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.overlap_ratio": [[73, 95], ["numba.jit", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum"], "function", ["None"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "overlap_ratio", "(", "rect1", ",", "rect2", ")", ":", "\n", "    ", "'''Compute overlap ratio between two rects\n    Args\n        rect:2d array of N x [x,y,w,h]\n    Return:\n        iou\n    '''", "\n", "# if rect1.ndim==1:", "\n", "#     rect1 = rect1[np.newaxis, :]", "\n", "# if rect2.ndim==1:", "\n", "#     rect2 = rect2[np.newaxis, :]", "\n", "left", "=", "np", ".", "maximum", "(", "rect1", "[", ":", ",", "0", "]", ",", "rect2", "[", ":", ",", "0", "]", ")", "\n", "right", "=", "np", ".", "minimum", "(", "rect1", "[", ":", ",", "0", "]", "+", "rect1", "[", ":", ",", "2", "]", ",", "rect2", "[", ":", ",", "0", "]", "+", "rect2", "[", ":", ",", "2", "]", ")", "\n", "top", "=", "np", ".", "maximum", "(", "rect1", "[", ":", ",", "1", "]", ",", "rect2", "[", ":", ",", "1", "]", ")", "\n", "bottom", "=", "np", ".", "minimum", "(", "rect1", "[", ":", ",", "1", "]", "+", "rect1", "[", ":", ",", "3", "]", ",", "rect2", "[", ":", ",", "1", "]", "+", "rect2", "[", ":", ",", "3", "]", ")", "\n", "\n", "intersect", "=", "np", ".", "maximum", "(", "0", ",", "right", "-", "left", ")", "*", "np", ".", "maximum", "(", "0", ",", "bottom", "-", "top", ")", "\n", "union", "=", "rect1", "[", ":", ",", "2", "]", "*", "rect1", "[", ":", ",", "3", "]", "+", "rect2", "[", ":", ",", "2", "]", "*", "rect2", "[", ":", ",", "3", "]", "-", "intersect", "\n", "iou", "=", "intersect", "/", "union", "\n", "iou", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "1", ",", "iou", ")", ",", "0", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.success_overlap": [[97, 107], ["numba.jit", "numpy.arange", "numpy.zeros", "statistics.overlap_ratio", "range", "len", "numpy.ones", "numpy.sum", "len", "len", "numpy.sum", "float"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.overlap_ratio"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "success_overlap", "(", "gt_bb", ",", "result_bb", ",", "n_frame", ")", ":", "\n", "    ", "thresholds_overlap", "=", "np", ".", "arange", "(", "0", ",", "1.05", ",", "0.05", ")", "\n", "success", "=", "np", ".", "zeros", "(", "len", "(", "thresholds_overlap", ")", ")", "\n", "iou", "=", "np", ".", "ones", "(", "len", "(", "gt_bb", ")", ")", "*", "(", "-", "1", ")", "\n", "mask", "=", "np", ".", "sum", "(", "gt_bb", ">", "0", ",", "axis", "=", "1", ")", "==", "4", "\n", "iou", "[", "mask", "]", "=", "overlap_ratio", "(", "gt_bb", "[", "mask", "]", ",", "result_bb", "[", "mask", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "thresholds_overlap", ")", ")", ":", "\n", "        ", "success", "[", "i", "]", "=", "np", ".", "sum", "(", "iou", ">", "thresholds_overlap", "[", "i", "]", ")", "/", "float", "(", "n_frame", ")", "\n", "", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.success_error": [[109, 120], ["numba.jit", "numpy.zeros", "numpy.sqrt", "range", "len", "numpy.ones", "numpy.sum", "numpy.sum", "len", "len", "numpy.power", "numpy.sum", "float"], "function", ["None"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "success_error", "(", "gt_center", ",", "result_center", ",", "thresholds", ",", "n_frame", ")", ":", "\n", "# n_frame = len(gt_center)", "\n", "    ", "success", "=", "np", ".", "zeros", "(", "len", "(", "thresholds", ")", ")", "\n", "dist", "=", "np", ".", "ones", "(", "len", "(", "gt_center", ")", ")", "*", "(", "-", "1", ")", "\n", "mask", "=", "np", ".", "sum", "(", "gt_center", ">", "0", ",", "axis", "=", "1", ")", "==", "2", "\n", "dist", "[", "mask", "]", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "sum", "(", "np", ".", "power", "(", "gt_center", "[", "mask", "]", "-", "result_center", "[", "mask", "]", ",", "2", ")", ",", "axis", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "        ", "success", "[", "i", "]", "=", "np", ".", "sum", "(", "dist", "<=", "thresholds", "[", "i", "]", ")", "/", "float", "(", "n_frame", ")", "\n", "", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.determine_thresholds": [[122, 138], ["numba.jit", "numpy.sort", "numpy.floor", "numpy.floor().astype", "numpy.zeros", "len", "numpy.floor", "numpy.logical_not", "numpy.isnan", "numpy.linspace", "len"], "function", ["None"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "determine_thresholds", "(", "scores", ",", "resolution", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        scores: 1d array of score\n    \"\"\"", "\n", "scores", "=", "np", ".", "sort", "(", "scores", "[", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "scores", ")", ")", "]", ")", "\n", "delta", "=", "np", ".", "floor", "(", "len", "(", "scores", ")", "/", "(", "resolution", "-", "2", ")", ")", "\n", "idxs", "=", "np", ".", "floor", "(", "\n", "np", ".", "linspace", "(", "delta", "-", "1", ",", "\n", "len", "(", "scores", ")", "-", "delta", ",", "resolution", "-", "2", ")", "+", "0.5", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "thresholds", "=", "np", ".", "zeros", "(", "(", "resolution", ")", ")", "\n", "thresholds", "[", "0", "]", "=", "-", "np", ".", "inf", "\n", "thresholds", "[", "-", "1", "]", "=", "np", ".", "inf", "\n", "thresholds", "[", "1", ":", "-", "1", "]", "=", "scores", "[", "idxs", "]", "\n", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_f1": [[140, 161], ["numba.jit", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "numpy.isnan", "numpy.isnan", "numpy.sum", "numpy.mean", "numpy.sum"], "function", ["None"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "calculate_f1", "(", "overlaps", ",", "score", ",", "bound", ",", "thresholds", ",", "N", ")", ":", "\n", "    ", "overlaps", "=", "np", ".", "array", "(", "overlaps", ")", "\n", "overlaps", "[", "np", ".", "isnan", "(", "overlaps", ")", "]", "=", "0", "\n", "score", "=", "np", ".", "array", "(", "score", ")", "\n", "score", "[", "np", ".", "isnan", "(", "score", ")", "]", "=", "0", "\n", "precision", "=", "np", ".", "zeros", "(", "len", "(", "thresholds", ")", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "len", "(", "thresholds", ")", ")", "\n", "for", "i", ",", "th", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "if", "th", "==", "-", "np", ".", "inf", ":", "\n", "            ", "idx", "=", "score", ">", "0", "\n", "", "else", ":", "\n", "            ", "idx", "=", "score", ">=", "th", "\n", "", "if", "np", ".", "sum", "(", "idx", ")", "==", "0", ":", "\n", "            ", "precision", "[", "i", "]", "=", "1", "\n", "recall", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "precision", "[", "i", "]", "=", "np", ".", "mean", "(", "overlaps", "[", "idx", "]", ")", "\n", "recall", "[", "i", "]", "=", "np", ".", "sum", "(", "overlaps", "[", "idx", "]", ")", "/", "N", "\n", "", "", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", ",", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_expected_overlap": [[164, 178], ["numpy.zeros", "range", "numpy.logical_not", "numpy.any", "numpy.isnan", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "calculate_expected_overlap", "(", "fragments", ",", "fweights", ")", ":", "\n", "    ", "max_len", "=", "fragments", ".", "shape", "[", "1", "]", "\n", "expected_overlaps", "=", "np", ".", "zeros", "(", "(", "max_len", ")", ",", "np", ".", "float32", ")", "\n", "expected_overlaps", "[", "0", "]", "=", "1", "\n", "\n", "# TODO Speed Up", "\n", "for", "i", "in", "range", "(", "1", ",", "max_len", ")", ":", "\n", "        ", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "fragments", "[", ":", ",", "i", "]", ")", ")", "\n", "if", "np", ".", "any", "(", "mask", ")", ":", "\n", "            ", "fragment", "=", "fragments", "[", "mask", ",", "1", ":", "i", "+", "1", "]", "\n", "seq_mean", "=", "np", ".", "sum", "(", "fragment", ",", "1", ")", "/", "fragment", ".", "shape", "[", "1", "]", "\n", "expected_overlaps", "[", "i", "]", "=", "np", ".", "sum", "(", "seq_mean", "*", "fweights", "[", "mask", "]", ")", "/", "np", ".", "sum", "(", "\n", "fweights", "[", "mask", "]", ")", "\n", "", "", "return", "expected_overlaps", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.determine_thresholds": [[12, 40], ["isinstance", "np.array.flatten", "np.array.sort", "numpy.ones", "numpy.floor", "numpy.linspace", "numpy.array", "len", "len", "len", "numpy.isnan"], "function", ["None"], ["module_name", ",", "module_dict", ",", "'defined in several script files'", ")", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n", "\n", "", "class", "Registry", "(", "dict", ")", ":", "\n", "    ", "r\"\"\"\n    A helper class for managing registering modules, it extends a dictionary\n    and provides a register functions.\n\n    usually declared in XXX_base.py, e.g. videoanalyst/model/backbone/backbone_base.py\n\n    used as decorator when declaring the module:\n\n    @some_registry.register\n    def foo():\n        ...\n\n    Access of module is just like using a dictionary, eg:\n        f = some_registry[\"foo_module\"]\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Registry'", "\n", "if", "len", "(", "args", ")", ">", "0", "and", "isinstance", "(", "args", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "name", ",", "*", "args", "=", "args", "\n", "self", ".", "name", "=", "name", "\n", "", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "register", "(", "self", ",", "module", ")", ":", "\n", "        ", "name", "=", "module", ".", "__name__", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optim.builder.build": [[11, 37], ["optimizer.builder.build", "grad_modifier.builder.build", "optimizer_builder.build.set_grad_modifier"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.set_grad_modifier"], ["def", "build", "(", "\n", "task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optim.builder.get_config": [[39, 53], ["yacs.config.CfgNode", "optimizer.builder.get_config", "grad_modifier.builder.get_config"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config"], ["", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier.builder.build": [[10, 31], ["module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["\n", "def", "build", "(", "\n", "task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier.builder.get_config": [[33, 43], ["yacs.config.CfgNode", "grad_modifier_base.GRAD_MODIFIERS.items", "yacs.config.CfgNode"], "function", ["None"], ["        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier.grad_modifier_base.GradModifierBase.__init__": [[20, 39], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        GradModifier, reponsible for scheduling optimizer\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            data config, including cfg for datasset / sampler\n        \n        s: List[DatasetBase]\n            collections of datasets\n        seed: int\n            seed to initialize random number generator\n            important while using multi-worker data loader\n        \"\"\"", "\n", "self", ".", "_hyper_params", "=", "self", ".", "default_hyper_params", "\n", "self", ".", "_state", "=", "dict", "(", ")", "\n", "self", ".", "_model", "=", "None", "\n", "self", ".", "_optimizer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier.grad_modifier_base.GradModifierBase.get_hps": [[40, 50], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier.grad_modifier_base.GradModifierBase.set_hps": [[51, 64], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier.grad_modifier_base.GradModifierBase.update_params": [[65, 69], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "modify_grad", "(", "self", ",", "module", ":", "nn", ".", "Module", ",", "epoch", ":", "int", ",", "iteration", ":", "int", "=", "-", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier.grad_modifier_base.GradModifierBase.modify_grad": [[69, 84], ["None"], "methods", ["None"], ["", "def", "modify_grad", "(", "self", ",", "module", ":", "nn", ".", "Module", ",", "epoch", ":", "int", ",", "iteration", ":", "int", "=", "-", "1", ")", ":", "\n", "        ", "r\"\"\"\n        Schedule the underlying optimizer/model\n        \n        Parameters\n        ----------\n        epoch : int\n            [description]\n        iteration : int\n            [description]\n        Returns\n        -------\n        Dict:\n            dict containing the schedule state\n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier_impl.dynamic_freezer.DynamicFreezer.__init__": [[25, 27], ["grad_modifier_base.GradModifierBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier_impl.dynamic_freezer.DynamicFreezer.update_params": [[28, 41], ["len", "list", "json.loads", "re.compile", "list.append"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Resolve dynamic freezing schedule\n        \"\"\"", "\n", "cfg", "=", "self", ".", "_hyper_params", "[", "\"schedule\"", "]", "\n", "if", "len", "(", "cfg", ")", ">", "0", ":", "\n", "            ", "schedule", "=", "list", "(", ")", "\n", "for", "freeze_str", "in", "cfg", ":", "\n", "                ", "mult_cfg", "=", "json", ".", "loads", "(", "freeze_str", ")", "\n", "compiled_regex", "=", "re", ".", "compile", "(", "mult_cfg", "[", "\"regex\"", "]", ")", "\n", "mult_cfg", "[", "\"compiled_regex\"", "]", "=", "compiled_regex", "\n", "schedule", ".", "append", "(", "mult_cfg", ")", "\n", "", "self", ".", "_state", "[", "\"schedule\"", "]", "=", "schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.grad_modifier_impl.dynamic_freezer.DynamicFreezer.modify_grad": [[42, 49], ["utils.freeze.apply_freeze_schedule"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.freeze.apply_freeze_schedule"], ["", "", "def", "modify_grad", "(", "self", ",", "module", ":", "nn", ".", "Module", ",", "epoch", ":", "int", ",", "iteration", ":", "int", "=", "-", "1", ")", ":", "\n", "        ", "if", "(", "iteration", "<", "0", ")", "and", "(", "\"schedule\"", "in", "self", ".", "_state", ")", ":", "\n", "# epoch-level scheduling", "\n", "            ", "apply_freeze_schedule", "(", "module", ",", "epoch", ",", "self", ".", "_state", "[", "\"schedule\"", "]", ")", "\n", "", "else", ":", "\n", "# iteration-level scheduling", "\n", "            ", "pass", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.builder.build": [[12, 30], ["module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.builder.get_config": [[32, 42], ["yacs.config.CfgNode", "optimizer_base.OPTIMIZERS.items", "yacs.config.CfgNode"], "function", ["None"], ["if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.__init__": [[36, 66], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cfg", ":", "CfgNode", ",", "model", ":", "nn", ".", "Module", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Dataset Sampler, reponsible for sampling from different dataset\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            node name: optimizer\n\n        Internal members\n        ----------------\n        _model:\n            underlying nn.Module\n        _optimizer\n            underlying optim.optimizer.optimizer_base.OptimizerBase\n        _scheduler:\n            underlying scheduler\n        _param_groups_divider: function\n            divide parameter for partial scheduling of learning rate \n            input: nn.Module \n            output: List[Dict], k-v: 'params': nn.Parameter\n        \n        \"\"\"", "\n", "self", ".", "_hyper_params", "=", "self", ".", "default_hyper_params", "\n", "self", ".", "_state", "=", "dict", "(", ")", "\n", "self", ".", "_cfg", "=", "cfg", "\n", "self", ".", "_model", "=", "model", "\n", "self", ".", "_optimizer", "=", "None", "\n", "self", ".", "_grad_modifier", "=", "None", "\n", "self", ".", "grad_scaler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.get_hps": [[67, 77], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.set_hps": [[78, 91], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.update_params": [[92, 127], ["len", "optimizer_impl.utils.lr_policy.build", "len", "optimizer_impl.utils.lr_multiply.build", "optimizer_base.OptimizerBase._state[].divide_into_param_groups", "optimizer_base.OptimizerBase._model.parameters", "loguru.logger.info", "torch.cuda.amp.GradScaler", "loguru.logger.error", "exit"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.divide_into_param_groups"], ["", "", "def", "update_params", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "# calculate & update iteration number", "\n", "self", ".", "_hyper_params", "[", "\"num_iterations\"", "]", "=", "self", ".", "_hyper_params", "[", "\n", "\"nr_image_per_epoch\"", "]", "//", "self", ".", "_hyper_params", "[", "\"minibatch\"", "]", "\n", "# lr_policy", "\n", "lr_policy_cfg", "=", "self", ".", "_hyper_params", "[", "\"lr_policy\"", "]", "\n", "if", "len", "(", "lr_policy_cfg", ")", ">", "0", ":", "\n", "            ", "lr_policy", "=", "build_lr_policy", "(", "\n", "lr_policy_cfg", ",", "max_iter", "=", "self", ".", "_hyper_params", "[", "\"num_iterations\"", "]", ")", "\n", "self", ".", "_state", "[", "\"lr_policy\"", "]", "=", "lr_policy", "\n", "# lr_multiplier", "\n", "", "lr_multiplier_cfg", "=", "self", ".", "_hyper_params", "[", "\"lr_multiplier\"", "]", "\n", "if", "len", "(", "lr_multiplier_cfg", ")", ">", "0", ":", "\n", "            ", "lr_multiplier", "=", "build_lr_multiplier", "(", "lr_multiplier_cfg", ")", "\n", "self", ".", "_state", "[", "\"lr_multiplier\"", "]", "=", "lr_multiplier", "\n", "", "if", "\"lr_multiplier\"", "in", "self", ".", "_state", ":", "\n", "            ", "params", "=", "self", ".", "_state", "[", "\"lr_multiplier\"", "]", ".", "divide_into_param_groups", "(", "\n", "self", ".", "_model", ")", "\n", "", "else", ":", "\n", "            ", "params", "=", "self", ".", "_model", ".", "parameters", "(", ")", "\n", "\n", "", "self", ".", "_state", "[", "\"params\"", "]", "=", "params", "\n", "\n", "# mix precision", "\n", "if", "self", ".", "_hyper_params", "[", "\"amp\"", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "grad_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "", "except", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "\"mix precision training is only supported from torch >=1.6\"", ")", "\n", "exit", "(", ")", "\n", "", "logger", ".", "info", "(", "\"enabel auto mix precision training\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.set_grad_modifier": [[128, 130], ["None"], "methods", ["None"], ["", "", "def", "set_grad_modifier", "(", "self", ",", "grad_modifier", ")", ":", "\n", "        ", "self", ".", "_grad_modifier", "=", "grad_modifier", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.zero_grad": [[131, 133], ["optimizer_base.OptimizerBase._optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.step": [[134, 140], ["optimizer_base.OptimizerBase.grad_scaler.step", "optimizer_base.OptimizerBase.grad_scaler.update", "optimizer_base.OptimizerBase._optimizer.step"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.step", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "grad_scaler", "is", "not", "None", ":", "\n", "            ", "self", ".", "grad_scaler", ".", "step", "(", "self", ".", "_optimizer", ")", "\n", "self", ".", "grad_scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.state_dict": [[141, 143], ["optimizer_base.OptimizerBase._optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.state_dict"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.load_state_dict": [[144, 146], ["optimizer_base.OptimizerBase._optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "_optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.schedule": [[147, 162], ["dict", "optimizer_base.OptimizerBase._state[].get_lr", "optimizer_impl.utils.lr_policy.schedule_lr", "optimizer_base.OptimizerBase._state[].multiply_lr"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.TransitionLR.get_lr", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_policy.schedule_lr", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.lr_multiply.multiply_lr"], ["", "def", "schedule", "(", "self", ",", "epoch", ":", "int", ",", "iteration", ":", "int", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        an interface for optimizer scheduling (e.g. adjust learning rate)\n        self.set_scheduler need to be called during initialization phase\n        \"\"\"", "\n", "schedule_info", "=", "dict", "(", ")", "\n", "if", "\"lr_policy\"", "in", "self", ".", "_state", ":", "\n", "            ", "lr", "=", "self", ".", "_state", "[", "\"lr_policy\"", "]", ".", "get_lr", "(", "epoch", ",", "iteration", ")", "\n", "schedule_lr", "(", "self", ".", "_optimizer", ",", "lr", ")", "\n", "schedule_info", "[", "\"lr\"", "]", "=", "lr", "\n", "# apply learning rate multiplication", "\n", "", "if", "\"lr_multiplier\"", "in", "self", ".", "_state", ":", "\n", "            ", "self", ".", "_state", "[", "\"lr_multiplier\"", "]", ".", "multiply_lr", "(", "self", ".", "_optimizer", ")", "\n", "\n", "", "return", "schedule_info", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.modify_grad": [[163, 166], ["optimizer_base.OptimizerBase._grad_modifier.modify_grad"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.modify_grad"], ["", "def", "modify_grad", "(", "self", ",", "epoch", ",", "iteration", "=", "-", "1", ")", ":", "\n", "        ", "if", "self", ".", "_grad_modifier", "is", "not", "None", ":", "\n", "            ", "self", ".", "_grad_modifier", ".", "modify_grad", "(", "self", ".", "_model", ",", "epoch", ",", "iteration", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer_impl.adamw.AdamW.__init__": [[25, 27], ["optimizer_base.OptimizerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ":", "CfgNode", ",", "model", ":", "torch", ".", "nn", ".", "Module", ")", "->", "None", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer_impl.adamw.AdamW.update_params": [[28, 36], ["super().update_params", "adamw.AdamW.extra_hyper_params.keys", "torch.optim.AdamW"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "update_params", "(", ")", "\n", "params", "=", "self", ".", "_state", "[", "\"params\"", "]", "\n", "kwargs", "=", "self", ".", "_hyper_params", "\n", "valid_keys", "=", "self", ".", "extra_hyper_params", ".", "keys", "(", ")", "\n", "kwargs", "=", "{", "k", ":", "kwargs", "[", "k", "]", "for", "k", "in", "valid_keys", "}", "\n", "# self._optimizer = optim.SGD(params, **kwargs)", "\n", "self", ".", "_optimizer", "=", "optim", ".", "AdamW", "(", "params", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer_impl.sgd.SGD.__init__": [[25, 27], ["optimizer_base.OptimizerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ":", "CfgNode", ",", "model", ":", "torch", ".", "nn", ".", "Module", ")", "->", "None", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer_impl.sgd.SGD.update_params": [[28, 35], ["super().update_params", "sgd.SGD.extra_hyper_params.keys", "torch.optim.SGD"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "update_params", "(", ")", "\n", "params", "=", "self", ".", "_state", "[", "\"params\"", "]", "\n", "kwargs", "=", "self", ".", "_hyper_params", "\n", "valid_keys", "=", "self", ".", "extra_hyper_params", ".", "keys", "(", ")", "\n", "kwargs", "=", "{", "k", ":", "kwargs", "[", "k", "]", "for", "k", "in", "valid_keys", "}", "\n", "self", ".", "_optimizer", "=", "optim", ".", "SGD", "(", "params", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.model.module_base.ModuleBase.__init__": [[23, 26], ["torch.nn.Module.__init__", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ModuleBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_hyper_params", "=", "deepcopy", "(", "self", ".", "default_hyper_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.model.module_base.ModuleBase.get_hps": [[27, 37], ["dict"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "dict", "(", ")", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.model.module_base.ModuleBase.set_hps": [[38, 51], ["dict"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "dict", "(", ")", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.model.module_base.ModuleBase.update_params": [[52, 63], ["module_base.ModuleBase._hyper_params.get", "torch.load", "module_base.ModuleBase.load_model_param", "loguru.logger.info", "torch.device", "videoanalyst.utils.md5sum"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.model.module_base.ModuleBase.load_model_param", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.md5sum"], ["", "", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "model_file", "=", "self", ".", "_hyper_params", ".", "get", "(", "\"pretrain_model_path\"", ",", "\"\"", ")", "\n", "if", "model_file", "!=", "\"\"", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "if", "\"model_state_dict\"", "in", "state_dict", ":", "\n", "                ", "state_dict", "=", "state_dict", "[", "\"model_state_dict\"", "]", "\n", "", "self", ".", "load_model_param", "(", "state_dict", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load pretrained {} parameters from: {} whose md5sum is {}\"", ".", "\n", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "model_file", ",", "md5sum", "(", "model_file", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.model.module_base.ModuleBase.load_model_param": [[64, 86], ["module_base.ModuleBase.state_dict", "list", "module_base.ModuleBase.load_state_dict", "checkpoint_state_dict.keys", "utils.load_state.filter_reused_missing_keys", "loguru.logger.warning", "tuple", "tuple", "loguru.logger.warning", "utils.load_state.get_unexpected_parameters_message", "loguru.logger.warning", "checkpoint_state_dict.pop", "utils.load_state.get_missing_parameters_message"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.state_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.load_state_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.filter_reused_missing_keys", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.get_unexpected_parameters_message", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.load_state.get_missing_parameters_message"], ["", "", "def", "load_model_param", "(", "self", ",", "checkpoint_state_dict", ")", ":", "\n", "        ", "model_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "k", "in", "list", "(", "checkpoint_state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "k", "in", "model_state_dict", ":", "\n", "                ", "shape_model", "=", "tuple", "(", "model_state_dict", "[", "k", "]", ".", "shape", ")", "\n", "shape_checkpoint", "=", "tuple", "(", "checkpoint_state_dict", "[", "k", "]", ".", "shape", ")", "\n", "if", "shape_model", "!=", "shape_checkpoint", ":", "\n", "                    ", "logger", ".", "warning", "(", "\n", "\"'{}' has shape {} in the checkpoint but {} in the \"", "\n", "\"model! Skipped.\"", ".", "format", "(", "k", ",", "shape_checkpoint", ",", "\n", "shape_model", ")", ")", "\n", "checkpoint_state_dict", ".", "pop", "(", "k", ")", "\n", "# pyre-ignore", "\n", "", "", "", "incompatible", "=", "self", ".", "load_state_dict", "(", "checkpoint_state_dict", ",", "strict", "=", "False", ")", "\n", "if", "incompatible", ".", "missing_keys", ":", "\n", "            ", "missing_keys", "=", "filter_reused_missing_keys", "(", "self", ",", "\n", "incompatible", ".", "missing_keys", ")", "\n", "if", "missing_keys", ":", "\n", "                ", "logger", ".", "warning", "(", "get_missing_parameters_message", "(", "missing_keys", ")", ")", "\n", "", "", "if", "incompatible", ".", "unexpected_keys", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "get_unexpected_parameters_message", "(", "incompatible", ".", "unexpected_keys", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.model.builder.build": [[17, 65], ["backbone.builder.build", "neck.builder.build", "task_head.builder.build", "loss.builder.build", "task_model.builder.build", "loguru.logger.warning", "sync_batchnorm.convert_model", "backbone.builder.build", "backbone.builder.build", "backbone.builder.build", "task_head.builder.build", "loss.builder.build", "task_model.builder.build_sat_model", "loguru.logger.error", "exit"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.task_model.builder.build_sat_model"], ["\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.model.builder.get_config": [[67, 98], ["yacs.config.CfgNode", "backbone.builder.get_config", "neck.builder.get_config", "task_head.builder.get_config", "loss.builder.get_config", "task_model.builder.get_config", "backbone.builder.get_config", "backbone.builder.get_config", "backbone.builder.get_config", "backbone.builder.get_config", "backbone.builder.get_config"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.task_model.builder.build": [[12, 56], ["loguru.logger.error", "exit", "task_module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "task_module.set_hps", "task_module.update_params", "loguru.logger.error", "exit"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.task_model.builder.build_sat_model": [[58, 102], ["task_module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "task_module.set_hps", "task_module.update_params", "loguru.logger.error", "exit"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.task_model.builder.get_config": [[104, 124], ["videoanalyst.model.task_model.taskmodel_base.TASK_TASKMODELS.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.__init__": [[41, 50], ["videoanalyst.model.module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "neck", ",", "head", ",", "loss", "=", "None", ")", ":", "\n", "        ", "super", "(", "SiamTrack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "basemodel", "=", "backbone", "\n", "self", ".", "neck", "=", "neck", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "trt_fea_model", "=", "None", "\n", "self", ".", "trt_track_model", "=", "None", "\n", "self", ".", "_phase", "=", "\"train\"", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.phase": [[55, 59], ["None"], "methods", ["None"], ["", "@", "phase", ".", "setter", "\n", "def", "phase", "(", "self", ",", "p", ")", ":", "\n", "        ", "assert", "p", "in", "self", ".", "support_phases", "\n", "self", ".", "_phase", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.train_forward": [[60, 82], ["sparsett_model.SiamTrack.basemodel", "sparsett_model.SiamTrack.basemodel", "sparsett_model.SiamTrack.feat_adjuster_z", "sparsett_model.SiamTrack.feat_adjuster_x", "sparsett_model.SiamTrack.neck", "sparsett_model.SiamTrack.head", "dict"], "methods", ["None"], ["", "def", "train_forward", "(", "self", ",", "training_data", ")", ":", "\n", "        ", "target_img", "=", "training_data", "[", "\"im_z\"", "]", "\n", "search_img", "=", "training_data", "[", "\"im_x\"", "]", "\n", "# backbone feature", "\n", "f_z", "=", "self", ".", "basemodel", "(", "target_img", ")", "\n", "f_x", "=", "self", ".", "basemodel", "(", "search_img", ")", "\n", "# feature adjustment", "\n", "f_z", "=", "self", ".", "feat_adjuster_z", "(", "f_z", ")", "\n", "f_x", "=", "self", ".", "feat_adjuster_x", "(", "f_x", ")", "\n", "# feature matching", "\n", "output", "=", "self", ".", "neck", "(", "f_x", ",", "f_z", ")", "\n", "# head", "\n", "cls_fc", ",", "bbox_fc", ",", "cls_conv", ",", "bbox_conv", "=", "self", ".", "head", "(", "output", ")", "\n", "predict_data", "=", "dict", "(", "\n", "cls_fc", "=", "cls_fc", ",", "\n", "bbox_fc", "=", "bbox_fc", ",", "\n", "cls_conv", "=", "cls_conv", ",", "\n", "bbox_conv", "=", "bbox_conv", "\n", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"corr_feat_output\"", "]", ":", "\n", "            ", "predict_data", "[", "\"corr_feat\"", "]", "=", "output", "\n", "", "return", "predict_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.test_forward": [[83, 99], ["sparsett_model.SiamTrack.neck.decode", "sparsett_model.SiamTrack.head", "torch.sigmoid", "torch.sigmoid", "dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.decode", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid"], ["", "def", "test_forward", "(", "self", ",", "f_x", ",", "enc_output", ",", "x_size", ")", ":", "\n", "# feature matching", "\n", "        ", "output", "=", "self", ".", "neck", ".", "decode", "(", "f_x", ",", "enc_output", ")", "\n", "# head", "\n", "cls_fc", ",", "bbox_fc", ",", "cls_conv", ",", "bbox_conv", "=", "self", ".", "head", "(", "output", ",", "x_size", ")", "\n", "# apply sigmoid", "\n", "cls_fc", "=", "torch", ".", "sigmoid", "(", "cls_fc", ")", "\n", "cls_conv", "=", "torch", ".", "sigmoid", "(", "cls_conv", ")", "\n", "# merge two cls socres", "\n", "cls_score_final", "=", "cls_fc", "+", "cls_conv", "*", "(", "1", "-", "cls_fc", ")", "\n", "# register extra output", "\n", "extra", "=", "dict", "(", ")", "# for faster inference", "\n", "# extra = {\"f_x\": f_x, \"encoder_output\": enc_output, \"decoder_output\": output}", "\n", "# output", "\n", "out_list", "=", "cls_score_final", ",", "bbox_conv", ",", "extra", "\n", "return", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.instance": [[100, 105], ["sparsett_model.SiamTrack.basemodel", "sparsett_model.SiamTrack.c_x"], "methods", ["None"], ["", "def", "instance", "(", "self", ",", "img", ")", ":", "\n", "        ", "f_z", "=", "self", ".", "basemodel", "(", "img", ")", "\n", "# template as kernel", "\n", "c_x", "=", "self", ".", "c_x", "(", "f_z", ")", "\n", "self", ".", "cf", "=", "c_x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.forward": [[106, 162], ["sparsett_model.SiamTrack.train_forward", "sparsett_model.SiamTrack.basemodel", "sparsett_model.SiamTrack.feat_adjuster_z", "sparsett_model.SiamTrack.neck.encode", "torch.cuda.amp.autocast", "sparsett_model.SiamTrack.train_forward", "sparsett_model.SiamTrack.basemodel", "sparsett_model.SiamTrack.feat_adjuster_x", "sparsett_model.SiamTrack.test_forward", "ValueError", "len", "len", "search_img.size"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.train_forward", "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.encode", "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.train_forward", "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.test_forward"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "phase", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Perform tracking process for different phases (e.g. train / init / track)\n\n        Arguments\n        ---------\n        target_img: torch.Tensor\n            target template image patch\n        search_img: torch.Tensor\n            search region image patch\n\n        Returns\n        -------\n        fcos_score_final: torch.Tensor\n            predicted score for bboxes, shape=(B, HW, 1)\n        fcos_bbox_final: torch.Tensor\n            predicted bbox in the crop, shape=(B, HW, 4)\n        fcos_cls_prob_final: torch.Tensor\n            classification score, shape=(B, HW, 1)\n        fcos_ctr_prob_final: torch.Tensor\n            center-ness score, shape=(B, HW, 1)\n        \"\"\"", "\n", "if", "phase", "is", "None", ":", "\n", "            ", "phase", "=", "self", ".", "_phase", "\n", "# used during training", "\n", "", "if", "phase", "==", "'train'", ":", "\n", "# resolve training data", "\n", "            ", "if", "self", ".", "_hyper_params", "[", "\"amp\"", "]", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                    ", "return", "self", ".", "train_forward", "(", "args", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "return", "self", ".", "train_forward", "(", "args", "[", "0", "]", ")", "\n", "\n", "# used for template feature extraction (normal mode)", "\n", "", "", "elif", "phase", "==", "'feature'", ":", "\n", "            ", "target_img", ",", "=", "args", "\n", "# backbone feature", "\n", "f_z", "=", "self", ".", "basemodel", "(", "target_img", ")", "\n", "# template as kernel", "\n", "f_z", "=", "self", ".", "feat_adjuster_z", "(", "f_z", ")", "\n", "enc_output", "=", "self", ".", "neck", ".", "encode", "(", "f_z", ")", "\n", "# output", "\n", "out_list", "=", "[", "enc_output", "]", "\n", "", "elif", "phase", "==", "'track'", ":", "\n", "            ", "assert", "len", "(", "args", ")", "==", "2", ",", "\"Illegal args length: %d\"", "%", "len", "(", "args", ")", "\n", "search_img", ",", "enc_output", "=", "args", "\n", "# backbone feature", "\n", "f_x", "=", "self", ".", "basemodel", "(", "search_img", ")", "\n", "# feature adjustment", "\n", "f_x", "=", "self", ".", "feat_adjuster_x", "(", "f_x", ")", "\n", "out_list", "=", "self", ".", "test_forward", "(", "f_x", ",", "enc_output", ",", "search_img", ".", "size", "(", "-", "1", ")", ")", "\n", "out_list", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Phase non-implemented.\"", ")", "\n", "\n", "", "return", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.update_params": [[163, 170], ["sparsett_model.SiamTrack._make_convs", "super().update_params"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack._make_convs", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Load model parameters\n        \"\"\"", "\n", "self", ".", "_make_convs", "(", ")", "\n", "# self._initialize_conv()", "\n", "super", "(", ")", ".", "update_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack._make_convs": [[171, 178], ["videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu"], "methods", ["None"], ["", "def", "_make_convs", "(", "self", ")", ":", "\n", "        ", "in_channels", "=", "self", ".", "_hyper_params", "[", "'in_channels'", "]", "\n", "mid_channels", "=", "self", ".", "_hyper_params", "[", "'mid_channels'", "]", "\n", "\n", "# feature adjustment", "\n", "self", ".", "feat_adjuster_z", "=", "conv_bn_relu", "(", "in_channels", ",", "mid_channels", ",", "kszie", "=", "1", ",", "has_relu", "=", "False", ",", "bn_eps", "=", "1e-3", ")", "\n", "self", ".", "feat_adjuster_x", "=", "conv_bn_relu", "(", "in_channels", ",", "mid_channels", ",", "kszie", "=", "1", ",", "has_relu", "=", "False", ",", "bn_eps", "=", "1e-3", ")", "\n", "# self.feat_adjuster_z = torch.nn.Identity()", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack._initialize_conv": [[181, 187], ["range", "len", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "_initialize_conv", "(", "self", ",", ")", ":", "\n", "        ", "conv_weight_std", "=", "self", ".", "_hyper_params", "[", "'conv_weight_std'", "]", "\n", "conv_list", "=", "[", "self", ".", "feat_adjuster_z", ".", "conv", ",", "self", ".", "feat_adjuster_x", ".", "conv", "]", "\n", "for", "ith", "in", "range", "(", "len", "(", "conv_list", ")", ")", ":", "\n", "            ", "conv", "=", "conv_list", "[", "ith", "]", "\n", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "conv", ".", "weight", ",", "std", "=", "conv_weight_std", ")", "# conv_weight_std=0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.set_device": [[188, 195], ["sparsett_model.SiamTrack.to", "isinstance", "torch.device", "sparsett_model.SiamTrack.loss[].to"], "methods", ["None"], ["", "", "def", "set_device", "(", "self", ",", "dev", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dev", ",", "torch", ".", "device", ")", ":", "\n", "            ", "dev", "=", "torch", ".", "device", "(", "dev", ")", "\n", "", "self", ".", "to", "(", "dev", ")", "\n", "if", "self", ".", "loss", "is", "not", "None", ":", "\n", "            ", "for", "loss_name", "in", "self", ".", "loss", ":", "\n", "                ", "self", ".", "loss", "[", "loss_name", "]", ".", "to", "(", "dev", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_block.conv_bn_relu.__init__": [[9, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channel", ",", "\n", "out_channel", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "0", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "True", ",", "\n", "groups", "=", "1", ",", "\n", "bn_eps", "=", "1e-05", ")", ":", "\n", "        ", "r\"\"\"\n        Basic block with one conv, one bn, one relu in series.\n\n        Arguments\n        ---------\n        in_channel: int\n            number of input channels\n        out_channel: int\n            number of output channels\n        stride: int\n            stride number\n        kszie: int\n            kernel size\n        pad: int\n            padding on each edge\n        has_bn: bool\n            use bn or not\n        has_relu: bool\n            use relu or not\n        bias: bool\n            conv has bias or not\n        groups: int or str\n            number of groups. To be forwarded to torch.nn.Conv2d\n        \"\"\"", "\n", "super", "(", "conv_bn_relu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "\n", "out_channel", ",", "\n", "kernel_size", "=", "kszie", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "pad", ",", "\n", "bias", "=", "bias", ",", "\n", "groups", "=", "groups", ")", "\n", "\n", "if", "has_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channel", ",", "eps", "=", "bn_eps", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "None", "\n", "\n", "", "if", "has_relu", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_block.conv_bn_relu.forward": [[63, 70], ["common_block.conv_bn_relu.conv", "common_block.conv_bn_relu.bn", "common_block.conv_bn_relu.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_block.upsample_block.__init__": [[102, 120], ["torch.Module.__init__", "common_block.conv_bn_relu", "common_block.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "h_channel", ",", "l_channel", ",", "out_channel", ")", ":", "\n", "        ", "r\"\"\"\n        h_channel:\n            channel number of high-level feature\n\n        l_channel:\n            channel number of low-level feature\n\n        out_channel:\n            channel number of output feature after fusion\n        \"\"\"", "\n", "\n", "super", "(", "upsample_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv_bn_relu", "(", "h_channel", ",", "out_channel", ",", "pad", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_adjust", "=", "conv_bn_relu", "(", "out_channel", "+", "l_channel", ",", "\n", "out_channel", ",", "\n", "pad", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_block.upsample_block.forward": [[121, 142], ["common_block.upsample_block.conv1", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "common_block.upsample_block.conv_adjust", "low_level_f.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "high_level_f", ",", "low_level_f", ")", ":", "\n", "        ", "r\"\"\"\n        :param high_level_f: torch.Tensor\n            high level feature with smaller resolution\n\n        :param low_level_f: torch.Tensor\n            low level feature with larger resolution\n\n        Returns\n        -------\n        torch.Tensor\n            feature fusion result\n        \"\"\"", "\n", "high_level_f", "=", "self", ".", "conv1", "(", "high_level_f", ")", "\n", "f_resize", "=", "F", ".", "interpolate", "(", "high_level_f", ",", "\n", "size", "=", "low_level_f", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "f_fusion", "=", "torch", ".", "cat", "(", "[", "f_resize", ",", "low_level_f", "]", ",", "1", ")", "\n", "f_adjust", "=", "self", ".", "conv_adjust", "(", "f_fusion", ")", "\n", "return", "f_adjust", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_block.projector.__init__": [[148, 155], ["torch.Module.__init__", "common_block.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ")", ":", "\n", "        ", "super", "(", "projector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv_bn_relu", "(", "in_channel", ",", "\n", "out_channel", ",", "\n", "pad", "=", "1", ",", "\n", "has_relu", "=", "False", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_block.projector.forward": [[156, 159], ["common_block.projector.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_block.xcorr_depthwise": [[72, 96], ["int", "int", "x.view.view", "kernel.view.view", "torch.conv2d", "out.view.view", "kernel.view.size", "kernel.view.size", "int", "int", "int", "int", "int", "int", "int", "x.view.size", "x.view.size", "kernel.view.size", "kernel.view.size", "out.view.size", "out.view.size"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d"], ["", "", "def", "xcorr_depthwise", "(", "x", ",", "kernel", ")", ":", "\n", "    ", "r\"\"\"\n    Depthwise cross correlation. e.g. used for template matching in Siamese tracking network\n\n    Arguments\n    ---------\n    x: torch.Tensor\n        feature_x (e.g. search region feature in SOT)\n    kernel: torch.Tensor\n        feature_z (e.g. template feature in SOT)\n\n    Returns\n    -------\n    torch.Tensor\n        cross-correlation result\n    \"\"\"", "\n", "batch", "=", "int", "(", "kernel", ".", "size", "(", "0", ")", ")", "\n", "channel", "=", "int", "(", "kernel", ".", "size", "(", "1", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "int", "(", "batch", "*", "channel", ")", ",", "int", "(", "x", ".", "size", "(", "2", ")", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "kernel", "=", "kernel", ".", "view", "(", "batch", "*", "channel", ",", "1", ",", "int", "(", "kernel", ".", "size", "(", "2", ")", ")", ",", "\n", "int", "(", "kernel", ".", "size", "(", "3", ")", ")", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "groups", "=", "batch", "*", "channel", ")", "\n", "out", "=", "out", ".", "view", "(", "batch", ",", "channel", ",", "int", "(", "out", ".", "size", "(", "2", ")", ")", ",", "int", "(", "out", ".", "size", "(", "3", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_loss.sigmoid_focal_loss": [[6, 48], ["torch.sigmoid", "torch.sigmoid", "torch.binary_cross_entropy_with_logits", "loss.sum.mean", "loss.sum.sum"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid"], ["def", "sigmoid_focal_loss", "(", "\n", "inputs", ":", "torch", ".", "Tensor", ",", "\n", "targets", ":", "torch", ".", "Tensor", ",", "\n", "alpha", ":", "float", "=", "-", "1", ",", "\n", "gamma", ":", "float", "=", "2", ",", "\n", "reduction", ":", "str", "=", "\"none\"", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Loss used in RetinaNet for dense detection: https://arxiv.org/abs/1708.02002.\n    Args:\n        inputs: A float tensor of arbitrary shape.\n                The predictions for each example.\n        targets: A float tensor with the same shape as inputs. Stores the binary\n                 classification label for each element in inputs\n                (0 for the negative class and 1 for the positive class).\n        alpha: (optional) Weighting factor in range (0,1) to balance\n                positive vs negative examples. Default = -1 (no weighting).\n        gamma: Exponent of the modulating factor (1 - p_t) to\n               balance easy vs hard examples.\n        reduction: 'none' | 'mean' | 'sum'\n                 'none': No reduction will be applied to the output.\n                 'mean': The output will be averaged.\n                 'sum': The output will be summed.\n    Returns:\n        Loss tensor with the reduction option applied.\n    \"\"\"", "\n", "p", "=", "torch", ".", "sigmoid", "(", "inputs", ")", "\n", "ce_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "inputs", ",", "\n", "targets", ",", "\n", "reduction", "=", "\"none\"", ")", "\n", "p_t", "=", "p", "*", "targets", "+", "(", "1", "-", "p", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "=", "ce_loss", "*", "(", "(", "1", "-", "p_t", ")", "**", "gamma", ")", "\n", "\n", "if", "alpha", ">=", "0", ":", "\n", "        ", "alpha_t", "=", "alpha", "*", "targets", "+", "(", "1", "-", "alpha", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "=", "alpha_t", "*", "loss", "\n", "", "if", "reduction", "==", "\"mean\"", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "\"sum\"", ":", "\n", "        ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.common_opr.common_loss.sigmoid_focal_loss_star": [[54, 92], ["loss.sum.mean", "torch.logsigmoid", "loss.sum.sum"], "function", ["None"], ["def", "sigmoid_focal_loss_star", "(", "\n", "inputs", ":", "torch", ".", "Tensor", ",", "\n", "targets", ":", "torch", ".", "Tensor", ",", "\n", "alpha", ":", "float", "=", "-", "1", ",", "\n", "gamma", ":", "float", "=", "1", ",", "\n", "reduction", ":", "str", "=", "\"none\"", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    FL* described in RetinaNet paper Appendix: https://arxiv.org/abs/1708.02002.\n    Args:\n        inputs: A float tensor of arbitrary shape.\n                The predictions for each example.\n        targets: A float tensor with the same shape as inputs. Stores the binary\n                 classification label for each element in inputs\n                (0 for the negative class and 1 for the positive class).\n        alpha: (optional) Weighting factor in range (0,1) to balance\n                positive vs negative examples. Default = -1 (no weighting).\n        gamma: Gamma parameter described in FL*. Default = 1 (no weighting).\n        reduction: 'none' | 'mean' | 'sum'\n                 'none': No reduction will be applied to the output.\n                 'mean': The output will be averaged.\n                 'sum': The output will be summed.\n    Returns:\n        Loss tensor with the reduction option applied.\n    \"\"\"", "\n", "shifted_inputs", "=", "gamma", "*", "(", "inputs", "*", "(", "2", "*", "targets", "-", "1", ")", ")", "\n", "loss", "=", "-", "F", ".", "logsigmoid", "(", "shifted_inputs", ")", "/", "gamma", "\n", "\n", "if", "alpha", ">=", "0", ":", "\n", "        ", "alpha_t", "=", "alpha", "*", "targets", "+", "(", "1", "-", "alpha", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "*=", "alpha_t", "\n", "\n", "", "if", "reduction", "==", "\"mean\"", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", ")", "# pyre-ignore", "\n", "", "elif", "reduction", "==", "\"sum\"", ":", "\n", "        ", "loss", "=", "loss", ".", "sum", "(", ")", "# pyre-ignore", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 67], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "\n", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "if", "not", "self", ".", "track_running_stats", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "'track_running_stats=False is not supported by the SynchronizedBatchNorm.'", ")", "\n", "\n", "", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[68, 99], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[100, 109], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[110, 132], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[133, 151], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[209, 213], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[271, 275], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[334, 338], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[340, 353], ["None"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm.convert_model": [[355, 397], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ",", "device_ids", "=", "module", ".", "device_ids", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone.builder.build": [[12, 51], ["module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params", "loguru.logger.error", "exit"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone.builder.get_config": [[53, 73], ["backbone_base.TASK_BACKBONES.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.tinyconv.TinyConv.__init__": [[27, 58], ["videoanalyst.model.module_base.ModuleBase.__init__", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "torch.MaxPool2d", "torch.MaxPool2d", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "tinyconv.TinyConv.modules", "isinstance", "isinstance", "stats.truncnorm", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "values.view.view.view", "isinstance", "hasattr", "stats.truncnorm.rvs", "m.weight.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m.weight.copy_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "m.weight.numel"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TinyConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv_bn_relu", "(", "3", ",", "32", ",", "stride", "=", "2", ",", "kszie", "=", "3", ",", "pad", "=", "0", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "\n", "\n", "self", ".", "conv2a", "=", "conv_bn_relu", "(", "32", ",", "64", ",", "stride", "=", "1", ",", "kszie", "=", "1", ",", "pad", "=", "0", ")", "\n", "self", ".", "conv2b", "=", "conv_bn_relu", "(", "64", ",", "64", ",", "stride", "=", "2", ",", "kszie", "=", "7", ",", "pad", "=", "0", ",", "groups", "=", "64", ")", "\n", "\n", "self", ".", "conv3a", "=", "conv_bn_relu", "(", "64", ",", "64", ",", "stride", "=", "1", ",", "kszie", "=", "3", ",", "pad", "=", "0", ")", "\n", "self", ".", "conv3b", "=", "conv_bn_relu", "(", "64", ",", "\n", "64", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "has_relu", "=", "False", ")", "\n", "\n", "# initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "import", "scipy", ".", "stats", "as", "stats", "\n", "stddev", "=", "m", ".", "stddev", "if", "hasattr", "(", "m", ",", "'stddev'", ")", "else", "0.1", "\n", "X", "=", "stats", ".", "truncnorm", "(", "-", "2", ",", "2", ",", "scale", "=", "stddev", ")", "\n", "values", "=", "torch", ".", "as_tensor", "(", "X", ".", "rvs", "(", "m", ".", "weight", ".", "numel", "(", ")", ")", ",", "\n", "dtype", "=", "m", ".", "weight", ".", "dtype", ")", "\n", "values", "=", "values", ".", "view", "(", "m", ".", "weight", ".", "size", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "copy_", "(", "values", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.tinyconv.TinyConv.forward": [[59, 70], ["tinyconv.TinyConv.conv1", "tinyconv.TinyConv.pool1", "tinyconv.TinyConv.conv2a", "tinyconv.TinyConv.conv2b", "tinyconv.TinyConv.conv3a", "tinyconv.TinyConv.conv3b"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2b", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3b", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.WindowMSA.__init__": [[44, 80], ["mmcv.runner.BaseModule.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "swin_transformer.WindowMSA.double_step_seq", "rel_position_index.flip().contiguous.flip().contiguous.flip().contiguous", "swin_transformer.WindowMSA.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "rel_position_index.flip().contiguous.flip().contiguous.flip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.WindowMSA.double_step_seq"], ["def", "__init__", "(", "self", ",", "\n", "embed_dims", ",", "\n", "num_heads", ",", "\n", "window_size", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "attn_drop_rate", "=", "0.", ",", "\n", "proj_drop_rate", "=", "0.", ",", "\n", "init_cfg", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dims", "=", "embed_dims", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_embed_dims", "=", "embed_dims", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_embed_dims", "**", "-", "0.5", "\n", "self", ".", "init_cfg", "=", "init_cfg", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "\n", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# About 2x faster than original impl", "\n", "Wh", ",", "Ww", "=", "self", ".", "window_size", "\n", "rel_index_coords", "=", "self", ".", "double_step_seq", "(", "2", "*", "Ww", "-", "1", ",", "Wh", ",", "1", ",", "Ww", ")", "\n", "rel_position_index", "=", "rel_index_coords", "+", "rel_index_coords", ".", "T", "\n", "rel_position_index", "=", "rel_position_index", ".", "flip", "(", "1", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "register_buffer", "(", "'relative_position_index'", ",", "rel_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "embed_dims", ",", "embed_dims", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop_rate", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "embed_dims", ",", "embed_dims", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop_rate", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.WindowMSA.init_weights": [[81, 83], ["mmcv.cnn.trunc_normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "trunc_normal_init", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.WindowMSA.forward": [[84, 123], ["swin_transformer.WindowMSA.qkv().reshape().permute", "swin_transformer.WindowMSA.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "swin_transformer.WindowMSA.softmax", "swin_transformer.WindowMSA.attn_drop", "swin_transformer.WindowMSA.proj", "swin_transformer.WindowMSA.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "attn.view.view.view", "swin_transformer.WindowMSA.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "attn.view.view.view", "mask.unsqueeze().unsqueeze", "swin_transformer.WindowMSA.qkv", "swin_transformer.WindowMSA.relative_position_index.view", "mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n\n            x (tensor): input features with shape of (num_windows*B, N, C)\n            mask (tensor | None, Optional): mask with shape of (num_windows,\n                Wh*Ww, Wh*Ww), value should be between (-inf, 0].\n        \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "\n", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "# make torchscript happy (cannot use tensor as tuple)", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "\n", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "\n", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "\n", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "\n", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.WindowMSA.double_step_seq": [[124, 129], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "double_step_seq", "(", "step1", ",", "len1", ",", "step2", ",", "len2", ")", ":", "\n", "        ", "seq1", "=", "torch", ".", "arange", "(", "0", ",", "step1", "*", "len1", ",", "step1", ")", "\n", "seq2", "=", "torch", ".", "arange", "(", "0", ",", "step2", "*", "len2", ",", "step2", ")", "\n", "return", "(", "seq1", "[", ":", ",", "None", "]", "+", "seq2", "[", "None", ",", ":", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.ShiftWindowMSA.__init__": [[154, 182], ["dict", "mmcv.runner.BaseModule.__init__", "swin_transformer.WindowMSA", "mmcv.cnn.bricks.transformer.build_dropout", "mmcv.utils.to_2tuple"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "\n", "embed_dims", ",", "\n", "num_heads", ",", "\n", "window_size", ",", "\n", "shift_size", "=", "0", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "attn_drop_rate", "=", "0", ",", "\n", "proj_drop_rate", "=", "0", ",", "\n", "dropout_layer", "=", "dict", "(", "type", "=", "'DropPath'", ",", "drop_prob", "=", "0.", ")", ",", "\n", "init_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "init_cfg", ")", "\n", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", "\n", "\n", "self", ".", "w_msa", "=", "WindowMSA", "(", "\n", "embed_dims", "=", "embed_dims", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "window_size", "=", "to_2tuple", "(", "window_size", ")", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop_rate", "=", "attn_drop_rate", ",", "\n", "proj_drop_rate", "=", "proj_drop_rate", ",", "\n", "init_cfg", "=", "None", ")", "\n", "\n", "self", ".", "drop", "=", "build_dropout", "(", "dropout_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.ShiftWindowMSA.forward": [[183, 258], ["torch.pad.view", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "swin_transformer.ShiftWindowMSA.window_partition", "query_windows.view.view.view", "swin_transformer.ShiftWindowMSA.w_msa", "attn_windows.view.view.view", "swin_transformer.ShiftWindowMSA.window_reverse", "x[].contiguous.view", "swin_transformer.ShiftWindowMSA.drop", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "swin_transformer.ShiftWindowMSA.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "x[].contiguous", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "float"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.ShiftWindowMSA.window_partition", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.ShiftWindowMSA.window_reverse", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.ShiftWindowMSA.window_partition"], ["", "def", "forward", "(", "self", ",", "query", ",", "hw_shape", ")", ":", "\n", "        ", "B", ",", "L", ",", "C", "=", "query", ".", "shape", "\n", "H", ",", "W", "=", "hw_shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "'input feature has wrong size'", "\n", "query", "=", "query", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# pad feature maps to multiples of window size", "\n", "pad_r", "=", "(", "self", ".", "window_size", "-", "W", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "pad_b", "=", "(", "self", ".", "window_size", "-", "H", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "query", "=", "F", ".", "pad", "(", "query", ",", "(", "0", ",", "0", ",", "0", ",", "pad_r", ",", "0", ",", "pad_b", ")", ")", "\n", "H_pad", ",", "W_pad", "=", "query", ".", "shape", "[", "1", "]", ",", "query", ".", "shape", "[", "2", "]", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_query", "=", "torch", ".", "roll", "(", "\n", "query", ",", "\n", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "# calculate attention mask for SW-MSA", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "H_pad", ",", "W_pad", ",", "1", ")", ",", "device", "=", "query", ".", "device", ")", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "\n", "-", "self", ".", "shift_size", ")", ",", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "\n", "-", "self", ".", "shift_size", ")", ",", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "                ", "for", "w", "in", "w_slices", ":", "\n", "                    ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "# nW, window_size, window_size, 1", "\n", "", "", "mask_windows", "=", "self", ".", "window_partition", "(", "img_mask", ")", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "\n", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "\n", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "", "else", ":", "\n", "            ", "shifted_query", "=", "query", "\n", "attn_mask", "=", "None", "\n", "\n", "# nW*B, window_size, window_size, C", "\n", "", "query_windows", "=", "self", ".", "window_partition", "(", "shifted_query", ")", "\n", "# nW*B, window_size*window_size, C", "\n", "query_windows", "=", "query_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "**", "2", ",", "C", ")", "\n", "\n", "# W-MSA/SW-MSA (nW*B, window_size*window_size, C)", "\n", "attn_windows", "=", "self", ".", "w_msa", "(", "query_windows", ",", "mask", "=", "attn_mask", ")", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "\n", "self", ".", "window_size", ",", "C", ")", "\n", "\n", "# B H' W' C", "\n", "shifted_x", "=", "self", ".", "window_reverse", "(", "attn_windows", ",", "H_pad", ",", "W_pad", ")", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "\n", "shifted_x", ",", "\n", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "\n", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "\n", "", "if", "pad_r", ">", "0", "or", "pad_b", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.ShiftWindowMSA.window_reverse": [[259, 274], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["None"], ["", "def", "window_reverse", "(", "self", ",", "windows", ",", "H", ",", "W", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            windows: (num_windows*B, window_size, window_size, C)\n            H (int): Height of image\n            W (int): Width of image\n        Returns:\n            x: (B, H, W, C)\n        \"\"\"", "\n", "window_size", "=", "self", ".", "window_size", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "\n", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.ShiftWindowMSA.window_partition": [[275, 289], ["x.view.view.view", "x.view.view.permute().contiguous", "windows.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "window_partition", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: (B, H, W, C)\n        Returns:\n            windows: (num_windows*B, window_size, window_size, C)\n        \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "window_size", "=", "self", ".", "window_size", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "\n", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "windows", "=", "windows", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinBlock.__init__": [[316, 360], ["dict", "dict", "mmcv.runner.BaseModule.__init__", "swin_transformer.ShiftWindowMSA", "mmcv.cnn.bricks.transformer.FFN", "mmcv.cnn.build_norm_layer", "mmcv.cnn.build_norm_layer", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "\n", "embed_dims", ",", "\n", "num_heads", ",", "\n", "feedforward_channels", ",", "\n", "window_size", "=", "7", ",", "\n", "shift", "=", "False", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'GELU'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'LN'", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "init_cfg", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "SwinBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "init_cfg", "=", "init_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n", "self", ".", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "embed_dims", ")", "[", "1", "]", "\n", "self", ".", "attn", "=", "ShiftWindowMSA", "(", "\n", "embed_dims", "=", "embed_dims", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "window_size", "=", "window_size", ",", "\n", "shift_size", "=", "window_size", "//", "2", "if", "shift", "else", "0", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop_rate", "=", "attn_drop_rate", ",", "\n", "proj_drop_rate", "=", "drop_rate", ",", "\n", "dropout_layer", "=", "dict", "(", "type", "=", "'DropPath'", ",", "drop_prob", "=", "drop_path_rate", ")", ",", "\n", "init_cfg", "=", "None", ")", "\n", "\n", "self", ".", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "embed_dims", ")", "[", "1", "]", "\n", "self", ".", "ffn", "=", "FFN", "(", "\n", "embed_dims", "=", "embed_dims", ",", "\n", "feedforward_channels", "=", "feedforward_channels", ",", "\n", "num_fcs", "=", "2", ",", "\n", "ffn_drop", "=", "drop_rate", ",", "\n", "dropout_layer", "=", "dict", "(", "type", "=", "'DropPath'", ",", "drop_prob", "=", "drop_path_rate", ")", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "add_identity", "=", "True", ",", "\n", "init_cfg", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinBlock.forward": [[361, 382], ["swin_transformer.SwinBlock.norm1", "swin_transformer.SwinBlock.attn", "swin_transformer.SwinBlock.norm2", "swin_transformer.SwinBlock.ffn", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "swin_transformer.SwinBlock.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hw_shape", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "attn", "(", "x", ",", "hw_shape", ")", "\n", "\n", "x", "=", "x", "+", "identity", "\n", "\n", "identity", "=", "x", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "ffn", "(", "x", ",", "identity", "=", "identity", ")", "\n", "\n", "return", "x", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "x", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinBlockSequence.__init__": [[413, 457], ["dict", "dict", "mmcv.runner.BaseModule.__init__", "isinstance", "mmcv.runner.ModuleList", "range", "swin_transformer.SwinBlock", "swin_transformer.SwinBlockSequence.blocks.append", "len", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "\n", "embed_dims", ",", "\n", "num_heads", ",", "\n", "feedforward_channels", ",", "\n", "depth", ",", "\n", "window_size", "=", "7", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "\n", "downsample", "=", "None", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'GELU'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'LN'", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "init_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "init_cfg", "=", "init_cfg", ")", "\n", "\n", "if", "isinstance", "(", "drop_path_rate", ",", "list", ")", ":", "\n", "            ", "drop_path_rates", "=", "drop_path_rate", "\n", "assert", "len", "(", "drop_path_rates", ")", "==", "depth", "\n", "", "else", ":", "\n", "            ", "drop_path_rates", "=", "[", "deepcopy", "(", "drop_path_rate", ")", "for", "_", "in", "range", "(", "depth", ")", "]", "\n", "\n", "", "self", ".", "blocks", "=", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "block", "=", "SwinBlock", "(", "\n", "embed_dims", "=", "embed_dims", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "feedforward_channels", "=", "feedforward_channels", ",", "\n", "window_size", "=", "window_size", ",", "\n", "shift", "=", "False", "if", "i", "%", "2", "==", "0", "else", "True", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "attn_drop_rate", "=", "attn_drop_rate", ",", "\n", "drop_path_rate", "=", "drop_path_rates", "[", "i", "]", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "init_cfg", "=", "None", ")", "\n", "self", ".", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinBlockSequence.forward": [[458, 467], ["block", "swin_transformer.SwinBlockSequence.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "hw_shape", ")", ":", "\n", "        ", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ",", "hw_shape", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "x_down", ",", "down_hw_shape", "=", "self", ".", "downsample", "(", "x", ",", "hw_shape", ")", "\n", "return", "x_down", ",", "down_hw_shape", ",", "x", ",", "hw_shape", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "hw_shape", ",", "x", ",", "hw_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformerImpl.__init__": [[527, 645], ["dict", "dict", "isinstance", "isinstance", "mmcv.runner.BaseModule.__init__", "len", "mmdet.models.utils.transformer.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "sum", "mmcv.runner.ModuleList", "range", "mmcv.utils.to_2tuple", "isinstance", "warnings.warn", "dict", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "x.item", "swin_transformer.SwinBlockSequence", "swin_transformer.SwinTransformerImpl.stages.append", "int", "swin_transformer.SwinTransformerImpl.add_module", "TypeError", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "mmdet.models.utils.transformer.PatchMerging", "range", "mmcv.cnn.build_norm_layer", "len", "mmcv.utils.to_2tuple", "len", "len", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "\n", "pretrain_img_size", "=", "224", ",", "\n", "in_channels", "=", "3", ",", "\n", "embed_dims", "=", "96", ",", "\n", "patch_size", "=", "4", ",", "\n", "window_size", "=", "7", ",", "\n", "mlp_ratio", "=", "4", ",", "\n", "depths", "=", "(", "2", ",", "2", ",", "6", ",", "2", ")", ",", "\n", "num_heads", "=", "(", "3", ",", "6", ",", "12", ",", "24", ")", ",", "\n", "strides", "=", "(", "4", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "patch_norm", "=", "True", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.1", ",", "\n", "use_abs_pos_embed", "=", "False", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'GELU'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'LN'", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "pretrained", "=", "None", ",", "\n", "convert_weights", "=", "False", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "init_cfg", "=", "None", ")", ":", "\n", "        ", "self", ".", "convert_weights", "=", "convert_weights", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "if", "isinstance", "(", "pretrain_img_size", ",", "int", ")", ":", "\n", "            ", "pretrain_img_size", "=", "to_2tuple", "(", "pretrain_img_size", ")", "\n", "", "elif", "isinstance", "(", "pretrain_img_size", ",", "tuple", ")", ":", "\n", "            ", "if", "len", "(", "pretrain_img_size", ")", "==", "1", ":", "\n", "                ", "pretrain_img_size", "=", "to_2tuple", "(", "pretrain_img_size", "[", "0", "]", ")", "\n", "", "assert", "len", "(", "pretrain_img_size", ")", "==", "2", ",", "f'The size of image should have length 1 or 2, '", "f'but got {len(pretrain_img_size)}'", "\n", "\n", "", "assert", "not", "(", "init_cfg", "and", "pretrained", ")", ",", "'init_cfg and pretrained cannot be specified at the same time'", "\n", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "'DeprecationWarning: pretrained is deprecated, '", "\n", "'please use \"init_cfg\" instead'", ")", "\n", "self", ".", "init_cfg", "=", "dict", "(", "type", "=", "'Pretrained'", ",", "checkpoint", "=", "pretrained", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "self", ".", "init_cfg", "=", "init_cfg", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n", "", "super", "(", "SwinTransformerImpl", ",", "self", ")", ".", "__init__", "(", "init_cfg", "=", "init_cfg", ")", "\n", "\n", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "use_abs_pos_embed", "=", "use_abs_pos_embed", "\n", "\n", "assert", "strides", "[", "0", "]", "==", "patch_size", ",", "'Use non-overlapping patch embed.'", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "embed_dims", "=", "embed_dims", ",", "\n", "conv_type", "=", "'Conv2d'", ",", "\n", "kernel_size", "=", "patch_size", ",", "\n", "stride", "=", "strides", "[", "0", "]", ",", "\n", "norm_cfg", "=", "norm_cfg", "if", "patch_norm", "else", "None", ",", "\n", "init_cfg", "=", "None", ")", "\n", "\n", "if", "self", ".", "use_abs_pos_embed", ":", "\n", "            ", "patch_row", "=", "pretrain_img_size", "[", "0", "]", "//", "patch_size", "\n", "patch_col", "=", "pretrain_img_size", "[", "1", "]", "//", "patch_size", "\n", "num_patches", "=", "patch_row", "*", "patch_col", "\n", "self", ".", "absolute_pos_embed", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "1", ",", "num_patches", ",", "embed_dims", ")", ")", ")", "\n", "\n", "", "self", ".", "drop_after_pos", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# set stochastic depth decay rule", "\n", "total_depth", "=", "sum", "(", "depths", ")", "\n", "dpr", "=", "[", "\n", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "total_depth", ")", "\n", "]", "\n", "\n", "self", ".", "stages", "=", "ModuleList", "(", ")", "\n", "in_channels", "=", "embed_dims", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "i", "<", "num_layers", "-", "1", ":", "\n", "                ", "downsample", "=", "PatchMerging", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "2", "*", "in_channels", ",", "\n", "stride", "=", "strides", "[", "i", "+", "1", "]", ",", "\n", "norm_cfg", "=", "norm_cfg", "if", "patch_norm", "else", "None", ",", "\n", "init_cfg", "=", "None", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "None", "\n", "\n", "", "stage", "=", "SwinBlockSequence", "(", "\n", "embed_dims", "=", "in_channels", ",", "\n", "num_heads", "=", "num_heads", "[", "i", "]", ",", "\n", "feedforward_channels", "=", "mlp_ratio", "*", "in_channels", ",", "\n", "depth", "=", "depths", "[", "i", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "attn_drop_rate", "=", "attn_drop_rate", ",", "\n", "drop_path_rate", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i", "]", ")", ":", "sum", "(", "depths", "[", ":", "i", "+", "1", "]", ")", "]", ",", "\n", "downsample", "=", "downsample", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "init_cfg", "=", "None", ")", "\n", "self", ".", "stages", ".", "append", "(", "stage", ")", "\n", "if", "downsample", ":", "\n", "                ", "in_channels", "=", "downsample", ".", "out_channels", "\n", "\n", "", "", "self", ".", "num_features", "=", "[", "int", "(", "embed_dims", "*", "2", "**", "i", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "# Add a norm layer for each output", "\n", "for", "i", "in", "out_indices", ":", "\n", "            ", "layer", "=", "build_norm_layer", "(", "norm_cfg", ",", "self", ".", "num_features", "[", "i", "]", ")", "[", "1", "]", "\n", "layer_name", "=", "f'norm{i}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformerImpl.train": [[646, 650], ["super().train", "swin_transformer.SwinTransformerImpl._freeze_stages"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.train", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformerImpl._freeze_stages"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Convert the model into training mode while keep layers freezed.\"\"\"", "\n", "super", "(", "SwinTransformerImpl", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformerImpl._freeze_stages": [[651, 672], ["range", "swin_transformer.SwinTransformerImpl.patch_embed.eval", "swin_transformer.SwinTransformerImpl.patch_embed.parameters", "swin_transformer.SwinTransformerImpl.drop_after_pos.eval", "m.eval", "m.parameters", "getattr", "getattr.eval", "getattr.parameters"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "patch_embed", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "patch_embed", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "if", "self", ".", "use_abs_pos_embed", ":", "\n", "                ", "self", ".", "absolute_pos_embed", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "drop_after_pos", ".", "eval", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "\n", "            ", "if", "(", "i", "-", "1", ")", "in", "self", ".", "out_indices", ":", "\n", "                ", "norm_layer", "=", "getattr", "(", "self", ",", "f'norm{i-1}'", ")", "\n", "norm_layer", ".", "eval", "(", ")", "\n", "for", "param", "in", "norm_layer", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "m", "=", "self", ".", "stages", "[", "i", "-", "1", "]", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformerImpl.init_weights": [[673, 750], ["mmdet.utils.get_root_logger", "mmdet.utils.get_root_logger.warn", "swin_transformer.SwinTransformerImpl.modules", "mmcv.runner._load_checkpoint", "collections.OrderedDict", "mmdet.models.utils.ckpt_convert.swin_converter.items", "[].startswith", "swin_transformer.SwinTransformerImpl.load_state_dict", "mmcv.cnn.trunc_normal_init", "isinstance", "mmdet.models.utils.ckpt_convert.swin_converter", "k.startswith", "collections.OrderedDict.get", "absolute_pos_embed.size", "swin_transformer.SwinTransformerImpl.absolute_pos_embed.size", "table_pretrained.size", "table_current.size", "mmcv.cnn.trunc_normal_init", "isinstance", "mmdet.utils.get_root_logger.warning", "absolute_pos_embed.view().permute().contiguous", "collections.OrderedDict.keys", "swin_transformer.SwinTransformerImpl.state_dict", "mmdet.utils.get_root_logger.warning", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "list", "collections.OrderedDict.items", "int", "int", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate.view().permute().contiguous", "collections.OrderedDict.keys", "absolute_pos_embed.view().permute", "table_pretrained.permute().reshape", "torch.interpolate.view().permute", "absolute_pos_embed.view", "table_pretrained.permute", "torch.interpolate.view"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.load_state_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.state_dict"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "logger", "=", "get_root_logger", "(", ")", "\n", "if", "self", ".", "init_cfg", "is", "None", ":", "\n", "            ", "logger", ".", "warn", "(", "f'No pre-trained weights for '", "\n", "f'{self.__class__.__name__}, '", "\n", "f'training start from scratch'", ")", "\n", "if", "self", ".", "use_abs_pos_embed", ":", "\n", "                ", "trunc_normal_init", "(", "self", ".", "absolute_pos_embed", ",", "std", "=", "0.02", ")", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "trunc_normal_init", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                        ", "constant_init", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                    ", "constant_init", "(", "m", ".", "bias", ",", "0", ")", "\n", "constant_init", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "assert", "'checkpoint'", "in", "self", ".", "init_cfg", ",", "f'Only support '", "f'specify `Pretrained` in '", "f'`init_cfg` in '", "f'{self.__class__.__name__} '", "\n", "ckpt", "=", "_load_checkpoint", "(", "\n", "self", ".", "init_cfg", ".", "checkpoint", ",", "logger", "=", "logger", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "'state_dict'", "in", "ckpt", ":", "\n", "                ", "_state_dict", "=", "ckpt", "[", "'state_dict'", "]", "\n", "", "elif", "'model'", "in", "ckpt", ":", "\n", "                ", "_state_dict", "=", "ckpt", "[", "'model'", "]", "\n", "", "else", ":", "\n", "                ", "_state_dict", "=", "ckpt", "\n", "", "if", "self", ".", "convert_weights", ":", "\n", "# supported loading weight from original repo,", "\n", "                ", "_state_dict", "=", "swin_converter", "(", "_state_dict", ")", "\n", "\n", "", "state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "_state_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "'backbone.'", ")", ":", "\n", "                    ", "state_dict", "[", "k", "[", "9", ":", "]", "]", "=", "v", "\n", "\n", "# strip prefix of state_dict", "\n", "", "", "if", "list", "(", "state_dict", ".", "keys", "(", ")", ")", "[", "0", "]", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "state_dict", "=", "{", "k", "[", "7", ":", "]", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "\n", "# reshape absolute position embedding", "\n", "", "if", "state_dict", ".", "get", "(", "'absolute_pos_embed'", ")", "is", "not", "None", ":", "\n", "                ", "absolute_pos_embed", "=", "state_dict", "[", "'absolute_pos_embed'", "]", "\n", "N1", ",", "L", ",", "C1", "=", "absolute_pos_embed", ".", "size", "(", ")", "\n", "N2", ",", "C2", ",", "H", ",", "W", "=", "self", ".", "absolute_pos_embed", ".", "size", "(", ")", "\n", "if", "N1", "!=", "N2", "or", "C1", "!=", "C2", "or", "L", "!=", "H", "*", "W", ":", "\n", "                    ", "logger", ".", "warning", "(", "'Error in loading absolute_pos_embed, pass'", ")", "\n", "", "else", ":", "\n", "                    ", "state_dict", "[", "'absolute_pos_embed'", "]", "=", "absolute_pos_embed", ".", "view", "(", "\n", "N2", ",", "H", ",", "W", ",", "C2", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# interpolate position bias table if needed", "\n", "", "", "relative_position_bias_table_keys", "=", "[", "\n", "k", "for", "k", "in", "state_dict", ".", "keys", "(", ")", "\n", "if", "'relative_position_bias_table'", "in", "k", "\n", "]", "\n", "for", "table_key", "in", "relative_position_bias_table_keys", ":", "\n", "                ", "table_pretrained", "=", "state_dict", "[", "table_key", "]", "\n", "table_current", "=", "self", ".", "state_dict", "(", ")", "[", "table_key", "]", "\n", "L1", ",", "nH1", "=", "table_pretrained", ".", "size", "(", ")", "\n", "L2", ",", "nH2", "=", "table_current", ".", "size", "(", ")", "\n", "if", "nH1", "!=", "nH2", ":", "\n", "                    ", "logger", ".", "warning", "(", "f'Error in loading {table_key}, pass'", ")", "\n", "", "elif", "L1", "!=", "L2", ":", "\n", "                    ", "S1", "=", "int", "(", "L1", "**", "0.5", ")", "\n", "S2", "=", "int", "(", "L2", "**", "0.5", ")", "\n", "table_pretrained_resized", "=", "F", ".", "interpolate", "(", "\n", "table_pretrained", ".", "permute", "(", "1", ",", "0", ")", ".", "reshape", "(", "1", ",", "nH1", ",", "S1", ",", "S1", ")", ",", "\n", "size", "=", "(", "S2", ",", "S2", ")", ",", "\n", "mode", "=", "'bicubic'", ")", "\n", "state_dict", "[", "table_key", "]", "=", "table_pretrained_resized", ".", "view", "(", "\n", "nH2", ",", "L2", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "\n", "# load state_dict", "\n", "", "", "self", ".", "load_state_dict", "(", "state_dict", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformerImpl.forward": [[751, 772], ["swin_transformer.SwinTransformerImpl.patch_embed", "swin_transformer.SwinTransformerImpl.drop_after_pos", "enumerate", "stage", "getattr", "getattr.", "out.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "outs.append", "out.view().permute().contiguous.view().permute().contiguous.view().permute", "out.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "hw_shape", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_abs_pos_embed", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "absolute_pos_embed", "\n", "", "x", "=", "self", ".", "drop_after_pos", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "stage", "in", "enumerate", "(", "self", ".", "stages", ")", ":", "\n", "            ", "x", ",", "hw_shape", ",", "out", ",", "out_hw_shape", "=", "stage", "(", "x", ",", "hw_shape", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "norm_layer", "=", "getattr", "(", "self", ",", "f'norm{i}'", ")", "\n", "out", "=", "norm_layer", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "*", "out_hw_shape", ",", "\n", "self", ".", "num_features", "[", "i", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "\n", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "", "elif", "i", ">", "self", ".", "out_indices", "[", "-", "1", "]", ":", "\n", "                ", "return", "outs", "\n", "\n", "", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformer.__init__": [[794, 796], ["videoanalyst.model.module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SwinTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformer.update_params": [[797, 818], ["super().update_params", "mmcv.Config", "swin_transformer.SwinTransformerImpl", "swin_transformer.SwinTransformer.net.init_weights", "dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params", "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.init_weights"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_params", "(", ")", "\n", "init_cfg", "=", "Config", "(", "dict", "(", "type", "=", "'Pretrained'", ",", "checkpoint", "=", "self", ".", "_hyper_params", "[", "'pretrained'", "]", ")", ")", "\n", "self", ".", "net", "=", "SwinTransformerImpl", "(", "\n", "embed_dims", "=", "self", ".", "_hyper_params", "[", "'embed_dims'", "]", ",", "\n", "depths", "=", "self", ".", "_hyper_params", "[", "'depths'", "]", ",", "\n", "num_heads", "=", "self", ".", "_hyper_params", "[", "'num_heads'", "]", ",", "\n", "window_size", "=", "self", ".", "_hyper_params", "[", "'window_size'", "]", ",", "\n", "mlp_ratio", "=", "self", ".", "_hyper_params", "[", "'mlp_ratio'", "]", ",", "\n", "qkv_bias", "=", "self", ".", "_hyper_params", "[", "'qkv_bias'", "]", ",", "\n", "qk_scale", "=", "self", ".", "_hyper_params", "[", "'qk_scale'", "]", ",", "\n", "drop_rate", "=", "self", ".", "_hyper_params", "[", "'drop_rate'", "]", ",", "\n", "attn_drop_rate", "=", "self", ".", "_hyper_params", "[", "'attn_drop_rate'", "]", ",", "\n", "drop_path_rate", "=", "self", ".", "_hyper_params", "[", "'drop_path_rate'", "]", ",", "\n", "patch_norm", "=", "self", ".", "_hyper_params", "[", "'patch_norm'", "]", ",", "\n", "out_indices", "=", "self", ".", "_hyper_params", "[", "'out_indices'", "]", ",", "\n", "with_cp", "=", "self", ".", "_hyper_params", "[", "'with_cp'", "]", ",", "\n", "convert_weights", "=", "self", ".", "_hyper_params", "[", "'convert_weights'", "]", ",", "\n", "init_cfg", "=", "init_cfg", "\n", ")", "\n", "self", ".", "net", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformer.init_weights": [[819, 821], ["swin_transformer.SwinTransformer.net.init_weights"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "net", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.swin_transformer.SwinTransformer.forward": [[822, 825], ["swin_transformer.SwinTransformer.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "self", ".", "net", "(", "x", ")", "\n", "return", "outs", "[", "-", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.creat_residual_block.__init__": [[12, 43], ["torch.Module.__init__", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "torch.ReLU", "torch.ReLU", "videoanalyst.model.common_opr.common_block.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "outplanes", ",", "stride", ",", "has_proj", "=", "False", ")", ":", "\n", "        ", "super", "(", "creat_residual_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "has_proj", "=", "has_proj", "\n", "if", "self", ".", "has_proj", ":", "\n", "            ", "self", ".", "proj_conv", "=", "conv_bn_relu", "(", "inplanes", ",", "\n", "outplanes", ",", "\n", "stride", "=", "stride", ",", "\n", "kszie", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "conv1", "=", "conv_bn_relu", "(", "inplanes", ",", "\n", "outplanes", ",", "\n", "stride", "=", "stride", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv_bn_relu", "(", "outplanes", ",", "\n", "outplanes", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.creat_residual_block.forward": [[44, 54], ["resnet.creat_residual_block.conv1", "resnet.creat_residual_block.conv2", "resnet.creat_residual_block.relu", "resnet.creat_residual_block.proj_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "has_proj", ":", "\n", "            ", "residual", "=", "self", ".", "proj_conv", "(", "residual", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "x", "+", "residual", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.create_bottleneck.__init__": [[61, 100], ["torch.Module.__init__", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "torch.ReLU", "torch.ReLU", "videoanalyst.model.common_opr.common_block.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "outplanes", ",", "stride", ",", "has_proj", "=", "False", ")", ":", "\n", "        ", "super", "(", "create_bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "has_proj", "=", "has_proj", "\n", "if", "self", ".", "has_proj", ":", "\n", "            ", "self", ".", "proj_conv", "=", "conv_bn_relu", "(", "inplanes", ",", "\n", "outplanes", ",", "\n", "stride", "=", "stride", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "conv1", "=", "conv_bn_relu", "(", "inplanes", ",", "\n", "outplanes", ",", "\n", "stride", "=", "stride", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "conv_bn_relu", "(", "outplanes", ",", "\n", "outplanes", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "conv_bn_relu", "(", "outplanes", ",", "\n", "outplanes", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "False", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.create_bottleneck.forward": [[101, 112], ["resnet.create_bottleneck.conv1", "resnet.create_bottleneck.conv2", "resnet.create_bottleneck.conv3", "resnet.create_bottleneck.relu", "resnet.create_bottleneck.proj_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "has_proj", ":", "\n", "            ", "residual", "=", "self", ".", "proj_conv", "(", "residual", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "x", "+", "residual", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet50_M.__init__": [[119, 151], ["videoanalyst.model.module_base.ModuleBase.__init__", "torch.Sequential", "torch.Sequential", "resnet.ResNet50_M.__make_stage", "resnet.ResNet50_M.__make_stage", "resnet.ResNet50_M.__make_stage", "resnet.ResNet50_M.__make_stage", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage"], ["def", "__init__", "(", "self", ",", "block", "=", "create_bottleneck", ")", ":", "\n", "        ", "super", "(", "ResNet50_M", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn_relu", "(", "3", ",", "\n", "32", ",", "\n", "stride", "=", "2", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "3", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", ",", "\n", "conv_bn_relu", "(", "32", ",", "\n", "32", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", ",", "\n", "conv_bn_relu", "(", "32", ",", "\n", "32", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ",", "ceil_mode", "=", "False", ")", ")", "\n", "self", ".", "stage2", "=", "self", ".", "__make_stage", "(", "self", ".", "block", ",", "32", ",", "64", ",", "3", ",", "1", ")", "\n", "self", ".", "stage3", "=", "self", ".", "__make_stage", "(", "self", ".", "block", ",", "64", ",", "128", ",", "4", ",", "2", ")", "\n", "self", ".", "stage4", "=", "self", ".", "__make_stage", "(", "self", ".", "block", ",", "128", ",", "256", ",", "6", ",", "2", ")", "\n", "self", ".", "stage5", "=", "self", ".", "__make_stage", "(", "self", ".", "block", ",", "256", ",", "512", ",", "3", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet50_M.__make_stage": [[152, 159], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "def", "__make_stage", "(", "self", ",", "block", ",", "inplane", ",", "outplane", ",", "blocks", ",", "stride", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplane", ",", "outplane", ",", "stride", "=", "stride", ",", "has_proj", "=", "True", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "outplane", ",", "outplane", ",", "1", ",", "False", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet50_M.forward": [[160, 167], ["resnet.ResNet50_M.stage1", "resnet.ResNet50_M.stage2", "resnet.ResNet50_M.stage3", "resnet.ResNet50_M.stage4", "resnet.ResNet50_M.stage5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "stage1", "(", "x", ")", "\n", "x2", "=", "self", ".", "stage2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "stage3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "stage4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "stage5", "(", "x4", ")", "\n", "return", "x5", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__init__": [[174, 206], ["videoanalyst.model.module_base.ModuleBase.__init__", "torch.Sequential", "torch.Sequential", "resnet.ResNet18_M.__make_stage", "resnet.ResNet18_M.__make_stage", "resnet.ResNet18_M.__make_stage", "resnet.ResNet18_M.__make_stage", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage"], ["def", "__init__", "(", "self", ",", "block", "=", "creat_residual_block", ")", ":", "\n", "        ", "super", "(", "ResNet18_M", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "stage1", "=", "nn", ".", "Sequential", "(", "\n", "conv_bn_relu", "(", "3", ",", "\n", "32", ",", "\n", "stride", "=", "2", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "3", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", ",", "\n", "conv_bn_relu", "(", "32", ",", "\n", "32", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", ",", "\n", "conv_bn_relu", "(", "32", ",", "\n", "32", ",", "\n", "stride", "=", "1", ",", "\n", "kszie", "=", "3", ",", "\n", "pad", "=", "1", ",", "\n", "has_bn", "=", "True", ",", "\n", "has_relu", "=", "True", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ",", "ceil_mode", "=", "False", ")", ")", "\n", "self", ".", "stage2", "=", "self", ".", "__make_stage", "(", "self", ".", "block", ",", "32", ",", "64", ",", "2", ",", "1", ")", "\n", "self", ".", "stage3", "=", "self", ".", "__make_stage", "(", "self", ".", "block", ",", "64", ",", "128", ",", "2", ",", "2", ")", "\n", "self", ".", "stage4", "=", "self", ".", "__make_stage", "(", "self", ".", "block", ",", "128", ",", "256", ",", "2", ",", "2", ")", "\n", "self", ".", "stage5", "=", "self", ".", "__make_stage", "(", "self", ".", "block", ",", "256", ",", "256", ",", "2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.__make_stage": [[207, 214], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "def", "__make_stage", "(", "self", ",", "block", ",", "inplane", ",", "outplane", ",", "blocks", ",", "stride", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplane", ",", "outplane", ",", "stride", "=", "stride", ",", "has_proj", "=", "True", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "outplane", ",", "outplane", ",", "1", ",", "False", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.ResNet18_M.forward": [[215, 222], ["resnet.ResNet18_M.stage1", "resnet.ResNet18_M.stage2", "resnet.ResNet18_M.stage3", "resnet.ResNet18_M.stage4", "resnet.ResNet18_M.stage5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "stage1", "(", "x", ")", "\n", "x2", "=", "self", ".", "stage2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "stage3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "stage4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "stage5", "(", "x4", ")", "\n", "return", "x5", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.JointEncoder.__init__": [[229, 233], ["videoanalyst.model.module_base.ModuleBase.__init__", "videoanalyst.model.common_opr.common_block.projector"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "basemodel", ")", ":", "\n", "        ", "super", "(", "JointEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "basemodel", "=", "basemodel", "\n", "self", ".", "projector_corr_feature", "=", "projector", "(", "256", ",", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.resnet.JointEncoder.forward": [[234, 242], ["resnet.JointEncoder.projector_corr_feature", "resnet.JointEncoder.basemodel.stage1", "resnet.JointEncoder.basemodel.stage2", "resnet.JointEncoder.basemodel.stage3", "resnet.JointEncoder.basemodel.stage5", "resnet.JointEncoder.basemodel.stage4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "saliency_image", ",", "corr_feature", ")", ":", "\n", "        ", "corr_feature", "=", "self", ".", "projector_corr_feature", "(", "corr_feature", ")", "\n", "x1", "=", "self", ".", "basemodel", ".", "stage1", "(", "saliency_image", ")", "\n", "x2", "=", "self", ".", "basemodel", ".", "stage2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "basemodel", ".", "stage3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "basemodel", ".", "stage4", "(", "x3", ")", "+", "corr_feature", "\n", "x5", "=", "self", ".", "basemodel", ".", "stage5", "(", "x4", ")", "\n", "return", "[", "x5", ",", "x4", ",", "x3", ",", "x2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.Inception3.__init__": [[42, 57], ["videoanalyst.model.module_base.ModuleBase.__init__", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.InceptionA", "googlenet.InceptionA", "googlenet.InceptionA", "googlenet.InceptionB", "googlenet.InceptionC", "googlenet.InceptionC", "googlenet.InceptionC", "googlenet.InceptionC"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "transform_input", "=", "False", ")", ":", "\n", "        ", "super", "(", "Inception3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Conv2d_1a_3x3", "=", "BasicConv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "self", ".", "Conv2d_2a_3x3", "=", "BasicConv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Conv2d_2b_3x3", "=", "BasicConv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "Conv2d_3b_1x1", "=", "BasicConv2d", "(", "64", ",", "80", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "Conv2d_4a_3x3", "=", "BasicConv2d", "(", "80", ",", "192", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "Mixed_5b", "=", "InceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "self", ".", "Mixed_5c", "=", "InceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_5d", "=", "InceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "self", ".", "Mixed_6a", "=", "InceptionB", "(", "288", ")", "\n", "self", ".", "Mixed_6b", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "self", ".", "Mixed_6c", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "self", ".", "Mixed_6d", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "self", ".", "Mixed_6e", "=", "InceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.Inception3.forward": [[84, 130], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "googlenet.Inception3.Conv2d_1a_3x3", "googlenet.Inception3.Conv2d_2a_3x3", "googlenet.Inception3.Conv2d_2b_3x3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "googlenet.Inception3.Conv2d_3b_1x1", "googlenet.Inception3.Conv2d_4a_3x3", "googlenet.Inception3.Mixed_5b", "googlenet.Inception3.Mixed_5c", "googlenet.Inception3.Mixed_5d", "googlenet.Inception3.Mixed_6a", "googlenet.Inception3.Mixed_6b", "googlenet.Inception3.Mixed_6c", "googlenet.Inception3.Mixed_6d", "googlenet.Inception3.Mixed_6e", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "googlenet.Inception3.size", "googlenet.Inception3.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# RGB -> BGR, [0, 255] -> [-1, 1]", "\n", "        ", "bias", "=", "255", "/", "2", "\n", "x_ch0", "=", "(", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "2", "]", ",", "1", ")", "-", "bias", ")", "/", "bias", "\n", "x_ch1", "=", "(", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "1", "]", ",", "1", ")", "-", "bias", ")", "/", "bias", "\n", "x_ch2", "=", "(", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "0", "]", ",", "1", ")", "-", "bias", ")", "/", "bias", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_ch0", ",", "x_ch1", ",", "x_ch2", ")", ",", "1", ")", "\n", "# N x 3 x 299 x 299", "\n", "x", "=", "self", ".", "Conv2d_1a_3x3", "(", "x", ")", "\n", "# N x 32 x 149 x 149", "\n", "x", "=", "self", ".", "Conv2d_2a_3x3", "(", "x", ")", "\n", "# N x 32 x 147 x 147", "\n", "x", "=", "self", ".", "Conv2d_2b_3x3", "(", "x", ")", "\n", "# N x 64 x 147 x 147", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "# N x 64 x 73 x 73", "\n", "x", "=", "self", ".", "Conv2d_3b_1x1", "(", "x", ")", "\n", "# N x 80 x 73 x 73", "\n", "x", "=", "self", ".", "Conv2d_4a_3x3", "(", "x", ")", "\n", "# N x 192 x 71 x 71", "\n", "# max_pool2d pruned for SOT adapdation", "\n", "# x = F.max_pool2d(x, kernel_size=3, stride=2)", "\n", "# N x 192 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_5b", "(", "x", ")", "\n", "# N x 256 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_5c", "(", "x", ")", "\n", "# N x 288 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_5d", "(", "x", ")", "\n", "# N x 288 x 35 x 35", "\n", "x", "=", "self", ".", "Mixed_6a", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6b", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6c", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6d", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "x", "=", "self", ".", "Mixed_6e", "(", "x", ")", "\n", "# N x 768 x 17 x 17", "\n", "\n", "# cropping to alleviate", "\n", "crop_pad", "=", "self", ".", "crop_pad", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "crop_pad", ":", "x", ".", "size", "(", "2", ")", "-", "crop_pad", ",", "crop_pad", ":", "x", ".", "size", "(", "3", ")", "-", "\n", "crop_pad", "]", "\n", "# x = self.channel_reduce(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.Inception3.update_params": [[152, 156], ["super().update_params"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_params", "(", ")", "\n", "self", ".", "crop_pad", "=", "self", ".", "_hyper_params", "[", "'crop_pad'", "]", "\n", "self", ".", "pruned", "=", "self", ".", "_hyper_params", "[", "'pruned'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionA.__init__": [[159, 173], ["torch.Module.__init__", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "InceptionA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch5x5_1", "=", "BasicConv2d", "(", "in_channels", ",", "48", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch5x5_2", "=", "BasicConv2d", "(", "48", ",", "64", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "BasicConv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "\n", "pool_features", ",", "\n", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionA.forward": [[174, 189], ["googlenet.InceptionA.branch1x1", "googlenet.InceptionA.branch5x5_1", "googlenet.InceptionA.branch5x5_2", "googlenet.InceptionA.branch3x3dbl_1", "googlenet.InceptionA.branch3x3dbl_2", "googlenet.InceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "googlenet.InceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionB.__init__": [[192, 199], ["torch.Module.__init__", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "InceptionB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch3x3", "=", "BasicConv2d", "(", "in_channels", ",", "384", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3", "=", "BasicConv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionB.forward": [[200, 211], ["googlenet.InceptionB.branch3x3", "googlenet.InceptionB.branch3x3dbl_1", "googlenet.InceptionB.branch3x3dbl_2", "googlenet.InceptionB.branch3x3dbl_3", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch3x3", "=", "self", ".", "branch3x3", "(", "x", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "outputs", "=", "[", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionC.__init__": [[214, 248], ["torch.Module.__init__", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "InceptionC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n", "c7", "=", "channels_7x7", "\n", "self", ".", "branch7x7_1", "=", "BasicConv2d", "(", "in_channels", ",", "c7", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7_2", "=", "BasicConv2d", "(", "c7", ",", "\n", "c7", ",", "\n", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "\n", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7_3", "=", "BasicConv2d", "(", "c7", ",", "\n", "192", ",", "\n", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "\n", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch7x7dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "c7", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7dbl_2", "=", "BasicConv2d", "(", "c7", ",", "\n", "c7", ",", "\n", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "\n", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7dbl_3", "=", "BasicConv2d", "(", "c7", ",", "\n", "c7", ",", "\n", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "\n", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7dbl_4", "=", "BasicConv2d", "(", "c7", ",", "\n", "c7", ",", "\n", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "\n", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7dbl_5", "=", "BasicConv2d", "(", "c7", ",", "\n", "192", ",", "\n", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "\n", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionC.forward": [[249, 267], ["googlenet.InceptionC.branch1x1", "googlenet.InceptionC.branch7x7_1", "googlenet.InceptionC.branch7x7_2", "googlenet.InceptionC.branch7x7_3", "googlenet.InceptionC.branch7x7dbl_1", "googlenet.InceptionC.branch7x7dbl_2", "googlenet.InceptionC.branch7x7dbl_3", "googlenet.InceptionC.branch7x7dbl_4", "googlenet.InceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "googlenet.InceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionD.__init__": [[270, 285], ["torch.Module.__init__", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "InceptionD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch3x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3_2", "=", "BasicConv2d", "(", "192", ",", "320", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "branch7x7x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch7x7x3_2", "=", "BasicConv2d", "(", "192", ",", "\n", "192", ",", "\n", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "\n", "padding", "=", "(", "0", ",", "3", ")", ")", "\n", "self", ".", "branch7x7x3_3", "=", "BasicConv2d", "(", "192", ",", "\n", "192", ",", "\n", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "\n", "padding", "=", "(", "3", ",", "0", ")", ")", "\n", "self", ".", "branch7x7x3_4", "=", "BasicConv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionD.forward": [[286, 298], ["googlenet.InceptionD.branch3x3_1", "googlenet.InceptionD.branch3x3_2", "googlenet.InceptionD.branch7x7x3_1", "googlenet.InceptionD.branch7x7x3_2", "googlenet.InceptionD.branch7x7x3_3", "googlenet.InceptionD.branch7x7x3_4", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "self", ".", "branch3x3_2", "(", "branch3x3", ")", "\n", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_1", "(", "x", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_2", "(", "branch7x7x3", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_3", "(", "branch7x7x3", ")", "\n", "branch7x7x3", "=", "self", ".", "branch7x7x3_4", "(", "branch7x7x3", ")", "\n", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "outputs", "=", "[", "branch3x3", ",", "branch7x7x3", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionE.__init__": [[301, 327], ["torch.Module.__init__", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "googlenet.BasicConv2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "InceptionE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "branch1x1", "=", "BasicConv2d", "(", "in_channels", ",", "320", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "branch3x3_1", "=", "BasicConv2d", "(", "in_channels", ",", "384", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3_2a", "=", "BasicConv2d", "(", "384", ",", "\n", "384", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "branch3x3_2b", "=", "BasicConv2d", "(", "384", ",", "\n", "384", ",", "\n", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch3x3dbl_1", "=", "BasicConv2d", "(", "in_channels", ",", "448", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_2", "=", "BasicConv2d", "(", "448", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "branch3x3dbl_3a", "=", "BasicConv2d", "(", "384", ",", "\n", "384", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "branch3x3dbl_3b", "=", "BasicConv2d", "(", "384", ",", "\n", "384", ",", "\n", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", "\n", "self", ".", "branch_pool", "=", "BasicConv2d", "(", "in_channels", ",", "192", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionE.forward": [[328, 351], ["googlenet.InceptionE.branch1x1", "googlenet.InceptionE.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "googlenet.InceptionE.branch3x3dbl_1", "googlenet.InceptionE.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "googlenet.InceptionE.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "googlenet.InceptionE.branch3x3_2a", "googlenet.InceptionE.branch3x3_2b", "googlenet.InceptionE.branch3x3dbl_3a", "googlenet.InceptionE.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionAux.__init__": [[354, 361], ["torch.Module.__init__", "googlenet.BasicConv2d", "googlenet.BasicConv2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "InceptionAux", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv0", "=", "BasicConv2d", "(", "in_channels", ",", "128", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv1", "=", "BasicConv2d", "(", "128", ",", "768", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv1", ".", "stddev", "=", "0.01", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "self", ".", "fc", ".", "stddev", "=", "0.001", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.InceptionAux.forward": [[362, 378], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "googlenet.InceptionAux.conv0", "googlenet.InceptionAux.conv1", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "googlenet.InceptionAux.fc"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.adaptive_avg_pool2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.adaptive_avg_pool2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.adaptive_avg_pool2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# N x 768 x 17 x 17", "\n", "        ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "5", ",", "stride", "=", "3", ")", "\n", "# N x 768 x 5 x 5", "\n", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "# N x 128 x 5 x 5", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "# N x 768 x 1 x 1", "\n", "# Adaptive average pooling", "\n", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "# N x 768 x 1 x 1", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "# N x 768", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# N x 1000", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.BasicConv2d.__init__": [[381, 385], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BasicConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "eps", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.googlenet.BasicConv2d.forward": [[386, 390], ["googlenet.BasicConv2d.conv", "googlenet.BasicConv2d.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2_x1_0.__init__": [[21, 24], ["module_base.ModuleBase.__init__", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2_x1_0", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_hyper_params", "=", "deepcopy", "(", "self", ".", "default_hyper_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2_x1_0.update_params": [[25, 35], ["shufflenet_v2._shufflenetv2", "super().update_params"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2._shufflenetv2", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "arch", "=", "\"shufflenetv2_x1.0\"", "\n", "kwargs", "=", "self", ".", "_hyper_params", "\n", "# build module", "\n", "self", ".", "_model", "=", "_shufflenetv2", "(", "arch", ",", "\n", "False", ",", "\n", "True", ",", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "116", ",", "232", ",", "464", ",", "1024", "]", ",", "\n", "fused_channls", "=", "[", "116", ",", "232", ",", "464", "]", ",", "\n", "**", "kwargs", ")", "\n", "super", "(", ")", ".", "update_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2_x1_0.forward": [[36, 40], ["shufflenet_v2.ShuffleNetV2_x1_0._model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_model", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2_x0_5.__init__": [[50, 53], ["module_base.ModuleBase.__init__", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2_x0_5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_hyper_params", "=", "deepcopy", "(", "self", ".", "default_hyper_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2_x0_5.update_params": [[54, 72], ["shufflenet_v2._shufflenetv2", "torch.load", "torch.load", "torch.load", "torch.load", "shufflenet_v2.ShuffleNetV2_x0_5._model.load_state_dict", "loguru.logger.info", "loguru.logger.info", "torch.device", "torch.device", "torch.device", "torch.device", "md5sum"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2._shufflenetv2", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.load_state_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.md5sum"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "kwargs", "=", "self", ".", "_hyper_params", "\n", "# build module", "\n", "self", ".", "_model", "=", "_shufflenetv2", "(", "'shufflenetv2_x0.5'", ",", "\n", "False", ",", "\n", "True", ",", "[", "4", ",", "8", ",", "4", "]", ",", "[", "24", ",", "48", ",", "96", ",", "192", ",", "1024", "]", ",", "\n", "fused_channls", "=", "[", "48", ",", "96", ",", "192", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n", "model_file", "=", "self", ".", "_hyper_params", "[", "\"pretrain_model_path\"", "]", "\n", "if", "model_file", "!=", "\"\"", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "self", ".", "_model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "logger", ".", "info", "(", "\"Load pretrained ShuffleNet parameters from: %s\"", "%", "\n", "model_file", ")", "\n", "logger", ".", "info", "(", "\"Check md5sum of pretrained ShuffleNet parameters: %s\"", "%", "\n", "md5sum", "(", "model_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2_x0_5.forward": [[73, 77], ["shufflenet_v2.ShuffleNetV2_x0_5._model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_model", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.InvertedResidual.__init__": [[120, 177], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "ValueError", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shufflenet_v2.InvertedResidual.depthwise_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "shufflenet_v2.InvertedResidual.depthwise_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.InvertedResidual.depthwise_conv", "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.InvertedResidual.depthwise_conv"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "false_stride", "=", "False", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "(", "1", "<=", "stride", "<=", "3", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'illegal stride value'", ")", "\n", "", "self", ".", "stride", "=", "stride", "\n", "self", ".", "false_stride", "=", "false_stride", "\n", "\n", "branch_features", "=", "oup", "//", "2", "\n", "# assert (self.stride != 1) or (inp == branch_features << 1)", "\n", "\n", "real_stride", "=", "self", ".", "stride", "if", "not", "self", ".", "false_stride", "else", "1", "\n", "if", "self", ".", "stride", ">", "1", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "# self.depthwise_conv(inp, inp, kernel_size=3, stride=self.stride, padding=1),", "\n", "self", ".", "depthwise_conv", "(", "inp", ",", "\n", "inp", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "real_stride", ",", "\n", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", "if", "(", "self", ".", "stride", ">", "1", ")", "else", "branch_features", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# self.depthwise_conv(branch_features, branch_features, kernel_size=3, stride=self.stride, padding=1),", "\n", "self", ".", "depthwise_conv", "(", "branch_features", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "real_stride", ",", "\n", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "Conv2d", "(", "branch_features", ",", "\n", "branch_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.InvertedResidual.depthwise_conv": [[179, 188], ["torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "depthwise_conv", "(", "i", ",", "o", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ":", "\n", "        ", "return", "nn", ".", "Conv2d", "(", "i", ",", "\n", "o", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "bias", ",", "\n", "groups", "=", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.InvertedResidual.forward": [[189, 199], ["shufflenet_v2.channel_shuffle", "x.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenet_v2.InvertedResidual.branch2", "shufflenet_v2.InvertedResidual.branch1", "shufflenet_v2.InvertedResidual.branch2"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.channel_shuffle"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "x1", ",", "x2", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "self", ".", "branch2", "(", "x2", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "branch1", "(", "x", ")", ",", "self", ".", "branch2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2.__init__": [[202, 263], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "zip", "torch.Sequential", "torch.Sequential", "len", "ValueError", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "range", "setattr", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "inverted_residual", "seq.append", "torch.Sequential", "torch.Sequential", "sum", "inverted_residual"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "stages_repeats", ",", "\n", "stages_out_channels", ",", "\n", "num_classes", "=", "1000", ",", "\n", "inverted_residual", "=", "InvertedResidual", ",", "\n", "crop_pad", "=", "4", ",", "\n", "fused_channls", "=", "[", "116", ",", "232", ",", "464", "]", ",", "\n", "head_width", "=", "256", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crop_pad", "=", "crop_pad", "\n", "\n", "if", "len", "(", "stages_repeats", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'expected stages_repeats as list of 3 positive ints'", ")", "\n", "", "if", "len", "(", "stages_out_channels", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'expected stages_out_channels as list of 5 positive ints'", ")", "\n", "", "self", ".", "_stage_out_channels", "=", "stages_out_channels", "\n", "\n", "input_channels", "=", "3", "\n", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "0", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "stage_names", "=", "[", "'stage{}'", ".", "format", "(", "i", ")", "for", "i", "in", "[", "2", ",", "3", ",", "4", "]", "]", "\n", "for", "name", ",", "repeats", ",", "output_channels", "in", "zip", "(", "stage_names", ",", "stages_repeats", ",", "\n", "self", ".", "_stage_out_channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "false_stride", "=", "(", "name", "!=", "\"stage2\"", ")", "\n", "seq", "=", "[", "\n", "inverted_residual", "(", "input_channels", ",", "\n", "output_channels", ",", "\n", "2", ",", "\n", "false_stride", "=", "false_stride", ")", "\n", "]", "\n", "# seq = [inverted_residual(input_channels, output_channels, stride)]", "\n", "for", "i", "in", "range", "(", "repeats", "-", "1", ")", ":", "\n", "                ", "seq", ".", "append", "(", "\n", "inverted_residual", "(", "output_channels", ",", "output_channels", ",", "1", ")", ")", "\n", "", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "seq", ")", ")", "\n", "input_channels", "=", "output_channels", "\n", "\n", "", "output_channels", "=", "self", ".", "_stage_out_channels", "[", "-", "1", "]", "\n", "# self.conv5 = nn.Sequential(", "\n", "#     nn.Conv2d(input_channels, output_channels, 1, 1, 0, bias=False),", "\n", "#     nn.BatchNorm2d(output_channels),", "\n", "#     nn.ReLU(inplace=True),", "\n", "# )", "\n", "\n", "# self.fc = nn.Linear(output_channels, num_classes)", "\n", "# channel_reduce", "\n", "self", ".", "channel_reduce", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "(", "sum", "(", "fused_channls", ")", ")", ",", "head_width", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "head_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2._forward_impl": [[265, 296], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenet_v2.ShuffleNetV2.conv1", "shufflenet_v2.ShuffleNetV2.maxpool", "shufflenet_v2.ShuffleNetV2.stage2", "xs.append", "shufflenet_v2.ShuffleNetV2.stage3", "xs.append", "shufflenet_v2.ShuffleNetV2.stage4", "xs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenet_v2.ShuffleNetV2.channel_reduce", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# transform_input", "\n", "        ", "x", "=", "x", "/", "255", "\n", "x_ch0", "=", "(", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "2", "]", ",", "1", ")", "-", "0.485", ")", "/", "0.229", "# R", "\n", "x_ch1", "=", "(", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "1", "]", ",", "1", ")", "-", "0.456", ")", "/", "0.224", "# G", "\n", "x_ch2", "=", "(", "torch", ".", "unsqueeze", "(", "x", "[", ":", ",", "0", "]", ",", "1", ")", "-", "0.406", ")", "/", "0.225", "# B", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_ch0", ",", "x_ch1", ",", "x_ch2", ")", ",", "1", ")", "\n", "\n", "# See note [TorchScript super()]", "\n", "xs", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "stage2", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "stage3", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "stage4", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "# x = self.conv5(x)", "\n", "# xs.append(x)", "\n", "x", "=", "torch", ".", "cat", "(", "xs", ",", "1", ")", "\n", "\n", "crop_pad", "=", "self", ".", "crop_pad", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "crop_pad", ":", "-", "crop_pad", ",", "crop_pad", ":", "-", "crop_pad", "]", "\n", "\n", "x", "=", "self", ".", "channel_reduce", "(", "x", ")", "\n", "\n", "# x = x.mean([2, 3])  # globalpool", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2.forward": [[297, 299], ["shufflenet_v2.ShuffleNetV2._forward_impl"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.ShuffleNetV2._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.channel_shuffle": [[103, 117], ["x.view.data.size", "x.view.view", "torch.transpose().contiguous", "torch.transpose().contiguous", "x.view.view", "torch.transpose", "torch.transpose"], "function", ["None"], ["", "", "def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "# type: (torch.Tensor, int) -> torch.Tensor", "\n", "    ", "batchsize", ",", "num_channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "channels_per_group", ",", "height", ",", "width", ")", "\n", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2._shufflenetv2": [[301, 314], ["shufflenet_v2.ShuffleNetV2", "NotImplementedError", "load_state_dict_from_url", "ShuffleNetV2.load_state_dict"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.load_state_dict"], ["", "", "def", "_shufflenetv2", "(", "arch", ",", "pretrained", ",", "progress", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ShuffleNetV2", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "model_url", "=", "model_urls", "[", "arch", "]", "\n", "if", "model_url", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'pretrained {} is not supported as of now'", ".", "format", "(", "arch", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.shufflenet_v2_x0_5": [[316, 328], ["shufflenet_v2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2._shufflenetv2"], ["", "def", "shufflenet_v2_x0_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 0.5x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x0.5'", ",", "pretrained", ",", "progress", ",", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "[", "24", ",", "48", ",", "96", ",", "192", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.shufflenet_v2_x1_0": [[330, 342], ["shufflenet_v2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2._shufflenetv2"], ["", "def", "shufflenet_v2_x1_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 1.0x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x1.0'", ",", "pretrained", ",", "progress", ",", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "[", "24", ",", "116", ",", "232", ",", "464", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.shufflenet_v2_x1_5": [[344, 356], ["shufflenet_v2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2._shufflenetv2"], ["", "def", "shufflenet_v2_x1_5", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 1.5x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x1.5'", ",", "pretrained", ",", "progress", ",", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "[", "24", ",", "176", ",", "352", ",", "704", ",", "1024", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2.shufflenet_v2_x2_0": [[358, 370], ["shufflenet_v2._shufflenetv2"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.shufflenet_v2._shufflenetv2"], ["", "def", "shufflenet_v2_x2_0", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a ShuffleNetV2 with 2.0x output channels, as described in\n    `\"ShuffleNet V2: Practical Guidelines for Efficient CNN Architecture Design\"\n    <https://arxiv.org/abs/1807.11164>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_shufflenetv2", "(", "'shufflenetv2_x2.0'", ",", "pretrained", ",", "progress", ",", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "[", "24", ",", "244", ",", "488", ",", "976", ",", "2048", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.alexnet_bn.AlexNet.__init__": [[25, 34], ["videoanalyst.model.module_base.ModuleBase.__init__", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "torch.MaxPool2d", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "torch.MaxPool2d", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu", "videoanalyst.model.common_opr.common_block.conv_bn_relu"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv_bn_relu", "(", "3", ",", "96", ",", "stride", "=", "2", ",", "kszie", "=", "11", ",", "pad", "=", "0", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "0", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv_bn_relu", "(", "96", ",", "256", ",", "1", ",", "5", ",", "0", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "0", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv3", "=", "conv_bn_relu", "(", "256", ",", "384", ",", "1", ",", "3", ",", "0", ")", "\n", "self", ".", "conv4", "=", "conv_bn_relu", "(", "384", ",", "384", ",", "1", ",", "3", ",", "0", ")", "\n", "self", ".", "conv5", "=", "conv_bn_relu", "(", "384", ",", "256", ",", "1", ",", "3", ",", "0", ",", "has_relu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.backbone_impl.alexnet_bn.AlexNet.forward": [[35, 44], ["alexnet_bn.AlexNet.conv1", "alexnet_bn.AlexNet.pool1", "alexnet_bn.AlexNet.conv2", "alexnet_bn.AlexNet.pool2", "alexnet_bn.AlexNet.conv3", "alexnet_bn.AlexNet.conv4", "alexnet_bn.AlexNet.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.task_head.builder.build": [[11, 41], ["head_module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "head_module.set_hps", "head_module.update_params", "loguru.logger.error", "exit"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["def", "build", "(", "\n", "task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.task_head.builder.get_config": [[43, 63], ["videoanalyst.model.task_head.taskhead_base.TASK_HEADS.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], ["\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.BasicResBlock.__init__": [[74, 110], ["dict", "mmcv.runner.BaseModule.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "init_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicResBlock", ",", "self", ")", ".", "__init__", "(", "init_cfg", ")", "\n", "\n", "# main path", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "# identity path", "\n", "self", ".", "conv_identity", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.BasicResBlock.forward": [[111, 122], ["double_conv_fc_bbox_head.BasicResBlock.conv1", "double_conv_fc_bbox_head.BasicResBlock.conv2", "double_conv_fc_bbox_head.BasicResBlock.conv_identity", "double_conv_fc_bbox_head.BasicResBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "identity", "=", "self", ".", "conv_identity", "(", "identity", ")", "\n", "out", "=", "x", "+", "identity", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.__init__": [[135, 141], ["videoanalyst.model.module_base.ModuleBase.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DoubleConvFCBBoxHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bi_fc", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "self", ".", "si_fc", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ")", ")", "\n", "self", ".", "bi_conv", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "self", ".", "si_conv", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.update_params": [[142, 161], ["super().update_params", "double_conv_fc_bbox_head.get_fm_center_torch", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.register_buffer", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.create_network", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.init_weights", "get_fm_center_torch.clone().detach().requires_grad_", "get_fm_center_torch.clone().detach", "get_fm_center_torch.clone"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params", "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.get_fm_center_torch", "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.create_network", "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.init_weights"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", "DoubleConvFCBBoxHead", ",", "self", ")", ".", "update_params", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "self", ".", "_hyper_params", "[", "'in_channels'", "]", "\n", "self", ".", "num_convs", "=", "self", ".", "_hyper_params", "[", "'num_convs'", "]", "\n", "self", ".", "total_stride", "=", "self", ".", "_hyper_params", "[", "\"total_stride\"", "]", "\n", "self", ".", "input_size_adapt", "=", "self", ".", "_hyper_params", "[", "\"input_size_adapt\"", "]", "\n", "\n", "x_size", "=", "self", ".", "_hyper_params", "[", "\"x_size\"", "]", "\n", "self", ".", "score_size", "=", "self", ".", "_hyper_params", "[", "\"score_size\"", "]", "\n", "score_offset", "=", "(", "x_size", "-", "1", "-", "(", "self", ".", "score_size", "-", "1", ")", "*", "self", ".", "total_stride", ")", "//", "2", "\n", "self", ".", "_hyper_params", "[", "\"score_offset\"", "]", "=", "score_offset", "\n", "self", ".", "score_offset", "=", "self", ".", "_hyper_params", "[", "\"score_offset\"", "]", "\n", "\n", "fm_ctr", "=", "get_fm_center_torch", "(", "self", ".", "score_size", ",", "self", ".", "score_offset", ",", "self", ".", "total_stride", ")", "\n", "self", ".", "register_buffer", "(", "'fm_ctr'", ",", "fm_ctr", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "False", ")", ")", "\n", "\n", "self", ".", "create_network", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.create_network": [[162, 205], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "convs.append", "double_conv_fc_bbox_head.BasicResBlock", "dict", "dict", "mmdet.models.backbones.resnet.Bottleneck", "dict", "dict", "dict"], "methods", ["None"], ["", "def", "create_network", "(", "self", ")", ":", "\n", "        ", "mid_channels", "=", "1024", "\n", "\n", "# fc is implemented by 1x1 conv", "\n", "self", ".", "fc_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "fc_branch_cls", "=", "ConvModule", "(", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "1", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "None", ")", "\n", "self", ".", "fc_branch_reg", "=", "ConvModule", "(", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "convs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "convs", ".", "append", "(", "Bottleneck", "(", "inplanes", "=", "mid_channels", ",", "\n", "planes", "=", "mid_channels", "//", "4", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ")", "\n", "\n", "", "self", ".", "conv_branch", "=", "nn", ".", "Sequential", "(", "\n", "BasicResBlock", "(", "self", ".", "in_channels", ",", "mid_channels", ")", ",", "\n", "*", "convs", ",", "\n", ")", "\n", "self", ".", "conv_branch_cls", "=", "ConvModule", "(", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "1", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "None", ")", "\n", "self", ".", "conv_branch_reg", "=", "ConvModule", "(", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "4", ",", "\n", "kernel_size", "=", "1", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.init_weights": [[206, 213], ["double_conv_fc_bbox_head.DoubleConvFCBBoxHead.conv_branch.modules", "isinstance", "isinstance", "mmcv.cnn.utils.weight_init.normal_init", "mmcv.cnn.utils.weight_init.xavier_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "conv_branch", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "normal_init", "(", "m", ",", "std", "=", "0.01", ")", "\n", "", "", "for", "m", "in", "self", ".", "fc_branch", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "# normal_init(self.fc_branch_cls, std=0.01)", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.forward": [[218, 237], ["double_conv_fc_bbox_head.DoubleConvFCBBoxHead.fc_branch", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.fc_branch_cls", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.fc_branch_reg", "cls_fc.permute().reshape.permute().reshape.permute().reshape", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.conv_branch", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.conv_branch_cls", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.conv_branch_reg", "cls_conv.permute().reshape.permute().reshape.permute().reshape", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.offset2bbox", "double_conv_fc_bbox_head.DoubleConvFCBBoxHead.offset2bbox", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "cls_fc.permute().reshape.permute().reshape.permute", "cls_conv.permute().reshape.permute().reshape.permute"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.offset2bbox", "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.offset2bbox"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "x_size", "=", "0", ")", ":", "\n", "        ", "output_fc_branch", "=", "self", ".", "fc_branch", "(", "x", ")", "\n", "cls_fc", "=", "self", ".", "fc_branch_cls", "(", "output_fc_branch", ")", "\n", "reg_fc", "=", "self", ".", "fc_branch_reg", "(", "output_fc_branch", ")", "\n", "\n", "cls_fc", "=", "cls_fc", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "cls_fc", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "\n", "output_conv_branch", "=", "self", ".", "conv_branch", "(", "x", ")", "\n", "cls_conv", "=", "self", ".", "conv_branch_cls", "(", "output_conv_branch", ")", "\n", "reg_conv", "=", "self", ".", "conv_branch_reg", "(", "output_conv_branch", ")", "\n", "\n", "cls_conv", "=", "cls_conv", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "cls_conv", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "\n", "reg_fc", "=", "torch", ".", "exp", "(", "self", ".", "si_fc", "*", "reg_fc", "+", "self", ".", "bi_fc", ")", "*", "self", ".", "total_stride", "\n", "bbox_fc", "=", "self", ".", "offset2bbox", "(", "reg_fc", ",", "x_size", ")", "\n", "reg_conv", "=", "torch", ".", "exp", "(", "self", ".", "si_conv", "*", "reg_conv", "+", "self", ".", "bi_conv", ")", "*", "self", ".", "total_stride", "\n", "bbox_conv", "=", "self", ".", "offset2bbox", "(", "reg_conv", ",", "x_size", ")", "\n", "\n", "return", "cls_fc", ",", "bbox_fc", ",", "cls_conv", ",", "bbox_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.DoubleConvFCBBoxHead.offset2bbox": [[238, 249], ["double_conv_fc_bbox_head.get_box", "double_conv_fc_bbox_head.get_fm_center_torch", "offsets.size"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.get_box", "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.get_fm_center_torch"], ["", "def", "offset2bbox", "(", "self", ",", "offsets", ",", "x_size", ")", ":", "\n", "# bbox decoding", "\n", "        ", "if", "self", ".", "input_size_adapt", "and", "x_size", ">", "0", ":", "\n", "            ", "score_offsets", "=", "(", "x_size", "-", "1", "-", "(", "offsets", ".", "size", "(", "-", "1", ")", "-", "1", ")", "*", "self", ".", "total_stride", ")", "//", "2", "\n", "# fm_ctr = get_xy_ctr_np(offsets.size(-1), score_offset, self.total_stride)", "\n", "# fm_ctr = fm_ctr.to(offsets.device)", "\n", "fm_ctr", "=", "get_fm_center_torch", "(", "offsets", ".", "shape", "[", "-", "1", "]", ",", "score_offsets", ",", "self", ".", "total_stride", ",", "offsets", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "fm_ctr", "=", "self", ".", "fm_ctr", "\n", "", "bbox", "=", "get_box", "(", "fm_ctr", ",", "offsets", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.get_xy_ctr_np": [[16, 32], ["numpy.linspace().reshape", "y_list.repeat.repeat", "numpy.linspace().reshape", "x_list.repeat.repeat", "numpy.repeat().reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.astype", "numpy.linspace", "numpy.linspace", "numpy.concatenate", "numpy.repeat"], "function", ["None"], ["def", "get_xy_ctr_np", "(", "score_size", ",", "score_offset", ",", "total_stride", ")", ":", "\n", "    ", "\"\"\" generate coordinates on image plane for score map pixels (in numpy)\n    \"\"\"", "\n", "batch", ",", "fm_height", ",", "fm_width", "=", "1", ",", "score_size", ",", "score_size", "\n", "\n", "y_list", "=", "np", ".", "linspace", "(", "0.", ",", "fm_height", "-", "1.", ",", "fm_height", ")", ".", "reshape", "(", "1", ",", "fm_height", ",", "1", ",", "1", ")", "\n", "y_list", "=", "y_list", ".", "repeat", "(", "fm_width", ",", "axis", "=", "2", ")", "\n", "x_list", "=", "np", ".", "linspace", "(", "0.", ",", "fm_width", "-", "1.", ",", "fm_width", ")", ".", "reshape", "(", "1", ",", "1", ",", "fm_width", ",", "1", ")", "\n", "x_list", "=", "x_list", ".", "repeat", "(", "fm_height", ",", "axis", "=", "1", ")", "\n", "xy_list", "=", "score_offset", "+", "np", ".", "concatenate", "(", "(", "x_list", ",", "y_list", ")", ",", "3", ")", "*", "total_stride", "\n", "xy_ctr", "=", "np", ".", "repeat", "(", "xy_list", ",", "batch", ",", "axis", "=", "0", ")", ".", "reshape", "(", "\n", "batch", ",", "-", "1", ",", "\n", "2", ")", "# .broadcast([batch, fm_height, fm_width, 2]).reshape(batch, -1, 2)", "\n", "# TODO: consider use float32 type from the beginning of this function", "\n", "xy_ctr", "=", "torch", ".", "from_numpy", "(", "xy_ctr", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "return", "xy_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.get_fm_center_torch": [[34, 47], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "xx.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "yy.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "fm_center.reshape.reshape", "xx.unsqueeze().unsqueeze.unsqueeze", "yy.unsqueeze().unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "get_fm_center_torch", "(", "score_size", ",", "score_offset", ",", "total_stride", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "fm_height", "=", "score_size", "\n", "fm_width", "=", "score_size", "\n", "y", "=", "torch", ".", "arange", "(", "0", ",", "fm_height", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ",", "device", "=", "device", ")", "\n", "x", "=", "torch", ".", "arange", "(", "0", ",", "fm_width", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ",", "device", "=", "device", ")", "\n", "yy", ",", "xx", "=", "torch", ".", "meshgrid", "(", "y", ",", "x", ")", "\n", "\n", "xx", "=", "xx", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "yy", "=", "yy", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "fm_center", "=", "score_offset", "+", "torch", ".", "cat", "(", "[", "xx", ",", "yy", "]", ",", "dim", "=", "-", "1", ")", "*", "total_stride", "\n", "fm_center", "=", "fm_center", ".", "reshape", "(", "1", ",", "-", "1", ",", "2", ")", "\n", "\n", "return", "fm_center", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.taskhead_impl.double_conv_fc_bbox_head.get_box": [[49, 57], ["offsets.reshape.permute", "offsets.reshape.reshape", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "get_box", "(", "xy_ctr", ",", "offsets", ")", ":", "\n", "    ", "offsets", "=", "offsets", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (B, H, W, C), C=4", "\n", "offsets", "=", "offsets", ".", "reshape", "(", "offsets", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "4", ")", "\n", "xy0", "=", "(", "xy_ctr", "[", ":", ",", ":", ",", ":", "]", "-", "offsets", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "xy1", "=", "(", "xy_ctr", "[", ":", ",", ":", ",", ":", "]", "+", "offsets", "[", ":", ",", ":", ",", "2", ":", "]", ")", "\n", "bboxes_pred", "=", "torch", ".", "cat", "(", "[", "xy0", ",", "xy1", "]", ",", "2", ")", "\n", "\n", "return", "bboxes_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck.builder.build": [[12, 42], ["neck_module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "neck_module.set_hps", "neck_module.update_params", "loguru.logger.error", "exit"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck.builder.get_config": [[44, 64], ["videoanalyst.model.neck.neck_base.TASK_NECKS.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], ["\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.encoder.EncoderLayer.__init__": [[13, 18], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.LayerNorm", "torch.LayerNorm", "videoanalyst.model.utils.transformer_layers.PositionWiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "nn", ".", "MultiheadAttention", "(", "embed_dim", "=", "d_model", ",", "num_heads", "=", "n_head", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "pos_ffn", "=", "PositionWiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.encoder.EncoderLayer.forward": [[19, 27], ["encoder.EncoderLayer.slf_attn", "encoder.EncoderLayer.norm", "encoder.EncoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "mask", "=", "None", ")", ":", "\n", "        ", "enc_output", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "query", "=", "enc_input", ",", "key", "=", "enc_input", ",", "value", "=", "enc_input", ",", "\n", "attn_mask", "=", "mask", ")", "\n", "enc_output", "=", "enc_input", "+", "enc_output", "\n", "enc_output", "=", "self", ".", "norm", "(", "enc_output", ")", "\n", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "return", "enc_output", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.encoder.Encoder.__init__": [[30, 49], ["torch.Module.__init__", "videoanalyst.model.utils.transformer_layers.SpatialPositionEncodingLearned", "torch.ModuleList", "torch.ModuleList", "encoder.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "mid_channels_model", "=", "256", ",", "\n", "mid_channels_ffn", "=", "2048", ",", "\n", "num_heads", "=", "8", ",", "\n", "num_layers", "=", "8", ",", "\n", "prob_dropout", "=", "0.0", ",", "\n", "score_size", "=", "33", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "mid_channels_model", "%", "num_heads", "==", "0", "\n", "mid_channels_k", "=", "mid_channels_model", "//", "num_heads", "\n", "mid_channels_v", "=", "mid_channels_k", "\n", "\n", "self", ".", "spatial_position_encoding", "=", "SpatialPositionEncodingLearned", "(", "mid_channels_model", ",", "score_size", ")", "\n", "# self.dropout = nn.Dropout(p=prob_dropout)", "\n", "# self.layer_norm = nn.LayerNorm(mid_channels_model, eps=1e-6)", "\n", "self", ".", "encoder_layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EncoderLayer", "(", "mid_channels_model", ",", "mid_channels_ffn", ",", "num_heads", ",", "\n", "mid_channels_k", ",", "mid_channels_v", ",", "dropout", "=", "prob_dropout", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.encoder.Encoder.forward": [[50, 61], ["encoder.Encoder.spatial_position_encoding", "x.view.view.view", "x.view.view.permute().contiguous", "enc_layer", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# B, C, H, W = x.shape", "\n", "        ", "x", "=", "self", ".", "spatial_position_encoding", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "*", "x", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "# B, C, HW", "\n", "enc_output", "=", "x", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# HW, B, C", "\n", "\n", "# no need of mask if enc_output.shape is (BT, HW, C)", "\n", "for", "enc_layer", "in", "self", ".", "encoder_layers", ":", "\n", "            ", "enc_output", ",", "enc_slf_attn", "=", "enc_layer", "(", "enc_output", ")", "\n", "", "return", "enc_output", "# HW, B, C", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.decoder.DecoderLayer.__init__": [[15, 22], ["torch.Module.__init__", "videoanalyst.model.utils.multi_head_attention_topk.MultiHeadAttentionTopK", "torch.LayerNorm", "torch.LayerNorm", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.LayerNorm", "torch.LayerNorm", "videoanalyst.model.utils.transformer_layers.PositionWiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "top_k", "=", "None", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttentionTopK", "(", "embed_dim", "=", "d_model", ",", "num_heads", "=", "n_head", ",", "dropout", "=", "dropout", ",", "top_k", "=", "top_k", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "enc_attn", "=", "nn", ".", "MultiheadAttention", "(", "embed_dim", "=", "d_model", ",", "num_heads", "=", "n_head", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "pos_ffn", "=", "PositionWiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.decoder.DecoderLayer.forward": [[23, 34], ["decoder.DecoderLayer.slf_attn", "decoder.DecoderLayer.norm1", "decoder.DecoderLayer.enc_attn", "decoder.DecoderLayer.norm2", "decoder.DecoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_input", ",", "enc_output", ",", "tgt_mask", "=", "None", ",", "src_mask", "=", "None", ")", ":", "\n", "        ", "dec_output", ",", "dec_slf_attn", "=", "self", ".", "slf_attn", "(", "dec_input", ",", "dec_input", ",", "dec_input", ",", "attn_mask", "=", "tgt_mask", ")", "\n", "dec_output", "=", "dec_input", "+", "dec_output", "\n", "dec_output", "=", "self", ".", "norm1", "(", "dec_output", ")", "\n", "\n", "dec_output2", ",", "dec_enc_attn", "=", "self", ".", "enc_attn", "(", "dec_output", ",", "enc_output", ",", "enc_output", ",", "attn_mask", "=", "src_mask", ")", "\n", "dec_output2", "=", "dec_output", "+", "dec_output2", "\n", "dec_output2", "=", "self", ".", "norm2", "(", "dec_output2", ")", "\n", "\n", "dec_output2", "=", "self", ".", "pos_ffn", "(", "dec_output2", ")", "\n", "return", "dec_output2", ",", "dec_slf_attn", ",", "dec_enc_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.decoder.Decoder.__init__": [[37, 55], ["torch.Module.__init__", "videoanalyst.model.utils.transformer_layers.SpatialPositionEncodingLearned", "torch.ModuleList", "torch.ModuleList", "decoder.DecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "mid_channels_model", "=", "256", ",", "\n", "mid_channels_ffn", "=", "2048", ",", "\n", "num_heads", "=", "8", ",", "\n", "num_layers", "=", "8", ",", "\n", "prob_dropout", "=", "0.0", ",", "\n", "score_size", "=", "33", ",", "\n", "top_k", "=", "None", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "mid_channels_model", "%", "num_heads", "==", "0", "\n", "mid_channels_k", "=", "mid_channels_model", "//", "num_heads", "\n", "mid_channels_v", "=", "mid_channels_k", "\n", "\n", "self", ".", "spatial_position_encoding", "=", "SpatialPositionEncodingLearned", "(", "mid_channels_model", ",", "score_size", ")", "\n", "self", ".", "decoder_layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DecoderLayer", "(", "mid_channels_model", ",", "mid_channels_ffn", ",", "num_heads", ",", "\n", "mid_channels_k", ",", "mid_channels_v", ",", "top_k", ",", "dropout", "=", "prob_dropout", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.decoder.Decoder.forward": [[56, 69], ["decoder.Decoder.spatial_position_encoding", "pre_output.view.view.view", "pre_output.view.view.permute().contiguous", "dec_output.view.view.permute().contiguous", "dec_output.view.view.view", "dec_layer", "pre_output.view.view.permute", "dec_output.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pre_output", ",", "enc_output", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "pre_output", ".", "shape", "\n", "pre_output", "=", "self", ".", "spatial_position_encoding", "(", "pre_output", ")", "\n", "pre_output", "=", "pre_output", ".", "view", "(", "B", ",", "C", ",", "-", "1", ")", "# B, C, HW", "\n", "dec_output", "=", "pre_output", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# HW, B, C", "\n", "\n", "for", "dec_layer", "in", "self", ".", "decoder_layers", ":", "\n", "            ", "dec_output", ",", "dec_slf_attn", ",", "dec_enc_attn", "=", "dec_layer", "(", "dec_output", ",", "enc_output", ")", "\n", "\n", "", "dec_output", "=", "dec_output", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# B, C, HW", "\n", "dec_output", "=", "dec_output", ".", "view", "(", "*", "dec_output", ".", "shape", "[", ":", "2", "]", ",", "H", ",", "W", ")", "\n", "\n", "return", "dec_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.__init__": [[25, 27], ["videoanalyst.model.module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TransformerNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.update_params": [[28, 52], ["super().update_params", "encoder.Encoder", "decoder.Decoder"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "update_params", "(", ")", "\n", "mid_channels_model", "=", "self", ".", "_hyper_params", "[", "'mid_channels_model'", "]", "\n", "mid_channels_ffn", "=", "self", ".", "_hyper_params", "[", "'mid_channels_ffn'", "]", "\n", "num_heads", "=", "self", ".", "_hyper_params", "[", "'num_heads'", "]", "\n", "num_encoder_layers", "=", "self", ".", "_hyper_params", "[", "'num_encoder_layers'", "]", "\n", "num_decoder_layers", "=", "self", ".", "_hyper_params", "[", "'num_decoder_layers'", "]", "\n", "prob_dropout", "=", "self", ".", "_hyper_params", "[", "'prob_dropout'", "]", "\n", "f_z_size", "=", "self", ".", "_hyper_params", "[", "'f_z_size'", "]", "\n", "f_x_size", "=", "self", ".", "_hyper_params", "[", "'f_x_size'", "]", "\n", "top_k", "=", "self", ".", "_hyper_params", "[", "'top_k'", "]", "\n", "self", ".", "encoder", "=", "Encoder", "(", "mid_channels_model", "=", "mid_channels_model", ",", "\n", "mid_channels_ffn", "=", "mid_channels_ffn", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_layers", "=", "num_encoder_layers", ",", "\n", "prob_dropout", "=", "prob_dropout", ",", "\n", "score_size", "=", "f_z_size", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "mid_channels_model", "=", "mid_channels_model", ",", "\n", "mid_channels_ffn", "=", "mid_channels_ffn", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "num_layers", "=", "num_decoder_layers", ",", "\n", "prob_dropout", "=", "prob_dropout", ",", "\n", "score_size", "=", "f_x_size", ",", "\n", "top_k", "=", "top_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.encode": [[53, 55], ["transformer_neck.TransformerNeck.encoder"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "f_z", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "f_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.decode": [[56, 60], ["transformer_neck.TransformerNeck.decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "f_x", ",", "enc_output", ")", ":", "\n", "        ", "dec_output", "=", "self", ".", "decoder", "(", "f_x", ",", "enc_output", ")", "\n", "final_output", "=", "torch", ".", "cat", "(", "[", "dec_output", ",", "f_x", "]", ",", "dim", "=", "1", ")", "\n", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.forward": [[61, 65], ["transformer_neck.TransformerNeck.encode", "transformer_neck.TransformerNeck.decode"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.encode", "home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.decode"], ["", "def", "forward", "(", "self", ",", "f_x", ",", "f_z", ")", ":", "\n", "        ", "enc_output", "=", "self", ".", "encode", "(", "f_z", ")", "\n", "final_output", "=", "self", ".", "decode", "(", "f_x", ",", "enc_output", ")", "\n", "return", "final_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss.builder.build": [[12, 32], ["collections.OrderedDict", "loguru.logger.error", "exit", "module.get_hps", "videoanalyst.utils.misc.merge_cfg_into_hps", "module.set_hps", "module.update_params"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss.builder.get_config": [[34, 47], ["videoanalyst.model.loss.loss_base.TASK_LOSSES.items", "yacs.config.CfgNode", "list", "yacs.config.CfgNode"], "function", ["None"], ["optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.sigmoid_ce_centerness.SigmoidCrossEntropyCenterness.__init__": [[24, 28], ["module_base.ModuleBase.__init__", "utils.SafeLog", "sigmoid_ce_centerness.SigmoidCrossEntropyCenterness.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "background", "=", "0", ",", "ignore_label", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "SigmoidCrossEntropyCenterness", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "safelog", "=", "SafeLog", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"t_one\"", ",", "torch", ".", "tensor", "(", "1.", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.sigmoid_ce_centerness.SigmoidCrossEntropyCenterness.update_params": [[29, 33], ["None"], "methods", ["None"], ["", "def", "update_params", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "background", "=", "self", ".", "_hyper_params", "[", "\"background\"", "]", "\n", "self", ".", "ignore_label", "=", "self", ".", "_hyper_params", "[", "\"ignore_label\"", "]", "\n", "self", ".", "weight", "=", "self", ".", "_hyper_params", "[", "\"weight\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.sigmoid_ce_centerness.SigmoidCrossEntropyCenterness.forward": [[34, 72], ["dict", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "loss_residual.detach", "loss.sum", "torch.max", "torch.max", "torch.max", "torch.max", "mask.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_data", ",", "target_data", ")", ":", "\n", "        ", "r\"\"\"\n        Center-ness loss\n        Computation technique originated from this implementation:\n            https://www.tensorflow.org/api_docs/python/tf/nn/sigmoid_cross_entropy_with_logits\n        \n        P.S. previous implementation can be found at the commit 232141cdc5ac94602c28765c9cf173789da7415e\n\n        Arguments\n        ---------\n        pred: torch.Tensor\n            center-ness logits (BEFORE Sigmoid)\n            format: (B, HW)\n        label: torch.Tensor\n            training label\n            format: (B, HW)\n\n        Returns\n        -------\n        torch.Tensor\n            scalar loss\n            format: (,)\n        \"\"\"", "\n", "pred", "=", "pred_data", "[", "\"ctr_pred\"", "]", "\n", "label", "=", "target_data", "[", "\"ctr_gt\"", "]", "\n", "mask", "=", "(", "~", "(", "label", "==", "self", ".", "background", ")", ")", ".", "type", "(", "torch", ".", "Tensor", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pred", ",", "label", ",", "\n", "reduction", "=", "\"none\"", ")", "*", "mask", "\n", "# suppress loss residual (original vers.)", "\n", "loss_residual", "=", "F", ".", "binary_cross_entropy", "(", "label", ",", "label", ",", "\n", "reduction", "=", "\"none\"", ")", "*", "mask", "\n", "loss", "=", "loss", "-", "loss_residual", ".", "detach", "(", ")", "\n", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "/", "torch", ".", "max", "(", "mask", ".", "sum", "(", ")", ",", "\n", "self", ".", "t_one", ")", "*", "self", ".", "_hyper_params", "[", "\"weight\"", "]", "\n", "extra", "=", "dict", "(", ")", "\n", "\n", "return", "loss", ",", "extra", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.iou_loss.IOULoss.__init__": [[23, 36], ["torch.Module.__init__", "utils.SafeLog", "iou_loss.IOULoss.register_buffer", "iou_loss.IOULoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "background", "=", "0", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "weight", "=", "1.0", ",", "\n", "branch_name", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "safelog", "=", "SafeLog", "(", ")", "\n", "self", ".", "background", "=", "background", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "iou_key", "=", "\"iou_{}\"", ".", "format", "(", "branch_name", ")", "\n", "self", ".", "register_buffer", "(", "\"t_one\"", ",", "torch", ".", "tensor", "(", "1.", ",", "requires_grad", "=", "False", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"t_zero\"", ",", "torch", ".", "tensor", "(", "0.", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.iou_loss.IOULoss.forward": [[37, 66], ["mask.type().squeeze().to.type().squeeze().to.type().squeeze().to", "torch.max", "torch.max", "torch.max", "torch.max", "iou.detach.detach.detach", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "iou_loss.IOULoss.safelog", "torch.max", "torch.max", "torch.max", "torch.max", "mask.type().squeeze().to.type().squeeze().to.type().squeeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.type().squeeze().to.type().squeeze().to.sum", "mask.type().squeeze().to.type().squeeze().to.sum", "mask.type().squeeze().to.type().squeeze().to.type"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gt", ",", "cls_gt", ")", ":", "\n", "# pred = pred_data[self.name]", "\n", "# gt = target_data[\"box_gt\"]", "\n", "# cls_gt = target_data[\"cls_gt\"]", "\n", "        ", "mask", "=", "(", "(", "~", "(", "cls_gt", "==", "self", ".", "background", ")", ")", "*", "\n", "(", "~", "(", "cls_gt", "==", "self", ".", "ignore_label", ")", ")", ")", ".", "detach", "(", ")", "\n", "mask", "=", "mask", ".", "type", "(", "torch", ".", "Tensor", ")", ".", "squeeze", "(", "2", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "\n", "aog", "=", "torch", ".", "abs", "(", "gt", "[", ":", ",", ":", ",", "2", "]", "-", "gt", "[", ":", ",", ":", ",", "0", "]", "+", "\n", "1", ")", "*", "torch", ".", "abs", "(", "gt", "[", ":", ",", ":", ",", "3", "]", "-", "gt", "[", ":", ",", ":", ",", "1", "]", "+", "1", ")", "\n", "aop", "=", "torch", ".", "abs", "(", "pred", "[", ":", ",", ":", ",", "2", "]", "-", "pred", "[", ":", ",", ":", ",", "0", "]", "+", "\n", "1", ")", "*", "torch", ".", "abs", "(", "pred", "[", ":", ",", ":", ",", "3", "]", "-", "pred", "[", ":", ",", ":", ",", "1", "]", "+", "1", ")", "\n", "\n", "iw", "=", "torch", ".", "min", "(", "pred", "[", ":", ",", ":", ",", "2", "]", ",", "gt", "[", ":", ",", ":", ",", "2", "]", ")", "-", "torch", ".", "max", "(", "\n", "pred", "[", ":", ",", ":", ",", "0", "]", ",", "gt", "[", ":", ",", ":", ",", "0", "]", ")", "+", "1", "\n", "ih", "=", "torch", ".", "min", "(", "pred", "[", ":", ",", ":", ",", "3", "]", ",", "gt", "[", ":", ",", ":", ",", "3", "]", ")", "-", "torch", ".", "max", "(", "\n", "pred", "[", ":", ",", ":", ",", "1", "]", ",", "gt", "[", ":", ",", ":", ",", "1", "]", ")", "+", "1", "\n", "inter", "=", "torch", ".", "max", "(", "iw", ",", "self", ".", "t_zero", ")", "*", "torch", ".", "max", "(", "ih", ",", "self", ".", "t_zero", ")", "\n", "\n", "union", "=", "aog", "+", "aop", "-", "inter", "\n", "iou", "=", "torch", ".", "max", "(", "inter", "/", "union", ",", "self", ".", "t_zero", ")", "\n", "loss", "=", "-", "self", ".", "safelog", "(", "iou", ")", "\n", "\n", "loss", "=", "(", "loss", "*", "mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "max", "(", "mask", ".", "sum", "(", ")", ",", "self", ".", "t_one", ")", "*", "self", ".", "weight", "\n", "iou", "=", "iou", ".", "detach", "(", ")", "\n", "iou", "=", "(", "iou", "*", "mask", ")", ".", "sum", "(", ")", "/", "torch", ".", "max", "(", "mask", ".", "sum", "(", ")", ",", "self", ".", "t_one", ")", "\n", "extra", "=", "{", "self", ".", "iou_key", ":", "iou", "}", "\n", "\n", "return", "loss", ",", "extra", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.iou_loss.IOULossFC.__init__": [[75, 77], ["module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IOULossFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.iou_loss.IOULossFC.update_params": [[78, 82], ["super().update_params", "iou_loss.IOULoss"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", "IOULossFC", ",", "self", ")", ".", "update_params", "(", ")", "\n", "self", ".", "name", "=", "self", ".", "_hyper_params", "[", "'name'", "]", "\n", "self", ".", "criterion", "=", "IOULoss", "(", "weight", "=", "self", ".", "_hyper_params", "[", "'weight'", "]", ",", "branch_name", "=", "\"fc\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.iou_loss.IOULossFC.forward": [[83, 88], ["iou_loss.IOULossFC.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_data", ",", "target_data", ")", ":", "\n", "        ", "bbox_fc", "=", "pred_data", "[", "'bbox_fc'", "]", "\n", "bbox_gt", "=", "target_data", "[", "'box_gt'", "]", "\n", "cls_gt", "=", "target_data", "[", "'cls_gt'", "]", "\n", "return", "self", ".", "criterion", "(", "bbox_fc", ",", "bbox_gt", ",", "cls_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.iou_loss.IOULossConv.__init__": [[97, 99], ["module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IOULossConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.iou_loss.IOULossConv.update_params": [[100, 104], ["super().update_params", "iou_loss.IOULoss"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", "IOULossConv", ",", "self", ")", ".", "update_params", "(", ")", "\n", "self", ".", "name", "=", "self", ".", "_hyper_params", "[", "'name'", "]", "\n", "self", ".", "criterion", "=", "IOULoss", "(", "weight", "=", "self", ".", "_hyper_params", "[", "'weight'", "]", ",", "branch_name", "=", "\"conv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.iou_loss.IOULossConv.forward": [[105, 110], ["iou_loss.IOULossConv.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_data", ",", "target_data", ")", ":", "\n", "        ", "bbox_conv", "=", "pred_data", "[", "'bbox_conv'", "]", "\n", "bbox_gt", "=", "target_data", "[", "'box_gt'", "]", "\n", "cls_gt", "=", "target_data", "[", "'cls_gt'", "]", "\n", "return", "self", ".", "criterion", "(", "bbox_conv", ",", "bbox_gt", ",", "cls_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.multi_bceloss.MultiBCELoss.__init__": [[22, 24], ["module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MultiBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.multi_bceloss.MultiBCELoss.update_params": [[25, 28], ["None"], "methods", ["None"], ["", "def", "update_params", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "sub_loss_weights", "=", "self", ".", "_hyper_params", "[", "\"sub_loss_weights\"", "]", "\n", "self", ".", "weight", "=", "self", ".", "_hyper_params", "[", "\"weight\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.multi_bceloss.MultiBCELoss.forward": [[29, 45], ["zip", "dict", "len", "len", "torch.binary_cross_entropy_with_logits", "pred_data.flatten", "target_data.flatten", "torch.binary_cross_entropy_with_logits.topk", "torch.binary_cross_entropy_with_logits.mean", "int", "torch.binary_cross_entropy_with_logits.numel"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_data_list", ",", "target_data", ")", ":", "\n", "        ", "total_loss", "=", "0", "\n", "assert", "len", "(", "pred_data_list", ")", "==", "len", "(", "self", ".", "sub_loss_weights", ")", "\n", "for", "pred_data", ",", "sub_loss_weight", "in", "zip", "(", "pred_data_list", ",", "\n", "self", ".", "sub_loss_weights", ")", ":", "\n", "            ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "pred_data", ".", "flatten", "(", ")", ",", "\n", "target_data", ".", "flatten", "(", ")", ",", "\n", "reduction", "=", "\"none\"", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"top_ratio\"", "]", ">", "0", "and", "self", ".", "_hyper_params", "[", "\n", "\"top_ratio\"", "]", "<", "1.0", ":", "\n", "                ", "loss", ",", "_", "=", "loss", ".", "topk", "(", "\n", "int", "(", "loss", ".", "numel", "(", ")", "*", "self", ".", "_hyper_params", "[", "\"top_ratio\"", "]", ")", ")", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "*", "sub_loss_weight", "\n", "total_loss", "+=", "loss", "\n", "", "extra", "=", "dict", "(", ")", "\n", "return", "total_loss", "*", "self", ".", "weight", ",", "extra", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLoss.__init__": [[22, 35], ["torch.Module.__init__", "focal_loss.FocalLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "background", "=", "0", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "alpha", "=", "0.5", ",", "\n", "gamma", "=", "0.0", ",", "\n", "weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "background", "=", "background", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "register_buffer", "(", "\"t_one\"", ",", "torch", ".", "tensor", "(", "1.", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLoss.update_params": [[36, 38], ["super().update_params"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "update_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLoss.forward": [[39, 79], ["mask.type().to.type().to.type().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "vlabel.type", "torch.zeros.scatter", "torch.zeros.scatter", "onehot_[].type().to", "common_opr.common_loss.sigmoid_focal_loss_jit", "dict", "mask.type().to.type().to.type", "onehot_[].type", "torch.max", "torch.max", "torch.max", "torch.max", "positive_mask.sum", "common_opr.common_loss.sigmoid_focal_loss_jit.sum", "mask.type().to.type().to.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "label", ")", ":", "\n", "        ", "r\"\"\"\n        Focal loss\n        :param pred: shape=(B, HW, C), classification logits (BEFORE Sigmoid)\n        :param label: shape=(B, HW)\n        \"\"\"", "\n", "r\"\"\"\n        Focal loss\n        Arguments\n        ---------\n        pred: torch.Tensor\n            classification logits (BEFORE Sigmoid)\n            format: (B, HW)\n        label: torch.Tensor\n            training label\n            format: (B, HW)\n\n        Returns\n        -------\n        torch.Tensor\n            scalar loss\n            format: (,)\n        \"\"\"", "\n", "# pred = pred_data[self.name]", "\n", "# label = target_data[\"cls_gt\"]", "\n", "mask", "=", "~", "(", "label", "==", "self", ".", "ignore_label", ")", "\n", "mask", "=", "mask", ".", "type", "(", "torch", ".", "Tensor", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "vlabel", "=", "label", "*", "mask", "\n", "zero_mat", "=", "torch", ".", "zeros", "(", "pred", ".", "shape", "[", "0", "]", ",", "pred", ".", "shape", "[", "1", "]", ",", "pred", ".", "shape", "[", "2", "]", "+", "1", ")", "\n", "\n", "one_mat", "=", "torch", ".", "ones", "(", "pred", ".", "shape", "[", "0", "]", ",", "pred", ".", "shape", "[", "1", "]", ",", "pred", ".", "shape", "[", "2", "]", "+", "1", ")", "\n", "index_mat", "=", "vlabel", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "onehot_", "=", "zero_mat", ".", "scatter", "(", "2", ",", "index_mat", ",", "one_mat", ")", "\n", "onehot", "=", "onehot_", "[", ":", ",", ":", ",", "1", ":", "]", ".", "type", "(", "torch", ".", "Tensor", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "loss", "=", "sigmoid_focal_loss_jit", "(", "pred", ",", "onehot", ",", "self", ".", "alpha", ",", "self", ".", "gamma", ",", "\"none\"", ")", "\n", "positive_mask", "=", "(", "label", ">", "0", ")", ".", "type", "(", "torch", ".", "Tensor", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "loss", "=", "(", "loss", ".", "sum", "(", "dim", "=", "2", ")", "*", "mask", ".", "squeeze", "(", "2", ")", ")", ".", "sum", "(", ")", "/", "(", "torch", ".", "max", "(", "\n", "positive_mask", ".", "sum", "(", ")", ",", "self", ".", "t_one", ")", ")", "*", "self", ".", "weight", "\n", "extra", "=", "dict", "(", ")", "\n", "return", "loss", ",", "extra", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLossFC.__init__": [[90, 92], ["module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLossFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLossFC.update_params": [[93, 102], ["super().update_params", "focal_loss.FocalLoss"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLossFC", ",", "self", ")", ".", "update_params", "(", ")", "\n", "self", ".", "name", "=", "self", ".", "_hyper_params", "[", "'name'", "]", "\n", "alpha", "=", "self", ".", "_hyper_params", "[", "'alpha'", "]", "\n", "gamma", "=", "self", ".", "_hyper_params", "[", "'gamma'", "]", "\n", "weight", "=", "self", ".", "_hyper_params", "[", "'weight'", "]", "\n", "self", ".", "criterion", "=", "FocalLoss", "(", "alpha", "=", "alpha", ",", "\n", "gamma", "=", "gamma", ",", "\n", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLossFC.forward": [[103, 107], ["focal_loss.FocalLossFC.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_data", ",", "target_data", ")", ":", "\n", "        ", "cls_fc", "=", "pred_data", "[", "'cls_fc'", "]", "\n", "cls_gt", "=", "target_data", "[", "'cls_gt'", "]", "\n", "return", "self", ".", "criterion", "(", "cls_fc", ",", "cls_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLossConv.__init__": [[118, 120], ["module_base.ModuleBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLossConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLossConv.update_params": [[121, 130], ["super().update_params", "focal_loss.FocalLoss"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLossConv", ",", "self", ")", ".", "update_params", "(", ")", "\n", "self", ".", "name", "=", "self", ".", "_hyper_params", "[", "'name'", "]", "\n", "alpha", "=", "self", ".", "_hyper_params", "[", "'alpha'", "]", "\n", "gamma", "=", "self", ".", "_hyper_params", "[", "'gamma'", "]", "\n", "weight", "=", "self", ".", "_hyper_params", "[", "'weight'", "]", "\n", "self", ".", "criterion", "=", "FocalLoss", "(", "alpha", "=", "alpha", ",", "\n", "gamma", "=", "gamma", ",", "\n", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.focal_loss.FocalLossConv.forward": [[131, 135], ["focal_loss.FocalLossConv.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_data", ",", "target_data", ")", ":", "\n", "        ", "cls_conv", "=", "pred_data", "[", "'cls_conv'", "]", "\n", "cls_gt", "=", "target_data", "[", "'cls_gt'", "]", "\n", "return", "self", ".", "criterion", "(", "cls_conv", ",", "cls_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.sigmoid_ce_retina.SigmoidCrossEntropyRetina.__init__": [[25, 29], ["module_base.ModuleBase.__init__", "utils.SafeLog", "sigmoid_ce_retina.SigmoidCrossEntropyRetina.register_buffer", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "SigmoidCrossEntropyRetina", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "safelog", "=", "SafeLog", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"t_one\"", ",", "torch", ".", "tensor", "(", "1.", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.sigmoid_ce_retina.SigmoidCrossEntropyRetina.update_params": [[30, 43], ["sigmoid_ce_retina.SigmoidCrossEntropyRetina.register_buffer", "sigmoid_ce_retina.SigmoidCrossEntropyRetina.register_buffer", "torch.tensor", "torch.tensor", "float", "float"], "methods", ["None"], ["", "def", "update_params", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "background", "=", "self", ".", "_hyper_params", "[", "\"background\"", "]", "\n", "self", ".", "ignore_label", "=", "self", ".", "_hyper_params", "[", "\"ignore_label\"", "]", "\n", "self", ".", "weight", "=", "self", ".", "_hyper_params", "[", "\"weight\"", "]", "\n", "# focal loss coefficients", "\n", "self", ".", "register_buffer", "(", "\n", "\"alpha\"", ",", "\n", "torch", ".", "tensor", "(", "float", "(", "self", ".", "_hyper_params", "[", "\"alpha\"", "]", ")", ",", "\n", "requires_grad", "=", "False", ")", ")", "\n", "self", ".", "register_buffer", "(", "\n", "\"gamma\"", ",", "\n", "torch", ".", "tensor", "(", "float", "(", "self", ".", "_hyper_params", "[", "\"gamma\"", "]", ")", ",", "\n", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.sigmoid_ce_retina.SigmoidCrossEntropyRetina.forward": [[44, 93], ["mask.type().to.type().to.type().to", "torch.zeros", "torch.ones", "vlabel.type", "torch.zeros.scatter", "onehot_[].type().to", "torch.sigmoid", "dict", "sigmoid_ce_retina.SigmoidCrossEntropyRetina.safelog", "sigmoid_ce_retina.SigmoidCrossEntropyRetina.safelog", "mask.type().to.type().to.squeeze", "mask.type().to.type().to.type", "onehot_[].type", "loss.sum", "torch.max", "positive_mask.sum"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid"], ["", "def", "forward", "(", "self", ",", "pred_data", ",", "target_data", ")", ":", "\n", "        ", "r\"\"\"\n        Focal loss\n        :param pred: shape=(B, HW, C), classification logits (BEFORE Sigmoid)\n        :param label: shape=(B, HW)\n        \"\"\"", "\n", "r\"\"\"\n        Focal loss\n        Arguments\n        ---------\n        pred: torch.Tensor\n            classification logits (BEFORE Sigmoid)\n            format: (B, HW)\n        label: torch.Tensor\n            training label\n            format: (B, HW)\n\n        Returns\n        -------\n        torch.Tensor\n            scalar loss\n            format: (,)\n        \"\"\"", "\n", "pred", "=", "pred_data", "[", "\"cls_pred\"", "]", "\n", "label", "=", "target_data", "[", "\"cls_gt\"", "]", "\n", "mask", "=", "~", "(", "label", "==", "self", ".", "ignore_label", ")", "\n", "mask", "=", "mask", ".", "type", "(", "torch", ".", "Tensor", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "vlabel", "=", "label", "*", "mask", "\n", "zero_mat", "=", "torch", ".", "zeros", "(", "pred", ".", "shape", "[", "0", "]", ",", "pred", ".", "shape", "[", "1", "]", ",", "pred", ".", "shape", "[", "2", "]", "+", "1", ")", "\n", "\n", "one_mat", "=", "torch", ".", "ones", "(", "pred", ".", "shape", "[", "0", "]", ",", "pred", ".", "shape", "[", "1", "]", ",", "pred", ".", "shape", "[", "2", "]", "+", "1", ")", "\n", "index_mat", "=", "vlabel", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "\n", "onehot_", "=", "zero_mat", ".", "scatter", "(", "2", ",", "index_mat", ",", "one_mat", ")", "\n", "onehot", "=", "onehot_", "[", ":", ",", ":", ",", "1", ":", "]", ".", "type", "(", "torch", ".", "Tensor", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "pred", ")", "\n", "pos_part", "=", "(", "1", "-", "pred", ")", "**", "self", ".", "gamma", "*", "onehot", "*", "self", ".", "safelog", "(", "pred", ")", "\n", "neg_part", "=", "pred", "**", "self", ".", "gamma", "*", "(", "1", "-", "onehot", ")", "*", "self", ".", "safelog", "(", "1", "-", "pred", ")", "\n", "loss", "=", "-", "(", "self", ".", "alpha", "*", "pos_part", "+", "\n", "(", "1", "-", "self", ".", "alpha", ")", "*", "neg_part", ")", ".", "sum", "(", "dim", "=", "2", ")", "*", "mask", ".", "squeeze", "(", "2", ")", "\n", "\n", "positive_mask", "=", "(", "label", ">", "0", ")", ".", "type", "(", "torch", ".", "Tensor", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "/", "torch", ".", "max", "(", "positive_mask", ".", "sum", "(", ")", ",", "\n", "self", ".", "t_one", ")", "*", "self", ".", "_hyper_params", "[", "\"weight\"", "]", "\n", "extra", "=", "dict", "(", ")", "\n", "\n", "return", "loss", ",", "extra", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.utils.SafeLog.__init__": [[17, 20], ["module_base.ModuleBase.__init__", "utils.SafeLog.register_buffer", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SafeLog", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"t_eps\"", ",", "torch", ".", "tensor", "(", "eps", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.loss_impl.utils.SafeLog.forward": [[21, 23], ["torch.log", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "torch", ".", "log", "(", "torch", ".", "max", "(", "self", ".", "t_eps", ",", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.config.config.specify_task": [[57, 71], ["None"], "function", ["None"], ["", "def", "specify_task", "(", "cfg", ":", "CfgNode", ")", "->", "(", "str", ",", "CfgNode", ")", ":", "\n", "    ", "r\"\"\"\n    get task's short name from config, and specify task config\n\n    Args:\n        cfg (CfgNode): config\n        \n    Returns:\n        short task name, task-specified cfg\n    \"\"\"", "\n", "for", "task", "in", "task_list", ":", "\n", "        ", "if", "cfg", "[", "task", "]", "[", "'exp_name'", "]", "!=", "default_str", ":", "\n", "            ", "return", "task", ",", "cfg", "[", "task", "]", "\n", "", "", "assert", "False", ",", "\"unknown task!\"", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.config.utils.setup": [[9, 34], ["videoanalyst.utils.ensure_dir", "yacs.config.CfgNode", "os.path.join", "videoanalyst.utils.ensure_dir", "os.path.join", "videoanalyst.utils.ensure_dir", "os.path.join", "videoanalyst.utils.ensure_dir", "os.path.join", "videoanalyst.utils.ensure_dir", "os.path.join", "videoanalyst.utils.ensure_dir"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir"], ["\n", "\n", "class", "SafeLog", "(", "ModuleBase", ")", ":", "\n", "    ", "r\"\"\"\n    Safly perform log operation \n    \"\"\"", "\n", "default_hyper_params", "=", "dict", "(", ")", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SafeLog", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"t_eps\"", ",", "torch", ".", "tensor", "(", "eps", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "torch", ".", "log", "(", "torch", ".", "max", "(", "self", ".", "t_eps", ",", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.pipeline.pipeline_base.PipelineBase.__init__": [[22, 27], ["copy.deepcopy", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ":", "ModuleBase", ")", ":", "\n", "        ", "self", ".", "_hyper_params", "=", "deepcopy", "(", "\n", "self", ".", "default_hyper_params", ")", "# mapping-like object", "\n", "self", ".", "_state", "=", "dict", "(", ")", "# pipeline state", "\n", "self", ".", "_model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.pipeline.pipeline_base.PipelineBase.get_hps": [[28, 38], ["dict"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "dict", "(", ")", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.pipeline.pipeline_base.PipelineBase.set_hps": [[39, 52], ["dict"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "dict", "(", ")", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.pipeline.pipeline_base.PipelineBase.update_params": [[53, 57], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "init", "(", "self", ",", "im", ",", "state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.pipeline.pipeline_base.PipelineBase.init": [[57, 70], ["None"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "im", ",", "state", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for pipeline initialization (e.g. template feature extraction)\n        default implementation: record initial state & do nothing\n\n        Arguments\n        ---------\n        im: numpy.array\n            initial frame image\n        state:\n            initial state (usually depending on task) (e.g. bbox for track / mask for vos)\n        \"\"\"", "\n", "self", ".", "_state", "[", "'state'", "]", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.pipeline.pipeline_base.PipelineBase.update": [[71, 89], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "im", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for pipeline update\n            (e.g. output target bbox for current frame given the frame and previous target bbox)\n        default implementation: return previous target state (initial state)\n\n        Arguments\n        ---------\n        im: numpy.array\n            current frame\n\n        Returns\n        -------\n        state\n            predicted sstate (usually depending on task) (e.g. bbox for track / mask for vos)\n        \"\"\"", "\n", "state", "=", "self", ".", "_state", "[", "'state'", "]", "\n", "return", "state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.pipeline.builder.build": [[12, 57], ["pipeline.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "pipeline.set_hps", "pipeline.update_params", "loguru.logger.error", "exit"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.pipeline.builder.get_config": [[59, 79], ["videoanalyst.pipeline.pipeline_base.PIPELINES.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.FactorizedConvProblem.__init__": [[9, 30], ["optim.FactorizedConvProblem.filter_reg.concat().concat().concat", "optim.FactorizedConvProblem.filter_reg.concat", "optim.FactorizedConvProblem.filter_reg.concat().concat", "optim.FactorizedConvProblem.filter_reg.concat"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat"], ["    ", "def", "__init__", "(", "self", ",", "training_samples", ":", "TensorList", ",", "y", ":", "TensorList", ",", "\n", "use_attention", ":", "bool", ",", "filter_reg", ":", "torch", ".", "Tensor", ",", "projection_reg", ",", "\n", "sample_weights", ":", "TensorList", ",", "projection_activation", ",", "\n", "att_activation", ",", "response_activation", ",", "cfg", ")", ":", "\n", "\n", "        ", "self", ".", "training_samples", "=", "training_samples", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "sample_weights", "=", "sample_weights", "\n", "self", ".", "use_attetion", "=", "use_attention", "\n", "self", ".", "filter_reg", "=", "filter_reg", "\n", "self", ".", "projection_reg", "=", "projection_reg", "\n", "self", ".", "projection_activation", "=", "projection_activation", "\n", "self", ".", "att_activation", "=", "att_activation", "\n", "self", ".", "response_activation", "=", "response_activation", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "if", "self", ".", "use_attetion", ":", "\n", "            ", "self", ".", "diag_M", "=", "self", ".", "filter_reg", ".", "concat", "(", "projection_reg", ")", ".", "concat", "(", "\n", "projection_reg", ")", ".", "concat", "(", "projection_reg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "diag_M", "=", "self", ".", "filter_reg", ".", "concat", "(", "projection_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.FactorizedConvProblem.__call__": [[31, 91], ["utils.operation.conv1x1().apply", "utils.operation.conv2d().apply", "utils.operation.conv2d().apply.extend", "utils.operation.conv2d().apply.extend", "optim.FactorizedConvProblem.sample_weights.sqrt().view", "utils.operation.conv2d().apply.extend", "utils.operation.conv2d().apply.extend", "utils.operation.conv1x1", "utils.operation.adaptive_avg_pool2d", "utils.operation.conv1x1().apply", "utils.operation.sigmoid", "utils.TensorList", "utils.TensorList", "utils.operation.matmul", "utils.operation.matmul", "utils.operation.conv2d", "optim.FactorizedConvProblem.filter_reg.apply", "optim.FactorizedConvProblem.projection_reg.apply", "utils.operation.conv1x1", "utils.operation.spatial_attention", "NotImplementedError", "optim.FactorizedConvProblem.sample_weights.sqrt", "optim.FactorizedConvProblem.projection_reg.apply", "optim.FactorizedConvProblem.projection_reg.apply", "len", "len", "utils.operation.conv1x1", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "compressed_samples[].size", "compressed_samples[].size", "compressed_samples[].size", "compressed_samples[].size", "compressed_samples[].size"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv1x1", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.adaptive_avg_pool2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv1x1", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.spatial_attention", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv1x1"], ["", "", "def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", ":", "\n", "\n", "        ", "if", "self", ".", "use_attetion", ":", "\n", "            ", "filter", "=", "x", "[", ":", "1", "]", "\n", "fc2", "=", "x", "[", "1", ":", "2", "]", "\n", "fc1", "=", "x", "[", "2", ":", "3", "]", "\n", "P", "=", "x", "[", "3", ":", "4", "]", "\n", "", "else", ":", "\n", "            ", "filter", "=", "x", "[", ":", "len", "(", "x", ")", "//", "2", "]", "# w2 in paper", "\n", "P", "=", "x", "[", "len", "(", "x", ")", "//", "2", ":", "]", "# w1 in paper", "\n", "", "cfg", "=", "self", ".", "cfg", "\n", "\n", "# Compression module", "\n", "compressed_samples", "=", "operation", ".", "conv1x1", "(", "self", ".", "training_samples", ",", "P", ")", ".", "apply", "(", "\n", "self", ".", "projection_activation", ")", "\n", "\n", "# Attention module", "\n", "if", "self", ".", "use_attetion", ":", "\n", "            ", "if", "cfg", "[", "\"channel_attention\"", "]", ":", "\n", "                ", "global_average", "=", "operation", ".", "adaptive_avg_pool2d", "(", "\n", "compressed_samples", ",", "1", ")", "\n", "temp_variables", "=", "operation", ".", "conv1x1", "(", "global_average", ",", "fc1", ")", ".", "apply", "(", "\n", "self", ".", "att_activation", ")", "\n", "channel_attention", "=", "operation", ".", "sigmoid", "(", "\n", "operation", ".", "conv1x1", "(", "temp_variables", ",", "fc2", ")", ")", "\n", "", "else", ":", "\n", "                ", "channel_attention", "=", "TensorList", "(", "[", "\n", "torch", ".", "zeros", "(", "compressed_samples", "[", "0", "]", ".", "size", "(", "0", ")", ",", "\n", "compressed_samples", "[", "0", "]", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "]", ")", "\n", "\n", "", "if", "cfg", "[", "\"spatial_attention\"", "]", "==", "'none'", ":", "\n", "                ", "spatial_attention", "=", "TensorList", "(", "[", "\n", "torch", ".", "zeros", "(", "compressed_samples", "[", "0", "]", ".", "size", "(", "0", ")", ",", "1", ",", "\n", "compressed_samples", "[", "0", "]", ".", "size", "(", "2", ")", ",", "\n", "compressed_samples", "[", "0", "]", ".", "size", "(", "3", ")", ")", ".", "cuda", "(", ")", "\n", "]", ")", "\n", "", "elif", "cfg", "[", "\"spatial_attention\"", "]", "==", "'pool'", ":", "\n", "                ", "spatial_attention", "=", "operation", ".", "spatial_attention", "(", "\n", "compressed_samples", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'No spatial attention Implemented'", ")", "\n", "\n", "", "compressed_samples", "=", "operation", ".", "matmul", "(", "compressed_samples", ",", "spatial_attention", ")", "+", "operation", ".", "matmul", "(", "compressed_samples", ",", "channel_attention", ")", "\n", "\n", "# Filter module", "\n", "", "residuals", "=", "operation", ".", "conv2d", "(", "compressed_samples", ",", "filter", ",", "\n", "mode", "=", "'same'", ")", ".", "apply", "(", "\n", "self", ".", "response_activation", ")", "\n", "residuals", "=", "residuals", "-", "self", ".", "y", "\n", "residuals", "=", "self", ".", "sample_weights", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "residuals", "\n", "\n", "residuals", ".", "extend", "(", "self", ".", "filter_reg", ".", "apply", "(", "math", ".", "sqrt", ")", "*", "filter", ")", "\n", "if", "self", ".", "use_attetion", ":", "\n", "            ", "residuals", ".", "extend", "(", "self", ".", "projection_reg", ".", "apply", "(", "math", ".", "sqrt", ")", "*", "fc2", ")", "\n", "residuals", ".", "extend", "(", "self", ".", "projection_reg", ".", "apply", "(", "math", ".", "sqrt", ")", "*", "fc1", ")", "\n", "", "residuals", ".", "extend", "(", "self", ".", "projection_reg", ".", "apply", "(", "math", ".", "sqrt", ")", "*", "P", ")", "\n", "\n", "return", "residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.FactorizedConvProblem.ip_input": [[92, 133], ["utils.operation.conv2d().view", "utils.operation.conv2d().view", "utils.operation.conv2d().view", "utils.operation.conv2d().view", "utils.operation.conv2d().view.concat().concat().concat", "utils.operation.conv2d().view", "utils.operation.conv2d().view", "utils.operation.conv2d().view.concat", "utils.operation.conv2d().view.clone", "len", "utils.operation.conv2d().view.clone", "utils.operation.conv2d", "utils.operation.conv2d", "utils.operation.conv2d", "utils.operation.conv2d", "utils.operation.conv2d().view.concat().concat", "utils.operation.conv2d", "utils.operation.conv2d", "a_f2.view", "b_f2.view", "a_f1.view", "b_f1.view", "a_P.view", "b_P.view", "utils.operation.conv2d().view.clone", "a_P.view", "b_P.view", "utils.operation.conv2d().view.concat", "utils.operation.conv2d().view.clone"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat"], ["", "def", "ip_input", "(", "self", ",", "a", ":", "TensorList", ",", "b", ":", "TensorList", ")", ":", "\n", "\n", "        ", "if", "self", ".", "use_attetion", ":", "\n", "            ", "a_filter", "=", "a", "[", ":", "1", "]", "\n", "a_f2", "=", "a", "[", "1", ":", "2", "]", "\n", "a_f1", "=", "a", "[", "2", ":", "3", "]", "\n", "a_P", "=", "a", "[", "3", ":", "]", "\n", "b_filter", "=", "b", "[", ":", "1", "]", "\n", "b_f2", "=", "b", "[", "1", ":", "2", "]", "\n", "b_f1", "=", "b", "[", "2", ":", "3", "]", "\n", "b_P", "=", "b", "[", "3", ":", "]", "\n", "\n", "ip_out", "=", "operation", ".", "conv2d", "(", "a_filter", ",", "b_filter", ")", ".", "view", "(", "-", "1", ")", "\n", "ip_out", "+=", "operation", ".", "conv2d", "(", "a_f2", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "\n", "b_f2", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "ip_out", "+=", "operation", ".", "conv2d", "(", "a_f1", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "\n", "b_f1", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "ip_out", "+=", "operation", ".", "conv2d", "(", "a_P", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "\n", "b_P", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "ip_out", ".", "concat", "(", "ip_out", ".", "clone", "(", ")", ")", ".", "concat", "(", "ip_out", ".", "clone", "(", ")", ")", ".", "concat", "(", "\n", "ip_out", ".", "clone", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "num", "=", "len", "(", "a", ")", "//", "2", "# Number of filters", "\n", "a_filter", "=", "a", "[", ":", "num", "]", "\n", "b_filter", "=", "b", "[", ":", "num", "]", "\n", "a_P", "=", "a", "[", "num", ":", "]", "\n", "b_P", "=", "b", "[", "num", ":", "]", "\n", "\n", "# Filter inner product", "\n", "# ip_out = a_filter.reshape(-1) @ b_filter.reshape(-1)", "\n", "ip_out", "=", "operation", ".", "conv2d", "(", "a_filter", ",", "b_filter", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Add projection matrix part", "\n", "# ip_out += a_P.reshape(-1) @ b_P.reshape(-1)", "\n", "ip_out", "+=", "operation", ".", "conv2d", "(", "a_P", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ",", "\n", "b_P", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Have independent inner products for each filter", "\n", "return", "ip_out", ".", "concat", "(", "ip_out", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.FactorizedConvProblem.M1": [[134, 137], ["None"], "methods", ["None"], ["", "", "def", "M1", "(", "self", ",", "x", ":", "TensorList", ")", ":", "\n", "# factorized convolution", "\n", "        ", "return", "x", "/", "self", ".", "diag_M", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.ConvProblem.__init__": [[140, 148], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "training_samples", ":", "TensorList", ",", "y", ":", "TensorList", ",", "\n", "filter_reg", ":", "torch", ".", "Tensor", ",", "sample_weights", ":", "TensorList", ",", "\n", "response_activation", ")", ":", "\n", "        ", "self", ".", "training_samples", "=", "training_samples", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "filter_reg", "=", "filter_reg", "\n", "self", ".", "sample_weights", "=", "sample_weights", "\n", "self", ".", "response_activation", "=", "response_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.ConvProblem.__call__": [[149, 166], ["utils.operation.conv2d().apply", "utils.operation.conv2d().apply.extend", "optim.ConvProblem.sample_weights.sqrt().view", "utils.operation.conv2d", "optim.ConvProblem.filter_reg.apply", "optim.ConvProblem.sample_weights.sqrt"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply"], ["", "def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", ":", "\n", "        ", "\"\"\"\n        Compute residuals\n        :param x: [filters]\n        :return: [data_terms, filter_regularizations]\n        \"\"\"", "\n", "# Do convolution and compute residuals", "\n", "residuals", "=", "operation", ".", "conv2d", "(", "self", ".", "training_samples", ",", "x", ",", "\n", "mode", "=", "'same'", ")", ".", "apply", "(", "\n", "self", ".", "response_activation", ")", "\n", "residuals", "=", "residuals", "-", "self", ".", "y", "\n", "residuals", "=", "self", ".", "sample_weights", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "residuals", "\n", "\n", "# Add regularization for projection matrix", "\n", "residuals", ".", "extend", "(", "self", ".", "filter_reg", ".", "apply", "(", "math", ".", "sqrt", ")", "*", "x", ")", "\n", "\n", "return", "residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.optim.ConvProblem.ip_input": [[167, 171], ["utils.operation.conv2d().view", "utils.operation.conv2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d"], ["", "def", "ip_input", "(", "self", ",", "a", ":", "TensorList", ",", "b", ":", "TensorList", ")", ":", "\n", "# return a.reshape(-1) @ b.reshape(-1)", "\n", "# return (a * b).sum()", "\n", "        ", "return", "operation", ".", "conv2d", "(", "a", ",", "b", ")", ".", "view", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.__init__": [[17, 21], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.initialize": [[22, 80], ["torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.TensorList", "utils.TensorList", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.sqrt", "base_classifier.BaseClassifier.init_learning", "base_classifier.BaseClassifier.generate_init_samples", "base_classifier.BaseClassifier.init_projection_matrix", "base_classifier.BaseClassifier.init_label_function", "base_classifier.BaseClassifier.init_memory", "base_classifier.BaseClassifier.init_optimization", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "base_classifier.BaseClassifier.init_attention_layer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_learning", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.generate_init_samples", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_projection_matrix", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_label_function", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_memory", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_optimization", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_attention_layer"], ["", "def", "initialize", "(", "self", ",", "image", ",", "state", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "# Initialize some stuff", "\n", "self", ".", "frame_num", "=", "1", "\n", "\n", "self", ".", "img_sample_sz", "=", "torch", ".", "round", "(", "\n", "torch", ".", "Tensor", "(", "[", "cfg", "[", "\"x_size\"", "]", ",", "cfg", "[", "\"x_size\"", "]", "]", ")", ")", "\n", "raw_fea_size", "=", "cfg", "[", "\"raw_fea_size\"", "]", "\n", "self", ".", "output_sz", "=", "torch", ".", "Tensor", "(", "(", "cfg", "[", "\"x_size\"", "]", ",", "cfg", "[", "\"x_size\"", "]", ")", ")", "\n", "self", ".", "feature_sz", "=", "TensorList", "(", "\n", "[", "torch", ".", "Tensor", "(", "[", "raw_fea_size", ",", "raw_fea_size", "]", ")", "]", ")", "\n", "self", ".", "kernel_size", "=", "TensorList", "(", "[", "cfg", "[", "\"z_kernel_size\"", "]", "]", ")", "\n", "\n", "# Get all geometry information", "\n", "self", ".", "pos", "=", "torch", ".", "Tensor", "(", "\n", "[", "state", "[", "1", "]", "+", "(", "state", "[", "3", "]", "-", "1", ")", "/", "2", ",", "state", "[", "0", "]", "+", "(", "state", "[", "2", "]", "-", "1", ")", "/", "2", "]", ")", "\n", "self", ".", "target_sz", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "3", "]", ",", "state", "[", "2", "]", "]", ")", "\n", "\n", "wc_z", "=", "self", ".", "target_sz", "[", "1", "]", "+", "cfg", "[", "\"context_amount\"", "]", "*", "sum", "(", "self", ".", "target_sz", ")", "\n", "hc_z", "=", "self", ".", "target_sz", "[", "0", "]", "+", "cfg", "[", "\"context_amount\"", "]", "*", "sum", "(", "self", ".", "target_sz", ")", "\n", "s_z", "=", "np", ".", "sqrt", "(", "wc_z", "*", "hc_z", ")", "\n", "self", ".", "scale", "=", "cfg", "[", "\"z_size\"", "]", "/", "s_z", "\n", "\n", "# hinge mask", "\n", "self", ".", "use_attention_layer", "=", "cfg", "[", "\"use_attention_layer\"", "]", "and", "(", "\n", "cfg", "[", "\"channel_attention\"", "]", "or", "cfg", "[", "\"spatial_attention\"", "]", "!=", "'none'", ")", "\n", "\n", "# Optimization options", "\n", "self", ".", "precond_learning_rate", "=", "cfg", "[", "\"precond_learning_rate\"", "]", "\n", "self", ".", "CG_forgetting_rate", "=", "cfg", "[", "\"CG_forgetting_rate\"", "]", "\n", "if", "not", "self", ".", "CG_forgetting_rate", "or", "self", ".", "precond_learning_rate", ">=", "1", ":", "\n", "            ", "self", ".", "direction_forget_factor", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "direction_forget_factor", "=", "(", "\n", "1", "-", "self", ".", "precond_learning_rate", ")", "**", "self", ".", "CG_forgetting_rate", "\n", "\n", "# Initialize some learning things", "\n", "", "self", ".", "init_learning", "(", ")", "\n", "\n", "# Extract and transform sample", "\n", "train_x", ",", "aug_imgs", "=", "self", ".", "generate_init_samples", "(", "image", ")", "\n", "self", ".", "aug_imgs", "=", "aug_imgs", "\n", "\n", "# Initialize projection matrix", "\n", "self", ".", "init_projection_matrix", "(", "train_x", ")", "\n", "\n", "# Generate label function", "\n", "init_y", "=", "self", ".", "init_label_function", "(", "train_x", ")", "\n", "\n", "# Init memory", "\n", "self", ".", "init_memory", "(", "train_x", ")", "\n", "\n", "# Init attention layer", "\n", "if", "self", ".", "use_attention_layer", ":", "\n", "            ", "self", ".", "init_attention_layer", "(", "train_x", ")", "\n", "\n", "# Init optimizer and do initial optimization", "\n", "", "self", ".", "init_optimization", "(", "train_x", ",", "init_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_optimization": [[81, 224], ["utils.TensorList", "base_classifier.BaseClassifier.project_sample", "zip", "optim.ConvProblem", "base_classifier.BaseClassifier.filter_optimizer.run", "utils.TensorList", "optim.FactorizedConvProblem", "isinstance", "utils.optimization.ConjugateGradient", "base_classifier.BaseClassifier.filter_optimizer.run", "x.new_zeros", "ValueError", "base_classifier.BaseClassifier.filter.concat().concat().concat", "base_classifier.BaseClassifier.filter.concat", "utils.optimization.GaussNewtonCG", "base_classifier.BaseClassifier.joint_optimizer.run", "base_classifier.BaseClassifier.joint_optimizer.run", "zip", "RuntimeError", "utils.optimization.GradientDescent", "zip", "f.normal_", "utils.optimization.GradientDescentL2", "base_classifier.BaseClassifier.filter.concat().concat", "utils.optimization.NewtonCG", "open", "f.write", "f.numel", "utils.optimization.GradientDescent", "base_classifier.BaseClassifier.filter.concat", "v.item"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.project_sample", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.concat"], ["", "def", "init_optimization", "(", "self", ",", "train_x", ",", "init_y", ")", ":", "\n", "# Initialize filter", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "filter_init_method", "=", "cfg", "[", "\"filter_init_method\"", "]", "\n", "self", ".", "filter", "=", "TensorList", "(", "[", "\n", "x", ".", "new_zeros", "(", "1", ",", "cdim", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ")", "for", "x", ",", "cdim", ",", "sz", "in", "zip", "(", "\n", "train_x", ",", "self", ".", "compressed_dim", ",", "self", ".", "kernel_size", ")", "\n", "]", ")", "\n", "if", "filter_init_method", "==", "'zeros'", ":", "\n", "            ", "pass", "\n", "", "elif", "filter_init_method", "==", "'randn'", ":", "\n", "            ", "for", "f", "in", "self", ".", "filter", ":", "\n", "                ", "f", ".", "normal_", "(", "0", ",", "1", "/", "f", ".", "numel", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown \"filter_init_method\"'", ")", "\n", "\n", "# Get parameters", "\n", "", "self", ".", "update_projection_matrix", "=", "cfg", "[", "\"update_projection_matrix\"", "]", "and", "cfg", "[", "\n", "\"use_projection_matrix\"", "]", "\n", "optimizer", "=", "cfg", "[", "\"optimizer\"", "]", "\n", "# Setup factorized joint optimization", "\n", "plot_show", "=", "cfg", "[", "\"online_debug_show\"", "]", "\n", "if", "self", ".", "update_projection_matrix", ":", "\n", "            ", "self", ".", "projection_reg", "=", "TensorList", "(", "[", "cfg", "[", "\"projection_reg\"", "]", "]", ")", "\n", "\n", "self", ".", "joint_problem", "=", "FactorizedConvProblem", "(", "\n", "self", ".", "init_training_samples", ",", "\n", "init_y", ",", "\n", "self", ".", "use_attention_layer", ",", "\n", "self", ".", "filter_reg", ",", "\n", "self", ".", "projection_reg", ",", "\n", "self", ".", "init_sample_weights", ",", "\n", "self", ".", "projection_activation", ",", "\n", "self", ".", "att_activation", ",", "\n", "self", ".", "response_activation", ",", "\n", "cfg", "=", "self", ".", "cfg", ")", "\n", "\n", "# Variable containing both filter and projection matrix", "\n", "if", "self", ".", "use_attention_layer", ":", "\n", "                ", "joint_var", "=", "self", ".", "filter", ".", "concat", "(", "self", ".", "channel_att_fc2", ")", ".", "concat", "(", "\n", "self", ".", "channel_att_fc1", ")", ".", "concat", "(", "self", ".", "projection_matrix", ")", "\n", "", "else", ":", "\n", "                ", "joint_var", "=", "self", ".", "filter", ".", "concat", "(", "self", ".", "projection_matrix", ")", "\n", "\n", "# Initialize optimizer", "\n", "", "if", "optimizer", "==", "'GaussNewtonCG'", ":", "\n", "                ", "self", ".", "joint_optimizer", "=", "GaussNewtonCG", "(", "\n", "self", ".", "joint_problem", ",", "\n", "joint_var", ",", "\n", "plotting", "=", "plot_show", ",", "\n", "analyze", "=", "cfg", "[", "\"analyze_convergence\"", "]", ",", "\n", "fig_num", "=", "(", "12", ",", "13", ",", "14", ")", ")", "\n", "", "elif", "optimizer", "==", "'GradientDescentL2'", ":", "\n", "                ", "self", ".", "joint_optimizer", "=", "GradientDescentL2", "(", "\n", "self", ".", "joint_problem", ",", "\n", "joint_var", ",", "\n", "cfg", "[", "\"optimizer_step_length\"", "]", ",", "\n", "cfg", "[", "\"optimizer_momentum\"", "]", ",", "\n", "plotting", "=", "plot_show", ",", "\n", "debug", "=", "cfg", "[", "\"analyze_convergence\"", "]", ",", "\n", "fig_num", "=", "(", "12", ",", "13", ")", ")", "\n", "", "elif", "optimizer", "==", "'NewtonCG'", ":", "\n", "                ", "self", ".", "joint_optimizer", "=", "NewtonCG", "(", "\n", "self", ".", "joint_problem", ",", "\n", "joint_var", ",", "\n", "plotting", "=", "plot_show", ",", "\n", "analyze", "=", "cfg", "[", "\"analyze_convergence\"", "]", ",", "\n", "fig_num", "=", "(", "12", ",", "13", ",", "14", ")", ")", "\n", "", "elif", "optimizer", "==", "'GradientDescent'", ":", "\n", "                ", "self", ".", "joint_optimizer", "=", "GradientDescent", "(", "\n", "self", ".", "joint_problem", ",", "\n", "joint_var", ",", "\n", "cfg", "[", "\"optimizer_step_length\"", "]", ",", "\n", "cfg", "[", "\"optimizer_momentum\"", "]", ",", "\n", "plotting", "=", "plot_show", ",", "\n", "debug", "=", "cfg", "[", "\"analyze_convergence\"", "]", ",", "\n", "fig_num", "=", "(", "12", ",", "13", ")", ")", "\n", "\n", "# Do joint optimization", "\n", "", "if", "isinstance", "(", "cfg", "[", "\"init_CG_iter\"", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "self", ".", "joint_optimizer", ".", "run", "(", "cfg", "[", "\"init_CG_iter\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "joint_optimizer", ".", "run", "(", "\n", "cfg", "[", "\"init_CG_iter\"", "]", "//", "cfg", "[", "\"init_GN_iter\"", "]", ",", "\n", "cfg", "[", "\"init_GN_iter\"", "]", ")", "\n", "\n", "", "if", "cfg", "[", "\"analyze_convergence\"", "]", ":", "\n", "                ", "opt_name", "=", "'CG'", "if", "cfg", "[", "\"CG_optimizer\"", "]", "else", "'GD'", "\n", "for", "val_name", ",", "values", "in", "zip", "(", "[", "'loss'", ",", "'gradient'", "]", ",", "[", "\n", "self", ".", "joint_optimizer", ".", "losses", ",", "\n", "self", ".", "joint_optimizer", ".", "gradient_mags", "\n", "]", ")", ":", "\n", "                    ", "val_str", "=", "' '", ".", "join", "(", "\n", "[", "'{:.8e}'", ".", "format", "(", "v", ".", "item", "(", ")", ")", "for", "v", "in", "values", "]", ")", "\n", "file_name", "=", "'{}_{}.txt'", ".", "format", "(", "opt_name", ",", "val_name", ")", "\n", "with", "open", "(", "file_name", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "val_str", "+", "'\\n'", ")", "\n", "", "", "raise", "RuntimeError", "(", "'Exiting'", ")", "\n", "\n", "# Re-project samples with the new projection/attention layer", "\n", "", "", "compressed_samples", "=", "self", ".", "project_sample", "(", "self", ".", "init_training_samples", ",", "\n", "self", ".", "projection_matrix", ")", "\n", "for", "train_samp", ",", "init_samp", "in", "zip", "(", "self", ".", "training_samples", ",", "\n", "compressed_samples", ")", ":", "\n", "            ", "train_samp", "[", ":", "init_samp", ".", "shape", "[", "0", "]", ",", "...", "]", "=", "init_samp", "\n", "\n", "# Initialize optimizer", "\n", "", "self", ".", "conv_problem", "=", "ConvProblem", "(", "self", ".", "training_samples", ",", "self", ".", "y", ",", "\n", "self", ".", "filter_reg", ",", "self", ".", "sample_weights", ",", "\n", "self", ".", "response_activation", ")", "\n", "\n", "if", "optimizer", "==", "'GaussNewtonCG'", ":", "\n", "            ", "self", ".", "filter_optimizer", "=", "ConjugateGradient", "(", "\n", "self", ".", "conv_problem", ",", "\n", "self", ".", "filter", ",", "\n", "fletcher_reeves", "=", "cfg", "[", "\"fletcher_reeves\"", "]", ",", "\n", "direction_forget_factor", "=", "self", ".", "direction_forget_factor", ",", "\n", "debug", "=", "plot_show", ",", "\n", "fig_num", "=", "(", "12", ",", "13", ")", ")", "\n", "", "elif", "optimizer", "==", "'GradientDescent'", ":", "\n", "            ", "self", ".", "filter_optimizer", "=", "GradientDescent", "(", "\n", "self", ".", "conv_problem", ",", "\n", "self", ".", "filter", ",", "\n", "cfg", "[", "\"optimizer_step_length\"", "]", ",", "\n", "cfg", "[", "\"optimizer_momentum\"", "]", ",", "\n", "debug", "=", "plot_show", ",", "\n", "fig_num", "=", "12", ")", "\n", "\n", "# Transfer losses from previous optimization", "\n", "", "if", "self", ".", "update_projection_matrix", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "residuals", "=", "self", ".", "joint_optimizer", ".", "residuals", "\n", "self", ".", "filter_optimizer", ".", "losses", "=", "self", ".", "joint_optimizer", ".", "losses", "\n", "\n", "", "if", "not", "self", ".", "update_projection_matrix", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "run", "(", "cfg", "[", "\"init_CG_iter\"", "]", ")", "\n", "\n", "# Post optimization", "\n", "", "self", ".", "filter_optimizer", ".", "run", "(", "cfg", "[", "\"post_init_CG_iter\"", "]", ")", "\n", "\n", "# Free memory", "\n", "del", "self", ".", "init_training_samples", "\n", "if", "self", ".", "use_projection_matrix", ":", "\n", "            ", "del", "self", ".", "joint_problem", ",", "self", ".", "joint_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.track": [[225, 245], ["base_classifier.BaseClassifier.pos.round", "base_classifier.BaseClassifier.extract_processed_sample", "base_classifier.BaseClassifier.apply_filter", "base_classifier.BaseClassifier.localize_target", "utils.plotting.show_tensor", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.extract_processed_sample", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.apply_filter", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.localize_target", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.plotting.show_tensor"], ["", "", "def", "track", "(", "self", ",", "scale_idx", "=", "None", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "\n", "self", ".", "frame_num", "+=", "1", "\n", "\n", "# Get infer sample without shift", "\n", "self", ".", "sample_pos", "=", "self", ".", "pos", ".", "round", "(", ")", "\n", "self", ".", "feat_x", "=", "self", ".", "extract_processed_sample", "(", "scale_idx", "=", "scale_idx", ")", "\n", "\n", "# Compute scores", "\n", "scores_raw", "=", "self", ".", "apply_filter", "(", "self", ".", "feat_x", ")", "\n", "s", ",", "flag", "=", "self", ".", "localize_target", "(", "scores_raw", ")", "\n", "\n", "if", "cfg", "[", "\"online_debug_show\"", "]", ":", "\n", "            ", "show_tensor", "(", "s", ",", "\n", "5", ",", "\n", "title", "=", "'Classification Max score = {:.2f}'", ".", "format", "(", "\n", "torch", ".", "max", "(", "s", ")", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "return", "flag", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.update": [[246, 276], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "base_classifier.BaseClassifier.get_label_function", "utils.TensorList", "base_classifier.BaseClassifier.update_memory", "base_classifier.BaseClassifier.filter_optimizer.run", "base_classifier.BaseClassifier.filter_optimizer.run"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.get_label_function", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.update_memory", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "update", "(", "self", ",", "state", ",", "scale_z", ",", "flag", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "\n", "if", "flag", "!=", "'not_found'", ":", "\n", "            ", "self", ".", "pos", "=", "torch", ".", "Tensor", "(", "[", "\n", "state", "[", "1", "]", "+", "(", "state", "[", "3", "]", "-", "1", ")", "/", "2.", ",", "state", "[", "0", "]", "+", "(", "state", "[", "2", "]", "-", "1", ")", "/", "2.", "\n", "]", ")", "\n", "self", ".", "target_sz", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "3", "]", ",", "state", "[", "2", "]", "]", ")", "\n", "\n", "# Check flags and set learning rate if hard negative", "\n", "", "update_flag", "=", "flag", "not", "in", "[", "'not_found'", ",", "'uncertain'", "]", "\n", "hard_negative", "=", "(", "flag", "==", "'hard_negative'", ")", "\n", "learning_rate", "=", "cfg", "[", "\n", "\"hard_negative_learning_rate\"", "]", "if", "hard_negative", "else", "cfg", "[", "\n", "\"precond_learning_rate\"", "]", "\n", "\n", "if", "update_flag", ":", "\n", "# Create label for sample", "\n", "            ", "train_y", "=", "self", ".", "get_label_function", "(", "self", ".", "sample_pos", ",", "scale_z", ",", "\n", "self", ".", "target_sz", ")", "\n", "train_x", "=", "TensorList", "(", "[", "x", "for", "x", "in", "self", ".", "feat_x", "]", ")", "\n", "\n", "# Update memory", "\n", "self", ".", "update_memory", "(", "train_x", ",", "train_y", ",", "learning_rate", ")", "\n", "\n", "# Train filter", "\n", "", "if", "hard_negative", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "run", "(", "cfg", "[", "\"hard_negative_CG_iter\"", "]", ")", "\n", "", "elif", "(", "self", ".", "frame_num", "-", "1", ")", "%", "cfg", "[", "\"train_skipping\"", "]", "==", "0", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "run", "(", "cfg", "[", "\"CG_iter\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.apply_filter": [[277, 279], ["utils.operation.conv2d"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d"], ["", "", "def", "apply_filter", "(", "self", ",", "sample_x", ":", "TensorList", ")", ":", "\n", "        ", "return", "operation", ".", "conv2d", "(", "sample_x", ",", "self", ".", "filter", ",", "mode", "=", "'same'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.localize_target": [[280, 304], ["enumerate", "utils.fourier.sum_fs", "utils.fourier.sample_fs().squeeze", "utils.fourier.cfft2", "zip", "utils.fourier.shift_fs", "base_classifier.BaseClassifier.localize_advanced", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scores_raw.size", "scores_raw.size", "utils.fourier.sample_fs", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.sum_fs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.cfft2", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.shift_fs", "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.localize_advanced", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.sample_fs"], ["", "def", "localize_target", "(", "self", ",", "scores_raw", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "sf_weighted", "=", "fourier", ".", "cfft2", "(", "scores_raw", ")", "/", "(", "scores_raw", ".", "size", "(", "2", ")", "*", "\n", "scores_raw", ".", "size", "(", "3", ")", ")", "\n", "for", "i", ",", "(", "sz", ",", "ksz", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "feature_sz", ",", "self", ".", "kernel_size", ")", ")", ":", "\n", "            ", "sf_weighted", "[", "i", "]", "=", "fourier", ".", "shift_fs", "(", "\n", "sf_weighted", "[", "i", "]", ",", "\n", "math", ".", "pi", "*", "(", "1", "-", "torch", ".", "Tensor", "(", "[", "ksz", "[", "0", "]", "%", "2", ",", "ksz", "[", "1", "]", "%", "2", "]", ")", "/", "sz", ")", ")", "\n", "\n", "", "scores_fs", "=", "fourier", ".", "sum_fs", "(", "sf_weighted", ")", "\n", "scores", "=", "fourier", ".", "sample_fs", "(", "scores_fs", ",", "None", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "cfg", "[", "\"advanced_localization\"", "]", ":", "\n", "            ", "return", "self", ".", "localize_advanced", "(", "scores", ")", "\n", "\n", "# Shift the score output for visualization purposes", "\n", "", "if", "cfg", "[", "\"online_debug_show\"", "]", ":", "\n", "            ", "sz", "=", "scores", ".", "shape", "[", "-", "2", ":", "]", "\n", "scores", "=", "torch", ".", "cat", "(", "\n", "[", "scores", "[", "...", ",", "sz", "[", "0", "]", "//", "2", ":", ",", ":", "]", ",", "scores", "[", "...", ",", ":", "sz", "[", "0", "]", "//", "2", ",", ":", "]", "]", ",", "-", "2", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "\n", "[", "scores", "[", "...", ",", ":", ",", "sz", "[", "1", "]", "//", "2", ":", "]", ",", "scores", "[", "...", ",", ":", ",", ":", "sz", "[", "1", "]", "//", "2", "]", "]", ",", "-", "1", ")", "\n", "\n", "", "return", "scores", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.localize_advanced": [[305, 371], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.dcf.max2d", "max_disp1.float().cpu().view.float().cpu().view.float().cpu().view", "max", "min", "max", "min", "torch.cat.clone", "torch.cat.clone", "torch.cat.clone", "utils.dcf.max2d", "max_disp2.float().cpu().view.float().cpu().view.float().cpu().view", "max_score1.item", "round", "round", "round", "round", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "max_disp1.float().cpu().view.float().cpu().view.float().cpu", "max_disp2.float().cpu().view.float().cpu().view.float().cpu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "max_disp1[].item", "max_disp1[].item", "math.sqrt", "max_disp1.float().cpu().view.float().cpu().view.float", "target_neigh_sz[].item", "max_disp1[].item", "target_neigh_sz[].item", "max_disp1[].item", "max_disp2.float().cpu().view.float().cpu().view.float", "target_neigh_sz[].item", "target_neigh_sz[].item"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.max2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.max2d"], ["", "def", "localize_advanced", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Does the advanced localization with hard negative detection and target not found.\"\"\"", "\n", "cfg", "=", "self", ".", "cfg", "\n", "sz", "=", "scores", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "# Shift scores back", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "\n", "scores", "[", "...", ",", "(", "sz", "[", "0", "]", "+", "1", ")", "//", "2", ":", ",", ":", "]", ",", "scores", "[", "...", ",", ":", "(", "sz", "[", "0", "]", "+", "1", ")", "//", "2", ",", ":", "]", "\n", "]", ",", "-", "2", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "\n", "scores", "[", "...", ",", ":", ",", "(", "sz", "[", "1", "]", "+", "1", ")", "//", "2", ":", "]", ",", "scores", "[", "...", ",", ":", ",", ":", "(", "sz", "[", "1", "]", "+", "1", ")", "//", "2", "]", "\n", "]", ",", "-", "1", ")", "\n", "\n", "# Find maximum", "\n", "max_score1", ",", "max_disp1", "=", "dcf", ".", "max2d", "(", "scores", ")", "\n", "max_disp1", "=", "max_disp1", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "target_disp1", "=", "max_disp1", "-", "self", ".", "output_sz", "//", "2", "\n", "\n", "if", "max_score1", ".", "item", "(", ")", "<", "cfg", "[", "\"target_not_found_threshold\"", "]", ":", "\n", "            ", "return", "scores", ",", "'not_found'", "\n", "\n", "# Mask out target neighborhood", "\n", "", "target_neigh_sz", "=", "cfg", "[", "\n", "\"target_neighborhood_scale\"", "]", "*", "self", ".", "target_sz", "*", "self", ".", "scale", "\n", "tneigh_top", "=", "max", "(", "\n", "round", "(", "max_disp1", "[", "0", "]", ".", "item", "(", ")", "-", "target_neigh_sz", "[", "0", "]", ".", "item", "(", ")", "/", "2", ")", ",", "0", ")", "\n", "tneigh_bottom", "=", "min", "(", "\n", "round", "(", "max_disp1", "[", "0", "]", ".", "item", "(", ")", "+", "target_neigh_sz", "[", "0", "]", ".", "item", "(", ")", "/", "2", "+", "1", ")", ",", "\n", "sz", "[", "0", "]", ")", "\n", "tneigh_left", "=", "max", "(", "\n", "round", "(", "max_disp1", "[", "1", "]", ".", "item", "(", ")", "-", "target_neigh_sz", "[", "1", "]", ".", "item", "(", ")", "/", "2", ")", ",", "0", ")", "\n", "tneigh_right", "=", "min", "(", "\n", "round", "(", "max_disp1", "[", "1", "]", ".", "item", "(", ")", "+", "target_neigh_sz", "[", "1", "]", ".", "item", "(", ")", "/", "2", "+", "1", ")", ",", "\n", "sz", "[", "1", "]", ")", "\n", "scores_masked", "=", "scores", ".", "clone", "(", ")", "\n", "scores_masked", "[", "...", ",", "tneigh_top", ":", "tneigh_bottom", ",", "tneigh_left", ":", "\n", "tneigh_right", "]", "=", "0", "\n", "\n", "# Find new maximum", "\n", "max_score2", ",", "max_disp2", "=", "dcf", ".", "max2d", "(", "scores_masked", ")", "\n", "max_disp2", "=", "max_disp2", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "target_disp2", "=", "max_disp2", "-", "self", ".", "output_sz", "//", "2", "\n", "\n", "# Handle the different cases", "\n", "if", "max_score2", ">", "cfg", "[", "\"distractor_threshold\"", "]", "*", "max_score1", ":", "\n", "            ", "disp_norm1", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "target_disp1", "**", "2", ")", ")", "\n", "disp_norm2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "target_disp2", "**", "2", ")", ")", "\n", "disp_threshold", "=", "cfg", "[", "\"displacement_scale\"", "]", "*", "math", ".", "sqrt", "(", "\n", "sz", "[", "0", "]", "*", "sz", "[", "1", "]", ")", "/", "2", "\n", "\n", "if", "disp_norm2", ">", "disp_threshold", "and", "disp_norm1", "<", "disp_threshold", ":", "\n", "                ", "return", "scores", ",", "'hard_negative'", "\n", "", "if", "disp_norm2", "<", "disp_threshold", "and", "disp_norm1", ">", "disp_threshold", ":", "\n", "                ", "return", "scores", ",", "'hard_negative'", "\n", "", "if", "disp_norm2", ">", "disp_threshold", "and", "disp_norm1", ">", "disp_threshold", ":", "\n", "                ", "return", "scores", ",", "'uncertain'", "\n", "\n", "# If also the distractor is close, return with highest score", "\n", "", "return", "scores", ",", "'uncertain'", "\n", "\n", "", "if", "max_score2", ">", "cfg", "[", "\n", "\"hard_negative_threshold\"", "]", "*", "max_score1", "and", "max_score2", ">", "cfg", "[", "\n", "\"target_not_found_threshold\"", "]", ":", "\n", "            ", "return", "scores", ",", "'hard_negative'", "\n", "\n", "", "return", "scores", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.extract_sample": [[372, 379], ["utils.TensorList", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base_classifier.BaseClassifier.model.instance", "im.to"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.taskmodel_impl.sparsett_model.SiamTrack.instance"], ["", "def", "extract_sample", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "instance", "(", "im", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "feat", "=", "TensorList", "(", "[", "self", ".", "model", ".", "cf", "]", ")", "\n", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.extract_transformed_samples": [[380, 385], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "base_classifier.BaseClassifier.extract_sample", "T"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.extract_sample"], ["", "def", "extract_transformed_samples", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ",", "transforms", ")", ":", "\n", "        ", "ims_augmented", "=", "torch", ".", "cat", "(", "[", "T", "(", "im", ")", "for", "T", "in", "transforms", "]", ")", "\n", "feature_map", "=", "self", ".", "extract_sample", "(", "ims_augmented", ")", "\n", "\n", "return", "feature_map", ",", "ims_augmented", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.project_sample": [[386, 424], ["utils.operation.conv2d().apply", "utils.operation.conv2d", "utils.operation.adaptive_avg_pool2d", "utils.operation.conv1x1().apply", "utils.operation.sigmoid", "utils.TensorList", "utils.operation.spatial_attention", "utils.TensorList", "utils.operation.matmul", "utils.operation.matmul", "utils.operation.conv1x1", "utils.operation.conv1x1", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "compressed_samples[].size", "compressed_samples[].size", "compressed_samples[].size", "compressed_samples[].size", "compressed_samples[].size"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.adaptive_avg_pool2d", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.sigmoid", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.spatial_attention", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.matmul", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv1x1", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.operation.conv1x1"], ["", "def", "project_sample", "(", "self", ",", "x", ":", "TensorList", ",", "proj_matrix", "=", "None", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "# Apply projection matrix", "\n", "if", "proj_matrix", "is", "None", ":", "\n", "            ", "proj_matrix", "=", "self", ".", "projection_matrix", "\n", "\n", "", "compressed_samples", "=", "operation", ".", "conv2d", "(", "x", ",", "proj_matrix", ")", ".", "apply", "(", "\n", "self", ".", "projection_activation", ")", "\n", "\n", "if", "self", ".", "use_attention_layer", ":", "\n", "            ", "if", "cfg", "[", "\"channel_attention\"", "]", ":", "\n", "                ", "global_average", "=", "operation", ".", "adaptive_avg_pool2d", "(", "\n", "compressed_samples", ",", "1", ")", "\n", "temp_variables", "=", "operation", ".", "conv1x1", "(", "global_average", ",", "\n", "self", ".", "channel_att_fc1", ")", ".", "apply", "(", "\n", "self", ".", "att_activation", ")", "\n", "channel_attention", "=", "operation", ".", "sigmoid", "(", "\n", "operation", ".", "conv1x1", "(", "temp_variables", ",", "self", ".", "channel_att_fc2", ")", ")", "\n", "", "else", ":", "\n", "                ", "channel_attention", "=", "TensorList", "(", "[", "\n", "torch", ".", "zeros", "(", "compressed_samples", "[", "0", "]", ".", "size", "(", "0", ")", ",", "\n", "compressed_samples", "[", "0", "]", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "]", ")", "\n", "\n", "", "if", "cfg", "[", "\"spatial_attention\"", "]", "==", "'pool'", ":", "\n", "                ", "spatial_attention", "=", "operation", ".", "spatial_attention", "(", "\n", "compressed_samples", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "spatial_attention", "=", "TensorList", "(", "[", "\n", "torch", ".", "zeros", "(", "compressed_samples", "[", "0", "]", ".", "size", "(", "0", ")", ",", "1", ",", "\n", "compressed_samples", "[", "0", "]", ".", "size", "(", "2", ")", ",", "\n", "compressed_samples", "[", "0", "]", ".", "size", "(", "3", ")", ")", ".", "cuda", "(", ")", "\n", "]", ")", "\n", "\n", "", "compressed_samples", "=", "operation", ".", "matmul", "(", "compressed_samples", ",", "spatial_attention", ")", "+", "operation", ".", "matmul", "(", "compressed_samples", ",", "channel_attention", ")", "\n", "\n", "", "return", "compressed_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.extract_processed_sample": [[425, 435], ["base_classifier.BaseClassifier.project_sample", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.TensorList", "utils.TensorList", "base_classifier.BaseClassifier.model.cf[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.project_sample"], ["", "def", "extract_processed_sample", "(", "self", ",", "im", ":", "torch", ".", "Tensor", "=", "None", ",", "scale_idx", "=", "None", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "scale_idx", "is", "not", "None", ":", "\n", "                ", "x", "=", "TensorList", "(", "[", "self", ".", "model", ".", "cf", "[", "scale_idx", "]", ".", "unsqueeze", "(", "0", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "TensorList", "(", "[", "self", ".", "model", ".", "cf", "]", ")", "\n", "", "", "feat", "=", "self", ".", "project_sample", "(", "x", ")", "\n", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_learning": [[436, 490], ["utils.TensorList", "isinstance", "isinstance", "isinstance", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "ValueError", "ValueError", "ValueError", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "init_learning", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "# Filter regularization", "\n", "self", ".", "filter_reg", "=", "TensorList", "(", "[", "cfg", "[", "\"filter_reg\"", "]", "]", ")", "\n", "\n", "# Activation function after the projection matrix (phi_1 in the paper)", "\n", "projection_activation", "=", "cfg", "[", "\"projection_activation\"", "]", "\n", "if", "isinstance", "(", "projection_activation", ",", "tuple", ")", ":", "\n", "            ", "projection_activation", ",", "act_param", "=", "projection_activation", "\n", "\n", "", "if", "projection_activation", "==", "'none'", ":", "\n", "            ", "self", ".", "projection_activation", "=", "lambda", "x", ":", "x", "\n", "", "elif", "projection_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "projection_activation", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "projection_activation", "==", "'elu'", ":", "\n", "            ", "self", ".", "projection_activation", "=", "torch", ".", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "projection_activation", "==", "'mlu'", ":", "\n", "            ", "self", ".", "projection_activation", "=", "lambda", "x", ":", "F", ".", "elu", "(", "\n", "F", ".", "leaky_relu", "(", "x", ",", "1", "/", "act_param", ")", ",", "act_param", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown activation'", ")", "\n", "\n", "# Activation function for attention layer", "\n", "", "att_activation", "=", "cfg", "[", "\"att_activation\"", "]", "\n", "if", "isinstance", "(", "att_activation", ",", "tuple", ")", ":", "\n", "            ", "att_activation", ",", "act_param", "=", "att_activation", "\n", "", "if", "att_activation", "==", "'none'", ":", "\n", "            ", "self", ".", "att_activation", "=", "lambda", "x", ":", "x", "\n", "", "elif", "att_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "att_activation", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "att_activation", "==", "'elu'", ":", "\n", "            ", "self", ".", "att_activation", "=", "torch", ".", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "att_activation", "==", "'mlu'", ":", "\n", "            ", "self", ".", "att_activation", "=", "lambda", "x", ":", "F", ".", "elu", "(", "\n", "F", ".", "leaky_relu", "(", "x", ",", "1", "/", "act_param", ")", ",", "act_param", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown activation'", ")", "\n", "\n", "# Activation function after the output scores (phi_2 in the paper)", "\n", "", "response_activation", "=", "cfg", "[", "\"reponse_activation\"", "]", "\n", "if", "isinstance", "(", "response_activation", ",", "tuple", ")", ":", "\n", "            ", "response_activation", ",", "act_param", "=", "response_activation", "\n", "\n", "", "if", "response_activation", "==", "'none'", ":", "\n", "            ", "self", ".", "response_activation", "=", "lambda", "x", ":", "x", "\n", "", "elif", "response_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "response_activation", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "response_activation", "==", "'elu'", ":", "\n", "            ", "self", ".", "response_activation", "=", "torch", ".", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "response_activation", "==", "'mlu'", ":", "\n", "            ", "self", ".", "response_activation", "=", "lambda", "x", ":", "F", ".", "elu", "(", "\n", "F", ".", "leaky_relu", "(", "x", ",", "1", "/", "act_param", ")", ",", "act_param", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown activation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.generate_init_samples": [[491, 574], ["base_classifier.BaseClassifier.img_sample_sz.clone", "base_classifier.BaseClassifier.extract_transformed_samples", "enumerate", "aug_expansion_sz.float.float.float", "base_classifier.BaseClassifier.img_sample_sz.long().tolist", "utils.augmentation.Identity", "base_classifier.BaseClassifier.transforms.extend", "base_classifier.BaseClassifier.transforms.extend", "base_classifier.BaseClassifier.transforms.append", "base_classifier.BaseClassifier.transforms.extend", "base_classifier.BaseClassifier.transforms.extend", "base_classifier.BaseClassifier.transforms.extend", "utils.TensorList", "base_classifier.BaseClassifier.transforms.extend", "enumerate", "utils.augmentation.FlipHorizontal", "utils.TensorList", "base_classifier.BaseClassifier.img_sample_sz.long", "base_classifier.BaseClassifier.img_sample_sz.long", "utils.augmentation.Translation", "utils.augmentation.Translation", "base_classifier.BaseClassifier.get_rand_shift", "utils.augmentation.Blur", "utils.augmentation.Scale", "utils.augmentation.Rotate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "get_absolute", "base_classifier.BaseClassifier.get_rand_shift", "base_classifier.BaseClassifier.get_rand_shift", "base_classifier.BaseClassifier.get_rand_shift", "torch.dropout2d", "torch.dropout2d", "torch.dropout2d", "[].expand", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.extract_transformed_samples"], ["", "", "def", "generate_init_samples", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", "->", "TensorList", ":", "\n", "        ", "\"\"\"Generate augmented initial samples.\"\"\"", "\n", "\n", "# Compute augmentation size", "\n", "cfg", "=", "self", ".", "cfg", "\n", "aug_expansion_factor", "=", "cfg", "[", "\"augmentation_expansion_factor\"", "]", "\n", "aug_expansion_sz", "=", "self", ".", "img_sample_sz", ".", "clone", "(", ")", "\n", "aug_output_sz", "=", "None", "\n", "if", "aug_expansion_factor", "is", "not", "None", "and", "aug_expansion_factor", "!=", "1", ":", "\n", "            ", "aug_expansion_sz", "=", "(", "self", ".", "img_sample_sz", "*", "\n", "aug_expansion_factor", ")", ".", "long", "(", ")", "\n", "aug_expansion_sz", "+=", "(", "aug_expansion_sz", "-", "\n", "self", ".", "img_sample_sz", ".", "long", "(", ")", ")", "%", "2", "\n", "aug_expansion_sz", "=", "aug_expansion_sz", ".", "float", "(", ")", "\n", "aug_output_sz", "=", "self", ".", "img_sample_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Random shift operator", "\n", "", "self", ".", "get_rand_shift", "=", "lambda", ":", "None", "\n", "self", ".", "random_shift_factor", "=", "cfg", "[", "\"augmentation_shift_factor\"", "]", "\n", "if", "self", ".", "random_shift_factor", ">", "0", ":", "\n", "            ", "self", ".", "get_rand_shift", "=", "lambda", ":", "(", "\n", "(", "torch", ".", "rand", "(", "2", ")", "-", "0.5", ")", "*", "self", ".", "img_sample_sz", "*", "self", ".", "\n", "random_shift_factor", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Create transofmations", "\n", "", "self", ".", "transforms", "=", "[", "augmentation", ".", "Identity", "(", "aug_output_sz", ")", "]", "\n", "if", "cfg", "[", "\"augmentation_shift\"", "]", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "\n", "augmentation", ".", "Translation", "(", "shift", ",", "aug_output_sz", ")", "\n", "for", "shift", "in", "cfg", "[", "\"augmentation_shift\"", "]", "\n", "]", ")", "\n", "", "if", "cfg", "[", "\"augmentation_relativeshift\"", "]", ":", "\n", "            ", "get_absolute", "=", "lambda", "shift", ":", "(", "torch", ".", "Tensor", "(", "shift", ")", "*", "self", ".", "\n", "img_sample_sz", "/", "2", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "self", ".", "transforms", ".", "extend", "(", "[", "\n", "augmentation", ".", "Translation", "(", "get_absolute", "(", "shift", ")", ",", "aug_output_sz", ")", "\n", "for", "shift", "in", "cfg", "[", "\"augmentation_relativeshift\"", "]", "\n", "]", ")", "\n", "", "if", "cfg", "[", "\"augmentation_fliplr\"", "]", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "\n", "augmentation", ".", "FlipHorizontal", "(", "aug_output_sz", ",", "\n", "self", ".", "get_rand_shift", "(", ")", ")", ")", "\n", "", "if", "cfg", "[", "\"augmentation_blur\"", "]", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "\n", "augmentation", ".", "Blur", "(", "sigma", ",", "aug_output_sz", ",", "self", ".", "get_rand_shift", "(", ")", ")", "\n", "for", "sigma", "in", "cfg", "[", "\"augmentation_blur\"", "]", "\n", "]", ")", "\n", "", "if", "cfg", "[", "\"augmentation_scale\"", "]", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "\n", "augmentation", ".", "Scale", "(", "scale_factor", ",", "aug_output_sz", ",", "\n", "self", ".", "get_rand_shift", "(", ")", ")", "\n", "for", "scale_factor", "in", "cfg", "[", "\"augmentation_scale\"", "]", "\n", "]", ")", "\n", "", "if", "cfg", "[", "\"augmentation_rotate\"", "]", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "\n", "augmentation", ".", "Rotate", "(", "angle", ",", "aug_output_sz", ",", "self", ".", "get_rand_shift", "(", ")", ")", "\n", "for", "angle", "in", "cfg", "[", "\"augmentation_rotate\"", "]", "\n", "]", ")", "\n", "\n", "# Generate initial samples", "\n", "", "init_samples", ",", "aug_imgs", "=", "self", ".", "extract_transformed_samples", "(", "\n", "im", ",", "self", ".", "transforms", ")", "\n", "\n", "# Remove augmented samples for those that shall not have", "\n", "for", "i", ",", "use_aug", "in", "enumerate", "(", "TensorList", "(", "[", "cfg", "[", "\"use_augmentation\"", "]", "]", ")", ")", ":", "\n", "            ", "if", "not", "use_aug", ":", "\n", "                ", "init_samples", "[", "i", "]", "=", "init_samples", "[", "i", "]", "[", "0", ":", "1", ",", "...", "]", "\n", "\n", "# Add dropout samples", "\n", "", "", "if", "cfg", "[", "\"augmentation_dropout\"", "]", ":", "\n", "            ", "num", ",", "prob", "=", "cfg", "[", "\"augmentation_dropout\"", "]", "\n", "self", ".", "transforms", ".", "extend", "(", "self", ".", "transforms", "[", ":", "1", "]", "*", "num", ")", "\n", "for", "i", ",", "use_aug", "in", "enumerate", "(", "TensorList", "(", "[", "cfg", "[", "\"use_augmentation\"", "]", "]", ")", ")", ":", "\n", "                ", "if", "use_aug", ":", "\n", "                    ", "init_samples", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "init_samples", "[", "i", "]", ",", "\n", "F", ".", "dropout2d", "(", "init_samples", "[", "i", "]", "[", "0", ":", "1", ",", "...", "]", ".", "expand", "(", "\n", "num", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "\n", "p", "=", "prob", ",", "\n", "training", "=", "True", ")", "\n", "]", ")", "\n", "\n", "", "", "", "return", "init_samples", ",", "aug_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_projection_matrix": [[575, 605], ["utils.TensorList", "x.size", "utils.TensorList", "utils.TensorList", "utils.TensorList.mean", "utils.TensorList", "utils.TensorList.t", "utils.TensorList", "len", "e.permute().reshape().clone", "[].t().unsqueeze().unsqueeze().clone", "zip", "e.permute().reshape", "ex.new_zeros().normal_", "zip", "[].t().unsqueeze().unsqueeze", "e.permute", "ex.new_zeros", "math.sqrt", "[].t().unsqueeze", "[].t", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd"], "methods", ["None"], ["", "def", "init_projection_matrix", "(", "self", ",", "x", ")", ":", "\n", "# Set if using projection matrix", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "self", ".", "use_projection_matrix", "=", "cfg", "[", "\"use_projection_matrix\"", "]", "\n", "\n", "if", "self", ".", "use_projection_matrix", ":", "\n", "            ", "self", ".", "compressed_dim", "=", "TensorList", "(", "[", "cfg", "[", "\"compressed_dim\"", "]", "]", ")", "\n", "proj_init_method", "=", "cfg", "[", "\"proj_init_method\"", "]", "\n", "if", "proj_init_method", "==", "'pca'", ":", "\n", "                ", "x_mat", "=", "TensorList", "(", "[", "\n", "e", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "reshape", "(", "e", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "for", "e", "in", "x", "\n", "]", ")", "\n", "x_mat", "-=", "x_mat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "cov_x", "=", "x_mat", "@", "x_mat", ".", "t", "(", ")", "\n", "self", ".", "projection_matrix", "=", "TensorList", "(", "[", "\n", "None", "if", "cdim", "is", "None", "else", "torch", ".", "svd", "(", "C", ")", "[", "0", "]", "\n", "[", ":", ",", ":", "cdim", "]", ".", "t", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "for", "C", ",", "cdim", "in", "zip", "(", "cov_x", ",", "self", ".", "compressed_dim", ")", "\n", "]", ")", "\n", "", "elif", "proj_init_method", "==", "'randn'", ":", "\n", "                ", "self", ".", "projection_matrix", "=", "TensorList", "(", "[", "\n", "None", "if", "cdim", "is", "None", "else", "ex", ".", "new_zeros", "(", "\n", "cdim", ",", "ex", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ".", "normal_", "(", "\n", "0", ",", "1", "/", "math", ".", "sqrt", "(", "ex", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "ex", ",", "cdim", "in", "zip", "(", "x", ",", "self", ".", "compressed_dim", ")", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "compressed_dim", "=", "x", ".", "size", "(", "1", ")", "\n", "self", ".", "projection_matrix", "=", "TensorList", "(", "[", "None", "]", "*", "len", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_attention_layer": [[606, 619], ["utils.TensorList", "utils.TensorList", "utils.TensorList", "ex.new_zeros().normal_", "zip", "ex.new_zeros().normal_", "zip", "ex.new_zeros", "math.sqrt", "ex.new_zeros", "math.sqrt"], "methods", ["None"], ["", "", "def", "init_attention_layer", "(", "self", ",", "x", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "\n", "self", ".", "compressed_dim", "=", "TensorList", "(", "[", "cfg", "[", "\"compressed_dim\"", "]", "]", ")", "\n", "self", ".", "channel_att_fc1", "=", "TensorList", "(", "[", "\n", "None", "if", "cdim", "is", "None", "else", "ex", ".", "new_zeros", "(", "\n", "cdim", "//", "2", ",", "cdim", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", "/", "math", ".", "sqrt", "(", "cdim", ")", ")", "\n", "for", "ex", ",", "cdim", "in", "zip", "(", "x", ",", "self", ".", "compressed_dim", ")", "\n", "]", ")", "\n", "self", ".", "channel_att_fc2", "=", "TensorList", "(", "[", "\n", "None", "if", "cdim", "is", "None", "else", "ex", ".", "new_zeros", "(", "\n", "cdim", ",", "cdim", "//", "2", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", "/", "math", ".", "sqrt", "(", "cdim", ")", ")", "\n", "for", "ex", ",", "cdim", "in", "zip", "(", "x", ",", "self", ".", "compressed_dim", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_label_function": [[621, 652], ["utils.TensorList", "zip", "utils.TensorList", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "enumerate", "x.new_zeros", "base_classifier.BaseClassifier.pos.round", "utils.dcf.label_function_spatial", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "zip", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.label_function_spatial"], ["", "def", "init_label_function", "(", "self", ",", "train_x", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "# Allocate label function", "\n", "self", ".", "y", "=", "TensorList", "(", "[", "\n", "x", ".", "new_zeros", "(", "cfg", "[", "\"sample_memory_size\"", "]", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "for", "x", "in", "train_x", "\n", "]", ")", "\n", "\n", "# Output sigma factor", "\n", "output_sigma_factor", "=", "cfg", "[", "\"output_sigma_factor\"", "]", "\n", "\n", "self", ".", "sigma", "=", "(", "\n", "self", ".", "feature_sz", "/", "self", ".", "img_sample_sz", "*", "self", ".", "target_sz", "*", "\n", "self", ".", "scale", ")", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "*", "output_sigma_factor", "*", "torch", ".", "ones", "(", "2", ")", "\n", "\n", "# Generate label functions", "\n", "target_center_norm", "=", "(", "self", ".", "pos", "-", "self", ".", "pos", ".", "round", "(", ")", ")", "/", "self", ".", "img_sample_sz", "\n", "for", "y", ",", "sig", ",", "sz", ",", "ksz", ",", "x", "in", "zip", "(", "self", ".", "y", ",", "self", ".", "sigma", ",", "self", ".", "feature_sz", ",", "\n", "self", ".", "kernel_size", ",", "train_x", ")", ":", "\n", "            ", "center_pos", "=", "sz", "*", "target_center_norm", "+", "0.5", "*", "torch", ".", "Tensor", "(", "\n", "[", "(", "ksz", "[", "0", "]", "+", "1", ")", "%", "2", ",", "(", "ksz", "[", "1", "]", "+", "1", ")", "%", "2", "]", ")", "\n", "for", "i", ",", "T", "in", "enumerate", "(", "self", ".", "transforms", "[", ":", "x", ".", "shape", "[", "0", "]", "]", ")", ":", "\n", "                ", "sample_center", "=", "center_pos", "+", "torch", ".", "Tensor", "(", "\n", "T", ".", "shift", ")", "/", "self", ".", "img_sample_sz", "*", "sz", "\n", "#y[i, 0, ...] = dcf.label_function_spatial(sz, sig, sample_center, scale)", "\n", "y", "[", "i", ",", "0", ",", "...", "]", "=", "dcf", ".", "label_function_spatial", "(", "\n", "sz", ",", "sig", ",", "sample_center", ")", "\n", "\n", "# Return only the ones to use for initial training", "\n", "", "", "return", "TensorList", "(", "\n", "[", "y", "[", ":", "x", ".", "shape", "[", "0", "]", ",", "...", "]", "for", "y", ",", "x", "in", "zip", "(", "self", ".", "y", ",", "train_x", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.init_memory": [[653, 675], ["train_x.size", "utils.TensorList", "base_classifier.BaseClassifier.num_init_samples.copy", "utils.TensorList", "zip", "utils.TensorList", "len", "x.new_zeros", "x.new_zeros", "x.new_ones", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy"], ["", "def", "init_memory", "(", "self", ",", "train_x", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "# Initialize first-frame training samples", "\n", "self", ".", "num_init_samples", "=", "train_x", ".", "size", "(", "0", ")", "\n", "self", ".", "init_sample_weights", "=", "TensorList", "(", "\n", "[", "x", ".", "new_ones", "(", "1", ")", "/", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "train_x", "]", ")", "\n", "self", ".", "init_training_samples", "=", "train_x", "\n", "\n", "# Sample counters and weights", "\n", "self", ".", "num_stored_samples", "=", "self", ".", "num_init_samples", ".", "copy", "(", ")", "\n", "self", ".", "previous_replace_ind", "=", "[", "None", "]", "*", "len", "(", "self", ".", "num_stored_samples", ")", "\n", "self", ".", "sample_weights", "=", "TensorList", "(", "\n", "[", "x", ".", "new_zeros", "(", "cfg", "[", "\"sample_memory_size\"", "]", ")", "for", "x", "in", "train_x", "]", ")", "\n", "for", "sw", ",", "init_sw", ",", "num", "in", "zip", "(", "self", ".", "sample_weights", ",", "\n", "self", ".", "init_sample_weights", ",", "\n", "self", ".", "num_init_samples", ")", ":", "\n", "            ", "sw", "[", ":", "num", "]", "=", "init_sw", "\n", "\n", "# Initialize memory", "\n", "", "self", ".", "training_samples", "=", "TensorList", "(", "[", "\n", "x", ".", "new_zeros", "(", "cfg", "[", "\"sample_memory_size\"", "]", ",", "cdim", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "for", "x", ",", "cdim", "in", "zip", "(", "train_x", ",", "self", ".", "compressed_dim", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.update_memory": [[677, 693], ["base_classifier.BaseClassifier.update_sample_weights", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.update_sample_weights"], ["", "def", "update_memory", "(", "self", ",", "\n", "sample_x", ":", "TensorList", ",", "\n", "sample_y", ":", "TensorList", ",", "\n", "learning_rate", "=", "None", ")", ":", "\n", "        ", "replace_ind", "=", "self", ".", "update_sample_weights", "(", "self", ".", "sample_weights", ",", "\n", "self", ".", "previous_replace_ind", ",", "\n", "self", ".", "num_stored_samples", ",", "\n", "self", ".", "num_init_samples", ",", "\n", "learning_rate", ")", "\n", "self", ".", "previous_replace_ind", "=", "replace_ind", "\n", "for", "train_samp", ",", "x", ",", "ind", "in", "zip", "(", "self", ".", "training_samples", ",", "sample_x", ",", "\n", "replace_ind", ")", ":", "\n", "            ", "train_samp", "[", "ind", ":", "ind", "+", "1", ",", "...", "]", "=", "x", "\n", "", "for", "y_memory", ",", "y", ",", "ind", "in", "zip", "(", "self", ".", "y", ",", "sample_y", ",", "replace_ind", ")", ":", "\n", "            ", "y_memory", "[", "ind", ":", "ind", "+", "1", ",", "...", "]", "=", "y", "\n", "", "self", ".", "num_stored_samples", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.update_sample_weights": [[694, 741], ["zip", "sw.sum", "replace_ind.append", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "r_ind.item", "sw[].sum", "sw[].sum"], "methods", ["None"], ["", "def", "update_sample_weights", "(", "self", ",", "\n", "sample_weights", ",", "\n", "previous_replace_ind", ",", "\n", "num_stored_samples", ",", "\n", "num_init_samples", ",", "\n", "learning_rate", "=", "None", ")", ":", "\n", "# Update weights and get index to replace in memory", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "replace_ind", "=", "[", "]", "\n", "for", "sw", ",", "prev_ind", ",", "num_samp", ",", "num_init", "in", "zip", "(", "sample_weights", ",", "\n", "previous_replace_ind", ",", "\n", "num_stored_samples", ",", "\n", "num_init_samples", ")", ":", "\n", "            ", "lr", "=", "learning_rate", "\n", "# if lr is None:", "\n", "#     lr = fpar.learning_rate", "\n", "\n", "init_samp_weight", "=", "cfg", "[", "\"init_samples_minimum_weight\"", "]", "\n", "if", "init_samp_weight", "==", "0", ":", "\n", "                ", "init_samp_weight", "=", "None", "\n", "", "s_ind", "=", "0", "if", "init_samp_weight", "is", "None", "else", "num_init", "\n", "\n", "if", "num_samp", "==", "0", "or", "lr", "==", "1", ":", "\n", "                ", "sw", "[", ":", "]", "=", "0", "\n", "sw", "[", "0", "]", "=", "1", "\n", "r_ind", "=", "0", "\n", "", "else", ":", "\n", "# Get index to replace", "\n", "                ", "_", ",", "r_ind", "=", "torch", ".", "min", "(", "sw", "[", "s_ind", ":", "]", ",", "0", ")", "\n", "r_ind", "=", "r_ind", ".", "item", "(", ")", "+", "s_ind", "\n", "\n", "# Update weights", "\n", "if", "prev_ind", "is", "None", ":", "\n", "                    ", "sw", "/=", "1", "-", "lr", "\n", "sw", "[", "r_ind", "]", "=", "lr", "\n", "", "else", ":", "\n", "                    ", "sw", "[", "r_ind", "]", "=", "sw", "[", "prev_ind", "]", "/", "(", "1", "-", "lr", ")", "\n", "\n", "", "", "sw", "/=", "sw", ".", "sum", "(", ")", "\n", "if", "init_samp_weight", "is", "not", "None", "and", "sw", "[", ":", "num_init", "]", ".", "sum", "(", "\n", ")", "<", "init_samp_weight", ":", "\n", "                ", "sw", "/=", "init_samp_weight", "+", "sw", "[", "num_init", ":", "]", ".", "sum", "(", ")", "\n", "sw", "[", ":", "num_init", "]", "=", "init_samp_weight", "/", "num_init", "\n", "\n", "", "replace_ind", ".", "append", "(", "r_ind", ")", "\n", "\n", "", "return", "replace_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.get_label_function": [[742, 755], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "utils.TensorList", "zip", "utils.TensorList.append", "utils.dcf.label_function_spatial", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dcf.label_function_spatial"], ["", "def", "get_label_function", "(", "self", ",", "sample_pos", ",", "scale_z", ",", "target_sz", "=", "torch", ".", "ones", "(", "2", ")", ")", ":", "\n", "# Generate label function", "\n", "        ", "train_y", "=", "TensorList", "(", ")", "\n", "target_center_norm", "=", "(", "self", ".", "pos", "-", "sample_pos", ")", "/", "self", ".", "img_sample_sz", "\n", "# target_center_norm = (self.pos - sample_pos) * scale_z / self.img_sample_sz", "\n", "target_sz", "[", "0", "]", "/", "target_sz", "[", "1", "]", "\n", "\n", "for", "sig", ",", "sz", ",", "ksz", "in", "zip", "(", "self", ".", "sigma", ",", "self", ".", "feature_sz", ",", "self", ".", "kernel_size", ")", ":", "\n", "            ", "center", "=", "sz", "*", "target_center_norm", "+", "0.5", "*", "torch", ".", "Tensor", "(", "\n", "[", "(", "ksz", "[", "0", "]", "+", "1", ")", "%", "2", ",", "(", "ksz", "[", "1", "]", "+", "1", ")", "%", "2", "]", ")", "\n", "train_y", ".", "append", "(", "dcf", ".", "label_function_spatial", "(", "sz", ",", "sig", ",", "center", ")", ")", "\n", "\n", "", "return", "train_y", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.online_classifier.base_classifier.BaseClassifier.transform_score": [[756, 777], ["enumerate", "utils.fourier.sum_fs", "utils.fourier.sample_fs().squeeze", "utils.fourier.cfft2", "zip", "utils.fourier.shift_fs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scores_raw.size", "scores_raw.size", "utils.fourier.sample_fs", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.sum_fs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.cfft2", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.shift_fs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.fourier.sample_fs"], ["", "def", "transform_score", "(", "self", ",", "scores_raw", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "\n", "sf_weighted", "=", "fourier", ".", "cfft2", "(", "scores_raw", ")", "/", "(", "scores_raw", ".", "size", "(", "2", ")", "*", "\n", "scores_raw", ".", "size", "(", "3", ")", ")", "\n", "for", "i", ",", "(", "sz", ",", "ksz", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "feature_sz", ",", "self", ".", "kernel_size", ")", ")", ":", "\n", "            ", "sf_weighted", "[", "i", "]", "=", "fourier", ".", "shift_fs", "(", "\n", "sf_weighted", "[", "i", "]", ",", "\n", "math", ".", "pi", "*", "(", "1", "-", "torch", ".", "Tensor", "(", "[", "ksz", "[", "0", "]", "%", "2", ",", "ksz", "[", "1", "]", "%", "2", "]", ")", "/", "sz", ")", ")", "\n", "\n", "", "scores_fs", "=", "fourier", ".", "sum_fs", "(", "sf_weighted", ")", "\n", "scores", "=", "fourier", ".", "sample_fs", "(", "scores_fs", ",", "self", ".", "output_sz", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "cfg", "[", "\"online_debug_show\"", "]", ":", "\n", "            ", "sz", "=", "scores", ".", "shape", "[", "-", "2", ":", "]", "\n", "scores", "=", "torch", ".", "cat", "(", "\n", "[", "scores", "[", "...", ",", "sz", "[", "0", "]", "//", "2", ":", ",", ":", "]", ",", "scores", "[", "...", ",", ":", "sz", "[", "0", "]", "//", "2", ",", ":", "]", "]", ",", "-", "2", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "\n", "[", "scores", "[", "...", ",", ":", ",", "sz", "[", "1", "]", "//", "2", ":", "]", ",", "scores", "[", "...", ",", ":", ",", ":", "sz", "[", "1", "]", "//", "2", "]", "]", ",", "-", "1", ")", "\n", "\n", "", "return", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.__init__": [[83, 91], ["videoanalyst.pipeline.pipeline_base.PipelineBase.__init__", "sparsett_tracker.SparseTTTracker.update_params", "torch.device", "sparsett_tracker.SparseTTTracker.set_model"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params", "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.set_model"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SparseTTTracker", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "update_params", "(", ")", "\n", "\n", "# set underlying model to device", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "debug", "=", "False", "\n", "self", ".", "set_model", "(", "self", ".", "_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.set_model": [[92, 103], ["sparsett_tracker.SparseTTTracker._model.eval"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"model to be set to pipeline. change device & turn it into eval mode\n        \n        Parameters\n        ----------\n        model : ModuleBase\n            model to be set to pipeline\n        \"\"\"", "\n", "self", ".", "_model", "=", "model", "\n", "# self._model = model.to(self.device)", "\n", "self", ".", "_model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.set_device": [[104, 107], ["sparsett_tracker.SparseTTTracker._model.to"], "methods", ["None"], ["", "def", "set_device", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "_model", "=", "self", ".", "_model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.update_params": [[108, 121], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "hps", "=", "self", ".", "_hyper_params", "\n", "# hps['score_size'] = (", "\n", "#     hps['x_size'] -", "\n", "#     hps['z_size']) // hps['total_stride'] + 1 - hps['num_conv3x3'] * 2", "\n", "hps", "[", "'score_offset'", "]", "=", "(", "\n", "hps", "[", "'x_size'", "]", "-", "1", "-", "\n", "(", "hps", "[", "'score_size'", "]", "-", "1", ")", "*", "hps", "[", "'total_stride'", "]", ")", "//", "2", "\n", "self", ".", "normalize", "=", "hps", "[", "'normalize'", "]", "\n", "self", ".", "norm_mean", "=", "np", ".", "array", "(", "hps", "[", "'norm_mean'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "norm_std", "=", "np", ".", "array", "(", "hps", "[", "'norm_std'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "hps", "[", "'to_rgb'", "]", "\n", "self", ".", "_hyper_params", "=", "hps", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.feature": [[122, 165], ["videoanalyst.pipeline.utils.get_crop", "numpy.mean", "mmcv.imnormalize", "torch.no_grad", "videoanalyst.pipeline.utils.imarray_to_tensor().to", "sparsett_tracker.SparseTTTracker._model", "videoanalyst.pipeline.utils.imarray_to_tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_crop", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.imarray_to_tensor"], ["", "def", "feature", "(", "self", ",", "im", ":", "np", ".", "array", ",", "target_pos", ",", "target_sz", ",", "avg_chans", "=", "None", ")", ":", "\n", "        ", "\"\"\"Extract feature\n\n        Parameters\n        ----------\n        im : np.array\n            initial frame\n        target_pos : \n            target position (x, y)\n        target_sz : [type]\n            target size (w, h)\n        avg_chans : [type], optional\n            channel mean values, (B, G, R), by default None\n        \n        Returns\n        -------\n        [type]\n            [description]\n        \"\"\"", "\n", "if", "avg_chans", "is", "None", ":", "\n", "            ", "avg_chans", "=", "np", ".", "mean", "(", "im", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "", "z_size", "=", "self", ".", "_hyper_params", "[", "'z_size'", "]", "\n", "context_amount", "=", "self", ".", "_hyper_params", "[", "'context_amount'", "]", "\n", "\n", "im_z_crop", ",", "_", "=", "get_crop", "(", "\n", "im", ",", "\n", "target_pos", ",", "\n", "target_sz", ",", "\n", "z_size", ",", "\n", "avg_chans", "=", "avg_chans", ",", "\n", "context_amount", "=", "context_amount", ",", "\n", "func_get_subwindow", "=", "get_subwindow_tracking", ",", "\n", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "im_z_crop", "=", "imnormalize", "(", "im_z_crop", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ",", "self", ".", "to_rgb", ")", "\n", "\n", "", "phase", "=", "self", ".", "_hyper_params", "[", "'phase_init'", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data", "=", "imarray_to_tensor", "(", "im_z_crop", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "features", "=", "self", ".", "_model", "(", "data", ",", "phase", "=", "phase", ")", "\n", "\n", "", "return", "features", ",", "im_z_crop", ",", "avg_chans", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.init": [[166, 203], ["videoanalyst.pipeline.utils.xywh2cxywh", "sparsett_tracker.SparseTTTracker.feature", "numpy.outer", "numpy.ones.reshape", "numpy.hanning", "numpy.hanning", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2cxywh", "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.feature"], ["", "def", "init", "(", "self", ",", "im", ",", "state", ")", ":", "\n", "        ", "r\"\"\"Initialize tracker\n            Internal target state representation: self._state['state'] = (target_pos, target_sz)\n        \n        Arguments\n        ---------\n        im : np.array\n            initial frame image\n        state\n            target state on initial frame (bbox in case of SOT), format: xywh\n        \"\"\"", "\n", "rect", "=", "state", "# bbox in xywh format is given for initialization in case of tracking", "\n", "box", "=", "xywh2cxywh", "(", "rect", ")", "\n", "target_pos", ",", "target_sz", "=", "box", "[", ":", "2", "]", ",", "box", "[", "2", ":", "]", "\n", "\n", "self", ".", "_state", "[", "'im_h'", "]", "=", "im", ".", "shape", "[", "0", "]", "\n", "self", ".", "_state", "[", "'im_w'", "]", "=", "im", ".", "shape", "[", "1", "]", "\n", "\n", "# extract template feature", "\n", "features", ",", "im_z_crop", ",", "avg_chans", "=", "self", ".", "feature", "(", "im", ",", "target_pos", ",", "target_sz", ")", "\n", "\n", "score_size", "=", "self", ".", "_hyper_params", "[", "'score_size'", "]", "\n", "if", "self", ".", "_hyper_params", "[", "'windowing'", "]", "==", "'cosine'", ":", "\n", "            ", "window", "=", "np", ".", "outer", "(", "np", ".", "hanning", "(", "score_size", ")", ",", "np", ".", "hanning", "(", "score_size", ")", ")", "\n", "window", "=", "window", ".", "reshape", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "_hyper_params", "[", "'windowing'", "]", "==", "'uniform'", ":", "\n", "            ", "window", "=", "np", ".", "ones", "(", "(", "score_size", ",", "score_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "window", "=", "np", ".", "ones", "(", "(", "score_size", ",", "score_size", ")", ")", "\n", "\n", "", "self", ".", "_state", "[", "'z_crop'", "]", "=", "im_z_crop", "\n", "self", ".", "_state", "[", "'avg_chans'", "]", "=", "avg_chans", "\n", "self", ".", "_state", "[", "'features'", "]", "=", "features", "\n", "self", ".", "_state", "[", "'window'", "]", "=", "window", "\n", "# self.state['target_pos'] = target_pos", "\n", "# self.state['target_sz'] = target_sz", "\n", "self", ".", "_state", "[", "'state'", "]", "=", "(", "target_pos", ",", "target_sz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.get_avg_chans": [[204, 206], ["None"], "methods", ["None"], ["", "def", "get_avg_chans", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state", "[", "'avg_chans'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.track": [[207, 275], ["videoanalyst.pipeline.utils.get_crop", "copy.deepcopy", "videoanalyst.pipeline.utils.tensor_to_numpy", "videoanalyst.pipeline.utils.xyxy2cxywh", "sparsett_tracker.SparseTTTracker._postprocess_score", "sparsett_tracker.SparseTTTracker._postprocess_box", "sparsett_tracker.SparseTTTracker._restrict_box", "numpy.rint().astype", "mmcv.imnormalize", "torch.no_grad", "sparsett_tracker.SparseTTTracker._model", "videoanalyst.pipeline.utils.tensor_to_numpy", "sparsett_tracker.SparseTTTracker._cvt_box_crop2frame", "videoanalyst.pipeline.utils.imarray_to_tensor().to", "numpy.rint", "videoanalyst.pipeline.utils.imarray_to_tensor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop.get_crop", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.tensor_to_numpy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xyxy2cxywh", "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker._postprocess_score", "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker._postprocess_box", "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker._restrict_box", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.tensor_to_numpy", "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker._cvt_box_crop2frame", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.imarray_to_tensor"], ["", "def", "track", "(", "self", ",", "\n", "im_x", ",", "\n", "target_pos", ",", "\n", "target_sz", ",", "\n", "features", ",", "\n", "update_state", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "'avg_chans'", "in", "kwargs", ":", "\n", "            ", "avg_chans", "=", "kwargs", "[", "'avg_chans'", "]", "\n", "", "else", ":", "\n", "            ", "avg_chans", "=", "self", ".", "_state", "[", "'avg_chans'", "]", "\n", "\n", "", "z_size", "=", "self", ".", "_hyper_params", "[", "'z_size'", "]", "\n", "x_size", "=", "self", ".", "_hyper_params", "[", "'x_size'", "]", "\n", "context_amount", "=", "self", ".", "_hyper_params", "[", "'context_amount'", "]", "\n", "phase_track", "=", "self", ".", "_hyper_params", "[", "'phase_track'", "]", "\n", "im_x_crop", ",", "scale_x", "=", "get_crop", "(", "\n", "im_x", ",", "\n", "target_pos", ",", "\n", "target_sz", ",", "\n", "z_size", ",", "\n", "x_size", "=", "x_size", ",", "\n", "avg_chans", "=", "avg_chans", ",", "\n", "context_amount", "=", "context_amount", ",", "\n", "func_get_subwindow", "=", "get_subwindow_tracking", ",", "\n", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "im_x_crop", "=", "imnormalize", "(", "im_x_crop", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ",", "self", ".", "to_rgb", ")", "\n", "\n", "", "self", ".", "_state", "[", "\"scale_x\"", "]", "=", "deepcopy", "(", "scale_x", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "score", ",", "box", ",", "extra", "=", "self", ".", "_model", "(", "\n", "imarray_to_tensor", "(", "im_x_crop", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "*", "features", ",", "\n", "phase", "=", "phase_track", ")", "\n", "", "if", "self", ".", "_hyper_params", "[", "\"corr_fea_output\"", "]", ":", "\n", "            ", "self", ".", "_state", "[", "\"corr_fea\"", "]", "=", "extra", "[", "\"corr_fea\"", "]", "\n", "\n", "", "box", "=", "tensor_to_numpy", "(", "box", "[", "0", "]", ")", "\n", "score", "=", "tensor_to_numpy", "(", "score", "[", "0", "]", ")", "[", ":", ",", "0", "]", "\n", "box_wh", "=", "xyxy2cxywh", "(", "box", ")", "\n", "\n", "# score post-processing", "\n", "best_pscore_id", ",", "pscore", ",", "penalty", "=", "self", ".", "_postprocess_score", "(", "\n", "score", ",", "box_wh", ",", "target_sz", ",", "scale_x", ")", "\n", "# box post-processing", "\n", "new_target_pos", ",", "new_target_sz", "=", "self", ".", "_postprocess_box", "(", "\n", "best_pscore_id", ",", "score", ",", "box_wh", ",", "target_pos", ",", "target_sz", ",", "scale_x", ",", "\n", "x_size", ",", "penalty", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "box", "=", "self", ".", "_cvt_box_crop2frame", "(", "box_wh", ",", "target_pos", ",", "x_size", ",", "scale_x", ")", "\n", "\n", "# restrict new_target_pos & new_target_sz", "\n", "", "new_target_pos", ",", "new_target_sz", "=", "self", ".", "_restrict_box", "(", "\n", "new_target_pos", ",", "new_target_sz", ")", "\n", "\n", "# record basic mid-level info", "\n", "self", ".", "_state", "[", "'x_crop'", "]", "=", "im_x_crop", "\n", "bbox_pred_in_crop", "=", "np", ".", "rint", "(", "box", "[", "best_pscore_id", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "self", ".", "_state", "[", "'bbox_pred_in_crop'", "]", "=", "bbox_pred_in_crop", "\n", "# record optional mid-level info", "\n", "if", "update_state", ":", "\n", "            ", "self", ".", "_state", "[", "'score'", "]", "=", "score", "\n", "self", ".", "_state", "[", "'pscore'", "]", "=", "pscore", "[", "best_pscore_id", "]", "\n", "self", ".", "_state", "[", "'all_box'", "]", "=", "box", "\n", "\n", "", "return", "new_target_pos", ",", "new_target_sz", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.set_state": [[276, 278], ["None"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "_state", "[", "\"state\"", "]", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.get_track_score": [[279, 281], ["float"], "methods", ["None"], ["", "def", "get_track_score", "(", "self", ")", ":", "\n", "        ", "return", "float", "(", "self", ".", "_state", "[", "\"pscore\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker.update": [[282, 321], ["sparsett_tracker.SparseTTTracker.track", "videoanalyst.pipeline.utils.cxywh2xywh", "videoanalyst.pipeline.utils.xywh2cxywh().reshape", "numpy.concatenate", "videoanalyst.pipeline.utils.xywh2cxywh"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.track", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.cxywh2xywh", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2cxywh"], ["", "def", "update", "(", "self", ",", "im", ",", "state", "=", "None", ")", ":", "\n", "        ", "\"\"\" Perform tracking on current frame\n            Accept provided target state prior on current frame\n            e.g. search the target in another video sequence simutanously\n\n        Arguments\n        ---------\n        im : np.array\n            current frame image\n        state\n            provided target state prior (bbox in case of SOT), format: xywh\n        \"\"\"", "\n", "# use prediction on the last frame as target state prior", "\n", "if", "state", "is", "None", ":", "\n", "            ", "target_pos_prior", ",", "target_sz_prior", "=", "self", ".", "_state", "[", "'state'", "]", "\n", "# use provided bbox as target state prior", "\n", "", "else", ":", "\n", "            ", "rect", "=", "state", "# bbox in xywh format is given for initialization in case of tracking", "\n", "box", "=", "xywh2cxywh", "(", "rect", ")", ".", "reshape", "(", "4", ")", "\n", "target_pos_prior", ",", "target_sz_prior", "=", "box", "[", ":", "2", "]", ",", "box", "[", "2", ":", "]", "\n", "", "features", "=", "self", ".", "_state", "[", "'features'", "]", "\n", "\n", "# forward inference to estimate new state", "\n", "target_pos", ",", "target_sz", "=", "self", ".", "track", "(", "im", ",", "\n", "target_pos_prior", ",", "\n", "target_sz_prior", ",", "\n", "features", ",", "\n", "update_state", "=", "True", ")", "\n", "\n", "# save underlying state", "\n", "# self.state['target_pos'], self.state['target_sz'] = target_pos, target_sz", "\n", "self", ".", "_state", "[", "'state'", "]", "=", "target_pos", ",", "target_sz", "\n", "\n", "# return rect format", "\n", "track_rect", "=", "cxywh2xywh", "(", "np", ".", "concatenate", "(", "[", "target_pos", ",", "target_sz", "]", ",", "\n", "axis", "=", "-", "1", ")", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"corr_fea_output\"", "]", ":", "\n", "            ", "return", "target_pos", ",", "target_sz", ",", "self", ".", "_state", "[", "\"corr_fea\"", "]", "\n", "", "return", "track_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker._postprocess_score": [[324, 368], ["sparsett_tracker.SparseTTTracker._postprocess_score.change"], "methods", ["None"], ["", "def", "_postprocess_score", "(", "self", ",", "score", ",", "box_wh", ",", "target_sz", ",", "scale_x", ")", ":", "\n", "        ", "r\"\"\"\n        Perform SiameseRPN-based tracker's post-processing of score\n        :param score: (HW, ), score prediction\n        :param box_wh: (HW, 4), cxywh, bbox prediction (format changed)\n        :param target_sz: previous state (w & h)\n        :param scale_x:\n        :return:\n            best_pscore_id: index of chosen candidate along axis HW\n            pscore: (HW, ), penalized score\n            penalty: (HW, ), penalty due to scale/ratio change\n        \"\"\"", "\n", "def", "change", "(", "r", ")", ":", "\n", "            ", "return", "np", ".", "maximum", "(", "r", ",", "1.", "/", "r", ")", "\n", "\n", "", "def", "sz", "(", "w", ",", "h", ")", ":", "\n", "            ", "pad", "=", "(", "w", "+", "h", ")", "*", "0.5", "\n", "sz2", "=", "(", "w", "+", "pad", ")", "*", "(", "h", "+", "pad", ")", "\n", "return", "np", ".", "sqrt", "(", "sz2", ")", "\n", "\n", "", "def", "sz_wh", "(", "wh", ")", ":", "\n", "            ", "pad", "=", "(", "wh", "[", "0", "]", "+", "wh", "[", "1", "]", ")", "*", "0.5", "\n", "sz2", "=", "(", "wh", "[", "0", "]", "+", "pad", ")", "*", "(", "wh", "[", "1", "]", "+", "pad", ")", "\n", "return", "np", ".", "sqrt", "(", "sz2", ")", "\n", "\n", "# size penalty", "\n", "", "penalty_k", "=", "self", ".", "_hyper_params", "[", "'penalty_k'", "]", "\n", "target_sz_in_crop", "=", "target_sz", "*", "scale_x", "\n", "s_c", "=", "change", "(", "\n", "sz", "(", "box_wh", "[", ":", ",", "2", "]", ",", "box_wh", "[", ":", ",", "3", "]", ")", "/", "\n", "(", "sz_wh", "(", "target_sz_in_crop", ")", ")", ")", "# scale penalty", "\n", "r_c", "=", "change", "(", "(", "target_sz_in_crop", "[", "0", "]", "/", "target_sz_in_crop", "[", "1", "]", ")", "/", "\n", "(", "box_wh", "[", ":", ",", "2", "]", "/", "box_wh", "[", ":", ",", "3", "]", ")", ")", "# ratio penalty", "\n", "penalty", "=", "np", ".", "exp", "(", "-", "(", "r_c", "*", "s_c", "-", "1", ")", "*", "penalty_k", ")", "\n", "pscore", "=", "penalty", "*", "score", "\n", "\n", "# ipdb.set_trace()", "\n", "# cos window (motion model)", "\n", "window_influence", "=", "self", ".", "_hyper_params", "[", "'window_influence'", "]", "\n", "pscore", "=", "pscore", "*", "(", "\n", "1", "-", "window_influence", ")", "+", "self", ".", "_state", "[", "'window'", "]", "*", "window_influence", "\n", "best_pscore_id", "=", "np", ".", "argmax", "(", "pscore", ")", "\n", "\n", "return", "best_pscore_id", ",", "pscore", ",", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker._postprocess_box": [[369, 401], ["numpy.array", "numpy.array", "numpy.float32"], "methods", ["None"], ["", "def", "_postprocess_box", "(", "self", ",", "best_pscore_id", ",", "score", ",", "box_wh", ",", "target_pos", ",", "\n", "target_sz", ",", "scale_x", ",", "x_size", ",", "penalty", ")", ":", "\n", "        ", "r\"\"\"\n        Perform SiameseRPN-based tracker's post-processing of box\n        :param score: (HW, ), score prediction\n        :param box_wh: (HW, 4), cxywh, bbox prediction (format changed)\n        :param target_pos: (2, ) previous position (x & y)\n        :param target_sz: (2, ) previous state (w & h)\n        :param scale_x: scale of cropped patch of current frame\n        :param x_size: size of cropped patch\n        :param penalty: scale/ratio change penalty calculated during score post-processing\n        :return:\n            new_target_pos: (2, ), new target position\n            new_target_sz: (2, ), new target size\n        \"\"\"", "\n", "pred_in_crop", "=", "box_wh", "[", "best_pscore_id", ",", ":", "]", "/", "np", ".", "float32", "(", "scale_x", ")", "\n", "# about np.float32(scale_x)", "\n", "# attention!, this casting is done implicitly", "\n", "# which can influence final EAO heavily given a model & a set of hyper-parameters", "\n", "\n", "# box post-postprocessing", "\n", "test_lr", "=", "self", ".", "_hyper_params", "[", "'test_lr'", "]", "\n", "lr", "=", "penalty", "[", "best_pscore_id", "]", "*", "score", "[", "best_pscore_id", "]", "*", "test_lr", "\n", "res_x", "=", "pred_in_crop", "[", "0", "]", "+", "target_pos", "[", "0", "]", "-", "(", "x_size", "//", "2", ")", "/", "scale_x", "\n", "res_y", "=", "pred_in_crop", "[", "1", "]", "+", "target_pos", "[", "1", "]", "-", "(", "x_size", "//", "2", ")", "/", "scale_x", "\n", "res_w", "=", "target_sz", "[", "0", "]", "*", "(", "1", "-", "lr", ")", "+", "pred_in_crop", "[", "2", "]", "*", "lr", "\n", "res_h", "=", "target_sz", "[", "1", "]", "*", "(", "1", "-", "lr", ")", "+", "pred_in_crop", "[", "3", "]", "*", "lr", "\n", "\n", "new_target_pos", "=", "np", ".", "array", "(", "[", "res_x", ",", "res_y", "]", ")", "\n", "new_target_sz", "=", "np", ".", "array", "(", "[", "res_w", ",", "res_h", "]", ")", "\n", "\n", "return", "new_target_pos", ",", "new_target_sz", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker._restrict_box": [[402, 418], ["max", "max", "max", "max", "min", "min", "min", "min"], "methods", ["None"], ["", "def", "_restrict_box", "(", "self", ",", "target_pos", ",", "target_sz", ")", ":", "\n", "        ", "r\"\"\"\n        Restrict target position & size\n        :param target_pos: (2, ), target position\n        :param target_sz: (2, ), target size\n        :return:\n            target_pos, target_sz\n        \"\"\"", "\n", "target_pos", "[", "0", "]", "=", "max", "(", "0", ",", "min", "(", "self", ".", "_state", "[", "'im_w'", "]", ",", "target_pos", "[", "0", "]", ")", ")", "\n", "target_pos", "[", "1", "]", "=", "max", "(", "0", ",", "min", "(", "self", ".", "_state", "[", "'im_h'", "]", ",", "target_pos", "[", "1", "]", ")", ")", "\n", "target_sz", "[", "0", "]", "=", "max", "(", "self", ".", "_hyper_params", "[", "'min_w'", "]", ",", "\n", "min", "(", "self", ".", "_state", "[", "'im_w'", "]", ",", "target_sz", "[", "0", "]", ")", ")", "\n", "target_sz", "[", "1", "]", "=", "max", "(", "self", ".", "_hyper_params", "[", "'min_h'", "]", ",", "\n", "min", "(", "self", ".", "_state", "[", "'im_h'", "]", ",", "target_sz", "[", "1", "]", ")", ")", "\n", "\n", "return", "target_pos", ",", "target_sz", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tracker_impl.sparsett_tracker.SparseTTTracker._cvt_box_crop2frame": [[419, 438], ["numpy.stack"], "methods", ["None"], ["", "def", "_cvt_box_crop2frame", "(", "self", ",", "box_in_crop", ",", "target_pos", ",", "scale_x", ",", "x_size", ")", ":", "\n", "        ", "r\"\"\"\n        Convert box from cropped patch to original frame\n        :param box_in_crop: (4, ), cxywh, box in cropped patch\n        :param target_pos: target position\n        :param scale_x: scale of cropped patch\n        :param x_size: size of cropped patch\n        :return:\n            box_in_frame: (4, ), cxywh, box in original frame\n        \"\"\"", "\n", "x", "=", "(", "box_in_crop", "[", "...", ",", "0", "]", ")", "/", "scale_x", "+", "target_pos", "[", "0", "]", "-", "(", "x_size", "//", "\n", "2", ")", "/", "scale_x", "\n", "y", "=", "(", "box_in_crop", "[", "...", ",", "1", "]", ")", "/", "scale_x", "+", "target_pos", "[", "1", "]", "-", "(", "x_size", "//", "\n", "2", ")", "/", "scale_x", "\n", "w", "=", "box_in_crop", "[", "...", ",", "2", "]", "/", "scale_x", "\n", "h", "=", "box_in_crop", "[", "...", ",", "3", "]", "/", "scale_x", "\n", "box_in_frame", "=", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "w", ",", "h", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "box_in_frame", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.engine.builder.build": [[13, 24], ["TASK_ENGINE_BUILDERS[].build", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build"], ["cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.__init__": [[37, 48], ["copy.deepcopy", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pipeline", ":", "PipelineBase", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        pipeline : PipelineBase\n            Pipeline to be tested\n        \"\"\"", "\n", "self", ".", "_hyper_params", "=", "deepcopy", "(", "\n", "self", ".", "default_hyper_params", ")", "# mapping-like object", "\n", "self", ".", "_state", "=", "dict", "(", ")", "# pipeline state", "\n", "self", ".", "_pipeline", "=", "pipeline", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.get_hps": [[49, 59], ["dict"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "dict", "(", ")", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.set_hps": [[60, 73], ["dict"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "dict", "(", ")", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.set_pipeline": [[74, 78], ["None"], "methods", ["None"], ["", "", "def", "set_pipeline", "(", "self", ",", "pipeline", ":", "PipelineBase", ")", ":", "\n", "        ", "r\"\"\"Setter for underlying pipeline\n        \"\"\"", "\n", "self", ".", "_pipeline", "=", "pipeline", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.update_params": [[79, 83], ["None"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "test", "(", "self", ")", "->", "Dict", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.test": [[83, 91], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        an interface to start testing\n        Returns\n        -------\n        Dict\n            result object which need to contain the key \"main_performance\" in case of hyper-parameter optimization\n        \"\"\"", "\n", "", "def", "set_random_seed", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.set_random_seed": [[91, 97], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed"], "methods", ["None"], ["", "def", "set_random_seed", "(", "self", ")", ":", "\n", "        ", "seed", "=", "self", ".", "_hyper_params", "[", "\"random_seed\"", "]", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.builder.build": [[12, 43], ["tester.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "tester.set_hps", "tester.update_params", "testers.append"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester.builder.get_config": [[45, 67], ["tester_base.TASK_TESTERS.items", "yacs.config.CfgNode", "cfg[].append", "yacs.config.CfgNode"], "function", ["None"], ["\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.uav123.UAVTester.__init__": [[35, 37], ["tester_base.TesterBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UAVTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.uav123.UAVTester.update_params": [[39, 47], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.uav123.UAVTester.test": [[48, 95], ["len", "dict", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentUAV123", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentUAV123.report", "uav123.UAVTester._pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentUAV123.run", "enumerate", "torch.Process", "torch.Process", "torch.Process.start", "procs.append", "p.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.report", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentUAV123", "(", "root_dir", ",", "\n", "version", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"success_score\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.uav123.UAVTester.worker": [[96, 118], ["loguru.logger.debug", "pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentUAV123", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentUAV123.run", "loguru.logger.debug"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentUAV123", "(", "root_dir", ",", "\n", "version", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.lasot.LaSOTTester.__init__": [[35, 37], ["tester_base.TesterBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LaSOTTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.lasot.LaSOTTester.update_params": [[39, 47], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.lasot.LaSOTTester.test": [[48, 95], ["len", "dict", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentLaSOT", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentLaSOT.report", "lasot.LaSOTTester._pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentLaSOT.run", "enumerate", "torch.Process", "torch.Process", "torch.Process.start", "procs.append", "p.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.report", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentLaSOT", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"success_score\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.lasot.LaSOTTester.worker": [[96, 118], ["loguru.logger.debug", "pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentLaSOT", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentLaSOT.run", "loguru.logger.debug"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentLaSOT", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.davis.DAVISTester.__init__": [[53, 67], ["tester_base.TesterBase.__init__", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            parent config, (e.g. model / pipeline / tester)\n        pipeline: PipelineBase\n            pipeline to test\n        \"\"\"", "\n", "super", "(", "DAVISTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "-", "1", "\n", "self", ".", "iou_eval_thres", "=", "np", ".", "arange", "(", "0.3", ",", "0.5", ",", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.davis.DAVISTester.test": [[68, 86], ["dict", "os.path.join", "os.path.join", "videoanalyst.utils.ensure_dir", "davis.DAVISTester.run_tracker", "davis.DAVISTester.evaluation"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.run_tracker", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.evaluation"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Run test\n        \"\"\"", "\n", "# set dir", "\n", "self", ".", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "for", "dataset_name", "in", "self", ".", "_hyper_params", "[", "\"dataset_names\"", "]", ":", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "dataset_name", ")", "\n", "self", ".", "save_root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"baseline\"", ")", "\n", "ensure_dir", "(", "self", ".", "save_root_dir", ")", "\n", "# track videos", "\n", "self", ".", "run_tracker", "(", ")", "\n", "# evaluation", "\n", "eval_result", "=", "self", ".", "evaluation", "(", "'default_hp'", ")", "\n", "", "return", "dict", "(", "main_performance", "=", "eval_result", "[", "\"JF\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.davis.DAVISTester.run_tracker": [[87, 137], ["loguru.logger.info", "loguru.logger.info", "videoanalyst.evaluation.davis_benchmark.load_dataset", "list", "list.sort", "len", "tqdm.tqdm.tqdm", "torch.multiprocessing.Manager", "torch.multiprocessing.Manager", "torch.multiprocessing.Manager.Queue", "torch.multiprocessing.Manager.Queue", "float", "loguru.logger.info", "torch.device", "torch.device", "torch.device", "torch.device", "videoanalyst.evaluation.davis_benchmark.load_dataset.keys", "davis.DAVISTester.worker", "range", "math.ceil", "range", "range", "numpy.mean", "range", "torch.multiprocessing.Manager.Queue.get", "speed_list.append", "tqdm.tqdm.tqdm.update", "min", "torch.Process", "torch.Process", "loguru.logger.info", "torch.Process.start", "procs.append", "torch.multiprocessing.Manager.Queue.get", "speed_list.append", "tqdm.tqdm.tqdm.update", "p.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.load_dataset", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.otb.OTBTester.worker", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "def", "run_tracker", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run self.pipeline on DAVIS\n        \"\"\"", "\n", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "logger", ".", "info", "(", "'runing test on devices {}'", ".", "format", "(", "all_devs", ")", ")", "\n", "davis_root", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "logger", ".", "info", "(", "'Using dataset %s at: %s'", "%", "(", "self", ".", "dataset_name", ",", "davis_root", ")", ")", "\n", "# setup dataset", "\n", "dataset", "=", "davis_benchmark", ".", "load_dataset", "(", "davis_root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "keys", "=", "list", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "nr_records", "=", "len", "(", "keys", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nr_records", ")", "\n", "mean_speed", "=", "-", "1", "\n", "speed_list", "=", "[", "]", "\n", "manager", "=", "Manager", "(", ")", "\n", "speed_queue", "=", "manager", ".", "Queue", "(", "500", ")", "\n", "# set worker", "\n", "if", "num_gpu", "==", "0", ":", "\n", "            ", "self", ".", "worker", "(", "keys", ",", "all_devs", "[", "0", "]", ",", "self", ".", "dataset", ",", "speed_queue", ")", "\n", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "nr_video", "=", "math", ".", "ceil", "(", "nr_records", "/", "num_gpu", ")", "\n", "procs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gpu", ")", ":", "\n", "                ", "start", "=", "i", "*", "nr_video", "\n", "end", "=", "min", "(", "start", "+", "nr_video", ",", "nr_records", ")", "\n", "split_records", "=", "keys", "[", "start", ":", "end", "]", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "split_records", ",", "all_devs", "[", "i", "]", ",", "\n", "self", ".", "dataset", ",", "speed_queue", ")", ")", "\n", "logger", ".", "info", "(", "'process:%d, start:%d, end:%d'", "%", "(", "i", ",", "start", ",", "end", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "# print result", "\n", "", "", "mean_speed", "=", "float", "(", "np", ".", "mean", "(", "speed_list", ")", ")", "\n", "logger", ".", "info", "(", "'Mean Speed: {:.2f} FPS'", ".", "format", "(", "mean_speed", ")", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "mean_speed", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.davis.DAVISTester.worker": [[138, 145], ["tracker.set_device", "enumerate", "davis.DAVISTester.track_single_video_vos", "speed_queue.put_nowait"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.davis.DAVISTester.track_single_video_vos"], ["", "def", "worker", "(", "self", ",", "records", ",", "dev", ",", "dataset", ",", "speed_queue", "=", "None", ")", ":", "\n", "        ", "tracker", "=", "self", ".", "_pipeline", "\n", "tracker", ".", "set_device", "(", "dev", ")", "\n", "for", "v_id", ",", "video", "in", "enumerate", "(", "records", ")", ":", "\n", "            ", "speed", "=", "self", ".", "track_single_video_vos", "(", "tracker", ",", "dataset", "[", "video", "]", ")", "\n", "if", "speed_queue", "is", "not", "None", ":", "\n", "                ", "speed_queue", ".", "put_nowait", "(", "speed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.davis.DAVISTester.evaluation": [[146, 170], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "videoanalyst.evaluation.davis_benchmark.davis2017_eval", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.evaluation_method.davis2017_eval"], ["", "", "", "def", "evaluation", "(", "self", ",", "search_task_name", ")", ":", "\n", "        ", "r\"\"\"\n        Run evaluation & write result to csv file under self.tracker_dir\n        \"\"\"", "\n", "\n", "results_path", "=", "join", "(", "self", ".", "save_root_dir", ",", "'results_multi'", ")", "\n", "davis_data_path", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "\n", "eval_dump_path", "=", "join", "(", "self", ".", "save_root_dir", ",", "'dump'", ")", "\n", "if", "not", "isdir", "(", "eval_dump_path", ")", ":", "makedirs", "(", "eval_dump_path", ")", "\n", "\n", "csv_name_global_path", "=", "join", "(", "eval_dump_path", ",", "\n", "search_task_name", "+", "'_global_results.csv'", ")", "\n", "csv_name_per_sequence_path", "=", "join", "(", "\n", "eval_dump_path", ",", "search_task_name", "+", "'_name_per_sequence_results.csv'", ")", "\n", "\n", "version", "=", "self", ".", "dataset_name", "[", "-", "4", ":", "]", "\n", "hp_dict", "=", "{", "}", "\n", "return", "davis_benchmark", ".", "davis2017_eval", "(", "davis_data_path", ",", "\n", "results_path", ",", "\n", "csv_name_global_path", ",", "\n", "csv_name_per_sequence_path", ",", "\n", "hp_dict", ",", "\n", "version", "=", "version", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.davis.DAVISTester.track_single_video_vos": [[171, 357], ["len", "enumerate", "cv2.getTickFrequency", "range", "os.path.join", "loguru.logger.info", "numpy.array", "range", "loguru.logger.info", "loguru.logger.info", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "loguru.logger.info", "enumerate", "len", "len", "videoanalyst.evaluation.davis_benchmark.MultiBatchIouMeter", "enumerate", "os.path.join", "loguru.logger.info", "range", "os.path.isdir", "os.makedirs", "pred_mask_final[].astype", "cv2.imwrite", "os.path.join", "loguru.logger.info", "cv2.VideoWriter", "enumerate", "cv2.VideoWriter.release", "PIL.Image.open", "numpy.array", "int", "len", "len", "tqdm.tqdm.tqdm", "cv2.imread", "cv2.getTickCount", "patch_list.append", "loguru.logger.info", "os.path.isdir", "os.makedirs", "len", "enumerate", "numpy.argmax().astype", "os.path.join", "len", "os.path.isdir", "os.makedirs", "cv2.VideoWriter_fourcc", "cv2.imread", "videoanalyst.evaluation.davis_benchmark.overlay_semantic_mask", "range", "cv2.VideoWriter.write", "PIL.Image.open", "numpy.unique", "len", "len", "len", "len", "len", "len", "len", "len", "cv2.boundingRect", "tracker.init", "cv2.getTickCount", "cv2.imwrite", "round", "round", "round", "cv2.putText", "cv2.rectangle", "str", "str", "tracker.update.astype", "numpy.array", "tracker.update", "os.path.join", "numpy.argmax", "numpy.max", "len", "int", "int", "videoanalyst.evaluation.davis_benchmark.labelcolormap", "int", "int", "int", "cv2.rectangle", "cv2.putText", "obj_patch_list.append", "str", "[].split", "str", "max", "image_files[].split"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.MultiBatchIouMeter", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.release", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.overlay_semantic_mask", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.labelcolormap"], ["", "def", "track_single_video_vos", "(", "self", ",", "tracker", ",", "video", ",", "mot_enable", "=", "True", ")", ":", "\n", "        ", "'''\n        perfrom semi-supervised video object segmentation for single video\n        :param tracker: tracker pipeline\n        :param video: video info\n        :param mot_enable:  if true, perform instance level segmentation on davis, otherwise semantic\n        '''", "\n", "image_files", "=", "video", "[", "'image_files'", "]", "\n", "\n", "annos", "=", "[", "np", ".", "array", "(", "Image", ".", "open", "(", "x", ")", ")", "for", "x", "in", "video", "[", "'anno_files'", "]", "]", "\n", "if", "'anno_init_files'", "in", "video", ":", "\n", "            ", "annos_init", "=", "[", "\n", "np", ".", "array", "(", "Image", ".", "open", "(", "x", ")", ")", "for", "x", "in", "video", "[", "'anno_init_files'", "]", "\n", "]", "\n", "", "else", ":", "\n", "            ", "annos_init", "=", "[", "annos", "[", "0", "]", "]", "\n", "\n", "", "if", "not", "mot_enable", ":", "\n", "            ", "annos", "=", "[", "(", "anno", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "for", "anno", "in", "annos", "]", "\n", "annos_init", "=", "[", "(", "anno_init", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "anno_init", "in", "annos_init", "]", "\n", "\n", "", "if", "'start_frame'", "in", "video", ":", "\n", "            ", "object_ids", "=", "[", "int", "(", "id", ")", "for", "id", "in", "video", "[", "'start_frame'", "]", "]", "\n", "", "else", ":", "\n", "            ", "object_ids", "=", "[", "o_id", "for", "o_id", "in", "np", ".", "unique", "(", "annos", "[", "0", "]", ")", "if", "o_id", "!=", "0", "]", "\n", "if", "len", "(", "object_ids", ")", "!=", "len", "(", "annos_init", ")", ":", "\n", "                ", "annos_init", "=", "annos_init", "*", "len", "(", "object_ids", ")", "\n", "", "", "object_num", "=", "len", "(", "object_ids", ")", "\n", "toc", "=", "0", "\n", "pred_masks", "=", "np", ".", "zeros", "(", "(", "object_num", ",", "len", "(", "image_files", ")", ",", "annos", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "\n", "annos", "[", "0", "]", ".", "shape", "[", "1", "]", ")", ")", "-", "1", "\n", "\n", "if", "self", ".", "_hyper_params", "[", "'save_video'", "]", ":", "\n", "            ", "track_boxes", "=", "np", ".", "zeros", "(", "(", "object_num", ",", "len", "(", "image_files", ")", ",", "4", ")", ")", "\n", "track_mask_boxes", "=", "np", ".", "zeros", "(", "(", "object_num", ",", "len", "(", "image_files", ")", ",", "4", ")", ")", "\n", "track_mask_score", "=", "np", ".", "zeros", "(", "(", "object_num", ",", "len", "(", "image_files", ")", ")", ")", "\n", "track_score", "=", "np", ".", "zeros", "(", "(", "object_num", ",", "len", "(", "image_files", ")", ")", ")", "\n", "state_score", "=", "np", ".", "zeros", "(", "(", "object_num", ",", "len", "(", "image_files", ")", ")", ")", "\n", "", "if", "self", ".", "_hyper_params", "[", "'save_patch'", "]", ":", "\n", "            ", "patch_list", "=", "[", "]", "\n", "\n", "", "for", "obj_id", ",", "o_id", "in", "enumerate", "(", "object_ids", ")", ":", "\n", "            ", "obj_patch_list", "=", "[", "]", "\n", "logger", ".", "info", "(", "'{} th object in video {}'", ".", "format", "(", "o_id", ",", "video", "[", "'name'", "]", ")", ")", "\n", "if", "'start_frame'", "in", "video", ":", "\n", "                ", "start_frame", "=", "video", "[", "'start_frame'", "]", "[", "str", "(", "o_id", ")", "]", "\n", "end_frame", "=", "video", "[", "'end_frame'", "]", "[", "str", "(", "o_id", ")", "]", "\n", "", "else", ":", "\n", "                ", "start_frame", ",", "end_frame", "=", "0", ",", "len", "(", "image_files", ")", "\n", "\n", "", "for", "f", ",", "image_file", "in", "enumerate", "(", "tqdm", "(", "image_files", ")", ")", ":", "\n", "                ", "im", "=", "cv2", ".", "imread", "(", "image_file", ")", "\n", "img_h", ",", "img_w", "=", "im", ".", "shape", "[", "0", "]", ",", "im", ".", "shape", "[", "1", "]", "\n", "\n", "tic", "=", "cv2", ".", "getTickCount", "(", ")", "\n", "if", "f", "==", "start_frame", ":", "# init", "\n", "                    ", "mask", "=", "(", "annos_init", "[", "obj_id", "]", "==", "o_id", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "cv2", ".", "boundingRect", "(", "(", "mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "tracker", ".", "init", "(", "im", ",", "np", ".", "array", "(", "[", "x", ",", "y", ",", "w", ",", "h", "]", ")", ",", "mask", ")", "\n", "", "elif", "end_frame", ">=", "f", ">", "start_frame", ":", "# tracking", "\n", "                    ", "mask", "=", "tracker", ".", "update", "(", "im", ")", "\n", "if", "self", ".", "_hyper_params", "[", "'save_video'", "]", ":", "\n", "                        ", "rect_mask", "=", "tracker", ".", "_state", "[", "'mask_rect'", "]", "\n", "mask_score", "=", "tracker", ".", "_state", "[", "'conf_score'", "]", "\n", "track_boxes", "[", "obj_id", ",", "f", ",", ":", "]", "=", "tracker", ".", "_state", "[", "'track_box'", "]", "\n", "track_mask_boxes", "[", "obj_id", ",", "f", ",", ":", "]", "=", "rect_mask", "\n", "track_mask_score", "[", "obj_id", ",", "f", "]", "=", "mask_score", "\n", "track_score", "[", "obj_id", ",", "f", "]", "=", "tracker", ".", "_state", "[", "\"track_score\"", "]", "\n", "state_score", "[", "obj_id", ",", "f", "]", "=", "tracker", ".", "_state", "[", "\"state_score\"", "]", "\n", "\n", "", "if", "self", ".", "_hyper_params", "[", "'save_patch'", "]", ":", "\n", "                        ", "patch", "=", "tracker", ".", "_state", "[", "'patch_prediction'", "]", "\n", "obj_patch_list", ".", "append", "(", "patch", ")", "\n", "\n", "", "", "toc", "+=", "cv2", ".", "getTickCount", "(", ")", "-", "tic", "\n", "if", "end_frame", ">=", "f", ">=", "start_frame", ":", "\n", "                    ", "pred_masks", "[", "obj_id", ",", "f", ",", ":", ",", ":", "]", "=", "mask", "\n", "", "", "if", "self", ".", "_hyper_params", "[", "'save_patch'", "]", ":", "\n", "                ", "patch_list", ".", "append", "(", "obj_patch_list", ")", "\n", "", "", "toc", "/=", "cv2", ".", "getTickFrequency", "(", ")", "\n", "\n", "if", "len", "(", "annos", ")", "==", "len", "(", "image_files", ")", ":", "\n", "            ", "multi_mean_iou", "=", "davis_benchmark", ".", "MultiBatchIouMeter", "(", "\n", "self", ".", "iou_eval_thres", ",", "\n", "pred_masks", ",", "\n", "annos", ",", "\n", "start", "=", "video", "[", "'start_frame'", "]", "if", "'start_frame'", "in", "video", "else", "None", ",", "\n", "end", "=", "video", "[", "'end_frame'", "]", "if", "'end_frame'", "in", "video", "else", "None", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "object_num", ")", ":", "\n", "            ", "for", "j", ",", "thr", "in", "enumerate", "(", "self", ".", "iou_eval_thres", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "'Fusion Multi Object{:20s} IOU at {:.2f}: {:.4f}'", ".", "format", "(", "\n", "video", "[", "'name'", "]", "+", "'_'", "+", "str", "(", "i", "+", "1", ")", ",", "thr", ",", "\n", "multi_mean_iou", "[", "i", ",", "j", "]", ")", ")", "\n", "\n", "", "", "if", "self", ".", "_hyper_params", "[", "'save_patch'", "]", ":", "\n", "            ", "video_path", "=", "join", "(", "self", ".", "save_root_dir", ",", "'patches'", ",", "video", "[", "'name'", "]", ")", "\n", "logger", ".", "info", "(", "'save patches path: {}'", ".", "format", "(", "video_path", ")", ")", "\n", "if", "not", "isdir", "(", "video_path", ")", ":", "makedirs", "(", "video_path", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "patch_list", ")", ")", ":", "\n", "                ", "patch_images", "=", "patch_list", "[", "i", "]", "\n", "for", "frame_id", ",", "patch_image", "in", "enumerate", "(", "patch_images", ")", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "\n", "join", "(", "video_path", ",", "'obj_{}_{}.png'", ".", "format", "(", "i", ",", "frame_id", ")", ")", ",", "\n", "patch_image", ")", "\n", "\n", "", "", "", "video_path", "=", "join", "(", "self", ".", "save_root_dir", ",", "'results_multi'", ",", "video", "[", "'name'", "]", ")", "\n", "logger", ".", "info", "(", "'save mask path:{}'", ".", "format", "(", "video_path", ")", ")", "\n", "if", "not", "isdir", "(", "video_path", ")", ":", "makedirs", "(", "video_path", ")", "\n", "pred_mask_final", "=", "np", ".", "array", "(", "pred_masks", ")", "\n", "pred_mask_final", "=", "(", "\n", "np", ".", "argmax", "(", "pred_mask_final", ",", "axis", "=", "0", ")", ".", "astype", "(", "'uint8'", ")", "+", "\n", "1", ")", "*", "(", "np", ".", "max", "(", "pred_mask_final", ",", "axis", "=", "0", ")", ">", "\n", "tracker", ".", "_hyper_params", "[", "'mask_pred_thresh'", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "for", "i", "in", "range", "(", "pred_mask_final", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "mask_label", "=", "pred_mask_final", "[", "i", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "join", "(", "video_path", ",", "\n", "image_files", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.png'", ")", ",", "\n", "mask_label", ")", "\n", "", "logger", ".", "info", "(", "\n", "'({:d}) Video: {:12s} Time: {:02.1f}s Speed: {:3.1f}fps'", ".", "format", "(", "\n", "o_id", ",", "video", "[", "'name'", "]", ",", "toc", ",", "\n", "f", "*", "len", "(", "object_ids", ")", "/", "toc", ")", ")", "\n", "speed", "=", "f", "*", "len", "(", "object_ids", ")", "/", "toc", "\n", "logger", ".", "info", "(", "\"{} speed: {}\"", ".", "format", "(", "video", "[", "'name'", "]", ",", "speed", ")", ")", "\n", "\n", "if", "self", ".", "_hyper_params", "[", "'save_video'", "]", ":", "\n", "            ", "video_path", "=", "join", "(", "self", ".", "save_root_dir", ",", "'save_video'", ")", "\n", "if", "not", "isdir", "(", "video_path", ")", ":", "makedirs", "(", "video_path", ")", "\n", "logger", ".", "info", "(", "'save video as : {}'", ".", "format", "(", "video_path", ")", ")", "\n", "\n", "VideoOut", "=", "cv2", ".", "VideoWriter", "(", "\n", "video_path", "+", "'/'", "+", "video", "[", "'name'", "]", "+", "'.avi'", ",", "\n", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'MJPG'", ")", ",", "10.0", ",", "(", "img_w", ",", "img_h", ")", ")", "\n", "for", "f", ",", "image_file", "in", "enumerate", "(", "image_files", ")", ":", "\n", "                ", "img", "=", "cv2", ".", "imread", "(", "image_file", ")", "\n", "mask_f", "=", "pred_mask_final", "[", "f", ",", ":", ",", ":", "]", "\n", "img", "=", "davis_benchmark", ".", "overlay_semantic_mask", "(", "img", ",", "\n", "mask_f", ",", "\n", "alpha", "=", "0.3", ",", "\n", "contour_thickness", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "object_num", ")", ":", "\n", "                    ", "rect", "=", "track_boxes", "[", "i", ",", "f", "]", "\n", "rect", "=", "[", "int", "(", "l", ")", "for", "l", "in", "rect", "]", "\n", "\n", "rect_mask", "=", "track_mask_boxes", "[", "i", ",", "f", "]", "\n", "rect_mask", "=", "[", "int", "(", "l", ")", "for", "l", "in", "rect_mask", "]", "\n", "\n", "mask_score", "=", "round", "(", "track_mask_score", "[", "i", ",", "f", "]", ",", "2", ")", "\n", "track_score_", "=", "round", "(", "track_score", "[", "i", ",", "f", "]", ",", "2", ")", "\n", "state_score_", "=", "round", "(", "state_score", "[", "i", ",", "f", "]", ",", "2", ")", "\n", "color", "=", "davis_benchmark", ".", "labelcolormap", "(", "object_num", "+", "1", ")", "[", "i", "+", "1", "]", "\n", "color_tuple", "=", "(", "int", "(", "color", "[", "0", "]", ")", ",", "int", "(", "color", "[", "1", "]", ")", ",", "int", "(", "color", "[", "2", "]", ")", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "\n", "'Frame : '", "+", "str", "(", "f", ")", ",", "(", "10", ",", "20", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "\n", "0.6", ",", "(", "255", ",", "255", ",", "255", ")", ",", "\n", "thickness", "=", "2", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "rect", "[", "0", "]", ",", "rect", "[", "1", "]", ")", ",", "\n", "(", "rect", "[", "0", "]", "+", "rect", "[", "2", "]", ",", "rect", "[", "1", "]", "+", "rect", "[", "3", "]", ")", ",", "\n", "color", "=", "color_tuple", ",", "\n", "thickness", "=", "2", ")", "\n", "\n", "if", "rect_mask", "[", "0", "]", ">", "0", ":", "\n", "                        ", "cv2", ".", "rectangle", "(", "img", ",", "(", "rect_mask", "[", "0", "]", ",", "rect_mask", "[", "1", "]", ")", ",", "\n", "(", "rect_mask", "[", "0", "]", "+", "rect_mask", "[", "2", "]", ",", "\n", "rect_mask", "[", "1", "]", "+", "rect_mask", "[", "3", "]", ")", ",", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "\n", "thickness", "=", "2", ")", "\n", "", "if", "f", ">", "0", ":", "\n", "                        ", "cv2", ".", "putText", "(", "img", ",", "\n", "'M {} T{} S {}'", ".", "format", "(", "\n", "mask_score", ",", "track_score_", ",", "state_score_", ")", ",", "\n", "(", "rect", "[", "0", "]", ",", "max", "(", "rect", "[", "1", "]", ",", "5", ")", "+", "10", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "\n", "0.5", ",", "\n", "color", "=", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "thickness", "=", "2", ")", "\n", "\n", "", "", "VideoOut", ".", "write", "(", "img", ")", "\n", "", "VideoOut", ".", "release", "(", ")", "\n", "", "return", "speed", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.got10k.GOT10kTester.__init__": [[35, 37], ["tester_base.TesterBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GOT10kTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.got10k.GOT10kTester.update_params": [[39, 47], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.got10k.GOT10kTester.test": [[48, 95], ["len", "dict", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentGOT10k", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentGOT10k.report", "got10k.GOT10kTester._pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentGOT10k.run", "enumerate", "torch.Process", "torch.Process", "torch.Process.start", "procs.append", "p.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.report", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentGOT10k", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"ao\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.got10k.GOT10kTester.worker": [[96, 119], ["got10k.GOT10kTester.set_random_seed", "loguru.logger.debug", "pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentGOT10k", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentGOT10k.run", "loguru.logger.debug"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.set_random_seed", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "self", ".", "set_random_seed", "(", ")", "\n", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentGOT10k", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.__init__": [[58, 71], ["tester_base.TesterBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            parent config, (e.g. model / pipeline / tester)\n        pipeline: PipelineBase\n            pipeline to test\n        \"\"\"", "\n", "super", "(", "VOTTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.test": [[72, 91], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "videoanalyst.utils.ensure_dir", "vot.VOTTester.run_tracker", "vot.VOTTester.evaluation"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.run_tracker", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.evaluation"], ["", "def", "test", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Run test\n        \"\"\"", "\n", "# set dir", "\n", "self", ".", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "test_result_dict", "=", "None", "\n", "for", "dataset_name", "in", "self", ".", "_hyper_params", "[", "\"dataset_names\"", "]", ":", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "dataset_name", ")", "\n", "self", ".", "save_root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"baseline\"", ")", "\n", "ensure_dir", "(", "self", ".", "save_root_dir", ")", "\n", "# track videos", "\n", "self", ".", "run_tracker", "(", ")", "\n", "# evaluation", "\n", "test_result_dict", "=", "self", ".", "evaluation", "(", ")", "\n", "", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.run_tracker": [[92, 150], ["loguru.logger.info", "loguru.logger.info", "videoanalyst.evaluation.vot_benchmark.load_dataset", "list", "list.sort", "len", "tqdm.tqdm.tqdm", "torch.Queue", "torch.Queue", "torch.Queue", "torch.Queue", "float", "loguru.logger.info", "loguru.logger.info", "torch.device", "torch.device", "torch.device", "torch.device", "videoanalyst.evaluation.vot_benchmark.load_dataset.keys", "vot.VOTTester.worker", "range", "math.ceil", "range", "range", "numpy.mean", "range", "torch.Queue.get", "torch.Queue.get", "speed_list.append", "tqdm.tqdm.tqdm.update", "min", "torch.Process", "torch.Process", "print", "torch.Process.start", "procs.append", "torch.Queue.get", "torch.Queue.get", "speed_list.append", "tqdm.tqdm.tqdm.update", "p.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.load_dataset", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.otb.OTBTester.worker", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "def", "run_tracker", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run self.pipeline on VOT\n        \"\"\"", "\n", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "logger", ".", "info", "(", "'runing test on devices {}'", ".", "format", "(", "all_devs", ")", ")", "\n", "vot_root", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", "\n", "logger", ".", "info", "(", "'Using dataset %s at: %s'", "%", "(", "self", ".", "dataset_name", ",", "vot_root", ")", ")", "\n", "# setup dataset", "\n", "dataset", "=", "vot_benchmark", ".", "load_dataset", "(", "vot_root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "keys", "=", "list", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"video_name_list\"", "]", ":", "\n", "            ", "keys", "=", "self", ".", "_hyper_params", "[", "\"video_name_list\"", "]", "\n", "", "nr_records", "=", "len", "(", "keys", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nr_records", ")", "\n", "mean_speed", "=", "-", "1", "\n", "total_lost", "=", "0", "\n", "speed_list", "=", "[", "]", "\n", "result_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "speed_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "# set worker", "\n", "if", "num_gpu", "==", "1", ":", "\n", "            ", "self", ".", "worker", "(", "keys", ",", "all_devs", "[", "0", "]", ",", "result_queue", ",", "speed_queue", ")", "\n", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "t", "=", "result_queue", ".", "get", "(", ")", "\n", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "total_lost", "+=", "t", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "nr_video", "=", "math", ".", "ceil", "(", "nr_records", "/", "num_gpu", ")", "\n", "procs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gpu", ")", ":", "\n", "                ", "start", "=", "i", "*", "nr_video", "\n", "end", "=", "min", "(", "start", "+", "nr_video", ",", "nr_records", ")", "\n", "split_records", "=", "keys", "[", "start", ":", "end", "]", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "split_records", ",", "all_devs", "[", "i", "]", ",", "\n", "result_queue", ",", "speed_queue", ")", ")", "\n", "print", "(", "'process:%d, start:%d, end:%d'", "%", "(", "i", ",", "start", ",", "end", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "t", "=", "result_queue", ".", "get", "(", ")", "\n", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "total_lost", "+=", "t", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "# print result", "\n", "", "", "mean_speed", "=", "float", "(", "np", ".", "mean", "(", "speed_list", ")", ")", "\n", "logger", ".", "info", "(", "'Total Lost: {:d}'", ".", "format", "(", "total_lost", ")", ")", "\n", "logger", ".", "info", "(", "'Mean Speed: {:.2f} FPS'", ".", "format", "(", "mean_speed", ")", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "mean_speed", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.worker": [[151, 175], ["vot.VOTTester.set_random_seed", "tracker.set_device", "enumerate", "vot.VOTTester.track_single_video", "result_queue.put_nowait", "speed_queue.put_nowait"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.tester.tester_base.TesterBase.set_random_seed", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.track_single_video"], ["", "def", "worker", "(", "self", ",", "records", ",", "dev", ",", "result_queue", "=", "None", ",", "speed_queue", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Worker to run tracker on records\n\n        Arguments\n        ---------\n        records:\n            specific records, can be a subset of whole sequence\n        dev: torch.device object\n            target device\n        result_queue:\n            queue for result collecting\n        speed_queue:\n            queue for fps measurement collecting\n        \"\"\"", "\n", "self", ".", "set_random_seed", "(", ")", "\n", "tracker", "=", "self", ".", "_pipeline", "\n", "tracker", ".", "set_device", "(", "dev", ")", "\n", "for", "v_id", ",", "video", "in", "enumerate", "(", "records", ")", ":", "\n", "            ", "lost", ",", "speed", "=", "self", ".", "track_single_video", "(", "tracker", ",", "video", ",", "v_id", "=", "v_id", ")", "\n", "if", "result_queue", "is", "not", "None", ":", "\n", "                ", "result_queue", ".", "put_nowait", "(", "lost", ")", "\n", "", "if", "speed_queue", "is", "not", "None", ":", "\n", "                ", "speed_queue", ".", "put_nowait", "(", "speed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.evaluation": [[176, 218], ["open", "videoanalyst.evaluation.vot_benchmark.VOTDataset", "videoanalyst.evaluation.vot_benchmark.VOTDataset.set_tracker", "AccuracyRobustnessBenchmark", "AccuracyRobustnessBenchmark.eval", "ar_result.update", "AccuracyRobustnessBenchmark.show_result", "EAOBenchmark", "EAOBenchmark.eval", "eao_result.update", "AccuracyRobustnessBenchmark.show_result", "vot.VOTTester.write_result_to_csv", "open.close", "dict", "importlib.import_module", "importlib.import_module", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.set_tracker", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.__init__.show_result", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.__init__.show_result", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.write_result_to_csv"], ["", "", "", "def", "evaluation", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Run evaluation & write result to csv file under self.tracker_dir\n        \"\"\"", "\n", "AccuracyRobustnessBenchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"AccuracyRobustnessBenchmark\"", ")", ".", "AccuracyRobustnessBenchmark", "\n", "EAOBenchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"EAOBenchmark\"", ")", ".", "EAOBenchmark", "\n", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "result_csv", "=", "\"%s.csv\"", "%", "tracker_name", "\n", "\n", "csv_to_write", "=", "open", "(", "join", "(", "self", ".", "tracker_dir", ",", "result_csv", ")", ",", "'a+'", ")", "\n", "dataset", "=", "vot_benchmark", ".", "VOTDataset", "(", "\n", "self", ".", "dataset_name", ",", "\n", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", ")", "\n", "dataset", ".", "set_tracker", "(", "self", ".", "tracker_dir", ",", "self", ".", "tracker_name", ")", "\n", "ar_benchmark", "=", "AccuracyRobustnessBenchmark", "(", "dataset", ")", "\n", "ar_result", "=", "{", "}", "\n", "ret", "=", "ar_benchmark", ".", "eval", "(", "self", ".", "tracker_name", ")", "\n", "ar_result", ".", "update", "(", "ret", ")", "\n", "ar_benchmark", ".", "show_result", "(", "ar_result", ")", "\n", "benchmark", "=", "EAOBenchmark", "(", "dataset", ")", "\n", "eao_result", "=", "{", "}", "\n", "ret", "=", "benchmark", ".", "eval", "(", "self", ".", "tracker_name", ")", "\n", "eao_result", ".", "update", "(", "ret", ")", "\n", "ar_benchmark", ".", "show_result", "(", "ar_result", ",", "\n", "eao_result", "=", "eao_result", ",", "\n", "show_video_level", "=", "False", ")", "\n", "self", ".", "write_result_to_csv", "(", "\n", "ar_result", ",", "\n", "eao_result", ",", "\n", "speed", "=", "self", ".", "_state", "[", "'speed'", "]", ",", "\n", "result_csv", "=", "csv_to_write", ",", "\n", ")", "\n", "csv_to_write", ".", "close", "(", ")", "\n", "eao", "=", "eao_result", "[", "self", ".", "tracker_name", "]", "[", "'all'", "]", "\n", "test_result_dict", "=", "dict", "(", ")", "\n", "test_result_dict", "[", "\"main_performance\"", "]", "=", "eao", "\n", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.track_single_video": [[219, 301], ["enumerate", "cv2.getTickFrequency", "os.path.join", "os.path.join", "videoanalyst.utils.ensure_dir", "os.path.join", "os.path.join", "loguru.logger.info", "importlib.import_module", "importlib.import_module", "len", "tqdm.tqdm.tqdm", "videoanalyst.evaluation.vot_benchmark.get_img", "videoanalyst.evaluation.vot_benchmark.get_img.copy().astype", "cv2.getTickCount", "open", "videoanalyst.evaluation.vot_benchmark.get_axis_aligned_bbox", "videoanalyst.evaluation.vot_benchmark.cxy_wh_2_rect", "tracker.init", "regions.append", "videoanalyst.evaluation.vot_benchmark.get_img.copy", "tracker.update", "vot_overlap", "regions.append", "isinstance", "fin.write", "fin.write", "regions.append", "regions.append", "cv2.getTickCount", "vot_float2str"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_img", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.bbox_helper.get_axis_aligned_bbox", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.bbox_helper.cxy_wh_2_rect", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["", "def", "track_single_video", "(", "self", ",", "tracker", ",", "video", ",", "v_id", "=", "0", ")", ":", "\n", "        ", "r\"\"\"\n        track frames in single video with VOT rules\n\n        Arguments\n        ---------\n        tracker: PipelineBase\n            pipeline\n        video: str\n            video name\n        v_id: int\n            video id\n        \"\"\"", "\n", "vot_overlap", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.utils.region\"", ",", "\n", "package", "=", "\"vot_overlap\"", ")", ".", "vot_overlap", "\n", "vot_float2str", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.utils.region\"", ",", "\n", "package", "=", "\"vot_float2str\"", ")", ".", "vot_float2str", "\n", "regions", "=", "[", "]", "\n", "video", "=", "self", ".", "dataset", "[", "video", "]", "\n", "image_files", ",", "gt", "=", "video", "[", "'image_files'", "]", ",", "video", "[", "'gt'", "]", "\n", "start_frame", ",", "end_frame", ",", "lost_times", ",", "toc", "=", "0", ",", "len", "(", "image_files", ")", ",", "0", ",", "0", "\n", "track_num", "=", "0", "\n", "for", "f", ",", "image_file", "in", "enumerate", "(", "tqdm", "(", "image_files", ")", ")", ":", "\n", "            ", "im", "=", "vot_benchmark", ".", "get_img", "(", "image_file", ")", "\n", "im", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "tic", "=", "cv2", ".", "getTickCount", "(", ")", "\n", "if", "f", "==", "start_frame", ":", "# init", "\n", "                ", "cx", ",", "cy", ",", "w", ",", "h", "=", "vot_benchmark", ".", "get_axis_aligned_bbox", "(", "gt", "[", "f", "]", ")", "\n", "location", "=", "vot_benchmark", ".", "cxy_wh_2_rect", "(", "(", "cx", ",", "cy", ")", ",", "(", "w", ",", "h", ")", ")", "\n", "tracker", ".", "init", "(", "im", ",", "location", ")", "\n", "regions", ".", "append", "(", "1", "if", "'VOT'", "in", "self", ".", "dataset_name", "else", "gt", "[", "f", "]", ")", "\n", "gt_polygon", "=", "None", "\n", "pred_polygon", "=", "None", "\n", "", "elif", "f", ">", "start_frame", ":", "# tracking", "\n", "                ", "location", "=", "tracker", ".", "update", "(", "im", ")", "\n", "track_num", "+=", "1", "\n", "gt_polygon", "=", "(", "gt", "[", "f", "]", "[", "0", "]", ",", "gt", "[", "f", "]", "[", "1", "]", ",", "gt", "[", "f", "]", "[", "2", "]", ",", "gt", "[", "f", "]", "[", "3", "]", ",", "gt", "[", "f", "]", "[", "4", "]", ",", "\n", "gt", "[", "f", "]", "[", "5", "]", ",", "gt", "[", "f", "]", "[", "6", "]", ",", "gt", "[", "f", "]", "[", "7", "]", ")", "\n", "pred_polygon", "=", "(", "location", "[", "0", "]", ",", "location", "[", "1", "]", ",", "\n", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "location", "[", "1", "]", ",", "\n", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "\n", "location", "[", "1", "]", "+", "location", "[", "3", "]", ",", "location", "[", "0", "]", ",", "\n", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", "\n", "b_overlap", "=", "vot_overlap", "(", "gt_polygon", ",", "pred_polygon", ",", "\n", "(", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", ")", ")", "\n", "gt_polygon", "=", "(", "(", "gt", "[", "f", "]", "[", "0", "]", ",", "gt", "[", "f", "]", "[", "1", "]", ")", ",", "(", "gt", "[", "f", "]", "[", "2", "]", ",", "gt", "[", "f", "]", "[", "3", "]", ")", ",", "\n", "(", "gt", "[", "f", "]", "[", "4", "]", ",", "gt", "[", "f", "]", "[", "5", "]", ")", ",", "(", "gt", "[", "f", "]", "[", "6", "]", ",", "gt", "[", "f", "]", "[", "7", "]", ")", ")", "\n", "pred_polygon", "=", "(", "(", "location", "[", "0", "]", ",", "location", "[", "1", "]", ")", ",", "\n", "(", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "\n", "location", "[", "1", "]", ")", ",", "(", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "\n", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", ",", "\n", "(", "location", "[", "0", "]", ",", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", ")", "\n", "\n", "if", "b_overlap", ":", "\n", "                    ", "regions", ".", "append", "(", "location", ")", "\n", "", "else", ":", "# lost", "\n", "                    ", "regions", ".", "append", "(", "2", ")", "\n", "lost_times", "+=", "1", "\n", "start_frame", "=", "f", "+", "5", "# skip 5 frames", "\n", "", "toc", "+=", "cv2", ".", "getTickCount", "(", ")", "-", "tic", "\n", "", "else", ":", "# skip", "\n", "                ", "regions", ".", "append", "(", "0", ")", "\n", "\n", "", "", "toc", "/=", "cv2", ".", "getTickFrequency", "(", ")", "\n", "\n", "# save result", "\n", "result_dir", "=", "join", "(", "self", ".", "save_root_dir", ",", "video", "[", "'name'", "]", ")", "\n", "ensure_dir", "(", "result_dir", ")", "\n", "result_path", "=", "join", "(", "result_dir", ",", "'{:s}_001.txt'", ".", "format", "(", "video", "[", "'name'", "]", ")", ")", "\n", "with", "open", "(", "result_path", ",", "\"w\"", ")", "as", "fin", ":", "\n", "            ", "for", "x", "in", "regions", ":", "\n", "                ", "fin", ".", "write", "(", "\"{:d}\\n\"", ".", "format", "(", "x", ")", ")", "if", "isinstance", "(", "x", ",", "int", ")", "else", "fin", ".", "write", "(", "','", ".", "join", "(", "[", "vot_float2str", "(", "\"%.4f\"", ",", "i", ")", "for", "i", "in", "x", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\n", "'({:d}) Video: {:12s} Time: {:02.1f}s Speed: {:3.1f}fps Lost: {:d} '", "\n", ".", "format", "(", "v_id", ",", "video", "[", "'name'", "]", ",", "toc", ",", "track_num", "/", "toc", ",", "lost_times", ")", ")", "\n", "\n", "return", "lost_times", ",", "track_num", "/", "toc", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.vot.VOTTester.write_result_to_csv": [[302, 333], ["collections.OrderedDict", "list", "numpy.nanmean", "sum", "list", "numpy.mean", "result_csv.write", "os.getsize", "os.getsize", "itertools.chain", "ret[].values", "numpy.sum", "numpy.mean", "result_csv.write", "len", "str", "ret[].values", "ret[].values", "numpy.sum", "str", "collections.OrderedDict.values", "numpy.array", "collections.OrderedDict.keys"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["", "def", "write_result_to_csv", "(", "self", ",", "\n", "ar_result", ",", "\n", "eao_result", ",", "\n", "speed", "=", "-", "1", ",", "\n", "param", "=", "None", ",", "\n", "result_csv", "=", "None", ")", ":", "\n", "        ", "write_header", "=", "(", "osp", ".", "getsize", "(", "result_csv", ".", "name", ")", "==", "0", ")", "\n", "row_dict", "=", "OrderedDict", "(", ")", "\n", "row_dict", "[", "'tracker'", "]", "=", "self", ".", "tracker_name", "\n", "row_dict", "[", "'speed'", "]", "=", "speed", "\n", "\n", "ret", "=", "ar_result", "[", "self", ".", "tracker_name", "]", "\n", "overlaps", "=", "list", "(", "itertools", ".", "chain", "(", "*", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", ")", ")", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "length", "=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", "]", ")", "\n", "failures", "=", "list", "(", "ret", "[", "'failures'", "]", ".", "values", "(", ")", ")", "\n", "lost_number", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "failures", ",", "axis", "=", "0", ")", ")", "\n", "robustness", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "failures", ")", ",", "axis", "=", "0", ")", "/", "length", ")", "*", "100", "\n", "eao", "=", "eao_result", "[", "self", ".", "tracker_name", "]", "[", "'all'", "]", "\n", "\n", "row_dict", "[", "'dataset'", "]", "=", "self", ".", "dataset_name", "\n", "row_dict", "[", "'accuracy'", "]", "=", "accuracy", "\n", "row_dict", "[", "'robustness'", "]", "=", "robustness", "\n", "row_dict", "[", "'lost'", "]", "=", "lost_number", "\n", "row_dict", "[", "'eao'", "]", "=", "eao", "\n", "\n", "if", "write_header", ":", "\n", "            ", "header", "=", "','", ".", "join", "(", "[", "str", "(", "k", ")", "for", "k", "in", "row_dict", ".", "keys", "(", ")", "]", ")", "\n", "result_csv", ".", "write", "(", "'%s\\n'", "%", "header", ")", "\n", "", "row_data", "=", "','", ".", "join", "(", "[", "str", "(", "v", ")", "for", "v", "in", "row_dict", ".", "values", "(", ")", "]", ")", "\n", "result_csv", ".", "write", "(", "'%s\\n'", "%", "row_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.__init__": [[54, 67], ["tester_base.TesterBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            parent config, (e.g. model / pipeline / tester)\n        pipeline: PipelineBase\n            pipeline to test\n        \"\"\"", "\n", "super", "(", "VOTLTTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.update_params": [[68, 70], ["None"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.test": [[71, 93], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "videoanalyst.utils.ensure_dir", "videoanalyst.utils.ensure_dir", "votlt.VOTLTTester.run_tracker", "votlt.VOTLTTester.F1_evaluation"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.run_tracker", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.F1_evaluation"], ["", "def", "test", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Run test\n        \"\"\"", "\n", "# set dir", "\n", "self", ".", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "test_result_dict", "=", "None", "\n", "for", "dataset_name", "in", "self", ".", "_hyper_params", "[", "\"dataset_names\"", "]", ":", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "dataset_name", ")", "\n", "self", ".", "save_root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"longterm\"", ")", "\n", "self", ".", "save_video_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"video\"", ")", "\n", "ensure_dir", "(", "self", ".", "save_root_dir", ")", "\n", "ensure_dir", "(", "self", ".", "save_video_dir", ")", "\n", "# track videos", "\n", "self", ".", "run_tracker", "(", ")", "\n", "# evaluation", "\n", "test_result_dict", "=", "self", ".", "F1_evaluation", "(", ")", "\n", "", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.run_tracker": [[94, 143], ["loguru.logger.info", "loguru.logger.info", "videoanalyst.evaluation.vot_benchmark.load_dataset", "list", "list.sort", "len", "tqdm.tqdm.tqdm", "torch.Queue", "torch.Queue", "float", "loguru.logger.info", "torch.device", "torch.device", "torch.device", "torch.device", "videoanalyst.evaluation.vot_benchmark.load_dataset.keys", "votlt.VOTLTTester.worker", "range", "math.ceil", "range", "range", "numpy.mean", "range", "torch.Queue.get", "speed_list.append", "tqdm.tqdm.tqdm.update", "min", "torch.Process", "torch.Process", "print", "torch.Process.start", "procs.append", "torch.Queue.get", "speed_list.append", "tqdm.tqdm.tqdm.update", "p.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.load_dataset", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.otb.OTBTester.worker", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "def", "run_tracker", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run self.pipeline on VOT\n        \"\"\"", "\n", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "logger", ".", "info", "(", "'runing test on devices {}'", ".", "format", "(", "all_devs", ")", ")", "\n", "vot_root", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", "\n", "logger", ".", "info", "(", "'Using dataset %s at: %s'", "%", "(", "self", ".", "dataset_name", ",", "vot_root", ")", ")", "\n", "# setup dataset", "\n", "dataset", "=", "vot_benchmark", ".", "load_dataset", "(", "vot_root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "keys", "=", "list", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "nr_records", "=", "len", "(", "keys", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nr_records", ")", "\n", "mean_speed", "=", "-", "1", "\n", "speed_list", "=", "[", "]", "\n", "speed_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "# set worker", "\n", "if", "num_gpu", "==", "1", ":", "\n", "            ", "self", ".", "worker", "(", "keys", ",", "all_devs", "[", "0", "]", ",", "speed_queue", ")", "\n", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "nr_video", "=", "math", ".", "ceil", "(", "nr_records", "/", "num_gpu", ")", "\n", "procs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gpu", ")", ":", "\n", "                ", "start", "=", "i", "*", "nr_video", "\n", "end", "=", "min", "(", "start", "+", "nr_video", ",", "nr_records", ")", "\n", "split_records", "=", "keys", "[", "start", ":", "end", "]", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "split_records", ",", "all_devs", "[", "i", "]", ",", "\n", "speed_queue", ")", ")", "\n", "print", "(", "'process:%d, start:%d, end:%d'", "%", "(", "i", ",", "start", ",", "end", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "# print result", "\n", "", "", "mean_speed", "=", "float", "(", "np", ".", "mean", "(", "speed_list", ")", ")", "\n", "logger", ".", "info", "(", "'Mean Speed: {:.2f} FPS'", ".", "format", "(", "mean_speed", ")", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "mean_speed", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.worker": [[144, 164], ["tracker.set_device", "enumerate", "votlt.VOTLTTester.track_single_video", "speed_queue.put_nowait"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.track_single_video"], ["", "def", "worker", "(", "self", ",", "records", ",", "dev", ",", "speed_queue", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Worker to run tracker on records\n\n        Arguments\n        ---------\n        records:\n            specific records, can be a subset of whole sequence\n        dev: torch.device object\n            target device\n        speed_queue:\n            queue for fps measurement collecting\n        \"\"\"", "\n", "# tracker = copy.deepcopy(self._pipeline)", "\n", "tracker", "=", "self", ".", "_pipeline", "\n", "tracker", ".", "set_device", "(", "dev", ")", "\n", "for", "v_id", ",", "video", "in", "enumerate", "(", "records", ")", ":", "\n", "            ", "speed", "=", "self", ".", "track_single_video", "(", "tracker", ",", "video", ",", "v_id", "=", "v_id", ")", "\n", "if", "speed_queue", "is", "not", "None", ":", "\n", "                ", "speed_queue", ".", "put_nowait", "(", "speed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.F1_evaluation": [[165, 189], ["open", "videoanalyst.evaluation.vot_benchmark.VOTLTDataset", "videoanalyst.evaluation.vot_benchmark.VOTLTDataset.set_tracker", "F1Benchmark", "F1Benchmark.eval", "f1_result.update", "F1Benchmark.show_result", "dict", "importlib.import_module", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.set_tracker", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.__init__.show_result"], ["", "", "", "def", "F1_evaluation", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Run evaluation & write result to csv file under self.tracker_dir\n        \"\"\"", "\n", "F1Benchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"F1Benchmark\"", ")", ".", "F1Benchmark", "\n", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "result_csv", "=", "\"%s.csv\"", "%", "tracker_name", "\n", "\n", "open", "(", "join", "(", "self", ".", "tracker_dir", ",", "result_csv", ")", ",", "'a+'", ")", "\n", "dataset", "=", "vot_benchmark", ".", "VOTLTDataset", "(", "\n", "self", ".", "dataset_name", ",", "\n", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", ")", "\n", "dataset", ".", "set_tracker", "(", "self", ".", "tracker_dir", ",", "self", ".", "tracker_name", ")", "\n", "f1_benchmark", "=", "F1Benchmark", "(", "dataset", ")", "\n", "f1_result", "=", "{", "}", "\n", "ret", "=", "f1_benchmark", ".", "eval", "(", "self", ".", "tracker_name", ")", "\n", "f1_result", ".", "update", "(", "ret", ")", "\n", "f1_benchmark", ".", "show_result", "(", "f1_result", ")", "\n", "test_result_dict", "=", "dict", "(", ")", "\n", "test_result_dict", "[", "\"main_performance\"", "]", "=", "0", "\n", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.track_single_video": [[190, 266], ["enumerate", "cv2.getTickFrequency", "os.path.join", "os.path.join", "videoanalyst.utils.ensure_dir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "loguru.logger.info", "importlib.import_module", "len", "tqdm.tqdm.tqdm", "videoanalyst.evaluation.vot_benchmark.get_img", "videoanalyst.evaluation.vot_benchmark.get_img.copy().astype", "cv2.getTickCount", "cv2.VideoWriter.release", "open", "open", "cv2.VideoWriter_fourcc", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "cv2.VideoWriter", "videoanalyst.evaluation.vot_benchmark.get_axis_aligned_bbox", "videoanalyst.evaluation.vot_benchmark.cxy_wh_2_rect", "tracker.init", "regions.append", "scores.append", "cv2.getTickCount", "cv2.rectangle", "cv2.putText", "cv2.VideoWriter.write", "videoanalyst.evaluation.vot_benchmark.get_img.copy", "tracker.update", "regions.append", "scores.append", "str", "isinstance", "fin.write", "fin.write", "fin.write", "fin.write", "int", "int", "int", "int", "int", "int", "vot_float2str"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_img", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.release", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.bbox_helper.get_axis_aligned_bbox", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.bbox_helper.cxy_wh_2_rect", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["", "def", "track_single_video", "(", "self", ",", "tracker", ",", "video", ",", "v_id", "=", "0", ")", ":", "\n", "        ", "r\"\"\"\n        track frames in single video with VOT rules\n\n        Arguments\n        ---------\n        tracker: PipelineBase\n            pipeline\n        video: str\n            video name\n        v_id: int\n            video id\n        \"\"\"", "\n", "vot_float2str", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.utils.region\"", ",", "\n", "package", "=", "\"vot_float2str\"", ")", ".", "vot_float2str", "\n", "regions", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "video", "=", "self", ".", "dataset", "[", "video", "]", "\n", "image_files", ",", "gt", "=", "video", "[", "'image_files'", "]", ",", "video", "[", "'gt'", "]", "\n", "start_frame", ",", "end_frame", ",", "toc", "=", "0", ",", "len", "(", "image_files", ")", ",", "0", "\n", "vw", "=", "None", "\n", "\n", "for", "f", ",", "image_file", "in", "enumerate", "(", "tqdm", "(", "image_files", ")", ")", ":", "\n", "            ", "im", "=", "vot_benchmark", ".", "get_img", "(", "image_file", ")", "\n", "im_show", "=", "im", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"save_video\"", "]", "and", "vw", "is", "None", ":", "\n", "                ", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'MJPG'", ")", "\n", "video_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_video_dir", ",", "\n", "video", "[", "'name'", "]", "+", "\".avi\"", ")", "\n", "width", ",", "height", "=", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "\n", "vw", "=", "cv2", ".", "VideoWriter", "(", "video_path", ",", "fourcc", ",", "25", ",", "\n", "(", "int", "(", "width", ")", ",", "int", "(", "height", ")", ")", ")", "\n", "", "tic", "=", "cv2", ".", "getTickCount", "(", ")", "\n", "if", "f", "==", "start_frame", ":", "# init", "\n", "                ", "cx", ",", "cy", ",", "w", ",", "h", "=", "vot_benchmark", ".", "get_axis_aligned_bbox", "(", "gt", "[", "f", "]", ")", "\n", "location", "=", "vot_benchmark", ".", "cxy_wh_2_rect", "(", "(", "cx", ",", "cy", ")", ",", "(", "w", ",", "h", ")", ")", "\n", "tracker", ".", "init", "(", "im", ",", "location", ")", "\n", "regions", ".", "append", "(", "1", ")", "\n", "scores", ".", "append", "(", "None", ")", "\n", "", "elif", "f", ">", "start_frame", ":", "# tracking", "\n", "                ", "location", "=", "tracker", ".", "update", "(", "im", ")", "\n", "regions", ".", "append", "(", "location", ")", "\n", "scores", ".", "append", "(", "tracker", ".", "_state", "[", "\"pscore\"", "]", ")", "\n", "", "toc", "+=", "cv2", ".", "getTickCount", "(", ")", "-", "tic", "\n", "if", "self", ".", "_hyper_params", "[", "\"save_video\"", "]", ":", "\n", "                ", "cv2", ".", "rectangle", "(", "im_show", ",", "(", "int", "(", "location", "[", "0", "]", ")", ",", "int", "(", "location", "[", "1", "]", ")", ")", ",", "\n", "(", "int", "(", "location", "[", "0", "]", "+", "location", "[", "2", "]", ")", ",", "\n", "int", "(", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "im_show", ",", "str", "(", "scores", "[", "-", "1", "]", ")", ",", "(", "40", ",", "40", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "1", ",", "(", "0", ",", "255", ",", "255", ")", ",", "2", ")", "\n", "vw", ".", "write", "(", "im_show", ")", "\n", "", "", "if", "vw", "is", "not", "None", ":", "\n", "            ", "vw", ".", "release", "(", ")", "\n", "\n", "", "toc", "/=", "cv2", ".", "getTickFrequency", "(", ")", "\n", "\n", "# save result", "\n", "result_dir", "=", "join", "(", "self", ".", "save_root_dir", ",", "video", "[", "'name'", "]", ")", "\n", "ensure_dir", "(", "result_dir", ")", "\n", "result_path", "=", "join", "(", "result_dir", ",", "'{:s}_001.txt'", ".", "format", "(", "video", "[", "'name'", "]", ")", ")", "\n", "with", "open", "(", "result_path", ",", "\"w\"", ")", "as", "fin", ":", "\n", "            ", "for", "x", "in", "regions", ":", "\n", "                ", "fin", ".", "write", "(", "\"{:d}\\n\"", ".", "format", "(", "x", ")", ")", "if", "isinstance", "(", "x", ",", "int", ")", "else", "fin", ".", "write", "(", "','", ".", "join", "(", "[", "vot_float2str", "(", "\"%.4f\"", ",", "i", ")", "for", "i", "in", "x", "]", ")", "+", "'\\n'", ")", "\n", "", "", "result_path", "=", "os", ".", "path", ".", "join", "(", "\n", "result_dir", ",", "'{}_001_confidence.value'", ".", "format", "(", "video", "[", "'name'", "]", ")", ")", "\n", "with", "open", "(", "result_path", ",", "'w'", ")", "as", "fin", ":", "\n", "            ", "for", "x", "in", "scores", ":", "\n", "                ", "fin", ".", "write", "(", "'\\n'", ")", "if", "x", "is", "None", "else", "fin", ".", "write", "(", "\n", "\"{:.6f}\\n\"", ".", "format", "(", "x", ")", ")", "\n", "", "", "logger", ".", "info", "(", "\n", "'({:d}) Video: {:12s} Time: {:02.1f}s Speed: {:3.1f}'", ".", "format", "(", "\n", "v_id", ",", "video", "[", "'name'", "]", ",", "toc", ",", "f", "/", "toc", ")", ")", "\n", "\n", "return", "f", "/", "toc", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.votlt.VOTLTTester.write_result_to_csv": [[267, 298], ["collections.OrderedDict", "list", "numpy.nanmean", "sum", "list", "numpy.mean", "result_csv.write", "os.getsize", "os.getsize", "itertools.chain", "ret[].values", "numpy.sum", "numpy.mean", "result_csv.write", "len", "str", "ret[].values", "ret[].values", "numpy.sum", "str", "collections.OrderedDict.values", "numpy.array", "collections.OrderedDict.keys"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["", "def", "write_result_to_csv", "(", "self", ",", "\n", "ar_result", ",", "\n", "eao_result", ",", "\n", "speed", "=", "-", "1", ",", "\n", "param", "=", "None", ",", "\n", "result_csv", "=", "None", ")", ":", "\n", "        ", "write_header", "=", "(", "osp", ".", "getsize", "(", "result_csv", ".", "name", ")", "==", "0", ")", "\n", "row_dict", "=", "OrderedDict", "(", ")", "\n", "row_dict", "[", "'tracker'", "]", "=", "self", ".", "tracker_name", "\n", "row_dict", "[", "'speed'", "]", "=", "speed", "\n", "\n", "ret", "=", "ar_result", "[", "self", ".", "tracker_name", "]", "\n", "overlaps", "=", "list", "(", "itertools", ".", "chain", "(", "*", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", ")", ")", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "length", "=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", "]", ")", "\n", "failures", "=", "list", "(", "ret", "[", "'failures'", "]", ".", "values", "(", ")", ")", "\n", "lost_number", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "failures", ",", "axis", "=", "0", ")", ")", "\n", "robustness", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "failures", ")", ",", "axis", "=", "0", ")", "/", "length", ")", "*", "100", "\n", "eao", "=", "eao_result", "[", "self", ".", "tracker_name", "]", "[", "'all'", "]", "\n", "\n", "row_dict", "[", "'dataset'", "]", "=", "self", ".", "dataset_name", "\n", "row_dict", "[", "'accuracy'", "]", "=", "accuracy", "\n", "row_dict", "[", "'robustness'", "]", "=", "robustness", "\n", "row_dict", "[", "'lost'", "]", "=", "lost_number", "\n", "row_dict", "[", "'eao'", "]", "=", "eao", "\n", "\n", "if", "write_header", ":", "\n", "            ", "header", "=", "','", ".", "join", "(", "[", "str", "(", "k", ")", "for", "k", "in", "row_dict", ".", "keys", "(", ")", "]", ")", "\n", "result_csv", ".", "write", "(", "'%s\\n'", "%", "header", ")", "\n", "", "row_data", "=", "','", ".", "join", "(", "[", "str", "(", "v", ")", "for", "v", "in", "row_dict", ".", "values", "(", ")", "]", ")", "\n", "result_csv", ".", "write", "(", "'%s\\n'", "%", "row_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.trackingnet.TrackingNetTester.__init__": [[36, 38], ["tester_base.TesterBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TrackingNetTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.trackingnet.TrackingNetTester.update_params": [[40, 48], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.trackingnet.TrackingNetTester.test": [[49, 96], ["len", "dict", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentTrackingNet", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentTrackingNet.report", "trackingnet.TrackingNetTester._pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentTrackingNet.run", "enumerate", "torch.Process", "torch.Process", "torch.Process.start", "procs.append", "p.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.report", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentTrackingNet", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"ao\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.trackingnet.TrackingNetTester.worker": [[97, 119], ["loguru.logger.debug", "pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentTrackingNet", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentTrackingNet.run", "loguru.logger.debug"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentTrackingNet", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.otb.OTBTester.__init__": [[35, 37], ["tester_base.TesterBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OTBTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.otb.OTBTester.update_params": [[39, 47], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.otb.OTBTester.test": [[48, 95], ["len", "dict", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentOTB", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentOTB.report", "otb.OTBTester._pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentOTB.run", "enumerate", "torch.Process", "torch.Process", "torch.Process.start", "procs.append", "p.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.report", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentOTB", "(", "root_dir", ",", "\n", "version", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"success_score\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.tester_impl.otb.OTBTester.worker": [[96, 118], ["loguru.logger.debug", "pipeline.set_device", "utils.got_benchmark_helper.PipelineTracker", "os.join", "os.join", "os.join", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentOTB", "videoanalyst.evaluation.got_benchmark.experiments.ExperimentOTB.run", "loguru.logger.debug"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run"], ["", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentOTB", "(", "root_dir", ",", "\n", "version", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.__init__": [[36, 45], ["copy.deepcopy", "dict", "iter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "dataloader", ",", "monitors", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "_hyper_params", "=", "deepcopy", "(", "\n", "self", ".", "default_hyper_params", ")", "# mapping-like object", "\n", "self", ".", "_state", "=", "dict", "(", ")", "# pipeline state", "\n", "self", ".", "_model", "=", "optimizer", ".", "_model", "\n", "self", ".", "_losses", "=", "optimizer", ".", "_model", ".", "loss", "\n", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "_monitors", "=", "monitors", "\n", "self", ".", "_dataloader", "=", "iter", "(", "dataloader", ")", "# get the iterabel data loader", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.get_hps": [[46, 56], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_hps": [[57, 70], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "Dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.update_params": [[71, 78], ["os.join", "os.join"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "_hyper_params", "[", "\"num_iterations\"", "]", "=", "self", ".", "_hyper_params", "[", "\n", "\"nr_image_per_epoch\"", "]", "//", "self", ".", "_hyper_params", "[", "\"minibatch\"", "]", "\n", "self", ".", "_state", "[", "\"snapshot_dir\"", "]", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", ")", "\n", "\n", "self", ".", "_state", "[", "\"snapshot_file\"", "]", "=", "self", ".", "_hyper_params", "[", "\"snapshot\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.init_train": [[79, 87], ["monitor.init"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init"], ["", "def", "init_train", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface to process pre-train overhead before training\n        trainer's implementation is responsible for checking and \n            calling it automatically before training starts.\n        \"\"\"", "\n", "for", "monitor", "in", "self", ".", "_monitors", ":", "\n", "            ", "monitor", ".", "init", "(", "self", ".", "_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.train": [[88, 92], ["None"], "methods", ["None"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface to train for one epoch\n        \"\"\"", "\n", "", "def", "set_dataloader", "(", "self", ",", "dataloader", ":", "DataLoader", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_dataloader": [[92, 95], ["None"], "methods", ["None"], ["", "def", "set_dataloader", "(", "self", ",", "dataloader", ":", "DataLoader", ")", ":", "\n", "        ", "r\"\"\"\"\"\"", "\n", "self", ".", "_dataloader", "=", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_optimizer": [[96, 99], ["None"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ",", "optimizer", ":", "OptimizerBase", ")", ":", "\n", "        ", "r\"\"\"\"\"\"", "\n", "self", ".", "_optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.is_completed": [[100, 105], ["None"], "methods", ["None"], ["", "def", "is_completed", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Return completion status\"\"\"", "\n", "is_completed", "=", "(", "self", ".", "_state", "[", "\"epoch\"", "]", "+", "1", ">=", "\n", "self", ".", "_hyper_params", "[", "\"max_epoch\"", "]", ")", "\n", "return", "is_completed", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.load_snapshot": [[106, 123], ["os.exists", "os.exists", "loguru.logger.info", "torch.load", "trainer_base.TrainerBase._model.load_state_dict", "trainer_base.TrainerBase._optimizer.load_state_dict", "loguru.logger.info", "loguru.logger.info", "os.realpath", "os.realpath"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.load_state_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.load_state_dict"], ["", "def", "load_snapshot", "(", "self", ")", ":", "\n", "        ", "r\"\"\" \n        load snapshot based on self._hyper_params[\"snapshot\"] or self._state[\"epoch\"]\n        \"\"\"", "\n", "snapshot_file", "=", "self", ".", "_state", "[", "\"snapshot_file\"", "]", "\n", "if", "osp", ".", "exists", "(", "snapshot_file", ")", ":", "\n", "            ", "dev", "=", "self", ".", "_state", "[", "\"devices\"", "]", "[", "0", "]", "\n", "snapshot", "=", "torch", ".", "load", "(", "snapshot_file", ",", "map_location", "=", "dev", ")", "\n", "self", ".", "_model", ".", "load_state_dict", "(", "snapshot", "[", "\"model_state_dict\"", "]", ")", "\n", "self", ".", "_optimizer", ".", "load_state_dict", "(", "snapshot", "[", "\"optimizer_state_dict\"", "]", ")", "\n", "self", ".", "_state", "[", "\"epoch\"", "]", "=", "snapshot", "[", "\"epoch\"", "]", "\n", "logger", ".", "info", "(", "\"Load snapshot from: %s\"", "%", "osp", ".", "realpath", "(", "snapshot_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s does not exist, no snapshot loaded.\"", "%", "\n", "snapshot_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Train from epoch %d\"", "%", "(", "self", ".", "_state", "[", "\"epoch\"", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.save_snapshot": [[124, 156], ["videoanalyst.utils.ensure_dir", "torch.save", "loguru.logger.info", "os.join", "os.join", "trainer_base.TrainerBase._infer_snapshot_dir_file_from_epoch", "os.exists", "os.exists", "loguru.logger.info", "torch.save", "videoanalyst.utils.unwrap_model().state_dict", "videoanalyst.utils.unwrap_model().state_dict", "trainer_base.TrainerBase._optimizer.state_dict", "videoanalyst.utils.unwrap_model", "videoanalyst.utils.unwrap_model"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase._infer_snapshot_dir_file_from_epoch", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.state_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.state_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.state_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.unwrap_model", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.unwrap_model"], ["", "def", "save_snapshot", "(", "self", ",", "model_param_only", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        save snapshot for current epoch\n        \"\"\"", "\n", "epoch", "=", "self", ".", "_state", "[", "\"epoch\"", "]", "\n", "# save dir/filename", "\n", "if", "model_param_only", ":", "\n", "            ", "snapshot_dir", "=", "self", ".", "_state", "[", "\"snapshot_dir\"", "]", "\n", "snapshot_file", "=", "osp", ".", "join", "(", "snapshot_dir", ",", "\"final_model.pkl\"", ")", "\n", "", "else", ":", "\n", "            ", "snapshot_dir", ",", "snapshot_file", "=", "self", ".", "_infer_snapshot_dir_file_from_epoch", "(", "\n", "epoch", ")", "\n", "# prepare snapshot dict to save", "\n", "", "if", "model_param_only", ":", "\n", "            ", "snapshot_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "unwrap_model", "(", "self", ".", "_model", ")", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "snapshot_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "unwrap_model", "(", "self", ".", "_model", ")", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "self", ".", "_optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "# ensure & save", "\n", "", "ensure_dir", "(", "snapshot_dir", ")", "\n", "torch", ".", "save", "(", "snapshot_dict", ",", "snapshot_file", ")", "\n", "# retrying in case of failure (e.g. nfs error)", "\n", "while", "not", "osp", ".", "exists", "(", "snapshot_file", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"retrying\"", ")", "\n", "torch", ".", "save", "(", "snapshot_dict", ",", "snapshot_file", ")", "\n", "", "logger", ".", "info", "(", "\"Snapshot saved at: %s\"", "%", "snapshot_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase._infer_snapshot_dir_file_from_epoch": [[157, 175], ["os.join", "os.join"], "methods", ["None"], ["", "def", "_infer_snapshot_dir_file_from_epoch", "(", "self", ",", "\n", "epoch", ":", "int", ")", "->", "Tuple", "[", "str", ",", "str", "]", ":", "\n", "        ", "r\"\"\"Infer snapshot's directory & file path based on self._state & epoch number pased in\n\n        Parameters\n        ----------\n        epoch : int\n            epoch number\n        \n        Returns\n        -------\n        Tuple[str, str]\n            directory and snapshot file\n            dir, path\n        \"\"\"", "\n", "snapshot_dir", "=", "self", ".", "_state", "[", "\"snapshot_dir\"", "]", "\n", "snapshot_file", "=", "osp", ".", "join", "(", "snapshot_dir", ",", "\"epoch-{}.pkl\"", ".", "format", "(", "epoch", ")", ")", "\n", "return", "snapshot_dir", ",", "snapshot_file", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase._get_latest_model_path": [[176, 187], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir.sort", "os.listdir.sort", "os.join", "os.join", "file_name.endswith", "os.path.getmtime", "os.path.getmtime", "os.path.getmtime", "os.path.getmtime", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "def", "_get_latest_model_path", "(", "self", ")", ":", "\n", "        ", "file_dir", "=", "self", ".", "_state", "[", "\"snapshot_dir\"", "]", "\n", "file_list", "=", "os", ".", "listdir", "(", "file_dir", ")", "\n", "file_list", "=", "[", "\n", "file_name", "for", "file_name", "in", "file_list", "if", "file_name", ".", "endswith", "(", "\"pkl\"", ")", "\n", "]", "\n", "if", "not", "file_list", ":", "\n", "            ", "return", "\"none\"", "\n", "", "file_list", ".", "sort", "(", "key", "=", "lambda", "fn", ":", "os", ".", "path", ".", "getmtime", "(", "osp", ".", "join", "(", "file_dir", ",", "fn", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "osp", ".", "join", "(", "file_dir", ",", "fn", ")", ")", "else", "0", ")", "\n", "return", "osp", ".", "join", "(", "file_dir", ",", "file_list", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.resume": [[188, 204], ["resume.isdigit", "trainer_base.TrainerBase._infer_snapshot_dir_file_from_epoch", "trainer_base.TrainerBase._get_latest_model_path"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase._infer_snapshot_dir_file_from_epoch", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase._get_latest_model_path"], ["", "def", "resume", "(", "self", ",", "resume", ")", ":", "\n", "        ", "r\"\"\"Apply resuming by setting self._state[\"snapshot_file\"]\n        Priviledge snapshot_file to epoch number\n\n        Parameters\n        ----------\n        resume :str\n            latest epoch number, by default -1, \"latest\" or model path\n        \"\"\"", "\n", "if", "resume", ".", "isdigit", "(", ")", ":", "\n", "            ", "_", ",", "snapshot_file", "=", "self", ".", "_infer_snapshot_dir_file_from_epoch", "(", "resume", ")", "\n", "self", ".", "_state", "[", "\"snapshot_file\"", "]", "=", "snapshot_file", "\n", "", "elif", "resume", "==", "\"latest\"", ":", "\n", "            ", "self", ".", "_state", "[", "\"snapshot_file\"", "]", "=", "self", ".", "_get_latest_model_path", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_state", "[", "\"snapshot_file\"", "]", "=", "resume", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device": [[205, 207], ["torch.device"], "methods", ["None"], ["", "", "def", "set_device", "(", "self", ",", "devs", ":", "List", "[", "str", "]", ")", ":", "\n", "        ", "self", ".", "_state", "[", "\"devices\"", "]", "=", "[", "torch", ".", "device", "(", "dev", ")", "for", "dev", "in", "devs", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.builder.build": [[12, 50], ["trainer.get_hps", "videoanalyst.utils.misc.merge_cfg_into_hps", "trainer.set_hps", "trainer.update_params", "monitor.builder.build"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.builder.get_config": [[52, 77], ["trainer_base.TASK_TRAINERS.items", "yacs.config.CfgNode", "yacs.config.CfgNode", "monitor.builder.get_config"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config"], ["return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.distributed_sat_trainer.DistributedSATTrainer.__init__": [[32, 51], ["trainer_base.TrainerBase.__init__", "torch.device"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "dataloader", ",", "monitors", "=", "[", "]", ",", "tracker", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        optimizer: ModuleBase\n            including optimizer, model and loss\n        dataloder: DataLoader\n            PyTorch dataloader object. \n            Usage: batch_data = next(dataloader)\n        \"\"\"", "\n", "super", "(", "DistributedSATTrainer", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "dataloader", ",", "\n", "monitors", ")", "\n", "# update state", "\n", "self", ".", "_state", "[", "\"epoch\"", "]", "=", "-", "1", "# uninitialized", "\n", "self", ".", "_state", "[", "\"initialized\"", "]", "=", "False", "\n", "self", ".", "_state", "[", "\"devices\"", "]", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "self", ".", "tracker", "=", "tracker", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.distributed_sat_trainer.DistributedSATTrainer.init_train": [[52, 67], ["torch.cuda.empty_cache", "distributed_sat_trainer.DistributedSATTrainer._model.train", "distributed_sat_trainer.DistributedSATTrainer.load_snapshot", "distributed_sat_trainer.DistributedSATTrainer._model.set_device", "torch.nn.parallel.DistributedDataParallel", "distributed_sat_trainer.DistributedSATTrainer.tracker.eval", "distributed_sat_trainer.DistributedSATTrainer.tracker.set_device", "loguru.logger.info", "super().init_train", "loguru.logger.info", "type"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.train", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.load_snapshot", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.init_train"], ["", "def", "init_train", "(", "self", ",", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "devs", "=", "self", ".", "_state", "[", "\"devices\"", "]", "\n", "self", ".", "_model", ".", "train", "(", ")", "\n", "self", ".", "load_snapshot", "(", ")", "\n", "# parallelism with Distributed Data Parallel (DDP)", "\n", "self", ".", "_model", ".", "set_device", "(", "devs", "[", "0", "]", ")", "\n", "self", ".", "_model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "_model", ",", "device_ids", "=", "devs", ",", "find_unused_parameters", "=", "True", "\n", ")", "# TODO: devs should be calculated based on rank & num_workers", "\n", "self", ".", "tracker", ".", "eval", "(", ")", "\n", "self", ".", "tracker", ".", "set_device", "(", "devs", "[", "0", "]", ")", "\n", "logger", ".", "info", "(", "\"Use nn.parallel.DistributedDataParallel for parallelism\"", ")", "\n", "super", "(", "DistributedSATTrainer", ",", "self", ")", ".", "init_train", "(", ")", "\n", "logger", ".", "info", "(", "\"{} initialized\"", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.distributed_sat_trainer.DistributedSATTrainer.train": [[68, 133], ["distributed_sat_trainer.DistributedSATTrainer._optimizer.modify_grad", "collections.OrderedDict", "range", "distributed_sat_trainer.DistributedSATTrainer.init_train", "time.time", "videoanalyst.utils.move_data_to_device", "distributed_sat_trainer.DistributedSATTrainer._optimizer.schedule", "distributed_sat_trainer.DistributedSATTrainer._optimizer.zero_grad", "videoanalyst.utils.Timer", "next", "videoanalyst.utils.Timer", "tracker_output[].detach", "videoanalyst.utils.Timer", "distributed_sat_trainer.DistributedSATTrainer._model", "distributed_sat_trainer.DistributedSATTrainer._losses.items", "sum", "videoanalyst.utils.Timer", "videoanalyst.utils.Timer", "distributed_sat_trainer.DistributedSATTrainer._optimizer.step", "videoanalyst.utils.dist_utils.get_rank", "dict", "loguru.logger.info", "torch.no_grad", "distributed_sat_trainer.DistributedSATTrainer.tracker", "collections.OrderedDict", "collections.OrderedDict", "loss", "training_losses.values", "distributed_sat_trainer.DistributedSATTrainer._optimizer.grad_scaler.scale().backward", "sum.backward", "time.time", "monitor.update", "int", "int", "int", "training_data[].size", "distributed_sat_trainer.DistributedSATTrainer._optimizer.grad_scaler.scale"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.modify_grad", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.init_train", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.move_data_to_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.schedule", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.zero_grad", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.step", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_rank", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_state", "[", "\"initialized\"", "]", ":", "\n", "            ", "self", ".", "init_train", "(", ")", "\n", "", "self", ".", "_state", "[", "\"initialized\"", "]", "=", "True", "\n", "\n", "self", ".", "_state", "[", "\"epoch\"", "]", "+=", "1", "\n", "epoch", "=", "self", ".", "_state", "[", "\"epoch\"", "]", "\n", "num_iterations", "=", "self", ".", "_hyper_params", "[", "\"num_iterations\"", "]", "\n", "\n", "# udpate engine_state", "\n", "self", ".", "_state", "[", "\"max_iteration\"", "]", "=", "num_iterations", "\n", "self", ".", "_optimizer", ".", "modify_grad", "(", "epoch", ")", "\n", "self", ".", "_state", "[", "\"print_str\"", "]", "=", "\"\"", "\n", "\n", "time_dict", "=", "OrderedDict", "(", ")", "\n", "for", "iteration", "in", "range", "(", "num_iterations", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_state", "[", "\"iteration\"", "]", "=", "iteration", "\n", "with", "Timer", "(", "name", "=", "\"data\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "training_data", "=", "next", "(", "self", ".", "_dataloader", ")", "\n", "", "training_data", "=", "move_data_to_device", "(", "training_data", ",", "\n", "self", ".", "_state", "[", "\"devices\"", "]", "[", "0", "]", ")", "\n", "schedule_info", "=", "self", ".", "_optimizer", ".", "schedule", "(", "epoch", ",", "iteration", ")", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "with", "Timer", "(", "name", "=", "\"track_fwd\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "tracker_output", "=", "self", ".", "tracker", "(", "training_data", ",", "phase", "=", "\"train\"", ")", "\n", "", "corr_fea", "=", "tracker_output", "[", "\"corr_fea\"", "]", ".", "detach", "(", ")", "\n", "# forward propagation", "\n", "", "with", "Timer", "(", "name", "=", "\"segfwd\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "predict_data", "=", "self", ".", "_model", "(", "training_data", "[", "\"seg_img\"", "]", ",", "corr_fea", ",", "\n", "training_data", "[", "\"filtered_global_img\"", "]", ")", "\n", "training_losses", ",", "extras", "=", "OrderedDict", "(", ")", ",", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss", "in", "self", ".", "_losses", ".", "items", "(", ")", ":", "\n", "                    ", "training_losses", "[", "loss_name", "]", ",", "extras", "[", "loss_name", "]", "=", "loss", "(", "\n", "predict_data", ",", "training_data", "[", "\"seg_mask\"", "]", ")", "\n", "", "total_loss", "=", "sum", "(", "training_losses", ".", "values", "(", ")", ")", "\n", "# backward propagation", "\n", "", "with", "Timer", "(", "name", "=", "\"bwd\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "if", "self", ".", "_optimizer", ".", "grad_scaler", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_optimizer", ".", "grad_scaler", ".", "scale", "(", "total_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                    ", "total_loss", ".", "backward", "(", ")", "\n", "", "", "with", "Timer", "(", "name", "=", "\"optim\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "", "cost_time", "=", "(", "num_iterations", "-", "iteration", ")", "*", "(", "time", ".", "time", "(", ")", "-", "\n", "start_time", ")", "\n", "if", "dist_utils", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "trainer_data", "=", "dict", "(", "\n", "schedule_info", "=", "schedule_info", ",", "\n", "training_losses", "=", "training_losses", ",", "\n", "training_data", "=", "training_data", ",", "\n", "extras", "=", "extras", ",", "\n", "time_dict", "=", "time_dict", ",", "\n", "predict_data", "=", "predict_data", ",", "\n", "iter", "=", "iteration", ",", "\n", ")", "\n", "for", "monitor", "in", "self", ".", "_monitors", ":", "\n", "                    ", "monitor", ".", "update", "(", "trainer_data", ")", "\n", "", "print_str", "=", "\"{}/{} epoch {} eta ({}h {}m {}s) bs: {} \"", ".", "format", "(", "\n", "iteration", ",", "num_iterations", ",", "epoch", ",", "int", "(", "cost_time", "//", "(", "3600", ")", ")", ",", "\n", "int", "(", "cost_time", "%", "3600", "//", "60", ")", ",", "int", "(", "cost_time", "%", "60", ")", ",", "\n", "training_data", "[", "\"im_x\"", "]", ".", "size", "(", "0", ")", ")", "+", "self", ".", "_state", "[", "\"print_str\"", "]", "\n", "logger", ".", "info", "(", "print_str", ")", "\n", "", "del", "training_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.distributed_regular_trainer.DistributedRegularTrainer.__init__": [[38, 56], ["trainer_base.TrainerBase.__init__", "torch.device"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "dataloader", ",", "monitors", "=", "[", "]", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        optimizer: ModuleBase\n            including optimizer, model and loss\n        dataloder: DataLoader\n            PyTorch dataloader object. \n            Usage: batch_data = next(dataloader)\n        \"\"\"", "\n", "super", "(", "DistributedRegularTrainer", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "dataloader", ",", "\n", "monitors", ")", "\n", "# update state", "\n", "self", ".", "_state", "[", "\"epoch\"", "]", "=", "-", "1", "# uninitialized", "\n", "self", ".", "_state", "[", "\"initialized\"", "]", "=", "False", "\n", "self", ".", "_state", "[", "\"devices\"", "]", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.distributed_regular_trainer.DistributedRegularTrainer.init_train": [[57, 70], ["torch.cuda.empty_cache", "distributed_regular_trainer.DistributedRegularTrainer._model.train", "distributed_regular_trainer.DistributedRegularTrainer.load_snapshot", "distributed_regular_trainer.DistributedRegularTrainer._model.set_device", "torch.nn.parallel.DistributedDataParallel", "loguru.logger.info", "super().init_train", "loguru.logger.info", "type"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.train", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.load_snapshot", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.set_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.init_train"], ["", "def", "init_train", "(", "self", ",", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "devs", "=", "self", ".", "_state", "[", "\"devices\"", "]", "\n", "self", ".", "_model", ".", "train", "(", ")", "\n", "self", ".", "load_snapshot", "(", ")", "\n", "# parallelism with Distributed Data Parallel (DDP)", "\n", "self", ".", "_model", ".", "set_device", "(", "devs", "[", "0", "]", ")", "\n", "self", ".", "_model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "_model", ",", "device_ids", "=", "devs", ",", "find_unused_parameters", "=", "True", "\n", ")", "# TODO: devs should be calculated based on rank & num_workers", "\n", "logger", ".", "info", "(", "\"Use nn.parallel.DistributedDataParallel for parallelism\"", ")", "\n", "super", "(", "DistributedRegularTrainer", ",", "self", ")", ".", "init_train", "(", ")", "\n", "logger", ".", "info", "(", "\"{} initialized\"", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.distributed_regular_trainer.DistributedRegularTrainer.train": [[71, 135], ["distributed_regular_trainer.DistributedRegularTrainer._optimizer.modify_grad", "tqdm.tqdm.tqdm", "collections.OrderedDict", "enumerate", "distributed_regular_trainer.DistributedRegularTrainer.init_train", "range", "videoanalyst.utils.move_data_to_device", "distributed_regular_trainer.DistributedRegularTrainer._optimizer.schedule", "distributed_regular_trainer.DistributedRegularTrainer._optimizer.zero_grad", "dict", "tqdm.tqdm.tqdm.set_description", "videoanalyst.utils.Timer", "next", "videoanalyst.utils.Timer", "distributed_regular_trainer.DistributedRegularTrainer._model", "distributed_regular_trainer.DistributedRegularTrainer._losses.items", "sum", "videoanalyst.utils.Timer", "videoanalyst.utils.Timer", "distributed_regular_trainer.DistributedRegularTrainer._optimizer.step", "monitor.update", "collections.OrderedDict", "collections.OrderedDict", "loss", "training_losses.values", "distributed_regular_trainer.DistributedRegularTrainer._optimizer.grad_scaler.scale().backward", "sum.backward", "distributed_regular_trainer.DistributedRegularTrainer._optimizer.grad_scaler.scale"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.modify_grad", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.init_train", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.move_data_to_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.schedule", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.zero_grad", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.step", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_state", "[", "\"initialized\"", "]", ":", "\n", "            ", "self", ".", "init_train", "(", ")", "\n", "", "self", ".", "_state", "[", "\"initialized\"", "]", "=", "True", "\n", "\n", "# epoch counter +1", "\n", "self", ".", "_state", "[", "\"epoch\"", "]", "+=", "1", "\n", "epoch", "=", "self", ".", "_state", "[", "\"epoch\"", "]", "\n", "num_iterations", "=", "self", ".", "_hyper_params", "[", "\"num_iterations\"", "]", "\n", "\n", "# udpate engine_state", "\n", "self", ".", "_state", "[", "\"max_epoch\"", "]", "=", "self", ".", "_hyper_params", "[", "\"max_epoch\"", "]", "\n", "self", ".", "_state", "[", "\"max_iteration\"", "]", "=", "num_iterations", "\n", "\n", "self", ".", "_optimizer", ".", "modify_grad", "(", "epoch", ")", "\n", "# TODO: build stats gathering code and reorganize tqdm", "\n", "pbar", "=", "tqdm", "(", "range", "(", "num_iterations", ")", ")", "\n", "# pbar = range(num_iterations)", "\n", "self", ".", "_state", "[", "\"pbar\"", "]", "=", "pbar", "\n", "self", ".", "_state", "[", "\"print_str\"", "]", "=", "\"\"", "\n", "\n", "time_dict", "=", "OrderedDict", "(", ")", "\n", "for", "iteration", ",", "_", "in", "enumerate", "(", "pbar", ")", ":", "\n", "            ", "self", ".", "_state", "[", "\"iteration\"", "]", "=", "iteration", "\n", "with", "Timer", "(", "name", "=", "\"data\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "training_data", "=", "next", "(", "self", ".", "_dataloader", ")", "\n", "", "training_data", "=", "move_data_to_device", "(", "training_data", ",", "\n", "self", ".", "_state", "[", "\"devices\"", "]", "[", "0", "]", ")", "\n", "schedule_info", "=", "self", ".", "_optimizer", ".", "schedule", "(", "epoch", ",", "iteration", ")", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "# forward propagation", "\n", "with", "Timer", "(", "name", "=", "\"fwd\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "predict_data", "=", "self", ".", "_model", "(", "training_data", ")", "\n", "training_losses", ",", "extras", "=", "OrderedDict", "(", ")", ",", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss", "in", "self", ".", "_losses", ".", "items", "(", ")", ":", "\n", "                    ", "training_losses", "[", "loss_name", "]", ",", "extras", "[", "loss_name", "]", "=", "loss", "(", "\n", "predict_data", ",", "training_data", ")", "\n", "", "total_loss", "=", "sum", "(", "training_losses", ".", "values", "(", ")", ")", "\n", "# backward propagation", "\n", "", "with", "Timer", "(", "name", "=", "\"bwd\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "if", "self", ".", "_optimizer", ".", "grad_scaler", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_optimizer", ".", "grad_scaler", ".", "scale", "(", "total_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                    ", "total_loss", ".", "backward", "(", ")", "\n", "# TODO: No need for average_gradients() when wrapped model with DDP?", "\n", "# TODO: need to register _optimizer.modify_grad as hook", "\n", "#       see https://discuss.pytorch.org/t/distributeddataparallel-modify-gradient-before-averaging/59291", "\n", "# self._optimizer.modify_grad(epoch, iteration)", "\n", "", "", "with", "Timer", "(", "name", "=", "\"optim\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n", "", "trainer_data", "=", "dict", "(", "\n", "schedule_info", "=", "schedule_info", ",", "\n", "training_losses", "=", "training_losses", ",", "\n", "extras", "=", "extras", ",", "\n", "time_dict", "=", "time_dict", ",", "\n", ")", "\n", "\n", "for", "monitor", "in", "self", ".", "_monitors", ":", "\n", "                ", "monitor", ".", "update", "(", "trainer_data", ")", "\n", "", "del", "training_data", "\n", "print_str", "=", "self", ".", "_state", "[", "\"print_str\"", "]", "\n", "pbar", ".", "set_description", "(", "print_str", ")", "\n", "", "del", "pbar", "# need to be freed, otherwise spawn would be stucked.", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.__init__": [[36, 53], ["trainer_base.TrainerBase.__init__", "torch.device"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "dataloader", ",", "monitors", "=", "[", "]", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        optimizer: ModuleBase\n            including optimizer, model and loss\n        dataloder: DataLoader\n            PyTorch dataloader object. \n            Usage: batch_data = next(dataloader)\n        \"\"\"", "\n", "super", "(", "RegularTrainer", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "dataloader", ",", "monitors", ")", "\n", "# update state", "\n", "self", ".", "_state", "[", "\"epoch\"", "]", "=", "-", "1", "# uninitialized", "\n", "self", ".", "_state", "[", "\"initialized\"", "]", "=", "False", "\n", "self", ".", "_state", "[", "\"devices\"", "]", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.init_train": [[54, 67], ["torch.cuda.empty_cache", "regular_trainer.RegularTrainer._model.train", "regular_trainer.RegularTrainer.load_snapshot", "super().init_train", "loguru.logger.info", "len", "torch.nn.DataParallel", "loguru.logger.info", "type"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.train", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer.trainer_base.TrainerBase.load_snapshot", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.init_train"], ["", "def", "init_train", "(", "self", ",", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "# move model & loss to target devices", "\n", "devs", "=", "self", ".", "_state", "[", "\"devices\"", "]", "\n", "self", ".", "_model", ".", "train", "(", ")", "\n", "# load from self._state[\"snapshot_file\"]", "\n", "self", ".", "load_snapshot", "(", ")", "\n", "# parallelism with Data Parallel (DP)", "\n", "if", "len", "(", "self", ".", "_state", "[", "\"devices\"", "]", ")", ">", "1", ":", "\n", "            ", "self", ".", "_model", "=", "nn", ".", "DataParallel", "(", "self", ".", "_model", ",", "device_ids", "=", "devs", ")", "\n", "logger", ".", "info", "(", "\"Use nn.DataParallel for data parallelism\"", ")", "\n", "", "super", "(", "RegularTrainer", ",", "self", ")", ".", "init_train", "(", ")", "\n", "logger", ".", "info", "(", "\"{} initialized\"", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.train": [[68, 129], ["regular_trainer.RegularTrainer._optimizer.modify_grad", "collections.OrderedDict", "range", "regular_trainer.RegularTrainer.init_train", "videoanalyst.utils.move_data_to_device", "regular_trainer.RegularTrainer._optimizer.schedule", "regular_trainer.RegularTrainer._optimizer.zero_grad", "regular_trainer.RegularTrainer._optimizer.modify_grad", "dict", "loguru.logger.info", "videoanalyst.utils.Timer", "next", "videoanalyst.utils.Timer", "regular_trainer.RegularTrainer._model", "regular_trainer.RegularTrainer._losses.items", "sum", "videoanalyst.utils.Timer", "videoanalyst.utils.Timer", "regular_trainer.RegularTrainer._optimizer.step", "monitor.update", "collections.OrderedDict", "collections.OrderedDict", "loss", "training_losses.values", "regular_trainer.RegularTrainer._optimizer.grad_scaler.scale().backward", "sum.backward", "regular_trainer.RegularTrainer._optimizer.grad_scaler.scale"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.modify_grad", "home.repos.pwc.inspect_result.fzh0917_sparsett.trainer_impl.regular_trainer.RegularTrainer.init_train", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.move_data_to_device", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.schedule", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.zero_grad", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.modify_grad", "home.repos.pwc.inspect_result.fzh0917_sparsett.optimizer.optimizer_base.OptimizerBase.step", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_state", "[", "\"initialized\"", "]", ":", "\n", "            ", "self", ".", "init_train", "(", ")", "\n", "", "self", ".", "_state", "[", "\"initialized\"", "]", "=", "True", "\n", "\n", "self", ".", "_state", "[", "\"epoch\"", "]", "+=", "1", "\n", "epoch", "=", "self", ".", "_state", "[", "\"epoch\"", "]", "\n", "num_iterations", "=", "self", ".", "_hyper_params", "[", "\"num_iterations\"", "]", "\n", "\n", "# udpate engine_state", "\n", "self", ".", "_state", "[", "\"max_epoch\"", "]", "=", "self", ".", "_hyper_params", "[", "\"max_epoch\"", "]", "\n", "self", ".", "_state", "[", "\"max_iteration\"", "]", "=", "num_iterations", "\n", "\n", "self", ".", "_optimizer", ".", "modify_grad", "(", "epoch", ")", "\n", "# pbar = tqdm(range(num_iterations))", "\n", "# self._state[\"pbar\"] = pbar", "\n", "self", ".", "_state", "[", "\"print_str\"", "]", "=", "\"\"", "\n", "\n", "time_dict", "=", "OrderedDict", "(", ")", "\n", "for", "iteration", "in", "range", "(", "num_iterations", ")", ":", "\n", "            ", "self", ".", "_state", "[", "\"iteration\"", "]", "=", "iteration", "\n", "with", "Timer", "(", "name", "=", "\"data\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "training_data", "=", "next", "(", "self", ".", "_dataloader", ")", "\n", "", "training_data", "=", "move_data_to_device", "(", "training_data", ",", "\n", "self", ".", "_state", "[", "\"devices\"", "]", "[", "0", "]", ")", "\n", "\n", "schedule_info", "=", "self", ".", "_optimizer", ".", "schedule", "(", "epoch", ",", "iteration", ")", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward propagation", "\n", "with", "Timer", "(", "name", "=", "\"fwd\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "predict_data", "=", "self", ".", "_model", "(", "training_data", ")", "\n", "training_losses", ",", "extras", "=", "OrderedDict", "(", ")", ",", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss", "in", "self", ".", "_losses", ".", "items", "(", ")", ":", "\n", "                    ", "training_losses", "[", "loss_name", "]", ",", "extras", "[", "loss_name", "]", "=", "loss", "(", "\n", "predict_data", ",", "training_data", ")", "\n", "", "total_loss", "=", "sum", "(", "training_losses", ".", "values", "(", ")", ")", "\n", "\n", "# backward propagation", "\n", "", "with", "Timer", "(", "name", "=", "\"bwd\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "if", "self", ".", "_optimizer", ".", "grad_scaler", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_optimizer", ".", "grad_scaler", ".", "scale", "(", "total_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                    ", "total_loss", ".", "backward", "(", ")", "\n", "", "", "self", ".", "_optimizer", ".", "modify_grad", "(", "epoch", ",", "iteration", ")", "\n", "with", "Timer", "(", "name", "=", "\"optim\"", ",", "output_dict", "=", "time_dict", ")", ":", "\n", "                ", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n", "", "trainer_data", "=", "dict", "(", "\n", "schedule_info", "=", "schedule_info", ",", "\n", "training_losses", "=", "training_losses", ",", "\n", "extras", "=", "extras", ",", "\n", "time_dict", "=", "time_dict", ",", "\n", ")", "\n", "\n", "for", "monitor", "in", "self", ".", "_monitors", ":", "\n", "                ", "monitor", ".", "update", "(", "trainer_data", ")", "\n", "", "del", "training_data", "\n", "print_str", "=", "self", ".", "_state", "[", "\"print_str\"", "]", "\n", "# pbar.set_description(print_str)", "\n", "logger", ".", "info", "(", "print_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor.monitor_base.MonitorBase.__init__": [[23, 27], ["copy.deepcopy", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "self", ".", "_hyper_params", "=", "deepcopy", "(", "\n", "self", ".", "default_hyper_params", ")", "# mapping-like object", "\n", "self", ".", "_state", "=", "dict", "(", ")", "# pipeline state", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor.monitor_base.MonitorBase.get_hps": [[28, 38], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor.monitor_base.MonitorBase.set_hps": [[39, 52], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "Dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor.monitor_base.MonitorBase.update_params": [[53, 57], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "init", "(", "self", ",", "engine_state", ":", "Dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor.monitor_base.MonitorBase.init": [[57, 61], ["None"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "engine_state", ":", "Dict", ")", ":", "\n", "        ", "r\"\"\"register engine state & initialize monitor\n        \"\"\"", "\n", "self", ".", "_state", "[", "\"engine_state\"", "]", "=", "engine_state", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor.monitor_base.MonitorBase.update": [[62, 73], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "engine_data", ":", "Dict", ")", ":", "\n", "        ", "\"\"\"an interface to update with engine_data and update iteration data for monitoring\n        Execution result will be saved in engine_state\n\n        Parameters\n        ----------\n        engine_state : Dict\n            _state attribute of engine\n        engine_data : Dict\n            data given by engine at each iteration\n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor.builder.build": [[11, 41], ["monitor.get_hps", "videoanalyst.utils.misc.merge_cfg_into_hps", "monitor.set_hps", "monitor.update_params", "monitors.append"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["def", "build", "(", "\n", "task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor.builder.get_config": [[43, 58], ["monitor_base.TASK_MONITORS.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], ["\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger.__init__": [[38, 45], ["monitor_base.MonitorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "r\"\"\"\n        Arguments\n        ---------\n        \"\"\"", "\n", "super", "(", "TensorboardLogger", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_state", "[", "\"writer\"", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger.update_params": [[46, 51], ["os.join"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "_hyper_params", "[", "\"log_dir\"", "]", "=", "osp", ".", "join", "(", "\n", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", ",", "\n", "\"logs/tensorboard\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger.init": [[53, 55], ["super().init"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init"], ["", "def", "init", "(", "self", ",", "engine_state", ":", "Dict", ")", ":", "\n", "        ", "super", "(", "TensorboardLogger", ",", "self", ")", ".", "init", "(", "engine_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger.update": [[56, 78], ["tensorboard_logger.TensorboardLogger._add_scalar_recursively", "tensorboard_logger.TensorboardLogger._build_writer", "loguru.logger.info", "loguru.logger.info"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger._add_scalar_recursively", "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger._build_writer"], ["", "def", "update", "(", "self", ",", "engine_data", ":", "Dict", ")", ":", "\n", "# from engine state calculate global step", "\n", "        ", "engine_state", "=", "self", ".", "_state", "[", "\"engine_state\"", "]", "\n", "epoch", "=", "engine_state", "[", "\"epoch\"", "]", "\n", "max_epoch", "=", "engine_state", "[", "\"max_epoch\"", "]", "\n", "iteration", "=", "engine_state", "[", "\"iteration\"", "]", "\n", "max_iteration", "=", "engine_state", "[", "\"max_iteration\"", "]", "\n", "global_step", "=", "iteration", "+", "epoch", "*", "max_iteration", "\n", "\n", "# build at first update", "\n", "if", "self", ".", "_state", "[", "\"writer\"", "]", "is", "None", ":", "\n", "            ", "self", ".", "_build_writer", "(", "global_step", "=", "global_step", ")", "\n", "logger", ".", "info", "(", "\n", "\"Tensorboard writer built, starts recording from global_step=%d\"", "\n", "%", "global_step", ",", ")", "\n", "logger", ".", "info", "(", "\n", "\"epoch=%d, max_epoch=%d, iteration=%d, max_iteration=%d\"", "%", "\n", "(", "epoch", ",", "max_epoch", ",", "iteration", ",", "max_iteration", ")", ")", "\n", "", "writer", "=", "self", ".", "_state", "[", "\"writer\"", "]", "\n", "\n", "# traverse engine_data and put to scalar", "\n", "self", ".", "_add_scalar_recursively", "(", "writer", ",", "engine_data", ",", "\"\"", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger._build_writer": [[79, 86], ["videoanalyst.utils.ensure_dir", "torch.utils.tensorboard.writer.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.path.ensure_dir"], ["", "def", "_build_writer", "(", "self", ",", "global_step", "=", "0", ")", ":", "\n", "        ", "log_dir", "=", "self", ".", "_hyper_params", "[", "\"log_dir\"", "]", "\n", "ensure_dir", "(", "log_dir", ")", "\n", "self", ".", "_state", "[", "\"writer\"", "]", "=", "SummaryWriter", "(", "\n", "log_dir", "=", "log_dir", ",", "\n", "purge_step", "=", "global_step", ",", "\n", "filename_suffix", "=", "\"\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger._add_scalar_recursively": [[88, 112], ["isinstance", "writer.add_scalar", "tensorboard_logger.TensorboardLogger._add_scalar_recursively", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.tensorboard_logger.TensorboardLogger._add_scalar_recursively"], ["", "def", "_add_scalar_recursively", "(", "self", ",", "writer", ":", "SummaryWriter", ",", "o", ",", "prefix", ":", "str", ",", "\n", "global_step", ":", "int", ")", ":", "\n", "        ", "\"\"\"Recursively add scalar from mapping-like o: tag1/tag2/tag3/...\n        \n        Parameters\n        ----------\n        writer : SummaryWriter\n            writer\n        o : mapping-like or scalar\n            [description]\n        prefix : str\n            tag prefix, tag is the name to be passed into writer\n        global_step : int\n            global step counter\n        \"\"\"", "\n", "if", "isinstance", "(", "o", ",", "Mapping", ")", ":", "\n", "            ", "for", "k", "in", "o", ":", "\n", "                ", "if", "len", "(", "prefix", ")", ">", "0", ":", "\n", "                    ", "tag", "=", "\"%s/%s\"", "%", "(", "prefix", ",", "k", ")", "\n", "", "else", ":", "\n", "                    ", "tag", "=", "k", "\n", "", "self", ".", "_add_scalar_recursively", "(", "writer", ",", "o", "[", "k", "]", ",", "tag", ",", "global_step", ")", "\n", "", "", "else", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "prefix", ",", "o", ",", "global_step", "=", "global_step", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.monitor_template.Monitor.__init__": [[18, 24], ["monitor_base.MonitorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "r\"\"\"\n        Arguments\n        ---------\n        \"\"\"", "\n", "super", "(", "Monitor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.monitor_template.Monitor.init": [[25, 27], ["super().init"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init"], ["", "def", "init", "(", "self", ",", "engine_state", ":", "Dict", ")", ":", "\n", "        ", "super", "(", "Monitor", ",", "self", ")", ".", "init", "(", "engine_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.monitor_template.Monitor.update": [[28, 30], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "engine_data", ":", "Dict", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.text_info.TextInfo.__init__": [[20, 26], ["monitor_base.MonitorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "r\"\"\"\n        Arguments\n        ---------\n        \"\"\"", "\n", "super", "(", "TextInfo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.text_info.TextInfo.init": [[27, 29], ["super().init"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init"], ["", "def", "init", "(", "self", ",", "engine_state", ":", "Dict", ")", ":", "\n", "        ", "super", "(", "TextInfo", ",", "self", ")", ".", "init", "(", "engine_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.text_info.TextInfo.update": [[30, 64], ["extras.values", "l.detach().cpu().numpy", "l.detach().cpu", "l.detach"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "engine_data", ":", "Dict", ")", ":", "\n", "        ", "r\"\"\"\n        \"\"\"", "\n", "# state", "\n", "engine_state", "=", "self", ".", "_state", "[", "\"engine_state\"", "]", "\n", "# data", "\n", "schedule_info", "=", "engine_data", "[", "\"schedule_info\"", "]", "\n", "training_losses", "=", "engine_data", "[", "\"training_losses\"", "]", "\n", "extras", "=", "engine_data", "[", "\"extras\"", "]", "\n", "time_dict", "=", "engine_data", "[", "\"time_dict\"", "]", "\n", "# schedule information", "\n", "epoch", "=", "engine_state", "[", "\"epoch\"", "]", "\n", "print_str", "=", "'epoch %d, '", "%", "epoch", "\n", "print_str", "+=", "'iter: {}/{}, '", ".", "format", "(", "engine_state", "[", "\"iteration\"", "]", "+", "1", ",", "engine_state", "[", "\"max_iteration\"", "]", ")", "\n", "for", "k", "in", "schedule_info", ":", "\n", "            ", "print_str", "+=", "'%s: %.1e, '", "%", "(", "k", ",", "schedule_info", "[", "k", "]", ")", "\n", "# loss info", "\n", "", "for", "k", "in", "training_losses", ":", "\n", "            ", "l", "=", "training_losses", "[", "k", "]", "\n", "print_str", "+=", "'%s: %.3f, '", "%", "(", "k", ",", "l", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# extra info", "\n", "", "for", "extra", "in", "extras", ".", "values", "(", ")", ":", "\n", "#if extra:", "\n", "#    extra = dist_utils.reduce_dict(extra)", "\n", "            ", "for", "k", "in", "extra", ":", "\n", "                ", "l", "=", "extra", "[", "k", "]", "\n", "print_str", "+=", "'%s: %.3f, '", "%", "(", "k", ",", "l", ")", "\n", "# pring elapsed time", "\n", "# for k in time_dict:", "\n", "#     print_str += \"%s: %.1e, \" % (k, time_dict[k])", "\n", "# max_mem_mb = torch.cuda.max_memory_allocated() / 1024.0 / 1024.0", "\n", "# print_str += \" max mem: {:.1f}M\".format(max_mem_mb)", "\n", "\n", "", "", "engine_state", "[", "\"print_str\"", "]", "=", "print_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.AverageMeter.__init__": [[74, 76], ["queue.Queue"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.AverageMeter.update": [[77, 81], ["utils.AverageMeter.queue_data.full", "utils.AverageMeter.queue_data.put", "utils.AverageMeter.queue_data.get"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.AverageMeter.reset": [[82, 84], ["utils.AverageMeter.queue_data.queue.clear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.AverageMeter.get_mean": [[85, 87], ["numpy.mean"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.uint82bin": [[20, 23], ["str", "range"], "function", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "torch", ".", "log", "(", "torch", ".", "max", "(", "self", ".", "t_eps", ",", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.labelcolormap": [[25, 43], ["numpy.zeros", "range", "range", "utils.uint82bin", "numpy.uint8", "numpy.uint8", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.uint82bin"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.mask_colorize": [[45, 71], ["PIL.Image.fromarray().convert", "cv2.cvtColor.putpalette", "numpy.array().astype", "cv2.cvtColor", "range", "PIL.Image.fromarray", "numpy.array", "int", "cv2.findContours", "cv2.findContours", "len", "cv2.drawContours", "mask.astype", "instance_mask.astype", "instance_mask.astype", "numpy.where", "cv2.__version__.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.fast_hist": [[89, 96], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.np_sigmoid": [[98, 100], ["numpy.exp"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.get_mask_from_sigmoid": [[102, 114], ["utils.np_sigmoid", "numpy.zeros_like", "range"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.np_sigmoid"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.seg_metric.SegMetric.__init__": [[55, 65], ["monitor_base.MonitorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "r\"\"\"\n        Arguments\n        ---------\n        \"\"\"", "\n", "super", "(", "SegMetric", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "show_id", "=", "0", "\n", "self", ".", "outputs", "=", "{", "}", "\n", "self", ".", "metric_dict", "=", "{", "}", "\n", "self", ".", "color_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.seg_metric.SegMetric.init": [[66, 68], ["super().init"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init"], ["", "def", "init", "(", "self", ",", "engine_state", ":", "Dict", ")", ":", "\n", "        ", "super", "(", "SegMetric", ",", "self", ")", ".", "init", "(", "engine_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.seg_metric.SegMetric._fast_hist": [[69, 76], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "methods", ["None"], ["", "def", "_fast_hist", "(", "self", ",", "label_pred", ",", "label_true", ",", "num_classes", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "num_classes", ")", "&", "(", "label_true", "!=", "\n", "ignore_label", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "num_classes", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "num_classes", "**", "2", ")", ".", "reshape", "(", "num_classes", ",", "num_classes", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.seg_metric.SegMetric._draw_predict_mask": [[77, 85], ["utils.mask_colorize", "cv2.resize", "cv2.addWeighted", "utils.labelcolormap"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.mask_colorize", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.labelcolormap"], ["", "def", "_draw_predict_mask", "(", "self", ",", "image", ",", "predict", ",", "num_classes", ")", ":", "\n", "        ", "if", "self", ".", "color_map", "is", "None", ":", "\n", "            ", "self", ".", "color_map", "=", "labelcolormap", "(", "num_classes", ")", "\n", "", "mask", "=", "mask_colorize", "(", "predict", ",", "num_classes", ",", "self", ".", "color_map", ")", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "result_image", "=", "cv2", ".", "addWeighted", "(", "image", ",", "0.6", ",", "mask", ",", "0.4", ",", "0", ")", "\n", "return", "result_image", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.seg_metric.SegMetric.update": [[86, 160], ["numpy.zeros", "enumerate", "numpy.nanmean", "numpy.nanmean", "seg_metric.SegMetric.outputs.keys", "zip", "image.cpu().numpy.cpu().numpy.cpu().numpy", "cv2.resize.cpu().detach().numpy", "lt.cpu().numpy.cpu().numpy.cpu().numpy", "cv2.resize.transpose", "numpy.zeros_like", "lp.squeeze.squeeze.squeeze", "utils.fast_hist", "numpy.diag().sum", "numpy.zeros.sum", "numpy.diag", "numpy.zeros.sum", "numpy.diag", "numpy.zeros.sum", "numpy.zeros.sum", "seg_metric.SegMetric.outputs[].update", "seg_metric.SegMetric.outputs[].get_mean", "cv2.resize", "lp.squeeze.squeeze.flatten", "lt.cpu().numpy.cpu().numpy.flatten", "os.path.exists", "os.makedirs", "image.cpu().numpy.cpu().numpy.transpose().astype", "seg_metric.SegMetric._draw_predict_mask", "cv2.imwrite", "image.cpu().numpy.cpu().numpy.transpose().astype", "seg_metric.SegMetric._draw_predict_mask", "cv2.imwrite", "numpy.diag", "utils.AverageMeter", "image.cpu().numpy.cpu().numpy.cpu", "cv2.resize.cpu().detach", "lt.cpu().numpy.cpu().numpy.cpu", "os.path.join", "os.path.join", "numpy.diag", "numpy.zeros.sum", "numpy.zeros.sum", "image.cpu().numpy.cpu().numpy.transpose", "image.cpu().numpy.cpu().numpy.transpose", "cv2.resize.cpu"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.fast_hist", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.utils.AverageMeter.get_mean", "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.seg_metric.SegMetric._draw_predict_mask", "home.repos.pwc.inspect_result.fzh0917_sparsett.monitor_impl.seg_metric.SegMetric._draw_predict_mask"], ["", "def", "update", "(", "self", ",", "engine_data", ":", "Dict", ")", ":", "\n", "        ", "r\"\"\"\n        \"\"\"", "\n", "iter", "=", "engine_data", "[", "\"iter\"", "]", "\n", "if", "iter", "%", "self", ".", "_hyper_params", "[", "\"interval\"", "]", "!=", "0", ":", "\n", "            ", "engine_data", "[", "\"extras\"", "]", "[", "\"seg_metric\"", "]", "=", "self", ".", "metric_dict", "\n", "", "else", ":", "\n", "# data", "\n", "            ", "seg_mask", "=", "engine_data", "[", "\"training_data\"", "]", "[", "\n", "self", ".", "_hyper_params", "[", "\"gt_name\"", "]", "]", "\n", "images", "=", "engine_data", "[", "\"training_data\"", "]", "[", "\n", "self", ".", "_hyper_params", "[", "\"img_name\"", "]", "]", "\n", "predict_data", "=", "engine_data", "[", "\"predict_data\"", "]", "[", "-", "1", "]", "\n", "extras", "=", "engine_data", "[", "\"extras\"", "]", "\n", "if", "\"seg_metric\"", "not", "in", "extras", ":", "\n", "                ", "extras", "[", "\"seg_metric\"", "]", "=", "{", "}", "\n", "", "num_classes", "=", "self", ".", "_hyper_params", "[", "\"num_classes\"", "]", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "ignore_label", "=", "self", ".", "_hyper_params", "[", "\"ignore_label\"", "]", "\n", "result_dict", "=", "{", "}", "\n", "for", "i", ",", "(", "image", ",", "ro", ",", "\n", "lt", ")", "in", "enumerate", "(", "zip", "(", "images", ",", "predict_data", ",", "seg_mask", ")", ")", ":", "\n", "                ", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ro", "=", "ro", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "lt", "=", "lt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ro", "=", "ro", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "ro", ".", "shape", "[", "0", "]", "!=", "lt", ".", "shape", "[", "0", "]", "or", "ro", ".", "shape", "[", "1", "]", "!=", "lt", ".", "shape", "[", "1", "]", ":", "\n", "                    ", "ro", "=", "cv2", ".", "resize", "(", "ro", ",", "(", "lt", ".", "shape", "[", "1", "]", ",", "lt", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "lp", "=", "np", ".", "zeros_like", "(", "ro", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lp", "[", "ro", ">", "0.5", "]", "=", "1", "\n", "lp", "=", "lp", ".", "squeeze", "(", ")", "\n", "hist", "+=", "fast_hist", "(", "lp", ".", "flatten", "(", ")", ",", "lt", ".", "flatten", "(", ")", ",", "num_classes", ",", "\n", "ignore_label", ")", "\n", "result_dir", "=", "self", ".", "_hyper_params", "[", "\"result_path\"", "]", "\n", "if", "not", "result_dir", ":", "\n", "                    ", "result_dir", "=", "\"tmp/\"", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "", "if", "self", ".", "_hyper_params", "[", "\"show_predict\"", "]", ":", "\n", "                    ", "image_show", "=", "image", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "show_image", "=", "self", ".", "_draw_predict_mask", "(", "\n", "image_show", ",", "lp", ",", "num_classes", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "result_dir", ",", "\n", "\"predict{}.png\"", ".", "format", "(", "self", ".", "show_id", ")", ")", ",", "\n", "show_image", ")", "\n", "", "if", "self", ".", "_hyper_params", "[", "\"show_gt\"", "]", ":", "\n", "                    ", "image_show", "=", "image", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "show_image", "=", "self", ".", "_draw_predict_mask", "(", "\n", "image_show", ",", "lt", ",", "num_classes", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "result_dir", ",", "\n", "\"gt{}.png\"", ".", "format", "(", "self", ".", "show_id", ")", ")", ",", "\n", "show_image", ")", "\n", "", "self", ".", "show_id", "+=", "1", "\n", "if", "self", ".", "show_id", ">=", "self", ".", "_hyper_params", "[", "\"max_show_num\"", "]", ":", "\n", "                    ", "self", ".", "show_id", "=", "0", "\n", "\n", "", "", "result_dict", "[", "\"acc\"", "]", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "result_dict", "[", "\"acc_cls\"", "]", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "\n", "np", ".", "diag", "(", "hist", ")", ")", "\n", "result_dict", "[", "\"mean_iou\"", "]", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "result_dict", "[", "\"fwavacc\"", "]", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "for", "show_key", "in", "self", ".", "_hyper_params", "[", "\"show_items\"", "]", ":", "\n", "                ", "if", "show_key", "not", "in", "self", ".", "outputs", ":", "\n", "                    ", "self", ".", "outputs", "[", "show_key", "]", "=", "AverageMeter", "(", "\n", "self", ".", "_hyper_params", "[", "\"avg_range\"", "]", ")", "\n", "", "self", ".", "outputs", "[", "show_key", "]", ".", "update", "(", "result_dict", "[", "show_key", "]", ")", "\n", "", "for", "key", "in", "self", ".", "outputs", ".", "keys", "(", ")", ":", "\n", "                ", "extras", "[", "\"seg_metric\"", "]", "[", "key", "]", "=", "self", ".", "outputs", "[", "key", "]", ".", "get_mean", "(", ")", "\n", "", "self", ".", "metric_dict", "=", "extras", "[", "\"seg_metric\"", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.data.builder.build": [[20, 73], ["loguru.logger.info", "adaptor_dataset.AdaptorDataset", "loguru.logger.info", "gc.collect", "loguru.logger.info", "videoanalyst.utils.dist_utils.get_world_size", "loguru.logger.info", "adaptor_dataset.AdaptorDataset", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "loguru.logger.info"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.dist_utils.get_world_size"], ["\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.data.builder.get_config": [[75, 101], ["yacs.config.CfgNode", "datapipeline.builder.get_config", "sampler.builder.get_config", "transformer.builder.get_config", "target.builder.get_config"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.data.adaptor_dataset.AdaptorDataset.__init__": [[23, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "task", ",", "\n", "cfg", ",", "\n", "num_epochs", "=", "1", ",", "\n", "nr_image_per_epoch", "=", "1", ",", "\n", "seed", ":", "int", "=", "0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "datapipeline", "=", "None", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "num_epochs", "=", "num_epochs", "\n", "self", ".", "nr_image_per_epoch", "=", "nr_image_per_epoch", "\n", "self", ".", "ext_seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.data.adaptor_dataset.AdaptorDataset.__getitem__": [[38, 53], ["datapipeline.builder.build", "loguru.logger.info", "torch.initial_seed", "torch.initial_seed", "torch.initial_seed", "torch.initial_seed"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "datapipeline", "is", "None", ":", "\n", "# build datapipeline with random seed the first time when __getitem__ is called", "\n", "# usually, dataset is already spawned (into subprocess) at this point.", "\n", "            ", "seed", "=", "(", "torch", ".", "initial_seed", "(", ")", "+", "item", "*", "self", ".", "_SEED_STEP", "+", "\n", "self", ".", "ext_seed", "*", "self", ".", "_EXT_SEED_STEP", ")", "%", "self", ".", "_SEED_DIVIDER", "\n", "self", ".", "datapipeline", "=", "datapipeline_builder", ".", "build", "(", "self", ".", "task", ",", "\n", "self", ".", "cfg", ",", "\n", "seed", "=", "seed", ")", "\n", "logger", ".", "info", "(", "\"AdaptorDataset #%d built datapipeline with seed=%d\"", "%", "\n", "(", "item", ",", "seed", ")", ")", "\n", "\n", "", "training_data", "=", "self", ".", "datapipeline", "[", "item", "]", "\n", "\n", "return", "training_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.data.adaptor_dataset.AdaptorDataset.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nr_image_per_epoch", "*", "self", ".", "num_epochs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.builder.build": [[12, 35], ["module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params", "modules.append"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.builder.get_config": [[37, 52], ["dataset_base.TASK_DATASETS.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], ["\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.dataset_base.DatasetBase.__init__": [[26, 29], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "_hyper_params", "=", "self", ".", "default_hyper_params", "\n", "self", ".", "_state", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.dataset_base.DatasetBase.get_hps": [[30, 40], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        Dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.dataset_base.DatasetBase.set_hps": [[41, 54], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "Dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: Dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.dataset_base.DatasetBase.update_params": [[55, 59], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ":", "int", ")", "->", "Dict", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.dataset_base.DatasetBase.__getitem__": [[59, 63], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ":", "int", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        An interface to get data item (Index-based Dataset).\n        \"\"\"", "\n", "", "def", "__next__", "(", "self", ")", "->", "Dict", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.dataset_base.DatasetBase.__next__": [[63, 67], ["None"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        An interface to get data item (Sampler-based Dataset).\n        \"\"\"", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset.dataset_base.DatasetBase.__len__": [[67, 78], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Length of dataset\n\n        Returns\n        -------\n        int\n            length of dataset\n            positive integer if Index-based Dataset\n            -1 if Sampler-based Dataset \n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ytb_vos.YoutubeVOSDataset.__init__": [[42, 48], ["videoanalyst.data.dataset.dataset_base.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Create youtube vos dataset\n        \"\"\"", "\n", "super", "(", "YoutubeVOSDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_state", "[", "\"dataset\"", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ytb_vos.YoutubeVOSDataset.update_params": [[49, 57], ["os.realpath", "os.realpath", "len", "ytb_vos.YoutubeVOSDataset._ensure_cache"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._ensure_cache"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "dataset_root", "=", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "\n", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "=", "osp", ".", "realpath", "(", "dataset_root", ")", "\n", "if", "len", "(", "YoutubeVOSDataset", ".", "data_items", ")", "==", "0", ":", "\n", "            ", "self", ".", "_ensure_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ytb_vos.YoutubeVOSDataset.__getitem__": [[58, 71], ["dict"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        :param item: int, video id\n        :return:\n            image_files\n            annos\n            meta (optional)\n        \"\"\"", "\n", "record", "=", "YoutubeVOSDataset", ".", "data_items", "[", "item", "]", "\n", "anno", "=", "[", "[", "anno_file", ",", "record", "[", "'obj_id'", "]", "]", "for", "anno_file", "in", "record", "[", "\"annos\"", "]", "]", "\n", "sequence_data", "=", "dict", "(", "image", "=", "record", "[", "\"image_files\"", "]", ",", "anno", "=", "anno", ")", "\n", "\n", "return", "sequence_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ytb_vos.YoutubeVOSDataset.__len__": [[72, 74], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "YoutubeVOSDataset", ".", "data_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ytb_vos.YoutubeVOSDataset._ensure_cache": [[75, 114], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.exists", "os.exists", "loguru.logger.info", "os.join", "os.join", "os.dirname", "os.dirname", "loguru.logger.info", "open", "pickle.load", "open", "json.load", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "open", "pickle.dump", "int", "data_anno_list.append", "os.join", "os.join", "os.join", "os.join"], "methods", ["None"], ["", "def", "_ensure_cache", "(", "self", ")", ":", "\n", "        ", "dataset_root", "=", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "image_root", "=", "osp", ".", "join", "(", "dataset_root", ",", "subset", ",", "\"JPEGImages\"", ")", "\n", "anno_root", "=", "osp", ".", "join", "(", "dataset_root", ",", "subset", ",", "\"Annotations\"", ")", "\n", "data_anno_list", "=", "[", "]", "\n", "cache_file", "=", "osp", ".", "join", "(", "dataset_root", ",", "\"cache/{}.pkl\"", ".", "format", "(", "subset", ")", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "                ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "YoutubeVOSDataset", ".", "data_items", "+=", "pickle", ".", "load", "(", "f", ")", "\n", "", "logger", ".", "info", "(", "\"{}: loaded cache file {}\"", ".", "format", "(", "\n", "YoutubeVOSDataset", ".", "__name__", ",", "cache_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "meta_file", "=", "osp", ".", "join", "(", "dataset_root", ",", "subset", ",", "\"meta.json\"", ")", "\n", "with", "open", "(", "meta_file", ")", "as", "f", ":", "\n", "                    ", "records", "=", "json", ".", "load", "(", "f", ")", "\n", "", "records", "=", "records", "[", "\"videos\"", "]", "\n", "for", "video_id", "in", "records", ":", "\n", "                    ", "video", "=", "records", "[", "video_id", "]", "\n", "for", "obj_id", "in", "video", "[", "\"objects\"", "]", ":", "\n", "                        ", "record", "=", "video", "[", "'objects'", "]", "[", "obj_id", "]", "\n", "record", "[", "'image_files'", "]", "=", "[", "\n", "osp", ".", "join", "(", "image_root", ",", "video_id", ",", "frame_id", "+", "'.jpg'", ")", "\n", "for", "frame_id", "in", "record", "[", "'frames'", "]", "\n", "]", "\n", "record", "[", "'annos'", "]", "=", "[", "\n", "osp", ".", "join", "(", "anno_root", ",", "video_id", ",", "frame_id", "+", "'.png'", ")", "\n", "for", "frame_id", "in", "record", "[", "'frames'", "]", "\n", "]", "\n", "record", "[", "'obj_id'", "]", "=", "int", "(", "obj_id", ")", "\n", "data_anno_list", ".", "append", "(", "record", ")", "\n", "", "", "cache_dir", "=", "osp", ".", "dirname", "(", "cache_file", ")", "\n", "if", "not", "osp", ".", "exists", "(", "cache_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "data_anno_list", ",", "f", ")", "\n", "", "logger", ".", "info", "(", "\"Youtube VOS dataset: cache dumped at: {}\"", ".", "format", "(", "\n", "cache_file", ")", ")", "\n", "YoutubeVOSDataset", ".", "data_items", "+=", "data_anno_list", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.coco.COCODataset.__init__": [[44, 50], ["videoanalyst.data.dataset.dataset_base.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Create dataset with config\n        \"\"\"", "\n", "super", "(", "COCODataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_state", "[", "\"dataset\"", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.coco.COCODataset.update_params": [[51, 59], ["os.realpath", "os.realpath", "len", "coco.COCODataset._ensure_cache"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._ensure_cache"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "dataset_root", "=", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "\n", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "=", "osp", ".", "realpath", "(", "dataset_root", ")", "\n", "if", "len", "(", "COCODataset", ".", "data_items", ")", "==", "0", ":", "\n", "            ", "self", ".", "_ensure_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.coco.COCODataset._generate_mask_from_anno": [[60, 73], ["pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "numpy.zeros.astype", "len", "numpy.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.neck_impl.transformer_neck.TransformerNeck.decode"], ["", "", "def", "_generate_mask_from_anno", "(", "self", ",", "raw_mask", ",", "img_h", ",", "img_w", ")", ":", "\n", "        ", "jth_mask_raw", "=", "MaskApi", ".", "frPyObjects", "(", "raw_mask", ",", "img_h", ",", "img_w", ")", "\n", "jth_mask", "=", "MaskApi", ".", "decode", "(", "jth_mask_raw", ")", "\n", "mask_shape", "=", "jth_mask", ".", "shape", "\n", "if", "len", "(", "mask_shape", ")", "==", "3", ":", "\n", "            ", "target_mask", "=", "np", ".", "zeros", "(", "(", "mask_shape", "[", "0", "]", ",", "mask_shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "iter_chl", "in", "range", "(", "mask_shape", "[", "2", "]", ")", ":", "\n", "                ", "target_mask", "=", "target_mask", "|", "jth_mask", "[", ":", ",", ":", ",", "iter_chl", "]", "\n", "", "", "else", ":", "\n", "            ", "target_mask", "=", "jth_mask", "\n", "", "target_mask", "=", "target_mask", ".", "astype", "(", "np", ".", "uint8", ")", "# \u5168\u90e8\u662f0\u6216\u80051", "\n", "return", "target_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.coco.COCODataset.__getitem__": [[74, 105], ["dict", "videoanalyst.pipeline.utils.bbox.xywh2xyxy", "dict", "coco.COCODataset._generate_mask_from_anno", "mask_anno.append", "videoanalyst.pipeline.utils.bbox.xywh2xyxy.append", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy", "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.coco.COCODataset._generate_mask_from_anno"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        :param item: int, video id\n        :return:\n            image_files\n            annos\n            meta (optional)\n        \"\"\"", "\n", "record", "=", "COCODataset", ".", "data_items", "[", "item", "]", "\n", "image_file", "=", "record", "[", "\"file_name\"", "]", "\n", "img_h", "=", "record", "[", "\"height\"", "]", "\n", "img_w", "=", "record", "[", "\"width\"", "]", "\n", "anno", "=", "record", "[", "'annotations'", "]", "\n", "if", "self", ".", "_hyper_params", "[", "\"with_mask\"", "]", ":", "\n", "            ", "mask_anno", "=", "[", "]", "\n", "for", "obj", "in", "anno", ":", "\n", "                ", "raw_mask", "=", "obj", "[", "'segmentation'", "]", "\n", "mask", "=", "self", ".", "_generate_mask_from_anno", "(", "raw_mask", ",", "img_h", ",", "img_w", ")", "\n", "mask_anno", ".", "append", "(", "mask", ")", "\n", "\n", "", "sequence_data", "=", "dict", "(", "image", "=", "[", "image_file", "]", ",", "anno", "=", "mask_anno", ")", "\n", "", "else", ":", "\n", "            ", "box_anno", "=", "[", "]", "\n", "for", "obj", "in", "anno", ":", "\n", "                ", "box_anno", ".", "append", "(", "obj", "[", "'bbox'", "]", ")", "\n", "", "if", "len", "(", "box_anno", ")", "<=", "0", ":", "\n", "                ", "box_anno", "=", "self", ".", "_DUMMY_ANNO", "\n", "", "box_anno", "=", "xywh2xyxy", "(", "box_anno", ")", "\n", "sequence_data", "=", "dict", "(", "image", "=", "[", "image_file", "]", ",", "anno", "=", "box_anno", ")", "\n", "\n", "", "return", "sequence_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.coco.COCODataset.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "COCODataset", ".", "data_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.coco.COCODataset._ensure_cache": [[109, 235], ["os.join", "os.join", "os.exists", "os.exists", "os.join", "os.join", "os.join", "os.join", "loguru.logger.info", "os.join", "os.join", "list", "os.dirname", "os.dirname", "loguru.logger.info", "open", "pickle.load", "contextlib.redirect_stdout", "pycocotools.coco.COCO", "sorted", "pycocotools.coco.COCO.loadImgs", "zip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data_anno_list.append", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "open", "pickle.dump", "io.StringIO", "pycocotools.coco.COCO.imgs.keys", "len", "len", "loguru.logger.error", "anno.get", "objs.append", "len", "set", "anno.get", "isinstance", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get"], ["", "def", "_ensure_cache", "(", "self", ")", ":", "\n", "        ", "dataset_root", "=", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "\n", "subsets", "=", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", "\n", "for", "subset", "in", "subsets", ":", "\n", "            ", "data_anno_list", "=", "[", "]", "\n", "image_root", "=", "osp", ".", "join", "(", "dataset_root", ",", "subset", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"with_mask\"", "]", ":", "\n", "                ", "cache_file", "=", "osp", ".", "join", "(", "dataset_root", ",", "\n", "\"cache/coco_mask_{}.pkl\"", ".", "format", "(", "subset", ")", ")", "\n", "", "else", ":", "\n", "                ", "cache_file", "=", "osp", ".", "join", "(", "dataset_root", ",", "\n", "\"cache/coco_bbox_{}.pkl\"", ".", "format", "(", "subset", ")", ")", "\n", "", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "                ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "COCODataset", ".", "data_items", "+=", "pickle", ".", "load", "(", "f", ")", "\n", "", "logger", ".", "info", "(", "\"{}: loaded cache file {}\"", ".", "format", "(", "\n", "COCODataset", ".", "__name__", ",", "cache_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "anno_file", "=", "osp", ".", "join", "(", "\n", "dataset_root", ",", "\n", "\"annotations/instances_{}.json\"", ".", "format", "(", "subset", ")", ")", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "io", ".", "StringIO", "(", ")", ")", ":", "\n", "                    ", "coco_api", "=", "COCO", "(", "anno_file", ")", "\n", "# sort indices for reproducible results", "\n", "img_ids", "=", "sorted", "(", "coco_api", ".", "imgs", ".", "keys", "(", ")", ")", "\n", "# imgs is a list of dicts, each looks something like:", "\n", "# {'license': 4,", "\n", "#  'url': 'http://farm6.staticflickr.com/5454/9413846304_881d5e5c3b_z.jpg',", "\n", "#  'file_name': 'COCO_val2014_000000001268.jpg',", "\n", "#  'height': 427,", "\n", "#  'width': 640,", "\n", "#  'date_captured': '2013-11-17 05:57:24',", "\n", "#  'id': 1268}", "\n", "imgs", "=", "coco_api", ".", "loadImgs", "(", "img_ids", ")", "\n", "# anns is a list[list[dict]], where each dict is an annotation", "\n", "# record for an object. The inner list enumerates the objects in an image", "\n", "# and the outer list enumerates over images. Example of anns[0]:", "\n", "# [{'segmentation': [[192.81,", "\n", "#     247.09,", "\n", "#     ...", "\n", "#     219.03,", "\n", "#     249.06]],", "\n", "#   'area': 1035.749,", "\n", "#   'iscrowd': 0,", "\n", "#   'image_id': 1268,", "\n", "#   'bbox': [192.81, 224.8, 74.73, 33.43],", "\n", "#   'category_id': 16,", "\n", "#   'id': 42986},", "\n", "#  ...]", "\n", "anns", "=", "[", "coco_api", ".", "imgToAnns", "[", "img_id", "]", "for", "img_id", "in", "img_ids", "]", "\n", "\n", "", "if", "\"minival\"", "not", "in", "anno_file", ":", "\n", "# The popular valminusminival & minival annotations for COCO2014 contain this bug.", "\n", "# However the ratio of buggy annotations there is tiny and does not affect accuracy.", "\n", "# Therefore we explicitly white-list them.", "\n", "                    ", "ann_ids", "=", "[", "\n", "ann", "[", "\"id\"", "]", "for", "anns_per_image", "in", "anns", "\n", "for", "ann", "in", "anns_per_image", "\n", "]", "\n", "assert", "len", "(", "set", "(", "ann_ids", ")", ")", "==", "len", "(", "\n", "ann_ids", "\n", ")", ",", "\"Annotation ids in '{}' are not unique!\"", ".", "format", "(", "\n", "anno_file", ")", "\n", "\n", "", "imgs_anns", "=", "list", "(", "zip", "(", "imgs", ",", "anns", ")", ")", "\n", "ann_keys", "=", "[", "\"iscrowd\"", ",", "\"bbox\"", ",", "\"keypoints\"", ",", "\"category_id\"", "]", "\n", "# iterate over annotation", "\n", "for", "(", "img_dict", ",", "anno_dict_list", ")", "in", "imgs_anns", ":", "\n", "                    ", "record", "=", "{", "}", "\n", "record", "[", "\"file_name\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "\n", "img_dict", "[", "\"file_name\"", "]", ")", "\n", "record", "[", "\"height\"", "]", "=", "img_dict", "[", "\"height\"", "]", "\n", "record", "[", "\"width\"", "]", "=", "img_dict", "[", "\"width\"", "]", "\n", "image_id", "=", "record", "[", "\"image_id\"", "]", "=", "img_dict", "[", "\"id\"", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "for", "anno", "in", "anno_dict_list", ":", "\n", "# Check that the image_id in this annotation is the same as", "\n", "# the image_id we're looking at.", "\n", "# This fails only when the data parsing logic or the annotation file is buggy.", "\n", "\n", "# The original COCO valminusminival2014 & minival2014 annotation files", "\n", "# actually contains bugs that, together with certain ways of using COCO API,", "\n", "# can trigger this assertion.", "\n", "                        ", "assert", "anno", "[", "\"image_id\"", "]", "==", "image_id", ",", "logger", ".", "error", "(", "\n", "\"{} vs {}\"", ".", "format", "(", "anno", "[", "\"image_id\"", "]", ",", "image_id", ")", ")", "\n", "\n", "assert", "anno", ".", "get", "(", "\n", "\"ignore\"", ",", "0", "\n", ")", "==", "0", ",", "'\"ignore\" in COCO json file is not supported.'", "\n", "\n", "obj", "=", "{", "\n", "key", ":", "anno", "[", "key", "]", "\n", "for", "key", "in", "ann_keys", "if", "key", "in", "anno", "\n", "}", "\n", "\n", "segm", "=", "anno", ".", "get", "(", "\"segmentation\"", ",", "None", ")", "\n", "if", "segm", ":", "# either list[list[float]] or dict(RLE)", "\n", "                            ", "if", "not", "isinstance", "(", "segm", ",", "dict", ")", ":", "\n", "# filter out invalid polygons (< 3 points)", "\n", "                                ", "segm", "=", "[", "\n", "poly", "for", "poly", "in", "segm", "\n", "if", "len", "(", "poly", ")", "%", "2", "==", "0", "and", "len", "(", "poly", ")", ">=", "6", "\n", "]", "\n", "if", "len", "(", "segm", ")", "==", "0", ":", "\n", "                                    ", "continue", "# ignore this instance", "\n", "", "", "obj", "[", "\"segmentation\"", "]", "=", "segm", "\n", "", "else", ":", "\n", "                            ", "if", "self", ".", "_hyper_params", "[", "\"with_mask\"", "]", ":", "\n", "                                ", "continue", "\n", "", "", "objs", ".", "append", "(", "obj", ")", "\n", "# filter out image without any targets", "\n", "", "if", "len", "(", "objs", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "record", "[", "\"annotations\"", "]", "=", "objs", "\n", "data_anno_list", ".", "append", "(", "record", ")", "\n", "\n", "# save internal .json file", "\n", "", "cache_dir", "=", "osp", ".", "dirname", "(", "cache_file", ")", "\n", "if", "not", "osp", ".", "exists", "(", "cache_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "data_anno_list", ",", "f", ")", "\n", "", "logger", ".", "info", "(", "\n", "\"COCO dataset: cache dumped at: {}\"", ".", "format", "(", "cache_file", ")", ")", "\n", "COCODataset", ".", "data_items", "+=", "data_anno_list", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.lasot.LaSOTDataset.__init__": [[35, 46], ["videoanalyst.data.dataset.dataset_base.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LaSOTTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.lasot.LaSOTDataset.update_params": [[47, 57], ["os.realpath", "videoanalyst.evaluation.got_benchmark.datasets.LaSOT"], "methods", ["None"], ["\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.lasot.LaSOTDataset.__getitem__": [[58, 65], ["videoanalyst.pipeline.utils.bbox.xywh2xyxy", "dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy"], ["result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentLaSOT", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.lasot.LaSOTDataset.__len__": [[66, 68], ["len"], "methods", ["None"], ["if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.davis.DavisDataset.__init__": [[44, 50], ["videoanalyst.data.dataset.dataset_base.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["\n", "extra_hyper_params", "=", "dict", "(", "device_num", "=", "1", ",", "\n", "data_root", "=", "\"datasets/DAVIS\"", ",", "\n", "dataset_names", "=", "[", "\n", "\"DAVIS2017\"", ",", "\n", "]", ",", "\n", "save_video", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.davis.DavisDataset.update_params": [[51, 59], ["os.realpath", "os.realpath", "len", "davis.DavisDataset._ensure_cache"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._ensure_cache"], ["save_patch", "=", "False", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.davis.DavisDataset.__getitem__": [[60, 72], ["dict"], "methods", ["None"], ["\n", "super", "(", "DAVISTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "-", "1", "\n", "self", ".", "iou_eval_thres", "=", "np", ".", "arange", "(", "0.3", ",", "0.5", ",", "0.05", ")", "\n", "\n", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Run test\n        \"\"\"", "\n", "# set dir", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.davis.DavisDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["self", ".", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "for", "dataset_name", "in", "self", ".", "_hyper_params", "[", "\"dataset_names\"", "]", ":", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.davis.DavisDataset._ensure_cache": [[76, 128], ["os.join", "os.join", "os.join", "os.join", "os.exists", "os.exists", "os.join", "os.join", "os.join", "os.join", "loguru.logger.info", "os.join", "os.join", "os.dirname", "os.dirname", "loguru.logger.info", "open", "pickle.load", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "collections.defaultdict", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "collections.defaultdict.items", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "open", "pickle.dump", "item.strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array", "numpy.unique", "data_anno_list.append", "f.readlines", "PIL.Image.open", "os.join", "os.join", "os.join", "os.join", "object_dict[].append", "anno_name.split"], "methods", ["None"], ["self", ".", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "dataset_name", ")", "\n", "self", ".", "save_root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"baseline\"", ")", "\n", "ensure_dir", "(", "self", ".", "save_root_dir", ")", "\n", "# track videos", "\n", "self", ".", "run_tracker", "(", ")", "\n", "# evaluation", "\n", "eval_result", "=", "self", ".", "evaluation", "(", "'default_hp'", ")", "\n", "", "return", "dict", "(", "main_performance", "=", "eval_result", "[", "\"JF\"", "]", ")", "\n", "\n", "", "def", "run_tracker", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run self.pipeline on DAVIS\n        \"\"\"", "\n", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "logger", ".", "info", "(", "'runing test on devices {}'", ".", "format", "(", "all_devs", ")", ")", "\n", "davis_root", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "logger", ".", "info", "(", "'Using dataset %s at: %s'", "%", "(", "self", ".", "dataset_name", ",", "davis_root", ")", ")", "\n", "# setup dataset", "\n", "dataset", "=", "davis_benchmark", ".", "load_dataset", "(", "davis_root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "keys", "=", "list", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "nr_records", "=", "len", "(", "keys", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nr_records", ")", "\n", "mean_speed", "=", "-", "1", "\n", "speed_list", "=", "[", "]", "\n", "manager", "=", "Manager", "(", ")", "\n", "speed_queue", "=", "manager", ".", "Queue", "(", "500", ")", "\n", "# set worker", "\n", "if", "num_gpu", "==", "0", ":", "\n", "            ", "self", ".", "worker", "(", "keys", ",", "all_devs", "[", "0", "]", ",", "self", ".", "dataset", ",", "speed_queue", ")", "\n", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "nr_video", "=", "math", ".", "ceil", "(", "nr_records", "/", "num_gpu", ")", "\n", "procs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gpu", ")", ":", "\n", "                ", "start", "=", "i", "*", "nr_video", "\n", "end", "=", "min", "(", "start", "+", "nr_video", ",", "nr_records", ")", "\n", "split_records", "=", "keys", "[", "start", ":", "end", "]", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "split_records", ",", "all_devs", "[", "i", "]", ",", "\n", "self", ".", "dataset", ",", "speed_queue", ")", ")", "\n", "logger", ".", "info", "(", "'process:%d, start:%d, end:%d'", "%", "(", "i", ",", "start", ",", "end", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "s", "=", "speed_queue", ".", "get", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDataset.__init__": [[42, 53], ["videoanalyst.data.dataset.dataset_base.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDataset.update_params": [[54, 64], ["os.realpath", "videoanalyst.evaluation.got_benchmark.datasets.GOT10k"], "methods", ["None"], ["            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentGOT10k", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDataset.__getitem__": [[65, 72], ["videoanalyst.pipeline.utils.bbox.xywh2xyxy", "dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy"], ["# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed.__init__": [[86, 88], ["got10k.GOT10kDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed.update_params": [[89, 96], ["got10k.GOT10kDataset.update_params", "got10k.GOT10kDatasetFixed._read_unfixed_list"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params", "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed._read_unfixed_list"], ["if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"ao\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed.__getitem__": [[97, 104], ["got10k.GOT10kDataset.__getitem__", "got10k.GOT10kDatasetFixed._is_unfixed_sequence", "got10k.GOT10kDatasetFixed._resample_item", "got10k.GOT10kDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__getitem__", "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed._is_unfixed_sequence", "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed._resample_item", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__getitem__"], ["        ", "self", ".", "set_random_seed", "(", ")", "\n", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed._read_unfixed_list": [[105, 123], ["open", "f.readlines", "s.strip"], "methods", ["None"], ["\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentGOT10k", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n", "\n", "", "", "GOT10kTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "\n", "GOT10kTester", ".", "default_hyper_params", ")", "\n", "GOT10kTester", ".", "default_hyper_params", ".", "update", "(", "GOT10kTester", ".", "extra_hyper_params", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed._is_unfixed_sequence": [[124, 133], ["os.dirname", "os.basename", "loguru.logger.info"], "methods", ["None"], [""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.got10k.GOT10kDatasetFixed._resample_item": [[134, 141], ["rng.choice", "numpy.random.RandomState", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_det.DETDataset.__init__": [[46, 49], ["videoanalyst.data.dataset.dataset_base.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", "DETDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_state", "[", "\"dataset\"", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_det.DETDataset.update_params": [[50, 59], ["os.realpath", "os.realpath", "ilsvrc_det.DETDataset._ensure_cache", "list", "DETDataset.data_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._ensure_cache"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "dataset_root", "=", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "\n", "subset", "=", "self", ".", "_hyper_params", "[", "\"subset\"", "]", "\n", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "=", "osp", ".", "realpath", "(", "dataset_root", ")", "\n", "self", ".", "_ensure_cache", "(", ")", "\n", "self", ".", "im_names", "=", "list", "(", "DETDataset", ".", "data_dict", "[", "subset", "]", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_det.DETDataset.__getitem__": [[60, 81], ["videoanalyst.pipeline.utils.bbox.xywh2xyxy", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n\n        :param item: int, video id\n        :return:\n            image_files\n            annos\n            meta (optional)\n        \"\"\"", "\n", "subset", "=", "self", ".", "_hyper_params", "[", "\"subset\"", "]", "\n", "im_name", "=", "self", ".", "im_names", "[", "item", "]", "\n", "\n", "image_file", "=", "DETDataset", ".", "data_dict", "[", "subset", "]", "[", "im_name", "]", "[", "\"image_file\"", "]", "\n", "anno", "=", "DETDataset", ".", "data_dict", "[", "subset", "]", "[", "im_name", "]", "[", "\"anno\"", "]", "\n", "if", "len", "(", "anno", ")", "<=", "0", ":", "\n", "            ", "anno", "=", "self", ".", "_DUMMY_ANNO", "\n", "", "anno", "=", "xywh2xyxy", "(", "anno", ")", "\n", "\n", "sequence_data", "=", "dict", "(", "image", "=", "[", "image_file", "]", ",", "anno", "=", "anno", ")", "\n", "\n", "return", "sequence_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_det.DETDataset.__len__": [[82, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "im_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_det.DETDataset._ensure_cache": [[85, 132], ["os.join", "os.join", "os.join", "os.join", "os.exists", "os.exists", "dict", "dict", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "sorted", "os.join", "os.join", "sorted", "tqdm.tqdm.tqdm", "open", "pickle.load", "glob.glob", "glob.glob", "len", "len", "set", "set", "list", "ilsvrc_det.DETDataset._decode_det_anno", "dict", "os.exists", "os.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "open", "pickle.dump", "zip", "os.splitext", "os.splitext", "os.basename", "os.basename", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.basename", "os.basename", "os.basename", "os.basename", "os.basename", "os.basename"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_det.DETDataset._decode_det_anno"], ["", "def", "_ensure_cache", "(", "self", ")", ":", "\n", "        ", "dataset_root", "=", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", "\n", "subset", "=", "self", ".", "_hyper_params", "[", "\"subset\"", "]", "\n", "cache_dir", "=", "osp", ".", "join", "(", "dataset_root", ",", "\"cache/det\"", ")", "\n", "cache_file", "=", "osp", ".", "join", "(", "cache_dir", ",", "\"%s.pkl\"", "%", "subset", ")", "\n", "# dataset_name = type(self).__name__", "\n", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "# print(\"%s: using meta data file under ./meta_data\" % dataset_name)", "\n", "            ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "DETDataset", ".", "data_dict", "[", "subset", "]", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "data_dirname", "=", "\"Data\"", "\n", "anno_dirname", "=", "\"Annotations\"", "\n", "data_path", "=", "dict", "(", "train", "=", "\"DET/train/*/*/*.JPEG\"", ",", "val", "=", "\"DET/val/*.JPEG\"", ")", "\n", "anno_path", "=", "dict", "(", "train", "=", "\"DET/train/*/*/*.xml\"", ",", "val", "=", "\"DET/val/*.xml\"", ")", "\n", "\n", "anno_dir", "=", "osp", ".", "join", "(", "dataset_root", ",", "anno_dirname", ")", "\n", "data_dir", "=", "osp", ".", "join", "(", "dataset_root", ",", "data_dirname", ")", "\n", "\n", "# print(\"%s: using external meta data file & generate private meta data under ./meta_data\" % dataset_name)", "\n", "anno_file_pattern", "=", "osp", ".", "join", "(", "anno_dir", ",", "anno_path", "[", "subset", "]", ")", "\n", "anno_files", "=", "sorted", "(", "glob", ".", "glob", "(", "anno_file_pattern", ")", ")", "\n", "\n", "data_file_pattern", "=", "osp", ".", "join", "(", "data_dir", ",", "data_path", "[", "subset", "]", ")", "\n", "data_files", "=", "sorted", "(", "glob", ".", "glob", "(", "data_file_pattern", ")", ")", "\n", "\n", "# check integrity", "\n", "assert", "len", "(", "anno_files", ")", "==", "len", "(", "data_files", ")", "\n", "assert", "set", "(", "[", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "p", ")", ")", "[", "0", "]", "for", "p", "in", "anno_files", "\n", "]", ")", "==", "set", "(", "[", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "p", ")", ")", "[", "0", "]", "for", "p", "in", "data_files", "]", ")", "\n", "\n", "for", "data_file", ",", "anno_file", "in", "tqdm", "(", "list", "(", "zip", "(", "data_files", ",", "anno_files", ")", ")", ")", ":", "\n", "                ", "im_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "data_file", ")", ")", "[", "0", "]", "\n", "assert", "im_name", "==", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "anno_file", ")", ")", "[", "0", "]", "\n", "anno", "=", "self", ".", "_decode_det_anno", "(", "anno_file", ")", "\n", "DETDataset", ".", "data_dict", "[", "subset", "]", "[", "im_name", "]", "=", "dict", "(", "\n", "image_file", "=", "data_file", ",", "\n", "anno", "=", "anno", ",", "\n", ")", "\n", "\n", "# dump cache", "\n", "", "if", "not", "osp", ".", "exists", "(", "cache_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "DETDataset", ".", "data_dict", "[", "subset", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_det.DETDataset._decode_det_anno": [[133, 151], ["xml.parse", "xml.parse.getroot", "list", "ET.parse.getroot.findall", "list.append", "float", "float", "float", "float", "obj.find", "obj.find", "obj.find", "obj.find"], "methods", ["None"], ["", "", "", "def", "_decode_det_anno", "(", "self", ",", "p", ")", ":", "\n", "        ", "tree", "=", "ET", ".", "parse", "(", "p", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "\n", "anno", "=", "list", "(", ")", "\n", "for", "obj", "in", "root", ".", "findall", "(", "\"object\"", ")", ":", "\n", "# trackid = int(obj.find(\"trackid\").text)", "\n", "            ", "bbox", "=", "[", "\n", "float", "(", "obj", ".", "find", "(", "\"bndbox/xmin\"", ")", ".", "text", ")", ",", "\n", "float", "(", "obj", ".", "find", "(", "\"bndbox/ymin\"", ")", ".", "text", ")", ",", "\n", "float", "(", "obj", ".", "find", "(", "\"bndbox/xmax\"", ")", ".", "text", ")", ",", "\n", "float", "(", "obj", ".", "find", "(", "\"bndbox/ymax\"", ")", ".", "text", ")", ",", "\n", "]", "\n", "rect", "=", "[", "\n", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", "\n", "]", "\n", "anno", ".", "append", "(", "rect", ")", "\n", "", "return", "anno", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.trackingnet.TrackingNetDataset.__init__": [[38, 41], ["videoanalyst.data.dataset.dataset_base.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.trackingnet.TrackingNetDataset.update_params": [[42, 53], ["os.realpath", "os.join", "videoanalyst.evaluation.got_benchmark.datasets.TrackingNet"], "methods", ["None"], ["        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.trackingnet.TrackingNetDataset.__getitem__": [[56, 62], ["videoanalyst.pipeline.utils.bbox.xywh2xyxy", "dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy"], ["dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentTrackingNet", "(", "root_dir", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.trackingnet.TrackingNetDataset.__len__": [[63, 65], ["len"], "methods", ["None"], ["subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_vid.VIDDataset.__init__": [[37, 40], ["videoanalyst.data.dataset.dataset_base.DatasetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", "VIDDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_state", "[", "\"dataset\"", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_vid.VIDDataset.update_params": [[41, 52], ["os.realpath", "os.join", "videoanalyst.evaluation.got_benchmark.datasets.ImageNetVID", "s.strip", "subset.split"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "dataset_root", "=", "osp", ".", "realpath", "(", "self", ".", "_hyper_params", "[", "\"dataset_root\"", "]", ")", "\n", "subset", "=", "self", ".", "_hyper_params", "[", "\"subset\"", "]", "\n", "subset", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "subset", ".", "split", "(", "\"_\"", ")", "]", "\n", "cache_dir", "=", "osp", ".", "join", "(", "dataset_root", ",", "\"cache/vid\"", ")", "\n", "self", ".", "_state", "[", "\"dataset\"", "]", "=", "ImageNetVID", "(", "dataset_root", ",", "\n", "subset", "=", "subset", ",", "\n", "cache_dir", "=", "cache_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_vid.VIDDataset.__getitem__": [[53, 59], ["videoanalyst.pipeline.utils.bbox.xywh2xyxy", "dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy"], ["", "def", "__getitem__", "(", "self", ",", "item", ":", "int", ")", "->", "Dict", ":", "\n", "        ", "img_files", ",", "anno", "=", "self", ".", "_state", "[", "\"dataset\"", "]", "[", "item", "]", "\n", "anno", "=", "xywh2xyxy", "(", "anno", ")", "\n", "sequence_data", "=", "dict", "(", "image", "=", "img_files", ",", "anno", "=", "anno", ")", "\n", "\n", "return", "sequence_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.dataset_impl.ilsvrc_vid.VIDDataset.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_state", "[", "\"dataset\"", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter.builder.build": [[12, 24], ["module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter.builder.get_config": [[26, 41], ["filter_base.TASK_FILTERS.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], ["\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter.filter_base.FilterBase.__init__": [[26, 42], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Dataset Sampler, reponsible for sampling from different dataset\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            data config, including cfg for datasset / sampler\n        datasets: List[DatasetBase]\n            collections of datasets\n        seed: int\n            seed to initialize random number generator\n            important while using multi-worker data loader\n        \"\"\"", "\n", "self", ".", "_hyper_params", "=", "self", ".", "default_hyper_params", "\n", "self", ".", "_state", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter.filter_base.FilterBase.get_hps": [[43, 53], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        Dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter.filter_base.FilterBase.set_hps": [[54, 67], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "Dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: Dict\n            Dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter.filter_base.FilterBase.update_params": [[68, 72], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "__call__", "(", "self", ",", "data", ":", "Dict", ")", "->", "bool", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter.filter_base.FilterBase.__call__": [[72, 87], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ":", "Dict", ")", "->", "bool", ":", "\n", "        ", "r\"\"\"\n        An interface to filter data\n\n        Arguments\n        ---------\n        data: Dict\n            data to be filter\n        \n        Returns\n        -------\n        bool\n            True if data should be filtered\n            False if data is valid\n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter_impl.track_pair_filter.TrackPairFilter.__init__": [[29, 31], ["filter_base.FilterBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.filter_impl.track_pair_filter.TrackPairFilter.__call__": [[32, 47], ["videoanalyst.data.utils.filter_box.filter_unreasonable_training_boxes", "videoanalyst.pipeline.utils.bbox.xyxy2xywh", "cv2.boundingRect", "loguru.logger.error", "exit"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.filter_box.filter_unreasonable_training_boxes", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xyxy2xywh"], ["", "def", "__call__", "(", "self", ",", "data", ":", "Dict", ")", "->", "bool", ":", "\n", "        ", "if", "data", "is", "None", ":", "\n", "            ", "return", "True", "\n", "", "im", ",", "anno", "=", "data", "[", "\"image\"", "]", ",", "data", "[", "\"anno\"", "]", "\n", "if", "self", ".", "_hyper_params", "[", "\"target_type\"", "]", "==", "\"bbox\"", ":", "\n", "            ", "bbox", "=", "xyxy2xywh", "(", "anno", ")", "\n", "", "elif", "self", ".", "_hyper_params", "[", "\"target_type\"", "]", "==", "\"mask\"", ":", "\n", "            ", "bbox", "=", "cv2", ".", "boundingRect", "(", "anno", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "\"unspported target type {} in filter\"", ".", "format", "(", "\n", "self", ".", "_hyper_params", "[", "\"target_type\"", "]", ")", ")", "\n", "exit", "(", ")", "\n", "", "filter_flag", "=", "filter_unreasonable_training_boxes", "(", "\n", "im", ",", "bbox", ",", "self", ".", "_hyper_params", ")", "\n", "return", "filter_flag", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer.builder.build": [[12, 37], ["module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params", "modules.append"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer.builder.get_config": [[39, 54], ["transformer_base.TASK_TRANSFORMERS.items", "yacs.config.CfgNode", "transformer_base.TASK_TRANSFORMERS.keys", "yacs.config.CfgNode"], "function", ["None"], ["", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n", "cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer.transformer_base.TransformerBase.__init__": [[28, 43], ["dict", "numpy.random.RandomState"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seed", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Transformer, reponsible for data augmentation\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            training config, including cfg for data / model\n        seed: int\n            seed to initialize random number generator\n            important while using multi-worker data loader\n        \"\"\"", "\n", "self", ".", "_hyper_params", "=", "self", ".", "default_hyper_params", "\n", "self", ".", "_state", "=", "dict", "(", ")", "\n", "self", ".", "_state", "[", "\"rng\"", "]", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer.transformer_base.TransformerBase.get_hps": [[44, 54], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        Dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer.transformer_base.TransformerBase.set_hps": [[55, 68], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "Dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: Dict\n            Dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer.transformer_base.TransformerBase.update_params": [[69, 74], ["numpy.random.RandomState"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ",", "seed", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "self", ".", "_state", "[", "\"rng\"", "]", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer.transformer_base.TransformerBase.__call__": [[75, 84], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "Dict", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        An interface to transform data\n\n        Arguments\n        ---------\n        Dict\n            data to transform\n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.RandomBlur.__init__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ratio", "=", "0.25", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.RandomBlur.__call__": [[16, 25], ["numpy.random.rand", "numpy.random.choice", "cv2.GaussianBlur", "numpy.random.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "self", ".", "ratio", ":", "\n", "# random kernel size", "\n", "            ", "kernel_size", "=", "np", ".", "random", ".", "choice", "(", "[", "3", ",", "5", ",", "7", "]", ")", "\n", "# random gaussian sigma", "\n", "sigma", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "5", "\n", "return", "cv2", ".", "GaussianBlur", "(", "sample", ",", "(", "kernel_size", ",", "kernel_size", ")", ",", "sigma", ")", "\n", "", "else", ":", "\n", "            ", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.ImageAug.__init__": [[104, 106], ["transformer_base.TransformerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "seed", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "super", "(", "ImageAug", ",", "self", ")", ".", "__init__", "(", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.ImageAug.__call__": [[107, 117], ["common_transformer.fb_color_jitter", "common_transformer.fb_lighting"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_color_jitter", "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_lighting"], ["", "def", "__call__", "(", "self", ",", "sampled_data", ":", "Dict", ")", "->", "Dict", ":", "\n", "        ", "for", "img_name", "in", "[", "\"data1\"", ",", "\"data2\"", "]", ":", "\n", "            ", "image", "=", "sampled_data", "[", "img_name", "]", "[", "\"image\"", "]", "\n", "image", "=", "fb_color_jitter", "(", "\n", "image", ",", "self", ".", "_hyper_params", "[", "\"color_jitter_brightness\"", "]", ",", "\n", "self", ".", "_hyper_params", "[", "\"color_jitter_contrast\"", "]", ",", "\n", "self", ".", "_hyper_params", "[", "\"color_jitter_saturation\"", "]", ")", "\n", "image", "=", "fb_lighting", "(", "image", ",", "self", ".", "_hyper_params", "[", "\"lighting_std\"", "]", ")", "\n", "sampled_data", "[", "img_name", "]", "[", "\"image\"", "]", "=", "image", "\n", "", "return", "sampled_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.gray_aug": [[27, 31], ["cv2.cvtColor", "cv2.cvtColor"], "function", ["None"], ["", "", "", "def", "gray_aug", "(", "image", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_brightness_aug": [[33, 38], ["numpy.random.rand"], "function", ["None"], ["", "def", "fb_brightness_aug", "(", "img", ",", "val", ")", ":", "\n", "    ", "alpha", "=", "1.", "+", "val", "*", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "-", "1", ")", "\n", "img", "=", "img", "*", "alpha", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_grayscale": [[40, 46], ["numpy.array().reshape", "numpy.zeros", "numpy.array"], "function", ["None"], ["", "def", "fb_grayscale", "(", "img", ")", ":", "\n", "    ", "w", "=", "np", ".", "array", "(", "[", "0.114", ",", "0.587", ",", "0.299", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "gs", "=", "np", ".", "zeros", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "gs", "=", "(", "img", "*", "w", ")", ".", "sum", "(", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_contrast_aug": [[48, 55], ["common_transformer.fb_grayscale", "fb_grayscale.mean", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_grayscale"], ["", "def", "fb_contrast_aug", "(", "img", ",", "val", ")", ":", "\n", "    ", "gs", "=", "fb_grayscale", "(", "img", ")", "\n", "gs", "[", ":", "]", "=", "gs", ".", "mean", "(", ")", "\n", "alpha", "=", "1.", "+", "val", "*", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "-", "1", ")", "\n", "img", "=", "img", "*", "alpha", "+", "gs", "*", "(", "1", "-", "alpha", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_saturation_aug": [[57, 63], ["common_transformer.fb_grayscale", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_grayscale"], ["", "def", "fb_saturation_aug", "(", "img", ",", "val", ")", ":", "\n", "    ", "gs", "=", "fb_grayscale", "(", "img", ")", "\n", "alpha", "=", "1.", "+", "val", "*", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "-", "1", ")", "\n", "img", "=", "img", "*", "alpha", "+", "gs", "*", "(", "1", "-", "alpha", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_color_jitter": [[65, 74], ["random.shuffle", "aug"], "function", ["None"], ["", "def", "fb_color_jitter", "(", "img", ",", "brightness", ",", "contrast", ",", "saturation", ")", ":", "\n", "    ", "augs", "=", "[", "(", "fb_brightness_aug", ",", "brightness", ")", ",", "(", "fb_contrast_aug", ",", "contrast", ")", ",", "\n", "(", "fb_saturation_aug", ",", "saturation", ")", "]", "\n", "random", ".", "shuffle", "(", "augs", ")", "\n", "\n", "for", "aug", ",", "val", "in", "augs", ":", "\n", "        ", "img", "=", "aug", "(", "img", ",", "val", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.common_transformer.fb_lighting": [[76, 92], ["numpy.array", "numpy.array", "bgr.sum().reshape.sum().reshape", "numpy.random.randn", "np.array.reshape", "alpha.reshape", "bgr.sum().reshape.sum"], "function", ["None"], ["", "def", "fb_lighting", "(", "img", ",", "std", ")", ":", "\n", "    ", "eigval", "=", "np", ".", "array", "(", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", ")", "\n", "eigvec", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "0.5836", ",", "-", "0.6948", ",", "0.4203", "]", ",", "\n", "[", "-", "0.5808", ",", "-", "0.0045", ",", "-", "0.8140", "]", ",", "\n", "[", "-", "0.5675", ",", "0.7192", ",", "0.4009", "]", ",", "\n", "]", ")", "\n", "if", "std", "==", "0", ":", "\n", "        ", "return", "img", "\n", "\n", "", "alpha", "=", "np", ".", "random", ".", "randn", "(", "3", ")", "*", "std", "\n", "bgr", "=", "eigvec", "*", "alpha", ".", "reshape", "(", "1", ",", "3", ")", "*", "eigval", ".", "reshape", "(", "1", ",", "3", ")", "\n", "bgr", "=", "bgr", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "img", "=", "img", "+", "bgr", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.random_crop_transformer.RandomCropTransformer.__init__": [[41, 43], ["transformer_base.TransformerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ",", "seed", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "super", "(", "RandomCropTransformer", ",", "self", ")", ".", "__init__", "(", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.transformer_impl.random_crop_transformer.RandomCropTransformer.__call__": [[44, 66], ["videoanalyst.data.utils.crop_track_pair.crop_track_pair", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop_track_pair.crop_track_pair"], ["", "def", "__call__", "(", "self", ",", "sampled_data", ":", "Dict", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        sampled_data: Dict()\n            input data\n            Dict(data1=Dict(image, anno), data2=Dict(image, anno))\n        \"\"\"", "\n", "data1", "=", "sampled_data", "[", "\"data1\"", "]", "\n", "data2", "=", "sampled_data", "[", "\"data2\"", "]", "\n", "im_temp", ",", "bbox_temp", "=", "data1", "[", "\"image\"", "]", ",", "data1", "[", "\"anno\"", "]", "\n", "im_curr", ",", "bbox_curr", "=", "data2", "[", "\"image\"", "]", ",", "data2", "[", "\"anno\"", "]", "\n", "im_z", ",", "bbox_z", ",", "im_x", ",", "bbox_x", ",", "_", ",", "_", "=", "crop_track_pair", "(", "\n", "im_temp", ",", "\n", "bbox_temp", ",", "\n", "im_curr", ",", "\n", "bbox_curr", ",", "\n", "config", "=", "self", ".", "_hyper_params", ",", "\n", "rng", "=", "self", ".", "_state", "[", "\"rng\"", "]", ")", "\n", "\n", "sampled_data", "[", "\"data1\"", "]", "=", "dict", "(", "image", "=", "im_z", ",", "anno", "=", "bbox_z", ")", "\n", "sampled_data", "[", "\"data2\"", "]", "=", "dict", "(", "image", "=", "im_x", ",", "anno", "=", "bbox_x", ")", "\n", "\n", "return", "sampled_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target.target_base.TargetBase.__init__": [[31, 42], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Target, reponsible for generate training target tensor\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            node name target\n        \"\"\"", "\n", "self", ".", "_hyper_params", "=", "self", ".", "default_hyper_params", "\n", "self", ".", "_state", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target.target_base.TargetBase.get_hps": [[43, 53], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        Dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target.target_base.TargetBase.set_hps": [[54, 67], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "Dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: Dict\n            Dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target.target_base.TargetBase.update_params": [[68, 72], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "__call__", "(", "self", ",", "sampled_data", ":", "Dict", ")", "->", "Dict", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target.target_base.TargetBase.__call__": [[72, 85], ["torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sampled_data", ":", "Dict", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        An interface to mkae target\n\n        Arguments\n        ---------\n        training_data: Dict\n            data whose training target will be made\n        \"\"\"", "\n", "for", "k", "in", "sampled_data", ":", "\n", "            ", "sampled_data", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "sampled_data", "[", "k", "]", ")", ")", "\n", "\n", "", "return", "sampled_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target.builder.build": [[12, 32], ["module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["task", ":", "str", ",", "\n", "cfg", ":", "CfgNode", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target.builder.get_config": [[34, 49], ["target_base.TASK_TARGETS.items", "yacs.config.CfgNode", "yacs.config.CfgNode"], "function", ["None"], ["optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n", "cfg", "[", "\"optimizer\"", "]", "=", "optimizer_builder", ".", "get_config", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target_impl.sat_mask_target.SATMaskTarget.__init__": [[53, 55], ["target_base.TargetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target_impl.sat_mask_target.SATMaskTarget.__call__": [[56, 76], ["cv2.boundingRect", "videoanalyst.pipeline.utils.bbox.xywh2xyxy", "cv2.boundingRect", "videoanalyst.pipeline.utils.bbox.xywh2xyxy", "videoanalyst.data.utils.crop_track_pair.crop_track_pair_for_sat"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.bbox.xywh2xyxy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.crop_track_pair.crop_track_pair_for_sat"], ["", "def", "__call__", "(", "self", ",", "sampled_data", ")", ":", "\n", "        ", "data1", "=", "sampled_data", "[", "\"data1\"", "]", "\n", "data2", "=", "sampled_data", "[", "\"data2\"", "]", "\n", "im_temp", ",", "mask_temp", "=", "data1", "[", "\"image\"", "]", ",", "data1", "[", "\"anno\"", "]", "\n", "bbox_temp", "=", "cv2", ".", "boundingRect", "(", "mask_temp", ")", "\n", "bbox_temp", "=", "xywh2xyxy", "(", "bbox_temp", ")", "\n", "im_curr", ",", "mask_curr", "=", "data2", "[", "\"image\"", "]", ",", "data2", "[", "\"anno\"", "]", "\n", "bbox_curr", "=", "cv2", ".", "boundingRect", "(", "mask_curr", ")", "\n", "bbox_curr", "=", "xywh2xyxy", "(", "bbox_curr", ")", "\n", "data_dict", "=", "crop_track_pair_for_sat", "(", "im_temp", ",", "\n", "bbox_temp", ",", "\n", "im_curr", ",", "\n", "bbox_curr", ",", "\n", "config", "=", "self", ".", "_hyper_params", ",", "\n", "mask_tmp", "=", "mask_temp", ",", "\n", "mask_curr", "=", "mask_curr", ")", "\n", "if", "sampled_data", "[", "\"is_negative_pair\"", "]", ":", "\n", "            ", "data_dict", "[", "\"seg_mask\"", "]", "*=", "0", "\n", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target_impl.identity_target.IdentityTarget.__init__": [[12, 14], ["target_base.TargetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target_impl.identity_target.IdentityTarget.__call__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target_impl.densebox_target.DenseboxTarget.__init__": [[30, 32], ["target_base.TargetBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target_impl.densebox_target.DenseboxTarget.update_params": [[33, 46], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "hps", "=", "self", ".", "_hyper_params", "\n", "# hps['score_size'] = (", "\n", "#     hps['x_size'] -", "\n", "#     hps['z_size']) // hps['total_stride'] + 1 - hps['num_conv3x3'] * 2", "\n", "hps", "[", "'score_offset'", "]", "=", "(", "\n", "hps", "[", "'x_size'", "]", "-", "1", "-", "\n", "(", "hps", "[", "'score_size'", "]", "-", "1", ")", "*", "hps", "[", "'total_stride'", "]", ")", "//", "2", "\n", "self", ".", "normalize", "=", "hps", "[", "'normalize'", "]", "\n", "self", ".", "norm_mean", "=", "np", ".", "array", "(", "hps", "[", "'norm_mean'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "norm_std", "=", "np", ".", "array", "(", "hps", "[", "'norm_std'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "hps", "[", "'to_rgb'", "]", "\n", "self", ".", "_hyper_params", "=", "hps", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.target_impl.densebox_target.DenseboxTarget.__call__": [[47, 84], ["mmcv.imnormalize.transpose", "mmcv.imnormalize.transpose", "utils.make_densebox_target", "dict", "mmcv.imnormalize", "mmcv.imnormalize", "bbox_x.reshape", "int"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.make_densebox_target_v2.make_densebox_target"], ["", "def", "__call__", "(", "self", ",", "sampled_data", ":", "Dict", ")", "->", "Dict", ":", "\n", "        ", "data_z", "=", "sampled_data", "[", "\"data1\"", "]", "\n", "im_z", ",", "bbox_z", "=", "data_z", "[", "\"image\"", "]", ",", "data_z", "[", "\"anno\"", "]", "\n", "\n", "data_x", "=", "sampled_data", "[", "\"data2\"", "]", "\n", "im_x", ",", "bbox_x", "=", "data_x", "[", "\"image\"", "]", ",", "data_x", "[", "\"anno\"", "]", "\n", "\n", "is_negative_pair", "=", "sampled_data", "[", "\"is_negative_pair\"", "]", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "im_z", "=", "imnormalize", "(", "im_z", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ",", "self", ".", "to_rgb", ")", "\n", "im_x", "=", "imnormalize", "(", "im_x", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ",", "self", ".", "to_rgb", ")", "\n", "\n", "# input tensor", "\n", "", "im_z", "=", "im_z", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "im_x", "=", "im_x", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "# training target", "\n", "cls_label", ",", "ctr_label", ",", "box_label", "=", "make_densebox_target", "(", "\n", "bbox_x", ".", "reshape", "(", "1", ",", "4", ")", ",", "self", ".", "_hyper_params", ")", "\n", "if", "is_negative_pair", ":", "\n", "            ", "cls_label", "[", "cls_label", "==", "0", "]", "=", "-", "1", "\n", "cls_label", "[", "cls_label", "==", "1", "]", "=", "0", "\n", "\n", "", "training_data", "=", "dict", "(", "\n", "im_z", "=", "im_z", ",", "\n", "im_x", "=", "im_x", ",", "\n", "bbox_z", "=", "bbox_z", ",", "\n", "bbox_x", "=", "bbox_x", ",", "\n", "cls_gt", "=", "cls_label", ",", "\n", "ctr_gt", "=", "ctr_label", ",", "\n", "box_gt", "=", "box_label", ",", "\n", "is_negative_pair", "=", "int", "(", "is_negative_pair", ")", ",", "\n", ")", "\n", "#training_data = super().__call__(training_data)", "\n", "\n", "return", "training_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline.builder.build": [[16, 48], ["sampler.builder.build", "transformer.builder.build", "target.builder.build", "pipeline.extend", "pipeline.append", "module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params"], ["    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline.builder.get_config": [[50, 69], ["datapipeline_base.TASK_DATAPIPELINES.items", "yacs.config.CfgNode", "yacs.config.CfgNode", "yacs.config.CfgNode", "filter.builder.get_config", "dataset.builder.get_config"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config"], ["cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline.datapipeline_base.DatapipelineBase.__init__": [[25, 31], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Data pipeline\n        \"\"\"", "\n", "self", ".", "_hyper_params", "=", "self", ".", "default_hyper_params", "\n", "self", ".", "_state", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline.datapipeline_base.DatapipelineBase.get_hps": [[32, 42], ["None"], "methods", ["None"], ["", "def", "get_hps", "(", "self", ")", "->", "dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline.datapipeline_base.DatapipelineBase.set_hps": [[43, 56], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline.datapipeline_base.DatapipelineBase.update_params": [[57, 61], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", "->", "Dict", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline.datapipeline_base.DatapipelineBase.__getitem__": [[61, 65], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        An interface to load batch data\n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline_impl.regular_datapipeline.RegularDatapipeline.__init__": [[22, 30], ["datapipeline_base.DatapipelineBase.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sampler", ":", "SamplerBase", ",", "\n", "pipeline", ":", "List", "=", "[", "]", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "pipeline", "=", "pipeline", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datapipeline_impl.regular_datapipeline.RegularDatapipeline.__getitem__": [[31, 41], ["videoanalyst.utils.convert_numpy_to_tensor", "proc"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.torch_module.convert_numpy_to_tensor"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        An interface to load batch data\n        \"\"\"", "\n", "sampled_data", "=", "self", ".", "sampler", "[", "item", "]", "\n", "\n", "for", "proc", "in", "self", ".", "pipeline", ":", "\n", "            ", "sampled_data", "=", "proc", "(", "sampled_data", ")", "\n", "", "sampled_data", "=", "convert_numpy_to_tensor", "(", "sampled_data", ")", "\n", "return", "sampled_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.__init__": [[31, 53], ["dict", "numpy.random.RandomState", "loguru.logger.info", "type", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "datasets", ":", "List", "[", "DatasetBase", "]", "=", "[", "]", ",", "seed", ":", "int", "=", "0", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Dataset Sampler, reponsible for sampling from different dataset\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            data config, including cfg for datasset / sampler\n        datasets: List[DatasetBase]\n            collections of datasets\n        seed: int\n            seed to initialize random number generator\n            important while using multi-worker data loader\n        \"\"\"", "\n", "self", ".", "_hyper_params", "=", "self", ".", "default_hyper_params", "\n", "self", ".", "_state", "=", "dict", "(", ")", "\n", "self", ".", "_state", "[", "\"rng\"", "]", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "datasets", "=", "datasets", "\n", "for", "d", "in", "datasets", ":", "\n", "            ", "dataset_name", "=", "type", "(", "d", ")", ".", "__name__", "\n", "logger", ".", "info", "(", "\"Sampler's underlying datasets: {}, length {}\"", ".", "format", "(", "\n", "dataset_name", ",", "len", "(", "d", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps": [[54, 64], ["None"], "methods", ["None"], ["", "", "def", "get_hps", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Getter function for hyper-parameters\n\n        Returns\n        -------\n        dict\n            hyper-parameters\n        \"\"\"", "\n", "return", "self", ".", "_hyper_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps": [[65, 78], ["None"], "methods", ["None"], ["", "def", "set_hps", "(", "self", ",", "hps", ":", "Dict", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        Set hyper-parameters\n\n        Arguments\n        ---------\n        hps: dict\n            dict of hyper-parameters, the keys must in self.__hyper_params__\n        \"\"\"", "\n", "for", "key", "in", "hps", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "_hyper_params", ":", "\n", "                ", "raise", "KeyError", "\n", "", "self", ".", "_hyper_params", "[", "key", "]", "=", "hps", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params": [[79, 83], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ")", "->", "None", ":", "\n", "        ", "r\"\"\"\n        an interface for update params\n        \"\"\"", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", "->", "Dict", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.__getitem__": [[83, 87], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        An interface to sample data\n        \"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build": [[14, 48], ["dataset.builder.build", "module.get_hps", "videoanalyst.utils.merge_cfg_into_hps", "module.set_hps", "module.update_params", "filter.builder.build"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.get_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.merge_cfg_into_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.set_hps", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.sampler_base.SamplerBase.update_params", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.build"], ["model", ":", "nn", ".", "Module", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Builder function.\n\n    Arguments\n    ---------\n    task: str\n        builder task name (track|vos)\n    cfg: CfgNode\n        node name: model\n\n    Returns\n    -------\n    torch.nn.Module\n        module built by builder\n    \"\"\"", "\n", "optimizer", "=", "optimizer_builder", ".", "build", "(", "task", ",", "cfg", ".", "optimizer", ",", "model", ")", "\n", "if", "(", "\"grad_modifier\"", "in", "cfg", ")", "and", "(", "cfg", ".", "grad_modifier", ".", "name", "!=", "\"\"", ")", ":", "\n", "        ", "grad_modifier", "=", "grad_modifier_builder", ".", "build", "(", "task", ",", "cfg", ".", "grad_modifier", ")", "\n", "optimizer", ".", "set_grad_modifier", "(", "grad_modifier", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n", "\n", "", "def", "get_config", "(", ")", "->", "CfgNode", ":", "\n", "    ", "r\"\"\"\n    Get available component list config\n\n    Returns\n    -------\n    CfgNode\n        config with list of available components\n    \"\"\"", "\n", "cfg", "=", "CfgNode", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config": [[50, 71], ["sampler_base.TASK_SAMPLERS.items", "yacs.config.CfgNode", "yacs.config.CfgNode", "yacs.config.CfgNode", "dataset.builder.get_config", "filter.builder.get_config"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler.builder.get_config"], ["cfg", "[", "\"grad_modifier\"", "]", "=", "grad_modifier_builder", ".", "get_config", "(", ")", "\n", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler.__init__": [[44, 62], ["sampler_base.SamplerBase.__init__", "sum", "d._hyper_params.get"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.sync_batchnorm.comm.FutureResult.get"], ["def", "__init__", "(", "self", ",", "\n", "datasets", ":", "List", "[", "DatasetBase", "]", "=", "[", "]", ",", "\n", "seed", ":", "int", "=", "0", ",", "\n", "data_filter", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "datasets", ",", "seed", "=", "seed", ")", "\n", "if", "data_filter", "is", "None", ":", "\n", "            ", "self", ".", "data_filter", "=", "[", "lambda", "x", ":", "False", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_filter", "=", "data_filter", "\n", "\n", "", "self", ".", "_state", "[", "\"ratios\"", "]", "=", "[", "\n", "d", ".", "_hyper_params", "[", "\"ratio\"", "]", "for", "d", "in", "self", ".", "datasets", "\n", "]", "\n", "sum_ratios", "=", "sum", "(", "self", ".", "_state", "[", "\"ratios\"", "]", ")", "\n", "self", ".", "_state", "[", "\"ratios\"", "]", "=", "[", "d", "/", "sum_ratios", "for", "d", "in", "self", ".", "_state", "[", "\"ratios\"", "]", "]", "\n", "self", ".", "_state", "[", "\"max_diffs\"", "]", "=", "[", "\n", "# max_diffs, or -1 (invalid value for video, but not used for static image dataset)", "\n", "d", ".", "_hyper_params", ".", "get", "(", "\"max_diff\"", ",", "-", "1", ")", "for", "d", "in", "self", ".", "datasets", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler.__getitem__": [[64, 85], ["dict", "track_pair_sampler.TrackPairSampler._state[].rand", "track_pair_sampler.TrackPairSampler.data_filter", "track_pair_sampler.TrackPairSampler.data_filter", "videoanalyst.utils.load_image", "videoanalyst.utils.load_image", "track_pair_sampler.TrackPairSampler._sample_track_frame", "track_pair_sampler.TrackPairSampler._sample_track_frame", "track_pair_sampler.TrackPairSampler._sample_track_pair"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.load_image", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.load_image", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_frame", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_frame", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_pair"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", "->", "dict", ":", "\n", "        ", "is_negative_pair", "=", "(", "self", ".", "_state", "[", "\"rng\"", "]", ".", "rand", "(", ")", "<", "\n", "self", ".", "_hyper_params", "[", "\"negative_pair_ratio\"", "]", ")", "\n", "data1", "=", "data2", "=", "None", "\n", "sample_try_num", "=", "0", "\n", "while", "self", ".", "data_filter", "(", "data1", ")", "or", "self", ".", "data_filter", "(", "data2", ")", ":", "\n", "            ", "if", "is_negative_pair", ":", "\n", "                ", "data1", "=", "self", ".", "_sample_track_frame", "(", ")", "\n", "data2", "=", "self", ".", "_sample_track_frame", "(", ")", "\n", "", "else", ":", "\n", "                ", "data1", ",", "data2", "=", "self", ".", "_sample_track_pair", "(", ")", "\n", "", "data1", "[", "\"image\"", "]", "=", "load_image", "(", "data1", "[", "\"image\"", "]", ")", "\n", "data2", "[", "\"image\"", "]", "=", "load_image", "(", "data2", "[", "\"image\"", "]", ")", "\n", "sample_try_num", "+=", "1", "\n", "", "sampled_data", "=", "dict", "(", "\n", "data1", "=", "data1", ",", "\n", "data2", "=", "data2", ",", "\n", "is_negative_pair", "=", "is_negative_pair", ",", "\n", ")", "\n", "\n", "return", "sampled_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._get_len_seq": [[86, 88], ["len"], "methods", ["None"], ["", "def", "_get_len_seq", "(", "self", ",", "seq_data", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "seq_data", "[", "\"image\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_pair": [[89, 103], ["track_pair_sampler.TrackPairSampler._sample_dataset", "track_pair_sampler.TrackPairSampler._sample_sequence_from_dataset", "track_pair_sampler.TrackPairSampler._get_len_seq", "track_pair_sampler.TrackPairSampler._sample_track_frame_from_static_image", "copy.deepcopy", "track_pair_sampler.TrackPairSampler._sample_track_pair_from_sequence", "isinstance"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_dataset", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_sequence_from_dataset", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._get_len_seq", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_frame_from_static_image", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_pair_from_sequence"], ["", "def", "_sample_track_pair", "(", "self", ")", "->", "Tuple", "[", "Dict", ",", "Dict", "]", ":", "\n", "        ", "dataset_idx", ",", "dataset", "=", "self", ".", "_sample_dataset", "(", ")", "\n", "sequence_data", "=", "self", ".", "_sample_sequence_from_dataset", "(", "dataset", ")", "\n", "len_seq", "=", "self", ".", "_get_len_seq", "(", "sequence_data", ")", "\n", "if", "len_seq", "==", "1", "and", "not", "isinstance", "(", "sequence_data", "[", "\"anno\"", "]", "[", "0", "]", ",", "list", ")", ":", "\n", "# static image dataset", "\n", "            ", "data1", "=", "self", ".", "_sample_track_frame_from_static_image", "(", "sequence_data", ")", "\n", "data2", "=", "deepcopy", "(", "data1", ")", "\n", "", "else", ":", "\n", "# video dataset", "\n", "            ", "data1", ",", "data2", "=", "self", ".", "_sample_track_pair_from_sequence", "(", "\n", "sequence_data", ",", "self", ".", "_state", "[", "\"max_diffs\"", "]", "[", "dataset_idx", "]", ")", "\n", "\n", "", "return", "data1", ",", "data2", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_frame": [[104, 117], ["track_pair_sampler.TrackPairSampler._sample_dataset", "track_pair_sampler.TrackPairSampler._sample_sequence_from_dataset", "track_pair_sampler.TrackPairSampler._get_len_seq", "track_pair_sampler.TrackPairSampler._sample_track_frame_from_static_image", "track_pair_sampler.TrackPairSampler._sample_track_frame_from_sequence"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_dataset", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_sequence_from_dataset", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._get_len_seq", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_frame_from_static_image", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_frame_from_sequence"], ["", "def", "_sample_track_frame", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "_", ",", "dataset", "=", "self", ".", "_sample_dataset", "(", ")", "\n", "sequence_data", "=", "self", ".", "_sample_sequence_from_dataset", "(", "dataset", ")", "\n", "len_seq", "=", "self", ".", "_get_len_seq", "(", "sequence_data", ")", "\n", "if", "len_seq", "==", "1", ":", "\n", "# static image dataset", "\n", "            ", "data_frame", "=", "self", ".", "_sample_track_frame_from_static_image", "(", "\n", "sequence_data", ")", "\n", "", "else", ":", "\n", "# video dataset", "\n", "            ", "data_frame", "=", "self", ".", "_sample_track_frame_from_sequence", "(", "sequence_data", ")", "\n", "\n", "", "return", "data_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_dataset": [[118, 133], ["rng.choice", "len"], "methods", ["None"], ["", "def", "_sample_dataset", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Returns\n        -------\n        int\n            sampled dataset index\n        DatasetBase\n            sampled dataset\n        \"\"\"", "\n", "dataset_ratios", "=", "self", ".", "_state", "[", "\"ratios\"", "]", "\n", "rng", "=", "self", ".", "_state", "[", "\"rng\"", "]", "\n", "dataset_idx", "=", "rng", ".", "choice", "(", "len", "(", "self", ".", "datasets", ")", ",", "p", "=", "dataset_ratios", ")", "\n", "dataset", "=", "self", ".", "datasets", "[", "dataset_idx", "]", "\n", "\n", "return", "dataset_idx", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_sequence_from_dataset": [[134, 144], ["len", "rng.choice"], "methods", ["None"], ["", "def", "_sample_sequence_from_dataset", "(", "self", ",", "dataset", ":", "DatasetBase", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        \"\"\"", "\n", "rng", "=", "self", ".", "_state", "[", "\"rng\"", "]", "\n", "len_dataset", "=", "len", "(", "dataset", ")", "\n", "idx", "=", "rng", ".", "choice", "(", "len_dataset", ")", "\n", "\n", "sequence_data", "=", "dataset", "[", "idx", "]", "\n", "\n", "return", "sequence_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._generate_mask_for_vos": [[145, 152], ["PIL.Image.open", "numpy.array"], "methods", ["None"], ["", "def", "_generate_mask_for_vos", "(", "self", ",", "anno", ")", ":", "\n", "        ", "mask", "=", "Image", ".", "open", "(", "anno", "[", "0", "]", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "obj_id", "=", "anno", "[", "1", "]", "\n", "mask", "[", "mask", "!=", "obj_id", "]", "=", "0", "\n", "mask", "[", "mask", "==", "obj_id", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_frame_from_sequence": [[153, 164], ["track_pair_sampler.TrackPairSampler._get_len_seq", "rng.choice", "isinstance", "sequence_data.items", "track_pair_sampler.TrackPairSampler._generate_mask_for_vos"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._get_len_seq", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._generate_mask_for_vos"], ["", "def", "_sample_track_frame_from_sequence", "(", "self", ",", "sequence_data", ")", "->", "Dict", ":", "\n", "        ", "rng", "=", "self", ".", "_state", "[", "\"rng\"", "]", "\n", "len_seq", "=", "self", ".", "_get_len_seq", "(", "sequence_data", ")", "\n", "idx", "=", "rng", ".", "choice", "(", "len_seq", ")", "\n", "data_frame", "=", "{", "k", ":", "v", "[", "idx", "]", "for", "k", ",", "v", "in", "sequence_data", ".", "items", "(", ")", "}", "\n", "# convert mask path to mask, specical for youtubevos and davis", "\n", "if", "self", ".", "_hyper_params", "[", "\"target_type\"", "]", "==", "\"mask\"", ":", "\n", "            ", "if", "isinstance", "(", "data_frame", "[", "\"anno\"", "]", ",", "list", ")", ":", "\n", "                ", "mask", "=", "self", ".", "_generate_mask_for_vos", "(", "data_frame", "[", "\"anno\"", "]", ")", "\n", "data_frame", "[", "\"anno\"", "]", "=", "mask", "\n", "", "", "return", "data_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_pair_from_sequence": [[165, 193], ["track_pair_sampler.TrackPairSampler._get_len_seq", "track_pair_sampler.TrackPairSampler._sample_pair_idx_pair_within_max_diff", "isinstance", "track_pair_sampler.TrackPairSampler._generate_mask_for_vos", "track_pair_sampler.TrackPairSampler._generate_mask_for_vos", "sequence_data.items", "sequence_data.items"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._get_len_seq", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_pair_idx_pair_within_max_diff", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._generate_mask_for_vos", "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._generate_mask_for_vos"], ["", "def", "_sample_track_pair_from_sequence", "(", "self", ",", "sequence_data", ":", "Dict", ",", "\n", "max_diff", ":", "int", ")", "->", "Tuple", "[", "Dict", ",", "Dict", "]", ":", "\n", "        ", "\"\"\"sample a pair of frames within max_diff distance\n        \n        Parameters\n        ----------\n        sequence_data : List\n            sequence data: image= , anno=\n        max_diff : int\n            maximum difference of indexes between two frames in the  pair\n        \n        Returns\n        -------\n        Tuple[Dict, Dict]\n            track pair data\n            data: image= , anno=\n        \"\"\"", "\n", "len_seq", "=", "self", ".", "_get_len_seq", "(", "sequence_data", ")", "\n", "idx1", ",", "idx2", "=", "self", ".", "_sample_pair_idx_pair_within_max_diff", "(", "\n", "len_seq", ",", "max_diff", ")", "\n", "data1", "=", "{", "k", ":", "v", "[", "idx1", "]", "for", "k", ",", "v", "in", "sequence_data", ".", "items", "(", ")", "}", "\n", "data2", "=", "{", "k", ":", "v", "[", "idx2", "]", "for", "k", ",", "v", "in", "sequence_data", ".", "items", "(", ")", "}", "\n", "if", "isinstance", "(", "data1", "[", "\"anno\"", "]", ",", "\n", "list", ")", "and", "self", ".", "_hyper_params", "[", "\"target_type\"", "]", "==", "\"mask\"", ":", "\n", "# convert mask path to mask, specical for youtubevos", "\n", "            ", "data1", "[", "\"anno\"", "]", "=", "self", ".", "_generate_mask_for_vos", "(", "data1", "[", "\"anno\"", "]", ")", "\n", "data2", "[", "\"anno\"", "]", "=", "self", ".", "_generate_mask_for_vos", "(", "data2", "[", "\"anno\"", "]", ")", "\n", "", "return", "data1", ",", "data2", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_pair_idx_pair_within_max_diff": [[194, 211], ["rng.choice", "list", "rng.choice", "list", "list", "set().intersection", "int", "int", "range", "range", "set", "set", "range"], "methods", ["None"], ["", "def", "_sample_pair_idx_pair_within_max_diff", "(", "self", ",", "L", ",", "max_diff", ")", ":", "\n", "        ", "r\"\"\"\n        Draw a pair of index in range(L) within a given maximum difference\n        Arguments\n        ---------\n        L: int\n            difference\n        max_diff: int\n            difference\n        \"\"\"", "\n", "rng", "=", "self", ".", "_state", "[", "\"rng\"", "]", "\n", "idx1", "=", "rng", ".", "choice", "(", "L", ")", "\n", "idx2_choices", "=", "list", "(", "range", "(", "idx1", "-", "max_diff", ",", "L", ")", ")", "+", "list", "(", "range", "(", "L", "+", "1", ",", "idx1", "+", "max_diff", "+", "1", ")", ")", "\n", "idx2_choices", "=", "list", "(", "set", "(", "idx2_choices", ")", ".", "intersection", "(", "set", "(", "range", "(", "L", ")", ")", ")", ")", "\n", "idx2", "=", "rng", ".", "choice", "(", "idx2_choices", ")", "\n", "return", "int", "(", "idx1", ")", ",", "int", "(", "idx2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.sampler_impl.track_pair_sampler.TrackPairSampler._sample_track_frame_from_static_image": [[212, 234], ["len", "dict", "rng.choice", "numpy.zeros", "loguru.logger.error", "exit"], "methods", ["None"], ["", "def", "_sample_track_frame_from_static_image", "(", "self", ",", "sequence_data", ")", ":", "\n", "        ", "rng", "=", "self", ".", "_state", "[", "\"rng\"", "]", "\n", "num_anno", "=", "len", "(", "sequence_data", "[", "'anno'", "]", ")", "\n", "if", "num_anno", ">", "0", ":", "\n", "            ", "idx", "=", "rng", ".", "choice", "(", "num_anno", ")", "\n", "anno", "=", "sequence_data", "[", "\"anno\"", "]", "[", "idx", "]", "\n", "", "else", ":", "\n", "# no anno, assign a dummy one", "\n", "            ", "if", "self", ".", "_hyper_params", "[", "\"target_type\"", "]", "==", "\"bbox\"", ":", "\n", "                ", "anno", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "", "elif", "self", ".", "_hyper_params", "[", "\"target_type\"", "]", "==", "\"mask\"", ":", "\n", "                ", "anno", "=", "np", ".", "zeros", "(", "(", "sequence_data", "[", "\"image\"", "]", "[", "0", "]", ".", "shape", "[", ":", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\"target type {} is not supported\"", ".", "format", "(", "\n", "self", ".", "_hyper_params", "[", "\"target_type\"", "]", ")", ")", "\n", "exit", "(", "0", ")", "\n", "", "", "data", "=", "dict", "(", "\n", "image", "=", "sequence_data", "[", "\"image\"", "]", "[", "0", "]", ",", "\n", "anno", "=", "anno", ",", "\n", ")", "\n", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ar_benchmark.AccuracyRobustnessBenchmark.__init__": [[24, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "burnin", "=", "10", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "burnin", "=", "burnin", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ar_benchmark.AccuracyRobustnessBenchmark.eval": [[28, 47], ["isinstance", "ar_benchmark.AccuracyRobustnessBenchmark._calculate_accuracy_robustness"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ar_benchmark.AccuracyRobustnessBenchmark._calculate_accuracy_robustness"], ["", "def", "eval", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_tags: list of tag\n            eval_trackers: list of tracker name\n        Returns:\n            ret: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "result", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "accuracy", ",", "failures", "=", "self", ".", "_calculate_accuracy_robustness", "(", "\n", "tracker_name", ")", "\n", "result", "[", "tracker_name", "]", "=", "{", "'overlaps'", ":", "accuracy", ",", "'failures'", ":", "failures", "}", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ar_benchmark.AccuracyRobustnessBenchmark.show_result": [[48, 137], ["max", "print", "print", "print", "print", "header.format.format.format", "header.format.format.format", "len", "list", "list", "numpy.nanmean", "sum", "list", "numpy.mean", "print", "result.keys", "print", "print", "print", "print", "print", "list", "print", "max", "sorted", "result.keys", "itertools.chain", "ret[].values", "numpy.sum", "numpy.mean", "print", "print", "len", "[].keys", "result.keys", "print", "str", "str", "str", "str", "eao_result.items", "len", "formatter.format", "formatter.format", "len", "len", "len", "numpy.nanmean", "numpy.mean", "len", "len", "ret[].values", "ret[].values", "numpy.sum", "result.keys", "numpy.array"], "methods", ["None"], ["", "def", "show_result", "(", "self", ",", "\n", "result", ",", "\n", "eao_result", "=", "None", ",", "\n", "show_video_level", "=", "False", ",", "\n", "helight_threshold", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"pretty print result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "result", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "12", ")", "\n", "if", "eao_result", "is", "not", "None", ":", "\n", "            ", "header", "=", "\"|{:^\"", "+", "str", "(", "\n", "tracker_name_len", ")", "+", "\"}|{:^10}|{:^12}|{:^13}|{:^7}|\"", "\n", "header", "=", "header", ".", "format", "(", "'Tracker Name'", ",", "'Accuracy'", ",", "'Robustness'", ",", "\n", "'Lost Number'", ",", "'EAO'", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "\n", "tracker_name_len", ")", "+", "\"}|{:^10.3f}|{:^12.3f}|{:^13.1f}|{:^7.3f}|\"", "\n", "", "else", ":", "\n", "            ", "header", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10}|{:^12}|{:^13}|\"", "\n", "header", "=", "header", ".", "format", "(", "'Tracker Name'", ",", "'Accuracy'", ",", "'Robustness'", ",", "\n", "'Lost Number'", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "\n", "tracker_name_len", ")", "+", "\"}|{:^10.3f}|{:^12.3f}|{:^13.1f}|\"", "\n", "", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "if", "eao_result", "is", "not", "None", ":", "\n", "            ", "tracker_eao", "=", "sorted", "(", "eao_result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "20", "]", "\n", "tracker_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "tracker_eao", "]", "\n", "", "else", ":", "\n", "            ", "tracker_names", "=", "list", "(", "result", ".", "keys", "(", ")", ")", "\n", "", "for", "tracker_name", "in", "tracker_names", ":", "\n", "            ", "ret", "=", "result", "[", "tracker_name", "]", "\n", "overlaps", "=", "list", "(", "itertools", ".", "chain", "(", "*", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", ")", ")", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "length", "=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", "]", ")", "\n", "failures", "=", "list", "(", "ret", "[", "'failures'", "]", ".", "values", "(", ")", ")", "\n", "lost_number", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "failures", ",", "axis", "=", "0", ")", ")", "\n", "robustness", "=", "np", ".", "mean", "(", "\n", "np", ".", "sum", "(", "np", ".", "array", "(", "failures", ")", ",", "axis", "=", "0", ")", "/", "length", ")", "*", "100", "\n", "if", "eao_result", "is", "None", ":", "\n", "                ", "print", "(", "\n", "formatter", ".", "format", "(", "tracker_name", ",", "accuracy", ",", "robustness", ",", "\n", "lost_number", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\n", "formatter", ".", "format", "(", "tracker_name", ",", "accuracy", ",", "robustness", ",", "\n", "lost_number", ",", "\n", "eao_result", "[", "tracker_name", "]", "[", "'all'", "]", ")", ")", "\n", "", "", "print", "(", "bar", ")", "\n", "\n", "if", "show_video_level", "and", "len", "(", "result", ")", "<", "10", ":", "\n", "            ", "print", "(", "'\\n\\n'", ")", "\n", "header1", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Tracker name\"", ")", "\n", "header2", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Video name\"", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "                ", "header1", "+=", "(", "\"{:^17}|\"", ")", ".", "format", "(", "tracker_name", ")", "\n", "header2", "+=", "\"{:^8}|{:^8}|\"", ".", "format", "(", "\"Acc\"", ",", "\"LN\"", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header1", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header2", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "videos", "=", "list", "(", "result", "[", "tracker_name", "]", "[", "'overlaps'", "]", ".", "keys", "(", ")", ")", "\n", "for", "video", "in", "videos", ":", "\n", "                ", "row", "=", "\"|{:^14}|\"", ".", "format", "(", "video", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "                    ", "overlaps", "=", "result", "[", "tracker_name", "]", "[", "'overlaps'", "]", "[", "video", "]", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "failures", "=", "result", "[", "tracker_name", "]", "[", "'failures'", "]", "[", "video", "]", "\n", "lost_number", "=", "np", ".", "mean", "(", "failures", ")", "\n", "\n", "accuracy_str", "=", "\"{:^8.3f}\"", ".", "format", "(", "accuracy", ")", "\n", "if", "accuracy", "<", "helight_threshold", ":", "\n", "#row += f'{Fore.RED}{accuracy_str}{Style.RESET_ALL}|'", "\n", "                        ", "row", "+=", "'{Fore.RED}{accuracy_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "accuracy_str", "+", "'|'", "\n", "", "lost_num_str", "=", "\"{:^8.3f}\"", ".", "format", "(", "lost_number", ")", "\n", "if", "lost_number", ">", "0", ":", "\n", "#row += f'{Fore.RED}{lost_num_str}{Style.RESET_ALL}|'", "\n", "                        ", "row", "+=", "'{Fore.RED}{lost_num_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "lost_num_str", "+", "'|'", "\n", "", "", "print", "(", "row", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ar_benchmark.AccuracyRobustnessBenchmark.write_result": [[138, 228], ["max", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "header.format.format.format", "header.format.format.format", "len", "list", "list", "numpy.nanmean", "sum", "list", "numpy.mean", "result_file.write", "result.keys", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "list", "result_file.write", "max", "sorted", "result.keys", "itertools.chain", "ret[].values", "numpy.sum", "numpy.mean", "result_file.write", "result_file.write", "len", "[].keys", "result.keys", "result_file.write", "str", "str", "str", "str", "eao_result.items", "len", "numpy.nanmean", "numpy.mean", "len", "ret[].values", "ret[].values", "numpy.sum", "formatter.format", "formatter.format", "len", "len", "len", "len", "result.keys", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["", "", "def", "write_result", "(", "self", ",", "\n", "result", ",", "\n", "eao_result", "=", "None", ",", "\n", "show_video_level", "=", "False", ",", "\n", "helight_threshold", "=", "0.5", ",", "\n", "result_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"pretty result_file.write result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "result", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "12", ")", "\n", "if", "eao_result", "is", "not", "None", ":", "\n", "            ", "header", "=", "\"|{:^\"", "+", "str", "(", "\n", "tracker_name_len", ")", "+", "\"}|{:^10}|{:^12}|{:^13}|{:^7}|\"", "\n", "header", "=", "header", ".", "format", "(", "'Tracker Name'", ",", "'Accuracy'", ",", "'Robustness'", ",", "\n", "'Lost Number'", ",", "'EAO'", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "\n", "tracker_name_len", ")", "+", "\"}|{:^10.3f}|{:^12.3f}|{:^13.1f}|{:^7.3f}|\"", "\n", "", "else", ":", "\n", "            ", "header", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10}|{:^12}|{:^13}|\"", "\n", "header", "=", "header", ".", "format", "(", "'Tracker Name'", ",", "'Accuracy'", ",", "'Robustness'", ",", "\n", "'Lost Number'", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "\n", "tracker_name_len", ")", "+", "\"}|{:^10.3f}|{:^12.3f}|{:^13.1f}|\"", "\n", "", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "header", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "if", "eao_result", "is", "not", "None", ":", "\n", "            ", "tracker_eao", "=", "sorted", "(", "eao_result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "20", "]", "\n", "tracker_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "tracker_eao", "]", "\n", "", "else", ":", "\n", "            ", "tracker_names", "=", "list", "(", "result", ".", "keys", "(", ")", ")", "\n", "", "for", "tracker_name", "in", "tracker_names", ":", "\n", "            ", "ret", "=", "result", "[", "tracker_name", "]", "\n", "overlaps", "=", "list", "(", "itertools", ".", "chain", "(", "*", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", ")", ")", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "length", "=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", "]", ")", "\n", "failures", "=", "list", "(", "ret", "[", "'failures'", "]", ".", "values", "(", ")", ")", "\n", "lost_number", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "failures", ",", "axis", "=", "0", ")", ")", "\n", "robustness", "=", "np", ".", "mean", "(", "\n", "np", ".", "sum", "(", "np", ".", "array", "(", "failures", ")", ",", "axis", "=", "0", ")", "/", "length", ")", "*", "100", "\n", "if", "eao_result", "is", "None", ":", "\n", "                ", "result_file", ".", "write", "(", "\n", "formatter", ".", "format", "(", "tracker_name", ",", "accuracy", ",", "robustness", ",", "\n", "lost_number", ")", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "                ", "result_file", ".", "write", "(", "\n", "formatter", ".", "format", "(", "tracker_name", ",", "accuracy", ",", "robustness", ",", "\n", "lost_number", ",", "eao_result", "[", "tracker_name", "]", "\n", "[", "'all'", "]", ")", "+", "'\\n'", ")", "\n", "", "", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "\n", "if", "show_video_level", "and", "len", "(", "result", ")", "<", "10", ":", "\n", "            ", "result_file", ".", "write", "(", "'\\n\\n'", ")", "\n", "header1", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Tracker name\"", ")", "\n", "header2", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Video name\"", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "                ", "header1", "+=", "(", "\"{:^17}|\"", ")", ".", "format", "(", "tracker_name", ")", "\n", "header2", "+=", "\"{:^8}|{:^8}|\"", ".", "format", "(", "\"Acc\"", ",", "\"LN\"", ")", "\n", "", "result_file", ".", "write", "(", "'-'", "*", "len", "(", "header1", ")", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "header1", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "'-'", "*", "len", "(", "header1", ")", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "header2", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "'-'", "*", "len", "(", "header1", ")", "+", "'\\n'", ")", "\n", "videos", "=", "list", "(", "result", "[", "tracker_name", "]", "[", "'overlaps'", "]", ".", "keys", "(", ")", ")", "\n", "for", "video", "in", "videos", ":", "\n", "                ", "row", "=", "\"|{:^14}|\"", ".", "format", "(", "video", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "                    ", "overlaps", "=", "result", "[", "tracker_name", "]", "[", "'overlaps'", "]", "[", "video", "]", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "failures", "=", "result", "[", "tracker_name", "]", "[", "'failures'", "]", "[", "video", "]", "\n", "lost_number", "=", "np", ".", "mean", "(", "failures", ")", "\n", "\n", "accuracy_str", "=", "\"{:^8.3f}\"", ".", "format", "(", "accuracy", ")", "\n", "if", "accuracy", "<", "helight_threshold", ":", "\n", "# row += f'{Fore.RED}{accuracy_str}{Style.RESET_ALL}|'", "\n", "                        ", "row", "+=", "'{Fore.RED}{accuracy_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "accuracy_str", "+", "'|'", "\n", "", "lost_num_str", "=", "\"{:^8.3f}\"", ".", "format", "(", "lost_number", ")", "\n", "if", "lost_number", ">", "0", ":", "\n", "# row += f'{Fore.RED}{lost_num_str}{Style.RESET_ALL}|'", "\n", "                        ", "row", "+=", "'{Fore.RED}{lost_num_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "lost_num_str", "+", "'|'", "\n", "", "", "result_file", ".", "write", "(", "row", "+", "'\\n'", ")", "\n", "", "result_file", ".", "write", "(", "'-'", "*", "len", "(", "header1", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ar_benchmark.AccuracyRobustnessBenchmark._calculate_accuracy_robustness": [[229, 257], ["range", "len", "video.load_tracker", "overlaps_group.append", "num_failures_group.append", "warnings.catch_warnings", "warnings.simplefilter", "numpy.nanmean().tolist", "utils.calculate_failures", "utils.calculate_accuracy", "numpy.nanmean"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_tracker", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_failures", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_accuracy"], ["", "", "def", "_calculate_accuracy_robustness", "(", "self", ",", "tracker_name", ")", ":", "\n", "        ", "overlaps", "=", "{", "}", "\n", "failures", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ":", "\n", "            ", "video", "=", "self", ".", "dataset", "[", "i", "]", "\n", "gt_traj", "=", "video", ".", "gt_traj", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                ", "tracker_trajs", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "tracker_trajs", "=", "video", ".", "pred_trajs", "[", "tracker_name", "]", "\n", "", "overlaps_group", "=", "[", "]", "\n", "num_failures_group", "=", "[", "]", "\n", "for", "tracker_traj", "in", "tracker_trajs", ":", "\n", "                ", "num_failures", "=", "calculate_failures", "(", "tracker_traj", ")", "[", "0", "]", "\n", "overlaps_", "=", "calculate_accuracy", "(", "tracker_traj", ",", "\n", "gt_traj", ",", "\n", "burnin", "=", "10", ",", "\n", "bound", "=", "(", "video", ".", "width", ",", "\n", "video", ".", "height", ")", ")", "[", "1", "]", "\n", "overlaps_group", ".", "append", "(", "overlaps_", ")", "\n", "num_failures_group", ".", "append", "(", "num_failures", ")", "\n", "", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "overlaps", "[", "video", ".", "name", "]", "=", "np", ".", "nanmean", "(", "overlaps_group", ",", "\n", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "failures", "[", "video", ".", "name", "]", "=", "num_failures_group", "\n", "", "", "return", "overlaps", ",", "failures", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.__init__": [[13, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_center": [[16, 19], ["numpy.array"], "methods", ["None"], ["", "def", "convert_bb_to_center", "(", "self", ",", "bboxes", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "(", "bboxes", "[", ":", ",", "0", "]", "+", "(", "bboxes", "[", ":", ",", "2", "]", "-", "1", ")", "/", "2", ")", ",", "\n", "(", "bboxes", "[", ":", ",", "1", "]", "+", "(", "bboxes", "[", ":", ",", "3", "]", "-", "1", ")", "/", "2", ")", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_norm_center": [[20, 22], ["ope_benchmark.OPEBenchmark.convert_bb_to_center"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_center"], ["", "def", "convert_bb_to_norm_center", "(", "self", ",", "bboxes", ",", "gt_wh", ")", ":", "\n", "        ", "return", "self", ".", "convert_bb_to_center", "(", "bboxes", ")", "/", "(", "gt_wh", "+", "1e-16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.eval_success": [[23, 54], ["isinstance", "numpy.array", "len", "hasattr", "utils.success_overlap", "video.load_tracker", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.success_overlap", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_tracker"], ["", "def", "eval_success", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args: \n            eval_trackers: list of tracker name or single tracker name\n        Return:\n            res: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "success_ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "success_ret_", "=", "{", "}", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "                ", "gt_traj", "=", "np", ".", "array", "(", "video", ".", "gt_traj", ")", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                    ", "tracker_traj", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "\n", "tracker_traj", "=", "np", ".", "array", "(", "tracker_traj", ")", "\n", "", "else", ":", "\n", "                    ", "tracker_traj", "=", "np", ".", "array", "(", "video", ".", "pred_trajs", "[", "tracker_name", "]", ")", "\n", "", "n_frame", "=", "len", "(", "gt_traj", ")", "\n", "if", "hasattr", "(", "video", ",", "'absent'", ")", ":", "\n", "                    ", "gt_traj", "=", "gt_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "tracker_traj", "=", "tracker_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "", "success_ret_", "[", "video", ".", "name", "]", "=", "success_overlap", "(", "\n", "gt_traj", ",", "tracker_traj", ",", "n_frame", ")", "\n", "", "success_ret", "[", "tracker_name", "]", "=", "success_ret_", "\n", "", "return", "success_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.eval_precision": [[55, 89], ["isinstance", "numpy.array", "len", "hasattr", "ope_benchmark.OPEBenchmark.convert_bb_to_center", "ope_benchmark.OPEBenchmark.convert_bb_to_center", "numpy.arange", "utils.success_error", "video.load_tracker", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_center", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_center", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.success_error", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_tracker"], ["", "def", "eval_precision", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_trackers: list of tracker name or single tracker name\n        Return:\n            res: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "precision_ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "precision_ret_", "=", "{", "}", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "                ", "gt_traj", "=", "np", ".", "array", "(", "video", ".", "gt_traj", ")", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                    ", "tracker_traj", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "\n", "tracker_traj", "=", "np", ".", "array", "(", "tracker_traj", ")", "\n", "", "else", ":", "\n", "                    ", "tracker_traj", "=", "np", ".", "array", "(", "video", ".", "pred_trajs", "[", "tracker_name", "]", ")", "\n", "", "n_frame", "=", "len", "(", "gt_traj", ")", "\n", "if", "hasattr", "(", "video", ",", "'absent'", ")", ":", "\n", "                    ", "gt_traj", "=", "gt_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "tracker_traj", "=", "tracker_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "", "gt_center", "=", "self", ".", "convert_bb_to_center", "(", "gt_traj", ")", "\n", "tracker_center", "=", "self", ".", "convert_bb_to_center", "(", "tracker_traj", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "51", ",", "1", ")", "\n", "precision_ret_", "[", "video", ".", "name", "]", "=", "success_error", "(", "\n", "gt_center", ",", "tracker_center", ",", "thresholds", ",", "n_frame", ")", "\n", "", "precision_ret", "[", "tracker_name", "]", "=", "precision_ret_", "\n", "", "return", "precision_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.eval_norm_precision": [[90, 126], ["isinstance", "numpy.array", "len", "hasattr", "ope_benchmark.OPEBenchmark.convert_bb_to_norm_center", "ope_benchmark.OPEBenchmark.convert_bb_to_norm_center", "utils.success_error", "video.load_tracker", "numpy.array", "numpy.array", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_norm_center", "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.convert_bb_to_norm_center", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.success_error", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_tracker"], ["", "def", "eval_norm_precision", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_trackers: list of tracker name or single tracker name\n        Return:\n            res: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "norm_precision_ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "norm_precision_ret_", "=", "{", "}", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "                ", "gt_traj", "=", "np", ".", "array", "(", "video", ".", "gt_traj", ")", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                    ", "tracker_traj", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "\n", "tracker_traj", "=", "np", ".", "array", "(", "tracker_traj", ")", "\n", "", "else", ":", "\n", "                    ", "tracker_traj", "=", "np", ".", "array", "(", "video", ".", "pred_trajs", "[", "tracker_name", "]", ")", "\n", "", "n_frame", "=", "len", "(", "gt_traj", ")", "\n", "if", "hasattr", "(", "video", ",", "'absent'", ")", ":", "\n", "                    ", "gt_traj", "=", "gt_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "tracker_traj", "=", "tracker_traj", "[", "video", ".", "absent", "==", "1", "]", "\n", "", "gt_center_norm", "=", "self", ".", "convert_bb_to_norm_center", "(", "\n", "gt_traj", ",", "gt_traj", "[", ":", ",", "2", ":", "4", "]", ")", "\n", "tracker_center_norm", "=", "self", ".", "convert_bb_to_norm_center", "(", "\n", "tracker_traj", ",", "gt_traj", "[", ":", ",", "2", ":", "4", "]", ")", "\n", "thresholds", "=", "np", ".", "arange", "(", "0", ",", "51", ",", "1", ")", "/", "100", "\n", "norm_precision_ret_", "[", "video", ".", "name", "]", "=", "success_error", "(", "\n", "gt_center_norm", ",", "tracker_center_norm", ",", "thresholds", ",", "n_frame", ")", "\n", "", "norm_precision_ret", "[", "tracker_name", "]", "=", "norm_precision_ret_", "\n", "", "return", "norm_precision_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.ope_benchmark.OPEBenchmark.show_result": [[127, 210], ["success_ret.keys", "max", "print", "print", "print", "print", "numpy.mean", "sorted", "print", "print", "success_ret.keys", "print", "print", "print", "print", "print", "list", "print", "list", "tracker_auc.items", "max", "str", "len", "len", "formatter.format", "len", "len", "len", "success_ret[].keys", "success_ret.keys", "print", "success_ret[].values", "numpy.mean", "numpy.mean", "len", "len", "len", "numpy.mean", "numpy.mean", "len", "len", "str", "list", "list", "success_ret.keys", "precision_ret[].values", "norm_precision_ret[].values"], "methods", ["None"], ["", "def", "show_result", "(", "self", ",", "\n", "success_ret", ",", "\n", "precision_ret", "=", "None", ",", "\n", "norm_precision_ret", "=", "None", ",", "\n", "show_video_level", "=", "False", ",", "\n", "helight_threshold", "=", "0.6", ")", ":", "\n", "        ", "\"\"\"pretty print result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "# sort tracker", "\n", "tracker_auc", "=", "{", "}", "\n", "for", "tracker_name", "in", "success_ret", ".", "keys", "(", ")", ":", "\n", "            ", "auc", "=", "np", ".", "mean", "(", "list", "(", "success_ret", "[", "tracker_name", "]", ".", "values", "(", ")", ")", ")", "\n", "tracker_auc", "[", "tracker_name", "]", "=", "auc", "\n", "", "tracker_auc_", "=", "sorted", "(", "tracker_auc", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "20", "]", "\n", "tracker_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "tracker_auc_", "]", "\n", "\n", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "success_ret", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "\n", "12", ")", "\n", "header", "=", "(", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\n", "\"}|{:^9}|{:^16}|{:^11}|\"", ")", ".", "format", "(", "\"Tracker name\"", ",", "\"Success\"", ",", "\n", "\"Norm Precision\"", ",", "\n", "\"Precision\"", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "\n", "tracker_name_len", ")", "+", "\"}|{:^9.3f}|{:^16.3f}|{:^11.3f}|\"", "\n", "print", "(", "'-'", "*", "len", "(", "header", ")", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header", ")", ")", "\n", "for", "tracker_name", "in", "tracker_names", ":", "\n", "# success = np.mean(list(success_ret[tracker_name].values()))", "\n", "            ", "success", "=", "tracker_auc", "[", "tracker_name", "]", "\n", "if", "precision_ret", "is", "not", "None", ":", "\n", "                ", "precision", "=", "np", ".", "mean", "(", "list", "(", "precision_ret", "[", "tracker_name", "]", ".", "values", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "[", "20", "]", "\n", "", "else", ":", "\n", "                ", "precision", "=", "0", "\n", "", "if", "norm_precision_ret", "is", "not", "None", ":", "\n", "                ", "norm_precision", "=", "np", ".", "mean", "(", "list", "(", "\n", "norm_precision_ret", "[", "tracker_name", "]", ".", "values", "(", ")", ")", ",", "\n", "axis", "=", "0", ")", "[", "20", "]", "\n", "", "else", ":", "\n", "                ", "norm_precision", "=", "0", "\n", "", "print", "(", "\n", "formatter", ".", "format", "(", "tracker_name", ",", "success", ",", "norm_precision", ",", "\n", "precision", ")", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header", ")", ")", "\n", "\n", "if", "show_video_level", "and", "len", "(", "success_ret", ")", "<", "10", "and", "precision_ret", "is", "not", "None", "and", "len", "(", "precision_ret", ")", "<", "10", ":", "\n", "            ", "print", "(", "\"\\n\\n\"", ")", "\n", "header1", "=", "\"|{:^21}|\"", ".", "format", "(", "\"Tracker name\"", ")", "\n", "header2", "=", "\"|{:^21}|\"", ".", "format", "(", "\"Video name\"", ")", "\n", "for", "tracker_name", "in", "success_ret", ".", "keys", "(", ")", ":", "\n", "# col_len = max(20, len(tracker_name))", "\n", "                ", "header1", "+=", "(", "\"{:^21}|\"", ")", ".", "format", "(", "tracker_name", ")", "\n", "header2", "+=", "\"{:^9}|{:^11}|\"", ".", "format", "(", "\"success\"", ",", "\"precision\"", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header1", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header2", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "videos", "=", "list", "(", "success_ret", "[", "tracker_name", "]", ".", "keys", "(", ")", ")", "\n", "for", "video", "in", "videos", ":", "\n", "                ", "row", "=", "\"|{:^21}|\"", ".", "format", "(", "video", ")", "\n", "for", "tracker_name", "in", "success_ret", ".", "keys", "(", ")", ":", "\n", "                    ", "success", "=", "np", ".", "mean", "(", "success_ret", "[", "tracker_name", "]", "[", "video", "]", ")", "\n", "precision", "=", "np", ".", "mean", "(", "precision_ret", "[", "tracker_name", "]", "[", "video", "]", ")", "\n", "success_str", "=", "\"{:^9.3f}\"", ".", "format", "(", "success", ")", "\n", "if", "success", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{success_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "success_str", "+", "'|'", "\n", "", "precision_str", "=", "\"{:^11.3f}\"", ".", "format", "(", "precision", ")", "\n", "if", "precision", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{precision_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "precision_str", "+", "'|'", "\n", "", "", "print", "(", "row", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.eao_benchmark.EAOBenchmark.__init__": [[20, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "skipping", "=", "5", ",", "tags", "=", "[", "'all'", "]", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "skipping", "=", "skipping", "\n", "self", ".", "tags", "=", "tags", "\n", "# NOTE we not use gmm to generate low, high, peak value", "\n", "if", "dataset", ".", "name", "==", "'VOT2018'", "or", "dataset", ".", "name", "==", "'VOT2017'", ":", "\n", "            ", "self", ".", "low", "=", "100", "\n", "self", ".", "high", "=", "356", "\n", "self", ".", "peak", "=", "160", "\n", "", "elif", "dataset", ".", "name", "==", "'VOT2016'", ":", "\n", "            ", "self", ".", "low", "=", "108", "# TODO", "\n", "self", ".", "high", "=", "371", "\n", "self", ".", "peak", "=", "168", "\n", "", "elif", "dataset", ".", "name", "==", "'VOT2019'", ":", "\n", "            ", "self", ".", "low", "=", "46", "\n", "self", ".", "high", "=", "291", "\n", "self", ".", "peak", "=", "128", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.eao_benchmark.EAOBenchmark.eval": [[38, 56], ["isinstance", "eao_benchmark.EAOBenchmark._calculate_eao"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.eao_benchmark.EAOBenchmark._calculate_eao"], ["", "", "def", "eval", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_tags: list of tag\n            eval_trackers: list of tracker name\n        Returns:\n            eao: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "eao", "=", "self", ".", "_calculate_eao", "(", "tracker_name", ",", "self", ".", "tags", ")", "\n", "ret", "[", "tracker_name", "]", "=", "eao", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.eao_benchmark.EAOBenchmark.show_result": [[96, 135], ["print", "len", "max", "print", "print", "print", "print", "print", "print", "print", "print", "len", "sorted", "print", "len", "sorted", "print", "max", "result.items", "formatter.format", "result.items", "formatter.format", "len", "str", "result.keys"], "methods", ["None"], ["", "", "def", "show_result", "(", "self", ",", "result", ",", "topk", "=", "10", ")", ":", "\n", "        ", "print", "(", "'shit'", ")", "\n", "\"\"\"pretty print result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "tags", ")", "==", "1", ":", "\n", "            ", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "result", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "\n", "12", ")", "\n", "header", "=", "(", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10}|\"", ")", ".", "format", "(", "\n", "'Tracker Name'", ",", "'EAO'", ")", "\n", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "formatter", "=", "\"|{:^20}|{:^10.3f}|\"", "\n", "print", "(", "bar", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "tracker_eao", "=", "sorted", "(", "result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "topk", "]", "\n", "for", "tracker_name", ",", "eao", "in", "tracker_eao", ":", "\n", "                ", "print", "(", "formatter", ".", "format", "(", "tracker_name", ",", "eao", ")", ")", "\n", "", "print", "(", "bar", ")", "\n", "", "else", ":", "\n", "            ", "header", "=", "\"|{:^20}|\"", ".", "format", "(", "'Tracker Name'", ")", "\n", "header", "+=", "\"{:^7}|{:^15}|{:^14}|{:^15}|{:^13}|{:^11}|{:^7}|\"", ".", "format", "(", "\n", "*", "self", ".", "tags", ")", "\n", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "formatter", "=", "\"{:^7.3f}|{:^15.3f}|{:^14.3f}|{:^15.3f}|{:^13.3f}|{:^11.3f}|{:^7.3f}|\"", "\n", "print", "(", "bar", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "sorted_tacker", "=", "sorted", "(", "result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "topk", "]", "\n", "sorted_tacker", "=", "[", "x", "[", "0", "]", "for", "x", "in", "sorted_tacker", "]", "\n", "for", "tracker_name", "in", "sorted_tacker", ":", "\n", "                ", "print", "(", "\"|{:^20}|\"", ".", "format", "(", "tracker_name", ")", "+", "formatter", ".", "format", "(", "\n", "*", "[", "result", "[", "tracker_name", "]", "[", "x", "]", "for", "x", "in", "self", ".", "tags", "]", ")", ")", "\n", "", "print", "(", "bar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.eao_benchmark.EAOBenchmark.write_result": [[136, 175], ["len", "max", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "len", "sorted", "result_file.write", "len", "sorted", "result_file.write", "max", "result.items", "result.items", "formatter.format", "len", "str", "formatter.format", "result.keys"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["", "", "def", "write_result", "(", "self", ",", "result", ",", "topk", "=", "10", ",", "result_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"pretty result_file.write result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "tags", ")", "==", "1", ":", "\n", "            ", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "result", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "\n", "12", ")", "\n", "header", "=", "(", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^10}|\"", ")", ".", "format", "(", "\n", "'Tracker Name'", ",", "'EAO'", ")", "\n", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "formatter", "=", "\"|{:^20}|{:^10.3f}|\"", "\n", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "header", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "tracker_eao", "=", "sorted", "(", "result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "topk", "]", "\n", "for", "tracker_name", ",", "eao", "in", "tracker_eao", ":", "\n", "                ", "result_file", ".", "write", "(", "formatter", ".", "format", "(", "tracker_name", ",", "eao", ")", "+", "'\\n'", ")", "\n", "", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "header", "=", "\"|{:^20}|\"", ".", "format", "(", "'Tracker Name'", ")", "\n", "header", "+=", "\"{:^7}|{:^15}|{:^14}|{:^15}|{:^13}|{:^11}|{:^7}|\"", ".", "format", "(", "\n", "*", "self", ".", "tags", ")", "\n", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "formatter", "=", "\"{:^7.3f}|{:^15.3f}|{:^14.3f}|{:^15.3f}|{:^13.3f}|{:^11.3f}|{:^7.3f}|\"", "\n", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "header", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "sorted_tacker", "=", "sorted", "(", "result", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "'all'", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "topk", "]", "\n", "sorted_tacker", "=", "[", "x", "[", "0", "]", "for", "x", "in", "sorted_tacker", "]", "\n", "for", "tracker_name", "in", "sorted_tacker", ":", "\n", "                ", "result_file", ".", "write", "(", "\n", "\"|{:^20}|\"", ".", "format", "(", "tracker_name", ")", "+", "formatter", ".", "format", "(", "\n", "*", "[", "result", "[", "tracker_name", "]", "[", "x", "]", "for", "x", "in", "self", ".", "tags", "]", ")", "+", "'\\n'", ")", "\n", "", "result_file", ".", "write", "(", "bar", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.eao_benchmark.EAOBenchmark._calculate_eao": [[176, 254], ["sum", "max", "len", "zip", "utils.calculate_expected_overlap", "numpy.zeros", "numpy.logical_not", "video.load_tracker", "gt_traj_length.append", "video_names.append", "all_overlaps.append", "all_failures.append", "len", "numpy.ones", "numpy.ones", "len", "numpy.isnan", "numpy.sum", "numpy.sum", "len", "utils.calculate_accuracy", "utils.calculate_failures", "len", "len", "points.insert", "range", "min", "eao_benchmark.EAOBenchmark.dataset[].select_tag", "len", "len", "sum", "numpy.array", "numpy.array", "eao_benchmark.EAOBenchmark.dataset[].select_tag", "eao_benchmark.EAOBenchmark.dataset[].select_tag", "len", "len", "numpy.isnan", "len", "sum", "len", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_expected_overlap", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_tracker", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_accuracy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_failures", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTVideo.select_tag", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTVideo.select_tag", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTVideo.select_tag"], ["", "", "def", "_calculate_eao", "(", "self", ",", "tracker_name", ",", "tags", ")", ":", "\n", "        ", "all_overlaps", "=", "[", "]", "\n", "all_failures", "=", "[", "]", "\n", "video_names", "=", "[", "]", "\n", "gt_traj_length", "=", "[", "]", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "            ", "gt_traj", "=", "video", ".", "gt_traj", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                ", "tracker_trajs", "=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "tracker_trajs", "=", "video", ".", "pred_trajs", "[", "tracker_name", "]", "\n", "", "for", "tracker_traj", "in", "tracker_trajs", ":", "\n", "                ", "gt_traj_length", ".", "append", "(", "len", "(", "gt_traj", ")", ")", "\n", "video_names", ".", "append", "(", "video", ".", "name", ")", "\n", "overlaps", "=", "calculate_accuracy", "(", "tracker_traj", ",", "\n", "gt_traj", ",", "\n", "bound", "=", "(", "video", ".", "width", "-", "1", ",", "\n", "video", ".", "height", "-", "1", ")", ")", "[", "1", "]", "\n", "failures", "=", "calculate_failures", "(", "tracker_traj", ")", "[", "1", "]", "\n", "all_overlaps", ".", "append", "(", "overlaps", ")", "\n", "all_failures", ".", "append", "(", "failures", ")", "\n", "", "", "fragment_num", "=", "sum", "(", "[", "len", "(", "x", ")", "+", "1", "for", "x", "in", "all_failures", "]", ")", "\n", "max_len", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "all_overlaps", "]", ")", "\n", "seq_weight", "=", "1", "/", "len", "(", "tracker_trajs", ")", "\n", "\n", "eao", "=", "{", "}", "\n", "for", "tag", "in", "tags", ":", "\n", "# prepare segments", "\n", "            ", "fweights", "=", "np", ".", "ones", "(", "(", "fragment_num", ")", ")", "*", "np", ".", "nan", "\n", "fragments", "=", "np", ".", "ones", "(", "(", "fragment_num", ",", "max_len", ")", ")", "*", "np", ".", "nan", "\n", "seg_counter", "=", "0", "\n", "for", "name", ",", "traj_len", ",", "failures", ",", "overlaps", "in", "zip", "(", "\n", "video_names", ",", "gt_traj_length", ",", "all_failures", ",", "all_overlaps", ")", ":", "\n", "                ", "if", "len", "(", "failures", ")", ">", "0", ":", "\n", "                    ", "points", "=", "[", "\n", "x", "+", "self", ".", "skipping", "for", "x", "in", "failures", "\n", "if", "x", "+", "self", ".", "skipping", "<=", "len", "(", "overlaps", ")", "\n", "]", "\n", "points", ".", "insert", "(", "0", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", ")", ":", "\n", "                        ", "if", "i", "!=", "len", "(", "points", ")", "-", "1", ":", "\n", "                            ", "fragment", "=", "np", ".", "array", "(", "\n", "overlaps", "[", "points", "[", "i", "]", ":", "points", "[", "i", "+", "1", "]", "+", "1", "]", ")", "\n", "fragments", "[", "seg_counter", ",", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                            ", "fragment", "=", "np", ".", "array", "(", "overlaps", "[", "points", "[", "i", "]", ":", "]", ")", "\n", "", "fragment", "[", "np", ".", "isnan", "(", "fragment", ")", "]", "=", "0", "\n", "fragments", "[", "seg_counter", ",", ":", "len", "(", "fragment", ")", "]", "=", "fragment", "\n", "if", "i", "!=", "len", "(", "points", ")", "-", "1", ":", "\n", "                            ", "tag_value", "=", "self", ".", "dataset", "[", "name", "]", ".", "select_tag", "(", "\n", "tag", ",", "points", "[", "i", "]", ",", "points", "[", "i", "+", "1", "]", "+", "1", ")", "\n", "w", "=", "sum", "(", "tag_value", ")", "/", "(", "points", "[", "i", "+", "1", "]", "-", "points", "[", "i", "]", "+", "1", ")", "\n", "fweights", "[", "seg_counter", "]", "=", "seq_weight", "*", "w", "\n", "", "else", ":", "\n", "                            ", "tag_value", "=", "self", ".", "dataset", "[", "name", "]", ".", "select_tag", "(", "\n", "tag", ",", "points", "[", "i", "]", ",", "len", "(", "overlaps", ")", ")", "\n", "w", "=", "sum", "(", "tag_value", ")", "/", "(", "traj_len", "-", "points", "[", "i", "]", "+", "1e-16", ")", "\n", "fweights", "[", "seg_counter", "]", "=", "seq_weight", "*", "w", "\n", "", "seg_counter", "+=", "1", "\n", "", "", "else", ":", "\n", "# no failure", "\n", "                    ", "max_idx", "=", "min", "(", "len", "(", "overlaps", ")", ",", "max_len", ")", "\n", "fragments", "[", "seg_counter", ",", ":", "max_idx", "]", "=", "overlaps", "[", ":", "max_idx", "]", "\n", "tag_value", "=", "self", ".", "dataset", "[", "name", "]", ".", "select_tag", "(", "tag", ",", "0", ",", "max_idx", ")", "\n", "w", "=", "sum", "(", "tag_value", ")", "/", "max_idx", "\n", "fweights", "[", "seg_counter", "]", "=", "seq_weight", "*", "w", "\n", "seg_counter", "+=", "1", "\n", "\n", "", "", "expected_overlaps", "=", "calculate_expected_overlap", "(", "fragments", ",", "fweights", ")", "\n", "# caculate eao", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "len", "(", "expected_overlaps", ")", ")", ")", "\n", "weight", "[", "self", ".", "low", "-", "1", ":", "self", ".", "high", "-", "1", "+", "1", "]", "=", "1", "\n", "is_valid", "=", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "expected_overlaps", ")", ")", "\n", "eao_", "=", "np", ".", "sum", "(", "expected_overlaps", "[", "is_valid", "]", "*", "\n", "weight", "[", "is_valid", "]", ")", "/", "np", ".", "sum", "(", "weight", "[", "is_valid", "]", ")", "\n", "eao", "[", "tag", "]", "=", "eao_", "\n", "", "return", "eao", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.__init__": [[8, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            result_path:\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.eval": [[15, 37], ["isinstance", "f1_benchmark.F1Benchmark._cal_precision_reall"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark._cal_precision_reall"], ["", "def", "eval", "(", "self", ",", "eval_trackers", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            eval_tags: list of tag\n            eval_trackers: list of tracker name\n        Returns:\n            eao: dict of results\n        \"\"\"", "\n", "if", "eval_trackers", "is", "None", ":", "\n", "            ", "eval_trackers", "=", "self", ".", "dataset", ".", "tracker_names", "\n", "", "if", "isinstance", "(", "eval_trackers", ",", "str", ")", ":", "\n", "            ", "eval_trackers", "=", "[", "eval_trackers", "]", "\n", "\n", "", "ret", "=", "{", "}", "\n", "for", "tracker_name", "in", "eval_trackers", ":", "\n", "            ", "precision", ",", "recall", ",", "f1", "=", "self", ".", "_cal_precision_reall", "(", "tracker_name", ")", "\n", "ret", "[", "tracker_name", "]", "=", "{", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"f1\"", ":", "f1", "\n", "}", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark._cal_precision_reall": [[38, 69], ["numpy.array", "range", "utils.determine_thresholds", "len", "sum", "utils.calculate_f1", "video.load_tracker", "utils.calculate_accuracy", "video.load_tracker", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.misc.determine_thresholds", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_f1", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_tracker", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.statistics.calculate_accuracy", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_tracker"], ["", "def", "_cal_precision_reall", "(", "self", ",", "tracker_name", ")", ":", "\n", "        ", "score", "=", "[", "]", "\n", "# for i in range(len(self.dataset)):", "\n", "#     video = self.dataset[i]", "\n", "for", "video", "in", "self", ".", "dataset", ":", "\n", "            ", "if", "tracker_name", "not", "in", "video", ".", "confidence", ":", "\n", "                ", "score", "+=", "video", ".", "load_tracker", "(", "self", ".", "dataset", ".", "tracker_path", ",", "\n", "tracker_name", ",", "False", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "score", "+=", "video", ".", "confidence", "[", "tracker_name", "]", "\n", "", "", "score", "=", "np", ".", "array", "(", "score", ")", "\n", "thresholds", "=", "determine_thresholds", "(", "score", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "precision", "=", "{", "}", "\n", "recall", "=", "{", "}", "\n", "f1", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ":", "\n", "            ", "video", "=", "self", ".", "dataset", "[", "i", "]", "\n", "gt_traj", "=", "video", ".", "gt_traj", "\n", "N", "=", "sum", "(", "[", "1", "for", "x", "in", "gt_traj", "if", "len", "(", "x", ")", ">", "1", "]", ")", "\n", "if", "tracker_name", "not", "in", "video", ".", "pred_trajs", ":", "\n", "                ", "tracker_traj", ",", "score", "=", "video", ".", "load_tracker", "(", "\n", "self", ".", "dataset", ".", "tracker_path", ",", "tracker_name", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "tracker_traj", "=", "video", ".", "pred_trajs", "[", "tracker_name", "]", "\n", "score", "=", "video", ".", "confidence", "[", "tracker_name", "]", "\n", "", "overlaps", "=", "calculate_accuracy", "(", "tracker_traj", ",", "gt_traj", ",", "bound", "=", "(", "video", ".", "width", ",", "video", ".", "height", ")", ")", "[", "1", "]", "\n", "f1", "[", "video", ".", "name", "]", ",", "precision", "[", "video", ".", "name", "]", ",", "recall", "[", "video", ".", "name", "]", "=", "calculate_f1", "(", "overlaps", ",", "score", ",", "(", "video", ".", "width", ",", "video", ".", "height", ")", ",", "thresholds", ",", "N", ")", "\n", "", "return", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.evaluation.f1_benchmark.F1Benchmark.show_result": [[70, 150], ["result.items", "max", "header.format.format.format", "print", "print", "print", "print", "numpy.mean", "numpy.mean", "numpy.argmax", "sorted", "len", "print", "print", "result.keys", "print", "print", "print", "print", "print", "list", "print", "list", "list", "sorted_tracker.items", "max", "str", "str", "formatter.format", "len", "[].keys", "result.keys", "print", "ret[].values", "ret[].values", "len", "len", "len", "numpy.argmax", "len", "len", "result.keys"], "methods", ["None"], ["", "def", "show_result", "(", "self", ",", "result", ",", "show_video_level", "=", "False", ",", "\n", "helight_threshold", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"pretty print result\n        Args:\n            result: returned dict from function eval\n        \"\"\"", "\n", "# sort tracker according to f1", "\n", "sorted_tracker", "=", "{", "}", "\n", "for", "tracker_name", ",", "ret", "in", "result", ".", "items", "(", ")", ":", "\n", "            ", "precision", "=", "np", ".", "mean", "(", "list", "(", "ret", "[", "'precision'", "]", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "recall", "=", "np", ".", "mean", "(", "list", "(", "ret", "[", "'recall'", "]", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "max_idx", "=", "np", ".", "argmax", "(", "f1", ")", "\n", "sorted_tracker", "[", "tracker_name", "]", "=", "(", "precision", "[", "max_idx", "]", ",", "recall", "[", "max_idx", "]", ",", "\n", "f1", "[", "max_idx", "]", ")", "\n", "", "sorted_tracker_", "=", "sorted", "(", "sorted_tracker", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "2", "]", ",", "\n", "reverse", "=", "True", ")", "[", ":", "20", "]", "\n", "tracker_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "sorted_tracker_", "]", "\n", "\n", "tracker_name_len", "=", "max", "(", "(", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "result", ".", "keys", "(", ")", "]", ")", "+", "2", ")", ",", "12", ")", "\n", "header", "=", "\"|{:^\"", "+", "str", "(", "tracker_name_len", ")", "+", "\"}|{:^11}|{:^8}|{:^7}|\"", "\n", "header", "=", "header", ".", "format", "(", "'Tracker Name'", ",", "'Precision'", ",", "'Recall'", ",", "'F1'", ")", "\n", "bar", "=", "'-'", "*", "len", "(", "header", ")", "\n", "formatter", "=", "\"|{:^\"", "+", "str", "(", "\n", "tracker_name_len", ")", "+", "\"}|{:^11.3f}|{:^8.3f}|{:^7.3f}|\"", "\n", "print", "(", "bar", ")", "\n", "print", "(", "header", ")", "\n", "print", "(", "bar", ")", "\n", "# for tracker_name, ret in result.items():", "\n", "#     precision = np.mean(list(ret['precision'].values()), axis=0)", "\n", "#     recall = np.mean(list(ret['recall'].values()), axis=0)", "\n", "#     f1 = 2 * precision * recall / (precision + recall)", "\n", "#     max_idx = np.argmax(f1)", "\n", "for", "tracker_name", "in", "tracker_names", ":", "\n", "            ", "precision", "=", "sorted_tracker", "[", "tracker_name", "]", "[", "0", "]", "\n", "recall", "=", "sorted_tracker", "[", "tracker_name", "]", "[", "1", "]", "\n", "f1", "=", "sorted_tracker", "[", "tracker_name", "]", "[", "2", "]", "\n", "print", "(", "formatter", ".", "format", "(", "tracker_name", ",", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "", "print", "(", "bar", ")", "\n", "\n", "if", "show_video_level", "and", "len", "(", "result", ")", "<", "10", ":", "\n", "            ", "print", "(", "'\\n\\n'", ")", "\n", "header1", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Tracker name\"", ")", "\n", "header2", "=", "\"|{:^14}|\"", ".", "format", "(", "\"Video name\"", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "# col_len = max(20, len(tracker_name))", "\n", "                ", "header1", "+=", "(", "\"{:^28}|\"", ")", ".", "format", "(", "tracker_name", ")", "\n", "header2", "+=", "\"{:^11}|{:^8}|{:^7}|\"", ".", "format", "(", "\"Precision\"", ",", "\"Recall\"", ",", "\n", "\"F1\"", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header1", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "print", "(", "header2", ")", "\n", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "videos", "=", "list", "(", "result", "[", "tracker_name", "]", "[", "'precision'", "]", ".", "keys", "(", ")", ")", "\n", "for", "video", "in", "videos", ":", "\n", "                ", "row", "=", "\"|{:^14}|\"", ".", "format", "(", "video", ")", "\n", "for", "tracker_name", "in", "result", ".", "keys", "(", ")", ":", "\n", "                    ", "precision", "=", "result", "[", "tracker_name", "]", "[", "'precision'", "]", "[", "video", "]", "\n", "recall", "=", "result", "[", "tracker_name", "]", "[", "'recall'", "]", "[", "video", "]", "\n", "f1", "=", "result", "[", "tracker_name", "]", "[", "'f1'", "]", "[", "video", "]", "\n", "max_idx", "=", "np", ".", "argmax", "(", "f1", ")", "\n", "precision_str", "=", "\"{:^11.3f}\"", ".", "format", "(", "precision", "[", "max_idx", "]", ")", "\n", "if", "precision", "[", "max_idx", "]", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{precision_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "precision_str", "+", "'|'", "\n", "", "recall_str", "=", "\"{:^8.3f}\"", ".", "format", "(", "recall", "[", "max_idx", "]", ")", "\n", "if", "recall", "[", "max_idx", "]", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{recall_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "recall_str", "+", "'|'", "\n", "", "f1_str", "=", "\"{:^7.3f}\"", ".", "format", "(", "f1", "[", "max_idx", "]", ")", "\n", "if", "f1", "[", "max_idx", "]", "<", "helight_threshold", ":", "\n", "                        ", "row", "+=", "f'{Fore.RED}{f1_str}{Style.RESET_ALL}|'", "\n", "", "else", ":", "\n", "                        ", "row", "+=", "f1_str", "+", "'|'", "\n", "", "", "print", "(", "row", ")", "\n", "", "print", "(", "'-'", "*", "len", "(", "header1", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.uav123.UAV123.__init__": [[23, 44], ["object.__init__", "version.upper", "uav123.UAV123._check_integrity", "os.path.join", "sorted", "version.upper", "os.path.dirname", "open", "json.load", "glob.glob", "os.path.join", "os.path.join", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity"], ["\n", "extra_hyper_params", "=", "dict", "(", "\n", "device_num", "=", "1", ",", "\n", "data_root", "=", "\"datasets/UAV123\"", ",", "\n", "subsets", "=", "[", "\"UAV123\"", "]", ",", "# (UAV123|UAV20L)", "\n", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UAVTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.uav123.UAV123.__getitem__": [[45, 75], ["isinstance", "numpy.loadtxt", "uav123.UAV123.seq_names.index", "os.path.join", "len", "len", "Exception", "range"], "methods", ["None"], ["            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentUAV123", "(", "root_dir", ",", "\n", "version", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.uav123.UAV123.__len__": [[76, 78], ["len"], "methods", ["None"], ["                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.uav123.UAV123._check_integrity": [[79, 97], ["os.path.join", "list", "os.path.dirname", "open", "json.load", "seq_metas[].keys", "os.path.isdir", "Exception", "len", "os.path.join", "os.listdir", "os.path.isdir", "print"], "methods", ["None"], ["args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"success_score\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT.__init__": [[32, 89], ["object.__init__", "subset.split.split.split", "set().issubset", "sorted", "os.path.join", "lasot.LaSOT._ensure_cache", "sorted", "glob.glob", "os.path.join", "os.path.basename", "os.path.dirname", "open", "json.load", "lasot.LaSOT.seq_names.extend", "set", "os.path.join", "os.path.dirname", "os.path.dirname", "LaSOT.data_dict[].items", "LaSOT.data_dict[].items"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._ensure_cache"], ["subsets", "=", "[", "\"test\"", "]", ",", "# (train|test|train_test)", "\n", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LaSOTTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentLaSOT", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT.__getitem__": [[91, 123], ["isinstance", "lasot.LaSOT._fetch_meta"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._fetch_meta"], ["\"overall\"", "]", "[", "\"success_score\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentLaSOT", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n", "\n", "", "", "LaSOTTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "\n", "LaSOTTester", ".", "default_hyper_params", ")", "\n", "LaSOTTester", ".", "default_hyper_params", ".", "update", "(", "LaSOTTester", ".", "extra_hyper_params", ")", "\n", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT.__len__": [[124, 126], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT._check_integrity": [[127, 140], ["os.listdir", "os.path.isdir", "Exception", "len", "os.path.join", "os.path.isdir", "print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT._fetch_meta": [[141, 156], ["os.path.dirname", "os.path.join", "os.path.join", "numpy.loadtxt", "open", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT._ensure_cache": [[157, 191], ["lasot.LaSOT._check_cache_for_current_subset", "lasot.LaSOT._get_cache_path", "lasot.LaSOT._build_cache_for_current_subset", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "all", "loguru.logger.info", "lasot.LaSOT._load_cache_for_current_subset", "lasot.LaSOT._check_cache_for_current_subset", "loguru.logger.info", "loguru.logger.info", "os.path.isfile", "lasot.LaSOT.cache_path.values"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._check_cache_for_current_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._get_cache_path", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._build_cache_for_current_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._load_cache_for_current_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._check_cache_for_current_subset"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT._get_cache_path": [[192, 206], ["any", "loguru.logger.info", "os.path.join", "os.path.isfile", "cache_path.values"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT._check_cache_for_current_subset": [[207, 213], ["all", "set", "set", "LaSOT.data_dict[].keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT._build_cache_for_current_subset": [[214, 233], ["loguru.logger.info", "tqdm.tqdm.tqdm", "loguru.logger.info", "os.path.join", "lasot.LaSOT.load_single_sequence", "dict", "open", "pickle.dump", "seq_name.rfind"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet.load_single_sequence"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT._load_cache_for_current_subset": [[234, 243], ["os.path.exists", "loguru.logger.info", "open", "pickle.load"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.lasot.LaSOT.load_single_sequence": [[244, 256], ["sorted", "numpy.loadtxt", "glob.glob", "os.path.join", "len", "len", "lasot.LaSOT._fetch_meta", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._fetch_meta"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dtb70.DTB70.__init__": [[20, 29], ["object.__init__", "dtb70.DTB70._check_integrity", "sorted", "glob.glob", "os.path.dirname", "os.path.basename", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity"], ["def", "__init__", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "super", "(", "DTB70", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "_check_integrity", "(", "root_dir", ")", "\n", "\n", "self", ".", "anno_files", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'*/groundtruth_rect.txt'", ")", ")", ")", "\n", "self", ".", "seq_dirs", "=", "[", "os", ".", "path", ".", "dirname", "(", "f", ")", "for", "f", "in", "self", ".", "anno_files", "]", "\n", "self", ".", "seq_names", "=", "[", "os", ".", "path", ".", "basename", "(", "d", ")", "for", "d", "in", "self", ".", "seq_dirs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dtb70.DTB70.__getitem__": [[30, 51], ["isinstance", "sorted", "numpy.loadtxt", "dtb70.DTB70.seq_names.index", "glob.glob", "len", "len", "Exception", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "r\"\"\"        \n        Args:\n            index (integer or string): Index or name of a sequence.\n        \n        Returns:\n            tuple: (img_files, anno), where ``img_files`` is a list of\n                file names and ``anno`` is a N x 4 (rectangles) numpy array.\n        \"\"\"", "\n", "if", "isinstance", "(", "index", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "if", "not", "index", "in", "self", ".", "seq_names", ":", "\n", "                ", "raise", "Exception", "(", "'Sequence {} not found.'", ".", "format", "(", "index", ")", ")", "\n", "", "index", "=", "self", ".", "seq_names", ".", "index", "(", "index", ")", "\n", "\n", "", "img_files", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "seq_dirs", "[", "index", "]", ",", "'img/*.jpg'", ")", ")", ")", "\n", "anno", "=", "np", ".", "loadtxt", "(", "self", ".", "anno_files", "[", "index", "]", ",", "delimiter", "=", "','", ")", "\n", "assert", "len", "(", "img_files", ")", "==", "len", "(", "anno", ")", "\n", "assert", "anno", ".", "shape", "[", "1", "]", "==", "4", "\n", "\n", "return", "img_files", ",", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dtb70.DTB70.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seq_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dtb70.DTB70._check_integrity": [[55, 68], ["os.listdir", "os.path.isdir", "Exception", "len", "os.path.join", "os.path.isdir", "print"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "seq_names", "=", "os", ".", "listdir", "(", "root_dir", ")", "\n", "seq_names", "=", "[", "n", "for", "n", "in", "seq_names", "if", "not", "n", "[", "0", "]", "==", "'.'", "]", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "root_dir", ")", "and", "len", "(", "seq_names", ")", ">", "0", ":", "\n", "# check each sequence folder", "\n", "            ", "for", "seq_name", "in", "seq_names", ":", "\n", "                ", "seq_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "seq_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "seq_dir", ")", ":", "\n", "                    ", "print", "(", "'Warning: sequence %s not exists.'", "%", "seq_name", ")", "\n", "", "", "", "else", ":", "\n", "# dataset not exists", "\n", "            ", "raise", "Exception", "(", "'Dataset not found or corrupted.'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.nfs.NfS.__init__": [[22, 35], ["object.__init__", "nfs.NfS._check_integrity", "sorted", "glob.glob", "os.path.join", "os.path.join", "os.path.basename", "os.path.dirname", "zip"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "fps", "=", "240", ")", ":", "\n", "        ", "super", "(", "NfS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "fps", "in", "[", "30", ",", "240", "]", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "_check_integrity", "(", "root_dir", ")", "\n", "\n", "self", ".", "anno_files", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'*/%d/*.txt'", "%", "fps", ")", ")", ")", "\n", "self", ".", "seq_names", "=", "[", "os", ".", "path", ".", "basename", "(", "f", ")", "[", ":", "-", "4", "]", "for", "f", "in", "self", ".", "anno_files", "]", "\n", "self", ".", "seq_dirs", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "f", ")", ",", "n", ")", "\n", "for", "f", ",", "n", "in", "zip", "(", "self", ".", "anno_files", ",", "self", ".", "seq_names", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.nfs.NfS.__getitem__": [[37, 69], ["isinstance", "sorted", "numpy.loadtxt", "anno[].astype", "nfs.NfS.seq_names.index", "glob.glob", "abs", "len", "len", "Exception", "os.path.join", "len", "len", "abs", "min", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "r\"\"\"        \n        Args:\n            index (integer or string): Index or name of a sequence.\n        \n        Returns:\n            tuple: (img_files, anno), where ``img_files`` is a list of\n                file names and ``anno`` is a N x 4 (rectangles) numpy array.\n        \"\"\"", "\n", "if", "isinstance", "(", "index", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "if", "not", "index", "in", "self", ".", "seq_names", ":", "\n", "                ", "raise", "Exception", "(", "'Sequence {} not found.'", ".", "format", "(", "index", ")", ")", "\n", "", "index", "=", "self", ".", "seq_names", ".", "index", "(", "index", ")", "\n", "\n", "", "img_files", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "seq_dirs", "[", "index", "]", ",", "'*.jpg'", ")", ")", ")", "\n", "anno", "=", "np", ".", "loadtxt", "(", "self", ".", "anno_files", "[", "index", "]", ",", "dtype", "=", "str", ")", "\n", "anno", "=", "anno", "[", ":", ",", "1", ":", "5", "]", ".", "astype", "(", "float", ")", "# [left, top, right, bottom]", "\n", "anno", "[", ":", ",", "2", ":", "]", "-=", "anno", "[", ":", ",", ":", "2", "]", "# [left, top, width, height]", "\n", "\n", "# handle inconsistent lengths", "\n", "if", "not", "len", "(", "img_files", ")", "==", "len", "(", "anno", ")", ":", "\n", "            ", "if", "abs", "(", "len", "(", "anno", ")", "/", "len", "(", "img_files", ")", "-", "8", ")", "<", "1", ":", "\n", "                ", "anno", "=", "anno", "[", "0", ":", ":", "8", ",", ":", "]", "\n", "", "diff", "=", "abs", "(", "len", "(", "img_files", ")", "-", "len", "(", "anno", ")", ")", "\n", "if", "diff", ">", "0", "and", "diff", "<=", "1", ":", "\n", "                ", "n", "=", "min", "(", "len", "(", "img_files", ")", ",", "len", "(", "anno", ")", ")", "\n", "anno", "=", "anno", "[", ":", "n", "]", "\n", "img_files", "=", "img_files", "[", ":", "n", "]", "\n", "", "", "assert", "len", "(", "img_files", ")", "==", "len", "(", "anno", ")", "\n", "\n", "return", "img_files", ",", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.nfs.NfS.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seq_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.nfs.NfS._check_integrity": [[73, 86], ["os.listdir", "os.path.isdir", "Exception", "len", "os.path.join", "os.path.isdir", "print"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "seq_names", "=", "os", ".", "listdir", "(", "root_dir", ")", "\n", "seq_names", "=", "[", "n", "for", "n", "in", "seq_names", "if", "not", "n", "[", "0", "]", "==", "'.'", "]", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "root_dir", ")", "and", "len", "(", "seq_names", ")", ">", "0", ":", "\n", "# check each sequence folder", "\n", "            ", "for", "seq_name", "in", "seq_names", ":", "\n", "                ", "seq_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "seq_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "seq_dir", ")", ":", "\n", "                    ", "print", "(", "'Warning: sequence %s not exists.'", "%", "seq_name", ")", "\n", "", "", "", "else", ":", "\n", "# dataset not exists", "\n", "            ", "raise", "Exception", "(", "'Dataset not found or corrupted.'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k.__init__": [[34, 64], ["object.__init__", "got10k.GOT10k._ensure_cache", "os.path.join", "got10k.GOT10k._check_integrity", "open", "f.read().strip().split", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._ensure_cache", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], ["\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GOT10kTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentGOT10k", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k.__getitem__": [[65, 98], ["isinstance", "anno.reshape.reshape.reshape", "loguru.logger.error", "loguru.logger.error", "Exception", "len", "len", "len"], "methods", ["None"], ["# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"ao\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "self", ".", "set_random_seed", "(", ")", "\n", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k.__len__": [[99, 101], ["len"], "methods", ["None"], ["slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._check_integrity": [[102, 120], ["os.path.isfile", "os.path.join", "Exception", "open", "f.read().strip().split", "os.path.join", "os.path.isdir", "loguru.logger.error", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], ["pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentGOT10k", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._fetch_meta": [[121, 135], ["os.path.join", "open", "line.split", "numpy.loadtxt", "f.read().strip().split", "os.path.join", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], ["", "", "GOT10kTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "\n", "GOT10kTester", ".", "default_hyper_params", ")", "\n", "GOT10kTester", ".", "default_hyper_params", ".", "update", "(", "GOT10kTester", ".", "extra_hyper_params", ")", "\n", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._ensure_cache": [[136, 169], ["got10k.GOT10k._check_cache_for_current_subset", "got10k.GOT10k._get_cache_path", "got10k.GOT10k._build_cache_for_current_subset", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "os.path.isfile", "loguru.logger.info", "got10k.GOT10k._load_cache_for_current_subset", "got10k.GOT10k._check_cache_for_current_subset", "loguru.logger.info", "loguru.logger.info"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._check_cache_for_current_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._get_cache_path", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._build_cache_for_current_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._load_cache_for_current_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._check_cache_for_current_subset"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._check_cache_for_current_subset": [[170, 176], ["set", "set", "GOT10k.data_dict[].keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._get_cache_path": [[177, 187], ["loguru.logger.info", "os.path.join", "os.path.isfile"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._load_cache_for_current_subset": [[188, 195], ["os.path.exists", "loguru.logger.info", "open", "pickle.load"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k._build_cache_for_current_subset": [[196, 213], ["loguru.logger.info", "tqdm.tqdm.tqdm", "loguru.logger.info", "os.path.join", "got10k.GOT10k.load_single_sequence", "dict", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet.load_single_sequence"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.got10k.GOT10k.load_single_sequence": [[214, 230], ["sorted", "numpy.loadtxt", "glob.glob", "os.path.join", "got10k.GOT10k._fetch_meta", "os.path.join", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._fetch_meta"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT.__init__": [[41, 68], ["object.__init__", "vot.VOT._check_integrity", "vot.VOT._download", "os.path.join", "open", "f.read().strip().split", "os.path.join", "os.path.join", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._download", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], ["\n", "\n", "extra_hyper_params", "=", "dict", "(", "\n", "device_num", "=", "1", ",", "\n", "data_root", "=", "CfgNode", "(", "\n", "dict", "(", "VOT2018", "=", "\"datasets/VOT/vot2018\"", ",", "\n", "VOT2019", "=", "\"datasets/VOT/vot2019\"", ")", ")", ",", "\n", "dataset_names", "=", "[", "\n", "\"VOT2018\"", ",", "\n", "]", ",", "\n", "video_name_list", "=", "[", "]", ",", "\n", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            parent config, (e.g. model / pipeline / tester)\n        pipeline: PipelineBase\n            pipeline to test\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT.__getitem__": [[70, 99], ["isinstance", "sorted", "numpy.loadtxt", "vot.VOT.seq_names.index", "glob.glob", "len", "len", "len", "len", "vot.VOT._corner2rect", "vot.VOT._fetch_meta", "Exception", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._corner2rect", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._fetch_meta"], ["self", ".", "_state", "[", "'speed'", "]", "=", "-", "1", "\n", "\n", "", "def", "test", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Run test\n        \"\"\"", "\n", "# set dir", "\n", "self", ".", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "test_result_dict", "=", "None", "\n", "for", "dataset_name", "in", "self", ".", "_hyper_params", "[", "\"dataset_names\"", "]", ":", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "dataset_name", ")", "\n", "self", ".", "save_root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"baseline\"", ")", "\n", "ensure_dir", "(", "self", ".", "save_root_dir", ")", "\n", "# track videos", "\n", "self", ".", "run_tracker", "(", ")", "\n", "# evaluation", "\n", "test_result_dict", "=", "self", ".", "evaluation", "(", ")", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "run_tracker", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run self.pipeline on VOT\n        \"\"\"", "\n", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "logger", ".", "info", "(", "'runing test on devices {}'", ".", "format", "(", "all_devs", ")", ")", "\n", "vot_root", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT.__len__": [[100, 102], ["len"], "methods", ["None"], ["logger", ".", "info", "(", "'Using dataset %s at: %s'", "%", "(", "self", ".", "dataset_name", ",", "vot_root", ")", ")", "\n", "# setup dataset", "\n", "dataset", "=", "vot_benchmark", ".", "load_dataset", "(", "vot_root", ",", "self", ".", "dataset_name", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._download": [[103, 200], ["os.path.join", "print", "os.path.join", "os.path.isdir", "os.makedirs", "os.path.isfile", "range", "os.path.isfile", "print", "utils.ioutils.download", "open", "json.load", "hashlib.md5", "hashlib.md5.hexdigest", "f.read().strip().split.append", "seq[].keys", "os.path.join", "os.path.join", "open", "f.write", "os.path.join", "all", "range", "version.startswith", "open", "iter", "os.path.join", "seq_files.append", "utils.ioutils.download", "print", "os.makedirs", "utils.ioutils.extract", "str.join", "open", "f.read().strip().split", "print", "int", "version.startswith", "hashlib.md5.update", "seq_url.startswith", "print", "utils.ioutils.download", "os.path.isfile", "vot.VOT._download.md5"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.download", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.download", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.extract", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.download"], ["self", ".", "dataset", "=", "dataset", "\n", "keys", "=", "list", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"video_name_list\"", "]", ":", "\n", "            ", "keys", "=", "self", ".", "_hyper_params", "[", "\"video_name_list\"", "]", "\n", "", "nr_records", "=", "len", "(", "keys", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nr_records", ")", "\n", "mean_speed", "=", "-", "1", "\n", "total_lost", "=", "0", "\n", "speed_list", "=", "[", "]", "\n", "result_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "speed_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "# set worker", "\n", "if", "num_gpu", "==", "1", ":", "\n", "            ", "self", ".", "worker", "(", "keys", ",", "all_devs", "[", "0", "]", ",", "result_queue", ",", "speed_queue", ")", "\n", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "t", "=", "result_queue", ".", "get", "(", ")", "\n", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "total_lost", "+=", "t", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "nr_video", "=", "math", ".", "ceil", "(", "nr_records", "/", "num_gpu", ")", "\n", "procs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gpu", ")", ":", "\n", "                ", "start", "=", "i", "*", "nr_video", "\n", "end", "=", "min", "(", "start", "+", "nr_video", ",", "nr_records", ")", "\n", "split_records", "=", "keys", "[", "start", ":", "end", "]", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "split_records", ",", "all_devs", "[", "i", "]", ",", "\n", "result_queue", ",", "speed_queue", ")", ")", "\n", "print", "(", "'process:%d, start:%d, end:%d'", "%", "(", "i", ",", "start", ",", "end", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "t", "=", "result_queue", ".", "get", "(", ")", "\n", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "total_lost", "+=", "t", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "# print result", "\n", "", "", "mean_speed", "=", "float", "(", "np", ".", "mean", "(", "speed_list", ")", ")", "\n", "logger", ".", "info", "(", "'Total Lost: {:d}'", ".", "format", "(", "total_lost", ")", ")", "\n", "logger", ".", "info", "(", "'Mean Speed: {:.2f} FPS'", ".", "format", "(", "mean_speed", ")", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "mean_speed", "\n", "\n", "", "def", "worker", "(", "self", ",", "records", ",", "dev", ",", "result_queue", "=", "None", ",", "speed_queue", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Worker to run tracker on records\n\n        Arguments\n        ---------\n        records:\n            specific records, can be a subset of whole sequence\n        dev: torch.device object\n            target device\n        result_queue:\n            queue for result collecting\n        speed_queue:\n            queue for fps measurement collecting\n        \"\"\"", "\n", "self", ".", "set_random_seed", "(", ")", "\n", "tracker", "=", "self", ".", "_pipeline", "\n", "tracker", ".", "set_device", "(", "dev", ")", "\n", "for", "v_id", ",", "video", "in", "enumerate", "(", "records", ")", ":", "\n", "            ", "lost", ",", "speed", "=", "self", ".", "track_single_video", "(", "tracker", ",", "video", ",", "v_id", "=", "v_id", ")", "\n", "if", "result_queue", "is", "not", "None", ":", "\n", "                ", "result_queue", ".", "put_nowait", "(", "lost", ")", "\n", "", "if", "speed_queue", "is", "not", "None", ":", "\n", "                ", "speed_queue", ".", "put_nowait", "(", "speed", ")", "\n", "\n", "", "", "", "def", "evaluation", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Run evaluation & write result to csv file under self.tracker_dir\n        \"\"\"", "\n", "AccuracyRobustnessBenchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"AccuracyRobustnessBenchmark\"", ")", ".", "AccuracyRobustnessBenchmark", "\n", "EAOBenchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"EAOBenchmark\"", ")", ".", "EAOBenchmark", "\n", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "result_csv", "=", "\"%s.csv\"", "%", "tracker_name", "\n", "\n", "csv_to_write", "=", "open", "(", "join", "(", "self", ".", "tracker_dir", ",", "result_csv", ")", ",", "'a+'", ")", "\n", "dataset", "=", "vot_benchmark", ".", "VOTDataset", "(", "\n", "self", ".", "dataset_name", ",", "\n", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", ")", "\n", "dataset", ".", "set_tracker", "(", "self", ".", "tracker_dir", ",", "self", ".", "tracker_name", ")", "\n", "ar_benchmark", "=", "AccuracyRobustnessBenchmark", "(", "dataset", ")", "\n", "ar_result", "=", "{", "}", "\n", "ret", "=", "ar_benchmark", ".", "eval", "(", "self", ".", "tracker_name", ")", "\n", "ar_result", ".", "update", "(", "ret", ")", "\n", "ar_benchmark", ".", "show_result", "(", "ar_result", ")", "\n", "benchmark", "=", "EAOBenchmark", "(", "dataset", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._check_integrity": [[201, 219], ["os.path.isfile", "os.path.join", "Exception", "open", "f.read().strip().split", "os.path.join", "os.path.isdir", "print", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], ["eao_result", "=", "{", "}", "\n", "ret", "=", "benchmark", ".", "eval", "(", "self", ".", "tracker_name", ")", "\n", "eao_result", ".", "update", "(", "ret", ")", "\n", "ar_benchmark", ".", "show_result", "(", "ar_result", ",", "\n", "eao_result", "=", "eao_result", ",", "\n", "show_video_level", "=", "False", ")", "\n", "self", ".", "write_result_to_csv", "(", "\n", "ar_result", ",", "\n", "eao_result", ",", "\n", "speed", "=", "self", ".", "_state", "[", "'speed'", "]", ",", "\n", "result_csv", "=", "csv_to_write", ",", "\n", ")", "\n", "csv_to_write", ".", "close", "(", ")", "\n", "eao", "=", "eao_result", "[", "self", ".", "tracker_name", "]", "[", "'all'", "]", "\n", "test_result_dict", "=", "dict", "(", ")", "\n", "test_result_dict", "[", "\"main_performance\"", "]", "=", "eao", "\n", "return", "test_result_dict", "\n", "\n", "", "def", "track_single_video", "(", "self", ",", "tracker", ",", "video", ",", "v_id", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._corner2rect": [[220, 240], ["numpy.mean", "numpy.mean", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.sqrt", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.array", "numpy.array"], "methods", ["None"], ["        ", "r\"\"\"\n        track frames in single video with VOT rules\n\n        Arguments\n        ---------\n        tracker: PipelineBase\n            pipeline\n        video: str\n            video name\n        v_id: int\n            video id\n        \"\"\"", "\n", "vot_overlap", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.utils.region\"", ",", "\n", "package", "=", "\"vot_overlap\"", ")", ".", "vot_overlap", "\n", "vot_float2str", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.utils.region\"", ",", "\n", "package", "=", "\"vot_float2str\"", ")", ".", "vot_float2str", "\n", "regions", "=", "[", "]", "\n", "video", "=", "self", ".", "dataset", "[", "video", "]", "\n", "image_files", ",", "gt", "=", "video", "[", "'image_files'", "]", ",", "video", "[", "'gt'", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._fetch_meta": [[241, 265], ["os.path.join", "os.path.isfile", "os.path.isfile", "meta.items", "glob.glob", "glob.glob", "os.path.basename", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "os.path.join", "os.path.join", "len", "numpy.pad", "os.path.basename.rfind", "len"], "methods", ["None"], ["start_frame", ",", "end_frame", ",", "lost_times", ",", "toc", "=", "0", ",", "len", "(", "image_files", ")", ",", "0", ",", "0", "\n", "track_num", "=", "0", "\n", "for", "f", ",", "image_file", "in", "enumerate", "(", "tqdm", "(", "image_files", ")", ")", ":", "\n", "            ", "im", "=", "vot_benchmark", ".", "get_img", "(", "image_file", ")", "\n", "im", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "tic", "=", "cv2", ".", "getTickCount", "(", ")", "\n", "if", "f", "==", "start_frame", ":", "# init", "\n", "                ", "cx", ",", "cy", ",", "w", ",", "h", "=", "vot_benchmark", ".", "get_axis_aligned_bbox", "(", "gt", "[", "f", "]", ")", "\n", "location", "=", "vot_benchmark", ".", "cxy_wh_2_rect", "(", "(", "cx", ",", "cy", ")", ",", "(", "w", ",", "h", ")", ")", "\n", "tracker", ".", "init", "(", "im", ",", "location", ")", "\n", "regions", ".", "append", "(", "1", "if", "'VOT'", "in", "self", ".", "dataset_name", "else", "gt", "[", "f", "]", ")", "\n", "gt_polygon", "=", "None", "\n", "pred_polygon", "=", "None", "\n", "", "elif", "f", ">", "start_frame", ":", "# tracking", "\n", "                ", "location", "=", "tracker", ".", "update", "(", "im", ")", "\n", "track_num", "+=", "1", "\n", "gt_polygon", "=", "(", "gt", "[", "f", "]", "[", "0", "]", ",", "gt", "[", "f", "]", "[", "1", "]", ",", "gt", "[", "f", "]", "[", "2", "]", ",", "gt", "[", "f", "]", "[", "3", "]", ",", "gt", "[", "f", "]", "[", "4", "]", ",", "\n", "gt", "[", "f", "]", "[", "5", "]", ",", "gt", "[", "f", "]", "[", "6", "]", ",", "gt", "[", "f", "]", "[", "7", "]", ")", "\n", "pred_polygon", "=", "(", "location", "[", "0", "]", ",", "location", "[", "1", "]", ",", "\n", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "location", "[", "1", "]", ",", "\n", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "\n", "location", "[", "1", "]", "+", "location", "[", "3", "]", ",", "location", "[", "0", "]", ",", "\n", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", "\n", "b_overlap", "=", "vot_overlap", "(", "gt_polygon", ",", "pred_polygon", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vid.ImageNetVID.__init__": [[28, 46], ["isinstance", "vid.ImageNetVID._cache_meta", "isinstance", "all", "Exception"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vid.ImageNetVID._cache_meta"], ["def", "__init__", "(", "self", ",", "\n", "root_dir", ",", "\n", "subset", "=", "(", "'train'", ",", "'val'", ")", ",", "\n", "cache_dir", "=", "'cache/imagenet_vid'", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "cache_dir", "=", "cache_dir", "\n", "if", "isinstance", "(", "subset", ",", "str", ")", ":", "\n", "            ", "assert", "subset", "in", "[", "'train'", ",", "'val'", "]", "\n", "self", ".", "subset", "=", "[", "subset", "]", "\n", "", "elif", "isinstance", "(", "subset", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "all", "(", "[", "s", "in", "[", "'train'", ",", "'val'", "]", "for", "s", "in", "subset", "]", ")", "\n", "self", ".", "subset", "=", "subset", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown subset'", ")", "\n", "\n", "# cache filenames and annotations to speed up training", "\n", "", "self", ".", "seq_dict", "=", "self", ".", "_cache_meta", "(", ")", "\n", "self", ".", "seq_names", "=", "[", "n", "for", "n", "in", "self", ".", "seq_dict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vid.ImageNetVID.__getitem__": [[47, 70], ["isinstance", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "r\"\"\"        \n        Args:\n            index (integer or string): Index or name of a sequence.\n        \n        Returns:\n            tuple: (img_files, anno), where ``img_files`` is a list of\n                file names and ``anno`` is a N x 4 (rectangles) numpy array.\n        \"\"\"", "\n", "if", "isinstance", "(", "index", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "seq_name", "=", "index", "\n", "", "else", ":", "\n", "            ", "seq_name", "=", "self", ".", "seq_names", "[", "index", "]", "\n", "\n", "# seq_dir, frames, anno_file = self.seq_dict[seq_name]", "\n", "# img_files = [os.path.join(", "\n", "#     seq_dir, '%06d.JPEG' % f) for f in frames]", "\n", "# anno = np.loadtxt(anno_file, delimiter=',')", "\n", "\n", "", "seq_dir", ",", "frames", ",", "anno", "=", "self", ".", "seq_dict", "[", "seq_name", "]", "\n", "img_files", "=", "[", "os", ".", "path", ".", "join", "(", "seq_dir", ",", "'%06d.JPEG'", "%", "f", ")", "for", "f", "in", "frames", "]", "\n", "\n", "return", "img_files", ",", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vid.ImageNetVID.__len__": [[71, 73], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seq_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vid.ImageNetVID._cache_meta": [[74, 176], ["os.path.join", "os.path.isfile", "print", "print", "collections.OrderedDict", "os.path.join", "enumerate", "print", "sorted", "sorted", "os.path.basename", "os.path.isdir", "os.makedirs", "sorted", "numpy.unique", "enumerate", "open", "pickle.dump", "open", "pickle.load", "glob.glob", "os.path.join", "glob.glob", "os.path.join", "print", "glob.glob", "xml.ElementTree().findall", "enumerate", "numpy.array", "pickle.load.update", "os.path.join", "os.path.join", "os.path.join", "s.split", "len", "xml.ElementTree", "obj.find", "frames.append", "numpy.array.append", "int", "s.split", "len", "int", "int", "int", "int", "obj.find", "obj.find", "obj.find", "obj.find", "obj.find"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "def", "_cache_meta", "(", "self", ")", ":", "\n", "# cache_file = os.path.join(self.cache_dir, 'seq_dict.json')", "\n", "        ", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_dir", ",", "'seq_dict.pkl'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "            ", "print", "(", "'ILSVRC-VID: Dataset already cached.'", ")", "\n", "# with open(cache_file) as f:", "\n", "#     seq_dict = json.load(f, object_pairs_hook=OrderedDict)", "\n", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "seq_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "seq_dict", "\n", "\n", "# image and annotation paths", "\n", "", "print", "(", "'Gather sequence paths...'", ")", "\n", "seq_dirs", "=", "[", "]", "\n", "anno_dirs", "=", "[", "]", "\n", "if", "'train'", "in", "self", ".", "subset", ":", "\n", "            ", "seq_dirs_", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\n", "'Data/VID/train/ILSVRC*/ILSVRC*'", ")", ")", ")", "\n", "anno_dirs_", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'Annotations/VID/train'", ",", "\n", "*", "s", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", "for", "s", "in", "seq_dirs_", "\n", "]", "\n", "seq_dirs", "+=", "seq_dirs_", "\n", "anno_dirs", "+=", "anno_dirs_", "\n", "", "if", "'val'", "in", "self", ".", "subset", ":", "\n", "            ", "seq_dirs_", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\n", "'Data/VID/val/ILSVRC2015_val_*'", ")", ")", ")", "\n", "anno_dirs_", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'Annotations/VID/val'", ",", "\n", "s", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "s", "in", "seq_dirs_", "\n", "]", "\n", "seq_dirs", "+=", "seq_dirs_", "\n", "anno_dirs", "+=", "anno_dirs_", "\n", "", "seq_names", "=", "[", "os", ".", "path", ".", "basename", "(", "s", ")", "for", "s", "in", "seq_dirs", "]", "\n", "\n", "# cache paths and annotations", "\n", "print", "(", "'Caching annotations to %s, '", "%", "self", ".", "cache_dir", "+", "'it may take a few minutes...'", ")", "\n", "seq_dict", "=", "OrderedDict", "(", ")", "\n", "cache_anno_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_dir", ",", "'anno'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cache_anno_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_anno_dir", ")", "\n", "\n", "", "for", "s", ",", "seq_name", "in", "enumerate", "(", "seq_names", ")", ":", "\n", "            ", "if", "s", "%", "100", "==", "0", "or", "s", "==", "len", "(", "seq_names", ")", "-", "1", ":", "\n", "                ", "print", "(", "'--Caching sequence %d/%d: %s'", "%", "(", "s", "+", "1", ",", "len", "(", "seq_names", ")", ",", "seq_name", ")", ")", "\n", "", "anno_files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "anno_dirs", "[", "s", "]", ",", "'*.xml'", ")", ")", ")", "\n", "objects", "=", "[", "\n", "ET", ".", "ElementTree", "(", "file", "=", "f", ")", ".", "findall", "(", "'object'", ")", "for", "f", "in", "anno_files", "\n", "]", "\n", "\n", "# find all track ids", "\n", "track_ids", ",", "counts", "=", "np", ".", "unique", "(", "[", "\n", "obj", ".", "find", "(", "'trackid'", ")", ".", "text", "for", "group", "in", "objects", "for", "obj", "in", "group", "\n", "]", ",", "\n", "return_counts", "=", "True", ")", "\n", "\n", "# fetch paths and annotations for each track id", "\n", "for", "t", ",", "track_id", "in", "enumerate", "(", "track_ids", ")", ":", "\n", "                ", "if", "counts", "[", "t", "]", "<", "2", ":", "\n", "                    ", "continue", "\n", "", "frames", "=", "[", "]", "\n", "anno", "=", "[", "]", "\n", "for", "f", ",", "group", "in", "enumerate", "(", "objects", ")", ":", "\n", "                    ", "for", "obj", "in", "group", ":", "\n", "                        ", "if", "not", "obj", ".", "find", "(", "'trackid'", ")", ".", "text", "==", "track_id", ":", "\n", "                            ", "continue", "\n", "", "frames", ".", "append", "(", "f", ")", "\n", "anno", ".", "append", "(", "[", "\n", "int", "(", "obj", ".", "find", "(", "'bndbox/xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "obj", ".", "find", "(", "'bndbox/ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "obj", ".", "find", "(", "'bndbox/xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "obj", ".", "find", "(", "'bndbox/ymax'", ")", ".", "text", ")", "\n", "]", ")", "\n", "", "", "anno", "=", "np", ".", "array", "(", "anno", ",", "dtype", "=", "int", ")", "\n", "anno", "[", ":", ",", "2", ":", "]", "-=", "anno", "[", ":", ",", ":", "2", "]", "-", "1", "\n", "\n", "# store annotations", "\n", "key", "=", "'%s.%d'", "%", "(", "seq_name", ",", "int", "(", "track_id", ")", ")", "\n", "# store directly into cache pickle", "\n", "# cache_anno_file = os.path.join(cache_anno_dir, key + '.txt')", "\n", "# np.savetxt(cache_anno_file, anno, fmt='%d', delimiter=',')", "\n", "\n", "# store paths", "\n", "# seq_dict.update([(key, [", "\n", "#     seq_dirs[s], frames, cache_anno_file])])", "\n", "# directly store anno instead of seperate nptxt (avoid I/O conflict)", "\n", "seq_dict", ".", "update", "(", "[", "(", "key", ",", "[", "seq_dirs", "[", "s", "]", ",", "frames", ",", "anno", "]", ")", "]", ")", "\n", "\n", "# store seq_dict", "\n", "# with open(cache_file, 'w') as f:", "\n", "#     json.dump(seq_dict, f)", "\n", "# serialize with pickle", "\n", "", "", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "seq_dict", ",", "f", ")", "\n", "\n", "", "return", "seq_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet.__init__": [[31, 77], ["object.__init__", "subset.startswith", "trackingnet.TrackingNet._check_integrity", "trackingnet.TrackingNet._ensure_cache", "sorted", "TrackingNet.data_dict[].items", "TrackingNet.data_dict[].items", "int", "range", "len", "subset.split"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._ensure_cache"], ["device_num", "=", "1", ",", "\n", "data_root", "=", "\"datasets/TrackingNet\"", ",", "\n", "subsets", "=", "[", "\"TEST\"", "]", ",", "# (val|test)", "\n", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TrackingNetTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentTrackingNet", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet.__getitem__": [[79, 114], ["isinstance"], "methods", ["None"], ["proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"ao\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentTrackingNet", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet.__len__": [[115, 117], ["len"], "methods", ["None"], ["report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._check_integrity": [[118, 127], ["os.path.join", "os.path.isdir", "Exception", "os.path.join"], "methods", ["None"], ["slicing_quantile", ",", "dev", ")", ")", "\n", "\n", "\n", "", "", "TrackingNetTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "\n", "TrackingNetTester", ".", "default_hyper_params", ")", "\n", "TrackingNetTester", ".", "default_hyper_params", ".", "update", "(", "\n", "TrackingNetTester", ".", "extra_hyper_params", ")", "\n", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._ensure_cache": [[128, 157], ["trackingnet.TrackingNet._get_cache_path_dict", "trackingnet.TrackingNet._check_cache_for_specific_subset", "trackingnet.TrackingNet._build_cache_for_specific_subset", "loguru.logger.info", "loguru.logger.info", "os.path.isfile", "loguru.logger.info", "trackingnet.TrackingNet._load_cache_for_specific_subset", "trackingnet.TrackingNet._check_cache_for_specific_subset", "loguru.logger.info", "loguru.logger.info"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._get_cache_path_dict", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._check_cache_for_specific_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._build_cache_for_specific_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._load_cache_for_specific_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._check_cache_for_specific_subset"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._check_cache_for_specific_subset": [[158, 170], ["all", "trackingnet.TrackingNet._get_seq_names_for_specific_subset", "set", "set"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._get_seq_names_for_specific_subset"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._get_cache_path_dict": [[171, 187], ["loguru.logger.info", "os.path.join", "os.path.join", "os.path.exists"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._load_cache_for_specific_subset": [[188, 193], ["os.path.exists", "open", "pickle.load"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._build_cache_for_specific_subset": [[195, 212], ["loguru.logger.info", "trackingnet.TrackingNet._get_seq_names_for_specific_subset", "tqdm.tqdm.tqdm", "loguru.logger.info", "trackingnet.TrackingNet.load_single_sequence", "dict", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._get_seq_names_for_specific_subset", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet.load_single_sequence"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet._get_seq_names_for_specific_subset": [[213, 219], ["os.path.join", "os.path.join", "glob.glob", "os.path.basename", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.trackingnet.TrackingNet.load_single_sequence": [[220, 243], ["os.path.join", "glob.glob", "sorted", "os.path.join", "numpy.loadtxt", "len", "len", "len", "int", "os.path.basename"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.tcolor128.TColor128.__init__": [[22, 36], ["object.__init__", "tcolor128.TColor128._check_integrity", "sorted", "tcolor128.TColor128._download", "glob.glob", "os.path.dirname", "os.path.basename", "os.path.join", "glob.glob", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._download"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "download", "=", "True", ")", ":", "\n", "        ", "super", "(", "TColor128", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "if", "download", ":", "\n", "            ", "self", ".", "_download", "(", "root_dir", ")", "\n", "", "self", ".", "_check_integrity", "(", "root_dir", ")", "\n", "\n", "self", ".", "anno_files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\n", "'*/*_gt.txt'", ")", ")", ")", "\n", "self", ".", "seq_dirs", "=", "[", "os", ".", "path", ".", "dirname", "(", "f", ")", "for", "f", "in", "self", ".", "anno_files", "]", "\n", "self", ".", "seq_names", "=", "[", "os", ".", "path", ".", "basename", "(", "d", ")", "for", "d", "in", "self", ".", "seq_dirs", "]", "\n", "# valid frame range for each sequence", "\n", "self", ".", "range_files", "=", "[", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "d", ",", "'*_frames.txt'", ")", ")", "[", "0", "]", "for", "d", "in", "self", ".", "seq_dirs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.tcolor128.TColor128.__getitem__": [[38, 65], ["isinstance", "numpy.loadtxt", "numpy.loadtxt", "tcolor128.TColor128.seq_names.index", "os.path.join", "len", "len", "Exception", "range"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "r\"\"\"        \n        Args:\n            index (integer or string): Index or name of a sequence.\n        \n        Returns:\n            tuple: (img_files, anno), where ``img_files`` is a list of\n                file names and ``anno`` is a N x 4 (rectangles) numpy array.\n        \"\"\"", "\n", "if", "isinstance", "(", "index", ",", "six", ".", "string_types", ")", ":", "\n", "            ", "if", "not", "index", "in", "self", ".", "seq_names", ":", "\n", "                ", "raise", "Exception", "(", "'Sequence {} not found.'", ".", "format", "(", "index", ")", ")", "\n", "", "index", "=", "self", ".", "seq_names", ".", "index", "(", "index", ")", "\n", "\n", "# load valid frame range", "\n", "", "frames", "=", "np", ".", "loadtxt", "(", "self", ".", "range_files", "[", "index", "]", ",", "dtype", "=", "int", ",", "delimiter", "=", "','", ")", "\n", "img_files", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "seq_dirs", "[", "index", "]", ",", "'img/%04d.jpg'", "%", "f", ")", "\n", "for", "f", "in", "range", "(", "frames", "[", "0", "]", ",", "frames", "[", "1", "]", "+", "1", ")", "\n", "]", "\n", "\n", "# load annotations", "\n", "anno", "=", "np", ".", "loadtxt", "(", "self", ".", "anno_files", "[", "index", "]", ",", "delimiter", "=", "','", ")", "\n", "assert", "len", "(", "img_files", ")", "==", "len", "(", "anno", ")", "\n", "assert", "anno", ".", "shape", "[", "1", "]", "==", "4", "\n", "\n", "return", "img_files", ",", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.tcolor128.TColor128.__len__": [[66, 68], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "seq_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.tcolor128.TColor128._download": [[69, 84], ["os.path.join", "print", "utils.ioutils.download", "print", "utils.ioutils.extract", "os.path.isdir", "os.makedirs", "len", "print", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.download", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.extract"], ["", "def", "_download", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "root_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "root_dir", ")", "\n", "", "elif", "len", "(", "os", ".", "listdir", "(", "root_dir", ")", ")", ">", "100", ":", "\n", "            ", "print", "(", "'Files already downloaded.'", ")", "\n", "return", "\n", "\n", "", "url", "=", "'http://www.dabi.temple.edu/~hbling/data/TColor-128/Temple-color-128.zip'", "\n", "zip_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'Temple-color-128.zip'", ")", "\n", "print", "(", "'Downloading to %s...'", "%", "zip_file", ")", "\n", "download", "(", "url", ",", "zip_file", ")", "\n", "print", "(", "'\\nExtracting to %s...'", "%", "root_dir", ")", "\n", "extract", "(", "zip_file", ",", "root_dir", ")", "\n", "\n", "return", "root_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.tcolor128.TColor128._check_integrity": [[85, 99], ["os.listdir", "os.path.isdir", "Exception", "len", "os.path.join", "os.path.isdir", "print"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "seq_names", "=", "os", ".", "listdir", "(", "root_dir", ")", "\n", "seq_names", "=", "[", "n", "for", "n", "in", "seq_names", "if", "not", "n", "[", "0", "]", "==", "'.'", "]", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "root_dir", ")", "and", "len", "(", "seq_names", ")", ">", "0", ":", "\n", "# check each sequence folder", "\n", "            ", "for", "seq_name", "in", "seq_names", ":", "\n", "                ", "seq_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "seq_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "seq_dir", ")", ":", "\n", "                    ", "print", "(", "'Warning: sequence %s not exists.'", "%", "seq_name", ")", "\n", "", "", "", "else", ":", "\n", "# dataset not exists", "\n", "            ", "raise", "Exception", "(", "'Dataset not found or corrupted. '", "+", "\n", "'You can use download=True to download it.'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB.__init__": [[72, 96], ["object.__init__", "otb.OTB._check_integrity", "sorted", "otb.OTB._filter_files", "otb.OTB._rename_seqs", "otb.OTB._download", "list", "os.path.dirname", "os.path.basename", "itertools.chain.from_iterable", "glob.glob", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._filter_files", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._rename_seqs", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._download"], ["", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"success_score\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB.__getitem__": [[97, 135], ["isinstance", "sorted", "otb.OTB.seq_names.index", "glob.glob", "seq_name.lower", "open", "numpy.loadtxt", "len", "len", "Exception", "os.path.join", "seq_name.lower", "io.StringIO", "seq_name.lower", "f.read().replace", "seq_name.lower", "seq_name.lower", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], ["        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentOTB", "(", "root_dir", ",", "\n", "version", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n", "\n", "", "", "OTBTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "OTBTester", ".", "default_hyper_params", ")", "\n", "OTBTester", ".", "default_hyper_params", ".", "update", "(", "OTBTester", ".", "extra_hyper_params", ")", "\n", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB.__len__": [[136, 138], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._filter_files": [[139, 149], ["open", "f.read().strip", "print", "filtered_files.append", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._rename_seqs": [[150, 161], ["enumerate", "seq_names.count", "renamed_seqs.append", "seq_names[].count", "renamed_seqs.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._download": [[162, 185], ["os.path.isdir", "os.makedirs", "all", "os.path.join", "os.path.isdir", "os.path.join", "print", "utils.ioutils.download", "print", "utils.ioutils.extract", "print", "os.path.isdir", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.download", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.extract"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.otb.OTB._check_integrity": [[186, 200], ["os.path.isdir", "Exception", "len", "os.path.join", "os.listdir", "os.path.isdir", "print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTVideo.__init__": [[29, 50], ["video.Video.__init__", "numpy.all().astype().tolist", "list", "vot.VOTVideo.tags.keys", "len", "vot.VOTVideo.tags.items", "numpy.all().astype", "len", "numpy.all", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "r\"\"\"\n    Tester to test the vot dataset, the result is saved as follows\n    exp_dir/logs/$dataset_name$/$tracker_name/\n                                    |-baseline/$video_name$/ folder of result files\n                                    |-eval_result.csv evaluation result file\n\n    Hyper-parameters\n    ----------------\n    device_num: int\n        number of gpu for test\n    data_root: dict\n        vot dataset root directory. dict(dataset_name: path_to_root)\n    dataset_names: str\n        daataset name (VOT2018|VOT2019)\n    video_name_list: list\n        the list of video name for test\n    \"\"\"", "\n", "\n", "extra_hyper_params", "=", "dict", "(", "\n", "device_num", "=", "1", ",", "\n", "data_root", "=", "CfgNode", "(", "\n", "dict", "(", "VOT2018", "=", "\"datasets/VOT/vot2018\"", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTVideo.select_tag": [[51, 55], ["None"], "methods", ["None"], ["VOT2019", "=", "\"datasets/VOT/vot2019\"", ")", ")", ",", "\n", "dataset_names", "=", "[", "\n", "\"VOT2018\"", ",", "\n", "]", ",", "\n", "video_name_list", "=", "[", "]", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTVideo.load_tracker": [[56, 87], ["isinstance", "glob.glob.glob", "os.path.join", "len", "x.split", "glob.glob.glob", "os.path.isdir", "open", "pred_traj.append", "list", "map", "f.readlines", "x.strip().split", "x.strip"], "methods", ["None"], [")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            parent config, (e.g. model / pipeline / tester)\n        pipeline: PipelineBase\n            pipeline to test\n        \"\"\"", "\n", "super", "(", "VOTTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "-", "1", "\n", "\n", "", "def", "test", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Run test\n        \"\"\"", "\n", "# set dir", "\n", "self", ".", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "test_result_dict", "=", "None", "\n", "for", "dataset_name", "in", "self", ".", "_hyper_params", "[", "\"dataset_names\"", "]", ":", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "dataset_name", ")", "\n", "self", ".", "save_root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"baseline\"", ")", "\n", "ensure_dir", "(", "self", ".", "save_root_dir", ")", "\n", "# track videos", "\n", "self", ".", "run_tracker", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTDataset.__init__": [[96, 124], ["dataset.Dataset.__init__", "tqdm.tqdm.tqdm", "os.path.join", "benchmark_helper.get_json", "benchmark_helper.get_json.keys", "tqdm.tqdm.tqdm.set_postfix_str", "vot.VOTVideo", "loguru.logger.error", "loguru.logger.error", "exit"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_json"], ["num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "logger", ".", "info", "(", "'runing test on devices {}'", ".", "format", "(", "all_devs", ")", ")", "\n", "vot_root", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", "\n", "logger", ".", "info", "(", "'Using dataset %s at: %s'", "%", "(", "self", ".", "dataset_name", ",", "vot_root", ")", ")", "\n", "# setup dataset", "\n", "dataset", "=", "vot_benchmark", ".", "load_dataset", "(", "vot_root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "keys", "=", "list", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"video_name_list\"", "]", ":", "\n", "            ", "keys", "=", "self", ".", "_hyper_params", "[", "\"video_name_list\"", "]", "\n", "", "nr_records", "=", "len", "(", "keys", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nr_records", ")", "\n", "mean_speed", "=", "-", "1", "\n", "total_lost", "=", "0", "\n", "speed_list", "=", "[", "]", "\n", "result_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "speed_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "# set worker", "\n", "if", "num_gpu", "==", "1", ":", "\n", "            ", "self", ".", "worker", "(", "keys", ",", "all_devs", "[", "0", "]", ",", "result_queue", ",", "speed_queue", ")", "\n", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "t", "=", "result_queue", ".", "get", "(", ")", "\n", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "total_lost", "+=", "t", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTLTVideo.__init__": [[137, 159], ["video.Video.__init__", "os.path.join", "cv2.imread", "numpy.isnan", "os.path.exists", "img_name.replace.replace.replace", "loguru.logger.error"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "t", "=", "result_queue", ".", "get", "(", ")", "\n", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "total_lost", "+=", "t", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "# print result", "\n", "", "", "mean_speed", "=", "float", "(", "np", ".", "mean", "(", "speed_list", ")", ")", "\n", "logger", ".", "info", "(", "'Total Lost: {:d}'", ".", "format", "(", "total_lost", ")", ")", "\n", "logger", ".", "info", "(", "'Mean Speed: {:.2f} FPS'", ".", "format", "(", "mean_speed", ")", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "mean_speed", "\n", "\n", "", "def", "worker", "(", "self", ",", "records", ",", "dev", ",", "result_queue", "=", "None", ",", "speed_queue", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTLTVideo.load_tracker": [[160, 190], ["isinstance", "os.path.join", "os.path.join", "open", "open", "score.insert", "x.split", "glob.glob.glob", "os.path.isdir", "list", "float", "float", "map", "f.readlines", "x.strip", "x.strip().split", "f.readlines", "x.strip"], "methods", ["None"], ["\n", "self", ".", "set_random_seed", "(", ")", "\n", "tracker", "=", "self", ".", "_pipeline", "\n", "tracker", ".", "set_device", "(", "dev", ")", "\n", "for", "v_id", ",", "video", "in", "enumerate", "(", "records", ")", ":", "\n", "            ", "lost", ",", "speed", "=", "self", ".", "track_single_video", "(", "tracker", ",", "video", ",", "v_id", "=", "v_id", ")", "\n", "if", "result_queue", "is", "not", "None", ":", "\n", "                ", "result_queue", ".", "put_nowait", "(", "lost", ")", "\n", "", "if", "speed_queue", "is", "not", "None", ":", "\n", "                ", "speed_queue", ".", "put_nowait", "(", "speed", ")", "\n", "\n", "", "", "", "def", "evaluation", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Run evaluation & write result to csv file under self.tracker_dir\n        \"\"\"", "\n", "AccuracyRobustnessBenchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"AccuracyRobustnessBenchmark\"", ")", ".", "AccuracyRobustnessBenchmark", "\n", "EAOBenchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"EAOBenchmark\"", ")", ".", "EAOBenchmark", "\n", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "result_csv", "=", "\"%s.csv\"", "%", "tracker_name", "\n", "\n", "csv_to_write", "=", "open", "(", "join", "(", "self", ".", "tracker_dir", ",", "result_csv", ")", ",", "'a+'", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOTLTDataset.__init__": [[199, 221], ["dataset.Dataset.__init__", "tqdm.tqdm.tqdm", "os.path.join", "benchmark_helper.get_json", "benchmark_helper.get_json.keys", "tqdm.tqdm.tqdm.set_postfix_str", "vot.VOTLTVideo", "loguru.logger.error", "loguru.logger.error", "exit", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_json"], ["ar_benchmark", ".", "show_result", "(", "ar_result", ")", "\n", "benchmark", "=", "EAOBenchmark", "(", "dataset", ")", "\n", "eao_result", "=", "{", "}", "\n", "ret", "=", "benchmark", ".", "eval", "(", "self", ".", "tracker_name", ")", "\n", "eao_result", ".", "update", "(", "ret", ")", "\n", "ar_benchmark", ".", "show_result", "(", "ar_result", ",", "\n", "eao_result", "=", "eao_result", ",", "\n", "show_video_level", "=", "False", ")", "\n", "self", ".", "write_result_to_csv", "(", "\n", "ar_result", ",", "\n", "eao_result", ",", "\n", "speed", "=", "self", ".", "_state", "[", "'speed'", "]", ",", "\n", "result_csv", "=", "csv_to_write", ",", "\n", ")", "\n", "csv_to_write", ".", "close", "(", ")", "\n", "eao", "=", "eao_result", "[", "self", ".", "tracker_name", "]", "[", "'all'", "]", "\n", "test_result_dict", "=", "dict", "(", ")", "\n", "test_result_dict", "[", "\"main_performance\"", "]", "=", "eao", "\n", "return", "test_result_dict", "\n", "\n", "", "def", "track_single_video", "(", "self", ",", "tracker", ",", "video", ",", "v_id", "=", "0", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.__init__": [[16, 26], ["os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "root", ",", "video_dir", ",", "init_rect", ",", "img_names", ",", "gt_rect", ",", "\n", "attr", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "video_dir", "=", "video_dir", "\n", "self", ".", "init_rect", "=", "init_rect", "\n", "self", ".", "gt_traj", "=", "gt_rect", "\n", "self", ".", "attr", "=", "attr", "\n", "self", ".", "pred_trajs", "=", "{", "}", "\n", "self", ".", "img_names", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "x", ")", "for", "x", "in", "img_names", "]", "\n", "self", ".", "imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_tracker": [[27, 56], ["isinstance", "list", "os.path.join", "os.path.exists", "video.Video.pred_trajs.keys", "print", "x.split", "glob.glob.glob", "os.path.isdir", "open", "len", "len", "print", "list", "len", "len", "map", "f.readlines", "x.strip().split", "x.strip"], "methods", ["None"], ["", "def", "load_tracker", "(", "self", ",", "path", ",", "tracker_names", "=", "None", ",", "store", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            path(str): path to result\n            tracker_name(list): name of tracker\n        \"\"\"", "\n", "if", "not", "tracker_names", ":", "\n", "            ", "tracker_names", "=", "[", "\n", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "x", "in", "glob", "(", "path", ")", "if", "os", ".", "path", ".", "isdir", "(", "x", ")", "\n", "]", "\n", "", "if", "isinstance", "(", "tracker_names", ",", "str", ")", ":", "\n", "            ", "tracker_names", "=", "[", "tracker_names", "]", "\n", "", "for", "name", "in", "tracker_names", ":", "\n", "            ", "traj_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ",", "self", ".", "name", "+", "'.txt'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "traj_file", ")", ":", "\n", "                ", "with", "open", "(", "traj_file", ",", "'r'", ")", "as", "f", ":", "\n", "                    ", "pred_traj", "=", "[", "\n", "list", "(", "map", "(", "float", ",", "\n", "x", ".", "strip", "(", ")", ".", "split", "(", "','", ")", ")", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "\n", "]", "\n", "", "if", "len", "(", "pred_traj", ")", "!=", "len", "(", "self", ".", "gt_traj", ")", ":", "\n", "                    ", "print", "(", "name", ",", "len", "(", "pred_traj", ")", ",", "len", "(", "self", ".", "gt_traj", ")", ",", "self", ".", "name", ")", "\n", "", "if", "store", ":", "\n", "                    ", "self", ".", "pred_trajs", "[", "name", "]", "=", "pred_traj", "\n", "", "else", ":", "\n", "                    ", "return", "pred_traj", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "traj_file", ")", "\n", "", "", "self", ".", "tracker_names", "=", "list", "(", "self", ".", "pred_trajs", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.load_img": [[57, 62], ["cv2.imread"], "methods", ["None"], ["", "def", "load_img", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "imgs", "is", "None", ":", "\n", "            ", "self", ".", "imgs", "=", "[", "cv2", ".", "imread", "(", "x", ")", "for", "x", "in", "self", ".", "img_names", "]", "\n", "self", ".", "width", "=", "self", ".", "imgs", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "height", "=", "self", ".", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.free_img": [[63, 65], ["None"], "methods", ["None"], ["", "", "def", "free_img", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.__len__": [[66, 68], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.__getitem__": [[69, 75], ["cv2.imread"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "imgs", "is", "None", ":", "\n", "            ", "return", "cv2", ".", "imread", "(", "self", ".", "img_names", "[", "idx", "]", ")", ",", "self", ".", "gt_traj", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "imgs", "[", "idx", "]", ",", "self", ".", "gt_traj", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.video.Video.__iter__": [[76, 83], ["range", "len", "cv2.imread"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "img_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "imgs", "is", "not", "None", ":", "\n", "                ", "yield", "self", ".", "imgs", "[", "i", "]", ",", "self", ".", "gt_traj", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "yield", "cv2", ".", "imread", "(", "self", ".", "img_names", "[", "i", "]", ")", ",", "self", ".", "gt_traj", "[", "i", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__init__": [[10, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dataset_root", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dataset_root", "=", "dataset_root", "\n", "self", ".", "videos", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__getitem__": [[15, 20], ["isinstance", "isinstance", "sorted", "list", "dataset.Dataset.videos.keys"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "isinstance", "(", "idx", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "videos", "[", "idx", "]", "\n", "", "elif", "isinstance", "(", "idx", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "videos", "[", "sorted", "(", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", ")", "[", "idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.__iter__": [[24, 28], ["sorted", "list", "dataset.Dataset.videos.keys"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "keys", "=", "sorted", "(", "list", "(", "self", ".", "videos", ".", "keys", "(", ")", ")", ")", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "yield", "self", ".", "videos", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.dataset.Dataset.set_tracker": [[29, 37], ["None"], "methods", ["None"], ["", "", "def", "set_tracker", "(", "self", ",", "path", ",", "tracker_names", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            path: path to tracker results,\n            tracker_names: list of tracker name\n        \"\"\"", "\n", "self", ".", "tracker_path", "=", "path", "\n", "self", ".", "tracker_names", "=", "tracker_names", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.__init__.DatasetFactory.create_dataset": [[13, 29], ["vot.VOTDataset", "Exception"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.uav123.ExperimentUAV123.__init__": [[21, 34], ["datasets.UAV123", "os.path.join", "os.path.join", "version.upper", "version.upper", "version.upper"], "methods", ["None"], ["\n", "extra_hyper_params", "=", "dict", "(", "\n", "device_num", "=", "1", ",", "\n", "data_root", "=", "\"datasets/UAV123\"", ",", "\n", "subsets", "=", "[", "\"UAV123\"", "]", ",", "# (UAV123|UAV20L)", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.uav123.ExperimentUAV123._calc_metrics": [[35, 44], ["numpy.any", "len", "print", "utils.metrics.rect_iou", "utils.metrics.center_error", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.rect_iou", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.center_error"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UAVTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.lasot.ExperimentLaSOT.__init__": [[29, 45], ["datasets.LaSOT", "os.path.join", "os.path.join"], "methods", ["None"], ["extra_hyper_params", "=", "dict", "(", "\n", "device_num", "=", "1", ",", "\n", "data_root", "=", "\"datasets/LaSOT\"", ",", "\n", "subsets", "=", "[", "\"test\"", "]", ",", "# (train|test|train_test)", "\n", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LaSOTTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.lasot.ExperimentLaSOT.report": [[46, 150], ["isinstance", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "print", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "performance.update", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "[].update", "open", "json.dump", "lasot.ExperimentLaSOT.plot_curves", "os.path.join", "numpy.loadtxt", "lasot.ExperimentLaSOT._calc_metrics", "lasot.ExperimentLaSOT._calc_curves", "os.path.join", "os.path.isfile", "[].update", "numpy.count_nonzero", "print", "min", "len", "len", "numpy.loadtxt", "numpy.sum", "numpy.count_nonzero", "numpy.mean.tolist", "numpy.mean.tolist", "numpy.mean.tolist", "len", "len", "len", "len", "len", "numpy.mean", "succ_curve[].tolist", "prec_curve[].tolist", "norm_prec_curve[].tolist", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.plot_curves", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._calc_metrics", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._calc_curves", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentLaSOT", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"success_score\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentLaSOT", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n", "\n", "", "", "LaSOTTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "\n", "LaSOTTester", ".", "default_hyper_params", ")", "\n", "LaSOTTester", ".", "default_hyper_params", ".", "update", "(", "LaSOTTester", ".", "extra_hyper_params", ")", "\n", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.lasot.ExperimentLaSOT._calc_metrics": [[151, 162], ["numpy.any", "len", "print", "utils.metrics.rect_iou", "utils.metrics.center_error", "utils.metrics.normalized_center_error", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.rect_iou", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.center_error", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.normalized_center_error"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.lasot.ExperimentLaSOT._calc_curves": [[163, 182], ["numpy.greater", "numpy.less_equal", "numpy.less_equal", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.linspace", "numpy.arange", "numpy.linspace"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.lasot.ExperimentLaSOT.plot_curves": [[183, 338], ["os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "list", "numpy.linspace", "matplotlib.subplots", "matplotlib.subplots", "enumerate", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.legend", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.set", "ax.grid", "fig.tight_layout", "print", "fig.savefig", "list", "numpy.arange", "matplotlib.subplots", "matplotlib.subplots", "enumerate", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.legend", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.set", "ax.grid", "fig.tight_layout", "print", "fig.savefig", "list", "numpy.arange", "matplotlib.subplots", "matplotlib.subplots", "enumerate", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.legend", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.set", "ax.grid", "fig.tight_layout", "print", "fig.savefig", "open", "json.load", "json.load.keys", "numpy.argsort", "ax.plot", "lines.append", "legends.append", "json.load.keys", "numpy.argsort", "ax.plot", "lines.append", "legends.append", "json.load.keys", "numpy.argsort", "ax.plot", "lines.append", "legends.append", "json.load.items", "json.load.values", "json.load.values", "json.load.values", "numpy.arange.max", "numpy.arange.max", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.dtb70.ExperimentDTB70.__init__": [[19, 27], ["datasets.DTB70", "os.path.join", "os.path.join"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "super", "(", "DTB70", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "_check_integrity", "(", "root_dir", ")", "\n", "\n", "self", ".", "anno_files", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'*/groundtruth_rect.txt'", ")", ")", ")", "\n", "self", ".", "seq_dirs", "=", "[", "os", ".", "path", ".", "dirname", "(", "f", ")", "for", "f", "in", "self", ".", "anno_files", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.nfs.ExperimentNfS.__init__": [[19, 31], ["datasets.NfS", "os.path.join", "os.path.join"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "root_dir", ",", "fps", "=", "240", ")", ":", "\n", "        ", "super", "(", "NfS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "fps", "in", "[", "30", ",", "240", "]", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "_check_integrity", "(", "root_dir", ")", "\n", "\n", "self", ".", "anno_files", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'*/%d/*.txt'", "%", "fps", ")", ")", ")", "\n", "self", ".", "seq_names", "=", "[", "os", ".", "path", ".", "basename", "(", "f", ")", "[", ":", "-", "4", "]", "for", "f", "in", "self", ".", "anno_files", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k.__init__": [[37, 53], ["object.__init__", "os.path.join", "os.path.join", "datasets.GOT10k"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k.run": [[54, 148], ["print", "len", "int", "int", "range", "print", "time.sleep", "tqdm.tqdm.tqdm", "range", "print", "os.path.join", "tracker.track", "got10k.ExperimentGOT10k._record", "os.path.join", "os.path.join", "PIL.Image.open", "cv2.VideoWriter", "enumerate", "cv2.VideoWriter.release", "print", "print", "os.path.exists", "print", "os.path.dirname", "os.path.isdir", "os.makedirs", "cv2.VideoWriter_fourcc", "zip", "PIL.Image.open", "[].copy", "pred.astype.astype.astype", "cv2.rectangle", "cv2.VideoWriter.write", "got10k.ExperimentGOT10k._check_deterministic", "print", "os.path.dirname", "image.convert.convert.convert", "anno[].astype", "cv2.rectangle", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.track", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._record", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.release", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT._check_deterministic"], ["            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentGOT10k", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n", "\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"ao\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "self", ".", "set_random_seed", "(", ")", "\n", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentGOT10k", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n", "\n", "", "", "GOT10kTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "\n", "GOT10kTester", ".", "default_hyper_params", ")", "\n", "GOT10kTester", ".", "default_hyper_params", ".", "update", "(", "GOT10kTester", ".", "extra_hyper_params", ")", "\n", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k.report": [[149, 264], ["isinstance", "os.getcwd", "print", "print", "print", "os.chdir", "os.path.join", "os.chdir", "utils.ioutils.compress", "print", "os.path.join", "os.path.join", "os.path.realpath", "os.path.exists", "os.makedirs", "print", "performance.update", "enumerate", "numpy.concatenate", "numpy.concatenate", "got10k.ExperimentGOT10k._evaluate", "performance[].update", "open", "json.dump", "got10k.ExperimentGOT10k.plot_curves", "glob.glob", "all", "ast.literal_eval", "numpy.concatenate", "os.path.join", "os.path.exists", "got10k.ExperimentGOT10k._evaluate", "[].update", "list", "list", "os.path.join", "len", "Exception", "numpy.loadtxt", "utils.metrics.rect_iou", "numpy.loadtxt", "numpy.concatenate.values", "numpy.concatenate.values", "len", "succ_curve.tolist", "numpy.isnan", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.compress", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k._evaluate", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.plot_curves", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k._evaluate", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.rect_iou"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k.show": [[265, 301], ["isinstance", "isinstance", "int", "enumerate", "isinstance", "round", "print", "enumerate", "os.path.join", "numpy.loadtxt", "PIL.Image.open", "utils.viz.show_frame", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k._record": [[303, 324], ["os.path.dirname", "numpy.savetxt", "os.path.exists", "numpy.savetxt", "os.path.isdir", "os.makedirs", "os.path.exists", "print", "numpy.savetxt", "print", "numpy.loadtxt", "numpy.concatenate", "record_file.rfind"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k._check_deterministic": [[325, 339], ["os.path.join", "sorted", "glob.glob", "len", "len", "os.path.join", "open", "records.append", "set", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k._evaluate": [[340, 358], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.linspace", "numpy.greater", "numpy.mean", "len", "numpy.mean"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.got10k.ExperimentGOT10k.plot_curves": [[359, 426], ["isinstance", "os.path.join", "os.path.join", "list", "numpy.linspace", "matplotlib.subplots", "matplotlib.subplots", "enumerate", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.legend", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.set", "ax.grid", "fig.tight_layout", "print", "fig.savefig", "type", "os.path.exists", "os.makedirs", "performance.keys", "numpy.argsort", "ax.plot", "lines.append", "legends.append", "open", "performance.update", "performance.items", "performance.values", "json.load", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.__init__": [[42, 76], ["object.__init__", "isinstance", "all", "datasets.VOT", "os.path.join", "os.path.join", "str", "str"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["\n", "\n", "extra_hyper_params", "=", "dict", "(", "\n", "device_num", "=", "1", ",", "\n", "data_root", "=", "CfgNode", "(", "\n", "dict", "(", "VOT2018", "=", "\"datasets/VOT/vot2018\"", ",", "\n", "VOT2019", "=", "\"datasets/VOT/vot2019\"", ")", ")", ",", "\n", "dataset_names", "=", "[", "\n", "\"VOT2018\"", ",", "\n", "]", ",", "\n", "video_name_list", "=", "[", "]", ",", "\n", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            parent config, (e.g. model / pipeline / tester)\n        pipeline: PipelineBase\n            pipeline to test\n        \"\"\"", "\n", "super", "(", "VOTTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "-", "1", "\n", "\n", "", "def", "test", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "r\"\"\"\n        Run test\n        \"\"\"", "\n", "# set dir", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.run": [[78, 89], ["print", "vot.ExperimentVOT.run_supervised", "vot.ExperimentVOT.run_unsupervised", "vot.ExperimentVOT.run_realtime", "type"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.run_supervised", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.run_unsupervised", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.run_realtime"], ["test_result_dict", "=", "None", "\n", "for", "dataset_name", "in", "self", ".", "_hyper_params", "[", "\"dataset_names\"", "]", ":", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "dataset_name", ")", "\n", "self", ".", "save_root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"baseline\"", ")", "\n", "ensure_dir", "(", "self", ".", "save_root_dir", ")", "\n", "# track videos", "\n", "self", ".", "run_tracker", "(", ")", "\n", "# evaluation", "\n", "test_result_dict", "=", "self", ".", "evaluation", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.run_supervised": [[90, 176], ["print", "enumerate", "print", "anno.copy", "range", "vot.ExperimentVOT.dataset._corner2rect", "print", "os.path.join", "os.path.exists", "enumerate", "vot.ExperimentVOT._record", "print", "PIL.Image.open", "time.time", "times.append", "len", "vot.ExperimentVOT._check_deterministic", "print", "tracker.init", "boxes.append", "tracker.update", "utils.metrics.poly_iou", "time.time", "len", "utils.viz.show_frame", "utils.viz.show_frame", "tracker.init", "boxes.append", "boxes.append", "boxes.append", "boxes.append"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._corner2rect", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._record", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT._check_deterministic", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.poly_iou", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init"], ["", "return", "test_result_dict", "\n", "\n", "", "def", "run_tracker", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run self.pipeline on VOT\n        \"\"\"", "\n", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "logger", ".", "info", "(", "'runing test on devices {}'", ".", "format", "(", "all_devs", ")", ")", "\n", "vot_root", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", "\n", "logger", ".", "info", "(", "'Using dataset %s at: %s'", "%", "(", "self", ".", "dataset_name", ",", "vot_root", ")", ")", "\n", "# setup dataset", "\n", "dataset", "=", "vot_benchmark", ".", "load_dataset", "(", "vot_root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "keys", "=", "list", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "if", "self", ".", "_hyper_params", "[", "\"video_name_list\"", "]", ":", "\n", "            ", "keys", "=", "self", ".", "_hyper_params", "[", "\"video_name_list\"", "]", "\n", "", "nr_records", "=", "len", "(", "keys", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nr_records", ")", "\n", "mean_speed", "=", "-", "1", "\n", "total_lost", "=", "0", "\n", "speed_list", "=", "[", "]", "\n", "result_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "speed_queue", "=", "mp", ".", "Queue", "(", "500", ")", "\n", "# set worker", "\n", "if", "num_gpu", "==", "1", ":", "\n", "            ", "self", ".", "worker", "(", "keys", ",", "all_devs", "[", "0", "]", ",", "result_queue", ",", "speed_queue", ")", "\n", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "t", "=", "result_queue", ".", "get", "(", ")", "\n", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "total_lost", "+=", "t", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "nr_video", "=", "math", ".", "ceil", "(", "nr_records", "/", "num_gpu", ")", "\n", "procs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gpu", ")", ":", "\n", "                ", "start", "=", "i", "*", "nr_video", "\n", "end", "=", "min", "(", "start", "+", "nr_video", ",", "nr_records", ")", "\n", "split_records", "=", "keys", "[", "start", ":", "end", "]", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "split_records", ",", "all_devs", "[", "i", "]", ",", "\n", "result_queue", ",", "speed_queue", ")", ")", "\n", "print", "(", "'process:%d, start:%d, end:%d'", "%", "(", "i", ",", "start", ",", "end", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "t", "=", "result_queue", ".", "get", "(", ")", "\n", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "total_lost", "+=", "t", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "# print result", "\n", "", "", "mean_speed", "=", "float", "(", "np", ".", "mean", "(", "speed_list", ")", ")", "\n", "logger", ".", "info", "(", "'Total Lost: {:d}'", ".", "format", "(", "total_lost", ")", ")", "\n", "logger", ".", "info", "(", "'Mean Speed: {:.2f} FPS'", ".", "format", "(", "mean_speed", ")", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "mean_speed", "\n", "\n", "", "def", "worker", "(", "self", ",", "records", ",", "dev", ",", "result_queue", "=", "None", ",", "speed_queue", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Worker to run tracker on records\n\n        Arguments\n        ---------\n        records:\n            specific records, can be a subset of whole sequence\n        dev: torch.device object\n            target device\n        result_queue:\n            queue for result collecting\n        speed_queue:\n            queue for fps measurement collecting\n        \"\"\"", "\n", "self", ".", "set_random_seed", "(", ")", "\n", "tracker", "=", "self", ".", "_pipeline", "\n", "tracker", ".", "set_device", "(", "dev", ")", "\n", "for", "v_id", ",", "video", "in", "enumerate", "(", "records", ")", ":", "\n", "            ", "lost", ",", "speed", "=", "self", ".", "track_single_video", "(", "tracker", ",", "video", ",", "v_id", "=", "v_id", ")", "\n", "if", "result_queue", "is", "not", "None", ":", "\n", "                ", "result_queue", ".", "put_nowait", "(", "lost", ")", "\n", "", "if", "speed_queue", "is", "not", "None", ":", "\n", "                ", "speed_queue", ".", "put_nowait", "(", "speed", ")", "\n", "\n", "", "", "", "def", "evaluation", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.run_unsupervised": [[177, 210], ["print", "enumerate", "print", "os.path.join", "os.path.exists", "anno.copy", "tracker.track", "list", "vot.ExperimentVOT._record", "print", "vot.ExperimentVOT.dataset._corner2rect", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.track", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._record", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._corner2rect"], ["        ", "r\"\"\"\n        Run evaluation & write result to csv file under self.tracker_dir\n        \"\"\"", "\n", "AccuracyRobustnessBenchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"AccuracyRobustnessBenchmark\"", ")", ".", "AccuracyRobustnessBenchmark", "\n", "EAOBenchmark", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.evaluation\"", ",", "\n", "package", "=", "\"EAOBenchmark\"", ")", ".", "EAOBenchmark", "\n", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "result_csv", "=", "\"%s.csv\"", "%", "tracker_name", "\n", "\n", "csv_to_write", "=", "open", "(", "join", "(", "self", ".", "tracker_dir", ",", "result_csv", ")", ",", "'a+'", ")", "\n", "dataset", "=", "vot_benchmark", ".", "VOTDataset", "(", "\n", "self", ".", "dataset_name", ",", "\n", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "[", "self", ".", "dataset_name", "]", ")", "\n", "dataset", ".", "set_tracker", "(", "self", ".", "tracker_dir", ",", "self", ".", "tracker_name", ")", "\n", "ar_benchmark", "=", "AccuracyRobustnessBenchmark", "(", "dataset", ")", "\n", "ar_result", "=", "{", "}", "\n", "ret", "=", "ar_benchmark", ".", "eval", "(", "self", ".", "tracker_name", ")", "\n", "ar_result", ".", "update", "(", "ret", ")", "\n", "ar_benchmark", ".", "show_result", "(", "ar_result", ")", "\n", "benchmark", "=", "EAOBenchmark", "(", "dataset", ")", "\n", "eao_result", "=", "{", "}", "\n", "ret", "=", "benchmark", ".", "eval", "(", "self", ".", "tracker_name", ")", "\n", "eao_result", ".", "update", "(", "ret", ")", "\n", "ar_benchmark", ".", "show_result", "(", "ar_result", ",", "\n", "eao_result", "=", "eao_result", ",", "\n", "show_video_level", "=", "False", ")", "\n", "self", ".", "write_result_to_csv", "(", "\n", "ar_result", ",", "\n", "eao_result", ",", "\n", "speed", "=", "self", ".", "_state", "[", "'speed'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.run_realtime": [[211, 325], ["print", "enumerate", "print", "os.path.join", "os.path.exists", "anno.copy", "enumerate", "vot.ExperimentVOT._record", "print", "vot.ExperimentVOT.dataset._corner2rect", "PIL.Image.open", "time.time", "times.append", "tracker.init", "boxes.append", "time.time", "len", "utils.metrics.poly_iou", "len", "utils.viz.show_frame", "utils.viz.show_frame", "max", "int", "boxes.append", "boxes.append", "boxes.append", "numpy.round", "tracker.update", "tracker.update", "utils.metrics.poly_iou", "boxes.append", "boxes.append", "boxes.append", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._record", "home.repos.pwc.inspect_result.fzh0917_sparsett.datasets.vot.VOT._corner2rect", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.poly_iou", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.poly_iou"], ["result_csv", "=", "csv_to_write", ",", "\n", ")", "\n", "csv_to_write", ".", "close", "(", ")", "\n", "eao", "=", "eao_result", "[", "self", ".", "tracker_name", "]", "[", "'all'", "]", "\n", "test_result_dict", "=", "dict", "(", ")", "\n", "test_result_dict", "[", "\"main_performance\"", "]", "=", "eao", "\n", "return", "test_result_dict", "\n", "\n", "", "def", "track_single_video", "(", "self", ",", "tracker", ",", "video", ",", "v_id", "=", "0", ")", ":", "\n", "        ", "r\"\"\"\n        track frames in single video with VOT rules\n\n        Arguments\n        ---------\n        tracker: PipelineBase\n            pipeline\n        video: str\n            video name\n        v_id: int\n            video id\n        \"\"\"", "\n", "vot_overlap", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.utils.region\"", ",", "\n", "package", "=", "\"vot_overlap\"", ")", ".", "vot_overlap", "\n", "vot_float2str", "=", "importlib", ".", "import_module", "(", "\n", "\"videoanalyst.evaluation.vot_benchmark.pysot.utils.region\"", ",", "\n", "package", "=", "\"vot_float2str\"", ")", ".", "vot_float2str", "\n", "regions", "=", "[", "]", "\n", "video", "=", "self", ".", "dataset", "[", "video", "]", "\n", "image_files", ",", "gt", "=", "video", "[", "'image_files'", "]", ",", "video", "[", "'gt'", "]", "\n", "start_frame", ",", "end_frame", ",", "lost_times", ",", "toc", "=", "0", ",", "len", "(", "image_files", ")", ",", "0", ",", "0", "\n", "track_num", "=", "0", "\n", "for", "f", ",", "image_file", "in", "enumerate", "(", "tqdm", "(", "image_files", ")", ")", ":", "\n", "            ", "im", "=", "vot_benchmark", ".", "get_img", "(", "image_file", ")", "\n", "im", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "tic", "=", "cv2", ".", "getTickCount", "(", ")", "\n", "if", "f", "==", "start_frame", ":", "# init", "\n", "                ", "cx", ",", "cy", ",", "w", ",", "h", "=", "vot_benchmark", ".", "get_axis_aligned_bbox", "(", "gt", "[", "f", "]", ")", "\n", "location", "=", "vot_benchmark", ".", "cxy_wh_2_rect", "(", "(", "cx", ",", "cy", ")", ",", "(", "w", ",", "h", ")", ")", "\n", "tracker", ".", "init", "(", "im", ",", "location", ")", "\n", "regions", ".", "append", "(", "1", "if", "'VOT'", "in", "self", ".", "dataset_name", "else", "gt", "[", "f", "]", ")", "\n", "gt_polygon", "=", "None", "\n", "pred_polygon", "=", "None", "\n", "", "elif", "f", ">", "start_frame", ":", "# tracking", "\n", "                ", "location", "=", "tracker", ".", "update", "(", "im", ")", "\n", "track_num", "+=", "1", "\n", "gt_polygon", "=", "(", "gt", "[", "f", "]", "[", "0", "]", ",", "gt", "[", "f", "]", "[", "1", "]", ",", "gt", "[", "f", "]", "[", "2", "]", ",", "gt", "[", "f", "]", "[", "3", "]", ",", "gt", "[", "f", "]", "[", "4", "]", ",", "\n", "gt", "[", "f", "]", "[", "5", "]", ",", "gt", "[", "f", "]", "[", "6", "]", ",", "gt", "[", "f", "]", "[", "7", "]", ")", "\n", "pred_polygon", "=", "(", "location", "[", "0", "]", ",", "location", "[", "1", "]", ",", "\n", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "location", "[", "1", "]", ",", "\n", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "\n", "location", "[", "1", "]", "+", "location", "[", "3", "]", ",", "location", "[", "0", "]", ",", "\n", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", "\n", "b_overlap", "=", "vot_overlap", "(", "gt_polygon", ",", "pred_polygon", ",", "\n", "(", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", ")", ")", "\n", "gt_polygon", "=", "(", "(", "gt", "[", "f", "]", "[", "0", "]", ",", "gt", "[", "f", "]", "[", "1", "]", ")", ",", "(", "gt", "[", "f", "]", "[", "2", "]", ",", "gt", "[", "f", "]", "[", "3", "]", ")", ",", "\n", "(", "gt", "[", "f", "]", "[", "4", "]", ",", "gt", "[", "f", "]", "[", "5", "]", ")", ",", "(", "gt", "[", "f", "]", "[", "6", "]", ",", "gt", "[", "f", "]", "[", "7", "]", ")", ")", "\n", "pred_polygon", "=", "(", "(", "location", "[", "0", "]", ",", "location", "[", "1", "]", ")", ",", "\n", "(", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "\n", "location", "[", "1", "]", ")", ",", "(", "location", "[", "0", "]", "+", "location", "[", "2", "]", ",", "\n", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", ",", "\n", "(", "location", "[", "0", "]", ",", "location", "[", "1", "]", "+", "location", "[", "3", "]", ")", ")", "\n", "\n", "if", "b_overlap", ":", "\n", "                    ", "regions", ".", "append", "(", "location", ")", "\n", "", "else", ":", "# lost", "\n", "                    ", "regions", ".", "append", "(", "2", ")", "\n", "lost_times", "+=", "1", "\n", "start_frame", "=", "f", "+", "5", "# skip 5 frames", "\n", "", "toc", "+=", "cv2", ".", "getTickCount", "(", ")", "-", "tic", "\n", "", "else", ":", "# skip", "\n", "                ", "regions", ".", "append", "(", "0", ")", "\n", "\n", "", "", "toc", "/=", "cv2", ".", "getTickFrequency", "(", ")", "\n", "\n", "# save result", "\n", "result_dir", "=", "join", "(", "self", ".", "save_root_dir", ",", "video", "[", "'name'", "]", ")", "\n", "ensure_dir", "(", "result_dir", ")", "\n", "result_path", "=", "join", "(", "result_dir", ",", "'{:s}_001.txt'", ".", "format", "(", "video", "[", "'name'", "]", ")", ")", "\n", "with", "open", "(", "result_path", ",", "\"w\"", ")", "as", "fin", ":", "\n", "            ", "for", "x", "in", "regions", ":", "\n", "                ", "fin", ".", "write", "(", "\"{:d}\\n\"", ".", "format", "(", "x", ")", ")", "if", "isinstance", "(", "x", ",", "int", ")", "else", "fin", ".", "write", "(", "','", ".", "join", "(", "[", "vot_float2str", "(", "\"%.4f\"", ",", "i", ")", "for", "i", "in", "x", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\n", "'({:d}) Video: {:12s} Time: {:02.1f}s Speed: {:3.1f}fps Lost: {:d} '", "\n", ".", "format", "(", "v_id", ",", "video", "[", "'name'", "]", ",", "toc", ",", "track_num", "/", "toc", ",", "lost_times", ")", ")", "\n", "\n", "return", "lost_times", ",", "track_num", "/", "toc", "\n", "\n", "", "def", "write_result_to_csv", "(", "self", ",", "\n", "ar_result", ",", "\n", "eao_result", ",", "\n", "speed", "=", "-", "1", ",", "\n", "param", "=", "None", ",", "\n", "result_csv", "=", "None", ")", ":", "\n", "        ", "write_header", "=", "(", "osp", ".", "getsize", "(", "result_csv", ".", "name", ")", "==", "0", ")", "\n", "row_dict", "=", "OrderedDict", "(", ")", "\n", "row_dict", "[", "'tracker'", "]", "=", "self", ".", "tracker_name", "\n", "row_dict", "[", "'speed'", "]", "=", "speed", "\n", "\n", "ret", "=", "ar_result", "[", "self", ".", "tracker_name", "]", "\n", "overlaps", "=", "list", "(", "itertools", ".", "chain", "(", "*", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", ")", ")", "\n", "accuracy", "=", "np", ".", "nanmean", "(", "overlaps", ")", "\n", "length", "=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "ret", "[", "'overlaps'", "]", ".", "values", "(", ")", "]", ")", "\n", "failures", "=", "list", "(", "ret", "[", "'failures'", "]", ".", "values", "(", ")", ")", "\n", "lost_number", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "failures", ",", "axis", "=", "0", ")", ")", "\n", "robustness", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "array", "(", "failures", ")", ",", "axis", "=", "0", ")", "/", "length", ")", "*", "100", "\n", "eao", "=", "eao_result", "[", "self", ".", "tracker_name", "]", "[", "'all'", "]", "\n", "\n", "row_dict", "[", "'dataset'", "]", "=", "self", ".", "dataset_name", "\n", "row_dict", "[", "'accuracy'", "]", "=", "accuracy", "\n", "row_dict", "[", "'robustness'", "]", "=", "robustness", "\n", "row_dict", "[", "'lost'", "]", "=", "lost_number", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.report": [[326, 465], ["isinstance", "os.path.join", "os.path.join", "print", "os.path.exists", "os.makedirs", "print", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.sum", "numpy.sum", "numpy.concatenate", "performance.update", "open", "json.dump", "open", "f.read().strip().split", "len", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "sorted", "all", "os.path.join", "os.path.exists", "len", "numpy.zeros", "enumerate", "warnings.catch_warnings", "warnings.simplefilter", "numpy.nanmean", "numpy.nanmean", "numpy.array", "numpy.array", "numpy.concatenate.sum", "numpy.array.sum", "len", "numpy.mean", "float", "glob.glob", "vot.ExperimentVOT.report.read_record"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["row_dict", "[", "'eao'", "]", "=", "eao", "\n", "\n", "if", "write_header", ":", "\n", "            ", "header", "=", "','", ".", "join", "(", "[", "str", "(", "k", ")", "for", "k", "in", "row_dict", ".", "keys", "(", ")", "]", ")", "\n", "result_csv", ".", "write", "(", "'%s\\n'", "%", "header", ")", "\n", "", "row_data", "=", "','", ".", "join", "(", "[", "str", "(", "v", ")", "for", "v", "in", "row_dict", ".", "values", "(", ")", "]", ")", "\n", "result_csv", ".", "write", "(", "'%s\\n'", "%", "row_data", ")", "\n", "\n", "\n", "", "", "VOTTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "VOTTester", ".", "default_hyper_params", ")", "\n", "VOTTester", ".", "default_hyper_params", ".", "update", "(", "VOTTester", ".", "extra_hyper_params", ")", "\n", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT.show": [[466, 528], ["isinstance", "isinstance", "int", "enumerate", "isinstance", "round", "enumerate", "print", "enumerate", "open", "f.read().strip().split", "os.path.join", "vot.ExperimentVOT.report.read_record"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT._record": [[530, 559], ["os.path.dirname", "print", "os.path.exists", "os.path.isdir", "os.makedirs", "open", "f.write", "t.replace", "open", "f.write", "len", "lines.append", "lines.append", "str.join", "open", "f.read().strip().split", "str.join", "str.join", "record_file.rfind", "zip", "f.read().strip", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT._check_deterministic": [[560, 574], ["os.path.join", "sorted", "glob.glob", "len", "len", "os.path.join", "open", "records.append", "set", "f.read"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.vot.ExperimentVOT._calc_iou": [[575, 588], ["numpy.array", "boxes.copy.copy.copy", "enumerate", "utils.metrics.poly_iou", "zip", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.poly_iou"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.trackingnet.ExperimentTrackingNet.__init__": [[27, 44], ["subset.startswith", "datasets.TrackingNet", "os.path.join", "os.path.join"], "methods", ["None"], ["\n", "extra_hyper_params", "=", "dict", "(", "\n", "device_num", "=", "1", ",", "\n", "data_root", "=", "\"datasets/TrackingNet\"", ",", "\n", "subsets", "=", "[", "\"TEST\"", "]", ",", "# (val|test)", "\n", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TrackingNetTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.trackingnet.ExperimentTrackingNet.report": [[45, 71], ["loguru.logger.info", "print", "print", "print", "super().report", "os.path.join", "utils.ioutils.compress", "print", "os.path.realpath"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.report", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.ioutils.compress"], ["", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentTrackingNet", "(", "root_dir", ",", "\n", "subset", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.tcolor128.ExperimentTColor128.__init__": [[19, 27], ["datasets.TColor128", "os.path.join", "os.path.join"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "root_dir", ",", "download", "=", "True", ")", ":", "\n", "        ", "super", "(", "TColor128", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "if", "download", ":", "\n", "            ", "self", ".", "_download", "(", "root_dir", ")", "\n", "", "self", ".", "_check_integrity", "(", "root_dir", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.__init__": [[27, 42], ["object.__init__", "datasets.OTB", "os.path.join", "os.path.join", "isinstance", "str"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["\n", "extra_hyper_params", "=", "dict", "(", "\n", "device_num", "=", "1", ",", "\n", "data_root", "=", "\"datasets/OTB/OTB2015\"", ",", "\n", "subsets", "=", "[", "\"2015\"", "]", ",", "# (2013|2015)", "\n", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OTBTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self._experiment = None", "\n", "\n", "", "def", "update_params", "(", "self", ")", ":", "\n", "# set device state", "\n", "        ", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "if", "num_gpu", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.run": [[43, 86], ["print", "len", "int", "int", "range", "print", "os.path.join", "tracker.track", "otb.ExperimentOTB._record", "os.path.exists", "print", "type", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.track", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._record"], ["            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "", "else", ":", "\n", "            ", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cpu\"", ")", "]", "\n", "", "self", ".", "_state", "[", "\"all_devs\"", "]", "=", "all_devs", "\n", "\n", "", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "all_devs", "=", "self", ".", "_state", "[", "\"all_devs\"", "]", "\n", "nr_devs", "=", "len", "(", "all_devs", ")", "\n", "\n", "for", "subset", "in", "self", ".", "_hyper_params", "[", "\"subsets\"", "]", ":", "\n", "            ", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentOTB", "(", "root_dir", ",", "\n", "version", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "# single worker", "\n", "if", "nr_devs", "==", "1", ":", "\n", "                ", "dev", "=", "all_devs", "[", "0", "]", "\n", "self", ".", "_pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "self", ".", "_pipeline", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ")", "\n", "# multi-worker", "\n", "", "else", ":", "\n", "                ", "procs", "=", "[", "]", "\n", "slicing_step", "=", "1.0", "/", "nr_devs", "\n", "for", "dev_id", ",", "dev", "in", "enumerate", "(", "all_devs", ")", ":", "\n", "                    ", "slicing_quantile", "=", "(", "slicing_step", "*", "dev_id", ",", "\n", "slicing_step", "*", "(", "dev_id", "+", "1", ")", ")", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "dev_id", ",", "dev", ",", "subset", ",", "\n", "slicing_quantile", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "p", "in", "procs", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "# evalutate", "\n", "", "", "performance", "=", "experiment", ".", "report", "(", "[", "tracker_name", "]", ",", "plot_curves", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.report": [[87, 178], ["isinstance", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "print", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "performance.update", "enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "[].update", "open", "json.dump", "otb.ExperimentOTB.plot_curves", "os.path.join", "numpy.loadtxt", "otb.ExperimentOTB._calc_metrics", "otb.ExperimentOTB._calc_curves", "os.path.join", "os.path.isfile", "[].update", "numpy.count_nonzero", "print", "min", "len", "len", "numpy.loadtxt", "numpy.sum", "numpy.count_nonzero", "numpy.mean.tolist", "numpy.mean.tolist", "len", "len", "len", "len", "len", "numpy.mean", "succ_curve[].tolist", "prec_curve[].tolist", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.plot_curves", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._calc_metrics", "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._calc_curves", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], ["\n", "", "test_result_dict", "=", "dict", "(", ")", "\n", "if", "performance", "is", "not", "None", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "performance", "[", "tracker_name", "]", "[", "\n", "\"overall\"", "]", "[", "\"success_score\"", "]", "\n", "", "else", ":", "\n", "            ", "test_result_dict", "[", "\"main_performance\"", "]", "=", "-", "1", "\n", "", "return", "test_result_dict", "\n", "\n", "", "def", "worker", "(", "self", ",", "dev_id", ",", "dev", ",", "subset", ",", "slicing_quantile", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Worker starts: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "\n", "pipeline", "=", "self", ".", "_pipeline", "\n", "pipeline", ".", "set_device", "(", "dev", ")", "\n", "pipeline_tracker", "=", "PipelineTracker", "(", "tracker_name", ",", "pipeline", ")", "\n", "\n", "root_dir", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "dataset_name", "=", "\"GOT-Benchmark\"", "# the name of benchmark toolkit, shown under \"repo/logs\" directory", "\n", "save_root_dir", "=", "osp", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "dataset_name", ")", "\n", "result_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"result\"", ")", "\n", "report_dir", "=", "osp", ".", "join", "(", "save_root_dir", ",", "\"report\"", ")", "\n", "\n", "experiment", "=", "ExperimentOTB", "(", "root_dir", ",", "\n", "version", "=", "subset", ",", "\n", "result_dir", "=", "result_dir", ",", "\n", "report_dir", "=", "report_dir", ")", "\n", "experiment", ".", "run", "(", "pipeline_tracker", ",", "slicing_quantile", "=", "slicing_quantile", ")", "\n", "logger", ".", "debug", "(", "\"Worker ends: slice {} at {}\"", ".", "format", "(", "\n", "slicing_quantile", ",", "dev", ")", ")", "\n", "\n", "\n", "", "", "OTBTester", ".", "default_hyper_params", "=", "copy", ".", "deepcopy", "(", "OTBTester", ".", "default_hyper_params", ")", "\n", "OTBTester", ".", "default_hyper_params", ".", "update", "(", "OTBTester", ".", "extra_hyper_params", ")", "\n", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.show": [[179, 214], ["isinstance", "isinstance", "int", "enumerate", "isinstance", "round", "print", "enumerate", "os.path.join", "numpy.loadtxt", "PIL.Image.open", "utils.viz.show_frame", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._record": [[216, 235], ["os.path.dirname", "numpy.savetxt", "print", "os.path.join", "os.path.join", "numpy.savetxt", "os.path.isdir", "os.makedirs", "os.path.exists", "print", "numpy.savetxt", "os.path.isdir", "os.makedirs", "os.path.basename().replace", "os.path.basename"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._calc_metrics": [[236, 241], ["utils.metrics.rect_iou", "utils.metrics.center_error"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.rect_iou", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.metrics.center_error"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB._calc_curves": [[242, 256], ["numpy.greater", "numpy.less_equal", "numpy.mean", "numpy.mean", "numpy.asarray", "numpy.asarray", "numpy.linspace", "numpy.arange"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.experiments.otb.ExperimentOTB.plot_curves": [[257, 352], ["os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.path.join", "os.path.join", "list", "numpy.linspace", "matplotlib.subplots", "matplotlib.subplots", "enumerate", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.legend", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.set", "ax.grid", "fig.tight_layout", "print", "fig.savefig", "list", "numpy.arange", "matplotlib.subplots", "matplotlib.subplots", "enumerate", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.legend", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "matplotlib.rcParams.update", "ax.set", "ax.grid", "fig.tight_layout", "print", "fig.savefig", "open", "json.load", "json.load.keys", "numpy.argsort", "ax.plot", "lines.append", "legends.append", "json.load.keys", "numpy.argsort", "ax.plot", "lines.append", "legends.append", "json.load.values", "json.load.values", "numpy.arange.max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.identity_tracker.IdentityTracker.__init__": [[7, 10], ["Tracker.__init__"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "IdentityTracker", ",", "self", ")", ".", "__init__", "(", "name", "=", "'IdentityTracker'", ",", "\n", "is_deterministic", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.identity_tracker.IdentityTracker.init": [[11, 13], ["None"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "image", ",", "box", ")", ":", "\n", "        ", "self", ".", "box", "=", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.identity_tracker.IdentityTracker.update": [[14, 16], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "box", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.__init__": [[12, 15], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init": [[16, 18], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update": [[19, 21], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.track": [[22, 44], ["len", "numpy.zeros", "numpy.zeros", "enumerate", "PIL.Image.open", "time.time", "image.convert.convert.convert", "__init__.Tracker.init", "__init__.Tracker.update", "time.time", "utils.viz.show_frame"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.init", "home.repos.pwc.inspect_result.fzh0917_sparsett.trackers.__init__.Tracker.update", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.viz.show_frame"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_json": [[16, 19], ["open", "json.load"], "function", ["None"], ["def", "get_json", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_txt": [[21, 24], ["open", "f.read"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoStream.read"], ["", "", "def", "get_txt", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_img": [[26, 29], ["cv2.imread"], "function", ["None"], ["", "", "def", "get_img", "(", "path", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_files": [[31, 39], ["isinstance", "list", "pathlib.Path", "pathlib.Path.glob"], "function", ["None"], ["", "def", "get_files", "(", "path", ",", "suffix", ")", ":", "\n", "    ", "if", "isinstance", "(", "path", ",", "str", ")", ":", "\n", "        ", "p", "=", "Path", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "p", "=", "path", "\n", "", "list_dir", "=", "list", "(", "p", ".", "glob", "(", "'*'", ")", ")", "\n", "result", "=", "[", "x", ".", "name", "for", "x", "in", "list_dir", "if", "x", ".", "suffix", "==", "suffix", "]", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_dataset_zoo": [[41, 55], ["os.path.realpath", "os.listdir", "list", "os.path.join", "os.path.join", "filter", "os.path.dirname", "os.path.isdir", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_dataset_zoo", "(", ")", ":", "\n", "    ", "root", "=", "realpath", "(", "join", "(", "dirname", "(", "__file__", ")", ",", "'../data'", ")", ")", "\n", "zoos", "=", "listdir", "(", "root", ")", "\n", "\n", "def", "valid", "(", "x", ")", ":", "\n", "        ", "y", "=", "join", "(", "root", ",", "x", ")", "\n", "if", "not", "isdir", "(", "y", ")", ":", "return", "False", "\n", "\n", "return", "exists", "(", "join", "(", "y", ",", "'list.txt'", ")", ")", "or", "exists", "(", "join", "(", "y", ",", "'train'", ",", "'meta.json'", ")", ")", "or", "exists", "(", "join", "(", "y", ",", "'ImageSets'", ",", "'2016'", ",", "'val.txt'", ")", ")", "\n", "\n", "", "zoos", "=", "list", "(", "filter", "(", "valid", ",", "zoos", ")", ")", "\n", "return", "zoos", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.load_dataset": [[57, 85], ["collections.OrderedDict", "os.path.join", "os.path.join", "benchmark_helper.get_txt", "v.strip", "os.path.join", "os.path.join", "sorted", "os.path.join", "benchmark_helper.get_txt", "np.column_stack.strip().split", "numpy.asarray", "get_txt.strip().split", "os.path.exists", "benchmark_helper.get_files", "os.path.join", "numpy.column_stack", "np.column_stack.strip", "line.split", "get_txt.strip"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_txt", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_txt", "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.benchmark_helper.get_files"], ["", "def", "load_dataset", "(", "vot_path", ",", "dataset", ")", ":", "\n", "    ", "info", "=", "OrderedDict", "(", ")", "\n", "if", "'VOT'", "in", "dataset", ":", "\n", "        ", "base_path", "=", "join", "(", "vot_path", ",", "dataset", ")", "\n", "list_path", "=", "join", "(", "base_path", ",", "'list.txt'", ")", "\n", "f", "=", "get_txt", "(", "list_path", ")", "\n", "videos", "=", "[", "v", ".", "strip", "(", ")", "for", "v", "in", "f", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "]", "\n", "for", "video", "in", "videos", ":", "\n", "            ", "video_path", "=", "join", "(", "base_path", ",", "video", ")", "\n", "image_path", "=", "join", "(", "video_path", ",", "'color'", ")", "\n", "if", "not", "exists", "(", "image_path", ")", ":", "\n", "                ", "image_path", "=", "video_path", "\n", "", "image_files", "=", "sorted", "(", "get_files", "(", "image_path", ",", "'.jpg'", ")", ")", "\n", "image_files", "=", "[", "join", "(", "image_path", ",", "x", ")", "for", "x", "in", "image_files", "]", "\n", "gt_path", "=", "join", "(", "video_path", ",", "'groundtruth.txt'", ")", "\n", "gt", "=", "get_txt", "(", "gt_path", ")", "\n", "gt", "=", "gt", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "\n", "gt", "=", "np", ".", "asarray", "(", "[", "line", ".", "split", "(", "','", ")", "for", "line", "in", "gt", "]", ",", "np", ".", "float32", ")", "\n", "\n", "if", "gt", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "                ", "gt", "=", "np", ".", "column_stack", "(", "\n", "(", "gt", "[", ":", ",", "0", "]", ",", "gt", "[", ":", ",", "1", "]", ",", "gt", "[", ":", ",", "0", "]", ",", "gt", "[", ":", ",", "1", "]", "+", "gt", "[", ":", ",", "3", "]", "-", "1", ",", "\n", "gt", "[", ":", ",", "0", "]", "+", "gt", "[", ":", ",", "2", "]", "-", "1", ",", "gt", "[", ":", ",", "1", "]", "+", "gt", "[", ":", ",", "3", "]", "-", "1", ",", "\n", "gt", "[", ":", ",", "0", "]", "+", "gt", "[", ":", ",", "2", "]", "-", "1", ",", "gt", "[", ":", ",", "1", "]", ")", ")", "\n", "", "info", "[", "video", "]", "=", "{", "'image_files'", ":", "image_files", ",", "'gt'", ":", "gt", ",", "'name'", ":", "video", "}", "\n", "\n", "", "", "return", "info", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.bbox_helper.corner2center": [[15, 30], ["isinstance", "Center"], "function", ["None"], ["def", "corner2center", "(", "corner", ")", ":", "\n", "    ", "\"\"\"\n    :param corner: Corner or np.array 4*N\n    :return: Center or 4 np.array N\n    \"\"\"", "\n", "if", "isinstance", "(", "corner", ",", "Corner", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "corner", "\n", "return", "Center", "(", "(", "x1", "+", "x2", ")", "*", "0.5", ",", "(", "y1", "+", "y2", ")", "*", "0.5", ",", "(", "x2", "-", "x1", ")", ",", "(", "y2", "-", "y1", ")", ")", "\n", "", "else", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "corner", "[", "0", "]", ",", "corner", "[", "1", "]", ",", "corner", "[", "2", "]", ",", "corner", "[", "3", "]", "\n", "x", "=", "(", "x1", "+", "x2", ")", "*", "0.5", "\n", "y", "=", "(", "y1", "+", "y2", ")", "*", "0.5", "\n", "w", "=", "x2", "-", "x1", "\n", "h", "=", "y2", "-", "y1", "\n", "return", "x", ",", "y", ",", "w", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.bbox_helper.center2corner": [[32, 47], ["isinstance", "Corner"], "function", ["None"], ["", "", "def", "center2corner", "(", "center", ")", ":", "\n", "    ", "\"\"\"\n    :param center: Center or np.array 4*N\n    :return: Corner or np.array 4*N\n    \"\"\"", "\n", "if", "isinstance", "(", "center", ",", "Center", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "center", "\n", "return", "Corner", "(", "x", "-", "w", "*", "0.5", ",", "y", "-", "h", "*", "0.5", ",", "x", "+", "w", "*", "0.5", ",", "y", "+", "h", "*", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "center", "[", "0", "]", ",", "center", "[", "1", "]", ",", "center", "[", "2", "]", ",", "center", "[", "3", "]", "\n", "x1", "=", "x", "-", "w", "*", "0.5", "\n", "y1", "=", "y", "-", "h", "*", "0.5", "\n", "x2", "=", "x", "+", "w", "*", "0.5", "\n", "y2", "=", "y", "+", "h", "*", "0.5", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.bbox_helper.cxy_wh_2_rect": [[49, 52], ["numpy.array"], "function", ["None"], ["", "", "def", "cxy_wh_2_rect", "(", "pos", ",", "sz", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "pos", "[", "0", "]", "-", "sz", "[", "0", "]", "/", "2", ",", "pos", "[", "1", "]", "-", "sz", "[", "1", "]", "/", "2", ",", "sz", "[", "0", "]", ",", "\n", "sz", "[", "1", "]", "]", ")", "# 0-index", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.bbox_helper.get_axis_aligned_bbox": [[54, 79], ["numpy.mean", "numpy.mean", "min", "max", "min", "max", "numpy.sqrt", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "get_axis_aligned_bbox", "(", "region", ")", ":", "\n", "    ", "nv", "=", "region", ".", "size", "\n", "if", "nv", "==", "8", ":", "\n", "        ", "cx", "=", "np", ".", "mean", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "cy", "=", "np", ".", "mean", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "x1", "=", "min", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "x2", "=", "max", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "y1", "=", "min", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "y2", "=", "max", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "A1", "=", "np", ".", "linalg", ".", "norm", "(", "region", "[", "0", ":", "2", "]", "-", "\n", "region", "[", "2", ":", "4", "]", ")", "*", "np", ".", "linalg", ".", "norm", "(", "region", "[", "2", ":", "4", "]", "-", "\n", "region", "[", "4", ":", "6", "]", ")", "\n", "A2", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "A1", "/", "A2", ")", "\n", "w", "=", "s", "*", "(", "x2", "-", "x1", ")", "+", "1", "\n", "h", "=", "s", "*", "(", "y2", "-", "y1", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "x", "=", "region", "[", "0", "]", "\n", "y", "=", "region", "[", "1", "]", "\n", "w", "=", "region", "[", "2", "]", "\n", "h", "=", "region", "[", "3", "]", "\n", "cx", "=", "x", "+", "(", "w", "-", "1", ")", "/", "2", "\n", "cy", "=", "y", "+", "(", "h", "-", "1", ")", "/", "2", "\n", "\n", "", "return", "cx", ",", "cy", ",", "w", ",", "h", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.vot_benchmark.__init__.show_result": [[6, 45], ["len", "max", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "len", "sorted", "result_file.write", "len", "sorted", "result_file.write", "max", "result.items", "result.items", "formatter.format", "len", "str", "formatter.format", "result.keys"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.uint82bin": [[9, 12], ["str", "range"], "function", ["None"], ["def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "    ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.labelcolormap": [[14, 31], ["numpy.zeros", "range", "range", "benckmark_helpler.uint82bin", "numpy.uint8", "numpy.uint8", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.uint82bin"], ["", "def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "r", "=", "0", "\n", "g", "=", "0", "\n", "b", "=", "0", "\n", "id", "=", "i", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "            ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.label2color": [[33, 41], ["benckmark_helpler.labelcolormap", "range", "range"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.labelcolormap"], ["", "def", "label2color", "(", "cv2_gt", ",", "num", "=", "8", ")", ":", "\n", "    ", "cmap", "=", "labelcolormap", "(", "num", ")", "\n", "[", "rows", ",", "cols", ",", "_", "]", "=", "cv2_gt", ".", "shape", "\n", "for", "i", "in", "range", "(", "rows", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "cols", ")", ":", "\n", "            ", "label", "=", "cv2_gt", "[", "i", ",", "j", ",", "0", "]", "\n", "cv2_gt", "[", "i", ",", "j", "]", "=", "cmap", "[", "label", "]", "\n", "", "", "return", "cv2_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.load_dataset": [[43, 75], ["collections.OrderedDict", "os.path.join", "open", "loguru.logger.error", "sorted", "v.strip", "sorted", "len", "glob.glob", "f.readlines", "glob.glob", "sorted", "loguru.logger.error", "exit", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "os.path.join"], "function", ["None"], ["", "def", "load_dataset", "(", "davis_path", ",", "dataset", ")", ":", "\n", "    ", "info", "=", "OrderedDict", "(", ")", "\n", "\n", "if", "'DAVIS'", "in", "dataset", "and", "'TEST'", "not", "in", "dataset", ":", "\n", "#davis_path = '/data/data_track/DAVIS'", "\n", "        ", "list_path", "=", "join", "(", "davis_path", ",", "'ImageSets'", ",", "dataset", "[", "-", "4", ":", "]", ",", "'val.txt'", ")", "\n", "with", "open", "(", "list_path", ")", "as", "f", ":", "\n", "            ", "videos", "=", "[", "v", ".", "strip", "(", ")", "for", "v", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n", "", "for", "video", "in", "videos", ":", "\n", "            ", "info", "[", "video", "]", "=", "{", "}", "\n", "if", "dataset", "[", "-", "4", ":", "]", "==", "'2017'", ":", "\n", "                ", "info", "[", "video", "]", "[", "'anno_files'", "]", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "\n", "join", "(", "davis_path", ",", "'Annotations/480p'", ",", "video", ",", "'*.png'", ")", ")", ")", "\n", "", "elif", "dataset", "[", "-", "4", ":", "]", "==", "'2016'", ":", "\n", "                ", "info", "[", "video", "]", "[", "'anno_files'", "]", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "\n", "join", "(", "davis_path", ",", "'Annotations/480p_2016'", ",", "video", ",", "\n", "'*.png'", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\"{} is not supported\"", ".", "format", "(", "dataset", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "assert", "len", "(", "info", "[", "video", "]", "[", "'anno_files'", "]", ")", ">", "0", ",", "logger", ".", "error", "(", "\n", "\"no anno in path {}\"", ".", "format", "(", "\n", "join", "(", "davis_path", ",", "'Annotations/480p_2016'", ",", "video", ")", ")", ")", "\n", "\n", "info", "[", "video", "]", "[", "'image_files'", "]", "=", "sorted", "(", "\n", "glob", ".", "glob", "(", "join", "(", "davis_path", ",", "'JPEGImages/480p'", ",", "video", ",", "'*.jpg'", ")", ")", ")", "\n", "info", "[", "video", "]", "[", "'name'", "]", "=", "video", "\n", "\n", "", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.benckmark_helpler.MultiBatchIouMeter": [[77, 115], ["numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.max", "enumerate", "numpy.argmax().astype", "range", "numpy.array", "int", "len", "range", "numpy.mean", "list", "numpy.argmax", "numpy.sum", "numpy.sum", "range", "iou.append", "iou.append", "str", "str"], "function", ["None"], ["", "def", "MultiBatchIouMeter", "(", "thrs", ",", "outputs", ",", "targets", ",", "start", "=", "None", ",", "end", "=", "None", ")", ":", "\n", "    ", "targets", "=", "np", ".", "array", "(", "targets", ")", "\n", "outputs", "=", "np", ".", "array", "(", "outputs", ")", "\n", "\n", "num_frame", "=", "targets", ".", "shape", "[", "0", "]", "\n", "if", "start", "is", "None", ":", "\n", "        ", "object_ids", "=", "np", ".", "array", "(", "list", "(", "range", "(", "outputs", ".", "shape", "[", "0", "]", ")", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "object_ids", "=", "[", "int", "(", "id", ")", "for", "id", "in", "start", "]", "\n", "\n", "", "num_object", "=", "len", "(", "object_ids", ")", "\n", "res", "=", "np", ".", "zeros", "(", "(", "num_object", ",", "len", "(", "thrs", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "output_max_id", "=", "np", ".", "argmax", "(", "outputs", ",", "axis", "=", "0", ")", ".", "astype", "(", "'uint8'", ")", "+", "1", "\n", "outputs_max", "=", "np", ".", "max", "(", "outputs", ",", "axis", "=", "0", ")", "\n", "for", "k", ",", "thr", "in", "enumerate", "(", "thrs", ")", ":", "\n", "        ", "output_thr", "=", "outputs_max", ">", "thr", "\n", "for", "j", "in", "range", "(", "num_object", ")", ":", "\n", "            ", "target_j", "=", "targets", "==", "object_ids", "[", "j", "]", "\n", "\n", "if", "start", "is", "None", ":", "\n", "                ", "start_frame", ",", "end_frame", "=", "1", ",", "num_frame", "-", "1", "\n", "", "else", ":", "\n", "                ", "start_frame", ",", "end_frame", "=", "start", "[", "str", "(", "object_ids", "[", "j", "]", ")", "]", "+", "1", ",", "end", "[", "str", "(", "\n", "object_ids", "[", "j", "]", ")", "]", "-", "1", "\n", "", "iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "start_frame", ",", "end_frame", ")", ":", "\n", "                ", "pred", "=", "(", "output_thr", "[", "i", "]", "*", "output_max_id", "[", "i", "]", ")", "==", "(", "j", "+", "1", ")", "\n", "mask_sum", "=", "(", "pred", "==", "1", ")", ".", "astype", "(", "\n", "np", ".", "uint8", ")", "+", "(", "target_j", "[", "i", "]", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "intxn", "=", "np", ".", "sum", "(", "mask_sum", "==", "2", ")", "\n", "union", "=", "np", ".", "sum", "(", "mask_sum", ">", "0", ")", "\n", "if", "union", ">", "0", ":", "\n", "                    ", "iou", ".", "append", "(", "intxn", "/", "union", ")", "\n", "", "elif", "union", "==", "0", "and", "intxn", "==", "0", ":", "\n", "                    ", "iou", ".", "append", "(", "1", ")", "\n", "", "", "res", "[", "j", ",", "k", "]", "=", "np", ".", "mean", "(", "iou", ")", "\n", "", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis_benchmark.evaluation_method.davis2017_eval": [[14, 82], ["time.time", "list", "print", "davis_benchmark.davis2017.davis_evaluation.DAVISEvaluation", "davis_benchmark.davis2017.davis_evaluation.DAVISEvaluation.evaluate", "numpy.array", "numpy.reshape", "pandas.DataFrame", "print", "list", "pandas.DataFrame", "print", "sys.stdout.write", "print", "sys.stdout.write", "print", "sys.stdout.write", "dict", "hp_dict.keys", "open", "pd.DataFrame.to_csv", "J[].keys", "open", "pd.DataFrame.to_csv", "pd.DataFrame.to_string", "pd.DataFrame.to_string", "time.time", "numpy.mean", "numpy.mean", "len", "list", "str", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "zip"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.evaluate", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["def", "davis2017_eval", "(", "davis_path", ",", "\n", "results_path", ",", "\n", "csv_name_global_path", ",", "\n", "csv_name_per_sequence_path", ",", "\n", "hp_dict", ",", "\n", "version", "=", "'2017'", ")", ":", "\n", "    ", "time_start", "=", "time", "(", ")", "\n", "hp_keys", "=", "list", "(", "hp_dict", ".", "keys", "(", ")", ")", "\n", "hp_values", "=", "[", "hp_dict", "[", "k", "]", "for", "k", "in", "hp_keys", "]", "\n", "\n", "print", "(", "'Evaluating sequences for the {} task...'", ".", "format", "(", "task", ")", ")", "\n", "# Create dataset and evaluate", "\n", "dataset_eval", "=", "DAVISEvaluation", "(", "davis_root", "=", "davis_path", ",", "\n", "task", "=", "task", ",", "\n", "gt_set", "=", "dataset", ",", "\n", "version", "=", "version", ")", "\n", "metrics_res", "=", "dataset_eval", ".", "evaluate", "(", "results_path", ")", "\n", "J", ",", "F", "=", "metrics_res", "[", "'J'", "]", ",", "metrics_res", "[", "'F'", "]", "\n", "\n", "# Generate dataframe for the general results", "\n", "g_measures", "=", "[", "\n", "'J&F-Mean'", ",", "'J-Mean'", ",", "'J-Recall'", ",", "'J-Decay'", ",", "'F-Mean'", ",", "'F-Recall'", ",", "\n", "'F-Decay'", "\n", "]", "+", "hp_keys", "\n", "final_mean", "=", "(", "np", ".", "mean", "(", "J", "[", "\"M\"", "]", ")", "+", "np", ".", "mean", "(", "F", "[", "\"M\"", "]", ")", ")", "/", "2.", "\n", "g_res", "=", "np", ".", "array", "(", "[", "\n", "final_mean", ",", "\n", "np", ".", "mean", "(", "J", "[", "\"M\"", "]", ")", ",", "\n", "np", ".", "mean", "(", "J", "[", "\"R\"", "]", ")", ",", "\n", "np", ".", "mean", "(", "J", "[", "\"D\"", "]", ")", ",", "\n", "np", ".", "mean", "(", "F", "[", "\"M\"", "]", ")", ",", "\n", "np", ".", "mean", "(", "F", "[", "\"R\"", "]", ")", ",", "\n", "np", ".", "mean", "(", "F", "[", "\"D\"", "]", ")", "\n", "]", "+", "hp_values", ")", "\n", "g_res", "=", "np", ".", "reshape", "(", "g_res", ",", "[", "1", ",", "len", "(", "g_res", ")", "]", ")", "\n", "table_g", "=", "pd", ".", "DataFrame", "(", "data", "=", "g_res", ",", "columns", "=", "g_measures", ")", "\n", "with", "open", "(", "csv_name_global_path", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "table_g", ".", "to_csv", "(", "f", ",", "index", "=", "False", ",", "float_format", "=", "\"%.3f\"", ",", "mode", "=", "'a'", ")", "\n", "", "print", "(", "'Global results saved in {}'", ".", "format", "(", "csv_name_global_path", ")", ")", "\n", "\n", "seq_names", "=", "list", "(", "J", "[", "'M_per_object'", "]", ".", "keys", "(", ")", ")", "\n", "seq_measures", "=", "[", "'Sequence'", ",", "'J-Mean'", ",", "'F-Mean'", "]", "\n", "J_per_object", "=", "[", "J", "[", "'M_per_object'", "]", "[", "x", "]", "for", "x", "in", "seq_names", "]", "\n", "F_per_object", "=", "[", "F", "[", "'M_per_object'", "]", "[", "x", "]", "for", "x", "in", "seq_names", "]", "\n", "table_seq", "=", "pd", ".", "DataFrame", "(", "data", "=", "list", "(", "\n", "zip", "(", "seq_names", ",", "J_per_object", ",", "F_per_object", ")", ")", ",", "\n", "columns", "=", "seq_measures", ")", "\n", "with", "open", "(", "csv_name_per_sequence_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "table_seq", ".", "to_csv", "(", "f", ",", "index", "=", "False", ",", "float_format", "=", "\"%.3f\"", ")", "\n", "", "print", "(", "'Per-sequence results saved in {}'", ".", "format", "(", "csv_name_per_sequence_path", ")", ")", "\n", "\n", "# Print the results", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"--------------------------- Global results for {} ---------------------------\\n\"", "\n", ".", "format", "(", "dataset", ")", ")", "\n", "print", "(", "table_g", ".", "to_string", "(", "index", "=", "False", ")", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\n---------- Per sequence results for {} ----------\\n\"", ".", "format", "(", "dataset", ")", ")", "\n", "print", "(", "table_seq", ".", "to_string", "(", "index", "=", "False", ")", ")", "\n", "total_time", "=", "time", "(", ")", "-", "time_start", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\nTotal time:'", "+", "str", "(", "total_time", ")", ")", "\n", "return", "dict", "(", "JF", "=", "final_mean", ",", "\n", "JM", "=", "np", ".", "mean", "(", "J", "[", "\"M\"", "]", ")", ",", "\n", "JR", "=", "np", ".", "mean", "(", "J", "[", "\"R\"", "]", ")", ",", "\n", "JD", "=", "np", ".", "mean", "(", "J", "[", "\"D\"", "]", ")", ",", "\n", "FM", "=", "np", ".", "mean", "(", "F", "[", "\"M\"", "]", ")", ",", "\n", "FR", "=", "np", ".", "mean", "(", "F", "[", "\"R\"", "]", ")", ",", "\n", "FD", "=", "np", ".", "mean", "(", "F", "[", "\"D\"", "]", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.__init__": [[15, 86], ["print", "print", "print", "os.path.join", "os.path.join", "davis.DAVIS._check_directories", "collections.defaultdict", "ValueError", "ValueError", "os.path.join", "os.path.join", "os.path.join", "txt_path.replace.replace.replace", "numpy.sort().tolist", "numpy.sort().tolist", "numpy.sort().tolist.extend", "open", "f.readlines", "x.strip", "isinstance", "FileNotFoundError", "numpy.sort", "len", "numpy.sort", "glob.glob.glob", "glob.glob.glob", "len", "len", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS._check_directories"], ["import", "torch", ".", "multiprocessing", "as", "mp", "\n", "from", "torch", ".", "multiprocessing", "import", "Manager", "\n", "\n", "from", "videoanalyst", ".", "evaluation", "import", "davis_benchmark", "\n", "from", "videoanalyst", ".", "utils", "import", "ensure_dir", "\n", "\n", "from", ".", ".", "tester_base", "import", "VOS_TESTERS", ",", "TesterBase", "\n", "\n", "\n", "@", "VOS_TESTERS", ".", "register", "\n", "class", "DAVISTester", "(", "TesterBase", ")", ":", "\n", "    ", "r\"\"\"\n    Tester to test the davis2017 dataset, the result is saved as follows\n    exp_dir/logs/$dataset_name$/$tracker_name/\n                                    |-baseline/$video_name$/ folder of result files\n                                    |-eval_result.csv evaluation result file\n\n    Hyper-parameters\n    ----------------\n    device_num: int\n        number of gpu for test\n    data_root: str\n        davis2017 dataset root directory. dict(dataset_name: path_to_root)\n    dataset_names: str\n        daataset name (DAVIS2017)\n    save_video: bool\n        save videos with predicted mask overlap for visualization and debug\n    save_patch: bool\n    \"\"\"", "\n", "\n", "extra_hyper_params", "=", "dict", "(", "device_num", "=", "1", ",", "\n", "data_root", "=", "\"datasets/DAVIS\"", ",", "\n", "dataset_names", "=", "[", "\n", "\"DAVIS2017\"", ",", "\n", "]", ",", "\n", "save_video", "=", "False", ",", "\n", "save_patch", "=", "False", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Crete tester with config and pipeline\n\n        Arguments\n        ---------\n        cfg: CfgNode\n            parent config, (e.g. model / pipeline / tester)\n        pipeline: PipelineBase\n            pipeline to test\n        \"\"\"", "\n", "super", "(", "DAVISTester", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "-", "1", "\n", "self", ".", "iou_eval_thres", "=", "np", ".", "arange", "(", "0.3", ",", "0.5", ",", "0.05", ")", "\n", "\n", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Run test\n        \"\"\"", "\n", "# set dir", "\n", "self", ".", "tracker_name", "=", "self", ".", "_hyper_params", "[", "\"exp_name\"", "]", "\n", "for", "dataset_name", "in", "self", ".", "_hyper_params", "[", "\"dataset_names\"", "]", ":", "\n", "            ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "tracker_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_hyper_params", "[", "\"exp_save\"", "]", ",", "\n", "self", ".", "dataset_name", ")", "\n", "self", ".", "save_root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tracker_dir", ",", "\n", "self", ".", "tracker_name", ",", "\"baseline\"", ")", "\n", "ensure_dir", "(", "self", ".", "save_root_dir", ")", "\n", "# track videos", "\n", "self", ".", "run_tracker", "(", ")", "\n", "# evaluation", "\n", "eval_result", "=", "self", ".", "evaluation", "(", "'default_hp'", ")", "\n", "", "return", "dict", "(", "main_performance", "=", "eval_result", "[", "\"JF\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS._check_directories": [[87, 103], ["os.path.exists", "FileNotFoundError", "os.path.exists", "FileNotFoundError", "os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "run_tracker", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run self.pipeline on DAVIS\n        \"\"\"", "\n", "num_gpu", "=", "self", ".", "_hyper_params", "[", "\"device_num\"", "]", "\n", "all_devs", "=", "[", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "i", ")", "for", "i", "in", "range", "(", "num_gpu", ")", "]", "\n", "logger", ".", "info", "(", "'runing test on devices {}'", ".", "format", "(", "all_devs", ")", ")", "\n", "davis_root", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "logger", ".", "info", "(", "'Using dataset %s at: %s'", "%", "(", "self", ".", "dataset_name", ",", "davis_root", ")", ")", "\n", "# setup dataset", "\n", "dataset", "=", "davis_benchmark", ".", "load_dataset", "(", "davis_root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "keys", "=", "list", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "nr_records", "=", "len", "(", "keys", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nr_records", ")", "\n", "mean_speed", "=", "-", "1", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_frames": [[104, 110], ["zip", "numpy.array", "PIL.Image.open", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["speed_list", "=", "[", "]", "\n", "manager", "=", "Manager", "(", ")", "\n", "speed_queue", "=", "manager", ".", "Queue", "(", "500", ")", "\n", "# set worker", "\n", "if", "num_gpu", "==", "0", ":", "\n", "            ", "self", ".", "worker", "(", "keys", ",", "all_devs", "[", "0", "]", ",", "self", ".", "dataset", ",", "speed_queue", ")", "\n", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS._get_all_elements": [[111, 131], ["numpy.array", "numpy.zeros", "enumerate", "PIL.Image.open", "obj_id.append", "len", "numpy.array", "PIL.Image.open", "numpy.array", "PIL.Image.open", "[].split", "numpy.array.split"], "methods", ["None"], ["                ", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "nr_video", "=", "math", ".", "ceil", "(", "nr_records", "/", "num_gpu", ")", "\n", "procs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gpu", ")", ":", "\n", "                ", "start", "=", "i", "*", "nr_video", "\n", "end", "=", "min", "(", "start", "+", "nr_video", ",", "nr_records", ")", "\n", "split_records", "=", "keys", "[", "start", ":", "end", "]", "\n", "proc", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "split_records", ",", "all_devs", "[", "i", "]", ",", "\n", "self", ".", "dataset", ",", "speed_queue", ")", ")", "\n", "logger", ".", "info", "(", "'process:%d, start:%d, end:%d'", "%", "(", "i", ",", "start", ",", "end", ")", ")", "\n", "proc", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "proc", ")", "\n", "", "for", "i", "in", "range", "(", "nr_records", ")", ":", "\n", "                ", "s", "=", "speed_queue", ".", "get", "(", ")", "\n", "speed_list", ".", "append", "(", "s", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "for", "p", "in", "procs", ":", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_all_images": [[132, 134], ["davis.DAVIS._get_all_elements"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS._get_all_elements"], ["                ", "p", ".", "join", "(", ")", "\n", "# print result", "\n", "", "", "mean_speed", "=", "float", "(", "np", ".", "mean", "(", "speed_list", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_all_masks": [[135, 151], ["davis.DAVIS._get_all_elements", "numpy.zeros_like", "range", "int", "numpy.ones", "numpy.max", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS._get_all_elements"], ["logger", ".", "info", "(", "'Mean Speed: {:.2f} FPS'", ".", "format", "(", "mean_speed", ")", ")", "\n", "self", ".", "_state", "[", "'speed'", "]", "=", "mean_speed", "\n", "\n", "", "def", "worker", "(", "self", ",", "records", ",", "dev", ",", "dataset", ",", "speed_queue", "=", "None", ")", ":", "\n", "        ", "tracker", "=", "self", ".", "_pipeline", "\n", "tracker", ".", "set_device", "(", "dev", ")", "\n", "for", "v_id", ",", "video", "in", "enumerate", "(", "records", ")", ":", "\n", "            ", "speed", "=", "self", ".", "track_single_video_vos", "(", "tracker", ",", "dataset", "[", "video", "]", ")", "\n", "if", "speed_queue", "is", "not", "None", ":", "\n", "                ", "speed_queue", ".", "put_nowait", "(", "speed", ")", "\n", "\n", "", "", "", "def", "evaluation", "(", "self", ",", "search_task_name", ")", ":", "\n", "        ", "r\"\"\"\n        Run evaluation & write result to csv file under self.tracker_dir\n        \"\"\"", "\n", "\n", "results_path", "=", "join", "(", "self", ".", "save_root_dir", ",", "'results_multi'", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_sequences": [[152, 155], ["None"], "methods", ["None"], ["davis_data_path", "=", "self", ".", "_hyper_params", "[", "\"data_root\"", "]", "\n", "\n", "eval_dump_path", "=", "join", "(", "self", ".", "save_root_dir", ",", "'dump'", ")", "\n", "if", "not", "isdir", "(", "eval_dump_path", ")", ":", "makedirs", "(", "eval_dump_path", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.db_eval_iou": [[7, 41], ["annotation.astype.astype", "segmentation.astype.astype", "numpy.sum", "numpy.sum", "np.zeros_like.astype", "numpy.zeros_like", "numpy.logical_not", "numpy.logical_not", "numpy.isclose", "numpy.isclose"], "function", ["None"], ["def", "center_error", "(", "rects1", ",", "rects2", ")", ":", "\n", "    ", "r\"\"\"Center error.\n\n    Args:\n        rects1 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        rects2 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n    \"\"\"", "\n", "centers1", "=", "rects1", "[", "...", ",", ":", "2", "]", "+", "(", "rects1", "[", "...", ",", "2", ":", "]", "-", "1", ")", "/", "2", "\n", "centers2", "=", "rects2", "[", "...", ",", ":", "2", "]", "+", "(", "rects2", "[", "...", ",", "2", ":", "]", "-", "1", ")", "/", "2", "\n", "errors", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "centers1", "-", "centers2", ",", "2", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "return", "errors", "\n", "\n", "\n", "", "def", "normalized_center_error", "(", "rects1", ",", "rects2", ")", ":", "\n", "    ", "r\"\"\"Center error normalized by the size of ground truth.\n\n    Args:\n        rects1 (numpy.ndarray): prediction box. An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        rects2 (numpy.ndarray): groudn truth box. An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n    \"\"\"", "\n", "centers1", "=", "rects1", "[", "...", ",", ":", "2", "]", "+", "(", "rects1", "[", "...", ",", "2", ":", "]", "-", "1", ")", "/", "2", "\n", "centers2", "=", "rects2", "[", "...", ",", ":", "2", "]", "+", "(", "rects2", "[", "...", ",", "2", ":", "]", "-", "1", ")", "/", "2", "\n", "errors", "=", "np", ".", "sqrt", "(", "\n", "np", ".", "sum", "(", "np", ".", "power", "(", "(", "centers1", "-", "centers2", ")", "/", "\n", "np", ".", "maximum", "(", "np", ".", "array", "(", "[", "[", "1.", ",", "1.", "]", "]", ")", ",", "rects2", "[", ":", ",", "2", ":", "]", ")", ",", "2", ")", ",", "\n", "axis", "=", "-", "1", ")", ")", "\n", "\n", "return", "errors", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.db_eval_boundary": [[43, 68], ["numpy.zeros", "range", "metrics.f_measure", "metrics.f_measure", "ValueError"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.f_measure", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.f_measure"], ["    ", "r\"\"\"Intersection over union.\n\n    Args:\n        rects1 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        rects2 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        bound (numpy.ndarray): A 4 dimensional array, denotes the bound\n            (min_left, min_top, max_width, max_height) for ``rects1`` and ``rects2``.\n    \"\"\"", "\n", "assert", "rects1", ".", "shape", "==", "rects2", ".", "shape", "\n", "if", "bound", "is", "not", "None", ":", "\n", "# bounded rects1", "\n", "        ", "rects1", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "rects1", "[", ":", ",", "0", "]", ",", "0", ",", "bound", "[", "0", "]", ")", "\n", "rects1", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "rects1", "[", ":", ",", "1", "]", ",", "0", ",", "bound", "[", "1", "]", ")", "\n", "rects1", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "rects1", "[", ":", ",", "2", "]", ",", "0", ",", "bound", "[", "0", "]", "-", "rects1", "[", ":", ",", "0", "]", ")", "\n", "rects1", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "rects1", "[", ":", ",", "3", "]", ",", "0", ",", "bound", "[", "1", "]", "-", "rects1", "[", ":", ",", "1", "]", ")", "\n", "# bounded rects2", "\n", "rects2", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "rects2", "[", ":", ",", "0", "]", ",", "0", ",", "bound", "[", "0", "]", ")", "\n", "rects2", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "rects2", "[", ":", ",", "1", "]", ",", "0", ",", "bound", "[", "1", "]", ")", "\n", "rects2", "[", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "rects2", "[", ":", ",", "2", "]", ",", "0", ",", "bound", "[", "0", "]", "-", "rects2", "[", ":", ",", "0", "]", ")", "\n", "rects2", "[", ":", ",", "3", "]", "=", "np", ".", "clip", "(", "rects2", "[", ":", ",", "3", "]", ",", "0", ",", "bound", "[", "1", "]", "-", "rects2", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "rects_inter", "=", "_intersection", "(", "rects1", ",", "rects2", ")", "\n", "areas_inter", "=", "np", ".", "prod", "(", "rects_inter", "[", "...", ",", "2", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.f_measure": [[70, 135], ["metrics._seg2bmap", "metrics._seg2bmap", "cv2.dilate", "cv2.dilate", "numpy.sum", "numpy.sum", "np.zeros_like().astype.astype", "numpy.zeros_like().astype", "numpy.ceil", "_seg2bmap.astype", "disk().astype", "_seg2bmap.astype", "disk().astype", "numpy.logical_not", "numpy.logical_not", "numpy.atleast_3d", "numpy.zeros_like", "numpy.linalg.norm", "disk", "disk", "numpy.sum", "float", "numpy.sum", "float"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics._seg2bmap", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics._seg2bmap"], ["areas2", "=", "np", ".", "prod", "(", "rects2", "[", "...", ",", "2", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "areas_union", "=", "areas1", "+", "areas2", "-", "areas_inter", "\n", "\n", "eps", "=", "np", ".", "finfo", "(", "float", ")", ".", "eps", "\n", "ious", "=", "areas_inter", "/", "(", "areas_union", "+", "eps", ")", "\n", "ious", "=", "np", ".", "clip", "(", "ious", ",", "0.0", ",", "1.0", ")", "\n", "\n", "return", "ious", "\n", "\n", "\n", "", "def", "_intersection", "(", "rects1", ",", "rects2", ")", ":", "\n", "    ", "r\"\"\"Rectangle intersection.\n\n    Args:\n        rects1 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n        rects2 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height).\n    \"\"\"", "\n", "assert", "rects1", ".", "shape", "==", "rects2", ".", "shape", "\n", "x1", "=", "np", ".", "maximum", "(", "rects1", "[", "...", ",", "0", "]", ",", "rects2", "[", "...", ",", "0", "]", ")", "\n", "y1", "=", "np", ".", "maximum", "(", "rects1", "[", "...", ",", "1", "]", ",", "rects2", "[", "...", ",", "1", "]", ")", "\n", "x2", "=", "np", ".", "minimum", "(", "rects1", "[", "...", ",", "0", "]", "+", "rects1", "[", "...", ",", "2", "]", ",", "\n", "rects2", "[", "...", ",", "0", "]", "+", "rects2", "[", "...", ",", "2", "]", ")", "\n", "y2", "=", "np", ".", "minimum", "(", "rects1", "[", "...", ",", "1", "]", "+", "rects1", "[", "...", ",", "3", "]", ",", "\n", "rects2", "[", "...", ",", "1", "]", "+", "rects2", "[", "...", ",", "3", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "x2", "-", "x1", ",", "0", ")", "\n", "h", "=", "np", ".", "maximum", "(", "y2", "-", "y1", ",", "0", ")", "\n", "\n", "return", "np", ".", "stack", "(", "[", "x1", ",", "y1", ",", "w", ",", "h", "]", ")", ".", "T", "\n", "\n", "\n", "", "def", "poly_iou", "(", "polys1", ",", "polys2", ",", "bound", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Intersection over union of polygons.\n\n    Args:\n        polys1 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height); or an N x 8 numpy array, each line represent\n            the coordinates (x1, y1, x2, y2, x3, y3, x4, y4) of 4 corners.\n        polys2 (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height); or an N x 8 numpy array, each line represent\n            the coordinates (x1, y1, x2, y2, x3, y3, x4, y4) of 4 corners.\n        bound (numpy.ndarray, optional): A 2 dimensional array, denotes the image bound\n            (width, height) for ``rects1`` and ``rects2``.\n    \"\"\"", "\n", "assert", "polys1", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "if", "polys1", ".", "ndim", "==", "1", ":", "\n", "        ", "polys1", "=", "np", ".", "array", "(", "[", "polys1", "]", ")", "\n", "polys2", "=", "np", ".", "array", "(", "[", "polys2", "]", ")", "\n", "", "assert", "len", "(", "polys1", ")", "==", "len", "(", "polys2", ")", "\n", "\n", "polys1", "=", "_to_polygon", "(", "polys1", ")", "\n", "polys2", "=", "_to_polygon", "(", "polys2", ")", "\n", "if", "bound", "is", "not", "None", ":", "\n", "        ", "bound", "=", "box", "(", "0", ",", "0", ",", "bound", "[", "0", "]", ",", "bound", "[", "1", "]", ")", "\n", "polys1", "=", "[", "p", ".", "intersection", "(", "bound", ")", "for", "p", "in", "polys1", "]", "\n", "polys2", "=", "[", "p", ".", "intersection", "(", "bound", ")", "for", "p", "in", "polys2", "]", "\n", "\n", "", "eps", "=", "np", ".", "finfo", "(", "float", ")", ".", "eps", "\n", "ious", "=", "[", "]", "\n", "for", "poly1", ",", "poly2", "in", "zip", "(", "polys1", ",", "polys2", ")", ":", "\n", "        ", "area_inter", "=", "poly1", ".", "intersection", "(", "poly2", ")", ".", "area", "\n", "area_union", "=", "poly1", ".", "union", "(", "poly2", ")", ".", "area", "\n", "ious", ".", "append", "(", "area_inter", "/", "(", "area_union", "+", "eps", ")", ")", "\n", "", "ious", "=", "np", ".", "clip", "(", "ious", ",", "0.0", ",", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics._seg2bmap": [[137, 194], ["seg.astype.astype", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "float", "float", "float", "float", "numpy.zeros", "range", "range", "numpy.atleast_3d", "abs", "math.floor", "math.floor", "numpy.np.uint8", "numpy.np.uint8"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.complex.abs"], ["return", "ious", "\n", "\n", "\n", "", "def", "_to_polygon", "(", "polys", ")", ":", "\n", "    ", "r\"\"\"Convert 4 or 8 dimensional array to Polygons\n\n    Args:\n        polys (numpy.ndarray): An N x 4 numpy array, each line represent a rectangle\n            (left, top, width, height); or an N x 8 numpy array, each line represent\n            the coordinates (x1, y1, x2, y2, x3, y3, x4, y4) of 4 corners.\n    \"\"\"", "\n", "def", "to_polygon", "(", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "in", "[", "4", ",", "8", "]", "\n", "if", "len", "(", "x", ")", "==", "4", ":", "\n", "            ", "return", "box", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "0", "]", "+", "x", "[", "2", "]", ",", "x", "[", "1", "]", "+", "x", "[", "3", "]", ")", "\n", "", "elif", "len", "(", "x", ")", "==", "8", ":", "\n", "            ", "return", "Polygon", "(", "[", "(", "x", "[", "2", "*", "i", "]", ",", "x", "[", "2", "*", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "\n", "", "", "if", "polys", ".", "ndim", "==", "1", ":", "\n", "        ", "return", "to_polygon", "(", "polys", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "to_polygon", "(", "t", ")", "for", "t", "in", "polys", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.results.Results.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.results.Results._read_mask": [[11, 23], ["os.path.join", "numpy.array", "PIL.Image.open", "sys.stdout.write", "sys.stdout.write", "sys.stderr.write", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write"], ["", "def", "_read_mask", "(", "self", ",", "sequence", ",", "frame_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "mask_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "sequence", ",", "\n", "'{}.png'", ".", "format", "(", "frame_id", ")", ")", "\n", "return", "np", ".", "array", "(", "Image", ".", "open", "(", "mask_path", ")", ")", "\n", "", "except", "IOError", "as", "err", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "sequence", "+", "\" frame %s not found!\\n\"", "%", "frame_id", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"The frames have to be indexed PNG files placed inside the corespondent sequence \"", "\n", "\"folder.\\nThe indexes have to match with the initial frame.\\n\"", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "\"IOError: \"", "+", "err", ".", "strerror", "+", "\"\\n\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.results.Results.read_masks": [[24, 34], ["results.Results._read_mask", "numpy.zeros", "enumerate", "int", "numpy.ones", "results.Results._read_mask", "numpy.max", "len", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.results.Results._read_mask", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.results.Results._read_mask"], ["", "", "def", "read_masks", "(", "self", ",", "sequence", ",", "masks_id", ")", ":", "\n", "        ", "mask_0", "=", "self", ".", "_read_mask", "(", "sequence", ",", "masks_id", "[", "0", "]", ")", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "len", "(", "masks_id", ")", ",", "*", "mask_0", ".", "shape", ")", ")", "\n", "for", "ii", ",", "m", "in", "enumerate", "(", "masks_id", ")", ":", "\n", "            ", "masks", "[", "ii", ",", "...", "]", "=", "self", ".", "_read_mask", "(", "sequence", ",", "m", ")", "\n", "", "num_objects", "=", "int", "(", "np", ".", "max", "(", "masks", ")", ")", "\n", "tmp", "=", "np", ".", "ones", "(", "(", "num_objects", ",", "*", "masks", ".", "shape", ")", ")", "\n", "tmp", "=", "tmp", "*", "np", ".", "arange", "(", "1", ",", "num_objects", "+", "1", ")", "[", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "masks", "=", "(", "tmp", "==", "masks", "[", "None", ",", "...", "]", ")", ">", "0", "\n", "return", "masks", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.__init__": [[22, 44], ["davis2017.davis.DAVIS"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "davis_root", ",", "\n", "task", ",", "\n", "gt_set", ",", "\n", "sequences", "=", "'all'", ",", "\n", "codalab", "=", "False", ",", "\n", "version", "=", "'2017'", ")", ":", "\n", "        ", "\"\"\"\n        Class to evaluate DAVIS sequences from a certain set and for a certain task\n        :param davis_root: Path to the DAVIS folder that contains JPEGImages, Annotations, etc. folders.\n        :param task: Task to compute the evaluation, chose between semi-supervised or unsupervised.\n        :param gt_set: Set to compute the evaluation\n        :param sequences: Sequences to consider for the evaluation, 'all' to use all the sequences in a set.\n        \"\"\"", "\n", "self", ".", "davis_root", "=", "davis_root", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "dataset", "=", "DAVIS", "(", "root", "=", "davis_root", ",", "\n", "task", "=", "task", ",", "\n", "subset", "=", "gt_set", ",", "\n", "sequences", "=", "sequences", ",", "\n", "codalab", "=", "codalab", ",", "\n", "version", "=", "version", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation._evaluate_semisupervised": [[45, 71], ["range", "sys.stdout.write", "sys.exit", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.concatenate", "davis2017.metrics.db_eval_iou", "davis2017.metrics.db_eval_boundary"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.db_eval_iou", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.db_eval_boundary"], ["", "@", "staticmethod", "\n", "def", "_evaluate_semisupervised", "(", "all_gt_masks", ",", "all_res_masks", ",", "all_void_masks", ",", "\n", "metric", ")", ":", "\n", "        ", "if", "all_res_masks", ".", "shape", "[", "0", "]", ">", "all_gt_masks", ".", "shape", "[", "0", "]", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\nIn your PNG files there is an index higher than the number of objects in the sequence!\"", "\n", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "all_res_masks", ".", "shape", "[", "0", "]", "<", "all_gt_masks", ".", "shape", "[", "0", "]", ":", "\n", "            ", "zero_padding", "=", "np", ".", "zeros", "(", "\n", "(", "all_gt_masks", ".", "shape", "[", "0", "]", "-", "all_res_masks", ".", "shape", "[", "0", "]", ",", "\n", "*", "all_res_masks", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "all_res_masks", "=", "np", ".", "concatenate", "(", "[", "all_res_masks", ",", "zero_padding", "]", ",", "\n", "axis", "=", "0", ")", "\n", "", "j_metrics_res", ",", "f_metrics_res", "=", "np", ".", "zeros", "(", "\n", "all_gt_masks", ".", "shape", "[", ":", "2", "]", ")", ",", "np", ".", "zeros", "(", "all_gt_masks", ".", "shape", "[", ":", "2", "]", ")", "\n", "for", "ii", "in", "range", "(", "all_gt_masks", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "'J'", "in", "metric", ":", "\n", "                ", "j_metrics_res", "[", "ii", ",", ":", "]", "=", "db_eval_iou", "(", "all_gt_masks", "[", "ii", ",", "...", "]", ",", "\n", "all_res_masks", "[", "ii", ",", "...", "]", ",", "\n", "all_void_masks", ")", "\n", "", "if", "'F'", "in", "metric", ":", "\n", "                ", "f_metrics_res", "[", "ii", ",", ":", "]", "=", "db_eval_boundary", "(", "all_gt_masks", "[", "ii", ",", "...", "]", ",", "\n", "all_res_masks", "[", "ii", ",", "...", "]", ",", "\n", "all_void_masks", ")", "\n", "", "", "return", "j_metrics_res", ",", "f_metrics_res", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation._evaluate_unsupervised": [[72, 113], ["numpy.zeros", "numpy.zeros", "range", "scipy.optimize.linear_sum_assignment", "sys.stdout.write", "sys.exit", "range", "numpy.zeros", "numpy.concatenate", "numpy.mean", "numpy.mean", "davis2017.metrics.db_eval_iou", "davis2017.metrics.db_eval_boundary", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.db_eval_iou", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.metrics.db_eval_boundary"], ["", "@", "staticmethod", "\n", "def", "_evaluate_unsupervised", "(", "all_gt_masks", ",", "\n", "all_res_masks", ",", "\n", "all_void_masks", ",", "\n", "metric", ",", "\n", "max_n_proposals", "=", "20", ")", ":", "\n", "        ", "if", "all_res_masks", ".", "shape", "[", "0", "]", ">", "max_n_proposals", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\nIn your PNG files there is an index higher than the maximum number ({}) of proposals allowed!\"", "\n", ".", "format", "(", "max_n_proposals", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "all_res_masks", ".", "shape", "[", "0", "]", "<", "all_gt_masks", ".", "shape", "[", "0", "]", ":", "\n", "            ", "zero_padding", "=", "np", ".", "zeros", "(", "\n", "(", "all_gt_masks", ".", "shape", "[", "0", "]", "-", "all_res_masks", ".", "shape", "[", "0", "]", ",", "\n", "*", "all_res_masks", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "all_res_masks", "=", "np", ".", "concatenate", "(", "[", "all_res_masks", ",", "zero_padding", "]", ",", "\n", "axis", "=", "0", ")", "\n", "", "j_metrics_res", "=", "np", ".", "zeros", "(", "(", "all_res_masks", ".", "shape", "[", "0", "]", ",", "all_gt_masks", ".", "shape", "[", "0", "]", ",", "\n", "all_gt_masks", ".", "shape", "[", "1", "]", ")", ")", "\n", "f_metrics_res", "=", "np", ".", "zeros", "(", "(", "all_res_masks", ".", "shape", "[", "0", "]", ",", "all_gt_masks", ".", "shape", "[", "0", "]", ",", "\n", "all_gt_masks", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "ii", "in", "range", "(", "all_gt_masks", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "jj", "in", "range", "(", "all_res_masks", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "'J'", "in", "metric", ":", "\n", "                    ", "j_metrics_res", "[", "jj", ",", "ii", ",", ":", "]", "=", "db_eval_iou", "(", "\n", "all_gt_masks", "[", "ii", ",", "...", "]", ",", "all_res_masks", "[", "jj", ",", "...", "]", ",", "\n", "all_void_masks", ")", "\n", "", "if", "'F'", "in", "metric", ":", "\n", "                    ", "f_metrics_res", "[", "jj", ",", "ii", ",", ":", "]", "=", "db_eval_boundary", "(", "\n", "all_gt_masks", "[", "ii", ",", "...", "]", ",", "all_res_masks", "[", "jj", ",", "...", "]", ",", "\n", "all_void_masks", ")", "\n", "", "", "", "if", "'J'", "in", "metric", "and", "'F'", "in", "metric", ":", "\n", "            ", "all_metrics", "=", "(", "np", ".", "mean", "(", "j_metrics_res", ",", "axis", "=", "2", ")", "+", "\n", "np", ".", "mean", "(", "f_metrics_res", ",", "axis", "=", "2", ")", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "all_metrics", "=", "np", ".", "mean", "(", "j_metrics_res", ",", "\n", "axis", "=", "2", ")", "if", "'J'", "in", "metric", "else", "np", ".", "mean", "(", "\n", "f_metrics_res", ",", "axis", "=", "2", ")", "\n", "", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "all_metrics", ")", "\n", "return", "j_metrics_res", "[", "row_ind", ",", "col_ind", ",", ":", "]", ",", "f_metrics_res", "[", "row_ind", ",", "\n", "col_ind", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation.evaluate": [[114, 166], ["davis2017.results.Results", "tqdm.tqdm.tqdm", "ValueError", "ValueError", "list", "davis_evaluation.DAVISEvaluation.dataset.get_all_masks", "davis2017.results.Results.read_masks", "range", "isinstance", "isinstance", "davis_evaluation.DAVISEvaluation.dataset.get_sequences", "davis_evaluation.DAVISEvaluation._evaluate_unsupervised", "sys.stdout.write", "sys.stdout.flush", "davis_evaluation.DAVISEvaluation._evaluate_semisupervised", "davis2017.utils.db_statistics", "[].append", "[].append", "[].append", "davis2017.utils.db_statistics", "[].append", "[].append", "[].append"], "methods", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_all_masks", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.results.Results.read_masks", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_sequences", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation._evaluate_unsupervised", "home.repos.pwc.inspect_result.fzh0917_sparsett.utils.image.ImageFileVideoWriter.write", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis_evaluation.DAVISEvaluation._evaluate_semisupervised", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.db_statistics", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.db_statistics"], ["", "def", "evaluate", "(", "self", ",", "res_path", ",", "metric", "=", "(", "'J'", ",", "'F'", ")", ",", "debug", "=", "False", ")", ":", "\n", "        ", "metric", "=", "metric", "if", "isinstance", "(", "metric", ",", "tuple", ")", "or", "isinstance", "(", "\n", "metric", ",", "list", ")", "else", "[", "metric", "]", "\n", "if", "'T'", "in", "metric", ":", "\n", "            ", "raise", "ValueError", "(", "'Temporal metric not supported!'", ")", "\n", "", "if", "'J'", "not", "in", "metric", "and", "'F'", "not", "in", "metric", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Metric possible values are J for IoU or F for Boundary'", ")", "\n", "\n", "# Containers", "\n", "", "metrics_res", "=", "{", "}", "\n", "if", "'J'", "in", "metric", ":", "\n", "            ", "metrics_res", "[", "'J'", "]", "=", "{", "\"M\"", ":", "[", "]", ",", "\"R\"", ":", "[", "]", ",", "\"D\"", ":", "[", "]", ",", "\"M_per_object\"", ":", "{", "}", "}", "\n", "", "if", "'F'", "in", "metric", ":", "\n", "            ", "metrics_res", "[", "'F'", "]", "=", "{", "\"M\"", ":", "[", "]", ",", "\"R\"", ":", "[", "]", ",", "\"D\"", ":", "[", "]", ",", "\"M_per_object\"", ":", "{", "}", "}", "\n", "\n", "# Sweep all sequences", "\n", "", "results", "=", "Results", "(", "root_dir", "=", "res_path", ")", "\n", "for", "seq", "in", "tqdm", "(", "list", "(", "self", ".", "dataset", ".", "get_sequences", "(", ")", ")", ")", ":", "\n", "            ", "all_gt_masks", ",", "all_void_masks", ",", "all_masks_id", "=", "self", ".", "dataset", ".", "get_all_masks", "(", "\n", "seq", ",", "True", ")", "\n", "if", "self", ".", "task", "==", "'semi-supervised'", ":", "\n", "                ", "all_gt_masks", ",", "all_masks_id", "=", "all_gt_masks", "[", ":", ",", "1", ":", "\n", "-", "1", ",", ":", ",", ":", "]", ",", "all_masks_id", "[", "\n", "1", ":", "-", "1", "]", "\n", "", "all_res_masks", "=", "results", ".", "read_masks", "(", "seq", ",", "all_masks_id", ")", "\n", "if", "self", ".", "task", "==", "'unsupervised'", ":", "\n", "                ", "j_metrics_res", ",", "f_metrics_res", "=", "self", ".", "_evaluate_unsupervised", "(", "\n", "all_gt_masks", ",", "all_res_masks", ",", "all_void_masks", ",", "metric", ")", "\n", "", "elif", "self", ".", "task", "==", "'semi-supervised'", ":", "\n", "                ", "j_metrics_res", ",", "f_metrics_res", "=", "self", ".", "_evaluate_semisupervised", "(", "\n", "all_gt_masks", ",", "all_res_masks", ",", "None", ",", "metric", ")", "\n", "", "for", "ii", "in", "range", "(", "all_gt_masks", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "seq_name", "=", "'{}_{}'", ".", "format", "(", "seq", ",", "ii", "+", "1", ")", "\n", "if", "'J'", "in", "metric", ":", "\n", "                    ", "[", "JM", ",", "JR", ",", "JD", "]", "=", "utils", ".", "db_statistics", "(", "j_metrics_res", "[", "ii", "]", ")", "\n", "metrics_res", "[", "'J'", "]", "[", "\"M\"", "]", ".", "append", "(", "JM", ")", "\n", "metrics_res", "[", "'J'", "]", "[", "\"R\"", "]", ".", "append", "(", "JR", ")", "\n", "metrics_res", "[", "'J'", "]", "[", "\"D\"", "]", ".", "append", "(", "JD", ")", "\n", "metrics_res", "[", "'J'", "]", "[", "\"M_per_object\"", "]", "[", "seq_name", "]", "=", "JM", "\n", "", "if", "'F'", "in", "metric", ":", "\n", "                    ", "[", "FM", ",", "FR", ",", "FD", "]", "=", "utils", ".", "db_statistics", "(", "f_metrics_res", "[", "ii", "]", ")", "\n", "metrics_res", "[", "'F'", "]", "[", "\"M\"", "]", ".", "append", "(", "FM", ")", "\n", "metrics_res", "[", "'F'", "]", "[", "\"R\"", "]", ".", "append", "(", "FR", ")", "\n", "metrics_res", "[", "'F'", "]", "[", "\"D\"", "]", ".", "append", "(", "FD", ")", "\n", "metrics_res", "[", "'F'", "]", "[", "\"M_per_object\"", "]", "[", "seq_name", "]", "=", "FM", "\n", "\n", "# Show progress", "\n", "", "", "if", "debug", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "seq", "+", "'\\n'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", "return", "metrics_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils._pascal_color_map": [[9, 33], ["numpy.zeros", "range", "range", "numpy.array", "utils._pascal_color_map.bitget"], "function", ["None"], ["\n", "\n", "class", "SafeLog", "(", "ModuleBase", ")", ":", "\n", "    ", "r\"\"\"\n    Safly perform log operation \n    \"\"\"", "\n", "default_hyper_params", "=", "dict", "(", ")", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SafeLog", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"t_eps\"", ",", "torch", ".", "tensor", "(", "eps", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "torch", ".", "log", "(", "torch", ".", "max", "(", "self", ".", "t_eps", ",", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.overlay_semantic_mask": [[35, 64], ["numpy.asarray", "im.copy", "numpy.asarray", "numpy.asarray", "ValueError", "ValueError", "utils._pascal_color_map", "numpy.unique", "cv2.drawContours", "cv2.findContours", "colors[].tolist"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.utils.tensorlist.TensorList.copy", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils._pascal_color_map"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.generate_obj_proposals": [[66, 101], ["davis2017.davis.DAVIS", "davis2017.davis.DAVIS.get_sequences", "os.path.join", "os.path.exists", "davis2017.davis.DAVIS.get_all_masks", "int", "numpy.zeros", "numpy.floor().astype().tolist", "numpy.floor().astype().tolist", "os.makedirs", "enumerate", "numpy.ceil", "numpy.sum", "utils.save_mask", "numpy.sqrt", "len", "numpy.floor().astype", "numpy.floor().astype", "os.path.join", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_sequences", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_all_masks", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.save_mask"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.generate_random_permutation_gt_obj_proposals": [[103, 116], ["davis2017.davis.DAVIS", "davis2017.davis.DAVIS.get_sequences", "davis2017.davis.DAVIS.get_all_masks", "numpy.random.permutation", "os.path.join", "os.makedirs", "enumerate", "numpy.arange", "numpy.sum", "utils.save_mask", "os.path.join", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_sequences", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.davis.DAVIS.get_all_masks", "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.save_mask"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.color_map": [[118, 137], ["numpy.zeros", "range", "range", "numpy.array", "utils._pascal_color_map.bitget"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.save_mask": [[139, 145], ["PIL.Image.fromarray", "Image.fromarray.putpalette", "Image.fromarray.save", "numpy.max", "ValueError", "mask.astype", "color_map().flatten().tolist", "color_map().flatten", "utils.color_map"], "function", ["home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.color_map"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.db_statistics": [[147, 175], ["ids.astype.astype", "warnings.catch_warnings", "warnings.simplefilter", "numpy.nanmean", "numpy.nanmean", "numpy.round", "warnings.catch_warnings", "warnings.simplefilter", "range", "numpy.nanmean", "numpy.nanmean", "numpy.linspace", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.list_files": [[177, 181], ["os.path.splitext", "os.listdir", "file_.endswith"], "function", ["None"], []], "home.repos.pwc.inspect_result.fzh0917_sparsett.davis2017.utils.force_symlink": [[184, 191], ["os.symlink", "os.symlink", "os.remove"], "function", ["None"], []]}