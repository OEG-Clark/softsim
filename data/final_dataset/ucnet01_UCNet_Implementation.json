{"home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.MixNet.__init__": [[45, 73], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "LSTM_Comments_Avg_Net.MixNet.parameters", "LSTM_Comments_Avg_Net.MixNet.init_state", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state"], ["\t", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "hidden_dim", ",", "target_size", ",", "features_size", ",", "fakeness_vectors_size", ",", "num_layers", "=", "1", ",", "directions", "=", "default_directions", ",", "batch_size", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "MixNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "directions", "==", "1", "or", "directions", "==", "2", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "directions", "=", "directions", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "fakeness_vectors_size", "=", "fakeness_vectors_size", "\n", "hidden2_size", "=", "4", "#int((directions*hidden_dim + features_size)**0.5)", "\n", "\n", "bidirectional", "=", "False", "\n", "if", "directions", "==", "2", ":", "\n", "\t\t\t", "bidirectional", "=", "True", "\n", "\n", "", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "hidden_dim", ",", "num_layers", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "fakeness_vector_to_weight", "=", "nn", ".", "Linear", "(", "self", ".", "fakeness_vectors_size", ",", "1", ")", "\n", "self", ".", "hidden1_to_hidden2", "=", "nn", ".", "Linear", "(", "directions", "*", "hidden_dim", "+", "features_size", ",", "hidden2_size", ")", "\n", "self", ".", "hidden2_to_target", "=", "nn", ".", "Linear", "(", "hidden2_size", ",", "target_size", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "weight_init", ".", "xavier_normal", "(", "param", ".", "data", ")", "\n", "", "except", "ValueError", ":", "\n", "\t\t\t\t", "weight_init", ".", "constant", "(", "param", ".", "data", ",", "0", ")", "\n", "\n", "", "", "self", ".", "init_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.MixNet.init_state": [[74, 78], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_state", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "hidden_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "cell_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "state", "=", "(", "self", ".", "hidden_state", ",", "self", ".", "cell_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.MixNet.forward": [[79, 104], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "zip", "features_tweet.view.view.view", "avg_of_comments.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "LSTM_Comments_Avg_Net.MixNet.hidden2_to_target", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "LSTM_Comments_Avg_Net.MixNet.lstm", "fakeness_vector.view.view.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "weight.expand_as.expand_as.expand_as", "LSTM_Comments_Avg_Net.MixNet.init_state", "max", "LSTM_Comments_Avg_Net.MixNet.hidden1_to_hidden2", "comment.view", "LSTM_Comments_Avg_Net.MixNet.fakeness_vector_to_weight", "len"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state"], ["", "def", "forward", "(", "self", ",", "comments", ",", "fakeness_vectors", ",", "features_tweet", ")", ":", "\n", "# avg_of_comments = autograd.Variable(torch.zeros(self.directions*self.embedding_dim))", "\n", "\t\t", "avg_of_comments", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "directions", "*", "self", ".", "embedding_dim", ")", ")", "\n", "i", "=", "0", "\n", "for", "comment", ",", "fakeness_vector", "in", "zip", "(", "comments", ",", "fakeness_vectors", ")", ":", "\n", "\t\t\t", "i", "+=", "1", "\n", "lstm_out", ",", "self", ".", "state", "=", "self", ".", "lstm", "(", "comment", ".", "view", "(", "len", "(", "comment", ")", ",", "self", ".", "batch_size", ",", "self", ".", "embedding_dim", ")", ",", "self", ".", "state", ")", "\n", "fakeness_vector", "=", "fakeness_vector", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "weight", "=", "F", ".", "sigmoid", "(", "self", ".", "fakeness_vector_to_weight", "(", "fakeness_vector", ")", ")", "\n", "lstm_last", "=", "lstm_out", "[", "-", "1", "]", "\n", "weight", "=", "weight", ".", "expand_as", "(", "lstm_last", ")", "\n", "# print(avg_of_comments.size(), lstm_last.size(), weight.size(), file=sys.stderr)", "\n", "avg_of_comments", "+=", "lstm_last", "*", "weight", "\n", "self", ".", "init_state", "(", ")", "\n", "", "avg_of_comments", "=", "avg_of_comments", "/", "max", "(", "i", ",", "1", ")", "\n", "\n", "features_tweet", "=", "features_tweet", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "avg_of_comments", "=", "avg_of_comments", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "lstm_concate_features", "=", "torch", ".", "cat", "(", "[", "avg_of_comments", ",", "features_tweet", "]", ",", "dim", "=", "1", ")", "\n", "\n", "hidden2", "=", "F", ".", "relu", "(", "self", ".", "hidden1_to_hidden2", "(", "lstm_concate_features", ")", ")", "\n", "target_space", "=", "self", ".", "hidden2_to_target", "(", "hidden2", ")", "\n", "target_scores", "=", "F", ".", "log_softmax", "(", "target_space", ")", "\n", "\n", "return", "target_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.MixNet.get_comment_embeddings": [[105, 119], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "zip", "torch.Variable.data.tolist", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "LSTM_Comments_Avg_Net.MixNet.lstm", "fakeness_vector.view.view.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "weight.expand_as.expand_as.expand_as", "LSTM_Comments_Avg_Net.MixNet.init_state", "max", "comment.view", "LSTM_Comments_Avg_Net.MixNet.fakeness_vector_to_weight", "len"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state"], ["", "def", "get_comment_embeddings", "(", "self", ",", "comments", ",", "fakeness_vectors", ")", ":", "\n", "\t\t", "avg_of_comments", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "directions", "*", "self", ".", "embedding_dim", ")", ")", "\n", "i", "=", "0", "\n", "for", "comment", ",", "fakeness_vector", "in", "zip", "(", "comments", ",", "fakeness_vectors", ")", ":", "\n", "\t\t\t", "i", "+=", "1", "\n", "lstm_out", ",", "self", ".", "state", "=", "self", ".", "lstm", "(", "comment", ".", "view", "(", "len", "(", "comment", ")", ",", "self", ".", "batch_size", ",", "self", ".", "embedding_dim", ")", ",", "self", ".", "state", ")", "\n", "fakeness_vector", "=", "fakeness_vector", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "weight", "=", "F", ".", "sigmoid", "(", "self", ".", "fakeness_vector_to_weight", "(", "fakeness_vector", ")", ")", "\n", "lstm_last", "=", "lstm_out", "[", "-", "1", "]", "\n", "weight", "=", "weight", ".", "expand_as", "(", "lstm_last", ")", "\n", "avg_of_comments", "+=", "lstm_last", "*", "weight", "\n", "self", ".", "init_state", "(", ")", "\n", "", "avg_of_comments", "=", "avg_of_comments", "/", "max", "(", "i", ",", "1", ")", "\n", "return", "avg_of_comments", ".", "data", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.prepare_vector": [[123, 126], ["torch.Variable", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "prepare_vector", "(", "inputVec", ")", ":", "\n", "\t", "ret", "=", "autograd", ".", "Variable", "(", "torch", ".", "Tensor", "(", "inputVec", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.prepare_target": [[127, 130], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Variable"], "function", ["None"], ["", "def", "prepare_target", "(", "target_ids", ")", ":", "\n", "\t", "tensor", "=", "torch", ".", "LongTensor", "(", "[", "target_ids", "]", ")", "\n", "return", "autograd", ".", "Variable", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.trainNet": [[131, 181], ["torch.Adam", "range", "model.parameters", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "LSTM_Comments_Avg_Net.testNet", "LSTM_Comments_Avg_Net.testNet", "print", "print", "print", "print", "print", "print", "LSTM_Comments_Avg_Net.testNet", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.zero_grad", "model.init_state", "zip", "LSTM_Comments_Avg_Net.prepare_vector", "LSTM_Comments_Avg_Net.prepare_target", "model", "loss_function", "loss_function.backward", "optim.Adam.step", "model.state_dict", "os.path.join", "comments_in.append", "fakeness_vectors_in.append", "LSTM_Comments_Avg_Net.prepare_vector", "LSTM_Comments_Avg_Net.prepare_vector"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.testNet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.testNet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.testNet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["", "def", "trainNet", "(", "training_data", ",", "testing_data_annotations", ",", "testing_data_fvc", ")", ":", "\n", "# optimizer = optim.SGD([", "\n", "#                 {'params': model.hidden1_to_hidden2.parameters(), 'lr': 1e-2},", "\n", "#                 {'params': model.hidden2_to_target.parameters(), 'lr': 1e-2}", "\n", "#             ], lr=5*1e-4, weight_decay = 1e-5, momentum=0.9)", "\n", "\n", "\n", "# optimizer = optim.Adam(model.parameters(), lr=0.0005, weight_decay=1e-5)", "\n", "\n", "\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "\t\t", "print", "(", "\"************** Epoch {} **************\"", ".", "format", "(", "epoch", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "avg_loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "num_training", "=", "0", "\n", "for", "(", "(", "comments", ",", "fakeness_vectors", ")", ",", "features", ")", ",", "target", "in", "training_data", ":", "\n", "\t\t\t", "num_training", "+=", "1", "\n", "model", ".", "zero_grad", "(", ")", "\n", "model", ".", "init_state", "(", ")", "\n", "\n", "comments_in", "=", "[", "]", "\n", "fakeness_vectors_in", "=", "[", "]", "\n", "for", "comment", ",", "fakeness_vector", "in", "zip", "(", "comments", ",", "fakeness_vectors", ")", ":", "\n", "\t\t\t\t", "comments_in", ".", "append", "(", "prepare_vector", "(", "comment", ")", ")", "\n", "fakeness_vectors_in", ".", "append", "(", "prepare_vector", "(", "fakeness_vector", ")", ")", "\n", "\n", "", "features_in", "=", "prepare_vector", "(", "features", ")", "\n", "target_actual", "=", "prepare_target", "(", "target", ")", "\n", "\n", "target_predicted_scores", "=", "model", "(", "comments_in", ",", "fakeness_vectors_in", ",", "features_in", ")", "\n", "\n", "loss", "=", "loss_function", "(", "target_predicted_scores", ",", "target_actual", ")", "\n", "avg_loss", "+=", "loss", ".", "data", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "loss_training", "=", "avg_loss", "/", "num_training", "\n", "loss_testing_annotations", "=", "testNet", "(", "testing_data_annotations", ",", "for_validation", "=", "True", ")", "\n", "loss_testing_fvc", "=", "testNet", "(", "testing_data_fvc", ",", "for_validation", "=", "True", ")", "\n", "\n", "print", "(", "\"Epoch {} : Average training loss: \"", ".", "format", "(", "epoch", ")", ",", "loss_training", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "\"Epoch {} : Average testing on annotation loss: \"", ".", "format", "(", "epoch", ")", ",", "loss_testing_annotations", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "\"Epoch {} : Average testing on fvc loss: \"", ".", "format", "(", "epoch", ")", ",", "loss_testing_fvc", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "print", "(", "\"Epoch {} : Average training loss: \"", ".", "format", "(", "epoch", ")", ",", "loss_training", ")", "\n", "print", "(", "\"Epoch {} : Average testing on annotation loss: \"", ".", "format", "(", "epoch", ")", ",", "loss_testing_annotations", ")", "\n", "print", "(", "\"Epoch {} : Average testing on fvc loss: \"", ".", "format", "(", "epoch", ")", ",", "loss_testing_fvc", ")", "\n", "\n", "testNet", "(", "testing_data_annotations", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "models_dir", ",", "'CommentAvgNet_epoch_{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.testNet": [[183, 236], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "sklearn.metrics.confusion_matrix", "print", "print", "print", "print", "print", "print", "int", "zip", "LSTM_Comments_Avg_Net.prepare_vector", "model", "round", "comments_in.append", "fakeness_vectors_in.append", "LSTM_Comments_Avg_Net.prepare_target", "loss_function", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "y_true_list.append", "predicted.tolist", "y_predicted_list.append", "LSTM_Comments_Avg_Net.prepare_vector", "LSTM_Comments_Avg_Net.prepare_vector"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["", "", "def", "testNet", "(", "testing_data", ",", "for_validation", "=", "False", ")", ":", "\n", "\t", "y_true_list", "=", "[", "]", "\n", "y_predicted_list", "=", "[", "]", "\n", "avg_loss", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "num", "=", "0", "\n", "for", "(", "(", "comments", ",", "fakeness_vectors", ")", ",", "features", ")", ",", "target", "in", "testing_data", ":", "\n", "\t\t", "num", "+=", "1", "\n", "\n", "comments_in", "=", "[", "]", "\n", "fakeness_vectors_in", "=", "[", "]", "\n", "for", "comment", ",", "fakeness_vector", "in", "zip", "(", "comments", ",", "fakeness_vectors", ")", ":", "\n", "\t\t\t", "comments_in", ".", "append", "(", "prepare_vector", "(", "comment", ")", ")", "\n", "fakeness_vectors_in", ".", "append", "(", "prepare_vector", "(", "fakeness_vector", ")", ")", "\n", "\n", "", "features_in", "=", "prepare_vector", "(", "features", ")", "\n", "\n", "y_predicted", "=", "model", "(", "comments_in", ",", "fakeness_vectors_in", ",", "features_in", ")", "\n", "\n", "if", "for_validation", ":", "\n", "\t\t\t", "target_actual", "=", "prepare_target", "(", "target", ")", "\n", "loss", "=", "loss_function", "(", "y_predicted", ",", "target_actual", ")", "\n", "avg_loss", "+=", "loss", ".", "data", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "_", ",", "predicted", "=", "torch", ".", "max", "(", "y_predicted", ".", "data", ",", "1", ")", "\n", "\n", "y_true", "=", "target", "\n", "y_true_list", ".", "append", "(", "y_true", ")", "\n", "\n", "# print(predicted)", "\n", "\n", "y_predicted", "=", "predicted", ".", "tolist", "(", ")", "#[0][0]", "\n", "y_predicted_list", ".", "append", "(", "y_predicted", ")", "\n", "\n", "", "", "if", "for_validation", ":", "\n", "\t\t", "avg_loss", "=", "avg_loss", "/", "num", "\n", "return", "avg_loss", "\n", "\n", "\n", "", "matrix", "=", "confusion_matrix", "(", "y_true_list", ",", "y_predicted_list", ")", "\n", "accuracy", "=", "(", "100", "*", "(", "matrix", "[", "0", "]", "[", "0", "]", "+", "matrix", "[", "1", "]", "[", "1", "]", ")", ")", "/", "(", "matrix", "[", "0", "]", "[", "0", "]", "+", "matrix", "[", "0", "]", "[", "1", "]", "+", "matrix", "[", "1", "]", "[", "0", "]", "+", "matrix", "[", "1", "]", "[", "1", "]", ")", "\n", "print", "(", "\"Accuracy:\"", ",", "accuracy", ")", "\n", "print", "(", ")", "\n", "print", "(", "matrix", ")", "\n", "# report = classification_report(y_true_list, y_predicted_list)", "\n", "# print(report)", "\n", "\n", "print", "(", "\"Accuracy:\"", ",", "accuracy", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "\"\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "matrix", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "# print(report, file=sys.stderr)", "\n", "\n", "return", "int", "(", "round", "(", "accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.load_x_y": [[242, 254], ["os.path.join", "pickle.load", "open", "ClassesAndUtil.Dataset.Dataset", "features.get_x_y", "pickle.dump", "os.path.join.format", "open"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.features.get_x_y"], ["def", "load_x_y", "(", "video_id_file", ",", "annotations", ")", ":", "\n", "# models_dir = 'NeuralModelsExtraFeatures'", "\n", "\t", "pickle_name", "=", "os", ".", "path", ".", "join", "(", "models_dir", ",", "'X_Y_{}_All_Features'", ".", "format", "(", "annotations", ")", ")", "\n", "try", ":", "\n", "# raise FileNotFoundError", "\n", "\t\t", "X", ",", "Y", ",", "known_videos", "=", "pkl", ".", "load", "(", "open", "(", "pickle_name", ".", "format", "(", "annotations", ")", ",", "'rb'", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "\t\t", "dataset_all", "=", "Dataset", "(", "video_id_file", ",", "onlyAnnotated", "=", "True", ",", "annotations", "=", "annotations", ")", "\n", "known_videos", "=", "[", "v", "for", "v", "in", "dataset_all", ".", "all_crawled_videos", "if", "v", ".", "gold_standard", "!=", "2", "]", "\n", "X", ",", "Y", "=", "get_x_y", "(", "known_videos", ",", "feature_names", ")", "\n", "pkl", ".", "dump", "(", "(", "X", ",", "Y", ",", "known_videos", ")", ",", "open", "(", "pickle_name", ",", "'wb'", ")", ")", "\n", "", "return", "X", ",", "Y", ",", "known_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.load_annotated_dataset": [[257, 285], ["os.path.join().format", "pickle.load", "os.path.join", "open", "LSTM_Comments_Avg_Net.load_x_y", "len", "list", "pickle.dump", "video.get_iterator_comments", "embeddings_all_videos.append", "fakeness_vectors_all_videos.append", "zip", "open", "TweetClassifier.textUtils.TextFeaturesExtractor", "TweetClassifier.textUtils.TextFeaturesExtractor.getFakeness", "list", "comment.getText", "embeddings.append", "fakeness_vectors.append", "zip", "TweetClassifier.textUtils.TextFeaturesExtractor.getEmbeddingList", "TweetClassifier.textUtils.TextFeaturesExtractor.getFakenessVector"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.load_x_y", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_iterator_comments", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getFakeness", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.getText", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getEmbeddingList", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getFakenessVector"], ["", "def", "load_annotated_dataset", "(", "video_id_file", ",", "annotations", ")", ":", "\n", "\t", "pickle_name", "=", "os", ".", "path", ".", "join", "(", "models_dir", ",", "'X_Y_{}_Comments_Avg_All_Features.pkl'", ")", ".", "format", "(", "annotations", ")", "\n", "try", ":", "\n", "# raise FileNotFoundError", "\n", "\t\t", "X", ",", "Y", "=", "pkl", ".", "load", "(", "open", "(", "pickle_name", ",", "'rb'", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "\t\t", "X", ",", "Y", ",", "known_videos", "=", "load_x_y", "(", "video_id_file", ",", "annotations", ")", "\n", "\n", "embeddings_all_videos", "=", "[", "]", "\n", "fakeness_vectors_all_videos", "=", "[", "]", "\n", "for", "video", "in", "known_videos", ":", "\n", "\t\t\t", "embeddings", "=", "[", "]", "\n", "fakeness_vectors", "=", "[", "]", "\n", "for", "comment", "in", "video", ".", "get_iterator_comments", "(", "max_comments", "=", "100", ")", ":", "\n", "\t\t\t\t", "tfe", "=", "TextFeaturesExtractor", "(", "comment", ".", "getText", "(", ")", ")", "\n", "if", "tfe", ".", "getFakeness", "(", ")", ":", "\n", "\t\t\t\t\t", "embeddings", ".", "append", "(", "tfe", ".", "getEmbeddingList", "(", ")", ")", "\n", "fakeness_vectors", ".", "append", "(", "tfe", ".", "getFakenessVector", "(", ")", ")", "\n", "", "", "embeddings_all_videos", ".", "append", "(", "embeddings", ")", "\n", "fakeness_vectors_all_videos", ".", "append", "(", "fakeness_vectors", ")", "\n", "\n", "", "num_features", "=", "len", "(", "X", "[", "0", "]", ")", "\n", "\n", "X", "=", "list", "(", "zip", "(", "list", "(", "zip", "(", "embeddings_all_videos", ",", "fakeness_vectors_all_videos", ")", ")", ",", "X", ")", ")", "\n", "\n", "pkl", ".", "dump", "(", "(", "X", ",", "Y", ")", ",", "open", "(", "pickle_name", ",", "'wb'", ")", ")", "\n", "\n", "", "return", "(", "X", ",", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.train_on_annotations": [[286, 316], ["LSTM_Comments_Avg_Net.load_annotated_dataset", "LSTM_Comments_Avg_Net.load_annotated_dataset", "print", "print", "print", "print", "LSTM_Comments_Avg_Net.MixNet", "list", "list", "list", "LSTM_Comments_Avg_Net.trainNet", "LSTM_Comments_Avg_Net.testNet", "len", "len", "len", "zip", "zip", "zip", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.load_annotated_dataset", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.load_annotated_dataset", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.trainNet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.testNet"], ["", "def", "train_on_annotations", "(", "video_id_file_annot", ",", "video_id_file_fvc", ",", "train_annotations", ",", "test_annotations", ")", ":", "\n", "\t", "global", "model", "\n", "X", ",", "Y", "=", "load_annotated_dataset", "(", "video_id_file_annot", ",", "train_annotations", ")", "\n", "X_fvc", ",", "Y_fvc", "=", "load_annotated_dataset", "(", "video_id_file_fvc", ",", "test_annotations", ")", "\n", "\n", "X_train", "=", "X", "\n", "Y_train", "=", "Y", "\n", "\n", "X_test", "=", "X_fvc", "\n", "Y_test", "=", "Y_fvc", "\n", "\n", "\n", "\n", "\n", "# X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)", "\n", "\n", "print", "(", "\"Train on:\"", ",", "len", "(", "X_train", ")", ")", "\n", "print", "(", "\"Test on:\"", ",", "len", "(", "X_test", ")", ")", "\n", "\n", "print", "(", "\"Total number of fake videos in train set: {}\"", ".", "format", "(", "sum", "(", "Y_train", ")", ")", ")", "\n", "print", "(", "\"Total number of fake videos in test set: {}\"", ".", "format", "(", "sum", "(", "Y_test", ")", ")", ")", "\n", "\n", "model", "=", "MixNet", "(", "300", ",", "300", ",", "2", ",", "len", "(", "X", "[", "0", "]", "[", "1", "]", ")", ",", "fakeness_vectors_size", ")", "\n", "\n", "training_data", "=", "list", "(", "zip", "(", "X_train", ",", "Y_train", ")", ")", "\n", "testing_data_annotations", "=", "list", "(", "zip", "(", "X_test", ",", "Y_test", ")", ")", "\n", "testing_data_fvc", "=", "list", "(", "zip", "(", "X_fvc", ",", "Y_fvc", ")", ")", "\n", "\n", "trainNet", "(", "training_data", ",", "testing_data_annotations", ",", "testing_data_fvc", ")", "\n", "testNet", "(", "testing_data_annotations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.test_on_fvc": [[317, 320], ["LSTM_Comments_Avg_Net.load_annotated_dataset", "LSTM_Comments_Avg_Net.testNet", "list", "zip"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.load_annotated_dataset", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.testNet"], ["", "def", "test_on_fvc", "(", "video_id_file", ")", ":", "\n", "\t", "X", ",", "Y", "=", "load_annotated_dataset", "(", "video_id_file", ",", "'fvc'", ")", "\n", "return", "testNet", "(", "list", "(", "zip", "(", "X", ",", "Y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.get_comment_embeddings": [[322, 348], ["LSTM_Comments_Avg_Net.load_annotated_dataset", "os.path.join", "LSTM_Comments_Avg_Net.MixNet", "MixNet.load_state_dict", "zip", "os.path.join", "pickle.dump", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "zip", "LSTM_Comments_Avg_Net.MixNet.get_comment_embeddings", "all_embeddings_and_target.append", "open", "comments_in.append", "fakeness_vectors_in.append", "LSTM_Comments_Avg_Net.prepare_vector", "LSTM_Comments_Avg_Net.prepare_vector"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.load_annotated_dataset", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.LSTM_Comments_Avg_Net.get_comment_embeddings", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["", "def", "get_comment_embeddings", "(", "video_id_file", ",", "annotations", ",", "epoch", ")", ":", "\n", "\t", "X", ",", "Y", "=", "load_annotated_dataset", "(", "video_id_file", ",", "annotations", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "models_dir", ",", "'CommentAvgNet_epoch_{}.pt'", ".", "format", "(", "epoch", ")", ")", "#os.path.join(models_dir, 'CommentAvgNet_epoch_8.pt')", "\n", "model", "=", "MixNet", "(", "300", ",", "300", ",", "2", ",", "len", "(", "X", "[", "0", "]", "[", "1", "]", ")", ",", "fakeness_vectors_size", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n", "\n", "all_embeddings_and_target", "=", "[", "]", "\n", "num", "=", "0", "\n", "for", "(", "(", "comments", ",", "fakeness_vectors", ")", ",", "features", ")", ",", "target", "in", "zip", "(", "X", ",", "Y", ")", ":", "\n", "\t\t", "num", "+=", "1", "\n", "print", "(", "num", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "comments_in", "=", "[", "]", "\n", "fakeness_vectors_in", "=", "[", "]", "\n", "for", "comment", ",", "fakeness_vector", "in", "zip", "(", "comments", ",", "fakeness_vectors", ")", ":", "\n", "\t\t\t", "comments_in", ".", "append", "(", "prepare_vector", "(", "comment", ")", ")", "\n", "fakeness_vectors_in", ".", "append", "(", "prepare_vector", "(", "fakeness_vector", ")", ")", "\n", "\n", "", "embedding_for_comments", "=", "model", ".", "get_comment_embeddings", "(", "comments_in", ",", "fakeness_vectors_in", ")", "\n", "all_embeddings_and_target", ".", "append", "(", "(", "embedding_for_comments", ",", "target", ")", ")", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "models_dir", ",", "'Comment_Embeddings_And_Target_{}_Attention_Extra_Hidden_Layer_VAVD.pkl'", ".", "format", "(", "annotations", ")", ")", "\n", "\n", "pkl", ".", "dump", "(", "all_embeddings_and_target", ",", "open", "(", "filename", ",", "'wb'", ")", ")", "\n", "return", "all_embeddings_and_target", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.get_x": [[51, 107], ["print", "features.append", "ClassesAndUtil.ratio_violent_words", "features.append", "video.get_title", "ClassesAndUtil.ratio_caps", "features.append", "video.get_title", "int", "features.append", "ClassesAndUtil.has_clickbait_phrase", "int", "video.get_comments_fakeness", "features.append", "video.get_title", "features.append", "video.get_num_comments", "features.append", "max", "int", "features.append", "video.get_dislike_count", "video.get_like_count", "ClassesAndUtil.first_word_capital", "video.get_comments_inappropriateness", "features.append", "video.get_title", "video.get_conversation_ratio", "video.get_title", "TweetClassifier.getTweets.embedding_list", "TweetClassifier.classifierMixed.prepare_vector", "TweetClassifier.getTweets.features_tweet", "TweetClassifier.classifierMixed.prepare_vector", "features.append", "video.get_description", "TweetClassifier.getTweets.embedding_list", "TweetClassifier.classifierMixed.prepare_vector", "TweetClassifier.getTweets.features_tweet", "TweetClassifier.classifierMixed.prepare_vector", "features.append", "tweet_classfier_mixnet().data.tolist", "tweet_classfier_mixnet().data.tolist", "tweet_classfier_mixnet", "tweet_classfier_mixnet"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.ratio_violent_words", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.ratio_caps", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.has_clickbait_phrase", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_comments_fakeness", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_num_comments", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_dislike_count", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_like_count", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.first_word_capital", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_comments_inappropriateness", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_conversation_ratio", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.embedding_list", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.features_tweet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_description", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.embedding_list", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.features_tweet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["def", "get_x", "(", "video", ",", "feature_names", ")", ":", "\n", "\t", "features", "=", "[", "]", "\n", "for", "feature", "in", "feature_names", ":", "\n", "\t\t", "if", "RATIO_VIOLENT_WORDS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "textProcessor", ".", "ratio_violent_words", "(", "video", ".", "get_title", "(", ")", ")", ")", "\n", "", "elif", "RATIO_CAPS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "textProcessor", ".", "ratio_caps", "(", "video", ".", "get_title", "(", ")", ")", ")", "\n", "", "elif", "HAS_CLICKBAIT_PHRASE", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "int", "(", "textProcessor", ".", "has_clickbait_phrase", "(", "video", ".", "get_title", "(", ")", ")", ")", ")", "\n", "\n", "", "elif", "HAS_COMMENTS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "int", "(", "video", ".", "get_num_comments", "(", ")", "==", "0", ")", ")", "\n", "", "elif", "COMMENTS_FAKENESS", "==", "feature", ":", "\n", "\t\t\t", "fakeness", "=", "video", ".", "get_comments_fakeness", "(", "max_comments", "=", "MAX_COMMENTS", ")", "\n", "features", ".", "append", "(", "fakeness", ")", "\n", "\n", "", "elif", "DISLIKE_LIKE_RATIO", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "(", "1.0", "*", "video", ".", "get_dislike_count", "(", ")", ")", "/", "max", "(", "1", ",", "video", ".", "get_like_count", "(", ")", ")", ")", "\n", "\n", "\n", "", "elif", "FIRST_WORD_CAPS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "int", "(", "textProcessor", ".", "first_word_capital", "(", "video", ".", "get_title", "(", ")", ")", ")", ")", "\n", "", "elif", "COMMENTS_INAPPROPRIATENESS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "video", ".", "get_comments_inappropriateness", "(", "max_comments", "=", "MAX_COMMENTS", ")", ")", "\n", "", "elif", "COMMENTS_CONVERSATION_RATIO", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "video", ".", "get_conversation_ratio", "(", "recursive", "=", "False", ",", "max_comments", "=", "MAX_COMMENTS", ")", ")", "\n", "\n", "\n", "", "elif", "TWEET_CLASSIFIER_TITLE", "==", "feature", ":", "\n", "\t\t\t", "tweetText", "=", "video", ".", "get_title", "(", ")", "\n", "\n", "sentence", "=", "embedding_list", "(", "tweetText", ")", "\n", "sentence_in", "=", "classifierMixed", ".", "prepare_vector", "(", "sentence", ")", "\n", "\n", "tweet_features", "=", "features_tweet", "(", "tweetText", ")", "\n", "features_in", "=", "classifierMixed", ".", "prepare_vector", "(", "tweet_features", ")", "\n", "\n", "features", ".", "append", "(", "tweet_classfier_mixnet", "(", "sentence_in", ",", "features_in", ")", ".", "data", ".", "tolist", "(", ")", "[", "0", "]", "[", "1", "]", ")", "\n", "\n", "", "elif", "TWEET_CLASSIFIER_DESCRIPTION", "==", "feature", ":", "\n", "\t\t\t", "tweetText", "=", "video", ".", "get_description", "(", ")", "\n", "\n", "sentence", "=", "embedding_list", "(", "tweetText", ")", "\n", "sentence_in", "=", "classifierMixed", ".", "prepare_vector", "(", "sentence", ")", "\n", "\n", "tweet_features", "=", "features_tweet", "(", "tweetText", ")", "\n", "features_in", "=", "classifierMixed", ".", "prepare_vector", "(", "tweet_features", ")", "\n", "\n", "features", ".", "append", "(", "tweet_classfier_mixnet", "(", "sentence_in", ",", "features_in", ")", ".", "data", ".", "tolist", "(", ")", "[", "0", "]", "[", "1", "]", ")", "\n", "\n", "", "elif", "TWEET_CLASSIFIER_COMMENTS", "==", "feature", ":", "\n", "#TODO", "\n", "\t\t\t", "pass", "\n", "\n", "", "", "print", "(", "features", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.get_x_y": [[108, 120], ["simple_classifiers.get_x", "X.append", "Y.append"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.features.get_x"], ["", "def", "get_x_y", "(", "all_videos", ",", "feature_names", ")", ":", "\n", "\t", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "\n", "for", "video", "in", "all_videos", ":", "\n", "\t\t", "features", "=", "get_x", "(", "video", ",", "feature_names", ")", "\n", "\n", "X", ".", "append", "(", "features", ")", "\n", "Y", ".", "append", "(", "video", ".", "gold_standard", ")", "\n", "\n", "\n", "", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.get_xs": [[121, 139], ["simple_classifiers.get_xs.writeDetailsToFile"], "function", ["None"], ["", "def", "get_xs", "(", "all_videos", ",", "feature_names", ")", ":", "\n", "\t", "X", "=", "[", "]", "\n", "for", "video", "in", "all_videos", ":", "\n", "\t\t", "features", "=", "get_x", "(", "video", ",", "feature_names", ")", "\n", "X", ".", "append", "(", "features", ")", "\n", "\n", "", "def", "writeDetailsToFile", "(", "output_file", ",", "details", ")", ":", "\n", "\t\t", "with", "open", "(", "output_file", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t    ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerows", "(", "details", ")", "\n", "\n", "", "", "details", "=", "[", "feature_names", "]", "\n", "details", "+=", "X", "\n", "\n", "writeDetailsToFile", "(", "'feature_values_csv.csv'", ",", "details", ")", "\n", "\n", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.render_dtree": [[141, 146], ["sklearn.tree.export_graphviz", "graphviz.Source", "graphviz.Source.render"], "function", ["None"], ["", "def", "render_dtree", "(", "clf", ",", "filename", ",", "feature_names", ")", ":", "\n", "\t", "dot_data", "=", "tree", ".", "export_graphviz", "(", "clf", ",", "out_file", "=", "None", ",", "feature_names", "=", "feature_names", ",", "\n", "class_names", "=", "[", "\"Legit\"", ",", "\"Fake\"", "]", ",", "filled", "=", "True", ")", "\n", "graph", "=", "graphviz", ".", "Source", "(", "dot_data", ")", "\n", "graph", ".", "render", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.read_list_fake_videos": [[148, 157], ["open", "ClassesAndUtil.Video.Video", "videos.append", "x.strip", "f.readlines"], "function", ["None"], ["", "def", "read_list_fake_videos", "(", "filename", ")", ":", "\n", "\t", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "\t\t", "videoIds", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "videos", "=", "[", "]", "\n", "for", "videoId", "in", "videoIds", ":", "\n", "\t\t", "v", "=", "Video", "(", "videoId", ")", "\n", "v", ".", "gold_standard", "=", "1", "\n", "videos", ".", "append", "(", "v", ")", "\n", "", "return", "videos", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.dump_classifier": [[159, 162], ["os.path.join", "pickle.dump", "open"], "function", ["None"], ["", "def", "dump_classifier", "(", "classifier", ",", "clf_name", ")", ":", "\n", "\t", "fname", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "clf_name", ")", "\n", "pkl", ".", "dump", "(", "classifier", ",", "open", "(", "fname", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.load_classifiers": [[164, 170], ["loaded_clfs.append", "pickle.load", "open", "os.path.join"], "function", ["None"], ["", "def", "load_classifiers", "(", ")", ":", "\n", "\t", "loaded_clfs", "=", "[", "]", "\n", "for", "clf_name", ",", "clf", "in", "clfs", ":", "\n", "\t\t", "loaded_clfs", ".", "append", "(", "(", "clf_name", ",", "pkl", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "clf_name", ")", ",", "'rb'", ")", ")", ")", ")", "\n", "\n", "", "return", "loaded_clfs", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.print_evaluation_metrics": [[172, 176], ["print", "print", "sklearn.metrics.confusion_matrix"], "function", ["None"], ["", "def", "print_evaluation_metrics", "(", "Y_true", ",", "Y_predicted", ")", ":", "\n", "\t", "print", "(", "confusion_matrix", "(", "Y_true", ",", "Y_predicted", ")", ")", "\n", "# print(classification_report(Y_true, Y_predicted))", "\n", "print", "(", "'*'", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.main_trial": [[178, 216], ["len", "print", "print", "print", "print", "print", "simple_classifiers.print_evaluation_metrics", "pickle.load", "print", "len", "len", "len", "clf.fit", "clf.predict", "simple_classifiers.dump_classifier", "print", "simple_classifiers.print_evaluation_metrics", "open", "ClassesAndUtil.Dataset.Dataset", "sorted", "simple_classifiers.get_x_y", "pickle.dump", "sum", "sum", "open", "range", "len"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.print_evaluation_metrics", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.dump_classifier", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.print_evaluation_metrics", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.features.get_x_y"], ["", "def", "main_trial", "(", "video_id_file", ")", ":", "\n", "\n", "\t", "try", ":", "\n", "\t\t", "raise", "FileNotFoundError", "\n", "X", ",", "Y", "=", "pkl", ".", "load", "(", "open", "(", "'X_Y_Annotated.pkl'", ",", "'rb'", ")", ")", "\n", "print", "(", "\"************** Loaded already built features and labels from pickle file **************\"", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "\t\t", "annotations", "=", "'VAVD_balanced'", "\n", "dataset_all", "=", "Dataset", "(", "video_id_file", ",", "onlyAnnotated", "=", "True", ",", "annotations", "=", "annotations", ")", "\n", "known_videos", "=", "[", "v", "for", "v", "in", "dataset_all", ".", "all_crawled_videos", "if", "v", ".", "gold_standard", "!=", "2", "]", "\n", "known_videos", "=", "sorted", "(", "known_videos", ",", "key", "=", "lambda", "v", ":", "v", ".", "gold_standard", ")", "\n", "X", ",", "Y", "=", "get_x_y", "(", "known_videos", ",", "feature_names", ")", "\n", "pkl", ".", "dump", "(", "(", "X", ",", "Y", ")", ",", "open", "(", "'X_Y_Annotated.pkl'", ",", "'wb'", ")", ")", "\n", "\n", "\n", "", "num_features", "=", "len", "(", "X", "[", "0", "]", ")", "\n", "\n", "# X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)#, random_state=2)", "\n", "X_train", "=", "X_test", "=", "X", "\n", "Y_train", "=", "Y_test", "=", "Y", "\n", "\n", "print", "(", "\"Train on:\"", ",", "len", "(", "X_train", ")", ")", "\n", "print", "(", "\"Test on:\"", ",", "len", "(", "X_test", ")", ")", "\n", "\n", "print", "(", "\"Total number of fake videos in train set: {}\"", ".", "format", "(", "sum", "(", "Y_train", ")", ")", ")", "\n", "print", "(", "\"Total number of fake videos in test set: {}\"", ".", "format", "(", "sum", "(", "Y_test", ")", ")", ")", "\n", "\n", "Y_predicted_all", "=", "[", "1", "]", "*", "len", "(", "X_test", ")", "\n", "for", "clf_name", ",", "clf", "in", "clfs", ":", "\n", "\t\t", "clf", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "Y_predicted", "=", "clf", ".", "predict", "(", "X_test", ")", "\n", "Y_predicted_all", "=", "[", "Y_predicted", "[", "i", "]", "*", "Y_predicted_all", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "X_test", ")", ")", "]", "\n", "dump_classifier", "(", "clf", ",", "clf_name", ")", "\n", "print", "(", "clf_name", ")", "\n", "print_evaluation_metrics", "(", "Y_test", ",", "Y_predicted", ")", "\n", "\n", "", "print", "(", "\"taking_all_into_consideration\"", ")", "\n", "print_evaluation_metrics", "(", "Y_test", ",", "Y_predicted_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.main_get_annotation_videos": [[218, 271], ["ClassesAndUtil.Dataset.DatasetScalable", "simple_classifiers.load_classifiers", "ClassesAndUtil.Dataset.DatasetScalable.get_video_and_features", "range", "print", "pickle.dump", "open", "final_file.write", "video_ids.append", "X.append", "len", "clf.predict", "len", "open", "len", "len", "len", "len", "to_be_annotated.append", "print", "range", "len"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.load_classifiers", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.get_video_and_features"], ["", "def", "main_get_annotation_videos", "(", "video_id_file", ")", ":", "\n", "\n", "# dataset_all = Dataset(video_id_file, feature_function=get_x, feature_names=feature_names)", "\n", "\t", "dataset_all", "=", "DatasetScalable", "(", "video_id_file", ")", "\n", "\n", "clfs", "=", "load_classifiers", "(", ")", "\n", "\n", "iterator", "=", "dataset_all", ".", "get_video_and_features", "(", "feature_function", "=", "get_x", ",", "feature_names", "=", "feature_names", ")", "\n", "\n", "batch_size", "=", "20", "\n", "processed", "=", "0", "\n", "\n", "to_be_annotated", "=", "[", "]", "\n", "\n", "video_to_features", "=", "{", "}", "\n", "\n", "while", "True", ":", "\n", "\t\t", "count", "=", "0", "\n", "X", "=", "[", "]", "\n", "video_ids", "=", "[", "]", "\n", "for", "video", ",", "feature_vector", "in", "iterator", ":", "\n", "\t\t\t", "video_ids", ".", "append", "(", "video", ".", "videoId", ")", "\n", "X", ".", "append", "(", "feature_vector", ")", "\n", "count", "+=", "1", "\n", "\n", "video_to_features", "[", "video", ".", "videoId", "]", "=", "feature_vector", "\n", "\n", "if", "count", "==", "batch_size", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "", "Y", "=", "[", "1", "]", "*", "len", "(", "X", ")", "\n", "for", "clf_name", ",", "clf", "in", "clfs", ":", "\n", "\t\t\t", "Y_this", "=", "clf", ".", "predict", "(", "X", ")", "\n", "Y", "=", "[", "Y", "[", "i", "]", "*", "Y_this", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", "]", "\n", "\n", "", "assert", "(", "len", "(", "video_ids", ")", "==", "len", "(", "X", ")", "and", "len", "(", "X", ")", "==", "len", "(", "Y", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "video_ids", ")", ")", ":", "\n", "\t\t\t", "if", "Y", "[", "i", "]", "==", "1", ":", "\n", "\t\t\t\t", "to_be_annotated", ".", "append", "(", "video_ids", "[", "i", "]", ")", "\n", "print", "(", "video_ids", "[", "i", "]", ")", "\n", "\n", "", "", "processed", "+=", "count", "\n", "\n", "print", "(", "\"{} processed\"", ".", "format", "(", "processed", ")", ")", "\n", "\n", "if", "count", "!=", "batch_size", ":", "\n", "\t\t\t", "break", "\n", "\n", "", "pkl", ".", "dump", "(", "video_to_features", ",", "open", "(", "'video_to_features.pkl'", ",", "'wb'", ")", ")", "\n", "\n", "", "with", "open", "(", "'bootstrap_positive_class_new_ent.txt'", ",", "'w'", ")", "as", "final_file", ":", "\n", "\t\t", "final_file", ".", "write", "(", "'\\n'", ".", "join", "(", "to_be_annotated", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.calculate_features": [[273, 276], ["ClassesAndUtil.Dataset.Dataset", "simple_classifiers.get_xs"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.get_xs"], ["", "", "def", "calculate_features", "(", "video_id_file", ")", ":", "\n", "\t", "dataset_all", "=", "Dataset", "(", "video_id_file", ",", "feature_function", "=", "get_x", ",", "feature_names", "=", "feature_names", ")", "\n", "get_xs", "(", "dataset_all", ".", "all_crawled_videos", ",", "feature_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.test_on_fvc": [[278, 297], ["ClassesAndUtil.Dataset.Dataset", "sorted", "simple_classifiers.get_x_y", "simple_classifiers.load_classifiers", "print", "simple_classifiers.print_evaluation_metrics", "len", "clf.predict", "print", "simple_classifiers.print_evaluation_metrics", "range", "len"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.features.get_x_y", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.load_classifiers", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.print_evaluation_metrics", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.simple_classifiers.print_evaluation_metrics"], ["", "def", "test_on_fvc", "(", "video_id_file", ")", ":", "\n", "\n", "\t", "annotations", "=", "'fvc_test'", "\n", "dataset_all", "=", "Dataset", "(", "video_id_file", ",", "onlyAnnotated", "=", "True", ",", "annotations", "=", "annotations", ")", "\n", "known_videos", "=", "[", "v", "for", "v", "in", "dataset_all", ".", "all_crawled_videos", "if", "v", ".", "gold_standard", "!=", "2", "]", "\n", "known_videos", "=", "sorted", "(", "known_videos", ",", "key", "=", "lambda", "v", ":", "v", ".", "gold_standard", ")", "\n", "X", ",", "Y", "=", "get_x_y", "(", "known_videos", ",", "feature_names", ")", "\n", "\n", "clfs", "=", "load_classifiers", "(", ")", "\n", "\n", "Y_predicted_all", "=", "[", "1", "]", "*", "len", "(", "X", ")", "\n", "for", "clf_name", ",", "clf", "in", "clfs", ":", "\n", "\t\t", "Y_predicted", "=", "clf", ".", "predict", "(", "X", ")", "\n", "Y_predicted_all", "=", "[", "Y_predicted", "[", "i", "]", "*", "Y_predicted_all", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", "]", "\n", "print", "(", "clf_name", ")", "\n", "print_evaluation_metrics", "(", "Y", ",", "Y_predicted", ")", "\n", "\n", "", "print", "(", "\"taking_all_into_consideration\"", ")", "\n", "print_evaluation_metrics", "(", "Y", ",", "Y_predicted_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.load_embeddings_and_targets": [[12, 14], ["pickle.load", "open"], "function", ["None"], ["def", "load_embeddings_and_targets", "(", "filename", ")", ":", "\n", "\t", "return", "pkl", ".", "load", "(", "open", "(", "filename", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.make_numpy_arrays": [[15, 26], ["numpy.array", "numpy.array", "np.array.append", "np.array.append", "numpy.array"], "function", ["None"], ["", "def", "make_numpy_arrays", "(", "embeddings_and_targets", ")", ":", "\n", "\t", "all_embeddings", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "embedding", ",", "target", "in", "embeddings_and_targets", ":", "\n", "\t\t", "all_embeddings", ".", "append", "(", "np", ".", "array", "(", "embedding", ")", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "all_embeddings", "=", "np", ".", "array", "(", "all_embeddings", ")", "\n", "targets", "=", "np", ".", "array", "(", "targets", ")", "\n", "\n", "return", "all_embeddings", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.plot_pca": [[27, 43], ["sklearn.decomposition.PCA", "print", "sklearn.decomposition.PCA.fit_transform", "print", "matplotlib.scatter", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.colorbar", "matplotlib.savefig"], "function", ["None"], ["", "def", "plot_pca", "(", "embeddings", ",", "targets", ",", "filename", ")", ":", "\n", "\t", "pca", "=", "PCA", "(", "n_components", "=", "2", ")", "\n", "print", "(", "\"original shape:   \"", ",", "embeddings", ".", "shape", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "projected", "=", "pca", ".", "fit_transform", "(", "embeddings", ")", "\n", "\n", "print", "(", "\"transformed shape:\"", ",", "projected", ".", "shape", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "plt", ".", "scatter", "(", "projected", "[", ":", ",", "0", "]", ",", "projected", "[", ":", ",", "1", "]", ",", "s", "=", "16", ",", "\n", "c", "=", "targets", ",", "edgecolor", "=", "'none'", ",", "alpha", "=", "0.5", ",", "\n", "cmap", "=", "'rainbow'", ")", "\n", "plt", ".", "xlabel", "(", "'component 1'", ")", "\n", "plt", ".", "ylabel", "(", "'component 2'", ")", "\n", "plt", ".", "colorbar", "(", ")", ";", "\n", "\n", "plt", ".", "savefig", "(", "filename", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.main": [[45, 94], ["os.path.join", "os.path.join", "pickle.load", "list", "os.path.join", "make_pca.make_numpy_arrays", "make_pca.plot_pca", "exit", "make_pca.load_embeddings_and_targets", "make_pca.make_numpy_arrays", "make_pca.plot_pca", "tuple", "tuple", "tuple", "map_name_x_y[].format", "open", "zip", "tuple"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.make_numpy_arrays", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.plot_pca", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.load_embeddings_and_targets", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.make_numpy_arrays", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.make_pca.plot_pca"], ["", "def", "main", "(", ")", ":", "\n", "\n", "\t", "map_name_x_y", "=", "{", "\n", "tuple", "(", "LIST_ALL_AND_TWEET_FEATURES", ")", ":", "\"X_Y_{}_All_Features\"", ",", "\n", "tuple", "(", "[", "]", ")", ":", "\"X_Y_{}_No_Features\"", ",", "\n", "tuple", "(", "LIST_UNCORRELATED", ")", ":", "\"X_Y_{}_Uncorrelated\"", "\n", "}", "\n", "\n", "models_dir", "=", "os", ".", "path", ".", "join", "(", "'NeuralModelsVAVDToFVC'", ")", "\n", "annotations", "=", "'fvc'", "\n", "\n", "feature_names", "=", "LIST_ALL_AND_TWEET_FEATURES", "\n", "\n", "pickle_name", "=", "os", ".", "path", ".", "join", "(", "models_dir", ",", "map_name_x_y", "[", "tuple", "(", "feature_names", ")", "]", ".", "format", "(", "annotations", ")", ")", "\n", "\n", "\n", "X", ",", "Y", ",", "known_videos", "=", "pkl", ".", "load", "(", "open", "(", "pickle_name", ",", "'rb'", ")", ")", "\n", "embeddings_and_targets", "=", "list", "(", "zip", "(", "X", ",", "Y", ")", ")", "\n", "\n", "filename_plot", "=", "os", ".", "path", ".", "join", "(", "'FeaturesPCA.png'", ")", "\n", "\n", "embeddings", ",", "targets", "=", "make_numpy_arrays", "(", "embeddings_and_targets", ")", "\n", "plot_pca", "(", "embeddings", ",", "targets", ",", "filename_plot", ")", "\n", "\n", "exit", "(", "0", ")", "\n", "\n", "\n", "\n", "# filename_embeddings = 'Title_Embeddings_And_Target_fvc'", "\n", "# filename_plot = 'plot_pca_title.png'", "\n", "\n", "annotations", "=", "'fvc'", "\n", "# filename_embeddings = 'Comment_Embeddings_And_Target_{}_Attention.pkl'.format(annotations)", "\n", "# filename_plot = 'plot_pca_comment_avg_attention.png'", "\n", "\n", "# filename_embeddings = 'Comment_Embeddings_And_Target_{}_Attention_Extra_Hidden_Layer.pkl'.format(annotations)", "\n", "# filename_plot = 'plot_pca_comment_avg_attention_extra_hidden.png'", "\n", "\n", "filename_embeddings", "=", "'Comment_Embeddings_And_Target_{}_Attention_Extra_Hidden_Layer_VAVD.pkl'", ".", "format", "(", "annotations", ")", "\n", "filename_plot", "=", "'plot_pca_comment_avg_attention_extra_hidden_VAVD.png'", "\n", "\n", "\n", "# filename_embeddings = 'Comment_Embeddings_And_Target_fvc'", "\n", "# filename_plot = 'plot_pca_comment_avg.png'", "\n", "\n", "\n", "embeddings_and_targets", "=", "load_embeddings_and_targets", "(", "filename_embeddings", ")", "\n", "embeddings", ",", "targets", "=", "make_numpy_arrays", "(", "embeddings_and_targets", ")", "\n", "plot_pca", "(", "embeddings", ",", "targets", ",", "filename_plot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.feature_importance.plot_feature_importance": [[10, 43], ["imblearn.under_sampling.RandomUnderSampler", "imblearn.under_sampling.RandomUnderSampler.fit_sample", "sklearn.ensemble.ExtraTreesClassifier", "sklearn.ensemble.ExtraTreesClassifier.fit", "numpy.std", "min", "print", "range", "matplotlib.figure", "matplotlib.title", "matplotlib.bar", "matplotlib.xticks", "matplotlib.tight_layout", "matplotlib.show", "numpy.argsort", "len", "print", "range", "range"], "function", ["None"], ["def", "plot_feature_importance", "(", "X", ",", "y", ",", "names", ")", ":", "\n", "\n", "    ", "rs", "=", "RandomUnderSampler", "(", "random_state", "=", "55", ")", "\n", "X", ",", "y", "=", "rs", ".", "fit_sample", "(", "X", ",", "y", ")", "\n", "# Build a forest and compute the feature importances", "\n", "forest", "=", "ExtraTreesClassifier", "(", "n_estimators", "=", "250", ",", "\n", "random_state", "=", "0", ")", "\n", "\n", "forest", ".", "fit", "(", "X", ",", "y", ")", "\n", "importances", "=", "forest", ".", "feature_importances_", "\n", "std", "=", "np", ".", "std", "(", "[", "tree", ".", "feature_importances_", "for", "tree", "in", "forest", ".", "estimators_", "]", ",", "\n", "axis", "=", "0", ")", "\n", "origindices", "=", "np", ".", "argsort", "(", "importances", ")", "[", ":", ":", "-", "1", "]", "\n", "end", "=", "min", "(", "60", ",", "len", "(", "X", "[", "0", "]", ")", ")", "\n", "indices", "=", "origindices", "[", ":", "end", "]", "\n", "\n", "# Print the feature ranking", "\n", "print", "(", "\"Feature ranking:\"", ")", "\n", "for", "f", "in", "range", "(", "end", ")", ":", "\n", "        ", "print", "(", "\"%d. %s (%f)\"", "%", "(", "f", "+", "1", ",", "names", "[", "indices", "[", "f", "]", "]", ",", "importances", "[", "indices", "[", "f", "]", "]", ")", ")", "\n", "\n", "# Plot the feature importances of the forest", "\n", "", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "\"Feature importances\"", ")", "\n", "plt", ".", "bar", "(", "range", "(", "end", ")", ",", "importances", "[", "indices", "]", ",", "\n", "color", "=", "\"black\"", ",", "yerr", "=", "std", "[", "indices", "]", ",", "align", "=", "\"center\"", ")", "\n", "ordered_names", "=", "[", "names", "[", "ii", "]", "for", "ii", "in", "indices", "]", "\n", "plt", ".", "xticks", "(", "range", "(", "end", ")", ",", "ordered_names", "[", ":", "end", "]", ",", "rotation", "=", "\"vertical\"", ")", "\n", "# plt.xlim([-1, end])", "\n", "# plt.ylim([0,0.02])", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "origindices", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.train_test_ivc": [[19, 33], ["TweetClassifier.getTweets.getTweetsAndFeatures", "sklearn.cross_validation.train_test_split", "sklearn.svm.SVC", "svm.SVC.fit", "svm.SVC.predict", "print", "print", "os.path.join", "X.append", "Y.append", "sklearn.metrics.confusion_matrix", "sklearn.metrics.classification_report"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetsAndFeatures"], ["def", "train_test_ivc", "(", ")", ":", "\n", "    ", "features_and_label", "=", "getTweets", ".", "getTweetsAndFeatures", "(", "os", ".", "path", ".", "join", "(", "'TweetClassifier'", ",", "'tweet_dataset.tsv'", ")", ")", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "features", ",", "label", "in", "features_and_label", ":", "\n", "        ", "X", ".", "append", "(", "features", ")", "\n", "Y", ".", "append", "(", "label", ")", "\n", "\n", "", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "X", ",", "Y", ",", "test_size", "=", "0.3", ")", "\n", "clf", "=", "svm", ".", "SVC", "(", "kernel", "=", "'rbf'", ",", "probability", "=", "True", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "Y_predicted", "=", "clf", ".", "predict", "(", "X_test", ")", "\n", "print", "(", "confusion_matrix", "(", "Y_test", ",", "Y_predicted", ")", ")", "\n", "print", "(", "classification_report", "(", "Y_test", ",", "Y_predicted", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.train_level_1": [[35, 48], ["TweetClassifier.getTweets.getTweetsAndFeatures", "sklearn.svm.SVC", "svm.SVC.fit", "pickle.dump", "os.path.join", "X.append", "Y.append", "open"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetsAndFeatures"], ["", "def", "train_level_1", "(", ")", ":", "\n", "    ", "features_and_label", "=", "getTweets", ".", "getTweetsAndFeatures", "(", "os", ".", "path", ".", "join", "(", "'TweetClassifier'", ",", "'tweet_dataset.tsv'", ")", ")", "\n", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "features", ",", "label", "in", "features_and_label", ":", "\n", "        ", "X", ".", "append", "(", "features", ")", "\n", "Y", ".", "append", "(", "label", ")", "\n", "\n", "", "clf", "=", "svm", ".", "SVC", "(", "kernel", "=", "'rbf'", ",", "probability", "=", "True", ")", "\n", "clf", ".", "fit", "(", "X", ",", "Y", ")", "\n", "\n", "pkl", ".", "dump", "(", "clf", ",", "open", "(", "classifier_pickle", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.test_level_1": [[49, 54], ["TweetClassifier.textUtils.TextFeaturesExtractor", "TweetClassifier.getTweets.features_tweet", "clf.predict_proba"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.features_tweet"], ["", "def", "test_level_1", "(", "clf", ",", "comment", ")", ":", "\n", "    ", "tfe", "=", "TextFeaturesExtractor", "(", "comment", ")", "\n", "features", "=", "getTweets", ".", "features_tweet", "(", "tfe", ".", "urlsRemoved", ")", "\n", "y", "=", "clf", ".", "predict_proba", "(", "[", "features", "]", ")", "[", "0", "]", "[", "1", "]", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.get_comment_features": [[55, 66], ["video.get_iterator_comments", "max", "print", "baseline.test_level_1", "sum", "comment.getText", "int"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_iterator_comments", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.test_level_1", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.getText"], ["", "def", "get_comment_features", "(", "clf", ",", "video", ")", ":", "\n", "    ", "bins", "=", "10", "\n", "features", "=", "[", "0", "]", "*", "bins", "\n", "for", "comment", "in", "video", ".", "get_iterator_comments", "(", "max_comments", "=", "100", ")", ":", "\n", "        ", "value", "=", "test_level_1", "(", "clf", ",", "comment", ".", "getText", "(", ")", ")", "\n", "features", "[", "int", "(", "value", "*", "bins", ")", "-", "1", "]", "+=", "1", "\n", "", "s", "=", "max", "(", "sum", "(", "features", ")", ",", "1", ")", "\n", "features", "=", "[", "x", "*", "1.0", "/", "s", "for", "x", "in", "features", "]", "\n", "\n", "print", "(", "features", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.load_dataset": [[67, 79], ["ClassesAndUtil.Dataset.Dataset", "pickle.load", "open", "features.extend", "X.append", "Y.append", "baseline.get_comment_features"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.get_comment_features"], ["", "def", "load_dataset", "(", "video_id_file", ",", "annotations", ")", ":", "\n", "    ", "dataset_all", "=", "Dataset", "(", "video_id_file", ",", "onlyAnnotated", "=", "True", ",", "annotations", "=", "annotations", ")", "\n", "clf", "=", "pkl", ".", "load", "(", "open", "(", "classifier_pickle", ",", "'rb'", ")", ")", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "video", "in", "dataset_all", ".", "all_crawled_videos", ":", "\n", "        ", "features", "=", "[", "]", "\n", "# features = get_x(video, LIST_TITLE_FEATURES + LIST_NON_TEXTUAL_FEATURES)", "\n", "features", ".", "extend", "(", "get_comment_features", "(", "clf", ",", "video", ")", ")", "\n", "X", ".", "append", "(", "features", ")", "\n", "Y", ".", "append", "(", "video", ".", "gold_standard", ")", "\n", "", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.cross_validate_fvc": [[80, 88], ["sklearn.svm.SVC", "sklearn.model_selection.cross_val_score", "print", "print", "sklearn.model_selection.cross_val_score.mean", "sklearn.model_selection.cross_val_score.std"], "function", ["None"], ["", "def", "cross_validate_fvc", "(", "X", ",", "Y", ")", ":", "\n", "    ", "clf", "=", "svm", ".", "SVC", "(", "kernel", "=", "'rbf'", ")", "\n", "# scoring = 'f1'", "\n", "scoring", "=", "'f1_macro'", "\n", "scores", "=", "cross_val_score", "(", "clf", ",", "X", ",", "Y", ",", "cv", "=", "10", ",", "scoring", "=", "scoring", ")", "\n", "\n", "print", "(", "scores", ")", "\n", "print", "(", "\"Accuracy: %0.2f (+/- %0.2f)\"", "%", "(", "scores", ".", "mean", "(", ")", ",", "scores", ".", "std", "(", ")", "*", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.baseline.train_test_fvc": [[97, 103], ["sklearn.svm.SVC", "svm.SVC.fit", "svm.SVC.predict", "print", "print", "sklearn.metrics.confusion_matrix", "sklearn.metrics.classification_report"], "function", ["None"], ["", "def", "train_test_fvc", "(", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", ")", ":", "\n", "    ", "clf", "=", "svm", ".", "SVC", "(", "kernel", "=", "'rbf'", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "Y_predicted", "=", "clf", ".", "predict", "(", "X_test", ")", "\n", "print", "(", "confusion_matrix", "(", "Y_test", ",", "Y_predicted", ")", ")", "\n", "print", "(", "classification_report", "(", "Y_test", ",", "Y_predicted", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.features.get_x": [[10, 84], ["TweetClassifier.classifierMixed.MixNet", "classifierMixed.MixNet.load_state_dict", "video.get_title", "ClassesAndUtil.sentimentIntensity", "torch.load", "features.append", "ClassesAndUtil.ratio_violent_words", "features.append", "ClassesAndUtil.ratio_caps", "features.append", "int", "features.append", "ClassesAndUtil.has_clickbait_phrase", "features.append", "features.append", "int", "features.append", "int", "features.append", "int", "video.get_comments_fakeness", "features.append", "features.append", "video.get_num_comments", "features.append", "max", "int", "features.append", "video.get_dislike_count", "video.get_like_count", "ClassesAndUtil.first_word_capital", "video.get_comments_inappropriateness", "features.append", "video.get_title", "video.get_conversation_ratio", "video.get_title", "TweetClassifier.getTweets.embedding_list", "TweetClassifier.classifierMixed.prepare_vector", "TweetClassifier.getTweets.features_tweet", "TweetClassifier.classifierMixed.prepare_vector", "features.append", "video.get_description", "TweetClassifier.getTweets.embedding_list", "TweetClassifier.classifierMixed.prepare_vector", "TweetClassifier.getTweets.features_tweet", "TweetClassifier.classifierMixed.prepare_vector", "features.append", "classifierMixed.MixNet.data.tolist", "classifierMixed.MixNet.data.tolist", "classifierMixed.MixNet.", "classifierMixed.MixNet."], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.sentimentIntensity", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.ratio_violent_words", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.ratio_caps", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.has_clickbait_phrase", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_comments_fakeness", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_num_comments", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_dislike_count", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_like_count", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.first_word_capital", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_comments_inappropriateness", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_conversation_ratio", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.embedding_list", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.features_tweet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_description", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.embedding_list", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.features_tweet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["def", "get_x", "(", "video", ",", "feature_names", ")", ":", "\n", "\n", "\t", "MAX_COMMENTS", "=", "100", "\n", "\n", "tweet_classfier_mixnet", "=", "classifierMixed", ".", "MixNet", "(", "300", ",", "300", ",", "2", ",", "308", ",", "directions", "=", "1", ")", "\n", "tweet_classfier_mixnet", ".", "load_state_dict", "(", "torch", ".", "load", "(", "TWEET_MODEL_PATH", ")", ")", "\n", "\n", "title", "=", "video", ".", "get_title", "(", ")", "\n", "sentiment_title", "=", "textProcessor", ".", "sentimentIntensity", "(", "title", ")", "\n", "\n", "features", "=", "[", "]", "\n", "for", "feature", "in", "feature_names", ":", "\n", "\t\t", "if", "RATIO_VIOLENT_WORDS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "textProcessor", ".", "ratio_violent_words", "(", "title", ")", ")", "\n", "", "elif", "RATIO_CAPS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "textProcessor", ".", "ratio_caps", "(", "title", ")", ")", "\n", "", "elif", "HAS_CLICKBAIT_PHRASE", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "int", "(", "textProcessor", ".", "has_clickbait_phrase", "(", "title", ")", ")", ")", "\n", "", "elif", "POSITIVE_SENTIMENT", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "sentiment_title", "[", "'pos'", "]", ")", "\n", "", "elif", "NEGATIVE_SENTIMENT", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "sentiment_title", "[", "'neg'", "]", ")", "\n", "", "elif", "HAS_QUESTION_MARK", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "int", "(", "'?'", "in", "title", ")", ")", "\n", "", "elif", "HAS_EXCLAMATION_MARK", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "int", "(", "'!'", "in", "title", ")", ")", "\n", "\n", "\n", "", "elif", "HAS_COMMENTS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "int", "(", "video", ".", "get_num_comments", "(", ")", "==", "0", ")", ")", "\n", "", "elif", "COMMENTS_FAKENESS", "==", "feature", ":", "\n", "\t\t\t", "fakeness", "=", "video", ".", "get_comments_fakeness", "(", "max_comments", "=", "MAX_COMMENTS", ")", "\n", "features", ".", "append", "(", "fakeness", ")", "\n", "\n", "", "elif", "DISLIKE_LIKE_RATIO", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "(", "1.0", "*", "video", ".", "get_dislike_count", "(", ")", ")", "/", "max", "(", "1", ",", "video", ".", "get_like_count", "(", ")", ")", ")", "\n", "\n", "\n", "", "elif", "FIRST_WORD_CAPS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "int", "(", "textProcessor", ".", "first_word_capital", "(", "video", ".", "get_title", "(", ")", ")", ")", ")", "\n", "", "elif", "COMMENTS_INAPPROPRIATENESS", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "video", ".", "get_comments_inappropriateness", "(", "max_comments", "=", "MAX_COMMENTS", ")", ")", "\n", "", "elif", "COMMENTS_CONVERSATION_RATIO", "==", "feature", ":", "\n", "\t\t\t", "features", ".", "append", "(", "video", ".", "get_conversation_ratio", "(", "recursive", "=", "False", ",", "max_comments", "=", "MAX_COMMENTS", ")", ")", "\n", "\n", "\n", "", "elif", "TWEET_CLASSIFIER_TITLE", "==", "feature", ":", "\n", "\t\t\t", "tweetText", "=", "video", ".", "get_title", "(", ")", "\n", "\n", "sentence", "=", "embedding_list", "(", "tweetText", ")", "\n", "sentence_in", "=", "classifierMixed", ".", "prepare_vector", "(", "sentence", ")", "\n", "\n", "tweet_features", "=", "features_tweet", "(", "tweetText", ")", "\n", "features_in", "=", "classifierMixed", ".", "prepare_vector", "(", "tweet_features", ")", "\n", "\n", "features", ".", "append", "(", "tweet_classfier_mixnet", "(", "sentence_in", ",", "features_in", ")", ".", "data", ".", "tolist", "(", ")", "[", "0", "]", "[", "1", "]", ")", "\n", "\n", "", "elif", "TWEET_CLASSIFIER_DESCRIPTION", "==", "feature", ":", "\n", "\t\t\t", "tweetText", "=", "video", ".", "get_description", "(", ")", "\n", "\n", "sentence", "=", "embedding_list", "(", "tweetText", ")", "\n", "sentence_in", "=", "classifierMixed", ".", "prepare_vector", "(", "sentence", ")", "\n", "\n", "tweet_features", "=", "features_tweet", "(", "tweetText", ")", "\n", "features_in", "=", "classifierMixed", ".", "prepare_vector", "(", "tweet_features", ")", "\n", "\n", "features", ".", "append", "(", "tweet_classfier_mixnet", "(", "sentence_in", ",", "features_in", ")", ".", "data", ".", "tolist", "(", ")", "[", "0", "]", "[", "1", "]", ")", "\n", "\n", "", "elif", "TWEET_CLASSIFIER_COMMENTS", "==", "feature", ":", "\n", "#TODO", "\n", "\t\t\t", "pass", "\n", "\n", "# print(features, file=sys.stderr)", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.features.get_x_y": [[85, 95], ["features.get_x", "X.append", "Y.append"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.features.get_x"], ["", "def", "get_x_y", "(", "all_videos", ",", "feature_names", ")", ":", "\n", "\t", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "\n", "for", "video", "in", "all_videos", ":", "\n", "\t\t", "features", "=", "get_x", "(", "video", ",", "feature_names", ")", "\n", "X", ".", "append", "(", "features", ")", "\n", "Y", ".", "append", "(", "video", ".", "gold_standard", ")", "\n", "\n", "", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.None.features.get_x_baseline": [[96, 105], ["video.get_channel", "features.append", "features.append", "features.append", "features.append", "video.get_channel.getDetail", "video.get_channel.getDetail", "video.get_channel.getDetail", "video.get_channel.getDetail"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_channel", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.getDetail", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.getDetail", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.getDetail", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.getDetail"], ["", "def", "get_x_baseline", "(", "video", ")", ":", "\n", "\t", "MAX_COMMENTS", "=", "100", "\n", "features", "=", "[", "]", "\n", "\n", "channel", "=", "video", ".", "get_channel", "(", ")", "\n", "features", ".", "append", "(", "channel", ".", "getDetail", "(", "\"viewCount\"", ")", ")", "\n", "features", ".", "append", "(", "channel", ".", "getDetail", "(", "\"commentCount\"", ")", ")", "\n", "features", ".", "append", "(", "channel", ".", "getDetail", "(", "\"subscriberCount\"", ")", ")", "\n", "features", ".", "append", "(", "channel", ".", "getDetail", "(", "\"videoCount\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.MixNet.__init__": [[17, 41], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "classifierMixed.MixNet.parameters", "classifierMixed.MixNet.init_state", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state"], ["\t", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "hidden_dim", ",", "target_size", ",", "features_size", ",", "num_layers", "=", "1", ",", "directions", "=", "1", ",", "batch_size", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "MixNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "directions", "==", "1", "or", "directions", "==", "2", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "directions", "=", "directions", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "bidirectional", "=", "False", "\n", "if", "directions", "==", "2", ":", "\n", "\t\t\t", "bidirectional", "=", "True", "\n", "\n", "", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "hidden_dim", ",", "num_layers", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "hidden_to_target", "=", "nn", ".", "Linear", "(", "hidden_dim", "+", "features_size", ",", "target_size", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "weight_init", ".", "xavier_normal", "(", "param", ".", "data", ")", "\n", "", "except", "ValueError", ":", "\n", "\t\t\t\t", "weight_init", ".", "constant", "(", "param", ".", "data", ",", "0", ")", "\n", "\n", "", "", "self", ".", "init_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.MixNet.init_state": [[42, 46], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_state", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "hidden_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "cell_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "state", "=", "(", "self", ".", "hidden_state", ",", "self", ".", "cell_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.MixNet.forward": [[47, 55], ["classifierMixed.MixNet.lstm", "features_tweet.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifierMixed.MixNet.hidden_to_target", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "sentence.view", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sentence", ",", "features_tweet", ")", ":", "\n", "\t\t", "lstm_out", ",", "self", ".", "state", "=", "self", ".", "lstm", "(", "sentence", ".", "view", "(", "len", "(", "sentence", ")", ",", "self", ".", "batch_size", ",", "self", ".", "embedding_dim", ")", ",", "self", ".", "state", ")", "\n", "features_tweet", "=", "features_tweet", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "lstm_out_last", "=", "lstm_out", "[", "-", "1", "]", "\n", "lstm_concate_features", "=", "torch", ".", "cat", "(", "[", "lstm_out_last", ",", "features_tweet", "]", ",", "dim", "=", "1", ")", "\n", "target_space", "=", "self", ".", "hidden_to_target", "(", "lstm_concate_features", ")", "\n", "target_scores", "=", "F", ".", "log_softmax", "(", "target_space", ")", "\n", "return", "target_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.prepare_vector": [[59, 62], ["torch.Variable", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "prepare_vector", "(", "inputVec", ")", ":", "\n", "\t", "ret", "=", "autograd", ".", "Variable", "(", "torch", ".", "Tensor", "(", "inputVec", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.prepare_target": [[63, 66], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Variable"], "function", ["None"], ["", "def", "prepare_target", "(", "target_ids", ")", ":", "\n", "\t", "tensor", "=", "torch", ".", "LongTensor", "(", "[", "target_ids", "]", ")", "\n", "return", "autograd", ".", "Variable", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.trainNet": [[67, 84], ["torch.Adam", "range", "model.parameters", "model.zero_grad", "model.init_state", "classifierMixed.prepare_vector", "classifierMixed.prepare_vector", "classifierMixed.prepare_target", "model", "loss_function", "print", "loss_function.backward", "optim.Adam.step"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target"], ["", "def", "trainNet", "(", "training_data", ")", ":", "\n", "\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "weight_decay", "=", "1e-5", ")", "\n", "for", "epoch", "in", "range", "(", "10", ")", ":", "\n", "\t\t", "for", "(", "sentence", ",", "features", ")", ",", "target", "in", "training_data", ":", "\n", "\t\t\t", "model", ".", "zero_grad", "(", ")", "\n", "model", ".", "hidden", "=", "model", ".", "init_state", "(", ")", "\n", "\n", "sentence_in", "=", "prepare_vector", "(", "sentence", ")", "\n", "features_in", "=", "prepare_vector", "(", "features", ")", "\n", "target_actual", "=", "prepare_target", "(", "target", ")", "\n", "\n", "target_predicted_scores", "=", "model", "(", "sentence_in", ",", "features_in", ")", "\n", "\n", "loss", "=", "loss_function", "(", "target_predicted_scores", ",", "target_actual", ")", "\n", "print", "(", "\"loss: \"", ",", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.testNet": [[85, 110], ["sklearn.metrics.confusion_matrix", "print", "print", "print", "print", "int", "classifierMixed.prepare_vector", "classifierMixed.prepare_vector", "model", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "y_true_list.append", "y_predicted_list.append", "print", "sklearn.metrics.classification_report", "round", "model.data.tolist", "predicted.tolist"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["", "", "", "def", "testNet", "(", "testing_data", ")", ":", "\n", "\t", "y_true_list", "=", "[", "]", "\n", "y_predicted_list", "=", "[", "]", "\n", "for", "(", "sentence", ",", "features", ")", ",", "target", "in", "testing_data", ":", "\n", "\t\t", "sentence_in", "=", "prepare_vector", "(", "sentence", ")", "\n", "features_in", "=", "prepare_vector", "(", "features", ")", "\n", "\n", "y_predicted", "=", "model", "(", "sentence_in", ",", "features_in", ")", "\n", "print", "(", "y_predicted", ".", "data", ".", "tolist", "(", ")", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "y_predicted", ".", "data", ",", "1", ")", "\n", "\n", "y_true", "=", "target", "\n", "y_true_list", ".", "append", "(", "y_true", ")", "\n", "\n", "y_predicted", "=", "predicted", ".", "tolist", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "y_predicted_list", ".", "append", "(", "y_predicted", ")", "\n", "\n", "print", "(", "y_true", ",", "y_predicted", ")", "\n", "", "matrix", "=", "confusion_matrix", "(", "y_true_list", ",", "y_predicted_list", ")", "\n", "accuracy", "=", "(", "100", "*", "(", "matrix", "[", "0", "]", "[", "0", "]", "+", "matrix", "[", "1", "]", "[", "1", "]", ")", ")", "/", "(", "matrix", "[", "0", "]", "[", "0", "]", "+", "matrix", "[", "0", "]", "[", "1", "]", "+", "matrix", "[", "1", "]", "[", "0", "]", "+", "matrix", "[", "1", "]", "[", "1", "]", ")", "\n", "print", "(", "\"Accuracy:\"", ",", "accuracy", ")", "\n", "print", "(", ")", "\n", "print", "(", "matrix", ")", "\n", "print", "(", "classification_report", "(", "y_true_list", ",", "y_predicted_list", ")", ")", "\n", "return", "int", "(", "round", "(", "accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.main": [[113, 134], ["TweetClassifier.getTweets.getTweetsEmbeddingsAndFeatures", "classifierMixed.MixNet", "print", "sklearn.cross_validation.train_test_split", "classifierMixed.trainNet", "classifierMixed.testNet", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "X.append", "Y.append", "len", "zip", "zip", "MixNet.state_dict"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetsEmbeddingsAndFeatures", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.trainNet", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifierMixed.testNet"], ["", "def", "main", "(", ")", ":", "\n", "\t", "global", "model", "\n", "dataset", "=", "getTweetsEmbeddingsAndFeatures", "(", "'tweet_dataset.tsv'", ")", "\n", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "embed", ",", "features", ",", "y", "in", "dataset", ":", "\n", "\t\t", "X", ".", "append", "(", "(", "embed", ",", "features", ")", ")", "\n", "Y", ".", "append", "(", "y", ")", "\n", "\n", "", "model", "=", "MixNet", "(", "300", ",", "300", ",", "2", ",", "len", "(", "X", "[", "0", "]", "[", "1", "]", ")", ",", "directions", "=", "1", ")", "\n", "print", "(", "model", ")", "\n", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "X", ",", "Y", ",", "test_size", "=", "0.3", ")", "\n", "\n", "trainNet", "(", "zip", "(", "X_train", ",", "Y_train", ")", ")", "\n", "\n", "accuracy", "=", "testNet", "(", "zip", "(", "X_test", ",", "Y_test", ")", ")", "\n", "\n", "# ... after training, save your model ", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'MixedNet_{}.pt'", ".", "format", "(", "accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.__init__": [[64, 69], ["textUtils.removeUseless", "textUtils.removeURL"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.removeUseless", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.removeURL"], ["\t", "def", "__init__", "(", "self", ",", "text", ")", ":", "\n", "\t\t", "self", ".", "originalText", "=", "text", "\n", "self", ".", "uselessRemoved", "=", "removeUseless", "(", "text", ")", "\n", "self", ".", "urlsRemoved", "=", "removeURL", "(", "self", ".", "uselessRemoved", ")", "\n", "self", ".", "words", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.numURL": [[70, 76], ["len", "len", "re.findall", "re.findall"], "methods", ["None"], ["", "def", "numURL", "(", "self", ")", ":", "\n", "\t\t", "num", "=", "0", "\n", "text", "=", "self", ".", "uselessRemoved", "\n", "num", "+=", "len", "(", "re", ".", "findall", "(", "\"http://[^ ]+ \"", ",", "text", ")", ")", "\n", "num", "+=", "len", "(", "re", ".", "findall", "(", "\"https://[^ ]+ \"", ",", "text", ")", ")", "\n", "return", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.length": [[77, 79], ["len"], "methods", ["None"], ["", "def", "length", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "urlsRemoved", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getFractionUpperCase": [[80, 85], ["sum", "sum", "max", "c.isupper", "c.islower"], "methods", ["None"], ["", "def", "getFractionUpperCase", "(", "self", ")", ":", "\n", "\t\t", "text", "=", "self", ".", "urlsRemoved", "\n", "upper_count", "=", "sum", "(", "1", "for", "c", "in", "text", "if", "c", ".", "isupper", "(", ")", ")", "\n", "lower_count", "=", "sum", "(", "1", "for", "c", "in", "text", "if", "c", ".", "islower", "(", ")", ")", "\n", "return", "(", "upper_count", "*", "1.0", ")", "/", "max", "(", "(", "upper_count", "+", "lower_count", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol": [[86, 89], ["textUtils.TextFeaturesExtractor.urlsRemoved.lower"], "methods", ["None"], ["", "def", "containsSymbol", "(", "self", ",", "symbol", ")", ":", "\n", "\t\t", "text", "=", "self", ".", "urlsRemoved", ".", "lower", "(", ")", "\n", "return", "symbol", "in", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.numSymbol": [[90, 93], ["text.count"], "methods", ["None"], ["", "def", "numSymbol", "(", "self", ",", "symbol", ")", ":", "\n", "\t\t", "text", "=", "self", ".", "urlsRemoved", "\n", "return", "text", ".", "count", "(", "symbol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumUpperCase": [[94, 97], ["sum", "c.isupper"], "methods", ["None"], ["", "def", "getNumUpperCase", "(", "self", ")", ":", "\n", "\t\t", "text", "=", "self", ".", "urlsRemoved", "\n", "return", "sum", "(", "1", "for", "c", "in", "text", "if", "c", ".", "isupper", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.containsEmo": [[99, 105], ["None"], "methods", ["None"], ["", "def", "containsEmo", "(", "self", ",", "emo_list", ")", ":", "\n", "\t\t", "text", "=", "self", ".", "urlsRemoved", "\n", "for", "emo", "in", "emo_list", ":", "\n", "\t\t\t", "if", "emo", "in", "text", ":", "\n", "\t\t\t\t", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getWords": [[106, 114], ["re.sub", "nltk.word_tokenize", "word.strip"], "methods", ["None"], ["", "def", "getWords", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "words", "is", "not", "None", ":", "\n", "\t\t\t", "return", "self", ".", "words", "\n", "", "text", "=", "self", ".", "urlsRemoved", "\n", "text", "=", "re", ".", "sub", "(", "r'[^\\w]'", ",", "' '", ",", "text", ")", "\n", "tokens", "=", "word_tokenize", "(", "text", ")", "\n", "tokens", "=", "[", "word", ".", "strip", "(", "\" \\r\\n\\t\"", ")", "for", "word", "in", "tokens", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumWords": [[115, 117], ["len", "textUtils.TextFeaturesExtractor.getWords"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getWords"], ["", "def", "getNumWords", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "getWords", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData": [[118, 126], ["phrase.strip.strip.strip"], "methods", ["None"], ["", "def", "getNumOccurencesOfFileData", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "filedata_list", "=", "files", "[", "filename", "]", "\n", "count", "=", "0", "\n", "for", "phrase", "in", "filedata_list", ":", "\n", "\t\t\t", "phrase", "=", "phrase", ".", "strip", "(", ")", "\n", "if", "phrase", "in", "self", ".", "urlsRemoved", ":", "\n", "\t\t\t\t", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getEmbeddingList": [[128, 139], ["textUtils.TextFeaturesExtractor.getWords", "embeds.append", "textUtils.load_word2vec", "numpy.zeros().tolist", "embeds.append", "word2vec[].tolist", "numpy.zeros", "word.lower"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getWords", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.load_word2vec"], ["", "def", "getEmbeddingList", "(", "self", ")", ":", "\n", "\t\t", "if", "word2vec", "is", "None", ":", "\n", "\t\t\t", "load_word2vec", "(", ")", "\n", "", "embeds", "=", "[", "]", "\n", "for", "word", "in", "self", ".", "getWords", "(", ")", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "embeds", ".", "append", "(", "word2vec", "[", "word", ".", "lower", "(", ")", "]", ".", "tolist", "(", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "\t\t\t\t", "continue", "\n", "", "", "embeds", ".", "append", "(", "np", ".", "zeros", "(", "NDIM", ")", ".", "tolist", "(", ")", ")", "\n", "return", "embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getEmbedding": [[140, 146], ["textUtils.TextFeaturesExtractor.getEmbeddingList", "numpy.zeros().tolist", "len", "numpy.mean().tolist", "numpy.zeros", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getEmbeddingList"], ["", "def", "getEmbedding", "(", "self", ")", ":", "\n", "\t\t", "embeds", "=", "self", ".", "getEmbeddingList", "(", ")", "\n", "\n", "if", "len", "(", "embeds", ")", "!=", "0", ":", "\n", "\t\t\t", "return", "np", ".", "mean", "(", "embeds", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "", "return", "np", ".", "zeros", "(", "NDIM", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getFakeness": [[147, 152], ["reg.search"], "methods", ["None"], ["", "def", "getFakeness", "(", "self", ")", ":", "\n", "\t\t", "for", "pat", ",", "reg", "in", "regexes", ":", "\n", "\t\t\t", "if", "reg", ".", "search", "(", "self", ".", "urlsRemoved", ")", ":", "\n", "\t\t\t\t", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getFakenessVector": [[153, 161], ["reg.search", "vector.append", "vector.append"], "methods", ["None"], ["", "def", "getFakenessVector", "(", "self", ")", ":", "\n", "\t\t", "vector", "=", "[", "]", "\n", "for", "pat", ",", "reg", "in", "regexes", ":", "\n", "\t\t\t", "if", "reg", ".", "search", "(", "self", ".", "urlsRemoved", ")", ":", "\n", "\t\t\t\t", "vector", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "vector", ".", "append", "(", "0", ")", "\n", "", "", "return", "vector", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.load_word2vec": [[13, 19], ["print", "gensim.models.KeyedVectors.load_word2vec_format", "print"], "function", ["None"], ["def", "load_word2vec", "(", ")", ":", "\n", "\t", "global", "word2vec", ",", "NDIM", "\n", "print", "(", "\"Loading word2vec\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "word2vec", "=", "Word2Vec", ".", "load_word2vec_format", "(", "'/media/priyank/OS/home/bt1/13CS10037/btp_final_from_server/codes/embeddings/google_news_300.bin'", ",", "binary", "=", "True", ",", "limit", "=", "500000", ")", "\n", "NDIM", "=", "300", "\n", "print", "(", "\"Loaded word2vec\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.replaceSpanishAccent": [[21, 28], ["re.subn", "re.subn", "re.subn", "re.subn", "re.subn"], "function", ["None"], ["", "def", "replaceSpanishAccent", "(", "text", ")", ":", "\n", "\t", "text", ",", "num_subs_made", "=", "re", ".", "subn", "(", "\"\u00e0|\u00e1|\u00e2|\u00e4\"", ",", "\"a\"", ",", "text", ")", "\n", "text", ",", "num_subs_made", "=", "re", ".", "subn", "(", "\"\u00f2|\u00f3|\u00f4|\u00f6\"", ",", "\"o\"", ",", "text", ")", "\n", "text", ",", "num_subs_made", "=", "re", ".", "subn", "(", "\"\u00e8|\u00e9|\u00ea|\u00eb\"", ",", "\"e\"", ",", "text", ")", "\n", "text", ",", "num_subs_made", "=", "re", ".", "subn", "(", "\"\u00f9|\u00fa|\u00fb|\u00fc\"", ",", "\"u\"", ",", "text", ")", "\n", "text", ",", "num_subs_made", "=", "re", ".", "subn", "(", "\"\u00ec|\u00ed|\u00ee|\u00ef\"", ",", "\"i\"", ",", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.removeUseless": [[29, 34], ["replaceSpanishAccent.replace().replace().replace().replace", "re.sub", "textUtils.replaceSpanishAccent", "replaceSpanishAccent.replace().replace().replace", "replaceSpanishAccent.replace().replace", "replaceSpanishAccent.replace"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.replaceSpanishAccent"], ["", "def", "removeUseless", "(", "text", ")", ":", "\n", "\t", "text", "=", "text", ".", "replace", "(", "\"&quot;\"", ",", "\" \"", ")", ".", "replace", "(", "\"&gt;\"", ",", "\" \"", ")", ".", "replace", "(", "\"&lt;\"", ",", "\" \"", ")", ".", "replace", "(", "\"&amp;\"", ",", "\" \"", ")", "\n", "text", "=", "re", ".", "sub", "(", "\"http://t.co/[^ ]+ \"", ",", "\"\"", ",", "text", ")", "\n", "text", "=", "replaceSpanishAccent", "(", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.removeURL": [[35, 39], ["re.subn", "re.subn"], "function", ["None"], ["", "def", "removeURL", "(", "text", ")", ":", "\n", "\t", "text", ",", "num_subs_made", "=", "re", ".", "subn", "(", "\"http://[^ ]+ \"", ",", "\"\"", ",", "text", ")", "\n", "text", ",", "num_subs_made", "=", "re", ".", "subn", "(", "\"https://[^ ]+ \"", ",", "\"\"", ",", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyVanilla.VanillaNet.__init__": [[16, 28], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "classifyVanilla.VanillaNet.parameters", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_size_1", ",", "hidden_size_2", ",", "target_size", ",", "batch_size", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "VanillaNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_to_hidden1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_size_1", ")", "\n", "self", ".", "hidden1_to_hidden2", "=", "nn", ".", "Linear", "(", "hidden_size_1", ",", "hidden_size_2", ")", "\n", "self", ".", "hidden2_to_output", "=", "nn", ".", "Linear", "(", "hidden_size_2", ",", "target_size", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "# print(param.data)", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "weight_init", ".", "xavier_normal", "(", "param", ".", "data", ")", "\n", "", "except", "ValueError", ":", "\n", "\t\t\t\t", "weight_init", ".", "constant", "(", "param", ".", "data", ",", "0", ")", "\n", "# print(param.data)", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyVanilla.VanillaNet.forward": [[32, 37], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "classifyVanilla.VanillaNet.input_to_hidden1", "classifyVanilla.VanillaNet.hidden1_to_hidden2", "classifyVanilla.VanillaNet.hidden2_to_output"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputVec", ")", ":", "\n", "\t\t", "hidden1", "=", "F", ".", "relu", "(", "self", ".", "input_to_hidden1", "(", "inputVec", ")", ")", "\n", "hidden2", "=", "F", ".", "relu", "(", "self", ".", "hidden1_to_hidden2", "(", "hidden1", ")", ")", "\n", "target_scores", "=", "F", ".", "log_softmax", "(", "self", ".", "hidden2_to_output", "(", "hidden2", ")", ")", "\n", "return", "target_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyVanilla.prepare_vector": [[42, 45], ["torch.Variable().view", "torch.Variable", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "prepare_vector", "(", "inputVec", ",", "sz", ")", ":", "\n", "\t", "ret", "=", "autograd", ".", "Variable", "(", "torch", ".", "Tensor", "(", "inputVec", ")", ")", ".", "view", "(", "-", "1", ",", "sz", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyVanilla.prepare_target": [[46, 49], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Variable"], "function", ["None"], ["", "def", "prepare_target", "(", "target_id", ")", ":", "\n", "\t", "tensor", "=", "torch", ".", "LongTensor", "(", "[", "target_id", "]", ")", "\n", "return", "autograd", ".", "Variable", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyVanilla.trainVanilla": [[50, 65], ["torch.Adam", "range", "model.parameters", "model.zero_grad", "classifyVanilla.prepare_vector", "classifyVanilla.prepare_target", "model", "loss_function", "print", "loss_function.backward", "optim.Adam.step", "len"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target"], ["", "def", "trainVanilla", "(", "training_data", ")", ":", "\n", "\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "\t\t", "for", "inputVec", ",", "target", "in", "training_data", ":", "\n", "\t\t\t", "model", ".", "zero_grad", "(", ")", "\n", "\n", "inputVec", "=", "prepare_vector", "(", "inputVec", ",", "len", "(", "inputVec", ")", ")", "\n", "target_actual", "=", "prepare_target", "(", "target", ")", "\n", "\n", "target_predicted_scores", "=", "model", "(", "inputVec", ")", "\n", "\n", "loss", "=", "loss_function", "(", "target_predicted_scores", ",", "target_actual", ")", "\n", "print", "(", "\"loss: \"", ",", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyVanilla.testVanilla": [[66, 84], ["print", "classifyVanilla.prepare_vector", "model", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "y_true_list.append", "y_predicted_list.append", "print", "sklearn.metrics.confusion_matrix", "len", "model.data.tolist", "predicted.tolist"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["", "", "", "def", "testVanilla", "(", "testing_data", ")", ":", "\n", "\t", "y_true_list", "=", "[", "]", "\n", "y_predicted_list", "=", "[", "]", "\n", "for", "inputVec", ",", "target", "in", "testing_data", ":", "\n", "\t\t", "inputVec", "=", "prepare_vector", "(", "inputVec", ",", "len", "(", "inputVec", ")", ")", "\n", "y_predicted", "=", "model", "(", "inputVec", ")", "\n", "print", "(", "y_predicted", ".", "data", ".", "tolist", "(", ")", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "y_predicted", ".", "data", ",", "1", ")", "\n", "\n", "y_true", "=", "target", "\n", "y_true_list", ".", "append", "(", "y_true", ")", "\n", "\n", "y_predicted", "=", "predicted", ".", "tolist", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "y_predicted_list", ".", "append", "(", "y_predicted", ")", "\n", "\n", "print", "(", "y_true", ",", "y_predicted", ")", "\n", "\n", "", "print", "(", "confusion_matrix", "(", "y_true_list", ",", "y_predicted_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyVanilla.main": [[86, 107], ["getTweets.getTweetsAndFeatures", "classifyVanilla.VanillaNet", "print", "sklearn.cross_validation.train_test_split", "classifyVanilla.trainVanilla", "VanillaNet.parameters", "classifyVanilla.testVanilla", "X.append", "Y.append", "len", "int", "int", "zip", "print", "zip", "len", "len"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetsAndFeatures", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.trainVanilla", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.testVanilla"], ["", "def", "main", "(", ")", ":", "\n", "\t", "global", "model", "\n", "dataset", "=", "getTweetsAndFeatures", "(", "'tweet_dataset.tsv'", ")", "\n", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "dataset", ":", "\n", "\t\t", "X", ".", "append", "(", "x", ")", "\n", "Y", ".", "append", "(", "y", ")", "\n", "\n", "", "model", "=", "VanillaNet", "(", "len", "(", "X", "[", "0", "]", ")", ",", "int", "(", "len", "(", "X", "[", "0", "]", ")", "**", "0.5", ")", ",", "int", "(", "len", "(", "X", "[", "0", "]", ")", "**", "0.25", ")", ",", "2", ")", "\n", "print", "(", "model", ")", "\n", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "X", ",", "Y", ",", "test_size", "=", "0.3", ")", "\n", "\n", "trainVanilla", "(", "zip", "(", "X_train", ",", "Y_train", ")", ")", "\n", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "\t\t", "print", "(", "param", ".", "data", ")", "\n", "\n", "", "testVanilla", "(", "zip", "(", "X_test", ",", "Y_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.LSTMNet.__init__": [[14, 31], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "classifyTweets.LSTMNet.init_state"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state"], ["\t", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "hidden_dim", ",", "target_size", ",", "num_layers", "=", "1", ",", "directions", "=", "1", ",", "batch_size", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "LSTMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "directions", "==", "1", "or", "directions", "==", "2", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "directions", "=", "directions", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "bidirectional", "=", "False", "\n", "if", "directions", "==", "2", ":", "\n", "\t\t\t", "bidirectional", "=", "True", "\n", "\n", "", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "hidden_dim", ",", "num_layers", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "hidden_to_target", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "target_size", ")", "\n", "self", ".", "init_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.LSTMNet.init_state": [[32, 36], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_state", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "hidden_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "cell_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "state", "=", "(", "self", ".", "hidden_state", ",", "self", ".", "cell_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.LSTMNet.forward": [[37, 43], ["classifyTweets.LSTMNet.lstm", "classifyTweets.LSTMNet.hidden_to_target", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "sentence.view", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sentence", ")", ":", "\n", "\t\t", "lstm_out", ",", "self", ".", "state", "=", "self", ".", "lstm", "(", "sentence", ".", "view", "(", "len", "(", "sentence", ")", ",", "self", ".", "batch_size", ",", "self", ".", "embedding_dim", ")", ",", "self", ".", "state", ")", "\n", "lstm_out_last", "=", "lstm_out", "[", "-", "1", "]", "\n", "target_space", "=", "self", ".", "hidden_to_target", "(", "lstm_out_last", ")", "\n", "target_scores", "=", "F", ".", "log_softmax", "(", "target_space", ",", "dim", "=", "1", ")", "\n", "return", "target_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.VanillaNet.__init__": [[46, 51], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_size_1", ",", "hidden_size_2", ",", "target_size", ",", "batch_size", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "VanillaNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_to_hidden1", "=", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_size_1", ")", "\n", "self", ".", "hidden1_to_hidden2", "=", "nn", ".", "Linear", "(", "hidden_size_1", ",", "hidden_size_2", ")", "\n", "self", ".", "hidden2_to_output", "=", "nn", ".", "Linear", "(", "hidden_size_2", ",", "target_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.VanillaNet.forward": [[52, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "classifyTweets.VanillaNet.input_to_hidden1", "classifyTweets.VanillaNet.hidden1_to_hidden2", "classifyTweets.VanillaNet.hidden2_to_output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputVec", ")", ":", "\n", "\t\t", "hidden1", "=", "F", ".", "relu", "(", "self", ".", "input_to_hidden1", "(", "inputVec", ")", ")", "\n", "hidden2", "=", "F", ".", "relu", "(", "self", ".", "hidden1_to_hidden2", "(", "hidden1", ")", ")", "\n", "target_scores", "=", "F", ".", "log_softmax", "(", "self", ".", "hidden2_to_output", "(", "hidden2", ")", ")", "\n", "return", "target_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.prepare_sentence": [[65, 74], ["sentence.split.split", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Variable", "word_to_vec"], "function", ["None"], ["def", "prepare_sentence", "(", "sentence", ")", ":", "\n", "\n", "### Tokenize the sentence", "\n", "\t", "sentence", "=", "sentence", ".", "split", "(", ")", "\n", "\n", "### TODO: Get wordtovec for each word in the sentence", "\n", "word_vectors", "=", "[", "word_to_vec", "(", "word", ")", "for", "word", "in", "sentence", "]", "\n", "tensor", "=", "torch", ".", "Tensor", "(", "word_vectors", ")", "\n", "return", "autograd", ".", "Variable", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.prepare_vector": [[75, 79], ["torch.Variable().view", "torch.Variable", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "prepare_vector", "(", "inputVec", ",", "sz", ")", ":", "\n", "\t", "ret", "=", "autograd", ".", "Variable", "(", "torch", ".", "Tensor", "(", "inputVec", ")", ")", ".", "view", "(", "-", "1", ",", "sz", ")", "\n", "# print(type(ret))", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.prepare_target": [[81, 91], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Variable"], "function", ["None"], ["", "def", "prepare_target", "(", "target_id", ")", ":", "\n", "# print(target_id)\t# Should be 1 for fake, 0 for legitimate", "\n", "# target_id = np.array([target_id], dtype=np.int64)", "\n", "# target = np.zeros((target_id.size, 2), dtype=np.int64)", "\n", "# target[np.arange(target_id.size, dtype=np.int64), target_id] = 1", "\n", "# print(target)", "\n", "\n", "\t", "tensor", "=", "torch", ".", "LongTensor", "(", "[", "target_id", "]", ")", "#.view(-1,2)", "\n", "# print(tensor)", "\n", "return", "autograd", ".", "Variable", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.trainLSTM": [[93, 109], ["torch.SGD", "range", "model.parameters", "model.zero_grad", "model.init_state", "classifyTweets.prepare_sentence", "classifyTweets.prepare_target", "model", "loss_function", "print", "loss_function.backward", "optim.SGD.step"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.prepare_sentence", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target"], ["", "def", "trainLSTM", "(", "training_data", ")", ":", "\n", "\t", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "for", "epoch", "in", "range", "(", "30", ")", ":", "\n", "\t\t", "for", "sentence", ",", "target", "in", "training_data", ":", "\n", "\t\t\t", "model", ".", "zero_grad", "(", ")", "\n", "model", ".", "hidden", "=", "model", ".", "init_state", "(", ")", "\n", "\n", "sentence_in", "=", "prepare_sentence", "(", "sentence", ")", "\n", "target_actual", "=", "prepare_target", "(", "target", ")", "\n", "\n", "target_predicted_scores", "=", "model", "(", "sentence_in", ")", "\n", "\n", "loss", "=", "loss_function", "(", "target_predicted_scores", ",", "target_actual", ")", "\n", "print", "(", "\"loss: \"", ",", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.trainVanilla": [[111, 129], ["torch.Adam", "range", "model.parameters", "model.zero_grad", "classifyTweets.prepare_vector", "classifyTweets.prepare_target", "model", "loss_function", "print", "loss_function.backward", "optim.Adam.step", "len"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target"], ["", "", "", "def", "trainVanilla", "(", "training_data", ")", ":", "\n", "\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ")", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "\t\t", "for", "inputVec", ",", "target", "in", "training_data", ":", "\n", "\t\t\t", "model", ".", "zero_grad", "(", ")", "\n", "\n", "inputVec", "=", "prepare_vector", "(", "inputVec", ",", "len", "(", "inputVec", ")", ")", "\n", "target_actual", "=", "prepare_target", "(", "target", ")", "\n", "\n", "target_predicted_scores", "=", "model", "(", "inputVec", ")", "\n", "# print(\"target_predicted_scores: \", target_predicted_scores)", "\n", "# print(\"target_actual\", target_actual)", "\n", "\n", "loss", "=", "loss_function", "(", "target_predicted_scores", ",", "target_actual", ")", "\n", "print", "(", "\"loss: \"", ",", "loss", ")", "\n", "# exit(0)", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.testVanilla": [[130, 141], ["classifyTweets.prepare_vector", "model", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "print", "len", "model.data.tolist", "predicted.tolist"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["", "", "", "def", "testVanilla", "(", "testing_data", ")", ":", "\n", "\t", "for", "inputVec", ",", "target", "in", "testing_data", ":", "\n", "\t\t", "inputVec", "=", "prepare_vector", "(", "inputVec", ",", "len", "(", "inputVec", ")", ")", "\n", "# print(inputVec)", "\n", "y_predicted", "=", "model", "(", "inputVec", ")", "\n", "print", "(", "y_predicted", ".", "data", ".", "tolist", "(", ")", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "y_predicted", ".", "data", ",", "1", ")", "\n", "\n", "y_true", "=", "target", "\n", "\n", "print", "(", "y_true", ",", "predicted", ".", "tolist", "(", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.main": [[143, 170], ["getTweets.getTweetsAndFeatures", "classifyTweets.VanillaNet", "print", "sklearn.cross_validation.train_test_split", "classifyTweets.trainVanilla", "VanillaNet.parameters", "exit", "classifyTweets.testVanilla", "X.append", "Y.append", "len", "int", "int", "zip", "print", "zip", "len", "len"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetsAndFeatures", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.trainVanilla", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyTweets.testVanilla"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "global", "model", "\n", "dataset", "=", "getTweetsAndFeatures", "(", "'tweet_dataset.tsv'", ")", "\n", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "dataset", ":", "\n", "\t\t", "X", ".", "append", "(", "x", ")", "\n", "Y", ".", "append", "(", "y", ")", "\n", "\n", "# print(len(X[0]))", "\n", "", "model", "=", "VanillaNet", "(", "len", "(", "X", "[", "0", "]", ")", ",", "int", "(", "len", "(", "X", "[", "0", "]", ")", "**", "0.5", ")", ",", "int", "(", "len", "(", "X", "[", "0", "]", ")", "**", "0.25", ")", ",", "2", ")", "\n", "print", "(", "model", ")", "\n", "# exit(0)", "\n", "\n", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "X", ",", "Y", ",", "test_size", "=", "0.3", ")", "\n", "\n", "trainVanilla", "(", "zip", "(", "X_train", ",", "Y_train", ")", ")", "\n", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "\t\t", "print", "(", "param", ".", "data", ")", "\n", "\n", "", "exit", "(", "0", ")", "\n", "\n", "\n", "testVanilla", "(", "zip", "(", "X_test", ",", "Y_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTM.LSTMNet.__init__": [[15, 39], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "classifyLSTM.LSTMNet.parameters", "classifyLSTM.LSTMNet.init_state", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state"], ["\t", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "hidden_dim", ",", "target_size", ",", "num_layers", "=", "1", ",", "directions", "=", "1", ",", "batch_size", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "LSTMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "directions", "==", "1", "or", "directions", "==", "2", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "directions", "=", "directions", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "bidirectional", "=", "False", "\n", "if", "directions", "==", "2", ":", "\n", "\t\t\t", "bidirectional", "=", "True", "\n", "\n", "", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "hidden_dim", ",", "num_layers", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "hidden_to_target", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "target_size", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "weight_init", ".", "xavier_normal", "(", "param", ".", "data", ")", "\n", "", "except", "ValueError", ":", "\n", "\t\t\t\t", "weight_init", ".", "constant", "(", "param", ".", "data", ",", "0", ")", "\n", "\n", "", "", "self", ".", "init_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTM.LSTMNet.init_state": [[40, 44], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_state", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "hidden_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "cell_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "state", "=", "(", "self", ".", "hidden_state", ",", "self", ".", "cell_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTM.LSTMNet.forward": [[45, 51], ["classifyLSTM.LSTMNet.lstm", "classifyLSTM.LSTMNet.hidden_to_target", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "sentence.view", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sentence", ")", ":", "\n", "\t\t", "lstm_out", ",", "self", ".", "state", "=", "self", ".", "lstm", "(", "sentence", ".", "view", "(", "len", "(", "sentence", ")", ",", "self", ".", "batch_size", ",", "self", ".", "embedding_dim", ")", ",", "self", ".", "state", ")", "\n", "lstm_out_last", "=", "lstm_out", "[", "-", "1", "]", "\n", "target_space", "=", "self", ".", "hidden_to_target", "(", "lstm_out_last", ")", "\n", "target_scores", "=", "F", ".", "log_softmax", "(", "target_space", ")", "\n", "return", "target_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTM.prepare_vector": [[55, 58], ["torch.Variable", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "prepare_vector", "(", "inputVec", ")", ":", "\n", "\t", "ret", "=", "autograd", ".", "Variable", "(", "torch", ".", "Tensor", "(", "inputVec", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTM.prepare_target": [[59, 62], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Variable"], "function", ["None"], ["", "def", "prepare_target", "(", "target_ids", ")", ":", "\n", "\t", "tensor", "=", "torch", ".", "LongTensor", "(", "[", "target_ids", "]", ")", "\n", "return", "autograd", ".", "Variable", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTM.trainLSTM": [[63, 79], ["torch.Adam", "range", "model.parameters", "model.zero_grad", "model.init_state", "classifyLSTM.prepare_vector", "classifyLSTM.prepare_target", "model", "loss_function", "print", "loss_function.backward", "optim.Adam.step"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target"], ["", "def", "trainLSTM", "(", "training_data", ")", ":", "\n", "\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "for", "epoch", "in", "range", "(", "10", ")", ":", "\n", "\t\t", "for", "sentence", ",", "target", "in", "training_data", ":", "\n", "\t\t\t", "model", ".", "zero_grad", "(", ")", "\n", "model", ".", "hidden", "=", "model", ".", "init_state", "(", ")", "\n", "\n", "sentence_in", "=", "prepare_vector", "(", "sentence", ")", "\n", "target_actual", "=", "prepare_target", "(", "target", ")", "\n", "\n", "target_predicted_scores", "=", "model", "(", "sentence_in", ")", "\n", "\n", "loss", "=", "loss_function", "(", "target_predicted_scores", ",", "target_actual", ")", "\n", "print", "(", "\"loss: \"", ",", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTM.testLSTM": [[80, 98], ["print", "classifyLSTM.prepare_vector", "model", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "y_true_list.append", "y_predicted_list.append", "print", "sklearn.metrics.confusion_matrix", "model.data.tolist", "predicted.tolist"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["", "", "", "def", "testLSTM", "(", "testing_data", ")", ":", "\n", "\t", "y_true_list", "=", "[", "]", "\n", "y_predicted_list", "=", "[", "]", "\n", "for", "inputVec", ",", "target", "in", "testing_data", ":", "\n", "\t\t", "inputVec", "=", "prepare_vector", "(", "inputVec", ")", "\n", "y_predicted", "=", "model", "(", "inputVec", ")", "\n", "print", "(", "y_predicted", ".", "data", ".", "tolist", "(", ")", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "y_predicted", ".", "data", ",", "1", ")", "\n", "\n", "y_true", "=", "target", "\n", "y_true_list", ".", "append", "(", "y_true", ")", "\n", "\n", "y_predicted", "=", "predicted", ".", "tolist", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "y_predicted_list", ".", "append", "(", "y_predicted", ")", "\n", "\n", "print", "(", "y_true", ",", "y_predicted", ")", "\n", "\n", "", "print", "(", "confusion_matrix", "(", "y_true_list", ",", "y_predicted_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTM.main": [[101, 118], ["getTweets.getTweetEmbeddingLists", "classifyLSTM.LSTMNet", "print", "sklearn.cross_validation.train_test_split", "classifyLSTM.trainLSTM", "classifyLSTM.testLSTM", "X.append", "Y.append", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetEmbeddingLists", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.trainLSTM", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.testLSTM"], ["", "def", "main", "(", ")", ":", "\n", "\t", "global", "model", "\n", "dataset", "=", "getTweetEmbeddingLists", "(", "'tweet_dataset.tsv'", ")", "\n", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "dataset", ":", "\n", "\t\t", "X", ".", "append", "(", "x", ")", "\n", "Y", ".", "append", "(", "y", ")", "\n", "\n", "", "model", "=", "LSTMNet", "(", "300", ",", "300", ",", "2", ",", "directions", "=", "1", ")", "\n", "print", "(", "model", ")", "\n", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "X", ",", "Y", ",", "test_size", "=", "0.3", ")", "\n", "\n", "trainLSTM", "(", "zip", "(", "X_train", ",", "Y_train", ")", ")", "\n", "testLSTM", "(", "zip", "(", "X_test", ",", "Y_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.__init__": [[24, 48], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "classifyLSTMBatch.LSTMNet.parameters", "classifyLSTMBatch.LSTMNet.init_state", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.xavier_normal", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant", "torch.constant"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state"], ["\t", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "hidden_dim", ",", "target_size", ",", "num_layers", "=", "1", ",", "directions", "=", "1", ",", "batch_size", "=", "1", ")", ":", "\n", "\t\t", "super", "(", "LSTMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "directions", "==", "1", "or", "directions", "==", "2", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "directions", "=", "directions", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "bidirectional", "=", "False", "\n", "if", "directions", "==", "2", ":", "\n", "\t\t\t", "bidirectional", "=", "True", "\n", "\n", "", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "hidden_dim", ",", "num_layers", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "hidden_to_target", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "target_size", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "weight_init", ".", "xavier_normal", "(", "param", ".", "data", ")", "\n", "", "except", "ValueError", ":", "\n", "\t\t\t\t", "weight_init", ".", "constant", "(", "param", ".", "data", ",", "0", ")", "\n", "\n", "", "", "self", ".", "init_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state": [[49, 53], ["torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_state", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "hidden_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "cell_state", "=", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "num_layers", "*", "self", ".", "directions", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "state", "=", "(", "self", ".", "hidden_state", ",", "self", ".", "cell_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.forward": [[54, 61], ["classifyLSTMBatch.LSTMNet.lstm", "classifyLSTMBatch.LSTMNet.hidden_to_target", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "sentences.view", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sentences", ")", ":", "\n", "\t\t", "lstm_out", ",", "self", ".", "state", "=", "self", ".", "lstm", "(", "sentences", ".", "view", "(", "len", "(", "sentences", "[", "0", "]", ")", ",", "self", ".", "batch_size", ",", "self", ".", "embedding_dim", ")", ",", "self", ".", "state", ")", "\n", "lstm_out_last", "=", "lstm_out", "[", "-", "1", "]", "\n", "# print(lstm_out_last)", "\n", "target_space", "=", "self", ".", "hidden_to_target", "(", "lstm_out_last", ")", "\n", "target_scores", "=", "F", ".", "log_softmax", "(", "target_space", ")", "\n", "return", "target_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector": [[67, 72], ["print", "torch.Variable", "print", "len", "len", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "autograd.Variable.size", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "prepare_vector", "(", "inputVec", ")", ":", "\n", "\t", "print", "(", "len", "(", "inputVec", "[", "0", "]", ")", ",", "len", "(", "inputVec", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "ret", "=", "autograd", ".", "Variable", "(", "torch", ".", "Tensor", "(", "inputVec", ")", ".", "view", "(", "batch_size", ",", "len", "(", "inputVec", "[", "0", "]", ")", ",", "len", "(", "inputVec", "[", "0", "]", "[", "0", "]", ")", ")", ")", "\n", "print", "(", "ret", ".", "size", "(", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target": [[73, 76], ["torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "prepare_target", "(", "target_ids", ")", ":", "\n", "\t", "tensor", "=", "torch", ".", "LongTensor", "(", "[", "target_ids", "]", ")", ".", "view", "(", "batch_size", ",", "1", ")", "\n", "return", "autograd", ".", "Variable", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.trainLSTM": [[77, 93], ["torch.Adam", "range", "model.parameters", "model.zero_grad", "model.init_state", "classifyLSTMBatch.prepare_vector", "classifyLSTMBatch.prepare_target", "model", "loss_function", "print", "loss_function.backward", "optim.Adam.step", "model.view", "prepare_target.view"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.LSTMNet.init_state", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target"], ["", "def", "trainLSTM", "(", "training_data", ")", ":", "\n", "\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "for", "epoch", "in", "range", "(", "10", ")", ":", "\n", "\t\t", "for", "sentence", ",", "target", "in", "training_data", ":", "\n", "\t\t\t", "model", ".", "zero_grad", "(", ")", "\n", "model", ".", "hidden", "=", "model", ".", "init_state", "(", ")", "\n", "\n", "sentence_in", "=", "prepare_vector", "(", "sentence", ")", "\n", "target_actual", "=", "prepare_target", "(", "target", ")", "\n", "\n", "target_predicted_scores", "=", "model", "(", "sentence_in", ")", "\n", "\n", "loss", "=", "loss_function", "(", "target_predicted_scores", ".", "view", "(", "-", "1", ")", ",", "target_actual", ".", "view", "(", "-", "1", ")", ")", "\n", "print", "(", "\"loss: \"", ",", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.trainLSTMBatch": [[94, 105], ["torch.Adam", "range", "model.parameters", "range", "len", "model.zero_grad", "classifyLSTMBatch.prepare_vector", "classifyLSTMBatch.prepare_target", "model", "loss_function", "loss_function.backward", "optim.Adam.step"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_target"], ["", "", "", "def", "trainLSTMBatch", "(", "X", ",", "Y", ")", ":", "\n", "\t", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "for", "epoch", "in", "range", "(", "10", ")", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "batch_size", ")", ":", "\n", "\t\t\t", "model", ".", "zero_grad", "(", ")", "\n", "batch_x", "=", "prepare_vector", "(", "X", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "batch_y", "=", "prepare_target", "(", "Y", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "outputs", "=", "model", "(", "batch_x", ")", "\n", "loss", "=", "loss_function", "(", "outputs", ",", "batch_y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.testLSTMBatch": [[106, 114], ["range", "len", "model", "loss_function", "loss_function.backward", "optimizer.step"], "function", ["None"], ["", "", "", "def", "testLSTMBatch", "(", "X", ",", "Y", ")", ":", "\n", "\t", "for", "i", "in", "range", "(", "0", ",", "len", "(", "X", ")", ",", "batch_size", ")", ":", "\n", "\t\t", "batch_x", "=", "X", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "batch_y", "=", "Y", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "outputs", "=", "model", "(", "batch_x", ")", "\n", "loss", "=", "loss_function", "(", "outputs", ",", "batch_y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.testLSTM": [[116, 126], ["classifyLSTMBatch.prepare_vector", "model", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "print", "model.data.tolist", "predicted.tolist"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.prepare_vector"], ["", "", "def", "testLSTM", "(", "testing_data", ")", ":", "\n", "\t", "for", "inputVec", ",", "target", "in", "testing_data", ":", "\n", "\t\t", "inputVec", "=", "prepare_vector", "(", "inputVec", ")", "\n", "y_predicted", "=", "model", "(", "inputVec", ")", "\n", "print", "(", "y_predicted", ".", "data", ".", "tolist", "(", ")", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "y_predicted", ".", "data", ",", "1", ")", "\n", "\n", "y_true", "=", "target", "\n", "\n", "print", "(", "y_true", ",", "predicted", ".", "tolist", "(", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.main": [[128, 146], ["getTweets.getTweetEmbeddingLists", "classifyLSTMBatch.LSTMNet", "print", "sklearn.cross_validation.train_test_split", "classifyLSTMBatch.trainLSTMBatch", "classifyLSTMBatch.testLSTM", "X.append", "Y.append", "zip"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetEmbeddingLists", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.trainLSTMBatch", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.classifyLSTMBatch.testLSTM"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "global", "model", "\n", "dataset", "=", "getTweetEmbeddingLists", "(", "'tweet_dataset.tsv'", ")", "\n", "\n", "X", "=", "[", "]", "\n", "Y", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "dataset", ":", "\n", "\t\t", "X", ".", "append", "(", "x", ")", "\n", "Y", ".", "append", "(", "y", ")", "\n", "\n", "", "model", "=", "LSTMNet", "(", "300", ",", "300", ",", "2", ",", "batch_size", "=", "batch_size", ",", "directions", "=", "1", ")", "\n", "print", "(", "model", ")", "\n", "\n", "X_train", ",", "X_test", ",", "Y_train", ",", "Y_test", "=", "train_test_split", "(", "X", ",", "Y", ",", "test_size", "=", "0.3", ")", "\n", "\n", "# trainLSTM(zip(X_train, Y_train))", "\n", "trainLSTMBatch", "(", "X_train", ",", "Y_train", ")", "\n", "testLSTM", "(", "zip", "(", "X_test", ",", "Y_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.iterate_tweets": [[7, 20], ["csvFile.read().split.pop", "open", "csvFile.read().split", "row.split.split", "row[].strip", "row[].strip().lower", "csvFile.read", "row[].strip"], "function", ["None"], ["def", "iterate_tweets", "(", "filename", ")", ":", "\n", "\t", "with", "open", "(", "filename", ")", "as", "csvFile", ":", "\n", "\t\t", "reader", "=", "csvFile", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "", "reader", ".", "pop", "(", "0", ")", "## To remove the header", "\n", "for", "row", "in", "reader", ":", "\n", "\t\t", "row", "=", "row", ".", "split", "(", "'\\t'", ")", "\n", "tweet", "=", "row", "[", "1", "]", ".", "strip", "(", ")", "\n", "labelText", "=", "row", "[", "-", "1", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "assert", "(", "labelText", "==", "'fake'", "or", "labelText", "==", "'real'", ")", "\n", "label", "=", "0", "\n", "if", "labelText", "==", "'fake'", ":", "\n", "\t\t\t", "label", "=", "1", "\n", "", "yield", "tweet", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.features_tweet": [[22, 71], ["TweetClassifier.textUtils.TextFeaturesExtractor", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.length", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumWords", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.numSymbol", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.numSymbol", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumUpperCase", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.getFractionUpperCase", "features.append", "TweetClassifier.textUtils.TextFeaturesExtractor.numURL", "TweetClassifier.textUtils.TextFeaturesExtractor.getEmbedding"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.length", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumWords", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.numSymbol", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.numSymbol", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumUpperCase", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.containsSymbol", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getNumOccurencesOfFileData", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getFractionUpperCase", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.numURL", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getEmbedding"], ["", "", "def", "features_tweet", "(", "tweetText", ",", "features_to_be_extracted", "=", "ALL_FEATURES", ")", ":", "\n", "\t", "features", "=", "[", "]", "\n", "tfe", "=", "TextFeaturesExtractor", "(", "tweetText", ")", "\n", "for", "feature_name", "in", "features_to_be_extracted", ":", "\n", "\t\t", "if", "feature_name", "==", "LENGTH", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "length", "(", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_WORDS", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumWords", "(", ")", ")", "\n", "", "elif", "feature_name", "==", "CONTAINS_QUESTION_MARK", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "containsSymbol", "(", "'?'", ")", ")", "\n", "", "elif", "feature_name", "==", "CONTAINS_EXCLAMATION_MARK", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "containsSymbol", "(", "'!'", ")", ")", "\n", "\n", "", "elif", "feature_name", "==", "NUM_QUESTION_MARK", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "numSymbol", "(", "'?'", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_EXCLAMATION_MARK", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "numSymbol", "(", "'!'", ")", ")", "\n", "\n", "", "elif", "feature_name", "==", "CONTAINS_HAPPY_EMOTICON", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumOccurencesOfFileData", "(", "\"happy_emoticon\"", ")", ")", "\n", "", "elif", "feature_name", "==", "CONTAINS_SAD_EMOTICON", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumOccurencesOfFileData", "(", "\"sad_emoticon\"", ")", ")", "\n", "\n", "", "elif", "feature_name", "==", "NUM_UPPER_CASE", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumUpperCase", "(", ")", ")", "\n", "", "elif", "feature_name", "==", "CONTAINS_COLON", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "containsSymbol", "(", "':'", ")", ")", "\n", "", "elif", "feature_name", "==", "CONTAINS_PLEASE", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "containsSymbol", "(", "'please'", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_POSITIVE_SENTIMENTS", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumOccurencesOfFileData", "(", "\"positive_sentiments\"", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_NEGATIVE_SENTIMENTS", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumOccurencesOfFileData", "(", "\"negative_sentiments\"", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_FIRST_PERSON_PRON", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumOccurencesOfFileData", "(", "\"first_person_pronouns\"", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_SECOND_PERSON_PRON", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumOccurencesOfFileData", "(", "\"second_person_pronouns\"", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_THIRD_PERSON_PRON", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumOccurencesOfFileData", "(", "\"third_person_pronouns\"", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_SLANG", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getNumOccurencesOfFileData", "(", "\"slang\"", ")", ")", "\n", "\n", "", "elif", "feature_name", "==", "FRACTION_UPPER_CASE", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "getFractionUpperCase", "(", ")", ")", "\n", "", "elif", "feature_name", "==", "NUM_URL", ":", "\n", "\t\t\t", "features", ".", "append", "(", "tfe", ".", "numURL", "(", ")", ")", "\n", "", "elif", "feature_name", "==", "EMBEDDING", ":", "\n", "\t\t\t", "features", "+=", "tfe", ".", "getEmbedding", "(", ")", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.embedding_list": [[72, 75], ["TweetClassifier.textUtils.TextFeaturesExtractor", "TweetClassifier.textUtils.TextFeaturesExtractor.getEmbeddingList"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.textUtils.TextFeaturesExtractor.getEmbeddingList"], ["", "def", "embedding_list", "(", "tweetText", ")", ":", "\n", "\t", "tfe", "=", "TextFeaturesExtractor", "(", "tweetText", ")", "\n", "return", "tfe", ".", "getEmbeddingList", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetsAndFeatures": [[77, 85], ["getTweets.iterate_tweets", "dataset.append", "getTweets.features_tweet"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.iterate_tweets", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.features_tweet"], ["", "def", "getTweetsAndFeatures", "(", "tweetFileName", ",", "features_to_be_extracted", "=", "ALL_FEATURES", ")", ":", "\n", "\t", "tweetIterator", "=", "iterate_tweets", "(", "tweetFileName", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "tweet", ",", "label", "in", "tweetIterator", ":", "\n", "\t\t", "dataset", ".", "append", "(", "(", "features_tweet", "(", "tweet", ",", "features_to_be_extracted", ")", ",", "label", ")", ")", "\n", "# print(features_tweet(tweet, features_to_be_extracted))", "\n", "# print(label, tweet)", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetEmbeddingLists": [[86, 92], ["getTweets.iterate_tweets", "dataset.append", "getTweets.embedding_list"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.iterate_tweets", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.embedding_list"], ["", "def", "getTweetEmbeddingLists", "(", "tweetFileName", ")", ":", "\n", "\t", "tweetIterator", "=", "iterate_tweets", "(", "tweetFileName", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "tweet", ",", "label", "in", "tweetIterator", ":", "\n", "\t\t", "dataset", ".", "append", "(", "(", "embedding_list", "(", "tweet", ")", ",", "label", ")", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.getTweetsEmbeddingsAndFeatures": [[93, 99], ["getTweets.iterate_tweets", "dataset.append", "getTweets.embedding_list", "getTweets.features_tweet"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.iterate_tweets", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.embedding_list", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.TweetClassifier.getTweets.features_tweet"], ["", "def", "getTweetsEmbeddingsAndFeatures", "(", "tweetFileName", ",", "features_to_be_extracted", "=", "ALL_FEATURES", ")", ":", "\n", "\t", "tweetIterator", "=", "iterate_tweets", "(", "tweetFileName", ")", "\n", "dataset", "=", "[", "]", "\n", "for", "tweet", ",", "label", "in", "tweetIterator", ":", "\n", "\t\t", "dataset", ".", "append", "(", "(", "embedding_list", "(", "tweet", ")", ",", "features_tweet", "(", "tweet", ",", "features_to_be_extracted", ")", ",", "label", ")", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__init__": [[21, 38], ["Video.Video.__getVideoFile", "Video.Video.__getChannelFile", "Video.Video.__getCommentsFile", "Video.Video.get_title", "Video.Video.__getChannel"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getVideoFile", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getChannelFile", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getCommentsFile", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getChannel"], ["class", "Video", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "videoId", ")", ":", "\n", "\t\t", "self", ".", "videoId", "=", "videoId", "\n", "self", ".", "videoFile", "=", "self", ".", "__getVideoFile", "(", "videoId", ")", "\n", "self", ".", "channelFile", "=", "self", ".", "__getChannelFile", "(", "videoId", ")", "\n", "self", ".", "commentsFile", "=", "self", ".", "__getCommentsFile", "(", "videoId", ")", "\n", "self", ".", "legitimate", "=", "(", "(", "self", ".", "videoFile", "is", "not", "None", ")", "and", "(", "self", ".", "channelFile", "is", "not", "None", ")", "and", "(", "self", ".", "commentsFile", "is", "not", "None", ")", ")", "\n", "\n", "self", ".", "videoDetails", "=", "None", "\n", "self", ".", "channel", "=", "None", "\n", "self", ".", "comments", "=", "None", "\n", "\n", "if", "self", ".", "legitimate", ":", "\n", "\t\t\t", "if", "not", "self", ".", "get_title", "(", ")", ":", "\n", "\t\t\t\t", "self", ".", "legitimate", "=", "False", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "channel", "=", "self", ".", "__getChannel", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getVideoFile": [[43, 49], ["os.path.join", "os.path.isfile", "videoId.strip"], "methods", ["None"], ["\n", "", "", "", "def", "__getVideoFile", "(", "self", ",", "videoId", ")", ":", "\n", "\t\t", "filename", "=", "os", ".", "path", ".", "join", "(", "videoFolder", ",", "\"Video_{id}.json\"", ".", "format", "(", "id", "=", "videoId", ".", "strip", "(", ")", ")", ")", "\n", "# filename = \"{Folder}/Video_{videoId}.json\".format(Folder=videoFolder, videoId=videoId.strip())", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", "==", "False", ":", "\n", "\t\t\t", "return", "None", "\n", "", "return", "filename", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getChannelFile": [[50, 56], ["os.path.join", "os.path.isfile", "videoId.strip"], "methods", ["None"], ["\n", "", "def", "__getChannelFile", "(", "self", ",", "videoId", ")", ":", "\n", "\t\t", "filename", "=", "os", ".", "path", ".", "join", "(", "channelFolder", ",", "\"Video_{id}.json\"", ".", "format", "(", "id", "=", "videoId", ".", "strip", "(", ")", ")", ")", "\n", "# filename = \"{Folder}/Video_{videoId}.json\".format(Folder=channelFolder, videoId=videoId.strip())", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", "==", "False", ":", "\n", "\t\t\t", "return", "None", "\n", "", "return", "filename", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getCommentsFile": [[57, 63], ["os.path.join", "os.path.isfile", "videoId.strip"], "methods", ["None"], ["\n", "", "def", "__getCommentsFile", "(", "self", ",", "videoId", ")", ":", "\n", "\t\t", "filename", "=", "os", ".", "path", ".", "join", "(", "commentsFolder", ",", "\"Video_{id}.json\"", ".", "format", "(", "id", "=", "videoId", ".", "strip", "(", ")", ")", ")", "\n", "# filename = \"{Folder}/Video_{videoId}.json\".format(Folder=commentsFolder, videoId=videoId.strip())", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", "==", "False", ":", "\n", "\t\t\t", "return", "None", "\n", "", "return", "filename", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getChannel": [[64, 71], ["[].strip", "Video.Channel.get_or_create_channel", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.get_or_create_channel"], ["\n", "", "def", "__getChannel", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "channelFile", "is", "None", ":", "\n", "\t\t\t", "return", "None", "\n", "", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t", "videojson", "=", "json", ".", "load", "(", "f", ")", "\n", "", "channelId", "=", "videojson", "[", "\"items\"", "]", "[", "0", "]", "[", "\"snippet\"", "]", "[", "\"channelId\"", "]", ".", "strip", "(", ")", "#.encode(\"utf-8\")", "\n", "return", "Channel", ".", "get_or_create_channel", "(", "channelId", ",", "self", ".", "channelFile", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__create_comments": [[72, 89], ["open", "json.load", "len", "list", "Video.TopLevelComment", "json.load.values", "Video.Video.comments.append"], "methods", ["None"], ["\n", "", "def", "__create_comments", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "commentsFile", "is", "None", ":", "\n", "\t\t\t", "return", "None", "\n", "\n", "", "with", "open", "(", "self", ".", "commentsFile", ")", "as", "f", ":", "\n", "\t\t\t", "comments_json", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "assert", "len", "(", "comments_json", ")", "==", "1", "\n", "comments_json", "=", "list", "(", "comments_json", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "\n", "self", ".", "comments", "=", "[", "]", "\n", "\n", "for", "comment_id", "in", "comments_json", ":", "\n", "\t\t\t", "comment", "=", "TopLevelComment", "(", "self", ".", "videoId", ",", "comment_id", ",", "comments_json", "[", "comment_id", "]", ")", "\n", "if", "comment", ".", "commentProperties", "is", "not", "None", ":", "# Comment not available now! Maybe deleted :/", "\n", "\t\t\t\t", "self", ".", "comments", ".", "append", "(", "comment", ")", "\n", "assert", "self", ".", "videoId", "==", "comment", ".", "videoId", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_num_comments": [[100, 104], ["len", "Video.Video.__create_comments"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__create_comments"], ["denominator", "=", "0", "\n", "for", "comment", "in", "self", ".", "comments", "[", ":", "max_comments", "]", ":", "\n", "\t\t\t", "total_inappropriateness", "+=", "comment", ".", "get_inappropriateness", "(", ")", "\n", "denominator", "+=", "1", "\n", "", "if", "denominator", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_comments_inappropriateness": [[105, 114], ["Video.Video.get_iterator_comments", "comment.get_inappropriateness"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_iterator_comments", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.get_inappropriateness"], ["\t\t\t", "return", "0.0", "\n", "", "return", "total_inappropriateness", "/", "denominator", "\n", "\n", "", "def", "get_comments_fakeness", "(", "self", ",", "max_comments", "=", "100000", ",", "for_zero_comments", "=", "0.0", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tFakeness Indicating Comments\n\t\t\"\"\"", "\n", "if", "self", ".", "comments", "is", "None", ":", "\n", "\t\t\t", "self", ".", "__create_comments", "(", ")", "\n", "", "numerator", "=", "sum", "(", "[", "cmt", ".", "says_fake", "(", ")", "for", "cmt", "in", "self", ".", "comments", "[", ":", "max_comments", "]", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_comments_fakeness": [[115, 124], ["sum", "min", "len", "cmt.says_fake", "Video.Video.get_iterator_comments"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.says_fake", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_iterator_comments"], ["denominator", "=", "len", "(", "self", ".", "comments", ")", "\n", "if", "denominator", "==", "0", ":", "\n", "\t\t\t", "return", "for_zero_comments", "\n", "", "return", "(", "numerator", "*", "1.0", ")", "/", "denominator", "\n", "\n", "", "def", "get_title", "(", "self", ")", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n", "\t\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title": [[126, 134], ["open", "json.load"], "methods", ["None"], ["", "except", "IndexError", ":", "\n", "\t\t\t", "return", "None", "\n", "# except TypeError:", "\n", "# \treturn None", "\n", "\n", "", "", "def", "get_conversation_ratio", "(", "self", ",", "recursive", "=", "True", ",", "max_comments", "=", "100000", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tConversation Ratio in Comments\n\t\t\"\"\"", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_conversation_ratio": [[135, 157], ["Video.Video.get_iterator_comments", "comment.isConversationalRecursive", "comment.isConversational"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_iterator_comments", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.TopLevelComment.isConversationalRecursive", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.isConversational"], ["if", "self", ".", "comments", "is", "None", ":", "\n", "\t\t\t", "self", ".", "__create_comments", "(", ")", "\n", "", "total_conversational_comments", "=", "0", "\n", "denominator", "=", "0", "\n", "for", "comment", "in", "self", ".", "comments", "[", ":", "max_comments", "]", ":", "\n", "\t\t\t", "if", "recursive", ":", "\n", "\t\t\t\t", "addThis", "=", "comment", ".", "isConversationalRecursive", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "addThis", "=", "comment", ".", "isConversational", "(", ")", "\n", "\n", "", "total_conversational_comments", "+=", "addThis", "\n", "if", "addThis", ">", "0", ":", "\n", "\t\t\t\t", "denominator", "+=", "addThis", "\n", "", "elif", "addThis", "==", "0", ":", "\n", "\t\t\t\t", "denominator", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "Exception", "\n", "", "", "if", "denominator", "==", "0", ":", "\n", "\t\t\t", "return", "0.0", "\n", "", "return", "(", "total_conversational_comments", "*", "1.0", ")", "/", "denominator", "\n", "\n", "", "def", "get_like_count", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_like_count": [[158, 166], ["int", "open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "try", ":", "\n", "\t\t\t", "return", "int", "(", "self", ".", "videoDetails", "[", "\"statistics\"", "]", "[", "\"likeCount\"", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "\t\t\t", "return", "0", "\n", "\n", "", "", "def", "get_dislike_count", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_dislike_count": [[167, 175], ["int", "open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "try", ":", "\n", "\t\t\t", "return", "int", "(", "self", ".", "videoDetails", "[", "\"statistics\"", "]", "[", "\"dislikeCount\"", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "\t\t\t", "return", "0", "\n", "\n", "", "", "def", "get_tags", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_tags": [[176, 184], ["open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "try", ":", "\n", "\t\t\t", "return", "self", ".", "videoDetails", "[", "\"snippet\"", "]", "[", "\"tags\"", "]", "\n", "", "except", "KeyError", ":", "\n", "\t\t\t", "return", "[", "]", "\n", "\n", "", "", "def", "get_description", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_description": [[185, 190], ["[].strip", "open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "return", "self", ".", "videoDetails", "[", "\"snippet\"", "]", "[", "\"description\"", "]", ".", "strip", "(", ")", "\n", "\n", "", "def", "get_duration_in_timedelta", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_duration_in_timedelta": [[191, 196], ["isodate.parse_duration", "open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "return", "isodate", ".", "parse_duration", "(", "self", ".", "videoDetails", "[", "\"contentDetails\"", "]", "[", "\"duration\"", "]", ")", "\n", "\n", "", "def", "get_default_audio_language", "(", "self", ",", "if_not_provided", "=", "\"en\"", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_default_audio_language": [[197, 202], ["Video.Video.videoDetails[].get", "open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "return", "self", ".", "videoDetails", "[", "\"snippet\"", "]", ".", "get", "(", "\"defaultAudioLanguage\"", ",", "if_not_provided", ")", "\n", "\n", "", "def", "get_default_language", "(", "self", ",", "if_not_provided", "=", "\"en\"", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_default_language": [[203, 208], ["Video.Video.videoDetails[].get", "open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "return", "self", ".", "videoDetails", "[", "\"snippet\"", "]", ".", "get", "(", "\"defaultLanguage\"", ",", "if_not_provided", ")", "\n", "\n", "", "def", "is_live", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.is_live": [[209, 216], ["Video.Video.videoDetails.get", "open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "if", "self", ".", "videoDetails", ".", "get", "(", "\"liveStreamingDetails\"", ")", "is", "not", "None", ":", "\n", "\t\t\t", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "def", "get_category", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "videoDetails", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_category": [[217, 222], ["open", "json.load"], "methods", ["None"], ["\t\t\t", "with", "open", "(", "self", ".", "videoFile", ")", "as", "f", ":", "\n", "\t\t\t\t", "self", ".", "videoDetails", "=", "json", ".", "load", "(", "f", ")", "[", "\"items\"", "]", "[", "0", "]", "\n", "", "", "return", "self", ".", "videoDetails", "[", "\"snippet\"", "]", "[", "\"categoryId\"", "]", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.get_or_create_channel": [[236, 251], ["Channel.loadedChannels.get", "Video.Channel", "os.path.join", "os.path.isfile"], "methods", ["None"], ["\t\t\t", "channelFile", "=", "os", ".", "path", ".", "join", "(", "'..'", ",", "'..'", ",", "'data'", ",", "'ChannelByIdNew'", ",", "'{}.json'", ".", "format", "(", "channelId", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "channelFile", ")", ":", "\n", "\t\t\t", "raise", "FileNotFoundError", "\n", "\n", "", "Channel", ".", "loadedChannels", "[", "channelId", "]", "=", "Channel", "(", "channelId", ",", "channelFile", ")", "\n", "return", "Channel", ".", "loadedChannels", "[", "channelId", "]", "\n", "\n", "", "def", "__init__", "(", "self", ",", "channelId", ",", "channelFile", ")", ":", "\n", "\t\t", "self", ".", "channelId", "=", "channelId", "\n", "self", ".", "channelFile", "=", "channelFile", "\n", "self", ".", "channelDetails", "=", "None", "\n", "\n", "", "def", "getDetail", "(", "self", ",", "key", ")", ":", "\n", "\t\t", "if", "self", ".", "channelDetails", "is", "None", ":", "\n", "\t\t\t", "self", ".", "readChannelFeatures", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.__init__": [[252, 256], ["None"], "methods", ["None"], ["", "return", "self", ".", "channelDetails", "[", "key", "]", "\n", "\n", "\n", "", "def", "readChannelFeatures", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "channelDetails", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.getDetail": [[257, 261], ["Video.Channel.readChannelFeatures"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.readChannelFeatures"], ["channelDetailsOriginal", "=", "{", "}", "\n", "\n", "with", "open", "(", "self", ".", "channelFile", ")", "as", "f", ":", "\n", "\t\t\t", "channelDetailsOriginal", "=", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Channel.readChannelFeatures": [[263, 301], ["int", "int", "int", "int", "len", "open", "json.load", "json.load.get", "max", "type", "type", "int", "float", "float", "float", "float", "float", "float", "float", "float", "print", "int", "int", "int", "int", "max", "int"], "methods", ["None"], ["\t\t\t", "channelDetailsOriginal", "=", "channelDetailsOriginal", "[", "\"items\"", "]", "[", "0", "]", "\n", "\n", "", "self", ".", "channelDetails", "[", "\"videoCount\"", "]", "=", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"videoCount\"", "]", ")", "\n", "self", ".", "channelDetails", "[", "\"commentCount\"", "]", "=", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"commentCount\"", "]", ")", "\n", "self", ".", "channelDetails", "[", "\"viewCount\"", "]", "=", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"viewCount\"", "]", ")", "\n", "self", ".", "channelDetails", "[", "\"subscriberCount\"", "]", "=", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"subscriberCount\"", "]", ")", "\n", "self", ".", "channelDetails", "[", "\"brandingSettingsImages\"", "]", "=", "channelDetailsOriginal", "[", "\"brandingSettings\"", "]", "[", "\"image\"", "]", "\n", "\n", "self", ".", "channelDetails", "[", "\"description\"", "]", "=", "channelDetailsOriginal", "[", "\"snippet\"", "]", "[", "\"description\"", "]", "\n", "self", ".", "channelDetails", "[", "\"title\"", "]", "=", "channelDetailsOriginal", "[", "\"snippet\"", "]", "[", "\"title\"", "]", "\n", "\n", "try", ":", "\n", "\t\t\t", "self", ".", "channelDetails", "[", "\"keywords\"", "]", "=", "channelDetailsOriginal", "[", "\"brandingSettings\"", "]", "[", "\"channel\"", "]", "[", "\"keywords\"", "]", "\n", "", "except", "KeyError", ":", "\n", "\t\t\t", "self", ".", "channelDetails", "[", "\"keywords\"", "]", "=", "\"NONE\"", "\n", "", "try", ":", "\n", "\t\t\t", "self", ".", "channelDetails", "[", "\"featuredChannels\"", "]", "=", "channelDetailsOriginal", "[", "\"brandingSettings\"", "]", "[", "\"channel\"", "]", "[", "\"featuredChannelsUrls\"", "]", "\n", "assert", "type", "(", "self", ".", "channelDetails", "[", "\"featuredChannels\"", "]", ")", "==", "type", "(", "[", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "\t\t\t", "self", ".", "channelDetails", "[", "\"featuredChannels\"", "]", "=", "[", "]", "\n", "", "self", ".", "channelDetails", "[", "\"numFeaturedChannels\"", "]", "=", "len", "(", "self", ".", "channelDetails", "[", "\"featuredChannels\"", "]", ")", "\n", "\n", "try", ":", "\n", "\t\t\t", "videoCount", "=", "max", "(", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"videoCount\"", "]", ")", ",", "1", ")", "\n", "self", ".", "channelDetails", "[", "\"commentCountRatio\"", "]", "=", "float", "(", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"commentCount\"", "]", ")", ")", "/", "float", "(", "videoCount", ")", "\n", "self", ".", "channelDetails", "[", "\"viewCountRatio\"", "]", "=", "float", "(", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"viewCount\"", "]", ")", ")", "/", "float", "(", "videoCount", ")", "\n", "self", ".", "channelDetails", "[", "\"subscriberCountRatiovideo\"", "]", "=", "float", "(", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"subscriberCount\"", "]", ")", ")", "/", "float", "(", "videoCount", ")", "\n", "self", ".", "channelDetails", "[", "\"subscriberCountRatioviews\"", "]", "=", "float", "(", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"subscriberCount\"", "]", ")", ")", "/", "float", "(", "max", "(", "int", "(", "channelDetailsOriginal", "[", "\"statistics\"", "]", "[", "\"viewCount\"", "]", ")", ",", "1", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "print", "(", "\"exception in Channel:\"", ",", "e", ")", "\n", "\n", "\n", "", "", "", "class", "Comment", ":", "\n", "\t", "\"\"\"Abstract Class\"\"\"", "\n", "__metaclass__", "=", "ABCMeta", "\n", "\n", "def", "__init__", "(", "self", ",", "videoId", ")", ":", "\n", "\t\t", "self", ".", "videoId", "=", "videoId", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.__init__": [[307, 309], ["None"], "methods", ["None"], ["\n", "", "def", "get_inappropriateness", "(", "self", ")", ":", "\n", "\t\t", "return", "textProcessor", ".", "inappropriateness", "(", "self", ".", "getText", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.getText": [[310, 312], ["None"], "methods", ["None"], ["\n", "", "def", "says_fake", "(", "self", ")", ":", "\n", "\t\t", "return", "textProcessor", ".", "fakeness", "(", "self", ".", "getText", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.getLikeCount": [[313, 315], ["None"], "methods", ["None"], ["\n", "", "def", "isConversational", "(", "self", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "self", ",", "TopLevelComment", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.get_inappropriateness": [[316, 318], ["ClassesAndUtil.textProcessor.inappropriateness", "Video.Comment.getText"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.inappropriateness", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.getText"], ["\t\t\t", "return", "len", "(", "self", ".", "replies", ")", ">", "0", "\n", "", "else", ":", "\n", "\t\t\t", "return", "True", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.says_fake": [[319, 321], ["ClassesAndUtil.textProcessor.fakeness", "Video.Comment.getText"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.fakeness", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.getText"], ["\n", "", "", "", "class", "TopLevelComment", "(", "Comment", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.isConversational": [[325, 330], ["isinstance", "len"], "methods", ["None"], ["self", ".", "commentId", "=", "commentId", "\n", "if", "comment_values", "[", "\"main_comment\"", "]", "==", "\"\"", ":", "\n", "# print videoId", "\n", "\t\t\t\t", "self", ".", "commentProperties", "=", "None", "\n", "self", ".", "replies", "=", "None", "\n", "return", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.TopLevelComment.__init__": [[333, 349], ["Video.Comment.__init__", "Video.RepliedComment", "print", "print", "print", "exit", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__"], ["", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "print", "(", "e", ")", "\n", "print", "(", "commentId", ")", "\n", "print", "(", "json", ".", "dumps", "(", "comment_values", ",", "indent", "=", "4", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "", "def", "isConversationalRecursive", "(", "self", ")", ":", "\n", "\t\t", "if", "len", "(", "self", ".", "replies", ")", ">", "0", ":", "\n", "\t\t\t", "return", "len", "(", "self", ".", "replies", ")", "+", "1", "\n", "", "return", "0", "\n", "\n", "\n", "\n", "", "", "class", "RepliedComment", "(", "Comment", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "videoId", ",", "parentId", ",", "comment_values", ")", ":", "\n", "\t\t", "super", "(", "RepliedComment", ",", "self", ")", ".", "__init__", "(", "videoId", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.TopLevelComment.isConversationalRecursive": [[350, 354], ["len", "len"], "methods", ["None"], ["self", ".", "parentId", "=", "parentId", "\n", "self", ".", "commentProperties", "=", "comment_values", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.RepliedComment.__init__": [[359, 363], ["Video.Comment.__init__"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__"], []], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.words_lowercase": [[51, 56], ["re.sub", "nltk.word_tokenize", "word.lower().strip", "word.lower"], "function", ["None"], ["def", "words_lowercase", "(", "text", ")", ":", "\n", "\t", "text", "=", "re", ".", "sub", "(", "r'[^\\w]'", ",", "' '", ",", "text", ")", "\n", "tokens", "=", "word_tokenize", "(", "text", ")", "\n", "tokens", "=", "[", "word", ".", "lower", "(", ")", ".", "strip", "(", "\" \\r\\n\\t\"", ")", "for", "word", "in", "tokens", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.words_originalcase": [[58, 63], ["re.sub", "nltk.word_tokenize", "word.strip"], "function", ["None"], ["", "def", "words_originalcase", "(", "text", ")", ":", "\n", "\t", "text", "=", "re", ".", "sub", "(", "r'[^\\w]'", ",", "' '", ",", "text", ")", "\n", "tokens", "=", "word_tokenize", "(", "text", ")", "\n", "tokens", "=", "[", "word", ".", "strip", "(", "\" \\r\\n\\t\"", ")", "for", "word", "in", "tokens", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.inappropriateness": [[65, 97], ["textProcessor.words_lowercase", "range", "len", "lemma.lemmatize", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.words_lowercase"], ["", "def", "inappropriateness", "(", "text", ",", "binary", "=", "True", ")", ":", "\n", "\t", "global", "swear_words", "\n", "count_sword", "=", "0", "\n", "count_total", "=", "0", "\n", "tokens", "=", "words_lowercase", "(", "text", ")", "\n", "\n", "if", "len", "(", "tokens", ")", ">", "0", ":", "\n", "\t\t", "count_total", "=", "2", "*", "len", "(", "tokens", ")", "-", "1", "# Unigrams and Bigrams both", "\n", "\n", "", "for", "word", "in", "tokens", ":", "\n", "\t\t", "if", "len", "(", "word", ")", "==", "1", "or", "word", "in", "stop", ":", "\n", "\t\t\t", "continue", "\n", "", "word", "=", "lemma", ".", "lemmatize", "(", "word", ")", "\n", "if", "word", "in", "swear_words", ":", "\n", "\t\t\t", "count_sword", "+=", "1", "\n", "if", "binary", ":", "\n", "\t\t\t\t", "return", "1.0", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "\t\t", "word_curr", "=", "tokens", "[", "i", "]", "\n", "word_next", "=", "tokens", "[", "i", "+", "1", "]", "\n", "if", "len", "(", "word_curr", ")", "==", "1", "or", "word_curr", "in", "stop", ":", "\n", "\t\t\t", "continue", "\n", "", "word_bi", "=", "word_curr", "+", "word_next", "\n", "if", "word_bi", "in", "swear_words", ":", "\n", "\t\t\t", "count_sword", "+=", "1", "\n", "if", "binary", ":", "\n", "\t\t\t\t", "return", "1.0", "\n", "\n", "", "", "", "if", "count_total", "==", "0", "or", "binary", ":", "\n", "\t\t", "return", "0.0", "\n", "", "return", "(", "count_sword", "*", "100.0", ")", "/", "count_total", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.fakeness": [[109, 116], ["reg.search"], "function", ["None"], ["for", "pat", ",", "reg", "in", "regexes", ":", "\n", "\t\t", "if", "reg", ".", "search", "(", "text", ")", ":", "\n", "\t\t\t", "print", "(", "pat", ",", "\":\"", ",", "text", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "# tokens = words_lowercase(text)", "\n", "# for word in tokens:", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.sentimentIntensity": [[134, 137], ["sentiment_intensity_analyzer.polarity_scores"], "function", ["None"], ["\t", "tagged", "=", "pos_tagged", "(", "text", ")", "\n", "words", ",", "tags", "=", "zip", "(", "*", "tagged", ")", "\n", "count", "=", "0", "\n", "for", "tag", "in", "tags", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.pos_tagged": [[138, 142], ["textProcessor.words_lowercase", "nltk.pos_tag"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.words_lowercase"], ["\t\t", "if", "tag", "==", "'JJS'", ":", "\n", "\t\t\t", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n", "", "def", "num_adjectives", "(", "text", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.num_superlative": [[143, 151], ["textProcessor.pos_tagged", "zip"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.pos_tagged"], ["\t", "tagged", "=", "pos_tagged", "(", "text", ")", "\n", "words", ",", "tags", "=", "zip", "(", "*", "tagged", ")", "\n", "count", "=", "0", "\n", "for", "tag", "in", "tags", ":", "\n", "\t\t", "if", "'JJ'", "in", "tag", ":", "\n", "\t\t\t", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n", "", "def", "has_clickbait_phrase", "(", "text", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.num_adjectives": [[152, 160], ["textProcessor.pos_tagged", "zip"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.pos_tagged"], ["\t", "text", "=", "text", ".", "lower", "(", ")", "\n", "\n", "if", "text", ".", "endswith", "(", "'?'", ")", ":", "\n", "\t\t", "return", "True", "\n", "\n", "", "for", "phrase", "in", "clickbait_phrases", ":", "\n", "\t\t", "if", "phrase", "in", "text", ":", "\n", "\t\t\t", "return", "True", "\n", "", "", "return", "False", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.has_clickbait_phrase": [[161, 168], ["text.lower.lower"], "function", ["None"], ["\n", "\n", "", "def", "ratio_caps", "(", "text", ")", ":", "\n", "\t", "words", "=", "words_originalcase", "(", "text", ")", "\n", "count", "=", "0", "\n", "denominator", "=", "0", "\n", "for", "word", "in", "words", ":", "\n", "\t\t", "if", "isAbbreviation", "(", "word", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.ratio_caps": [[170, 182], ["textProcessor.words_originalcase", "textProcessor.isAbbreviation", "max", "word.isupper"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.words_originalcase", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.isAbbreviation"], ["", "elif", "word", ".", "isupper", "(", ")", ":", "\n", "\t\t\t", "count", "+=", "1", "\n", "", "denominator", "+=", "1", "\n", "\n", "", "return", "count", "*", "1.0", "/", "max", "(", "denominator", ",", "1", ")", "\n", "\n", "\n", "", "def", "ratio_violent_words", "(", "text", ")", ":", "\n", "\t", "tokens_and_pos", "=", "pos_tagged", "(", "text", ")", "\n", "lemmatized", "=", "set", "(", ")", "\n", "for", "token", ",", "pos", "in", "tokens_and_pos", ":", "\n", "\t\t", "if", "pos", ".", "lower", "(", ")", "[", "0", "]", "==", "'v'", ":", "\n", "\t\t\t", "lemmatized", ".", "add", "(", "lemma", ".", "lemmatize", "(", "token", ",", "'v'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.ratio_violent_words": [[184, 193], ["textProcessor.pos_tagged", "set", "len", "set.add", "set.add", "len", "pos.lower", "lemma.lemmatize", "lemma.lemmatize"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.pos_tagged"], ["\t\t\t", "lemmatized", ".", "add", "(", "lemma", ".", "lemmatize", "(", "token", ",", "'n'", ")", ")", "\n", "", "", "return", "len", "(", "lemmatized", "&", "violent_words", ")", "*", "1.0", "/", "len", "(", "lemmatized", ")", "\n", "\n", "\n", "", "def", "isAbbreviation", "(", "word", ")", ":", "\n", "\t", "if", "word", ".", "upper", "(", ")", "!=", "word", ":", "\n", "\t\t", "return", "False", "\n", "", "if", "'.'", "in", "word", ":", "\n", "\t\t", "return", "True", "\n", "", "if", "len", "(", "set", "(", "'aeiouy'", ")", ".", "intersection", "(", "word", ".", "lower", "(", ")", ")", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.isAbbreviation": [[195, 207], ["word.upper", "len", "word.lower", "set().intersection", "len", "word.lower", "word.lower", "set"], "function", ["None"], ["", "if", "len", "(", "word", ")", "<=", "2", "and", "word", ".", "lower", "(", ")", "not", "in", "two_letter_words", ":", "\n", "\t\t", "return", "True", "\n", "", "if", "word", ".", "lower", "(", ")", "in", "common_abbreviations", ":", "\n", "\t\t", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "def", "first_word_capital", "(", "text", ")", ":", "\n", "\t", "word", "=", "words_originalcase", "(", "text", ")", "[", "0", "]", "\n", "if", "isAbbreviation", "(", "word", ")", ":", "\n", "\t\t", "return", "False", "\n", "", "return", "word", ".", "isupper", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.first_word_capital": [[208, 213], ["textProcessor.isAbbreviation", "word.isupper", "textProcessor.words_originalcase"], "function", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.isAbbreviation", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.words_originalcase"], []], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.Dataset.__init__": [[26, 76], ["print", "print", "print", "open", "json.load", "len", "pickle.load", "print", "print", "pickle.dump", "os.path.join", "open", "open", "len", "list", "ClassesAndUtil.Video.Video", "open", "len", "x.strip", "len", "Dataset.Dataset.all_crawled_videos.append", "f.readlines", "set", "set", "print", "json.load.keys", "ClassesAndUtil.Video.Video.get_title"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title"], ["\t\t\t\t", "video_ids", "=", "list", "(", "set", "(", "video_ids", ")", "&", "set", "(", "annotated", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "if", "maxVideos", "is", "not", "None", ":", "\n", "\t\t\t\t", "video_ids", "=", "video_ids", "[", ":", "maxVideos", "]", "\n", "", "print", "(", "\"len(video_ids): {}\"", ".", "format", "(", "len", "(", "video_ids", ")", ")", ")", "\n", "\n", "i", "=", "0", "\n", "for", "video_id", "in", "video_ids", ":", "\n", "\t\t\t\t", "v", "=", "Video", "(", "video_id", ")", "\n", "if", "v", ".", "legitimate", "and", "onlyAnnotated", ":", "\n", "\t\t\t\t\t", "v", ".", "gold_standard", "=", "annotated", "[", "video_id", "]", "\n", "if", "v", ".", "gold_standard", "==", "1", ":", "\n", "\t\t\t\t\t\t", "print", "(", "v", ".", "videoId", ",", "v", ".", "get_title", "(", ")", ")", "\n", "", "", "if", "v", ".", "legitimate", ":", "\n", "\t\t\t\t\t", "self", ".", "all_crawled_videos", ".", "append", "(", "v", ")", "\n", "\n", "\n", "", "", "pkl", ".", "dump", "(", "self", ".", "all_crawled_videos", ",", "open", "(", "'dataset_all.pkl'", ",", "'wb'", ")", ")", "\n", "\n", "", "print", "(", "'All legitimate crawled videos: {}'", ".", "format", "(", "len", "(", "self", ".", "all_crawled_videos", ")", ")", ")", "\n", "\n", "\n", "", "def", "get_video_and_features", "(", "self", ")", ":", "\n", "\t\t", "for", "video", "in", "self", ".", "all_crawled_videos", ":", "\n", "\t\t\t", "yield", "video", ",", "self", ".", "feature_function", "(", "video", ",", "self", ".", "feature_names", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.Dataset.get_video_and_features": [[77, 80], ["Dataset.Dataset.feature_function"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_iterator_comments": [[90, 99], ["Video.Video.__create_comments"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__create_comments"], ["\n", "", "", "", "def", "get_num_comments", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "comments", "is", "None", ":", "\n", "\t\t\t", "self", ".", "__create_comments", "(", ")", "\n", "", "return", "len", "(", "self", ".", "comments", ")", "\n", "\n", "", "def", "get_comments_inappropriateness", "(", "self", ",", "max_comments", "=", "100000", ")", ":", "\n", "\t\t", "if", "self", ".", "comments", "is", "None", ":", "\n", "\t\t\t", "self", ".", "__create_comments", "(", ")", "\n", "", "total_inappropriateness", "=", "0", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_channel": [[223, 227], ["Video.Video.__getChannel"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.__getChannel"], ["\n", "", "", "class", "Channel", ":", "\n", "\n", "\t", "loadedChannels", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.fakeness_vector": [[322, 324], ["ClassesAndUtil.textProcessor.fakeness_vector", "Video.Comment.getText"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.fakeness_vector", "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Comment.getText"], ["\t", "def", "__init__", "(", "self", ",", "videoId", ",", "commentId", ",", "comment_values", ")", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "super", "(", "TopLevelComment", ",", "self", ")", ".", "__init__", "(", "videoId", ")", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.textProcessor.fakeness_vector": [[125, 133], ["reg.search", "vector.append", "vector.append"], "function", ["None"], ["\t", "sentiments", "=", "sentiment_intensity_analyzer", ".", "polarity_scores", "(", "text", ")", "\n", "return", "sentiments", "\n", "\n", "", "def", "pos_tagged", "(", "text", ")", ":", "\n", "\t", "tokenized", "=", "words_lowercase", "(", "text", ")", "\n", "tagged", "=", "pos_tag", "(", "tokenized", ")", "\n", "return", "tagged", "\n", "\n", "", "def", "num_superlative", "(", "text", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.__init__": [[84, 107], ["print", "open", "json.load", "open", "list", "os.path.join", "x.strip", "len", "f.readlines", "set", "set", "json.load.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.get_video_and_features": [[108, 119], ["ClassesAndUtil.Video.Video", "print", "ClassesAndUtil.Video.Video.get_title", "feature_function"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title"], []], "home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Dataset.DatasetScalable.get_videos": [[121, 131], ["ClassesAndUtil.Video.Video", "print", "ClassesAndUtil.Video.Video.get_title"], "methods", ["home.repos.pwc.inspect_result.ucnet01_UCNet_Implementation.ClassesAndUtil.Video.Video.get_title"], []]}