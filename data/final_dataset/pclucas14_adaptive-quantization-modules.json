{"home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.gen_main.sho": [[29, 32], ["torchvision.utils.save_image", "Image.open().show", "Image.open"], "function", ["None"], ["def", "sho", "(", "x", ")", ":", "\n", "    ", "save_image", "(", "x", "*", ".5", "+", ".5", ",", "'tmp.png'", ")", "\n", "Image", ".", "open", "(", "'tmp.png'", ")", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.gen_main.offline_cls_train": [[34, 70], ["common.model.ResNet18().to", "torch.optim.SGD", "range", "ResNet18().to.parameters", "ResNet18().to.train", "range", "eval.eval_cls().mean", "wandb.log", "print", "common.model.ResNet18", "aqm.sample", "torch.optim.SGD.zero_grad", "ResNet18().to.", "torch.nn.functional.cross_entropy().backward", "torch.optim.SGD.step", "eval.eval_cls().mean", "eval.eval_cls", "torch.nn.functional.cross_entropy", "eval.eval_cls"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet18", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_cls", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_cls"], ["", "def", "offline_cls_train", "(", "aqm", ",", "valid_loader", ",", "test_loader", ",", "args", ")", ":", "\n", "\n", "    ", "classifier", "=", "ResNet18", "(", "args", ".", "n_classes", ",", "20", ",", "input_size", "=", "args", ".", "input_size", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "cls_lr", ",", "momentum", "=", "0.9", ")", "\n", "\n", "wait", "=", "0", "\n", "wait_for", "=", "10", "\n", "best_valid", "=", "best_test", "=", "-", "1", "\n", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "        ", "classifier", ".", "train", "(", ")", "\n", "\n", "for", "it", "in", "range", "(", "500", ")", ":", "\n", "            ", "input_x", ",", "sample_out", "=", "aqm", ".", "sample", "(", "128", ")", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "logits", "=", "classifier", "(", "input_x", ")", "\n", "F", ".", "cross_entropy", "(", "logits", ",", "sample_out", "[", "'y'", "]", ")", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "", "valid_acc", "=", "eval_cls", "(", "classifier", ",", "valid_loader", ",", "args", ",", "name", "=", "'valid'", ")", ".", "mean", "(", ")", "\n", "\n", "if", "valid_acc", ">", "best_valid", ":", "\n", "            ", "best_valid", "=", "valid_acc", "\n", "best_test", "=", "eval_cls", "(", "classifier", ",", "test_loader", ",", "args", ",", "name", "=", "'test'", ")", ".", "mean", "(", ")", "\n", "wait", "=", "0", "\n", "", "else", ":", "\n", "            ", "wait", "+=", "1", "\n", "if", "wait", ">=", "wait_for", ":", "return", "\n", "\n", "", "wandb", ".", "log", "(", "{", "'valid_acc'", ":", "valid_acc", ",", "\n", "'best_valid_acc'", ":", "best_valid", ",", "\n", "'best_test_acc'", ":", "best_test", "}", ")", "\n", "\n", "print", "(", "'valid acc : {:.4f}\\tbest valid : {:.4f}\\tbest test : {:.4f}'", ".", "format", "(", "valid_acc", ",", "best_valid", ",", "best_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.gen_main.main": [[76, 169], ["yaml.load", "range", "type", "utils.utils.dotdict", "open", "wandb.init", "common.modular.QStack().to", "print", "print", "enumerate", "pydoc.locate", "utils.data.CLDataLoader", "sum", "range", "os.makedirs", "os.path.join", "torch.save", "gen_main.offline_cls_train", "utils.utils.dotdict.config.split", "zip", "common.modular.QStack", "QStack().to.train", "QStack().to.log", "enumerate", "QStack().to.update_ema_decoder", "print", "print", "QStack().to.state_dict", "numpy.prod", "input_x.to.size", "input_x.to.to", "input_y.to.to", "idx_.to.to", "range", "QStack().to.update_ema_decoder", "QStack().to.track", "eval.eval_gen", "p.size", "QStack().to.parameters", "print", "QStack().to.", "QStack().to.optimize", "QStack().to.add_reservoir", "QStack().to._fetch_y_counts", "eval.eval_drift", "len", "QStack().to.sample", "QStack().to.log_to_server", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.gen_main.offline_cls_train", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.update_ema_decoder", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.update_ema_decoder", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.track", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_gen", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.optimize", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.add_reservoir", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack._fetch_y_counts", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_drift", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.log_to_server"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "type", "(", "args", ")", "==", "dict", ":", "args", "=", "dotdict", "(", "args", ")", "\n", "\n", "config", "=", "yaml", ".", "load", "(", "open", "(", "args", ".", "config", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "for", "run", "in", "range", "(", "args", ".", "n_runs", ")", ":", "\n", "        ", "name", "=", "'debug'", "if", "args", ".", "debug", "else", "args", ".", "config", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "wandb", ".", "init", "(", "project", "=", "'aqm_lite_im'", ",", "name", "=", "name", ",", "config", "=", "{", "'yaml'", ":", "config", ",", "'params'", ":", "args", "}", ",", "reinit", "=", "True", ")", "\n", "\n", "# fetch data", "\n", "data", "=", "locate", "(", "'utils.data.get_%s'", "%", "args", ".", "dataset", ")", "(", "args", ")", "\n", "\n", "# make dataloaders", "\n", "train_loader", ",", "valid_loader", ",", "test_loader", "=", "[", "\n", "CLDataLoader", "(", "elem", ",", "args", ",", "train", "=", "t", ")", "for", "elem", ",", "t", "in", "zip", "(", "data", ",", "[", "True", ",", "False", ",", "False", "]", ")", "\n", "]", "\n", "\n", "# fetch model and ship to GPU", "\n", "generator", "=", "QStack", "(", "**", "config", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "print", "(", "generator", ")", "\n", "\n", "print", "(", "\"number of generator  parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "generator", ".", "parameters", "(", ")", "]", ")", ")", "\n", "\n", "step", "=", "0", "\n", "for", "task", ",", "tr_loader", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "            ", "for", "epoch", "in", "range", "(", "args", ".", "num_epochs", ")", ":", "\n", "                ", "generator", ".", "train", "(", ")", "\n", "generator", ".", "log", "(", "'epoch'", ",", "epoch", ")", "\n", "sample_amt", "=", "0", "\n", "\n", "for", "i", ",", "(", "input_x", ",", "input_y", ",", "idx_", ")", "in", "enumerate", "(", "tr_loader", ")", ":", "\n", "                    ", "if", "i", "%", "5", "==", "0", ":", "print", "(", "'  '", ",", "i", ",", "' / '", ",", "len", "(", "tr_loader", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "if", "sample_amt", ">", "args", ".", "samples_per_task", ">", "0", ":", "break", "\n", "sample_amt", "+=", "input_x", ".", "size", "(", "0", ")", "\n", "\n", "input_x", "=", "input_x", ".", "to", "(", "args", ".", "device", ")", "\n", "input_y", "=", "input_y", ".", "to", "(", "args", ".", "device", ")", "\n", "idx_", "=", "idx_", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "for", "n_iter", "in", "range", "(", "args", ".", "n_iters", ")", ":", "\n", "\n", "                        ", "sample_outs", "=", "re_x", "=", "None", "\n", "if", "task", ">", "0", "and", "args", ".", "rehearsal", ":", "\n", "                            ", "re_x", ",", "sample_outs", "=", "generator", ".", "sample", "(", "args", ".", "buffer_batch_size", ",", "exclude_task", "=", "task", ")", "\n", "\n", "# TODO: check if we're sampling the right amount", "\n", "", "out", ",", "block_outs", "=", "generator", "(", "input_x", ",", "x_re", "=", "re_x", ")", "\n", "generator", ".", "optimize", "(", "block_outs", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "                            ", "generator", ".", "log_to_server", "(", "wandb", ")", "\n", "\n", "# set the gen. weights used for sampling == current generator weights", "\n", "", "", "generator", ".", "update_ema_decoder", "(", ")", "\n", "generator", ".", "track", "(", ")", "\n", "\n", "if", "args", ".", "rehearsal", ":", "\n", "                        ", "generator", ".", "add_reservoir", "(", "\n", "input_x", ",", "\n", "{", "'y'", ":", "input_y", ",", "'t'", ":", "task", ",", "'bidx'", ":", "idx_", ",", "'step'", ":", "step", "}", ",", "\n", "block_outs", ",", "\n", "sample_x", "=", "re_x", ",", "\n", "sample_add_info", "=", "sample_outs", "\n", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "# Test the model", "\n", "# ------------------------------------------------------------------", "\n", "", "generator", ".", "update_ema_decoder", "(", ")", "\n", "\n", "print", "(", "generator", ".", "_fetch_y_counts", "(", ")", "[", ":", ",", ":", "(", "task", "+", "1", ")", "*", "args", ".", "n_classes_per_task", "]", ")", "\n", "print", "(", "generator", ".", "mem_used", "/", "generator", ".", "data_size", ")", "\n", "\n", "if", "not", "args", ".", "debug", ":", "\n", "                    ", "eval_gen", "(", "'valid'", ",", "generator", ",", "valid_loader", ",", "args", ",", "max_task", "=", "task", ",", "epoch", "=", "epoch", ")", "\n", "if", "task", "%", "2", "==", "0", "or", "task", "<", "2", ":", "eval_drift", "(", "generator", ",", "train_loader", ",", "args", ")", "\n", "\n", "", "", "", "if", "not", "args", ".", "debug", ":", "\n", "# save model", "\n", "            ", "try", ":", "name", "=", "args", ".", "name", "\n", "except", ":", "name", "=", "args", ".", "config", "+", "'_%d'", "%", "np", ".", "random", ".", "randint", "(", "1000", ")", "\n", "os", ".", "makedirs", "(", "'/checkpoint/lucaspc/aqm/'", "+", "name", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "'/checkpoint/lucaspc/aqm/'", ",", "name", ",", "'gen_%d.pth'", "%", "run", ")", "\n", "torch", ".", "save", "(", "generator", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n", "# for Imagenet Experiments Only", "\n", "offline_cls_train", "(", "generator", ",", "valid_loader", ",", "test_loader", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_drift": [[16, 65], ["torch.no_grad", "list", "aqm.sample_everything", "drifts.keys", "sum", "zip", "torch.stack().to", "torch.stack().transpose().reshape", "torch.nn.functional.mse_loss", "len", "wandb.log", "len", "wandb.log", "wandb.log", "print", "torch.stack", "torch.stack().transpose", "int", "int", "torch.nn.functional.mse_loss", "sum", "len", "sum", "len", "loader.dataset.rescale", "int", "loader.dataset.__getitem__", "torch.stack", "wandb.Image", "_idx.item", "torchvision.utils.make_grid"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample_everything", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.CLDataLoader.__getitem__"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval_drift", "(", "aqm", ",", "loader", ",", "args", ",", "log", "=", "True", ")", ":", "\n", "\n", "    ", "all_loaders", "=", "list", "(", "loader", ")", "\n", "\n", "imgs", "=", "{", "block", ".", "id", ":", "None", "for", "block", "in", "aqm", ".", "blocks", "}", "\n", "drifts", "=", "{", "block", ".", "id", ":", "[", "]", "for", "block", "in", "aqm", ".", "blocks", "}", "\n", "drifts0", "=", "{", "block", ".", "id", ":", "[", "]", "for", "block", "in", "aqm", ".", "blocks", "}", "\n", "\n", "if", "sum", "(", "block", ".", "frozen_qt", "for", "block", "in", "aqm", ".", "blocks", ")", "==", "0", ":", "return", "\n", "\n", "for", "x", ",", "add_info", "in", "aqm", ".", "sample_everything", "(", ")", ":", "\n", "        ", "block_id", "=", "add_info", "[", "'bid'", "]", "[", "0", "]", "\n", "target", "=", "[", "]", "\n", "\n", "if", "block_id", "==", "0", ":", "continue", "\n", "\n", "target", "=", "[", "]", "\n", "for", "_idx", ",", "_task", "in", "zip", "(", "add_info", "[", "'bidx'", "]", ",", "add_info", "[", "'t'", "]", ")", ":", "\n", "            ", "loader", "=", "all_loaders", "[", "_task", "]", "\n", "if", "'cifar'", "in", "args", ".", "dataset", ":", "\n", "                ", "target", "+=", "[", "loader", ".", "dataset", ".", "rescale", "(", "loader", ".", "dataset", ".", "x", "[", "_idx", "]", ")", "]", "\n", "", "else", ":", "\n", "                ", "target", "+=", "[", "loader", ".", "dataset", ".", "__getitem__", "(", "_idx", ".", "item", "(", ")", ")", "[", "0", "]", "]", "\n", "\n", "", "", "target", "=", "torch", ".", "stack", "(", "target", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "img", "=", "torch", ".", "stack", "(", "(", "x", ",", "target", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "imgs", "[", "int", "(", "block_id", ")", "]", "=", "(", "img", "*", ".5", "+", ".5", ")", ".", "cpu", "(", ")", "\n", "drifts", "[", "int", "(", "block_id", ")", "]", "+=", "[", "F", ".", "mse_loss", "(", "x", ",", "target", ")", "]", "\n", "\n", "if", "(", "add_info", "[", "'t'", "]", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "            ", "drifts0", "[", "int", "(", "block_id", ")", "]", "+=", "[", "\n", "F", ".", "mse_loss", "(", "x", "[", "add_info", "[", "'t'", "]", "==", "0", "]", ",", "target", "[", "add_info", "[", "'t'", "]", "==", "0", "]", ")", "\n", "]", "\n", "\n", "", "", "for", "key", "in", "drifts", ".", "keys", "(", ")", ":", "\n", "        ", "if", "len", "(", "drifts0", "[", "key", "]", ")", ">", "0", ":", "\n", "            ", "mean0", "=", "sum", "(", "drifts0", "[", "key", "]", ")", "/", "len", "(", "drifts0", "[", "key", "]", ")", "\n", "wandb", ".", "log", "(", "{", "'drift0_%d'", "%", "key", ":", "mean0", "}", ")", "\n", "\n", "", "if", "len", "(", "drifts", "[", "key", "]", ")", ">", "0", ":", "\n", "            ", "mean", "=", "sum", "(", "drifts", "[", "key", "]", ")", "/", "len", "(", "drifts", "[", "key", "]", ")", "\n", "img", "=", "imgs", "[", "key", "]", "\n", "wandb", ".", "log", "(", "{", "'drift_%d'", "%", "key", ":", "mean", "}", ")", "\n", "wandb", ".", "log", "(", "{", "'img_drift_%d'", "%", "key", ":", "\n", "[", "wandb", ".", "Image", "(", "make_grid", "(", "img", ")", ",", "caption", "=", "'drift %d'", "%", "key", ")", "]", "}", ")", "\n", "\n", "print", "(", "'{} \\t{:.4f}'", ".", "format", "(", "key", ",", "mean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_gen": [[67, 100], ["torch.no_grad", "print", "torch.no_grad", "enumerate", "torchvision.utils.make_grid.transpose().reshape", "torchvision.utils.make_grid", "wandb.log", "aqm.log_to_server", "aqm", "block_outs.keys", "torch.cat", "data.to", "target.to", "torchvision.utils.make_grid.transpose", "block.log", "data.unsqueeze", "all_recons.size", "wandb.Image", "torch.nn.functional.mse_loss", "torchvision.utils.make_grid"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.log_to_server", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval_gen", "(", "name", ",", "aqm", ",", "loader", ",", "args", ",", "log", "=", "True", ",", "max_task", "=", "-", "1", ",", "epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" evaluate performance on held-out data \"\"\"", "\n", "\n", "print", "(", "'eval test'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "for", "task_t", ",", "te_loader", "in", "enumerate", "(", "loader", ")", ":", "\n", "# only eval on seen tasks", "\n", "            ", "if", "task_t", ">", "max_task", ">=", "0", ":", "\n", "                ", "break", "\n", "\n", "", "for", "data", ",", "target", ",", "_", "in", "te_loader", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "args", ".", "device", ")", ",", "target", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "all_recons", ",", "block_outs", "=", "aqm", "(", "data", ")", "\n", "\n", "for", "block_id", "in", "block_outs", ".", "keys", "(", ")", ":", "\n", "                    ", "block", "=", "aqm", ".", "all_blocks", "[", "block_id", "]", "\n", "block_out", "=", "block_outs", "[", "block_id", "]", "\n", "\n", "if", "log", ":", "\n", "                        ", "block", ".", "log", "(", "'avg_l2_test'", ",", "F", ".", "mse_loss", "(", "data", ",", "block_out", "[", "'x_final'", "]", ")", ")", "\n", "\n", "", "", "", "", "if", "log", ":", "\n", "            ", "all", "=", "torch", ".", "cat", "(", "(", "data", ".", "unsqueeze", "(", "0", ")", ",", "all_recons", ")", ")", "[", ":", ",", ":", "20", "]", "\n", "all", "=", "all", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "*", "all", ".", "shape", "[", "2", ":", "]", ")", "\n", "all", "=", "make_grid", "(", "all", ",", "nrow", "=", "all_recons", ".", "size", "(", "0", ")", "+", "1", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "'test_recon_%d'", "%", "(", "epoch", "+", "max_task", ")", ":", "\n", "[", "wandb", ".", "Image", "(", "make_grid", "(", "all", ")", ",", "caption", "=", "'test recon'", ")", "]", "}", ")", "\n", "\n", "aqm", ".", "log_to_server", "(", "wandb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_gen_lidar": [[102, 145], ["torch.no_grad", "utils.utils.get_chamfer", "print", "torch.no_grad", "enumerate", "torchvision.utils.make_grid.transpose().reshape", "torchvision.utils.make_grid", "wandb.log", "generator.log_to_server", "torch.cat", "[].view", "generator", "block_outs.keys", "torchvision.utils.make_grid.transpose", "data_raw.to", "target.to", "block.log", "utils.utils.get_chamfer.", "block.log", "data.unsqueeze", "all_recons.size", "wandb.Image", "torch.nn.functional.mse_loss", "torchvision.utils.make_grid", "data_raw.reshape().abs().max", "data_raw.reshape().abs", "data_raw.reshape", "dist_a.mean", "dist_b.mean", "data_raw.size"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.get_chamfer", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.log_to_server", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval_gen_lidar", "(", "name", ",", "generator", ",", "loader", ",", "args", ",", "max_task", "=", "-", "1", ",", "epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" evaluate performance on held-out data \"\"\"", "\n", "\n", "chamfer", "=", "get_chamfer", "(", ")", "\n", "\n", "print", "(", "'eval test'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "for", "task_t", ",", "te_loader", "in", "enumerate", "(", "loader", ")", ":", "\n", "# only eval on seen tasks", "\n", "            ", "if", "task_t", ">", "max_task", ">=", "0", ":", "\n", "                ", "break", "\n", "\n", "", "for", "data_raw", ",", "target", ",", "_", "in", "te_loader", ":", "\n", "                ", "data_raw", ",", "target", "=", "data_raw", ".", "to", "(", "args", ".", "device", ")", ",", "target", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# normalize point cloud", "\n", "max_", "=", "data_raw", ".", "reshape", "(", "data_raw", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "data", "=", "data_raw", "/", "max_", "\n", "\n", "all_recons", ",", "block_outs", "=", "generator", "(", "data", ")", "\n", "\n", "for", "block_id", "in", "block_outs", ".", "keys", "(", ")", ":", "\n", "                    ", "block", "=", "generator", ".", "all_blocks", "[", "block_id", "]", "\n", "block_out", "=", "block_outs", "[", "block_id", "]", "\n", "\n", "block", ".", "log", "(", "'avg_l2_test'", ",", "F", ".", "mse_loss", "(", "data", ",", "block_out", "[", "'x_final'", "]", ")", ")", "\n", "\n", "dist_a", ",", "dist_b", "=", "chamfer", "(", "data_raw", ",", "block_out", "[", "'x_final'", "]", "*", "max_", ")", "\n", "snnrmse", "=", "(", ".5", "*", "dist_a", ".", "mean", "(", "-", "1", ")", "+", ".5", "*", "dist_b", ".", "mean", "(", "-", "1", ")", ")", ".", "sqrt", "(", ")", ".", "mean", "(", ")", "\n", "\n", "block", ".", "log", "(", "'snnrmse'", ",", "snnrmse", ")", "\n", "\n", "", "", "", "all", "=", "torch", ".", "cat", "(", "(", "data", ".", "unsqueeze", "(", "0", ")", ",", "all_recons", ")", ")", "[", ":", ",", ":", "20", "]", "\n", "\n", "all", "=", "all", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "*", "all", ".", "shape", "[", "2", ":", "]", ")", "\n", "all", "=", "make_grid", "(", "all", ",", "nrow", "=", "all_recons", ".", "size", "(", "0", ")", "+", "1", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "'test_recon_%d'", "%", "(", "epoch", "+", "max_task", ")", ":", "\n", "[", "wandb", ".", "Image", "(", "make_grid", "(", "all", ")", ",", "caption", "=", "'test recon'", ")", "]", "}", ")", "\n", "\n", "generator", ".", "log_to_server", "(", "wandb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_cls": [[147, 181], ["torch.no_grad", "classifier.eval", "numpy.zeros", "numpy.zeros_like", "enumerate", "wandb.log", "len", "classifier", "logits.masked_fill.argmax", "logits.argmax.eq().sum", "data.size", "data.to", "target.to", "logits.masked_fill.masked_fill", "np.zeros.mean", "logits.argmax.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "eval_cls", "(", "classifier", ",", "loader", ",", "args", ",", "log", "=", "True", ",", "name", "=", "'eval'", ",", "max_task", "=", "-", "1", ")", ":", "\n", "\n", "    ", "classifier", ".", "eval", "(", ")", "\n", "\n", "accs", "=", "np", ".", "zeros", "(", "(", "max_task", "+", "1", ")", "if", "max_task", ">", "-", "1", "else", "len", "(", "loader", ")", ")", "\n", "denos", "=", "np", ".", "zeros_like", "(", "accs", ")", "\n", "\n", "for", "task_t", ",", "loader_t", "in", "enumerate", "(", "loader", ")", ":", "\n", "# only eval on seen tasks", "\n", "        ", "if", "task_t", ">", "max_task", ">=", "0", ":", "\n", "            ", "break", "\n", "\n", "", "for", "data", ",", "target", ",", "_", "in", "loader_t", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "args", ".", "device", ")", ",", "target", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "logits", "=", "classifier", "(", "data", ")", "\n", "\n", "if", "args", ".", "multiple_heads", ":", "\n", "                ", "logits", "=", "logits", ".", "masked_fill", "(", "loader_t", ".", "dataset", ".", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "pred", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", "\n", "deno", "=", "data", ".", "size", "(", "0", ")", "\n", "\n", "accs", "[", "task_t", "]", "+=", "correct", "\n", "denos", "[", "task_t", "]", "+=", "deno", "\n", "\n", "", "", "accs", "=", "accs", "/", "denos", "\n", "\n", "if", "log", ":", "\n", "        ", "wandb", ".", "log", "(", "{", "'%s_acc'", "%", "name", ":", "accs", ".", "mean", "(", ")", "}", ")", "\n", "\n", "", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.cls_main.sho": [[30, 33], ["torchvision.utils.save_image", "Image.open().show", "Image.open"], "function", ["None"], ["def", "sho", "(", "x", ")", ":", "\n", "    ", "save_image", "(", "x", "*", ".5", "+", ".5", ",", "'tmp.png'", ")", "\n", "Image", ".", "open", "(", "'tmp.png'", ")", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.cls_main.main": [[38, 190], ["numpy.zeros", "yaml.load", "range", "type", "utils.utils.dotdict", "pydoc.locate", "open", "utils.utils.set_seed", "wandb.init", "common.modular.QStack().to", "common.model.ResNet18", "classifier.to.to", "print", "torch.optim.SGD", "print", "print", "enumerate", "print", "RESULTS[].max", "[].mean", "RESULTS[].max", "[].mean", "wandb.log", "pydoc.locate", "utils.data.CLDataLoader", "classifier.to.parameters", "sum", "sum", "range", "print", "print", "eval.eval_cls", "eval.eval_cls", "print", "RESULTS[].mean", "RESULTS[].mean", "os.makedirs", "os.path.join", "torch.save", "utils.utils.dotdict.config.split", "zip", "common.modular.QStack", "QStack().to.train", "classifier.to.train", "collections.defaultdict", "enumerate", "QStack().to.update_ema_decoder", "eval.eval_gen", "eval.eval_drift", "RESULTS[].mean", "RESULTS[].mean", "QStack().to.state_dict", "numpy.prod", "numpy.prod", "input_x.to.size", "input_x.to.to", "input_y.to.to", "idx_.to.to", "range", "QStack().to.update_ema_decoder", "QStack().to.track", "QStack().to._fetch_y_counts", "p.size", "QStack().to.parameters", "p.size", "classifier.to.parameters", "print", "QStack().to.", "QStack().to.optimize", "QStack().to.add_reservoir", "len", "QStack().to.sample", "torch.optim.SGD.zero_grad", "classifier.to.", "torch.optim.SGD.zero_grad", "torch.nn.functional.cross_entropy", "F.cross_entropy.backward", "torch.optim.SGD.step", "QStack().to.log_to_server", "logits.masked_fill.masked_fill", "classifier.to.", "torch.nn.functional.cross_entropy", "F.cross_entropy.backward", "torch.zeros_like", "torch.zeros_like.scatter_", "logits.masked_fill.masked_fill"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.set_seed", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet18", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_cls", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_cls", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.update_ema_decoder", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_gen", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_drift", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.update_ema_decoder", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.track", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack._fetch_y_counts", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.optimize", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.add_reservoir", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.log_to_server"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "if", "type", "(", "args", ")", "==", "dict", ":", "args", "=", "dotdict", "(", "args", ")", "\n", "data", "=", "locate", "(", "'utils.data.get_%s'", "%", "args", ".", "dataset", ")", "(", "args", ")", "\n", "RESULTS", "=", "np", ".", "zeros", "(", "(", "args", ".", "n_runs", ",", "2", ",", "args", ".", "n_tasks", ",", "args", ".", "n_tasks", ")", ")", "\n", "config", "=", "yaml", ".", "load", "(", "open", "(", "args", ".", "config", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "for", "run", "in", "range", "(", "args", ".", "n_runs", ")", ":", "\n", "\n", "        ", "set_seed", "(", "run", ")", "\n", "\n", "name", "=", "'debug'", "if", "args", ".", "debug", "else", "args", ".", "config", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "wandb", ".", "init", "(", "project", "=", "'aqm_lite_cifar'", ",", "name", "=", "name", ",", "config", "=", "{", "'yaml'", ":", "config", ",", "'params'", ":", "args", "}", ",", "reinit", "=", "True", ")", "\n", "\n", "# fetch data", "\n", "data", "=", "locate", "(", "'utils.data.get_%s'", "%", "args", ".", "dataset", ")", "(", "args", ")", "\n", "\n", "# make dataloaders", "\n", "train_loader", ",", "valid_loader", ",", "test_loader", "=", "[", "\n", "CLDataLoader", "(", "elem", ",", "args", ",", "train", "=", "t", ")", "for", "elem", ",", "t", "in", "zip", "(", "data", ",", "[", "True", ",", "False", ",", "False", "]", ")", "\n", "]", "\n", "\n", "# fetch model and ship to GPU", "\n", "\n", "generator", "=", "QStack", "(", "**", "config", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "classifier", "=", "ResNet18", "(", "args", ".", "n_classes", ",", "20", ",", "input_size", "=", "args", ".", "input_size", ")", "\n", "classifier", "=", "classifier", ".", "to", "(", "args", ".", "device", ")", "\n", "print", "(", "generator", ")", "\n", "\n", "# optimizers", "\n", "opt_class", "=", "torch", ".", "optim", ".", "SGD", "(", "classifier", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "cls_lr", ")", "\n", "\n", "print", "(", "\"number of generator  parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "generator", ".", "parameters", "(", ")", "]", ")", ")", "\n", "print", "(", "\"number of classifier parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "classifier", ".", "parameters", "(", ")", "]", ")", ")", "\n", "\n", "step", "=", "0", "\n", "for", "task", ",", "tr_loader", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "            ", "for", "epoch", "in", "range", "(", "args", ".", "num_epochs", ")", ":", "\n", "                ", "generator", ".", "train", "(", ")", "\n", "classifier", ".", "train", "(", ")", "\n", "sample_amt", "=", "0", "\n", "\n", "# create logging containers", "\n", "train_log", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "i", ",", "(", "input_x", ",", "input_y", ",", "idx_", ")", "in", "enumerate", "(", "tr_loader", ")", ":", "\n", "                    ", "if", "i", "%", "5", "==", "0", ":", "print", "(", "'  '", ",", "i", ",", "' / '", ",", "len", "(", "tr_loader", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "if", "sample_amt", ">", "args", ".", "samples_per_task", ">", "0", ":", "break", "\n", "sample_amt", "+=", "input_x", ".", "size", "(", "0", ")", "\n", "\n", "input_x", "=", "input_x_og", "=", "input_x", ".", "to", "(", "args", ".", "device", ")", "\n", "input_y", "=", "input_y", ".", "to", "(", "args", ".", "device", ")", "\n", "idx_", "=", "idx_", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "for", "n_iter", "in", "range", "(", "args", ".", "n_iters", ")", ":", "\n", "\n", "                        ", "sample_outs", "=", "re_x", "=", "None", "\n", "if", "task", ">", "0", "and", "args", ".", "rehearsal", ":", "\n", "                            ", "re_x", ",", "sample_outs", "=", "generator", ".", "sample", "(", "args", ".", "buffer_batch_size", ",", "exclude_task", "=", "task", ")", "\n", "\n", "# TODO: check if we're sampling the right amount", "\n", "", "out", ",", "block_outs", "=", "generator", "(", "input_x", ",", "x_re", "=", "re_x", ")", "\n", "generator", ".", "optimize", "(", "block_outs", ")", "\n", "\n", "if", "n_iter", "<", "args", ".", "cls_n_iters", ":", "\n", "                            ", "opt_class", ".", "zero_grad", "(", ")", "\n", "logits", "=", "classifier", "(", "input_x", ")", "\n", "\n", "if", "args", ".", "multiple_heads", ":", "\n", "                                ", "mask", "=", "tr_loader", ".", "dataset", ".", "mask", "\n", "logits", "=", "logits", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "opt_class", ".", "zero_grad", "(", ")", "\n", "loss_class", "=", "F", ".", "cross_entropy", "(", "logits", ",", "input_y", ")", "\n", "loss_class", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "rehearsal", "and", "task", ">", "0", ":", "\n", "                                ", "logits", "=", "classifier", "(", "re_x", ")", "\n", "\n", "if", "args", ".", "multiple_heads", ":", "\n", "                                    ", "mask", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "task_ids", "=", "tr_loader", ".", "dataset", ".", "task_ids", "[", "sample_outs", "[", "'t'", "]", "]", "\n", "mask", ".", "scatter_", "(", "1", ",", "task_ids", ",", "1", ")", "\n", "logits", "=", "logits", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "loss_class", "=", "F", ".", "cross_entropy", "(", "logits", ",", "sample_outs", "[", "'y'", "]", ")", "\n", "loss_class", ".", "backward", "(", ")", "\n", "\n", "", "opt_class", ".", "step", "(", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "                            ", "generator", ".", "log_to_server", "(", "wandb", ")", "\n", "\n", "# set the gen. weights used for sampling == current generator weights", "\n", "", "", "generator", ".", "update_ema_decoder", "(", ")", "\n", "generator", ".", "track", "(", ")", "\n", "\n", "if", "args", ".", "rehearsal", ":", "\n", "                        ", "generator", ".", "add_reservoir", "(", "\n", "input_x", ",", "\n", "{", "'y'", ":", "input_y", ",", "'t'", ":", "task", ",", "'bidx'", ":", "idx_", ",", "'step'", ":", "step", "}", ",", "\n", "block_outs", ",", "\n", "sample_x", "=", "re_x", ",", "\n", "sample_add_info", "=", "sample_outs", "\n", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "# Test the model", "\n", "# ------------------------------------------------------------------", "\n", "", "generator", ".", "update_ema_decoder", "(", ")", "\n", "\n", "", "print", "(", "generator", ".", "_fetch_y_counts", "(", ")", "[", ":", ",", ":", "(", "task", "+", "1", ")", "*", "args", ".", "n_classes_per_task", "]", ")", "\n", "print", "(", "generator", ".", "mem_used", "/", "generator", ".", "data_size", ")", "\n", "\n", "val_acc", "=", "eval_cls", "(", "classifier", ",", "valid_loader", ",", "args", ",", "name", "=", "'valid'", ",", "max_task", "=", "task", ")", "\n", "test_acc", "=", "eval_cls", "(", "classifier", ",", "test_loader", ",", "args", ",", "name", "=", "'test'", ",", "max_task", "=", "task", ")", "\n", "\n", "RESULTS", "[", "run", ",", "0", ",", "task", ",", ":", "task", "+", "1", "]", "=", "val_acc", "\n", "RESULTS", "[", "run", ",", "1", ",", "task", ",", ":", "task", "+", "1", "]", "=", "test_acc", "\n", "\n", "print", "(", "RESULTS", "[", "run", ",", "0", ",", ":", "task", "+", "1", ",", ":", "task", "+", "1", "]", ")", "\n", "\n", "if", "task", "%", "2", "==", "0", "or", "task", "<", "2", ":", "\n", "                ", "eval_gen", "(", "'valid'", ",", "generator", ",", "valid_loader", ",", "args", ",", "max_task", "=", "task", ",", "epoch", "=", "epoch", ")", "\n", "eval_drift", "(", "generator", ",", "train_loader", ",", "args", ")", "\n", "\n", "", "", "print", "(", "RESULTS", "[", "run", ",", "0", ",", "-", "1", "]", ".", "mean", "(", ")", ",", "RESULTS", "[", "run", ",", "1", ",", "-", "1", "]", ".", "mean", "(", ")", ")", "\n", "\n", "# calculate forgetting:", "\n", "max_valid", "=", "RESULTS", "[", "run", ",", "0", "]", ".", "max", "(", "axis", "=", "0", ")", "\n", "fgt_valid", "=", "(", "max_valid", "-", "RESULTS", "[", "run", ",", "0", ",", "-", "1", "]", ")", "[", ":", "-", "1", "]", ".", "mean", "(", ")", "\n", "\n", "max_test", "=", "RESULTS", "[", "run", ",", "1", "]", ".", "max", "(", "axis", "=", "0", ")", "\n", "fgt_test", "=", "(", "max_test", "-", "RESULTS", "[", "run", ",", "1", ",", "-", "1", "]", ")", "[", ":", "-", "1", "]", ".", "mean", "(", ")", "\n", "\n", "wandb", ".", "log", "(", "{", "'fgt_valid'", ":", "fgt_valid", ",", "\n", "'acc_valid'", ":", "RESULTS", "[", "run", ",", "0", ",", "-", "1", "]", ".", "mean", "(", ")", ",", "\n", "'fgt_test'", ":", "fgt_test", ",", "\n", "'acc_test'", ":", "RESULTS", "[", "run", ",", "1", ",", "-", "1", "]", ".", "mean", "(", ")", "}", ")", "\n", "\n", "if", "not", "args", ".", "debug", ":", "\n", "# save model", "\n", "            ", "os", ".", "makedirs", "(", "'/checkpoint/lucaspc/aqm/'", "+", "args", ".", "name", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "'/checkpoint/lucaspc/aqm/'", ",", "args", ".", "name", ",", "'gen.pth'", ")", "\n", "torch", ".", "save", "(", "generator", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.__init__": [[9, 35], ["torch.Module.__init__", "dtype().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "buffer.Buffer.register_buffer", "buffer.Buffer.register_buffer", "buffer.Buffer.register_buffer", "buffer.Buffer.register_buffer", "buffer.Buffer.register_buffer", "numpy.log2", "x.new().fill_().scatter_", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "dtype", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.prod", "numpy.log2", "x.unsqueeze", "x.new().fill_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "x.size", "x.size", "x.new", "x.size"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "n_classes", ",", "max_idx", "=", "256.", ",", "amt", "=", "0", ",", "dtype", "=", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n", "bx", "=", "dtype", "(", "amt", ",", "*", "input_size", ")", ".", "fill_", "(", "0", ")", "\n", "by", "=", "torch", ".", "LongTensor", "(", "amt", ")", ".", "fill_", "(", "0", ")", "\n", "bt", "=", "torch", ".", "LongTensor", "(", "amt", ")", ".", "fill_", "(", "0", ")", "\n", "bidx", "=", "torch", ".", "LongTensor", "(", "amt", ")", ".", "fill_", "(", "0", ")", "\n", "bstep", "=", "torch", ".", "LongTensor", "(", "amt", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "n_samples", "=", "amt", "\n", "self", ".", "mem_per_sample", "=", "np", ".", "prod", "(", "input_size", ")", "*", "np", ".", "log2", "(", "max_idx", ")", "/", "np", ".", "log2", "(", "256.", ")", "\n", "self", ".", "n_memory", "=", "amt", "*", "self", ".", "mem_per_sample", "\n", "\n", "self", ".", "register_buffer", "(", "'bx'", ",", "bx", ")", "\n", "self", ".", "register_buffer", "(", "'by'", ",", "by", ")", "\n", "self", ".", "register_buffer", "(", "'bt'", ",", "bt", ")", "\n", "self", ".", "register_buffer", "(", "'bidx'", ",", "bidx", ")", "\n", "self", ".", "register_buffer", "(", "'bstep'", ",", "bstep", ")", "\n", "\n", "self", ".", "to_one_hot", "=", "lambda", "x", ":", "x", ".", "new", "(", "x", ".", "size", "(", "0", ")", ",", "n_classes", ")", ".", "fill_", "(", "0", ")", ".", "scatter_", "(", "1", ",", "x", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "self", ".", "arange_like", "=", "lambda", "x", ":", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "self", ".", "shuffle", "=", "lambda", "x", ":", "x", "[", "torch", ".", "randperm", "(", "x", ".", "size", "(", "0", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.expand": [[36, 39], ["buffer.Buffer.__init__"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__"], ["", "def", "expand", "(", "self", ",", "amt", ")", ":", "\n", "        ", "\"\"\" used when loading a model from `pth` file and the amt of samples in the buffer don't align \"\"\"", "\n", "self", ".", "__init__", "(", "self", ".", "input_size", ",", "self", ".", "n_classes", ",", "dtype", "=", "self", ".", "dtype", ",", "amt", "=", "amt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.x": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bx", "[", ":", "self", ".", "n_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.y": [[44, 47], ["buffer.Buffer.to_one_hot"], "methods", ["None"], ["", "@", "property", "\n", "def", "y", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "to_one_hot", "(", "self", ".", "by", "[", ":", "self", ".", "n_samples", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.t": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "t", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bt", "[", ":", "self", ".", "n_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add": [[52, 106], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "in_x.detach.detach.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "in_x.detach.detach.size", "type", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "type", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "pdb.set_trace", "buffer.Buffer.bx.size", "in_x.detach.detach.size", "in_x.detach.detach.size", "idx.type", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "buffer.Buffer.bx.size", "in_x.detach.detach.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "in_x.detach.detach.size", "in_x.detach.detach.size"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "add", "(", "self", ",", "in_x", ",", "add_info", ",", "idx", "=", "None", ")", ":", "\n", "\n", "        ", "\"\"\" concatenate a sample at the end of the buffer \"\"\"", "\n", "\n", "in_x", "=", "in_x", ".", "detach", "(", ")", "\n", "in_y", "=", "add_info", "[", "'y'", "]", "\n", "in_t", "=", "add_info", "[", "'t'", "]", "\n", "in_idx", "=", "add_info", "[", "'bidx'", "]", "\n", "in_step", "=", "add_info", "[", "'step'", "]", "\n", "\n", "# in_y, in_t, in_idx, in_step, idx=None):", "\n", "\n", "# convert int `in_t` to long tensor", "\n", "if", "type", "(", "in_t", ")", "==", "int", ":", "\n", "            ", "in_t", "=", "torch", ".", "LongTensor", "(", "in_x", ".", "size", "(", "0", ")", ")", ".", "to", "(", "in_x", ".", "device", ")", ".", "fill_", "(", "in_t", ")", "\n", "", "if", "type", "(", "in_step", ")", "==", "int", ":", "\n", "            ", "in_step", "=", "torch", ".", "LongTensor", "(", "in_x", ".", "size", "(", "0", ")", ")", ".", "to", "(", "in_x", ".", "device", ")", ".", "fill_", "(", "in_step", ")", "\n", "\n", "", "if", "idx", "is", "not", "None", ":", "\n", "            ", "assert", "'BoolTensor'", "in", "idx", ".", "type", "(", ")", ",", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "in_x", "=", "in_x", "[", "idx", "]", "\n", "in_y", "=", "in_y", "[", "idx", "]", "\n", "in_t", "=", "in_t", "[", "idx", "]", "\n", "in_idx", "=", "in_idx", "[", "idx", "]", "\n", "in_step", "=", "in_step", "[", "idx", "]", "\n", "\n", "", "if", "self", ".", "bx", ".", "size", "(", "0", ")", ">", "in_x", ".", "size", "(", "0", ")", ":", "\n", "            ", "swap_idx", "=", "torch", ".", "randperm", "(", "self", ".", "bx", ".", "size", "(", "0", ")", ")", "[", ":", "in_x", ".", "size", "(", "0", ")", "]", "\n", "\n", "tmp_x", "=", "self", ".", "bx", "[", "swap_idx", "]", "\n", "tmp_y", "=", "self", ".", "by", "[", "swap_idx", "]", "\n", "tmp_t", "=", "self", ".", "bt", "[", "swap_idx", "]", "\n", "tmp_idx", "=", "self", ".", "bidx", "[", "swap_idx", "]", "\n", "tmp_step", "=", "self", ".", "bstep", "[", "swap_idx", "]", "\n", "\n", "# overwrite", "\n", "self", ".", "bx", "[", "swap_idx", "]", "=", "in_x", "\n", "self", ".", "by", "[", "swap_idx", "]", "=", "in_y", "\n", "self", ".", "bt", "[", "swap_idx", "]", "=", "in_t", "\n", "self", ".", "bidx", "[", "swap_idx", "]", "=", "in_idx", "\n", "self", ".", "bstep", "[", "swap_idx", "]", "=", "in_step", "\n", "\n", "in_x", ",", "in_y", ",", "in_t", ",", "in_idx", ",", "in_step", "=", "tmp_x", ",", "tmp_y", ",", "tmp_t", ",", "tmp_idx", ",", "tmp_step", "\n", "\n", "", "self", ".", "bx", "=", "torch", ".", "cat", "(", "(", "self", ".", "bx", ",", "in_x", ")", ")", "\n", "self", ".", "by", "=", "torch", ".", "cat", "(", "(", "self", ".", "by", ",", "in_y", ")", ")", "\n", "self", ".", "bt", "=", "torch", ".", "cat", "(", "(", "self", ".", "bt", ",", "in_t", ")", ")", "\n", "self", ".", "bidx", "=", "torch", ".", "cat", "(", "(", "self", ".", "bidx", ",", "in_idx", ")", ")", "\n", "self", ".", "bstep", "=", "torch", ".", "cat", "(", "(", "self", ".", "bstep", ",", "in_step", ")", ")", "\n", "\n", "self", ".", "n_samples", "+=", "in_x", ".", "size", "(", "0", ")", "\n", "self", ".", "n_memory", "+=", "in_x", ".", "size", "(", "0", ")", "*", "self", ".", "mem_per_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.free": [[108, 149], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "pdb.set_trace", "buffer.Buffer.y[].sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "idx_to_keep.nonzero().squeeze.nonzero().squeeze.nonzero().squeeze", "buffer.Buffer.y[].sum", "idx.size", "idx_to_keep.nonzero().squeeze.nonzero().squeeze.nonzero"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "free", "(", "self", ",", "n_samples", "=", "None", ",", "idx", "=", "None", ")", ":", "\n", "        ", "\"\"\" free buffer space. Assumes data is shuffled when added\"\"\"", "\n", "\n", "assert", "n_samples", "is", "not", "None", "or", "idx", "is", "not", "None", ",", "'must specify amt of points to remove, or specific idx'", "\n", "\n", "if", "n_samples", "is", "None", ":", "\n", "            ", "n_samples", "=", "idx", ".", "size", "(", "0", ")", "if", "idx", ".", "ndim", ">", "0", "else", "0", "\n", "\n", "", "if", "n_samples", "==", "0", ":", "\n", "            ", "return", "0", ",", "0", "\n", "\n", "", "n_samples", "=", "int", "(", "n_samples", ")", "\n", "assert", "n_samples", "<=", "self", ".", "n_samples", ",", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "if", "idx", "is", "not", "None", ":", "\n", "            ", "class_removed", "=", "self", ".", "y", "[", "idx", "]", ".", "sum", "(", "0", ")", "\n", "\n", "idx_to_keep", "=", "torch", ".", "ones_like", "(", "self", ".", "by", ")", "\n", "idx_to_keep", "[", "idx", "]", "=", "0", "\n", "idx_to_keep", "=", "idx_to_keep", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "self", ".", "bx", "=", "self", ".", "bx", "[", "idx_to_keep", "]", "\n", "self", ".", "by", "=", "self", ".", "by", "[", "idx_to_keep", "]", "\n", "self", ".", "bt", "=", "self", ".", "bt", "[", "idx_to_keep", "]", "\n", "self", ".", "bidx", "=", "self", ".", "bidx", "[", "idx_to_keep", "]", "\n", "self", ".", "bstep", "=", "self", ".", "bstep", "[", "idx_to_keep", "]", "\n", "", "else", ":", "\n", "            ", "class_removed", "=", "self", ".", "y", "[", "-", "n_samples", ":", "]", ".", "sum", "(", "0", ")", "\n", "\n", "self", ".", "bx", "=", "self", ".", "bx", "[", ":", "-", "n_samples", "]", "\n", "self", ".", "by", "=", "self", ".", "by", "[", ":", "-", "n_samples", "]", "\n", "self", ".", "bt", "=", "self", ".", "bt", "[", ":", "-", "n_samples", "]", "\n", "self", ".", "bidx", "=", "self", ".", "bidx", "[", ":", "-", "n_samples", "]", "\n", "self", ".", "bstep", "=", "self", ".", "bstep", "[", ":", "-", "n_samples", "]", "\n", "\n", "", "self", ".", "n_samples", "-=", "n_samples", "\n", "self", ".", "n_memory", "-=", "n_samples", "*", "self", ".", "mem_per_sample", "\n", "\n", "return", "class_removed", ",", "n_samples", "*", "self", ".", "mem_per_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.adjust_n_embeds": [[151, 154], ["numpy.log2", "numpy.prod", "numpy.log2"], "methods", ["None"], ["", "def", "adjust_n_embeds", "(", "self", ",", "n_embeds", ")", ":", "\n", "        ", "self", ".", "mem_per_sample", "=", "np", ".", "prod", "(", "self", ".", "input_size", ")", "*", "np", ".", "log2", "(", "n_embeds", ")", "/", "np", ".", "log2", "(", "256.", ")", "\n", "self", ".", "n_memory", "=", "self", ".", "n_samples", "*", "self", ".", "mem_per_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.try_and_remove": [[156, 215], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "min", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.cumsum", "torch.zeros_like.cumsum", "torch.zeros_like.cumsum", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "counts.cumsum.cumsum.cumsum", "counts.cumsum.cumsum.cumsum", "counts.cumsum.cumsum.sum", "int", "tbr_counts.clone", "pdb.set_trace", "buffer.Buffer.y.cumsum", "tbr.sum().nonzero().squeeze", "buffer.Buffer.free", "tbr_counts.nonzero().size", "torch.LongTensor().random_().to", "torch.LongTensor().random_().to", "torch.LongTensor().random_().to", "torch.LongTensor().random_().to", "torch.LongTensor().random_().to", "torch.LongTensor().random_().to", "torch.LongTensor().random_().to", "torch.LongTensor().random_().to", "torch.LongTensor().random_().to", "tbr_counts.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tbr_counts.sum", "numpy.sign", "torch.LongTensor().random_().to.bincount", "torch.LongTensor().random_().to.bincount", "torch.LongTensor().random_().to.bincount", "tbr.sum().nonzero", "tbr_counts.nonzero", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "torch.LongTensor().random_", "class_id.sort", "buffer.Buffer.y.bool", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "tbr.sum", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "abs"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.free"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "try_and_remove", "(", "self", ",", "n_samples", ",", "class_counts", ")", ":", "\n", "# figure out how much per class this means", "\n", "\n", "        ", "n_samples", "=", "min", "(", "n_samples", ",", "self", ".", "n_samples", ")", "\n", "\n", "if", "n_samples", "==", "0", ":", "\n", "            ", "return", "0", ",", "0", "\n", "\n", "", "\"\"\" figure out how many samples per class should be removed \"\"\"", "\n", "\n", "# sort classes w.r.t count", "\n", "class_count", ",", "class_id", "=", "torch", ".", "sort", "(", "class_counts", ",", "descending", "=", "True", ")", "\n", "\n", "gain", "=", "torch", ".", "zeros_like", "(", "class_count", ")", "\n", "gain", "[", "1", ":", "]", "=", "class_count", "[", ":", "-", "1", "]", "-", "class_count", "[", "1", ":", "]", "\n", "cum_gain", "=", "gain", ".", "cumsum", "(", "0", ")", "\n", "\n", "# get class counts for removal", "\n", "counts", "=", "torch", ".", "zeros", "(", "n_samples", ",", "self", ".", "n_classes", ")", ".", "to", "(", "class_counts", ".", "device", ")", "\n", "\n", "# don't bother with classes having too few elems to reach n_samples", "\n", "valid_idx", "=", "cum_gain", "<", "n_samples", "\n", "counts", "[", "cum_gain", "[", "valid_idx", "]", ",", "torch", ".", "arange", "(", "self", ".", "n_classes", ")", "[", "valid_idx", "]", "]", "=", "1", "\n", "\n", "counts", "=", "counts", ".", "cumsum", "(", "0", ")", "\n", "cum_counts", "=", "counts", ".", "cumsum", "(", "0", ")", "\n", "total_cum_counts", "=", "cum_counts", ".", "sum", "(", "1", ")", "\n", "\n", "idx", "=", "(", "total_cum_counts", "<", "n_samples", ")", ".", "sum", "(", ")", "\n", "\n", "to_be_removed_counts", "=", "tbr_counts", "=", "cum_counts", "[", "(", "idx", "-", "1", ")", ".", "clamp_", "(", "min", "=", "0", ")", "]", "\n", "missing", "=", "int", "(", "n_samples", "-", "tbr_counts", ".", "sum", "(", ")", ")", "\n", "\n", "tbr_old", "=", "tbr_counts", ".", "clone", "(", ")", "\n", "\n", "if", "missing", "!=", "0", ":", "\n", "# randomly assign the missing samples to available classes", "\n", "            ", "n_avail_classes", "=", "tbr_counts", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", "\n", "sample", "=", "torch", ".", "LongTensor", "(", "abs", "(", "missing", ")", ")", ".", "random_", "(", "0", ",", "self", ".", "n_classes", ")", ".", "to", "(", "counts", ".", "device", ")", "\n", "sample", "=", "sample", "%", "n_avail_classes", "\n", "tbr_counts", "[", ":", "n_avail_classes", "]", "+=", "np", ".", "sign", "(", "missing", ")", "*", "sample", ".", "bincount", "(", "minlength", "=", "n_avail_classes", ")", "\n", "\n", "", "assert", "tbr_counts", ".", "sum", "(", ")", "==", "n_samples", ",", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "\"\"\" remove class specific samples \"\"\"", "\n", "\n", "# restore valid order", "\n", "tbr_counts", "=", "tbr_counts", "[", "class_id", ".", "sort", "(", ")", "[", "1", "]", "]", "\n", "\n", "# buffer is already in random order, so just remove from the top", "\n", "class_total", "=", "self", ".", "y", ".", "cumsum", "(", "0", ")", "\n", "\n", "#       did we reach cap already?    get actual label", "\n", "tbr", "=", "(", "(", "class_total", "<=", "tbr_counts", ")", "&", "self", ".", "y", ".", "bool", "(", ")", ")", ".", "int", "(", ")", "#.sum(0)", "\n", "\n", "tbr_idx", "=", "tbr", ".", "sum", "(", "1", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "self", ".", "free", "(", "idx", "=", "tbr_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.sample": [[217, 267], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "buffer.Buffer.y.clone", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "y_samples.size", "tbs.sum().nonzero().squeeze", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "y_samples.sum", "torch.randperm().to.sort", "torch.randperm().to.sort", "torch.randperm().to.sort", "buffer.Buffer.cumsum", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "tbs.sum().nonzero", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.choice", "buffer.Buffer.bool", "tbs.sum", "bx.size"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "amt", "=", "None", ",", "y_samples", "=", "None", ")", ":", "\n", "\n", "# one or the other", "\n", "        ", "if", "amt", "is", "None", ":", "\n", "\n", "            ", "assert", "y_samples", "is", "not", "None", "\n", "\n", "if", "y_samples", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "return", "self", ".", "bx", "[", ":", "0", "]", ",", "{", "'y'", ":", "self", ".", "by", "[", ":", "0", "]", ",", "\n", "'t'", ":", "self", ".", "bt", "[", ":", "0", "]", ",", "\n", "'idx'", ":", "self", ".", "bidx", "[", ":", "0", "]", ",", "\n", "'bidx'", ":", "self", ".", "bidx", "[", ":", "0", "]", ",", "\n", "'step'", ":", "self", ".", "bstep", "[", ":", "0", "]", "}", "\n", "\n", "# get the indices", "\n", "\n", "# simulate a shuffle (only needed on the y's. Should be fast)", "\n", "", "y", "=", "self", ".", "y", ".", "clone", "(", ")", "\n", "shuffle_idx", "=", "torch", ".", "randperm", "(", "self", ".", "n_samples", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "reorder_idx", "=", "shuffle_idx", ".", "sort", "(", ")", "[", "1", "]", "\n", "y", "=", "y", "[", "shuffle_idx", "]", "\n", "\n", "n_cls", "=", "y_samples", ".", "size", "(", "-", "1", ")", "\n", "class_total", "=", "y", ".", "cumsum", "(", "0", ")", "[", ":", ",", ":", "n_cls", "]", "\n", "\n", "#      did we reach cap already?    get actual label", "\n", "tbs", "=", "(", "(", "class_total", "<=", "y_samples", ")", "&", "y", ".", "bool", "(", ")", "[", ":", ",", ":", "n_cls", "]", ")", ".", "int", "(", ")", "\n", "tbs_idx", "=", "tbs", ".", "sum", "(", "1", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# unshuffle", "\n", "tbs_idx", "=", "shuffle_idx", "[", "tbs_idx", "]", "\n", "# if not (self.by[tbs_idx].bincount(minlength=y_samples.size(0)) == y_samples).all(): pdb.set_trace()", "\n", "\n", "indices", "=", "tbs_idx", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "assert", "y_samples", "is", "None", "\n", "\n", "if", "amt", "==", "0", ":", "\n", "                ", "return", "self", ".", "bx", "[", ":", "0", "]", ",", "self", ".", "by", "[", ":", "0", "]", ",", "self", ".", "bt", "[", ":", "0", "]", ",", "self", ".", "bidx", "[", ":", "0", "]", ",", "self", ".", "bstep", "[", ":", "0", "]", "\n", "\n", "", "indices", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "choice", "(", "bx", ".", "size", "(", "0", ")", ",", "amt", ",", "replace", "=", "False", ")", ")", ".", "to", "(", "bx", ".", "device", ")", "\n", "\n", "", "return", "self", ".", "bx", "[", "indices", "]", ",", "{", "'y'", ":", "self", ".", "by", "[", "indices", "]", ",", "\n", "'t'", ":", "self", ".", "bt", "[", "indices", "]", ",", "\n", "'idx'", ":", "indices", ",", "\n", "'bidx'", ":", "self", ".", "bidx", "[", "indices", "]", ",", "\n", "'step'", ":", "self", ".", "bstep", "[", "indices", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.sample_everything": [[269, 282], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "range", "min"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample_everything", "(", "self", ")", ":", "\n", "        ", "BS", "=", "32", "\n", "n_batches", "=", "self", ".", "n_samples", "//", "BS", "\n", "if", "self", ".", "n_samples", "!=", "n_batches", "*", "BS", ":", "n_batches", "+=", "1", "\n", "\n", "for", "batch", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "idx", "=", "range", "(", "batch", "*", "BS", ",", "min", "(", "self", ".", "n_samples", ",", "(", "batch", "+", "1", ")", "*", "BS", ")", ")", "\n", "yield", "self", ".", "bx", "[", "idx", "]", ",", "{", "'y'", ":", "self", ".", "by", "[", "idx", "]", ",", "\n", "'t'", ":", "self", ".", "bt", "[", "idx", "]", ",", "\n", "'idx'", ":", "idx", ",", "\n", "'bidx'", ":", "self", ".", "bidx", "[", "idx", "]", ",", "\n", "'step'", ":", "self", ".", "bstep", "[", "idx", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.XYDataset.__init__": [[14, 23], ["kwargs.items", "setattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "y", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "x", ",", "self", ".", "y", "=", "x", ",", "y", "\n", "\n", "self", ".", "rescale", "=", "lambda", "x", ":", "(", "x", "/", "255.", "-", "0.5", ")", "*", "2.", "\n", "\n", "# this was to store the inverse permutation in permuted_mnist", "\n", "# so that we could 'unscramble' samples and plot them", "\n", "for", "name", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.XYDataset.__len__": [[24, 26], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.XYDataset.__getitem__": [[27, 45], ["type", "data.XYDataset.transform", "torch.Tensor().fill_().long().squeeze", "y.long.long.long", "PIL.Image.open().convert", "data.XYDataset.float", "torch.Tensor().fill_().long", "PIL.Image.open", "torch.Tensor().fill_", "torch.Tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "x", "[", "idx", "]", ",", "self", ".", "y", "[", "idx", "]", "\n", "\n", "if", "type", "(", "x", ")", "!=", "torch", ".", "Tensor", ":", "\n", "# mini_imagenet", "\n", "# we assume it's a path --> load from file", "\n", "            ", "x", "=", "self", ".", "transform", "(", "Image", ".", "open", "(", "x", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "y", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "float", "(", ")", "/", "255.", "\n", "y", "=", "y", ".", "long", "(", ")", "\n", "\n", "\n", "# for some reason mnist does better \\in [0,1] than [-1, 1]", "\n", "", "if", "self", ".", "source", "==", "'mnist'", ":", "\n", "            ", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "(", "x", "-", ".5", ")", "*", "2", ",", "y", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.Kitti_dataset.__init__": [[48, 61], ["numpy.cumsum", "sum", "data.Kitti_dataset.hist.cumsum", "numpy.load", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paths", ",", "hist_equalize", "=", "True", ")", ":", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "datas", "=", "[", "np", ".", "load", "(", "path", ")", "for", "path", "in", "paths", "]", "\n", "self", ".", "lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "datas", "]", "\n", "self", ".", "cumlens", "=", "np", ".", "cumsum", "(", "self", ".", "lens", ")", "\n", "\n", "self", ".", "len", "=", "sum", "(", "self", ".", "lens", ")", "\n", "\n", "self", ".", "eq", "=", "hist_equalize", "\n", "self", ".", "hist", "=", "KITTI_HIST", "\n", "self", ".", "bins", "=", "BINS", "\n", "self", ".", "cdf", "=", "self", ".", "hist", ".", "cumsum", "(", ")", "\n", "self", ".", "cdf", "=", "255", "*", "self", ".", "cdf", "/", "self", ".", "cdf", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.Kitti_dataset.unnorm": [[62, 75], ["numpy.interp().reshape", "type", "torch.from_numpy().to().float.cpu().data.numpy", "torch.from_numpy().to().float", "numpy.interp", "torch.from_numpy().to().float.flatten", "torch.from_numpy().to", "torch.from_numpy().to().float.cpu", "torch.from_numpy"], "methods", ["None"], ["", "def", "unnorm", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "dev", "=", "None", "\n", "if", "type", "(", "x", ")", "==", "torch", ".", "Tensor", ":", "\n", "            ", "dev", "=", "x", ".", "device", "\n", "x", "=", "x", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "x", "=", "np", ".", "interp", "(", "x", ".", "flatten", "(", ")", ",", "self", ".", "cdf", ",", "self", ".", "bins", "[", ":", "-", "1", "]", ")", ".", "reshape", "(", "x", ".", "shape", ")", "\n", "\n", "if", "dev", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "to", "(", "dev", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "x", "*", ".5", "+", ".5", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.Kitti_dataset.norm": [[76, 79], ["numpy.interp().reshape().astype", "numpy.interp().reshape", "numpy.interp", "numpy.interp().reshape().astype.flatten"], "methods", ["None"], ["", "def", "norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "interp", "(", "x", ".", "flatten", "(", ")", ",", "self", ".", "bins", "[", ":", "-", "1", "]", ",", "self", ".", "cdf", ")", ".", "reshape", "(", "x", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "(", "x", "-", ".5", ")", "*", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.Kitti_dataset.__len__": [[81, 83], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.Kitti_dataset.__getitem__": [[84, 95], ["numpy.argwhere().min", "data.Kitti_dataset.norm", "numpy.argwhere"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.Kitti_dataset.norm"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "rec_idx", "=", "np", ".", "argwhere", "(", "(", "idx", "<", "self", ".", "cumlens", ")", "==", "1", ")", ".", "min", "(", ")", "\n", "sample_idx", "=", "idx", "-", "(", "self", ".", "cumlens", "[", "rec_idx", "-", "1", "]", "if", "rec_idx", ">", "0", "else", "0", ")", "\n", "\n", "item", "=", "self", ".", "datas", "[", "rec_idx", "]", "[", "'%d.npy'", "%", "sample_idx", "]", "\n", "\n", "if", "self", ".", "eq", ":", "\n", "            ", "item", "=", "self", ".", "norm", "(", "item", ")", "\n", "\n", "# TODO: should we map back and forth from polar to xyz ?", "\n", "", "return", "item", ",", "0", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.CLDataLoader.__init__": [[99, 115], ["torch.utils.data.DataLoader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "datasets_per_task", ",", "args", ",", "train", "=", "True", ")", ":", "\n", "        ", "test_bs", ",", "num_workers", "=", "128", ",", "8", "\n", "\n", "if", "'kitti'", "in", "args", ".", "dataset", ":", "\n", "            ", "test_bs", "=", "32", "\n", "num_workers", "=", "0", "\n", "", "elif", "'imagenet'", "in", "args", ".", "dataset", ":", "\n", "            ", "test_bs", "=", "32", "\n", "\n", "", "bs", "=", "args", ".", "batch_size", "if", "train", "else", "test_bs", "\n", "if", "args", ".", "debug", ":", "num_workers", "=", "0", "\n", "\n", "self", ".", "datasets", "=", "datasets_per_task", "\n", "self", ".", "loaders", "=", "[", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "x", ",", "batch_size", "=", "bs", ",", "shuffle", "=", "True", ",", "drop_last", "=", "train", ",", "\n", "num_workers", "=", "num_workers", ")", "for", "x", "in", "self", ".", "datasets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.CLDataLoader.__getitem__": [[116, 118], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "loaders", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.CLDataLoader.__len__": [[119, 121], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "loaders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.get_processed_kitti": [[123, 155], ["os.listdir", "data.Kitti_dataset", "data.Kitti_dataset", "os.listdir", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "get_processed_kitti", "(", "args", ",", "mode", "=", "'offline'", ")", ":", "\n", "# from utils.kitti_loader import preprocessed_kitti", "\n", "\n", "    ", "root", "=", "'../datasets/processed_kitti'", "\n", "\n", "task_id", "=", "0", "\n", "env_recs", "=", "{", "}", "\n", "for", "env", "in", "os", ".", "listdir", "(", "root", ")", ":", "\n", "        ", "env_recs", "[", "env", "]", "=", "[", "]", "\n", "for", "recording", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "env", ")", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "env", ",", "recording", ",", "'processed.npz'", ")", "\n", "env_recs", "[", "env", "]", "+=", "[", "path", "]", "\n", "task_id", "+=", "1", "\n", "\n", "", "", "if", "mode", "==", "'offline'", ":", "\n", "# train on residential and road", "\n", "        ", "train_recs", "=", "env_recs", "[", "'road'", "]", "[", "2", ":", "]", "+", "env_recs", "[", "'residential'", "]", "[", "3", ":", "]", "\n", "valid_recs", "=", "env_recs", "[", "'road'", "]", "[", ":", "2", "]", "+", "env_recs", "[", "'residential'", "]", "[", ":", "3", "]", "\n", "\n", "", "elif", "mode", "==", "'online'", ":", "\n", "        ", "train_recs", "=", "env_recs", "[", "'city'", "]", "[", "2", ":", "]", "\n", "valid_recs", "=", "env_recs", "[", "'city'", "]", "[", ":", "2", "]", "\n", "\n", "", "elif", "mode", "==", "'all'", ":", "\n", "        ", "all_recs", "=", "env_recs", "[", "'road'", "]", "+", "env_recs", "[", "'residential'", "]", "+", "env_recs", "[", "'city'", "]", "\n", "train_recs", "=", "all_recs", "\n", "valid_recs", "=", "all_recs", "\n", "\n", "", "train_ds", "=", "Kitti_dataset", "(", "train_recs", ")", "\n", "valid_ds", "=", "Kitti_dataset", "(", "valid_recs", ")", "\n", "\n", "return", "[", "train_ds", "]", ",", "[", "valid_ds", "]", ",", "[", "valid_ds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.get_split_cifar10": [[158, 222], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.Tensor().permute().contiguous", "torch.Tensor().permute().contiguous", "torch.Tensor", "torch.Tensor", "range", "data.make_valid_from_train", "map", "map", "map", "numpy.stack", "numpy.stack", "str", "sorted", "sorted", "torch.Tensor().permute", "torch.Tensor().permute", "range", "range", "data.XYDataset", "data.XYDataset", "data.XYDataset", "zip", "zip", "sorted", "sorted", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.make_valid_from_train"], ["", "def", "get_split_cifar10", "(", "args", ")", ":", "\n", "# assert args.n_tasks in [5, 10], 'SplitCifar only works with 5 or 10 tasks'", "\n", "    ", "assert", "'1.'", "in", "str", "(", "torch", ".", "__version__", ")", "[", ":", "2", "]", ",", "'Use Pytorch 1.x!'", "\n", "args", ".", "n_tasks", "=", "5", "\n", "args", ".", "n_classes", "=", "10", "\n", "args", ".", "multiple_heads", "=", "False", "\n", "args", ".", "input_size", "=", "(", "3", ",", "32", ",", "32", ")", "\n", "\n", "if", "args", ".", "override_cl_defaults", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "args", ".", "n_classes_per_task", "=", "2", "\n", "\n", "", "args", ".", "n_tasks", "=", "args", ".", "n_classes", "//", "args", ".", "n_classes_per_task", "\n", "\n", "# fetch data", "\n", "train", "=", "datasets", ".", "CIFAR10", "(", "'../cl-pytorch/data/'", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "test", "=", "datasets", ".", "CIFAR10", "(", "'../cl-pytorch/data/'", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n", "train_x", ",", "train_y", "=", "train", ".", "data", ",", "train", ".", "targets", "\n", "test_x", ",", "test_y", "=", "test", ".", "data", ",", "test", ".", "targets", "\n", "\n", "# sort according to the label", "\n", "out_train", "=", "[", "\n", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "sorted", "(", "zip", "(", "train_x", ",", "train_y", ")", ",", "key", "=", "lambda", "v", ":", "v", "[", "1", "]", ")", "]", "\n", "\n", "out_test", "=", "[", "\n", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "sorted", "(", "zip", "(", "test_x", ",", "test_y", ")", ",", "key", "=", "lambda", "v", ":", "v", "[", "1", "]", ")", "]", "\n", "\n", "train_x", ",", "train_y", "=", "[", "\n", "np", ".", "stack", "(", "[", "elem", "[", "i", "]", "for", "elem", "in", "out_train", "]", ")", "for", "i", "in", "[", "0", ",", "1", "]", "]", "\n", "\n", "test_x", ",", "test_y", "=", "[", "\n", "np", ".", "stack", "(", "[", "elem", "[", "i", "]", "for", "elem", "in", "out_test", "]", ")", "for", "i", "in", "[", "0", ",", "1", "]", "]", "\n", "\n", "train_x", "=", "torch", ".", "Tensor", "(", "train_x", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "test_x", "=", "torch", ".", "Tensor", "(", "test_x", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "train_y", "=", "torch", ".", "Tensor", "(", "train_y", ")", "\n", "test_y", "=", "torch", ".", "Tensor", "(", "test_y", ")", "\n", "\n", "# get indices of class split", "\n", "train_idx", "=", "[", "(", "(", "train_y", "+", "i", ")", "%", "10", ")", ".", "argmax", "(", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "train_idx", "=", "[", "0", "]", "+", "[", "x", "+", "1", "for", "x", "in", "sorted", "(", "train_idx", ")", "]", "\n", "\n", "test_idx", "=", "[", "(", "(", "test_y", "+", "i", ")", "%", "10", ")", ".", "argmax", "(", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "test_idx", "=", "[", "0", "]", "+", "[", "x", "+", "1", "for", "x", "in", "sorted", "(", "test_idx", ")", "]", "\n", "\n", "train_ds", ",", "valid_ds", ",", "test_ds", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "skip", "=", "args", ".", "n_classes_per_task", "\n", "for", "i", "in", "range", "(", "0", ",", "10", ",", "skip", ")", ":", "\n", "        ", "tr_s", ",", "tr_e", "=", "train_idx", "[", "i", "]", ",", "train_idx", "[", "i", "+", "skip", "]", "\n", "te_s", ",", "te_e", "=", "test_idx", "[", "i", "]", ",", "test_idx", "[", "i", "+", "skip", "]", "\n", "\n", "train_ds", "+=", "[", "(", "train_x", "[", "tr_s", ":", "tr_e", "]", ",", "train_y", "[", "tr_s", ":", "tr_e", "]", ")", "]", "\n", "test_ds", "+=", "[", "(", "test_x", "[", "te_s", ":", "te_e", "]", ",", "test_y", "[", "te_s", ":", "te_e", "]", ")", "]", "\n", "\n", "", "train_ds", ",", "valid_ds", "=", "make_valid_from_train", "(", "train_ds", ")", "\n", "\n", "train_ds", "=", "map", "(", "lambda", "x", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar10'", "}", ")", ",", "train_ds", ")", "\n", "valid_ds", "=", "map", "(", "lambda", "x", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar10'", "}", ")", ",", "valid_ds", ")", "\n", "test_ds", "=", "map", "(", "lambda", "x", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar10'", "}", ")", ",", "test_ds", ")", "\n", "\n", "return", "train_ds", ",", "valid_ds", ",", "test_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.get_split_cifar100": [[224, 337], ["torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torch.Tensor().permute().contiguous", "torch.Tensor().permute().contiguous", "torch.Tensor", "torch.Tensor", "range", "range", "enumerate", "torch.stack().to().long", "map", "map", "map", "print", "print", "print", "numpy.stack", "numpy.stack", "range", "task_data[].unique().long", "torch.zeros().to", "str", "sorted", "sorted", "torch.Tensor().permute", "torch.Tensor().permute", "range", "range", "int", "range", "range", "range", "range", "range", "torch.stack().to", "data.XYDataset", "data.XYDataset", "data.XYDataset", "zip", "zip", "sorted", "sorted", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "task_data[].unique", "torch.zeros", "torch.Tensor", "torch.Tensor", "train_size.item", "torch.stack"], "function", ["None"], ["", "def", "get_split_cifar100", "(", "args", ")", ":", "\n", "# assert args.n_tasks in [5, 10], 'SplitCifar only works with 5 or 10 tasks'", "\n", "    ", "assert", "'1.'", "in", "str", "(", "torch", ".", "__version__", ")", "[", ":", "2", "]", ",", "'Use Pytorch 1.x!'", "\n", "args", ".", "n_tasks", "=", "20", "\n", "args", ".", "n_classes", "=", "100", "\n", "args", ".", "input_size", "=", "(", "3", ",", "32", ",", "32", ")", "\n", "\n", "if", "args", ".", "override_cl_defaults", ":", "\n", "        ", "print", "(", "'overriding default values'", ")", "\n", "print", "(", "'multiple heads :      {}'", ".", "format", "(", "args", ".", "multiple_heads", ")", ")", "\n", "print", "(", "'n classes per task :  {}'", ".", "format", "(", "args", ".", "n_classes_per_task", ")", ")", "\n", "assert", "args", ".", "multiple_heads", ">", "0", "and", "args", ".", "n_classes_per_task", ">", "0", "\n", "", "else", ":", "\n", "        ", "args", ".", "multiple_heads", "=", "True", "\n", "args", ".", "n_classes_per_task", "=", "5", "\n", "\n", "# fetch data", "\n", "", "train", "=", "datasets", ".", "CIFAR100", "(", "'../../cl-pytorch/data/'", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "test", "=", "datasets", ".", "CIFAR100", "(", "'../../cl-pytorch/data/'", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n", "train_x", ",", "train_y", "=", "train", ".", "data", ",", "train", ".", "targets", "\n", "test_x", ",", "test_y", "=", "test", ".", "data", ",", "test", ".", "targets", "\n", "\n", "# sort according to the label", "\n", "out_train", "=", "[", "\n", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "sorted", "(", "zip", "(", "train_x", ",", "train_y", ")", ",", "key", "=", "lambda", "v", ":", "v", "[", "1", "]", ")", "]", "\n", "\n", "out_test", "=", "[", "\n", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "sorted", "(", "zip", "(", "test_x", ",", "test_y", ")", ",", "key", "=", "lambda", "v", ":", "v", "[", "1", "]", ")", "]", "\n", "\n", "train_x", ",", "train_y", "=", "[", "\n", "np", ".", "stack", "(", "[", "elem", "[", "i", "]", "for", "elem", "in", "out_train", "]", ")", "for", "i", "in", "[", "0", ",", "1", "]", "]", "\n", "\n", "test_x", ",", "test_y", "=", "[", "\n", "np", ".", "stack", "(", "[", "elem", "[", "i", "]", "for", "elem", "in", "out_test", "]", ")", "for", "i", "in", "[", "0", ",", "1", "]", "]", "\n", "\n", "train_x", "=", "torch", ".", "Tensor", "(", "train_x", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "test_x", "=", "torch", ".", "Tensor", "(", "test_x", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "train_y", "=", "torch", ".", "Tensor", "(", "train_y", ")", "\n", "test_y", "=", "torch", ".", "Tensor", "(", "test_y", ")", "\n", "\n", "# get indices of class split", "\n", "train_idx", "=", "[", "(", "(", "train_y", "+", "i", ")", "%", "100", ")", ".", "argmax", "(", ")", "for", "i", "in", "range", "(", "100", ")", "]", "\n", "train_idx", "=", "[", "0", "]", "+", "[", "x", "+", "1", "for", "x", "in", "sorted", "(", "train_idx", ")", "]", "\n", "\n", "test_idx", "=", "[", "(", "(", "test_y", "+", "i", ")", "%", "100", ")", ".", "argmax", "(", ")", "for", "i", "in", "range", "(", "100", ")", "]", "\n", "test_idx", "=", "[", "0", "]", "+", "[", "x", "+", "1", "for", "x", "in", "sorted", "(", "test_idx", ")", "]", "\n", "\n", "train_ds", ",", "valid_ds", ",", "test_ds", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "skip", "=", "1", "# get all classes individually first", "\n", "for", "i", "in", "range", "(", "0", ",", "100", ")", ":", "\n", "        ", "tr_s", ",", "tr_e", "=", "train_idx", "[", "i", "]", ",", "train_idx", "[", "i", "+", "skip", "]", "\n", "te_s", ",", "te_e", "=", "test_idx", "[", "i", "]", ",", "test_idx", "[", "i", "+", "skip", "]", "\n", "\n", "train_size", "=", "tr_e", "-", "tr_s", "\n", "split", "=", "tr_s", "+", "int", "(", "0.9", "*", "train_size", ".", "item", "(", ")", ")", "\n", "\n", "train_ds", "+=", "[", "(", "train_x", "[", "tr_s", ":", "split", "]", ",", "train_y", "[", "tr_s", ":", "split", "]", ")", "]", "\n", "valid_ds", "+=", "[", "(", "train_x", "[", "split", ":", "tr_e", "]", ",", "train_y", "[", "split", ":", "tr_e", "]", ")", "]", "\n", "test_ds", "+=", "[", "(", "test_x", "[", "te_s", ":", "te_e", "]", ",", "test_y", "[", "te_s", ":", "te_e", "]", ")", "]", "\n", "\n", "# next we randomly partition the dataset", "\n", "", "indices", "=", "[", "x", "for", "x", "in", "range", "(", "100", ")", "]", "\n", "\n", "# note: previously we shuffled the indices to make the split", "\n", "# random. However we left it out to be consistent with A-GEM", "\n", "\n", "train_classes", "=", "[", "train_ds", "[", "indices", "[", "i", "]", "]", "for", "i", "in", "range", "(", "100", ")", "]", "\n", "valid_classes", "=", "[", "valid_ds", "[", "indices", "[", "i", "]", "]", "for", "i", "in", "range", "(", "100", ")", "]", "\n", "test_classes", "=", "[", "test_ds", "[", "indices", "[", "i", "]", "]", "for", "i", "in", "range", "(", "100", ")", "]", "\n", "\n", "train_ds", ",", "valid_ds", ",", "test_ds", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "skip", "=", "args", ".", "n_classes_per_task", "\n", "for", "i", "in", "range", "(", "0", ",", "100", ",", "skip", ")", ":", "\n", "        ", "train_task_ds", ",", "valid_task_ds", ",", "test_task_ds", "=", "[", "[", "]", ",", "[", "]", "]", ",", "[", "[", "]", ",", "[", "]", "]", ",", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "j", "in", "range", "(", "skip", ")", ":", "\n", "            ", "train_task_ds", "[", "0", "]", "+=", "[", "train_classes", "[", "i", "+", "j", "]", "[", "0", "]", "]", "\n", "train_task_ds", "[", "1", "]", "+=", "[", "train_classes", "[", "i", "+", "j", "]", "[", "1", "]", "]", "\n", "valid_task_ds", "[", "0", "]", "+=", "[", "valid_classes", "[", "i", "+", "j", "]", "[", "0", "]", "]", "\n", "valid_task_ds", "[", "1", "]", "+=", "[", "valid_classes", "[", "i", "+", "j", "]", "[", "1", "]", "]", "\n", "test_task_ds", "[", "0", "]", "+=", "[", "test_classes", "[", "i", "+", "j", "]", "[", "0", "]", "]", "\n", "test_task_ds", "[", "1", "]", "+=", "[", "test_classes", "[", "i", "+", "j", "]", "[", "1", "]", "]", "\n", "\n", "", "train_ds", "+=", "[", "(", "torch", ".", "cat", "(", "train_task_ds", "[", "0", "]", ")", ",", "torch", ".", "cat", "(", "train_task_ds", "[", "1", "]", ")", ")", "]", "\n", "valid_ds", "+=", "[", "(", "torch", ".", "cat", "(", "valid_task_ds", "[", "0", "]", ")", ",", "torch", ".", "cat", "(", "valid_task_ds", "[", "1", "]", ")", ")", "]", "\n", "test_ds", "+=", "[", "(", "torch", ".", "cat", "(", "test_task_ds", "[", "0", "]", ")", ",", "torch", ".", "cat", "(", "test_task_ds", "[", "1", "]", ")", ")", "]", "\n", "\n", "# TODO: remove this", "\n", "# Facebook actually does 17 tasks (3 to CV)", "\n", "", "train_ds", "=", "train_ds", "[", ":", "args", ".", "n_tasks", "]", "\n", "valid_ds", "=", "valid_ds", "[", ":", "args", ".", "n_tasks", "]", "\n", "test_ds", "=", "test_ds", "[", ":", "args", ".", "n_tasks", "]", "\n", "\n", "# build masks", "\n", "masks", "=", "[", "]", "\n", "task_ids", "=", "[", "None", "for", "_", "in", "range", "(", "args", ".", "n_tasks", ")", "]", "\n", "for", "task", ",", "task_data", "in", "enumerate", "(", "train_ds", ")", ":", "\n", "        ", "labels", "=", "task_data", "[", "1", "]", ".", "unique", "(", ")", ".", "long", "(", ")", "\n", "assert", "labels", ".", "shape", "[", "0", "]", "==", "args", ".", "n_classes_per_task", "\n", "mask", "=", "torch", ".", "zeros", "(", "100", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "mask", "[", "labels", "]", "=", "1", "\n", "masks", "+=", "[", "mask", "]", "\n", "task_ids", "[", "task", "]", "=", "labels", "\n", "\n", "", "task_ids", "=", "torch", ".", "stack", "(", "task_ids", ")", ".", "to", "(", "args", ".", "device", ")", ".", "long", "(", ")", "\n", "\n", "train_ds", "=", "map", "(", "lambda", "x", ",", "y", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar100'", ",", "'mask'", ":", "y", ",", "'task_ids'", ":", "task_ids", "}", ")", ",", "train_ds", ",", "masks", ")", "\n", "valid_ds", "=", "map", "(", "lambda", "x", ",", "y", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar100'", ",", "'mask'", ":", "y", ",", "'task_ids'", ":", "task_ids", "}", ")", ",", "valid_ds", ",", "masks", ")", "\n", "test_ds", "=", "map", "(", "lambda", "x", ",", "y", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar100'", ",", "'mask'", ":", "y", ",", "'task_ids'", ":", "task_ids", "}", ")", ",", "test_ds", ",", "masks", ")", "\n", "\n", "return", "train_ds", ",", "valid_ds", ",", "test_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.get_miniimagenet": [[339, 464], ["torchvision.transforms.Compose", "data.get_miniimagenet.get_data"], "function", ["None"], ["", "def", "get_miniimagenet", "(", "args", ")", ":", "\n", "    ", "ROOT_PATH", "=", "'/home/eugene/data/filelists/miniImagenet/materials/images'", "\n", "ROOT_PATH_CSV", "=", "'/home/eugene/data/filelists/miniImagenet/materials'", "\n", "ROOT_PATH", "=", "'../cl-pytorch/data/imagenet/imagenet_images'", "\n", "ROOT_PATH_CSV", "=", "'../prototypical-network-pytorch/materials'", "\n", "ROOT_PATH", "=", "'/private/home/lucaspc/repos/datasets/miniimagenet/images'", "\n", "ROOT_PATH_CSV", "=", "'/private/home/lucaspc/repos/datasets/miniimagenet/splits'", "\n", "\n", "\n", "\n", "size", "=", "args", ".", "data_size", "[", "-", "1", "]", "\n", "args", ".", "n_classes", "=", "100", "\n", "args", ".", "input_size", "=", "args", ".", "data_size", "\n", "\n", "if", "args", ".", "override_cl_defaults", ":", "\n", "        ", "print", "(", "'overriding default values'", ")", "\n", "print", "(", "'multiple heads :      {}'", ".", "format", "(", "args", ".", "multiple_heads", ")", ")", "\n", "print", "(", "'n classes per task :  {}'", ".", "format", "(", "args", ".", "n_classes_per_task", ")", ")", "\n", "assert", "args", ".", "multiple_heads", ">", "-", "1", "and", "args", ".", "n_classes_per_task", ">", "-", "1", "\n", "", "else", ":", "\n", "        ", "args", ".", "multiple_heads", "=", "True", "\n", "args", ".", "n_classes_per_task", "=", "5", "\n", "\n", "", "args", ".", "n_tasks", "=", "args", ".", "n_classes", "//", "args", ".", "n_classes_per_task", "\n", "\n", "\n", "def", "get_data", "(", "setname", ")", ":", "\n", "        ", "csv_path", "=", "os", ".", "path", ".", "join", "(", "ROOT_PATH_CSV", ",", "setname", "+", "'.csv'", ")", "\n", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "csv_path", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "[", "1", ":", "]", "\n", "\n", "data", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "lb", "=", "-", "1", "\n", "\n", "wnids", "=", "[", "]", "\n", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "name", ",", "wnid", "=", "l", ".", "split", "(", "','", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "ROOT_PATH", ",", "name", ")", "\n", "if", "wnid", "not", "in", "wnids", ":", "\n", "                ", "wnids", ".", "append", "(", "wnid", ")", "\n", "lb", "+=", "1", "\n", "", "data", ".", "append", "(", "path", ")", "\n", "label", ".", "append", "(", "lb", ")", "\n", "\n", "", "return", "data", ",", "label", "\n", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "train_data", ",", "train_label", "=", "get_data", "(", "'train'", ")", "\n", "valid_data", ",", "valid_label", "=", "get_data", "(", "'val'", ")", "\n", "test_data", ",", "test_label", "=", "get_data", "(", "'test'", ")", "\n", "\n", "train_amt", "=", "np", ".", "unique", "(", "train_label", ")", ".", "shape", "[", "0", "]", "\n", "valid_amt", "=", "np", ".", "unique", "(", "valid_label", ")", ".", "shape", "[", "0", "]", "\n", "\n", "valid_label", "=", "[", "x", "+", "train_amt", "for", "x", "in", "valid_label", "]", "\n", "test_label", "=", "[", "x", "+", "train_amt", "+", "valid_amt", "for", "x", "in", "test_label", "]", "\n", "\n", "# total of 60k examples for training, the rest for testing", "\n", "all_data", "=", "np", ".", "array", "(", "train_data", "+", "valid_data", "+", "test_data", ")", "\n", "all_label", "=", "np", ".", "array", "(", "train_label", "+", "valid_label", "+", "test_label", ")", "\n", "\n", "# TODO: remove this", "\n", "# all_data = all_data[::-1]", "\n", "# all_label = all_label[::-1]", "\n", "\n", "\n", "train_ds", ",", "valid_ds", ",", "test_ds", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "current_train", ",", "current_val", ",", "current_test", "=", "None", ",", "None", ",", "None", "\n", "\n", "cat", "=", "lambda", "x", ",", "y", ":", "np", ".", "concatenate", "(", "(", "x", ",", "y", ")", ",", "axis", "=", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "n_classes", ")", ":", "\n", "        ", "class_indices", "=", "np", ".", "argwhere", "(", "all_label", "==", "i", ")", ".", "reshape", "(", "-", "1", ")", "\n", "class_data", "=", "all_data", "[", "class_indices", "]", "\n", "class_label", "=", "all_label", "[", "class_indices", "]", "\n", "split", "=", "int", "(", "0.8", "*", "class_data", ".", "shape", "[", "0", "]", ")", "\n", "split_b", "=", "int", "(", "0.9", "*", "class_data", ".", "shape", "[", "0", "]", ")", "\n", "\n", "data_train", ",", "data_valid", ",", "data_test", "=", "class_data", "[", ":", "split", "]", ",", "class_data", "[", "split", ":", "split_b", "]", ",", "class_data", "[", "split_b", ":", "]", "\n", "label_train", ",", "label_valid", ",", "label_test", "=", "class_label", "[", ":", "split", "]", ",", "class_label", "[", "split", ":", "split_b", "]", ",", "class_label", "[", "split_b", ":", "]", "\n", "\n", "if", "current_train", "is", "None", ":", "\n", "            ", "current_train", ",", "current_valid", ",", "current_test", "=", "(", "data_train", ",", "label_train", ")", ",", "(", "data_valid", ",", "label_valid", ")", ",", "(", "data_test", ",", "label_test", ")", "\n", "", "else", ":", "\n", "            ", "current_train", "=", "cat", "(", "current_train", "[", "0", "]", ",", "data_train", ")", ",", "cat", "(", "current_train", "[", "1", "]", ",", "label_train", ")", "\n", "current_valid", "=", "cat", "(", "current_valid", "[", "0", "]", ",", "data_valid", ")", ",", "cat", "(", "current_valid", "[", "1", "]", ",", "label_valid", ")", "\n", "current_test", "=", "cat", "(", "current_test", "[", "0", "]", ",", "data_test", ")", ",", "cat", "(", "current_test", "[", "1", "]", ",", "label_test", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "n_classes_per_task", "==", "(", "args", ".", "n_classes_per_task", "-", "1", ")", ":", "\n", "            ", "train_ds", "+=", "[", "current_train", "]", "\n", "valid_ds", "+=", "[", "current_valid", "]", "\n", "test_ds", "+=", "[", "current_test", "]", "\n", "current_train", ",", "current_valid", ",", "current_test", "=", "None", ",", "None", ",", "None", "\n", "\n", "# TODO: remove this", "\n", "# Facebook actually does 17 tasks (3 to CV)", "\n", "", "", "train_ds", "=", "train_ds", "[", ":", "args", ".", "n_tasks", "]", "\n", "valid_ds", "=", "valid_ds", "[", ":", "args", ".", "n_tasks", "]", "\n", "test_ds", "=", "test_ds", "[", ":", "args", ".", "n_tasks", "]", "\n", "\n", "# build masks", "\n", "masks", "=", "[", "]", "\n", "task_ids", "=", "[", "None", "for", "_", "in", "range", "(", "args", ".", "n_tasks", ")", "]", "\n", "for", "task", ",", "task_data", "in", "enumerate", "(", "train_ds", ")", ":", "\n", "        ", "labels", "=", "np", ".", "unique", "(", "task_data", "[", "1", "]", ")", "\n", "assert", "labels", ".", "shape", "[", "0", "]", "==", "args", ".", "n_classes_per_task", "\n", "mask", "=", "torch", ".", "zeros", "(", "args", ".", "n_classes", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "mask", "[", "labels", "]", "=", "1", "\n", "masks", "+=", "[", "mask", "]", "\n", "task_ids", "[", "task", "]", "=", "labels", "\n", "\n", "", "task_ids", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "task_ids", ")", ")", ".", "to", "(", "args", ".", "device", ")", ".", "long", "(", ")", "\n", "\n", "train_ds", "=", "map", "(", "lambda", "x", ",", "y", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar100'", ",", "'mask'", ":", "y", ",", "'task_ids'", ":", "task_ids", ",", "'transform'", ":", "transform", "}", ")", ",", "train_ds", ",", "masks", ")", "\n", "valid_ds", "=", "map", "(", "lambda", "x", ",", "y", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar100'", ",", "'mask'", ":", "y", ",", "'task_ids'", ":", "task_ids", ",", "'transform'", ":", "transform", "}", ")", ",", "valid_ds", ",", "masks", ")", "\n", "test_ds", "=", "map", "(", "lambda", "x", ",", "y", ":", "XYDataset", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "**", "{", "'source'", ":", "'cifar100'", ",", "'mask'", ":", "y", ",", "'task_ids'", ":", "task_ids", ",", "'transform'", ":", "transform", "}", ")", ",", "test_ds", ",", "masks", ")", "\n", "\n", "return", "train_ds", ",", "valid_ds", ",", "test_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.data.make_valid_from_train": [[466, 483], ["torch.randperm", "int", "x_t.size", "x_t.size"], "function", ["None"], ["", "def", "make_valid_from_train", "(", "dataset", ",", "cut", "=", "0.9", ")", ":", "\n", "    ", "tr_ds", ",", "val_ds", "=", "[", "]", ",", "[", "]", "\n", "for", "task_ds", "in", "dataset", ":", "\n", "        ", "x_t", ",", "y_t", "=", "task_ds", "\n", "\n", "# first we shuffle", "\n", "perm", "=", "torch", ".", "randperm", "(", "x_t", ".", "size", "(", "0", ")", ")", "\n", "x_t", ",", "y_t", "=", "x_t", "[", "perm", "]", ",", "y_t", "[", "perm", "]", "\n", "\n", "split", "=", "int", "(", "x_t", ".", "size", "(", "0", ")", "*", "cut", ")", "\n", "x_tr", ",", "y_tr", "=", "x_t", "[", ":", "split", "]", ",", "y_t", "[", ":", "split", "]", "\n", "x_val", ",", "y_val", "=", "x_t", "[", "split", ":", "]", ",", "y_t", "[", "split", ":", "]", "\n", "\n", "tr_ds", "+=", "[", "(", "x_tr", ",", "y_tr", ")", "]", "\n", "val_ds", "+=", "[", "(", "x_val", ",", "y_val", ")", "]", "\n", "\n", "", "return", "tr_ds", ",", "val_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.__init__": [[84, 86], ["utils.RALog.reset"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.reset": [[87, 90], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "storage", "=", "OD", "(", ")", "\n", "self", ".", "count", "=", "OD", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.avg_dict": [[91, 98], ["utils.RALog.storage.keys"], "methods", ["None"], ["", "def", "avg_dict", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "storage", ".", "keys", "(", ")", ":", "\n", "            ", "avg", "=", "self", ".", "storage", "[", "key", "]", "\n", "out", "[", "prefix", "+", "key", "]", "=", "avg", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log": [[99, 114], ["str().lower", "utils.RALog.storage.keys", "value.cpu().data.numpy.cpu().data.numpy.numel", "value.cpu().data.numpy.cpu().data.numpy.item", "value.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "str", "type", "value.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "'tensor'", "in", "str", "(", "type", "(", "value", ")", ")", ".", "lower", "(", ")", ":", "\n", "            ", "if", "value", ".", "numel", "(", ")", "==", "1", ":", "\n", "                ", "value", "=", "value", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "value", "=", "value", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "", "if", "key", "not", "in", "self", ".", "storage", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "count", "[", "key", "]", "=", "1", "\n", "self", ".", "storage", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "prev", "=", "self", ".", "storage", "[", "key", "]", "\n", "cnt", "=", "self", ".", "count", "[", "key", "]", "\n", "self", ".", "storage", "[", "key", "]", "=", "(", "prev", "*", "cnt", "+", "value", ")", "/", "(", "cnt", "+", "1.", ")", "\n", "self", ".", "count", "[", "key", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.to_polar": [[23, 45], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "velo.permute.permute", "velo.permute.permute", "out.permute.permute", "len", "out.permute.permute"], "function", ["None"], ["def", "to_polar", "(", "velo", ")", ":", "\n", "    ", "if", "len", "(", "velo", ".", "shape", ")", "==", "4", ":", "\n", "        ", "velo", "=", "velo", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "\n", "", "if", "velo", ".", "shape", "[", "2", "]", ">", "4", ":", "\n", "        ", "assert", "velo", ".", "shape", "[", "0", "]", "<=", "4", "\n", "velo", "=", "velo", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", "\n", "switch", "=", "True", "\n", "", "else", ":", "\n", "        ", "switch", "=", "False", "\n", "\n", "# assumes r x n/r x (3,4) velo", "\n", "", "dist", "=", "torch", ".", "sqrt", "(", "velo", "[", ":", ",", ":", ",", "0", "]", "**", "2", "+", "velo", "[", ":", ",", ":", ",", "1", "]", "**", "2", ")", "\n", "out", "=", "torch", ".", "stack", "(", "[", "dist", ",", "velo", "[", ":", ",", ":", ",", "2", "]", "]", ",", "dim", "=", "2", ")", "\n", "\n", "if", "switch", ":", "\n", "        ", "out", "=", "out", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", "\n", "\n", "", "if", "len", "(", "velo", ".", "shape", ")", "==", "4", ":", "\n", "        ", "out", "=", "out", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.from_polar": [[47, 64], ["numpy.linspace", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "int", "velo.size", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "torch.Tensor().cuda().unsqueeze().unsqueeze", "velo.size", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda().unsqueeze", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "from_polar", "(", "velo", ")", ":", "\n", "\n", "    ", "assert", "velo", ".", "ndim", "==", "4", ",", "'expects BS x C x H x W tensor'", "\n", "assert", "int", "(", "velo", ".", "size", "(", "1", ")", ")", "in", "[", "2", ",", "3", "]", ",", "'second axis must be for channels'", "\n", "\n", "if", "velo", ".", "size", "(", "1", ")", "==", "3", ":", "\n", "# already in xyz", "\n", "        ", "return", "velo", "\n", "\n", "", "angles", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "pi", "*", "2", ",", "velo", ".", "shape", "[", "-", "1", "]", ")", "\n", "dist", ",", "z", "=", "velo", "[", ":", ",", "0", "]", ",", "velo", "[", ":", ",", "1", "]", "\n", "\n", "x", "=", "torch", ".", "Tensor", "(", "np", ".", "cos", "(", "angles", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "*", "dist", "\n", "y", "=", "torch", ".", "Tensor", "(", "np", ".", "sin", "(", "angles", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "*", "dist", "\n", "out", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.get_chamfer": [[66, 75], ["ChamferDistance", "x.reshape().transpose", "ChamferDistance.", "x.reshape", "prepro", "prepro", "x.size", "utils.from_polar", "utils.from_polar"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.from_polar", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.from_polar"], ["", "def", "get_chamfer", "(", ")", ":", "\n", "    ", "from", "chamfer_distance", ".", "chamfer_distance", "import", "ChamferDistance", "\n", "\n", "chamfer_raw", "=", "ChamferDistance", "(", ")", "\n", "prepro", "=", "lambda", "x", ":", "x", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "3", ",", "-", "1", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "\n", "chamfer", "=", "lambda", "x", ",", "y", ":", "chamfer_raw", "(", "prepro", "(", "from_polar", "(", "x", ")", ")", ",", "prepro", "(", "from_polar", "(", "y", ")", ")", ")", "[", ":", "2", "]", "\n", "\n", "return", "chamfer", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.dict_cat": [[119, 137], ["len", "copy.deepcopy", "adict.items", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ref[].size", "value.new().fill_", "value.new"], "function", ["None"], ["", "", "", "def", "dict_cat", "(", "all_dicts", ",", "copy", "=", "False", ",", "discard", "=", "[", "]", ")", ":", "\n", "    ", "assert", "len", "(", "all_dicts", ")", ">", "1", "\n", "ref", "=", "all_dicts", "[", "0", "]", "\n", "if", "copy", ":", "ref", "=", "deepcopy", "(", "ref", ")", "\n", "\n", "for", "adict", "in", "all_dicts", "[", "1", ":", "]", ":", "\n", "        ", "B_", "=", "None", "\n", "for", "key", ",", "value", "in", "adict", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "discard", ":", "\n", "                ", "continue", "\n", "", "if", "B_", "is", "None", ":", "\n", "                ", "B_", "=", "ref", "[", "key", "]", ".", "size", "(", "0", ")", "\n", "", "if", "isinstance", "(", "ref", "[", "key", "]", ",", "int", ")", ":", "\n", "                ", "ref", "[", "key", "]", "=", "value", ".", "new", "(", "B_", ")", ".", "fill_", "(", "ref", "[", "key", "]", ")", "\n", "\n", "", "ref", "[", "key", "]", "=", "torch", ".", "cat", "(", "(", "ref", "[", "key", "]", ",", "value", ")", ")", "\n", "\n", "", "", "return", "ref", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.dict_split": [[139, 156], ["block_dicts.values", "zip", "adict.keys", "value.size"], "function", ["None"], ["", "def", "dict_split", "(", "block_dicts", ",", "suffix", ",", "lens", ")", ":", "\n", "    ", "for", "adict", "in", "[", "x", "for", "x", "in", "block_dicts", ".", "values", "(", ")", "]", ":", "\n", "        ", "for", "key", "in", "[", "x", "for", "x", "in", "adict", ".", "keys", "(", ")", "]", ":", "\n", "            ", "value", "=", "adict", "[", "key", "]", "\n", "\n", "if", "value", ".", "ndim", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "for", "suf", ",", "len_", "in", "zip", "(", "suffix", ",", "lens", ")", ":", "\n", "                ", "new_key", "=", "key", "+", "suf", "\n", "new_val", "=", "value", "[", ":", "len_", "]", "\n", "value", "=", "value", "[", "len_", ":", "]", "\n", "adict", "[", "new_key", "]", "=", "new_val", "\n", "\n", "", "assert", "value", ".", "size", "(", "0", ")", "==", "0", "\n", "\n", "", "", "return", "block_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.load_model": [[167, 196], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "named_params.update", "torch.load.items", "model.load_state_dict", "print", "sum", "model.named_parameters", "name.lower", "copy.deepcopy", "model.named_buffers", "name.lower", "model.dummy.buffer.expand", "name.split", "int", "model.blocks[].buffer.expand", "int", "model.blocks[].quantize.trim", "param.size", "param.size", "name.split"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.expand", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.expand", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.trim"], ["", "def", "load_model", "(", "model", ",", "path", ")", ":", "\n", "# load weights", "\n", "    ", "params", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "named_params", "=", "{", "x", ":", "y", "for", "(", "x", ",", "y", ")", "in", "model", ".", "named_parameters", "(", ")", "}", "\n", "named_params", ".", "update", "(", "{", "x", ":", "y", "for", "(", "x", ",", "y", ")", "in", "model", ".", "named_buffers", "(", ")", "}", ")", "\n", "\n", "for", "name", ",", "param", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "if", "'buffer'", "in", "name", ".", "lower", "(", ")", ":", "\n", "            ", "if", "'dummy'", "in", "name", ".", "lower", "(", ")", ":", "\n", "                ", "model", ".", "dummy", ".", "buffer", ".", "expand", "(", "param", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "parts", "=", "name", ".", "split", "(", "'.'", ")", "\n", "block_id", "=", "int", "(", "parts", "[", "1", "]", ")", "\n", "model", ".", "blocks", "[", "block_id", "]", ".", "buffer", ".", "expand", "(", "param", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "if", "'quantize'", "in", "name", ":", "\n", "# potentially reduce", "\n", "            ", "n_embeds", "=", "param", ".", "shape", "[", "1", "]", "\n", "if", "n_embeds", "!=", "named_params", "[", "name", "]", ".", "shape", "[", "1", "]", ":", "\n", "                ", "block_id", "=", "int", "(", "name", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "model", ".", "blocks", "[", "block_id", "]", ".", "quantize", ".", "trim", "(", "n_embeds", "=", "n_embeds", ")", "\n", "\n", "", "", "", "if", "sum", "(", "'ema_decoder'", "in", "x", "for", "x", "in", "named_params", ")", ">", "0", ":", "\n", "        ", "for", "block", "in", "model", ".", "blocks", ":", "\n", "            ", "block", ".", "ema_decoder", "=", "deepcopy", "(", "block", ".", "decoder", ")", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "params", ")", "\n", "print", "(", "'successfully loaded model'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.set_seed": [[201, 206], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.args.get_global_args": [[8, 84], ["argparse.ArgumentParser", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add"], ["def", "get_global_args", "(", ")", ":", "\n", "    ", "\"\"\" Regular (not layer specific) arguments \"\"\"", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Vector Quantization'", ")", "\n", "add", "=", "parser", ".", "add_argument", "\n", "\n", "# Data and training settings", "\n", "add", "(", "'--data_folder'", ",", "type", "=", "str", ",", "default", "=", "\"../cl-pytorch/data\"", ",", "\n", "help", "=", "'Location of data (will download data if does not exist)'", ")", "\n", "add", "(", "'--run_dir'", ",", "type", "=", "str", ",", "default", "=", "'runs'", ",", "\n", "help", "=", "'base directory in which all experiment logs will be held'", ")", "\n", "add", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'split_cifar10'", ",", "\n", "choices", "=", "[", "'split_cifar10'", ",", "'split_cifar100'", ",", "'miniimagenet'", ",", "\n", "'processed_kitti'", "]", ",", "\n", "help", "=", "'Dataset name'", ")", "\n", "add", "(", "'--data_size'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "(", "3", ",", "128", ",", "128", ")", ",", "\n", "help", "=", "'height / width of the input. Note that only Imagenet'", "+", "\n", "' supports the use of this flag'", ")", "\n", "add", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'batch size of the incoming data stream'", ")", "\n", "add", "(", "'--buffer_batch_size'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'batch size used for rehearsal. Setting it to `-1` will make'", "+", "\n", "'buffer_batch_size equal to batch_size'", ")", "\n", "add", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of epochs per task. Use 1 for online learning'", ")", "\n", "add", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda'", ")", "\n", "add", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'test'", ")", "\n", "\n", "\n", "# CL specific", "\n", "add", "(", "'--max_task'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'maximum amount of tasks. Use `-1` for no maximum'", ")", "\n", "add", "(", "'--override_cl_defaults'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use this flag if you want to change the number of classes '", "+", "\n", "'pert task, or whether to run single-headed or multi-headed'", ")", "\n", "add", "(", "'--n_classes_per_task'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'number of classes per task. Will only be used if '", "+", "\n", "'`--override_cl_defaults`'", ")", "\n", "add", "(", "'--multiple_heads'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Use `1` for multi-head experiments and `0` for single head. '", "+", "\n", "'Will only be used if `--override_cl_defaults`'", ")", "\n", "\n", "\n", "# Misc", "\n", "add", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "521", ")", "\n", "add", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "\n", "# From old repo", "\n", "add", "(", "'--n_iters'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of iterations to perform on incoming data'", ")", "\n", "add", "(", "'--samples_per_task'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'number of samples per CL task. Use `-1` for all samples'", ")", "\n", "add", "(", "'--rehearsal'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'whether to rehearse on previous data samples from the buffer'", ")", "\n", "add", "(", "'--mem_size'", ",", "type", "=", "int", ",", "default", "=", "600", ",", "\n", "help", "=", "'size of memory allowed. Measured in number of real examples '", "+", "\n", "'stored. If mem_size == 500, then 500 * np.prod(data_size) floats '", "+", "\n", "'will be the size of the memory'", ")", "\n", "add", "(", "'--n_classes'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'number of classes in dataset'", ")", "\n", "add", "(", "'--n_runs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of runs for a specific configuration'", ")", "\n", "\n", "# classifier args", "\n", "add", "(", "'--cls_lr'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "\n", "help", "=", "'learning rate for the classifier'", ")", "\n", "add", "(", "'--cls_n_iters'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of iterations on the incoming data for the classifier'", ")", "\n", "\n", "add", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'config/cifar_20.yaml'", ")", "\n", "add", "(", "'--gen_weights'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "add", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'offline'", ",", "choices", "=", "[", "'online'", ",", "'offline'", "]", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.args.get_args": [[86, 88], ["args.get_global_args"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.args.get_global_args"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "return", "get_global_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.lidar.lidar_main.img_compress": [[32, 65], ["torch.no_grad", "block_outs.keys", "Mean", "block_outs.keys", "torch.stack", "BytesIO", "Image.fromarray", "Image.fromarray.save", "logs.keys", "argmin.unique", "argmin_.clone", "range", "torch.stack.permute().cpu().data.numpy().squeeze().astype", "BytesIO.getbuffer", "argmin.unique.size", "torch.stack.permute().cpu().data.numpy().squeeze", "torch.stack.permute().cpu().data.numpy", "torch.stack.permute().cpu", "torch.stack.permute"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "img_compress", "(", "block_outs", ",", "data", ",", "ext", "=", "'PNG'", ")", ":", "\n", "    ", "from", "io", "import", "BytesIO", "\n", "from", "PIL", "import", "Image", "\n", "\n", "logs", "=", "{", "i", ":", "[", "]", "for", "i", "in", "block_outs", ".", "keys", "(", ")", "}", "\n", "\n", "for", "block_id", "in", "block_outs", ".", "keys", "(", ")", ":", "\n", "        ", "argmins", "=", "block_outs", "[", "block_id", "]", "[", "'argmin'", "]", "\n", "\n", "for", "argmin", "in", "argmins", ":", "\n", "\n", "            ", "new_argmin", "=", "[", "]", "\n", "for", "argmin_", "in", "argmin", ":", "\n", "                ", "used", "=", "argmin", ".", "unique", "(", ")", "\n", "\n", "cp", "=", "argmin_", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "used", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "argmin_", "[", "cp", "==", "used", "[", "i", "]", "]", "=", "i", "\n", "\n", "", "new_argmin", "+=", "[", "argmin_", "]", "\n", "\n", "", "new_argmin", "=", "torch", ".", "stack", "(", "new_argmin", ")", "\n", "\n", "buffer", "=", "BytesIO", "(", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "new_argmin", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "astype", "(", "'uint8'", ")", ")", "\n", "im", ".", "save", "(", "buffer", ",", "ext", ")", "\n", "n_bytes", "=", "buffer", ".", "getbuffer", "(", ")", ".", "nbytes", "\n", "\n", "logs", "[", "block_id", "]", "+=", "[", "n_bytes", "]", "\n", "\n", "\n", "", "", "return", "{", "i", ":", "Mean", "(", "logs", "[", "i", "]", ")", "for", "i", "in", "logs", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.lidar.lidar_main.check_comp": [[67, 87], ["torch.no_grad", "[].view", "torch.cuda.LongTensor().fill_", "torch.cuda.FloatTensor().fill_", "block_outs.keys", "chamfer", "torch.cuda.LongTensor", "torch.cuda.FloatTensor", "data_raw.reshape().abs().max", "data_raw.size", "torch.cuda.LongTensor().fill_.size", "data_raw.reshape().abs", "dist_a.mean", "dist_b.mean", "data_raw.reshape", "data_raw.size"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "check_comp", "(", "block_outs", ",", "data_raw", ",", "loader", ",", "th", "=", "0.15", ")", ":", "\n", "\n", "# normalize point cloud", "\n", "    ", "max_", "=", "data_raw", ".", "reshape", "(", "data_raw", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "data", "=", "data_raw", "/", "max_", "\n", "\n", "comp", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "data_raw", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "0", ")", "\n", "err", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "comp", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "block_id", "in", "block_outs", ".", "keys", "(", ")", ":", "\n", "        ", "block_out", "=", "block_outs", "[", "block_id", "]", "\n", "\n", "dist_a", ",", "dist_b", "=", "chamfer", "(", "data_raw", ",", "block_out", "[", "'x_final'", "]", "*", "max_", ")", "\n", "snnrmse", "=", "(", ".5", "*", "dist_a", ".", "mean", "(", "-", "1", ")", "+", ".5", "*", "dist_b", ".", "mean", "(", "-", "1", ")", ")", ".", "sqrt", "(", ")", "\n", "\n", "comp", "[", "snnrmse", "<", "th", "]", "=", "block_id", "\n", "err", "[", "snnrmse", "<", "th", "]", "=", "snnrmse", "[", "snnrmse", "<", "th", "]", "\n", "\n", "", "return", "comp", ",", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.lidar.lidar_main.main": [[92, 219], ["yaml.load", "range", "type", "utils.utils.dotdict", "open", "wandb.init", "common.modular.QStack", "generator.to.to", "print", "print", "torch.cuda.LongTensor().fill_", "enumerate", "pydoc.locate", "CLDataLoader", "utils.utils.load_model", "sum", "print", "range", "zip", "torch.cuda.LongTensor", "generator.to.train", "generator.to.log", "enumerate", "generator.to.update_ema_decoder", "numpy.prod", "len", "len", "input_x_raw.size", "[].view", "input_x.to.to", "input_y.to.to", "idx_.to.to", "range", "generator.to.update_ema_decoder", "generator.to.track", "torch.stack", "numpy.save", "eval_gen_lidar", "os.makedirs", "os.path.join", "torch.save", "p.size", "generator.to.parameters", "print", "generator.to.", "generator.to.optimize", "generator.to.add_reservoir", "[].split", "open", "torch.stack.cpu().data.numpy", "eval_drift", "generator.to.state_dict", "len", "generator.to.sample", "lidar_main.check_comp", "bid.bincount", "generator.to.log_to_server", "input_x_raw.reshape().abs().max", "input_x_raw.to", "wandb.log", "lidar_main.img_compress", "wandb.log", "wandb.log", "torch.cuda.LongTensor().fill_.size", "utils.utils.dotdict.config.split", "sorted", "torch.stack.cpu", "input_x_raw.reshape().abs", "counts[].item", "block_outs.keys", "sum", "range", "input_x_raw.reshape", "len", "input_x_raw.size", "counts[].item", "img_compress.keys"], "function", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.load_model", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.update_ema_decoder", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.update_ema_decoder", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.track", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_gen_lidar", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.optimize", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.add_reservoir", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.None.eval.eval_drift", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.lidar.lidar_main.check_comp", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.log_to_server", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.lidar.lidar_main.img_compress", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "suffix", "=", "{", "'online'", ":", "'online'", ",", "'offline'", ":", "'prepro'", "}", "\n", "\n", "if", "type", "(", "args", ")", "==", "dict", ":", "args", "=", "dotdict", "(", "args", ")", "\n", "\n", "mode", "=", "args", ".", "mode", "\n", "config", "=", "yaml", ".", "load", "(", "open", "(", "args", ".", "config", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "for", "run", "in", "range", "(", "args", ".", "n_runs", ")", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "'aqm_lidar_%s'", "%", "suffix", "[", "mode", "]", ",", "name", "=", "args", ".", "name", ",", "config", "=", "{", "'yaml'", ":", "config", ",", "'params'", ":", "args", "}", ",", "reinit", "=", "True", ")", "\n", "\n", "# fetch data", "\n", "data", "=", "locate", "(", "'utils.data.get_%s'", "%", "args", ".", "dataset", ")", "(", "args", ",", "mode", "=", "mode", ")", "\n", "\n", "# make dataloaders", "\n", "train_loader", ",", "valid_loader", ",", "test_loader", "=", "[", "\n", "CLDataLoader", "(", "elem", ",", "args", ",", "train", "=", "t", ",", "shuffle", "=", "(", "mode", "==", "'offline'", ")", ")", "for", "elem", ",", "t", "in", "zip", "(", "data", ",", "[", "True", ",", "False", ",", "False", "]", ")", "\n", "]", "\n", "\n", "# fetch model and ship to GPU", "\n", "generator", "=", "QStack", "(", "**", "config", ")", "\n", "\n", "if", "mode", "==", "'online'", ":", "\n", "            ", "load_model", "(", "generator", ",", "config", "[", "'gen_weights'", "]", ")", "\n", "\n", "", "generator", "=", "generator", ".", "to", "(", "args", ".", "device", ")", "\n", "print", "(", "generator", ")", "\n", "\n", "print", "(", "\"number of generator  parameters:\"", ",", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "generator", ".", "parameters", "(", ")", "]", ")", ")", "\n", "\n", "step", "=", "0", "\n", "\n", "counts", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "len", "(", "generator", ".", "all_blocks", ")", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "task", ",", "tr_loader", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "print", "(", "'dataset has %d examples'", "%", "len", "(", "tr_loader", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "num_epochs", ")", ":", "\n", "                ", "generator", ".", "train", "(", ")", "\n", "generator", ".", "log", "(", "'epoch'", ",", "epoch", ")", "\n", "sample_amt", "=", "0", "\n", "\n", "for", "i", ",", "(", "input_x_raw", ",", "input_y", ",", "idx_", ")", "in", "enumerate", "(", "tr_loader", ")", ":", "\n", "                    ", "if", "i", "%", "5", "==", "0", ":", "print", "(", "'  '", ",", "i", ",", "' / '", ",", "len", "(", "tr_loader", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "if", "sample_amt", ">", "args", ".", "samples_per_task", ">", "0", ":", "break", "\n", "sample_amt", "+=", "input_x_raw", ".", "size", "(", "0", ")", "\n", "\n", "# normalize point cloud", "\n", "max_", "=", "input_x_raw", ".", "reshape", "(", "input_x_raw", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "input_x", "=", "input_x_raw", "/", "max_", "\n", "\n", "input_x", "=", "input_x", ".", "to", "(", "args", ".", "device", ")", "\n", "input_y", "=", "input_y", ".", "to", "(", "args", ".", "device", ")", "\n", "idx_", "=", "idx_", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "for", "n_iter", "in", "range", "(", "args", ".", "n_iters", ")", ":", "\n", "\n", "                        ", "sample_outs", "=", "re_x", "=", "None", "\n", "if", "task", ">", "0", "and", "args", ".", "rehearsal", ":", "\n", "                            ", "re_x", ",", "sample_outs", "=", "generator", ".", "sample", "(", "args", ".", "buffer_batch_size", ",", "exclude_task", "=", "task", ")", "\n", "\n", "# TODO: check if we're sampling the right amount", "\n", "", "out", ",", "block_outs", "=", "generator", "(", "input_x", ",", "x_re", "=", "re_x", ")", "\n", "generator", ".", "optimize", "(", "block_outs", ")", "\n", "\n", "if", "mode", "==", "'online'", "and", "n_iter", "==", "0", ":", "\n", "                            ", "bid", ",", "err", "=", "check_comp", "(", "block_outs", ",", "input_x_raw", ".", "to", "(", "args", ".", "device", ")", ",", "tr_loader", ",", "th", "=", "0.15", ")", "\n", "counts", "+=", "bid", ".", "bincount", "(", "minlength", "=", "counts", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "(", "500", "//", "args", ".", "batch_size", ")", "==", "0", "and", "n_iter", "==", "0", ":", "\n", "\n", "                            ", "if", "mode", "==", "'online'", ":", "\n", "                                ", "wandb", ".", "log", "(", "{", "'bytes sent'", ":", "(", "generator", ".", "mem_per_block", "*", "counts", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "}", ")", "\n", "\n", "byte_count", "=", "img_compress", "(", "block_outs", ",", "input_x_raw", ")", "\n", "wandb", ".", "log", "(", "{", "'png bytes sent'", ":", "\n", "(", "generator", ".", "mem_per_block", "[", "0", "]", "*", "counts", "[", "0", "]", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "\n", "sum", "(", "byte_count", "[", "i", "]", "*", "counts", "[", "i", "]", ".", "item", "(", ")", "for", "i", "in", "byte_count", ".", "keys", "(", ")", ")", ",", "\n", "'bytes sent'", ":", "\n", "(", "generator", ".", "mem_per_block", "*", "counts", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "}", ")", "\n", "wandb", ".", "log", "(", "{", "'count_%d'", "%", "i", ":", "counts", "[", "i", "]", ".", "item", "(", ")", "for", "i", "in", "range", "(", "len", "(", "counts", ")", ")", "}", ")", "\n", "\n", "", "generator", ".", "log_to_server", "(", "wandb", ")", "\n", "\n", "# set the gen. weights used for sampling == current generator weights", "\n", "", "", "generator", ".", "update_ema_decoder", "(", ")", "\n", "generator", ".", "track", "(", ")", "\n", "\n", "if", "args", ".", "rehearsal", ":", "\n", "                        ", "generator", ".", "add_reservoir", "(", "\n", "input_x", ",", "\n", "{", "'y'", ":", "input_y", ",", "'t'", ":", "task", ",", "'bidx'", ":", "idx_", ",", "'step'", ":", "step", "}", ",", "\n", "block_outs", ",", "\n", "sample_x", "=", "re_x", ",", "\n", "sample_add_info", "=", "sample_outs", "\n", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "# Test the model", "\n", "# ------------------------------------------------------------------", "\n", "", "generator", ".", "update_ema_decoder", "(", ")", "\n", "\n", "# save some samples", "\n", "if", "not", "args", ".", "debug", "and", "epoch", ">", "0", ":", "\n", "                    ", "name", "=", "args", ".", "config", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.yaml'", ")", "[", "0", "]", "\n", "xx", "=", "torch", ".", "stack", "(", "[", "input_x", "]", "+", "[", "block_outs", "[", "k", "]", "[", "'x_final'", "]", "for", "k", "in", "sorted", "(", "block_outs", ".", "keys", "(", ")", ")", "]", ")", "\n", "np", ".", "save", "(", "open", "(", "'lidars/%s'", "%", "name", ",", "'wb'", ")", ",", "xx", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "allow_pickle", "=", "False", ")", "\n", "\n", "", "if", "not", "args", ".", "debug", ":", "\n", "                    ", "eval_gen_lidar", "(", "'valid'", ",", "generator", ",", "valid_loader", ",", "args", ",", "max_task", "=", "task", ",", "epoch", "=", "epoch", ")", "\n", "if", "task", "%", "2", "==", "0", "or", "task", "<", "2", ":", "eval_drift", "(", "generator", ",", "train_loader", ",", "args", ")", "\n", "\n", "", "if", "not", "args", ".", "debug", "and", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "# save model", "\n", "                    ", "try", ":", "name", "=", "args", ".", "name", "\n", "except", ":", "name", "=", "args", ".", "config", "\n", "\n", "os", ".", "makedirs", "(", "'/checkpoint/lucaspc/aqm/'", "+", "name", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "'/checkpoint/lucaspc/aqm/'", ",", "name", ",", "'gen_%d.pth'", "%", "epoch", ")", "\n", "torch", ".", "save", "(", "generator", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.chamfer_distance.chamfer_distance.ChamferDistanceFunction.forward": [[11, 31], ["xyz1.contiguous.contiguous.size", "xyz2.contiguous.contiguous.size", "xyz1.contiguous.contiguous.contiguous", "xyz2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dist1.cuda.cuda.cuda", "dist2.cuda.cuda.cuda", "idx1.cuda.cuda.cuda", "idx2.cuda.cuda.cuda", "cd.forward_cuda"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "batchsize", ",", "n", ",", "_", "=", "xyz1", ".", "size", "(", ")", "\n", "_", ",", "m", ",", "_", "=", "xyz2", ".", "size", "(", ")", "\n", "xyz1", "=", "xyz1", ".", "contiguous", "(", ")", "\n", "xyz2", "=", "xyz2", ".", "contiguous", "(", ")", "\n", "dist1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", "\n", "dist2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", "\n", "\n", "idx1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "idx2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "\n", "dist1", "=", "dist1", ".", "cuda", "(", ")", "\n", "dist2", "=", "dist2", ".", "cuda", "(", ")", "\n", "idx1", "=", "idx1", ".", "cuda", "(", ")", "\n", "idx2", "=", "idx2", ".", "cuda", "(", ")", "\n", "cd", ".", "forward_cuda", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "return", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.chamfer_distance.chamfer_distance.ChamferDistance.forward": [[36, 38], ["ChamferDistanceFunction.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "return", "ChamferDistanceFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResBlock.__init__": [[14, 22], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__"], ["def", "__init__", "(", "self", ",", "in_channel", ",", "channel", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "in_channel", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResBlock.forward": [[24, 29], ["model.ResBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "+=", "x", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.Encoder.__init__": [[34, 65], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "model.ResBlock", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__"], ["def", "__init__", "(", "self", ",", "in_channel", ",", "channel", ",", "downsample", ",", "n_res_blocks", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# assumptions", "\n", "ks", "=", "4", "\n", "embed_dim", "=", "channel", "\n", "num_residual_hiddens", "=", "channel", "\n", "\n", "assert", "downsample", "in", "(", "2", ",", "4", ")", "\n", "\n", "if", "downsample", "==", "4", ":", "\n", "            ", "blocks", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", ",", "ks", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", ",", "ks", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "elif", "downsample", "==", "2", ":", "\n", "            ", "blocks", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "channel", "//", "2", ",", "ks", ",", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "2", ",", "channel", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_res_blocks", ")", ":", "\n", "            ", "blocks", "+=", "[", "ResBlock", "(", "channel", ",", "num_residual_hiddens", ")", "]", "\n", "\n", "", "blocks", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.Encoder.forward": [[66, 68], ["model.Encoder.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "blocks", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.Decoder.__init__": [[73, 103], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.ReLU", "model.ResBlock", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__"], ["def", "__init__", "(", "self", ",", "channel", ",", "out_channel", ",", "upsample", ",", "n_res_blocks", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# assumptions", "\n", "ks", "=", "4", "\n", "in_channel", "=", "channel", "\n", "num_residual_hiddens", "=", "channel", "\n", "\n", "assert", "upsample", "in", "(", "2", ",", "4", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_res_blocks", ")", ":", "\n", "            ", "blocks", "+=", "[", "ResBlock", "(", "channel", ",", "num_residual_hiddens", ")", "]", "\n", "\n", "", "blocks", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "if", "upsample", "==", "4", ":", "\n", "            ", "blocks", "+=", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "channel", ",", "channel", ",", "ks", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "channel", ",", "out_channel", ",", "ks", ",", "2", ",", "1", ")", ",", "\n", "]", "\n", "\n", "", "elif", "upsample", "==", "2", ":", "\n", "            ", "blocks", "+=", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "channel", ",", "out_channel", ",", "ks", ",", "2", ",", "1", ")", "\n", "]", "\n", "\n", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.Decoder.forward": [[105, 107], ["model.Decoder.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "blocks", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.BasicBlock.__init__": [[124, 137], ["torch.nn.Module.__init__", "model.conv3x3", "torch.nn.BatchNorm2d", "model.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.conv3x3", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.conv3x3"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.BasicBlock.forward": [[139, 145], ["torch.nn.functional.relu", "model.BasicBlock.bn2", "model.BasicBlock.shortcut", "torch.nn.functional.relu", "model.BasicBlock.bn1", "model.BasicBlock.conv2", "model.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet.__init__": [[149, 172], ["torch.nn.Module.__init__", "model.conv3x3", "torch.nn.BatchNorm2d", "model.ResNet._make_layer", "model.ResNet._make_layer", "model.ResNet._make_layer", "model.ResNet._make_layer", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.conv3x3", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet._make_layer", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet._make_layer", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet._make_layer", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", ",", "nf", ",", "input_size", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "nf", "\n", "self", ".", "input_size", "=", "input_size", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "input_size", "[", "0", "]", ",", "nf", "*", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nf", "*", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "1", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "2", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "4", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "nf", "*", "8", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "last_hid", "=", "nf", "*", "8", "*", "block", ".", "expansion", "\n", "\n", "# 128 x 128 mini-imagenet", "\n", "if", "input_size", "[", "-", "1", "]", "==", "128", ":", "\n", "            ", "last_hid", "=", "2560", "\n", "\n", "# 84 x 84 mini-imagenet", "\n", "", "elif", "input_size", "[", "-", "1", "]", "==", "84", ":", "\n", "            ", "last_hid", "=", "320", "\n", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "last_hid", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet._make_layer": [[173, 180], ["torch.nn.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet.return_hidden": [[181, 191], ["x.size", "torch.nn.functional.relu", "model.ResNet.layer1", "model.ResNet.layer2", "model.ResNet.layer3", "model.ResNet.layer4", "torch.nn.functional.avg_pool2d", "out.view.view.view", "model.ResNet.bn1", "out.view.view.size", "model.ResNet.conv1", "x.view"], "methods", ["None"], ["", "def", "return_hidden", "(", "self", ",", "x", ")", ":", "\n", "        ", "bsz", "=", "x", ".", "size", "(", "0", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ".", "view", "(", "bsz", ",", "*", "self", ".", "input_size", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet.forward": [[192, 196], ["model.ResNet.return_hidden", "model.ResNet.linear"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet.return_hidden"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "return_hidden", "(", "x", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.conv3x3": [[116, 119], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.model.ResNet18": [[197, 199], ["model.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "nclasses", ",", "nf", "=", "20", ",", "input_size", "=", "(", "3", ",", "32", ",", "32", ")", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "nclasses", ",", "nf", ",", "input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.__init__": [[24, 74], ["torch.nn.Module.__init__", "RALog", "common.quantize.Quantize", "Buffer", "print", "sum", "common.model.Encoder", "common.model.Decoder", "Buffer", "np.prod", "np.log2", "torch.optim.Adam", "kwargs.get", "np.log2", "np.prod", "modular.QLayer.parameters", "torch.optim.SGD", "np.prod", "np.prod", "p.size", "modular.QLayer.parameters", "np.prod", "modular.QLayer.encoder.parameters"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "in_channel", ",", "channel", ",", "argmin_shp", ",", "data_shp", ",", "n_classes", ",", "n_res_blocks", "=", "1", ",", "downsample", "=", "2", ",", "\n", "n_embeds", "=", "128", ",", "n_codebooks", "=", "1", ",", "lr", "=", "1e-3", ",", "decay", "=", "0.6", ",", "dummy", "=", "False", ",", "opt", "=", "'greedy'", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "avg_comp", "=", "0.", "\n", "self", ".", "avg_l2", "=", "0.", "\n", "self", ".", "logger", "=", "RALog", "(", ")", "\n", "self", ".", "log", "=", "self", ".", "logger", ".", "log", "\n", "self", ".", "opt", "=", "None", "\n", "\n", "if", "downsample", ">", "1", "and", "not", "dummy", ":", "\n", "# build networks", "\n", "            ", "self", ".", "encoder", "=", "Encoder", "(", "in_channel", ",", "channel", ",", "downsample", ",", "n_res_blocks", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "channel", ",", "in_channel", ",", "downsample", ",", "n_res_blocks", ")", "\n", "\n", "if", "opt", "==", "'greedy'", ":", "\n", "                ", "self", ".", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "if", "kwargs", ".", "get", "(", "'lidar_mode'", ",", "False", ")", ":", "\n", "                    ", "self", ".", "opt", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "encoder", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "self", ".", "decoder", "=", "self", ".", "ema_decoder", "=", "lambda", "x", ":", "x", "\n", "\n", "", "if", "dummy", ":", "\n", "            ", "self", ".", "buffer", "=", "Buffer", "(", "data_shp", ",", "n_classes", ",", "dtype", "=", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "mem_per_sample", "=", "np", ".", "prod", "(", "data_shp", ")", "\n", "self", ".", "comp_rate", "=", "1", "\n", "return", "\n", "\n", "# build quantization blocks", "\n", "", "D", ",", "K", ",", "N", "=", "channel", ",", "n_embeds", ",", "n_codebooks", "\n", "self", ".", "quantize", "=", "Quantize", "(", "D", "//", "N", ",", "K", ",", "N", ",", "decay", "=", "decay", ")", "\n", "\n", "# whether or not embedding matrix is frozen", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "frozen_qt", "=", "False", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "argmin_shp", "=", "[", "n_codebooks", "]", "+", "argmin_shp", "\n", "self", ".", "buffer", "=", "Buffer", "(", "argmin_shp", ",", "n_classes", ",", "max_idx", "=", "n_embeds", ")", "\n", "self", ".", "mem_per_sample", "=", "self", ".", "buffer", ".", "mem_per_sample", "\n", "\n", "self", ".", "comp_rate", "=", "np", ".", "prod", "(", "data_shp", ")", "/", "np", ".", "prod", "(", "argmin_shp", ")", "*", "np", ".", "log2", "(", "256", ")", "/", "np", ".", "log2", "(", "K", ")", "\n", "print", "(", "'block ({})\\t comp rate : {:.4f}'", ".", "format", "(", "self", ".", "id", ",", "self", ".", "comp_rate", ")", ")", "\n", "\n", "self", ".", "size_in_floats", "=", "sum", "(", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", "\n", "\n", "assert", "-", ".01", "<", "(", "self", ".", "buffer", ".", "mem_per_sample", "-", "np", ".", "prod", "(", "data_shp", ")", "/", "self", ".", "comp_rate", ")", "<", ".01", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.n_samples": [[76, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.n_memory": [[81, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_memory", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "n_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.track": [[86, 93], ["modular.QLayer.logger.log", "modular.QLayer.logger.log", "modular.QLayer.logger.log", "modular.QLayer.logger.log", "modular.QLayer.logger.log", "modular.QLayer.logger.log"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log"], ["", "def", "track", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "log", "(", "'comp_rate'", ",", "self", ".", "comp_rate", ")", "\n", "self", ".", "logger", ".", "log", "(", "'n_samples'", ",", "self", ".", "n_samples", ")", "\n", "self", ".", "logger", ".", "log", "(", "'n_memory'", ",", "self", ".", "n_memory", ")", "\n", "self", ".", "logger", ".", "log", "(", "'avg_comp'", ",", "self", ".", "avg_comp", ")", "\n", "self", ".", "logger", ".", "log", "(", "'avg_l2'", ",", "self", ".", "avg_l2", ")", "\n", "self", ".", "logger", ".", "log", "(", "'frozen'", ",", "self", ".", "frozen_qt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.update_ema_decoder": [[95, 105], ["zip", "modular.QLayer.ema_decoder.parameters", "modular.QLayer.decoder.parameters", "ema_param.data.copy_"], "methods", ["None"], ["", "def", "update_ema_decoder", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "frozen_qt", ":", "\n", "            ", "return", "\n", "\n", "", "decay", "=", ".99", "\n", "try", ":", "\n", "            ", "for", "ema_param", ",", "param", "in", "zip", "(", "self", ".", "ema_decoder", ".", "parameters", "(", ")", ",", "self", ".", "decoder", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "ema_param", ".", "data", ".", "copy_", "(", "decay", "*", "ema_param", ".", "data", "+", "(", "1.", "-", "decay", ")", "*", "param", ".", "data", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.init_ema": [[107, 111], ["copy.deepcopy", "sum", "np.prod", "p.size", "modular.QLayer.ema_decoder.parameters"], "methods", ["None"], ["", "", "def", "init_ema", "(", "self", ")", ":", "\n", "        ", "self", ".", "ema_decoder", "=", "deepcopy", "(", "self", ".", "decoder", ")", "\n", "\n", "self", ".", "size_in_floats", "+=", "sum", "(", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "self", ".", "ema_decoder", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.sample_everything": [[113, 121], ["modular.QLayer.buffer.sample_everything", "torch.LongTensor().fill_().to", "hasattr", "modular.QLayer.quantize.idx_2_hid", "torch.LongTensor().fill_", "torch.LongTensor", "z_q.size"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample_everything", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.idx_2_hid"], ["", "def", "sample_everything", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "argmin", ",", "add_info", "in", "self", ".", "buffer", ".", "sample_everything", "(", ")", ":", "\n", "            ", "z_q", "=", "self", ".", "quantize", ".", "idx_2_hid", "(", "argmin", ")", "if", "hasattr", "(", "self", ",", "'quantize'", ")", "else", "argmin", "\n", "\n", "block_id", "=", "torch", ".", "LongTensor", "(", "z_q", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "self", ".", "id", ")", ".", "to", "(", "z_q", ".", "device", ")", "\n", "add_info", "[", "'bid'", "]", "=", "block_id", "\n", "\n", "yield", "z_q", ",", "add_info", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.sample": [[123, 131], ["modular.QLayer.buffer.sample", "torch.LongTensor().fill_().to", "hasattr", "modular.QLayer.quantize.idx_2_hid", "torch.LongTensor().fill_", "torch.LongTensor", "z_q.size"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.idx_2_hid"], ["", "", "def", "sample", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "argmin", ",", "add_info", "=", "self", ".", "buffer", ".", "sample", "(", "**", "kwargs", ")", "\n", "z_q", "=", "self", ".", "quantize", ".", "idx_2_hid", "(", "argmin", ")", "if", "hasattr", "(", "self", ",", "'quantize'", ")", "else", "argmin", "\n", "\n", "block_id", "=", "torch", ".", "LongTensor", "(", "z_q", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "self", ".", "id", ")", ".", "to", "(", "z_q", ".", "device", ")", "\n", "add_info", "[", "'bid'", "]", "=", "block_id", "\n", "\n", "return", "z_q", ",", "add_info", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.up": [[133, 160], ["modular.QLayer.encoder", "modular.QLayer.quantize", "modular.QLayer.log", "modular.QLayer.log", "modular.QLayer.quantize.trim", "modular.QLayer.buffer.adjust_n_embeds", "modular.QLayer.init_ema", "print", "print", "argmin.unique().size", "np.log2", "np.log2", "argmin.unique"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.quantize", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.trim", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.adjust_n_embeds", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.init_ema"], ["", "def", "up", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Encoding process \"\"\"", "\n", "\n", "# downsample", "\n", "z_e", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "# Used to be 75 --> now 90 --> now 95", "\n", "if", "self", ".", "avg_comp", ">", ".90", "and", "not", "self", ".", "frozen_qt", ":", "\n", "            ", "self", ".", "quantize", ".", "decay", "=", "1.", "\n", "n_embeds", "=", "self", ".", "quantize", ".", "trim", "(", ")", "\n", "self", ".", "buffer", ".", "adjust_n_embeds", "(", "n_embeds", ")", "\n", "self", ".", "frozen_qt", "=", "True", "\n", "self", ".", "init_ema", "(", ")", "\n", "\n", "self", ".", "comp_rate", "*=", "np", ".", "log2", "(", "self", ".", "K", ")", "/", "np", ".", "log2", "(", "n_embeds", ")", "\n", "print", "(", "'fixing Block %d'", "%", "self", ".", "id", ")", "\n", "print", "(", "'new comp rate : {:.4f}'", ".", "format", "(", "self", ".", "comp_rate", ")", ")", "\n", "\n", "# quantize", "\n", "", "z_q", ",", "diff", ",", "argmin", ",", "ppl", "=", "self", ".", "quantize", "(", "z_e", ")", "\n", "\n", "output", "=", "{", "'x'", ":", "x", ",", "'z_e'", ":", "z_e", ",", "'z_q'", ":", "z_q", ",", "'ppl'", ":", "ppl", ",", "'diff'", ":", "diff", ",", "'argmin'", ":", "argmin", "}", "\n", "\n", "self", ".", "log", "(", "'ppl'", ",", "ppl", ")", "\n", "self", ".", "log", "(", "'argmin_unique'", ",", "argmin", ".", "unique", "(", ")", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "z_q", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QLayer.down": [[162, 166], ["modular.QLayer.decoder"], "methods", ["None"], ["", "def", "down", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\" Decoding Process \"\"\"", "\n", "\n", "return", "self", ".", "decoder", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.__init__": [[172, 218], ["torch.nn.Module.__init__", "RALog", "sorted", "modular.QLayer", "torch.nn.ModuleList", "len", "np.prod", "modular.QStack.register_buffer", "torch.optim.Adam", "torch.Tensor", "modular.QLayer", "opt_args.get", "modular.QStack.parameters", "dict"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mem_args", ",", "block_args", ",", "data_args", ",", "opt_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "logger", "=", "RALog", "(", ")", "\n", "self", ".", "log", "=", "self", ".", "logger", ".", "log", "\n", "\n", "assert", "opt_args", "[", "'opt'", "]", "in", "[", "'greedy'", ",", "'global'", "]", "\n", "\n", "\"\"\" assumes args is a nested dictionary, one for every block \"\"\"", "\n", "blocks", "=", "[", "]", "\n", "\n", "# start at once, so 0 == uncompressed", "\n", "i", "=", "1", "\n", "for", "block", "in", "sorted", "(", "block_args", ")", ":", "\n", "            ", "blocks", "+=", "[", "QLayer", "(", "i", ",", "**", "dict", "(", "block_args", "[", "block", "]", ",", "**", "data_args", ",", "**", "opt_args", ")", ")", "]", "\n", "i", "+=", "1", "\n", "\n", "# create a dummy block holding uncompressed data", "\n", "", "self", ".", "dummy", "=", "QLayer", "(", "0", ",", "0", ",", "0", ",", "None", ",", "dummy", "=", "True", ",", "**", "data_args", ")", "\n", "\n", "# only trainable blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "\n", "# all (even placeholder) blocks", "\n", "self", ".", "all_blocks", "=", "[", "self", ".", "dummy", "]", "+", "[", "block", "for", "block", "in", "self", ".", "blocks", "]", "\n", "\n", "# optimization setup", "\n", "self", ".", "opt", "=", "opt_args", "[", "'opt'", "]", "\n", "self", ".", "input", "=", "opt_args", "[", "'input'", "]", "\n", "self", ".", "commit_coef", "=", "opt_args", "[", "'commit_coef'", "]", "\n", "self", ".", "recon_loss", "=", "F", ".", "l1_loss", "if", "opt_args", ".", "get", "(", "'recon_loss'", ",", "''", ")", "==", "'l1'", "else", "F", ".", "mse_loss", "\n", "\n", "if", "self", ".", "opt", "==", "'global'", ":", "\n", "            ", "self", ".", "global_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "opt_args", "[", "'global_lr'", "]", ")", "\n", "\n", "# memory setup", "\n", "", "n_classes", "=", "data_args", "[", "'n_classes'", "]", "\n", "data_shp", "=", "data_args", "[", "'data_shp'", "]", "\n", "\n", "self", ".", "recon_th", "=", "mem_args", "[", "'recon_th'", "]", "\n", "self", ".", "n_blocks", "=", "len", "(", "self", ".", "blocks", ")", "\n", "\n", "self", ".", "data_size", "=", "np", ".", "prod", "(", "data_shp", ")", "\n", "self", ".", "mem_size_", "=", "mem_args", "[", "'mem_size'", "]", "*", "self", ".", "data_size", "*", "n_classes", "# in floats", "\n", "\n", "self", ".", "register_buffer", "(", "'mem_per_block'", ",", "torch", ".", "Tensor", "(", "[", "block", ".", "mem_per_sample", "for", "block", "in", "self", ".", "all_blocks", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.n_samples": [[220, 223], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_samples", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "block", ".", "n_samples", "for", "block", "in", "self", ".", "all_blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.mem_used": [[225, 228], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "mem_used", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "block", ".", "n_memory", "for", "block", "in", "self", ".", "all_blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.mem_size": [[230, 236], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "mem_size", "(", "self", ")", ":", "\n", "        ", "mem_size", "=", "self", ".", "mem_size_", "-", "sum", "(", "block", ".", "size_in_floats", "for", "block", "in", "self", ".", "blocks", ")", "\n", "assert", "mem_size", ">", "0", "\n", "\n", "return", "mem_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.track": [[238, 243], ["modular.QStack.log", "modular.QStack.log", "block.track"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.track"], ["", "def", "track", "(", "self", ")", ":", "\n", "        ", "self", ".", "log", "(", "'n_samples'", ",", "self", ".", "n_samples", ")", "\n", "self", ".", "log", "(", "'mem_used'", ",", "self", ".", "mem_used", "/", "self", ".", "mem_size", ")", "\n", "\n", "for", "block", "in", "self", ".", "blocks", ":", "block", ".", "track", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.log_to_server": [[245, 251], ["wandb.log", "modular.QStack.logger.reset", "modular.QStack.logger.avg_dict", "wandb.log", "block.logger.reset", "block.logger.avg_dict", "str"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.reset", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.avg_dict", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.reset", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.avg_dict"], ["", "def", "log_to_server", "(", "self", ",", "wandb", ")", ":", "\n", "        ", "wandb", ".", "log", "(", "self", ".", "logger", ".", "avg_dict", "(", ")", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "wandb", ".", "log", "(", "block", ".", "logger", ".", "avg_dict", "(", "prefix", "=", "str", "(", "block", ".", "id", ")", ")", ")", "\n", "\n", "self", ".", "logger", ".", "reset", "(", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "block", ".", "logger", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.update_ema_decoder": [[253, 258], ["block.update_ema_decoder"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.update_ema_decoder"], ["", "def", "update_ema_decoder", "(", "self", ")", ":", "\n", "        ", "\"\"\" update the `old decoders` copy for every block \"\"\"", "\n", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "block", ".", "update_ema_decoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.up": [[260, 279], ["enumerate", "block.up", "x.detach.detach.detach"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.up"], ["", "", "def", "up", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Encoding process \"\"\"", "\n", "\n", "block_outs", "=", "{", "}", "\n", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "x", "=", "last_same_size_z", "\n", "if", "self", ".", "opt", "==", "'greedy'", ":", "\n", "                    ", "x", "=", "x", ".", "detach", "(", ")", "\n", "\n", "", "", "x", ",", "block_out", "=", "block", ".", "up", "(", "x", ")", "\n", "block_outs", "[", "block", ".", "id", "]", "=", "block_out", "\n", "\n", "if", "i", "==", "0", "or", "block", ".", "downsample", ">", "1", ":", "\n", "               ", "last_same_size_z", "=", "block_out", "[", "self", ".", "input", "]", "\n", "\n", "", "", "return", "x", ",", "block_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.down": [[281, 308], ["block.down.size", "enumerate", "block.down.view", "enumerate", "reversed", "block.down", "sorted", "block_outs.keys", "block.down.detach", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.down"], ["", "def", "down", "(", "self", ",", "x", ",", "block_outs", ",", "decode_all", "=", "True", ")", ":", "\n", "        ", "\"\"\" Decoding Process \"\"\"", "\n", "\n", "n_og_samples", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "reversed", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "block_out", "=", "block_outs", "[", "block", ".", "id", "]", "\n", "\n", "input", "=", "x", "\n", "if", "i", ">", "0", ":", "\n", "                ", "if", "self", ".", "opt", "==", "'greedy'", ":", "\n", "                    ", "input", "=", "x", ".", "detach", "(", ")", "\n", "\n", "", "if", "decode_all", ":", "\n", "                    ", "input", "=", "torch", ".", "cat", "(", "(", "block_out", "[", "'z_q'", "]", ",", "input", ")", ")", "\n", "\n", "", "", "x", "=", "block", ".", "down", "(", "input", ")", "\n", "block_out", "[", "'x_hat'", "]", "=", "x", "[", ":", "n_og_samples", "]", "\n", "\n", "# (N, B, C, H, W) block_0, block_1, ...", "\n", "", "x", "=", "x", ".", "view", "(", "self", ".", "n_blocks", ",", "n_og_samples", ",", "*", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "# log the final output", "\n", "for", "i", ",", "block_id", "in", "enumerate", "(", "sorted", "(", "block_outs", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "block_outs", "[", "block_id", "]", "[", "'x_final'", "]", "=", "x", "[", "i", "]", "\n", "\n", "", "return", "x", ",", "block_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.forward": [[310, 326], ["modular.QStack.up", "modular.QStack.down", "torch.cat", "dict_split", "x_inc.size", "x_re.size"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.up", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.down", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.dict_split"], ["", "def", "forward", "(", "self", ",", "x_inc", ",", "x_re", "=", "None", ")", ":", "\n", "\n", "        ", "if", "x_re", "is", "None", ":", "\n", "            ", "x", "=", "x_inc", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x_inc", ",", "x_re", ")", ")", "\n", "\n", "", "x", ",", "block_outs", "=", "self", ".", "up", "(", "x", ")", "\n", "x", ",", "block_outs", "=", "self", ".", "down", "(", "x", ",", "block_outs", ")", "\n", "\n", "if", "x_re", "is", "not", "None", ":", "\n", "# split the tensors between incoming and rehearsal", "\n", "            ", "lens", "=", "[", "x_inc", ".", "size", "(", "0", ")", ",", "x_re", ".", "size", "(", "0", ")", "]", "\n", "block_outs", "=", "dict_split", "(", "block_outs", ",", "suffix", "=", "[", "'_inc'", ",", "'_re'", "]", ",", "lens", "=", "lens", ")", "\n", "\n", "", "return", "x", ",", "block_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.optimize": [[328, 372], ["reversed", "modular.QStack.global_opt.zero_grad", "total_loss.backward", "modular.QStack.global_opt.step", "block.opt.zero_grad", "modular.QStack.recon_loss", "block_out[].mean", "block.log", "block.log", "modular.QStack.recon_loss", "block_out[].mean", "block.log", "block.log", "loss.backward", "block.opt.step"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log"], ["", "def", "optimize", "(", "self", ",", "block_outs", ")", ":", "\n", "        ", "\"\"\" Loss calculation \"\"\"", "\n", "\n", "total_loss", "=", "0.", "\n", "\n", "if", "self", ".", "opt", "==", "'global'", ":", "\n", "            ", "self", ".", "global_opt", ".", "zero_grad", "(", ")", "\n", "\n", "", "for", "block", "in", "reversed", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "block_out", "=", "block_outs", "[", "block", ".", "id", "]", "\n", "\n", "if", "self", ".", "opt", "==", "'greedy'", "and", "block", ".", "opt", "is", "not", "None", ":", "\n", "                ", "block", ".", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "", "if", "block", ".", "downsample", ">", "1", ":", "\n", "\n", "                ", "recon", "=", "self", ".", "recon_loss", "(", "block_out", "[", "'x_hat'", "]", ",", "block_out", "[", "'x'", "]", ")", "\n", "diff", "=", "block_out", "[", "'diff'", "]", ".", "mean", "(", ")", "\n", "\n", "block", ".", "log", "(", "'recon'", ",", "recon", ")", "\n", "block", ".", "log", "(", "'diff'", ",", "diff", ")", "\n", "\n", "# rehearse", "\n", "if", "'x_re'", "in", "block_out", ":", "\n", "                    ", "recon_re", "=", "self", ".", "recon_loss", "(", "block_out", "[", "'x_hat_re'", "]", ",", "block_out", "[", "'x_re'", "]", ")", "\n", "diff_re", "=", "block_out", "[", "'diff_re'", "]", ".", "mean", "(", ")", "\n", "\n", "block", ".", "log", "(", "'recon_re'", ",", "recon_re", ")", "\n", "block", ".", "log", "(", "'diff_re'", ",", "diff_re", ")", "\n", "\n", "recon", "+=", "recon_re", "\n", "diff", "+=", "diff_re", "\n", "\n", "", "loss", "=", "recon", "+", "self", ".", "commit_coef", "*", "diff", "\n", "\n", "if", "self", ".", "opt", "==", "'global'", ":", "\n", "                    ", "total_loss", "+=", "loss", "\n", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "block", ".", "opt", ".", "step", "(", ")", "\n", "\n", "", "", "", "if", "self", ".", "opt", "==", "'global'", ":", "\n", "            ", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "global_opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.add_to_buffer": [[374, 427], ["torch.no_grad", "torch.cat.size", "torch.zeros().to().fill_().long", "torch.cat.clone", "torch.BoolTensor().fill_().to", "torch.zeros_like", "reversed", "sample_x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dict_cat", "block.buffer.add", "block.buffer.free", "torch.zeros().to().fill_", "torch.BoolTensor().fill_", "torch.nn.functional.mse_loss", "full_mse.view().mean.view().mean.view().mean", "torch.zeros().to", "torch.BoolTensor", "full_mse.view().mean.view().mean.view", "valid_comp.float().mean", "full_mse.view().mean.view().mean.mean", "torch.cat.size", "torch.zeros", "valid_comp.float"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.dict_cat", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.add", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.free"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "add_to_buffer", "(", "self", ",", "x", ",", "add_info", ",", "block_outs", ",", "sample_x", "=", "None", ",", "sample_add_info", "=", "None", ")", ":", "\n", "\n", "# (B, )    -1 : not in buffer, 0 : uncompressed, 1 : 1st compression ...", "\n", "        ", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# only adding incoming samples", "\n", "sample_buffer_id", "=", "torch", ".", "zeros", "(", "B", ")", ".", "to", "(", "x", ".", "device", ")", ".", "fill_", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "sample_buffer_idx", "=", "sample_buffer_id", ".", "clone", "(", ")", "\n", "already_comp", "=", "torch", ".", "BoolTensor", "(", "B", ")", ".", "fill_", "(", "False", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "if", "sample_add_info", "is", "not", "None", ":", "\n", "            ", "B_re", "=", "sample_x", ".", "size", "(", "0", ")", "\n", "\n", "# assuming all samples are not in buffer", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "sample_x", ")", ")", "\n", "sample_buffer_id", "=", "torch", ".", "cat", "(", "(", "sample_buffer_id", ",", "sample_add_info", "[", "'bid'", "]", ")", ")", "\n", "sample_buffer_idx", "=", "torch", ".", "cat", "(", "(", "sample_buffer_idx", ",", "sample_add_info", "[", "'idx'", "]", ")", ")", "\n", "already_comp", "=", "torch", ".", "cat", "(", "(", "already_comp", ",", "sample_add_info", "[", "'bid'", "]", ">", "0", ")", ")", "\n", "add_info", "=", "dict_cat", "(", "(", "add_info", ",", "sample_add_info", ")", ",", "discard", "=", "[", "'bid'", ",", "'idx'", "]", ")", "\n", "\n", "", "moved", "=", "torch", ".", "zeros_like", "(", "already_comp", ")", "\n", "\n", "# further_compress = (self.mem_used / self.mem_size) > .95", "\n", "# if not further_compress:", "\n", "#     already_comp[sample_buffer_id == 0] = 1", "\n", "\n", "for", "block", "in", "reversed", "(", "self", ".", "all_blocks", ")", ":", "\n", "            ", "if", "block", ".", "id", "==", "0", ":", "\n", "                ", "valid_comp", "=", "(", "sample_buffer_id", "==", "-", "1", ")", "\n", "to_be_added", "=", "tba", "=", "x", "\n", "", "else", ":", "\n", "                ", "out", "=", "block_outs", "[", "block", ".", "id", "]", "\n", "tba", "=", "out", "[", "'argmin'", "]", "\n", "\n", "full_mse", "=", "F", ".", "mse_loss", "(", "x", ",", "out", "[", "'x_final'", "]", ",", "reduction", "=", "'none'", ")", "\n", "full_mse", "=", "full_mse", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "\n", "# update block comp rate", "\n", "valid_comp", "=", "(", "full_mse", "<", "self", ".", "recon_th", ")", "\n", "block", ".", "avg_comp", "=", "0.01", "*", "valid_comp", ".", "float", "(", ")", ".", "mean", "(", ")", "+", "0.99", "*", "block", ".", "avg_comp", "\n", "block", ".", "avg_l2", "=", "0.01", "*", "full_mse", ".", "mean", "(", ")", "+", "0.99", "*", "block", ".", "avg_l2", "\n", "\n", "if", "not", "block", ".", "frozen_qt", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "adding", "=", "valid_comp", "&", "~", "already_comp", "&", "~", "moved", "\n", "block", ".", "buffer", ".", "add", "(", "tba", ",", "add_info", ",", "idx", "=", "adding", ")", "\n", "\n", "removing", "=", "(", "sample_buffer_id", "==", "block", ".", "id", ")", "&", "moved", "\n", "block", ".", "buffer", ".", "free", "(", "idx", "=", "sample_buffer_idx", "[", "removing", "]", ")", "\n", "\n", "moved", "=", "moved", "|", "adding", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack._fetch_y_counts": [[429, 439], ["torch.stack", "buffer.y[].sum", "buffer.y.sum"], "methods", ["None"], ["", "", "def", "_fetch_y_counts", "(", "self", ",", "exclude_task", "=", "None", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "block", "in", "self", ".", "all_blocks", ":", "\n", "            ", "buffer", "=", "block", ".", "buffer", "\n", "if", "exclude_task", "is", "not", "None", ":", "\n", "                ", "out", "+=", "[", "buffer", ".", "y", "[", "buffer", ".", "t", "!=", "exclude_task", "]", ".", "sum", "(", "0", ")", "]", "\n", "", "else", ":", "\n", "                ", "out", "+=", "[", "buffer", ".", "y", ".", "sum", "(", "0", ")", "]", "\n", "\n", "", "", "return", "torch", ".", "stack", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack._balanced_sample": [[441, 449], ["torch.FloatTensor().fill_().to", "torch.multinomial", "torch.multinomial.bincount", "valid_classes.max", "valid_classes.unique().size", "torch.FloatTensor().fill_", "valid_classes.unique", "torch.FloatTensor", "int"], "methods", ["None"], ["", "def", "_balanced_sample", "(", "self", ",", "valid_classes", ",", "num_samples", ")", ":", "\n", "        ", "n_classes", "=", "valid_classes", ".", "max", "(", ")", "+", "1", "\n", "probs", "=", "torch", ".", "FloatTensor", "(", "int", "(", "n_classes", ")", ")", ".", "fill_", "(", "0", ")", ".", "to", "(", "valid_classes", ".", "device", ")", "\n", "probs", "[", "valid_classes", "]", "=", "1", "/", "valid_classes", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "\n", "sample", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "num_samples", ",", "replacement", "=", "True", ")", "\n", "\n", "return", "sample", ".", "bincount", "(", "minlength", "=", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.balance_memory": [[451, 472], ["torch.no_grad", "modular.QStack._fetch_y_counts", "modular.QStack.sum", "modular.QStack.sum", "int", "block.buffer.try_and_remove", "np.ceil"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack._fetch_y_counts", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.try_and_remove"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "balance_memory", "(", "self", ")", ":", "\n", "\n", "        ", "mem_excess", "=", "self", ".", "mem_used", "-", "self", ".", "mem_size", "\n", "\n", "while", "mem_excess", ">", "0", ":", "\n", "# fetch block y dists", "\n", "            ", "y_counts", "=", "self", ".", "_fetch_y_counts", "(", ")", "# (n_blocks + 1, n_classes)", "\n", "class_counts", "=", "y_counts", ".", "sum", "(", "0", ")", "\n", "buff_counts", "=", "y_counts", ".", "sum", "(", "1", ")", "\n", "\n", "for", "block", "in", "self", ".", "all_blocks", ":", "\n", "                ", "if", "mem_excess", "<=", "0", ":", "break", "\n", "\n", "block_removal", "=", "int", "(", "np", ".", "ceil", "(", "mem_excess", "/", "block", ".", "mem_per_sample", ")", ")", "\n", "class_removed", ",", "mem_freed", "=", "block", ".", "buffer", ".", "try_and_remove", "(", "block_removal", ",", "class_counts", ")", "\n", "\n", "mem_excess", "-=", "mem_freed", "\n", "class_counts", "-=", "class_removed", "\n", "\n", "", "mem_excess", "=", "self", ".", "mem_used", "-", "self", ".", "mem_size", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.add_reservoir": [[474, 477], ["modular.QStack.add_to_buffer", "modular.QStack.balance_memory"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.add_to_buffer", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.balance_memory"], ["", "", "def", "add_reservoir", "(", "self", ",", "x", ",", "add_info", ",", "block_outs", ",", "sample_x", "=", "None", ",", "sample_add_info", "=", "None", ")", ":", "\n", "        ", "self", ".", "add_to_buffer", "(", "x", ",", "add_info", ",", "block_outs", ",", "sample_x", "=", "sample_x", ",", "sample_add_info", "=", "sample_add_info", ")", "\n", "self", ".", "balance_memory", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample": [[479, 537], ["torch.no_grad", "modular.QStack._fetch_y_counts", "modular.QStack.sum", "modular.QStack.sum.nonzero().squeeze", "y_counts.sum.nonzero().squeeze.size", "modular.QStack._balanced_sample", "torch.stack", "reversed", "modular.QStack.sum.sum", "y_counts[].sum().float", "block.sample", "block.ema_decoder", "modular.QStack.sum.nonzero", "torch.multinomial().bincount", "torch.zeros_like().long", "range", "torch.cat", "dict_cat", "y_counts[].sum", "block_samples.sum", "torch.multinomial", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack._fetch_y_counts", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack._balanced_sample", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.dict_cat"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "n_samples", ",", "exclude_task", "=", "None", ")", ":", "\n", "\n", "        ", "\"\"\" figure out from which blocks and labels to pull the samples \"\"\"", "\n", "\n", "y_counts", "=", "self", ".", "_fetch_y_counts", "(", "exclude_task", "=", "exclude_task", ")", "# (n_blocks, n_cls)", "\n", "y_count", "=", "y_counts", ".", "sum", "(", "0", ")", "\n", "valid_ys", "=", "y_count", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "n_cls", "=", "valid_ys", ".", "size", "(", "0", ")", "\n", "\n", "# sample number of class instances", "\n", "assert", "y_count", ".", "sum", "(", ")", ">=", "n_samples", "\n", "\n", "# edit: you would like to draw samples according to the empirical seen distribution", "\n", "# this way we would really mimic reservoir sampling.", "\n", "# problem arises early on in new tasks, we we might be short on samples for a task.", "\n", "per_cls_sample", "=", "self", ".", "_balanced_sample", "(", "valid_ys", ",", "n_samples", ")", "\n", "\n", "# TODO: put this back", "\n", "# make sure we have enough from each class", "\n", "# assert (y_count[valid_ys] - per_cls_sample).min() >= 0", "\n", "\n", "# fetch samples prop. to amount in each buffer , shp: (n_blocks, <n_cls)", "\n", "inter_buffer_dist", "=", "y_counts", "[", ":", ",", "valid_ys", "]", "/", "y_counts", "[", ":", ",", "valid_ys", "]", ".", "sum", "(", "0", ")", ".", "float", "(", ")", "\n", "\n", "# TODO: make this better", "\n", "per_buf_cls_sample", "=", "[", "\n", "torch", ".", "multinomial", "(", "inter_buffer_dist", "[", ":", ",", "i", "]", ",", "\n", "num_samples", "=", "per_cls_sample", "[", "i", "]", ",", "\n", "replacement", "=", "True", ")", ".", "bincount", "(", "minlength", "=", "self", ".", "n_blocks", "+", "1", ")", "\n", "if", "per_cls_sample", "[", "i", "]", ">", "0", "else", "torch", ".", "zeros_like", "(", "inter_buffer_dist", "[", ":", ",", "0", "]", ")", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "n_cls", ")", "\n", "]", "\n", "\n", "per_buf_cls_sample", "=", "torch", ".", "stack", "(", "per_buf_cls_sample", ",", "1", ")", "\n", "\n", "\"\"\" get the samples \"\"\"", "\n", "\n", "input", "=", "None", "\n", "for", "block", "in", "reversed", "(", "self", ".", "all_blocks", ")", ":", "\n", "            ", "block_samples", "=", "per_buf_cls_sample", "[", "block", ".", "id", "]", "\n", "\n", "if", "block_samples", ".", "sum", "(", ")", "==", "0", "and", "input", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "z_q", ",", "block_sample", "=", "block", ".", "sample", "(", "y_samples", "=", "block_samples", ")", "\n", "\n", "# first time collecting samples", "\n", "if", "input", "is", "None", ":", "\n", "                ", "input", "=", "z_q", "\n", "add_info", "=", "block_sample", "\n", "", "else", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "(", "z_q", ",", "input", ")", ")", "\n", "add_info", "=", "dict_cat", "(", "(", "block_sample", ",", "add_info", ")", ")", "\n", "\n", "", "input", "=", "block", ".", "ema_decoder", "(", "input", ")", "\n", "\n", "", "return", "input", ",", "add_info", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample_everything": [[539, 548], ["reversed", "block.sample_everything", "block_.ema_decoder"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.QStack.sample_everything"], ["", "def", "sample_everything", "(", "self", ")", ":", "\n", "        ", "for", "block", "in", "reversed", "(", "self", ".", "all_blocks", ")", ":", "\n", "            ", "for", "z_q", ",", "add_info", "in", "block", ".", "sample_everything", "(", ")", ":", "\n", "\n", "                ", "for", "block_", "in", "self", ".", "all_blocks", "[", ":", ":", "-", "1", "]", ":", "\n", "                    ", "if", "block_", ".", "id", ">", "block", ".", "id", ":", "continue", "\n", "z_q", "=", "block_", ".", "ema_decoder", "(", "z_q", ")", "\n", "\n", "", "yield", "z_q", ",", "add_info", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.modular.sho": [[550, 553], ["torchvision.utils.save_image", "PIL.Image.open().show", "PIL.Image.open"], "function", ["None"], ["", "", "", "", "def", "sho", "(", "x", ")", ":", "\n", "    ", "save_image", "(", "x", "*", ".5", "+", ".5", ",", "'tmp.png'", ")", "\n", "Image", ".", "open", "(", "'tmp.png'", ")", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__": [[28, 51], ["torch.nn.Module.__init__", "torch.randn().uniform_", "quantize.Quantize.register_parameter", "quantize.Quantize.register_buffer", "quantize.Quantize.register_buffer", "quantize.Quantize.register_buffer", "torch.randn", "torch.nn.Parameter", "torch.zeros", "torch.randn().uniform_.clone"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "num_embeddings", ",", "num_codebooks", "=", "1", ",", "size", "=", "1", ",", "embed_grad_update", "=", "False", ",", "\n", "decay", "=", "0.99", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "i", "=", "0", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "count", "=", "1", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "egu", "=", "embed_grad_update", "\n", "self", ".", "update_unused", "=", "False", "\n", "self", ".", "num_codebooks", "=", "num_codebooks", "\n", "self", ".", "num_embeddings", "=", "num_embeddings", "\n", "\n", "R", "=", "1.", "/", "num_embeddings", "\n", "embed", "=", "torch", ".", "randn", "(", "num_codebooks", ",", "num_embeddings", ",", "dim", ")", ".", "uniform_", "(", "-", "R", ",", "R", ")", "\n", "\n", "if", "self", ".", "egu", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'embed'", ",", "nn", ".", "Parameter", "(", "embed", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'embed'", ",", "embed", ")", "\n", "self", ".", "register_buffer", "(", "'ema_count'", ",", "torch", ".", "zeros", "(", "num_codebooks", ",", "num_embeddings", ")", ")", "\n", "self", ".", "register_buffer", "(", "'ema_weight'", ",", "embed", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.forward": [[53, 141], ["x.view().permute.view().permute.size", "quantize.Quantize.embed.size", "pdb.set_trace", "x.view().permute.view().permute.view().permute", "x.view().permute.view().permute.detach().reshape", "torch.baddbmm", "torch.argmin", "torch.argmin.view().transpose", "torch.nn.functional.one_hot().float", "torch.gather", "quantized.permute().reshape.permute().reshape.view_as", "torch.mean", "torch.exp", "quantized.permute().reshape.permute().reshape.permute().reshape", "diff.permute().reshape.permute().reshape.permute().reshape", "quantize.Quantize.embed.transpose", "torch.argmin.max", "pdb.set_trace", "torch.argmin.unsqueeze().expand", "torch.sum", "torch.bmm", "x.view().permute.view().permute.view", "x.view().permute.view().permute.detach", "torch.sum().unsqueeze", "torch.sum", "torch.argmin.view", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot().float.transpose", "quantize.Quantize.ema_count.unsqueeze", "quantize.Quantize.ema_weight.view", "quantize.Quantize.view_as", "quantize.Quantize.ema_count.mean", "torch.sum", "quantized.permute().reshape.permute().reshape.permute", "diff.permute().reshape.permute().reshape.permute", "torch.argmin.unsqueeze", "torch.sum", "quantized.permute().reshape.permute().reshape.detach", "torch.sum", "torch.log", "torch.arange", "unused.size", "x.view().permute.view().permute.detach"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.expand", "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.utils.RALog.log"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Perform quantization op.\n\n        Args:\n            x (T)              : shape [B, C, H, W], where C = embeddings_dim\n        Returns:\n            quantize (T)       : shape [B, H, W, C], where C = embeddings_dim\n            diff (float)       : commitment loss\n            embed_ind          : codebook indices used in the quantization.\n                                 this is what gets stored in the buffer\n            perplexity (float) : codebook perplexity\n        \"\"\"", "\n", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "N", ",", "K", ",", "D", "=", "self", ".", "embed", ".", "size", "(", ")", "\n", "\n", "import", "pdb", "\n", "assert", "C", "==", "N", "*", "D", ",", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# B,N,D,H,W --> N, B, H, W, D", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "N", ",", "D", ",", "H", ",", "W", ")", ".", "permute", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", "\n", "\n", "# N, B, H, W, D --> N, BHW, D", "\n", "x_flat", "=", "x", ".", "detach", "(", ")", ".", "reshape", "(", "N", ",", "-", "1", ",", "D", ")", "\n", "\n", "distances", "=", "torch", ".", "baddbmm", "(", "torch", ".", "sum", "(", "self", ".", "embed", "**", "2", ",", "dim", "=", "2", ")", ".", "unsqueeze", "(", "1", ")", "+", "\n", "torch", ".", "sum", "(", "x_flat", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ",", "\n", "x_flat", ",", "self", ".", "embed", ".", "transpose", "(", "1", ",", "2", ")", ",", "\n", "alpha", "=", "-", "2.0", ",", "beta", "=", "1.0", ")", "\n", "\n", "indices", "=", "torch", ".", "argmin", "(", "distances", ",", "dim", "=", "-", "1", ")", "\n", "embed_ind", "=", "indices", ".", "view", "(", "N", ",", "B", ",", "H", ",", "W", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "if", "indices", ".", "max", "(", ")", ">=", "K", ":", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "encodings", "=", "F", ".", "one_hot", "(", "indices", ",", "K", ")", ".", "float", "(", ")", "\n", "quantized", "=", "torch", ".", "gather", "(", "self", ".", "embed", ",", "1", ",", "indices", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "D", ")", ")", "\n", "quantized", "=", "quantized", ".", "view_as", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", "and", "not", "self", ".", "egu", ":", "\n", "            ", "self", ".", "i", "+=", "1", "\n", "\n", "# EMA codebook update", "\n", "self", ".", "ema_count", "=", "self", ".", "decay", "*", "self", ".", "ema_count", "+", "(", "1", "-", "self", ".", "decay", ")", "*", "torch", ".", "sum", "(", "encodings", ",", "dim", "=", "1", ")", "\n", "\n", "n", "=", "torch", ".", "sum", "(", "self", ".", "ema_count", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "ema_count", "=", "(", "self", ".", "ema_count", "+", "self", ".", "eps", ")", "/", "(", "n", "+", "K", "*", "self", ".", "eps", ")", "*", "n", "\n", "\n", "dw", "=", "torch", ".", "bmm", "(", "encodings", ".", "transpose", "(", "1", ",", "2", ")", ",", "x_flat", ")", "\n", "self", ".", "ema_weight", "=", "self", ".", "decay", "*", "self", ".", "ema_weight", "+", "(", "1", "-", "self", ".", "decay", ")", "*", "dw", "\n", "\n", "self", ".", "embed", "=", "self", ".", "ema_weight", "/", "self", ".", "ema_count", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "i", ">", "10", "and", "self", ".", "update_unused", ":", "\n", "                ", "unused", "=", "(", "self", ".", "ema_count", "<", "1", ")", ".", "nonzero", "(", ")", "\n", "\n", "# reset unused vectors to random ones from the encoder batch", "\n", "unused_flat", "=", "unused", "[", ":", ",", "0", "]", "*", "K", "+", "unused", "[", ":", ",", "1", "]", "\n", "\n", "# get encodings", "\n", "enc_out", "=", "x_flat", "[", "unused", "[", ":", ",", "0", "]", ",", "torch", ".", "arange", "(", "unused", ".", "size", "(", "0", ")", ")", "]", "\n", "\n", "ema_weight", "=", "self", ".", "ema_weight", ".", "view", "(", "-", "1", ",", "D", ")", "\n", "ema_weight", "[", "unused_flat", "]", "=", "enc_out", "\n", "\n", "self", ".", "ema_weight", "=", "ema_weight", ".", "view_as", "(", "self", ".", "ema_weight", ")", "\n", "self", ".", "ema_count", "[", "unused", "[", ":", ",", "0", "]", ",", "unused", "[", ":", ",", "1", "]", "]", "=", "self", ".", "ema_count", ".", "mean", "(", ")", "\n", "\n", "\n", "", "", "diff", "=", "(", "quantized", ".", "detach", "(", ")", "-", "x", ")", ".", "pow", "(", "2", ")", "# .mean()", "\n", "\n", "if", "self", ".", "egu", ":", "\n", "# add vector quantization loss", "\n", "            ", "diff", "+=", "(", "quantized", "-", "x", ".", "detach", "(", ")", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "", "quantized", "=", "x", "+", "(", "quantized", "-", "x", ")", ".", "detach", "(", ")", "\n", "\n", "avg_probs", "=", "torch", ".", "mean", "(", "encodings", ",", "dim", "=", "1", ")", "\n", "perplexity", "=", "torch", ".", "exp", "(", "-", "torch", ".", "sum", "(", "avg_probs", "*", "torch", ".", "log", "(", "avg_probs", "+", "1e-10", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "quantized", "=", "quantized", ".", "permute", "(", "1", ",", "0", ",", "4", ",", "2", ",", "3", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "diff", "=", "diff", ".", "permute", "(", "1", ",", "0", ",", "4", ",", "2", ",", "3", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "# remove this after", "\n", "embed_ind", "=", "embed_ind", "\n", "\n", "return", "quantized", ",", "diff", ",", "embed_ind", ",", "perplexity", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.embed_code": [[143, 160], ["quantize.Quantize.embed.size", "embed_ind.transpose.transpose.size", "embed_ind.transpose.transpose.transpose", "embed_ind.transpose.transpose.reshape", "torch.gather", "quantized.permute().reshape.permute().reshape.view", "quantized.permute().reshape.permute().reshape.permute().reshape", "embed_ind.transpose.reshape.unsqueeze().expand", "quantized.permute().reshape.permute().reshape.permute", "embed_ind.transpose.reshape.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.utils.buffer.Buffer.expand"], ["", "def", "embed_code", "(", "self", ",", "embed_ind", ")", ":", "\n", "        ", "\"\"\" fetch elements in the codebook \"\"\"", "\n", "\n", "# do as in the code", "\n", "\n", "D", "=", "self", ".", "embed", ".", "size", "(", "-", "1", ")", "\n", "# B, N, H, W --> N, B, H, W", "\n", "B", ",", "N", ",", "H", ",", "W", "=", "embed_ind", ".", "size", "(", ")", "\n", "embed_ind", "=", "embed_ind", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# N, B, H, W --> N, BHW", "\n", "flatten", "=", "embed_ind", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "quantized", "=", "torch", ".", "gather", "(", "self", ".", "embed", ",", "1", ",", "flatten", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "D", ")", ")", "\n", "quantized", "=", "quantized", ".", "view", "(", "N", ",", "B", ",", "H", ",", "W", ",", "D", ")", "\n", "quantized", "=", "quantized", ".", "permute", "(", "1", ",", "0", ",", "4", ",", "2", ",", "3", ")", ".", "reshape", "(", "B", ",", "N", "*", "D", ",", "H", ",", "W", ")", "\n", "\n", "return", "quantized", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.trim": [[162, 180], ["quantize.Quantize.embed.size", "[].reshape", "[].reshape", "[].reshape", "torch.arange().view().to", "torch.log2().ceil().int().item", "quantize.Quantize.ema_count.sort", "torch.arange().view", "quantize.Quantize.embed.reshape", "quantize.Quantize.ema_count.reshape", "quantize.Quantize.ema_weight.reshape", "torch.log2().ceil().int", "torch.arange", "torch.log2().ceil", "torch.log2", "keep.sum().max().float", "keep.sum().max", "keep.sum"], "methods", ["None"], ["", "def", "trim", "(", "self", ",", "n_embeds", "=", "None", ")", ":", "\n", "# remove unused embeddings", "\n", "        ", "keep", "=", "self", ".", "ema_count", ">", "0.1", "\n", "\n", "if", "n_embeds", "is", "None", ":", "\n", "            ", "n_embeds", "=", "2", "**", "torch", ".", "log2", "(", "keep", ".", "sum", "(", "-", "1", ")", ".", "max", "(", ")", ".", "float", "(", ")", ")", ".", "ceil", "(", ")", ".", "int", "(", ")", ".", "item", "(", ")", "\n", "\n", "# keep last `n_embeds` most used", "\n", "", "N", ",", "K", ",", "D", "=", "self", ".", "embed", ".", "size", "(", ")", "\n", "keep_idx", "=", "self", ".", "ema_count", ".", "sort", "(", ")", "[", "1", "]", "[", ":", ",", "-", "n_embeds", ":", "]", "\n", "offset", "=", "torch", ".", "arange", "(", "N", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "keep", ".", "device", ")", "*", "K", "\n", "flat_idx", "=", "(", "keep_idx", "+", "offset", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "self", ".", "embed", "=", "self", ".", "embed", ".", "reshape", "(", "N", "*", "K", ",", "D", ")", "[", "flat_idx", "]", ".", "reshape", "(", "N", ",", "n_embeds", ",", "D", ")", "\n", "self", ".", "ema_count", "=", "self", ".", "ema_count", ".", "reshape", "(", "N", "*", "K", ")", "[", "flat_idx", "]", ".", "reshape", "(", "N", ",", "n_embeds", ")", "\n", "self", ".", "ema_weight", "=", "self", ".", "ema_weight", ".", "reshape", "(", "N", "*", "K", ",", "D", ")", "[", "flat_idx", "]", ".", "reshape", "(", "N", ",", "n_embeds", ",", "D", ")", "\n", "\n", "return", "n_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.quantize": [[182, 188], ["quantize.Quantize.forward"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.forward"], ["", "def", "quantize", "(", "self", ",", "x", ")", ":", "\n", "        ", "tr", "=", "self", ".", "training", "\n", "self", ".", "training", "=", "False", "\n", "z_q", "=", "self", ".", "forward", "(", "x", ")", "[", "0", "]", "\n", "self", ".", "training", "=", "tr", "\n", "return", "z_q", "\n", "\n"]], "home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.idx_2_hid": [[190, 195], ["quantize.Quantize.embed_code"], "methods", ["home.repos.pwc.inspect_result.pclucas14_adaptive-quantization-modules.common.quantize.Quantize.embed_code"], ["", "def", "idx_2_hid", "(", "self", ",", "indices", ")", ":", "\n", "        ", "\"\"\" build `z_q` from the codebook indices \"\"\"", "\n", "\n", "out", "=", "self", ".", "embed_code", "(", "indices", ")", "\n", "return", "out", "\n", "\n"]]}