{"home.repos.pwc.inspect_result.jinxhy_smartappattack.None.E-BAMA.copy_raw": [[12, 15], ["shutil.copy2", "str"], "function", ["None"], ["def", "copy_raw", "(", "file_path", ",", "index", ",", "label", ")", ":", "\n", "    ", "foolbox_dir", "=", "'./venv/Lib/site-packages/foolbox/data/'", "\n", "shutil", ".", "copy2", "(", "file_path", ",", "foolbox_dir", "+", "'imagenet_'", "+", "f\"{index:02d}\"", "+", "'_'", "+", "str", "(", "label", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.E-BAMA.inference": [[17, 51], ["dict", "pathlib.Path().iterdir", "tensorflow.keras.preprocessing.image.load_img", "tensorflow.keras.preprocessing.image.img_to_array", "tensorflow.expand_dims", "tensorflow.keras.layers.experimental.preprocessing.Rescaling", "tf.keras.layers.experimental.preprocessing.Rescaling.", "interpreter.set_tensor", "interpreter.invoke", "interpreter.get_tensor", "list", "print", "pathlib.Path", "numpy.where", "E-BAMA.copy_raw", "numpy.amax", "str().split", "str"], "function", ["home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.copy_raw"], ["", "def", "inference", "(", "image_path", ",", "copy", ")", ":", "\n", "    ", "output_labels", "=", "dict", "(", ")", "\n", "img_height", "=", "224", "\n", "img_width", "=", "224", "\n", "index", "=", "0", "\n", "\n", "for", "file", "in", "pathlib", ".", "Path", "(", "image_path", ")", ".", "iterdir", "(", ")", ":", "\n", "# Read and resize the image", "\n", "        ", "img", "=", "tf", ".", "keras", ".", "preprocessing", ".", "image", ".", "load_img", "(", "\n", "file", ",", "target_size", "=", "(", "img_height", ",", "img_width", ")", "\n", ")", "\n", "img_array", "=", "tf", ".", "keras", ".", "preprocessing", ".", "image", ".", "img_to_array", "(", "img", ")", "\n", "img_array", "=", "tf", ".", "expand_dims", "(", "img_array", ",", "0", ")", "# Create a batch", "\n", "\n", "rescale", "=", "tf", ".", "keras", ".", "layers", ".", "experimental", ".", "preprocessing", ".", "Rescaling", "(", "scale", "=", "1.", "/", "127.5", ",", "offset", "=", "-", "1", ")", "\n", "normalized_input", "=", "rescale", "(", "img_array", ")", "\n", "interpreter", ".", "set_tensor", "(", "input_details", "[", "0", "]", "[", "'index'", "]", ",", "normalized_input", ")", "\n", "\n", "# Run the inference", "\n", "interpreter", ".", "invoke", "(", ")", "\n", "output_data", "=", "interpreter", ".", "get_tensor", "(", "output_details", "[", "0", "]", "[", "'index'", "]", ")", "\n", "\n", "# Output prediction", "\n", "max_pro_index", "=", "list", "(", "np", ".", "where", "(", "output_data", "[", "0", "]", "==", "np", ".", "amax", "(", "output_data", "[", "0", "]", ")", ")", ")", "\n", "prediction", "=", "max_pro_index", "[", "0", "]", "[", "0", "]", "\n", "output_labels", "[", "str", "(", "file", ")", ".", "split", "(", "'\\\\'", ")", "[", "-", "1", "]", "]", "=", "prediction", "\n", "print", "(", "file", ",", "prediction", ")", "\n", "\n", "# Copy to the foolbox directory as input images", "\n", "if", "copy", ":", "\n", "            ", "copy_raw", "(", "file", ",", "index", ",", "prediction", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "output_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.E-BAMA.save_advs": [[53, 64], ["enumerate", "enumerate", "PIL.Image.fromarray", "Image.fromarray.save", "str", "os.path.exists", "os.makedirs", "str", "advs[].numpy().max", "advs[].numpy", "advs[].numpy().min", "advs[].numpy", "advs[].numpy"], "function", ["None"], ["", "def", "save_advs", "(", "model_name", ",", "attack_name", ",", "advs_list", ",", "round", ")", ":", "\n", "# Rescale to 0-255 and convert to uint8, then save adversarial images", "\n", "    ", "for", "i", ",", "advs", "in", "enumerate", "(", "advs_list", ")", ":", "\n", "        ", "for", "index", ",", "adv", "in", "enumerate", "(", "advs", ")", ":", "\n", "            ", "adv_format", "=", "(", "255.0", "/", "advs", "[", "index", "]", ".", "numpy", "(", ")", ".", "max", "(", ")", "*", "(", "advs", "[", "index", "]", ".", "numpy", "(", ")", "-", "advs", "[", "index", "]", ".", "numpy", "(", ")", ".", "min", "(", ")", ")", ")", ".", "astype", "(", "\n", "np", ".", "uint8", ")", "\n", "adv_img", "=", "Image", ".", "fromarray", "(", "adv_format", ")", "\n", "path", "=", "'adv_examples/'", "+", "model_name", "+", "'/'", "+", "attack_name", "+", "'/'", "+", "str", "(", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "adv_img", ".", "save", "(", "path", "+", "'/adv'", "+", "str", "(", "round", "+", "index", "+", "100", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.E-BAMA.generate_advs": [[66, 105], ["tensorflow.keras.models.load_model", "dict", "foolbox.TensorFlowModel", "fmodel.transform_bounds.transform_bounds", "numpy.arange().tolist", "foolbox.utils.samples", "print", "print", "print", "foolbox.attacks.L2ClippingAwareAdditiveGaussianNoiseAttack", "numpy.linspace", "eagerpy.astensor", "eagerpy.astensor", "fb.attacks.L2ClippingAwareAdditiveGaussianNoiseAttack.", "E-BAMA.save_advs", "print", "numpy.arange", "foolbox.utils.accuracy", "type", "type", "success.float32().mean().item", "success.float32().mean", "success.float32"], "function", ["home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.save_advs"], ["", "", "", "def", "generate_advs", "(", "tflite_model", ",", "input_size", ")", ":", "\n", "# Get the Enhanced Binary Adversarial Model", "\n", "    ", "model", "=", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "'exp_models/GTSRB/MobileNetV2_GTSRB_stop_sim'", ")", "\n", "\n", "# Specify the correct bounds and preprocessing based on the binary adversarial model", "\n", "preprocessing", "=", "dict", "(", ")", "\n", "bounds", "=", "(", "0", ",", "255", ")", "\n", "fmodel", "=", "fb", ".", "TensorFlowModel", "(", "model", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "# Transform bounds", "\n", "fmodel", "=", "fmodel", ".", "transform_bounds", "(", "(", "0", ",", "1", ")", ")", "\n", "assert", "fmodel", ".", "bounds", "==", "(", "0", ",", "1", ")", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "50", ",", "10", ")", ".", "tolist", "(", ")", ":", "\n", "        ", "images", ",", "labels", "=", "fb", ".", "utils", ".", "samples", "(", "fmodel", ",", "index", "=", "i", ",", "dataset", "=", "'imagenet'", ",", "batchsize", "=", "10", ")", "\n", "\n", "# Check the accuracy of a model to make sure the preprocessing is correct", "\n", "print", "(", "\"Accuracy(before attack):\"", ",", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "images", ",", "labels", ")", ")", "\n", "print", "(", "\"\\nImage:\"", ",", "type", "(", "images", ")", ",", "images", ".", "shape", ")", "\n", "print", "(", "\"Label:\"", ",", "type", "(", "labels", ")", ",", "labels", ")", "\n", "\n", "# Adversarial attack: FGSM, C&W and CAN", "\n", "# l2gn = fb.attacks.FGSM()", "\n", "# l2gn = fb.attacks.L2CarliniWagnerAttack(steps=10)", "\n", "l2gn", "=", "fb", ".", "attacks", ".", "L2ClippingAwareAdditiveGaussianNoiseAttack", "(", ")", "\n", "\n", "# Epsilons for MobileNetV2", "\n", "l2gn_epsilons", "=", "np", ".", "linspace", "(", "20", ",", "20", ",", "num", "=", "1", ")", "\n", "# Epsilons for InceptionV3", "\n", "# l2gn_epsilons = np.linspace(50, 50, num=1)", "\n", "# Epsilons for ResNet50", "\n", "# l2gn_epsilons = np.linspace(50, 50, num=1)", "\n", "\n", "images", "=", "ep", ".", "astensor", "(", "images", ")", "\n", "labels", "=", "ep", ".", "astensor", "(", "labels", ")", "\n", "\n", "raw", ",", "l2gn_advs_list", ",", "success", "=", "l2gn", "(", "fmodel", ",", "images", ",", "labels", ",", "epsilons", "=", "l2gn_epsilons", ")", "\n", "save_advs", "(", "tflite_model", ",", "'L2ClippingAwareAdditiveGaussianNoiseAttack'", ",", "l2gn_advs_list", ",", "i", ")", "\n", "print", "(", "'L2ClippingAwareAdditiveGaussianNoiseAttack'", ",", "success", ".", "float32", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.E-BAMA.success_rate": [[107, 120], ["len", "zip", "print"], "function", ["None"], ["", "", "def", "success_rate", "(", "raw", ",", "adv", ")", ":", "\n", "    ", "ori_labels", "=", "raw", "\n", "adv_labels", "=", "adv", "\n", "sum", "=", "len", "(", "ori_labels", ")", "\n", "no_match", "=", "0", "\n", "\n", "for", "l1", ",", "l2", "in", "zip", "(", "ori_labels", ",", "adv_labels", ")", ":", "\n", "\n", "        ", "if", "ori_labels", "[", "l1", "]", "!=", "adv_labels", "[", "l2", "]", ":", "\n", "            ", "print", "(", "l1", ",", "':'", ",", "ori_labels", "[", "l1", "]", ",", "l2", ",", "':'", ",", "adv_labels", "[", "l2", "]", ")", "\n", "no_match", "+=", "1", "\n", "\n", "", "", "return", "no_match", "/", "sum", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.PMA.copy_raw": [[12, 15], ["shutil.copy2", "str"], "function", ["None"], ["def", "copy_raw", "(", "file_path", ",", "index", ",", "label", ")", ":", "\n", "    ", "foolbox_dir", "=", "'./venv/Lib/site-packages/foolbox/data/'", "\n", "shutil", ".", "copy2", "(", "file_path", ",", "foolbox_dir", "+", "'imagenet_'", "+", "f\"{index:02d}\"", "+", "'_'", "+", "str", "(", "label", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.PMA.inference": [[17, 51], ["dict", "pathlib.Path().iterdir", "tensorflow.keras.preprocessing.image.load_img", "tensorflow.keras.preprocessing.image.img_to_array", "tensorflow.expand_dims", "tensorflow.keras.layers.experimental.preprocessing.Rescaling", "tf.keras.layers.experimental.preprocessing.Rescaling.", "interpreter.set_tensor", "interpreter.invoke", "interpreter.get_tensor", "list", "print", "pathlib.Path", "numpy.where", "PMA.copy_raw", "numpy.amax", "str().split", "str"], "function", ["home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.copy_raw"], ["", "def", "inference", "(", "image_path", ",", "copy", ")", ":", "\n", "    ", "output_labels", "=", "dict", "(", ")", "\n", "img_height", "=", "224", "\n", "img_width", "=", "224", "\n", "index", "=", "0", "\n", "\n", "for", "file", "in", "pathlib", ".", "Path", "(", "image_path", ")", ".", "iterdir", "(", ")", ":", "\n", "# Read and resize the image", "\n", "        ", "img", "=", "tf", ".", "keras", ".", "preprocessing", ".", "image", ".", "load_img", "(", "\n", "file", ",", "target_size", "=", "(", "img_height", ",", "img_width", ")", "\n", ")", "\n", "img_array", "=", "tf", ".", "keras", ".", "preprocessing", ".", "image", ".", "img_to_array", "(", "img", ")", "\n", "img_array", "=", "tf", ".", "expand_dims", "(", "img_array", ",", "0", ")", "# Create a batch", "\n", "\n", "rescale", "=", "tf", ".", "keras", ".", "layers", ".", "experimental", ".", "preprocessing", ".", "Rescaling", "(", "scale", "=", "1.", "/", "127.5", ",", "offset", "=", "-", "1", ")", "\n", "normalized_input", "=", "rescale", "(", "img_array", ")", "\n", "interpreter", ".", "set_tensor", "(", "input_details", "[", "0", "]", "[", "'index'", "]", ",", "normalized_input", ")", "\n", "\n", "# Run the inference", "\n", "interpreter", ".", "invoke", "(", ")", "\n", "output_data", "=", "interpreter", ".", "get_tensor", "(", "output_details", "[", "0", "]", "[", "'index'", "]", ")", "\n", "\n", "# Output prediction", "\n", "max_pro_index", "=", "list", "(", "np", ".", "where", "(", "output_data", "[", "0", "]", "==", "np", ".", "amax", "(", "output_data", "[", "0", "]", ")", ")", ")", "\n", "prediction", "=", "max_pro_index", "[", "0", "]", "[", "0", "]", "\n", "output_labels", "[", "str", "(", "file", ")", ".", "split", "(", "'\\\\'", ")", "[", "-", "1", "]", "]", "=", "prediction", "\n", "print", "(", "file", ",", "prediction", ")", "\n", "\n", "# Copy to the foolbox directory as input images", "\n", "if", "copy", ":", "\n", "            ", "copy_raw", "(", "file", ",", "index", ",", "prediction", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "output_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.PMA.save_advs": [[53, 64], ["enumerate", "enumerate", "PIL.Image.fromarray", "Image.fromarray.save", "str", "os.path.exists", "os.makedirs", "str", "advs[].numpy().max", "advs[].numpy", "advs[].numpy().min", "advs[].numpy", "advs[].numpy"], "function", ["None"], ["", "def", "save_advs", "(", "model_name", ",", "attack_name", ",", "advs_list", ",", "round", ")", ":", "\n", "# Rescale to 0-255 and convert to uint8, then save adversarial images", "\n", "    ", "for", "i", ",", "advs", "in", "enumerate", "(", "advs_list", ")", ":", "\n", "        ", "for", "index", ",", "adv", "in", "enumerate", "(", "advs", ")", ":", "\n", "            ", "adv_format", "=", "(", "255.0", "/", "advs", "[", "index", "]", ".", "numpy", "(", ")", ".", "max", "(", ")", "*", "(", "advs", "[", "index", "]", ".", "numpy", "(", ")", "-", "advs", "[", "index", "]", ".", "numpy", "(", ")", ".", "min", "(", ")", ")", ")", ".", "astype", "(", "\n", "np", ".", "uint8", ")", "\n", "adv_img", "=", "Image", ".", "fromarray", "(", "adv_format", ")", "\n", "path", "=", "'adv_examples/'", "+", "model_name", "+", "'/'", "+", "attack_name", "+", "'/'", "+", "str", "(", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "adv_img", ".", "save", "(", "path", "+", "'/adv'", "+", "str", "(", "round", "+", "index", "+", "100", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.PMA.generate_advs": [[66, 105], ["tensorflow.keras.applications.MobileNet", "dict", "foolbox.TensorFlowModel", "fmodel.transform_bounds.transform_bounds", "numpy.arange().tolist", "foolbox.utils.samples", "print", "print", "print", "foolbox.attacks.L2ClippingAwareAdditiveGaussianNoiseAttack", "numpy.linspace", "eagerpy.astensor", "eagerpy.astensor", "fb.attacks.L2ClippingAwareAdditiveGaussianNoiseAttack.", "PMA.save_advs", "print", "numpy.arange", "foolbox.utils.accuracy", "type", "type", "success.float32().mean().item", "success.float32().mean", "success.float32"], "function", ["home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.save_advs"], ["", "", "", "def", "generate_advs", "(", "tflite_model", ",", "input_size", ")", ":", "\n", "# Get a pre-trained model: MobileNetV2, InceptionV3, ResNet50V2 or an on-device model's pre-trained model", "\n", "    ", "model", "=", "tf", ".", "keras", ".", "applications", ".", "MobileNet", "(", "weights", "=", "\"imagenet\"", ")", "\n", "\n", "# Specify the correct bounds and preprocessing based on the pre-trained model", "\n", "preprocessing", "=", "dict", "(", ")", "# TensorFlow MobileNetV2", "\n", "bounds", "=", "(", "-", "1", ",", "1", ")", "# TensorFlow MobileNetV2", "\n", "fmodel", "=", "fb", ".", "TensorFlowModel", "(", "model", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "# Transform bounds", "\n", "fmodel", "=", "fmodel", ".", "transform_bounds", "(", "(", "0", ",", "1", ")", ")", "\n", "assert", "fmodel", ".", "bounds", "==", "(", "0", ",", "1", ")", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "50", ",", "10", ")", ".", "tolist", "(", ")", ":", "\n", "        ", "images", ",", "labels", "=", "fb", ".", "utils", ".", "samples", "(", "fmodel", ",", "index", "=", "i", ",", "dataset", "=", "'imagenet'", ",", "batchsize", "=", "10", ")", "\n", "\n", "# Check the accuracy of a model to make sure the preprocessing is correct", "\n", "print", "(", "\"Accuracy(before attack):\"", ",", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "images", ",", "labels", ")", ")", "\n", "print", "(", "\"\\nImage:\"", ",", "type", "(", "images", ")", ",", "images", ".", "shape", ")", "\n", "print", "(", "\"Label:\"", ",", "type", "(", "labels", ")", ",", "labels", ")", "\n", "\n", "# Adversarial attack: FGSM, C&W and CAN", "\n", "# l2gn = fb.attacks.FGSM()", "\n", "# l2gn = fb.attacks.L2CarliniWagnerAttack(steps=10)", "\n", "l2gn", "=", "fb", ".", "attacks", ".", "L2ClippingAwareAdditiveGaussianNoiseAttack", "(", ")", "\n", "\n", "# Epsilons for MobileNetV2", "\n", "l2gn_epsilons", "=", "np", ".", "linspace", "(", "20", ",", "20", ",", "num", "=", "1", ")", "\n", "# Epsilons for InceptionV3", "\n", "# l2gn_epsilons = np.linspace(50, 50, num=1)", "\n", "# Epsilons for ResNet50", "\n", "# l2gn_epsilons = np.linspace(50, 50, num=1)", "\n", "\n", "images", "=", "ep", ".", "astensor", "(", "images", ")", "\n", "labels", "=", "ep", ".", "astensor", "(", "labels", ")", "\n", "\n", "raw", ",", "l2gn_advs_list", ",", "success", "=", "l2gn", "(", "fmodel", ",", "images", ",", "labels", ",", "epsilons", "=", "l2gn_epsilons", ")", "\n", "save_advs", "(", "tflite_model", ",", "'L2ClippingAwareAdditiveGaussianNoiseAttack'", ",", "l2gn_advs_list", ",", "i", ")", "\n", "print", "(", "'L2ClippingAwareAdditiveGaussianNoiseAttack'", ",", "success", ".", "float32", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.PMA.success_rate": [[107, 120], ["len", "zip", "print"], "function", ["None"], ["", "", "def", "success_rate", "(", "raw", ",", "adv", ")", ":", "\n", "    ", "ori_labels", "=", "raw", "\n", "adv_labels", "=", "adv", "\n", "sum", "=", "len", "(", "ori_labels", ")", "\n", "no_match", "=", "0", "\n", "\n", "for", "l1", ",", "l2", "in", "zip", "(", "ori_labels", ",", "adv_labels", ")", ":", "\n", "\n", "        ", "if", "ori_labels", "[", "l1", "]", "!=", "adv_labels", "[", "l2", "]", ":", "\n", "            ", "print", "(", "l1", ",", "':'", ",", "ori_labels", "[", "l1", "]", ",", "l2", ",", "':'", ",", "adv_labels", "[", "l2", "]", ")", "\n", "no_match", "+=", "1", "\n", "\n", "", "", "return", "no_match", "/", "sum", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.copy_raw": [[12, 15], ["shutil.copy2", "str"], "function", ["None"], ["def", "copy_raw", "(", "file_path", ",", "index", ",", "label", ")", ":", "\n", "    ", "foolbox_dir", "=", "'./venv/Lib/site-packages/foolbox/data/'", "\n", "shutil", ".", "copy2", "(", "file_path", ",", "foolbox_dir", "+", "'imagenet_'", "+", "f\"{index:02d}\"", "+", "'_'", "+", "str", "(", "label", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.inference": [[17, 51], ["dict", "pathlib.Path().iterdir", "tensorflow.keras.preprocessing.image.load_img", "tensorflow.keras.preprocessing.image.img_to_array", "tensorflow.expand_dims", "tensorflow.keras.layers.experimental.preprocessing.Rescaling", "tf.keras.layers.experimental.preprocessing.Rescaling.", "interpreter.set_tensor", "interpreter.invoke", "interpreter.get_tensor", "list", "print", "pathlib.Path", "numpy.where", "BAMA.copy_raw", "numpy.amax", "str().split", "str"], "function", ["home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.copy_raw"], ["", "def", "inference", "(", "image_path", ",", "copy", ")", ":", "\n", "    ", "output_labels", "=", "dict", "(", ")", "\n", "img_height", "=", "224", "\n", "img_width", "=", "224", "\n", "index", "=", "0", "\n", "\n", "for", "file", "in", "pathlib", ".", "Path", "(", "image_path", ")", ".", "iterdir", "(", ")", ":", "\n", "# Read and resize the image", "\n", "        ", "img", "=", "tf", ".", "keras", ".", "preprocessing", ".", "image", ".", "load_img", "(", "\n", "file", ",", "target_size", "=", "(", "img_height", ",", "img_width", ")", "\n", ")", "\n", "img_array", "=", "tf", ".", "keras", ".", "preprocessing", ".", "image", ".", "img_to_array", "(", "img", ")", "\n", "img_array", "=", "tf", ".", "expand_dims", "(", "img_array", ",", "0", ")", "# Create a batch", "\n", "\n", "rescale", "=", "tf", ".", "keras", ".", "layers", ".", "experimental", ".", "preprocessing", ".", "Rescaling", "(", "scale", "=", "1.", "/", "127.5", ",", "offset", "=", "-", "1", ")", "\n", "normalized_input", "=", "rescale", "(", "img_array", ")", "\n", "interpreter", ".", "set_tensor", "(", "input_details", "[", "0", "]", "[", "'index'", "]", ",", "normalized_input", ")", "\n", "\n", "# Run the inference", "\n", "interpreter", ".", "invoke", "(", ")", "\n", "output_data", "=", "interpreter", ".", "get_tensor", "(", "output_details", "[", "0", "]", "[", "'index'", "]", ")", "\n", "\n", "# Output prediction", "\n", "max_pro_index", "=", "list", "(", "np", ".", "where", "(", "output_data", "[", "0", "]", "==", "np", ".", "amax", "(", "output_data", "[", "0", "]", ")", ")", ")", "\n", "prediction", "=", "max_pro_index", "[", "0", "]", "[", "0", "]", "\n", "output_labels", "[", "str", "(", "file", ")", ".", "split", "(", "'\\\\'", ")", "[", "-", "1", "]", "]", "=", "prediction", "\n", "print", "(", "file", ",", "prediction", ")", "\n", "\n", "# Copy to the foolbox directory as input images", "\n", "if", "copy", ":", "\n", "            ", "copy_raw", "(", "file", ",", "index", ",", "prediction", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "output_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.save_advs": [[53, 64], ["enumerate", "enumerate", "PIL.Image.fromarray", "Image.fromarray.save", "str", "os.path.exists", "os.makedirs", "str", "advs[].numpy().max", "advs[].numpy", "advs[].numpy().min", "advs[].numpy", "advs[].numpy"], "function", ["None"], ["", "def", "save_advs", "(", "model_name", ",", "attack_name", ",", "advs_list", ",", "round", ")", ":", "\n", "# Rescale to 0-255 and convert to uint8, then save adversarial images", "\n", "    ", "for", "i", ",", "advs", "in", "enumerate", "(", "advs_list", ")", ":", "\n", "        ", "for", "index", ",", "adv", "in", "enumerate", "(", "advs", ")", ":", "\n", "            ", "adv_format", "=", "(", "255.0", "/", "advs", "[", "index", "]", ".", "numpy", "(", ")", ".", "max", "(", ")", "*", "(", "advs", "[", "index", "]", ".", "numpy", "(", ")", "-", "advs", "[", "index", "]", ".", "numpy", "(", ")", ".", "min", "(", ")", ")", ")", ".", "astype", "(", "\n", "np", ".", "uint8", ")", "\n", "adv_img", "=", "Image", ".", "fromarray", "(", "adv_format", ")", "\n", "path", "=", "'adv_examples/'", "+", "model_name", "+", "'/'", "+", "attack_name", "+", "'/'", "+", "str", "(", "i", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "adv_img", ".", "save", "(", "path", "+", "'/adv'", "+", "str", "(", "round", "+", "index", "+", "100", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.generate_advs": [[66, 105], ["tensorflow.keras.models.load_model", "dict", "foolbox.TensorFlowModel", "fmodel.transform_bounds.transform_bounds", "numpy.arange().tolist", "foolbox.utils.samples", "print", "print", "print", "foolbox.attacks.L2ClippingAwareAdditiveGaussianNoiseAttack", "numpy.linspace", "eagerpy.astensor", "eagerpy.astensor", "fb.attacks.L2ClippingAwareAdditiveGaussianNoiseAttack.", "BAMA.save_advs", "print", "numpy.arange", "foolbox.utils.accuracy", "type", "type", "success.float32().mean().item", "success.float32().mean", "success.float32"], "function", ["home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.save_advs"], ["", "", "", "def", "generate_advs", "(", "tflite_model", ",", "input_size", ")", ":", "\n", "# Get the Default Binary Adversarial Model", "\n", "    ", "model", "=", "tf", ".", "keras", ".", "models", ".", "load_model", "(", "'exp_models/GTSRB/MobileNetV2_GTSRB_stop'", ")", "\n", "\n", "# Specify the correct bounds and preprocessing based on the binary adversarial model", "\n", "preprocessing", "=", "dict", "(", ")", "\n", "bounds", "=", "(", "0", ",", "255", ")", "\n", "fmodel", "=", "fb", ".", "TensorFlowModel", "(", "model", ",", "bounds", "=", "bounds", ",", "preprocessing", "=", "preprocessing", ")", "\n", "\n", "# Transform bounds", "\n", "fmodel", "=", "fmodel", ".", "transform_bounds", "(", "(", "0", ",", "1", ")", ")", "\n", "assert", "fmodel", ".", "bounds", "==", "(", "0", ",", "1", ")", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "50", ",", "10", ")", ".", "tolist", "(", ")", ":", "\n", "        ", "images", ",", "labels", "=", "fb", ".", "utils", ".", "samples", "(", "fmodel", ",", "index", "=", "i", ",", "dataset", "=", "'imagenet'", ",", "batchsize", "=", "10", ")", "\n", "\n", "# Check the accuracy of a model to make sure the preprocessing is correct", "\n", "print", "(", "\"Accuracy(before attack):\"", ",", "fb", ".", "utils", ".", "accuracy", "(", "fmodel", ",", "images", ",", "labels", ")", ")", "\n", "print", "(", "\"\\nImage:\"", ",", "type", "(", "images", ")", ",", "images", ".", "shape", ")", "\n", "print", "(", "\"Label:\"", ",", "type", "(", "labels", ")", ",", "labels", ")", "\n", "\n", "# Adversarial attack: FGSM, C&W and CAN", "\n", "# l2gn = fb.attacks.FGSM()", "\n", "# l2gn = fb.attacks.L2CarliniWagnerAttack(steps=10)", "\n", "l2gn", "=", "fb", ".", "attacks", ".", "L2ClippingAwareAdditiveGaussianNoiseAttack", "(", ")", "\n", "\n", "# Epsilons for MobileNetV2", "\n", "l2gn_epsilons", "=", "np", ".", "linspace", "(", "20", ",", "20", ",", "num", "=", "1", ")", "\n", "# Epsilons for InceptionV3", "\n", "# l2gn_epsilons = np.linspace(50, 50, num=1)", "\n", "# Epsilons for ResNet50", "\n", "# l2gn_epsilons = np.linspace(50, 50, num=1)", "\n", "\n", "images", "=", "ep", ".", "astensor", "(", "images", ")", "\n", "labels", "=", "ep", ".", "astensor", "(", "labels", ")", "\n", "\n", "raw", ",", "l2gn_advs_list", ",", "success", "=", "l2gn", "(", "fmodel", ",", "images", ",", "labels", ",", "epsilons", "=", "l2gn_epsilons", ")", "\n", "save_advs", "(", "tflite_model", ",", "'L2ClippingAwareAdditiveGaussianNoiseAttack'", ",", "l2gn_advs_list", ",", "i", ")", "\n", "print", "(", "'L2ClippingAwareAdditiveGaussianNoiseAttack'", ",", "success", ".", "float32", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.BAMA.success_rate": [[107, 120], ["len", "zip", "print"], "function", ["None"], ["", "", "def", "success_rate", "(", "raw", ",", "adv", ")", ":", "\n", "    ", "ori_labels", "=", "raw", "\n", "adv_labels", "=", "adv", "\n", "sum", "=", "len", "(", "ori_labels", ")", "\n", "no_match", "=", "0", "\n", "\n", "for", "l1", ",", "l2", "in", "zip", "(", "ori_labels", ",", "adv_labels", ")", ":", "\n", "\n", "        ", "if", "ori_labels", "[", "l1", "]", "!=", "adv_labels", "[", "l2", "]", ":", "\n", "            ", "print", "(", "l1", ",", "':'", ",", "ori_labels", "[", "l1", "]", ",", "l2", ",", "':'", ",", "adv_labels", "[", "l2", "]", ")", "\n", "no_match", "+=", "1", "\n", "\n", "", "", "return", "no_match", "/", "sum", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.stru_comparator.Model.__init__": [[9, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "layers", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "layers", "=", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.stru_comparator.Layer.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "index", ",", "shape", ",", "dtype", ")", ":", "\n", "        ", "self", ".", "detail", "=", "name", "+", "\",\"", "+", "index", "+", "\",\"", "+", "shape", "+", "\",\"", "+", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.stru_comparator.load_repository": [[19, 48], ["os.listdir", "tf.lite.Interpreter.get_tensor_details", "stru_comparator.Model", "db.append", "tensorflow.lite.Interpreter", "tf.lite.Interpreter.allocate_tensors", "stru_comparator.Layer", "layers.append", "print", "str", "re.sub", "re.sub", "re.sub", "str", "str", "str"], "function", ["None"], ["", "", "def", "load_repository", "(", ")", ":", "\n", "    ", "db", "=", "[", "]", "\n", "\n", "for", "model_name", "in", "os", ".", "listdir", "(", "\"DL_models/TF_Hub/\"", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "# Load TFLite model and allocate tensors.", "\n", "            ", "interpreter", "=", "tf", ".", "lite", ".", "Interpreter", "(", "\"DL_models/TF_Hub/\"", "+", "model_name", ")", "\n", "interpreter", ".", "allocate_tensors", "(", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "model_name", ",", "\"loading error\"", ")", "\n", "continue", "\n", "\n", "", "details", "=", "interpreter", ".", "get_tensor_details", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "model", "=", "Model", "(", "model_name", ",", "layers", ")", "\n", "\n", "for", "detail", "in", "details", ":", "\n", "            ", "shape", "=", "re", ".", "sub", "(", "' +'", ",", "','", ",", "str", "(", "detail", "[", "'shape'", "]", ")", ")", "[", ":", "1", "]", "+", "re", ".", "sub", "(", "' +'", ",", "','", ",", "str", "(", "detail", "[", "'shape'", "]", ")", ")", "[", "2", ":", "]", "\n", "layer", "=", "Layer", "(", "detail", "[", "'name'", "]", ",", "str", "(", "detail", "[", "'index'", "]", ")", ",", "shape", ",", "\n", "re", ".", "sub", "(", "' +'", ",", "','", ",", "str", "(", "detail", "[", "'dtype'", "]", ")", ")", ")", "\n", "\n", "layers", ".", "append", "(", "layer", ".", "detail", ")", "\n", "\n", "", "model", ".", "layers", "=", "layers", "\n", "db", ".", "append", "(", "model", ")", "\n", "\n", "", "return", "db", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.stru_comparator.load_target_models": [[50, 78], ["os.listdir", "tf.lite.Interpreter.get_tensor_details", "stru_comparator.Model", "targets.append", "tensorflow.lite.Interpreter", "tf.lite.Interpreter.allocate_tensors", "stru_comparator.Layer", "layers.append", "print", "str", "re.sub", "re.sub", "re.sub", "str", "str", "str"], "function", ["None"], ["", "def", "load_target_models", "(", ")", ":", "\n", "    ", "targets", "=", "[", "]", "\n", "\n", "for", "model_name", "in", "os", ".", "listdir", "(", "\"DL_models/TFLite/\"", ")", ":", "\n", "# Load TFLite model and allocate tensors.", "\n", "        ", "try", ":", "\n", "            ", "interpreter", "=", "tf", ".", "lite", ".", "Interpreter", "(", "\"DL_models/TFLite/\"", "+", "model_name", ")", "\n", "interpreter", ".", "allocate_tensors", "(", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "model_name", ",", "\"loading error\"", ")", "\n", "continue", "\n", "\n", "", "details", "=", "interpreter", ".", "get_tensor_details", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "model", "=", "Model", "(", "model_name", ",", "layers", ")", "\n", "\n", "for", "detail", "in", "details", ":", "\n", "            ", "shape", "=", "re", ".", "sub", "(", "' +'", ",", "','", ",", "str", "(", "detail", "[", "'shape'", "]", ")", ")", "[", ":", "1", "]", "+", "re", ".", "sub", "(", "' +'", ",", "','", ",", "str", "(", "detail", "[", "'shape'", "]", ")", ")", "[", "2", ":", "]", "\n", "layer", "=", "Layer", "(", "detail", "[", "'name'", "]", ",", "str", "(", "detail", "[", "'index'", "]", ")", ",", "shape", ",", "\n", "re", ".", "sub", "(", "' +'", ",", "','", ",", "str", "(", "detail", "[", "'dtype'", "]", ")", ")", ")", "\n", "\n", "layers", ".", "append", "(", "layer", ".", "detail", ")", "\n", "\n", "", "model", ".", "layers", "=", "layers", "\n", "targets", ".", "append", "(", "model", ")", "\n", "\n", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.para_comparator.Model.__init__": [[11, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "layers", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "layers", "=", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.para_comparator.Layer.__init__": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "weight_bias", ")", ":", "\n", "        ", "self", ".", "detail", "=", "weight_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.para_comparator.load_repository": [[21, 54], ["os.listdir", "tf.lite.Interpreter.get_tensor_details", "para_comparator.Model", "db.append", "tensorflow.lite.Interpreter", "tf.lite.Interpreter.allocate_tensors", "tf.lite.Interpreter.get_tensor", "print", "para_comparator.Layer", "layers.append", "para_comparator.Layer", "layers.append"], "function", ["None"], ["", "", "def", "load_repository", "(", ")", ":", "\n", "    ", "db", "=", "[", "]", "\n", "\n", "for", "model_name", "in", "os", ".", "listdir", "(", "\"DL_models/TF_Hub/\"", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "# Load TFLite model and allocate tensors.", "\n", "            ", "interpreter", "=", "tf", ".", "lite", ".", "Interpreter", "(", "\"DL_models/TF_Hub/\"", "+", "model_name", ")", "\n", "interpreter", ".", "allocate_tensors", "(", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "model_name", ",", "\"loading error\"", ")", "\n", "continue", "\n", "\n", "", "details", "=", "interpreter", ".", "get_tensor_details", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "model", "=", "Model", "(", "model_name", ",", "layers", ")", "\n", "\n", "for", "detail", "in", "details", ":", "\n", "            ", "layer_details", "=", "interpreter", ".", "get_tensor", "(", "detail", "[", "'index'", "]", ")", "\n", "\n", "if", "\"weights\"", "in", "detail", "[", "'name'", "]", ":", "\n", "                ", "weight", "=", "Layer", "(", "layer_details", ")", "\n", "layers", ".", "append", "(", "weight", ".", "detail", ")", "\n", "\n", "", "if", "\"bias\"", "in", "detail", "[", "'name'", "]", ":", "\n", "                ", "bias", "=", "Layer", "(", "layer_details", ")", "\n", "layers", ".", "append", "(", "bias", ".", "detail", ")", "\n", "\n", "", "", "model", ".", "layers", "=", "layers", "\n", "db", ".", "append", "(", "model", ")", "\n", "\n", "", "return", "db", "\n", "\n"]], "home.repos.pwc.inspect_result.jinxhy_smartappattack.None.para_comparator.load_target_models": [[56, 88], ["os.listdir", "tf.lite.Interpreter.get_tensor_details", "para_comparator.Model", "targets.append", "tensorflow.lite.Interpreter", "tf.lite.Interpreter.allocate_tensors", "tf.lite.Interpreter.get_tensor", "print", "para_comparator.Layer", "layers.append", "para_comparator.Layer", "layers.append"], "function", ["None"], ["", "def", "load_target_models", "(", ")", ":", "\n", "    ", "targets", "=", "[", "]", "\n", "\n", "for", "model_name", "in", "os", ".", "listdir", "(", "\"DL_models/TFLite/\"", ")", ":", "\n", "# Load TFLite model and allocate tensors.", "\n", "        ", "try", ":", "\n", "            ", "interpreter", "=", "tf", ".", "lite", ".", "Interpreter", "(", "\"DL_models/TFLite/\"", "+", "model_name", ")", "\n", "interpreter", ".", "allocate_tensors", "(", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "model_name", ",", "\"loading error\"", ")", "\n", "continue", "\n", "\n", "", "details", "=", "interpreter", ".", "get_tensor_details", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "model", "=", "Model", "(", "model_name", ",", "layers", ")", "\n", "\n", "for", "detail", "in", "details", ":", "\n", "            ", "layer_details", "=", "interpreter", ".", "get_tensor", "(", "detail", "[", "'index'", "]", ")", "\n", "\n", "if", "\"weights\"", "in", "detail", "[", "'name'", "]", ":", "\n", "                ", "weight", "=", "Layer", "(", "layer_details", ")", "\n", "layers", ".", "append", "(", "weight", ".", "detail", ")", "\n", "\n", "", "if", "\"bias\"", "in", "detail", "[", "'name'", "]", ":", "\n", "                ", "bias", "=", "Layer", "(", "layer_details", ")", "\n", "layers", ".", "append", "(", "bias", ".", "detail", ")", "\n", "\n", "", "", "model", ".", "layers", "=", "layers", "\n", "targets", ".", "append", "(", "model", ")", "\n", "\n", "", "return", "targets", "\n", "\n"]]}