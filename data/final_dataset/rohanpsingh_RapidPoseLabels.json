{"home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.__init__": [[7, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "angle_thresh", ",", "curv_thresh", ")", ":", "\n", "\n", "        ", "self", ".", "threshold_angle", "=", "angle_thresh", "\n", "self", ".", "threshold_curv", "=", "curv_thresh", "\n", "\n", "# initialize cloud vars", "\n", "self", ".", "pcd", "=", "[", "]", "\n", "self", ".", "pcd_tree", "=", "[", "]", "\n", "self", ".", "pcd_normals", "=", "[", "]", "\n", "self", ".", "pcd_curvature", "=", "[", "]", "\n", "\n", "# set parameters", "\n", "self", ".", "grow_region_rad", "=", "0.01", "\n", "self", ".", "curvature_compute_rad", "=", "0.01", "\n", "self", ".", "normal_compute_rad", "=", "0.01", "\n", "self", ".", "normal_compute_max_nn", "=", "30", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.set_input_cloud": [[25, 31], ["None"], "methods", ["None"], ["", "def", "set_input_cloud", "(", "self", ",", "pcd", ")", ":", "\n", "        ", "\"\"\"\n        Function to set the input point cloud\n        \"\"\"", "\n", "self", ".", "pcd", "=", "pcd", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.box_crop": [[32, 55], ["numpy.asarray", "numpy.asarray", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "numpy.logical_and", "region_growing.RegionGrowing.pcd.voxel_down_sample"], "methods", ["None"], ["", "def", "box_crop", "(", "self", ",", "centroid", ",", "vox_grid", "=", "None", ",", "box_side", "=", "0.2", ")", ":", "\n", "        ", "\"\"\"\n        Function to crop point cloud to be within\n        a bounding box of given size and center.\n        \"\"\"", "\n", "# set min and max in x,y,z directions", "\n", "min_x", "=", "centroid", "[", "0", "]", "-", "box_side", ";", "max_x", "=", "centroid", "[", "0", "]", "+", "box_side", "\n", "min_y", "=", "centroid", "[", "1", "]", "-", "box_side", ";", "max_y", "=", "centroid", "[", "1", "]", "+", "box_side", "\n", "min_z", "=", "centroid", "[", "2", "]", "-", "box_side", ";", "max_z", "=", "centroid", "[", "2", "]", "+", "box_side", "\n", "# get a boolean array for inside and outside points", "\n", "points", "=", "np", ".", "asarray", "(", "self", ".", "pcd", ".", "points", ")", "\n", "colors", "=", "np", ".", "asarray", "(", "self", ".", "pcd", ".", "colors", ")", "\n", "bound_x", "=", "np", ".", "logical_and", "(", "points", "[", ":", ",", "0", "]", ">", "min_x", ",", "points", "[", ":", ",", "0", "]", "<", "max_x", ")", "\n", "bound_y", "=", "np", ".", "logical_and", "(", "points", "[", ":", ",", "1", "]", ">", "min_y", ",", "points", "[", ":", ",", "1", "]", "<", "max_y", ")", "\n", "bound_z", "=", "np", ".", "logical_and", "(", "points", "[", ":", ",", "2", "]", ">", "min_z", ",", "points", "[", ":", ",", "2", "]", "<", "max_z", ")", "\n", "bb_filter", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "bound_x", ",", "bound_y", ")", ",", "bound_z", ")", "\n", "# update self.pcd with only the inside points", "\n", "self", ".", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "points", "[", "bb_filter", "]", ")", "\n", "self", ".", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "colors", "[", "bb_filter", "]", ")", "\n", "# down sample using voxel grid", "\n", "if", "vox_grid", "is", "not", "None", ":", "\n", "            ", "self", ".", "pcd", "=", "self", ".", "pcd", ".", "voxel_down_sample", "(", "voxel_size", "=", "vox_grid", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.set_seeds": [[56, 67], ["region_growing.RegionGrowing.pcd.points.extend", "region_growing.RegionGrowing.pcd.colors.extend", "list", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "range", "numpy.asarray", "len", "len"], "methods", ["None"], ["", "def", "set_seeds", "(", "self", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Function to append given points to point cloud\n        and set the indices as initial seeds for region\n        growing segmentation.\n        \"\"\"", "\n", "self", ".", "pcd", ".", "points", ".", "extend", "(", "o3d", ".", "utility", ".", "Vector3dVector", "(", "points", ")", ")", "\n", "self", ".", "pcd", ".", "colors", ".", "extend", "(", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "asarray", "(", "[", "[", "0", ",", "0", ",", "0", "]", "for", "i", "in", "points", "]", ")", ")", ")", "\n", "seed_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "pcd", ".", "points", ")", "-", "points", ".", "shape", "[", "0", "]", ",", "len", "(", "self", ".", "pcd", ".", "points", ")", ")", ")", "\n", "self", ".", "ini_seeds", "=", "seed_indices", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.compute_point_curvature": [[68, 76], ["open3d.geometry.PointCloud", "open3d.geometry.PointCloud.compute_mean_and_covariance", "numpy.linalg.eig", "eig_val.sum"], "methods", ["None"], ["", "def", "compute_point_curvature", "(", "self", ",", "cluster", ")", ":", "\n", "        ", "\"\"\"\n        Compute the curvature for a given a cluster of points.\n        \"\"\"", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", "cluster", ")", "\n", "mean", ",", "cov", "=", "pcd", ".", "compute_mean_and_covariance", "(", ")", "\n", "eig_val", ",", "_", "=", "np", ".", "linalg", ".", "eig", "(", "cov", ")", "\n", "return", "(", "eig_val", "[", "0", "]", "/", "(", "eig_val", ".", "sum", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.validate_point": [[77, 83], ["numpy.round", "math.acos", "numpy.dot"], "methods", ["None"], ["", "def", "validate_point", "(", "self", ",", "point_idx", ",", "seed_idx", ")", ":", "\n", "        ", "n1", "=", "self", ".", "pcd_normals", "[", "point_idx", "]", "\n", "n2", "=", "self", ".", "pcd_normals", "[", "seed_idx", "]", "\n", "dot", "=", "np", ".", "round", "(", "np", ".", "dot", "(", "n1", ",", "n2", ")", ",", "4", ")", "\n", "angle", "=", "math", ".", "acos", "(", "dot", ")", "\n", "return", "angle", "<", "self", ".", "threshold_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.validate_seed": [[84, 89], ["region_growing.RegionGrowing.pcd_tree.search_radius_vector_3d", "open3d.utility.Vector3dVector", "region_growing.RegionGrowing.compute_point_curvature", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.compute_point_curvature"], ["", "def", "validate_seed", "(", "self", ",", "point_idx", ")", ":", "\n", "        ", "[", "_", ",", "indices", ",", "_", "]", "=", "self", ".", "pcd_tree", ".", "search_radius_vector_3d", "(", "point_idx", ",", "self", ".", "curvature_compute_rad", ")", "\n", "neighbors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "asarray", "(", "self", ".", "pcd", ".", "points", ")", "[", "indices", "]", ")", "\n", "sigma", "=", "self", ".", "compute_point_curvature", "(", "neighbors", ")", "\n", "return", "sigma", "<", "self", ".", "threshold_curv", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.extract": [[90, 133], ["open3d.geometry.KDTreeFlann", "region_growing.RegionGrowing.pcd.estimate_normals", "open3d.geometry.PointCloud", "list_of_seeds.append", "list_of_seeds_idxs.append", "open3d.geometry.PointCloud.points.append", "open3d.geometry.PointCloud.colors.append", "current_region_idxs.append", "len", "global_region.append", "open3d.geometry.KDTreeSearchParamHybrid", "list_of_seeds.pop", "list_of_seeds_idxs.pop", "region_growing.RegionGrowing.pcd_tree.search_radius_vector_3d", "region_growing.RegionGrowing.validate_point", "open3d.geometry.PointCloud.points.append", "open3d.geometry.PointCloud.colors.append", "current_region_idxs.append", "region_growing.RegionGrowing.validate_seed", "len", "list_of_seeds.append", "list_of_seeds_idxs.append"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.validate_point", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.validate_seed"], ["", "def", "extract", "(", "self", ")", ":", "\n", "# build KDTree", "\n", "        ", "self", ".", "pcd_tree", "=", "o3d", ".", "geometry", ".", "KDTreeFlann", "(", "self", ".", "pcd", ")", "\n", "# pre-compute normals at each point", "\n", "self", ".", "pcd", ".", "estimate_normals", "(", "search_param", "=", "o3d", ".", "geometry", ".", "KDTreeSearchParamHybrid", "(", "\n", "radius", "=", "self", ".", "normal_compute_rad", ",", "max_nn", "=", "self", ".", "normal_compute_max_nn", ")", ")", "\n", "self", ".", "pcd_normals", "=", "self", ".", "pcd", ".", "normals", "\n", "\n", "# initiate region extraction", "\n", "global_region", "=", "[", "]", "\n", "for", "ini_seed_idx", "in", "self", ".", "ini_seeds", ":", "\n", "            ", "ini_seed", "=", "self", ".", "pcd", ".", "points", "[", "ini_seed_idx", "]", "\n", "list_of_seeds", "=", "[", "]", "\n", "list_of_seeds_idxs", "=", "[", "]", "\n", "current_region", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "current_region_idxs", "=", "[", "]", "\n", "list_of_seeds", ".", "append", "(", "ini_seed", ")", "\n", "list_of_seeds_idxs", ".", "append", "(", "ini_seed_idx", ")", "\n", "#populate current region", "\n", "current_region", ".", "points", ".", "append", "(", "ini_seed", ")", "\n", "current_region", ".", "colors", ".", "append", "(", "self", ".", "pcd", ".", "colors", "[", "ini_seed_idx", "]", ")", "\n", "current_region_idxs", ".", "append", "(", "ini_seed_idx", ")", "\n", "while", "len", "(", "list_of_seeds", ")", ":", "\n", "                ", "current_seed", "=", "list_of_seeds", ".", "pop", "(", ")", "\n", "current_seed_idx", "=", "list_of_seeds_idxs", ".", "pop", "(", ")", "\n", "[", "_", ",", "nghbr_idxs", ",", "_", "]", "=", "self", ".", "pcd_tree", ".", "search_radius_vector_3d", "(", "\n", "current_seed", ",", "self", ".", "grow_region_rad", ")", "\n", "for", "nghbr_idx", "in", "nghbr_idxs", ":", "\n", "                    ", "nghbr_point", "=", "self", ".", "pcd", ".", "points", "[", "nghbr_idx", "]", "\n", "is_in_region", "=", "self", ".", "validate_point", "(", "nghbr_idx", ",", "current_seed_idx", ")", "\n", "if", "nghbr_idx", "not", "in", "current_region_idxs", "and", "is_in_region", ":", "\n", "#populate current region", "\n", "                        ", "current_region", ".", "points", ".", "append", "(", "nghbr_point", ")", "\n", "current_region", ".", "colors", ".", "append", "(", "self", ".", "pcd", ".", "colors", "[", "nghbr_idx", "]", ")", "\n", "current_region_idxs", ".", "append", "(", "nghbr_idx", ")", "\n", "is_a_seed", "=", "self", ".", "validate_seed", "(", "nghbr_point", ")", "\n", "if", "is_a_seed", ":", "\n", "                            ", "list_of_seeds", ".", "append", "(", "nghbr_point", ")", "\n", "list_of_seeds_idxs", ".", "append", "(", "nghbr_idx", ")", "\n", "", "", "if", "len", "(", "current_region", ".", "points", ")", ">", "1000", ":", "\n", "                        ", "break", "\n", "", "", "", "global_region", ".", "append", "(", "current_region", ")", "\n", "", "return", "global_region", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.dataset_writer.DatasetWriter.__init__": [[6, 17], ["os.path.isdir", "os.makedirs", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for Writer class.\n        Input arguments:\n        output_dir - path to output directory\n        \"\"\"", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "#create sub-directories if they dont exist", "\n", "for", "dir_name", "in", "[", "\"bboxes\"", ",", "\"center\"", ",", "\"scale\"", ",", "\"label\"", ",", "\"frames\"", ",", "\"masks\"", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "dir_name", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "dir_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.dataset_writer.DatasetWriter.write_to_disk": [[18, 56], ["open", "open.write", "open.close", "os.path.join", "numpy.savetxt", "os.path.join", "numpy.savetxt", "os.path.join", "numpy.savetxt", "cv2.imwrite", "cv2.imwrite", "os.path.join", "numpy.asarray", "os.path.join", "os.path.join", "repr", "repr().zfill", "repr().zfill", "repr().zfill", "repr().zfill", "repr().zfill", "repr().zfill", "repr", "repr", "repr", "repr", "repr", "repr", "repr", "repr", "repr"], "methods", ["None"], ["", "", "", "def", "write_to_disk", "(", "self", ",", "sample", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Function to write the generated sample (keypoint, center, scale, mask and the RGB image)\n        in a format as expected by the ObjectKeypointTrainer training module\n        (https://github.com/rohanpsingh/ObjectKeypointTrainer#preparing-the-dataset).\n        Bounding-boxes are saved in the format as expected by darknet-yolov3\n        (https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects).\n        Input arguments:\n        sample - labeled sample (RGB image, (keypoint, center pos, scale, mask))\n        index  - counter for naming images\n        \"\"\"", "\n", "rgb_image", "=", "sample", "[", "0", "]", "\n", "kpt_label", "=", "sample", "[", "1", "]", "[", "0", "]", "\n", "cen_label", "=", "sample", "[", "1", "]", "[", "1", "]", "\n", "sca_label", "=", "sample", "[", "1", "]", "[", "2", "]", "\n", "mask_label", "=", "sample", "[", "1", "]", "[", "3", "]", "\n", "\n", "width", "=", "rgb_image", ".", "shape", "[", "1", "]", "\n", "height", "=", "rgb_image", ".", "shape", "[", "0", "]", "\n", "#write bounding box for yolo", "\n", "bboxfile", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'bboxes'", ",", "'frame_'", "+", "repr", "(", "index", ")", ".", "zfill", "(", "5", ")", "+", "'.txt'", ")", ",", "'w'", ")", "\n", "bboxfile", ".", "write", "(", "'0\\t'", "+", "repr", "(", "cen_label", "[", "0", "]", "/", "width", ")", "+", "'\\t'", "+", "repr", "(", "cen_label", "[", "1", "]", "/", "height", ")", "+", "'\\t'", "+", "\n", "repr", "(", "sca_label", "*", "200", "/", "width", ")", "+", "'\\t'", "+", "repr", "(", "sca_label", "*", "200", "/", "height", ")", "+", "'\\n'", ")", "\n", "bboxfile", ".", "close", "(", ")", "\n", "#write center to center/center_0####.txt", "\n", "centerfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'center'", ",", "'center_'", "+", "repr", "(", "index", ")", ".", "zfill", "(", "5", ")", "+", "'.txt'", ")", "\n", "np", ".", "savetxt", "(", "centerfile", ",", "cen_label", ")", "\n", "#write scale to scale/scales_0####.txt", "\n", "scalesfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'scale'", ",", "'scales_'", "+", "repr", "(", "index", ")", ".", "zfill", "(", "5", ")", "+", "'.txt'", ")", "\n", "np", ".", "savetxt", "(", "scalesfile", ",", "np", ".", "asarray", "(", "[", "sca_label", "]", ")", ")", "\n", "#write keypoints to label/label_0####.txt", "\n", "labelfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'label'", ",", "'label_'", "+", "repr", "(", "index", ")", ".", "zfill", "(", "5", ")", "+", "'.txt'", ")", "\n", "np", ".", "savetxt", "(", "labelfile", ",", "kpt_label", ")", "\n", "#write RGB image to frames/frame_0####.txt", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'frames'", ",", "'frame_'", "+", "repr", "(", "index", ")", ".", "zfill", "(", "5", ")", "+", "'.jpg'", ")", ",", "rgb_image", ")", "\n", "#write mask label to masks/mask_0####.txt", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'masks'", ",", "'mask_'", "+", "repr", "(", "index", ")", ".", "zfill", "(", "5", ")", "+", "'.png'", ")", ",", "mask_label", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.annotations.Annotations.__init__": [[10, 65], ["numpy.load", "utils.sparse_model.SparseModel().reader", "open3d.io.read_point_cloud", "dense_model.voxel_down_sample.voxel_down_sample.voxel_down_sample", "numpy.eye", "int", "annotations.Annotations.list_of_scene_dirs.sort", "print", "print", "print", "open", "[].split", "list", "numpy.asarray", "utils.sparse_model.SparseModel", "os.path.join", "map", "os.listdir", "os.path.isdir", "os.path.join", "file.readlines"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.reader"], ["    ", "def", "__init__", "(", "self", ",", "dataset_dir_path", ",", "sparse_model_path", ",", "dense_model_path", ",", "scene_meta_path", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for Annotations class.\n        Input arguments:\n        dataset_dir_path   - path to root dataset directory\n        sparse_model_path  - path to sparse model (*.txt)\n        dense_model_path   - path to dense model (*.ply)\n        scene_meta_path    - path to scenes' meta info (*.npz)\n        visualize          - set 'True' to visualize\n        \"\"\"", "\n", "self", ".", "dataset_path", "=", "dataset_dir_path", "\n", "self", ".", "input_array", "=", "np", ".", "load", "(", "scene_meta_path", ")", "\n", "self", ".", "visualize", "=", "visualize", "\n", "#read sparse model from input array", "\n", "sparse_model", "=", "SparseModel", "(", ")", ".", "reader", "(", "sparse_model_path", ")", "\n", "#read dense model from .PLY file", "\n", "dense_model", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "dense_model_path", ")", "\n", "dense_model", "=", "dense_model", ".", "voxel_down_sample", "(", "voxel_size", "=", "0.005", ")", "\n", "\n", "#read camera intrinsics matrix from camera.txt in root directory", "\n", "self", ".", "cam_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "'camera.txt'", ")", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "camera_intrinsics", "=", "file", ".", "readlines", "(", ")", "[", "0", "]", ".", "split", "(", ")", "\n", "camera_intrinsics", "=", "list", "(", "map", "(", "float", ",", "camera_intrinsics", ")", ")", "\n", "", "self", ".", "cam_mat", "[", "0", ",", "0", "]", "=", "camera_intrinsics", "[", "0", "]", "\n", "self", ".", "cam_mat", "[", "1", ",", "1", "]", "=", "camera_intrinsics", "[", "1", "]", "\n", "self", ".", "cam_mat", "[", "0", ",", "2", "]", "=", "camera_intrinsics", "[", "2", "]", "\n", "self", ".", "cam_mat", "[", "1", ",", "2", "]", "=", "camera_intrinsics", "[", "3", "]", "\n", "\n", "#get number of scenes and number of keypoints", "\n", "self", ".", "num_scenes", "=", "int", "(", "self", ".", "input_array", "[", "'scenes'", "]", ".", "shape", "[", "0", "]", "/", "7", ")", "\n", "self", ".", "num_keypts", "=", "sparse_model", ".", "shape", "[", "0", "]", "\n", "\n", "#paths to each of the scene dirs inside root dir", "\n", "self", ".", "list_of_scene_dirs", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "self", ".", "dataset_path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "d", ")", ")", "]", "\n", "self", ".", "list_of_scene_dirs", ".", "sort", "(", ")", "\n", "self", ".", "list_of_scene_dirs", "=", "self", ".", "list_of_scene_dirs", "[", ":", "self", ".", "num_scenes", "]", "\n", "print", "(", "\"List of scenes: \"", ",", "self", ".", "list_of_scene_dirs", ")", "\n", "print", "(", "\"Number of scenes: \"", ",", "self", ".", "num_scenes", ")", "\n", "print", "(", "\"Number of keypoints: \"", ",", "self", ".", "num_keypts", ")", "\n", "\n", "#excect images to be 640x480", "\n", "self", ".", "width", "=", "640", "\n", "self", ".", "height", "=", "480", "\n", "\n", "#bounding-box needs to scaled up to avoid excessive cropping", "\n", "self", ".", "bbox_scale", "=", "1.5", "\n", "#define a ratio of labeled samples to produce", "\n", "self", ".", "ratio", "=", "10", "\n", "\n", "#this is the object model", "\n", "self", ".", "object_model", "=", "[", "sparse_model", ",", "np", ".", "asarray", "(", "dense_model", ".", "points", ")", "]", "\n", "#these are the relative scene transformations", "\n", "self", ".", "scene_tfs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.annotations.Annotations.visualize_sample": [[66, 95], ["cv2.findContours", "cv2.drawContours", "cv2.imshow", "cv2.waitKey", "cv2.circle", "cv2.boundingRect", "cv2.rectangle", "tuple", "print", "map"], "methods", ["None"], ["", "def", "visualize_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"\n        Visualize using opencv draw functions if self.visualize is set True.\n        Input arguments:\n        sample - labeled sample (RGB image, (keypoint, center pos, scale))\n        \"\"\"", "\n", "\n", "input_img", "=", "sample", "[", "0", "]", "\n", "keypts", "=", "sample", "[", "1", "]", "[", "0", "]", "\n", "bbox_cn", "=", "sample", "[", "1", "]", "[", "1", "]", "\n", "bbox_sd", "=", "sample", "[", "1", "]", "[", "2", "]", "*", "200", "\n", "mask", "=", "sample", "[", "1", "]", "[", "3", "]", "\n", "\n", "#draw keypoints", "\n", "for", "point", "in", "keypts", ":", "\n", "            ", "cv2", ".", "circle", "(", "input_img", ",", "tuple", "(", "map", "(", "int", ",", "point", ")", ")", ",", "5", ",", "(", "255", ",", "0", ",", "0", ")", ",", "-", "1", ")", "\n", "#draw convex hull", "\n", "", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "mask", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "cv2", ".", "drawContours", "(", "input_img", ",", "contours", ",", "0", ",", "(", "0", ",", "255", ",", "0", ")", ",", "-", "1", ")", "\n", "#draw bounding-box", "\n", "try", ":", "\n", "            ", "x", ",", "y", ",", "w", ",", "h", "=", "cv2", ".", "boundingRect", "(", "contours", "[", "0", "]", ")", "\n", "cv2", ".", "rectangle", "(", "input_img", ",", "(", "x", ",", "y", ")", ",", "(", "x", "+", "w", ",", "y", "+", "h", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Unexpected error:\"", ",", "e", ")", "\n", "pass", "\n", "", "cv2", ".", "imshow", "(", "'window'", ",", "input_img", ")", "\n", "cv2", ".", "waitKey", "(", "10", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.annotations.Annotations.project_points": [[96, 134], ["cv2.Rodrigues", "cv2.projectPoints", "cv2.projectPoints", "numpy.zeros", "numpy.ones", "cv2.morphologyEx", "cv2.findContours", "cv2.drawContours", "keypts.mean", "keypts.min", "keypts.max", "numpy.transpose", "numpy.transpose", "cv2.circle", "max", "numpy.asarray", "numpy.asarray", "tuple", "map"], "methods", ["None"], ["", "def", "project_points", "(", "self", ",", "input_points", ",", "input_pose", ")", ":", "\n", "        ", "\"\"\"\n        Function to project the sparse object model onto the RGB image\n        according to the provided pose of the object model in camera frame.\n        Input arguments:\n        input_points - [sparse object model, dense object model]\n        input_pose   - pose of object model in camera frame\n        Returns:\n        (u, v) pos of all object keypoints, bounding box center and scaled side.\n        \"\"\"", "\n", "#project 3D sparse-model to 2D image plane", "\n", "rvec", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "input_pose", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "tvec", "=", "input_pose", "[", ":", "3", ",", "3", "]", "\n", "imgpts", ",", "_", "=", "cv2", ".", "projectPoints", "(", "input_points", "[", "0", "]", ",", "rvec", ",", "tvec", ",", "self", ".", "cam_mat", ",", "None", ")", "\n", "keypts", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "imgpts", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "[", "0", "]", "\n", "\n", "#project 3D dense-model to 2D image plane", "\n", "imgpts", ",", "_", "=", "cv2", ".", "projectPoints", "(", "input_points", "[", "1", "]", ",", "rvec", ",", "tvec", ",", "self", ".", "cam_mat", ",", "None", ")", "\n", "objpts", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "imgpts", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "[", "0", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "point", "in", "objpts", ":", "\n", "            ", "cv2", ".", "circle", "(", "mask", ",", "tuple", "(", "map", "(", "int", ",", "point", ")", ")", ",", "2", ",", "255", ",", "-", "1", ")", "\n", "", "kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "mask", "=", "cv2", ".", "morphologyEx", "(", "mask", ",", "cv2", ".", "MORPH_CLOSE", ",", "kernel", ")", "\n", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "mask", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "cv2", ".", "drawContours", "(", "mask", ",", "contours", ",", "0", ",", "255", ",", "-", "1", ")", "\n", "\n", "#estimate a square box using mean and min-max in x- and y-", "\n", "bbox_cn", "=", "keypts", ".", "mean", "(", "0", ")", "\n", "xmin", ",", "ymin", "=", "keypts", ".", "min", "(", "0", ")", "\n", "xmax", ",", "ymax", "=", "keypts", ".", "max", "(", "0", ")", "\n", "if", "xmin", "<", "0", ":", "xmin", "=", "0", "\n", "if", "ymin", "<", "0", ":", "ymin", "=", "0", "\n", "if", "xmax", ">=", "(", "self", ".", "width", "-", "1", ")", ":", "xmax", "=", "(", "self", ".", "width", "-", "1", ")", "\n", "if", "ymax", ">=", "(", "self", ".", "height", "-", "1", ")", ":", "ymax", "=", "(", "self", ".", "height", "-", "1", ")", "\n", "bbox_cn", "=", "(", "(", "xmax", "+", "xmin", ")", "/", "2", ",", "(", "ymax", "+", "ymin", ")", "/", "2", ")", "\n", "bbox_sd", "=", "max", "(", "(", "xmax", "-", "xmin", ")", ",", "(", "ymax", "-", "ymin", ")", ")", "*", "self", ".", "bbox_scale", "\n", "return", "keypts", ",", "bbox_cn", ",", "bbox_sd", "/", "200.0", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.annotations.Annotations.process_input": [[135, 148], ["[].reshape", "[].reshape", "numpy.asarray", "transforms3d.compose", "transforms3d.compose", "transforms3d.quat2mat", "transforms3d.quat2mat", "numpy.ones", "zip"], "methods", ["None"], ["", "def", "process_input", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to extract data from the input array.\n        Input array is the output of the optimization step\n        which holds the generated sparse model of the object\n        and the relative scene transformations.\n        \"\"\"", "\n", "#get the relative scene transforamtions from input array", "\n", "out_ts", "=", "self", ".", "input_array", "[", "'scenes'", "]", "[", ":", "(", "self", ".", "num_scenes", ")", "*", "3", "]", ".", "reshape", "(", "(", "self", ".", "num_scenes", ",", "3", ")", ")", "\n", "out_qs", "=", "self", ".", "input_array", "[", "'scenes'", "]", "[", "(", "self", ".", "num_scenes", ")", "*", "3", ":", "(", "self", ".", "num_scenes", ")", "*", "7", "]", ".", "reshape", "(", "(", "self", ".", "num_scenes", ",", "4", ")", ")", "\n", "out_tfs", "=", "np", ".", "asarray", "(", "[", "tfa", ".", "compose", "(", "t", ",", "tfq", ".", "quat2mat", "(", "q", ")", ",", "np", ".", "ones", "(", "3", ")", ")", "for", "t", ",", "q", "in", "zip", "(", "out_ts", ",", "out_qs", ")", "]", ")", "\n", "self", ".", "scene_tfs", "=", "out_tfs", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.annotations.Annotations.generate_labels": [[149, 186], ["enumerate", "zip", "print", "open", "file.readlines", "open", "list", "img_name.split.split.split", "os.path.join", "cv2.resize", "transforms3d.compose", "transforms3d.compose", "annotations.Annotations.project_points", "samples.append", "os.path.join", "os.path.join", "list", "zip", "cv2.imread", "numpy.asarray", "transforms3d.quat2mat", "transforms3d.quat2mat", "numpy.ones", "numpy.dot", "annotations.Annotations.visualize_sample", "len", "len", "map", "file.readlines", "numpy.asarray", "numpy.linalg.inv", "cv2.resize.copy", "line.split"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.annotations.Annotations.project_points", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.annotations.Annotations.visualize_sample"], ["", "def", "generate_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Main function to generate labels for RGB images according to provided input array.\n        Returns a list of samples where each sample is tuple of the RGB image and the\n        associated label, where each label is a tuple of the keypoints, center and scale.\n        \"\"\"", "\n", "samples", "=", "[", "]", "\n", "#iterate through a zip of list of scene dirs and the relative scene tfs", "\n", "for", "data_dir_idx", ",", "(", "cur_scene_dir", ",", "sce_t", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "list_of_scene_dirs", ",", "self", ".", "scene_tfs", ")", ")", ":", "\n", "#read the names of image frames in this scene", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "cur_scene_dir", ",", "'associations.txt'", ")", ",", "'r'", ")", "as", "file", ":", "\n", "                ", "img_name_list", "=", "file", ".", "readlines", "(", ")", "\n", "\n", "#read the camera pose corresponding to each frame", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "cur_scene_dir", ",", "'camera.poses'", ")", ",", "'r'", ")", "as", "file", ":", "\n", "                ", "cam_pose_list", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", ")", "[", "1", ":", "]", ")", ")", "for", "line", "in", "file", ".", "readlines", "(", ")", "]", "\n", "\n", "#generate labels only for a fraction of total images in scene", "\n", "", "zipped_list", "=", "list", "(", "zip", "(", "img_name_list", ",", "cam_pose_list", ")", ")", "[", ":", ":", "self", ".", "ratio", "]", "\n", "for", "img_name", ",", "cam_pose", "in", "zipped_list", ":", "\n", "#read the RGB images using opencv", "\n", "                ", "img_name", "=", "img_name", ".", "split", "(", ")", "\n", "rgb_im_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "cur_scene_dir", ",", "img_name", "[", "3", "]", ")", "\n", "input_rgb_image", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "rgb_im_path", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ")", "\n", "#compose 4x4 camera pose matrix", "\n", "cam_t", "=", "tfa", ".", "compose", "(", "np", ".", "asarray", "(", "cam_pose", "[", ":", "3", "]", ")", ",", "tfq", ".", "quat2mat", "(", "np", ".", "asarray", "(", "[", "cam_pose", "[", "-", "1", "]", "]", "+", "cam_pose", "[", "3", ":", "-", "1", "]", ")", ")", ",", "np", ".", "ones", "(", "3", ")", ")", "\n", "#get 2D positions of keypoints, centers and scale of bounding box", "\n", "label", "=", "self", ".", "project_points", "(", "self", ".", "object_model", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "cam_t", ")", ",", "sce_t", ")", ")", "\n", "#label = self.project_points(self.object_model, np.dot(np.linalg.inv(sce_t), cam_t))", "\n", "samples", ".", "append", "(", "(", "input_rgb_image", ",", "label", ")", ")", "\n", "\n", "#visualize if required", "\n", "if", "self", ".", "visualize", ":", "\n", "                    ", "self", ".", "visualize_sample", "(", "(", "input_rgb_image", ".", "copy", "(", ")", ",", "label", ")", ")", "\n", "\n", "", "", "print", "(", "\"Created {} labeled samples from dataset {} (with {} raw samples).\"", ".", "format", "(", "len", "(", "zipped_list", ")", ",", "data_dir_idx", ",", "len", "(", "img_name_list", ")", ")", ")", "\n", "", "return", "samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.writer": [[6, 32], ["enumerate", "out_str.append", "str", "out_str.append", "str", "open", "out_file.write", "open", "out_file.write", "os.path.join", "os.path.join", "list"], "methods", ["None"], ["    ", "def", "writer", "(", "self", ",", "object_model", ",", "file_path", "=", "\"sparse_model.txt\"", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Function to save the generated sparse model in the following format\n        <point x=\"000000\" y=\"000000\" z=\"000000\" name=\"0\"/> in a .txt file.\n        Also writes some meta data.\n        Input arguments:\n        object_model - (Nx3) numpy array holding 3D positions of all keypoints\n                       where N is the number of keypoints on the model.\n        filename     - name of the output file inside the output directory.\n                       (sparse_model.txt by default)\n        overwrite    - set to True if overwrite existing file\n                       (False by default)\n        \"\"\"", "\n", "out_str", "=", "[", "\"<SparseObjectPoints>\"", "]", "\n", "for", "idx", ",", "point", "in", "enumerate", "(", "object_model", ")", ":", "\n", "            ", "kpt_str", "=", "str", "(", "\"\\t<point x=\\\"{}\\\" y=\\\"{}\\\" z=\\\"{}\\\"\"", ".", "format", "(", "*", "list", "(", "point", ")", ")", ")", "\n", "kpt_str", "=", "kpt_str", "+", "str", "(", "\" name=\\\"{}\\\"/>\"", ".", "format", "(", "idx", ")", ")", "\n", "out_str", ".", "append", "(", "kpt_str", ")", "\n", "", "out_str", ".", "append", "(", "\"</SparseObjectPoints>\\n\"", ")", "\n", "if", "overwrite", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "file_path", ")", ",", "'w'", ")", "as", "out_file", ":", "\n", "                ", "out_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "out_str", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "file_path", ")", ",", "'a'", ")", "as", "out_file", ":", "\n", "                ", "out_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "out_str", ")", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.reader": [[33, 55], ["numpy.asarray", "os.path.exists", "Exception", "open", "points.append", "names.append", "float", "line.strip", "float", "int", "in_file.readlines", "re.findall", "numpy.argsort", "line.strip().find", "re.findall", "item.split", "line.strip"], "methods", ["None"], ["", "def", "reader", "(", "self", ",", "file_path", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        Function to parse the sparse model file.\n        (This function can also parse *.pp PickedPoints file generated\n        through MeshLab using the PickPoints too.)\n        Return numpy array of shape (Nx3).\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "raise", "Exception", "(", "'File path %s does not exists'", "%", "file_path", ")", "\n", "", "points", "=", "[", "]", "\n", "names", "=", "[", "]", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "in_file", ":", "\n", "            ", "lines", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "in_file", ".", "readlines", "(", ")", "if", "line", ".", "strip", "(", ")", ".", "find", "(", "'point'", ")", "==", "1", "]", "\n", "", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "[", "re", ".", "findall", "(", "i", "+", "r'=\\\"[^\\\"]*\\\"'", ",", "line", ")", "[", "0", "]", "for", "i", "in", "[", "'x'", ",", "'y'", ",", "'z'", ",", "'name'", "]", "]", "\n", "dict_", "=", "{", "name", ":", "float", "(", "re", ".", "findall", "(", "\"[-+]?\\d*\\.\\d+|\\d+\"", ",", "val", ")", "[", "0", "]", ")", "for", "item", "in", "line", "for", "name", ",", "val", "in", "[", "item", ".", "split", "(", "'='", ")", "]", "}", "\n", "points", ".", "append", "(", "[", "dict_", "[", "'x'", "]", ",", "dict_", "[", "'y'", "]", ",", "dict_", "[", "'z'", "]", "]", ")", "\n", "names", ".", "append", "(", "int", "(", "dict_", "[", "'name'", "]", ")", ")", "\n", "#keypoints are unique, so they must be sorted according to ID", "\n", "", "out", "=", "np", ".", "asarray", "(", "[", "points", "[", "i", "]", "for", "i", "in", "np", ".", "argsort", "(", "names", ")", "]", ")", "\n", "out", "=", "out", "*", "float", "(", "scale", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.grasp_writer": [[56, 74], ["enumerate", "out_str.append", "str", "out_str.append", "open", "out_file.write", "os.path.join", "list"], "methods", ["None"], ["", "def", "grasp_writer", "(", "self", ",", "mat", ",", "file_path", "=", "\"grasp_point.txt\"", ")", ":", "\n", "        ", "\"\"\"\n        Function to write the generated grasp point (as a 4x4 transformation)\n        to disk in a .txt file.\n        Input arguments:\n        mat          - (4x4) numpy array holding the affine transformation\n                       to reach the grasp point with respect to the origin\n        filename     - name of the output file inside the output directory.\n                       (sparse_model.txt by default)\n        \"\"\"", "\n", "out_str", "=", "[", "\"<GraspPoint>\"", "]", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "mat", ")", ":", "\n", "            ", "kpt_str", "=", "str", "(", "\"\\t{}\"", ".", "format", "(", "list", "(", "row", ")", ")", ")", "\n", "out_str", ".", "append", "(", "kpt_str", ")", "\n", "", "out_str", ".", "append", "(", "\"</GraspPoint>\\n\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "file_path", ")", ",", "'a'", ")", "as", "out_file", ":", "\n", "            ", "out_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "out_str", ")", ")", "\n", "", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.partial_model.PartialModel.__init__": [[10, 38], ["numpy.load", "partial_model.PartialModel.list_of_scene_dirs.sort", "print", "print", "print", "os.listdir", "os.path.isdir", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "input_arr_path", ",", "input_model_path", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for PartialModel class.\n        Input arguments:\n        dataset_path   - path to root dataset directory\n        input_arr_path - path to input npz zipped archive\n        input_model_path - path to sparse model file\n        \"\"\"", "\n", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "input_array", "=", "np", ".", "load", "(", "input_arr_path", ")", "\n", "self", ".", "model_path", "=", "input_model_path", "\n", "\n", "#get number of scenes and number of keypoints", "\n", "self", ".", "num_scenes", "=", "self", ".", "input_array", "[", "'ref'", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "num_keypts", "=", "self", ".", "input_array", "[", "'ref'", "]", ".", "shape", "[", "2", "]", "\n", "\n", "#paths to each of the scene dirs inside root dir", "\n", "self", ".", "list_of_scene_dirs", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dataset_path", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "d", ")", ")", "]", "\n", "self", ".", "list_of_scene_dirs", ".", "sort", "(", ")", "\n", "self", ".", "list_of_scene_dirs", "=", "self", ".", "list_of_scene_dirs", "[", ":", "self", ".", "num_scenes", "]", "\n", "print", "(", "\"List of scenes: \"", ",", "self", ".", "list_of_scene_dirs", ")", "\n", "print", "(", "\"Number of scenes: \"", ",", "self", ".", "num_scenes", ")", "\n", "print", "(", "\"Number of keypoints: \"", ",", "self", ".", "num_keypts", ")", "\n", "\n", "#this is the object model", "\n", "self", ".", "object_model", "=", "[", "]", "\n", "#these are the relative scene transformations", "\n", "self", ".", "scene_tfs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.partial_model.PartialModel.process_input": [[39, 55], ["[].reshape", "[].reshape", "numpy.asarray", "utils.sparse_model.SparseModel().reader", "transforms3d.compose", "transforms3d.compose", "utils.sparse_model.SparseModel", "transforms3d.quat2mat", "transforms3d.quat2mat", "numpy.ones", "zip"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.reader"], ["", "def", "process_input", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to extract data from the input array.\n        Input array is the output of the optimization step\n        which holds the generated sparse model of the object\n        and the relative scene transformations.\n        \"\"\"", "\n", "#get the relative scene transforamtions from input array", "\n", "out_ts", "=", "self", ".", "input_array", "[", "'scenes'", "]", "[", ":", "(", "self", ".", "num_scenes", ")", "*", "3", "]", ".", "reshape", "(", "(", "self", ".", "num_scenes", ",", "3", ")", ")", "\n", "out_qs", "=", "self", ".", "input_array", "[", "'scenes'", "]", "[", "(", "self", ".", "num_scenes", ")", "*", "3", ":", "(", "self", ".", "num_scenes", ")", "*", "7", "]", ".", "reshape", "(", "(", "self", ".", "num_scenes", ",", "4", ")", ")", "\n", "out_tfs", "=", "np", ".", "asarray", "(", "[", "tfa", ".", "compose", "(", "t", ",", "tfq", ".", "quat2mat", "(", "q", ")", ",", "np", ".", "ones", "(", "3", ")", ")", "for", "t", ",", "q", "in", "zip", "(", "out_ts", ",", "out_qs", ")", "]", ")", "\n", "self", ".", "scene_tfs", "=", "out_tfs", "\n", "\n", "#get object model from input_array", "\n", "self", ".", "object_model", "=", "SparseModel", "(", ")", ".", "reader", "(", "self", ".", "model_path", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.partial_model.PartialModel.get_fragments_by_radius": [[56, 84], ["enumerate", "zip", "os.path.join", "open3d.io.read_point_cloud", "open3d.geometry.KDTreeFlann", "numpy.vstack", "numpy.dot().transpose", "open3d.geometry.PointCloud", "open3d.geometry.PointCloud.transform", "point_cloud_list.append", "open3d.geometry.KDTreeFlann.search_radius_vector_3d", "open3d.geometry.PointCloud.points.extend", "numpy.linalg.inv", "partial_model.PartialModel.object_model.transpose", "numpy.ones", "numpy.dot", "open3d.utility.Vector3dVector", "numpy.asarray"], "methods", ["None"], ["", "def", "get_fragments_by_radius", "(", "self", ",", "radius", "=", "0.05", ")", ":", "\n", "        ", "\"\"\"\n        Function to extract point cloud clusters using a radius vector\n        around each keypoint in sparse model, in each scene. Returns the\n        list of partial models transformed into world frame.\n        \"\"\"", "\n", "point_cloud_list", "=", "[", "]", "\n", "#iterate through a zip of list of scene dirs and the relative scene tfs", "\n", "for", "data_dir_idx", ",", "(", "cur_scene_dir", ",", "sce_t", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "list_of_scene_dirs", ",", "self", ".", "scene_tfs", ")", ")", ":", "\n", "#load scene point cloud from .PLY file", "\n", "            ", "cur_ply_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "cur_scene_dir", ",", "cur_scene_dir", "+", "'.ply'", ")", "\n", "pcd", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "cur_ply_path", ")", "\n", "\n", "#build KDTree", "\n", "pcd_tree", "=", "o3d", ".", "geometry", ".", "KDTreeFlann", "(", "pcd", ")", "\n", "\n", "#get object keypoints in scene frame", "\n", "model_points", "=", "np", ".", "vstack", "(", "[", "self", ".", "object_model", ".", "transpose", "(", ")", ",", "\n", "np", ".", "ones", "(", "self", ".", "object_model", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "model_points", "=", "np", ".", "dot", "(", "sce_t", ",", "model_points", ")", ".", "transpose", "(", ")", "\n", "\n", "fragment", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "for", "keypt", "in", "model_points", ":", "\n", "                ", "[", "_", ",", "idx", ",", "_", "]", "=", "pcd_tree", ".", "search_radius_vector_3d", "(", "keypt", "[", ":", "3", "]", ",", "radius", ")", "\n", "fragment", ".", "points", ".", "extend", "(", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "asarray", "(", "pcd", ".", "points", ")", "[", "idx", "]", ")", ")", "\n", "", "fragment", ".", "transform", "(", "np", ".", "linalg", ".", "inv", "(", "sce_t", ")", ")", "\n", "point_cloud_list", ".", "append", "(", "fragment", ")", "\n", "", "return", "point_cloud_list", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.partial_model.PartialModel.get_regions": [[85, 116], ["utils.region_growing.RegionGrowing", "enumerate", "zip", "numpy.vstack", "numpy.dot().transpose", "os.path.join", "open3d.io.read_point_cloud", "utils.region_growing.RegionGrowing.set_input_cloud", "utils.region_growing.RegionGrowing.box_crop", "utils.region_growing.RegionGrowing.set_seeds", "utils.region_growing.RegionGrowing.extract", "point_cloud_list.extend", "model_points[].mean", "partial_model.PartialModel.object_model.transpose", "numpy.ones", "numpy.dot", "region.transform", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.set_input_cloud", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.box_crop", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.set_seeds", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.region_growing.RegionGrowing.extract"], ["", "def", "get_regions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to extract point cloud clusters using region-growing clustering\n        with keypoints as initial seed points. Returns the\n        list of partial models transformed into world frame.\n        \"\"\"", "\n", "point_cloud_list", "=", "[", "]", "\n", "\n", "#initialize region growing class", "\n", "reg", "=", "RegionGrowing", "(", "(", "5", "/", "180", ")", "*", "3.14", ",", "1.0", ")", "\n", "\n", "#iterate through a zip of list of scene dirs and the relative scene tfs", "\n", "for", "data_dir_idx", ",", "(", "cur_scene_dir", ",", "sce_t", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "list_of_scene_dirs", ",", "self", ".", "scene_tfs", ")", ")", ":", "\n", "#get object keypoints in scene frame", "\n", "            ", "model_points", "=", "np", ".", "vstack", "(", "[", "self", ".", "object_model", ".", "transpose", "(", ")", ",", "\n", "np", ".", "ones", "(", "self", ".", "object_model", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "model_points", "=", "np", ".", "dot", "(", "sce_t", ",", "model_points", ")", ".", "transpose", "(", ")", "\n", "\n", "#load scene point cloud from .PLY file", "\n", "cur_ply_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "cur_scene_dir", ",", "cur_scene_dir", "+", "'.ply'", ")", "\n", "pcd", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "cur_ply_path", ")", "\n", "\n", "#extract regions using model points as initial seeds", "\n", "reg", ".", "set_input_cloud", "(", "pcd", ")", "\n", "reg", ".", "box_crop", "(", "model_points", "[", ":", ",", ":", "3", "]", ".", "mean", "(", "0", ")", ",", "0.003", ",", "0.2", ")", "\n", "reg", ".", "set_seeds", "(", "model_points", "[", ":", ",", ":", "3", "]", ")", "\n", "regions", "=", "reg", ".", "extract", "(", ")", "\n", "\n", "#transform each region to scene tf and add to list", "\n", "point_cloud_list", ".", "extend", "(", "[", "region", ".", "transform", "(", "np", ".", "linalg", ".", "inv", "(", "sce_t", ")", ")", "for", "region", "in", "regions", "]", ")", "\n", "", "return", "point_cloud_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.dataclasses.Label.__iter__": [[12, 14], ["iter", "dataclasses.astuple"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "astuple", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.__init__": [[12, 37], ["numpy.eye", "open", "[].split", "list", "os.path.join", "map", "file.readlines"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "output_dir", ",", "scale", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for Process class.\n        Input arguments:\n        dataset_path   - path to root dataset directory\n        output_dir     - path to output directory\n        scale          - scale parameter of the RGB-D sensor\n                         (1000 for Intel RealSense D435)\n        \"\"\"", "\n", "self", ".", "scene_kpts", "=", "[", "]", "\n", "self", ".", "select_vec", "=", "[", "]", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "sparse_model_file", "=", "None", "\n", "\n", "#get camera intrinsics", "\n", "self", ".", "camera_matrix", "=", "np", ".", "eye", "(", "3", ")", "\n", "self", ".", "camera_intrinsics", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'camera.txt'", ")", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "camera_intrinsics", "=", "file", ".", "readlines", "(", ")", "[", "0", "]", ".", "split", "(", ")", "\n", "self", ".", "camera_intrinsics", "=", "list", "(", "map", "(", "float", ",", "self", ".", "camera_intrinsics", ")", ")", "\n", "", "self", ".", "camera_matrix", "[", "0", ",", "0", "]", "=", "self", ".", "camera_intrinsics", "[", "0", "]", "\n", "self", ".", "camera_matrix", "[", "1", ",", "1", "]", "=", "self", ".", "camera_intrinsics", "[", "1", "]", "\n", "self", ".", "camera_matrix", "[", "0", ",", "2", "]", "=", "self", ".", "camera_intrinsics", "[", "2", "]", "\n", "self", ".", "camera_matrix", "[", "1", ",", "2", "]", "=", "self", ".", "camera_intrinsics", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.convert_2d_to_3d": [[38, 59], ["numpy.asarray", "pts_3d.append", "w.append", "process.Process.select_vec.append", "process.Process.select_vec.append"], "methods", ["None"], ["", "def", "convert_2d_to_3d", "(", "self", ",", "list_of_scenes", ")", ":", "\n", "        ", "\"\"\"\n        Function to convert 2D keypoint pixels to 3D points in scene.\n        \"\"\"", "\n", "self", ".", "select_vec", "=", "[", "]", "\n", "pts_3d", "=", "[", "]", "\n", "for", "scene", "in", "list_of_scenes", ":", "\n", "            ", "w", "=", "[", "]", "\n", "for", "(", "pt", ",", "dep", ",", "_", ")", "in", "scene", ":", "\n", "                ", "pt3d_z", "=", "(", "dep", "[", "pt", "[", "1", "]", ",", "pt", "[", "0", "]", "]", ")", "*", "(", "1.0", "/", "self", ".", "scale", ")", "\n", "if", "pt", "!=", "[", "-", "1", ",", "-", "1", "]", "and", "pt3d_z", "!=", "0", ":", "\n", "                    ", "pt3d_x", "=", "(", "pt", "[", "0", "]", "-", "self", ".", "camera_intrinsics", "[", "2", "]", ")", "*", "(", "pt3d_z", "/", "self", ".", "camera_intrinsics", "[", "0", "]", ")", "\n", "pt3d_y", "=", "(", "pt", "[", "1", "]", "-", "self", ".", "camera_intrinsics", "[", "3", "]", ")", "*", "(", "pt3d_z", "/", "self", ".", "camera_intrinsics", "[", "1", "]", ")", "\n", "pt3d", "=", "[", "pt3d_x", ",", "pt3d_y", ",", "pt3d_z", "]", "\n", "self", ".", "select_vec", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "pt3d", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "select_vec", ".", "append", "(", "0", ")", "\n", "", "w", ".", "append", "(", "pt3d", ")", "\n", "", "pts_3d", ".", "append", "(", "w", ")", "\n", "", "return", "np", ".", "asarray", "(", "pts_3d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.transform_points": [[60, 73], ["numpy.empty", "zip", "numpy.vstack", "numpy.array", "numpy.array", "transforms3d.quat2mat().dot", "transforms3d.quat2mat().dot", "zip", "numpy.asarray().transpose", "transforms3d.quat2mat", "transforms3d.quat2mat", "numpy.asarray"], "methods", ["None"], ["", "def", "transform_points", "(", "self", ",", "points_3d", ",", "list_of_scenes", ")", ":", "\n", "        ", "\"\"\"\n        Function to transform 3D points to the origins of respective scenes.\n        \"\"\"", "\n", "if", "points_3d", ".", "size", "==", "0", ":", "\n", "            ", "self", ".", "scene_kpts", "=", "[", "]", "\n", "return", "\n", "", "self", ".", "scene_kpts", "=", "np", ".", "empty", "(", "[", "0", ",", "3", ",", "points_3d", ".", "shape", "[", "1", "]", "]", ")", "\n", "for", "scene_points", ",", "scene_meta", "in", "zip", "(", "points_3d", ",", "list_of_scenes", ")", ":", "\n", "            ", "scene_poses", "=", "[", "(", "np", ".", "array", "(", "[", "pose", "[", "-", "1", "]", "]", "+", "pose", "[", "3", ":", "-", "1", "]", ")", ",", "np", ".", "array", "(", "pose", "[", ":", "3", "]", ")", ")", "for", "(", "_", ",", "_", ",", "pose", ")", "in", "scene_meta", "]", "\n", "pt_tf", "=", "[", "tfq", ".", "quat2mat", "(", "quat", ")", ".", "dot", "(", "pt3d", ")", "+", "trns", "for", "pt3d", ",", "(", "quat", ",", "trns", ")", "in", "zip", "(", "scene_points", ",", "scene_poses", ")", "]", "\n", "self", ".", "scene_kpts", "=", "np", ".", "vstack", "(", "(", "self", ".", "scene_kpts", ",", "np", ".", "asarray", "(", "pt_tf", ")", ".", "transpose", "(", ")", "[", "np", ".", "newaxis", "]", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.get_projection": [[74, 111], ["transforms3d.compose", "transforms3d.compose", "numpy.zeros", "len", "numpy.array", "transforms3d.quat2mat", "transforms3d.quat2mat", "numpy.ones", "transforms3d.compose", "transforms3d.compose", "numpy.linalg.inv().dot", "point_positions.append", "cv2.Rodrigues", "numpy.array", "numpy.array", "transforms3d.quat2mat", "transforms3d.quat2mat", "numpy.ones", "relative_tf[].dot", "numpy.eye", "cv2.projectPoints", "keypoint_pixels.transpose", "numpy.array", "isinstance", "isinstance", "numpy.array", "numpy.linalg.inv", "numpy.array"], "methods", ["None"], ["", "def", "get_projection", "(", "self", ",", "inputs", ",", "tar_cam_pose", ")", ":", "\n", "        ", "\"\"\"\n        Function to get corresponding pixel location in an image given pixel location in another image.\n        Uses camera_intrinsics and depth images to first get 3D positions of pixels in target frame,\n        then projects to another image using cv2.projectPoints().\n        Returns: (Nx2) NumPy array of N keypoints' 2D pixel coordinates.\n        Input arguments:\n        inputs - list of tuples of pixel coordinates, associated depth images and associated camera poses\n        \"\"\"", "\n", "if", "len", "(", "inputs", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "target_frame", "=", "tfa", ".", "compose", "(", "np", ".", "array", "(", "tar_cam_pose", "[", ":", "3", "]", ")", ",", "\n", "tfq", ".", "quat2mat", "(", "np", ".", "array", "(", "[", "tar_cam_pose", "[", "-", "1", "]", "]", "+", "tar_cam_pose", "[", "3", ":", "-", "1", "]", ")", ")", ",", "\n", "np", ".", "ones", "(", "3", ")", ")", "\n", "point_positions", "=", "[", "]", "\n", "for", "(", "pt", ",", "depth", ",", "pose", ")", "in", "inputs", ":", "\n", "            ", "if", "not", "isinstance", "(", "depth", ",", "np", ".", "ndarray", ")", "or", "not", "isinstance", "(", "pose", ",", "list", ")", ":", "\n", "                ", "continue", "\n", "", "pt3d_z", "=", "(", "depth", "[", "pt", "[", "1", "]", ",", "pt", "[", "0", "]", "]", ")", "*", "(", "1.0", "/", "self", ".", "scale", ")", "\n", "if", "pt", "==", "[", "-", "1", ",", "-", "1", "]", "or", "pt3d_z", "==", "0", ":", "\n", "                ", "continue", "\n", "", "pt3d_x", "=", "(", "pt", "[", "0", "]", "-", "self", ".", "camera_intrinsics", "[", "2", "]", ")", "*", "(", "pt3d_z", "/", "self", ".", "camera_intrinsics", "[", "0", "]", ")", "\n", "pt3d_y", "=", "(", "pt", "[", "1", "]", "-", "self", ".", "camera_intrinsics", "[", "3", "]", ")", "*", "(", "pt3d_z", "/", "self", ".", "camera_intrinsics", "[", "1", "]", ")", "\n", "position", "=", "[", "pt3d_x", ",", "pt3d_y", ",", "pt3d_z", "]", "\n", "source_frame", "=", "tfa", ".", "compose", "(", "np", ".", "array", "(", "pose", "[", ":", "3", "]", ")", ",", "tfq", ".", "quat2mat", "(", "np", ".", "array", "(", "[", "pose", "[", "-", "1", "]", "]", "+", "pose", "[", "3", ":", "-", "1", "]", ")", ")", ",", "np", ".", "ones", "(", "3", ")", ")", "\n", "relative_tf", "=", "np", ".", "linalg", ".", "inv", "(", "target_frame", ")", ".", "dot", "(", "source_frame", ")", "\n", "position_tf", "=", "relative_tf", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "position", ")", "+", "relative_tf", "[", ":", "3", ",", "3", "]", "\n", "point_positions", ".", "append", "(", "position_tf", ")", "\n", "\n", "#project 3D points to 2D image plane", "\n", "", "rvec", "=", "cv2", ".", "Rodrigues", "(", "np", ".", "eye", "(", "3", ")", ")", "[", "0", "]", "\n", "tvec", "=", "np", ".", "zeros", "(", "3", ")", "\n", "try", ":", "\n", "            ", "keypoint_pixels", "=", "cv2", ".", "projectPoints", "(", "np", ".", "array", "(", "point_positions", ")", ",", "rvec", ",", "tvec", ",", "self", ".", "camera_matrix", ",", "None", ")", "[", "0", "]", "\n", "return", "keypoint_pixels", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "[", "0", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.visualize_points_in_scene": [[112, 126], ["open3d.io.read_point_cloud", "vis_mesh_list.append", "open3d.visualization.draw_geometries", "open3d.geometry.TriangleMesh.create_sphere", "open3d.geometry.TriangleMesh.create_sphere.translate", "open3d.geometry.TriangleMesh.create_sphere.paint_uniform_color", "vis_mesh_list.append"], "methods", ["None"], ["", "", "def", "visualize_points_in_scene", "(", "self", ",", "scene_ply_path", ",", "scene_obj_kpts", ")", ":", "\n", "        ", "\"\"\"\n        Function to visualize a set of 3D points in a .PLY scene.\n        \"\"\"", "\n", "vis_mesh_list", "=", "[", "]", "\n", "scene_cloud", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "scene_ply_path", ")", "\n", "vis_mesh_list", ".", "append", "(", "scene_cloud", ")", "\n", "for", "keypt", "in", "scene_obj_kpts", ":", "\n", "            ", "keypt_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_sphere", "(", "radius", "=", "0.01", ")", "\n", "keypt_mesh", ".", "translate", "(", "keypt", ")", "\n", "keypt_mesh", ".", "paint_uniform_color", "(", "[", "0.1", ",", "0.1", ",", "0.7", "]", ")", "\n", "vis_mesh_list", ".", "append", "(", "keypt_mesh", ")", "\n", "", "o3d", ".", "visualization", ".", "draw_geometries", "(", "vis_mesh_list", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.compute": [[127, 183], ["len", "len", "numpy.zeros", "enumerate", "os.path.join", "numpy.savez", "os.path.isdir", "os.makedirs", "numpy.eye", "utils.sparse_model.SparseModel().reader", "app.geo_constrain.predict", "app.geo_constrain.predict", "app.geo_constrain.predict", "app.geo_constrain.predict", "numpy.asarray", "numpy.asarray", "numpy.concatenate", "numpy.array().repeat", "numpy.array().repeat", "numpy.array().repeat", "app.optimize.predict", "app.optimize.predict", "app.optimize.predict", "app.optimize.predict", "app.optimize.predict.x[].reshape", "app.optimize.predict.x[].reshape", "object_model.squeeze.squeeze.squeeze", "utils.sparse_model.SparseModel().writer", "numpy.concatenate", "print", "print", "print", "numpy.nonzero", "numpy.nonzero", "process.Process.scene_kpts.transpose", "process.Process.scene_kpts[].transpose", "os.path.join", "utils.sparse_model.SparseModel", "numpy.array", "transforms3d.mat2quat", "transforms3d.mat2quat", "numpy.asarray.flatten", "numpy.asarray.flatten", "numpy.array", "numpy.array", "numpy.array", "utils.sparse_model.SparseModel", "numpy.zeros", "transforms3d.qeye", "transforms3d.qeye", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.reader", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.writer"], ["", "def", "compute", "(", "self", ",", "sparse_model_flag", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Function to compute the sparse model and the relative scene transformations\n        through optimization. Output directory will be created if not exists.\n        Returns a success boolean.\n        \"\"\"", "\n", "# create output dir if not exists", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "\n", "#populate selection matrix from select_vec", "\n", "", "total_kpt_count", "=", "len", "(", "self", ".", "select_vec", ")", "\n", "found_kpt_count", "=", "len", "(", "np", ".", "nonzero", "(", "self", ".", "select_vec", ")", "[", "0", "]", ")", "\n", "selection_matrix", "=", "np", ".", "zeros", "(", "(", "found_kpt_count", "*", "3", ",", "total_kpt_count", "*", "3", ")", ")", "\n", "for", "idx", ",", "nz_idx", "in", "enumerate", "(", "np", ".", "nonzero", "(", "self", ".", "select_vec", ")", "[", "0", "]", ")", ":", "\n", "            ", "selection_matrix", "[", "(", "idx", "*", "3", ")", ":", "(", "idx", "*", "3", ")", "+", "3", ",", "(", "nz_idx", "*", "3", ")", ":", "(", "nz_idx", "*", "3", ")", "+", "3", "]", "=", "np", ".", "eye", "(", "3", ")", "\n", "\n", "", "computed_vector", "=", "[", "]", "\n", "success_flag", "=", "False", "\n", "if", "sparse_model_flag", ":", "\n", "            ", "object_model", "=", "SparseModel", "(", ")", ".", "reader", "(", "self", ".", "sparse_model_file", ")", "\n", "success_flag", ",", "res", "=", "app", ".", "geo_constrain", ".", "predict", "(", "object_model", ",", "self", ".", "scene_kpts", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ",", "self", ".", "select_vec", ")", "\n", "scene_t", "=", "np", ".", "asarray", "(", "[", "np", ".", "array", "(", "i", "[", ":", "3", ",", "3", "]", ")", "for", "i", "in", "res", "]", ")", "\n", "scene_q", "=", "np", ".", "asarray", "(", "[", "tfq", ".", "mat2quat", "(", "np", ".", "array", "(", "i", "[", ":", "3", ",", ":", "3", "]", ")", ")", "for", "i", "in", "res", "]", ")", "\n", "computed_vector", "=", "np", ".", "concatenate", "(", "(", "scene_t", ".", "flatten", "(", ")", ",", "scene_q", ".", "flatten", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "#initialize quaternions and translations for each scene", "\n", "            ", "scene_t_ini", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ".", "repeat", "(", "self", ".", "scene_kpts", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "scene_q_ini", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ".", "repeat", "(", "self", ".", "scene_kpts", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "scene_P_ini", "=", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "0", "]", "]", "]", ")", ".", "repeat", "(", "self", ".", "scene_kpts", ".", "shape", "[", "2", "]", ",", "axis", "=", "0", ")", "\n", "#initialize with known keypoints", "\n", "scene_P_ini", "=", "self", ".", "scene_kpts", "[", "0", "]", ".", "transpose", "(", ")", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "#main optimization step", "\n", "res", "=", "app", ".", "optimize", ".", "predict", "(", "self", ".", "scene_kpts", ",", "scene_t_ini", ",", "scene_q_ini", ",", "scene_P_ini", ",", "selection_matrix", ")", "\n", "\n", "#extract generated sparse object model optimization output", "\n", "len_ts", "=", "scene_t_ini", "[", "1", ":", "]", ".", "size", "\n", "len_qs", "=", "scene_q_ini", "[", "1", ":", "]", ".", "size", "\n", "object_model", "=", "res", ".", "x", "[", "len_ts", "+", "len_qs", ":", "]", ".", "reshape", "(", "scene_P_ini", ".", "shape", ")", "\n", "object_model", "=", "object_model", ".", "squeeze", "(", ")", "\n", "#save the generated sparse object model", "\n", "SparseModel", "(", ")", ".", "writer", "(", "object_model", ",", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"sparse_model.txt\"", ")", ",", "True", ")", "\n", "computed_vector", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "3", ")", ",", "res", ".", "x", "[", ":", "len_ts", "]", ",", "tfq", ".", "qeye", "(", ")", ",", "res", ".", "x", "[", "len_ts", ":", "len_ts", "+", "len_qs", "]", "]", ")", "\n", "success_flag", "=", "res", ".", "success", "\n", "\n", "#save the input and the output from optimization step", "\n", "", "out_fn", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'saved_meta_data'", ")", "\n", "np", ".", "savez", "(", "out_fn", ",", "model", "=", "object_model", ",", "scenes", "=", "computed_vector", ",", "ref", "=", "self", ".", "scene_kpts", ",", "sm", "=", "selection_matrix", ")", "\n", "\n", "if", "success_flag", ":", "\n", "            ", "print", "(", "\"--------\\n--------\\n--------\"", ")", "\n", "print", "(", "\"Computed results saved at {}\"", ".", "format", "(", "out_fn", ")", ")", "\n", "print", "(", "\"--------\\n--------\\n--------\"", ")", "\n", "\n", "", "return", "success_flag", ",", "object_model", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.define_grasp_point": [[184, 235], ["open3d.io.read_point_cloud", "open3d.io.read_point_cloud.estimate_normals", "open3d.io.read_point_cloud.normalize_normals", "open3d.geometry.KDTreeFlann", "open3d.geometry.KDTreeFlann.search_knn_vector_3d", "normals.mean", "numpy.cross", "numpy.array", "transforms3d.compose", "transforms3d.compose", "utils.sparse_model.SparseModel().grasp_writer", "vis_mesh_list.append", "open3d.geometry.TriangleMesh.create_coordinate_frame", "open3d.geometry.TriangleMesh.create_coordinate_frame.transform", "vis_mesh_list.append", "open3d.visualization.draw_geometries", "os.path.isdir", "os.makedirs", "Exception", "os.path.exists", "Exception", "process.Process.scene_kpts.transpose", "process.Process.scene_kpts.transpose", "numpy.asarray", "numpy.linalg.norm", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.ones", "os.path.join", "list", "utils.sparse_model.SparseModel"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.grasp_writer"], ["", "def", "define_grasp_point", "(", "self", ",", "ply_path", ")", ":", "\n", "        ", "\"\"\"\n        Function to define grasp pose.\n        \"\"\"", "\n", "# create output dir if not exists", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "\n", "", "if", "(", "self", ".", "scene_kpts", ".", "shape", ")", "!=", "(", "1", ",", "3", ",", "2", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"2 3D points must exist to define a grasp pose.\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "ply_path", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"%s path does not exist\"", "%", "ply_path", ")", "\n", "#get 3 user-defined 3D points", "\n", "", "point_1", "=", "self", ".", "scene_kpts", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "[", "0", ",", "0", "]", "\n", "point_2", "=", "self", ".", "scene_kpts", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "[", "0", ",", "1", "]", "\n", "#read point cloud and get normals", "\n", "scene_cloud", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "ply_path", ")", "\n", "scene_cloud", ".", "estimate_normals", "(", ")", "\n", "scene_cloud", ".", "normalize_normals", "(", ")", "\n", "scene_points", "=", "scene_cloud", ".", "points", "\n", "scene_normals", "=", "scene_cloud", ".", "normals", "\n", "scene_tree", "=", "o3d", ".", "geometry", ".", "KDTreeFlann", "(", "scene_cloud", ")", "\n", "#get neightbors and find normal direction", "\n", "[", "_", ",", "idx", ",", "_", "]", "=", "scene_tree", ".", "search_knn_vector_3d", "(", "point_1", ",", "200", ")", "\n", "normals", "=", "np", ".", "asarray", "(", "scene_normals", ")", "[", "list", "(", "idx", ")", "]", "\n", "normal_dir", "=", "normals", ".", "mean", "(", "0", ")", "\n", "normal_dir", "=", "normal_dir", "/", "np", ".", "linalg", ".", "norm", "(", "normal_dir", ")", "\n", "#get intersection of point and plane", "\n", "# d = (a.x_0 + b.y_0 + c.z_0)/(a.x_u + b.y_u + c.z_u)", "\n", "lamda", "=", "np", ".", "dot", "(", "normal_dir", ",", "point_1", ")", "/", "np", ".", "dot", "(", "normal_dir", ",", "point_2", ")", "\n", "point_i", "=", "lamda", "*", "point_2", "\n", "vector_x", "=", "(", "point_i", "-", "point_1", ")", "\n", "vector_y", "=", "np", ".", "cross", "(", "normal_dir", ",", "vector_x", ")", "\n", "#normalize", "\n", "vector_x", "=", "vector_x", "/", "np", ".", "linalg", ".", "norm", "(", "vector_x", ")", "\n", "vector_y", "=", "vector_y", "/", "np", ".", "linalg", ".", "norm", "(", "vector_y", ")", "\n", "#create rotation matrix", "\n", "rot_mat", "=", "np", ".", "array", "(", "[", "vector_x", ",", "vector_y", ",", "normal_dir", "]", ")", "\n", "tf_mat", "=", "tfa", ".", "compose", "(", "point_1", ",", "rot_mat", ",", "np", ".", "ones", "(", "3", ")", ")", "\n", "\n", "#save the grasp point", "\n", "SparseModel", "(", ")", ".", "grasp_writer", "(", "tf_mat", ",", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"sparse_model.txt\"", ")", ")", "\n", "\n", "#visualize in open3d", "\n", "vis_mesh_list", "=", "[", "]", "\n", "vis_mesh_list", ".", "append", "(", "scene_cloud", ")", "\n", "coordinate_frame", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "0.2", ")", "\n", "coordinate_frame", ".", "transform", "(", "tf_mat", ")", "\n", "vis_mesh_list", ".", "append", "(", "coordinate_frame", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "vis_mesh_list", ")", "\n", "return", "True", ",", "tf_mat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.__init__": [[12, 51], ["PyQt5.QtWidgets.QApplication", "PyQt5.QtWidgets.QApplication.setApplicationName", "app.qt_root.MainWindow.__init__", "super().show", "PyQt5.QtWidgets.QApplication.exec_"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.__init__"], ["    ", "def", "__init__", "(", "self", ",", "window_title", ",", "output_dir", ",", "num_keypoints", "=", "8", ",", "scale", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the GUI class.\n        Input arguments:\n        window_title   - title name for the GUI\n        dataset_path   - path to root dataset directory\n        output_dir     - path to output directory\n        num_keypoints  - total number of keypoints on the object\n                         (decided by the user)\n        scale          - scale parameter of the RGB-D sensor\n                         (1000 for Intel RealSense D435)\n        scenes         - names of scene dirs to read\n        \"\"\"", "\n", "#assumes images are 640x480", "\n", "self", ".", "width", "=", "640", "\n", "self", ".", "height", "=", "480", "\n", "\n", "# Get input arguments", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "num_keypoints", "=", "num_keypoints", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "# Counter for scenes", "\n", "self", ".", "_count", "=", "-", "1", "\n", "\n", "self", ".", "scenes", "=", "[", "]", "\n", "self", ".", "current_rgb_image", "=", "[", "]", "\n", "self", ".", "current_dep_image", "=", "[", "]", "\n", "self", ".", "current_cam_pos", "=", "[", "]", "\n", "\n", "# Set mode", "\n", "self", ".", "build_model_mode", "=", "True", "\n", "\n", "#run the main loop", "\n", "app", "=", "QtWidgets", ".", "QApplication", "(", "[", "]", ")", "\n", "app", ".", "setApplicationName", "(", "\"RapidPoseLabelsApplication\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "window_title", ",", "self", ".", "num_keypoints", ")", "\n", "super", "(", ")", ".", "show", "(", ")", "\n", "app", ".", "exec_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.act_func_load_data": [[52, 110], ["PyQt5.QtWidgets.QFileDialog", "PyQt5.QtWidgets.QFileDialog.setFileMode", "list_of_scene_dirs.sort", "print", "print", "app.process.Process", "gui.GUI.scenes.clear", "enumerate", "gui.GUI.scene_list.clear", "gui.GUI.load_model_act.setEnabled", "gui.GUI.next_scene_btn.setEnabled", "PyQt5.QtWidgets.QFileDialog.exec_", "PyQt5.QtWidgets.QFileDialog.selectedFiles", "os.listdir", "len", "app.dataclasses.Scene", "gui.GUI.scenes.append", "PyQt5.QtWidgets.QListWidgetItem", "PyQt5.QtWidgets.QListWidgetItem.setFlags", "gui.GUI.scene_list.addItem", "os.path.join", "os.path.isdir", "print", "os.listdir", "os.path.isdir", "os.path.join", "os.path.join", "os.listdir", "os.path.join", "PyQt5.QtWidgets.QListWidgetItem.flags", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.clear", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.clear", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.addItem"], ["", "def", "act_func_load_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to choose the root dataset directory.\n        \"\"\"", "\n", "# Open QFileDialog", "\n", "dialog", "=", "QtWidgets", ".", "QFileDialog", "(", "caption", "=", "\"Load dataset\"", ")", "\n", "dialog", ".", "setFileMode", "(", "QtWidgets", ".", "QFileDialog", ".", "Directory", ")", "\n", "if", "not", "dialog", ".", "exec_", "(", ")", ":", "\n", "            ", "return", "\n", "", "self", ".", "dataset_path", "=", "dialog", ".", "selectedFiles", "(", ")", "[", "0", "]", "\n", "\n", "# Check if directory contains scenes", "\n", "try", ":", "\n", "            ", "if", "not", "'camera.txt'", "in", "os", ".", "listdir", "(", "self", ".", "dataset_path", ")", ":", "\n", "                ", "raise", "Exception", "\n", "", "for", "fn", "in", "os", ".", "listdir", "(", "self", ".", "dataset_path", ")", ":", "\n", "                ", "dn", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "fn", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "dn", ")", ":", "\n", "                    ", "if", "not", "(", "'associations.txt'", "in", "os", ".", "listdir", "(", "dn", ")", "or", "\n", "'camera.poses'", "in", "os", ".", "listdir", "(", "dn", ")", "or", "\n", "'depth'", "in", "os", ".", "listdir", "(", "dn", ")", "or", "\n", "'rgb'", "in", "os", ".", "listdir", "(", "dn", ")", ")", ":", "\n", "                        ", "raise", "Exception", "\n", "", "", "", "", "except", ":", "\n", "            ", "print", "(", "\"Check format of root directory.\"", ")", "\n", "return", "\n", "\n", "# Get the list of scene directories", "\n", "", "list_of_scene_dirs", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "self", ".", "dataset_path", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "d", ")", ")", "]", "\n", "list_of_scene_dirs", ".", "sort", "(", ")", "\n", "print", "(", "\"Number of scenes: \"", ",", "len", "(", "list_of_scene_dirs", ")", ")", "\n", "print", "(", "\"List of scenes: \"", ",", "list_of_scene_dirs", ")", "\n", "\n", "# Initialize Process object", "\n", "self", ".", "process", "=", "Process", "(", "self", ".", "dataset_path", ",", "self", ".", "output_dir", ",", "self", ".", "scale", ")", "\n", "\n", "# Initialize Scene object", "\n", "self", ".", "scenes", ".", "clear", "(", ")", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "list_of_scene_dirs", ")", ":", "\n", "            ", "scene_obj", "=", "Scene", "(", "idx", ",", "\n", "item", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "item", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "item", ",", "item", "+", "'.ply'", ")", ",", "\n", "[", "]", ")", "\n", "self", ".", "scenes", ".", "append", "(", "scene_obj", ")", "\n", "\n", "# List the scenes in dock window", "\n", "", "self", ".", "scene_list", ".", "clear", "(", ")", "\n", "for", "scene", "in", "self", ".", "scenes", ":", "\n", "            ", "item", "=", "QtWidgets", ".", "QListWidgetItem", "(", "\n", "\"scene {}: {}\"", ".", "format", "(", "scene", ".", "index", ",", "scene", ".", "path", ")", "\n", ")", "\n", "item", ".", "setFlags", "(", "item", ".", "flags", "(", ")", "&", "~", "QtCore", ".", "Qt", ".", "ItemIsEnabled", ")", "\n", "self", ".", "scene_list", ".", "addItem", "(", "item", ")", "\n", "\n", "# Configure state of widgets", "\n", "", "self", ".", "load_model_act", ".", "setEnabled", "(", "True", ")", "\n", "self", ".", "next_scene_btn", ".", "setEnabled", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.act_func_load_model": [[111, 127], ["PyQt5.QtWidgets.QFileDialog", "PyQt5.QtWidgets.QFileDialog.setFileMode", "PyQt5.QtWidgets.QFileDialog.setNameFilter", "PyQt5.QtWidgets.QFileDialog.selectedFiles", "gui.GUI.mode_qlabel.setText", "PyQt5.QtWidgets.QFileDialog.exec_"], "methods", ["None"], ["", "def", "act_func_load_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to load existing sparse, keypoint model.\n        \"\"\"", "\n", "# Open QFileDialog", "\n", "dialog", "=", "QtWidgets", ".", "QFileDialog", "(", "caption", "=", "\"Load model\"", ")", "\n", "dialog", ".", "setFileMode", "(", "QtWidgets", ".", "QFileDialog", ".", "ExistingFile", ")", "\n", "dialog", ".", "setNameFilter", "(", "\"Sparse model files (*.pp *.txt)\"", ")", "\n", "if", "not", "dialog", ".", "exec_", "(", ")", ":", "\n", "            ", "return", "\n", "", "filename", "=", "dialog", ".", "selectedFiles", "(", ")", "\n", "self", ".", "process", ".", "sparse_model_file", "=", "filename", "\n", "\n", "# Set mode", "\n", "self", ".", "build_model_mode", "=", "False", "\n", "self", ".", "mode_qlabel", ".", "setText", "(", "\"Mode: Use existing model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.btn_func_skip": [[128, 134], ["gui.GUI.new_point", "PyQt5.QtCore.QPoint"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.new_point"], ["", "def", "btn_func_skip", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to skip a keypoint.\n        (-1, -1) is added to the list of keypoints.\n        \"\"\"", "\n", "self", ".", "new_point", "(", "QtCore", ".", "QPoint", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.btn_func_reset": [[135, 149], ["gui.GUI.canvas.update", "gui.GUI.statusBar().showMessage", "super().update_keypoint_dock", "gui.GUI.statusBar"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.update_keypoint_dock"], ["", "def", "btn_func_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to reset the current scene.\n        All selected keypoints for the current scene will be cleared.\n        \"\"\"", "\n", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", "=", "[", "]", "\n", "self", ".", "canvas", ".", "last_clicked", "=", "None", "\n", "self", ".", "canvas", ".", "current_points", "=", "[", "]", "\n", "self", ".", "canvas", ".", "locked_points", "=", "[", "]", "\n", "self", ".", "canvas", ".", "update", "(", ")", "\n", "\n", "# Update status bar and dock", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\"Cleared all labels in this scene\"", ",", "5000", ")", "\n", "super", "(", ")", ".", "update_keypoint_dock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.btn_func_load": [[150, 183], ["int", "gui.GUI.img_name_list[].split", "os.path.join", "os.path.join", "cv2.resize", "cv2.resize", "gui.GUI.process.get_projection", "PyQt5.QtGui.QPixmap", "gui.GUI.canvas.loadPixmap", "gui.GUI.canvas.update", "gui.GUI.skip_btn.setEnabled", "gui.GUI.display_btn.setEnabled", "gui.GUI.statusBar().showMessage", "random.randrange", "gui.GUI.load_slider.setValue", "cv2.cvtColor", "cv2.imread", "PyQt5.QtCore.QPoint", "cv2.imread", "gui.GUI.statusBar", "int", "len"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.get_projection", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.loadPixmap"], ["", "def", "btn_func_load", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Function to load an image from the current scene dir.\n        \"\"\"", "\n", "if", "value", "==", "-", "1", ":", "\n", "            ", "value", "=", "random", ".", "randrange", "(", "1000", ")", "\n", "self", ".", "load_slider", ".", "setValue", "(", "value", ")", "\n", "", "read_indx", "=", "int", "(", "int", "(", "value", ")", "*", "(", "len", "(", "self", ".", "img_name_list", "[", ":", "-", "1", "]", ")", ")", "/", "1000", ")", "\n", "\n", "# Read the RGB, Depth image and Camera pose at the index", "\n", "read_pair", "=", "(", "self", ".", "img_name_list", "[", "read_indx", "]", ")", ".", "split", "(", ")", "\n", "dep_im_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "path", ",", "read_pair", "[", "1", "]", ")", "\n", "rgb_im_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "path", ",", "read_pair", "[", "3", "]", ")", "\n", "self", ".", "current_rgb_image", "=", "cv2", ".", "resize", "(", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "rgb_im_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ")", "\n", "self", ".", "current_dep_image", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "dep_im_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ")", "\n", "self", ".", "current_cam_pos", "=", "self", ".", "cam_pose_list", "[", "read_indx", "]", "\n", "\n", "# Get projection of keypoints on current image", "\n", "matched", "=", "self", ".", "process", ".", "get_projection", "(", "\n", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", ",", "self", ".", "current_cam_pos", "\n", ")", "\n", "\n", "# Update canvas", "\n", "pixmap", "=", "QtGui", ".", "QPixmap", "(", "rgb_im_path", ")", "\n", "self", ".", "canvas", ".", "loadPixmap", "(", "pixmap", ")", "\n", "self", ".", "canvas", ".", "locked_points", "=", "[", "QtCore", ".", "QPoint", "(", "point", "[", "0", "]", ",", "point", "[", "1", "]", ")", "for", "point", "in", "matched", "]", "\n", "self", ".", "canvas", ".", "update", "(", ")", "\n", "# Configure state of widgets", "\n", "self", ".", "skip_btn", ".", "setEnabled", "(", "True", ")", "\n", "self", ".", "display_btn", ".", "setEnabled", "(", "True", ")", "\n", "# Update status bar", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\n", "\"Loaded image\\nfrom scene {}\"", ".", "format", "(", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "name", ")", ",", "5000", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.btn_func_prev_scene": [[185, 195], ["gui.GUI.load_scene", "gui.GUI.next_scene_btn.setEnabled", "gui.GUI.prev_scene_btn.setEnabled"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.load_scene"], ["", "def", "btn_func_prev_scene", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to move to prev scene\n        \"\"\"", "\n", "self", ".", "_count", "-=", "1", "\n", "success", "=", "self", ".", "load_scene", "(", ")", "\n", "if", "not", "success", ":", "\n", "            ", "self", ".", "prev_scene_btn", ".", "setEnabled", "(", "False", ")", "\n", "# Configure the state of widgets", "\n", "", "self", ".", "next_scene_btn", ".", "setEnabled", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.btn_func_next_scene": [[196, 214], ["gui.GUI.load_scene", "gui.GUI.skip_btn.setEnabled", "gui.GUI.prev_scene_btn.setEnabled", "gui.GUI.display_btn.setEnabled", "len", "gui.GUI.next_scene_btn.setEnabled", "len", "gui.GUI.btn_func_skip"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.load_scene", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_skip"], ["", "def", "btn_func_next_scene", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to lock labeled keypoints in current scene\n        and move to next scene.\n        \"\"\"", "\n", "# Fill the scene with dummy labels", "\n", "if", "0", "<=", "self", ".", "_count", "<", "len", "(", "self", ".", "scenes", ")", ":", "\n", "            ", "while", "len", "(", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", ")", "<", "self", ".", "num_keypoints", ":", "\n", "                ", "self", ".", "btn_func_skip", "(", ")", "\n", "\n", "", "", "self", ".", "_count", "+=", "1", "\n", "success", "=", "self", ".", "load_scene", "(", ")", "\n", "if", "not", "success", ":", "\n", "            ", "self", ".", "next_scene_btn", ".", "setEnabled", "(", "False", ")", "\n", "# Configure state of widgets", "\n", "", "self", ".", "skip_btn", ".", "setEnabled", "(", "False", ")", "\n", "self", ".", "prev_scene_btn", ".", "setEnabled", "(", "True", ")", "\n", "self", ".", "display_btn", ".", "setEnabled", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.btn_func_compute": [[215, 231], ["gui.GUI.process.convert_2d_to_3d", "gui.GUI.process.transform_points", "gui.GUI.process.compute", "gui.GUI.process.visualize_points_in_scene", "gui.GUI.process.compute"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.convert_2d_to_3d", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.transform_points", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.compute", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.repeat_exp.visualize_points_in_scene", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.compute"], ["", "def", "btn_func_compute", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to perform the optimization/procrustes step.\n        \"\"\"", "\n", "#2D-to-3D conversion", "\n", "scenes_labels", "=", "[", "scene", ".", "labels", "for", "scene", "in", "self", ".", "scenes", "]", "[", ":", "self", ".", "_count", "]", "\n", "keypoint_pos", "=", "self", ".", "process", ".", "convert_2d_to_3d", "(", "scenes_labels", ")", "\n", "# Transform points to origins of respective scene", "\n", "self", ".", "process", ".", "transform_points", "(", "keypoint_pos", ",", "scenes_labels", ")", "\n", "# Final computation step", "\n", "if", "self", ".", "build_model_mode", ":", "\n", "            ", "res", ",", "obj", "=", "self", ".", "process", ".", "compute", "(", "False", ")", "\n", "# Visualize the generated object model in first scene", "\n", "self", ".", "process", ".", "visualize_points_in_scene", "(", "self", ".", "scenes", "[", "0", "]", ".", "mesh", ",", "obj", ")", "\n", "", "else", ":", "\n", "            ", "res", ",", "obj", "=", "self", ".", "process", ".", "compute", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.btn_func_display": [[232, 246], ["gui.GUI.process.convert_2d_to_3d", "gui.GUI.process.transform_points", "gui.GUI.process.visualize_points_in_scene", "gui.GUI.process.scene_kpts[].transpose"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.convert_2d_to_3d", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.process.Process.transform_points", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.repeat_exp.visualize_points_in_scene"], ["", "", "def", "btn_func_display", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to convert the labeled 2D keypoitns into 3D positions\n        and visualize them in the scene.\n        \"\"\"", "\n", "#2D-to-3D conversion", "\n", "keypoint_pos", "=", "self", ".", "process", ".", "convert_2d_to_3d", "(", "[", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", "]", ")", "\n", "#transform points to origins of respective scene", "\n", "self", ".", "process", ".", "transform_points", "(", "keypoint_pos", ",", "[", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", "]", ")", "\n", "#visualize the labeled keypoints in scene", "\n", "obj", "=", "[", "]", "\n", "if", "not", "self", ".", "process", ".", "scene_kpts", "==", "[", "]", ":", "\n", "            ", "obj", "=", "self", ".", "process", ".", "scene_kpts", "[", "0", "]", ".", "transpose", "(", ")", "\n", "", "self", ".", "process", ".", "visualize_points_in_scene", "(", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "mesh", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.read_current_scene": [[251, 265], ["open", "file.readlines", "open", "len", "os.path.join", "os.path.join", "list", "map", "file.readlines", "line.split"], "methods", ["None"], ["", "def", "read_current_scene", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "(", "0", "<=", "self", ".", "_count", "<", "len", "(", "self", ".", "scenes", ")", ")", ":", "\n", "                ", "raise", "IndexError", "\n", "", "cur_scene_dir", "=", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "path", "\n", "# Read image names", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cur_scene_dir", ",", "'associations.txt'", ")", ",", "'r'", ")", "as", "file", ":", "\n", "                ", "self", ".", "img_name_list", "=", "file", ".", "readlines", "(", ")", "\n", "# Read camera trajectory", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cur_scene_dir", ",", "'camera.poses'", ")", ",", "'r'", ")", "as", "file", ":", "\n", "                ", "self", ".", "cam_pose_list", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", ")", "[", "1", ":", "]", ")", ")", "for", "line", "in", "file", ".", "readlines", "(", ")", "]", "\n", "", "", "except", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.new_point": [[266, 282], ["gui.GUI.canvas.current_points.append", "app.dataclasses.Label", "gui.GUI.scenes[].labels.append", "gui.GUI.reset_btn.setEnabled", "gui.GUI.compute_btn.setEnabled", "gui.GUI.statusBar().showMessage", "super().update_keypoint_dock", "len", "gui.GUI.statusBar().showMessage", "point.x", "point.y", "gui.GUI.statusBar", "gui.GUI.statusBar", "point.x", "point.y"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.update_keypoint_dock"], ["", "def", "new_point", "(", "self", ",", "point", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", ")", "==", "self", ".", "num_keypoints", ":", "\n", "            ", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\"All keypoints selected\"", ")", "\n", "return", "\n", "\n", "# Add point to canvas", "\n", "", "self", ".", "canvas", ".", "current_points", ".", "append", "(", "point", ")", "\n", "# Add the point, current depth image and current camera pose to scene", "\n", "label", "=", "Label", "(", "[", "point", ".", "x", "(", ")", ",", "point", ".", "y", "(", ")", "]", ",", "self", ".", "current_dep_image", ",", "self", ".", "current_cam_pos", ")", "\n", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", ".", "append", "(", "label", ")", "\n", "# Configure state of widgets", "\n", "self", ".", "reset_btn", ".", "setEnabled", "(", "True", ")", "\n", "self", ".", "compute_btn", ".", "setEnabled", "(", "True", ")", "\n", "# Update status bar and dock", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\"Keypoint added:{}\"", ".", "format", "(", "(", "point", ".", "x", "(", ")", ",", "point", ".", "y", "(", ")", ")", ",", "5000", ")", ")", "\n", "super", "(", ")", ".", "update_keypoint_dock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.load_scene": [[283, 311], ["gui.GUI.read_current_scene", "gui.GUI.canvas.loadPixmap", "gui.GUI.load_btn.setEnabled", "gui.GUI.load_slider.setEnabled", "gui.GUI.reset_btn.setEnabled", "gui.GUI.statusBar().showMessage", "super().update_keypoint_dock", "gui.GUI.scene_list.item", "gui.GUI.setFlags", "gui.GUI.scene_list.setCurrentRow", "gui.GUI.load_btn.setEnabled", "gui.GUI.load_slider.setEnabled", "gui.GUI.reset_btn.setEnabled", "super().update_keypoint_dock", "gui.GUI.scene_list.setCurrentRow", "PyQt5.QtGui.QPixmap", "bool", "len", "gui.GUI.statusBar", "gui.GUI.flags"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.read_current_scene", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.loadPixmap", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.update_keypoint_dock", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.update_keypoint_dock"], ["", "def", "load_scene", "(", "self", ")", ":", "\n", "# Read the current scene", "\n", "        ", "success", "=", "self", ".", "read_current_scene", "(", ")", "\n", "if", "success", ":", "\n", "# Configure state of widgets", "\n", "            ", "self", ".", "load_btn", ".", "setEnabled", "(", "True", ")", "\n", "self", ".", "load_slider", ".", "setEnabled", "(", "True", ")", "\n", "self", ".", "reset_btn", ".", "setEnabled", "(", "bool", "(", "len", "(", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", ")", ")", ")", "\n", "# Update status bar and dock", "\n", "self", ".", "statusBar", "(", ")", ".", "showMessage", "(", "\n", "\"Moving to scene:\\n{}\"", ".", "format", "(", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "name", ")", ",", "5000", "\n", ")", "\n", "super", "(", ")", ".", "update_keypoint_dock", "(", ")", "\n", "item", "=", "self", ".", "scene_list", ".", "item", "(", "self", ".", "_count", ")", "\n", "item", ".", "setFlags", "(", "item", ".", "flags", "(", ")", "|", "QtCore", ".", "Qt", ".", "ItemIsEnabled", ")", "\n", "self", ".", "scene_list", ".", "setCurrentRow", "(", "self", ".", "_count", ")", "\n", "", "else", ":", "\n", "# Configure state of wigets", "\n", "            ", "self", ".", "load_btn", ".", "setEnabled", "(", "False", ")", "\n", "self", ".", "load_slider", ".", "setEnabled", "(", "False", ")", "\n", "self", ".", "reset_btn", ".", "setEnabled", "(", "False", ")", "\n", "# Update status bar and dock", "\n", "super", "(", ")", ".", "update_keypoint_dock", "(", ")", "\n", "self", ".", "scene_list", ".", "setCurrentRow", "(", "-", "1", ")", "\n", "\n", "# Reset the canvs", "\n", "", "self", ".", "canvas", ".", "loadPixmap", "(", "QtGui", ".", "QPixmap", "(", ")", ")", "\n", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.gui.GUI.keypoint_count_changed": [[312, 322], ["range", "len"], "methods", ["None"], ["", "def", "keypoint_count_changed", "(", "self", ",", "value", ")", ":", "\n", "        ", "old_value", "=", "self", ".", "num_keypoints", "\n", "self", ".", "num_keypoints", "=", "value", "\n", "if", "value", "==", "old_value", ":", "\n", "            ", "return", "\n", "", "elif", "value", "<", "old_value", ":", "\n", "            ", "for", "count", "in", "range", "(", "len", "(", "self", ".", "scenes", ")", ")", ":", "\n", "                ", "self", ".", "scenes", "[", "count", "]", ".", "labels", "=", "self", ".", "scenes", "[", "count", "]", ".", "labels", "[", ":", "self", ".", "num_keypoints", "]", "\n", "", "", "else", ":", "\n", "            ", "return", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.__init__": [[11, 26], ["PyQt5.QtWidgets.QMainWindow.__init__", "qt_root.MainWindow.setWindowTitle", "qt_root.MainWindow.setGeometry", "PyQt5.QtWidgets.QDesktopWidget().availableGeometry().center", "qt_root.MainWindow.frameGeometry", "qt_root.MainWindow.moveCenter", "qt_root.MainWindow.move", "qt_root.MainWindow.main_layout", "qt_root.MainWindow.topLeft", "PyQt5.QtWidgets.QDesktopWidget().availableGeometry", "PyQt5.QtWidgets.QDesktopWidget"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.__init__", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.main_layout"], ["    ", "def", "__init__", "(", "self", ",", "window_title", ",", "keypoint_count", "=", "8", ")", ":", "\n", "        ", "super", "(", "MainWindow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "init_num_kpts", "=", "keypoint_count", "\n", "\n", "# Set up the MainWindow object at center of screen", "\n", "self", ".", "setWindowTitle", "(", "window_title", ")", "\n", "self", ".", "setGeometry", "(", "0", ",", "0", ",", "1200", ",", "600", ")", "\n", "centerPoint", "=", "QtWidgets", ".", "QDesktopWidget", "(", ")", ".", "availableGeometry", "(", ")", ".", "center", "(", ")", "\n", "qtRectangle", "=", "self", ".", "frameGeometry", "(", ")", "\n", "qtRectangle", ".", "moveCenter", "(", "centerPoint", ")", "\n", "self", ".", "move", "(", "qtRectangle", ".", "topLeft", "(", ")", ")", "\n", "\n", "# Main layout", "\n", "self", ".", "main_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_load": [[27, 29], ["None"], "methods", ["None"], ["", "def", "btn_func_load", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_skip": [[30, 32], ["None"], "methods", ["None"], ["", "def", "btn_func_skip", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_reset": [[33, 35], ["None"], "methods", ["None"], ["", "def", "btn_func_reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_next_scene": [[36, 38], ["None"], "methods", ["None"], ["", "def", "btn_func_next_scene", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_prev_scene": [[39, 41], ["None"], "methods", ["None"], ["", "def", "btn_func_prev_scene", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_compute": [[42, 44], ["None"], "methods", ["None"], ["", "def", "btn_func_compute", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_display": [[45, 47], ["None"], "methods", ["None"], ["", "def", "btn_func_display", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_create": [[48, 50], ["None"], "methods", ["None"], ["", "def", "btn_func_create", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_choose": [[51, 53], ["None"], "methods", ["None"], ["", "def", "btn_func_choose", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_grasping": [[54, 56], ["None"], "methods", ["None"], ["", "def", "btn_func_grasping", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_quit": [[57, 59], ["qt_root.MainWindow.close"], "methods", ["None"], ["", "def", "btn_func_quit", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.act_func_zoom_in": [[60, 62], ["qt_root.MainWindow.scaleImage"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.scaleImage"], ["", "def", "act_func_zoom_in", "(", "self", ")", ":", "\n", "        ", "self", ".", "scaleImage", "(", "1.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.act_func_zoom_out": [[63, 65], ["qt_root.MainWindow.scaleImage"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.scaleImage"], ["", "def", "act_func_zoom_out", "(", "self", ")", ":", "\n", "        ", "self", ".", "scaleImage", "(", "0.9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.act_func_normal_size": [[66, 69], ["qt_root.MainWindow.canvas.adjustSize"], "methods", ["None"], ["", "def", "act_func_normal_size", "(", "self", ")", ":", "\n", "        ", "self", ".", "canvas", ".", "scale", "=", "1.0", "\n", "self", ".", "canvas", ".", "adjustSize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.act_func_load_data": [[70, 72], ["None"], "methods", ["None"], ["", "def", "act_func_load_data", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.act_func_load_model": [[73, 75], ["None"], "methods", ["None"], ["", "def", "act_func_load_model", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.act_func_info": [[76, 80], ["webbrowser.open"], "methods", ["None"], ["", "def", "act_func_info", "(", "self", ")", ":", "\n", "        ", "import", "webbrowser", "\n", "url", "=", "\"https://github.com/rohanpsingh/rapidposelabels/blob/master/README.md\"", "\n", "webbrowser", ".", "open", "(", "url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.act_func_icons": [[81, 83], ["PyQt5.QtWidgets.QMessageBox.information"], "methods", ["None"], ["", "def", "act_func_icons", "(", "self", ")", ":", "\n", "        ", "QtWidgets", ".", "QMessageBox", ".", "information", "(", "self", ",", "\"Icons\"", ",", "\"Some icons by Yusuke Kamiyamane <p.yusukekamiyamane.com>\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.main_layout": [[84, 263], ["app.widgets.QCanvas", "qt_root.MainWindow.canvas.newPoint.connect", "qt_root.MainWindow.canvas.zoomRequest.connect", "qt_root.MainWindow.canvas.scrollRequest.connect", "PyQt5.QtWidgets.QScrollArea", "qt_root.MainWindow.scrollArea.setBackgroundRole", "qt_root.MainWindow.scrollArea.setWidget", "qt_root.MainWindow.scrollArea.setWidgetResizable", "qt_root.MainWindow.scrollArea.setVisible", "qt_root.MainWindow.setCentralWidget", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.zoom_in_act.setIcon", "qt_root.MainWindow.zoom_in_act.triggered.connect", "qt_root.MainWindow.zoom_in_act.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.zoom_out_act.setIcon", "qt_root.MainWindow.zoom_out_act.triggered.connect", "qt_root.MainWindow.zoom_out_act.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.normal_size_act.setIcon", "qt_root.MainWindow.normal_size_act.triggered.connect", "qt_root.MainWindow.normal_size_act.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.load_data_act.setIcon", "qt_root.MainWindow.load_data_act.triggered.connect", "qt_root.MainWindow.load_data_act.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.load_model_act.setIcon", "qt_root.MainWindow.load_model_act.triggered.connect", "qt_root.MainWindow.load_model_act.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.info_act.setIcon", "PyQt5.QtWidgets.QAction", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.load_btn.setIcon", "qt_root.MainWindow.load_btn.triggered.connect", "qt_root.MainWindow.load_btn.setStatusTip", "qt_root.MainWindow.load_btn.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.skip_btn.setIcon", "qt_root.MainWindow.skip_btn.triggered.connect", "qt_root.MainWindow.skip_btn.setStatusTip", "qt_root.MainWindow.skip_btn.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.reset_btn.setIcon", "qt_root.MainWindow.reset_btn.triggered.connect", "qt_root.MainWindow.reset_btn.setStatusTip", "qt_root.MainWindow.reset_btn.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.next_scene_btn.setIcon", "qt_root.MainWindow.next_scene_btn.triggered.connect", "qt_root.MainWindow.next_scene_btn.setStatusTip", "qt_root.MainWindow.next_scene_btn.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.prev_scene_btn.setIcon", "qt_root.MainWindow.prev_scene_btn.triggered.connect", "qt_root.MainWindow.prev_scene_btn.setStatusTip", "qt_root.MainWindow.prev_scene_btn.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.compute_btn.setIcon", "qt_root.MainWindow.compute_btn.triggered.connect", "qt_root.MainWindow.compute_btn.setStatusTip", "qt_root.MainWindow.compute_btn.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.display_btn.setIcon", "qt_root.MainWindow.display_btn.triggered.connect", "qt_root.MainWindow.display_btn.setStatusTip", "qt_root.MainWindow.display_btn.setEnabled", "PyQt5.QtWidgets.QAction", "qt_root.MainWindow.quit_btn.setIcon", "qt_root.MainWindow.quit_btn.triggered.connect", "qt_root.MainWindow.quit_btn.setStatusTip", "qt_root.MainWindow.quit_btn.setEnabled", "PyQt5.QtWidgets.QSlider", "qt_root.MainWindow.load_slider.setMinimum", "qt_root.MainWindow.load_slider.setMaximum", "qt_root.MainWindow.load_slider.sliderMoved.connect", "qt_root.MainWindow.load_slider.setStatusTip", "qt_root.MainWindow.load_slider.setEnabled", "app.widgets.QKeypointCount", "qt_root.MainWindow.keypoint_count.setEnabled", "qt_root.MainWindow.keypoint_count.numKeypoints.connect", "PyQt5.QtWidgets.QWidgetAction", "PyQt5.QtWidgets.QWidgetAction.setDefaultWidget", "app.widgets.QToolMenu", "app.widgets.QToolMenu.setIconSize", "qt_root.MainWindow.addToolBar", "app.widgets.QToolMenu.addAction", "app.widgets.QToolMenu.addWidget", "app.widgets.QToolMenu.addAction", "app.widgets.QToolMenu.addAction", "app.widgets.QToolMenu.addAction", "app.widgets.QToolMenu.addAction", "app.widgets.QToolMenu.addAction", "app.widgets.QToolMenu.addAction", "app.widgets.QToolMenu.addAction", "app.widgets.QToolMenu.addAction", "app.widgets.QKeypointListWidget", "qt_root.MainWindow.keypoint_list.itemClicked.connect", "PyQt5.QtWidgets.QDockWidget", "qt_root.MainWindow.keypoint_dock.setWidget", "qt_root.MainWindow.addDockWidget", "PyQt5.QtWidgets.QListWidget", "PyQt5.QtWidgets.QDockWidget", "qt_root.MainWindow.scene_dock.setWidget", "qt_root.MainWindow.addDockWidget", "PyQt5.QtWidgets.QMenu", "qt_root.MainWindow.fileMenu.addAction", "qt_root.MainWindow.fileMenu.addAction", "qt_root.MainWindow.fileMenu.addAction", "qt_root.MainWindow.fileMenu.addSeparator", "qt_root.MainWindow.fileMenu.addAction", "PyQt5.QtWidgets.QMenu", "qt_root.MainWindow.viewMenu.addAction", "qt_root.MainWindow.viewMenu.addAction", "qt_root.MainWindow.viewMenu.addAction", "PyQt5.QtWidgets.QMenu", "qt_root.MainWindow.helpMenu.addAction", "qt_root.MainWindow.helpMenu.addAction", "qt_root.MainWindow.menuBar().addMenu", "qt_root.MainWindow.menuBar().addMenu", "qt_root.MainWindow.menuBar().addMenu", "qt_root.MainWindow.setStatusBar", "PyQt5.QtWidgets.QLabel", "qt_root.MainWindow.mode_qlabel.setText", "qt_root.MainWindow.statusBar().addPermanentWidget", "PyQt5.QtGui.QIcon.fromTheme", "PyQt5.QtGui.QIcon.fromTheme", "PyQt5.QtGui.QIcon.fromTheme", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtGui.QIcon", "PyQt5.QtCore.QSize", "PyQt5.QtWidgets.QStatusBar", "qt_root.MainWindow.btn_func_load", "qt_root.MainWindow.menuBar", "qt_root.MainWindow.menuBar", "qt_root.MainWindow.menuBar", "qt_root.MainWindow.statusBar"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.btn_func_load"], ["", "def", "main_layout", "(", "self", ")", ":", "\n", "# Canvas", "\n", "        ", "self", ".", "canvas", "=", "QCanvas", "(", ")", "\n", "self", ".", "canvas", ".", "newPoint", ".", "connect", "(", "self", ".", "new_point", ")", "\n", "self", ".", "canvas", ".", "zoomRequest", ".", "connect", "(", "self", ".", "zoom_request", ")", "\n", "self", ".", "canvas", ".", "scrollRequest", ".", "connect", "(", "self", ".", "scroll_request", ")", "\n", "\n", "# Scroll area", "\n", "self", ".", "scrollArea", "=", "QtWidgets", ".", "QScrollArea", "(", ")", "\n", "self", ".", "scrollArea", ".", "setBackgroundRole", "(", "QtGui", ".", "QPalette", ".", "Dark", ")", "\n", "self", ".", "scrollArea", ".", "setWidget", "(", "self", ".", "canvas", ")", "\n", "self", ".", "scrollArea", ".", "setWidgetResizable", "(", "True", ")", "\n", "self", ".", "scrollArea", ".", "setVisible", "(", "True", ")", "\n", "\n", "# Set central widget", "\n", "self", ".", "setCentralWidget", "(", "self", ".", "scrollArea", ")", "\n", "\n", "# Action (zoom in)", "\n", "self", ".", "zoom_in_act", "=", "QtWidgets", ".", "QAction", "(", "\"Zoom &In (10%)\"", ",", "shortcut", "=", "\"Ctrl++\"", ")", "\n", "self", ".", "zoom_in_act", ".", "setIcon", "(", "QtGui", ".", "QIcon", ".", "fromTheme", "(", "\"zoom-in\"", ")", ")", "\n", "self", ".", "zoom_in_act", ".", "triggered", ".", "connect", "(", "self", ".", "act_func_zoom_in", ")", "\n", "self", ".", "zoom_in_act", ".", "setEnabled", "(", "True", ")", "\n", "\n", "# Action (zoom out)", "\n", "self", ".", "zoom_out_act", "=", "QtWidgets", ".", "QAction", "(", "\"Zoom &Out (10%)\"", ",", "shortcut", "=", "\"Ctrl+-\"", ")", "\n", "self", ".", "zoom_out_act", ".", "setIcon", "(", "QtGui", ".", "QIcon", ".", "fromTheme", "(", "\"zoom-out\"", ")", ")", "\n", "self", ".", "zoom_out_act", ".", "triggered", ".", "connect", "(", "self", ".", "act_func_zoom_out", ")", "\n", "self", ".", "zoom_out_act", ".", "setEnabled", "(", "True", ")", "\n", "\n", "# Action (normal size)", "\n", "self", ".", "normal_size_act", "=", "QtWidgets", ".", "QAction", "(", "\"&Normal Size\"", ",", "shortcut", "=", "\"Ctrl+0\"", ")", "\n", "self", ".", "normal_size_act", ".", "setIcon", "(", "QtGui", ".", "QIcon", ".", "fromTheme", "(", "\"zoom-original\"", ")", ")", "\n", "self", ".", "normal_size_act", ".", "triggered", ".", "connect", "(", "self", ".", "act_func_normal_size", ")", "\n", "self", ".", "normal_size_act", ".", "setEnabled", "(", "True", ")", "\n", "\n", "# Action", "\n", "self", ".", "load_data_act", "=", "QtWidgets", ".", "QAction", "(", "\"Load &Dataset\"", ",", "shortcut", "=", "\"Ctrl+O\"", ")", "\n", "self", ".", "load_data_act", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"folder-horizontal.png\"", ")", ")", "\n", "self", ".", "load_data_act", ".", "triggered", ".", "connect", "(", "self", ".", "act_func_load_data", ")", "\n", "self", ".", "load_data_act", ".", "setEnabled", "(", "True", ")", "\n", "\n", "# Action", "\n", "self", ".", "load_model_act", "=", "QtWidgets", ".", "QAction", "(", "\"Load &Model\"", ",", "shortcut", "=", "\"Ctrl+M\"", ")", "\n", "self", ".", "load_model_act", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"document-text.png\"", ")", ")", "\n", "self", ".", "load_model_act", ".", "triggered", ".", "connect", "(", "self", ".", "act_func_load_model", ")", "\n", "self", ".", "load_model_act", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# Action", "\n", "self", ".", "info_act", "=", "QtWidgets", ".", "QAction", "(", "\"&Info\"", ",", "triggered", "=", "self", ".", "act_func_info", ")", "\n", "self", ".", "info_act", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"information.png\"", ")", ")", "\n", "\n", "# Action", "\n", "self", ".", "icons_act", "=", "QtWidgets", ".", "QAction", "(", "\"Icons\"", ",", "triggered", "=", "self", ".", "act_func_icons", ")", "\n", "\n", "# Button", "\n", "self", ".", "load_btn", "=", "QtWidgets", ".", "QAction", "(", "'Load New Image'", ",", "shortcut", "=", "\"Space\"", ")", "\n", "self", ".", "load_btn", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"image-sunset.png\"", ")", ")", "\n", "self", ".", "load_btn", ".", "triggered", ".", "connect", "(", "lambda", "x", ":", "self", ".", "btn_func_load", "(", "-", "1", ")", ")", "\n", "self", ".", "load_btn", ".", "setStatusTip", "(", "\"Click here to load a new image from current scene.\"", ")", "\n", "self", ".", "load_btn", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# Button", "\n", "self", ".", "skip_btn", "=", "QtWidgets", ".", "QAction", "(", "'Skip keypoint'", ",", "shortcut", "=", "\"Ctrl+Tab\"", ")", "\n", "self", ".", "skip_btn", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"minus.png\"", ")", ")", "\n", "self", ".", "skip_btn", ".", "triggered", ".", "connect", "(", "self", ".", "btn_func_skip", ")", "\n", "self", ".", "skip_btn", ".", "setStatusTip", "(", "\"Click here if keypoint is not visible in current scene.\"", ")", "\n", "self", ".", "skip_btn", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# Button", "\n", "self", ".", "reset_btn", "=", "QtWidgets", ".", "QAction", "(", "'Scene reset'", ",", "shortcut", "=", "\"Ctrl+R\"", ")", "\n", "self", ".", "reset_btn", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"exclamation.png\"", ")", ")", "\n", "self", ".", "reset_btn", ".", "triggered", ".", "connect", "(", "self", ".", "btn_func_reset", ")", "\n", "self", ".", "reset_btn", ".", "setStatusTip", "(", "\"Click here to clear all labels in current scene.\"", ")", "\n", "self", ".", "reset_btn", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# Button", "\n", "self", ".", "next_scene_btn", "=", "QtWidgets", ".", "QAction", "(", "'Next scene'", ",", "shortcut", "=", "\"Ctrl+N\"", ")", "\n", "self", ".", "next_scene_btn", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"arrow.png\"", ")", ")", "\n", "self", ".", "next_scene_btn", ".", "triggered", ".", "connect", "(", "self", ".", "btn_func_next_scene", ")", "\n", "self", ".", "next_scene_btn", ".", "setStatusTip", "(", "\"Click here to confirm labels in current scene and move to next.\"", ")", "\n", "self", ".", "next_scene_btn", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# Button", "\n", "self", ".", "prev_scene_btn", "=", "QtWidgets", ".", "QAction", "(", "'Previous scene'", ",", "shortcut", "=", "\"Ctrl+P\"", ")", "\n", "self", ".", "prev_scene_btn", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"arrow-180.png\"", ")", ")", "\n", "self", ".", "prev_scene_btn", ".", "triggered", ".", "connect", "(", "self", ".", "btn_func_prev_scene", ")", "\n", "self", ".", "prev_scene_btn", ".", "setStatusTip", "(", "\"Click here to go to previous scene.\"", ")", "\n", "self", ".", "prev_scene_btn", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# Button", "\n", "self", ".", "compute_btn", "=", "QtWidgets", ".", "QAction", "(", "'Compute'", ")", "\n", "self", ".", "compute_btn", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"tick.png\"", ")", ")", "\n", "self", ".", "compute_btn", ".", "triggered", ".", "connect", "(", "self", ".", "btn_func_compute", ")", "\n", "self", ".", "compute_btn", ".", "setStatusTip", "(", "\"Click here to solve the optimization problem.\"", ")", "\n", "self", ".", "compute_btn", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# Button", "\n", "self", ".", "display_btn", "=", "QtWidgets", ".", "QAction", "(", "'Visualize'", ")", "\n", "self", ".", "display_btn", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"color.png\"", ")", ")", "\n", "self", ".", "display_btn", ".", "triggered", ".", "connect", "(", "self", ".", "btn_func_display", ")", "\n", "self", ".", "display_btn", ".", "setStatusTip", "(", "\"Click here to visualize the labeled points in 3D.\"", ")", "\n", "self", ".", "display_btn", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# Button", "\n", "self", ".", "quit_btn", "=", "QtWidgets", ".", "QAction", "(", "'Quit'", ",", "shortcut", "=", "\"Alt+Q\"", ")", "\n", "self", ".", "quit_btn", ".", "setIcon", "(", "QtGui", ".", "QIcon", "(", "ICONS_DIR", "+", "\"cross-circle.png\"", ")", ")", "\n", "self", ".", "quit_btn", ".", "triggered", ".", "connect", "(", "self", ".", "btn_func_quit", ")", "\n", "self", ".", "quit_btn", ".", "setStatusTip", "(", "\"Click here to close the GUI (inputs will not be saved).\"", ")", "\n", "self", ".", "quit_btn", ".", "setEnabled", "(", "True", ")", "\n", "\n", "# Slider", "\n", "self", ".", "load_slider", "=", "QtWidgets", ".", "QSlider", "(", "QtCore", ".", "Qt", ".", "Horizontal", ")", "\n", "self", ".", "load_slider", ".", "setMinimum", "(", "0", ")", "\n", "self", ".", "load_slider", ".", "setMaximum", "(", "999", ")", "\n", "#self.load_slider.setTickPosition(QtWidgets.QSlider.TicksBelow)", "\n", "self", ".", "load_slider", ".", "sliderMoved", ".", "connect", "(", "self", ".", "btn_func_load", ")", "\n", "self", ".", "load_slider", ".", "setStatusTip", "(", "\"Slide to load images from the scene.\"", ")", "\n", "self", ".", "load_slider", ".", "setEnabled", "(", "False", ")", "\n", "\n", "# SpinBox", "\n", "self", ".", "keypoint_count", "=", "QKeypointCount", "(", "self", ".", "init_num_kpts", ")", "\n", "self", ".", "keypoint_count", ".", "setEnabled", "(", "True", ")", "\n", "self", ".", "keypoint_count", ".", "numKeypoints", ".", "connect", "(", "self", ".", "keypoint_count_changed", ")", "\n", "keypoint_count_act", "=", "QtWidgets", ".", "QWidgetAction", "(", "self", ")", "\n", "keypoint_count_act", ".", "setDefaultWidget", "(", "self", ".", "keypoint_count", ")", "\n", "\n", "# Toolbar on the right", "\n", "right_toolbar", "=", "QToolMenu", "(", "\"Tool Menu\"", ")", "\n", "right_toolbar", ".", "setIconSize", "(", "QtCore", ".", "QSize", "(", "32", ",", "32", ")", ")", "\n", "self", ".", "addToolBar", "(", "QtCore", ".", "Qt", ".", "RightToolBarArea", ",", "right_toolbar", ")", "\n", "right_toolbar", ".", "addAction", "(", "self", ".", "load_btn", ")", "\n", "right_toolbar", ".", "addWidget", "(", "self", ".", "load_slider", ")", "\n", "right_toolbar", ".", "addAction", "(", "self", ".", "skip_btn", ")", "\n", "right_toolbar", ".", "addAction", "(", "self", ".", "reset_btn", ")", "\n", "right_toolbar", ".", "addAction", "(", "self", ".", "next_scene_btn", ")", "\n", "right_toolbar", ".", "addAction", "(", "self", ".", "prev_scene_btn", ")", "\n", "right_toolbar", ".", "addAction", "(", "self", ".", "compute_btn", ")", "\n", "right_toolbar", ".", "addAction", "(", "self", ".", "display_btn", ")", "\n", "right_toolbar", ".", "addAction", "(", "keypoint_count_act", ")", "\n", "right_toolbar", ".", "addAction", "(", "self", ".", "quit_btn", ")", "\n", "\n", "# Docked widgets on the left", "\n", "self", ".", "keypoint_list", "=", "QKeypointListWidget", "(", ")", "\n", "self", ".", "keypoint_list", ".", "itemClicked", ".", "connect", "(", "self", ".", "keypoint_clicked", ")", "\n", "self", ".", "keypoint_dock", "=", "QtWidgets", ".", "QDockWidget", "(", "\"Keypoint List\"", ")", "\n", "self", ".", "keypoint_dock", ".", "setWidget", "(", "self", ".", "keypoint_list", ")", "\n", "self", ".", "addDockWidget", "(", "QtCore", ".", "Qt", ".", "LeftDockWidgetArea", ",", "self", ".", "keypoint_dock", ")", "\n", "\n", "self", ".", "scene_list", "=", "QtWidgets", ".", "QListWidget", "(", ")", "\n", "self", ".", "scene_dock", "=", "QtWidgets", ".", "QDockWidget", "(", "\"Scenes\"", ")", "\n", "self", ".", "scene_dock", ".", "setWidget", "(", "self", ".", "scene_list", ")", "\n", "self", ".", "addDockWidget", "(", "QtCore", ".", "Qt", ".", "LeftDockWidgetArea", ",", "self", ".", "scene_dock", ")", "\n", "\n", "# Menu toolbar on the top", "\n", "self", ".", "fileMenu", "=", "QtWidgets", ".", "QMenu", "(", "\"&File\"", ")", "\n", "self", ".", "fileMenu", ".", "addAction", "(", "self", ".", "load_data_act", ")", "\n", "self", ".", "fileMenu", ".", "addAction", "(", "self", ".", "load_model_act", ")", "\n", "self", ".", "fileMenu", ".", "addAction", "(", "self", ".", "load_btn", ")", "\n", "self", ".", "fileMenu", ".", "addSeparator", "(", ")", "\n", "self", ".", "fileMenu", ".", "addAction", "(", "self", ".", "quit_btn", ")", "\n", "\n", "self", ".", "viewMenu", "=", "QtWidgets", ".", "QMenu", "(", "\"&View\"", ")", "\n", "self", ".", "viewMenu", ".", "addAction", "(", "self", ".", "zoom_in_act", ")", "\n", "self", ".", "viewMenu", ".", "addAction", "(", "self", ".", "zoom_out_act", ")", "\n", "self", ".", "viewMenu", ".", "addAction", "(", "self", ".", "normal_size_act", ")", "\n", "\n", "self", ".", "helpMenu", "=", "QtWidgets", ".", "QMenu", "(", "\"&Help\"", ")", "\n", "self", ".", "helpMenu", ".", "addAction", "(", "self", ".", "info_act", ")", "\n", "self", ".", "helpMenu", ".", "addAction", "(", "self", ".", "icons_act", ")", "\n", "\n", "self", ".", "menuBar", "(", ")", ".", "addMenu", "(", "self", ".", "fileMenu", ")", "\n", "self", ".", "menuBar", "(", ")", ".", "addMenu", "(", "self", ".", "viewMenu", ")", "\n", "self", ".", "menuBar", "(", ")", ".", "addMenu", "(", "self", ".", "helpMenu", ")", "\n", "\n", "# Create a status bar", "\n", "self", ".", "setStatusBar", "(", "QtWidgets", ".", "QStatusBar", "(", "self", ")", ")", "\n", "self", ".", "mode_qlabel", "=", "QtWidgets", ".", "QLabel", "(", ")", "\n", "self", ".", "mode_qlabel", ".", "setText", "(", "\"Mode: Create new model\"", ")", "\n", "self", ".", "statusBar", "(", ")", ".", "addPermanentWidget", "(", "self", ".", "mode_qlabel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.scroll_request": [[264, 270], ["qt_root.MainWindow.scrollArea.verticalScrollBar", "qt_root.MainWindow.setValue", "qt_root.MainWindow.value", "qt_root.MainWindow.singleStep"], "methods", ["None"], ["", "def", "scroll_request", "(", "self", ",", "delta", ",", "orientation", ")", ":", "\n", "# Scroll bars move with mouse wheel", "\n", "        ", "units", "=", "-", "delta", "*", "0.1", "\n", "bar", "=", "self", ".", "scrollArea", ".", "verticalScrollBar", "(", ")", "\n", "value", "=", "bar", ".", "value", "(", ")", "+", "bar", ".", "singleStep", "(", ")", "*", "units", "\n", "bar", ".", "setValue", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.zoom_request": [[271, 288], ["qt_root.MainWindow.canvas.width", "qt_root.MainWindow.canvas.adjustSize", "qt_root.MainWindow.canvas.width", "qt_root.MainWindow.adjustScrollBar", "qt_root.MainWindow.adjustScrollBar", "round", "pos.x", "round", "pos.y", "qt_root.MainWindow.scrollArea.horizontalScrollBar", "qt_root.MainWindow.scrollArea.verticalScrollBar", "pos.x", "pos.y"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.adjustScrollBar", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.adjustScrollBar"], ["", "def", "zoom_request", "(", "self", ",", "delta", ",", "pos", ")", ":", "\n", "# Scale the canvas", "\n", "        ", "canvas_width_old", "=", "self", ".", "canvas", ".", "width", "(", ")", "\n", "scale", "=", "0.9", "if", "delta", "<", "0", "else", "1.1", "\n", "self", ".", "canvas", ".", "scale", "*=", "scale", "\n", "self", ".", "canvas", ".", "adjustSize", "(", ")", "\n", "\n", "# Adjust the scroll bars to follow mouse position", "\n", "canvas_width_new", "=", "self", ".", "canvas", ".", "width", "(", ")", "\n", "if", "canvas_width_old", "!=", "canvas_width_new", ":", "\n", "            ", "canvas_scale_factor", "=", "canvas_width_new", "/", "canvas_width_old", "\n", "\n", "x_shift", "=", "round", "(", "pos", ".", "x", "(", ")", "*", "canvas_scale_factor", ")", "-", "pos", ".", "x", "(", ")", "\n", "y_shift", "=", "round", "(", "pos", ".", "y", "(", ")", "*", "canvas_scale_factor", ")", "-", "pos", ".", "y", "(", ")", "\n", "\n", "self", ".", "adjustScrollBar", "(", "self", ".", "scrollArea", ".", "horizontalScrollBar", "(", ")", ",", "shift", "=", "x_shift", ")", "\n", "self", ".", "adjustScrollBar", "(", "self", ".", "scrollArea", ".", "verticalScrollBar", "(", ")", ",", "shift", "=", "y_shift", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.scaleImage": [[289, 296], ["qt_root.MainWindow.canvas.adjustSize", "qt_root.MainWindow.canvas.update", "qt_root.MainWindow.adjustScrollBar", "qt_root.MainWindow.adjustScrollBar", "qt_root.MainWindow.scrollArea.horizontalScrollBar", "qt_root.MainWindow.scrollArea.verticalScrollBar"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.adjustScrollBar", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.adjustScrollBar"], ["", "", "def", "scaleImage", "(", "self", ",", "factor", ")", ":", "\n", "        ", "self", ".", "canvas", ".", "scale", "*=", "factor", "\n", "self", ".", "canvas", ".", "adjustSize", "(", ")", "\n", "self", ".", "canvas", ".", "update", "(", ")", "\n", "\n", "self", ".", "adjustScrollBar", "(", "self", ".", "scrollArea", ".", "horizontalScrollBar", "(", ")", ",", "factor", "=", "factor", ")", "\n", "self", ".", "adjustScrollBar", "(", "self", ".", "scrollArea", ".", "verticalScrollBar", "(", ")", ",", "factor", "=", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.adjustScrollBar": [[297, 301], ["scrollBar.setValue", "scrollBar.setValue", "int", "scrollBar.value", "scrollBar.value", "scrollBar.pageStep"], "methods", ["None"], ["", "def", "adjustScrollBar", "(", "self", ",", "scrollBar", ",", "factor", "=", "1", ",", "shift", "=", "0", ")", ":", "\n", "        ", "scrollBar", ".", "setValue", "(", "int", "(", "factor", "*", "scrollBar", ".", "value", "(", ")", "\n", "+", "(", "(", "factor", "-", "1", ")", "*", "scrollBar", ".", "pageStep", "(", ")", "/", "2", ")", ")", ")", "\n", "scrollBar", ".", "setValue", "(", "scrollBar", ".", "value", "(", ")", "+", "shift", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.closeEvent": [[302, 311], ["PyQt5.QtWidgets.QMessageBox.question", "event.accept", "event.ignore"], "methods", ["None"], ["", "def", "closeEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "quit_msg", "=", "\"All labels will be lost. Are you sure you want to quit?\"", "\n", "reply", "=", "QtWidgets", ".", "QMessageBox", ".", "question", "(", "self", ",", "'Message'", ",", "\n", "quit_msg", ",", "QtWidgets", ".", "QMessageBox", ".", "Yes", ",", "QtWidgets", ".", "QMessageBox", ".", "No", ")", "\n", "\n", "if", "reply", "==", "QtWidgets", ".", "QMessageBox", ".", "Yes", ":", "\n", "            ", "event", ".", "accept", "(", ")", "\n", "", "else", ":", "\n", "            ", "event", ".", "ignore", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.update_keypoint_dock": [[312, 324], ["qt_root.MainWindow.keypoint_list.clear", "enumerate", "qt_root.MainWindow.keypoint_list.addItem", "tuple"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.clear", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.addItem"], ["", "", "def", "update_keypoint_dock", "(", "self", ")", ":", "\n", "        ", "self", ".", "keypoint_list", ".", "clear", "(", ")", "\n", "try", ":", "\n", "            ", "points", "=", "[", "]", "\n", "if", "self", ".", "_count", ">=", "0", ":", "\n", "                ", "points", "=", "[", "item", ".", "pixel", "for", "item", "in", "self", ".", "scenes", "[", "self", ".", "_count", "]", ".", "labels", "]", "\n", "", "for", "index", ",", "point", "in", "enumerate", "(", "points", ")", ":", "\n", "                ", "self", ".", "keypoint_list", ".", "addItem", "(", "\n", "\"KP {}: {}\"", ".", "format", "(", "index", ",", "tuple", "(", "point", ")", ")", "\n", ")", "\n", "", "", "except", "IndexError", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.qt_root.MainWindow.keypoint_clicked": [[325, 331], ["qt_root.MainWindow.canvas.update", "item.text", "int", "[].split", "item.text().split", "item.text"], "methods", ["None"], ["", "", "def", "keypoint_clicked", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "canvas", ".", "select_id", "=", "None", "\n", "if", "item", ".", "text", "(", ")", "is", "not", "\"\"", ":", "\n", "            ", "keypoint_id", "=", "int", "(", "item", ".", "text", "(", ")", ".", "split", "(", "':'", ")", "[", "0", "]", ".", "split", "(", "'KP '", ")", "[", "1", "]", ")", "\n", "self", ".", "canvas", ".", "select_id", "=", "keypoint_id", "\n", "", "self", ".", "canvas", ".", "update", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.optimize.predict": [[5, 48], ["ref_kpts.transpose().flatten", "numpy.concatenate", "scipy.optimize.minimize", "x[].reshape", "numpy.asarray", "transforms3d.qmult", "transforms3d.qmult", "numpy.concatenate", "numpy.concatenate", "x[].reshape", "zip", "ref_kpts.transpose", "numpy.append().transpose", "transforms3d.qconjugate", "numpy.asarray", "Ps[].repeat", "numpy.append", "numpy.linalg.norm", "scene_t[].flatten", "scene_q[].flatten", "scene_P.flatten", "numpy.linalg.norm", "numpy.array", "x[].reshape", "numpy.array", "x[].reshape", "numpy.append", "optimize.predict.rotate"], "function", ["None"], ["def", "predict", "(", "ref_kpts", ",", "scene_t", ",", "scene_q", ",", "scene_P", ",", "select_mat", ")", ":", "\n", "\n", "#generate reference keypoint vector", "\n", "    ", "ref_kpts_vec", "=", "ref_kpts", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ".", "flatten", "(", ")", "\n", "\n", "len_ts", "=", "scene_t", "[", "1", ":", "]", ".", "size", "\n", "len_qs", "=", "scene_q", "[", "1", ":", "]", ".", "size", "\n", "len_Ps", "=", "scene_P", ".", "size", "\n", "\n", "#constraint function", "\n", "def", "cons_func", "(", "x", ")", ":", "\n", "        ", "qs", "=", "x", "[", "len_ts", ":", "len_ts", "+", "len_qs", "]", ".", "reshape", "(", "scene_q", "[", "1", ":", ",", ":", "]", ".", "shape", ")", "\n", "return", "np", ".", "asarray", "(", "[", "(", "np", ".", "linalg", ".", "norm", "(", "tfq", ".", "qnorm", "(", "q", ")", "**", "2", "-", "1", ")", ")", "for", "q", "in", "qs", "]", ")", "\n", "\n", "#rotate point using quaternion function", "\n", "", "def", "rotate", "(", "q", ",", "pt", ")", ":", "\n", "        ", "qmult1", "=", "tfq", ".", "qmult", "(", "q", ",", "(", "np", ".", "append", "(", "0", ",", "pt", ")", ".", "transpose", "(", ")", ")", ")", "\n", "qmult2", "=", "tfq", ".", "qmult", "(", "qmult1", ",", "tfq", ".", "qconjugate", "(", "q", ")", ")", "\n", "return", "(", "np", ".", "asarray", "(", "qmult2", ")", ")", "[", "1", ":", "]", "\n", "\n", "#error function", "\n", "", "def", "error_func", "(", "x", ")", ":", "\n", "        ", "ts", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ",", "x", "[", ":", "len_ts", "]", ".", "reshape", "(", "scene_t", "[", "1", ":", ",", ":", "]", ".", "shape", ")", ")", ")", "\n", "qs", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ",", "x", "[", "len_ts", ":", "len_ts", "+", "len_qs", "]", ".", "reshape", "(", "scene_q", "[", "1", ":", ",", ":", "]", ".", "shape", ")", ")", ")", "\n", "Ps", "=", "x", "[", "len_ts", "+", "len_qs", ":", "]", ".", "reshape", "(", "scene_P", ".", "shape", ")", "\n", "list_pts", "=", "[", "]", "\n", "for", "(", "q", ",", "t", ",", "pts", ")", "in", "zip", "(", "qs", ",", "ts", ",", "Ps", "[", "np", ".", "newaxis", ",", ":", "]", ".", "repeat", "(", "qs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", ")", ":", "\n", "            ", "l", "=", "[", "(", "rotate", "(", "q", ",", "pt", ")", "+", "t", ")", "for", "pt", "in", "pts", "]", "\n", "list_pts", "=", "np", ".", "append", "(", "list_pts", ",", "l", ")", "\n", "", "err", "=", "np", ".", "linalg", ".", "norm", "(", "select_mat", ".", "dot", "(", "list_pts", ")", "-", "select_mat", ".", "dot", "(", "ref_kpts_vec", ")", ")", "**", "2", "\n", "return", "err", "\n", "\n", "#define constraint", "\n", "", "cons", "=", "(", "{", "'type'", ":", "'eq'", ",", "\n", "'fun'", ":", "cons_func", "}", ")", "\n", "\n", "#generate initial vector", "\n", "ini_vals", "=", "np", ".", "concatenate", "(", "(", "scene_t", "[", "1", ":", ",", ":", "]", ".", "flatten", "(", ")", ",", "scene_q", "[", "1", ":", ",", ":", "]", ".", "flatten", "(", ")", ",", "scene_P", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "#perform optimization", "\n", "res", "=", "scipy", ".", "optimize", ".", "minimize", "(", "error_func", ",", "ini_vals", ",", "constraints", "=", "cons", ",", "method", "=", "'SLSQP'", ",", "tol", "=", "1e-8", ",", "options", "=", "{", "'disp'", ":", "True", ",", "'ftol'", ":", "1e-8", ",", "'maxiter'", ":", "1000", "}", ")", "\n", "\n", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.procrustes": [[6, 48], ["X.mean", "Y.mean", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.linalg.svd", "numpy.dot", "s.sum", "numpy.concatenate", "numpy.linalg.det", "numpy.dot", "numpy.dot", "numpy.zeros", "numpy.dot", "numpy.dot"], "function", ["None"], ["def", "procrustes", "(", "X", ",", "Y", ",", "scaling", "=", "True", ",", "reflection", "=", "'best'", ")", ":", "\n", "    ", "n", ",", "m", "=", "X", ".", "shape", "\n", "ny", ",", "my", "=", "Y", ".", "shape", "\n", "muX", "=", "X", ".", "mean", "(", "0", ")", "\n", "muY", "=", "Y", ".", "mean", "(", "0", ")", "\n", "X0", "=", "X", "-", "muX", "\n", "Y0", "=", "Y", "-", "muY", "\n", "ssX", "=", "(", "X0", "**", "2.", ")", ".", "sum", "(", ")", "\n", "ssY", "=", "(", "Y0", "**", "2.", ")", ".", "sum", "(", ")", "\n", "\n", "normX", "=", "np", ".", "sqrt", "(", "ssX", ")", "\n", "normY", "=", "np", ".", "sqrt", "(", "ssY", ")", "\n", "X0", "/=", "normX", "\n", "Y0", "/=", "normY", "\n", "if", "my", "<", "m", ":", "\n", "        ", "Y0", "=", "np", ".", "concatenate", "(", "(", "Y0", ",", "np", ".", "zeros", "(", "n", ",", "m", "-", "my", ")", ")", ",", "0", ")", "\n", "\n", "", "A", "=", "np", ".", "dot", "(", "X0", ".", "T", ",", "Y0", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "A", ",", "full_matrices", "=", "False", ")", "\n", "V", "=", "Vt", ".", "T", "\n", "T", "=", "np", ".", "dot", "(", "V", ",", "U", ".", "T", ")", "\n", "\n", "if", "reflection", "is", "not", "'best'", ":", "\n", "        ", "have_reflection", "=", "np", ".", "linalg", ".", "det", "(", "T", ")", "<", "0", "\n", "if", "reflection", "!=", "have_reflection", ":", "\n", "            ", "V", "[", ":", ",", "-", "1", "]", "*=", "-", "1", "\n", "s", "[", "-", "1", "]", "*=", "-", "1", "\n", "T", "=", "np", ".", "dot", "(", "V", ",", "U", ".", "T", ")", "\n", "", "", "traceTA", "=", "s", ".", "sum", "(", ")", "\n", "if", "scaling", ":", "\n", "        ", "b", "=", "traceTA", "*", "normX", "/", "normY", "\n", "d", "=", "1", "-", "traceTA", "**", "2", "\n", "Z", "=", "normX", "*", "traceTA", "*", "np", ".", "dot", "(", "Y0", ",", "T", ")", "+", "muX", "\n", "", "else", ":", "\n", "        ", "b", "=", "1", "\n", "d", "=", "1", "+", "ssY", "/", "ssX", "-", "2", "*", "traceTA", "*", "normY", "/", "normX", "\n", "Z", "=", "normY", "*", "np", ".", "dot", "(", "Y0", ",", "T", ")", "+", "muX", "\n", "", "if", "my", "<", "m", ":", "\n", "        ", "T", "=", "T", "[", ":", "my", ",", ":", "]", "\n", "", "c", "=", "muX", "-", "b", "*", "np", ".", "dot", "(", "muY", ",", "T", ")", "\n", "tform", "=", "{", "'rotation'", ":", "T", ",", "'scale'", ":", "b", ",", "'translation'", ":", "c", "}", "\n", "return", "d", ",", "Z", ",", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict": [[49, 60], ["numpy.asarray().reshape", "zip", "numpy.asarray", "numpy.asarray", "geo_constrain.procrustes", "transforms3d.compose", "poses_vec.append", "numpy.asarray", "numpy.linalg.inv", "numpy.ones", "numpy.linalg.inv", "len", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.procrustes"], ["", "def", "predict", "(", "model_points", ",", "labeled_points", ",", "selection_vector", ")", ":", "\n", "    ", "selection_arr", "=", "np", ".", "asarray", "(", "selection_vector", ")", ".", "reshape", "(", "labeled_points", ".", "shape", "[", ":", "2", "]", ")", "\n", "poses_vec", "=", "[", "]", "\n", "#get object pose and relative scene transformations using Procrustes analysis", "\n", "for", "point_set", ",", "visibility", "in", "zip", "(", "labeled_points", ",", "selection_arr", ")", ":", "\n", "        ", "manual_set", "=", "np", ".", "asarray", "(", "[", "kpt", "for", "flag", ",", "kpt", "in", "zip", "(", "visibility", ",", "point_set", ")", "if", "flag", "]", ")", "\n", "model_set", "=", "np", ".", "asarray", "(", "[", "kpt", "for", "flag", ",", "kpt", "in", "zip", "(", "visibility", ",", "model_points", ")", "if", "flag", "]", ")", "\n", "_", ",", "_", ",", "tform", "=", "procrustes", "(", "model_set", ",", "manual_set", ",", "False", ")", "\n", "obj_pose", "=", "tfa", ".", "compose", "(", "tform", "[", "'translation'", "]", ",", "np", ".", "linalg", ".", "inv", "(", "tform", "[", "'rotation'", "]", ")", ",", "np", ".", "ones", "(", "3", ")", ")", "\n", "poses_vec", ".", "append", "(", "np", ".", "linalg", ".", "inv", "(", "obj_pose", ")", ")", "\n", "", "return", "(", "len", "(", "poses_vec", ")", "!=", "0", ")", ",", "poses_vec", "\n", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.__init__": [[5, 13], ["PyQt5.QtWidgets.QToolBar.__init__", "toolmenu.QToolMenu.layout", "toolmenu.QToolMenu.setSpacing", "toolmenu.QToolMenu.setContentsMargins", "toolmenu.QToolMenu.setContentsMargins", "toolmenu.QToolMenu.setWindowFlags", "toolmenu.QToolMenu.windowFlags"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.__init__"], ["    ", "def", "__init__", "(", "self", ",", "title", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "title", ")", "\n", "layout", "=", "self", ".", "layout", "(", ")", "\n", "m", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "layout", ".", "setSpacing", "(", "0", ")", "\n", "layout", ".", "setContentsMargins", "(", "*", "m", ")", "\n", "self", ".", "setContentsMargins", "(", "*", "m", ")", "\n", "self", ".", "setWindowFlags", "(", "self", ".", "windowFlags", "(", ")", "|", "QtCore", ".", "Qt", ".", "FramelessWindowHint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction": [[14, 28], ["isinstance", "PyQt5.QtWidgets.QToolButton", "PyQt5.QtWidgets.QToolButton.setDefaultAction", "PyQt5.QtWidgets.QToolButton.setToolButtonStyle", "toolmenu.QToolMenu.addWidget", "range", "super().addAction", "toolmenu.QToolMenu.layout().count", "isinstance", "toolmenu.QToolMenu.layout().itemAt().widget", "toolmenu.QToolMenu.layout().itemAt().setAlignment", "toolmenu.QToolMenu.layout", "toolmenu.QToolMenu.layout().itemAt", "toolmenu.QToolMenu.layout().itemAt", "toolmenu.QToolMenu.layout", "toolmenu.QToolMenu.layout"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.toolmenu.QToolMenu.addAction"], ["", "def", "addAction", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "action", ",", "QtWidgets", ".", "QWidgetAction", ")", ":", "\n", "            ", "return", "super", "(", ")", ".", "addAction", "(", "action", ")", "\n", "", "btn", "=", "QtWidgets", ".", "QToolButton", "(", ")", "\n", "btn", ".", "setDefaultAction", "(", "action", ")", "\n", "btn", ".", "setToolButtonStyle", "(", "QtCore", ".", "Qt", ".", "ToolButtonTextUnderIcon", ")", "\n", "self", ".", "addWidget", "(", "btn", ")", "\n", "\n", "# center align", "\n", "for", "i", "in", "range", "(", "self", ".", "layout", "(", ")", ".", "count", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "\n", "self", ".", "layout", "(", ")", ".", "itemAt", "(", "i", ")", ".", "widget", "(", ")", ",", "QtWidgets", ".", "QToolButton", "\n", ")", ":", "\n", "                ", "self", ".", "layout", "(", ")", ".", "itemAt", "(", "i", ")", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.__init__": [[9, 18], ["PyQt5.QtWidgets.QWidget.__init__", "PyQt5.QtGui.QPixmap"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_pixmap", "=", "QtGui", ".", "QPixmap", "(", ")", "\n", "\n", "self", ".", "scale", "=", "1.0", "\n", "self", ".", "last_clicked", "=", "None", "\n", "self", ".", "select_id", "=", "None", "\n", "self", ".", "current_points", "=", "[", "]", "\n", "self", ".", "locked_points", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.mousePressEvent": [[19, 24], ["canvas.QCanvas.transformPos", "e.localPos", "canvas.QCanvas.outOfPixmap", "PyQt5.QtCore.QPoint", "canvas.QCanvas.update", "canvas.QCanvas.x", "canvas.QCanvas.y"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.transformPos", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.outOfPixmap"], ["", "def", "mousePressEvent", "(", "self", ",", "e", ")", ":", "\n", "        ", "pos", "=", "self", ".", "transformPos", "(", "e", ".", "localPos", "(", ")", ")", "\n", "if", "not", "self", ".", "outOfPixmap", "(", "pos", ")", ":", "\n", "            ", "self", ".", "last_clicked", "=", "QtCore", ".", "QPoint", "(", "pos", ".", "x", "(", ")", ",", "pos", ".", "y", "(", ")", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.mouseDoubleClickEvent": [[25, 30], ["canvas.QCanvas.transformPos", "e.localPos", "canvas.QCanvas.outOfPixmap", "canvas.QCanvas.newPoint.emit", "canvas.QCanvas.update", "PyQt5.QtCore.QPoint", "canvas.QCanvas.x", "canvas.QCanvas.y"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.transformPos", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.outOfPixmap"], ["", "", "def", "mouseDoubleClickEvent", "(", "self", ",", "e", ")", ":", "\n", "        ", "pos", "=", "self", ".", "transformPos", "(", "e", ".", "localPos", "(", ")", ")", "\n", "if", "not", "self", ".", "outOfPixmap", "(", "pos", ")", ":", "\n", "            ", "self", ".", "newPoint", ".", "emit", "(", "QtCore", ".", "QPoint", "(", "pos", ".", "x", "(", ")", ",", "pos", ".", "y", "(", ")", ")", ")", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.wheelEvent": [[31, 40], ["e.modifiers", "e.angleDelta", "e.accept", "int", "canvas.QCanvas.zoomRequest.emit", "canvas.QCanvas.scrollRequest.emit", "canvas.QCanvas.scrollRequest.emit", "e.angleDelta.y", "e.pos", "e.angleDelta.x", "e.angleDelta.y"], "methods", ["None"], ["", "", "def", "wheelEvent", "(", "self", ",", "e", ")", ":", "\n", "        ", "mods", "=", "e", ".", "modifiers", "(", ")", "\n", "delta", "=", "e", ".", "angleDelta", "(", ")", "\n", "if", "QtCore", ".", "Qt", ".", "ControlModifier", "==", "int", "(", "mods", ")", ":", "\n", "            ", "self", ".", "zoomRequest", ".", "emit", "(", "delta", ".", "y", "(", ")", ",", "e", ".", "pos", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scrollRequest", ".", "emit", "(", "delta", ".", "x", "(", ")", ",", "QtCore", ".", "Qt", ".", "Horizontal", ")", "\n", "self", ".", "scrollRequest", ".", "emit", "(", "delta", ".", "y", "(", ")", ",", "QtCore", ".", "Qt", ".", "Vertical", ")", "\n", "", "e", ".", "accept", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.transformPos": [[41, 44], ["canvas.QCanvas.offsetToCenter"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.offsetToCenter"], ["", "def", "transformPos", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Convert from widget-logical coordinates to painter-logical ones.\"\"\"", "\n", "return", "point", "/", "self", ".", "scale", "-", "self", ".", "offsetToCenter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.offsetToCenter": [[45, 53], ["super().size", "PyQt5.QtCore.QPoint", "super().size.width", "super().size.height", "canvas.QCanvas._pixmap.width", "canvas.QCanvas._pixmap.height"], "methods", ["None"], ["", "def", "offsetToCenter", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "scale", "\n", "area", "=", "super", "(", "QCanvas", ",", "self", ")", ".", "size", "(", ")", "\n", "w", ",", "h", "=", "self", ".", "_pixmap", ".", "width", "(", ")", "*", "s", ",", "self", ".", "_pixmap", ".", "height", "(", ")", "*", "s", "\n", "aw", ",", "ah", "=", "area", ".", "width", "(", ")", ",", "area", ".", "height", "(", ")", "\n", "x", "=", "(", "aw", "-", "w", ")", "/", "(", "2", "*", "s", ")", "if", "aw", ">", "w", "else", "0", "\n", "y", "=", "(", "ah", "-", "h", ")", "/", "(", "2", "*", "s", ")", "if", "ah", ">", "h", "else", "0", "\n", "return", "QtCore", ".", "QPoint", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.loadPixmap": [[54, 60], ["canvas.QCanvas.update"], "methods", ["None"], ["", "def", "loadPixmap", "(", "self", ",", "pixmap", ")", ":", "\n", "        ", "self", ".", "_pixmap", "=", "pixmap", "\n", "self", ".", "last_clicked", "=", "None", "\n", "self", ".", "current_points", "=", "[", "]", "\n", "self", ".", "locked_points", "=", "[", "]", "\n", "self", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.paintEvent": [[61, 100], ["PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.setRenderHint", "PyQt5.QtGui.QPainter.setRenderHint", "PyQt5.QtGui.QPainter.setRenderHint", "PyQt5.QtGui.QPainter.scale", "PyQt5.QtGui.QPainter.translate", "PyQt5.QtGui.QPainter.drawPixmap", "PyQt5.QtGui.QPainter.setBrush", "list", "PyQt5.QtGui.QPainter.end", "super().paintEvent", "canvas.QCanvas.offsetToCenter", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QBrush", "canvas.QCanvas.outOfPixmap", "PyQt5.QtGui.QPainter.drawEllipse", "PyQt5.QtGui.QColor", "canvas.QCanvas.outOfPixmap", "PyQt5.QtGui.QPainter.drawEllipse", "PyQt5.QtGui.QColor", "canvas.QCanvas.outOfPixmap", "PyQt5.QtGui.QPainter.setBrush", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.drawEllipse", "PyQt5.QtGui.QPainter.setPen", "PyQt5.QtGui.QPainter.drawEllipse", "PyQt5.QtGui.QBrush", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QPen", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.paintEvent", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.offsetToCenter", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.outOfPixmap", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.outOfPixmap", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.outOfPixmap"], ["", "def", "paintEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "not", "self", ".", "_pixmap", ":", "\n", "            ", "return", "super", "(", ")", ".", "paintEvent", "(", "event", ")", "\n", "\n", "", "painter", "=", "QtGui", ".", "QPainter", "(", "self", ")", "\n", "painter", ".", "setRenderHint", "(", "QtGui", ".", "QPainter", ".", "Antialiasing", ")", "\n", "painter", ".", "setRenderHint", "(", "QtGui", ".", "QPainter", ".", "HighQualityAntialiasing", ")", "\n", "painter", ".", "setRenderHint", "(", "QtGui", ".", "QPainter", ".", "SmoothPixmapTransform", ")", "\n", "\n", "painter", ".", "scale", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "\n", "painter", ".", "translate", "(", "self", ".", "offsetToCenter", "(", ")", ")", "\n", "painter", ".", "drawPixmap", "(", "0", ",", "0", ",", "self", ".", "_pixmap", ")", "\n", "\n", "# Draw green points", "\n", "if", "self", ".", "last_clicked", ":", "\n", "            ", "painter", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "QtGui", ".", "QColor", "(", "0", ",", "255", ",", "0", ")", ")", ")", "\n", "if", "not", "self", ".", "outOfPixmap", "(", "self", ".", "last_clicked", ")", ":", "\n", "                ", "painter", ".", "drawEllipse", "(", "self", ".", "last_clicked", ",", "6", ",", "6", ")", "\n", "\n", "# Draw blue points", "\n", "", "", "painter", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", "QtGui", ".", "QColor", "(", "0", ",", "0", ",", "255", ")", ")", ")", "\n", "for", "point", "in", "list", "(", "self", ".", "current_points", "+", "self", ".", "locked_points", ")", ":", "\n", "            ", "if", "not", "self", ".", "outOfPixmap", "(", "point", ")", ":", "\n", "                ", "painter", ".", "drawEllipse", "(", "point", ",", "6", ",", "6", ")", "\n", "\n", "# Highlight selected point", "\n", "", "", "if", "self", ".", "select_id", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "point", "=", "(", "self", ".", "current_points", "+", "self", ".", "locked_points", ")", "[", "self", ".", "select_id", "]", "\n", "if", "not", "self", ".", "outOfPixmap", "(", "point", ")", ":", "\n", "                    ", "painter", ".", "setBrush", "(", "QtGui", ".", "QBrush", "(", ")", ")", "\n", "painter", ".", "setPen", "(", "QtGui", ".", "QPen", "(", "QtGui", ".", "QColor", "(", "0", ",", "255", ",", "0", ")", ",", "3", ",", "QtCore", ".", "Qt", ".", "DashLine", ")", ")", "\n", "painter", ".", "drawEllipse", "(", "point", ",", "9", ",", "9", ")", "\n", "painter", ".", "setPen", "(", "QtGui", ".", "QPen", "(", "QtGui", ".", "QColor", "(", "255", ",", "255", ",", "0", ")", ",", "3", ",", "QtCore", ".", "Qt", ".", "DashLine", ")", ")", "\n", "painter", ".", "drawEllipse", "(", "point", ",", "12", ",", "12", ")", "\n", "", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "painter", ".", "end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.sizeHint": [[101, 103], ["canvas.QCanvas.minimumSizeHint"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_count_widget.QKeypointCount.minimumSizeHint"], ["", "def", "sizeHint", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "minimumSizeHint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.minimumSizeHint": [[104, 108], ["super().minimumSizeHint", "canvas.QCanvas._pixmap.size"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_count_widget.QKeypointCount.minimumSizeHint"], ["", "def", "minimumSizeHint", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_pixmap", ":", "\n", "            ", "return", "self", ".", "scale", "*", "self", ".", "_pixmap", ".", "size", "(", ")", "\n", "", "return", "super", "(", "QCanvas", ",", "self", ")", ".", "minimumSizeHint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.canvas.QCanvas.outOfPixmap": [[109, 112], ["canvas.QCanvas._pixmap.width", "canvas.QCanvas._pixmap.height", "p.x", "p.y"], "methods", ["None"], ["", "def", "outOfPixmap", "(", "self", ",", "p", ")", ":", "\n", "        ", "w", ",", "h", "=", "self", ".", "_pixmap", ".", "width", "(", ")", ",", "self", ".", "_pixmap", ".", "height", "(", ")", "\n", "return", "not", "(", "0", "<=", "p", ".", "x", "(", ")", "<=", "w", "-", "1", "and", "0", "<=", "p", ".", "y", "(", ")", "<=", "h", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_count_widget.QKeypointCount.__init__": [[7, 26], ["PyQt5.QtWidgets.QWidget.__init__", "PyQt5.QtWidgets.QSpinBox", "keypoint_count_widget.QKeypointCount.spinbox.setButtonSymbols", "keypoint_count_widget.QKeypointCount.spinbox.setRange", "keypoint_count_widget.QKeypointCount.spinbox.setValue", "keypoint_count_widget.QKeypointCount.spinbox.setToolTip", "keypoint_count_widget.QKeypointCount.spinbox.setStatusTip", "keypoint_count_widget.QKeypointCount.spinbox.setAlignment", "keypoint_count_widget.QKeypointCount.spinbox.valueChanged.connect", "PyQt5.QtWidgets.QLabel", "keypoint_count_widget.QKeypointCount.label.setAlignment", "PyQt5.QtWidgets.QVBoxLayout", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addWidget", "keypoint_count_widget.QKeypointCount.setLayout", "keypoint_count_widget.QKeypointCount.spinbox.toolTip"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.__init__"], ["def", "__init__", "(", "self", ",", "value", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "spinbox", "=", "QtWidgets", ".", "QSpinBox", "(", ")", "\n", "self", ".", "spinbox", ".", "setButtonSymbols", "(", "QtWidgets", ".", "QAbstractSpinBox", ".", "UpDownArrows", ")", "\n", "self", ".", "spinbox", ".", "setRange", "(", "4", ",", "15", ")", "\n", "self", ".", "spinbox", ".", "setValue", "(", "value", ")", "\n", "self", ".", "spinbox", ".", "setToolTip", "(", "\"Keypoint count\"", ")", "\n", "self", ".", "spinbox", ".", "setStatusTip", "(", "\"Set the number of keypoints to be defined on the object\"", ")", "\n", "self", ".", "spinbox", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "self", ".", "spinbox", ".", "valueChanged", ".", "connect", "(", "self", ".", "valueChanged", ")", "\n", "\n", "self", ".", "label", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "spinbox", ".", "toolTip", "(", ")", ")", "\n", "self", ".", "label", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "\n", "layout", "=", "QtWidgets", ".", "QVBoxLayout", "(", ")", "\n", "layout", ".", "addWidget", "(", "self", ".", "spinbox", ")", "\n", "layout", ".", "addWidget", "(", "self", ".", "label", ")", "\n", "self", ".", "setLayout", "(", "layout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_count_widget.QKeypointCount.minimumSizeHint": [[27, 32], ["super().minimumSizeHint().height", "PyQt5.QtGui.QFontMetrics", "PyQt5.QtGui.QFontMetrics.width", "PyQt5.QtCore.QSize", "keypoint_count_widget.QKeypointCount.font", "str", "super().minimumSizeHint", "keypoint_count_widget.QKeypointCount.spinbox.maximum"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_count_widget.QKeypointCount.minimumSizeHint"], ["", "def", "minimumSizeHint", "(", "self", ")", ":", "\n", "        ", "height", "=", "super", "(", ")", ".", "minimumSizeHint", "(", ")", ".", "height", "(", ")", "\n", "fm", "=", "QtGui", ".", "QFontMetrics", "(", "self", ".", "font", "(", ")", ")", "\n", "width", "=", "fm", ".", "width", "(", "str", "(", "self", ".", "spinbox", ".", "maximum", "(", ")", ")", ")", "\n", "return", "QtCore", ".", "QSize", "(", "width", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_count_widget.QKeypointCount.valueChanged": [[33, 35], ["keypoint_count_widget.QKeypointCount.numKeypoints.emit", "keypoint_count_widget.QKeypointCount.spinbox.value"], "methods", ["None"], ["", "def", "valueChanged", "(", "self", ")", ":", "\n", "        ", "self", ".", "numKeypoints", ".", "emit", "(", "self", ".", "spinbox", ".", "value", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListItem.__init__": [[4, 9], ["PyQt5.QtGui.QStandardItem.__init__", "keypoint_list_widget.QKeypointListItem.setText", "keypoint_list_widget.QKeypointListItem.setEditable", "keypoint_list_widget.QKeypointListItem.setTextAlignment"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.__init__"], ["    ", "def", "__init__", "(", "self", ",", "text", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "setText", "(", "text", ")", "\n", "self", ".", "setEditable", "(", "False", ")", "\n", "self", ".", "setTextAlignment", "(", "QtCore", ".", "Qt", ".", "AlignBottom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListItem.clone": [[10, 12], ["keypoint_list_widget.QKeypointListItem", "keypoint_list_widget.QKeypointListItem.text"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "return", "QKeypointListItem", "(", "self", ".", "text", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListItem.__hash__": [[13, 15], ["id"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "id", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListItem.__repr__": [[16, 18], ["keypoint_list_widget.QKeypointListItem.text"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(\"{}\")'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "text", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.StandardItemModel.removeRows": [[24, 28], ["super().removeRows", "keypoint_list_widget.StandardItemModel.itemDropped.emit"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.StandardItemModel.removeRows"], ["def", "removeRows", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ret", "=", "super", "(", ")", ".", "removeRows", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "itemDropped", ".", "emit", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.__init__": [[33, 43], ["PyQt5.QtWidgets.QListView.__init__", "keypoint_list_widget.QKeypointListWidget.setWindowFlags", "keypoint_list_widget.QKeypointListWidget.setModel", "keypoint_list_widget.QKeypointListWidget.model().setItemPrototype", "keypoint_list_widget.QKeypointListWidget.clicked.connect", "keypoint_list_widget.StandardItemModel", "keypoint_list_widget.QKeypointListItem", "keypoint_list_widget.QKeypointListWidget.model"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "setWindowFlags", "(", "QtCore", ".", "Qt", ".", "Window", ")", "\n", "self", ".", "setModel", "(", "StandardItemModel", "(", ")", ")", "\n", "self", ".", "model", "(", ")", ".", "setItemPrototype", "(", "QKeypointListItem", "(", "None", ")", ")", "\n", "#self.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)", "\n", "#self.setDefaultDropAction(QtCore.Qt.MoveAction)", "\n", "\n", "self", ".", "clicked", ".", "connect", "(", "self", ".", "itemClickedEvent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.__len__": [[44, 46], ["keypoint_list_widget.QKeypointListWidget.model().rowCount", "keypoint_list_widget.QKeypointListWidget.model"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", ")", ".", "rowCount", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.__getitem__": [[47, 49], ["keypoint_list_widget.QKeypointListWidget.model().item", "keypoint_list_widget.QKeypointListWidget.model"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", ")", ".", "item", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.__iter__": [[50, 53], ["range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "self", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.mousePressEvent": [[54, 58], ["keypoint_list_widget.QKeypointListWidget.selectionModel().clearSelection", "keypoint_list_widget.QKeypointListWidget.itemClicked.emit", "super().mousePressEvent", "keypoint_list_widget.QKeypointListItem", "keypoint_list_widget.QKeypointListWidget.selectionModel"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.mousePressEvent"], ["", "", "def", "mousePressEvent", "(", "self", ",", "ev", ")", ":", "\n", "        ", "self", ".", "selectionModel", "(", ")", ".", "clearSelection", "(", ")", "\n", "self", ".", "itemClicked", ".", "emit", "(", "QKeypointListItem", "(", "None", ")", ")", "\n", "super", "(", ")", ".", "mousePressEvent", "(", "ev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.itemDropped": [[59, 62], ["keypoint_list_widget.QKeypointListWidget.model"], "methods", ["None"], ["", "@", "property", "\n", "def", "itemDropped", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", ")", ".", "itemDropped", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.itemChanged": [[63, 66], ["keypoint_list_widget.QKeypointListWidget.model"], "methods", ["None"], ["", "@", "property", "\n", "def", "itemChanged", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", ")", ".", "itemChanged", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.itemClickedEvent": [[67, 69], ["keypoint_list_widget.QKeypointListWidget.itemClicked.emit", "keypoint_list_widget.QKeypointListWidget.model().itemFromIndex", "keypoint_list_widget.QKeypointListWidget.model"], "methods", ["None"], ["", "def", "itemClickedEvent", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "itemClicked", ".", "emit", "(", "self", ".", "model", "(", ")", ".", "itemFromIndex", "(", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.scrollToItem": [[70, 72], ["keypoint_list_widget.QKeypointListWidget.scrollTo", "keypoint_list_widget.QKeypointListWidget.model().indexFromItem", "keypoint_list_widget.QKeypointListWidget.model"], "methods", ["None"], ["", "def", "scrollToItem", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "scrollTo", "(", "self", ".", "model", "(", ")", ".", "indexFromItem", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.addItem": [[73, 77], ["keypoint_list_widget.QKeypointListWidget.model().setItem", "isinstance", "TypeError", "keypoint_list_widget.QKeypointListWidget.model().rowCount", "keypoint_list_widget.QKeypointListItem", "keypoint_list_widget.QKeypointListWidget.model", "keypoint_list_widget.QKeypointListWidget.model"], "methods", ["None"], ["", "def", "addItem", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"item must be string\"", ")", "\n", "", "self", ".", "model", "(", ")", ".", "setItem", "(", "self", ".", "model", "(", ")", ".", "rowCount", "(", ")", ",", "QKeypointListItem", "(", "item", ")", ")", "\n", "#item.setSizeHint(self.itemDelegate().sizeHint(None))", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.removeItem": [[79, 82], ["keypoint_list_widget.QKeypointListWidget.model().indexFromItem", "keypoint_list_widget.QKeypointListWidget.model().removeRows", "keypoint_list_widget.QKeypointListWidget.row", "keypoint_list_widget.QKeypointListWidget.model", "keypoint_list_widget.QKeypointListWidget.model"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.StandardItemModel.removeRows"], ["", "def", "removeItem", "(", "self", ",", "item", ")", ":", "\n", "        ", "index", "=", "self", ".", "model", "(", ")", ".", "indexFromItem", "(", "item", ")", "\n", "self", ".", "model", "(", ")", ".", "removeRows", "(", "index", ".", "row", "(", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.selectItem": [[83, 86], ["keypoint_list_widget.QKeypointListWidget.model().indexFromItem", "keypoint_list_widget.QKeypointListWidget.selectionModel().select", "keypoint_list_widget.QKeypointListWidget.model", "keypoint_list_widget.QKeypointListWidget.selectionModel"], "methods", ["None"], ["", "def", "selectItem", "(", "self", ",", "item", ")", ":", "\n", "        ", "index", "=", "self", ".", "model", "(", ")", ".", "indexFromItem", "(", "item", ")", "\n", "self", ".", "selectionModel", "(", ")", ".", "select", "(", "index", ",", "QtCore", ".", "QItemSelectionModel", ".", "Select", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.clear": [[87, 90], ["keypoint_list_widget.QKeypointListWidget.itemClicked.emit", "keypoint_list_widget.QKeypointListWidget.model().clear", "keypoint_list_widget.QKeypointListItem", "keypoint_list_widget.QKeypointListWidget.model"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.widgets.keypoint_list_widget.QKeypointListWidget.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "itemClicked", ".", "emit", "(", "QKeypointListItem", "(", "None", ")", ")", "\n", "self", ".", "model", "(", ")", ".", "clear", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.visualize_sparse_model.visualize": [[8, 73], ["numpy.load", "list_of_scene_dirs.sort", "[].reshape", "[].reshape", "numpy.asarray", "input_array[].reshape", "numpy.concatenate", "vis_mesh_list.append", "enumerate", "open3d.visualization.draw_geometries", "open3d.geometry.TriangleMesh.create_coordinate_frame", "open3d.geometry.TriangleMesh.create_sphere", "o3d.geometry.TriangleMesh.create_sphere.translate", "o3d.geometry.TriangleMesh.create_sphere.paint_uniform_color", "vis_mesh_list.append", "zip", "enumerate", "open3d.utility.Vector3dVector", "vis_mesh_list.append", "os.listdir", "os.path.isdir", "transforms3d.compose", "len", "open", "transforms3d.compose", "numpy.linalg.inv", "open3d.geometry.TriangleMesh.create_coordinate_frame", "o3d.geometry.TriangleMesh.create_coordinate_frame.translate", "o3d.geometry.TriangleMesh.create_coordinate_frame.rotate", "o3d.geometry.TriangleMesh.create_coordinate_frame.paint_uniform_color", "vis_mesh_list.append", "points.append", "open3d.geometry.LineSet", "os.path.join", "transforms3d.quat2mat", "numpy.ones", "zip", "numpy.eye", "os.path.join", "list", "numpy.asarray", "transforms3d.quat2mat", "numpy.ones", "numpy.dot", "list", "lines.append", "len", "map", "file.readlines", "numpy.asarray", "numpy.linalg.inv", "open3d.utility.Vector3dVector", "open3d.utility.Vector2iVector", "numpy.asarray", "line.split"], "function", ["None"], ["def", "visualize", "(", "npz_file", ",", "dataset_path", ")", ":", "\n", "\n", "#get number of scenes and number of keypoints", "\n", "    ", "input_array", "=", "np", ".", "load", "(", "npz_file", ")", "\n", "num_scenes", "=", "input_array", "[", "'ref'", "]", ".", "shape", "[", "0", "]", "\n", "num_keypts", "=", "input_array", "[", "'ref'", "]", ".", "shape", "[", "2", "]", "\n", "\n", "list_of_scene_dirs", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dataset_path", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "d", ")", ")", "]", "\n", "list_of_scene_dirs", ".", "sort", "(", ")", "\n", "\n", "#get scene transforamtions from input array", "\n", "out_ts", "=", "input_array", "[", "'scenes'", "]", "[", ":", "(", "num_scenes", "-", "1", ")", "*", "3", "]", ".", "reshape", "(", "(", "num_scenes", "-", "1", ",", "3", ")", ")", "\n", "out_qs", "=", "input_array", "[", "'scenes'", "]", "[", "(", "num_scenes", "-", "1", ")", "*", "3", ":", "(", "num_scenes", "-", "1", ")", "*", "7", "]", ".", "reshape", "(", "(", "num_scenes", "-", "1", ",", "4", ")", ")", "\n", "out_Ts", "=", "np", ".", "asarray", "(", "[", "tfa", ".", "compose", "(", "t", ",", "tfq", ".", "quat2mat", "(", "q", ")", ",", "np", ".", "ones", "(", "3", ")", ")", "for", "t", ",", "q", "in", "zip", "(", "out_ts", ",", "out_qs", ")", "]", ")", "\n", "#get object model from input_array", "\n", "out_Ps", "=", "input_array", "[", "'model'", "]", ".", "reshape", "(", "(", "num_keypts", ",", "3", ")", ")", "\n", "\n", "#this is the object mode", "\n", "object_model", "=", "out_Ps", "\n", "#these are the relative scene transformations", "\n", "scene_tfs", "=", "np", ".", "concatenate", "(", "(", "np", ".", "eye", "(", "4", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "out_Ts", ")", ")", "\n", "\n", "#append sparse object model points to vis_mesh_list", "\n", "vis_mesh_list", "=", "[", "]", "\n", "vis_mesh_list", ".", "append", "(", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "0.5", ")", ")", "\n", "for", "pt", "in", "object_model", ":", "\n", "        ", "keypt_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_sphere", "(", "radius", "=", "0.006", ")", "\n", "keypt_mesh", ".", "translate", "(", "pt", ")", "\n", "keypt_mesh", ".", "paint_uniform_color", "(", "[", "0.7", ",", "0.1", ",", "0.1", "]", ")", "#red", "\n", "vis_mesh_list", ".", "append", "(", "keypt_mesh", ")", "\n", "\n", "", "colors_list", "=", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "1", ",", "0", "]", ",", "[", "0.8", ",", "0.8", ",", "0.8", "]", ",", "[", "0", ",", "1", ",", "1", "]", ",", "[", "1", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", "\n", "#append camera trajectory to vis_mesh_list", "\n", "for", "scene_idx", ",", "(", "cur_scene_dir", ",", "sce_T", ")", "in", "enumerate", "(", "zip", "(", "list_of_scene_dirs", ",", "scene_tfs", ")", ")", ":", "\n", "        ", "points", "=", "[", "]", "\n", "lines", "=", "[", "]", "\n", "color", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "if", "scene_idx", "<", "len", "(", "colors_list", ")", ":", "\n", "            ", "color", "=", "colors_list", "[", "scene_idx", "]", "\n", "#read the camera pose corresponding to each frame", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "cur_scene_dir", ",", "'camera.poses'", ")", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "cam_pose_list", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", ")", "[", "1", ":", "]", ")", ")", "for", "line", "in", "file", ".", "readlines", "(", ")", "]", "\n", "", "for", "time_t", ",", "cam_pose", "in", "enumerate", "(", "cam_pose_list", "[", ":", ":", "5", "]", ")", ":", "\n", "#compose 4x4 camera pose matrix", "\n", "            ", "cam_T", "=", "tfa", ".", "compose", "(", "np", ".", "asarray", "(", "cam_pose", "[", ":", "3", "]", ")", ",", "tfq", ".", "quat2mat", "(", "np", ".", "asarray", "(", "[", "cam_pose", "[", "-", "1", "]", "]", "+", "cam_pose", "[", "3", ":", "-", "1", "]", ")", ")", ",", "np", ".", "ones", "(", "3", ")", ")", "\n", "cam_T", "=", "np", ".", "linalg", ".", "inv", "(", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "cam_T", ")", ",", "sce_T", ")", ")", "\n", "\n", "#add camera position", "\n", "traj_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "0.01", ")", "\n", "#traj_mesh = o3d.geometry.TriangleMesh.create_sphere(radius=0.002)", "\n", "traj_mesh", ".", "translate", "(", "cam_T", "[", ":", "3", ",", "3", "]", ")", "\n", "traj_mesh", ".", "rotate", "(", "cam_T", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "traj_mesh", ".", "paint_uniform_color", "(", "color", ")", "\n", "vis_mesh_list", ".", "append", "(", "traj_mesh", ")", "\n", "points", ".", "append", "(", "list", "(", "cam_T", "[", ":", "3", ",", "3", "]", ")", ")", "\n", "if", "time_t", ">", "0", ":", "\n", "                ", "lines", ".", "append", "(", "[", "time_t", "-", "1", ",", "time_t", "]", ")", "\n", "", "line_set", "=", "o3d", ".", "geometry", ".", "LineSet", "(", "\n", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "asarray", "(", "points", ")", ")", ",", "\n", "lines", "=", "o3d", ".", "utility", ".", "Vector2iVector", "(", "lines", ")", ",", ")", "\n", "", "line_set", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "[", "color", "]", "*", "len", "(", "lines", ")", ")", "\n", "vis_mesh_list", ".", "append", "(", "line_set", ")", "\n", "#display", "\n", "", "o3d", ".", "visualization", ".", "draw_geometries", "(", "vis_mesh_list", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_keypoint_labels.computeEuclideanDistance": [[5, 10], ["numpy.loadtxt", "numpy.loadtxt", "numpy.linalg.norm", "sum", "len", "zip"], "function", ["None"], ["def", "computeEuclideanDistance", "(", "path1", ",", "path2", ")", ":", "\n", "    ", "estimated", "=", "np", ".", "loadtxt", "(", "path1", ")", "\n", "groundtruth", "=", "np", ".", "loadtxt", "(", "path2", ")", "\n", "err", "=", "[", "np", ".", "linalg", ".", "norm", "(", "point_a", "-", "point_b", ")", "for", "point_a", ",", "point_b", "in", "zip", "(", "estimated", ",", "groundtruth", ")", "]", "\n", "return", "sum", "(", "err", ")", "/", "len", "(", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.__init__": [[24, 43], ["utils.sparse_model.SparseModel().reader", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.io.read_point_cloud", "evaluate_model_acc.ModelError.ply_model.scale", "numpy.zeros", "utils.sparse_model.SparseModel"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.reader"], ["    ", "def", "__init__", "(", "self", ",", "sparse_model_path", ",", "ply_model_path", ",", "pp_file_path", ",", "visualize", ")", ":", "\n", "# paths to model files", "\n", "        ", "self", ".", "path_to_sparse_model", "=", "sparse_model_path", "\n", "self", ".", "path_to_ply_model", "=", "ply_model_path", "\n", "self", ".", "path_to_picked_points", "=", "pp_file_path", "\n", "# visualization flag", "\n", "self", ".", "visualize", "=", "visualize", "\n", "\n", "# icp max-correspondence-distance", "\n", "self", ".", "threshold", "=", "0.01", "# 1cm distance threshold", "\n", "\n", "# read sparse model ", "\n", "sparse_model_array", "=", "SparseModel", "(", ")", ".", "reader", "(", "self", ".", "path_to_sparse_model", ")", "\n", "self", ".", "sparse_model", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "self", ".", "sparse_model", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "sparse_model_array", ")", "\n", "\n", "# read ply model", "\n", "self", ".", "ply_model", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "self", ".", "path_to_ply_model", ")", "\n", "self", ".", "ply_model", ".", "scale", "(", "PLY_SCALE", ",", "np", ".", "zeros", "(", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.process": [[44, 65], ["utils.sparse_model.SparseModel().reader", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "numpy.zeros", "list", "list", "open3d.registration.TransformationEstimationPointToPoint", "open3d.registration.TransformationEstimationPointToPoint.compute_transformation", "open3d.registration.registration_icp", "range", "range", "open3d.utility.Vector2iVector", "evaluate_model_acc.draw_registration_result", "utils.sparse_model.SparseModel", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.reader", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.get_gt_scene_tfs.draw_registration_result"], ["", "def", "process", "(", "self", ")", ":", "\n", "# read picked points", "\n", "        ", "pp_array", "=", "SparseModel", "(", ")", ".", "reader", "(", "self", ".", "path_to_picked_points", ",", "PP_SCALE", ")", "\n", "pp_model", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pp_model", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "pp_array", ")", "\n", "corr", "=", "np", ".", "zeros", "(", "(", "len", "(", "pp_array", ")", ",", "2", ")", ")", "\n", "corr", "[", ":", ",", "0", "]", "=", "list", "(", "range", "(", "len", "(", "pp_array", ")", ")", ")", "\n", "corr", "[", ":", ",", "1", "]", "=", "list", "(", "range", "(", "len", "(", "pp_array", ")", ")", ")", "\n", "\n", "# estimate rough transformation using correspondences", "\n", "p2p", "=", "o3d", ".", "registration", ".", "TransformationEstimationPointToPoint", "(", ")", "\n", "trans_init", "=", "p2p", ".", "compute_transformation", "(", "self", ".", "sparse_model", ",", "pp_model", ",", "\n", "o3d", ".", "utility", ".", "Vector2iVector", "(", "corr", ")", ")", "\n", "# point-to-point ICP for refinement", "\n", "reg_p2p", "=", "o3d", ".", "registration", ".", "registration_icp", "(", "\n", "self", ".", "sparse_model", ",", "self", ".", "ply_model", ",", "self", ".", "threshold", ",", "trans_init", ")", "\n", "\n", "# visualize if required", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "draw_registration_result", "(", "self", ".", "sparse_model", ",", "self", ".", "ply_model", ",", "reg_p2p", ".", "transformation", ")", "\n", "", "return", "reg_p2p", ".", "transformation", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.closest_points": [[66, 91], ["open3d.geometry.KDTreeFlann", "numpy.asarray", "numpy.vstack", "numpy.dot().transpose", "numpy.asarray", "numpy.vstack", "numpy.dot().transpose", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "os.path.join", "utils.sparse_model.SparseModel().writer", "os.path.join", "open3d.io.write_point_cloud", "open3d.geometry.KDTreeFlann.search_knn_vector_3d", "closest_points.append", "os.path.dirname", "numpy.asarray", "os.path.dirname", "evaluate_model_acc.ModelError.ply_model.transform", "numpy.asarray", "numpy.dot().transpose.transpose", "numpy.ones", "numpy.dot", "numpy.dot().transpose.transpose", "numpy.ones", "numpy.dot", "utils.sparse_model.SparseModel", "numpy.linalg.inv", "numpy.asarray", "numpy.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.writer"], ["", "def", "closest_points", "(", "self", ",", "transformation", ")", ":", "\n", "        ", "pcd_tree", "=", "o3d", ".", "geometry", ".", "KDTreeFlann", "(", "self", ".", "ply_model", ")", "\n", "# Get sparse model points in scene frame", "\n", "sparse_points", "=", "np", ".", "asarray", "(", "self", ".", "sparse_model", ".", "points", ")", "\n", "sparse_points", "=", "np", ".", "vstack", "(", "[", "sparse_points", ".", "transpose", "(", ")", ",", "\n", "np", ".", "ones", "(", "sparse_points", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "sparse_points", "=", "np", ".", "dot", "(", "transformation", ",", "sparse_points", ")", ".", "transpose", "(", ")", "\n", "# Find the closest point in PLY model to each sparse point", "\n", "closest_points", "=", "[", "]", "\n", "for", "point", "in", "sparse_points", ":", "\n", "            ", "[", "_", ",", "nn_idx", ",", "_", "]", "=", "pcd_tree", ".", "search_knn_vector_3d", "(", "point", "[", ":", "3", "]", ",", "1", ")", "\n", "nn_point", "=", "np", ".", "asarray", "(", "self", ".", "ply_model", ".", "points", ")", "[", "nn_idx", "]", "[", "0", "]", "\n", "closest_points", ".", "append", "(", "nn_point", ")", "\n", "# Create PointCloud of nearest neightbors", "\n", "", "nn_points", "=", "np", ".", "asarray", "(", "closest_points", ")", "\n", "nn_points", "=", "np", ".", "vstack", "(", "[", "nn_points", ".", "transpose", "(", ")", ",", "\n", "np", ".", "ones", "(", "nn_points", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "nn_points", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "transformation", ")", ",", "nn_points", ")", ".", "transpose", "(", ")", "\n", "nn_pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "nn_pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "nn_points", "[", ":", ",", ":", "3", "]", ")", "\n", "write_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "path_to_sparse_model", ")", ",", "\"gt_sparse.txt\"", ")", "\n", "SparseModel", "(", ")", ".", "writer", "(", "np", ".", "asarray", "(", "nn_pcd", ".", "points", ")", ",", "write_path", ",", "True", ")", "\n", "write_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "path_to_sparse_model", ")", ",", "\"gt_cad.ply\"", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "write_path", ",", "self", ".", "ply_model", ".", "transform", "(", "np", ".", "linalg", ".", "inv", "(", "transformation", ")", ")", ")", "\n", "return", "np", ".", "asarray", "(", "self", ".", "sparse_model", ".", "points", ")", ",", "nn_points", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.ModelError.compute_error": [[92, 98], ["zip", "numpy.linalg.norm", "errors.append"], "methods", ["None"], ["", "def", "compute_error", "(", "self", ",", "set_a", ",", "set_b", ")", ":", "\n", "        ", "errors", "=", "[", "]", "\n", "for", "point_a", ",", "point_b", "in", "zip", "(", "set_a", ",", "set_b", ")", ":", "\n", "            ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "point_a", "[", ":", "3", "]", "-", "point_b", "[", ":", "3", "]", ")", "\n", "errors", ".", "append", "(", "dist", ")", "\n", "", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_model_acc.draw_registration_result": [[8, 22], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.transform", "copy.deepcopy.paint_uniform_color", "vis_mesh_list.append", "vis_mesh_list.append", "open3d.visualization.draw_geometries", "open3d.geometry.TriangleMesh.create_sphere", "o3d.geometry.TriangleMesh.create_sphere.translate", "o3d.geometry.TriangleMesh.create_sphere.paint_uniform_color", "vis_mesh_list.append", "open3d.geometry.TriangleMesh.create_coordinate_frame"], "function", ["None"], ["def", "draw_registration_result", "(", "source", ",", "target", ",", "transformation", ")", ":", "\n", "    ", "source_temp", "=", "copy", ".", "deepcopy", "(", "source", ")", "\n", "target_temp", "=", "copy", ".", "deepcopy", "(", "target", ")", "\n", "source_temp", ".", "transform", "(", "transformation", ")", "\n", "vis_mesh_list", "=", "[", "]", "\n", "for", "pt", "in", "source_temp", ".", "points", ":", "\n", "        ", "keypt", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_sphere", "(", "radius", "=", "0.005", ")", "\n", "keypt", ".", "translate", "(", "pt", ")", "\n", "keypt", ".", "paint_uniform_color", "(", "[", "0.7", ",", "0.1", ",", "0.1", "]", ")", "# red", "\n", "vis_mesh_list", ".", "append", "(", "keypt", ")", "\n", "", "target_temp", ".", "paint_uniform_color", "(", "[", "0", ",", "0.651", ",", "0.929", "]", ")", "\n", "vis_mesh_list", ".", "append", "(", "target_temp", ")", "\n", "vis_mesh_list", ".", "append", "(", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "size", "=", "0.1", ")", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "vis_mesh_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.procrustes.procrustes": [[3, 45], ["X.mean", "Y.mean", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.linalg.svd", "numpy.dot", "s.sum", "numpy.concatenate", "numpy.linalg.det", "numpy.dot", "numpy.dot", "numpy.zeros", "numpy.dot", "numpy.dot"], "function", ["None"], ["def", "procrustes", "(", "X", ",", "Y", ",", "scaling", "=", "True", ",", "reflection", "=", "'best'", ")", ":", "\n", "    ", "n", ",", "m", "=", "X", ".", "shape", "\n", "ny", ",", "my", "=", "Y", ".", "shape", "\n", "muX", "=", "X", ".", "mean", "(", "0", ")", "\n", "muY", "=", "Y", ".", "mean", "(", "0", ")", "\n", "X0", "=", "X", "-", "muX", "\n", "Y0", "=", "Y", "-", "muY", "\n", "ssX", "=", "(", "X0", "**", "2.", ")", ".", "sum", "(", ")", "\n", "ssY", "=", "(", "Y0", "**", "2.", ")", ".", "sum", "(", ")", "\n", "\n", "normX", "=", "np", ".", "sqrt", "(", "ssX", ")", "\n", "normY", "=", "np", ".", "sqrt", "(", "ssY", ")", "\n", "X0", "/=", "normX", "\n", "Y0", "/=", "normY", "\n", "if", "my", "<", "m", ":", "\n", "        ", "Y0", "=", "np", ".", "concatenate", "(", "(", "Y0", ",", "np", ".", "zeros", "(", "n", ",", "m", "-", "my", ")", ")", ",", "0", ")", "\n", "\n", "", "A", "=", "np", ".", "dot", "(", "X0", ".", "T", ",", "Y0", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "A", ",", "full_matrices", "=", "False", ")", "\n", "V", "=", "Vt", ".", "T", "\n", "T", "=", "np", ".", "dot", "(", "V", ",", "U", ".", "T", ")", "\n", "\n", "if", "reflection", "is", "not", "'best'", ":", "\n", "        ", "have_reflection", "=", "np", ".", "linalg", ".", "det", "(", "T", ")", "<", "0", "\n", "if", "reflection", "!=", "have_reflection", ":", "\n", "            ", "V", "[", ":", ",", "-", "1", "]", "*=", "-", "1", "\n", "s", "[", "-", "1", "]", "*=", "-", "1", "\n", "T", "=", "np", ".", "dot", "(", "V", ",", "U", ".", "T", ")", "\n", "", "", "traceTA", "=", "s", ".", "sum", "(", ")", "\n", "if", "scaling", ":", "\n", "        ", "b", "=", "traceTA", "*", "normX", "/", "normY", "\n", "d", "=", "1", "-", "traceTA", "**", "2", "\n", "Z", "=", "normX", "*", "traceTA", "*", "np", ".", "dot", "(", "Y0", ",", "T", ")", "+", "muX", "\n", "", "else", ":", "\n", "        ", "b", "=", "1", "\n", "d", "=", "1", "+", "ssY", "/", "ssX", "-", "2", "*", "traceTA", "*", "normY", "/", "normX", "\n", "Z", "=", "normY", "*", "np", ".", "dot", "(", "Y0", ",", "T", ")", "+", "muX", "\n", "", "if", "my", "<", "m", ":", "\n", "        ", "T", "=", "T", "[", ":", "my", ",", ":", "]", "\n", "", "c", "=", "muX", "-", "b", "*", "np", ".", "dot", "(", "muY", ",", "T", ")", "\n", "tform", "=", "{", "'rotation'", ":", "T", ",", "'scale'", ":", "b", ",", "'translation'", ":", "c", "}", "\n", "return", "d", ",", "Z", ",", "tform", "\n", "", ""]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate_mask_labels.computeIntersectionOverUnion": [[8, 47], ["numpy.logical_or", "numpy.logical_and", "numpy.all", "numpy.all", "numpy.sum", "float", "matplotlib.figure", "plt.figure.add_subplot", "matplotlib.imshow", "fig.add_subplot.set_title", "plt.figure.add_subplot", "matplotlib.imshow", "fig.add_subplot.set_title", "plt.figure.add_subplot", "matplotlib.imshow", "fig.add_subplot.set_title", "plt.figure.add_subplot", "matplotlib.imshow", "fig.add_subplot.set_title", "plt.figure.add_subplot", "matplotlib.imshow", "fig.add_subplot.set_title", "matplotlib.suptitle", "matplotlib.show", "numpy.sum", "np.logical_and.astype", "np.logical_or.astype"], "function", ["None"], ["def", "computeIntersectionOverUnion", "(", "img1", ",", "img2", ",", "visualize", "=", "False", ")", ":", "\n", "\n", "    ", "images", "=", "[", "img1", ",", "img2", "]", "\n", "for", "img", "in", "images", ":", "\n", "        ", "assert", "(", "img", ".", "dtype", "==", "np", ".", "uint8", ")", "\n", "assert", "(", "img", ".", "ndim", "==", "2", ")", "\n", "", "if", "(", "np", ".", "all", "(", "img1", "==", "0", ")", "or", "np", ".", "all", "(", "img1", "==", "0", ")", ")", ":", "\n", "        ", "return", "1", "\n", "", "union", "=", "np", ".", "logical_or", "(", "*", "images", ")", "\n", "intersection", "=", "np", ".", "logical_and", "(", "*", "images", ")", "\n", "IoU", "=", "np", ".", "sum", "(", "intersection", ")", "/", "float", "(", "np", ".", "sum", "(", "union", ")", ")", "\n", "\n", "if", "visualize", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "2", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "images", "[", "0", "]", ")", "\n", "subplot", ".", "set_title", "(", "'image 1'", ")", "\n", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "2", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "images", "[", "1", "]", ")", "\n", "subplot", ".", "set_title", "(", "'image 2'", ")", "\n", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "2", ",", "3", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "intersection", ")", "\n", "subplot", ".", "set_title", "(", "'intersection'", ")", "\n", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "2", ",", "3", ",", "5", ")", "\n", "plt", ".", "imshow", "(", "union", ")", "\n", "subplot", ".", "set_title", "(", "'union'", ")", "\n", "\n", "subplot", "=", "fig", ".", "add_subplot", "(", "2", ",", "3", ",", "6", ")", "\n", "plt", ".", "imshow", "(", "intersection", ".", "astype", "(", "int", ")", "+", "union", ".", "astype", "(", "int", ")", ")", "\n", "subplot", ".", "set_title", "(", "'IoU'", ")", "\n", "\n", "plt", ".", "suptitle", "(", "'computed IoU = %.5f'", "%", "(", "IoU", ")", ",", "fontsize", "=", "24", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.visualize_keypoints": [[12, 50], ["vis_mesh_list.append", "open3d.visualization.draw_geometries_with_animation_callback", "open3d.geometry.TriangleMesh.create_coordinate_frame", "open3d.io.read_point_cloud", "o3d.io.read_point_cloud.transform", "vis_mesh_list.append", "open3d.io.read_triangle_mesh", "o3d.io.read_triangle_mesh.paint_uniform_color", "o3d.io.read_triangle_mesh.sample_points_uniformly", "vis_mesh_list.append", "open3d.geometry.TriangleMesh.create_sphere", "o3d.geometry.TriangleMesh.create_sphere.translate", "o3d.geometry.TriangleMesh.create_sphere.paint_uniform_color", "vis_mesh_list.append", "open3d.geometry.TriangleMesh.create_sphere", "o3d.geometry.TriangleMesh.create_sphere.translate", "o3d.geometry.TriangleMesh.create_sphere.paint_uniform_color", "vis_mesh_list.append", "vis.get_view_control", "vis.get_view_control.rotate", "numpy.dot"], "function", ["None"], ["def", "visualize_keypoints", "(", "X", ",", "Y", ",", "T", ",", "model_off_path", ",", "scene_ply_path", ")", ":", "\n", "    ", "vis_mesh_list", "=", "[", "]", "\n", "vis_mesh_list", ".", "append", "(", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "0.2", ")", ")", "\n", "\n", "if", "scene_ply_path", "is", "not", "None", ":", "\n", "        ", "sce_mesh", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "scene_ply_path", ")", "\n", "sce_mesh", ".", "transform", "(", "T", ")", "\n", "#sce_mesh = sce_mesh.voxel_down_sample(voxel_size=0.002)", "\n", "vis_mesh_list", ".", "append", "(", "sce_mesh", ")", "\n", "\n", "", "if", "model_off_path", "is", "not", "None", ":", "\n", "        ", "obj_mesh", "=", "o3d", ".", "io", ".", "read_triangle_mesh", "(", "model_off_path", ")", "\n", "obj_mesh", ".", "paint_uniform_color", "(", "[", "0.6", ",", "0.6", ",", "0.1", "]", ")", "\n", "obj_cloud", "=", "obj_mesh", ".", "sample_points_uniformly", "(", "5000", ")", "\n", "vis_mesh_list", ".", "append", "(", "obj_cloud", ")", "\n", "\n", "", "for", "pt", "in", "X", ":", "\n", "        ", "keypt_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_sphere", "(", "radius", "=", "0.006", ")", "\n", "pt", "=", "np", ".", "dot", "(", "T", "[", ":", "3", ",", ":", "3", "]", ",", "pt", ")", "+", "T", "[", ":", "3", ",", "3", "]", "\n", "keypt_mesh", ".", "translate", "(", "pt", ")", "\n", "keypt_mesh", ".", "paint_uniform_color", "(", "[", "0.7", ",", "0.1", ",", "0.1", "]", ")", "#red", "\n", "#keypt_mesh.paint_uniform_color([0.1, 0.1, 0.7]) #blue", "\n", "vis_mesh_list", ".", "append", "(", "keypt_mesh", ")", "\n", "\n", "", "for", "pt", "in", "Y", ":", "\n", "        ", "keypt_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_sphere", "(", "radius", "=", "0.005", ")", "\n", "keypt_mesh", ".", "translate", "(", "pt", ")", "\n", "#keypt_mesh.paint_uniform_color([0.7, 0.1, 0.1]) #red", "\n", "keypt_mesh", ".", "paint_uniform_color", "(", "[", "0.1", ",", "0.1", ",", "0.7", "]", ")", "#blue", "\n", "vis_mesh_list", ".", "append", "(", "keypt_mesh", ")", "\n", "\n", "", "def", "rotate_view", "(", "vis", ")", ":", "\n", "        ", "ctr", "=", "vis", ".", "get_view_control", "(", ")", "\n", "ctr", ".", "rotate", "(", "10.0", ",", "0.0", ")", "\n", "return", "False", "\n", "\n", "#o3d.visualization.draw_geometries(vis_mesh_list)", "\n", "", "o3d", ".", "visualization", ".", "draw_geometries_with_animation_callback", "(", "vis_mesh_list", ",", "rotate_view", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.procrustes": [[51, 93], ["X.mean", "Y.mean", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.linalg.svd", "numpy.dot", "s.sum", "numpy.concatenate", "numpy.linalg.det", "numpy.dot", "numpy.dot", "numpy.zeros", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "procrustes", "(", "X", ",", "Y", ",", "scaling", "=", "True", ",", "reflection", "=", "'best'", ")", ":", "\n", "    ", "n", ",", "m", "=", "X", ".", "shape", "\n", "ny", ",", "my", "=", "Y", ".", "shape", "\n", "muX", "=", "X", ".", "mean", "(", "0", ")", "\n", "muY", "=", "Y", ".", "mean", "(", "0", ")", "\n", "X0", "=", "X", "-", "muX", "\n", "Y0", "=", "Y", "-", "muY", "\n", "ssX", "=", "(", "X0", "**", "2.", ")", ".", "sum", "(", ")", "\n", "ssY", "=", "(", "Y0", "**", "2.", ")", ".", "sum", "(", ")", "\n", "\n", "normX", "=", "np", ".", "sqrt", "(", "ssX", ")", "\n", "normY", "=", "np", ".", "sqrt", "(", "ssY", ")", "\n", "X0", "/=", "normX", "\n", "Y0", "/=", "normY", "\n", "if", "my", "<", "m", ":", "\n", "        ", "Y0", "=", "np", ".", "concatenate", "(", "(", "Y0", ",", "np", ".", "zeros", "(", "n", ",", "m", "-", "my", ")", ")", ",", "0", ")", "\n", "\n", "", "A", "=", "np", ".", "dot", "(", "X0", ".", "T", ",", "Y0", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "A", ",", "full_matrices", "=", "False", ")", "\n", "V", "=", "Vt", ".", "T", "\n", "T", "=", "np", ".", "dot", "(", "V", ",", "U", ".", "T", ")", "\n", "\n", "if", "reflection", "is", "not", "'best'", ":", "\n", "        ", "have_reflection", "=", "np", ".", "linalg", ".", "det", "(", "T", ")", "<", "0", "\n", "if", "reflection", "!=", "have_reflection", ":", "\n", "            ", "V", "[", ":", ",", "-", "1", "]", "*=", "-", "1", "\n", "s", "[", "-", "1", "]", "*=", "-", "1", "\n", "T", "=", "np", ".", "dot", "(", "V", ",", "U", ".", "T", ")", "\n", "", "", "traceTA", "=", "s", ".", "sum", "(", ")", "\n", "if", "scaling", ":", "\n", "        ", "b", "=", "traceTA", "*", "normX", "/", "normY", "\n", "d", "=", "1", "-", "traceTA", "**", "2", "\n", "Z", "=", "normX", "*", "traceTA", "*", "np", ".", "dot", "(", "Y0", ",", "T", ")", "+", "muX", "\n", "", "else", ":", "\n", "        ", "b", "=", "1", "\n", "d", "=", "1", "+", "ssY", "/", "ssX", "-", "2", "*", "traceTA", "*", "normY", "/", "normX", "\n", "Z", "=", "normY", "*", "np", ".", "dot", "(", "Y0", ",", "T", ")", "+", "muX", "\n", "", "if", "my", "<", "m", ":", "\n", "        ", "T", "=", "T", "[", ":", "my", ",", ":", "]", "\n", "", "c", "=", "muX", "-", "b", "*", "np", ".", "dot", "(", "muY", ",", "T", ")", "\n", "tform", "=", "{", "'rotation'", ":", "T", ",", "'scale'", ":", "b", ",", "'translation'", ":", "c", "}", "\n", "return", "d", ",", "Z", ",", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.get_visibility": [[94, 106], ["vec.append", "vec.append", "numpy.eye"], "function", ["None"], ["", "def", "get_visibility", "(", "select", ")", ":", "\n", "    ", "vec", "=", "[", "]", "\n", "row", ",", "col", "=", "0", ",", "0", "\n", "while", "col", "<", "(", "select", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "m", "=", "select", "[", "row", ":", "row", "+", "3", ",", "col", ":", "col", "+", "3", "]", "\n", "if", "(", "m", ".", "shape", "[", "0", "]", "==", "0", ")", "or", "not", "(", "m", "==", "np", ".", "eye", "(", "3", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "vec", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "vec", ".", "append", "(", "1", ")", "\n", "row", "+=", "3", "\n", "", "col", "+=", "3", "\n", "", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.get_object_definition": [[107, 112], ["numpy.asarray", "open", "zip", "float", "file.readlines", "[].rsplit", "line.split", "i.rsplit"], "function", ["None"], ["", "def", "get_object_definition", "(", "pp_file", ",", "vec", ")", ":", "\n", "    ", "with", "open", "(", "pp_file", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "lines", "=", "[", "[", "float", "(", "i", ".", "rsplit", "(", "'='", ")", "[", "1", "]", ".", "rsplit", "(", "'\"'", ")", "[", "1", "]", ")", "for", "i", "in", "line", ".", "split", "(", ")", "[", "1", ":", "4", "]", "]", "for", "line", "in", "file", ".", "readlines", "(", ")", "[", "8", ":", "-", "1", "]", "]", "\n", "", "out", "=", "[", "kpt", "for", "v", ",", "kpt", "in", "zip", "(", "vec", ",", "lines", ")", "if", "v", "]", "\n", "return", "np", ".", "asarray", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.get_object_manual": [[113, 116], ["numpy.asarray", "zip", "kpts.transpose"], "function", ["None"], ["", "def", "get_object_manual", "(", "kpts", ",", "vec", ")", ":", "\n", "    ", "out", "=", "[", "kpt", "for", "v", ",", "kpt", "in", "zip", "(", "vec", ",", "kpts", ".", "transpose", "(", ")", ")", "if", "v", "]", "\n", "return", "np", ".", "asarray", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.get_gt_scene_tfs.draw_registration_result": [[10, 19], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.transform", "vis_mesh_list.append", "vis_mesh_list.append", "vis_mesh_list.append", "open3d.visualization.draw_geometries", "open3d.geometry.TriangleMesh.create_coordinate_frame"], "function", ["None"], ["def", "draw_registration_result", "(", "source", ",", "target", ",", "transformation", ")", ":", "\n", "    ", "source_temp", "=", "copy", ".", "deepcopy", "(", "source", ")", "\n", "target_temp", "=", "copy", ".", "deepcopy", "(", "target", ")", "\n", "source_temp", ".", "transform", "(", "transformation", ")", "\n", "vis_mesh_list", "=", "[", "]", "\n", "vis_mesh_list", ".", "append", "(", "source_temp", ")", "\n", "vis_mesh_list", ".", "append", "(", "target_temp", ")", "\n", "vis_mesh_list", ".", "append", "(", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "size", "=", "0.1", ")", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "vis_mesh_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.get_gt_scene_tfs.compute_init_transformation": [[20, 31], ["numpy.zeros", "list", "list", "open3d.registration.TransformationEstimationPointToPoint", "o3d.registration.TransformationEstimationPointToPoint.compute_transformation", "range", "range", "open3d.utility.Vector2iVector", "len", "len", "len"], "function", ["None"], ["", "def", "compute_init_transformation", "(", "point_set", ",", "point_set_ref", ")", ":", "\n", "    ", "corr", "=", "np", ".", "zeros", "(", "(", "len", "(", "point_set", ".", "points", ")", ",", "2", ")", ")", "\n", "corr", "[", ":", ",", "0", "]", "=", "list", "(", "range", "(", "len", "(", "point_set", ".", "points", ")", ")", ")", "\n", "corr", "[", ":", ",", "1", "]", "=", "list", "(", "range", "(", "len", "(", "point_set", ".", "points", ")", ")", ")", "\n", "\n", "# Estimate rough transformation using correspondences", "\n", "p2p", "=", "o3d", ".", "registration", ".", "TransformationEstimationPointToPoint", "(", ")", "\n", "trans_init", "=", "p2p", ".", "compute_transformation", "(", "point_set_ref", ",", "point_set", ",", "\n", "o3d", ".", "utility", ".", "Vector2iVector", "(", "corr", ")", ")", "\n", "\n", "return", "trans_init", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.get_gt_scene_tfs.align_using_icp": [[32, 39], ["open3d.registration.registration_icp", "get_gt_scene_tfs.draw_registration_result"], "function", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.get_gt_scene_tfs.draw_registration_result"], ["", "def", "align_using_icp", "(", "scene_mesh", ",", "object_mesh", ",", "initial_guess", ",", "visualize", "=", "False", ")", ":", "\n", "# Point-to-point ICP for refinement", "\n", "    ", "reg_p2p", "=", "o3d", ".", "registration", ".", "registration_icp", "(", "object_mesh", ",", "scene_mesh", ",", "0.01", ",", "initial_guess", ")", "\n", "# Visualize if required", "\n", "if", "visualize", ":", "\n", "        ", "draw_registration_result", "(", "object_mesh", ",", "scene_mesh", ",", "reg_p2p", ".", "transformation", ")", "\n", "", "return", "reg_p2p", ".", "transformation", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.repeat_exp.visualize_points_in_scene": [[9, 23], ["open3d.io.read_point_cloud", "vis_mesh_list.append", "open3d.visualization.draw_geometries", "open3d.geometry.TriangleMesh.create_sphere", "o3d.geometry.TriangleMesh.create_sphere.translate", "o3d.geometry.TriangleMesh.create_sphere.paint_uniform_color", "vis_mesh_list.append"], "function", ["None"], ["def", "visualize_points_in_scene", "(", "scene_ply_path", ",", "scene_obj_kpts", ")", ":", "\n", "    ", "\"\"\"\n    Function to visualize a set of 3D points in a .PLY scene.\n    \"\"\"", "\n", "vis_mesh_list", "=", "[", "]", "\n", "scene_cloud", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "scene_ply_path", ")", "\n", "vis_mesh_list", ".", "append", "(", "scene_cloud", ")", "\n", "for", "keypt", "in", "scene_obj_kpts", ":", "\n", "        ", "keypt_mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_sphere", "(", "radius", "=", "0.01", ")", "\n", "keypt_mesh", ".", "translate", "(", "keypt", ")", "\n", "keypt_mesh", ".", "paint_uniform_color", "(", "[", "0.1", ",", "0.1", ",", "0.7", "]", ")", "\n", "vis_mesh_list", ".", "append", "(", "keypt_mesh", ")", "\n", "", "o3d", ".", "visualization", ".", "draw_geometries", "(", "vis_mesh_list", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.repeat_exp.process": [[24, 83], ["numpy.hsplit", "numpy.reshape", "np.reshape.flatten", "len", "len", "numpy.zeros", "enumerate", "numpy.array().repeat", "numpy.array().repeat", "numpy.array().repeat", "app.optimize.predict", "app.optimize.predict.x[].reshape", "object_model.squeeze.squeeze", "utils.sparse_model.SparseModel().writer", "os.path.join", "numpy.savez", "numpy.vsplit", "sum", "numpy.eye", "scene_kpts[].transpose", "os.path.join", "print", "print", "print", "map", "numpy.nonzero", "numpy.nonzero", "numpy.array", "numpy.array", "numpy.array", "utils.sparse_model.SparseModel", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.app.geo_constrain.predict", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utils.sparse_model.SparseModel.writer"], ["", "def", "process", "(", "input_array", ",", "num_out_scenes", ",", "output_dir", ")", ":", "\n", "#process input", "\n", "    ", "scene_kpts", "=", "input_array", "[", "'ref'", "]", "\n", "selection_matrix", "=", "input_array", "[", "'sm'", "]", "\n", "\n", "#get number of scene and keypoints in original experiment", "\n", "num_scenes", "=", "scene_kpts", ".", "shape", "[", "0", "]", "\n", "num_keypts", "=", "scene_kpts", ".", "shape", "[", "2", "]", "\n", "\n", "# convert selection matrix to a binary matrix", "\n", "col_splits", "=", "np", ".", "hsplit", "(", "selection_matrix", ",", "selection_matrix", ".", "shape", "[", "1", "]", "//", "3", ")", "\n", "row_splits", "=", "[", "np", ".", "vsplit", "(", "col", ",", "col", ".", "shape", "[", "0", "]", "//", "3", ")", "for", "col", "in", "col_splits", "]", "\n", "vis_list", "=", "[", "sum", "(", "map", "(", "lambda", "x", ":", "(", "x", "==", "np", ".", "eye", "(", "3", ")", ")", ".", "all", "(", ")", ",", "mat", ")", ")", "for", "mat", "in", "row_splits", "]", "\n", "# binary matrix of shape (num of scenes x num of keypoints)", "\n", "vis_mat", "=", "np", ".", "reshape", "(", "vis_list", ",", "[", "num_scenes", ",", "num_keypts", "]", ")", "\n", "\n", "#slice binary matrix", "\n", "vis_mat", "=", "vis_mat", "[", ":", "num_out_scenes", "]", "\n", "\n", "# convert binary matrix back to selection matrix", "\n", "select_vec", "=", "vis_mat", ".", "flatten", "(", ")", "\n", "total_kpt_count", "=", "len", "(", "select_vec", ")", "\n", "found_kpt_count", "=", "len", "(", "np", ".", "nonzero", "(", "select_vec", ")", "[", "0", "]", ")", "\n", "selection_matrix", "=", "np", ".", "zeros", "(", "(", "found_kpt_count", "*", "3", ",", "total_kpt_count", "*", "3", ")", ")", "\n", "for", "idx", ",", "nz_idx", "in", "enumerate", "(", "np", ".", "nonzero", "(", "select_vec", ")", "[", "0", "]", ")", ":", "\n", "        ", "selection_matrix", "[", "(", "idx", "*", "3", ")", ":", "(", "idx", "*", "3", ")", "+", "3", ",", "(", "nz_idx", "*", "3", ")", ":", "(", "nz_idx", "*", "3", ")", "+", "3", "]", "=", "np", ".", "eye", "(", "3", ")", "\n", "\n", "#slice scene keypoints", "\n", "", "scene_kpts", "=", "scene_kpts", "[", ":", "num_out_scenes", "]", "\n", "\n", "#initialize quaternions and translations for each scene", "\n", "scene_t_ini", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", ".", "repeat", "(", "scene_kpts", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "scene_q_ini", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", "]", ")", ".", "repeat", "(", "scene_kpts", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "scene_P_ini", "=", "np", ".", "array", "(", "[", "[", "[", "0", ",", "0", ",", "0", "]", "]", "]", ")", ".", "repeat", "(", "scene_kpts", ".", "shape", "[", "2", "]", ",", "axis", "=", "0", ")", "\n", "#initialize with known keypoints", "\n", "scene_P_ini", "=", "scene_kpts", "[", "0", "]", ".", "transpose", "(", ")", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "#main optimization step", "\n", "res", "=", "app", ".", "optimize", ".", "predict", "(", "scene_kpts", ",", "scene_t_ini", ",", "scene_q_ini", ",", "scene_P_ini", ",", "selection_matrix", ")", "\n", "\n", "#extract generated sparse object model optimization output", "\n", "len_ts", "=", "scene_t_ini", "[", "1", ":", "]", ".", "size", "\n", "len_qs", "=", "scene_q_ini", "[", "1", ":", "]", ".", "size", "\n", "object_model", "=", "res", ".", "x", "[", "len_ts", "+", "len_qs", ":", "]", ".", "reshape", "(", "scene_P_ini", ".", "shape", ")", "\n", "object_model", "=", "object_model", ".", "squeeze", "(", ")", "\n", "#save the generated sparse object model", "\n", "SparseModel", "(", ")", ".", "writer", "(", "object_model", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"sparse_model.txt\"", ")", ")", "\n", "computed_vector", "=", "res", ".", "x", "[", ":", "(", "len_ts", "+", "len_qs", ")", "]", "\n", "success_flag", "=", "res", ".", "success", "\n", "\n", "#save the input and the output from optimization step", "\n", "out_fn", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'saved_meta_data'", ")", "\n", "np", ".", "savez", "(", "out_fn", ",", "model", "=", "object_model", ",", "scenes", "=", "computed_vector", ",", "ref", "=", "scene_kpts", ",", "sm", "=", "selection_matrix", ")", "\n", "\n", "if", "success_flag", ":", "\n", "        ", "print", "(", "\"--------\\n--------\\n--------\"", ")", "\n", "print", "(", "\"Computed results saved at {}\"", ".", "format", "(", "out_fn", ")", ")", "\n", "print", "(", "\"--------\\n--------\\n--------\"", ")", "\n", "", "return", "object_model", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.visualize_all_scenes.visualize": [[7, 37], ["list_of_scene_dirs.sort", "print", "print", "print", "tkinter.Tk", "tk.Tk.winfo_screenwidth", "tk.Tk.winfo_screenheight", "enumerate", "os.path.join", "len", "open3d.io.read_point_cloud", "scene_meshes.append", "open3d.visualization.Visualizer", "o3d.visualization.Visualizer.create_window", "o3d.visualization.Visualizer.add_geometry", "visualizers.append", "zip", "os.listdir", "os.path.isdir", "o3d.visualization.Visualizer.update_geometry", "o3d.visualization.Visualizer.poll_events", "o3d.visualization.Visualizer.update_renderer", "os.path.join", "repr"], "function", ["None"], ["def", "visualize", "(", "path_to_dataset", ")", ":", "\n", "# Get list of directories", "\n", "    ", "list_of_scene_dirs", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "path_to_dataset", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "path_to_dataset", ",", "d", ")", ")", "]", "\n", "list_of_scene_dirs", ".", "sort", "(", ")", "\n", "list_of_scene_meshes", "=", "[", "os", ".", "path", ".", "join", "(", "path_to_dataset", ",", "d", ",", "d", "+", "'.ply'", ")", "for", "d", "in", "list_of_scene_dirs", "]", "\n", "print", "(", "\"Number of scenes: \"", ",", "len", "(", "list_of_scene_dirs", ")", ")", "\n", "print", "(", "\"List of scenes: \"", ",", "list_of_scene_dirs", ")", "\n", "print", "(", "\"List of scenes meshes: \"", ",", "list_of_scene_meshes", ")", "\n", "\n", "# Create grid", "\n", "root", "=", "tk", ".", "Tk", "(", ")", "\n", "screen_width", "=", "root", ".", "winfo_screenwidth", "(", ")", "\n", "screen_height", "=", "root", ".", "winfo_screenheight", "(", ")", "\n", "# Visualize", "\n", "visualizers", "=", "[", "]", "\n", "scene_meshes", "=", "[", "]", "\n", "for", "idx", ",", "scene_mesh_path", "in", "enumerate", "(", "list_of_scene_meshes", ")", ":", "\n", "        ", "scene_mesh", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "scene_mesh_path", ")", "\n", "scene_meshes", ".", "append", "(", "scene_mesh", ")", "\n", "vis", "=", "o3d", ".", "visualization", ".", "Visualizer", "(", ")", "\n", "vis", ".", "create_window", "(", "window_name", "=", "repr", "(", "idx", ")", ",", "width", "=", "960", ",", "height", "=", "540", ",", "left", "=", "0", ",", "top", "=", "0", ")", "\n", "vis", ".", "add_geometry", "(", "scene_mesh", ")", "\n", "visualizers", ".", "append", "(", "vis", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "for", "vis", ",", "scene_mesh", "in", "zip", "(", "visualizers", ",", "scene_meshes", ")", ":", "\n", "            ", "vis", ".", "update_geometry", "(", "scene_mesh", ")", "\n", "vis", ".", "poll_events", "(", ")", "\n", "vis", ".", "update_renderer", "(", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.visualize3d.process": [[9, 37], ["print", "print", "evaluate3d.get_visibility", "evaluate3d.get_object_manual", "evaluate3d.get_object_definition", "evaluate3d.procrustes", "transforms3d.compose", "evaluate3d.get_object_definition", "opt_output[].reshape", "zip", "print", "print", "numpy.linalg.inv", "numpy.ones", "numpy.ones", "err.append", "evaluate3d.visualize_keypoints", "T[].dot", "sum", "len"], "function", ["home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.get_visibility", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.get_object_manual", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.get_object_definition", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.procrustes", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.get_object_definition", "home.repos.pwc.inspect_result.rohanpsingh_RapidPoseLabels.utility.evaluate3d.visualize_keypoints"], ["def", "process", "(", "input_array", ",", "pp", ",", "off", ")", ":", "\n", "    ", "ref_kpts", "=", "input_array", "[", "'ref'", "]", "\n", "select_mat", "=", "input_array", "[", "'sm'", "]", "\n", "opt_output", "=", "input_array", "[", "'res'", "]", "\n", "num_scenes", "=", "ref_kpts", ".", "shape", "[", "0", "]", "\n", "num_keypts", "=", "ref_kpts", ".", "shape", "[", "2", "]", "\n", "print", "(", "\"Number of scenes: \"", ",", "num_scenes", ")", "\n", "print", "(", "\"Number of keypts: \"", ",", "num_keypts", ")", "\n", "\n", "sce_id", "=", "0", "\n", "vis_vec", "=", "evaluate3d", ".", "get_visibility", "(", "select_mat", "[", ":", "3", "*", "num_keypts", ",", ":", "3", "*", "num_keypts", "]", ")", "\n", "obj_man", "=", "evaluate3d", ".", "get_object_manual", "(", "ref_kpts", "[", "sce_id", "]", ",", "vis_vec", ")", "\n", "obj_def", "=", "evaluate3d", ".", "get_object_definition", "(", "pp", ",", "vis_vec", ")", "\n", "d", ",", "Z", ",", "tform", "=", "evaluate3d", ".", "procrustes", "(", "obj_def", ",", "obj_man", ",", "False", ")", "\n", "\n", "T", "=", "tfa", ".", "compose", "(", "tform", "[", "'translation'", "]", ",", "np", ".", "linalg", ".", "inv", "(", "tform", "[", "'rotation'", "]", ")", ",", "np", ".", "ones", "(", "3", ")", ")", "\n", "\n", "obj_all", "=", "evaluate3d", ".", "get_object_definition", "(", "pp", ",", "np", ".", "ones", "(", "num_keypts", ")", ")", "\n", "obj_est", "=", "opt_output", "[", "(", "num_scenes", "-", "1", ")", "*", "7", ":", "]", ".", "reshape", "(", "(", "num_keypts", ",", "3", ")", ")", "\n", "err", "=", "[", "]", "\n", "for", "(", "x", ",", "y", ")", "in", "zip", "(", "obj_all", ",", "obj_est", ")", ":", "\n", "        ", "y", "=", "(", "T", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "y", ")", "+", "T", "[", ":", "3", ",", "3", "]", ")", "\n", "err", ".", "append", "(", "(", "(", "x", "-", "y", ")", "**", "2", ")", ".", "sum", "(", ")", "**", "0.5", ")", "\n", "\n", "", "print", "(", "\"Mean error: \"", ",", "sum", "(", "err", ")", "/", "len", "(", "err", ")", ")", "\n", "if", "visualize", ":", "\n", "        ", "evaluate3d", ".", "visualize_keypoints", "(", "obj_est", ",", "obj_all", ",", "T", ",", "off", ",", "None", ")", "\n", "", "print", "(", "\"---\"", ")", "\n", "\n"]]}