{"home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.UNet.__init__": [[48, 78], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "unet.UNet.apply", "unet.UNet.downblocks.append", "unet.UNet.deconvblocks.append", "unet.UNet.upblocks.append", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "range", "unet.Unet_DoubleConvBlock", "unet.deconv_block", "unet.Unet_DoubleConvBlock"], "methods", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.__init__", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.Unet_DoubleConvBlock", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.deconv_block", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.Unet_DoubleConvBlock"], ["def", "__init__", "(", "self", ",", "depth", "=", "4", ",", "width", "=", "64", ",", "growth_rate", "=", "2", ",", "in_channels", "=", "1", ",", "out_channels", "=", "2", ",", "threeD", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "out_channels", "=", "[", "width", "*", "(", "growth_rate", "**", "i", ")", "for", "i", "in", "range", "(", "self", ".", "depth", "+", "1", ")", "]", "\n", "\n", "# Downsampling Path Layers", "\n", "self", ".", "downblocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "current_in_channels", "=", "in_channels", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", "+", "1", ")", ":", "\n", "\t\t\t", "self", ".", "downblocks", ".", "append", "(", "Unet_DoubleConvBlock", "(", "current_in_channels", ",", "self", ".", "out_channels", "[", "i", "]", ",", "threeD", "=", "threeD", ")", ")", "\n", "current_in_channels", "=", "self", ".", "out_channels", "[", "i", "]", "\n", "\n", "", "self", ".", "feature_channels", "=", "current_in_channels", "+", "self", ".", "out_channels", "[", "i", "-", "1", "]", "\n", "# Upsampling Path Layers", "\n", "self", ".", "deconvblocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "upblocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "\t\t\t", "self", ".", "deconvblocks", ".", "append", "(", "deconv_block", "(", "current_in_channels", ",", "self", ".", "out_channels", "[", "-", "2", "-", "i", "]", ",", "threeD", "=", "threeD", ")", ")", "\n", "self", ".", "upblocks", ".", "append", "(", "Unet_DoubleConvBlock", "(", "current_in_channels", ",", "self", ".", "out_channels", "[", "-", "2", "-", "i", "]", ",", "threeD", "=", "threeD", ")", ")", "\n", "current_in_channels", "=", "self", ".", "out_channels", "[", "-", "2", "-", "i", "]", "\n", "\n", "", "if", "threeD", ":", "\n", "\t\t\t", "self", ".", "last_layer", "=", "nn", ".", "Conv3d", "(", "current_in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "MaxPool3d", "(", "2", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "last_layer", "=", "nn", ".", "Conv2d", "(", "current_in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "\n", "# Initialization", "\n", "", "self", ".", "apply", "(", "self", ".", "weight_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.UNet.forward": [[80, 103], ["list", "range", "range", "unet.UNet.last_layer", "list.append", "unet.UNet.downsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Downsampling Path", "\n", "\t\t", "out", "=", "x", "\n", "down_features_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "\t\t\t", "out", "=", "self", ".", "downblocks", "[", "i", "]", "(", "out", ")", "\n", "down_features_list", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "# bottleneck", "\n", "", "out", "=", "self", ".", "downblocks", "[", "-", "1", "]", "(", "out", ")", "\n", "features", "=", "[", "down_features_list", "[", "-", "1", "]", ",", "out", "]", "\n", "\n", "# Upsampling Path", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "\t\t\t", "out", "=", "self", ".", "deconvblocks", "[", "i", "]", "(", "out", ")", "\n", "down_features", "=", "down_features_list", "[", "-", "1", "-", "i", "]", "\n", "out", "=", "torch", ".", "cat", "(", "[", "down_features", ",", "out", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "upblocks", "[", "i", "]", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "last_layer", "(", "out", ")", "\n", "\n", "return", "out", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.UNet.weight_init": [[105, 118], ["isinstance", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.fill_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.fill_", "m.bias.data.fill_"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "weight_init", "(", "m", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.conv_block": [[7, 19], ["torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["def", "conv_block", "(", "in_ch", "=", "1", ",", "out_ch", "=", "1", ",", "threeD", "=", "True", ")", ":", "\n", "\t", "if", "threeD", ":", "\n", "\t\t", "layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "\t\t", "layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.deconv_block": [[21, 33], ["torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["", "def", "deconv_block", "(", "in_ch", "=", "1", ",", "out_ch", "=", "1", ",", "scale_factor", "=", "2", ",", "threeD", "=", "True", ")", ":", "\n", "\t", "if", "threeD", ":", "\n", "\t\t", "layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose3d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "scale_factor", ",", "stride", "=", "scale_factor", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "\t\t", "layer", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_ch", ",", "out_ch", ",", "kernel_size", "=", "scale_factor", ",", "stride", "=", "scale_factor", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.Unet_DoubleConvBlock": [[35, 40], ["torch.Sequential", "unet.conv_block", "unet.conv_block"], "function", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.conv_block", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.unet.conv_block"], ["", "def", "Unet_DoubleConvBlock", "(", "in_ch", "=", "1", ",", "out_ch", "=", "1", ",", "threeD", "=", "True", ")", ":", "\n", "\t", "layer", "=", "nn", ".", "Sequential", "(", "conv_block", "(", "in_ch", "=", "in_ch", ",", "out_ch", "=", "out_ch", ",", "threeD", "=", "threeD", ")", ",", "\n", "conv_block", "(", "in_ch", "=", "out_ch", ",", "out_ch", "=", "out_ch", ",", "threeD", "=", "threeD", ")", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.train.train": [[16, 36], ["len", "tqdm.tqdm", "enumerate", "optimizer.zero_grad", "model", "loss.get_labels", "loss.custom_loss", "loss.custom_loss.backward", "optimizer.step", "loss.custom_loss.item", "tqdm.tqdm.set_postfix", "float", "images1.to", "images2.to", "deformations.to", "loss.custom_loss.item"], "function", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.loss.get_labels", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.loss.custom_loss"], ["def", "train", "(", "model", ",", "train_dataloader", ",", "optimizer", ",", "device", "=", "\"cuda:0\"", ",", "out_dir", "=", "\"./\"", ")", ":", "\n", "\t", "train_loss", "=", "0.", "\n", "nbatches", "=", "len", "(", "train_dataloader", ")", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "train_dataloader", ")", ",", "desc", "=", "\"training\"", ",", "total", "=", "nbatches", ",", "unit", "=", "\"batches\"", ")", "\n", "for", "batch_no", ",", "(", "images1", ",", "images2", ",", "deformations", ")", "in", "pbar", ":", "\n", "\t\t", "images1", ",", "images2", ",", "deformations", "=", "images1", ".", "to", "(", "device", ")", ",", "images2", ".", "to", "(", "device", ")", ",", "deformations", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "landmark_probs1", ",", "landmark_probs2", ",", "keypoints1", ",", "keypoints2", ",", "desc_pairs_score", ",", "desc_pairs_norm", "=", "model", "(", "images1", ",", "images2", ")", "\n", "gt1", ",", "gt2", ",", "match_target", "=", "get_labels", "(", "keypoints1", ",", "keypoints2", ",", "deformations", ",", "device", "=", "device", ")", "\n", "\n", "loss", "=", "custom_loss", "(", "landmark_probs1", ",", "landmark_probs2", ",", "desc_pairs_score", ",", "desc_pairs_norm", ",", "gt1", ",", "gt2", ",", "match_target", ",", "model", ".", "k", ",", "device", "=", "device", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "pbar", ".", "set_postfix", "(", "{", "'Loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "", "train_loss", "=", "train_loss", "/", "float", "(", "nbatches", ")", "\n", "return", "train_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.train.validation": [[38, 68], ["len", "tqdm.tqdm", "enumerate", "tqdm.tqdm.set_postfix", "float", "images1.to().numpy.to", "images2.to().numpy.to", "deformations.to", "torch.no_grad", "torch.no_grad", "model", "loss.get_labels", "loss.custom_loss", "loss.custom_loss.item", "model.predict", "images1.to().numpy.to().numpy", "images2.to().numpy.to().numpy", "range", "loss.custom_loss.item", "utils.visualize_keypoints", "images1.to().numpy.to", "images2.to().numpy.to", "im1.copy", "im2.copy"], "function", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.loss.get_labels", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.loss.custom_loss", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.predict", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.utils.visualize_keypoints"], ["", "def", "validation", "(", "model", ",", "val_dataloader", ",", "device", "=", "\"cuda:0\"", ",", "out_dir", "=", "\"./\"", ")", ":", "\n", "\t", "val_loss", "=", "0.", "\n", "nbatches", "=", "len", "(", "val_dataloader", ")", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "val_dataloader", ")", ",", "desc", "=", "\"validation\"", ",", "total", "=", "nbatches", ",", "unit", "=", "\"batches\"", ")", "\n", "for", "batch_no", ",", "(", "images1", ",", "images2", ",", "deformations", ")", "in", "pbar", ":", "\n", "\t\t", "images1", ",", "images2", ",", "deformations", "=", "images1", ".", "to", "(", "device", ")", ",", "images2", ".", "to", "(", "device", ")", ",", "deformations", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "landmark_probs1", ",", "landmark_probs2", ",", "keypoints1", ",", "keypoints2", ",", "desc_pairs_score", ",", "desc_pairs_norm", "=", "model", "(", "images1", ",", "images2", ")", "\n", "gt1", ",", "gt2", ",", "match_target", "=", "get_labels", "(", "keypoints1", ",", "keypoints2", ",", "deformations", ",", "device", "=", "device", ")", "\n", "\n", "loss", "=", "custom_loss", "(", "landmark_probs1", ",", "landmark_probs2", ",", "desc_pairs_score", ",", "desc_pairs_norm", ",", "gt1", ",", "gt2", ",", "match_target", ",", "model", ".", "k", ",", "device", "=", "device", ")", "\n", "val_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "pbar", ".", "set_postfix", "(", "{", "'Loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "if", "batch_no", "%", "100", "==", "0", ":", "\n", "\t\t\t", "output1", ",", "output2", ",", "output3", "=", "model", ".", "predict", "(", "images1", ",", "images2", ")", "\n", "images1", "=", "images1", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "images2", "=", "images2", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "images1", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "im1", "=", "images1", "[", "i", ",", "0", ",", ":", ",", ":", "]", "\n", "im2", "=", "images2", "[", "i", ",", "0", ",", ":", ",", ":", "]", "\n", "out1", "=", "output1", "[", "i", "]", "\n", "out2", "=", "output2", "[", "i", "]", "\n", "mask", "=", "output3", "[", "i", "]", "\n", "visualize_keypoints", "(", "im1", ".", "copy", "(", ")", ",", "im2", ".", "copy", "(", ")", ",", "out1", ",", "out2", ",", "mask", ",", "out_dir", "=", "out_dir", ",", "base_name", "=", "\"iter_{}_{}\"", ".", "format", "(", "batch_no", ",", "i", ")", ")", "\n", "\n", "", "", "", "val_loss", "=", "val_loss", "/", "float", "(", "nbatches", ")", "\n", "return", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.train.parse_input_arguments": [[70, 83], ["parser.parse_args", "vars", "os.makedirs", "json.dump", "open", "os.path.join"], "function", ["None"], ["", "def", "parse_input_arguments", "(", "parser", ")", ":", "\n", "\t", "run_params", "=", "parser", ".", "parse_args", "(", ")", "\n", "run_params", "=", "vars", "(", "run_params", ")", "\n", "\n", "if", "run_params", "[", "\"data_dir\"", "]", "is", "None", ":", "\n", "\t\t", "run_params", "[", "\"data_dir\"", "]", "=", "\"/export/scratch3/grewal/Data/CelebA\"", "\n", "# raise IOError(\"data_dir argument missing.\")", "\n", "\n", "", "out_dir", "=", "run_params", "[", "\"out_dir\"", "]", "\n", "os", ".", "makedirs", "(", "out_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "json", ".", "dump", "(", "run_params", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"run_parameters.json\"", ")", ",", "\"w\"", ")", ")", "\n", "return", "run_params", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.train.main": [[85, 142], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "train.parse_input_arguments", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "data.CelebADataset", "data.CelebADataset", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.Net", "model.Net.to", "torch.Adam", "range", "model.Net.parameters", "print", "model.Net.train", "train.train", "model.Net.eval", "train.validation", "print", "len", "len", "torch.save", "torch.save", "model.Net.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.train.parse_input_arguments", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.train.train", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.train.train", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.train.validation"], ["", "def", "main", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train Landmark Detection'", ")", "\n", "parser", ".", "add_argument", "(", "\"-data_dir\"", ",", "help", "=", "\"root directory of CelebA dataset\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"-device\"", ",", "help", "=", "\"cuda number\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"-out_dir\"", ",", "help", "=", "\"output directory\"", ",", "default", "=", "\"./runs/run1\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-image_size\"", ",", "help", "=", "\"image size\"", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"-depth\"", ",", "help", "=", "\"network depth\"", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "\"-width\"", ",", "help", "=", "\"network width\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"-nepochs\"", ",", "help", "=", "\"number of epochs\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"-lr\"", ",", "help", "=", "\"learning rate\"", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "\"-batchsize\"", ",", "help", "=", "\"batchsize\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"-k\"", ",", "help", "=", "\"number of landmarks to sample\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"-scale_factor\"", ",", "help", "=", "\"sparsity in landmarks\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "run_params", "=", "parse_input_arguments", "(", "parser", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "device", "=", "\"cuda:{}\"", ".", "format", "(", "run_params", "[", "\"device\"", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "device", "=", "\"cpu\"", "\n", "", "out_dir", ",", "nepochs", ",", "lr", ",", "batchsize", "=", "run_params", "[", "\"out_dir\"", "]", ",", "run_params", "[", "\"nepochs\"", "]", ",", "run_params", "[", "\"lr\"", "]", ",", "run_params", "[", "\"batchsize\"", "]", "\n", "image_size", "=", "run_params", "[", "\"image_size\"", "]", "\n", "depth", ",", "width", "=", "run_params", "[", "\"depth\"", "]", ",", "run_params", "[", "\"width\"", "]", "\n", "\n", "out_dir_train", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"train\"", ")", "\n", "out_dir_val", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"val\"", ")", "\n", "out_dir_wts", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"weights\"", ")", "\n", "os", ".", "makedirs", "(", "out_dir_train", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "out_dir_val", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "out_dir_wts", ",", "exist_ok", "=", "True", ")", "\n", "\n", "root_dir", "=", "run_params", "[", "\"data_dir\"", "]", "\n", "train_dataset", "=", "CelebADataset", "(", "root_dir", ",", "image_size", "=", "image_size", ",", "split", "=", "'train'", ")", "\n", "validation_dataset", "=", "CelebADataset", "(", "root_dir", ",", "image_size", "=", "image_size", ",", "split", "=", "'valid'", ")", "\n", "print", "(", "\"training data: {}, validation data: {}\"", ".", "format", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "validation_dataset", ")", ")", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batchsize", ",", "num_workers", "=", "3", ",", "shuffle", "=", "True", ")", "\n", "validation_dataloader", "=", "DataLoader", "(", "validation_dataset", ",", "batch_size", "=", "batchsize", ",", "num_workers", "=", "3", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", "=", "Net", "(", "in_channels", "=", "1", ",", "device", "=", "device", ",", "depth", "=", "depth", ",", "width", "=", "width", ",", "k", "=", "run_params", "[", "\"k\"", "]", ",", "scale_factor", "=", "run_params", "[", "\"scale_factor\"", "]", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "best_val_loss", "=", "np", ".", "inf", "\n", "for", "epoch", "in", "range", "(", "0", ",", "nepochs", ")", ":", "\n", "\t\t", "print", "(", "\"Epoch {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "# training", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "train", "(", "model", ",", "train_dataloader", ",", "optimizer", ",", "device", "=", "device", ",", "out_dir", "=", "out_dir_train", ")", "\n", "\n", "# validation", "\n", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "validation", "(", "model", ",", "validation_dataloader", ",", "device", "=", "device", ",", "out_dir", "=", "out_dir_val", ")", "\n", "\n", "print", "(", "\"Training Loss: {}, Validation Loss: {}\\n\"", ".", "format", "(", "train_loss", ",", "val_loss", ")", ")", "\n", "# saving model", "\n", "if", "val_loss", "<=", "best_val_loss", ":", "\n", "\t\t\t", "weights", "=", "{", "\"model\"", ":", "model", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "weights", ",", "os", ".", "path", ".", "join", "(", "out_dir_wts", ",", "\"model_weights.pth\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.CelebADataset.__init__": [[125, 139], ["torch.utils.data.Dataset.__init__", "pandas.read_csv", "pandas.read_csv.image_id.to_list", "os.path.join", "split_map.get", "Warning", "list", "split_map.keys"], "methods", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.__init__"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "image_size", "=", "128", ",", "split", "=", "'train'", ")", ":", "\n", "\t\t", "super", "(", "CelebADataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "split_map", "=", "{", "\"train\"", ":", "0", ",", "\"valid\"", ":", "1", ",", "\"test\"", ":", "2", ",", "\"all\"", ":", "None", "}", "\n", "self", ".", "root", "=", "root_dir", "\n", "self", ".", "base_folder", "=", "\"celeba\"", "\n", "\n", "info", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "\"list_eval_partition.txt\"", ")", ")", "\n", "if", "split_map", ".", "get", "(", "split", ",", "None", ")", "is", "not", "None", ":", "\n", "\t\t\t", "info", "=", "info", ".", "loc", "[", "info", ".", "partition", "==", "split_map", "[", "split", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "Warning", "(", "\"Not able to understand the provided split str, so using all data. \\\n\t\t\t\t\tvalid split str are: {}\"", ".", "format", "(", "list", "(", "split_map", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "self", ".", "imlist", "=", "info", ".", "image_id", ".", "to_list", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.CelebADataset.__len__": [[141, 143], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "imlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.CelebADataset.__getitem__": [[145, 160], ["os.path.join", "cv2.imread", "data.normalize", "skimage.transform.resize", "data.to_tensor_shape", "data.generate_deformation_grid", "torch.grid_sample", "torch.grid_sample", "image2.numpy().reshape.numpy().reshape.numpy().reshape", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "to_tensor_shape.astype", "image2.numpy().reshape.numpy().reshape.astype", "generate_deformation_grid.astype", "image2.numpy().reshape.numpy().reshape.numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.normalize", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.to_tensor_shape", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.generate_deformation_grid"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "sample", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "\"img_align_celeba\"", ",", "self", ".", "imlist", "[", "idx", "]", ")", "\n", "image1", "=", "cv2", ".", "imread", "(", "sample", ",", "0", ")", "\n", "c", "=", "1", "\n", "\n", "image1", "=", "normalize", "(", "image1", ")", "\n", "image1", "=", "resize", "(", "image1", ",", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ",", "mode", "=", "'constant'", ")", "\n", "image1", "=", "to_tensor_shape", "(", "image1", ")", "\n", "\n", "deformation", "=", "generate_deformation_grid", "(", "image1", ")", "\n", "image2", "=", "F", ".", "grid_sample", "(", "torch", ".", "tensor", "(", "image1", ")", ".", "view", "(", "1", ",", "c", ",", "self", ".", "image_size", ",", "self", ".", "image_size", ")", ",", "\n", "torch", ".", "tensor", "(", "deformation", ")", ".", "view", "(", "1", ",", "self", ".", "image_size", ",", "self", ".", "image_size", ",", "2", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "image2", "=", "image2", ".", "numpy", "(", ")", ".", "reshape", "(", "c", ",", "self", ".", "image_size", ",", "self", ".", "image_size", ")", "\n", "\n", "return", "image1", ".", "astype", "(", "np", ".", "float32", ")", ",", "image2", ".", "astype", "(", "np", ".", "float32", ")", ",", "deformation", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.normalize": [[11, 15], ["float", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["def", "normalize", "(", "image", ")", ":", "\n", "\t", "epsilon", "=", "1e-6", "\n", "image", "=", "(", "image", "-", "np", ".", "min", "(", "image", ")", ")", "/", "float", "(", "np", ".", "max", "(", "image", ")", "-", "np", ".", "min", "(", "image", ")", "+", "epsilon", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.to_tensor_shape": [[17, 26], ["len", "np.expand_dims.transpose", "len", "numpy.expand_dims", "ValueError"], "function", ["None"], ["", "def", "to_tensor_shape", "(", "image", ")", ":", "\n", "# bring channel axis along first dimension (C, H, W in Pytorch)", "\n", "\t", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "\t\t", "image", "=", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", ":", "\n", "\t\t", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"Unknown image type\"", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.create_affine_matrix": [[28, 43], ["numpy.array", "numpy.array", "center.reshape.reshape", "numpy.array().reshape", "numpy.dot", "center.reshape.flatten", "numpy.array", "np.dot.flatten", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "create_affine_matrix", "(", "rotation", "=", "0", ",", "scale", "=", "1", ",", "shear", "=", "0", ",", "center", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ")", ":", "\n", "\t", "\"\"\"\n\tInput: rotation angles in degrees\n\t\"\"\"", "\n", "theta", "=", "rotation", "*", "np", ".", "pi", "/", "180", "\n", "affine_matrix", "=", "np", ".", "array", "(", "[", "[", "scale", "*", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", "+", "shear", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "theta", "+", "shear", ")", ",", "scale", "*", "np", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "center", "=", "center", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "center_homogenous", "=", "np", ".", "array", "(", "[", "center", "[", "0", "]", ",", "center", "[", "1", "]", ",", "1", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "center_rotated", "=", "np", ".", "dot", "(", "affine_matrix", ",", "center_homogenous", ")", "\n", "\n", "affine_matrix", "[", ":", "2", ",", "2", "]", "=", "center", ".", "flatten", "(", ")", "-", "center_rotated", ".", "flatten", "(", ")", "[", ":", "2", "]", "\n", "return", "affine_matrix", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.generate_random_2dgaussian": [[45, 67], ["numpy.meshgrid", "numpy.linspace", "numpy.linspace", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "numpy.exp", "numpy.exp", "g_h.reshape", "g_w.reshape", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "function", ["None"], ["", "def", "generate_random_2dgaussian", "(", "h", ",", "w", ",", "sigma_h", "=", "None", ",", "sigma_w", "=", "None", ")", ":", "\n", "\t", "if", "sigma_h", "is", "None", ":", "\n", "\t\t", "sigma_h", "=", "h", "//", "8", "\n", "\n", "", "if", "sigma_w", "is", "None", ":", "\n", "\t\t", "sigma_w", "=", "w", "//", "8", "\n", "\n", "", "H", ",", "W", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "h", ",", "h", ")", ",", "np", ".", "linspace", "(", "0", ",", "w", ",", "w", ")", ",", "indexing", "=", "\"ij\"", ")", "\n", "\n", "center_h", ",", "center_w", "=", "torch", ".", "randint", "(", "h", "//", "10", ",", "h", "-", "h", "//", "10", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", ",", "torch", ".", "randint", "(", "w", "//", "10", ",", "w", "-", "w", "//", "10", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", "\n", "sigma_h", ",", "sigma_w", "=", "torch", ".", "randint", "(", "sigma_h", "//", "2", ",", "sigma_h", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", ",", "torch", ".", "randint", "(", "sigma_w", "//", "2", ",", "sigma_w", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", "\n", "mag_h", ",", "mag_w", "=", "torch", ".", "randint", "(", "-", "4", ",", "4", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", "/", "20.", ",", "torch", ".", "randint", "(", "-", "4", ",", "4", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", "/", "20.", "\n", "\n", "if", "mag_h", "==", "0.", ":", "\n", "\t\t", "mag_h", "=", "0.1", "\n", "", "if", "mag_w", "==", "0.", ":", "\n", "\t\t", "mag_w", "=", "0.1", "\n", "\n", "", "g_h", "=", "mag_h", "*", "np", ".", "exp", "(", "-", "(", "(", "H", "-", "center_h", ")", "**", "2", "/", "(", "2.0", "*", "sigma_h", "**", "2", ")", ")", ")", "\n", "g_w", "=", "mag_w", "*", "np", ".", "exp", "(", "-", "(", "(", "W", "-", "center_w", ")", "**", "2", "/", "(", "2.0", "*", "sigma_w", "**", "2", ")", ")", ")", "\n", "\n", "return", "g_h", ".", "reshape", "(", "-", "1", ")", ",", "g_w", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.generate_deformation_grid": [[69, 117], ["numpy.meshgrid", "torch.randint().item", "torch.randint().item", "indices[].reshape", "np.dot.transpose", "numpy.linspace", "numpy.linspace", "numpy.array", "torch.randint().item", "torch.randint().item", "data.create_affine_matrix", "numpy.dot", "torch.randint", "torch.randint", "data.create_affine_matrix", "numpy.dot", "numpy.reshape", "numpy.reshape", "numpy.ones", "len", "torch.randint", "torch.randint", "torch.randint().item", "torch.randint().item", "data.create_affine_matrix", "numpy.dot", "torch.randint().item", "torch.randint().item", "data.generate_random_2dgaussian", "torch.randint", "torch.randint", "int", "int", "torch.randint", "torch.randint"], "function", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.create_affine_matrix", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.create_affine_matrix", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.create_affine_matrix", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.data.generate_random_2dgaussian"], ["", "def", "generate_deformation_grid", "(", "image1", ")", ":", "\n", "\t", "\"\"\"\n\tGenerates a random deformation field, applies it to the input image and returns deformaed image and deformation field.\n\t\n\tInputs:\n\timage1 = Channels * Height * Width\n\n\tOutputs:\n\tdeformation = Height * Width * 2\n\n\t\"\"\"", "\n", "shape", "=", "(", "image1", ".", "shape", "[", "1", "]", ",", "image1", ".", "shape", "[", "2", "]", ")", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "shape", "[", "0", "]", ")", ",", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "shape", "[", "1", "]", ")", ",", "indexing", "=", "\"ij\"", ")", "\n", "indices", "=", "np", ".", "array", "(", "[", "np", ".", "reshape", "(", "x", ",", "-", "1", ")", ",", "np", ".", "reshape", "(", "y", ",", "-", "1", ")", ",", "np", ".", "ones", "(", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", ")", "]", ")", ".", "T", "#shape N, 3", "\n", "\n", "choices", "=", "[", "\"rotation\"", ",", "\"elastic\"", ",", "\"scale\"", ",", "\"shear\"", "]", "\n", "idx", "=", "torch", ".", "randint", "(", "len", "(", "choices", ")", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", "\n", "random_choice", "=", "choices", "[", "idx", "]", "\n", "\n", "if", "random_choice", "==", "\"rotation\"", ":", "\n", "\t\t", "param", "=", "(", "-", "45", ",", "45", ")", "\n", "angle", "=", "torch", ".", "randint", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", "\n", "M", "=", "create_affine_matrix", "(", "rotation", "=", "angle", ")", "\n", "indices", "=", "np", ".", "dot", "(", "indices", ",", "M", ")", "\n", "\n", "", "elif", "random_choice", "==", "\"scale\"", ":", "\n", "\t\t", "param", "=", "(", "0.8", ",", "1.2", ")", "\n", "scale", "=", "torch", ".", "randint", "(", "int", "(", "param", "[", "0", "]", "*", "100", ")", ",", "int", "(", "param", "[", "1", "]", "*", "100", ")", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", "/", "100.", "\n", "M", "=", "create_affine_matrix", "(", "scale", "=", "scale", ")", "\n", "indices", "=", "np", ".", "dot", "(", "indices", ",", "M", ")", "\n", "\n", "", "elif", "random_choice", "==", "\"shear\"", ":", "\n", "\t\t", "param", "=", "(", "-", "20", ",", "20", ")", "\n", "shear", "=", "torch", ".", "randint", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "(", "1", ",", "1", ")", ")", ".", "item", "(", ")", "*", "(", "np", ".", "pi", "/", "180.", ")", "\n", "M", "=", "create_affine_matrix", "(", "shear", "=", "shear", ")", "\n", "indices", "=", "np", ".", "dot", "(", "indices", ",", "M", ")", "\n", "\n", "", "elif", "random_choice", "==", "\"elastic\"", ":", "\n", "\t\t", "dx", ",", "dy", "=", "generate_random_2dgaussian", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", "\n", "\n", "indices", "[", ":", ",", "0", "]", "+=", "dx", "\n", "indices", "[", ":", ",", "1", "]", "+=", "dy", "\n", "\n", "# normalized grid for pytorch", "\n", "", "indices", "=", "indices", "[", ":", ",", ":", "2", "]", ".", "reshape", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "2", ")", "\n", "indices", "=", "indices", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.loss.get_labels": [[6, 46], ["torch.tensor", "torch.tensor", "deformation.permute.permute", "torch.grid_sample", "pts1_projected.permute.permute", "pts1.view.view", "torch.norm", "torch.norm", "[].view", "[].view", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "s.float.float", "torch.nonzero", "torch.nonzero", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ge", "torch.ge", "float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.min", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["def", "get_labels", "(", "pts1", ",", "pts2", ",", "deformation", ",", "device", "=", "\"cuda:0\"", ")", ":", "\n", "\t", "\"\"\"\n\tpts1 = b, 1, k, 2\n\tdeformation = b, h, w, 2\n\t\"\"\"", "\n", "k", "=", "pts1", ".", "shape", "[", "2", "]", "\n", "b", ",", "h", ",", "w", ",", "_", "=", "deformation", ".", "shape", "\n", "\n", "\"\"\"\n\t--- threshold on number of pixels to decide match ---\n\tsince Pytorch coordinates extend from -1 to 1, 1 pixel ~= 2/h pytorch coordinates unit\n\tso, thresh = 2/h means that a landmark is matching if it's projection on another image\n\tlies within 1 pixel distance (which is quite strict).\n\tOne may try making thresh more lenient, which will allow for more (less spatially accurate) landmark matches \n\t\"\"\"", "\n", "thresh", "=", "torch", ".", "tensor", "(", "2.", "/", "float", "(", "h", ")", ",", "device", "=", "device", ")", "\n", "\n", "# map landmarks in image 2 on image 1", "\n", "deformation", "=", "deformation", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "#b, 2, h, w", "\n", "pts1_projected", "=", "F", ".", "grid_sample", "(", "deformation", ",", "pts2", ")", "#b, 2, 1, k", "\n", "\n", "pts1_projected", "=", "pts1_projected", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "#b, 1, k, 2", "\n", "pts1", "=", "pts1", ".", "view", "(", "b", ",", "-", "1", ",", "1", ",", "2", ")", "\n", "cell_distances", "=", "torch", ".", "norm", "(", "pts1", "-", "pts1_projected", ",", "dim", "=", "3", ")", "\n", "\n", "# two-way (bruteforce) matching", "\n", "min_cell_distances_row", "=", "torch", ".", "min", "(", "cell_distances", ",", "dim", "=", "1", ")", "[", "0", "]", ".", "view", "(", "b", ",", "1", ",", "-", "1", ")", "\n", "min_cell_distances_col", "=", "torch", ".", "min", "(", "cell_distances", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", "\n", "s1", "=", "torch", ".", "eq", "(", "cell_distances", ",", "min_cell_distances_row", ")", "\n", "s2", "=", "torch", ".", "eq", "(", "cell_distances", ",", "min_cell_distances_col", ")", "\n", "s", "=", "s1", "*", "s2", "*", "torch", ".", "ge", "(", "thresh", ",", "cell_distances", ")", "#b, k, k", "\n", "s", "=", "s", ".", "float", "(", ")", "\n", "\n", "indices", "=", "torch", ".", "nonzero", "(", "s", ")", "\n", "gt1", "=", "torch", ".", "zeros", "(", "b", ",", "s", ".", "shape", "[", "1", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "gt2", "=", "torch", ".", "zeros", "(", "b", ",", "s", ".", "shape", "[", "2", "]", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "device", ")", "\n", "gt1", "[", "indices", "[", ":", ",", "0", "]", ",", "indices", "[", ":", ",", "1", "]", "]", "=", "1.", "\n", "gt2", "[", "indices", "[", ":", ",", "0", "]", ",", "indices", "[", ":", ",", "2", "]", "]", "=", "1.", "\n", "\n", "return", "gt1", ",", "gt2", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.loss.custom_loss": [[48, 76], ["torch.mean", "torch.mean", "torch.binary_cross_entropy", "torch.mean", "torch.mean", "torch.binary_cross_entropy", "torch.cross_entropy", "match_target.sum", "float", "match_target.long().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "float", "torch.tensor().to", "torch.tensor().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "torch.sum", "torch.sum", "torch.tensor().to", "torch.tensor().to", "match_target.long", "torch.max", "torch.max", "torch.max", "torch.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "float", "float", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "custom_loss", "(", "landmark_probs1", ",", "landmark_probs2", ",", "desc_pairs_score", ",", "desc_pairs_norm", ",", "gt1", ",", "gt2", ",", "match_target", ",", "k", ",", "device", "=", "\"cuda:0\"", ")", ":", "\n", "# LandmarkProbabilityLoss Image 1", "\n", "\t", "landmark_probs1_lossa", "=", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "1.", ")", ".", "to", "(", "device", ")", "-", "torch", ".", "sum", "(", "landmark_probs1", ",", "dim", "=", "(", "1", ")", ")", "/", "torch", ".", "tensor", "(", "float", "(", "k", ")", ")", ".", "to", "(", "device", ")", ")", "\n", "landmark_probs1_lossb", "=", "F", ".", "binary_cross_entropy", "(", "landmark_probs1", ",", "gt1", ")", "\n", "landmark_probs1_loss", "=", "landmark_probs1_lossa", "+", "landmark_probs1_lossb", "\n", "\n", "# LandmarkProbabilityLoss Image 2", "\n", "landmark_probs2_lossa", "=", "torch", ".", "mean", "(", "torch", ".", "tensor", "(", "1.", ")", ".", "to", "(", "device", ")", "-", "torch", ".", "sum", "(", "landmark_probs2", ",", "dim", "=", "(", "1", ")", ")", "/", "torch", ".", "tensor", "(", "float", "(", "k", ")", ")", ".", "to", "(", "device", ")", ")", "\n", "landmark_probs2_lossb", "=", "F", ".", "binary_cross_entropy", "(", "landmark_probs2", ",", "gt2", ")", "\n", "landmark_probs2_loss", "=", "landmark_probs2_lossa", "+", "landmark_probs2_lossa", "\n", "\n", "# descriptor loss", "\n", "b", ",", "k1", ",", "k2", "=", "match_target", ".", "shape", "\n", "wt", "=", "float", "(", "k", ")", "/", "float", "(", "k", ")", "**", "2", "\n", "desc_loss1", "=", "F", ".", "cross_entropy", "(", "desc_pairs_score", ",", "match_target", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "weight", "=", "torch", ".", "tensor", "(", "[", "wt", ",", "1", "-", "wt", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "Npos", "=", "match_target", ".", "sum", "(", ")", "\n", "Nneg", "=", "b", "*", "k1", "*", "k2", "-", "Npos", "\n", "pos_loss", "=", "torch", ".", "sum", "(", "match_target", "*", "torch", ".", "max", "(", "torch", ".", "zeros_like", "(", "desc_pairs_norm", ")", ".", "to", "(", "device", ")", ",", "desc_pairs_norm", "-", "0.1", ")", ")", "/", "(", "2", "*", "Npos", "+", "1e-6", ")", "\n", "neg_loss", "=", "torch", ".", "sum", "(", "(", "1.0", "-", "match_target", ")", "*", "torch", ".", "max", "(", "torch", ".", "zeros_like", "(", "desc_pairs_norm", ")", ".", "to", "(", "device", ")", ",", "1.0", "-", "desc_pairs_norm", ")", ")", "/", "(", "2", "*", "Nneg", "+", "1e-6", ")", "\n", "desc_loss2", "=", "pos_loss", "+", "neg_loss", "\n", "desc_loss", "=", "desc_loss1", "+", "desc_loss2", "\n", "\n", "# total loss", "\n", "loss", "=", "landmark_probs1_loss", "+", "landmark_probs2_loss", "+", "desc_loss", "\n", "\n", "return", "loss", "", "", ""]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.DescMatchingModule.__init__": [[29, 33], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.DescMatchingModule.apply"], "methods", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "\t\t", "super", "(", "DescMatchingModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "apply", "(", "weight_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.DescMatchingModule.forward": [[35, 56], ["out1.div.div.size", "out2.div.div.size", "out1.div.div.view().permute().view", "out2.div.div.view().permute().view", "model.DescMatchingModule.contiguous().view", "model.DescMatchingModule.fc", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "out1.div.div.div", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "out2.div.div.div", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "out1.div.div.view().permute", "out2.div.div.view().permute", "model.DescMatchingModule.contiguous", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "out1.div.div.view", "out2.div.div.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out1", ",", "out2", ")", ":", "\n", "\t\t", "b", ",", "c", ",", "h1", ",", "w1", "=", "out1", ".", "size", "(", ")", "\n", "b", ",", "c", ",", "h2", ",", "w2", "=", "out2", ".", "size", "(", ")", "\n", "\n", "out1", "=", "out1", ".", "view", "(", "b", ",", "c", ",", "h1", "*", "w1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "b", ",", "h1", "*", "w1", ",", "1", ",", "c", ")", "\n", "out2", "=", "out2", ".", "view", "(", "b", ",", "c", ",", "h2", "*", "w2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "b", ",", "1", ",", "h2", "*", "w2", ",", "c", ")", "\n", "\n", "# all possible descriptor pairs", "\n", "out", "=", "out1", "*", "out2", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "# normalize input features", "\n", "dn1", "=", "torch", ".", "norm", "(", "out1", ",", "p", "=", "2", ",", "dim", "=", "3", ")", "# Compute the norm.", "\n", "out1", "=", "out1", ".", "div", "(", "1e-6", "+", "torch", ".", "unsqueeze", "(", "dn1", ",", "3", ")", ")", "# Divide by norm to normalize.", "\n", "dn2", "=", "torch", ".", "norm", "(", "out2", ",", "p", "=", "2", ",", "dim", "=", "3", ")", "# Compute the norm.", "\n", "out2", "=", "out2", ".", "div", "(", "1e-6", "+", "torch", ".", "unsqueeze", "(", "dn2", ",", "3", ")", ")", "# Divide by norm to normalize.", "\n", "\n", "out_norm", "=", "torch", ".", "norm", "(", "out1", "-", "out2", ",", "p", "=", "2", ",", "dim", "=", "3", ")", "\n", "return", "out", ",", "out_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.__init__": [[62, 72], ["torch.Module.__init__", "unet.UNet", "model.DescMatchingModule"], "methods", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "1", ",", "out_channels", "=", "2", ",", "batchnorm", "=", "False", ",", "threeD", "=", "False", ",", "depth", "=", "4", ",", "width", "=", "16", ",", "device", "=", "\"cuda:0\"", ",", "k", "=", "512", ",", "scale_factor", "=", "8", ")", ":", "\n", "\t\t", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "CNN_branch", "=", "UNet", "(", "depth", "=", "depth", ",", "width", "=", "width", ",", "growth_rate", "=", "2", ",", "in_channels", "=", "in_channels", ",", "out_channels", "=", "1", ")", "\n", "feature_channels", "=", "self", ".", "CNN_branch", ".", "feature_channels", "\n", "\n", "self", ".", "desc_matching_layer", "=", "DescMatchingModule", "(", "feature_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.forward": [[74, 90], ["model.Net.CNN_branch", "model.Net.CNN_branch", "model.Net.sampling_layer", "model.Net.sampling_layer", "model.Net.desc_matching_layer"], "methods", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.sampling_layer", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.sampling_layer"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\t\t", "k", "=", "self", ".", "k", "\n", "scale_factor", "=", "self", ".", "scale_factor", "\n", "\n", "# landmark detection and description", "\n", "heatmaps1", ",", "features1", "=", "self", ".", "CNN_branch", "(", "x1", ")", "\n", "heatmaps2", ",", "features2", "=", "self", ".", "CNN_branch", "(", "x2", ")", "\n", "\n", "# sampling top k landmark locations and descriptors", "\n", "landmarks1", ",", "landmark_probs1", ",", "desc1", "=", "self", ".", "sampling_layer", "(", "heatmaps1", ",", "features1", ",", "is_training", "=", "True", ")", "\n", "landmarks2", ",", "landmark_probs2", ",", "desc2", "=", "self", ".", "sampling_layer", "(", "heatmaps2", ",", "features2", ",", "is_training", "=", "True", ")", "\n", "\n", "# descriptor matching probabilities and descriptor norms", "\n", "desc_pairs_score", ",", "desc_pairs_norm", "=", "self", ".", "desc_matching_layer", "(", "desc1", ",", "desc2", ")", "\n", "\n", "return", "landmark_probs1", ",", "landmark_probs2", ",", "landmarks1", ",", "landmarks2", ",", "desc_pairs_score", ",", "desc_pairs_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.predict": [[92, 148], ["model.Net.CNN_branch", "model.Net.CNN_branch", "model.Net.sampling_layer", "model.Net.sampling_layer", "model.Net.desc_matching_layer", "utils.convert_points_to_image", "utils.convert_points_to_image", "[].view", "desc_pairs_score.detach().to().numpy.detach().to().numpy.detach().to().numpy", "desc_pairs_norm.detach().to().numpy.detach().to().numpy.detach().to().numpy", "list", "range", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array.append", "deformation.permute.permute.permute", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "pts1_projected.permute.permute.permute", "utils.convert_points_to_image", "desc_pairs_score.detach().to().numpy.detach().to().numpy.detach().to", "desc_pairs_norm.detach().to().numpy.detach().to().numpy.detach().to", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "desc_pairs_score.detach().to().numpy.detach().to().numpy.detach", "desc_pairs_norm.detach().to().numpy.detach().to().numpy.detach", "numpy.argmax", "numpy.arange", "numpy.arange", "numpy.argmax", "numpy.argmin", "numpy.arange", "numpy.arange", "numpy.argmin"], "methods", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.sampling_layer", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.sampling_layer", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.utils.convert_points_to_image", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.utils.convert_points_to_image", "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.utils.convert_points_to_image"], ["", "def", "predict", "(", "self", ",", "x1", ",", "x2", ",", "deformation", "=", "None", ",", "conf_thresh", "=", "0.01", ",", "k", "=", "None", ")", ":", "\n", "\t\t", "if", "k", "is", "None", ":", "\n", "\t\t\t", "k", "=", "self", ".", "k", "\n", "", "scale_factor", "=", "self", ".", "scale_factor", "\n", "b", ",", "_", ",", "H", ",", "W", "=", "x1", ".", "shape", "\n", "# landmark detection and description", "\n", "heatmaps1", ",", "features1", "=", "self", ".", "CNN_branch", "(", "x1", ")", "\n", "heatmaps2", ",", "features2", "=", "self", ".", "CNN_branch", "(", "x2", ")", "\n", "\n", "# sampling top k landmark locations and descriptors", "\n", "pts1", ",", "_", ",", "desc1", "=", "self", ".", "sampling_layer", "(", "heatmaps1", ",", "features1", ",", "conf_thresh", "=", "conf_thresh", ",", "is_training", "=", "False", ")", "\n", "pts2", ",", "_", ",", "desc2", "=", "self", ".", "sampling_layer", "(", "heatmaps2", ",", "features2", ",", "conf_thresh", "=", "conf_thresh", ",", "is_training", "=", "False", ")", "\n", "\n", "# descriptor matching probabilities and descriptor norms", "\n", "desc_pairs_score", ",", "desc_pairs_norm", "=", "self", ".", "desc_matching_layer", "(", "desc1", ",", "desc2", ")", "\n", "\n", "# post processing", "\n", "landmarks1", "=", "convert_points_to_image", "(", "pts1", ",", "H", ",", "W", ")", "\n", "landmarks2", "=", "convert_points_to_image", "(", "pts2", ",", "H", ",", "W", ")", "\n", "\n", "b", ",", "k1", ",", "_", "=", "landmarks1", ".", "shape", "\n", "_", ",", "k2", ",", "_", "=", "landmarks2", ".", "shape", "\n", "\n", "# two-way (bruteforce) matching", "\n", "desc_pairs_score", "=", "F", ".", "softmax", "(", "desc_pairs_score", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", ".", "view", "(", "b", ",", "k1", ",", "k2", ")", "\n", "desc_pairs_score", "=", "desc_pairs_score", ".", "detach", "(", ")", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "desc_pairs_norm", "=", "desc_pairs_norm", ".", "detach", "(", ")", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "matches", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "\t\t\t", "pairs_score", "=", "desc_pairs_score", "[", "i", "]", "\n", "pairs_norm", "=", "desc_pairs_norm", "[", "i", "]", "\n", "\n", "match_cols", "=", "np", ".", "zeros", "(", "(", "k1", ",", "k2", ")", ")", "\n", "match_cols", "[", "np", ".", "argmax", "(", "pairs_score", ",", "axis", "=", "0", ")", ",", "np", ".", "arange", "(", "k2", ")", "]", "=", "1", "\n", "match_rows", "=", "np", ".", "zeros", "(", "(", "k1", ",", "k2", ")", ")", "\n", "match_rows", "[", "np", ".", "arange", "(", "k1", ")", ",", "np", ".", "argmax", "(", "pairs_score", ",", "axis", "=", "1", ")", "]", "=", "1", "\n", "match", "=", "match_rows", "*", "match_cols", "\n", "\n", "match_cols", "=", "np", ".", "zeros", "(", "(", "k1", ",", "k2", ")", ")", "\n", "match_cols", "[", "np", ".", "argmin", "(", "pairs_norm", ",", "axis", "=", "0", ")", ",", "np", ".", "arange", "(", "k2", ")", "]", "=", "1", "\n", "match_rows", "=", "np", ".", "zeros", "(", "(", "k1", ",", "k2", ")", ")", "\n", "match_rows", "[", "np", ".", "arange", "(", "k1", ")", ",", "np", ".", "argmin", "(", "pairs_norm", ",", "axis", "=", "1", ")", "]", "=", "1", "\n", "match", "=", "match", "*", "match_rows", "*", "match_cols", "\n", "\n", "matches", ".", "append", "(", "match", ")", "\n", "\n", "", "matches", "=", "np", ".", "array", "(", "matches", ")", "\n", "\n", "if", "deformation", "is", "not", "None", ":", "\n", "\t\t\t", "deformation", "=", "deformation", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "#b, 2, h, w", "\n", "pts1_projected", "=", "F", ".", "grid_sample", "(", "deformation", ",", "pts2", ")", "#b, 2, 1, k", "\n", "pts1_projected", "=", "pts1_projected", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "#b, 1, k, 2", "\n", "landmarks1_projected", "=", "convert_points_to_image", "(", "pts1_projected", ",", "H", ",", "W", ")", "\n", "return", "landmarks1", ",", "landmarks2", ",", "matches", ",", "landmarks1_projected", "\n", "", "else", ":", "\n", "\t\t\t", "return", "landmarks1", ",", "landmarks2", ",", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.sampling_layer": [[150, 200], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.zeros_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "pts_score.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.max_unpool2d", "torch.sigmoid.to().detach().numpy().reshape.to().detach().numpy().reshape", "torch.sigmoid.to().detach().numpy().reshape", "torch.sigmoid.to().detach().numpy().reshape", "torch.sigmoid.to().detach().numpy().reshape", "torch.sigmoid.to().detach().numpy().reshape", "numpy.where", "numpy.zeros", "numpy.argsort", "utils.convert_points_to_torch", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "pts_score.permute().view.permute().view.permute", "torch.sigmoid.to().detach().numpy().reshape.to().detach().numpy", "torch.sigmoid.to().detach().numpy", "torch.sigmoid.to().detach().numpy", "torch.sigmoid.to().detach().numpy", "torch.sigmoid.to().detach().numpy", "len", "numpy.where", "len", "torch.sigmoid.to().detach().numpy().reshape.to().detach", "torch.sigmoid.to().detach", "torch.sigmoid.to().detach", "torch.sigmoid.to().detach", "torch.sigmoid.to().detach", "torch.sigmoid.to().detach().numpy().reshape.to", "torch.sigmoid.to", "torch.sigmoid.to", "torch.sigmoid.to", "torch.sigmoid.to"], "methods", ["home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.utils.convert_points_to_torch"], ["", "", "def", "sampling_layer", "(", "self", ",", "heatmaps", ",", "features", ",", "conf_thresh", "=", "0.000001", ",", "is_training", "=", "True", ")", ":", "\n", "\t\t", "k", "=", "self", ".", "k", "\n", "scale_factor", "=", "self", ".", "scale_factor", "\n", "device", "=", "self", ".", "device", "\n", "\n", "b", ",", "_", ",", "H", ",", "W", "=", "heatmaps", ".", "shape", "\n", "heatmaps", "=", "torch", ".", "sigmoid", "(", "heatmaps", ")", "\n", "\n", "\"\"\"\n\t\tConvert pytorch -> numpy after maxpooling and unpooling\n\t\tThis is faster way of sampling while ensuring sparsity\n\t\tOne could alternatively apply non-maximum suppresion (NMS)\n\t\t\"\"\"", "\n", "if", "is_training", ":", "\n", "\t\t\t", "heatmaps1", ",", "indices", "=", "F", ".", "max_pool2d", "(", "heatmaps", ",", "(", "scale_factor", ",", "scale_factor", ")", ",", "stride", "=", "(", "scale_factor", ",", "scale_factor", ")", ",", "return_indices", "=", "True", ")", "\n", "heatmaps1", "=", "F", ".", "max_unpool2d", "(", "heatmaps1", ",", "indices", ",", "(", "scale_factor", ",", "scale_factor", ")", ")", "\n", "heatmaps1", "=", "heatmaps1", ".", "to", "(", "\"cpu\"", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "b", ",", "H", ",", "W", ")", "\n", "", "else", ":", "\n", "\t\t\t", "heatmaps1", "=", "heatmaps", ".", "to", "(", "\"cpu\"", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "b", ",", "H", ",", "W", ")", "\n", "\n", "# border mask, optional", "\n", "", "border", "=", "10", "\n", "border_mask", "=", "np", ".", "zeros_like", "(", "heatmaps1", ")", "\n", "border_mask", "[", ":", ",", "border", ":", "H", "-", "border", ",", "border", ":", "W", "-", "border", "]", "=", "1.", "\n", "heatmaps1", "=", "heatmaps1", "*", "border_mask", "\n", "\n", "all_pts", "=", "[", "]", "\n", "for", "heatmap", "in", "heatmaps1", ":", "\n", "\t\t\t", "xs", ",", "ys", "=", "np", ".", "where", "(", "heatmap", ">=", "conf_thresh", ")", "# get landmark locations above conf_thresh", "\n", "if", "is_training", ":", "\n", "\t\t\t\t", "if", "len", "(", "xs", ")", "<", "k", ":", "\n", "\t\t\t\t\t", "xs", ",", "ys", "=", "np", ".", "where", "(", "heatmap", ">=", "0.0", ")", "\n", "", "", "pts", "=", "np", ".", "zeros", "(", "(", "len", "(", "xs", ")", ",", "3", ")", ")", "\n", "pts", "[", ":", ",", "0", "]", "=", "ys", "\n", "pts", "[", ":", ",", "1", "]", "=", "xs", "\n", "pts", "[", ":", ",", "2", "]", "=", "heatmap", "[", "xs", ",", "ys", "]", "\n", "inds", "=", "np", ".", "argsort", "(", "pts", "[", ":", ",", "2", "]", ")", "\n", "pts", "=", "pts", "[", "inds", "[", ":", ":", "-", "1", "]", ",", ":", "]", "# sort by probablity scores", "\n", "pts", "=", "pts", "[", ":", "k", ",", ":", "2", "]", "#take top k", "\n", "\n", "# Interpolate into descriptor map using 2D point locations.", "\n", "samp_pts", "=", "convert_points_to_torch", "(", "pts", ",", "H", ",", "W", ",", "device", "=", "device", ")", "\n", "all_pts", ".", "append", "(", "samp_pts", ")", "\n", "\n", "", "all_pts", "=", "torch", ".", "cat", "(", "all_pts", ",", "dim", "=", "0", ")", "\n", "pts_score", "=", "F", ".", "grid_sample", "(", "heatmaps", ",", "all_pts", ")", "#b, 1, 1, k", "\n", "pts_score", "=", "pts_score", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "view", "(", "b", ",", "-", "1", ")", "\n", "desc", "=", "[", "F", ".", "grid_sample", "(", "desc", ",", "all_pts", ")", "for", "desc", "in", "features", "]", "\n", "desc", "=", "torch", ".", "cat", "(", "desc", ",", "dim", "=", "1", ")", "\n", "return", "all_pts", ",", "pts_score", ",", "desc", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.Net.weight_init": [[202, 214], ["isinstance", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.fill_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.fill_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "weight_init", "(", "m", ")", ":", "\n", "\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.model.weight_init": [[11, 23], ["isinstance", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.fill_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.fill_", "m.bias.data.fill_"], "function", ["None"], ["def", "weight_init", "(", "m", ")", ":", "\n", "\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.utils.convert_points_to_image": [[7, 19], ["samp_pts.data.cpu().numpy().reshape.data.cpu().numpy().reshape", "samp_pts.data.cpu().numpy().reshape.astype", "numpy.array().reshape", "samp_pts.data.cpu().numpy().reshape.data.cpu().numpy", "numpy.array", "samp_pts.data.cpu().numpy().reshape.data.cpu", "float", "float"], "function", ["None"], ["def", "convert_points_to_image", "(", "samp_pts", ",", "H", ",", "W", ")", ":", "\n", "\t", "\"\"\"\n\tInputs:-\n\tsamp_pts: b, 1, k, 2\n\t\"\"\"", "\n", "\n", "b", ",", "_", ",", "K", ",", "_", "=", "samp_pts", ".", "shape", "\n", "# Convert pytorch -> numpy.", "\n", "samp_pts", "=", "samp_pts", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "b", ",", "K", ",", "2", ")", "\n", "samp_pts", "=", "(", "samp_pts", "+", "1.", ")", "/", "2.", "\n", "samp_pts", "=", "samp_pts", "*", "np", ".", "array", "(", "[", "float", "(", "W", "-", "1", ")", ",", "float", "(", "H", "-", "1", ")", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "2", ")", "\n", "return", "samp_pts", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.utils.convert_points_to_torch": [[21, 33], ["torch.from_numpy", "samp_pts.float().to.view", "samp_pts.float().to.float().to", "pts.astype", "samp_pts.float().to.float"], "function", ["None"], ["", "def", "convert_points_to_torch", "(", "pts", ",", "H", ",", "W", ",", "device", "=", "\"cuda:0\"", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:-\n    pts: k, 2 (W, H)\n    \"\"\"", "\n", "\n", "samp_pts", "=", "torch", ".", "from_numpy", "(", "pts", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "samp_pts", "[", ":", ",", "0", "]", "=", "(", "samp_pts", "[", ":", ",", "0", "]", "*", "2.", "/", "(", "W", "-", "1", ")", ")", "-", "1.", "\n", "samp_pts", "[", ":", ",", "1", "]", "=", "(", "samp_pts", "[", ":", ",", "1", "]", "*", "2.", "/", "(", "H", "-", "1", ")", ")", "-", "1.", "\n", "samp_pts", "=", "samp_pts", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "2", ")", "\n", "samp_pts", "=", "samp_pts", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "samp_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.grey891_End2EndLandmarks.None.utils.visualize_keypoints": [[35, 52], ["cv2.cvtColor", "cv2.cvtColor", "numpy.concatenate", "enumerate", "cv2.imwrite", "cv2.circle", "enumerate", "os.path.join", "cv2.circle", "cv2.line"], "function", ["None"], ["", "def", "visualize_keypoints", "(", "images1", ",", "images2", ",", "output1", ",", "output2", ",", "mask", ",", "out_dir", "=", "\"./\"", ",", "base_name", "=", "\"im\"", ")", ":", "\n", "\t", "images1", "=", "cv2", ".", "cvtColor", "(", "images1", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "images2", "=", "cv2", ".", "cvtColor", "(", "images2", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "\n", "im", "=", "np", ".", "concatenate", "(", "[", "images1", ",", "images2", "]", ",", "axis", "=", "1", ")", "\n", "color", "=", "[", "0", ",", "0", ",", "1", "]", "\n", "\n", "for", "k1", ",", "l1", "in", "enumerate", "(", "output1", ")", ":", "\n", "\t\t", "x1", ",", "y1", "=", "l1", "\n", "cv2", ".", "circle", "(", "im", ",", "(", "x1", ",", "y1", ")", ",", "2", ",", "color", ",", "-", "1", ")", "\n", "for", "k2", ",", "l2", "in", "enumerate", "(", "output2", ")", ":", "\n", "\t\t\t", "x2", ",", "y2", "=", "l2", "\n", "cv2", ".", "circle", "(", "im", ",", "(", "x2", "+", "images1", ".", "shape", "[", "1", "]", ",", "y2", ")", ",", "2", ",", "color", ",", "-", "1", ")", "\n", "if", "mask", "[", "k1", ",", "k2", "]", "==", "1", ":", "\n", "\t\t\t\t", "cv2", ".", "line", "(", "im", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", "+", "images1", ".", "shape", "[", "1", "]", ",", "y2", ")", ",", "(", "0", ",", "1", ",", "0", ")", ",", "1", ")", "\n", "\n", "", "", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"{}.jpg\"", ".", "format", "(", "base_name", ")", ")", ",", "(", "im", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "", "", ""]]}