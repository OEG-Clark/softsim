{"home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.None.train_vae.train": [[151, 184], ["time.time", "model.train", "optimizer.zero_grad", "next().to", "model.get_loss", "count_nfe", "loss.backward", "optimizer.step", "count_nfe", "time.time", "logger.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.flush", "spectral_norm_power_iteration", "torch.randn_like", "torch.randn_like", "logger.info", "logger.info", "writer.add_scalar", "next", "loss.item", "loss_kl.item", "loss_rec_d.item", "loss_rec_x.item", "loss.item", "loss_kl.item", "loss_rec_d.item"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.None.train_vae.train", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.get_loss", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.utils.count_nfe", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.DistanceGeometry.backward", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.utils.count_nfe", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.spectral_norm_power_iteration"], ["def", "train", "(", "it", ",", "use_implicit_loss", "=", "False", ")", ":", "\n", "    ", "time_start", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "spectral_norm", ":", "\n", "        ", "spectral_norm_power_iteration", "(", "model", ".", "decoder", ",", "n_power_iterations", "=", "1", ")", "\n", "", "batch", "=", "next", "(", "train_iterator", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "noise", "=", "torch", ".", "randn_like", "(", "batch", ".", "edge_length", ")", "*", "args", ".", "train_noise_std", "\n", "loss", ",", "loss_kl", ",", "loss_rec_d", ",", "loss_rec_x", "=", "model", ".", "get_loss", "(", "batch", ",", "batch", ".", "edge_length", "+", "noise", ",", "use_implicit", "=", "use_implicit_loss", ")", "\n", "nfe_forward", "=", "count_nfe", "(", "model", ")", "\n", "\n", "# pdb.set_trace()", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "nfe_total", "=", "count_nfe", "(", "model", ")", "\n", "nfe_backward", "=", "nfe_total", "-", "nfe_forward", "\n", "time_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'[Train] Iter %04d | NFE_Forward %d | NFE_Backward %d | Time %.2f'", "%", "(", "it", ",", "nfe_forward", ",", "nfe_backward", ",", "time_end", "-", "time_start", ")", ")", "\n", "if", "use_implicit_loss", ":", "\n", "        ", "logger", ".", "info", "(", "'[Train] Loss %04d | Loss %.4f | KL %.4f | Rec_D %.4f | Rec_X %.4f'", "%", "(", "it", ",", "loss", ".", "item", "(", ")", ",", "loss_kl", ".", "item", "(", ")", ",", "loss_rec_d", ".", "item", "(", ")", ",", "loss_rec_x", ".", "item", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'[Train] Loss %04d | Loss %.4f | KL %.4f | Rec_D %.4f'", "%", "(", "it", ",", "loss", ".", "item", "(", ")", ",", "loss_kl", ".", "item", "(", ")", ",", "loss_rec_d", ".", "item", "(", ")", ")", ")", "\n", "", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ",", "it", ")", "\n", "writer", ".", "add_scalar", "(", "'train/loss_kl'", ",", "loss_kl", ",", "it", ")", "\n", "writer", ".", "add_scalar", "(", "'train/loss_rec_d'", ",", "loss_rec_d", ",", "it", ")", "\n", "if", "use_implicit_loss", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'train/loss_rec_x'", ",", "loss_rec_x", ",", "it", ")", "\n", "", "writer", ".", "add_scalar", "(", "'train/lr'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "it", ")", "\n", "writer", ".", "add_scalar", "(", "'train/nfe_forward'", ",", "nfe_forward", ",", "it", ")", "\n", "writer", ".", "add_scalar", "(", "'train/nfe_backward'", ",", "nfe_backward", ",", "it", ")", "\n", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.None.train_vae.validate": [[185, 221], ["model.eval", "tqdm.auto.tqdm", "scheduler.step", "logger.info", "writer.add_scalar", "logger.info", "writer.add_scalar", "logger.info", "writer.add_scalar", "writer.flush", "batch.to.to", "model.get_nll", "logger.info", "writer.add_scalar", "loss_rec_d.detach().sum().item", "loss_rec_d.detach().sum().item", "loss_kl.detach().sum().item", "loss_rec_x.detach().sum().item", "loss_kl.detach().sum().item", "loss_rec_d.detach().sum", "loss_rec_d.detach().sum", "loss_kl.detach().sum", "loss_rec_x.detach().sum", "loss_kl.detach().sum", "loss_rec_d.detach", "loss_rec_d.detach", "loss_kl.detach", "loss_rec_x.detach", "loss_kl.detach"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.get_nll"], ["", "def", "validate", "(", "it", ",", "use_implicit_loss", "=", "False", ")", ":", "\n", "# with torch.no_grad():", "\n", "    ", "sum_loss_kl", "=", "0.", "\n", "sum_loss_rec_d", "=", "0.", "\n", "sum_loss_rec_x", "=", "0.", "\n", "sum_n", "=", "0.", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch", "in", "tqdm", "(", "val_loader", ",", "desc", "=", "'Validating'", ")", ":", "\n", "        ", "batch", "=", "batch", ".", "to", "(", "args", ".", "device", ")", "\n", "loss_kl", ",", "loss_rec_d", ",", "loss_rec_x", "=", "model", ".", "get_nll", "(", "batch", ",", "batch", ".", "edge_length", ",", "use_implicit", "=", "use_implicit_loss", ",", "eval", "=", "True", ")", "\n", "if", "use_implicit_loss", ":", "\n", "            ", "sum_loss_kl", "+=", "model", ".", "kl_weight", "*", "loss_kl", ".", "detach", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "sum_loss_rec_d", "+=", "loss_rec_d", ".", "detach", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "sum_loss_rec_x", "+=", "model", ".", "implicit_weight", "*", "loss_rec_x", ".", "detach", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "sum_loss_kl", "+=", "model", ".", "kl_weight", "*", "loss_kl", ".", "detach", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "sum_loss_rec_d", "+=", "loss_rec_d", ".", "detach", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "sum_n", "+=", "batch", ".", "batch", "[", "-", "1", "]", "+", "1", "\n", "", "avg_loss_kl", "=", "sum_loss_kl", "/", "sum_n", "\n", "avg_loss_rec_d", "=", "sum_loss_rec_d", "/", "sum_n", "\n", "avg_loss_rec_x", "=", "sum_loss_rec_x", "/", "sum_n", "\n", "avg_loss", "=", "avg_loss_kl", "+", "avg_loss_rec_d", "+", "avg_loss_rec_x", "\n", "\n", "scheduler", ".", "step", "(", "avg_loss", ")", "\n", "\n", "logger", ".", "info", "(", "'[Validate] Iter %04d | Loss %.6f '", "%", "(", "it", ",", "avg_loss", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'val/loss'", ",", "avg_loss", ",", "it", ")", "\n", "logger", ".", "info", "(", "'[Validate] Iter %04d | Loss_kl %.6f '", "%", "(", "it", ",", "avg_loss_kl", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'val/loss_kl'", ",", "avg_loss_kl", ",", "it", ")", "\n", "logger", ".", "info", "(", "'[Validate] Iter %04d | Loss_rec_d %.6f '", "%", "(", "it", ",", "avg_loss_rec_d", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'val/loss_rec_d'", ",", "avg_loss_rec_d", ",", "it", ")", "\n", "if", "use_implicit_loss", ":", "\n", "        ", "logger", ".", "info", "(", "'[Validate] Iter %04d | Loss_rec_x %.6f '", "%", "(", "it", ",", "avg_loss_rec_x", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'val/loss_rec_x'", ",", "avg_loss_rec_x", ",", "it", ")", "\n", "", "writer", ".", "flush", "(", ")", "\n", "return", "avg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.None.train_vae.inspect": [[222, 271], ["logger.info", "torch.no_grad", "torch.no_grad", "torch_geometric.data.Batch.from_data_list().to", "model.eval", "model.sample", "writer.add_embedding", "enumerate", "writer.flush", "torch.no_grad", "torch.no_grad", "model.eval", "model.sample", "writer.add_embedding", "enumerate", "writer.flush", "samples[].mean().item", "samples[].std().item", "edge_name.split", "logger.info", "writer.add_histogram", "samples[].mean().item", "samples[].std().item", "edge_name.split", "logger.info", "writer.add_histogram", "torch_geometric.data.Batch.from_data_list", "samples[].mean", "samples[].std", "samples[].mean", "samples[].std", "Batch.from_data_list().to.edge_length[].item", "Batch.from_data_list().to.edge_length[].item"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample"], ["", "def", "inspect", "(", "it", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'[Inspect] Sampling edge lengths...'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "molecule", "=", "Batch", ".", "from_data_list", "(", "[", "val_dset", "[", "0", "]", "]", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "samples", ",", "_", "=", "model", ".", "sample", "(", "molecule", ",", "num_samples", "=", "500", ")", "# (E, num_samples)", "\n", "writer", ".", "add_embedding", "(", "samples", ",", "global_step", "=", "it", ",", "tag", "=", "'edge_length'", ")", "\n", "for", "i", ",", "edge_name", "in", "enumerate", "(", "molecule", ".", "edge_name", "[", "0", "]", ")", ":", "# Only one molecule", "\n", "            ", "if", "edge_name", "==", "''", ":", "\n", "                ", "continue", "\n", "", "mean", "=", "samples", "[", "i", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "std", "=", "samples", "[", "i", "]", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "name_seg", "=", "edge_name", ".", "split", "(", "'_'", ")", "\n", "logger", ".", "info", "(", "'[Inspect] (%d) %s %s-%s | Dist %.6f | Mean %.6f | Std %.6f'", "%", "(", "\n", "i", ",", "\n", "name_seg", "[", "0", "]", ",", "\n", "name_seg", "[", "1", "]", ",", "\n", "name_seg", "[", "2", "]", ",", "\n", "molecule", ".", "edge_length", "[", "i", "]", ".", "item", "(", ")", ",", "\n", "mean", ",", "\n", "std", ",", "\n", ")", ")", "\n", "writer", ".", "add_histogram", "(", "'length/'", "+", "edge_name", ",", "samples", "[", "i", "]", ",", "it", ")", "\n", "", "writer", ".", "flush", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "model", ".", "use_deterministic_encoder", "=", "True", "\n", "model", ".", "decoder", ".", "use_deterministic_encoder", "=", "True", "\n", "samples", ",", "_", "=", "model", ".", "sample", "(", "molecule", ",", "num_samples", "=", "500", ")", "# (E, num_samples)", "\n", "writer", ".", "add_embedding", "(", "samples", ",", "global_step", "=", "it", ",", "tag", "=", "'edge_length_deterministic'", ")", "\n", "for", "i", ",", "edge_name", "in", "enumerate", "(", "molecule", ".", "edge_name", "[", "0", "]", ")", ":", "# Only one molecule", "\n", "            ", "if", "edge_name", "==", "''", ":", "\n", "                ", "continue", "\n", "", "mean", "=", "samples", "[", "i", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "std", "=", "samples", "[", "i", "]", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "name_seg", "=", "edge_name", ".", "split", "(", "'_'", ")", "\n", "logger", ".", "info", "(", "'[Inspect] (%d) %s %s-%s | Dist %.6f | Mean %.6f | Std %.6f'", "%", "(", "\n", "i", ",", "\n", "name_seg", "[", "0", "]", ",", "\n", "name_seg", "[", "1", "]", ",", "\n", "name_seg", "[", "2", "]", ",", "\n", "molecule", ".", "edge_length", "[", "i", "]", ".", "item", "(", ")", ",", "\n", "mean", ",", "\n", "std", ",", "\n", ")", ")", "\n", "writer", ".", "add_histogram", "(", "'length_deterministic/'", "+", "edge_name", ",", "samples", "[", "i", "]", ",", "it", ")", "\n", "", "writer", ".", "flush", "(", ")", "\n", "model", ".", "use_deterministic_encoder", "=", "False", "\n", "model", ".", "decoder", ".", "use_deterministic_encoder", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.AddHigherOrderEdges.__init__": [[35, 39], ["len", "object.__init__"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "order", ",", "num_types", "=", "len", "(", "BOND_TYPES", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "order", "=", "order", "\n", "self", ".", "num_types", "=", "num_types", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.AddHigherOrderEdges.__call__": [[40, 59], ["torch_geometric.utils.to_dense_adj().squeeze", "transforms.get_higher_order_adj_matrix", "torch_geometric.utils.to_dense_adj().squeeze", "torch.where", "torch_geometric.utils.dense_to_sparse", "torch_geometric.utils.dense_to_sparse", "torch_sparse.coalesce", "torch_sparse.coalesce", "torch.zeros_like", "new_edge_type.long", "edge_order.long", "torch_geometric.utils.to_dense_adj", "torch_geometric.utils.to_dense_adj"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.get_higher_order_adj_matrix"], ["", "def", "__call__", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "N", "=", "data", ".", "num_nodes", "\n", "adj", "=", "to_dense_adj", "(", "data", ".", "edge_index", ")", ".", "squeeze", "(", "0", ")", "\n", "adj_order", "=", "get_higher_order_adj_matrix", "(", "adj", ",", "self", ".", "order", ")", "# (N, N)", "\n", "\n", "type_mat", "=", "to_dense_adj", "(", "data", ".", "edge_index", ",", "edge_attr", "=", "data", ".", "edge_type", ")", ".", "squeeze", "(", "0", ")", "# (N, N)", "\n", "type_highorder", "=", "torch", ".", "where", "(", "adj_order", ">", "1", ",", "self", ".", "num_types", "+", "adj_order", "-", "1", ",", "torch", ".", "zeros_like", "(", "adj_order", ")", ")", "\n", "assert", "(", "type_mat", "*", "type_highorder", "==", "0", ")", ".", "all", "(", ")", "\n", "type_new", "=", "type_mat", "+", "type_highorder", "\n", "\n", "new_edge_index", ",", "new_edge_type", "=", "dense_to_sparse", "(", "type_new", ")", "\n", "_", ",", "edge_order", "=", "dense_to_sparse", "(", "adj_order", ")", "\n", "\n", "data", ".", "bond_edge_index", "=", "data", ".", "edge_index", "# Save original edges", "\n", "data", ".", "edge_index", ",", "data", ".", "edge_type", "=", "coalesce", "(", "new_edge_index", ",", "new_edge_type", ".", "long", "(", ")", ",", "N", ",", "N", ")", "\n", "edge_index_1", ",", "data", ".", "edge_order", "=", "coalesce", "(", "new_edge_index", ",", "edge_order", ".", "long", "(", ")", ",", "N", ",", "N", ")", "\n", "assert", "(", "data", ".", "edge_index", "==", "edge_index_1", ")", ".", "all", "(", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.AddEdgeLength.__call__": [[63, 69], ["torch.norm().view", "torch.norm"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "pos", "=", "data", ".", "pos", "\n", "row", ",", "col", "=", "data", ".", "edge_index", "\n", "dist", "=", "torch", ".", "norm", "(", "pos", "[", "col", "]", "-", "pos", "[", "row", "]", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "data", ".", "edge_length", "=", "dist", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.AddEdgeName.__init__": [[73, 79], ["object.__init__", "copy.deepcopy", "len", "len"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "asymmetric", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bonds", "=", "copy", ".", "deepcopy", "(", "BOND_NAMES", ")", "\n", "self", ".", "bonds", "[", "len", "(", "BOND_NAMES", ")", "+", "1", "]", "=", "'Angle'", "\n", "self", ".", "bonds", "[", "len", "(", "BOND_NAMES", ")", "+", "2", "]", "=", "'Dihedral'", "\n", "self", ".", "asymmetric", "=", "asymmetric", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.AddEdgeName.__call__": [[80, 101], ["range", "data.edge_index.size", "chem.get_atom_symbol", "chem.get_atom_symbol", "hasattr", "data.edge_name.append", "data.edge_name.append", "data.node_type[].item", "data.node_type[].item", "data.edge_length[].item", "data.edge_type[].item", "str", "data.edge_type[].item", "data.edge_type[].item"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol"], ["", "def", "__call__", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "data", ".", "edge_name", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "edge_index", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "tail", "=", "data", ".", "edge_index", "[", "0", ",", "i", "]", "\n", "head", "=", "data", ".", "edge_index", "[", "1", ",", "i", "]", "\n", "if", "self", ".", "asymmetric", "and", "tail", ">=", "head", ":", "\n", "                ", "data", ".", "edge_name", ".", "append", "(", "''", ")", "\n", "continue", "\n", "", "tail_name", "=", "get_atom_symbol", "(", "data", ".", "node_type", "[", "tail", "]", ".", "item", "(", ")", ")", "\n", "head_name", "=", "get_atom_symbol", "(", "data", ".", "node_type", "[", "head", "]", ".", "item", "(", ")", ")", "\n", "name", "=", "'%s_%s_%s_%d_%d'", "%", "(", "\n", "self", ".", "bonds", "[", "data", ".", "edge_type", "[", "i", "]", ".", "item", "(", ")", "]", "if", "data", ".", "edge_type", "[", "i", "]", ".", "item", "(", ")", "in", "self", ".", "bonds", "else", "'E'", "+", "str", "(", "data", ".", "edge_type", "[", "i", "]", ".", "item", "(", ")", ")", ",", "\n", "tail_name", ",", "\n", "head_name", ",", "\n", "tail", ",", "\n", "head", ",", "\n", ")", "\n", "if", "hasattr", "(", "data", ",", "'edge_length'", ")", ":", "\n", "                ", "name", "+=", "'_%.3f'", "%", "(", "data", ".", "edge_length", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "", "data", ".", "edge_name", ".", "append", "(", "name", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.AddIsBond.__init__": [[105, 107], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.AddIsBond.__call__": [[108, 118], ["data.edge_index.size", "range", "data.edge_type[].item", "len", "is_bond.append", "is_bond.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ":", "Data", ")", ":", "\n", "        ", "is_bond", "=", "[", "]", "\n", "E", "=", "data", ".", "edge_index", ".", "size", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "E", ")", ":", "\n", "            ", "if", "data", ".", "edge_type", "[", "i", "]", ".", "item", "(", ")", "<", "len", "(", "BOND_TYPES", ")", ":", "\n", "                ", "is_bond", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                ", "is_bond", ".", "append", "(", "False", ")", "\n", "", "", "data", ".", "is_bond", "=", "is_bond", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.binarize": [[11, 13], ["torch.where", "torch.ones_like", "torch.zeros_like"], "function", ["None"], ["def", "binarize", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "where", "(", "x", ">", "0", ",", "torch", ".", "ones_like", "(", "x", ")", ",", "torch", ".", "zeros_like", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.get_higher_order_adj_matrix": [[15, 31], ["range", "torch.zeros_like", "range", "torch.eye().long", "transforms.binarize", "adj_mats.append", "transforms.binarize", "torch.eye", "torch.eye().long", "adj.size", "torch.eye", "adj.size"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.binarize", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.binarize"], ["", "def", "get_higher_order_adj_matrix", "(", "adj", ",", "order", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        adj:        (N, N)\n        type_mat:   (N, N)\n    \"\"\"", "\n", "adj_mats", "=", "[", "torch", ".", "eye", "(", "adj", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ",", "binarize", "(", "adj", "+", "torch", ".", "eye", "(", "adj", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "order", "+", "1", ")", ":", "\n", "        ", "adj_mats", ".", "append", "(", "binarize", "(", "adj_mats", "[", "i", "-", "1", "]", "@", "adj_mats", "[", "1", "]", ")", ")", "\n", "# print(adj_mats)", "\n", "\n", "", "order_mat", "=", "torch", ".", "zeros_like", "(", "adj", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "order", "+", "1", ")", ":", "\n", "        ", "order_mat", "+=", "(", "adj_mats", "[", "i", "]", "-", "adj_mats", "[", "i", "-", "1", "]", ")", "*", "i", "\n", "\n", "", "return", "order_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.get_standard_transforms": [[120, 128], ["torch_geometric.transforms.Compose", "transforms.AddHigherOrderEdges", "transforms.AddIsBond", "transforms.AddEdgeLength", "transforms.AddEdgeName"], "function", ["None"], ["", "", "def", "get_standard_transforms", "(", "order", "=", "3", ",", "asym_name", "=", "True", ")", ":", "\n", "    ", "tf", "=", "Compose", "(", "[", "\n", "AddHigherOrderEdges", "(", "order", "=", "order", ")", ",", "\n", "AddIsBond", "(", ")", ",", "\n", "AddEdgeLength", "(", ")", ",", "\n", "AddEdgeName", "(", "asymmetric", "=", "asym_name", ")", ",", "\n", "]", ")", "\n", "return", "tf", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles._tokenize": [[20, 69], ["iter", "next", "next", "char.isdigit", "int", "next", "next", "int"], "function", ["None"], ["", "def", "_tokenize", "(", "smiles", ")", ":", "\n", "    ", "\"\"\"\n    Iterates over a SMILES string, yielding tokens.\n    Parameters\n    ----------\n    smiles : iterable\n        The SMILES string to iterate over\n    Yields\n    ------\n    tuple(TokenType, str)\n        A tuple describing the type of token and the associated data\n    \"\"\"", "\n", "organic_subset", "=", "'B C N O P S F Cl Br I * b c n o s p'", ".", "split", "(", ")", "\n", "smiles", "=", "iter", "(", "smiles", ")", "\n", "token", "=", "''", "\n", "peek", "=", "None", "\n", "while", "True", ":", "\n", "        ", "char", "=", "peek", "if", "peek", "else", "next", "(", "smiles", ",", "''", ")", "\n", "peek", "=", "None", "\n", "if", "not", "char", ":", "\n", "            ", "break", "\n", "", "if", "char", "==", "'['", ":", "\n", "            ", "token", "=", "char", "\n", "for", "char", "in", "smiles", ":", "\n", "                ", "token", "+=", "char", "\n", "if", "char", "==", "']'", ":", "\n", "                    ", "break", "\n", "", "", "yield", "TokenType", ".", "ATOM", ",", "token", "\n", "", "elif", "char", "in", "organic_subset", ":", "\n", "            ", "peek", "=", "next", "(", "smiles", ",", "''", ")", "\n", "if", "char", "+", "peek", "in", "organic_subset", ":", "\n", "                ", "yield", "TokenType", ".", "ATOM", ",", "char", "+", "peek", "\n", "peek", "=", "None", "\n", "", "else", ":", "\n", "                ", "yield", "TokenType", ".", "ATOM", ",", "char", "\n", "", "", "elif", "char", "in", "'-=#$:.'", ":", "\n", "            ", "yield", "TokenType", ".", "BOND_TYPE", ",", "char", "\n", "", "elif", "char", "==", "'('", ":", "\n", "            ", "yield", "TokenType", ".", "BRANCH_START", ",", "'('", "\n", "", "elif", "char", "==", "')'", ":", "\n", "            ", "yield", "TokenType", ".", "BRANCH_END", ",", "')'", "\n", "", "elif", "char", "==", "'%'", ":", "\n", "# If smiles is too short this will raise a ValueError, which is", "\n", "# (slightly) prettier than a StopIteration.", "\n", "            ", "yield", "TokenType", ".", "RING_NUM", ",", "int", "(", "next", "(", "smiles", ",", "''", ")", "+", "next", "(", "smiles", ",", "''", ")", ")", "\n", "", "elif", "char", "in", "'/\\\\'", ":", "\n", "            ", "yield", "TokenType", ".", "EZSTEREO", ",", "char", "\n", "", "elif", "char", ".", "isdigit", "(", ")", ":", "\n", "            ", "yield", "TokenType", ".", "RING_NUM", ",", "int", "(", "char", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.parse_hcount": [[88, 105], ["int"], "function", ["None"], ["def", "parse_hcount", "(", "hcount_str", ")", ":", "\n", "    ", "\"\"\"\n    Parses a SMILES hydrogen count specifications.\n    Parameters\n    ----------\n    hcount_str : str\n        The hydrogen count specification to parse.\n    Returns\n    -------\n    int\n        The number of hydrogens specified.\n    \"\"\"", "\n", "if", "not", "hcount_str", ":", "\n", "        ", "return", "0", "\n", "", "if", "hcount_str", "==", "'H'", ":", "\n", "        ", "return", "1", "\n", "", "return", "int", "(", "hcount_str", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.parse_charge": [[107, 128], ["charge_str[].isdigit", "len", "int", "charge_str.count"], "function", ["None"], ["", "def", "parse_charge", "(", "charge_str", ")", ":", "\n", "    ", "\"\"\"\n    Parses a SMILES charge specification.\n    Parameters\n    ----------\n    charge_str : str\n        The charge specification to parse.\n    Returns\n    -------\n    int\n        The charge.\n    \"\"\"", "\n", "if", "not", "charge_str", ":", "\n", "        ", "return", "0", "\n", "", "signs", "=", "{", "'-'", ":", "-", "1", ",", "'+'", ":", "1", "}", "\n", "sign", "=", "signs", "[", "charge_str", "[", "0", "]", "]", "\n", "if", "len", "(", "charge_str", ")", ">", "1", "and", "charge_str", "[", "1", "]", ".", "isdigit", "(", ")", ":", "\n", "        ", "charge", "=", "sign", "*", "int", "(", "charge_str", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "charge", "=", "sign", "*", "charge_str", ".", "count", "(", "charge_str", "[", "0", "]", ")", "\n", "", "return", "charge", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.parse_atom": [[130, 185], ["ATOM_PATTERN.match", "defaults.copy", "defaults.copy.update", "defaults.copy.get().islower", "defaults.copy.items", "ValueError", "defaults.copy.get", "ValueError", "atom.startswith", "atom.endswith", "defaults.copy", "defaults.copy.get", "defaults.copy.get", "atom.capitalize", "atom.islower", "ATOM_PATTERN.match.groupdict().items", "ATOM_PATTERN.match.groupdict"], "function", ["None"], ["", "def", "parse_atom", "(", "atom", ")", ":", "\n", "    ", "\"\"\"\n    Parses a SMILES atom token, and returns a dict with the information.\n    Note\n    ----\n    Can not deal with stereochemical information yet. This gets discarded.\n    Parameters\n    ----------\n    atom : str\n        The atom string to interpret. Looks something like one of the\n        following: \"C\", \"c\", \"[13CH3-1:2]\"\n    Returns\n    -------\n    dict\n        A dictionary containing at least 'element', 'aromatic', and 'charge'. If\n        present, will also contain 'hcount', 'isotope', and 'class'.\n    \"\"\"", "\n", "defaults", "=", "{", "'charge'", ":", "0", ",", "'hcount'", ":", "0", ",", "'aromatic'", ":", "False", "}", "\n", "if", "not", "atom", ".", "startswith", "(", "'['", ")", "and", "not", "atom", ".", "endswith", "(", "']'", ")", ":", "\n", "        ", "if", "atom", "!=", "'*'", ":", "\n", "# Don't specify hcount to signal we don't actually know anything", "\n", "# about it", "\n", "            ", "return", "{", "'element'", ":", "atom", ".", "capitalize", "(", ")", ",", "'charge'", ":", "0", ",", "\n", "'aromatic'", ":", "atom", ".", "islower", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "return", "defaults", ".", "copy", "(", ")", "\n", "", "", "match", "=", "ATOM_PATTERN", ".", "match", "(", "atom", ")", "\n", "if", "match", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'The atom {} is malformatted'", ".", "format", "(", "atom", ")", ")", "\n", "", "out", "=", "defaults", ".", "copy", "(", ")", "\n", "out", ".", "update", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "match", ".", "groupdict", "(", ")", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", ")", "\n", "\n", "if", "out", ".", "get", "(", "'element'", ",", "'X'", ")", ".", "islower", "(", ")", ":", "\n", "        ", "out", "[", "'aromatic'", "]", "=", "True", "\n", "\n", "", "parse_helpers", "=", "{", "\n", "'isotope'", ":", "int", ",", "\n", "'element'", ":", "str", ".", "capitalize", ",", "\n", "'hcount'", ":", "parse_hcount", ",", "\n", "'charge'", ":", "parse_charge", ",", "\n", "'class'", ":", "int", ",", "\n", "'stereo'", ":", "lambda", "x", ":", "x", ",", "\n", "'aromatic'", ":", "lambda", "x", ":", "x", ",", "\n", "}", "\n", "\n", "for", "attr", ",", "val_str", "in", "out", ".", "items", "(", ")", ":", "\n", "        ", "out", "[", "attr", "]", "=", "parse_helpers", "[", "attr", "]", "(", "val_str", ")", "\n", "\n", "", "if", "out", "[", "'element'", "]", "==", "'*'", ":", "\n", "        ", "del", "out", "[", "'element'", "]", "\n", "\n", "", "if", "out", ".", "get", "(", "'element'", ")", "==", "'H'", "and", "out", ".", "get", "(", "'hcount'", ",", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"A hydrogen atom can't have hydrogens\"", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.get_elements": [[187, 198], ["dict", "smiles._tokenize", "smiles.parse_atom"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles._tokenize", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.parse_atom"], ["", "def", "get_elements", "(", "smiles", ")", ":", "\n", "    ", "elements", "=", "dict", "(", ")", "\n", "for", "ttype", ",", "token", "in", "_tokenize", "(", "smiles", ")", ":", "\n", "        ", "if", "ttype", "!=", "TokenType", ".", "ATOM", ":", "continue", "\n", "atom_info", "=", "parse_atom", "(", "token", ")", "\n", "atom_symbol", "=", "atom_info", "[", "'element'", "]", "\n", "if", "atom_symbol", "not", "in", "elements", ":", "\n", "            ", "elements", "[", "atom_symbol", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "elements", "[", "atom_symbol", "]", "+=", "1", "\n", "", "", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.element_stats": [[200, 215], ["tqdm.auto.tqdm", "smiles.get_elements", "get_elements.items"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.get_elements"], ["", "def", "element_stats", "(", "smiles_iter", ")", ":", "\n", "    ", "count_atoms", "=", "{", "}", "\n", "count_mols", "=", "{", "}", "\n", "for", "smiles", "in", "tqdm", "(", "smiles_iter", ")", ":", "\n", "        ", "elems", "=", "get_elements", "(", "smiles", ")", "\n", "for", "elem", ",", "num_atoms", "in", "elems", ".", "items", "(", ")", ":", "\n", "            ", "if", "elem", "not", "in", "count_atoms", ":", "\n", "                ", "count_atoms", "[", "elem", "]", "=", "num_atoms", "\n", "", "else", ":", "\n", "                ", "count_atoms", "[", "elem", "]", "+=", "num_atoms", "\n", "", "if", "elem", "not", "in", "count_mols", ":", "\n", "                ", "count_mols", "[", "elem", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "count_mols", "[", "elem", "]", "+=", "1", "\n", "", "", "", "return", "count_atoms", ",", "count_mols", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.filter_smiles": [[217, 224], ["tqdm.auto.tqdm", "set().difference", "len", "allowed_mols.append", "set", "get_elements().keys", "smiles.get_elements"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.smiles.get_elements"], ["", "def", "filter_smiles", "(", "smiles_iter", ",", "elements_allowed", "=", "{", "'C'", ",", "'N'", ",", "'O'", ",", "'H'", ",", "'S'", ",", "'F'", ",", "'Cl'", "}", ")", ":", "\n", "    ", "allowed_mols", "=", "[", "]", "\n", "for", "smiles", "in", "tqdm", "(", "smiles_iter", ",", "desc", "=", "'Filter'", ")", ":", "\n", "        ", "disallowed_elems", "=", "set", "(", "get_elements", "(", "smiles", ")", ".", "keys", "(", ")", ")", ".", "difference", "(", "elements_allowed", ")", "\n", "if", "len", "(", "disallowed_elems", ")", "==", "0", ":", "\n", "            ", "allowed_mols", ".", "append", "(", "smiles", ")", "\n", "", "", "return", "allowed_mols", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmsd.GetBestRMSD": [[20, 26], ["rdkit.Chem.rdmolops.RemoveHs", "rdkit.Chem.rdmolops.RemoveHs", "rdkit.Chem.rdMolAlign.GetBestRMS"], "function", ["None"], ["def", "GetBestRMSD", "(", "probe", ",", "ref", ")", ":", "\n", "# rmsd = AlignMol(probe, ref)", "\n", "    ", "probe", "=", "RemoveHs", "(", "probe", ")", "\n", "ref", "=", "RemoveHs", "(", "ref", ")", "\n", "rmsd", "=", "GetBestRMS", "(", "probe", ",", "ref", ")", "\n", "return", "rmsd", ",", "rmsd", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmsd._GetBestRMSD": [[28, 76], ["rmsd.orginXYZ", "rmsd.orginXYZ", "ref.GetSubstructMatches", "rdkit.Chem.AllChem.AlignMol", "rdkit.Chem.AllChem.AlignMol", "ValueError", "len", "warnings.warn", "list", "enumerate", "len", "probe.GetProp", "ref.GetProp", "probe.GetProp"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmsd.orginXYZ", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmsd.orginXYZ"], ["", "def", "_GetBestRMSD", "(", "probe", ",", "ref", ",", "refConfId", "=", "-", "1", ",", "probeConfId", "=", "-", "1", ",", "maps", "=", "None", ")", ":", "\n", "    ", "\"\"\" Returns the optimal RMS for aligning two molecules, taking\n    symmetry into account. As a side-effect, the probe molecule is\n    left in the aligned state.\n    Arguments:\n        - ref: the reference molecule\n        - probe: the molecule to be aligned to the reference\n        - refConfId: (optional) reference conformation to use\n        - probeConfId: (optional) probe conformation to use\n        - maps: (optional) a list of lists of (probeAtomId,refAtomId)\n            tuples with the atom-atom mappings of the two molecules.\n            If not provided, these will be generated using a substructure\n            search.\n    Note: \n    This function will attempt to align all permutations of matching atom\n    orders in both molecules, for some molecules it will lead to 'combinatorial \n    explosion' especially if hydrogens are present.    \n    Use 'rdkit.Chem.AllChem.AlignMol' to align molecules without changing the\n    atom order.\n    \"\"\"", "\n", "# When mapping the coordinate of probe will changed!!!", "\n", "ref", ".", "pos", "=", "orginXYZ", "(", "ref", ")", "\n", "probe", ".", "pos", "=", "orginXYZ", "(", "probe", ")", "\n", "\n", "if", "not", "maps", ":", "\n", "        ", "matches", "=", "ref", ".", "GetSubstructMatches", "(", "probe", ",", "uniquify", "=", "False", ")", "\n", "if", "not", "matches", ":", "\n", "            ", "raise", "ValueError", "(", "'mol %s does not match mol %s'", "%", "(", "ref", ".", "GetProp", "(", "'_Name'", ")", ",", "probe", ".", "GetProp", "(", "'_Name'", ")", ")", ")", "\n", "", "if", "len", "(", "matches", ")", ">", "1e6", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"{} matches detected for molecule {}, this may lead to a performance slowdown.\"", ".", "format", "(", "len", "(", "matches", ")", ",", "probe", ".", "GetProp", "(", "'_Name'", ")", ")", ")", "\n", "", "maps", "=", "[", "list", "(", "enumerate", "(", "match", ")", ")", "for", "match", "in", "matches", "]", "\n", "", "bestRMS", "=", "1000.0", "\n", "bestRMSD", "=", "1000.0", "\n", "for", "amap", "in", "maps", ":", "\n", "        ", "rms", "=", "AlignMol", "(", "probe", ",", "ref", ",", "probeConfId", ",", "refConfId", ",", "atomMap", "=", "amap", ")", "\n", "# rmsd = RMSD(probe,ref,amap)", "\n", "rmsd", "=", "rms", "\n", "if", "rmsd", "<", "bestRMSD", ":", "\n", "            ", "bestRMSD", "=", "rmsd", "\n", "", "if", "rms", "<", "bestRMS", ":", "\n", "            ", "bestRMS", "=", "rms", "\n", "bestMap", "=", "amap", "\n", "\n", "# finally repeate the best alignment :", "\n", "", "", "if", "bestMap", "!=", "amap", ":", "\n", "        ", "AlignMol", "(", "probe", ",", "ref", ",", "probeConfId", ",", "refConfId", ",", "atomMap", "=", "bestMap", ")", "\n", "\n", "", "return", "bestRMS", ",", "bestRMSD", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmsd.RMSD": [[79, 89], ["math.sqrt", "ref.GetNumAtoms", "rmsd.dist_2"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmsd.dist_2"], ["", "def", "RMSD", "(", "probe", ",", "ref", ",", "amap", ")", ":", "\n", "    ", "rmsd", "=", "0.0", "\n", "# print(amap)", "\n", "atomNum", "=", "ref", ".", "GetNumAtoms", "(", ")", "+", "0.0", "\n", "for", "(", "pi", ",", "ri", ")", "in", "amap", ":", "\n", "        ", "posp", "=", "probe", ".", "pos", "[", "pi", "]", "\n", "posf", "=", "ref", ".", "pos", "[", "ri", "]", "\n", "rmsd", "+=", "dist_2", "(", "posp", ",", "posf", ")", "\n", "", "rmsd", "=", "math", ".", "sqrt", "(", "rmsd", "/", "atomNum", ")", "\n", "return", "rmsd", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmsd.dist_2": [[90, 95], ["zip"], "function", ["None"], ["", "def", "dist_2", "(", "atoma_xyz", ",", "atomb_xyz", ")", ":", "\n", "    ", "dis2", "=", "0.0", "\n", "for", "i", ",", "j", "in", "zip", "(", "atoma_xyz", ",", "atomb_xyz", ")", ":", "\n", "        ", "dis2", "+=", "(", "i", "-", "j", ")", "**", "2", "\n", "", "return", "dis2", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmsd.orginXYZ": [[96, 102], ["range", "mol.GetNumAtoms", "mol.GetConformer().GetAtomPosition", "mol.GetConformer"], "function", ["None"], ["", "def", "orginXYZ", "(", "mol", ")", ":", "\n", "    ", "mol_pos", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "mol", ".", "GetNumAtoms", "(", ")", ")", ":", "\n", "        ", "pos", "=", "mol", ".", "GetConformer", "(", ")", ".", "GetAtomPosition", "(", "i", ")", "\n", "mol_pos", "[", "i", "]", "=", "pos", "\n", "", "return", "mol_pos", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.metrics.guassian_kernel": [[3, 29], ["torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sum", "range", "source.size", "target.size"], "function", ["None"], ["def", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "'''\n    Params:\n\t    source: n * len(x)\n\t    target: m * len(y)\n\tReturn:\n\t\tsum(kernel_val): Sum of various kernel matrices\n    '''", "\n", "n_samples", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "+", "int", "(", "target", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "total", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", ",", "dim", "=", "0", ")", "\n", "total0", "=", "total", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "total1", "=", "total", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "L2_distance", "=", "(", "(", "total0", "-", "total1", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n", "if", "fix_sigma", ":", "\n", "        ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "        ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "-", "L2_distance", "/", "bandwidth_temp", ")", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "\n", "\n", "return", "sum", "(", "kernel_val", ")", "#/len(kernel_val)", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.metrics.compute_mmd": [[30, 49], ["int", "metrics.guassian_kernel", "torch.mean", "source.size", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.guassian_kernel"], ["", "def", "compute_mmd", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "'''\n    Params:\n\t    source: (N, D)\n\t    target: (M, D)\n\tReturn:\n\t\tloss: MMD loss\n    '''", "\n", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "kernels", "=", "guassian_kernel", "(", "source", ",", "target", ",", "\n", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ")", "\n", "\n", "XX", "=", "kernels", "[", ":", "batch_size", ",", ":", "batch_size", "]", "\n", "YY", "=", "kernels", "[", "batch_size", ":", ",", "batch_size", ":", "]", "\n", "XY", "=", "kernels", "[", ":", "batch_size", ",", "batch_size", ":", "]", "\n", "YX", "=", "kernels", "[", "batch_size", ":", ",", ":", "batch_size", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "XX", ")", "+", "torch", ".", "mean", "(", "YY", ")", "-", "torch", ".", "mean", "(", "XY", ")", "-", "torch", ".", "mean", "(", "YX", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.CovMatEvaluator.__init__": [[204, 208], ["object.__init__", "multiprocessing.Pool", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_workers", "=", "16", ",", "use_FF", "=", "False", ",", "thresholds", "=", "[", "0.5", ",", "1.25", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool", "=", "mp", ".", "Pool", "(", "num_workers", ")", "\n", "self", ".", "func", "=", "partial", "(", "_evaluate_conf", ",", "useFF", "=", "use_FF", ",", "thresholds", "=", "thresholds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.CovMatEvaluator.__call__": [[209, 234], ["misc.split_dataset_by_smiles", "misc.split_dataset_by_smiles", "misc.split_dataset_by_smiles.items", "eval.CovMatEvaluator._run", "rdmols.append", "pos_refs.append", "pos_gens.append", "p_ref.append", "p_gen.append", "numpy.vstack", "numpy.vstack", "mol.pos.cpu().numpy().reshape", "mol.pos.cpu().numpy().reshape", "mol.pos.cpu().numpy", "mol.pos.cpu().numpy", "mol.pos.cpu", "mol.pos.cpu"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.split_dataset_by_smiles", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.split_dataset_by_smiles", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.DistEvaluator._run"], ["", "def", "__call__", "(", "self", ",", "ref_dset", ",", "gen_dset", ")", ":", "\n", "        ", "ref_grouped", "=", "split_dataset_by_smiles", "(", "ref_dset", ")", "\n", "gen_grouped", "=", "split_dataset_by_smiles", "(", "gen_dset", ")", "\n", "\n", "rdmols", "=", "[", "]", "\n", "pos_refs", "=", "[", "]", "\n", "pos_gens", "=", "[", "]", "\n", "\n", "for", "smiles", ",", "gen_mols", "in", "gen_grouped", ".", "items", "(", ")", ":", "\n", "            ", "if", "smiles", "not", "in", "ref_grouped", ":", "\n", "                ", "continue", "\n", "", "ref_mols", "=", "ref_grouped", "[", "smiles", "]", "\n", "rdmols", ".", "append", "(", "gen_mols", "[", "0", "]", ".", "rdmol", ")", "\n", "\n", "p_ref", "=", "[", "]", "\n", "p_gen", "=", "[", "]", "\n", "for", "mol", "in", "ref_mols", ":", "\n", "                ", "p_ref", ".", "append", "(", "mol", ".", "pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "3", ")", ")", "\n", "", "for", "mol", "in", "gen_mols", ":", "\n", "                ", "p_gen", ".", "append", "(", "mol", ".", "pos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "3", ")", ")", "\n", "", "pos_refs", ".", "append", "(", "np", ".", "vstack", "(", "p_ref", ")", ")", "\n", "pos_gens", ".", "append", "(", "np", ".", "vstack", "(", "p_gen", ")", ")", "\n", "\n", "# return rdmols, pos_refs, pos_gens", "\n", "", "return", "self", ".", "_run", "(", "rdmols", ",", "pos_refs", ",", "pos_gens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.CovMatEvaluator._run": [[235, 248], ["tqdm.auto.tqdm.auto.tqdm", "eval.CovMatEvaluator.pool.imap", "covs.append", "mats.append", "zip", "len"], "methods", ["None"], ["", "def", "_run", "(", "self", ",", "rdmols", ",", "pos_refs", ",", "pos_gens", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            rdmols:  A list of rdkit molecules.\n            pos_refs:  A list of numpy tensors of shape (num_refs, num_atoms, 3)\n            pos_gens:  A list of numpy tensors of shape (num_gens, num_atoms, 3)\n        \"\"\"", "\n", "covs", "=", "[", "]", "\n", "mats", "=", "[", "]", "\n", "for", "result", "in", "tqdm", "(", "self", ".", "pool", ".", "imap", "(", "self", ".", "func", ",", "zip", "(", "rdmols", ",", "pos_refs", ",", "pos_gens", ")", ")", ",", "total", "=", "len", "(", "rdmols", ")", ")", ":", "\n", "            ", "covs", ".", "append", "(", "result", "[", "0", "]", ")", "\n", "mats", ".", "append", "(", "result", "[", "1", "]", ")", "\n", "", "return", "covs", ",", "mats", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.DistEvaluator.__init__": [[256, 260], ["object.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_H", "=", "False", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "func", "=", "partial", "(", "_evaluate_distance", ",", "ignore_H", "=", "ignore_H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.DistEvaluator.__call__": [[262, 288], ["misc.split_dataset_by_smiles", "misc.split_dataset_by_smiles", "misc.split_dataset_by_smiles.items", "eval.DistEvaluator._run", "edge_indexs.append", "atom_types.append", "pos_refs.append", "pos_gens.append", "p_ref.append", "p_gen.append", "torch.cat", "torch.cat", "mol.pos.reshape().to", "mol.pos.reshape().to", "mol.pos.reshape", "mol.pos.reshape"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.split_dataset_by_smiles", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.split_dataset_by_smiles", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.DistEvaluator._run"], ["", "def", "__call__", "(", "self", ",", "ref_dset", ",", "gen_dset", ")", ":", "\n", "        ", "ref_grouped", "=", "split_dataset_by_smiles", "(", "ref_dset", ")", "\n", "gen_grouped", "=", "split_dataset_by_smiles", "(", "gen_dset", ")", "\n", "\n", "pos_refs", "=", "[", "]", "\n", "pos_gens", "=", "[", "]", "\n", "edge_indexs", "=", "[", "]", "\n", "atom_types", "=", "[", "]", "\n", "\n", "for", "smiles", ",", "gen_mols", "in", "gen_grouped", ".", "items", "(", ")", ":", "\n", "            ", "if", "smiles", "not", "in", "ref_grouped", ":", "\n", "                ", "continue", "\n", "", "edge_indexs", ".", "append", "(", "gen_mols", "[", "0", "]", ".", "edge_index", ")", "\n", "atom_types", ".", "append", "(", "gen_mols", "[", "0", "]", ".", "node_type", ")", "\n", "ref_mols", "=", "ref_grouped", "[", "smiles", "]", "\n", "\n", "p_ref", "=", "[", "]", "\n", "p_gen", "=", "[", "]", "\n", "for", "mol", "in", "ref_mols", ":", "\n", "                ", "p_ref", ".", "append", "(", "mol", ".", "pos", ".", "reshape", "(", "1", ",", "-", "1", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "for", "mol", "in", "gen_mols", ":", "\n", "                ", "p_gen", ".", "append", "(", "mol", ".", "pos", ".", "reshape", "(", "1", ",", "-", "1", ",", "3", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "pos_refs", ".", "append", "(", "torch", ".", "cat", "(", "p_ref", ",", "dim", "=", "0", ")", ")", "\n", "pos_gens", ".", "append", "(", "torch", ".", "cat", "(", "p_gen", ",", "dim", "=", "0", ")", ")", "\n", "\n", "", "return", "self", ".", "_run", "(", "pos_refs", ",", "pos_gens", ",", "edge_indexs", ",", "atom_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.DistEvaluator._run": [[289, 315], ["tqdm.auto.tqdm.auto.tqdm", "zip", "eval.DistEvaluator.func", "a_mmd_all.append", "len"], "methods", ["None"], ["", "def", "_run", "(", "self", ",", "pos_refs", ",", "pos_gens", ",", "edge_indexs", ",", "atom_types", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pos_refs:  A list of numpy tensors of shape (num_refs, num_atoms, 3)\n            pos_gens:  A list of numpy tensors of shape (num_gens, num_atoms, 3)\n            edge_indexs:  A list of LongTensor(E, 2)\n            atom_types:   A list of LongTensor(N, )\n        \"\"\"", "\n", "s_mmd_all", "=", "[", "]", "\n", "p_mmd_all", "=", "[", "]", "\n", "a_mmd_all", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "zip", "(", "pos_refs", ",", "pos_gens", ",", "edge_indexs", ",", "atom_types", ")", ",", "total", "=", "len", "(", "pos_refs", ")", ")", ":", "\n", "            ", "stats_single", ",", "stats_pair", ",", "stats_all", "=", "self", ".", "func", "(", "data", ")", "\n", "s_mmd_all", "+=", "[", "e", "[", "'mmd'", "]", "for", "e", "in", "stats_single", "]", "\n", "p_mmd_all", "+=", "[", "e", "[", "'mmd'", "]", "for", "e", "in", "stats_pair", "]", "\n", "a_mmd_all", ".", "append", "(", "stats_all", "[", "'mmd'", "]", ")", "\n", "\n", "\n", "# for result in tqdm(self.pool.imap(self.func, zip(pos_refs, pos_gens, edge_indexs, atom_types)), total=len(pos_refs)):", "\n", "#     stats_single, stats_pair, stats_all = result", "\n", "#     s_mmd_all += [e['mmd'] for e in stats_single]", "\n", "#     p_mmd_all += [e['mmd'] for e in stats_pair]", "\n", "#     a_mmd_all.append(stats_all['mmd'])", "\n", "\n", "", "return", "s_mmd_all", ",", "p_mmd_all", ",", "a_mmd_all", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.GetBestRMSD": [[23, 29], ["rdkit.Chem.rdmolops.RemoveHs", "rdkit.Chem.rdmolops.RemoveHs", "rdkit.Chem.rdMolAlign.GetBestRMS"], "function", ["None"], ["def", "GetBestRMSD", "(", "probe", ",", "ref", ")", ":", "\n", "# rmsd = AlignMol(probe, ref)", "\n", "    ", "probe", "=", "RemoveHs", "(", "probe", ")", "\n", "ref", "=", "RemoveHs", "(", "ref", ")", "\n", "rmsd", "=", "GetBestRMS", "(", "probe", ",", "ref", ")", "\n", "return", "rmsd", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.evaluate_conf": [[31, 65], ["range", "rmsd_confusion_mat.min", "numpy.ones", "chem.set_rdmol_positions", "range", "coverages.append", "rmsd_confusion_mat.min.mean", "rdkit.Chem.rdForceFieldHelpers.MMFFOptimizeMolecule", "chem.set_rdmol_positions", "rmsd.GetBestRMSD"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.set_rdmol_positions", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.set_rdmol_positions", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.GetBestRMSD"], ["", "def", "evaluate_conf", "(", "rdmol", ",", "pos_ref", ",", "pos_gen", ",", "useFF", "=", "False", ",", "thresholds", "=", "[", "0.5", "]", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        rdmol:  An RDKit molecule object.\n        pos_ref:  (num_refs, num_atoms, 3)\n        pos_gen:  (num_gens, num_atoms, 3)\n        thresholds:  A list of thresholds.\n    Returns:\n        coverages:  A list of coverage scores at different thresholds.\n        rmsd_ref_min:  (num_ref, )\n    \"\"\"", "\n", "num_gen", "=", "pos_gen", ".", "shape", "[", "0", "]", "\n", "num_ref", "=", "pos_ref", ".", "shape", "[", "0", "]", "\n", "\n", "# row: ref, col, gen", "\n", "rmsd_confusion_mat", "=", "-", "1", "*", "np", ".", "ones", "(", "[", "num_ref", ",", "num_gen", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_gen", ")", ":", "\n", "        ", "gen_mol", "=", "set_rdmol_positions", "(", "rdmol", ",", "pos_gen", "[", "i", "]", ")", "\n", "if", "useFF", ":", "\n", "#print('Applying FF on generated molecules...')", "\n", "            ", "MMFFOptimizeMolecule", "(", "gen_mol", ")", "\n", "", "for", "j", "in", "range", "(", "num_ref", ")", ":", "\n", "            ", "ref_mol", "=", "set_rdmol_positions", "(", "rdmol", ",", "pos_ref", "[", "j", "]", ")", "\n", "\n", "rmsd_confusion_mat", "[", "j", ",", "i", "]", "=", "GetBestRMSD", "(", "gen_mol", ",", "ref_mol", ")", "\n", "\n", "", "", "rmsd_ref_min", "=", "rmsd_confusion_mat", ".", "min", "(", "-", "1", ")", "# (num_ref, )", "\n", "\n", "coverages", "=", "[", "]", "\n", "for", "t", "in", "thresholds", ":", "\n", "        ", "coverages", ".", "append", "(", "(", "rmsd_ref_min", "<=", "t", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "return", "coverages", ",", "rmsd_ref_min", ".", "mean", "(", ")", ",", "rmsd_ref_min", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.evaluate_distance": [[67, 148], ["enumerate", "enumerate", "metrics.compute_mmd().item", "tqdm.auto.tqdm", "metrics.compute_mmd().item", "stats_single.append", "tqdm.auto.tqdm", "enumerate", "enumerate", "gen_L.cpu", "ref_L.cpu", "edge_index.t", "edge_index.t", "edge_index.t", "metrics.compute_mmd().item", "stats_pair.append", "edge_index.t", "metrics.compute_mmd", "metrics.compute_mmd", "gen_l.cpu", "ref_l.cpu", "gen_L.cuda", "ref_L.cuda", "atom_type[].item", "atom_type[].item", "gen_l.view().cuda", "ref_l.view().cuda", "row.item", "col.item", "atom_type[].item", "atom_type[].item", "metrics.compute_mmd", "gen_L.cpu", "ref_L.cpu", "atom_type[].item", "atom_type[].item", "chem.get_atom_symbol", "chem.get_atom_symbol", "atom_type[].item", "atom_type[].item", "gen_L.cuda", "ref_L.cuda", "gen_l.view", "ref_l.view", "atom_type[].item", "atom_type[].item", "row_i.item", "col_i.item", "row_j.item", "col_j.item", "chem.get_atom_symbol", "chem.get_atom_symbol", "chem.get_atom_symbol", "chem.get_atom_symbol", "atom_type[].item", "atom_type[].item", "atom_type[].item", "atom_type[].item"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.compute_mmd", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.compute_mmd", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.compute_mmd", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol"], ["", "def", "evaluate_distance", "(", "pos_ref", ",", "pos_gen", ",", "edge_index", ",", "atom_type", ",", "ignore_H", "=", "True", ")", ":", "\n", "\n", "# compute generated length and ref length ", "\n", "    ", "ref_lengths", "=", "(", "pos_ref", "[", ":", ",", "edge_index", "[", "0", "]", "]", "-", "pos_ref", "[", ":", ",", "edge_index", "[", "1", "]", "]", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "# (N, num_edge)", "\n", "gen_lengths", "=", "(", "pos_gen", "[", ":", ",", "edge_index", "[", "0", "]", "]", "-", "pos_gen", "[", ":", ",", "edge_index", "[", "1", "]", "]", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "# (M, num_edge)", "\n", "# print(ref_lengths.shape, gen_lengths.shape)", "\n", "\n", "stats_single", "=", "[", "]", "\n", "first", "=", "1", "\n", "for", "i", ",", "(", "row", ",", "col", ")", "in", "enumerate", "(", "tqdm", "(", "edge_index", ".", "t", "(", ")", ")", ")", ":", "\n", "        ", "if", "row", ">=", "col", ":", "\n", "            ", "continue", "\n", "", "if", "ignore_H", "and", "1", "in", "(", "atom_type", "[", "row", "]", ".", "item", "(", ")", ",", "atom_type", "[", "col", "]", ".", "item", "(", ")", ")", ":", "\n", "            ", "continue", "\n", "", "gen_l", "=", "gen_lengths", "[", ":", ",", "i", "]", "\n", "ref_l", "=", "ref_lengths", "[", ":", ",", "i", "]", "\n", "if", "first", ":", "\n", "# print(gen_l.shape, ref_l.shape)", "\n", "            ", "first", "=", "0", "\n", "", "mmd", "=", "compute_mmd", "(", "gen_l", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cuda", "(", ")", ",", "ref_l", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", ".", "item", "(", ")", "\n", "stats_single", ".", "append", "(", "{", "\n", "'edge_id'", ":", "i", ",", "\n", "'elems'", ":", "'%s - %s'", "%", "(", "get_atom_symbol", "(", "atom_type", "[", "row", "]", ".", "item", "(", ")", ")", ",", "get_atom_symbol", "(", "atom_type", "[", "col", "]", ".", "item", "(", ")", ")", ")", ",", "\n", "'nodes'", ":", "(", "row", ".", "item", "(", ")", ",", "col", ".", "item", "(", ")", ")", ",", "\n", "'gen_lengths'", ":", "gen_l", ".", "cpu", "(", ")", ",", "\n", "'ref_lengths'", ":", "ref_l", ".", "cpu", "(", ")", ",", "\n", "'mmd'", ":", "mmd", "\n", "}", ")", "\n", "\n", "", "first", "=", "1", "\n", "stats_pair", "=", "[", "]", "\n", "for", "i", ",", "(", "row_i", ",", "col_i", ")", "in", "enumerate", "(", "tqdm", "(", "edge_index", ".", "t", "(", ")", ")", ")", ":", "\n", "        ", "if", "row_i", ">=", "col_i", ":", "\n", "            ", "continue", "\n", "", "if", "ignore_H", "and", "1", "in", "(", "atom_type", "[", "row_i", "]", ".", "item", "(", ")", ",", "atom_type", "[", "col_i", "]", ".", "item", "(", ")", ")", ":", "\n", "            ", "continue", "\n", "", "for", "j", ",", "(", "row_j", ",", "col_j", ")", "in", "enumerate", "(", "edge_index", ".", "t", "(", ")", ")", ":", "\n", "            ", "if", "(", "row_i", ">=", "row_j", ")", "or", "(", "row_j", ">=", "col_j", ")", ":", "\n", "                ", "continue", "\n", "", "if", "ignore_H", "and", "1", "in", "(", "atom_type", "[", "row_j", "]", ".", "item", "(", ")", ",", "atom_type", "[", "col_j", "]", ".", "item", "(", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "gen_L", "=", "gen_lengths", "[", ":", ",", "(", "i", ",", "j", ")", "]", "# (N, 2)", "\n", "ref_L", "=", "ref_lengths", "[", ":", ",", "(", "i", ",", "j", ")", "]", "# (M, 2)", "\n", "if", "first", ":", "\n", "# print(gen_L.shape, ref_L.shape)", "\n", "                ", "first", "=", "0", "\n", "", "mmd", "=", "compute_mmd", "(", "gen_L", ".", "cuda", "(", ")", ",", "ref_L", ".", "cuda", "(", ")", ")", ".", "item", "(", ")", "\n", "\n", "stats_pair", ".", "append", "(", "{", "\n", "'edge_id'", ":", "(", "i", ",", "j", ")", ",", "\n", "'elems'", ":", "(", "\n", "'%s - %s'", "%", "(", "get_atom_symbol", "(", "atom_type", "[", "row_i", "]", ".", "item", "(", ")", ")", ",", "get_atom_symbol", "(", "atom_type", "[", "col_i", "]", ".", "item", "(", ")", ")", ")", ",", "\n", "'%s - %s'", "%", "(", "get_atom_symbol", "(", "atom_type", "[", "row_j", "]", ".", "item", "(", ")", ")", ",", "get_atom_symbol", "(", "atom_type", "[", "col_j", "]", ".", "item", "(", ")", ")", ")", ",", "\n", ")", ",", "\n", "'nodes'", ":", "(", "\n", "(", "row_i", ".", "item", "(", ")", ",", "col_i", ".", "item", "(", ")", ")", ",", "\n", "(", "row_j", ".", "item", "(", ")", ",", "col_j", ".", "item", "(", ")", ")", ",", "\n", ")", ",", "\n", "'gen_lengths'", ":", "gen_L", ".", "cpu", "(", ")", ",", "\n", "'ref_lengths'", ":", "ref_L", ".", "cpu", "(", ")", ",", "\n", "'mmd'", ":", "mmd", "\n", "}", ")", "\n", "\n", "", "", "edge_filter", "=", "edge_index", "[", "0", "]", "<", "edge_index", "[", "1", "]", "\n", "if", "ignore_H", ":", "\n", "        ", "for", "i", ",", "(", "row", ",", "col", ")", "in", "enumerate", "(", "edge_index", ".", "t", "(", ")", ")", ":", "\n", "            ", "if", "1", "in", "(", "atom_type", "[", "row", "]", ".", "item", "(", ")", ",", "atom_type", "[", "col", "]", ".", "item", "(", ")", ")", ":", "\n", "                ", "edge_filter", "[", "i", "]", "=", "False", "\n", "\n", "", "", "", "gen_L", "=", "gen_lengths", "[", ":", ",", "edge_filter", "]", "# (N, Ef)", "\n", "ref_L", "=", "ref_lengths", "[", ":", ",", "edge_filter", "]", "# (M, Ef)", "\n", "# print(gen_L.shape, ref_L.shape)", "\n", "mmd", "=", "compute_mmd", "(", "gen_L", ".", "cuda", "(", ")", ",", "ref_L", ".", "cuda", "(", ")", ")", ".", "item", "(", ")", "\n", "\n", "stats_all", "=", "{", "\n", "'gen_lengths'", ":", "gen_L", ".", "cpu", "(", ")", ",", "\n", "'ref_lengths'", ":", "ref_L", ".", "cpu", "(", ")", ",", "\n", "'mmd'", ":", "mmd", "\n", "}", "\n", "return", "stats_single", ",", "stats_pair", ",", "stats_all", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.guassian_kernel": [[150, 176], ["torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.sum", "range"], "function", ["None"], ["", "def", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "'''\n    Params:\n\t    source: n * len(x)\n\t    target: m * len(y)\n\tReturn:\n\t\tsum(kernel_val): Sum of various kernel matrices\n    '''", "\n", "n_samples", "=", "int", "(", "source", ".", "shape", "[", "0", "]", ")", "+", "int", "(", "target", ".", "shape", "[", "0", "]", ")", "\n", "total", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", ",", "dim", "=", "0", ")", "\n", "total0", "=", "total", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "int", "(", "total", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "total", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "total", ".", "shape", "[", "1", "]", ")", ")", "\n", "total1", "=", "total", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "int", "(", "total", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "total", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "total", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "L2_distance", "=", "(", "(", "total0", "-", "total1", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n", "if", "fix_sigma", ":", "\n", "        ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "        ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "-", "L2_distance", "/", "bandwidth_temp", ")", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "\n", "\n", "return", "sum", "(", "kernel_val", ")", "#/len(kernel_val)", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.compute_mmd": [[177, 196], ["int", "eval.guassian_kernel", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.guassian_kernel"], ["", "def", "compute_mmd", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "'''\n    Params:\n\t    source: (N, D)\n\t    target: (M, D)\n\tReturn:\n\t\tloss: MMD loss\n    '''", "\n", "batch_size", "=", "int", "(", "source", ".", "shape", "[", "0", "]", ")", "\n", "kernels", "=", "guassian_kernel", "(", "source", ",", "target", ",", "\n", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ")", "\n", "\n", "XX", "=", "kernels", "[", ":", "batch_size", ",", ":", "batch_size", "]", "\n", "YY", "=", "kernels", "[", "batch_size", ":", ",", "batch_size", ":", "]", "\n", "XY", "=", "kernels", "[", ":", "batch_size", ",", "batch_size", ":", "]", "\n", "YX", "=", "kernels", "[", "batch_size", ":", ",", ":", "batch_size", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "XX", ")", "+", "torch", ".", "mean", "(", "YY", ")", "-", "torch", ".", "mean", "(", "XY", ")", "-", "torch", ".", "mean", "(", "YX", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval._evaluate_conf": [[198, 200], ["eval.evaluate_conf"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.evaluate_conf"], ["", "def", "_evaluate_conf", "(", "data", ",", "useFF", ",", "thresholds", ")", ":", "\n", "    ", "return", "evaluate_conf", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "data", "[", "2", "]", ",", "useFF", "=", "useFF", ",", "thresholds", "=", "thresholds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval._evaluate_distance": [[251, 253], ["eval.evaluate_distance"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.evaluate_distance"], ["", "", "def", "_evaluate_distance", "(", "data", ",", "ignore_H", ")", ":", "\n", "    ", "return", "evaluate_distance", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ",", "data", "[", "2", "]", ",", "data", "[", "3", "]", ",", "ignore_H", "=", "ignore_H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.rmoutlier.remove_outliers": [[6, 30], ["tqdm.auto.tqdm", "numpy.array", "numpy.logical_and", "np.array.append", "numpy.mean", "numpy.std", "np.logical_and.sum", "enumerate"], "function", ["None"], ["def", "remove_outliers", "(", "data_list", ",", "std_range", "=", "2.5", ",", "mode", "=", "'bond'", ")", ":", "\n", "    ", "assert", "mode", "in", "(", "'bond'", ",", "'all'", ")", "\n", "sample", "=", "data_list", "[", "0", "]", "\n", "smiles", "=", "sample", ".", "smiles", "\n", "for", "data", "in", "data_list", ":", "\n", "        ", "assert", "data", ".", "smiles", "==", "smiles", "\n", "\n", "", "if", "mode", "==", "'bond'", ":", "\n", "        ", "edge_index", "=", "sample", ".", "bond_edge_index", "\n", "", "else", ":", "\n", "        ", "edge_index", "=", "sample", ".", "edge_index", "\n", "", "node_type", "=", "sample", ".", "node_type", "\n", "lengths", "=", "[", "]", "# list, (N, E)", "\n", "for", "data", "in", "tqdm", "(", "data_list", ",", "desc", "=", "'Length'", ")", ":", "\n", "        ", "lengths", ".", "append", "(", "(", "data", ".", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "data", ".", "pos", "[", "edge_index", "[", "1", "]", "]", ")", ".", "norm", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "lengths", "=", "np", ".", "array", "(", "lengths", ")", "\n", "\n", "mean", ",", "std", "=", "np", ".", "mean", "(", "lengths", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ",", "np", ".", "std", "(", "lengths", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "range_min", "=", "mean", "-", "std", "*", "std_range", "\n", "range_max", "=", "mean", "+", "std", "*", "std_range", "\n", "filt", "=", "np", ".", "logical_and", "(", "lengths", ">", "range_min", ",", "lengths", "<", "range_max", ")", "\n", "filt", "=", "filt", ".", "sum", "(", "axis", "=", "1", ")", "==", "lengths", ".", "shape", "[", "1", "]", "\n", "filt_data", "=", "[", "data_list", "[", "i", "]", "for", "i", ",", "b", "in", "enumerate", "(", "filt", ")", "if", "b", "==", "True", "]", "\n", "return", "filt_data", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.BlackHole.__setattr__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.BlackHole.__call__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", "\n", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.BlackHole.__getattr__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.__init__": [[25, 50], ["misc.BlackHole", "object.__init__", "os.makedirs", "os.listdir", "range", "f.split", "misc.CheckpointManager.ckpts.append", "max", "misc.CheckpointManager.ckpts.append", "it.split", "float", "int", "len", "torch.tensor", "float"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "save_dir", ",", "best_k", "=", "5", ",", "logger", "=", "BlackHole", "(", ")", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "best_k", "=", "best_k", "\n", "self", ".", "ckpts", "=", "[", "]", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "device", "=", "device", "\n", "\n", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "if", "f", "[", ":", "4", "]", "!=", "'ckpt'", ":", "\n", "                ", "continue", "\n", "", "_", ",", "score", ",", "it", "=", "f", ".", "split", "(", "'_'", ")", "\n", "it", "=", "it", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "self", ".", "ckpts", ".", "append", "(", "{", "\n", "'score'", ":", "float", "(", "score", ")", ",", "\n", "'file'", ":", "f", ",", "\n", "'iteration'", ":", "int", "(", "it", ")", ",", "\n", "}", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "max", "(", "self", ".", "best_k", "-", "len", "(", "self", ".", "ckpts", ")", ",", "0", ")", ")", ":", "\n", "            ", "self", ".", "ckpts", ".", "append", "(", "{", "\n", "'score'", ":", "torch", ".", "tensor", "(", "float", "(", "'inf'", ")", ")", ",", "\n", "'file'", ":", "None", ",", "\n", "'iteration'", ":", "-", "1", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.get_worst_ckpt_idx": [[52, 60], ["torch.tensor", "enumerate", "float"], "methods", ["None"], ["", "", "def", "get_worst_ckpt_idx", "(", "self", ")", ":", "\n", "        ", "idx", "=", "-", "1", "\n", "worst", "=", "torch", ".", "tensor", "(", "float", "(", "'-inf'", ")", ")", "\n", "for", "i", ",", "ckpt", "in", "enumerate", "(", "self", ".", "ckpts", ")", ":", "\n", "            ", "if", "ckpt", "[", "'score'", "]", ">=", "worst", ":", "\n", "                ", "idx", "=", "i", "\n", "worst", "=", "ckpt", "[", "'score'", "]", "\n", "", "", "return", "idx", "if", "idx", ">=", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.get_best_ckpt_idx": [[61, 69], ["torch.tensor", "enumerate", "float"], "methods", ["None"], ["", "def", "get_best_ckpt_idx", "(", "self", ")", ":", "\n", "        ", "idx", "=", "-", "1", "\n", "best", "=", "torch", ".", "tensor", "(", "float", "(", "'inf'", ")", ")", "\n", "for", "i", ",", "ckpt", "in", "enumerate", "(", "self", ".", "ckpts", ")", ":", "\n", "            ", "if", "ckpt", "[", "'score'", "]", "<=", "best", ":", "\n", "                ", "idx", "=", "i", "\n", "best", "=", "ckpt", "[", "'score'", "]", "\n", "", "", "return", "idx", "if", "idx", ">=", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.save": [[70, 92], ["misc.CheckpointManager.get_worst_ckpt_idx", "os.path.join", "torch.save", "float", "model.state_dict", "float", "int"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.get_worst_ckpt_idx", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.save"], ["", "def", "save", "(", "self", ",", "model", ",", "args", ",", "score", ",", "step", "=", "None", ")", ":", "\n", "        ", "idx", "=", "self", ".", "get_worst_ckpt_idx", "(", ")", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "step", "is", "None", ":", "\n", "            ", "fname", "=", "'ckpt_%.6f_.pt'", "%", "float", "(", "score", ")", "\n", "", "else", ":", "\n", "            ", "fname", "=", "'ckpt_%.6f_%d.pt'", "%", "(", "float", "(", "score", ")", ",", "int", "(", "step", ")", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "fname", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'args'", ":", "args", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "path", ")", "\n", "\n", "self", ".", "ckpts", "[", "idx", "]", "=", "{", "\n", "'score'", ":", "score", ",", "\n", "'file'", ":", "fname", "\n", "}", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.get_latest_ckpt_idx": [[93, 101], ["enumerate"], "methods", ["None"], ["", "def", "get_latest_ckpt_idx", "(", "self", ")", ":", "\n", "        ", "idx", "=", "-", "1", "\n", "latest_it", "=", "-", "1", "\n", "for", "i", ",", "ckpt", "in", "enumerate", "(", "self", ".", "ckpts", ")", ":", "\n", "            ", "if", "ckpt", "[", "'iteration'", "]", ">", "latest_it", ":", "\n", "                ", "idx", "=", "i", "\n", "latest_it", "=", "ckpt", "[", "'iteration'", "]", "\n", "", "", "return", "idx", "if", "idx", ">=", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.load_best": [[102, 111], ["misc.CheckpointManager.get_best_ckpt_idx", "misc.CheckpointManager.logger.info", "torch.load", "IOError", "repr", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.get_best_ckpt_idx"], ["", "def", "load_best", "(", "self", ")", ":", "\n", "        ", "idx", "=", "self", ".", "get_best_ckpt_idx", "(", ")", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "raise", "IOError", "(", "'No checkpoints found.'", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "repr", "(", "self", ".", "ckpts", "[", "idx", "]", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "ckpts", "[", "idx", "]", "[", "'file'", "]", ")", ",", "map_location", "=", "self", ".", "device", ")", "\n", "ckpt", "[", "'iteration'", "]", "=", "self", ".", "ckpts", "[", "idx", "]", "[", "'iteration'", "]", "\n", "return", "ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.load_latest": [[112, 120], ["misc.CheckpointManager.get_latest_ckpt_idx", "misc.CheckpointManager.logger.info", "torch.load", "IOError", "repr", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.get_latest_ckpt_idx"], ["", "def", "load_latest", "(", "self", ")", ":", "\n", "        ", "idx", "=", "self", ".", "get_latest_ckpt_idx", "(", ")", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "raise", "IOError", "(", "'No checkpoints found.'", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "repr", "(", "self", ".", "ckpts", "[", "idx", "]", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "ckpts", "[", "idx", "]", "[", "'file'", "]", ")", ",", "map_location", "=", "self", ".", "device", ")", "\n", "ckpt", "[", "'iteration'", "]", "=", "self", ".", "ckpts", "[", "idx", "]", "[", "'iteration'", "]", "\n", "return", "ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.VirtualDataset.__init__": [[203, 214], ["super().__init__", "isinstance", "misc.VirtualDataset.splits.reverse", "grouped.items", "misc.VirtualDataset.splits.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "grouped", ",", "num_samples", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grouped", "=", "[", "subset", "for", "_", ",", "subset", "in", "grouped", ".", "items", "(", ")", "]", "\n", "assert", "isinstance", "(", "num_samples", ",", "int", ")", "and", "num_samples", "!=", "0", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "if", "num_samples", "<", "0", ":", "\n", "            ", "self", ".", "multiple", "=", "-", "num_samples", "\n", "self", ".", "splits", "=", "[", "0", "]", "\n", "for", "g", "in", "self", ".", "grouped", ":", "\n", "                ", "self", ".", "splits", ".", "append", "(", "self", ".", "splits", "[", "len", "(", "self", ".", "splits", ")", "-", "1", "]", "+", "len", "(", "g", ")", "*", "self", ".", "multiple", ")", "\n", "", "self", ".", "splits", ".", "reverse", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.VirtualDataset.__len__": [[215, 220], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_samples", ">", "0", ":", "\n", "            ", "return", "len", "(", "self", ".", "grouped", ")", "*", "self", ".", "num_samples", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "splits", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.VirtualDataset.__getitem__": [[221, 229], ["enumerate", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "num_samples", ">", "0", ":", "\n", "            ", "gid", "=", "idx", "//", "self", ".", "num_samples", "\n", "return", "self", ".", "grouped", "[", "gid", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "for", "gid", ",", "offset", "in", "enumerate", "(", "self", ".", "splits", ")", ":", "\n", "                ", "if", "idx", ">=", "offset", ":", "\n", "                    ", "return", "self", ".", "grouped", "[", "len", "(", "self", ".", "grouped", ")", "-", "gid", "]", "[", "0", "]", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.get_logger": [[121, 138], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["", "", "def", "get_logger", "(", "name", ",", "log_dir", "=", "None", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s::%(name)s::%(levelname)s] %(message)s'", ")", "\n", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'log.txt'", ")", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.get_new_log_dir": [[140, 149], ["time.strftime", "os.path.join", "os.makedirs", "time.localtime"], "function", ["None"], ["", "def", "get_new_log_dir", "(", "root", "=", "'./logs'", ",", "prefix", "=", "''", ",", "tag", "=", "''", ")", ":", "\n", "    ", "fn", "=", "time", ".", "strftime", "(", "'%Y_%m_%d__%H_%M_%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "if", "prefix", "!=", "''", ":", "\n", "        ", "fn", "=", "prefix", "+", "'_'", "+", "fn", "\n", "", "if", "tag", "!=", "''", ":", "\n", "        ", "fn", "=", "fn", "+", "'_'", "+", "tag", "\n", "", "log_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fn", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.seed_all": [[151, 155], ["torch.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.get_data_iterator": [[157, 164], ["iterable.__iter__", "iterable.__iter__.__next__", "iterable.__iter__"], "function", ["None"], ["", "def", "get_data_iterator", "(", "iterable", ")", ":", "\n", "    ", "iterator", "=", "iterable", ".", "__iter__", "(", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "iterator", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "iterator", "=", "iterable", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.log_hyperparams": [[166, 173], ["hparams", "writer.file_writer.add_summary", "writer.file_writer.add_summary", "writer.file_writer.add_summary", "isinstance", "repr", "vars().items", "vars"], "function", ["None"], ["", "", "", "def", "log_hyperparams", "(", "writer", ",", "args", ")", ":", "\n", "    ", "from", "torch", ".", "utils", ".", "tensorboard", ".", "summary", "import", "hparams", "\n", "vars_args", "=", "{", "k", ":", "v", "if", "isinstance", "(", "v", ",", "str", ")", "else", "repr", "(", "v", ")", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "}", "\n", "exp", ",", "ssi", ",", "sei", "=", "hparams", "(", "vars_args", ",", "{", "}", ")", "\n", "writer", ".", "file_writer", ".", "add_summary", "(", "exp", ")", "\n", "writer", ".", "file_writer", ".", "add_summary", "(", "ssi", ")", "\n", "writer", ".", "file_writer", ".", "add_summary", "(", "sei", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.split_dataset_by_smiles": [[175, 191], ["enumerate", "isinstance", "isinstance", "tqdm.auto.tqdm", "torch.utils.data.Subset", "split[].append", "split.items"], "function", ["None"], ["", "def", "split_dataset_by_smiles", "(", "dataset", ")", ":", "\n", "    ", "split", "=", "{", "}", "\n", "\n", "if", "isinstance", "(", "dataset", ",", "MoleculeDataset", ")", "or", "isinstance", "(", "dataset", ",", "GEOMDataset", ")", ":", "\n", "        ", "dset", "=", "dataset", ".", "dataset", "\n", "", "else", ":", "\n", "        ", "dset", "=", "dataset", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dset", ")", ")", ":", "\n", "        ", "smiles", "=", "data", ".", "smiles", "\n", "if", "smiles", "in", "split", ":", "\n", "            ", "split", "[", "smiles", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "split", "[", "smiles", "]", "=", "[", "i", "]", "\n", "\n", "", "", "split", "=", "{", "k", ":", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dataset", ",", "v", ")", "for", "k", ",", "v", "in", "split", ".", "items", "(", ")", "}", "\n", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.int_tuple": [[193, 195], ["tuple", "map", "argstr.split"], "function", ["None"], ["", "def", "int_tuple", "(", "argstr", ")", ":", "\n", "    ", "return", "tuple", "(", "map", "(", "int", ",", "argstr", ".", "split", "(", "','", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.str_tuple": [[197, 199], ["tuple", "argstr.split"], "function", ["None"], ["", "def", "str_tuple", "(", "argstr", ")", ":", "\n", "    ", "return", "tuple", "(", "argstr", ".", "split", "(", "','", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.ParallelAlignMol.__init__": [[145, 148], ["object.__init__", "multiprocessing.Pool"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_workers", "=", "32", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool", "=", "mp", ".", "Pool", "(", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.ParallelAlignMol._align_mol": [[149, 156], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "rdkit.Chem.AllChem.AlignMol", "rdkit.Chem.AllChem.AlignMol", "torch.Tensor", "copy.deepcopy.GetConformer().GetPositions", "copy.deepcopy.GetConformer().GetPositions", "copy.deepcopy.GetConformer", "copy.deepcopy.GetConformer"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_align_mol", "(", "mol_truth", ",", "mol_gen", ")", ":", "\n", "        ", "mol_truth", "=", "copy", ".", "deepcopy", "(", "mol_truth", ")", "\n", "# mol_truth = RemoveHs(copy.deepcopy(mol_truth))", "\n", "# mol_gen = RemoveHs(copy.deepcopy(mol_gen))", "\n", "AlignMol", "(", "mol_truth", ",", "mol_gen", ")", "\n", "return", "torch", ".", "Tensor", "(", "mol_truth", ".", "GetConformer", "(", "0", ")", ".", "GetPositions", "(", ")", ")", "# (num_atoms, 3)", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.ParallelAlignMol.__call__": [[157, 160], ["chem.ParallelAlignMol.pool.starmap", "torch.cat", "zip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "mols_truth", ",", "mols_gen", ")", ":", "\n", "        ", "probes", "=", "self", ".", "pool", ".", "starmap", "(", "ParallelAlignMol", ".", "_align_mol", ",", "zip", "(", "mols_truth", ",", "mols_gen", ")", ")", "\n", "return", "torch", ".", "cat", "(", "probes", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.set_conformer_positions": [[35, 39], ["range", "conf.SetAtomPosition", "pos[].tolist"], "function", ["None"], ["def", "set_conformer_positions", "(", "conf", ",", "pos", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "pos", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "conf", ".", "SetAtomPosition", "(", "i", ",", "pos", "[", "i", "]", ".", "tolist", "(", ")", ")", "\n", "", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.draw_mol_image": [[41, 48], ["rdkit_mol.UpdatePropertyCache", "rdkit.Chem.Draw.MolToImage", "rdkit.Chem.Draw.MolToImage", "torchvision.transforms.functional.to_tensor"], "function", ["None"], ["", "def", "draw_mol_image", "(", "rdkit_mol", ",", "tensor", "=", "False", ")", ":", "\n", "    ", "rdkit_mol", ".", "UpdatePropertyCache", "(", ")", "\n", "img", "=", "rdkit", ".", "Chem", ".", "Draw", ".", "MolToImage", "(", "rdkit_mol", ",", "kekulize", "=", "False", ")", "\n", "if", "tensor", ":", "\n", "        ", "return", "to_tensor", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.update_data_rdmol_positions": [[50, 54], ["range", "data.pos.size", "data.rdmol.GetConformer().SetAtomPosition", "data.pos[].tolist", "data.rdmol.GetConformer"], "function", ["None"], ["", "", "def", "update_data_rdmol_positions", "(", "data", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "data", ".", "pos", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "data", ".", "rdmol", ".", "GetConformer", "(", "0", ")", ".", "SetAtomPosition", "(", "i", ",", "data", ".", "pos", "[", "i", "]", ".", "tolist", "(", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.update_data_pos_from_rdmol": [[56, 60], ["torch.FloatTensor().to", "torch.FloatTensor", "data.rdmol.GetConformer().GetPositions", "data.rdmol.GetConformer"], "function", ["None"], ["", "def", "update_data_pos_from_rdmol", "(", "data", ")", ":", "\n", "    ", "new_pos", "=", "torch", ".", "FloatTensor", "(", "data", ".", "rdmol", ".", "GetConformer", "(", "0", ")", ".", "GetPositions", "(", ")", ")", ".", "to", "(", "data", ".", "pos", ")", "\n", "data", ".", "pos", "=", "new_pos", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.set_rdmol_positions": [[62, 71], ["copy.deepcopy", "copy.deepcopy", "chem.set_rdmol_positions_"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.set_rdmol_positions_"], ["", "def", "set_rdmol_positions", "(", "rdkit_mol", ",", "pos", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        rdkit_mol:  An `rdkit.Chem.rdchem.Mol` object.\n        pos: (N_atoms, 3)\n    \"\"\"", "\n", "mol", "=", "copy", ".", "deepcopy", "(", "rdkit_mol", ")", "\n", "set_rdmol_positions_", "(", "mol", ",", "pos", ")", "\n", "return", "mol", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.set_rdmol_positions_": [[73, 82], ["range", "mol.GetConformer().SetAtomPosition", "pos[].tolist", "mol.GetConformer"], "function", ["None"], ["", "def", "set_rdmol_positions_", "(", "mol", ",", "pos", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        rdkit_mol:  An `rdkit.Chem.rdchem.Mol` object.\n        pos: (N_atoms, 3)\n    \"\"\"", "\n", "for", "i", "in", "range", "(", "pos", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "mol", ".", "GetConformer", "(", "0", ")", ".", "SetAtomPosition", "(", "i", ",", "pos", "[", "i", "]", ".", "tolist", "(", ")", ")", "\n", "", "return", "mol", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol": [[84, 86], ["rdkit.Chem.PeriodicTable.GetElementSymbol", "rdkit.Chem.rdchem.GetPeriodicTable"], "function", ["None"], ["", "def", "get_atom_symbol", "(", "atomic_number", ")", ":", "\n", "    ", "return", "PT", ".", "GetElementSymbol", "(", "GetPeriodicTable", "(", ")", ",", "atomic_number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.mol_to_smiles": [[88, 90], ["rdkit.Chem.MolToSmiles"], "function", ["None"], ["", "def", "mol_to_smiles", "(", "mol", ":", "Mol", ")", "->", "str", ":", "\n", "    ", "return", "Chem", ".", "MolToSmiles", "(", "mol", ",", "allHsExplicit", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.remove_duplicate_mols": [[92, 107], ["chem.mol_to_smiles", "unique_tuples.append"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.mol_to_smiles"], ["", "def", "remove_duplicate_mols", "(", "molecules", ":", "List", "[", "Mol", "]", ")", "->", "List", "[", "Mol", "]", ":", "\n", "    ", "unique_tuples", ":", "List", "[", "Tuple", "[", "str", ",", "Mol", "]", "]", "=", "[", "]", "\n", "\n", "for", "molecule", "in", "molecules", ":", "\n", "        ", "duplicate", "=", "False", "\n", "smiles", "=", "mol_to_smiles", "(", "molecule", ")", "\n", "for", "unique_smiles", ",", "_", "in", "unique_tuples", ":", "\n", "            ", "if", "smiles", "==", "unique_smiles", ":", "\n", "                ", "duplicate", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "duplicate", ":", "\n", "            ", "unique_tuples", ".", "append", "(", "(", "smiles", ",", "molecule", ")", ")", "\n", "\n", "", "", "return", "[", "mol", "for", "smiles", ",", "mol", "in", "unique_tuples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atoms_in_ring": [[109, 115], ["set", "mol.GetRingInfo().AtomRings", "mol.GetRingInfo", "set.add"], "function", ["None"], ["", "def", "get_atoms_in_ring", "(", "mol", ")", ":", "\n", "    ", "atoms", "=", "set", "(", ")", "\n", "for", "ring", "in", "mol", ".", "GetRingInfo", "(", ")", ".", "AtomRings", "(", ")", ":", "\n", "        ", "for", "a", "in", "ring", ":", "\n", "            ", "atoms", ".", "add", "(", "a", ")", "\n", "", "", "return", "atoms", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_2D_mol": [[117, 121], ["copy.deepcopy", "rdkit.Chem.rdDepictor.Compute2DCoords"], "function", ["None"], ["", "def", "get_2D_mol", "(", "mol", ")", ":", "\n", "    ", "mol", "=", "deepcopy", "(", "mol", ")", "\n", "DP", ".", "Compute2DCoords", "(", "mol", ")", "\n", "return", "mol", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.draw_mol_svg": [[123, 141], ["rdkit.Chem.Mol", "rdkit.Chem.Draw.rdMolDraw2D.MolDraw2DSVG", "MD2.MolDraw2DSVG.DrawMolecule", "MD2.MolDraw2DSVG.FinishDrawing", "MD2.MolDraw2DSVG.GetDrawingText", "mol.ToBinary", "Chem.Mol.GetNumConformers", "rdkit.Chem.rdDepictor.Compute2DCoords", "rdkit.Chem.Kekulize", "rdkit.Chem.Mol", "mol.ToBinary"], "function", ["None"], ["", "def", "draw_mol_svg", "(", "mol", ",", "molSize", "=", "(", "450", ",", "150", ")", ",", "kekulize", "=", "False", ")", ":", "\n", "    ", "mc", "=", "Chem", ".", "Mol", "(", "mol", ".", "ToBinary", "(", ")", ")", "\n", "if", "kekulize", ":", "\n", "        ", "try", ":", "\n", "            ", "Chem", ".", "Kekulize", "(", "mc", ")", "\n", "", "except", ":", "\n", "            ", "mc", "=", "Chem", ".", "Mol", "(", "mol", ".", "ToBinary", "(", ")", ")", "\n", "", "", "if", "not", "mc", ".", "GetNumConformers", "(", ")", ":", "\n", "        ", "DP", ".", "Compute2DCoords", "(", "mc", ")", "\n", "", "drawer", "=", "MD2", ".", "MolDraw2DSVG", "(", "molSize", "[", "0", "]", ",", "molSize", "[", "1", "]", ")", "\n", "drawer", ".", "DrawMolecule", "(", "mc", ")", "\n", "drawer", ".", "FinishDrawing", "(", ")", "\n", "svg", "=", "drawer", ".", "GetDrawingText", "(", ")", "\n", "# It seems that the svg renderer used doesn't quite hit the spec.", "\n", "# Here are some fixes to make it work in the notebook, although I think", "\n", "# the underlying issue needs to be resolved at the generation step", "\n", "# return svg.replace('svg:','')", "\n", "return", "svg", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.__init__": [[33, 71], ["object.__init__", "tqdm.auto.tqdm.auto.tqdm", "tqdm.auto.tqdm.auto.tqdm", "tqdm.auto.tqdm.auto.tqdm", "tqdm.auto.tqdm.auto.tqdm", "torch.FloatTensor", "torch.FloatTensor", "isinstance", "isinstance", "transforms.get_standard_transforms", "torch.FloatTensor.append", "torch.FloatTensor.append"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.transforms.get_standard_transforms"], ["    ", "def", "__init__", "(", "self", ",", "gen", ",", "ref", ",", "num_workers", "=", "64", ",", "use_FF", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "try", ":", "\n", "            ", "if", "isinstance", "(", "gen", ",", "torch", ".", "utils", ".", "data", ".", "Subset", ")", ":", "assert", "gen", ".", "dataset", ".", "transform", "is", "None", "\n", "else", ":", "assert", "gen", ".", "transform", "is", "None", "\n", "if", "isinstance", "(", "ref", ",", "torch", ".", "utils", ".", "data", ".", "Subset", ")", ":", "assert", "ref", ".", "dataset", ".", "transform", "is", "None", "\n", "else", ":", "assert", "ref", ".", "transform", "is", "None", "\n", "", "except", "AssertionError", ":", "\n", "            ", "assert", "False", ",", "'Please use datasets without transforms for the sake of performance. '", "\n", "", "except", "AttributeError", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "gen", "=", "gen", "\n", "self", ".", "ref", "=", "ref", "\n", "self", ".", "sample", "=", "get_standard_transforms", "(", "order", "=", "3", ")", "(", "self", ".", "ref", "[", "0", "]", ")", "\n", "smiles", "=", "self", ".", "sample", "[", "'smiles'", "]", "\n", "for", "data", "in", "tqdm", "(", "gen", ",", "desc", "=", "'Check-GEN'", ")", ":", "assert", "data", "[", "'smiles'", "]", "==", "smiles", "\n", "for", "data", "in", "tqdm", "(", "ref", ",", "desc", "=", "'Check-REF'", ")", ":", "assert", "data", "[", "'smiles'", "]", "==", "smiles", "\n", "\n", "# Compute distances", "\n", "edge_index", "=", "self", ".", "sample", ".", "edge_index", "\n", "node_type", "=", "self", ".", "sample", ".", "node_type", "\n", "gen_lengths", "=", "[", "]", "\n", "ref_lengths", "=", "[", "]", "\n", "for", "data", "in", "tqdm", "(", "self", ".", "gen", ",", "desc", "=", "'Length-GEN'", ")", ":", "\n", "            ", "gen_lengths", ".", "append", "(", "(", "data", ".", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "data", ".", "pos", "[", "edge_index", "[", "1", "]", "]", ")", ".", "norm", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "for", "data", "in", "tqdm", "(", "self", ".", "ref", ",", "desc", "=", "'Length-REF'", ")", ":", "\n", "            ", "ref_lengths", ".", "append", "(", "(", "data", ".", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "data", ".", "pos", "[", "edge_index", "[", "1", "]", "]", ")", ".", "norm", "(", "dim", "=", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "gen_lengths", "=", "torch", ".", "FloatTensor", "(", "gen_lengths", ")", "\n", "ref_lengths", "=", "torch", ".", "FloatTensor", "(", "ref_lengths", ")", "\n", "self", ".", "gen_lengths", "=", "gen_lengths", "\n", "self", ".", "ref_lengths", "=", "ref_lengths", "\n", "\n", "self", ".", "rms_mat", "=", "None", "\n", "self", ".", "rmsd_mat", "=", "None", "\n", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "use_FF", "=", "use_FF", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.precompute_rms_rmsd": [[72, 108], ["numpy.zeros", "numpy.zeros", "enumerate", "tqdm.auto.tqdm.auto.tqdm", "multiprocessing.Pool", "enumerate", "tqdm.auto.tqdm.auto.tqdm.close", "multiprocessing.Pool.close", "enumerate", "len", "tqdm.auto.tqdm.auto.tqdm.update", "rmsd_tasks.append", "task.wait", "len", "len", "len", "len", "print", "rdkit.Chem.rdForceFieldHelpers.MMFFOptimizeMolecule", "rmsd_args.append", "range", "len", "len", "multiprocessing.Pool.apply_async", "len"], "methods", ["None"], ["", "def", "precompute_rms_rmsd", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "rms_mat", "is", "not", "None", "and", "self", ".", "rmsd_mat", "is", "not", "None", ":", "\n", "            ", "return", "\n", "# Compute pairwise RMS/RMSD", "\n", "", "num_workers", "=", "self", ".", "num_workers", "\n", "self", ".", "rms_mat", "=", "np", ".", "zeros", "(", "[", "len", "(", "self", ".", "gen", ")", ",", "len", "(", "self", ".", "ref", ")", "]", ")", "\n", "self", ".", "rmsd_mat", "=", "np", ".", "zeros", "(", "[", "len", "(", "self", ".", "gen", ")", ",", "len", "(", "self", ".", "ref", ")", "]", ")", "\n", "rmsd_args", "=", "[", "]", "\n", "for", "i_gen", ",", "data_gen", "in", "enumerate", "(", "self", ".", "gen", ")", ":", "\n", "            ", "gen_rdmol", "=", "data_gen", ".", "rdmol", "\n", "if", "self", ".", "use_FF", ":", "\n", "                ", "print", "(", "'Applying FF on generated molecules...'", ")", "\n", "MMFFOptimizeMolecule", "(", "gen_rdmol", ")", "\n", "", "for", "i_ref", ",", "data_ref", "in", "enumerate", "(", "self", ".", "ref", ")", ":", "\n", "\n", "                ", "rmsd_args", ".", "append", "(", "(", "(", "i_gen", ",", "i_ref", ")", ",", "gen_rdmol", ",", "data_ref", ".", "rdmol", ")", ")", "\n", "\n", "# Multi-processing", "\n", "", "", "chunk_size", "=", "len", "(", "rmsd_args", ")", "//", "num_workers", "\n", "if", "chunk_size", "==", "0", ":", "\n", "            ", "chunk_size", "=", "1", "\n", "", "chunks", "=", "[", "rmsd_args", "[", "x", ":", "x", "+", "chunk_size", "]", "for", "x", "in", "range", "(", "0", ",", "len", "(", "rmsd_args", ")", ",", "chunk_size", ")", "]", "\n", "rmsd_tasks", "=", "[", "]", "\n", "rmsd_pbar", "=", "tqdm", "(", "total", "=", "len", "(", "rmsd_args", ")", ")", "\n", "rmsd_pool", "=", "mp", ".", "Pool", "(", "processes", "=", "num_workers", ")", "\n", "def", "pool_callback", "(", "retval", ")", ":", "\n", "            ", "for", "idx", ",", "rms", ",", "rmsd", "in", "retval", ":", "\n", "                ", "self", ".", "rms_mat", "[", "idx", "]", "=", "rms", "\n", "self", ".", "rmsd_mat", "[", "idx", "]", "=", "rmsd", "\n", "", "rmsd_pbar", ".", "update", "(", "len", "(", "retval", ")", ")", "\n", "", "for", "i", ",", "chunk", "in", "enumerate", "(", "chunks", ")", ":", "\n", "            ", "rmsd_tasks", ".", "append", "(", "rmsd_pool", ".", "apply_async", "(", "compute_pair_rmsds", ",", "(", "chunk", ",", "i", ")", ",", "callback", "=", "pool_callback", ")", ")", "\n", "", "for", "task", "in", "rmsd_tasks", ":", "\n", "            ", "task", ".", "wait", "(", ")", "\n", "", "rmsd_pbar", ".", "close", "(", ")", "\n", "rmsd_pool", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.single_dist_distrib": [[110, 133], ["evaluation.Evaluator.gen_lengths.cuda", "evaluation.Evaluator.ref_lengths.cuda", "enumerate", "tqdm.auto.tqdm.auto.tqdm", "metrics.compute_mmd().item", "stats.append", "edge_index.t", "metrics.compute_mmd", "gen_l.cpu", "ref_l.cpu", "node_type[].item", "node_type[].item", "gen_l.view", "ref_l.view", "row.item", "col.item", "chem.get_atom_symbol", "chem.get_atom_symbol", "node_type[].item", "node_type[].item"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.compute_mmd", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol"], ["", "def", "single_dist_distrib", "(", "self", ",", "ignore_H", "=", "True", ")", ":", "\n", "        ", "edge_index", "=", "self", ".", "sample", ".", "edge_index", "\n", "node_type", "=", "self", ".", "sample", ".", "node_type", "\n", "gen_lengths", "=", "self", ".", "gen_lengths", ".", "cuda", "(", ")", "\n", "ref_lengths", "=", "self", ".", "ref_lengths", ".", "cuda", "(", ")", "\n", "\n", "stats", "=", "[", "]", "\n", "for", "i", ",", "(", "row", ",", "col", ")", "in", "enumerate", "(", "tqdm", "(", "edge_index", ".", "t", "(", ")", ")", ")", ":", "\n", "            ", "if", "row", ">=", "col", ":", "continue", "\n", "if", "ignore_H", "and", "1", "in", "(", "node_type", "[", "row", "]", ".", "item", "(", ")", ",", "node_type", "[", "col", "]", ".", "item", "(", ")", ")", ":", "continue", "\n", "gen_l", "=", "gen_lengths", "[", ":", ",", "i", "]", "\n", "ref_l", "=", "ref_lengths", "[", ":", ",", "i", "]", "\n", "mmd", "=", "compute_mmd", "(", "gen_l", ".", "view", "(", "-", "1", ",", "1", ")", ",", "ref_l", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "item", "(", ")", "\n", "stats", ".", "append", "(", "{", "\n", "'edge_id'", ":", "i", ",", "\n", "'elems'", ":", "'%s - %s'", "%", "(", "get_atom_symbol", "(", "node_type", "[", "row", "]", ".", "item", "(", ")", ")", ",", "get_atom_symbol", "(", "node_type", "[", "col", "]", ".", "item", "(", ")", ")", ")", ",", "\n", "'nodes'", ":", "(", "row", ".", "item", "(", ")", ",", "col", ".", "item", "(", ")", ")", ",", "\n", "'gen_lengths'", ":", "gen_l", ".", "cpu", "(", ")", ",", "\n", "'ref_lengths'", ":", "ref_l", ".", "cpu", "(", ")", ",", "\n", "'mmd'", ":", "mmd", "\n", "}", ")", "\n", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.pair_dist_distrib": [[134, 167], ["evaluation.Evaluator.gen_lengths.cuda", "evaluation.Evaluator.ref_lengths.cuda", "enumerate", "tqdm.auto.tqdm.auto.tqdm", "enumerate", "edge_index.t", "edge_index.t", "metrics.compute_mmd().item", "stats.append", "node_type[].item", "node_type[].item", "metrics.compute_mmd", "gen_L.cpu", "ref_L.cpu", "node_type[].item", "node_type[].item", "gen_L.cuda", "ref_L.cuda", "row_i.item", "col_i.item", "row_j.item", "col_j.item", "chem.get_atom_symbol", "chem.get_atom_symbol", "chem.get_atom_symbol", "chem.get_atom_symbol", "node_type[].item", "node_type[].item", "node_type[].item", "node_type[].item"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.compute_mmd", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.get_atom_symbol"], ["", "def", "pair_dist_distrib", "(", "self", ",", "ignore_H", "=", "True", ")", ":", "\n", "        ", "edge_index", "=", "self", ".", "sample", ".", "edge_index", "\n", "node_type", "=", "self", ".", "sample", ".", "node_type", "\n", "gen_lengths", "=", "self", ".", "gen_lengths", ".", "cuda", "(", ")", "\n", "ref_lengths", "=", "self", ".", "ref_lengths", ".", "cuda", "(", ")", "\n", "\n", "stats", "=", "[", "]", "\n", "for", "i", ",", "(", "row_i", ",", "col_i", ")", "in", "enumerate", "(", "tqdm", "(", "edge_index", ".", "t", "(", ")", ")", ")", ":", "\n", "            ", "if", "row_i", ">=", "col_i", ":", "continue", "\n", "if", "ignore_H", "and", "1", "in", "(", "node_type", "[", "row_i", "]", ".", "item", "(", ")", ",", "node_type", "[", "col_i", "]", ".", "item", "(", ")", ")", ":", "continue", "\n", "for", "j", ",", "(", "row_j", ",", "col_j", ")", "in", "enumerate", "(", "edge_index", ".", "t", "(", ")", ")", ":", "\n", "                ", "if", "(", "row_i", ">=", "row_j", ")", "or", "(", "row_j", ">=", "col_j", ")", ":", "continue", "\n", "if", "ignore_H", "and", "1", "in", "(", "node_type", "[", "row_j", "]", ".", "item", "(", ")", ",", "node_type", "[", "col_j", "]", ".", "item", "(", ")", ")", ":", "continue", "\n", "\n", "gen_L", "=", "gen_lengths", "[", ":", ",", "(", "i", ",", "j", ")", "]", "# (N, 2)", "\n", "ref_L", "=", "ref_lengths", "[", ":", ",", "(", "i", ",", "j", ")", "]", "# (M, 2)", "\n", "mmd", "=", "compute_mmd", "(", "gen_L", ".", "cuda", "(", ")", ",", "ref_L", ".", "cuda", "(", ")", ")", ".", "item", "(", ")", "\n", "\n", "stats", ".", "append", "(", "{", "\n", "'edge_id'", ":", "(", "i", ",", "j", ")", ",", "\n", "'elems'", ":", "(", "\n", "'%s - %s'", "%", "(", "get_atom_symbol", "(", "node_type", "[", "row_i", "]", ".", "item", "(", ")", ")", ",", "get_atom_symbol", "(", "node_type", "[", "col_i", "]", ".", "item", "(", ")", ")", ")", ",", "\n", "'%s - %s'", "%", "(", "get_atom_symbol", "(", "node_type", "[", "row_j", "]", ".", "item", "(", ")", ")", ",", "get_atom_symbol", "(", "node_type", "[", "col_j", "]", ".", "item", "(", ")", ")", ")", ",", "\n", ")", ",", "\n", "'nodes'", ":", "(", "\n", "(", "row_i", ".", "item", "(", ")", ",", "col_i", ".", "item", "(", ")", ")", ",", "\n", "(", "row_j", ".", "item", "(", ")", ",", "col_j", ".", "item", "(", ")", ")", ",", "\n", ")", ",", "\n", "'gen_lengths'", ":", "gen_L", ".", "cpu", "(", ")", ",", "\n", "'ref_lengths'", ":", "ref_L", ".", "cpu", "(", ")", ",", "\n", "'mmd'", ":", "mmd", "\n", "}", ")", "\n", "", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.all_dist_distrib": [[168, 188], ["evaluation.Evaluator.gen_lengths.cuda", "evaluation.Evaluator.ref_lengths.cuda", "metrics.compute_mmd().item", "enumerate", "gen_L.cpu", "ref_L.cpu", "edge_index.t", "metrics.compute_mmd", "gen_L.cuda", "ref_L.cuda", "node_type[].item", "node_type[].item"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.compute_mmd"], ["", "def", "all_dist_distrib", "(", "self", ",", "ignore_H", "=", "True", ")", ":", "\n", "        ", "edge_index", "=", "self", ".", "sample", ".", "edge_index", "\n", "node_type", "=", "self", ".", "sample", ".", "node_type", "\n", "gen_lengths", "=", "self", ".", "gen_lengths", ".", "cuda", "(", ")", "\n", "ref_lengths", "=", "self", ".", "ref_lengths", ".", "cuda", "(", ")", "\n", "\n", "edge_filter", "=", "edge_index", "[", "0", "]", "<", "edge_index", "[", "1", "]", "\n", "if", "ignore_H", ":", "\n", "            ", "for", "i", ",", "(", "row", ",", "col", ")", "in", "enumerate", "(", "edge_index", ".", "t", "(", ")", ")", ":", "\n", "                ", "if", "1", "in", "(", "node_type", "[", "row", "]", ".", "item", "(", ")", ",", "node_type", "[", "col", "]", ".", "item", "(", ")", ")", ":", "\n", "                    ", "edge_filter", "[", "i", "]", "=", "False", "\n", "\n", "", "", "", "gen_L", "=", "gen_lengths", "[", ":", ",", "edge_filter", "]", "# (N, Ef)", "\n", "ref_L", "=", "ref_lengths", "[", ":", ",", "edge_filter", "]", "# (M, Ef)", "\n", "mmd", "=", "compute_mmd", "(", "gen_L", ".", "cuda", "(", ")", ",", "ref_L", ".", "cuda", "(", ")", ")", ".", "item", "(", ")", "\n", "\n", "return", "{", "\n", "'gen_lengths'", ":", "gen_L", ".", "cpu", "(", ")", ",", "\n", "'ref_lengths'", ":", "ref_L", ".", "cpu", "(", ")", ",", "\n", "'mmd'", ":", "mmd", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.min_match_dist": [[190, 202], ["evaluation.Evaluator.precompute_rms_rmsd", "tqdm.auto.tqdm.auto.tqdm", "range", "range", "mm_rms.append", "mm_rmsd.append", "len", "float", "float", "len", "min", "min"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.precompute_rms_rmsd"], ["", "def", "min_match_dist", "(", "self", ")", ":", "\n", "        ", "self", ".", "precompute_rms_rmsd", "(", ")", "\n", "mm_rms", ",", "mm_rmsd", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i_ref", "in", "tqdm", "(", "range", "(", "len", "(", "self", ".", "ref", ")", ")", ")", ":", "\n", "            ", "min_rms", ",", "min_rmsd", "=", "float", "(", "\"inf\"", ")", ",", "float", "(", "\"inf\"", ")", "\n", "for", "i_gen", "in", "range", "(", "len", "(", "self", ".", "gen", ")", ")", ":", "\n", "                ", "min_rms", "=", "min", "(", "min_rms", ",", "self", ".", "rms_mat", "[", "(", "i_gen", ",", "i_ref", ")", "]", ")", "\n", "min_rmsd", "=", "min", "(", "min_rmsd", ",", "self", ".", "rmsd_mat", "[", "(", "i_gen", ",", "i_ref", ")", "]", ")", "\n", "", "mm_rms", ".", "append", "(", "min_rms", ")", "\n", "mm_rmsd", ".", "append", "(", "min_rmsd", ")", "\n", "", "return", "mm_rms", ",", "mm_rmsd", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.coverage": [[204, 224], ["evaluation.Evaluator.precompute_rms_rmsd", "set", "set", "range", "len", "range", "set.add", "set.add", "len", "len", "len", "len", "float", "float", "len"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.precompute_rms_rmsd"], ["", "def", "coverage", "(", "self", ")", ":", "\n", "        ", "self", ".", "precompute_rms_rmsd", "(", ")", "\n", "covered_rms", "=", "set", "(", ")", "\n", "covered_rmsd", "=", "set", "(", ")", "\n", "\n", "for", "i_gen", "in", "range", "(", "len", "(", "self", ".", "gen", ")", ")", ":", "\n", "            ", "min_rms", ",", "min_rmsd", "=", "float", "(", "\"inf\"", ")", ",", "float", "(", "\"inf\"", ")", "\n", "min_rms_id", ",", "min_rmsd_id", "=", "-", "1", ",", "-", "1", "\n", "for", "i_ref", "in", "range", "(", "len", "(", "self", ".", "ref", ")", ")", ":", "\n", "                ", "rms", ",", "rmsd", "=", "self", ".", "rms_mat", "[", "(", "i_gen", ",", "i_ref", ")", "]", ",", "self", ".", "rmsd_mat", "[", "(", "i_gen", ",", "i_ref", ")", "]", "\n", "if", "rms", "<", "min_rms", ":", "\n", "                    ", "min_rms", ",", "min_rms_id", "=", "rms", ",", "i_ref", "\n", "", "if", "rmsd", "<", "min_rmsd", ":", "\n", "                    ", "min_rmsd", ",", "min_rmsd_id", "=", "rmsd", ",", "i_ref", "\n", "", "", "covered_rms", ".", "add", "(", "min_rms_id", ")", "\n", "covered_rmsd", ".", "add", "(", "min_rmsd_id", ")", "\n", "\n", "", "cov_rms", "=", "len", "(", "covered_rms", ")", "/", "len", "(", "self", ".", "ref", ")", "\n", "cov_rmsd", "=", "len", "(", "covered_rmsd", ")", "/", "len", "(", "self", ".", "ref", ")", "\n", "return", "cov_rms", ",", "cov_rmsd", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.one_nna": [[225, 227], ["None"], "methods", ["None"], ["", "def", "one_nna", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.__init__": [[231, 258], ["object.__init__", "misc.split_dataset_by_smiles", "misc.split_dataset_by_smiles", "sum", "logger.info", "logger.info", "range", "logger.info", "len", "min", "subset_new.append", "evaluation.EvaluationSession.gen_grouped.items", "len", "len", "len", "int", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.split_dataset_by_smiles", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.split_dataset_by_smiles"], ["    ", "def", "__init__", "(", "self", ",", "gen_dset", ",", "ref_dset", ",", "out_dir", ",", "logger", ",", "ignore_H", "=", "True", ",", "eval_match", "=", "True", ",", "gen_limit", "=", "0", ",", "use_FF", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gen_dset", "=", "gen_dset", "\n", "self", ".", "ref_dset", "=", "ref_dset", "\n", "self", ".", "out_dir", "=", "out_dir", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "ignore_H", "=", "ignore_H", "\n", "self", ".", "eval_match", "=", "eval_match", "\n", "self", ".", "use_FF", "=", "use_FF", "\n", "\n", "self", ".", "ref_grouped", "=", "split_dataset_by_smiles", "(", "ref_dset", ")", "\n", "self", ".", "gen_grouped", "=", "split_dataset_by_smiles", "(", "gen_dset", ")", "\n", "if", "gen_limit", "<", "0", ":", "\n", "            ", "gen_mult", "=", "-", "1", "*", "gen_limit", "\n", "for", "smiles", "in", "self", ".", "gen_grouped", ":", "\n", "                ", "subset_new", "=", "[", "]", "\n", "if", "smiles", "not", "in", "self", ".", "ref_grouped", ":", "\n", "                    ", "continue", "\n", "", "for", "i", "in", "range", "(", "min", "(", "int", "(", "gen_mult", "*", "len", "(", "self", ".", "ref_grouped", "[", "smiles", "]", ")", ")", ",", "len", "(", "self", ".", "gen_grouped", "[", "smiles", "]", ")", ")", ")", ":", "\n", "                    ", "subset_new", ".", "append", "(", "self", ".", "gen_grouped", "[", "smiles", "]", "[", "i", "]", ")", "\n", "", "logger", ".", "info", "(", "'Truncate: %d -> %d'", "%", "(", "len", "(", "self", ".", "gen_grouped", "[", "smiles", "]", ")", ",", "len", "(", "subset_new", ")", ")", ")", "\n", "self", ".", "gen_grouped", "[", "smiles", "]", "=", "subset_new", "\n", "\n", "", "", "count_gen_conf", "=", "sum", "(", "[", "len", "(", "g", ")", "for", "_", ",", "g", "in", "self", ".", "gen_grouped", ".", "items", "(", ")", "]", ")", "\n", "\n", "logger", ".", "info", "(", "'Ref %d items | Gen %d items'", "%", "(", "len", "(", "self", ".", "ref_dset", ")", ",", "count_gen_conf", ")", ")", "\n", "logger", ".", "info", "(", "'Ref %d mols | Gen %d mols'", "%", "(", "len", "(", "self", ".", "ref_grouped", ")", ",", "len", "(", "self", ".", "gen_grouped", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats": [[259, 263], ["evaluation.EvaluationSession.logger.info", "tuple", "f"], "methods", ["None"], ["", "def", "print_stats", "(", "self", ",", "title", ",", "data", ")", ":", "\n", "        ", "stat_funcs", "=", "(", "np", ".", "mean", ",", "np", ".", "median", ",", "np", ".", "min", ",", "np", ".", "max", ")", "\n", "self", ".", "logger", ".", "info", "(", "'['", "+", "title", "+", "'] Mean %.4f | Median %.4f | Min %.4f | Max %.4f'", "%", "tuple", "(", "[", "\n", "f", "(", "data", ")", "for", "f", "in", "stat_funcs", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.run": [[265, 380], ["logger.info", "tqdm.auto.tqdm.auto.tqdm", "os.path.join", "logger.info", "logger.info", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "gen_grouped.items", "evaluation.Evaluator", "evaluation.Evaluator.single_dist_distrib", "evaluation.Evaluator.pair_dist_distrib", "evaluation.Evaluator.all_dist_distrib", "a_mmd_all.append", "print", "pandas.DataFrame", "open", "pickle.dump", "logger.info", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "evaluation.EvaluationSession.print_stats", "logger.warning", "evaluation.Evaluator.coverage", "evaluation.Evaluator.min_match_dist", "len", "len", "cov_all.append", "match_dist_all.append", "logger.info", "numpy.linspace", "logger.info", "logger.info", "Evaluator.rmsd_mat.min", "numpy.min", "numpy.mean", "numpy.median", "len", "repr", "repr", "numpy.median", "numpy.mean", "numpy.min", "numpy.max", "pandas.DataFrame.mean", "pandas.DataFrame.median", "Evaluator.rmsd_mat.min"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.single_dist_distrib", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.pair_dist_distrib", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.all_dist_distrib", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.EvaluationSession.print_stats", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.coverage", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.Evaluator.min_match_dist"], ["", "def", "run", "(", "self", ")", ":", "\n", "# shortcuts", "\n", "        ", "logger", "=", "self", ".", "logger", "\n", "gen_grouped", "=", "self", ".", "gen_grouped", "\n", "ref_grouped", "=", "self", ".", "ref_grouped", "\n", "\n", "logger", ".", "info", "(", "'Start eval...'", ")", "\n", "s_mmd_all", ",", "p_mmd_all", ",", "a_mmd_all", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "cov_all", ",", "match_dist_all", "=", "[", "]", ",", "[", "]", "\n", "results", "=", "{", "}", "\n", "\n", "i", "=", "0", "\n", "\n", "all_cov_thr", "=", "{", "}", "\n", "\n", "for", "smiles", ",", "gen_mols", "in", "tqdm", "(", "gen_grouped", ".", "items", "(", ")", ",", "'All'", ")", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "smiles", "not", "in", "ref_grouped", ":", "\n", "                ", "logger", ".", "warning", "(", "'Molecule not found in refset: %s'", "%", "smiles", ")", "\n", "continue", "\n", "", "ref_mols", "=", "ref_grouped", "[", "smiles", "]", "\n", "\n", "evaluator", "=", "Evaluator", "(", "gen_mols", ",", "ref_mols", ",", "use_FF", "=", "self", ".", "use_FF", ")", "\n", "s_dist", "=", "evaluator", ".", "single_dist_distrib", "(", "ignore_H", "=", "self", ".", "ignore_H", ")", "\n", "p_dist", "=", "evaluator", ".", "pair_dist_distrib", "(", "ignore_H", "=", "self", ".", "ignore_H", ")", "\n", "a_dist", "=", "evaluator", ".", "all_dist_distrib", "(", "ignore_H", "=", "self", ".", "ignore_H", ")", "\n", "s_mmd", "=", "[", "e", "[", "'mmd'", "]", "for", "e", "in", "s_dist", "]", "\n", "p_mmd", "=", "[", "e", "[", "'mmd'", "]", "for", "e", "in", "p_dist", "]", "\n", "a_mmd", "=", "a_dist", "[", "'mmd'", "]", "\n", "\n", "s_mmd_all", "+=", "s_mmd", "\n", "p_mmd_all", "+=", "p_mmd", "\n", "a_mmd_all", ".", "append", "(", "a_mmd", ")", "\n", "\n", "result", "=", "{", "\n", "'s_dist'", ":", "s_dist", ",", "\n", "'p_dist'", ":", "p_dist", ",", "\n", "'a_dist'", ":", "a_dist", ",", "\n", "'s_mmd'", ":", "s_mmd", ",", "\n", "'p_mmd'", ":", "p_mmd", ",", "\n", "'a_mmd'", ":", "a_mmd", ",", "\n", "}", "\n", "\n", "if", "self", ".", "eval_match", ":", "\n", "                ", "cov", "=", "evaluator", ".", "coverage", "(", ")", "\n", "match_dist", "=", "evaluator", ".", "min_match_dist", "(", ")", "\n", "result", "[", "'coverage'", "]", "=", "cov", "\n", "result", "[", "'match_dist'", "]", "=", "match_dist", "\n", "result", "[", "'pairwise_rmsd'", "]", "=", "evaluator", ".", "rmsd_mat", "\n", "result", "[", "'N_sample'", "]", "=", "len", "(", "gen_mols", ")", "\n", "result", "[", "'N_ref'", "]", "=", "len", "(", "ref_mols", ")", "\n", "cov_all", ".", "append", "(", "cov", "[", "0", "]", ")", "\n", "match_dist_all", ".", "append", "(", "match_dist", "[", "0", "]", ")", "\n", "logger", ".", "info", "(", "'[Match1] (%d) Coverage %.4f | Match(Median) %.4f | Match(Mean) %.4f | Match(Min) %.4f | Match(Max) %.4f'", "%", "(", "\n", "i", ",", "cov", "[", "0", "]", ",", "np", ".", "median", "(", "match_dist", "[", "0", "]", ")", ",", "np", ".", "mean", "(", "match_dist", "[", "0", "]", ")", ",", "np", ".", "min", "(", "match_dist", "[", "0", "]", ")", ",", "np", ".", "max", "(", "match_dist", "[", "0", "]", ")", "\n", ")", ")", "\n", "# logger.info('[Match2] Coverage %.4f | Match(Median) %.4f | Match(Mean) %.4f | Match(Min) %.4f' % (", "\n", "#     cov[1], np.median(match_dist[1]), np.mean(match_dist[1]), np.min(match_dist[1])", "\n", "# ))", "\n", "\n", "# Coverage with thresholds", "\n", "cur_cov_thr", "=", "{", "}", "\n", "for", "thr", "in", "np", ".", "linspace", "(", "0", ",", "2", ",", "41", ")", ":", "\n", "                    ", "rmsd_mat_min", "=", "evaluator", ".", "rmsd_mat", ".", "min", "(", "axis", "=", "0", ")", "\n", "assert", "rmsd_mat_min", ".", "shape", "[", "0", "]", "==", "len", "(", "ref_mols", ")", "\n", "cur_cov_thr", "[", "thr", "]", "=", "(", "evaluator", ".", "rmsd_mat", ".", "min", "(", "axis", "=", "0", ")", "<", "thr", ")", ".", "mean", "(", ")", "\n", "", "all_cov_thr", "[", "smiles", "]", "=", "cur_cov_thr", "\n", "\n", "", "results", "[", "smiles", "]", "=", "result", "\n", "\n", "", "if", "self", ".", "eval_match", ":", "\n", "            ", "print", "(", "all_cov_thr", ")", "\n", "all_cov_thr_pd", "=", "pd", ".", "DataFrame", "(", "all_cov_thr", ")", "\n", "", "else", ":", "\n", "            ", "all_cov_thr_pd", "=", "None", "\n", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "'report.pkl'", ")", "\n", "logger", ".", "info", "(", "'Saving results to %s'", "%", "save_path", ")", "\n", "report", "=", "{", "\n", "'s_mmd_all'", ":", "s_mmd_all", ",", "\n", "'p_mmd_all'", ":", "p_mmd_all", ",", "\n", "'a_mmd_all'", ":", "a_mmd_all", ",", "\n", "'cov_all'", ":", "cov_all", ",", "\n", "'match_dist_all'", ":", "match_dist_all", ",", "\n", "'mols'", ":", "results", ",", "\n", "'all_cov_thr'", ":", "all_cov_thr_pd", ",", "\n", "}", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "report", ",", "f", ")", "\n", "\n", "", "logger", ".", "info", "(", "'%s SUMMARY %s'", "%", "(", "'='", "*", "10", ",", "'='", "*", "10", ")", ")", "\n", "# logger.info('[Median] s_dist %.4f | p_dist %.4f | a_dist %.4f' % (", "\n", "#     np.median(s_mmd_all), np.median(p_mmd_all), np.median(a_mmd_all),", "\n", "# ))", "\n", "self", ".", "print_stats", "(", "'SingleDist'", ",", "s_mmd_all", ")", "\n", "self", ".", "print_stats", "(", "'PairDist'", ",", "p_mmd_all", ")", "\n", "self", ".", "print_stats", "(", "'AllDist'", ",", "a_mmd_all", ")", "\n", "\n", "aggr_match_dist", "=", "[", "]", "\n", "for", "d", "in", "report", "[", "'match_dist_all'", "]", ":", "\n", "            ", "aggr_match_dist", "+=", "d", "\n", "", "if", "self", ".", "eval_match", ":", "\n", "            ", "logger", ".", "info", "(", "'%s Coverage / Match %s'", "%", "(", "'-'", "*", "10", ",", "'-'", "*", "10", ")", ")", "\n", "self", ".", "print_stats", "(", "'Coverage'", ",", "report", "[", "'cov_all'", "]", ")", "\n", "self", ".", "print_stats", "(", "'MinMatchDist(Aggr)'", ",", "aggr_match_dist", ")", "\n", "self", ".", "print_stats", "(", "'MinMatchDist(Min)'", ",", "[", "np", ".", "min", "(", "d", ")", "for", "d", "in", "report", "[", "'match_dist_all'", "]", "]", ")", "\n", "self", ".", "print_stats", "(", "'MinMatchDist(Mean)'", ",", "[", "np", ".", "mean", "(", "d", ")", "for", "d", "in", "report", "[", "'match_dist_all'", "]", "]", ")", "\n", "self", ".", "print_stats", "(", "'MinMatchDist(Median)'", ",", "[", "np", ".", "median", "(", "d", ")", "for", "d", "in", "report", "[", "'match_dist_all'", "]", "]", ")", "\n", "self", ".", "print_stats", "(", "'SingleMMD'", ",", "report", "[", "'s_mmd_all'", "]", ")", "\n", "self", ".", "print_stats", "(", "'PairMMD'", ",", "report", "[", "'p_mmd_all'", "]", ")", "\n", "self", ".", "print_stats", "(", "'AllMMD'", ",", "report", "[", "'a_mmd_all'", "]", ")", "\n", "\n", "if", "all_cov_thr_pd", "is", "not", "None", ":", "\n", "                ", "logger", ".", "info", "(", "'CovThr Mean'", "+", "repr", "(", "all_cov_thr_pd", ".", "mean", "(", "axis", "=", "1", ")", ")", ")", "\n", "logger", ".", "info", "(", "'CovThr Median'", "+", "repr", "(", "all_cov_thr_pd", ".", "median", "(", "axis", "=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.evaluation.compute_pair_rmsds": [[17, 29], ["tqdm.auto.tqdm", "rmsd.GetBestRMSD", "rets.append", "rmsd.GetBestRMSD", "rets.append"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.GetBestRMSD", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.eval.GetBestRMSD"], ["def", "compute_pair_rmsds", "(", "args", ",", "worker_id", ")", ":", "\n", "    ", "rets", "=", "[", "]", "\n", "# print('Chunk size: %d | %s' % (len(args), repr(args[0])))", "\n", "if", "worker_id", "==", "0", ":", "\n", "        ", "for", "idx", ",", "probe", ",", "ref", "in", "tqdm", "(", "args", ",", "desc", "=", "'Worker#0'", ")", ":", "\n", "            ", "rms", ",", "rmsd", "=", "GetBestRMSD", "(", "probe", ",", "ref", ")", "\n", "rets", ".", "append", "(", "(", "idx", ",", "rms", ",", "rmsd", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "idx", ",", "probe", ",", "ref", "in", "args", ":", "\n", "            ", "rms", ",", "rmsd", "=", "GetBestRMSD", "(", "probe", ",", "ref", ")", "\n", "rets", ".", "append", "(", "(", "idx", ",", "rms", ",", "rmsd", ")", ")", "\n", "", "", "return", "rets", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.energy.GEOMDataset.__init__": [[9, 24], ["Dataset.__init__", "os.path.splitext", "energy.GEOMDataset.process", "energy.GEOMDataset.load_processed", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.energy.GEOMDataset.process", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.load_processed"], ["    ", "def", "__init__", "(", "self", ",", "raw_path", ",", "force_reload", "=", "False", ",", "transform", "=", "None", ",", "size_limit", "=", "100000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "raw_path", "=", "raw_path", "\n", "self", ".", "processed_path", "=", "raw_path", "+", "'.processed'", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "size_limit", "=", "size_limit", "\n", "\n", "_", ",", "extname", "=", "os", ".", "path", ".", "splitext", "(", "raw_path", ")", "\n", "assert", "extname", "==", "'.pkl'", ",", "'Only .pkl files are supported.'", "\n", "\n", "self", ".", "dataset", "=", "None", "\n", "if", "force_reload", "or", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "processed_path", ")", ":", "\n", "            ", "self", ".", "process", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "load_processed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.energy.GEOMDataset.load_processed": [[25, 29], ["torch.load"], "methods", ["None"], ["", "", "def", "load_processed", "(", "self", ")", ":", "\n", "        ", "saved", "=", "torch", ".", "load", "(", "self", ".", "processed_path", ")", "\n", "self", ".", "dataset", "=", "saved", "[", "'dataset'", "]", "\n", "self", ".", "stats", "=", "saved", "[", "'stats'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.energy.GEOMDataset.process": [[30, 77], ["tqdm", "torch.save", "open", "pickle.load", "lowesteners.append", "ensembleeners.append", "random.Random().shuffle", "molecule.rdmol_to_data", "labels.items", "energy.GEOMDataset.dataset.append", "energies.append", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "torch.FloatTensor", "random.Random"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.save", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.rdmol_to_data"], ["", "def", "process", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "raw_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "mols_db", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# Statistics buffer", "\n", "", "energies", "=", "[", "]", "\n", "lowesteners", "=", "[", "]", "\n", "ensembleeners", "=", "[", "]", "\n", "\n", "for", "mol_meta", "in", "tqdm", "(", "mols_db", ")", ":", "\n", "            ", "for", "conf_meta", "in", "mol_meta", "[", "'conformers'", "]", ":", "\n", "                ", "data", "=", "rdmol_to_data", "(", "conf_meta", "[", "'rd_mol'", "]", ")", "\n", "labels", "=", "{", "\n", "'ensembleenergy'", ":", "mol_meta", "[", "'ensembleenergy'", "]", ",", "\n", "'ensembleentropy'", ":", "mol_meta", "[", "'ensembleentropy'", "]", ",", "\n", "'ensemblefreeenergy'", ":", "mol_meta", "[", "'ensemblefreeenergy'", "]", ",", "\n", "'lowestenergy'", ":", "mol_meta", "[", "'lowestenergy'", "]", ",", "\n", "'totalenergy'", ":", "conf_meta", "[", "'totalenergy'", "]", ",", "\n", "'degeneracy'", ":", "conf_meta", "[", "'degeneracy'", "]", ",", "\n", "'relativeenergy'", ":", "conf_meta", "[", "'relativeenergy'", "]", ",", "\n", "'boltzmannweight'", ":", "conf_meta", "[", "'boltzmannweight'", "]", ",", "\n", "'conformerweight'", ":", "conf_meta", "[", "'conformerweights'", "]", "[", "0", "]", ",", "\n", "}", "\n", "for", "k", ",", "v", "in", "labels", ".", "items", "(", ")", ":", "\n", "                    ", "data", "[", "k", "]", "=", "torch", ".", "FloatTensor", "(", "[", "v", "]", ")", "\n", "", "self", ".", "dataset", ".", "append", "(", "data", ")", "\n", "energies", ".", "append", "(", "conf_meta", "[", "'totalenergy'", "]", ")", "\n", "# end for", "\n", "", "lowesteners", ".", "append", "(", "mol_meta", "[", "'lowestenergy'", "]", ")", "\n", "ensembleeners", ".", "append", "(", "mol_meta", "[", "'ensembleenergy'", "]", ")", "\n", "\n", "", "if", "self", ".", "size_limit", ">", "0", ":", "\n", "            ", "random", ".", "Random", "(", "2020", ")", ".", "shuffle", "(", "self", ".", "dataset", ")", "\n", "self", ".", "dataset", "=", "self", ".", "dataset", "[", ":", "self", ".", "size_limit", "]", "\n", "\n", "# Compute statistics", "\n", "", "self", ".", "stats", "=", "{", "\n", "'totalenergy'", ":", "{", "'mean'", ":", "np", ".", "mean", "(", "energies", ")", ",", "'std'", ":", "np", ".", "std", "(", "energies", ")", "}", ",", "\n", "'lowestenergy'", ":", "{", "'mean'", ":", "np", ".", "mean", "(", "lowesteners", ")", ",", "'std'", ":", "np", ".", "std", "(", "lowesteners", ")", "}", ",", "\n", "'ensembleenergy'", ":", "{", "'mean'", ":", "np", ".", "mean", "(", "ensembleeners", ")", ",", "'std'", ":", "np", ".", "std", "(", "ensembleeners", ")", "}", ",", "\n", "}", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'dataset'", ":", "self", ".", "dataset", ",", "\n", "'stats'", ":", "self", ".", "stats", "\n", "}", ",", "self", ".", "processed_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.energy.GEOMDataset.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.energy.GEOMDataset.__getitem__": [[81, 86], ["energy.GEOMDataset.dataset[].clone", "energy.GEOMDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "dataset", "[", "idx", "]", ".", "clone", "(", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "transform", "(", "data", ")", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.__init__": [[86, 103], ["torch.utils.data.Dataset.__init__", "os.path.splitext", "molecule.MoleculeDataset.load_processed", "os.path.exists", "molecule.MoleculeDataset.process_sdf", "molecule.MoleculeDataset.process_pickle"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.load_processed", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.process_sdf", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.process_pickle"], ["    ", "def", "__init__", "(", "self", ",", "raw_path", ",", "force_reload", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "raw_path", "=", "raw_path", "\n", "self", ".", "processed_path", "=", "raw_path", "+", "'.processed'", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "_", ",", "extname", "=", "os", ".", "path", ".", "splitext", "(", "raw_path", ")", "\n", "assert", "extname", "in", "(", "'.sdf'", ",", "'.pkl'", ")", ",", "'Only supports .sdf and .pkl files'", "\n", "\n", "self", ".", "dataset", "=", "None", "\n", "if", "force_reload", "or", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "processed_path", ")", ":", "\n", "            ", "if", "extname", "==", "'.sdf'", ":", "\n", "                ", "self", ".", "process_sdf", "(", ")", "\n", "", "elif", "extname", "==", "'.pkl'", ":", "\n", "                ", "self", ".", "process_pickle", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "load_processed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.load_processed": [[104, 106], ["torch.load"], "methods", ["None"], ["", "", "def", "load_processed", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "torch", ".", "load", "(", "self", ".", "processed_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.process_sdf": [[107, 116], ["rdkit.Chem.SDMolSupplier", "tqdm.auto.tqdm.auto.tqdm", "torch.save", "molecule.enumerate_conformers", "molecule.MoleculeDataset.dataset.append", "molecule.rdmol_to_data"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.save", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.enumerate_conformers", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.rdmol_to_data"], ["", "def", "process_sdf", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "[", "]", "\n", "suppl", "=", "Chem", ".", "SDMolSupplier", "(", "self", ".", "raw_path", ",", "removeHs", "=", "False", ",", "sanitize", "=", "True", ")", "\n", "for", "mol", "in", "tqdm", "(", "suppl", ")", ":", "\n", "            ", "if", "mol", "is", "None", ":", "\n", "                ", "continue", "\n", "", "for", "conf", "in", "enumerate_conformers", "(", "mol", ")", ":", "\n", "                ", "self", ".", "dataset", ".", "append", "(", "rdmol_to_data", "(", "conf", ")", ")", "\n", "", "", "torch", ".", "save", "(", "self", ".", "dataset", ",", "self", ".", "processed_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.process_pickle": [[117, 125], ["open", "pickle.load", "tqdm.auto.tqdm.auto.tqdm", "torch.save", "molecule.enumerate_conformers", "molecule.MoleculeDataset.dataset.append", "molecule.rdmol_to_data"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.misc.CheckpointManager.save", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.enumerate_conformers", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.rdmol_to_data"], ["", "def", "process_pickle", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "raw_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "mols", "=", "pickle", ".", "load", "(", "f", ")", "\n", "for", "mol", "in", "tqdm", "(", "mols", ")", ":", "\n", "                ", "for", "conf", "in", "enumerate_conformers", "(", "mol", ")", ":", "\n", "                    ", "self", ".", "dataset", ".", "append", "(", "rdmol_to_data", "(", "conf", ")", ")", "\n", "", "", "torch", ".", "save", "(", "self", ".", "dataset", ",", "self", ".", "processed_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.__len__": [[126, 128], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.MoleculeDataset.__getitem__": [[129, 134], ["molecule.MoleculeDataset.dataset[].clone", "molecule.MoleculeDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "dataset", "[", "idx", "]", ".", "clone", "(", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "transform", "(", "data", ")", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.rdmol_to_data": [[20, 67], ["mol.GetNumAtoms", "torch.tensor", "mol.GetAtoms", "torch.tensor", "mol.GetBonds", "torch.tensor", "torch.tensor", "torch_scatter.scatter().tolist", "rdkit.Chem.MolToSmiles", "torch_geometric.data.Data", "torch_geometric.utils.to_networkx", "mol.GetNumConformers", "mol.GetConformer().GetPositions", "atomic_number.append", "aromatic.append", "atom.GetHybridization", "sp.append", "sp2.append", "sp3.append", "atom.GetAtomicNum", "bond.GetBeginAtomIdx", "bond.GetEndAtomIdx", "torch_scatter.scatter", "copy.deepcopy", "mol.GetConformer", "atom.GetIsAromatic", "bond.GetBondType"], "function", ["None"], ["def", "rdmol_to_data", "(", "mol", ":", "Mol", ")", ":", "\n", "    ", "assert", "mol", ".", "GetNumConformers", "(", ")", "==", "1", "\n", "N", "=", "mol", ".", "GetNumAtoms", "(", ")", "\n", "\n", "pos", "=", "torch", ".", "tensor", "(", "mol", ".", "GetConformer", "(", "0", ")", ".", "GetPositions", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "atomic_number", "=", "[", "]", "\n", "aromatic", "=", "[", "]", "\n", "sp", "=", "[", "]", "\n", "sp2", "=", "[", "]", "\n", "sp3", "=", "[", "]", "\n", "num_hs", "=", "[", "]", "\n", "for", "atom", "in", "mol", ".", "GetAtoms", "(", ")", ":", "\n", "        ", "atomic_number", ".", "append", "(", "atom", ".", "GetAtomicNum", "(", ")", ")", "\n", "aromatic", ".", "append", "(", "1", "if", "atom", ".", "GetIsAromatic", "(", ")", "else", "0", ")", "\n", "hybridization", "=", "atom", ".", "GetHybridization", "(", ")", "\n", "sp", ".", "append", "(", "1", "if", "hybridization", "==", "HybridizationType", ".", "SP", "else", "0", ")", "\n", "sp2", ".", "append", "(", "1", "if", "hybridization", "==", "HybridizationType", ".", "SP2", "else", "0", ")", "\n", "sp3", ".", "append", "(", "1", "if", "hybridization", "==", "HybridizationType", ".", "SP3", "else", "0", ")", "\n", "\n", "", "z", "=", "torch", ".", "tensor", "(", "atomic_number", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "row", ",", "col", ",", "edge_type", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bond", "in", "mol", ".", "GetBonds", "(", ")", ":", "\n", "        ", "start", ",", "end", "=", "bond", ".", "GetBeginAtomIdx", "(", ")", ",", "bond", ".", "GetEndAtomIdx", "(", ")", "\n", "row", "+=", "[", "start", ",", "end", "]", "\n", "col", "+=", "[", "end", ",", "start", "]", "\n", "edge_type", "+=", "2", "*", "[", "BOND_TYPES", "[", "bond", ".", "GetBondType", "(", ")", "]", "]", "\n", "\n", "", "edge_index", "=", "torch", ".", "tensor", "(", "[", "row", ",", "col", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "edge_type", "=", "torch", ".", "tensor", "(", "edge_type", ")", "\n", "\n", "perm", "=", "(", "edge_index", "[", "0", "]", "*", "N", "+", "edge_index", "[", "1", "]", ")", ".", "argsort", "(", ")", "\n", "edge_index", "=", "edge_index", "[", ":", ",", "perm", "]", "\n", "edge_type", "=", "edge_type", "[", "perm", "]", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "hs", "=", "(", "z", "==", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "num_hs", "=", "scatter", "(", "hs", "[", "row", "]", ",", "col", ",", "dim_size", "=", "N", ")", ".", "tolist", "(", ")", "\n", "\n", "smiles", "=", "Chem", ".", "MolToSmiles", "(", "mol", ")", "\n", "\n", "data", "=", "Data", "(", "node_type", "=", "z", ",", "pos", "=", "pos", ",", "edge_index", "=", "edge_index", ",", "edge_type", "=", "edge_type", ",", "\n", "rdmol", "=", "copy", ".", "deepcopy", "(", "mol", ")", ",", "smiles", "=", "smiles", ")", "\n", "data", ".", "nx", "=", "to_networkx", "(", "data", ",", "to_undirected", "=", "True", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.datasets.molecule.enumerate_conformers": [[69, 82], ["mol.GetNumConformers", "copy.deepcopy", "copy.deepcopy.RemoveAllConformers", "tqdm.auto.tqdm", "range", "mol.GetConformer", "mol.GetConformer.SetId", "copy.deepcopy", "copy.deepcopy.AddConformer"], "function", ["None"], ["", "def", "enumerate_conformers", "(", "mol", ")", ":", "\n", "    ", "num_confs", "=", "mol", ".", "GetNumConformers", "(", ")", "\n", "if", "num_confs", "==", "1", ":", "\n", "        ", "yield", "mol", "\n", "return", "\n", "", "mol_templ", "=", "copy", ".", "deepcopy", "(", "mol", ")", "\n", "mol_templ", ".", "RemoveAllConformers", "(", ")", "\n", "for", "conf_id", "in", "tqdm", "(", "range", "(", "num_confs", ")", ",", "desc", "=", "'Conformer'", ")", ":", "\n", "        ", "conf", "=", "mol", ".", "GetConformer", "(", "conf_id", ")", "\n", "conf", ".", "SetId", "(", "0", ")", "\n", "mol_conf", "=", "copy", ".", "deepcopy", "(", "mol_templ", ")", "\n", "conf_id", "=", "mol_conf", ".", "AddConformer", "(", "conf", ")", "\n", "yield", "mol_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.EdgeCNF.__init__": [[45, 53], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "edgecnf.build_flow"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.build_flow"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "node_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "100", ",", "args", ".", "hidden_dim", ")", "\n", "self", ".", "edge_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "100", ",", "args", ".", "hidden_dim", ")", "\n", "self", ".", "flow", "=", "build_flow", "(", "\n", "args", ",", "\n", "hidden_dim", "=", "args", ".", "hidden_dim", ",", "\n", "num_blocks", "=", "args", ".", "num_blocks", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.EdgeCNF.get_d": [[55, 66], ["edgecnf.EdgeCNF.node_emb", "edgecnf.EdgeCNF.node_emb", "edgecnf.EdgeCNF.flow"], "methods", ["None"], ["", "def", "get_d", "(", "self", ",", "data", ",", "z", ")", ":", "\n", "        ", "node_attr", "=", "self", ".", "node_emb", "(", "data", ".", "node_type", ")", "\n", "edge_attr", "=", "self", ".", "node_emb", "(", "data", ".", "edge_type", ")", "\n", "d", "=", "self", ".", "flow", "(", "\n", "z", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "edge_index", "=", "data", ".", "edge_index", ",", "\n", "reverse", "=", "True", ",", "\n", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.EdgeCNF.get_z": [[67, 78], ["edgecnf.EdgeCNF.node_emb", "edgecnf.EdgeCNF.node_emb", "edgecnf.EdgeCNF.flow"], "methods", ["None"], ["", "def", "get_z", "(", "self", ",", "data", ",", "d", ")", ":", "\n", "        ", "node_attr", "=", "self", ".", "node_emb", "(", "data", ".", "node_type", ")", "\n", "edge_attr", "=", "self", ".", "node_emb", "(", "data", ".", "edge_type", ")", "\n", "z", "=", "self", ".", "flow", "(", "\n", "d", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "edge_index", "=", "data", ".", "edge_index", ",", "\n", "reverse", "=", "False", "\n", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.EdgeCNF.get_log_prob": [[79, 91], ["d.size", "edgecnf.EdgeCNF.flow", "common.standard_normal_logprob().view().sum", "edgecnf.EdgeCNF.node_emb", "edgecnf.EdgeCNF.node_emb", "torch.zeros().to", "common.standard_normal_logprob().view", "torch.zeros", "common.standard_normal_logprob"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.standard_normal_logprob"], ["", "def", "get_log_prob", "(", "self", ",", "data", ",", "d", ")", ":", "\n", "        ", "E", "=", "d", ".", "size", "(", "0", ")", "\n", "z", ",", "delta_logpz", "=", "self", ".", "flow", "(", "\n", "x", "=", "d", ",", "\n", "node_attr", "=", "self", ".", "node_emb", "(", "data", ".", "node_type", ")", ",", "\n", "edge_attr", "=", "self", ".", "node_emb", "(", "data", ".", "edge_type", ")", ",", "\n", "edge_index", "=", "data", ".", "edge_index", ",", "\n", "logpx", "=", "torch", ".", "zeros", "(", "E", ",", "1", ")", ".", "to", "(", "d", ")", "\n", ")", "\n", "log_pz", "=", "standard_normal_logprob", "(", "z", ")", ".", "view", "(", "E", ",", "-", "1", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "log_pd", "=", "log_pz", "-", "delta_logpz", "\n", "return", "log_pd", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.EdgeCNF.get_loss": [[92, 96], ["edgecnf.EdgeCNF.get_log_prob", "edgecnf.EdgeCNF.mean"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_log_prob"], ["", "def", "get_loss", "(", "self", ",", "data", ",", "d", ")", ":", "\n", "        ", "log_pd", "=", "self", ".", "get_log_prob", "(", "data", ",", "d", ")", "\n", "loss", "=", "-", "log_pd", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.EdgeCNF.sample": [[97, 118], ["data.edge_index.size", "edgecnf.EdgeCNF.node_emb", "edgecnf.EdgeCNF.node_emb", "torch.randn().to", "range", "torch.cat", "edgecnf.EdgeCNF.flow", "samples.reshape().t.reshape().t.reshape().t", "torch.cat.append", "torch.randn", "edgecnf.EdgeCNF.repeat", "edgecnf.EdgeCNF.repeat", "samples.reshape().t.reshape().t.reshape"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "data", ",", "num_samples", ")", ":", "\n", "        ", "E", "=", "data", ".", "edge_index", ".", "size", "(", "1", ")", "\n", "node_attr", "=", "self", ".", "node_emb", "(", "data", ".", "node_type", ")", "\n", "edge_attr", "=", "self", ".", "node_emb", "(", "data", ".", "edge_type", ")", "\n", "z", "=", "torch", ".", "randn", "(", "num_samples", "*", "E", ",", "1", ")", ".", "to", "(", "edge_attr", ")", "\n", "\n", "edge_index_rep", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "            ", "edge_index_rep", ".", "append", "(", "data", ".", "edge_index", "+", "data", ".", "num_nodes", "*", "i", ")", "\n", "", "edge_index_rep", "=", "torch", ".", "cat", "(", "edge_index_rep", ",", "dim", "=", "1", ")", "\n", "\n", "samples", "=", "self", ".", "flow", "(", "\n", "z", ",", "\n", "node_attr", "=", "node_attr", ".", "repeat", "(", "num_samples", ",", "1", ")", ",", "\n", "edge_attr", "=", "edge_attr", ".", "repeat", "(", "num_samples", ",", "1", ")", ",", "\n", "edge_index", "=", "edge_index_rep", ",", "\n", "reverse", "=", "True", "\n", ")", "\n", "\n", "samples", "=", "samples", ".", "reshape", "(", "-", "1", ",", "E", ")", ".", "t", "(", ")", "# (E, num_samples)", "\n", "return", "samples", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.build_flow": [[11, 41], ["cnf_edge.SequentialFlow", "cnf_edge.ODEgnn", "cnf_edge.ODEfunc", "cnf_edge.CNF", "edgecnf.build_flow.build_cnf"], "function", ["None"], ["def", "build_flow", "(", "args", ",", "hidden_dim", ",", "num_blocks", ")", ":", "\n", "    ", "def", "build_cnf", "(", ")", ":", "\n", "        ", "diffeq", "=", "ODEgnn", "(", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", ")", "\n", "odefunc", "=", "ODEfunc", "(", "\n", "diffeq", "=", "diffeq", ",", "\n", ")", "\n", "cnf", "=", "CNF", "(", "\n", "odefunc", "=", "odefunc", ",", "\n", "T", "=", "args", ".", "time_length", ",", "\n", "train_T", "=", "args", ".", "train_T", ",", "\n", "solver", "=", "args", ".", "solver", ",", "\n", "use_adjoint", "=", "args", ".", "use_adjoint", ",", "\n", "atol", "=", "args", ".", "atol", ",", "\n", "rtol", "=", "args", ".", "rtol", ",", "\n", ")", "\n", "return", "cnf", "\n", "\n", "", "chain", "=", "[", "build_cnf", "(", ")", "for", "_", "in", "range", "(", "num_blocks", ")", "]", "\n", "if", "args", ".", "batch_norm", ":", "\n", "        ", "bn_layers", "=", "[", "MovingBatchNorm1d", "(", "1", ",", "bn_lag", "=", "args", ".", "bn_lag", ",", "sync", "=", "args", ".", "sync_bn", ")", "\n", "for", "_", "in", "range", "(", "num_blocks", ")", "]", "\n", "bn_chain", "=", "[", "MovingBatchNorm1d", "(", "1", ",", "bn_lag", "=", "args", ".", "bn_lag", ",", "sync", "=", "args", ".", "sync_bn", ")", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "chain", ",", "bn_layers", ")", ":", "\n", "            ", "bn_chain", ".", "append", "(", "a", ")", "\n", "bn_chain", ".", "append", "(", "b", ")", "\n", "", "chain", "=", "bn_chain", "\n", "", "model", "=", "SequentialFlow", "(", "chain", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.pos_to_z": [[120, 126], ["torch.no_grad", "model.eval", "torch.norm", "model.get_z"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_z"], ["", "", "def", "pos_to_z", "(", "model", ",", "data", ",", "pos", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "d", "=", "torch", ".", "norm", "(", "pos", "[", "data", ".", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "data", ".", "edge_index", "[", "1", "]", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "z", "=", "model", ".", "get_z", "(", "data", ",", "d", ")", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.regularize_z": [[128, 142], ["distgeom.Embed3D", "embedder", "edgecnf.pos_to_z", "torch.norm", "torch.no_grad", "model.eval", "model.get_d", "torch.randn_like"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.pos_to_z", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_d"], ["", "def", "regularize_z", "(", "model", ":", "EdgeCNF", ",", "data", ",", "z", ",", "embedder", "=", "Embed3D", "(", ")", ",", "dg_init_pos", "=", "None", ")", ":", "\n", "# Z -> {d}", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "d_raw", "=", "model", ".", "get_d", "(", "data", ",", "z", ")", "\n", "\n", "# Embed {d} via distance geometries", "\n", "", "if", "dg_init_pos", "is", "None", ":", "\n", "        ", "dg_init_pos", "=", "torch", ".", "randn_like", "(", "data", ".", "pos", ")", "\n", "", "pos", ",", "loss", "=", "embedder", "(", "d_raw", ",", "data", ".", "edge_index", ",", "dg_init_pos", ",", "data", ".", "edge_order", ")", "\n", "\n", "z_reg", "=", "pos_to_z", "(", "model", ",", "data", ",", "pos", ")", "\n", "d_reg", "=", "torch", ".", "norm", "(", "pos", "[", "data", ".", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "data", ".", "edge_index", "[", "1", "]", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "z_reg", ",", "d_reg", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.generate_conf": [[144, 146], ["edgecnf.generate_conf_mcmc_step"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.generate_conf_mcmc_step"], ["", "def", "generate_conf", "(", "model", ":", "EdgeCNF", ",", "data", ",", "z", "=", "None", ",", "dg_init_pos", "=", "None", ",", "dg_step_size", "=", "None", ",", "dg_num_steps", "=", "None", ")", ":", "\n", "    ", "return", "generate_conf_mcmc_step", "(", "model", ",", "data", ",", "z", ",", "dg_init_pos", ",", "dg_step_size", ",", "dg_num_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.generate_negative_conf": [[148, 169], ["distgeom.Embed3D", "embedder", "torch.randn_like", "torch.randn_like.dim", "torch.no_grad", "model.eval", "model.get_d", "torch.randn_like", "torch.no_grad", "model.eval", "torch.norm"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_d"], ["", "def", "generate_negative_conf", "(", "model", ":", "EdgeCNF", ",", "data", ",", "z", "=", "None", ",", "embedder", "=", "Embed3D", "(", ")", ",", "dg_init_pos", "=", "None", ")", ":", "\n", "    ", "if", "z", "is", "None", ":", "\n", "        ", "z", "=", "torch", ".", "randn_like", "(", "data", ".", "edge_length", ")", "\n", "\n", "", "assert", "z", ".", "dim", "(", ")", "==", "2", ",", "'The size of `z` must be (E, 1).'", "\n", "\n", "# Z -> {d}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "d_raw", "=", "model", ".", "get_d", "(", "data", ",", "z", ")", "\n", "\n", "# Embed {d} via distance geometries", "\n", "", "if", "dg_init_pos", "is", "None", ":", "\n", "        ", "dg_init_pos", "=", "torch", ".", "randn_like", "(", "data", ".", "pos", ")", "\n", "", "pos", ",", "loss", "=", "embedder", "(", "d_raw", ",", "data", ".", "edge_index", ",", "dg_init_pos", ",", "data", ".", "edge_order", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "d", "=", "torch", ".", "norm", "(", "pos", "[", "data", ".", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "data", ".", "edge_index", "[", "1", "]", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "return", "d", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.generate_conf_mcmc_step": [[171, 188], ["distgeom.Embed3D", "edgecnf.regularize_z", "z_new.requires_grad_", "model.get_d", "model.get_log_prob", "distgeom.DistanceGeometry.apply", "torch.randn_like", "torch.randn_like.dim"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.regularize_z", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_d", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_log_prob", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.apply"], ["", "def", "generate_conf_mcmc_step", "(", "model", ":", "EdgeCNF", ",", "data", ",", "z", "=", "None", ",", "embedder", "=", "Embed3D", "(", ")", ",", "dg_init_pos", "=", "None", ")", ":", "\n", "    ", "if", "z", "is", "None", ":", "\n", "        ", "z", "=", "torch", ".", "randn_like", "(", "data", ".", "edge_length", ")", "\n", "\n", "", "assert", "z", ".", "dim", "(", ")", "==", "2", ",", "'The size of `z` must be (E, 1).'", "\n", "\n", "# Regularize z", "\n", "z_new", ",", "_", ",", "pos", "=", "regularize_z", "(", "model", ",", "data", ",", "z", ",", "embedder", "=", "embedder", ",", "dg_init_pos", "=", "dg_init_pos", ")", "\n", "\n", "# Redo the forward pass with z_new", "\n", "#   z_new -> d_new -> pos_new (with grads)", "\n", "z_new", ".", "requires_grad_", "(", "True", ")", "\n", "d_new", "=", "model", ".", "get_d", "(", "data", ",", "z_new", ")", "\n", "log_prob", "=", "model", ".", "get_log_prob", "(", "data", ",", "d_new", ")", "\n", "pos_new", "=", "DistanceGeometry", ".", "apply", "(", "d_new", ",", "pos", ",", "data", ".", "edge_index", ")", "\n", "\n", "return", "z_new", ",", "d_new", ",", "pos_new", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.simple_generate_batch": [[190, 227], ["distgeom.Embed3D", "range", "torch.cat", "embedder", "torch.norm().reshape", "d_new.view.view", "pos.view.view", "torch.no_grad", "model.sample", "d.t.t", "torch.cat.append", "range", "torch.cat().to", "torch.randn().to", "dg_init_pos.repeat.repeat", "d.t.view", "data.edge_order.repeat", "len", "copy.deepcopy", "rdkit.Chem.rdDepictor.Compute2DCoords", "dg_init_pos.repeat.append", "torch.norm", "torch.Tensor", "torch.cat", "torch.randn", "copy.deepcopy.GetConformer().GetPositions", "copy.deepcopy.GetConformer"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample"], ["", "def", "simple_generate_batch", "(", "model", ":", "EdgeCNF", ",", "data", ",", "num_samples", ",", "embedder", "=", "Embed3D", "(", ")", ",", "dg_init_pos", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate conformations in batch using only EdgeCNF.\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "d", ",", "_", "=", "model", ".", "sample", "(", "data", ",", "num_samples", ")", "# (E, num_samples)", "\n", "d", "=", "d", ".", "t", "(", ")", "\n", "\n", "", "edge_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "edge_indices", ".", "append", "(", "data", ".", "edge_index", "+", "i", "*", "data", ".", "num_nodes", ")", "\n", "", "edge_indices", "=", "torch", ".", "cat", "(", "edge_indices", ",", "dim", "=", "1", ")", "\n", "\n", "if", "dg_init_pos", "is", "None", ":", "\n", "# dg_init_pos = torch.randn(num_samples*data.num_nodes, 3).to(data.pos)", "\n", "        ", "dg_init_pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ".", "rdmol", ")", ")", ":", "\n", "            ", "mol", "=", "copy", ".", "deepcopy", "(", "data", ".", "rdmol", "[", "i", "]", ")", "\n", "DP", ".", "Compute2DCoords", "(", "mol", ")", "\n", "dg_init_pos", ".", "append", "(", "torch", ".", "Tensor", "(", "mol", ".", "GetConformer", "(", "0", ")", ".", "GetPositions", "(", ")", ")", ")", "\n", "", "dg_init_pos", "=", "torch", ".", "cat", "(", "dg_init_pos", ",", "dim", "=", "0", ")", ".", "to", "(", "data", ".", "pos", ")", "\n", "dg_init_pos", "[", ":", ",", "-", "1", "]", "+=", "torch", ".", "randn", "(", "dg_init_pos", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "data", ".", "pos", ")", "\n", "", "else", ":", "\n", "        ", "dg_init_pos", "=", "dg_init_pos", ".", "repeat", "(", "num_samples", ",", "1", ")", "\n", "\n", "", "pos", ",", "_", "=", "embedder", "(", "\n", "d", ".", "view", "(", "-", "1", ")", ",", "\n", "edge_indices", ",", "\n", "dg_init_pos", ",", "\n", "data", ".", "edge_order", ".", "repeat", "(", "num_samples", ")", ",", "\n", ")", "# (num_samples*N, 3)", "\n", "\n", "d_new", "=", "torch", ".", "norm", "(", "pos", "[", "edge_indices", "[", "0", "]", "]", "-", "pos", "[", "edge_indices", "[", "1", "]", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "num_samples", ",", "-", "1", ")", "\n", "d_new", "=", "d_new", ".", "view", "(", "num_samples", ",", "-", "1", ")", "\n", "pos", "=", "pos", ".", "view", "(", "num_samples", ",", "-", "1", ",", "3", ")", "\n", "\n", "return", "pos", ",", "d_new", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.em_generate_batch": [[228, 289], ["distgeom.Embed3D", "range", "torch.cat", "embedder", "torch.norm().reshape", "d_new.view.view", "pos.view.view", "range", "torch.no_grad", "model.sample", "d.t.t", "torch.cat.append", "range", "torch.cat().to", "torch.randn().to", "dg_init_pos.repeat.repeat", "d.t.view", "data.edge_order.repeat", "embedder", "torch.norm().reshape", "d_new.view.view", "pos.view.view", "len", "copy.deepcopy", "rdkit.Chem.rdDepictor.Compute2DCoords", "dg_init_pos.repeat.append", "torch.norm", "torch.no_grad", "model.encoder", "torch.no_grad", "model.decoder.sample", "d.t.t", "d.t.view", "data.edge_order.repeat", "torch.Tensor", "torch.cat", "torch.randn", "d_new.view.view", "model.reparameterize_gaussian", "torch.norm", "copy.deepcopy.GetConformer().GetPositions", "torch.exp", "copy.deepcopy.GetConformer"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.reparameterize_gaussian"], ["", "def", "em_generate_batch", "(", "model", ":", "EdgeCNF", ",", "data", ",", "num_samples", ",", "embedder", "=", "Embed3D", "(", ")", ",", "dg_init_pos", "=", "None", ",", "em_steps", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Generate conformations in batch using only EdgeCNF.\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "d", ",", "_", "=", "model", ".", "sample", "(", "data", ",", "num_samples", ")", "# (E, num_samples)", "\n", "d", "=", "d", ".", "t", "(", ")", "\n", "\n", "", "edge_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "edge_indices", ".", "append", "(", "data", ".", "edge_index", "+", "i", "*", "data", ".", "num_nodes", ")", "\n", "", "edge_indices", "=", "torch", ".", "cat", "(", "edge_indices", ",", "dim", "=", "1", ")", "\n", "\n", "if", "dg_init_pos", "is", "None", ":", "\n", "# dg_init_pos = torch.randn(num_samples*data.num_nodes, 3).to(data.pos)", "\n", "        ", "dg_init_pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ".", "rdmol", ")", ")", ":", "\n", "            ", "mol", "=", "copy", ".", "deepcopy", "(", "data", ".", "rdmol", "[", "i", "]", ")", "\n", "DP", ".", "Compute2DCoords", "(", "mol", ")", "\n", "dg_init_pos", ".", "append", "(", "torch", ".", "Tensor", "(", "mol", ".", "GetConformer", "(", "0", ")", ".", "GetPositions", "(", ")", ")", ")", "\n", "", "dg_init_pos", "=", "torch", ".", "cat", "(", "dg_init_pos", ",", "dim", "=", "0", ")", ".", "to", "(", "data", ".", "pos", ")", "\n", "dg_init_pos", "[", ":", ",", "-", "1", "]", "+=", "torch", ".", "randn", "(", "dg_init_pos", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "data", ".", "pos", ")", "\n", "", "else", ":", "\n", "        ", "dg_init_pos", "=", "dg_init_pos", ".", "repeat", "(", "num_samples", ",", "1", ")", "\n", "\n", "", "pos", ",", "_", "=", "embedder", "(", "\n", "d", ".", "view", "(", "-", "1", ")", ",", "\n", "edge_indices", ",", "\n", "dg_init_pos", ",", "\n", "data", ".", "edge_order", ".", "repeat", "(", "num_samples", ")", ",", "\n", ")", "# (num_samples*N, 3)", "\n", "\n", "d_new", "=", "torch", ".", "norm", "(", "pos", "[", "edge_indices", "[", "0", "]", "]", "-", "pos", "[", "edge_indices", "[", "1", "]", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "num_samples", ",", "-", "1", ")", "\n", "d_new", "=", "d_new", ".", "view", "(", "num_samples", ",", "-", "1", ")", "\n", "pos", "=", "pos", ".", "view", "(", "num_samples", ",", "-", "1", ",", "3", ")", "\n", "\n", "for", "i", "in", "range", "(", "em_steps", ")", ":", "\n", "# E-Step", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mu_q", ",", "sigma_q", "=", "model", ".", "encoder", "(", "d_new", ".", "view", "(", "-", "1", ",", "1", ")", ",", "data", ".", "node_type", ",", "\n", "data", ".", "edge_type", ",", "data", ".", "edge_index", ",", "\n", "data", ".", "batch", ")", "\n", "# M-Step", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "model", ".", "use_deterministic_encoder", ":", "\n", "                ", "latent", "=", "mu_q", "+", "0", "*", "torch", ".", "exp", "(", "0.5", "*", "sigma_q", ")", "\n", "", "else", ":", "\n", "                ", "latent", "=", "model", ".", "reparameterize_gaussian", "(", "mu_q", ",", "sigma_q", ")", "\n", "", "d", ",", "_", "=", "model", ".", "decoder", ".", "sample", "(", "data", ",", "num_samples", ",", "latent", ")", "\n", "d", "=", "d", ".", "t", "(", ")", "\n", "", "pos", ",", "_", "=", "embedder", "(", "\n", "d", ".", "view", "(", "-", "1", ")", ",", "\n", "edge_indices", ",", "\n", "dg_init_pos", ",", "\n", "data", ".", "edge_order", ".", "repeat", "(", "num_samples", ")", ",", "\n", ")", "# (num_samples*N, 3)", "\n", "d_new", "=", "torch", ".", "norm", "(", "pos", "[", "edge_indices", "[", "0", "]", "]", "-", "pos", "[", "edge_indices", "[", "1", "]", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "num_samples", ",", "-", "1", ")", "\n", "d_new", "=", "d_new", ".", "view", "(", "num_samples", ",", "-", "1", ")", "\n", "pos", "=", "pos", ".", "view", "(", "num_samples", ",", "-", "1", ",", "3", ")", "\n", "\n", "", "return", "pos", ",", "d_new", ",", "d", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.ShiftedSoftplus.forward": [[22, 24], ["common.shifted_softplus"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.shifted_softplus"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "shifted_softplus", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.SimpleMLP.__init__": [[74, 82], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "len", "torch.nn.Linear", "torch.nn.Linear", "layers.append", "common.get_activation_fn", "len"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "dims", ",", "activation", ",", "bias", "=", "True", ",", "last_act", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "dims", "[", "i", "]", ",", "dims", "[", "i", "+", "1", "]", ",", "bias", "=", "bias", ")", ")", "\n", "if", "(", "i", "<", "len", "(", "dims", ")", "-", "1", ")", "or", "last_act", ":", "\n", "                ", "layers", ".", "append", "(", "get_activation_fn", "(", "activation", ",", "module", "=", "True", ")", ")", "\n", "", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.SimpleMLP.forward": [[83, 85], ["common.SimpleMLP.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mlp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.__init__": [[97, 105], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "total_epoch", ",", "after_scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater thant or equal to 1.'", ")", "\n", "", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.get_lr": [[106, 119], ["common.GradualWarmupScheduler.after_scheduler.get_last_lr", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "total_epoch", ":", "\n", "            ", "if", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "not", "self", ".", "finished", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "base_lrs", "=", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "self", ".", "finished", "=", "True", "\n", "", "return", "self", ".", "after_scheduler", ".", "get_last_lr", "(", ")", "\n", "", "return", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "if", "self", ".", "multiplier", "==", "1.0", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "total_epoch", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step_ReduceLROnPlateau": [[120, 133], ["zip", "common.GradualWarmupScheduler.after_scheduler.step", "common.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step"], ["", "", "def", "step_ReduceLROnPlateau", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "if", "epoch", "!=", "0", "else", "1", "# ReduceLROnPlateau is called at the end of epoch, whereas others are called at beginning", "\n", "if", "self", ".", "last_epoch", "<=", "self", ".", "total_epoch", ":", "\n", "            ", "warmup_lr", "=", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "warmup_lr", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step": [[134, 146], ["type", "common.GradualWarmupScheduler.step_ReduceLROnPlateau", "common.GradualWarmupScheduler.after_scheduler.get_last_lr", "super().step", "common.GradualWarmupScheduler.after_scheduler.step", "common.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step_ReduceLROnPlateau", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step"], ["", "", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ",", "metrics", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "after_scheduler", ")", "!=", "ReduceLROnPlateau", ":", "\n", "            ", "if", "self", ".", "finished", "and", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "epoch", "is", "None", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "", "self", ".", "_last_lr", "=", "self", ".", "after_scheduler", ".", "get_last_lr", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "step_ReduceLROnPlateau", "(", "metrics", ",", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.standard_normal_logprob": [[12, 15], ["math.log", "z.pow"], "function", ["None"], ["def", "standard_normal_logprob", "(", "z", ")", ":", "\n", "    ", "logZ", "=", "-", "0.5", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "\n", "return", "logZ", "-", "z", ".", "pow", "(", "2", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.shifted_softplus": [[17, 19], ["torch.softplus", "numpy.log"], "function", ["None"], ["", "def", "shifted_softplus", "(", "x", ")", ":", "\n", "    ", "return", "F", ".", "softplus", "(", "x", ")", "-", "np", ".", "log", "(", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.get_activation_fn": [[26, 46], ["None"], "function", ["None"], ["", "", "def", "get_activation_fn", "(", "fn", ",", "module", "=", "False", ")", ":", "\n", "    ", "mods", "=", "{", "\n", "'relu'", ":", "nn", ".", "ReLU", ",", "\n", "'softplus'", ":", "nn", ".", "Softplus", ",", "\n", "'ssp'", ":", "ShiftedSoftplus", ",", "\n", "'tanh'", ":", "nn", ".", "Tanh", ",", "\n", "'elu'", ":", "nn", ".", "ELU", ",", "\n", "}", "\n", "funcs", "=", "{", "\n", "'relu'", ":", "F", ".", "relu", ",", "\n", "'softplus'", ":", "F", ".", "softplus", ",", "\n", "'ssp'", ":", "shifted_softplus", ",", "\n", "'tanh'", ":", "F", ".", "tanh", ",", "\n", "'elu'", ":", "F", ".", "elu", ",", "\n", "}", "\n", "\n", "if", "module", ":", "\n", "        ", "return", "mods", "[", "fn", "]", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "funcs", "[", "fn", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.radius_bond_graph": [[48, 70], ["pos.size", "torch.sparse.LongTensor", "torch.sparse.LongTensor", "torch_geometric.nn.radius_graph", "torch.sparse.LongTensor", "torch.sparse.LongTensor", "composed_adj.indices", "edge_type.dim", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "composed_adj.indices", "composed_adj.values().long", "torch.ones().long().to", "torch.ones().long().to", "composed_adj.values", "torch.ones().long", "torch.ones().long", "torch.ones", "torch.ones", "torch_geometric.nn.radius_graph.size"], "function", ["None"], ["", "", "def", "radius_bond_graph", "(", "pos", ",", "edge_index", ",", "edge_type", ",", "cutoff", ",", "batch", ",", "unspecified_type_number", "=", "0", ")", ":", "\n", "    ", "assert", "edge_type", ".", "dim", "(", ")", "==", "1", "\n", "N", "=", "pos", ".", "size", "(", "0", ")", "\n", "\n", "bgraph_adj", "=", "torch", ".", "sparse", ".", "LongTensor", "(", "\n", "edge_index", ",", "\n", "edge_type", ",", "\n", "torch", ".", "Size", "(", "[", "N", ",", "N", "]", ")", "\n", ")", "\n", "\n", "rgraph_edge_index", "=", "radius_graph", "(", "pos", ",", "r", "=", "cutoff", ",", "batch", "=", "batch", ")", "# (2, E_r)", "\n", "rgraph_adj", "=", "torch", ".", "sparse", ".", "LongTensor", "(", "\n", "rgraph_edge_index", ",", "\n", "torch", ".", "ones", "(", "rgraph_edge_index", ".", "size", "(", "1", ")", ")", ".", "long", "(", ")", ".", "to", "(", "pos", ".", "device", ")", "*", "unspecified_type_number", ",", "\n", "torch", ".", "Size", "(", "[", "N", ",", "N", "]", ")", "\n", ")", "\n", "\n", "composed_adj", "=", "(", "bgraph_adj", "+", "rgraph_adj", ")", ".", "coalesce", "(", ")", "# Sparse (N, N, T)", "\n", "edge_index", "=", "composed_adj", ".", "indices", "(", ")", "\n", "dist", "=", "(", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "edge_index", "[", "1", "]", "]", ")", ".", "norm", "(", "dim", "=", "-", "1", ")", "\n", "\n", "return", "composed_adj", ".", "indices", "(", ")", ",", "composed_adj", ".", "values", "(", ")", ".", "long", "(", ")", ",", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitEmbed3D.__init__": [[26, 33], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "mu", "=", "0", ",", "step_size", "=", "0.07", ",", "num_steps", "=", "200", ",", "logger", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitEmbed3D.__call__": [[34, 42], ["vae.diff_embed_3D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.diff_embed_3D"], ["", "def", "__call__", "(", "self", ",", "d_target", ",", "edge_index", ",", "init_pos", ",", "edge_order", "=", "None", ")", ":", "\n", "        ", "return", "diff_embed_3D", "(", "\n", "d_target", ",", "edge_index", ",", "init_pos", ",", "edge_order", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "\n", "mu", "=", "self", ".", "mu", ",", "\n", "step_size", "=", "self", ".", "step_size", ",", "\n", "num_steps", "=", "self", ".", "num_steps", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.GConv.__init__": [[91, 100], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "vae.GConv.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", ":", "float", "=", "0.", ",", "train_eps", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "# self.nn = nn", "\n", "self", ".", "initial_eps", "=", "eps", "\n", "if", "train_eps", ":", "\n", "            ", "self", ".", "eps", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'eps'", ",", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.GConv.forward": [[101, 123], ["isinstance", "isinstance", "vae.GConv.propagate", "isinstance", "x[].size", "edge_attr.size", "x[].size", "edge_index.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "edge_attr", ":", "OptTensor", "=", "None", ",", "size", ":", "Size", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "x", ":", "OptPairTensor", "=", "(", "x", ",", "x", ")", "\n", "\n", "# Node and edge feature dimensionalites need to match.", "\n", "", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "            ", "assert", "edge_attr", "is", "not", "None", "\n", "assert", "x", "[", "0", "]", ".", "size", "(", "-", "1", ")", "==", "edge_attr", ".", "size", "(", "-", "1", ")", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "            ", "assert", "x", "[", "0", "]", ".", "size", "(", "-", "1", ")", "==", "edge_index", ".", "size", "(", "-", "1", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor, edge_attr: OptTensor)", "\n", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_attr", "=", "edge_attr", ",", "size", "=", "size", ")", "\n", "\n", "x_r", "=", "x", "[", "1", "]", "\n", "if", "x_r", "is", "not", "None", ":", "\n", "            ", "out", "+=", "(", "1", "+", "self", ".", "eps", ")", "*", "x_r", "\n", "\n", "# return self.nn(t, out)", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.GConv.message": [[124, 126], ["torch.softplus", "torch.softplus"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "edge_attr", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "F", ".", "softplus", "(", "x_j", "+", "edge_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.GNNPrior.__init__": [[130, 151], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "vae.GConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "vae.GConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "vae.GConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "latent_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "F", ".", "softplus", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "\n", "self", ".", "node_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "100", ",", "hidden_dim", ")", "\n", "self", ".", "edge_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "100", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "conv1", "=", "GConv", "(", ")", "\n", "self", ".", "bn_conv1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "self", ".", "conv2", "=", "GConv", "(", ")", "\n", "self", ".", "bn_conv2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "self", ".", "conv3", "=", "GConv", "(", ")", "\n", "self", ".", "bn_conv3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "\n", "self", ".", "out_fc1", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "bn_out1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "self", ".", "out_fc2", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", "//", "2", ")", "\n", "self", ".", "bn_out2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", "//", "2", ")", "\n", "self", ".", "out_fc3", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", "//", "2", ",", "latent_dim", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.GNNPrior.forward": [[153, 173], ["vae.GNNPrior.node_emb", "vae.GNNPrior.edge_emb", "vae.GNNPrior.act", "vae.GNNPrior.act", "vae.GNNPrior.bn_conv3", "torch_scatter.scatter", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vae.GNNPrior.act", "vae.GNNPrior.act", "vae.GNNPrior.out_fc3", "vae.GNNPrior.bn_conv1", "vae.GNNPrior.bn_conv2", "vae.GNNPrior.conv3", "vae.GNNPrior.bn_out1", "vae.GNNPrior.bn_out2", "vae.GNNPrior.conv1", "vae.GNNPrior.conv2", "vae.GNNPrior.out_fc1", "vae.GNNPrior.out_fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node_type", ",", "edge_type", ",", "edge_index", ",", "batch", ")", ":", "\n", "\n", "        ", "node_attr", "=", "self", ".", "node_emb", "(", "node_type", ")", "\n", "edge_attr", "=", "self", ".", "edge_emb", "(", "edge_type", ")", "\n", "\n", "h", "=", "node_attr", "\n", "h", "=", "self", ".", "act", "(", "self", ".", "bn_conv1", "(", "self", ".", "conv1", "(", "h", ",", "edge_index", ",", "edge_attr", ")", ")", ")", "\n", "h", "=", "self", ".", "act", "(", "self", ".", "bn_conv2", "(", "self", ".", "conv2", "(", "h", ",", "edge_index", ",", "edge_attr", ")", ")", ")", "\n", "h", "=", "self", ".", "bn_conv3", "(", "self", ".", "conv3", "(", "h", ",", "edge_index", ",", "edge_attr", ")", ")", "\n", "\n", "h_global", "=", "scatter", "(", "h", ",", "batch", ",", "dim", "=", "0", ",", "reduce", "=", "'sum'", ")", "\n", "node_feat", "=", "torch", ".", "cat", "(", "[", "h", ",", "h_global", "[", "batch", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "node_feat", "=", "self", ".", "act", "(", "self", ".", "bn_out1", "(", "self", ".", "out_fc1", "(", "node_feat", ")", ")", ")", "\n", "node_feat", "=", "self", ".", "act", "(", "self", ".", "bn_out2", "(", "self", ".", "out_fc2", "(", "node_feat", ")", ")", ")", "\n", "out", "=", "self", ".", "out_fc3", "(", "node_feat", ")", "\n", "\n", "mu", "=", "out", "[", ":", ",", ":", "self", ".", "latent_dim", "]", "\n", "sigma", "=", "out", "[", ":", ",", "self", ".", "latent_dim", ":", "]", "\n", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.GNNEncoder.__init__": [[177, 203], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "vae.GConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "vae.GConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "vae.GConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "latent_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "F", ".", "softplus", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "\n", "self", ".", "node_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "100", ",", "hidden_dim", ")", "\n", "self", ".", "edge_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "100", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "d_fc1", "=", "torch", ".", "nn", ".", "Linear", "(", "1", ",", "hidden_dim", ")", "\n", "self", ".", "bn_d1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "self", ".", "d_fc2", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "bn_d2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "\n", "self", ".", "conv1", "=", "GConv", "(", ")", "\n", "self", ".", "bn_conv1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "self", ".", "conv2", "=", "GConv", "(", ")", "\n", "self", ".", "bn_conv2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "self", ".", "conv3", "=", "GConv", "(", ")", "\n", "self", ".", "bn_conv3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "\n", "self", ".", "out_fc1", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "bn_out1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "self", ".", "out_fc2", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", "//", "2", ")", "\n", "self", ".", "bn_out2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", "//", "2", ")", "\n", "self", ".", "out_fc3", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", "//", "2", ",", "latent_dim", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.GNNEncoder.forward": [[205, 229], ["vae.GNNEncoder.node_emb", "vae.GNNEncoder.edge_emb", "vae.GNNEncoder.act", "vae.GNNEncoder.bn_d2", "vae.GNNEncoder.act", "vae.GNNEncoder.act", "vae.GNNEncoder.bn_conv3", "torch_scatter.scatter", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vae.GNNEncoder.act", "vae.GNNEncoder.act", "vae.GNNEncoder.out_fc3", "vae.GNNEncoder.bn_d1", "vae.GNNEncoder.d_fc2", "vae.GNNEncoder.bn_conv1", "vae.GNNEncoder.bn_conv2", "vae.GNNEncoder.conv3", "vae.GNNEncoder.bn_out1", "vae.GNNEncoder.bn_out2", "vae.GNNEncoder.d_fc1", "vae.GNNEncoder.conv1", "vae.GNNEncoder.conv2", "vae.GNNEncoder.out_fc1", "vae.GNNEncoder.out_fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "node_type", ",", "edge_type", ",", "edge_index", ",", "batch", ")", ":", "\n", "\n", "        ", "node_attr", "=", "self", ".", "node_emb", "(", "node_type", ")", "\n", "edge_attr", "=", "self", ".", "edge_emb", "(", "edge_type", ")", "\n", "\n", "d_emb", "=", "self", ".", "act", "(", "self", ".", "bn_d1", "(", "self", ".", "d_fc1", "(", "x", ")", ")", ")", "# Embedings for edge lengths `x`", "\n", "d_emb", "=", "self", ".", "bn_d2", "(", "self", ".", "d_fc2", "(", "d_emb", ")", ")", "\n", "edge_attr", "=", "d_emb", "*", "edge_attr", "\n", "\n", "h", "=", "node_attr", "\n", "h", "=", "self", ".", "act", "(", "self", ".", "bn_conv1", "(", "self", ".", "conv1", "(", "h", ",", "edge_index", ",", "edge_attr", ")", ")", ")", "\n", "h", "=", "self", ".", "act", "(", "self", ".", "bn_conv2", "(", "self", ".", "conv2", "(", "h", ",", "edge_index", ",", "edge_attr", ")", ")", ")", "\n", "h", "=", "self", ".", "bn_conv3", "(", "self", ".", "conv3", "(", "h", ",", "edge_index", ",", "edge_attr", ")", ")", "\n", "\n", "h_global", "=", "scatter", "(", "h", ",", "batch", ",", "dim", "=", "0", ",", "reduce", "=", "'sum'", ")", "\n", "node_feat", "=", "torch", ".", "cat", "(", "[", "h", ",", "h_global", "[", "batch", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "node_feat", "=", "self", ".", "act", "(", "self", ".", "bn_out1", "(", "self", ".", "out_fc1", "(", "node_feat", ")", ")", ")", "\n", "node_feat", "=", "self", ".", "act", "(", "self", ".", "bn_out2", "(", "self", ".", "out_fc2", "(", "node_feat", ")", ")", ")", "\n", "out", "=", "self", ".", "out_fc3", "(", "node_feat", ")", "\n", "\n", "mu", "=", "out", "[", ":", ",", ":", "self", ".", "latent_dim", "]", "\n", "sigma", "=", "out", "[", ":", ",", "self", ".", "latent_dim", ":", "]", "\n", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.__init__": [[265, 276], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "vae.build_flow"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.build_flow"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "latent_emb", "=", "torch", ".", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "args", ".", "latent_dim", ")", "\n", "self", ".", "node_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "100", ",", "args", ".", "hidden_dim", "-", "args", ".", "latent_dim", ")", "\n", "self", ".", "edge_emb", "=", "torch", ".", "nn", ".", "Embedding", "(", "100", ",", "args", ".", "hidden_dim", ")", "\n", "self", ".", "flow", "=", "build_flow", "(", "\n", "args", ",", "\n", "hidden_dim", "=", "args", ".", "hidden_dim", ",", "\n", "num_blocks", "=", "args", ".", "num_blocks", ",", "\n", ")", "\n", "self", ".", "use_deterministic_encoder", "=", "args", ".", "use_deterministic_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.emb": [[277, 281], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "vae.CNFDecoder.edge_emb", "vae.CNFDecoder.latent_emb", "vae.CNFDecoder.node_emb"], "methods", ["None"], ["", "def", "emb", "(", "self", ",", "node_type", ",", "edge_type", ",", "latent", ")", ":", "\n", "        ", "node_attr", "=", "torch", ".", "cat", "(", "[", "self", ".", "latent_emb", "(", "latent", ")", ",", "self", ".", "node_emb", "(", "node_type", ")", "]", ",", "dim", "=", "1", ")", "\n", "edge_attr", "=", "self", ".", "edge_emb", "(", "edge_type", ")", "\n", "return", "node_attr", ",", "edge_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_d": [[282, 292], ["vae.CNFDecoder.emb", "vae.CNFDecoder.flow"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.emb"], ["", "def", "get_d", "(", "self", ",", "data", ",", "z", ",", "latent", ")", ":", "\n", "        ", "node_attr", ",", "edge_attr", "=", "self", ".", "emb", "(", "data", ".", "node_type", ",", "data", ".", "edge_type", ",", "latent", ")", "\n", "d", "=", "self", ".", "flow", "(", "\n", "z", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "edge_index", "=", "data", ".", "edge_index", ",", "\n", "reverse", "=", "True", ",", "\n", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_z": [[293, 303], ["vae.CNFDecoder.emb", "vae.CNFDecoder.flow"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.emb"], ["", "def", "get_z", "(", "self", ",", "data", ",", "d", ",", "latent", ")", ":", "\n", "        ", "node_attr", ",", "edge_attr", "=", "self", ".", "emb", "(", "data", ".", "node_type", ",", "data", ".", "edge_type", ",", "latent", ")", "\n", "z", "=", "self", ".", "flow", "(", "\n", "d", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "edge_index", "=", "data", ".", "edge_index", ",", "\n", "reverse", "=", "False", "\n", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_log_prob": [[304, 317], ["d.size", "vae.CNFDecoder.emb", "vae.CNFDecoder.flow", "common.standard_normal_logprob().view().sum", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "common.standard_normal_logprob().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "common.standard_normal_logprob"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.emb", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.standard_normal_logprob"], ["", "def", "get_log_prob", "(", "self", ",", "data", ",", "d", ",", "latent", ")", ":", "\n", "        ", "E", "=", "d", ".", "size", "(", "0", ")", "\n", "node_attr", ",", "edge_attr", "=", "self", ".", "emb", "(", "data", ".", "node_type", ",", "data", ".", "edge_type", ",", "latent", ")", "\n", "z", ",", "delta_logpz", "=", "self", ".", "flow", "(", "\n", "x", "=", "d", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "edge_index", "=", "data", ".", "edge_index", ",", "\n", "logpx", "=", "torch", ".", "zeros", "(", "E", ",", "1", ")", ".", "to", "(", "d", ")", "\n", ")", "\n", "log_pz", "=", "standard_normal_logprob", "(", "z", ")", ".", "view", "(", "E", ",", "-", "1", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "log_pd", "=", "log_pz", "-", "delta_logpz", "\n", "return", "log_pd", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_loss": [[318, 322], ["vae.CNFDecoder.get_log_prob", "vae.CNFDecoder.mean"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_log_prob"], ["", "def", "get_loss", "(", "self", ",", "data", ",", "d", ",", "latent", ")", ":", "\n", "        ", "log_pd", "=", "self", ".", "get_log_prob", "(", "data", ",", "d", ",", "latent", ")", "\n", "loss", "=", "-", "log_pd", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.sample": [[323, 346], ["data.edge_index.size", "vae.CNFDecoder.emb", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vae.CNFDecoder.flow", "samples.reshape().t.reshape().t.reshape().t", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.cat.append", "torch.cat.append", "node_attr.repeat", "edge_attr.repeat", "samples.reshape().t.reshape().t.reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.emb"], ["", "def", "sample", "(", "self", ",", "data", ",", "num_samples", ",", "latent", ")", ":", "\n", "        ", "E", "=", "data", ".", "edge_index", ".", "size", "(", "1", ")", "\n", "node_attr", ",", "edge_attr", "=", "self", ".", "emb", "(", "data", ".", "node_type", ",", "data", ".", "edge_type", ",", "latent", ")", "\n", "if", "self", ".", "use_deterministic_encoder", ":", "\n", "            ", "z", "=", "torch", ".", "zeros", "(", "num_samples", "*", "E", ",", "1", ")", ".", "to", "(", "edge_attr", ")", "\n", "", "else", ":", "\n", "            ", "z", "=", "torch", ".", "randn", "(", "num_samples", "*", "E", ",", "1", ")", ".", "to", "(", "edge_attr", ")", "\n", "\n", "", "edge_index_rep", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "            ", "edge_index_rep", ".", "append", "(", "data", ".", "edge_index", "+", "data", ".", "num_nodes", "*", "i", ")", "\n", "", "edge_index_rep", "=", "torch", ".", "cat", "(", "edge_index_rep", ",", "dim", "=", "1", ")", "\n", "\n", "samples", "=", "self", ".", "flow", "(", "\n", "z", ",", "\n", "node_attr", "=", "node_attr", ".", "repeat", "(", "num_samples", ",", "1", ")", ",", "\n", "edge_attr", "=", "edge_attr", ".", "repeat", "(", "num_samples", ",", "1", ")", ",", "\n", "edge_index", "=", "edge_index_rep", ",", "\n", "reverse", "=", "True", "\n", ")", "\n", "\n", "samples", "=", "samples", ".", "reshape", "(", "-", "1", ",", "E", ")", ".", "t", "(", ")", "# (E, num_samples)", "\n", "return", "samples", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.__init__": [[350, 362], ["super().__init__", "vae.GNNPrior", "vae.GNNEncoder", "vae.CNFDecoder", "ParallelAlignMol"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ImplicitVAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "use_deterministic_encoder", "=", "args", ".", "use_deterministic_encoder", "\n", "self", ".", "latent_dim", "=", "args", ".", "latent_dim", "\n", "self", ".", "kl_weight", "=", "args", ".", "kl_weight", "\n", "self", ".", "implicit_weight", "=", "args", ".", "implicit_weight", "\n", "self", ".", "prior", "=", "GNNPrior", "(", "args", ".", "hidden_dim", ",", "args", ".", "latent_dim", ")", "\n", "self", ".", "encoder", "=", "GNNEncoder", "(", "args", ".", "hidden_dim", ",", "args", ".", "latent_dim", ")", "\n", "self", ".", "decoder", "=", "CNFDecoder", "(", "args", ")", "\n", "if", "args", ".", "use_implicit_loss", ":", "\n", "            ", "self", ".", "align_mol", "=", "ParallelAlignMol", "(", "num_workers", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.reparameterize_gaussian": [[363, 368], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.exp.size", "torch.exp.size"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "reparameterize_gaussian", "(", "mean", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn", "(", "std", ".", "size", "(", ")", ")", ".", "to", "(", "mean", ")", "\n", "return", "mean", "+", "std", "*", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.get_nll": [[369, 424], ["d.size", "vae.ImplicitVAE.encoder", "vae.ImplicitVAE.prior", "vae.ImplicitVAE.compute_vae_kl", "vae.ImplicitVAE.decoder.get_log_prob", "vae.ImplicitVAE.implicit_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "vae.ImplicitVAE.encoder", "vae.ImplicitVAE.prior", "vae.ImplicitVAE.compute_vae_kl", "vae.ImplicitVAE.decoder.get_log_prob", "vae.ImplicitVAE.reparameterize_gaussian", "vae.ImplicitVAE.reparameterize_gaussian", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.compute_vae_kl", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_log_prob", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.implicit_loss", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.compute_vae_kl", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_log_prob", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.reparameterize_gaussian", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.reparameterize_gaussian"], ["", "def", "get_nll", "(", "self", ",", "data", ",", "d", ",", "use_implicit", "=", "False", ",", "eval", "=", "False", ")", ":", "\n", "        ", "E", "=", "d", ".", "size", "(", "0", ")", "\n", "\n", "if", "eval", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# sigma is logvar", "\n", "# q(z|G,D)", "\n", "                ", "mu_q", ",", "sigma_q", "=", "self", ".", "encoder", "(", "data", ".", "edge_length", ",", "data", ".", "node_type", ",", "\n", "data", ".", "edge_type", ",", "data", ".", "edge_index", ",", "\n", "data", ".", "batch", ")", "\n", "# p(z|G)", "\n", "mu_p", ",", "sigma_p", "=", "self", ".", "prior", "(", "data", ".", "node_type", ",", "data", ".", "edge_type", ",", "\n", "data", ".", "edge_index", ",", "data", ".", "batch", ")", "\n", "# KL Distance", "\n", "loss_kl", "=", "self", ".", "compute_vae_kl", "(", "mu_q", ",", "sigma_q", ",", "mu_p", ",", "sigma_p", ")", "\n", "\n", "# infer latent", "\n", "if", "self", ".", "use_deterministic_encoder", ":", "\n", "                    ", "latent", "=", "mu_q", "+", "0", "*", "torch", ".", "exp", "(", "0.5", "*", "sigma_q", ")", "\n", "", "else", ":", "\n", "                    ", "latent", "=", "self", ".", "reparameterize_gaussian", "(", "mu_q", ",", "sigma_q", ")", "\n", "\n", "# Reconstrcution", "\n", "## p(D|G,z)", "\n", "", "log_pd", "=", "self", ".", "decoder", ".", "get_log_prob", "(", "data", ",", "d", ",", "latent", ")", "\n", "loss_rec_d", "=", "-", "log_pd", "\n", "", "", "else", ":", "\n", "# sigma is logvar", "\n", "# q(z|G,D)", "\n", "            ", "mu_q", ",", "sigma_q", "=", "self", ".", "encoder", "(", "data", ".", "edge_length", ",", "data", ".", "node_type", ",", "\n", "data", ".", "edge_type", ",", "data", ".", "edge_index", ",", "\n", "data", ".", "batch", ")", "\n", "# p(z|G)", "\n", "mu_p", ",", "sigma_p", "=", "self", ".", "prior", "(", "data", ".", "node_type", ",", "data", ".", "edge_type", ",", "\n", "data", ".", "edge_index", ",", "data", ".", "batch", ")", "\n", "# KL Distance", "\n", "loss_kl", "=", "self", ".", "compute_vae_kl", "(", "mu_q", ",", "sigma_q", ",", "mu_p", ",", "sigma_p", ")", "\n", "\n", "# infer latent", "\n", "if", "self", ".", "use_deterministic_encoder", ":", "\n", "                ", "latent", "=", "mu_q", "+", "0", "*", "torch", ".", "exp", "(", "0.5", "*", "sigma_q", ")", "\n", "", "else", ":", "\n", "                ", "latent", "=", "self", ".", "reparameterize_gaussian", "(", "mu_q", ",", "sigma_q", ")", "\n", "\n", "# Reconstrcution", "\n", "## p(D|G,z)", "\n", "", "log_pd", "=", "self", ".", "decoder", ".", "get_log_prob", "(", "data", ",", "d", ",", "latent", ")", "\n", "loss_rec_d", "=", "-", "log_pd", "\n", "## p(X|G,z)", "\n", "", "if", "use_implicit", ":", "\n", "            ", "loss_rec_x", "=", "self", ".", "implicit_loss", "(", "data", ",", "latent", ")", "\n", "", "else", ":", "\n", "            ", "loss_rec_x", "=", "None", "\n", "\n", "", "return", "loss_kl", ",", "loss_rec_d", ",", "loss_rec_x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.compute_vae_kl": [[425, 435], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_vae_kl", "(", "mu_q", ",", "logvar_q", ",", "mu_prior", ",", "logvar_prior", ")", ":", "\n", "        ", "mu1", "=", "mu_q", "\n", "std1", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar_q", ")", "\n", "mu2", "=", "mu_prior", "\n", "std2", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar_prior", ")", "\n", "kl", "=", "-", "0.5", "+", "torch", ".", "log", "(", "std2", "/", "(", "std1", "+", "1e-8", ")", "+", "1e-8", ")", "+", "(", "(", "torch", ".", "pow", "(", "std1", ",", "2", ")", "+", "torch", ".", "pow", "(", "mu1", "-", "mu2", ",", "2", ")", ")", "/", "(", "2", "*", "torch", ".", "pow", "(", "std2", ",", "2", ")", ")", ")", "\n", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.get_loss": [[436, 449], ["vae.ImplicitVAE.get_nll", "loss_rec_d.sum", "loss_kl.sum", "loss_rec_x.sum"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.get_nll"], ["", "def", "get_loss", "(", "self", ",", "data", ",", "d", ",", "use_implicit", "=", "False", ")", ":", "\n", "        ", "loss_kl", ",", "loss_rec_d", ",", "loss_rec_x", "=", "self", ".", "get_nll", "(", "data", ",", "d", ",", "use_implicit", "=", "use_implicit", ")", "\n", "bs", "=", "data", ".", "batch", "[", "-", "1", "]", "+", "1", "\n", "loss_kl", "=", "self", ".", "kl_weight", "*", "loss_kl", ".", "sum", "(", ")", "/", "bs", "\n", "loss_rec_d", "=", "loss_rec_d", ".", "sum", "(", ")", "/", "bs", "\n", "if", "use_implicit", ":", "\n", "            ", "loss_rec_x", "=", "self", ".", "implicit_weight", "*", "loss_rec_x", ".", "sum", "(", ")", "/", "bs", "\n", "", "else", ":", "\n", "            ", "loss_rec_x", "=", "0", "\n", "\n", "", "loss", "=", "loss_kl", "+", "loss_rec_d", "+", "loss_rec_x", "\n", "\n", "return", "loss", ",", "loss_kl", ",", "loss_rec_d", ",", "loss_rec_x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample": [[450, 462], ["vae.ImplicitVAE.prior", "vae.ImplicitVAE.decoder.sample", "vae.ImplicitVAE.reparameterize_gaussian", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.reparameterize_gaussian"], ["", "def", "sample", "(", "self", ",", "data", ",", "num_samples", ")", ":", "\n", "# p(z|G)", "\n", "        ", "mu_p", ",", "sigma_p", "=", "self", ".", "prior", "(", "data", ".", "node_type", ",", "data", ".", "edge_type", ",", "\n", "data", ".", "edge_index", ",", "data", ".", "batch", ")", "\n", "if", "self", ".", "use_deterministic_encoder", ":", "\n", "            ", "latent", "=", "mu_p", "+", "0", "*", "torch", ".", "exp", "(", "0.5", "*", "sigma_p", ")", "\n", "", "else", ":", "\n", "            ", "latent", "=", "self", ".", "reparameterize_gaussian", "(", "mu_p", ",", "sigma_p", ")", "\n", "\n", "", "samples", "=", "self", ".", "decoder", ".", "sample", "(", "data", ",", "num_samples", ",", "latent", ")", "\n", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.implicit_loss": [[463, 477], ["vae.ImplicitVAE.implicit_layer", "range", "vae.ImplicitVAE.align_mol().to", "mols_truth.append", "mols_gen.append", "torch_scatter.scatter_mean", "copy.deepcopy", "set_rdmol_positions", "vae.ImplicitVAE.align_mol", "conf.clone().detach", "conf.clone"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.implicit_layer", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.utils.chem.set_rdmol_positions"], ["", "def", "implicit_loss", "(", "self", ",", "data", ",", "latent", "=", "None", ")", ":", "\n", "        ", "pos", ",", "_", ",", "_", "=", "self", ".", "implicit_layer", "(", "data", ",", "latent", "=", "latent", ")", "\n", "pos", "=", "pos", "[", "0", "]", "\n", "\n", "mols_truth", "=", "[", "]", "\n", "mols_gen", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "num_graphs", ")", ":", "\n", "            ", "mols_truth", ".", "append", "(", "copy", ".", "deepcopy", "(", "data", ".", "rdmol", "[", "i", "]", ")", ")", "\n", "conf", "=", "pos", "[", "data", ".", "batch", "==", "i", "]", "\n", "mols_gen", ".", "append", "(", "set_rdmol_positions", "(", "data", ".", "rdmol", "[", "i", "]", ",", "conf", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", ")", "\n", "", "probe", "=", "self", ".", "align_mol", "(", "mols_truth", ",", "mols_gen", ")", ".", "to", "(", "data", ".", "pos", ")", "# (\\sum_G num_atoms_of_G, 3)", "\n", "loss", "=", "scatter_mean", "(", "(", "(", "probe", "-", "pos", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ",", "data", ".", "batch", ",", "dim", "=", "0", ",", "dim_size", "=", "data", ".", "num_graphs", ")", "**", "(", "0.5", ")", "\n", "# loss = loss.sum()", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.implicit_layer": [[494, 534], ["vae.ImplicitEmbed3D", "d.view.view.view", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedder", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "torch.norm().reshape", "d_new.view.view.view", "pos.view.view.view", "vae.ImplicitVAE.sample", "vae.ImplicitVAE.decoder.sample", "torch.cat.append", "torch.cat.append", "range", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "dg_init_pos.repeat().to.repeat().to.repeat().to", "data.edge_order.repeat", "len", "copy.deepcopy", "rdkit.Chem.rdDepictor.Compute2DCoords", "dg_init_pos.repeat().to.repeat().to.append", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "dg_init_pos.repeat().to.repeat().to.repeat", "copy.deepcopy.GetConformer().GetPositions", "copy.deepcopy.GetConformer"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample"], ["", "def", "implicit_layer", "(", "self", ",", "data", ",", "num_samples", "=", "1", ",", "embedder", "=", "ImplicitEmbed3D", "(", ")", ",", "dg_init_pos", "=", "None", ",", "latent", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Generate conformations in batch with d->pos.\n        \"\"\"", "\n", "# with torch.no_grad():", "\n", "if", "latent", "is", "None", ":", "\n", "            ", "d", ",", "_", "=", "self", ".", "sample", "(", "data", ",", "num_samples", ")", "# (E, num_samples)", "\n", "", "else", ":", "\n", "            ", "d", ",", "_", "=", "self", ".", "decoder", ".", "sample", "(", "data", ",", "num_samples", ",", "latent", ")", "\n", "", "d", "=", "d", ".", "view", "(", "-", "1", ")", "\n", "\n", "edge_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "            ", "edge_indices", ".", "append", "(", "data", ".", "edge_index", "+", "i", "*", "data", ".", "num_nodes", ")", "\n", "", "edge_indices", "=", "torch", ".", "cat", "(", "edge_indices", ",", "dim", "=", "1", ")", "\n", "\n", "if", "dg_init_pos", "is", "None", ":", "\n", "# dg_init_pos = torch.randn(num_samples*data.num_nodes, 3).to(data.pos)", "\n", "            ", "dg_init_pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ".", "rdmol", ")", ")", ":", "\n", "                ", "mol", "=", "copy", ".", "deepcopy", "(", "data", ".", "rdmol", "[", "i", "]", ")", "\n", "DP", ".", "Compute2DCoords", "(", "mol", ")", "\n", "dg_init_pos", ".", "append", "(", "torch", ".", "Tensor", "(", "mol", ".", "GetConformer", "(", "0", ")", ".", "GetPositions", "(", ")", ")", ")", "\n", "", "dg_init_pos", "=", "torch", ".", "cat", "(", "dg_init_pos", ",", "dim", "=", "0", ")", ".", "to", "(", "data", ".", "pos", ")", "\n", "dg_init_pos", "[", ":", ",", "-", "1", "]", "+=", "torch", ".", "randn", "(", "dg_init_pos", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "data", ".", "pos", ")", "\n", "", "else", ":", "\n", "            ", "dg_init_pos", "=", "dg_init_pos", ".", "repeat", "(", "num_samples", ",", "1", ")", ".", "to", "(", "data", ".", "pos", ")", "\n", "\n", "", "pos", ",", "_", "=", "embedder", "(", "\n", "d", ",", "\n", "edge_indices", ",", "\n", "dg_init_pos", ",", "\n", "data", ".", "edge_order", ".", "repeat", "(", "num_samples", ")", ",", "\n", ")", "# (num_samples*N, 3)", "\n", "\n", "d_new", "=", "torch", ".", "norm", "(", "pos", "[", "edge_indices", "[", "0", "]", "]", "-", "pos", "[", "edge_indices", "[", "1", "]", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "num_samples", ",", "-", "1", ")", "\n", "d_new", "=", "d_new", ".", "view", "(", "num_samples", ",", "-", "1", ")", "\n", "pos", "=", "pos", ".", "view", "(", "num_samples", ",", "-", "1", ",", "3", ")", "\n", "\n", "return", "pos", ",", "d_new", ",", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.diff_embed_3D": [[44, 87], ["init_pos.clone().requires_grad_().to", "torch.optim.Adam", "torch.optim.Adam", "range", "torch.clamp_min", "torch.clamp_min", "logger.info", "init_pos.clone().requires_grad_", "pos.add.clone().requires_grad_().to", "torch.norm", "torch.norm", "pos.add.add", "torch.optim.Adam.zero_grad", "torch.norm", "torch.norm", "torch.optim.Adam.step", "loss.detach", "d_target.size", "edge_order.view().float", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.randn_like", "torch.randn_like", "init_pos.clone", "pos.add.clone().requires_grad_", "loss.item", "d_target.size", "edge_order.view", "pos.add.clone"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step"], ["", "", "def", "diff_embed_3D", "(", "d_target", ",", "edge_index", ",", "init_pos", ",", "edge_order", "=", "None", ",", "alpha", "=", "0.5", ",", "mu", "=", "0", ",", "step_size", "=", "None", ",", "num_steps", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "assert", "torch", ".", "is_grad_enabled", ",", "'`embed_3D` requires gradients'", "\n", "step_size", "=", "10.0", "if", "step_size", "is", "None", "else", "step_size", "\n", "num_steps", "=", "200", "if", "num_steps", "is", "None", "else", "num_steps", "\n", "\n", "# d_target = d_target.view(-1)", "\n", "# pos = init_pos.clone().requires_grad_(True)", "\n", "# optimizer = torch.optim.SGD([pos], lr=step_size)", "\n", "\n", "if", "edge_order", "is", "not", "None", ":", "\n", "        ", "coef", "=", "alpha", "**", "(", "edge_order", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "coef", "=", "1.0", "\n", "\n", "", "if", "mu", ">", "0", ":", "\n", "        ", "noise", "=", "torch", ".", "randn_like", "(", "coef", ")", "*", "coef", "*", "mu", "+", "coef", "\n", "coef", "=", "torch", ".", "clamp_min", "(", "coef", "+", "noise", ",", "min", "=", "0", ")", "\n", "\n", "", "pos", "=", "init_pos", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "to", "(", "d_target", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "pos", "]", ",", "lr", "=", "step_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "if", "i", ">=", "num_steps", "-", "1", ":", "\n", "# optimizer.zero_grad()", "\n", "            ", "pos_old", "=", "pos", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "to", "(", "d_target", ")", "\n", "d_old", "=", "torch", ".", "norm", "(", "pos_old", "[", "edge_index", "[", "0", "]", "]", "-", "pos_old", "[", "edge_index", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "coef", "*", "(", "(", "d_target", "-", "d_old", ")", "**", "2", ")", ")", ".", "mean", "(", ")", "\n", "# loss.backward()", "\n", "pos_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "pos_old", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "# pos.grad = pos_grad", "\n", "# optimizer.step()", "\n", "pos", "=", "pos", ".", "add", "(", "pos_grad", ",", "alpha", "=", "-", "step_size", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "d_old", "=", "torch", ".", "norm", "(", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "edge_index", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "coef", "*", "(", "(", "d_target", "-", "d_old", ")", "**", "2", ")", ")", ".", "mean", "(", ")", "\n", "pos_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "pos", ")", "[", "0", "]", "\n", "pos", ".", "grad", "=", "pos_grad", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Embed 3D: AvgLoss %.6f'", "%", "(", "loss", ".", "item", "(", ")", "/", "d_target", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "", "return", "pos", ",", "loss", ".", "detach", "(", ")", "/", "d_target", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.build_flow": [[231, 261], ["cnf_edge.SequentialFlow", "cnf_edge.ODEgnn", "cnf_edge.ODEfunc", "cnf_edge.CNF", "vae.build_flow.build_cnf"], "function", ["None"], ["", "", "def", "build_flow", "(", "args", ",", "hidden_dim", ",", "num_blocks", ")", ":", "\n", "    ", "def", "build_cnf", "(", ")", ":", "\n", "        ", "diffeq", "=", "ODEgnn", "(", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", ")", "\n", "odefunc", "=", "ODEfunc", "(", "\n", "diffeq", "=", "diffeq", ",", "\n", ")", "\n", "cnf", "=", "CNF", "(", "\n", "odefunc", "=", "odefunc", ",", "\n", "T", "=", "args", ".", "time_length", ",", "\n", "train_T", "=", "args", ".", "train_T", ",", "\n", "solver", "=", "args", ".", "solver", ",", "\n", "use_adjoint", "=", "args", ".", "use_adjoint", ",", "\n", "atol", "=", "args", ".", "atol", ",", "\n", "rtol", "=", "args", ".", "rtol", ",", "\n", ")", "\n", "return", "cnf", "\n", "\n", "", "chain", "=", "[", "build_cnf", "(", ")", "for", "_", "in", "range", "(", "num_blocks", ")", "]", "\n", "if", "args", ".", "batch_norm", ":", "\n", "        ", "bn_layers", "=", "[", "MovingBatchNorm1d", "(", "1", ",", "bn_lag", "=", "args", ".", "bn_lag", ",", "sync", "=", "args", ".", "sync_bn", ")", "\n", "for", "_", "in", "range", "(", "num_blocks", ")", "]", "\n", "bn_chain", "=", "[", "MovingBatchNorm1d", "(", "1", ",", "bn_lag", "=", "args", ".", "bn_lag", ",", "sync", "=", "args", ".", "sync_bn", ")", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "chain", ",", "bn_layers", ")", ":", "\n", "            ", "bn_chain", ".", "append", "(", "a", ")", "\n", "bn_chain", ".", "append", "(", "b", ")", "\n", "", "chain", "=", "bn_chain", "\n", "", "model", "=", "SequentialFlow", "(", "chain", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.mcmc.latent_mcmc": [[9, 57], ["distgeom.Embed3D", "distgeom.Embed3D", "batch.clone", "edgecnf.generate_conf_mcmc_step", "tqdm.auto.tqdm", "range", "pos_new.detach", "model_ebm", "traj.append", "callable", "edgecnf.generate_conf_mcmc_step", "torch.autograd.grad", "step_size", "logger.info", "model_ebm.sum", "log_q.sum", "batch.clone.pos.clone().cpu", "model_ebm.clone().detach().cpu", "log_p.clone().detach().cpu", "torch.randn_like", "z_new.detach", "pos_new.detach", "batch.clone.pos.clone", "model_ebm.clone().detach", "log_p.clone().detach", "log_p.item", "model_ebm.mean().item", "model_ebm.min().item", "model_ebm.max().item", "log_q.mean().item", "z_grad.abs().max", "repr", "model_ebm.clone", "log_p.clone", "model_ebm.mean", "model_ebm.min", "model_ebm.max", "log_q.mean", "z_grad.abs"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.generate_conf_mcmc_step", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.edgecnf.generate_conf_mcmc_step"], ["def", "latent_mcmc", "(", "\n", "model_ebm", ",", "model_cnf", ",", "batch", ",", "num_steps", ",", "step_size", ",", "noise_scale", ",", "\n", "embedder_init", "=", "Embed3D", "(", "mu", "=", "0.25", ",", "step_size", "=", "2.0", ",", "num_steps", "=", "1000", ")", ",", "\n", "embedder_mcmc", "=", "Embed3D", "(", "mu", "=", "0", ",", "step_size", "=", "0.05", ",", "num_steps", "=", "200", ")", ",", "\n", "logger", "=", "None", "\n", ")", ":", "\n", "# embedder_init = Embed3D(mu=0.25, step_size=2.0, num_steps=1000)", "\n", "# embedder_mcmc = Embed3D(mu=0, step_size=0.05, num_steps=200)", "\n", "\n", "    ", "data", "=", "batch", ".", "clone", "(", ")", "\n", "# Comput. graph: z_new -> d_new -> (pos_new, log_q)", "\n", "z_new", ",", "_", ",", "pos_new", ",", "log_q", "=", "generate_conf_mcmc_step", "(", "model_cnf", ",", "data", ",", "embedder", "=", "embedder_init", ")", "\n", "traj", "=", "[", "]", "\n", "\n", "\n", "for", "step", "in", "tqdm", "(", "range", "(", "num_steps", ")", ",", "desc", "=", "'MCMC-Latent'", ")", ":", "\n", "        ", "data", ".", "pos", "=", "pos_new", ".", "detach", "(", ")", "\n", "ener", "=", "model_ebm", "(", "data", ")", "\n", "log_p", "=", "-", "1", "*", "ener", ".", "sum", "(", ")", "+", "log_q", ".", "sum", "(", ")", "/", "2", "\n", "\n", "traj", ".", "append", "(", "{", "\n", "'pos'", ":", "data", ".", "pos", ".", "clone", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'energy'", ":", "ener", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'log_p'", ":", "log_p", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "}", ")", "\n", "\n", "z_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "log_p", ",", "inputs", "=", "z_new", ")", "[", "0", "]", "\n", "\n", "if", "callable", "(", "step_size", ")", ":", "\n", "            ", "s", "=", "step_size", "(", "step", ",", "z_new", ",", "ener", ",", "log_q", ",", "log_p", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "step_size", "\n", "", "z_new", "=", "z_new", "+", "s", "/", "2", "*", "z_grad", "+", "(", "s", "**", ".5", ")", "*", "noise_scale", "*", "torch", ".", "randn_like", "(", "z_new", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'[Step %d] log_P %.4f | Ener %.4f (%.2f ~ %.2f) | log_Q %.4f | Grad_mag %.4f | Step %s'", "%", "(", "\n", "step", ",", "\n", "log_p", ".", "item", "(", ")", ",", "\n", "ener", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "ener", ".", "min", "(", ")", ".", "item", "(", ")", ",", "ener", ".", "max", "(", ")", ".", "item", "(", ")", ",", "\n", "log_q", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "z_grad", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "\n", "repr", "(", "s", ")", "\n", ")", ")", "\n", "\n", "\n", "", "z_new", ",", "_", ",", "pos_new", ",", "log_q", "=", "generate_conf_mcmc_step", "(", "model_cnf", ",", "data", ",", "z", "=", "z_new", ".", "detach", "(", ")", ",", "embedder", "=", "embedder_mcmc", ",", "dg_init_pos", "=", "pos_new", ".", "detach", "(", ")", ")", "\n", "\n", "", "return", "pos_new", ",", "z_new", ",", "traj", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.mcmc.xyz_mcmc": [[59, 99], ["distgeom.Embed3D", "distgeom.Embed3D", "data.clone.clone", "model_cnf.eval", "distgeom.Embed3D.", "tqdm.auto.tqdm", "torch.no_grad", "model_cnf.sample", "torch.randn().to", "range", "traj.append", "pos.detach.requires_grad_", "distgeom.get_d_from_pos().view", "model_cnf.get_log_prob", "model_ebm", "torch.clamp", "callable", "pos.detach.detach", "pos.detach.clone().cpu", "torch.autograd.grad", "logger.info", "step_size", "torch.randn", "distgeom.get_d_from_pos", "model_ebm.sum", "model_cnf.get_log_prob.sum", "torch.randn_like", "pos.detach.clone", "model_ebm.mean().item", "model_ebm.median().item", "model_ebm.max().item", "torch.clamp.max().item", "model_ebm.mean", "model_ebm.median", "model_ebm.max", "torch.clamp.max"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.ImplicitVAE.sample", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.vae.CNFDecoder.get_log_prob", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.get_d_from_pos"], ["", "def", "xyz_mcmc", "(", "model_ebm", ",", "model_cnf", ",", "data", ",", "num_steps", ",", "step_size", ",", "noise_scale", ",", "logger", "=", "None", ")", ":", "\n", "    ", "embedder_init", "=", "Embed3D", "(", "mu", "=", "0.25", ",", "step_size", "=", "5.0", ",", "num_steps", "=", "1000", ")", "\n", "embedder_mcmc", "=", "Embed3D", "(", "mu", "=", "0", ",", "step_size", "=", "0.05", ",", "num_steps", "=", "200", ")", "\n", "\n", "data", "=", "data", ".", "clone", "(", ")", "\n", "model_cnf", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "d_init", ",", "_", "=", "model_cnf", ".", "sample", "(", "data", ",", "1", ")", "\n", "", "pos", ",", "_", "=", "embedder_init", "(", "d_init", ",", "data", ".", "edge_index", ",", "torch", ".", "randn", "(", "data", ".", "num_nodes", ",", "3", ")", ".", "to", "(", "d_init", ")", ",", "data", ".", "edge_order", ")", "\n", "traj", "=", "[", "]", "\n", "\n", "for", "step", "in", "tqdm", "(", "range", "(", "num_steps", ")", ",", "desc", "=", "'MCMC-XYZ'", ")", ":", "\n", "        ", "traj", ".", "append", "(", "pos", ".", "clone", "(", ")", ".", "cpu", "(", ")", ")", "\n", "data", ".", "pos", "=", "pos", ".", "requires_grad_", "(", "True", ")", "\n", "d", "=", "get_d_from_pos", "(", "pos", ",", "data", ".", "edge_index", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "log_q", "=", "model_cnf", ".", "get_log_prob", "(", "data", ",", "d", ")", "\n", "ener", "=", "model_ebm", "(", "data", ")", "\n", "log_p", "=", "-", "1", "*", "ener", ".", "sum", "(", ")", "+", "log_q", ".", "sum", "(", ")", "*", "2", "\n", "pos_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "log_p", ",", "inputs", "=", "pos", ")", "[", "0", "]", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'EnerMean %.6f | EnerMed %.6f | EnerMax %.6f | GradMag %.6f'", "%", "(", "\n", "ener", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "ener", ".", "median", "(", ")", ".", "item", "(", ")", ",", "ener", ".", "max", "(", ")", ".", "item", "(", ")", ",", "pos_grad", ".", "max", "(", ")", ".", "item", "(", ")", "\n", ")", ")", "\n", "\n", "# grad_mag = torch.norm(pos_grad.clone().detach(), dim=1).max().item()", "\n", "# if grad_mag > 5.0:", "\n", "#     pos_grad /= grad_mag * 5.0", "\n", "\n", "", "pos_grad", "=", "torch", ".", "clamp", "(", "pos_grad", ",", "-", "5.0", ",", "5.0", ")", "\n", "\n", "if", "callable", "(", "step_size", ")", ":", "\n", "            ", "s", "=", "step_size", "(", "step", ",", "None", ",", "ener", ",", "log_q", ",", "log_p", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "step_size", "\n", "\n", "", "pos", "=", "pos", "+", "(", "s", "/", "2", ")", "*", "pos_grad", "+", "(", "s", "**", ".5", ")", "*", "noise_scale", "*", "torch", ".", "randn_like", "(", "pos", ")", "\n", "pos", "=", "pos", ".", "detach", "(", ")", "\n", "\n", "", "return", "pos", ",", "traj", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.Embed3D.__init__": [[39, 46], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "mu", "=", "0", ",", "step_size", "=", "8.0", ",", "num_steps", "=", "1000", ",", "logger", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.Embed3D.__call__": [[47, 55], ["distgeom.embed_3D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.embed_3D"], ["", "def", "__call__", "(", "self", ",", "d_target", ",", "edge_index", ",", "init_pos", ",", "edge_order", "=", "None", ")", ":", "\n", "        ", "return", "embed_3D", "(", "\n", "d_target", ",", "edge_index", ",", "init_pos", ",", "edge_order", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "\n", "mu", "=", "self", ".", "mu", ",", "\n", "step_size", "=", "self", ".", "step_size", ",", "\n", "num_steps", "=", "self", ".", "num_steps", ",", "\n", "logger", "=", "self", ".", "logger", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.DistanceGeometry.forward": [[60, 73], ["ctx.save_for_backward", "d.flatten.flatten.flatten", "torch.norm", "torch.allclose"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "d", ",", "pos", ",", "edge_index", ",", "eps", "=", "5e-3", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            d:    Input distances, (E, ) or (E, 1).\n            pos:  Precomputed positions, (N, 3).\n        \"\"\"", "\n", "ctx", ".", "save_for_backward", "(", "d", ",", "pos", ",", "edge_index", ")", "\n", "d", "=", "d", ".", "flatten", "(", ")", "\n", "d_ref", "=", "torch", ".", "norm", "(", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "edge_index", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "# print((d-d_ref).abs().max())", "\n", "assert", "torch", ".", "allclose", "(", "d", ",", "d_ref", ",", "atol", "=", "eps", ",", "rtol", "=", "eps", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.DistanceGeometry.backward": [[74, 90], ["dist.flatten.flatten.size", "dist.flatten.flatten.flatten", "grad_d.view"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_pos", ")", ":", "\n", "        ", "\"\"\"\n        Compute gradiants.\n        Args:\n            grad_pos:   Gradients w.r.t. the output pos, (N, 3).\n        Returns:\n            grad_d, grad_pos, None, None\n        \"\"\"", "\n", "dist", ",", "pos", ",", "edge_index", "=", "ctx", ".", "saved_tensors", "\n", "dist_size", "=", "dist", ".", "size", "(", ")", "\n", "dist", "=", "dist", ".", "flatten", "(", ")", "\n", "D", "=", "grad_pos", "[", "edge_index", "[", "0", "]", "]", "-", "grad_pos", "[", "edge_index", "[", "1", "]", "]", "# (E, 3)", "\n", "L", "=", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "edge_index", "[", "1", "]", "]", "# (E, 3)", "\n", "grad_d", "=", "(", "D", "*", "L", ")", ".", "sum", "(", "dim", "=", "1", ")", "/", "dist", "\n", "return", "grad_d", ".", "view", "(", "dist_size", ")", ",", "grad_pos", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.embed_3D": [[4, 35], ["d_target.view.view", "init_pos.clone().requires_grad_", "torch.optim.Adam", "range", "torch.clamp_min", "torch.optim.Adam.zero_grad", "torch.norm", "torch.optim.Adam.step", "logger.info", "init_pos.clone", "torch.autograd.grad", "loss.detach", "d_target.view.size", "edge_order.view().float", "torch.randn_like", "loss.item", "d_target.view.size", "edge_order.view"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.common.GradualWarmupScheduler.step"], ["def", "embed_3D", "(", "d_target", ",", "edge_index", ",", "init_pos", ",", "edge_order", "=", "None", ",", "alpha", "=", "0.5", ",", "mu", "=", "0", ",", "step_size", "=", "None", ",", "num_steps", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "assert", "torch", ".", "is_grad_enabled", ",", "'`embed_3D` requires gradients'", "\n", "step_size", "=", "8.0", "if", "step_size", "is", "None", "else", "step_size", "\n", "num_steps", "=", "200", "if", "num_steps", "is", "None", "else", "num_steps", "\n", "\n", "d_target", "=", "d_target", ".", "view", "(", "-", "1", ")", "\n", "pos", "=", "init_pos", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "# optimizer = torch.optim.Adam([pos], lr=step_size)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "pos", "]", ",", "lr", "=", "step_size", ")", "\n", "\n", "if", "edge_order", "is", "not", "None", ":", "\n", "        ", "coef", "=", "alpha", "**", "(", "edge_order", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "coef", "=", "1.0", "\n", "\n", "", "if", "mu", ">", "0", ":", "\n", "        ", "noise", "=", "torch", ".", "randn_like", "(", "coef", ")", "*", "coef", "*", "mu", "+", "coef", "\n", "coef", "=", "torch", ".", "clamp_min", "(", "coef", "+", "noise", ",", "min", "=", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "d_new", "=", "torch", ".", "norm", "(", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "edge_index", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "coef", "*", "(", "(", "d_target", "-", "d_new", ")", "**", "2", ")", ")", ".", "sum", "(", ")", "\n", "# loss.backward()", "\n", "pos", ".", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "pos", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "optimizer", ".", "step", "(", ")", "\n", "# pos = pos - step_size*pos_grad", "\n", "", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Embed 3D: AvgLoss %.6f'", "%", "(", "loss", ".", "item", "(", ")", "/", "d_target", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "", "return", "pos", ",", "loss", ".", "detach", "(", ")", "/", "d_target", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.models.distgeom.get_d_from_pos": [[92, 94], ["torch.norm"], "function", ["None"], ["", "", "def", "get_d_from_pos", "(", "pos", ",", "edge_index", ")", ":", "\n", "    ", "return", "torch", ".", "norm", "(", "pos", "[", "edge_index", "[", "0", "]", "]", "-", "pos", "[", "edge_index", "[", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.__init__": [[14, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'weight'", ",", "dim", "=", "0", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.compute_weight": [[19, 48], ["getattr", "getattr", "getattr", "weight_mat.permute.permute.size", "weight_mat.permute.permute.reshape", "setattr", "setattr", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "setattr", "ValueError", "weight_mat.permute.permute.permute", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "weight_mat.permute.permute.t", "range", "weight_mat.permute.permute.dim"], "methods", ["None"], ["", "def", "compute_weight", "(", "self", ",", "module", ",", "n_power_iterations", ")", ":", "\n", "        ", "if", "n_power_iterations", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected n_power_iterations to be non-negative, but '", "\n", "'got n_power_iterations={}'", ".", "format", "(", "n_power_iterations", ")", "\n", ")", "\n", "\n", "", "weight", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_orig'", ")", "\n", "u", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_u'", ")", "\n", "v", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_v'", ")", "\n", "weight_mat", "=", "weight", "\n", "if", "self", ".", "dim", "!=", "0", ":", "\n", "# permute dim to front", "\n", "            ", "weight_mat", "=", "weight_mat", ".", "permute", "(", "self", ".", "dim", ",", "*", "[", "d", "for", "d", "in", "range", "(", "weight_mat", ".", "dim", "(", ")", ")", "if", "d", "!=", "self", ".", "dim", "]", ")", "\n", "", "height", "=", "weight_mat", ".", "size", "(", "0", ")", "\n", "weight_mat", "=", "weight_mat", ".", "reshape", "(", "height", ",", "-", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "n_power_iterations", ")", ":", "\n", "# Spectral norm of weight equals to `u^T W v`, where `u` and `v`", "\n", "# are the first left and right singular vectors.", "\n", "# This power iteration produces approximations of `u` and `v`.", "\n", "                ", "v", "=", "normalize", "(", "torch", ".", "matmul", "(", "weight_mat", ".", "t", "(", ")", ",", "u", ")", ",", "dim", "=", "0", ",", "eps", "=", "self", ".", "eps", ")", "\n", "u", "=", "normalize", "(", "torch", ".", "matmul", "(", "weight_mat", ",", "v", ")", ",", "dim", "=", "0", ",", "eps", "=", "self", ".", "eps", ")", "\n", "", "", "setattr", "(", "module", ",", "self", ".", "name", "+", "'_u'", ",", "u", ")", "\n", "setattr", "(", "module", ",", "self", ".", "name", "+", "'_v'", ",", "v", ")", "\n", "\n", "sigma", "=", "torch", ".", "dot", "(", "u", ",", "torch", ".", "matmul", "(", "weight_mat", ",", "v", ")", ")", "\n", "weight", "=", "weight", "/", "sigma", "\n", "setattr", "(", "module", ",", "self", ".", "name", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.remove": [[49, 55], ["getattr", "delattr", "delattr", "delattr", "module.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter"], "methods", ["None"], ["", "def", "remove", "(", "self", ",", "module", ")", ":", "\n", "        ", "weight", "=", "getattr", "(", "module", ",", "self", ".", "name", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", "+", "'_u'", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", "+", "'_orig'", ")", "\n", "module", ".", "register_parameter", "(", "self", ".", "name", ",", "torch", ".", "nn", ".", "Parameter", "(", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.get_update_method": [[56, 61], ["spectral_norm.SpectralNorm.compute_weight"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.compute_weight"], ["", "def", "get_update_method", "(", "self", ",", "module", ")", ":", "\n", "        ", "def", "update_fn", "(", "module", ",", "n_power_iterations", ")", ":", "\n", "            ", "self", ".", "compute_weight", "(", "module", ",", "n_power_iterations", ")", "\n", "\n", "", "return", "update_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.__call__": [[62, 70], ["spectral_norm.SpectralNorm.compute_weight", "setattr", "getattr", "getattr().detach().requires_grad_", "getattr().detach", "getattr"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.compute_weight"], ["", "def", "__call__", "(", "self", ",", "module", ",", "unused_inputs", ")", ":", "\n", "        ", "del", "unused_inputs", "\n", "self", ".", "compute_weight", "(", "module", ",", "n_power_iterations", "=", "0", ")", "\n", "\n", "# requires_grad might be either True or False during inference.", "\n", "if", "not", "module", ".", "training", ":", "\n", "            ", "r_g", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_orig'", ")", ".", "requires_grad", "\n", "setattr", "(", "module", ",", "self", ".", "name", ",", "getattr", "(", "module", ",", "self", ".", "name", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "r_g", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.apply": [[71, 95], ["spectral_norm.SpectralNorm", "weight.size", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "delattr", "module.register_parameter", "module.register_buffer", "module.register_buffer", "module.register_buffer", "setattr", "module.register_forward_pre_hook", "weight.new_empty().normal_", "weight.new_empty().normal_", "types.MethodType", "spectral_norm.SpectralNorm.get_update_method", "weight.new_empty", "weight.new_empty", "int", "weight.numel"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.get_update_method"], ["", "", "@", "staticmethod", "\n", "def", "apply", "(", "module", ",", "name", ",", "dim", ",", "eps", ")", ":", "\n", "        ", "fn", "=", "SpectralNorm", "(", "name", ",", "dim", ",", "eps", ")", "\n", "weight", "=", "module", ".", "_parameters", "[", "name", "]", "\n", "height", "=", "weight", ".", "size", "(", "dim", ")", "\n", "\n", "u", "=", "normalize", "(", "weight", ".", "new_empty", "(", "height", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "dim", "=", "0", ",", "eps", "=", "fn", ".", "eps", ")", "\n", "v", "=", "normalize", "(", "weight", ".", "new_empty", "(", "int", "(", "weight", ".", "numel", "(", ")", "/", "height", ")", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "dim", "=", "0", ",", "eps", "=", "fn", ".", "eps", ")", "\n", "delattr", "(", "module", ",", "fn", ".", "name", ")", "\n", "module", ".", "register_parameter", "(", "fn", ".", "name", "+", "\"_orig\"", ",", "weight", ")", "\n", "# We still need to assign weight back as fn.name because all sorts of", "\n", "# things may assume that it exists, e.g., when initializing weights.", "\n", "# However, we can't directly assign as it could be an nn.Parameter and", "\n", "# gets added as a parameter. Instead, we register weight.data as a", "\n", "# buffer, which will cause weight to be included in the state dict", "\n", "# and also supports nn.init due to shared storage.", "\n", "module", ".", "register_buffer", "(", "fn", ".", "name", ",", "weight", ".", "data", ")", "\n", "module", ".", "register_buffer", "(", "fn", ".", "name", "+", "\"_u\"", ",", "u", ")", "\n", "module", ".", "register_buffer", "(", "fn", ".", "name", "+", "\"_v\"", ",", "v", ")", "\n", "\n", "setattr", "(", "module", ",", "POWER_ITERATION_FN", ",", "types", ".", "MethodType", "(", "fn", ".", "get_update_method", "(", "module", ")", ",", "module", ")", ")", "\n", "\n", "module", ".", "register_forward_pre_hook", "(", "fn", ")", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.inplace_spectral_norm": [[97, 136], ["spectral_norm.SpectralNorm.apply", "isinstance"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.apply"], ["", "", "def", "inplace_spectral_norm", "(", "module", ",", "name", "=", "'weight'", ",", "dim", "=", "None", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "r\"\"\"Applies spectral normalization to a parameter in the given module.\n    .. math::\n         \\mathbf{W} = \\dfrac{\\mathbf{W}}{\\sigma(\\mathbf{W})} \\\\\n         \\sigma(\\mathbf{W}) = \\max_{\\mathbf{h}: \\mathbf{h} \\ne 0} \\dfrac{\\|\\mathbf{W} \\mathbf{h}\\|_2}{\\|\\mathbf{h}\\|_2}\n    Spectral normalization stabilizes the training of discriminators (critics)\n    in Generaive Adversarial Networks (GANs) by rescaling the weight tensor\n    with spectral norm :math:`\\sigma` of the weight matrix calculated using\n    power iteration method. If the dimension of the weight tensor is greater\n    than 2, it is reshaped to 2D in power iteration method to get spectral\n    norm. This is implemented via a hook that calculates spectral norm and\n    rescales weight before every :meth:`~Module.forward` call.\n    See `Spectral Normalization for Generative Adversarial Networks`_ .\n    .. _`Spectral Normalization for Generative Adversarial Networks`: https://arxiv.org/abs/1802.05957\n    Args:\n        module (nn.Module): containing module\n        name (str, optional): name of weight parameter\n        n_power_iterations (int, optional): number of power iterations to\n            calculate spectal norm\n        dim (int, optional): dimension corresponding to number of outputs,\n            the default is 0, except for modules that are instances of\n            ConvTranspose1/2/3d, when it is 1\n        eps (float, optional): epsilon for numerical stability in\n            calculating norms\n    Returns:\n        The original module with the spectal norm hook\n    Example::\n        >>> m = spectral_norm(nn.Linear(20, 40))\n        Linear (20 -> 40)\n        >>> m.weight_u.size()\n        torch.Size([20])\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "torch", ".", "nn", ".", "ConvTranspose1d", ",", "torch", ".", "nn", ".", "ConvTranspose2d", ",", "torch", ".", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "            ", "dim", "=", "1", "\n", "", "else", ":", "\n", "            ", "dim", "=", "0", "\n", "", "", "SpectralNorm", ".", "apply", "(", "module", ",", "name", ",", "dim", "=", "dim", ",", "eps", "=", "eps", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.remove_spectral_norm": [[138, 154], ["module._forward_pre_hooks.items", "ValueError", "isinstance", "hook.remove"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.remove"], ["", "def", "remove_spectral_norm", "(", "module", ",", "name", "=", "'weight'", ")", ":", "\n", "    ", "r\"\"\"Removes the spectral normalization reparameterization from a module.\n    Args:\n        module (nn.Module): containing module\n        name (str, optional): name of weight parameter\n    Example:\n        >>> m = spectral_norm(nn.Linear(40, 10))\n        >>> remove_spectral_norm(m)\n    \"\"\"", "\n", "for", "k", ",", "hook", "in", "module", ".", "_forward_pre_hooks", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "hook", ",", "SpectralNorm", ")", "and", "hook", ".", "name", "==", "name", ":", "\n", "            ", "hook", ".", "remove", "(", "module", ")", "\n", "del", "module", ".", "_forward_pre_hooks", "[", "k", "]", "\n", "return", "module", "\n", "\n", "", "", "raise", "ValueError", "(", "\"spectral_norm of '{}' not found in {}\"", ".", "format", "(", "name", ",", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.add_spectral_norm": [[156, 172], ["spectral_norm.add_spectral_norm.find_cnf"], "function", ["None"], ["", "def", "add_spectral_norm", "(", "model", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Applies spectral norm to all modules within the scope of a CNF.\"\"\"", "\n", "\n", "def", "apply_spectral_norm", "(", "module", ")", ":", "\n", "        ", "if", "'weight'", "in", "module", ".", "_parameters", ":", "\n", "            ", "if", "logger", ":", "logger", ".", "info", "(", "\"Adding spectral norm to {}\"", ".", "format", "(", "module", ")", ")", "\n", "inplace_spectral_norm", "(", "module", ",", "'weight'", ")", "\n", "\n", "", "", "def", "find_cnf", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "CNF", ")", ":", "\n", "            ", "module", ".", "apply", "(", "apply_spectral_norm", ")", "\n", "", "else", ":", "\n", "            ", "for", "child", "in", "module", ".", "children", "(", ")", ":", "\n", "                ", "find_cnf", "(", "child", ")", "\n", "\n", "", "", "", "find_cnf", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.spectral_norm_power_iteration": [[174, 181], ["model.apply", "hasattr", "getattr"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.apply"], ["", "def", "spectral_norm_power_iteration", "(", "model", ",", "n_power_iterations", "=", "1", ")", ":", "\n", "\n", "    ", "def", "recursive_power_iteration", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "POWER_ITERATION_FN", ")", ":", "\n", "            ", "getattr", "(", "module", ",", "POWER_ITERATION_FN", ")", "(", "n_power_iterations", ")", "\n", "\n", "", "", "model", ".", "apply", "(", "recursive_power_iteration", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odefunc.ODEfunc.__init__": [[27, 32], ["torch.Module.__init__", "odefunc.ODEfunc.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "diffeq", ")", ":", "\n", "        ", "super", "(", "ODEfunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "diffeq", "=", "diffeq", "\n", "self", ".", "divergence_fn", "=", "divergence_approx", "\n", "self", ".", "register_buffer", "(", "\"_num_evals\"", ",", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odefunc.ODEfunc.before_odeint": [[33, 37], ["odefunc.ODEfunc._num_evals.fill_"], "methods", ["None"], ["", "def", "before_odeint", "(", "self", ",", "edge_index", "=", "None", ",", "e", "=", "None", ")", ":", "\n", "        ", "self", ".", "_e", "=", "e", "\n", "self", ".", "_num_evals", ".", "fill_", "(", "0", ")", "\n", "self", ".", "diffeq", ".", "edge_index", "=", "edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odefunc.ODEfunc.forward": [[38, 55], ["torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "t.clone().detach().requires_grad_().type_as", "state.requires_grad_", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.randn_like().to", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "odefunc.ODEfunc.diffeq", "odefunc.ODEfunc.divergence_fn().unsqueeze", "len", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.zeros_like().requires_grad_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "t.clone().detach().requires_grad_", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "odefunc.ODEfunc.divergence_fn", "y.size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "t.clone().detach", "t.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "states", ")", ":", "\n", "        ", "y", "=", "states", "[", "0", "]", "\n", "t", "=", "torch", ".", "ones", "(", "y", ".", "size", "(", "0", ")", ",", "1", ")", ".", "to", "(", "y", ")", "*", "t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "type_as", "(", "y", ")", "\n", "self", ".", "_num_evals", "+=", "1", "\n", "for", "state", "in", "states", ":", "\n", "            ", "state", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Sample and fix the noise.", "\n", "", "if", "self", ".", "_e", "is", "None", ":", "\n", "            ", "self", ".", "_e", "=", "torch", ".", "randn_like", "(", "y", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "y", ")", "\n", "\n", "", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "            ", "assert", "len", "(", "states", ")", "==", "4", "# conditional CNF: x, logpx, node_attr, edge_attr", "\n", "node_attr", ",", "edge_attr", "=", "states", "[", "2", ":", "]", "\n", "dy", "=", "self", ".", "diffeq", "(", "t", ",", "y", ",", "node_attr", ",", "edge_attr", ")", "\n", "divergence", "=", "self", ".", "divergence_fn", "(", "dy", ",", "y", ",", "e", "=", "self", ".", "_e", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "dy", ",", "-", "divergence", ",", "torch", ".", "zeros_like", "(", "node_attr", ")", ".", "requires_grad_", "(", "True", ")", ",", "torch", ".", "zeros_like", "(", "edge_attr", ")", ".", "requires_grad_", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odefunc.divergence_approx": [[5, 24], ["e_dzdx.mul", "e_dzdx.mul.sum", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "f.size"], "function", ["None"], ["def", "divergence_approx", "(", "f", ",", "y", ",", "e", "=", "None", ")", ":", "\n", "    ", "e_dzdx", "=", "torch", ".", "autograd", ".", "grad", "(", "f", ",", "y", ",", "e", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "e_dzdx_e", "=", "e_dzdx", ".", "mul", "(", "e", ")", "\n", "\n", "cnt", "=", "0", "\n", "while", "not", "e_dzdx_e", ".", "requires_grad", "and", "cnt", "<", "10", ":", "\n", "# print(\"RequiresGrad:f=%s, y(rgrad)=%s, e_dzdx:%s, e:%s, e_dzdx_e:%s cnt=%d\"", "\n", "#       % (f.requires_grad, y.requires_grad, e_dzdx.requires_grad,", "\n", "#          e.requires_grad, e_dzdx_e.requires_grad, cnt))", "\n", "        ", "e_dzdx", "=", "torch", ".", "autograd", ".", "grad", "(", "f", ",", "y", ",", "e", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "e_dzdx_e", "=", "e_dzdx", "*", "e", "\n", "cnt", "+=", "1", "\n", "\n", "", "approx_tr_dzdx", "=", "e_dzdx_e", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "assert", "approx_tr_dzdx", ".", "requires_grad", ",", "\"(failed to add node to graph) f=%s %s, y(rgrad)=%s, e_dzdx:%s, e:%s, e_dzdx_e:%s cnt:%s\"", "%", "(", "\n", "f", ".", "size", "(", ")", ",", "f", ".", "requires_grad", ",", "y", ".", "requires_grad", ",", "e_dzdx", ".", "requires_grad", ",", "e", ".", "requires_grad", ",", "e_dzdx_e", ".", "requires_grad", ",", "cnt", ")", "\n", "return", "approx_tr_dzdx", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odegnn.GINEConv.__init__": [[15, 24], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "odegnn.GINEConv.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nn", ":", "Callable", ",", "eps", ":", "float", "=", "0.", ",", "train_eps", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GINEConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "**", "kwargs", ")", "\n", "self", ".", "nn", "=", "nn", "\n", "self", ".", "initial_eps", "=", "eps", "\n", "if", "train_eps", ":", "\n", "            ", "self", ".", "eps", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'eps'", ",", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odegnn.GINEConv.forward": [[25, 46], ["isinstance", "isinstance", "odegnn.GINEConv.propagate", "odegnn.GINEConv.nn", "isinstance", "x[].size", "edge_attr.size", "x[].size", "edge_index.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "t", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "edge_attr", ":", "OptTensor", "=", "None", ",", "size", ":", "Size", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "x", ":", "OptPairTensor", "=", "(", "x", ",", "x", ")", "\n", "\n", "# Node and edge feature dimensionalites need to match.", "\n", "", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "            ", "assert", "edge_attr", "is", "not", "None", "\n", "assert", "x", "[", "0", "]", ".", "size", "(", "-", "1", ")", "==", "edge_attr", ".", "size", "(", "-", "1", ")", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "            ", "assert", "x", "[", "0", "]", ".", "size", "(", "-", "1", ")", "==", "edge_index", ".", "size", "(", "-", "1", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor, edge_attr: OptTensor)", "\n", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_attr", "=", "edge_attr", ",", "size", "=", "size", ")", "\n", "\n", "x_r", "=", "x", "[", "1", "]", "\n", "if", "x_r", "is", "not", "None", ":", "\n", "            ", "out", "+=", "(", "1", "+", "self", ".", "eps", ")", "*", "x_r", "\n", "\n", "", "return", "self", ".", "nn", "(", "t", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odegnn.GINEConv.message": [[47, 49], ["torch.softplus", "torch.softplus"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "edge_attr", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "F", ".", "softplus", "(", "x_j", "+", "edge_attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odegnn.ODEgnn.__init__": [[53, 75], ["super().__init__", "odemlp.ConcatSquashLinear", "odemlp.ConcatSquashLinear", "odegnn.GINEConv", "odegnn.GINEConv", "odegnn.GINEConv", "odemlp.ConcatSquashLinear", "odemlp.ConcatSquashLinear", "odemlp.ConcatSquashLinear", "odemlp.ODEmlp", "odemlp.ODEmlp", "odemlp.ODEmlp"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "F", ".", "softplus", "\n", "self", ".", "d_fc1", "=", "ConcatSquashLinear", "(", "1", ",", "hidden_dim", ",", "dim_c", "=", "0", ")", "\n", "# self.bn_d1 = torch.nn.BatchNorm1d(hidden_dim)", "\n", "self", ".", "d_fc2", "=", "ConcatSquashLinear", "(", "hidden_dim", ",", "hidden_dim", ",", "dim_c", "=", "0", ")", "\n", "# self.bn_d2 = torch.nn.BatchNorm1d(hidden_dim)", "\n", "\n", "self", ".", "conv1", "=", "GINEConv", "(", "ODEmlp", "(", "(", "hidden_dim", ",", ")", ",", "(", "hidden_dim", ",", ")", ")", ")", "\n", "# self.bn_conv1 = torch.nn.BatchNorm1d(hidden_dim)", "\n", "self", ".", "conv2", "=", "GINEConv", "(", "ODEmlp", "(", "(", "hidden_dim", ",", ")", ",", "(", "hidden_dim", ",", ")", ")", ")", "\n", "# self.bn_conv2 = torch.nn.BatchNorm1d(hidden_dim)", "\n", "self", ".", "conv3", "=", "GINEConv", "(", "ODEmlp", "(", "(", "hidden_dim", ",", ")", ",", "(", "hidden_dim", ",", ")", ")", ")", "\n", "# self.bn_conv3 = torch.nn.BatchNorm1d(hidden_dim)", "\n", "\n", "self", ".", "out_fc1", "=", "ConcatSquashLinear", "(", "2", "*", "hidden_dim", ",", "hidden_dim", ",", "dim_c", "=", "0", ")", "\n", "# self.bn_out1 = torch.nn.BatchNorm1d(hidden_dim)", "\n", "self", ".", "out_fc2", "=", "ConcatSquashLinear", "(", "hidden_dim", ",", "hidden_dim", "//", "2", ",", "dim_c", "=", "0", ")", "\n", "# self.bn_out2 = torch.nn.BatchNorm1d(hidden_dim // 2)", "\n", "self", ".", "out_fc3", "=", "ConcatSquashLinear", "(", "hidden_dim", "//", "2", ",", "1", ",", "dim_c", "=", "0", ")", "\n", "\n", "self", ".", "edge_index", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odegnn.ODEgnn.forward": [[77, 99], ["odegnn.ODEgnn.act", "odegnn.ODEgnn.d_fc2", "odegnn.ODEgnn.act", "odegnn.ODEgnn.act", "odegnn.ODEgnn.conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "odegnn.ODEgnn.act", "odegnn.ODEgnn.act", "odegnn.ODEgnn.out_fc3", "odegnn.ODEgnn.d_fc1", "t.mean", "odegnn.ODEgnn.conv1", "odegnn.ODEgnn.conv2", "odegnn.ODEgnn.out_fc1", "odegnn.ODEgnn.out_fc2", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "x", ",", "node_attr", ",", "edge_attr", ")", ":", "\n", "        ", "assert", "self", ".", "edge_index", "is", "not", "None", ",", "'`edge_index` is not prepared.'", "\n", "edge_index", "=", "self", ".", "edge_index", "\n", "\n", "d_emb", "=", "self", ".", "act", "(", "self", ".", "d_fc1", "(", "t", ",", "x", ")", ")", "\n", "d_emb", "=", "self", ".", "d_fc2", "(", "t", ",", "d_emb", ")", "# Embedings for edge lengths `x`", "\n", "edge_attr", "=", "d_emb", "*", "edge_attr", "\n", "\n", "t_node", "=", "torch", ".", "ones_like", "(", "node_attr", ")", "[", "0", ",", ":", "1", "]", "*", "t", ".", "mean", "(", ")", "\n", "h", "=", "node_attr", "\n", "h", "=", "self", ".", "act", "(", "self", ".", "conv1", "(", "t_node", ",", "h", ",", "edge_index", ",", "edge_attr", ")", ")", "\n", "h", "=", "self", ".", "act", "(", "self", ".", "conv2", "(", "t_node", ",", "h", ",", "edge_index", ",", "edge_attr", ")", ")", "\n", "h", "=", "self", ".", "conv3", "(", "t_node", ",", "h", ",", "edge_index", ",", "edge_attr", ")", "\n", "\n", "h_row", ",", "h_col", "=", "h", "[", "edge_index", "[", "0", "]", "]", ",", "h", "[", "edge_index", "[", "1", "]", "]", "\n", "pair_feat", "=", "torch", ".", "cat", "(", "[", "h_row", "*", "h_col", ",", "edge_attr", "]", ",", "dim", "=", "-", "1", ")", "\n", "# pair_feat = h_row*h_col", "\n", "pair_feat", "=", "self", ".", "act", "(", "self", ".", "out_fc1", "(", "t", ",", "pair_feat", ")", ")", "\n", "pair_feat", "=", "self", ".", "act", "(", "self", ".", "out_fc2", "(", "t", ",", "pair_feat", ")", ")", "\n", "out", "=", "self", ".", "out_fc3", "(", "t", ",", "pair_feat", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.CNF.__init__": [[10, 29], ["torch.Module.__init__", "cnf.CNF.register_parameter", "NotImplementedError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "len", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "odefunc", ",", "T", "=", "1.0", ",", "train_T", "=", "False", ",", "regularization_fns", "=", "None", ",", "\n", "solver", "=", "'dopri5'", ",", "atol", "=", "1e-5", ",", "rtol", "=", "1e-5", ",", "use_adjoint", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_T", "=", "train_T", "\n", "self", ".", "T", "=", "T", "\n", "if", "train_T", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"sqrt_end_time\"", ",", "nn", ".", "Parameter", "(", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "T", ")", ")", ")", ")", "\n", "\n", "", "if", "regularization_fns", "is", "not", "None", "and", "len", "(", "regularization_fns", ")", ">", "0", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Regularization not supported\"", ")", "\n", "", "self", ".", "use_adjoint", "=", "use_adjoint", "\n", "self", ".", "odefunc", "=", "odefunc", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "atol", "=", "atol", "\n", "self", ".", "rtol", "=", "rtol", "\n", "self", ".", "test_solver", "=", "solver", "\n", "self", ".", "test_atol", "=", "atol", "\n", "self", ".", "test_rtol", "=", "rtol", "\n", "self", ".", "solver_options", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.CNF.forward": [[30, 84], ["cnf.CNF.odefunc.before_odeint", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "cnf._flip", "torchdiffeq.odeint", "torchdiffeq.odeint", "len", "tuple", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to.to", "torch.tensor().to.to", "torch.tensor().to.to", "torch.tensor().to.to", "torch.tensor().to.to", "torch.tensor().to.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odefunc.ODEfunc.before_odeint", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf._flip"], ["", "def", "forward", "(", "self", ",", "x", ",", "node_attr", ",", "edge_attr", ",", "edge_index", ",", "logpx", "=", "None", ",", "integration_times", "=", "None", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "logpx", "is", "None", ":", "\n", "            ", "_logpx", "=", "torch", ".", "zeros", "(", "*", "x", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ".", "to", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "_logpx", "=", "logpx", "\n", "\n", "", "states", "=", "(", "x", ",", "_logpx", ",", "node_attr", ",", "edge_attr", ")", "\n", "atol", "=", "[", "self", ".", "atol", "]", "*", "3", "\n", "rtol", "=", "[", "self", ".", "rtol", "]", "*", "3", "\n", "\n", "if", "integration_times", "is", "None", ":", "\n", "            ", "if", "self", ".", "train_T", ":", "\n", "                ", "integration_times", "=", "torch", ".", "stack", "(", "\n", "[", "torch", ".", "tensor", "(", "0.0", ")", ".", "to", "(", "x", ")", ",", "self", ".", "sqrt_end_time", "*", "self", ".", "sqrt_end_time", "]", "\n", ")", ".", "to", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "integration_times", "=", "torch", ".", "tensor", "(", "[", "0.", ",", "self", ".", "T", "]", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "x", ")", "\n", "\n", "", "", "if", "reverse", ":", "\n", "            ", "integration_times", "=", "_flip", "(", "integration_times", ",", "0", ")", "\n", "\n", "# Refresh the odefunc statistics,", "\n", "# and prepare the graph.", "\n", "", "self", ".", "odefunc", ".", "before_odeint", "(", "edge_index", "=", "edge_index", ")", "\n", "odeint", "=", "odeint_adjoint", "if", "self", ".", "use_adjoint", "else", "odeint_normal", "\n", "if", "self", ".", "training", ":", "\n", "            ", "state_t", "=", "odeint", "(", "\n", "self", ".", "odefunc", ",", "\n", "states", ",", "\n", "integration_times", ".", "to", "(", "x", ")", ",", "\n", "atol", "=", "atol", ",", "\n", "rtol", "=", "rtol", ",", "\n", "method", "=", "self", ".", "solver", ",", "\n", "options", "=", "self", ".", "solver_options", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "state_t", "=", "odeint", "(", "\n", "self", ".", "odefunc", ",", "\n", "states", ",", "\n", "integration_times", ".", "to", "(", "x", ")", ",", "\n", "atol", "=", "self", ".", "test_atol", ",", "\n", "rtol", "=", "self", ".", "test_rtol", ",", "\n", "method", "=", "self", ".", "test_solver", ",", "\n", ")", "\n", "\n", "", "if", "len", "(", "integration_times", ")", "==", "2", ":", "\n", "            ", "state_t", "=", "tuple", "(", "s", "[", "1", "]", "for", "s", "in", "state_t", ")", "\n", "\n", "", "z_t", ",", "logpz_t", "=", "state_t", "[", ":", "2", "]", "\n", "\n", "if", "logpx", "is", "not", "None", ":", "\n", "            ", "return", "z_t", ",", "logpz_t", "\n", "", "else", ":", "\n", "            ", "return", "z_t", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.CNF.num_evals": [[85, 87], ["cnf.CNF.odefunc._num_evals.item"], "methods", ["None"], ["", "", "def", "num_evals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "odefunc", ".", "_num_evals", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.SequentialFlow.__init__": [[98, 101], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["def", "__init__", "(", "self", ",", "layer_list", ")", ":", "\n", "        ", "super", "(", "SequentialFlow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chain", "=", "nn", ".", "ModuleList", "(", "layer_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.SequentialFlow.forward": [[102, 133], ["range", "range", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "node_attr", ",", "edge_attr", ",", "edge_index", ",", "logpx", "=", "None", ",", "reverse", "=", "False", ",", "inds", "=", "None", ",", "integration_times", "=", "None", ")", ":", "\n", "        ", "if", "inds", "is", "None", ":", "\n", "            ", "if", "reverse", ":", "\n", "                ", "inds", "=", "range", "(", "len", "(", "self", ".", "chain", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "inds", "=", "range", "(", "len", "(", "self", ".", "chain", ")", ")", "\n", "\n", "", "", "if", "logpx", "is", "None", ":", "\n", "            ", "for", "i", "in", "inds", ":", "\n", "                ", "x", "=", "self", ".", "chain", "[", "i", "]", "(", "\n", "x", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "logpx", "=", "logpx", ",", "\n", "integration_times", "=", "integration_times", ",", "\n", "reverse", "=", "reverse", "\n", ")", "\n", "", "return", "x", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "inds", ":", "\n", "                ", "x", ",", "logpx", "=", "self", ".", "chain", "[", "i", "]", "(", "\n", "x", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "logpx", "=", "logpx", ",", "\n", "integration_times", "=", "integration_times", ",", "\n", "reverse", "=", "reverse", "\n", ")", "\n", "", "return", "x", ",", "logpx", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd.__init__": [[146, 164], ["torch.Module.__init__", "cnf.MovingBatchNormNd.register_buffer", "cnf.MovingBatchNormNd.register_buffer", "cnf.MovingBatchNormNd.register_buffer", "cnf.MovingBatchNormNd.reset_parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "cnf.MovingBatchNormNd.register_parameter", "cnf.MovingBatchNormNd.register_parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-4", ",", "decay", "=", "0.1", ",", "bn_lag", "=", "0.", ",", "affine", "=", "True", ",", "sync", "=", "False", ")", ":", "\n", "        ", "super", "(", "MovingBatchNormNd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "sync", "=", "sync", "\n", "self", ".", "affine", "=", "affine", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "bn_lag", "=", "bn_lag", "\n", "self", ".", "register_buffer", "(", "'step'", ",", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'weight'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd.shape": [[165, 168], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd.reset_parameters": [[169, 175], ["cnf.MovingBatchNormNd.running_mean.zero_", "cnf.MovingBatchNormNd.running_var.fill_", "cnf.MovingBatchNormNd.weight.data.zero_", "cnf.MovingBatchNormNd.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd.forward": [[176, 181], ["cnf.MovingBatchNormNd._reverse", "cnf.MovingBatchNormNd._forward"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd._reverse", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd._forward"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "logpx", "=", "None", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "reverse", ":", "\n", "            ", "return", "self", ".", "_reverse", "(", "x", ",", "logpx", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward", "(", "x", ",", "logpx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd._forward": [[182, 227], ["x.size", "cnf.MovingBatchNormNd.running_mean.clone().detach", "cnf.MovingBatchNormNd.running_var.clone().detach", "used_mean.view().expand_as.view().expand_as.view().expand_as", "used_var.view().expand_as.view().expand_as.view().expand_as", "x.transpose().reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "cnf.MovingBatchNormNd.weight.view().expand_as", "cnf.MovingBatchNormNd.bias.view().expand_as", "cnf.MovingBatchNormNd.running_mean.clone", "cnf.MovingBatchNormNd.running_var.clone", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "cnf.reduce_tensor", "cnf.reduce_tensor", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "used_mean.view().expand_as.view().expand_as.view", "used_var.view().expand_as.view().expand_as.view", "x.transpose", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "cnf.MovingBatchNormNd.weight.view", "cnf.MovingBatchNormNd.bias.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "cnf.MovingBatchNormNd._logdetgrad().sum", "used_mean.view().expand_as.view().expand_as.detach", "used_var.view().expand_as.view().expand_as.detach", "cnf.MovingBatchNormNd._logdetgrad"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.reduce_tensor", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.reduce_tensor", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd._logdetgrad"], ["", "", "def", "_forward", "(", "self", ",", "x", ",", "logpx", "=", "None", ")", ":", "\n", "        ", "num_channels", "=", "x", ".", "size", "(", "-", "1", ")", "\n", "used_mean", "=", "self", ".", "running_mean", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "used_var", "=", "self", ".", "running_var", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# compute batch statistics", "\n", "            ", "x_t", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "num_channels", ",", "-", "1", ")", "\n", "batch_mean", "=", "torch", ".", "mean", "(", "x_t", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "sync", ":", "\n", "                ", "batch_ex2", "=", "torch", ".", "mean", "(", "x_t", "**", "2", ",", "dim", "=", "1", ")", "\n", "batch_mean", "=", "reduce_tensor", "(", "batch_mean", ")", "\n", "batch_ex2", "=", "reduce_tensor", "(", "batch_ex2", ")", "\n", "batch_var", "=", "batch_ex2", "-", "batch_mean", "**", "2", "\n", "", "else", ":", "\n", "                ", "batch_var", "=", "torch", ".", "var", "(", "x_t", ",", "dim", "=", "1", ")", "\n", "\n", "# moving average", "\n", "", "if", "self", ".", "bn_lag", ">", "0", ":", "\n", "                ", "used_mean", "=", "batch_mean", "-", "(", "1", "-", "self", ".", "bn_lag", ")", "*", "(", "batch_mean", "-", "used_mean", ".", "detach", "(", ")", ")", "\n", "used_mean", "/=", "(", "1.", "-", "self", ".", "bn_lag", "**", "(", "self", ".", "step", "[", "0", "]", "+", "1", ")", ")", "\n", "used_var", "=", "batch_var", "-", "(", "1", "-", "self", ".", "bn_lag", ")", "*", "(", "batch_var", "-", "used_var", ".", "detach", "(", ")", ")", "\n", "used_var", "/=", "(", "1.", "-", "self", ".", "bn_lag", "**", "(", "self", ".", "step", "[", "0", "]", "+", "1", ")", ")", "\n", "\n", "# update running estimates", "\n", "", "self", ".", "running_mean", "-=", "self", ".", "decay", "*", "(", "self", ".", "running_mean", "-", "batch_mean", ".", "data", ")", "\n", "self", ".", "running_var", "-=", "self", ".", "decay", "*", "(", "self", ".", "running_var", "-", "batch_var", ".", "data", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n", "# perform normalization", "\n", "", "used_mean", "=", "used_mean", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "x", ")", "\n", "used_var", "=", "used_var", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "x", ")", "\n", "\n", "y", "=", "(", "x", "-", "used_mean", ")", "*", "torch", ".", "exp", "(", "-", "0.5", "*", "torch", ".", "log", "(", "used_var", "+", "self", ".", "eps", ")", ")", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "weight", "=", "self", ".", "weight", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "x", ")", "\n", "bias", "=", "self", ".", "bias", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "x", ")", "\n", "y", "=", "y", "*", "torch", ".", "exp", "(", "weight", ")", "+", "bias", "\n", "\n", "", "if", "logpx", "is", "None", ":", "\n", "            ", "return", "y", "\n", "", "else", ":", "\n", "            ", "return", "y", ",", "logpx", "-", "self", ".", "_logdetgrad", "(", "x", ",", "used_var", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd._reverse": [[228, 245], ["used_mean.view().expand_as.view().expand_as.view().expand_as", "used_var.view().expand_as.view().expand_as.view().expand_as", "cnf.MovingBatchNormNd.weight.view().expand_as", "cnf.MovingBatchNormNd.bias.view().expand_as", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "used_mean.view().expand_as.view().expand_as.view", "used_var.view().expand_as.view().expand_as.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "cnf.MovingBatchNormNd.weight.view", "cnf.MovingBatchNormNd.bias.view", "cnf.MovingBatchNormNd._logdetgrad().sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "cnf.MovingBatchNormNd._logdetgrad"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd._logdetgrad"], ["", "", "def", "_reverse", "(", "self", ",", "y", ",", "logpy", "=", "None", ")", ":", "\n", "        ", "used_mean", "=", "self", ".", "running_mean", "\n", "used_var", "=", "self", ".", "running_var", "\n", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "weight", "=", "self", ".", "weight", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "y", ")", "\n", "bias", "=", "self", ".", "bias", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "y", ")", "\n", "y", "=", "(", "y", "-", "bias", ")", "*", "torch", ".", "exp", "(", "-", "weight", ")", "\n", "\n", "", "used_mean", "=", "used_mean", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "y", ")", "\n", "used_var", "=", "used_var", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand_as", "(", "y", ")", "\n", "x", "=", "y", "*", "torch", ".", "exp", "(", "0.5", "*", "torch", ".", "log", "(", "used_var", "+", "self", ".", "eps", ")", ")", "+", "used_mean", "\n", "\n", "if", "logpy", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "logpy", "+", "self", ".", "_logdetgrad", "(", "x", ",", "used_var", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd._logdetgrad": [[246, 252], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "cnf.MovingBatchNormNd.weight.view().expand", "cnf.MovingBatchNormNd.weight.view", "x.size"], "methods", ["None"], ["", "", "def", "_logdetgrad", "(", "self", ",", "x", ",", "used_var", ")", ":", "\n", "        ", "logdetgrad", "=", "-", "0.5", "*", "torch", ".", "log", "(", "used_var", "+", "self", ".", "eps", ")", "\n", "if", "self", ".", "affine", ":", "\n", "            ", "weight", "=", "self", ".", "weight", ".", "view", "(", "*", "self", ".", "shape", ")", ".", "expand", "(", "*", "x", ".", "size", "(", ")", ")", "\n", "logdetgrad", "+=", "weight", "\n", "", "return", "logdetgrad", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNormNd.__repr__": [[253, 257], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "'{name}({num_features}, eps={eps}, decay={decay}, bn_lag={bn_lag},'", "\n", "' affine={affine})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNorm1d.shape": [[274, 277], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "1", ",", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.MovingBatchNorm1d.forward": [[278, 281], ["cnf.MovingBatchNormNd.forward"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "node_attr", ",", "edge_attr", ",", "edge_index", ",", "logpx", "=", "None", ",", "integration_times", "=", "None", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "ret", "=", "super", "(", "MovingBatchNorm1d", ",", "self", ")", ".", "forward", "(", "x", ",", "logpx", "=", "logpx", ",", "reverse", "=", "reverse", ")", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf._flip": [[89, 93], ["torch.arange", "torch.arange", "torch.arange", "x.dim", "slice", "x.size", "tuple"], "function", ["None"], ["", "", "def", "_flip", "(", "x", ",", "dim", ")", ":", "\n", "    ", "indices", "=", "[", "slice", "(", "None", ")", "]", "*", "x", ".", "dim", "(", ")", "\n", "indices", "[", "dim", "]", "=", "torch", ".", "arange", "(", "x", ".", "size", "(", "dim", ")", "-", "1", ",", "-", "1", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "x", "[", "tuple", "(", "indices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.reduce_tensor": [[135, 143], ["tensor.clone", "torch.all_reduce", "torch.get_world_size"], "function", ["None"], ["", "", "", "def", "reduce_tensor", "(", "tensor", ",", "world_size", "=", "None", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "if", "world_size", "is", "None", ":", "\n", "        ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "", "rt", "/=", "world_size", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.stable_var": [[260, 271], ["x.mean.view", "torch.pow", "torch.pow", "torch.pow", "var.view.view", "x.mean", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "", "def", "stable_var", "(", "x", ",", "mean", "=", "None", ",", "dim", "=", "1", ")", ":", "\n", "    ", "if", "mean", "is", "None", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "mean", "=", "mean", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "res", "=", "torch", ".", "pow", "(", "x", "-", "mean", ",", "2", ")", "\n", "max_sqr", "=", "torch", ".", "max", "(", "res", ",", "dim", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "var", "=", "torch", ".", "mean", "(", "res", "/", "max_sqr", ",", "1", ",", "keepdim", "=", "True", ")", "*", "max_sqr", "\n", "var", "=", "var", ".", "view", "(", "-", "1", ")", "\n", "# change nan to zero", "\n", "var", "[", "var", "!=", "var", "]", "=", "0", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.IgnoreLinear.__init__": [[8, 11], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "IgnoreLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.IgnoreLinear.forward": [[12, 14], ["odemlp.IgnoreLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ConcatLinear.__init__": [[17, 20], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ConcatLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", "+", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ConcatLinear.forward": [[21, 26], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "odemlp.ConcatLinear._layer", "x.dim", "context.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "x.size", "context.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ",", "c", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "context", "=", "context", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "x", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "", "x_context", "=", "torch", ".", "cat", "(", "(", "x", ",", "context", ")", ",", "dim", "=", "2", ")", "\n", "return", "self", ".", "_layer", "(", "x_context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ConcatLinear_v2.__init__": [[29, 33], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ConcatLinear_v2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper_bias", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ConcatLinear_v2.forward": [[34, 39], ["odemlp.ConcatLinear_v2._hyper_bias", "x.dim", "bias.unsqueeze.unsqueeze.unsqueeze", "odemlp.ConcatLinear_v2._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "bias", "=", "self", ".", "_hyper_bias", "(", "context", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "bias", "=", "bias", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "self", ".", "_layer", "(", "x", ")", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.SquashLinear.__init__": [[42, 46], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "SquashLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.SquashLinear.forward": [[47, 52], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "odemlp.SquashLinear._hyper", "x.dim", "gate.unsqueeze.unsqueeze.unsqueeze", "odemlp.SquashLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "_hyper", "(", "context", ")", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "gate", "=", "gate", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "self", ".", "_layer", "(", "x", ")", "*", "gate", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ScaleLinear.__init__": [[55, 59], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ScaleLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ScaleLinear.forward": [[60, 65], ["odemlp.ScaleLinear._hyper", "x.dim", "gate.unsqueeze.unsqueeze.unsqueeze", "odemlp.ScaleLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "gate", "=", "self", ".", "_hyper", "(", "context", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "gate", "=", "gate", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "self", ".", "_layer", "(", "x", ")", "*", "gate", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ConcatSquashLinear.__init__": [[68, 73], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ConcatSquashLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper_bias", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "_hyper_gate", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ConcatSquashLinear.forward": [[74, 82], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "odemlp.ConcatSquashLinear._hyper_bias", "odemlp.ConcatSquashLinear._hyper_gate", "x.dim", "gate.unsqueeze.unsqueeze.unsqueeze", "bias.unsqueeze.unsqueeze.unsqueeze", "odemlp.ConcatSquashLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "_hyper_gate", "(", "context", ")", ")", "\n", "bias", "=", "self", ".", "_hyper_bias", "(", "context", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "gate", "=", "gate", ".", "unsqueeze", "(", "1", ")", "\n", "bias", "=", "bias", ".", "unsqueeze", "(", "1", ")", "\n", "", "ret", "=", "self", ".", "_layer", "(", "x", ")", "*", "gate", "+", "bias", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ConcatScaleLinear.__init__": [[85, 90], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_c", ")", ":", "\n", "        ", "super", "(", "ConcatScaleLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "_hyper_bias", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ",", "bias", "=", "False", ")", "\n", "self", ".", "_hyper_gate", "=", "nn", ".", "Linear", "(", "1", "+", "dim_c", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ConcatScaleLinear.forward": [[91, 99], ["odemlp.ConcatScaleLinear._hyper_gate", "odemlp.ConcatScaleLinear._hyper_bias", "x.dim", "gate.unsqueeze.unsqueeze.unsqueeze", "bias.unsqueeze.unsqueeze.unsqueeze", "odemlp.ConcatScaleLinear._layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "context", ",", "x", ")", ":", "\n", "        ", "gate", "=", "self", ".", "_hyper_gate", "(", "context", ")", "\n", "bias", "=", "self", ".", "_hyper_bias", "(", "context", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "gate", "=", "gate", ".", "unsqueeze", "(", "1", ")", "\n", "bias", "=", "bias", ".", "unsqueeze", "(", "1", ")", "\n", "", "ret", "=", "self", ".", "_layer", "(", "x", ")", "*", "gate", "+", "bias", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.Swish.__init__": [[102, 105], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.Swish.forward": [[106, 108], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "self", ".", "beta", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.Lambda.__init__": [[111, 114], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "f", ")", ":", "\n", "        ", "super", "(", "Lambda", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f", "=", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.Lambda.forward": [[115, 117], ["odemlp.Lambda.f"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "f", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__": [[135, 163], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "base_layer", "layers.append", "activation_fns.append", "list", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.__init__"], ["def", "__init__", "(", "self", ",", "hidden_dims", ",", "input_shape", ",", "context_dim", "=", "0", ",", "layer_type", "=", "\"concatsquash\"", ",", "nonlinearity", "=", "\"softplus\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "base_layer", "=", "{", "\n", "\"ignore\"", ":", "IgnoreLinear", ",", "\n", "\"squash\"", ":", "SquashLinear", ",", "\n", "\"scale\"", ":", "ScaleLinear", ",", "\n", "\"concat\"", ":", "ConcatLinear", ",", "\n", "\"concat_v2\"", ":", "ConcatLinear_v2", ",", "\n", "\"concatsquash\"", ":", "ConcatSquashLinear", ",", "\n", "\"concatscale\"", ":", "ConcatScaleLinear", ",", "\n", "}", "[", "layer_type", "]", "\n", "\n", "# build models and add them", "\n", "layers", "=", "[", "]", "\n", "activation_fns", "=", "[", "]", "\n", "hidden_shape", "=", "input_shape", "\n", "\n", "for", "dim_out", "in", "(", "hidden_dims", "+", "(", "input_shape", "[", "0", "]", ",", ")", ")", ":", "\n", "            ", "layer_kwargs", "=", "{", "}", "\n", "layer", "=", "base_layer", "(", "hidden_shape", "[", "0", "]", ",", "dim_out", ",", "context_dim", ",", "**", "layer_kwargs", ")", "\n", "layers", ".", "append", "(", "layer", ")", "\n", "activation_fns", ".", "append", "(", "NONLINEARITIES", "[", "nonlinearity", "]", ")", "\n", "\n", "hidden_shape", "=", "list", "(", "copy", ".", "copy", "(", "hidden_shape", ")", ")", "\n", "hidden_shape", "[", "0", "]", "=", "dim_out", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "activation_fns", "=", "nn", ".", "ModuleList", "(", "activation_fns", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.odemlp.ODEmlp.forward": [[164, 176], ["enumerate", "layer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "context.view", "y.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ",", "y", ",", "context", "=", "None", ")", ":", "\n", "        ", "dx", "=", "y", "\n", "for", "l", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "if", "context", "is", "not", "None", ":", "\n", "                ", "tc", "=", "torch", ".", "cat", "(", "[", "t", ",", "context", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "tc", "=", "t", "\n", "", "dx", "=", "layer", "(", "tc", ",", "dx", ")", "\n", "# if not last layer, use nonlinearity", "\n", "if", "l", "<", "len", "(", "self", ".", "layers", ")", "-", "1", ":", "\n", "                ", "dx", "=", "self", ".", "activation_fns", "[", "l", "]", "(", "dx", ")", "\n", "", "", "return", "dx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.utils.count_nfe": [[3, 17], ["AccNumEvals", "model.apply", "isinstance", "module.num_evals"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.spectral_norm.SpectralNorm.apply", "home.repos.pwc.inspect_result.MinkaiXu_ConfVAE-ICML21.cnf_edge.cnf.CNF.num_evals"], ["def", "count_nfe", "(", "model", ")", ":", "\n", "\n", "    ", "class", "AccNumEvals", "(", "object", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "num_evals", "=", "0", "\n", "\n", "", "def", "__call__", "(", "self", ",", "module", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "CNF", ")", ":", "\n", "                ", "self", ".", "num_evals", "+=", "module", ".", "num_evals", "(", ")", "\n", "\n", "", "", "", "accumulator", "=", "AccNumEvals", "(", ")", "\n", "model", ".", "apply", "(", "accumulator", ")", "\n", "return", "accumulator", ".", "num_evals", "\n", "", ""]]}