{"home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.config.get_brats_folder": [[6, 20], ["print", "print", "print"], "function", ["None"], ["def", "get_brats_folder", "(", "on", "=", "\"val\"", ",", "input_dir", "=", "\"/input\"", ")", ":", "\n", "    ", "BRATS_VAL_FOLDER", "=", "input_dir", "\n", "BRATS_TEST_FOLDER", "=", "input_dir", "\n", "BRATS_TRAIN_FOLDER", "=", "input_dir", "\n", "\n", "if", "on", "==", "\"test\"", ":", "\n", "        ", "print", "(", "f\"Test Input Directory {input_dir}\"", ")", "\n", "return", "BRATS_TEST_FOLDER", "\n", "", "elif", "on", "==", "\"val\"", ":", "\n", "        ", "print", "(", "f\"Validation Input Directory {input_dir}\"", ")", "\n", "return", "BRATS_VAL_FOLDER", "\n", "", "elif", "on", "==", "\"train\"", ":", "\n", "        ", "print", "(", "f\"Train Input Directory {input_dir}\"", ")", "\n", "return", "BRATS_TRAIN_FOLDER", "\n", "", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.train.main": [[63, 266], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "pathlib.Path", "args.save_folder.mkdir", "args.seg_folder.mkdir", "args.save_folder.resolve", "utils.save_args", "torch.utils.tensorboard.SummaryWriter", "print", "getattr", "getattr.", "print", "print", "print", "model_1.cuda.cuda", "loss.EDiceLoss().cuda", "print", "model_1.cuda.parameters", "model.critic.Discriminator", "critic.cuda.cuda", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "dataset.brats_train.get_datasets", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "torch.cuda.amp.GradScaler", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "print", "range", "str", "model_file.open", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "critic.cuda.parameters", "len", "len", "pandas.DataFrame.from_records", "print", "pd.DataFrame.from_records.to_csv", "utils.reload_ckpt_bis", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.get_norm_layer", "loss.EDiceLoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "time.perf_counter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "len", "utils.ProgressMeter", "time.perf_counter", "learning_rate.poly_lr.poly_lr", "enumerate", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.perf_counter", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "utils.count_parameters", "print", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "zip", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "utils.AverageMeter.update", "torch.optim.AdamW.zero_grad", "model_1.cuda.", "EDiceLoss().cuda.", "loss.vat.vat_loss().cuda", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.optim.AdamW.zero_grad", "torch.utils.tensorboard.SummaryWriter.add_scalar", "gc.collect", "torch.optim.RMSprop.zero_grad", "torch.autograd.Variable.detach", "torch.autograd.Variable", "torch.autograd.Variable.backward", "torch.optim.RMSprop.step", "gc.collect", "utils.AverageMeter.update", "time.perf_counter", "utils.ProgressMeter.display", "train.step", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.perf_counter", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "[].float", "[].float", "torch.autograd.Variable", "torch.autograd.Variable", "inputs_S1.cuda", "labels_S1.cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.adversarial_loss_gen.adv_loss_critic_v1", "loss_.item", "numpy.isnan", "utils.AverageMeter.update", "print", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "model_1.cuda.state_dict", "utils.save_checkpoint", "str", "str", "time.perf_counter", "loss.vat.vat_loss", "critic.cuda.", "critic.cuda.", "loss_.item", "loss_.item", "torch.cuda.amp.GradScaler.scale", "time.perf_counter", "dict", "abs", "torch.optim.AdamW.state_dict", "torch.optim.lr_scheduler.ReduceLROnPlateau.state_dict"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.save_args", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.get_datasets", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.reload_ckpt_bis", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.get_norm_layer", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.learning_rate.poly_lr.poly_lr", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.count_parameters", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.train.step", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.train.step", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.ProgressMeter.display", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.train.step", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.adversarial_loss_gen.adv_loss_critic_v1", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.train.step", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.vat.vat_loss"], ["def", "main", "(", "args", ")", ":", "\n", "# setup", "\n", "    ", "ngpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "f\"Working with {ngpus} GPUs\"", ")", "\n", "\n", "args", ".", "exp_name", "=", "\"brats_2021\"", ".", "format", "(", "args", ".", "lambda_adv", ",", "args", ".", "lambda_vat", ")", "\n", "args", ".", "save_folder", "=", "pathlib", ".", "Path", "(", "f\"./runs/{args.exp_name}/model_1\"", ")", "\n", "args", ".", "save_folder", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "args", ".", "seg_folder", "=", "args", ".", "save_folder", "/", "\"segs\"", "\n", "args", ".", "seg_folder", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "args", ".", "save_folder", "=", "args", ".", "save_folder", ".", "resolve", "(", ")", "\n", "save_args", "(", "args", ")", "\n", "t_writer_1", "=", "SummaryWriter", "(", "str", "(", "args", ".", "save_folder", ")", ")", "\n", "\n", "# Create model", "\n", "print", "(", "f\"Creating {args.arch}\"", ")", "\n", "\n", "model_maker", "=", "getattr", "(", "model", ",", "args", ".", "arch", ")", "\n", "model_1", "=", "model_maker", "(", "\n", "4", ",", "3", ",", "\n", "width", "=", "args", ".", "width", ",", "norm_layer", "=", "get_norm_layer", "(", "args", ".", "norm_layer", ")", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "\n", "print", "(", "f\"total number of trainable parameters {count_parameters(model_1)}\"", ")", "\n", "print", "(", "f\"scalar constant agreement loss {args.lambda_vat}\"", ")", "\n", "print", "(", "f\"scalar constant adversarial loss {args.lambda_adv}\"", ")", "\n", "\n", "model_1", "=", "model_1", ".", "cuda", "(", ")", "\n", "\n", "model_file", "=", "args", ".", "save_folder", "/", "\"model.txt\"", "\n", "with", "model_file", ".", "open", "(", "\"w\"", ")", "as", "f", ":", "\n", "        ", "print", "(", "model_1", ",", "file", "=", "f", ")", "\n", "\n", "", "criterion", "=", "EDiceLoss", "(", ")", ".", "cuda", "(", ")", "\n", "metric", "=", "criterion", ".", "metric", "\n", "print", "(", "metric", ")", "\n", "params", "=", "model_1", ".", "parameters", "(", ")", "\n", "\n", "if", "args", ".", "optim", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "0", ")", "\n", "", "elif", "args", ".", "optim", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.99", ",", "nesterov", "=", "True", ")", "\n", "", "elif", "args", ".", "optim", "==", "\"adamw\"", ":", "\n", "        ", "print", "(", "f\"weight decay argument will not be used. Default is 11e-2\"", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "params", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "", "critic", "=", "Discriminator", "(", ")", "\n", "critic", "=", "critic", ".", "cuda", "(", ")", "\n", "dis_optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "critic", ".", "parameters", "(", ")", ",", "args", ".", "lr_dis", ")", "\n", "\n", "full_train_dataset", ",", "l_val_dataset", ",", "bench_dataset", "=", "get_datasets", "(", "args", ".", "seed", ",", "fold_number", "=", "args", ".", "fold", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "full_train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "l_val_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "collate_fn", "=", "determinist_collate", ")", "\n", "\n", "print", "(", "\"Val dataset number of batch:\"", ",", "len", "(", "val_loader", ")", ")", "\n", "print", "(", "\"Full Labeled Train dataset number of batch:\"", ",", "len", "(", "train_loader", ")", ")", "\n", "\n", "# create grad scaler", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "\n", "# Actual Train loop", "\n", "best_1", "=", "np", ".", "inf", "\n", "patients_perf", "=", "[", "]", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "'min'", ")", "\n", "\n", "print", "(", "\"start training now!\"", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "try", ":", "\n", "# do_epoch for one epoch", "\n", "            ", "ts", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "# Setup", "\n", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses_", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "\n", "mode", "=", "\"train\"", "if", "model_1", ".", "training", "else", "\"val\"", "\n", "batch_per_epoch", "=", "len", "(", "train_loader", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "batch_per_epoch", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses_", "]", ",", "\n", "prefix", "=", "f\"{mode} Epoch: [{epoch}]\"", ")", "\n", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "metrics", "=", "[", "]", "\n", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "poly_lr", "(", "epoch", ",", "args", ".", "epochs", ",", "args", ".", "lr", ",", "0.9", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "zip", "(", "train_loader", ")", ")", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "perf_counter", "(", ")", "-", "end", ")", "\n", "\n", "inputs_S1", ",", "labels_S1", "=", "batch", "[", "0", "]", "[", "\"image\"", "]", ".", "float", "(", ")", ",", "batch", "[", "0", "]", "[", "\"label\"", "]", ".", "float", "(", ")", "\n", "\n", "inputs_S1", ",", "labels_S1", "=", "Variable", "(", "inputs_S1", ")", ",", "Variable", "(", "labels_S1", ")", "\n", "inputs_S1", ",", "labels_S1", "=", "inputs_S1", ".", "cuda", "(", ")", ",", "labels_S1", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "segs_S1", "=", "model_1", "(", "inputs_S1", ")", "\n", "\n", "loss_sup", "=", "criterion", "(", "segs_S1", ",", "labels_S1", ")", "\n", "loss_vat", "=", "vat_loss", "(", "model_1", ",", "inputs_S1", ",", "labels_S1", ",", "eps", "=", "2.5", ")", ".", "cuda", "(", ")", "\n", "\n", "critic_segs_1", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "torch", ".", "sigmoid", "(", "critic", "(", "segs_S1", ")", ")", ",", "\n", "(", "segs_S1", ".", "shape", "[", "2", "]", ",", "segs_S1", ".", "shape", "[", "3", "]", ",", "segs_S1", ".", "shape", "[", "4", "]", ")", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "critic_segs_3", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "torch", ".", "sigmoid", "(", "critic", "(", "labels_S1", ")", ")", ",", "\n", "(", "labels_S1", ".", "shape", "[", "2", "]", ",", "labels_S1", ".", "shape", "[", "3", "]", ",", "labels_S1", ".", "shape", "[", "4", "]", ")", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "adversarial_loss", "=", "0.5", "*", "adv_loss_critic_v1", "(", "critic_segs_1", ",", "critic_segs_3", ",", "labels_S1", ")", "\n", "\n", "loss_", "=", "loss_sup", "+", "args", ".", "lambda_vat", "*", "abs", "(", "loss_vat", ")", "+", "args", ".", "lambda_adv", "*", "adversarial_loss", "\n", "\n", "t_writer_1", ".", "add_scalar", "(", "f\"Loss/{mode}{''}\"", ",", "\n", "loss_", ".", "item", "(", ")", ",", "\n", "global_step", "=", "batch_per_epoch", "*", "epoch", "+", "i", ")", "\n", "\n", "# measure accuracy and record loss_", "\n", "if", "not", "np", ".", "isnan", "(", "loss_", ".", "item", "(", ")", ")", ":", "\n", "                    ", "losses_", ".", "update", "(", "loss_", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"NaN in model loss!!\"", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "scaler", ".", "scale", "(", "loss_", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "t_writer_1", ".", "add_scalar", "(", "\"lr\"", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "global_step", "=", "epoch", "*", "batch_per_epoch", "+", "i", ")", "\n", "\n", "del", "critic_segs_1", ",", "critic_segs_3", ",", "loss_", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "dis_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "adversarial_loss", "=", "adversarial_loss", ".", "detach", "(", ")", "\n", "adversarial_loss", "=", "Variable", "(", "adversarial_loss", ",", "requires_grad", "=", "True", ")", "\n", "\n", "adversarial_loss", ".", "backward", "(", ")", "\n", "dis_optimizer", ".", "step", "(", ")", "\n", "\n", "del", "segs_S1", ",", "labels_S1", ",", "adversarial_loss", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "perf_counter", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "# Display progress", "\n", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "t_writer_1", ".", "add_scalar", "(", "f\"SummaryLoss/train\"", ",", "losses_", ".", "avg", ",", "epoch", ")", "\n", "\n", "te", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "f\"Train Epoch done in {te - ts} s\"", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# Validate at the end of epoch every val step", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "val", "==", "0", ":", "\n", "                ", "validation_loss_1", "=", "step", "(", "val_loader", ",", "model_1", ",", "criterion", ",", "metric", ",", "epoch", ",", "t_writer_1", ",", "\n", "save_folder", "=", "args", ".", "save_folder", ",", "\n", "patients_perf", "=", "patients_perf", ")", "\n", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "                    ", "scheduler", ".", "step", "(", "validation_loss_1", ")", "\n", "\n", "", "t_writer_1", ".", "add_scalar", "(", "f\"SummaryLoss\"", ",", "validation_loss_1", ",", "epoch", ")", "\n", "\n", "if", "validation_loss_1", "<", "best_1", ":", "\n", "                    ", "best_1", "=", "validation_loss_1", "\n", "model_dict", "=", "model_1", ".", "state_dict", "(", ")", "\n", "save_checkpoint", "(", "\n", "dict", "(", "\n", "epoch", "=", "epoch", ",", "arch", "=", "args", ".", "arch", ",", "\n", "state_dict", "=", "model_dict", ",", "\n", "optimizer", "=", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "scheduler", "=", "scheduler", ".", "state_dict", "(", ")", ",", "\n", ")", ",", "\n", "save_folder", "=", "args", ".", "save_folder", ",", ")", "\n", "\n", "", "ts", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "f\"Val epoch done in {ts - te} s\"", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "print", "(", "\"Stopping training loop, doing benchmark\"", ")", "\n", "break", "\n", "\n", "", "", "try", ":", "\n", "        ", "df_individual_perf", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "patients_perf", ")", "\n", "print", "(", "df_individual_perf", ")", "\n", "df_individual_perf", ".", "to_csv", "(", "f'{str(args.save_folder)}/patients_indiv_perf.csv'", ")", "\n", "reload_ckpt_bis", "(", "f'{str(args.save_folder)}/model_best.pth.tar'", ",", "model_1", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "\"Stopping right now!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.train.step": [[268, 328], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "len", "utils.ProgressMeter", "time.perf_counter", "enumerate", "utils.save_metrics", "writer.add_scalar", "utils.AverageMeter.update", "batch[].float", "targets.cuda.cuda", "batch[].float", "inputs.cuda.cuda", "model.eval", "writer.add_scalar", "metric", "metrics.extend", "utils.AverageMeter.update", "time.perf_counter", "utils.ProgressMeter.display", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "criterion", "patients_perf.append", "criterion.item", "numpy.isnan", "utils.AverageMeter.update", "print", "time.perf_counter", "dict", "criterion.item", "criterion.item", "time.perf_counter", "criterion.item"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.save_metrics", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.metric", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.ProgressMeter.display", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.update"], ["", "", "def", "step", "(", "data_loader", ",", "model", ",", "criterion", ":", "EDiceLoss", ",", "metric", ",", "epoch", ",", "writer", ",", "scaler", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "save_folder", "=", "None", ",", "patients_perf", "=", "None", ")", ":", "\n", "# Setup", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "\n", "mode", "=", "\"val\"", "\n", "batch_per_epoch", "=", "len", "(", "data_loader", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "batch_per_epoch", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", "]", ",", "\n", "prefix", "=", "f\"{mode} Epoch: [{epoch}]\"", ")", "\n", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "metrics", "=", "[", "]", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "perf_counter", "(", ")", "-", "end", ")", "\n", "\n", "targets", "=", "batch", "[", "\"label\"", "]", ".", "float", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "inputs", "=", "batch", "[", "\"image\"", "]", ".", "float", "(", ")", "\n", "patient_id", "=", "batch", "[", "\"patient_id\"", "]", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "segs", "=", "model", "(", "inputs", ")", "\n", "loss_", "=", "criterion", "(", "segs", ",", "targets", ")", "\n", "\n", "", "if", "patients_perf", "is", "not", "None", ":", "\n", "            ", "patients_perf", ".", "append", "(", "\n", "dict", "(", "id", "=", "patient_id", "[", "0", "]", ",", "epoch", "=", "epoch", ",", "split", "=", "mode", ",", "loss", "=", "loss_", ".", "item", "(", ")", ")", "\n", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "f\"Loss/{mode}{''}\"", ",", "\n", "loss_", ".", "item", "(", ")", ",", "\n", "global_step", "=", "batch_per_epoch", "*", "epoch", "+", "i", ")", "\n", "\n", "# measure accuracy and record loss_", "\n", "if", "not", "np", ".", "isnan", "(", "loss_", ".", "item", "(", ")", ")", ":", "\n", "            ", "losses", ".", "update", "(", "loss_", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"NaN in model loss!!\"", ")", "\n", "\n", "", "metric_", "=", "metric", "(", "segs", ",", "targets", ")", "\n", "metrics", ".", "extend", "(", "metric_", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "perf_counter", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "perf_counter", "(", ")", "\n", "# Display progress", "\n", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "save_metrics", "(", "epoch", ",", "metrics", ",", "writer", ",", "epoch", ",", "False", ",", "save_folder", ")", "\n", "writer", ".", "add_scalar", "(", "f\"SummaryLoss/val\"", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "\n", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.test.generate_segmentations": [[36, 79], ["model.cuda.cuda", "enumerate", "dataset.batch_utils.pad_batch1_to_compatible_size", "inputs.cuda.cuda", "SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "pre_segs[].cpu", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.logical_and", "numpy.logical_and", "numpy.zeros", "sitk.GetImageFromArray.astype", "SimpleITK.GetImageFromArray", "SimpleITK.ReadImage", "sitk.GetImageFromArray.CopyInformation", "print", "SimpleITK.WriteImage", "torch.cuda.amp.autocast", "segs[].numpy", "numpy.logical_not", "numpy.logical_not", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.cuda.", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "slice", "slice", "slice"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.batch_utils.pad_batch1_to_compatible_size"], ["def", "generate_segmentations", "(", "data_loader", ",", "model", ",", "args", ")", ":", "\n", "    ", "metrics_list", "=", "[", "]", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "inputs", "=", "batch", "[", "\"image\"", "]", "[", "0", "]", "\n", "patient_id", "=", "batch", "[", "\"patient_id\"", "]", "[", "0", "]", "\n", "ref_path", "=", "batch", "[", "\"seg_path\"", "]", "[", "0", "]", "\n", "crops_idx", "=", "batch", "[", "\"crop_indexes\"", "]", "\n", "inputs", ",", "pads", "=", "pad_batch1_to_compatible_size", "(", "inputs", ")", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "ref_seg_img", "=", "sitk", ".", "ReadImage", "(", "ref_path", ")", "\n", "ref_seg", "=", "sitk", ".", "GetArrayFromImage", "(", "ref_seg_img", ")", "\n", "\n", "with", "autocast", "(", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pre_segs", "=", "model", "(", "inputs", ")", "\n", "pre_segs", "=", "torch", ".", "sigmoid", "(", "pre_segs", ")", "\n", "\n", "\n", "# remove pads", "\n", "", "", "maxz", ",", "maxy", ",", "maxx", "=", "pre_segs", ".", "size", "(", "2", ")", "-", "pads", "[", "0", "]", ",", "pre_segs", ".", "size", "(", "3", ")", "-", "pads", "[", "1", "]", ",", "pre_segs", ".", "size", "(", "4", ")", "-", "pads", "[", "2", "]", "\n", "pre_segs", "=", "pre_segs", "[", ":", ",", ":", ",", "0", ":", "maxz", ",", "0", ":", "maxy", ",", "0", ":", "maxx", "]", ".", "cpu", "(", ")", "\n", "segs", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "ref_seg", ".", "shape", "[", "0", "]", ",", "ref_seg", ".", "shape", "[", "1", "]", ",", "ref_seg", ".", "shape", "[", "2", "]", ")", ")", "\n", "segs", "[", "0", ",", ":", ",", "slice", "(", "*", "crops_idx", "[", "0", "]", ")", ",", "slice", "(", "*", "crops_idx", "[", "1", "]", ")", ",", "slice", "(", "*", "crops_idx", "[", "2", "]", ")", "]", "=", "pre_segs", "[", "0", "]", "\n", "segs", "=", "segs", "[", "0", "]", ".", "numpy", "(", ")", ">", "0.5", "\n", "\n", "et", "=", "segs", "[", "0", "]", "\n", "net", "=", "np", ".", "logical_and", "(", "segs", "[", "1", "]", ",", "np", ".", "logical_not", "(", "et", ")", ")", "\n", "ed", "=", "np", ".", "logical_and", "(", "segs", "[", "2", "]", ",", "np", ".", "logical_not", "(", "segs", "[", "1", "]", ")", ")", "\n", "labelmap", "=", "np", ".", "zeros", "(", "segs", "[", "0", "]", ".", "shape", ")", "\n", "labelmap", "[", "et", "]", "=", "4", "\n", "labelmap", "[", "net", "]", "=", "1", "\n", "labelmap", "[", "ed", "]", "=", "2", "\n", "labelmap", "=", "labelmap", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "labelmap", "=", "sitk", ".", "GetImageFromArray", "(", "labelmap", ")", "\n", "\n", "ref_seg_img", "=", "sitk", ".", "ReadImage", "(", "ref_path", ")", "\n", "labelmap", ".", "CopyInformation", "(", "ref_seg_img", ")", "\n", "print", "(", "f\"Writing {args.seg_folder}/{patient_id}.nii.gz\"", ")", "\n", "sitk", ".", "WriteImage", "(", "labelmap", ",", "f\"{args.seg_folder}/{patient_id}.nii.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.test.main": [[81, 112], ["random.seed", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "pathlib.Path", "args.seg_folder.mkdir", "getattr", "getattr.", "print", "dataset.brats.get_datasets_val", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "utils.reload_ckpt_bis", "test.generate_segmentations", "RuntimeWarning", "len", "model.get_norm_layer", "utils.count_parameters", "str"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.get_datasets_val", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.reload_ckpt_bis", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.generate_segmentations", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.get_norm_layer", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.count_parameters"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "# setup", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "ngpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "ngpus", "==", "0", ":", "\n", "        ", "raise", "RuntimeWarning", "(", "\"This will not be able to run on CPU only\"", ")", "\n", "", "print", "(", "f\"Working with {ngpus} GPUs\"", ")", "\n", "\n", "# Give the folder path of best model", "\n", "args", ".", "exp_name", "=", "\"brats_2021\"", "\n", "args", ".", "save_folder", "=", "pathlib", ".", "Path", "(", "f\"./runs/{args.exp_name}/model_1\"", ")", "\n", "\n", "args", ".", "seg_folder", "=", "args", ".", "save_folder", "/", "\"segs\"", "\n", "args", ".", "seg_folder", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Create model", "\n", "model_maker", "=", "getattr", "(", "model", ",", "args", ".", "arch", ")", "\n", "model_1", "=", "model_maker", "(", "\n", "4", ",", "3", ",", "\n", "width", "=", "args", ".", "width", ",", "norm_layer", "=", "get_norm_layer", "(", "args", ".", "norm_layer", ")", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "\n", "print", "(", "f\"total number of trainable parameters {count_parameters(model_1)}\"", ")", "\n", "\n", "bench_dataset", "=", "get_datasets_val", "(", ")", "\n", "bench_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "bench_dataset", ",", "batch_size", "=", "1", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "print", "(", "\"Bench Test dataset number of batch:\"", ",", "len", "(", "bench_loader", ")", ")", "\n", "\n", "reload_ckpt_bis", "(", "f'{str(args.save_folder)}/model_best.pth.tar'", ",", "model_1", ")", "\n", "\n", "generate_segmentations", "(", "bench_loader", ",", "model_1", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.__init__": [[50, 58], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.reset": [[59, 64], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.update": [[65, 70], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.AverageMeter.__str__": [[71, 74], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.ProgressMeter.__init__": [[77, 81], ["utils.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.ProgressMeter.display": [[82, 86], ["print", "str", "utils.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.ProgressMeter._get_batch_fmtstr": [[87, 92], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_batch_fmtstr", "(", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.save_args": [[19, 28], ["vars().copy", "open", "yaml.dump", "vars"], "function", ["None"], ["def", "save_args", "(", "args", ")", ":", "\n", "    ", "\"\"\"Save parsed arguments to config file.\n    \"\"\"", "\n", "config", "=", "vars", "(", "args", ")", ".", "copy", "(", ")", "\n", "del", "config", "[", "'save_folder'", "]", "\n", "del", "config", "[", "'seg_folder'", "]", "\n", "config_file", "=", "args", ".", "save_folder", "/", "(", "args", ".", "exp_name", "+", "\".yaml\"", ")", "\n", "with", "open", "(", "config_file", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "yaml", ".", "dump", "(", "config", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.master_do": [[30, 39], ["torch.distributed.get_rank", "func", "func"], "function", ["None"], ["", "", "def", "master_do", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Help calling function only on the rank0 process id ddp\"\"\"", "\n", "try", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "except", "AssertionError", ":", "\n", "# not in DDP setting, just do as usual", "\n", "        ", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.save_checkpoint": [[41, 45], ["torch.save", "str"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ":", "dict", ",", "save_folder", ":", "pathlib", ".", "Path", ")", ":", "\n", "    ", "\"\"\"Save Training state.\"\"\"", "\n", "best_filename", "=", "f'{str(save_folder)}/model_best.pth.tar'", "\n", "torch", ".", "save", "(", "state", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.reload_ckpt": [[95, 107], ["os.path.isfile", "print", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "scheduler.load_state_dict", "print", "ValueError"], "function", ["None"], ["", "", "def", "reload_ckpt", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.reload_ckpt_bis": [[109, 126], ["os.path.isfile", "print", "ValueError", "torch.load", "model.load_state_dict", "print", "optimizer.load_state_dict", "print", "model.load_state_dict", "torch.load"], "function", ["None"], ["", "", "def", "reload_ckpt_bis", "(", "ckpt", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "ckpt", ")", ":", "\n", "        ", "print", "(", "f\"=> loading checkpoint {ckpt}\"", ")", "\n", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "ckpt", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "if", "optimizer", ":", "\n", "                ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "print", "(", "f\"=> loaded checkpoint '{ckpt}' (epoch {start_epoch})\"", ")", "\n", "return", "start_epoch", "\n", "", "except", "RuntimeError", ":", "\n", "# TO account for checkpoint from Alex nets", "\n", "            ", "print", "(", "\"Loading model Alex style\"", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"=> no checkpoint found at '{ckpt}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.count_parameters": [[128, 130], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.calculate_metrics": [[132, 192], ["pprint.PrettyPrinter", "enumerate", "dict", "pprint.PrettyPrinter.pprint", "metrics_list.append", "numpy.sum", "print", "numpy.sum", "numpy.sum", "numpy.argwhere", "numpy.argwhere", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and", "scipy.spatial.distance.directed_hausdorff", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.sum", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not"], "function", ["None"], ["", "def", "calculate_metrics", "(", "preds", ",", "targets", ",", "patient", ",", "tta", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    Parameters\n    ----------\n    preds:\n        torch tensor of size 1*C*Z*Y*X\n    targets:\n        torch tensor of same shape\n    patient :\n        The patient ID\n    tta:\n        is tta performed for this run\n    \"\"\"", "\n", "pp", "=", "pprint", ".", "PrettyPrinter", "(", "indent", "=", "4", ")", "\n", "assert", "preds", ".", "shape", "==", "targets", ".", "shape", ",", "\"Preds and targets do not have the same size\"", "\n", "\n", "labels", "=", "[", "\"ET\"", ",", "\"TC\"", ",", "\"WT\"", "]", "\n", "\n", "metrics_list", "=", "[", "]", "\n", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "metrics", "=", "dict", "(", "\n", "patient_id", "=", "patient", ",", "\n", "label", "=", "label", ",", "\n", "tta", "=", "tta", ",", "\n", ")", "\n", "\n", "if", "np", ".", "sum", "(", "targets", "[", "i", "]", ")", "==", "0", ":", "\n", "            ", "print", "(", "f\"{label} not present for {patient}\"", ")", "\n", "sens", "=", "np", ".", "nan", "\n", "dice", "=", "1", "if", "np", ".", "sum", "(", "preds", "[", "i", "]", ")", "==", "0", "else", "0", "\n", "tn", "=", "np", ".", "sum", "(", "l_and", "(", "l_not", "(", "preds", "[", "i", "]", ")", ",", "l_not", "(", "targets", "[", "i", "]", ")", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "l_and", "(", "preds", "[", "i", "]", ",", "l_not", "(", "targets", "[", "i", "]", ")", ")", ")", "\n", "spec", "=", "tn", "/", "(", "tn", "+", "fp", ")", "\n", "haussdorf_dist", "=", "np", ".", "nan", "\n", "\n", "", "else", ":", "\n", "            ", "preds_coords", "=", "np", ".", "argwhere", "(", "preds", "[", "i", "]", ")", "\n", "targets_coords", "=", "np", ".", "argwhere", "(", "targets", "[", "i", "]", ")", "\n", "haussdorf_dist", "=", "directed_hausdorff", "(", "preds_coords", ",", "targets_coords", ")", "[", "0", "]", "\n", "\n", "tp", "=", "np", ".", "sum", "(", "l_and", "(", "preds", "[", "i", "]", ",", "targets", "[", "i", "]", ")", ")", "\n", "tn", "=", "np", ".", "sum", "(", "l_and", "(", "l_not", "(", "preds", "[", "i", "]", ")", ",", "l_not", "(", "targets", "[", "i", "]", ")", ")", ")", "\n", "fp", "=", "np", ".", "sum", "(", "l_and", "(", "preds", "[", "i", "]", ",", "l_not", "(", "targets", "[", "i", "]", ")", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "l_and", "(", "l_not", "(", "preds", "[", "i", "]", ")", ",", "targets", "[", "i", "]", ")", ")", "\n", "\n", "sens", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "spec", "=", "tn", "/", "(", "tn", "+", "fp", ")", "\n", "\n", "dice", "=", "2", "*", "tp", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", ")", "\n", "\n", "", "metrics", "[", "HAUSSDORF", "]", "=", "haussdorf_dist", "\n", "metrics", "[", "DICE", "]", "=", "dice", "\n", "metrics", "[", "SENS", "]", "=", "sens", "\n", "metrics", "[", "SPEC", "]", "=", "spec", "\n", "pp", ".", "pprint", "(", "metrics", ")", "\n", "metrics_list", ".", "append", "(", "metrics", ")", "\n", "\n", "", "return", "metrics_list", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.save_metrics": [[194, 216], ["list", "matplotlib.pyplot.subplots", "ax.set_title", "ax.boxplot", "ax.set_ylim", "writer.add_figure", "print", "list.items", "zip", "torch.tensor().numpy", "list.values", "open", "print", "writer.add_scalar", "zip", "list.keys", "numpy.nanmean", "torch.tensor", "list.items", "numpy.nanmean", "list.items", "numpy.nanmean"], "function", ["None"], ["", "def", "save_metrics", "(", "epoch", ",", "metrics", ",", "writer", ",", "current_epoch", ",", "teacher", "=", "False", ",", "save_folder", "=", "None", ")", ":", "\n", "    ", "metrics", "=", "list", "(", "zip", "(", "*", "metrics", ")", ")", "\n", "# print(metrics)", "\n", "# TODO check if doing it directly to numpy work", "\n", "metrics", "=", "[", "torch", ".", "tensor", "(", "dice", ",", "device", "=", "\"cpu\"", ")", ".", "numpy", "(", ")", "for", "dice", "in", "metrics", "]", "\n", "# print(metrics)", "\n", "labels", "=", "(", "\"ET\"", ",", "\"TC\"", ",", "\"WT\"", ")", "\n", "metrics", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "zip", "(", "labels", ",", "metrics", ")", "}", "\n", "# print(metrics)", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "set_title", "(", "\"Dice metrics\"", ")", "\n", "ax", ".", "boxplot", "(", "metrics", ".", "values", "(", ")", ",", "labels", "=", "metrics", ".", "keys", "(", ")", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "writer", ".", "add_figure", "(", "f\"val/plot\"", ",", "fig", ",", "global_step", "=", "epoch", ")", "\n", "print", "(", "f\"Epoch {current_epoch} :{'val' + '_teacher :' if teacher else 'Val :'}\"", ",", "\n", "[", "f\"{key} : {np.nanmean(value)}\"", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", "]", ")", "\n", "with", "open", "(", "f\"{save_folder}/val{'_teacher' if teacher else ''}.txt\"", ",", "mode", "=", "\"a\"", ")", "as", "f", ":", "\n", "        ", "print", "(", "f\"Epoch {current_epoch} :{'val' + '_teacher :' if teacher else 'Val :'}\"", ",", "\n", "[", "f\"{key} : {np.nanmean(value)}\"", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", "]", ",", "file", "=", "f", ")", "\n", "", "for", "key", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "tag", "=", "f\"val{'_teacher' if teacher else ''}{''}/{key}_Dice\"", "\n", "writer", ".", "add_scalar", "(", "tag", ",", "np", ".", "nanmean", "(", "value", ")", ",", "global_step", "=", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.generate_segmentations": [[218, 276], ["enumerate", "pandas.DataFrame", "pd.DataFrame.boxplot", "overlap[].get_figure", "writer.add_figure", "pd.DataFrame.boxplot().get_figure", "writer.add_figure", "grouped_df.mean().to_dict", "grouped_df.mean().to_dict.items", "pd.DataFrame.to_csv", "dataset.batch_utils.pad_batch1_to_compatible_size", "inputs.cuda.cuda", "SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "pre_segs[].cpu", "torch.zeros", "numpy.logical_and", "numpy.logical_and", "numpy.zeros", "SimpleITK.GetImageFromArray", "SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "numpy.logical_or", "numpy.logical_or", "numpy.stack", "utils.calculate_metrics", "metrics_list.append", "sitk.GetImageFromArray.CopyInformation", "print", "SimpleITK.WriteImage", "pd.DataFrame.groupby", "label_values.items", "torch.cuda.amp.autocast", "segs[].numpy", "numpy.logical_not", "numpy.logical_not", "numpy.zeros_like", "pd.DataFrame.boxplot", "grouped_df.mean", "writer.add_scalar", "torch.no_grad", "model", "torch.sigmoid", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "range", "slice", "slice", "slice"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.batch_utils.pad_batch1_to_compatible_size", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.utils.calculate_metrics"], ["", "", "def", "generate_segmentations", "(", "data_loader", ",", "model", ",", "writer", ",", "args", ")", ":", "\n", "    ", "metrics_list", "=", "[", "]", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "inputs", "=", "batch", "[", "\"image\"", "]", "\n", "patient_id", "=", "batch", "[", "\"patient_id\"", "]", "[", "0", "]", "\n", "ref_path", "=", "batch", "[", "\"seg_path\"", "]", "[", "0", "]", "\n", "crops_idx", "=", "batch", "[", "\"crop_indexes\"", "]", "\n", "inputs", ",", "pads", "=", "pad_batch1_to_compatible_size", "(", "inputs", ")", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "ref_seg_img", "=", "sitk", ".", "ReadImage", "(", "ref_path", ")", "\n", "ref_seg", "=", "sitk", ".", "GetArrayFromImage", "(", "ref_seg_img", ")", "\n", "\n", "with", "autocast", "(", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pre_segs", "=", "model", "(", "inputs", ")", "\n", "pre_segs", "=", "torch", ".", "sigmoid", "(", "pre_segs", ")", "\n", "# remove pads", "\n", "", "", "maxz", ",", "maxy", ",", "maxx", "=", "pre_segs", ".", "size", "(", "2", ")", "-", "pads", "[", "0", "]", ",", "pre_segs", ".", "size", "(", "3", ")", "-", "pads", "[", "1", "]", ",", "pre_segs", ".", "size", "(", "4", ")", "-", "pads", "[", "2", "]", "\n", "pre_segs", "=", "pre_segs", "[", ":", ",", ":", ",", "0", ":", "maxz", ",", "0", ":", "maxy", ",", "0", ":", "maxx", "]", ".", "cpu", "(", ")", "\n", "segs", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "ref_seg", ".", "shape", "[", "0", "]", ",", "ref_seg", ".", "shape", "[", "1", "]", ",", "ref_seg", ".", "shape", "[", "2", "]", ")", ")", "\n", "segs", "[", "0", ",", ":", ",", "slice", "(", "*", "crops_idx", "[", "0", "]", ")", ",", "slice", "(", "*", "crops_idx", "[", "1", "]", ")", ",", "slice", "(", "*", "crops_idx", "[", "2", "]", ")", "]", "=", "pre_segs", "[", "0", "]", "\n", "segs", "=", "segs", "[", "0", "]", ".", "numpy", "(", ")", ">", "0.5", "\n", "\n", "et", "=", "segs", "[", "0", "]", "\n", "net", "=", "np", ".", "logical_and", "(", "segs", "[", "1", "]", ",", "np", ".", "logical_not", "(", "et", ")", ")", "\n", "ed", "=", "np", ".", "logical_and", "(", "segs", "[", "2", "]", ",", "np", ".", "logical_not", "(", "segs", "[", "1", "]", ")", ")", "\n", "labelmap", "=", "np", ".", "zeros", "(", "segs", "[", "0", "]", ".", "shape", ")", "\n", "labelmap", "[", "et", "]", "=", "4", "\n", "labelmap", "[", "net", "]", "=", "1", "\n", "labelmap", "[", "ed", "]", "=", "2", "\n", "labelmap", "=", "sitk", ".", "GetImageFromArray", "(", "labelmap", ")", "\n", "ref_seg_img", "=", "sitk", ".", "ReadImage", "(", "ref_path", ")", "\n", "ref_seg", "=", "sitk", ".", "GetArrayFromImage", "(", "ref_seg_img", ")", "\n", "refmap_et", ",", "refmap_tc", ",", "refmap_wt", "=", "[", "np", ".", "zeros_like", "(", "ref_seg", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "refmap_et", "=", "ref_seg", "==", "4", "\n", "refmap_tc", "=", "np", ".", "logical_or", "(", "refmap_et", ",", "ref_seg", "==", "1", ")", "\n", "refmap_wt", "=", "np", ".", "logical_or", "(", "refmap_tc", ",", "ref_seg", "==", "2", ")", "\n", "refmap", "=", "np", ".", "stack", "(", "[", "refmap_et", ",", "refmap_tc", ",", "refmap_wt", "]", ")", "\n", "patient_metric_list", "=", "calculate_metrics", "(", "segs", ",", "refmap", ",", "patient_id", ")", "\n", "metrics_list", ".", "append", "(", "patient_metric_list", ")", "\n", "labelmap", ".", "CopyInformation", "(", "ref_seg_img", ")", "\n", "print", "(", "f\"Writing {args.seg_folder}/{patient_id}.nii.gz\"", ")", "\n", "sitk", ".", "WriteImage", "(", "labelmap", ",", "f\"{args.seg_folder}/{patient_id}.nii.gz\"", ")", "\n", "", "val_metrics", "=", "[", "item", "for", "sublist", "in", "metrics_list", "for", "item", "in", "sublist", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "val_metrics", ")", "\n", "overlap", "=", "df", ".", "boxplot", "(", "METRICS", "[", "1", ":", "]", ",", "by", "=", "\"label\"", ",", "return_type", "=", "\"axes\"", ")", "\n", "overlap_figure", "=", "overlap", "[", "0", "]", ".", "get_figure", "(", ")", "\n", "writer", ".", "add_figure", "(", "\"benchmark/overlap_measures\"", ",", "overlap_figure", ")", "\n", "haussdorf_figure", "=", "df", ".", "boxplot", "(", "METRICS", "[", "0", "]", ",", "by", "=", "\"label\"", ")", ".", "get_figure", "(", ")", "\n", "writer", ".", "add_figure", "(", "\"benchmark/distance_measure\"", ",", "haussdorf_figure", ")", "\n", "grouped_df", "=", "df", ".", "groupby", "(", "\"label\"", ")", "[", "METRICS", "]", "\n", "summary", "=", "grouped_df", ".", "mean", "(", ")", ".", "to_dict", "(", ")", "\n", "for", "metric", ",", "label_values", "in", "summary", ".", "items", "(", ")", ":", "\n", "        ", "for", "label", ",", "score", "in", "label_values", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "f\"benchmark_{metric}/{label}\"", ",", "score", ")", "\n", "", "", "df", ".", "to_csv", "(", "(", "args", ".", "save_folder", "/", "'results.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats.Brats.__init__": [[14, 36], ["torch.utils.data.dataset.Dataset.__init__", "[].split", "dict", "brats.Brats.datas.append", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "patients_dir", ",", "benchmarking", "=", "False", ",", "training", "=", "True", ",", "data_aug", "=", "False", ",", "\n", "no_seg", "=", "False", ",", "normalisation", "=", "\"minmax\"", ")", ":", "\n", "        ", "super", "(", "Brats", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "benchmarking", "=", "benchmarking", "\n", "self", ".", "normalisation", "=", "normalisation", "\n", "self", ".", "data_aug", "=", "data_aug", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "datas", "=", "[", "]", "\n", "self", ".", "validation", "=", "no_seg", "\n", "self", ".", "patterns", "=", "[", "\"_t1\"", ",", "\"_t1ce\"", ",", "\"_t2\"", ",", "\"_flair\"", "]", "\n", "if", "not", "no_seg", ":", "\n", "            ", "self", ".", "patterns", "+=", "[", "\"_seg\"", "]", "\n", "# for patient_dir in patients_dir:", "\n", "\n", "", "files", "=", "os", ".", "listdir", "(", "patients_dir", ")", "[", "0", "]", ".", "split", "(", "\"_flair\"", ")", "\n", "patient_id", "=", "files", "[", "0", "]", "\n", "paths", "=", "[", "patients_dir", "/", "f\"{patient_id}{value}.nii.gz\"", "for", "value", "in", "self", ".", "patterns", "]", "\n", "patient", "=", "dict", "(", "\n", "id", "=", "patient_id", ",", "t1", "=", "paths", "[", "0", "]", ",", "t1ce", "=", "paths", "[", "1", "]", ",", "\n", "t2", "=", "paths", "[", "2", "]", ",", "flair", "=", "paths", "[", "3", "]", ",", "seg", "=", "paths", "[", "4", "]", "if", "not", "no_seg", "else", "None", "\n", ")", "\n", "self", ".", "datas", ".", "append", "(", "patient", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats.Brats.__getitem__": [[37, 63], ["numpy.stack", "numpy.zeros", "numpy.nonzero", "dict", "brats.Brats.load_nii", "max", "int", "numpy.stack.astype", "numpy.zeros.astype", "torch.from_numpy", "dataset.image_utils.irm_min_max_preprocess", "numpy.sum", "int", "dataset.image_utils.zscore_normalise", "numpy.max", "str", "str", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.Brats.load_nii", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.irm_min_max_preprocess", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.zscore_normalise"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "_patient", "=", "self", ".", "datas", "[", "idx", "]", "\n", "patient_image", "=", "{", "key", ":", "self", ".", "load_nii", "(", "_patient", "[", "key", "]", ")", "for", "key", "in", "_patient", "if", "key", "not", "in", "[", "\"id\"", ",", "\"seg\"", "]", "}", "\n", "if", "self", ".", "normalisation", "==", "\"minmax\"", ":", "\n", "            ", "patient_image", "=", "{", "key", ":", "irm_min_max_preprocess", "(", "patient_image", "[", "key", "]", ")", "for", "key", "in", "patient_image", "}", "\n", "", "elif", "self", ".", "normalisation", "==", "\"zscore\"", ":", "\n", "            ", "patient_image", "=", "{", "key", ":", "zscore_normalise", "(", "patient_image", "[", "key", "]", ")", "for", "key", "in", "patient_image", "}", "\n", "", "patient_image", "=", "np", ".", "stack", "(", "[", "patient_image", "[", "key", "]", "for", "key", "in", "patient_image", "]", ")", "\n", "\n", "patient_label", "=", "np", ".", "zeros", "(", "patient_image", ".", "shape", ")", "# placeholders, not gonna use it", "\n", "et_present", "=", "0", "\n", "\n", "z_indexes", ",", "y_indexes", ",", "x_indexes", "=", "np", ".", "nonzero", "(", "np", ".", "sum", "(", "patient_image", ",", "axis", "=", "0", ")", "!=", "0", ")", "\n", "# Add 1 pixel in each side", "\n", "zmin", ",", "ymin", ",", "xmin", "=", "[", "max", "(", "0", ",", "int", "(", "np", ".", "min", "(", "arr", ")", "-", "1", ")", ")", "for", "arr", "in", "(", "z_indexes", ",", "y_indexes", ",", "x_indexes", ")", "]", "\n", "zmax", ",", "ymax", ",", "xmax", "=", "[", "int", "(", "np", ".", "max", "(", "arr", ")", "+", "1", ")", "for", "arr", "in", "(", "z_indexes", ",", "y_indexes", ",", "x_indexes", ")", "]", "\n", "patient_image", "=", "patient_image", "[", ":", ",", "zmin", ":", "zmax", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "\n", "patient_image", "=", "patient_image", ".", "astype", "(", "\"float16\"", ")", ",", "patient_label", ".", "astype", "(", "\"bool\"", ")", "\n", "patient_image", "=", "[", "torch", ".", "from_numpy", "(", "x", ")", "for", "x", "in", "patient_image", "]", "\n", "\n", "return", "dict", "(", "patient_id", "=", "_patient", "[", "\"id\"", "]", ",", "\n", "image", "=", "patient_image", ",", "seg_path", "=", "str", "(", "_patient", "[", "\"seg\"", "]", ")", "if", "not", "self", ".", "validation", "else", "str", "(", "_patient", "[", "\"t1\"", "]", ")", ",", "\n", "crop_indexes", "=", "(", "(", "zmin", ",", "zmax", ")", ",", "(", "ymin", ",", "ymax", ")", ",", "(", "xmin", ",", "xmax", ")", ")", ",", "\n", "et_present", "=", "et_present", ",", "\n", "supervised", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats.Brats.load_nii": [[65, 68], ["SimpleITK.GetArrayFromImage", "SimpleITK.ReadImage", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_nii", "(", "path_folder", ")", ":", "\n", "        ", "return", "sitk", ".", "GetArrayFromImage", "(", "sitk", ".", "ReadImage", "(", "str", "(", "path_folder", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats.Brats.__len__": [[69, 71], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats.get_datasets_val": [[73, 82], ["pathlib.Path().resolve", "pathlib.Path().resolve.exists", "brats.Brats", "pathlib.Path", "config.get_brats_folder"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.config.get_brats_folder"], ["", "", "def", "get_datasets_val", "(", "no_seg", "=", "True", ",", "on", "=", "\"val\"", ",", "normalisation", "=", "\"minmax\"", ",", "input_dir", "=", "\"/input\"", ")", ":", "\n", "\n", "    ", "val_base_folder", "=", "pathlib", ".", "Path", "(", "get_brats_folder", "(", "on", ",", "input_dir", ")", ")", ".", "resolve", "(", ")", "\n", "assert", "val_base_folder", ".", "exists", "(", ")", "\n", "val_patients_dir", "=", "val_base_folder", "\n", "\n", "bench_dataset", "=", "Brats", "(", "val_patients_dir", ",", "training", "=", "False", ",", "no_seg", "=", "no_seg", ",", "benchmarking", "=", "True", ",", "normalisation", "=", "normalisation", ")", "\n", "\n", "return", "bench_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.pad_or_crop_image": [[8, 26], ["numpy.pad", "image_utils.get_crop_slice", "image_utils.get_left_right_idx_should_pad", "numpy.pad", "zip", "zip", "padlist.append", "padlist.append"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.get_crop_slice", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.get_left_right_idx_should_pad"], ["def", "pad_or_crop_image", "(", "image", ",", "seg", "=", "None", ",", "target_size", "=", "(", "128", ",", "144", ",", "144", ")", ")", ":", "\n", "    ", "c", ",", "z", ",", "y", ",", "x", "=", "image", ".", "shape", "\n", "z_slice", ",", "y_slice", ",", "x_slice", "=", "[", "get_crop_slice", "(", "target", ",", "dim", ")", "for", "target", ",", "dim", "in", "zip", "(", "target_size", ",", "(", "z", ",", "y", ",", "x", ")", ")", "]", "\n", "image", "=", "image", "[", ":", ",", "z_slice", ",", "y_slice", ",", "x_slice", "]", "\n", "if", "seg", "is", "not", "None", ":", "\n", "        ", "seg", "=", "seg", "[", ":", ",", "z_slice", ",", "y_slice", ",", "x_slice", "]", "\n", "", "todos", "=", "[", "get_left_right_idx_should_pad", "(", "size", ",", "dim", ")", "for", "size", ",", "dim", "in", "zip", "(", "target_size", ",", "[", "z", ",", "y", ",", "x", "]", ")", "]", "\n", "padlist", "=", "[", "(", "0", ",", "0", ")", "]", "# channel dim", "\n", "for", "to_pad", "in", "todos", ":", "\n", "        ", "if", "to_pad", "[", "0", "]", ":", "\n", "            ", "padlist", ".", "append", "(", "(", "to_pad", "[", "1", "]", ",", "to_pad", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "padlist", ".", "append", "(", "(", "0", ",", "0", ")", ")", "\n", "", "", "image", "=", "np", ".", "pad", "(", "image", ",", "padlist", ")", "\n", "if", "seg", "is", "not", "None", ":", "\n", "        ", "seg", "=", "np", ".", "pad", "(", "seg", ",", "padlist", ")", "\n", "return", "image", ",", "seg", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.get_left_right_idx_should_pad": [[28, 36], ["random.randint"], "function", ["None"], ["", "def", "get_left_right_idx_should_pad", "(", "target_size", ",", "dim", ")", ":", "\n", "    ", "if", "dim", ">=", "target_size", ":", "\n", "        ", "return", "[", "False", "]", "\n", "", "elif", "dim", "<", "target_size", ":", "\n", "        ", "pad_extent", "=", "target_size", "-", "dim", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "pad_extent", ")", "\n", "right", "=", "pad_extent", "-", "left", "\n", "return", "True", ",", "left", ",", "right", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.get_crop_slice": [[38, 46], ["random.randint", "slice", "slice"], "function", ["None"], ["", "", "def", "get_crop_slice", "(", "target_size", ",", "dim", ")", ":", "\n", "    ", "if", "dim", ">", "target_size", ":", "\n", "        ", "crop_extent", "=", "dim", "-", "target_size", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "crop_extent", ")", "\n", "right", "=", "crop_extent", "-", "left", "\n", "return", "slice", "(", "left", ",", "dim", "-", "right", ")", "\n", "", "elif", "dim", "<=", "target_size", ":", "\n", "        ", "return", "slice", "(", "0", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.normalize": [[48, 56], ["numpy.min", "numpy.max"], "function", ["None"], ["", "", "def", "normalize", "(", "image", ")", ":", "\n", "    ", "\"\"\"Basic min max scaler.\n    \"\"\"", "\n", "min_", "=", "np", ".", "min", "(", "image", ")", "\n", "max_", "=", "np", ".", "max", "(", "image", ")", "\n", "scale", "=", "max_", "-", "min_", "\n", "image", "=", "(", "image", "-", "min_", ")", "/", "scale", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.irm_min_max_preprocess": [[58, 73], ["numpy.percentile", "numpy.clip", "image_utils.normalize"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.normalize"], ["", "def", "irm_min_max_preprocess", "(", "image", ",", "low_perc", "=", "1", ",", "high_perc", "=", "99", ")", ":", "\n", "    ", "\"\"\"Main pre-processing function used for the challenge (seems to work the best).\n\n    Remove outliers voxels first, then min-max scale.\n\n    Warnings\n    --------\n    This will not do it channel wise!!\n    \"\"\"", "\n", "\n", "non_zeros", "=", "image", ">", "0", "\n", "low", ",", "high", "=", "np", ".", "percentile", "(", "image", "[", "non_zeros", "]", ",", "[", "low_perc", ",", "high_perc", "]", ")", "\n", "image", "=", "np", ".", "clip", "(", "image", ",", "low", ",", "high", ")", "\n", "image", "=", "normalize", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.zscore_normalise": [[75, 79], ["numpy.std", "numpy.mean"], "function", ["None"], ["", "def", "zscore_normalise", "(", "img", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "slices", "=", "(", "img", "!=", "0", ")", "\n", "img", "[", "slices", "]", "=", "(", "img", "[", "slices", "]", "-", "np", ".", "mean", "(", "img", "[", "slices", "]", ")", ")", "/", "np", ".", "std", "(", "img", "[", "slices", "]", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.remove_unwanted_background": [[81, 91], ["len", "numpy.nonzero", "tuple", "numpy.min", "numpy.max", "slice", "zip"], "function", ["None"], ["", "def", "remove_unwanted_background", "(", "image", ",", "threshold", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"Use to crop zero_value pixel from MRI image.\n    \"\"\"", "\n", "dim", "=", "len", "(", "image", ".", "shape", ")", "\n", "non_zero_idx", "=", "np", ".", "nonzero", "(", "image", ">", "threshold", ")", "\n", "min_idx", "=", "[", "np", ".", "min", "(", "idx", ")", "for", "idx", "in", "non_zero_idx", "]", "\n", "# +1 because slicing is like range: not inclusive!!", "\n", "max_idx", "=", "[", "np", ".", "max", "(", "idx", ")", "+", "1", "for", "idx", "in", "non_zero_idx", "]", "\n", "bbox", "=", "tuple", "(", "slice", "(", "_min", ",", "_max", ")", "for", "_min", ",", "_max", "in", "zip", "(", "min_idx", ",", "max_idx", ")", ")", "\n", "return", "image", "[", "bbox", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.random_crop2d": [[93, 119], ["list", "slice", "tuple", "len", "ValueError", "int", "random.randint", "len", "set", "zip", "zip", "slice", "random.uniform", "max", "zip", "tuple"], "function", ["None"], ["", "def", "random_crop2d", "(", "*", "images", ",", "min_perc", "=", "0.5", ",", "max_perc", "=", "1.", ")", ":", "\n", "    ", "\"\"\"Crop randomly but identically all images given.\n\n    Could be used to pass both mask and image at the same time. Anything else will\n    throw.\n\n    Warnings\n    --------\n    Only works for channel first images. (No channel image will not work).\n    \"\"\"", "\n", "if", "len", "(", "set", "(", "tuple", "(", "image", ".", "shape", ")", "for", "image", "in", "images", ")", ")", ">", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"Image shapes do not match\"", ")", "\n", "", "shape", "=", "images", "[", "0", "]", ".", "shape", "\n", "new_sizes", "=", "[", "int", "(", "dim", "*", "random", ".", "uniform", "(", "min_perc", ",", "max_perc", ")", ")", "for", "dim", "in", "shape", "]", "\n", "min_idx", "=", "[", "random", ".", "randint", "(", "0", ",", "ax_size", "-", "size", ")", "for", "ax_size", ",", "size", "in", "zip", "(", "shape", ",", "new_sizes", ")", "]", "\n", "max_idx", "=", "[", "min_id", "+", "size", "for", "min_id", ",", "size", "in", "zip", "(", "min_idx", ",", "new_sizes", ")", "]", "\n", "bbox", "=", "list", "(", "slice", "(", "min_", ",", "max", "(", "max_", ",", "1", ")", ")", "for", "min_", ",", "max_", "in", "zip", "(", "min_idx", ",", "max_idx", ")", ")", "\n", "# DO not crop channel axis...", "\n", "bbox", "[", "0", "]", "=", "slice", "(", "0", ",", "shape", "[", "0", "]", ")", "\n", "# prevent warning", "\n", "bbox", "=", "tuple", "(", "bbox", ")", "\n", "cropped_images", "=", "[", "image", "[", "bbox", "]", "for", "image", "in", "images", "]", "\n", "if", "len", "(", "cropped_images", ")", "==", "1", ":", "\n", "        ", "return", "cropped_images", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "cropped_images", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.random_crop3d": [[121, 132], ["image_utils.random_crop2d"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.random_crop2d"], ["", "", "def", "random_crop3d", "(", "*", "images", ",", "min_perc", "=", "0.5", ",", "max_perc", "=", "1.", ")", ":", "\n", "    ", "\"\"\"Crop randomly but identically all images given.\n\n    Could be used to pass both mask and image at the same time. Anything else will\n    throw.\n\n    Warnings\n    --------\n    Only works for channel first images. (No channel image will not work).\n    \"\"\"", "\n", "return", "random_crop2d", "(", "min_perc", ",", "max_perc", ",", "*", "images", ")", "", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.Brats.__init__": [[14, 34], ["torch.utils.data.dataset.Dataset.__init__", "dict", "brats_train.Brats.datas.append"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "patients_dir", ",", "benchmarking", "=", "False", ",", "training", "=", "True", ",", "data_aug", "=", "False", ",", "\n", "no_seg", "=", "False", ",", "normalisation", "=", "\"minmax\"", ")", ":", "\n", "        ", "super", "(", "Brats", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "benchmarking", "=", "benchmarking", "\n", "self", ".", "normalisation", "=", "normalisation", "\n", "self", ".", "data_aug", "=", "data_aug", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "datas", "=", "[", "]", "\n", "self", ".", "validation", "=", "no_seg", "\n", "self", ".", "patterns", "=", "[", "\"_t1\"", ",", "\"_t1ce\"", ",", "\"_t2\"", ",", "\"_flair\"", "]", "\n", "if", "not", "no_seg", ":", "\n", "            ", "self", ".", "patterns", "+=", "[", "\"_seg\"", "]", "\n", "", "for", "patient_dir", "in", "patients_dir", ":", "\n", "            ", "patient_id", "=", "patient_dir", ".", "name", "\n", "paths", "=", "[", "patient_dir", "/", "f\"{patient_id}{value}.nii.gz\"", "for", "value", "in", "self", ".", "patterns", "]", "\n", "patient", "=", "dict", "(", "\n", "id", "=", "patient_id", ",", "t1", "=", "paths", "[", "0", "]", ",", "t1ce", "=", "paths", "[", "1", "]", ",", "\n", "t2", "=", "paths", "[", "2", "]", ",", "flair", "=", "paths", "[", "3", "]", ",", "seg", "=", "paths", "[", "4", "]", "if", "not", "no_seg", "else", "None", "\n", ")", "\n", "self", ".", "datas", ".", "append", "(", "patient", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.Brats.__getitem__": [[35, 80], ["numpy.stack", "dict", "brats_train.Brats.load_nii", "brats_train.Brats.load_nii", "numpy.logical_or", "numpy.logical_or", "numpy.stack", "numpy.zeros", "numpy.nonzero", "dataset.image_utils.pad_or_crop_image", "numpy.nonzero", "numpy.stack.astype", "numpy.zeros.astype", "torch.from_numpy", "dataset.image_utils.irm_min_max_preprocess", "max", "int", "max", "int", "dataset.image_utils.zscore_normalise", "numpy.sum", "numpy.sum", "int", "numpy.sum", "int", "str", "str", "numpy.max", "numpy.max", "numpy.min", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.Brats.load_nii", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.Brats.load_nii", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.pad_or_crop_image", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.irm_min_max_preprocess", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.zscore_normalise"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "_patient", "=", "self", ".", "datas", "[", "idx", "]", "\n", "patient_image", "=", "{", "key", ":", "self", ".", "load_nii", "(", "_patient", "[", "key", "]", ")", "for", "key", "in", "_patient", "if", "key", "not", "in", "[", "\"id\"", ",", "\"seg\"", "]", "}", "\n", "if", "_patient", "[", "\"seg\"", "]", "is", "not", "None", ":", "\n", "            ", "patient_label", "=", "self", ".", "load_nii", "(", "_patient", "[", "\"seg\"", "]", ")", "\n", "", "if", "self", ".", "normalisation", "==", "\"minmax\"", ":", "\n", "            ", "patient_image", "=", "{", "key", ":", "irm_min_max_preprocess", "(", "patient_image", "[", "key", "]", ")", "for", "key", "in", "patient_image", "}", "\n", "", "elif", "self", ".", "normalisation", "==", "\"zscore\"", ":", "\n", "            ", "patient_image", "=", "{", "key", ":", "zscore_normalise", "(", "patient_image", "[", "key", "]", ")", "for", "key", "in", "patient_image", "}", "\n", "", "patient_image", "=", "np", ".", "stack", "(", "[", "patient_image", "[", "key", "]", "for", "key", "in", "patient_image", "]", ")", "\n", "if", "_patient", "[", "\"seg\"", "]", "is", "not", "None", ":", "\n", "            ", "et", "=", "patient_label", "==", "4", "\n", "et_present", "=", "1", "if", "np", ".", "sum", "(", "et", ")", ">=", "1", "else", "0", "\n", "tc", "=", "np", ".", "logical_or", "(", "patient_label", "==", "4", ",", "patient_label", "==", "1", ")", "\n", "wt", "=", "np", ".", "logical_or", "(", "tc", ",", "patient_label", "==", "2", ")", "\n", "patient_label", "=", "np", ".", "stack", "(", "[", "et", ",", "tc", ",", "wt", "]", ")", "\n", "", "else", ":", "\n", "            ", "patient_label", "=", "np", ".", "zeros", "(", "patient_image", ".", "shape", ")", "# placeholders, not gonna use it", "\n", "et_present", "=", "0", "\n", "", "if", "self", ".", "training", ":", "\n", "# Remove maximum extent of the zero-background to make future crop more useful", "\n", "            ", "z_indexes", ",", "y_indexes", ",", "x_indexes", "=", "np", ".", "nonzero", "(", "np", ".", "sum", "(", "patient_image", ",", "axis", "=", "0", ")", "!=", "0", ")", "\n", "# Add 1 pixel in each side", "\n", "zmin", ",", "ymin", ",", "xmin", "=", "[", "max", "(", "0", ",", "int", "(", "np", ".", "min", "(", "arr", ")", "-", "1", ")", ")", "for", "arr", "in", "(", "z_indexes", ",", "y_indexes", ",", "x_indexes", ")", "]", "\n", "zmax", ",", "ymax", ",", "xmax", "=", "[", "int", "(", "np", ".", "max", "(", "arr", ")", "+", "1", ")", "for", "arr", "in", "(", "z_indexes", ",", "y_indexes", ",", "x_indexes", ")", "]", "\n", "patient_image", "=", "patient_image", "[", ":", ",", "zmin", ":", "zmax", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "patient_label", "=", "patient_label", "[", ":", ",", "zmin", ":", "zmax", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "# default to 128, 128, 128 64, 64, 64 32, 32, 32", "\n", "patient_image", ",", "patient_label", "=", "pad_or_crop_image", "(", "patient_image", ",", "patient_label", ",", "target_size", "=", "(", "128", ",", "128", ",", "128", ")", ")", "\n", "", "else", ":", "\n", "            ", "z_indexes", ",", "y_indexes", ",", "x_indexes", "=", "np", ".", "nonzero", "(", "np", ".", "sum", "(", "patient_image", ",", "axis", "=", "0", ")", "!=", "0", ")", "\n", "# Add 1 pixel in each side", "\n", "zmin", ",", "ymin", ",", "xmin", "=", "[", "max", "(", "0", ",", "int", "(", "np", ".", "min", "(", "arr", ")", "-", "1", ")", ")", "for", "arr", "in", "(", "z_indexes", ",", "y_indexes", ",", "x_indexes", ")", "]", "\n", "zmax", ",", "ymax", ",", "xmax", "=", "[", "int", "(", "np", ".", "max", "(", "arr", ")", "+", "1", ")", "for", "arr", "in", "(", "z_indexes", ",", "y_indexes", ",", "x_indexes", ")", "]", "\n", "patient_image", "=", "patient_image", "[", ":", ",", "zmin", ":", "zmax", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "patient_label", "=", "patient_label", "[", ":", ",", "zmin", ":", "zmax", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "\n", "", "patient_image", ",", "patient_label", "=", "patient_image", ".", "astype", "(", "\"float16\"", ")", ",", "patient_label", ".", "astype", "(", "\"bool\"", ")", "\n", "patient_image", ",", "patient_label", "=", "[", "torch", ".", "from_numpy", "(", "x", ")", "for", "x", "in", "[", "patient_image", ",", "patient_label", "]", "]", "\n", "return", "dict", "(", "patient_id", "=", "_patient", "[", "\"id\"", "]", ",", "\n", "image", "=", "patient_image", ",", "label", "=", "patient_label", ",", "\n", "seg_path", "=", "str", "(", "_patient", "[", "\"seg\"", "]", ")", "if", "not", "self", ".", "validation", "else", "str", "(", "_patient", "[", "\"t1\"", "]", ")", ",", "\n", "crop_indexes", "=", "(", "(", "zmin", ",", "zmax", ")", ",", "(", "ymin", ",", "ymax", ")", ",", "(", "xmin", ",", "xmax", ")", ")", ",", "\n", "et_present", "=", "et_present", ",", "\n", "supervised", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.Brats.load_nii": [[82, 85], ["SimpleITK.GetArrayFromImage", "SimpleITK.ReadImage", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_nii", "(", "path_folder", ")", ":", "\n", "        ", "return", "sitk", ".", "GetArrayFromImage", "(", "sitk", ".", "ReadImage", "(", "str", "(", "path_folder", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.Brats.__len__": [[86, 88], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.get_datasets": [[90, 112], ["pathlib.Path().resolve", "print", "pathlib.Path().resolve.exists", "sorted", "sklearn.model_selection.KFold", "list", "print", "print", "brats_train.Brats", "brats_train.Brats", "brats_train.Brats", "sklearn.model_selection.KFold.split", "pathlib.Path", "config.get_brats_folder", "pathlib.Path().resolve.iterdir", "x.is_dir"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.config.get_brats_folder"], ["", "", "def", "get_datasets", "(", "seed", ",", "no_seg", "=", "False", ",", "on", "=", "\"train\"", ",", "full", "=", "False", ",", "fold_number", "=", "0", ",", "normalisation", "=", "\"minmax\"", ")", ":", "\n", "    ", "base_folder", "=", "pathlib", ".", "Path", "(", "get_brats_folder", "(", "on", ")", ")", ".", "resolve", "(", ")", "\n", "print", "(", "base_folder", ")", "\n", "assert", "base_folder", ".", "exists", "(", ")", "\n", "patients_dir", "=", "sorted", "(", "[", "x", "for", "x", "in", "base_folder", ".", "iterdir", "(", ")", "if", "x", ".", "is_dir", "(", ")", "]", ")", "\n", "\n", "kfold", "=", "KFold", "(", "10", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "splits", "=", "list", "(", "kfold", ".", "split", "(", "patients_dir", ")", ")", "\n", "train_idx", ",", "val_idx", "=", "splits", "[", "fold_number", "]", "\n", "print", "(", "\"first idx of train\"", ",", "train_idx", "[", "0", "]", ")", "\n", "print", "(", "\"first idx of test\"", ",", "val_idx", "[", "0", "]", ")", "\n", "train", "=", "[", "patients_dir", "[", "i", "]", "for", "i", "in", "train_idx", "]", "\n", "val", "=", "[", "patients_dir", "[", "i", "]", "for", "i", "in", "val_idx", "]", "\n", "# return patients_dir", "\n", "train_dataset", "=", "Brats", "(", "train", ",", "training", "=", "True", ",", "\n", "normalisation", "=", "normalisation", ")", "\n", "val_dataset", "=", "Brats", "(", "val", ",", "training", "=", "False", ",", "data_aug", "=", "False", ",", "\n", "normalisation", "=", "normalisation", ")", "\n", "bench_dataset", "=", "Brats", "(", "val", ",", "training", "=", "False", ",", "benchmarking", "=", "True", ",", "\n", "normalisation", "=", "normalisation", ")", "\n", "\n", "return", "train_dataset", ",", "val_dataset", ",", "bench_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.brats_train.get_datasets_val": [[113, 131], ["pathlib.Path().resolve", "print", "pathlib.Path().resolve.exists", "sorted", "sklearn.model_selection.KFold", "list", "print", "print", "brats_train.Brats", "sklearn.model_selection.KFold.split", "pathlib.Path", "config.get_brats_folder", "pathlib.Path().resolve.iterdir", "x.is_dir"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.None.config.get_brats_folder"], ["", "def", "get_datasets_val", "(", "seed", ",", "no_seg", "=", "False", ",", "on", "=", "\"train\"", ",", "full", "=", "False", ",", "fold_number", "=", "0", ",", "normalisation", "=", "\"minmax\"", ")", ":", "\n", "    ", "base_folder", "=", "pathlib", ".", "Path", "(", "get_brats_folder", "(", "on", ")", ")", ".", "resolve", "(", ")", "\n", "print", "(", "base_folder", ")", "\n", "assert", "base_folder", ".", "exists", "(", ")", "\n", "patients_dir", "=", "sorted", "(", "[", "x", "for", "x", "in", "base_folder", ".", "iterdir", "(", ")", "if", "x", ".", "is_dir", "(", ")", "]", ")", "\n", "\n", "kfold", "=", "KFold", "(", "10", ",", "shuffle", "=", "True", ",", "random_state", "=", "seed", ")", "\n", "splits", "=", "list", "(", "kfold", ".", "split", "(", "patients_dir", ")", ")", "\n", "train_idx", ",", "val_idx", "=", "splits", "[", "fold_number", "]", "\n", "print", "(", "\"first idx of train\"", ",", "train_idx", "[", "0", "]", ")", "\n", "print", "(", "\"first idx of test\"", ",", "val_idx", "[", "0", "]", ")", "\n", "train", "=", "[", "patients_dir", "[", "i", "]", "for", "i", "in", "train_idx", "]", "\n", "val", "=", "[", "patients_dir", "[", "i", "]", "for", "i", "in", "val_idx", "]", "\n", "\n", "bench_dataset", "=", "Brats", "(", "val", ",", "training", "=", "False", ",", "benchmarking", "=", "True", ",", "\n", "normalisation", "=", "normalisation", ")", "\n", "\n", "return", "bench_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.batch_utils.custom_collate": [[7, 10], ["batch_utils.pad_batch_to_max_shape", "torch.utils.data._utils.collate.default_collate"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.batch_utils.pad_batch_to_max_shape"], ["def", "custom_collate", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "pad_batch_to_max_shape", "(", "batch", ")", "\n", "return", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.batch_utils.determinist_collate": [[12, 15], ["batch_utils.pad_batch_to_max_shape", "torch.utils.data._utils.collate.default_collate"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.batch_utils.pad_batch_to_max_shape"], ["", "def", "determinist_collate", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "pad_batch_to_max_shape", "(", "batch", ")", "\n", "return", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.batch_utils.pad_batch_to_max_shape": [[17, 38], ["list", "enumerate", "zip", "int", "int", "int", "all", "max", "max", "max", "random.randint", "torch.pad", "torch.pad", "zip"], "function", ["None"], ["", "def", "pad_batch_to_max_shape", "(", "batch", ")", ":", "\n", "    ", "shapes", "=", "(", "sample", "[", "'label'", "]", ".", "shape", "for", "sample", "in", "batch", ")", "\n", "_", ",", "z_sizes", ",", "y_sizes", ",", "x_sizes", "=", "list", "(", "zip", "(", "*", "shapes", ")", ")", "\n", "maxs", "=", "[", "int", "(", "max", "(", "z_sizes", ")", ")", ",", "int", "(", "max", "(", "y_sizes", ")", ")", ",", "int", "(", "max", "(", "x_sizes", ")", ")", "]", "\n", "for", "i", ",", "max_", "in", "enumerate", "(", "maxs", ")", ":", "\n", "        ", "max_stride", "=", "16", "\n", "if", "max_", "%", "max_stride", "!=", "0", ":", "\n", "# Make it divisible by 16", "\n", "            ", "maxs", "[", "i", "]", "=", "(", "(", "max_", "//", "max_stride", ")", "+", "1", ")", "*", "max_stride", "\n", "", "", "zmax", ",", "ymax", ",", "xmax", "=", "maxs", "\n", "for", "elem", "in", "batch", ":", "\n", "        ", "exple", "=", "elem", "[", "'label'", "]", "\n", "zpad", ",", "ypad", ",", "xpad", "=", "zmax", "-", "exple", ".", "shape", "[", "1", "]", ",", "ymax", "-", "exple", ".", "shape", "[", "2", "]", ",", "xmax", "-", "exple", ".", "shape", "[", "3", "]", "\n", "assert", "all", "(", "pad", ">=", "0", "for", "pad", "in", "(", "zpad", ",", "ypad", ",", "xpad", ")", ")", ",", "\"Negative padding value error !!\"", "\n", "# free data augmentation", "\n", "left_zpad", ",", "left_ypad", ",", "left_xpad", "=", "[", "random", ".", "randint", "(", "0", ",", "pad", ")", "for", "pad", "in", "(", "zpad", ",", "ypad", ",", "xpad", ")", "]", "\n", "right_zpad", ",", "right_ypad", ",", "right_xpad", "=", "[", "pad", "-", "left_pad", "for", "pad", ",", "left_pad", "in", "\n", "zip", "(", "(", "zpad", ",", "ypad", ",", "xpad", ")", ",", "(", "left_zpad", ",", "left_ypad", ",", "left_xpad", ")", ")", "]", "\n", "pads", "=", "(", "left_xpad", ",", "right_xpad", ",", "left_ypad", ",", "right_ypad", ",", "left_zpad", ",", "right_zpad", ")", "\n", "elem", "[", "'image'", "]", ",", "elem", "[", "'label'", "]", "=", "F", ".", "pad", "(", "elem", "[", "'image'", "]", ",", "pads", ")", ",", "F", ".", "pad", "(", "elem", "[", "'label'", "]", ",", "pads", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.batch_utils.pad_batch1_to_compatible_size": [[40, 55], ["print", "list", "enumerate", "all", "torch.pad", "F.pad.size", "F.pad.size", "F.pad.size"], "function", ["None"], ["", "def", "pad_batch1_to_compatible_size", "(", "batch", ")", ":", "\n", "    ", "print", "(", "batch", ".", "shape", ")", "\n", "shape", "=", "batch", ".", "shape", "\n", "zyx", "=", "list", "(", "shape", "[", "-", "3", ":", "]", ")", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "zyx", ")", ":", "\n", "        ", "max_stride", "=", "16", "\n", "if", "dim", "%", "max_stride", "!=", "0", ":", "\n", "# Make it divisible by 16", "\n", "            ", "zyx", "[", "i", "]", "=", "(", "(", "dim", "//", "max_stride", ")", "+", "1", ")", "*", "max_stride", "\n", "", "", "zmax", ",", "ymax", ",", "xmax", "=", "zyx", "\n", "zpad", ",", "ypad", ",", "xpad", "=", "zmax", "-", "batch", ".", "size", "(", "2", ")", ",", "ymax", "-", "batch", ".", "size", "(", "3", ")", ",", "xmax", "-", "batch", ".", "size", "(", "4", ")", "\n", "assert", "all", "(", "pad", ">=", "0", "for", "pad", "in", "(", "zpad", ",", "ypad", ",", "xpad", ")", ")", ",", "\"Negative padding value error !!\"", "\n", "pads", "=", "(", "0", ",", "xpad", ",", "0", ",", "ypad", ",", "0", ",", "zpad", ")", "\n", "batch", "=", "F", ".", "pad", "(", "batch", ",", "pads", ")", "\n", "return", "batch", ",", "(", "zpad", ",", "ypad", ",", "xpad", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.unet.Unet.__init__": [[13, 39], ["torch.nn.Module.__init__", "print", "model.layers.UBlock", "model.layers.UBlock", "model.layers.UBlock", "model.layers.UBlock", "model.layers.UBlock", "model.layers.ConvBnRelu", "torch.nn.MaxPool3d", "model.layers.UBlock", "model.layers.UBlock", "model.layers.UBlock", "torch.nn.Upsample", "model.layers.conv1x1", "unet.Unet._init_weights", "range"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.conv1x1", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.unet.Unet._init_weights"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "num_classes", ",", "width", ",", "norm_layer", "=", "None", ",", "dropout", "=", "0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "[", "width", "*", "2", "**", "i", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "print", "(", "features", ")", "\n", "\n", "self", ".", "encoder1", "=", "UBlock", "(", "inplanes", ",", "features", "[", "0", "]", "//", "2", ",", "features", "[", "0", "]", ",", "norm_layer", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "encoder2", "=", "UBlock", "(", "features", "[", "0", "]", ",", "features", "[", "1", "]", "//", "2", ",", "features", "[", "1", "]", ",", "norm_layer", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "encoder3", "=", "UBlock", "(", "features", "[", "1", "]", ",", "features", "[", "2", "]", "//", "2", ",", "features", "[", "2", "]", ",", "norm_layer", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "encoder4", "=", "UBlock", "(", "features", "[", "2", "]", ",", "features", "[", "3", "]", "//", "2", ",", "features", "[", "3", "]", ",", "norm_layer", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "bottom", "=", "UBlock", "(", "features", "[", "3", "]", ",", "features", "[", "3", "]", ",", "features", "[", "3", "]", ",", "norm_layer", ",", "(", "2", ",", "2", ")", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "bottom_2", "=", "ConvBnRelu", "(", "features", "[", "3", "]", "*", "2", ",", "features", "[", "2", "]", ",", "norm_layer", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "downsample", "=", "nn", ".", "MaxPool3d", "(", "2", ",", "2", ")", "\n", "\n", "self", ".", "decoder3", "=", "UBlock", "(", "features", "[", "2", "]", "*", "2", ",", "features", "[", "2", "]", ",", "features", "[", "1", "]", ",", "norm_layer", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "decoder2", "=", "UBlock", "(", "features", "[", "1", "]", "*", "2", ",", "features", "[", "1", "]", ",", "features", "[", "0", "]", ",", "norm_layer", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "decoder1", "=", "UBlock", "(", "features", "[", "0", "]", "*", "2", ",", "features", "[", "0", "]", ",", "features", "[", "0", "]", "//", "2", ",", "norm_layer", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"trilinear\"", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "outconv", "=", "conv1x1", "(", "features", "[", "0", "]", "//", "2", ",", "num_classes", ")", "\n", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.unet.Unet._init_weights": [[40, 47], ["unet.Unet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm3d", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "InstanceNorm3d", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.unet.Unet.forward": [[48, 73], ["unet.Unet.encoder1", "unet.Unet.downsample", "unet.Unet.encoder2", "unet.Unet.downsample", "unet.Unet.encoder3", "unet.Unet.downsample", "unet.Unet.encoder4", "unet.Unet.bottom", "unet.Unet.bottom_2", "unet.Unet.upsample", "unet.Unet.decoder3", "unet.Unet.upsample", "unet.Unet.decoder2", "unet.Unet.upsample", "unet.Unet.decoder1", "unet.Unet.outconv", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "down1", "=", "self", ".", "encoder1", "(", "x", ")", "\n", "down2", "=", "self", ".", "downsample", "(", "down1", ")", "\n", "down2", "=", "self", ".", "encoder2", "(", "down2", ")", "\n", "down3", "=", "self", ".", "downsample", "(", "down2", ")", "\n", "down3", "=", "self", ".", "encoder3", "(", "down3", ")", "\n", "down4", "=", "self", ".", "downsample", "(", "down3", ")", "\n", "down4", "=", "self", ".", "encoder4", "(", "down4", ")", "\n", "\n", "bottom", "=", "self", ".", "bottom", "(", "down4", ")", "\n", "bottom_2", "=", "self", ".", "bottom_2", "(", "torch", ".", "cat", "(", "[", "down4", ",", "bottom", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# Decoder", "\n", "\n", "up3", "=", "self", ".", "upsample", "(", "bottom_2", ")", "\n", "up3", "=", "self", ".", "decoder3", "(", "torch", ".", "cat", "(", "[", "down3", ",", "up3", "]", ",", "dim", "=", "1", ")", ")", "\n", "up2", "=", "self", ".", "upsample", "(", "up3", ")", "\n", "up2", "=", "self", ".", "decoder2", "(", "torch", ".", "cat", "(", "[", "down2", ",", "up2", "]", ",", "dim", "=", "1", ")", ")", "\n", "up1", "=", "self", ".", "upsample", "(", "up2", ")", "\n", "up1", "=", "self", ".", "decoder1", "(", "torch", ".", "cat", "(", "[", "down1", ",", "up1", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "out", "=", "self", ".", "outconv", "(", "up1", ")", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.ConvBnRelu.__init__": [[46, 65], ["torch.nn.Sequential.__init__", "torch.nn.Sequential.__init__", "collections.OrderedDict", "collections.OrderedDict", "layers.conv3x3", "norm_layer", "torch.nn.ReLU", "torch.nn.Dropout", "layers.conv3x3", "torch.nn.ReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.conv3x3", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "norm_layer", "=", "None", ",", "dilation", "=", "1", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "super", "(", "ConvBnRelu", ",", "self", ")", ".", "__init__", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "'conv'", ",", "conv3x3", "(", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", ",", "\n", "(", "'bn'", ",", "norm_layer", "(", "planes", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'dropout'", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", ",", "\n", "]", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "ConvBnRelu", ",", "self", ")", ".", "__init__", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "'conv'", ",", "conv3x3", "(", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'dropout'", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.UBlock.__init__": [[74, 82], ["torch.nn.Sequential.__init__", "collections.OrderedDict", "layers.ConvBnRelu", "layers.ConvBnRelu"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "midplanes", ",", "outplanes", ",", "norm_layer", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "UBlock", ",", "self", ")", ".", "__init__", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "'ConvBnRelu1'", ",", "ConvBnRelu", "(", "inplanes", ",", "midplanes", ",", "norm_layer", ",", "dilation", "=", "dilation", "[", "0", "]", ",", "dropout", "=", "dropout", ")", ")", ",", "\n", "(", "\n", "'ConvBnRelu2'", ",", "\n", "ConvBnRelu", "(", "midplanes", ",", "outplanes", ",", "norm_layer", ",", "dilation", "=", "dilation", "[", "1", "]", ",", "dropout", "=", "dropout", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.UBlockCbam.__init__": [[87, 93], ["torch.nn.Sequential.__init__", "collections.OrderedDict", "layers.UBlock", "layers.CBAM"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "midplanes", ",", "outplanes", ",", "norm_layer", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "UBlockCbam", ",", "self", ")", ".", "__init__", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "'UBlock'", ",", "UBlock", "(", "inplanes", ",", "midplanes", ",", "outplanes", ",", "norm_layer", ",", "dilation", "=", "dilation", ",", "dropout", "=", "dropout", ")", ")", ",", "\n", "(", "'CBAM'", ",", "CBAM", "(", "outplanes", ",", "norm_layer", "=", "norm_layer", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.BasicConv.__init__": [[106, 115], ["torch.nn.Module.__init__", "torch.nn.Conv3d", "norm_layer", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bias", "=", "False", "\n", "self", ".", "out_channels", "=", "out_planes", "\n", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "norm_layer", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.BasicConv.forward": [[116, 121], ["layers.BasicConv.conv", "layers.BasicConv.bn", "layers.BasicConv.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.Flatten.forward": [[124, 126], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.ChannelGate.__init__": [[129, 139], ["torch.nn.Module.__init__", "torch.nn.Sequential", "layers.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channels", ",", "reduction_ratio", "=", "16", ",", "pool_types", "=", "[", "'avg'", ",", "'max'", "]", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gate_channels", "=", "gate_channels", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "gate_channels", ",", "gate_channels", "//", "reduction_ratio", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "gate_channels", "//", "reduction_ratio", ",", "gate_channels", ")", "\n", ")", "\n", "self", ".", "pool_types", "=", "pool_types", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.ChannelGate.forward": [[140, 156], ["torch.sigmoid().unsqueeze().unsqueeze().unsqueeze().expand_as", "torch.nn.functional.avg_pool3d", "layers.ChannelGate.mlp", "torch.sigmoid().unsqueeze().unsqueeze().unsqueeze", "torch.nn.functional.max_pool3d", "layers.ChannelGate.mlp", "x.size", "x.size", "x.size", "torch.sigmoid().unsqueeze().unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "torch.sigmoid().unsqueeze", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "channel_att_sum", "=", "None", "\n", "for", "pool_type", "in", "self", ".", "pool_types", ":", "\n", "            ", "if", "pool_type", "==", "'avg'", ":", "\n", "                ", "avg_pool", "=", "F", ".", "avg_pool3d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "x", ".", "size", "(", "4", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "x", ".", "size", "(", "4", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "avg_pool", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "                ", "max_pool", "=", "F", ".", "max_pool3d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "x", ".", "size", "(", "4", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "x", ".", "size", "(", "4", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "max_pool", ")", "\n", "", "if", "channel_att_sum", "is", "None", ":", "\n", "                ", "channel_att_sum", "=", "channel_att_raw", "\n", "", "else", ":", "\n", "                ", "channel_att_sum", "=", "channel_att_sum", "+", "channel_att_raw", "\n", "\n", "", "", "scale", "=", "torch", ".", "sigmoid", "(", "channel_att_sum", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "expand_as", "(", "x", ")", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.ChannelPool.forward": [[159, 161], ["torch.cat", "[].unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.max"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.SpatialGate.__init__": [[164, 169], ["torch.nn.Module.__init__", "layers.ChannelPool", "layers.BasicConv"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "SpatialGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "7", "\n", "self", ".", "compress", "=", "ChannelPool", "(", ")", "\n", "self", ".", "spatial", "=", "BasicConv", "(", "2", ",", "1", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.SpatialGate.forward": [[170, 175], ["layers.SpatialGate.compress", "layers.SpatialGate.spatial", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_compress", "=", "self", ".", "compress", "(", "x", ")", "\n", "x_out", "=", "self", ".", "spatial", "(", "x_compress", ")", "\n", "scale", "=", "torch", ".", "sigmoid", "(", "x_out", ")", "# broadcasting", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.CBAM.__init__": [[178, 184], ["torch.nn.Module.__init__", "layers.ChannelGate", "layers.SpatialGate"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channels", ",", "reduction_ratio", "=", "16", ",", "pool_types", "=", "None", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "CBAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "pool_types", "is", "None", ":", "\n", "            ", "pool_types", "=", "[", "'avg'", ",", "'max'", "]", "\n", "", "self", ".", "ChannelGate", "=", "ChannelGate", "(", "gate_channels", ",", "reduction_ratio", ",", "pool_types", ")", "\n", "self", ".", "SpatialGate", "=", "SpatialGate", "(", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.CBAM.forward": [[185, 189], ["layers.CBAM.ChannelGate", "layers.CBAM.SpatialGate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_out", "=", "self", ".", "ChannelGate", "(", "x", ")", "\n", "x_out", "=", "self", ".", "SpatialGate", "(", "x_out", ")", "\n", "return", "x_out", "", "", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.default_norm_layer": [[8, 16], ["min", "torch.nn.GroupNorm", "int"], "function", ["None"], ["def", "default_norm_layer", "(", "planes", ",", "groups", "=", "16", ")", ":", "\n", "    ", "groups_", "=", "min", "(", "groups", ",", "planes", ")", "\n", "if", "planes", "%", "groups_", ">", "0", ":", "\n", "        ", "divisor", "=", "16", "\n", "while", "planes", "%", "divisor", ">", "0", ":", "\n", "            ", "divisor", "/=", "2", "\n", "", "groups_", "=", "int", "(", "planes", "//", "divisor", ")", "\n", "", "return", "nn", ".", "GroupNorm", "(", "groups_", ",", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.get_norm_layer": [[18, 31], ["int", "norm_type.replace", "layers.default_norm_layer", "print", "print", "torch.nn.InstanceNorm3d"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.default_norm_layer"], ["", "def", "get_norm_layer", "(", "norm_type", "=", "\"group\"", ")", ":", "\n", "    ", "if", "\"group\"", "in", "norm_type", ":", "\n", "        ", "try", ":", "\n", "            ", "grp_nb", "=", "int", "(", "norm_type", ".", "replace", "(", "\"group\"", ",", "\"\"", ")", ")", "\n", "return", "lambda", "planes", ":", "default_norm_layer", "(", "planes", ",", "groups", "=", "grp_nb", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "print", "(", "'using default group number'", ")", "\n", "return", "default_norm_layer", "\n", "", "", "elif", "norm_type", "==", "\"none\"", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "lambda", "x", ":", "nn", ".", "InstanceNorm3d", "(", "x", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.conv3x3": [[33, 37], ["torch.nn.Conv3d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.conv1x1": [[39, 42], ["torch.nn.Conv3d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.layers.count_parameters": [[97, 99], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.critic.Discriminator.__init__": [[6, 44], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "dim", "=", "64", ",", "out_conv_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv1_channels", "=", "16", "\n", "conv2_channels", "=", "32", "\n", "conv3_channels", "=", "64", "\n", "self", ".", "out_conv_channels", "=", "out_conv_channels", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "conv1_channels", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "conv1_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_channels", "=", "conv1_channels", ",", "out_channels", "=", "conv2_channels", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "conv2_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_channels", "=", "conv2_channels", ",", "out_channels", "=", "conv3_channels", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "conv3_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_channels", "=", "conv3_channels", ",", "out_channels", "=", "out_conv_channels", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_conv_channels", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.model.critic.Discriminator.forward": [[46, 53], ["critic.Discriminator.conv1", "critic.Discriminator.conv2", "critic.Discriminator.conv3", "critic.Discriminator.conv4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.learning_rate.poly_lr.poly_lr": [[16, 18], ["None"], "function", ["None"], ["def", "poly_lr", "(", "epoch", ",", "max_epochs", ",", "initial_lr", ",", "exponent", "=", "0.9", ")", ":", "\n", "    ", "return", "initial_lr", "*", "(", "1", "-", "epoch", "/", "max_epochs", ")", "**", "exponent", "", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.adversarial_loss_gen.adv_loss_gen_v1": [[7, 28], ["torch.ones_like", "torch.ones_like", "torch.ones_like.cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.cuda", "CE", "CE", "CE", "CE", "CE", "CE"], "function", ["None"], ["def", "adv_loss_gen_v1", "(", "critic_segs_1", ",", "critic_segs_2", ",", "label", ")", ":", "\n", "    ", "critic_segs_1_1", "=", "critic_segs_1", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_1_2", "=", "critic_segs_1", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_1_3", "=", "critic_segs_1", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "critic_segs_2_1", "=", "critic_segs_2", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_2_2", "=", "critic_segs_2", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_2_3", "=", "critic_segs_2", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "target_real_1", "=", "torch", ".", "ones_like", "(", "label", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "target_real_1", ".", "cuda", "(", ")", "\n", "target_fake_1", "=", "torch", ".", "zeros_like", "(", "label", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "target_fake_1", ".", "cuda", "(", ")", "\n", "\n", "adv_loss1", "=", "(", "CE", "(", "critic_segs_1_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_1_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_1_3", ",", "target_fake_1", ")", ")", "/", "3", "\n", "adv_loss2", "=", "(", "CE", "(", "critic_segs_2_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_2_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_2_3", ",", "\n", "target_fake_1", ")", ")", "/", "3", "\n", "\n", "adv_loss", "=", "adv_loss1", "+", "adv_loss2", "\n", "\n", "return", "adv_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.adversarial_loss_gen.adv_loss_gen": [[30, 63], ["torch.ones_like", "torch.ones_like", "torch.ones_like.cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.cuda", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE"], "function", ["None"], ["", "def", "adv_loss_gen", "(", "critic_segs_1", ",", "critic_segs_2", ",", "critic_segs_3", ",", "critic_segs_4", ",", "label", ")", ":", "\n", "    ", "critic_segs_1_1", "=", "critic_segs_1", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_1_2", "=", "critic_segs_1", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_1_3", "=", "critic_segs_1", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "critic_segs_2_1", "=", "critic_segs_2", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_2_2", "=", "critic_segs_2", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_2_3", "=", "critic_segs_2", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "critic_segs_3_1", "=", "critic_segs_3", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_3_2", "=", "critic_segs_3", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_3_3", "=", "critic_segs_3", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "critic_segs_4_1", "=", "critic_segs_4", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_4_2", "=", "critic_segs_4", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_4_3", "=", "critic_segs_4", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "target_real_1", "=", "torch", ".", "ones_like", "(", "label", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "target_real_1", ".", "cuda", "(", ")", "\n", "target_fake_1", "=", "torch", ".", "zeros_like", "(", "label", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "target_fake_1", ".", "cuda", "(", ")", "\n", "\n", "adv_loss1", "=", "(", "CE", "(", "critic_segs_1_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_1_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_1_3", ",", "target_fake_1", ")", ")", "/", "3", "\n", "adv_loss2", "=", "(", "CE", "(", "critic_segs_2_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_2_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_2_3", ",", "\n", "target_fake_1", ")", ")", "/", "3", "\n", "adv_loss3", "=", "(", "CE", "(", "critic_segs_3_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_3_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_3_3", ",", "\n", "target_fake_1", ")", ")", "/", "3", "\n", "adv_loss4", "=", "(", "CE", "(", "critic_segs_4_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_4_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_4_3", ",", "\n", "target_fake_1", ")", ")", "/", "3", "\n", "\n", "adv_loss", "=", "adv_loss1", "+", "adv_loss2", "+", "adv_loss3", "+", "adv_loss4", "\n", "\n", "return", "adv_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.adversarial_loss_gen.adv_loss_critic_v1": [[65, 86], ["torch.ones_like", "torch.ones_like", "torch.ones_like.cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.cuda", "CE", "CE", "CE", "CE", "CE", "CE"], "function", ["None"], ["", "def", "adv_loss_critic_v1", "(", "critic_segs_1", ",", "critic_segs_3", ",", "label", ")", ":", "\n", "    ", "critic_segs_1_1", "=", "critic_segs_1", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_1_2", "=", "critic_segs_1", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_1_3", "=", "critic_segs_1", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "critic_segs_3_1", "=", "critic_segs_3", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_3_2", "=", "critic_segs_3", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_3_3", "=", "critic_segs_3", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "target_real_1", "=", "torch", ".", "ones_like", "(", "label", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "target_real_1", ".", "cuda", "(", ")", "\n", "target_fake_1", "=", "torch", ".", "zeros_like", "(", "label", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "target_fake_1", ".", "cuda", "(", ")", "\n", "\n", "adv_loss1", "=", "(", "CE", "(", "critic_segs_1_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_1_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_1_3", ",", "target_fake_1", ")", ")", "/", "3", "\n", "adv_loss3", "=", "(", "CE", "(", "critic_segs_3_1", ",", "target_real_1", ")", "+", "CE", "(", "critic_segs_3_2", ",", "target_real_1", ")", "+", "CE", "(", "critic_segs_3_3", ",", "\n", "target_real_1", ")", ")", "/", "3", "\n", "\n", "adv_loss", "=", "adv_loss1", "+", "adv_loss3", "\n", "\n", "return", "adv_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.adversarial_loss_gen.adv_loss_critic": [[88, 121], ["torch.ones_like", "torch.ones_like", "torch.ones_like.cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.cuda", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE", "CE"], "function", ["None"], ["", "def", "adv_loss_critic", "(", "critic_segs_1", ",", "critic_segs_2", ",", "critic_segs_3", ",", "critic_segs_4", ",", "label", ")", ":", "\n", "    ", "critic_segs_1_1", "=", "critic_segs_1", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_1_2", "=", "critic_segs_1", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_1_3", "=", "critic_segs_1", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "critic_segs_2_1", "=", "critic_segs_2", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_2_2", "=", "critic_segs_2", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_2_3", "=", "critic_segs_2", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "critic_segs_3_1", "=", "critic_segs_3", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_3_2", "=", "critic_segs_3", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_3_3", "=", "critic_segs_3", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "critic_segs_4_1", "=", "critic_segs_4", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_4_2", "=", "critic_segs_4", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "critic_segs_4_3", "=", "critic_segs_4", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "target_real_1", "=", "torch", ".", "ones_like", "(", "label", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "target_real_1", ".", "cuda", "(", ")", "\n", "target_fake_1", "=", "torch", ".", "zeros_like", "(", "label", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "target_fake_1", ".", "cuda", "(", ")", "\n", "\n", "adv_loss1", "=", "(", "CE", "(", "critic_segs_1_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_1_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_1_3", ",", "target_fake_1", ")", ")", "/", "3", "\n", "adv_loss2", "=", "(", "CE", "(", "critic_segs_2_1", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_2_2", ",", "target_fake_1", ")", "+", "CE", "(", "critic_segs_2_3", ",", "\n", "target_fake_1", ")", ")", "/", "3", "\n", "adv_loss3", "=", "(", "CE", "(", "critic_segs_3_1", ",", "target_real_1", ")", "+", "CE", "(", "critic_segs_3_2", ",", "target_real_1", ")", "+", "CE", "(", "critic_segs_3_3", ",", "\n", "target_real_1", ")", ")", "/", "3", "\n", "adv_loss4", "=", "(", "CE", "(", "critic_segs_4_1", ",", "target_real_1", ")", "+", "CE", "(", "critic_segs_4_2", ",", "target_real_1", ")", "+", "CE", "(", "critic_segs_4_3", ",", "\n", "target_real_1", ")", ")", "/", "3", "\n", "\n", "adv_loss", "=", "adv_loss1", "+", "adv_loss2", "+", "adv_loss3", "+", "adv_loss4", "\n", "\n", "return", "adv_loss", "", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.vat.vat_loss": [[9, 37], ["torch.Tensor().normal_", "range", "torch.nn.functional.normalize", "torch.autograd.Variable", "model", "torch.sigmoid", "kl_divergence", "torch.autograd.Variable().mean", "gc.collect", "torch.autograd.Variable", "model", "torch.sigmoid", "kl_divergence", "torch.autograd.Variable().mean", "Variable().mean.backward", "model.zero_grad", "torch.autograd.Variable.cuda", "torch.Tensor", "torch.nn.functional.normalize", "torch.autograd.Variable.cuda", "r_adv.detach", "torch.autograd.Variable", "ul_x.size", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.normalize", "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.dataset.image_utils.normalize"], ["def", "vat_loss", "(", "model", ",", "ul_x", ",", "ul_y", ",", "xi", "=", "1e-6", ",", "eps", "=", "2.5", ",", "num_iters", "=", "1", ")", ":", "\n", "# find r_adv", "\n", "    ", "d", "=", "torch", ".", "Tensor", "(", "ul_x", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_iters", ")", ":", "\n", "        ", "d", "=", "xi", "*", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "d", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "d", "=", "Variable", "(", "d", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "y_hat", "=", "model", "(", "ul_x", "+", "d", ")", "\n", "y_hat", "=", "torch", ".", "sigmoid", "(", "y_hat", ")", "\n", "delta_kl", "=", "kl_divergence", "(", "y_hat", ",", "ul_y", ")", "\n", "delta_kl", "=", "Variable", "(", "delta_kl", ",", "requires_grad", "=", "True", ")", ".", "mean", "(", ")", "\n", "delta_kl", ".", "backward", "(", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "\n", "", "d", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "d", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "d", "=", "Variable", "(", "d", ".", "cuda", "(", ")", ")", "\n", "r_adv", "=", "eps", "*", "d", "\n", "# compute lds", "\n", "y_hat", "=", "model", "(", "ul_x", "+", "r_adv", ".", "detach", "(", ")", ")", "\n", "y_hat", "=", "torch", ".", "sigmoid", "(", "y_hat", ")", "\n", "delta_kl", "=", "kl_divergence", "(", "y_hat", ",", "ul_y", ")", "\n", "delta_kl", "=", "Variable", "(", "delta_kl", ",", "requires_grad", "=", "True", ")", ".", "mean", "(", ")", "\n", "\n", "del", "y_hat", ",", "d", ",", "r_adv", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "return", "delta_kl", "\n", "", ""]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__": [[9, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.__init__"], ["def", "__init__", "(", "self", ",", "do_sigmoid", "=", "True", ")", ":", "\n", "        ", "super", "(", "EDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "do_sigmoid", "=", "do_sigmoid", "\n", "self", ".", "labels", "=", "[", "\"ET\"", ",", "\"TC\"", ",", "\"WT\"", "]", "\n", "self", ".", "device", "=", "\"cpu\"", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.binary_dice": [[15, 37], ["dice.EDiceLoss.compute_intersection", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "targets.sum", "print", "torch.sigmoid.sum", "torch.sigmoid.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.sigmoid.sum", "torch.sigmoid.sum", "targets.sum", "torch.sigmoid.pow().sum", "torch.sigmoid.pow().sum", "targets.pow().sum", "torch.sigmoid.pow", "torch.sigmoid.pow", "targets.pow"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.compute_intersection"], ["", "def", "binary_dice", "(", "self", ",", "inputs", ",", "targets", ",", "label_index", ",", "metric_mode", "=", "False", ")", ":", "\n", "        ", "smooth", "=", "1.", "\n", "if", "self", ".", "do_sigmoid", ":", "\n", "            ", "inputs", "=", "torch", ".", "sigmoid", "(", "inputs", ")", "\n", "\n", "", "if", "metric_mode", ":", "\n", "            ", "inputs", "=", "inputs", ">", "0.5", "\n", "if", "targets", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "print", "(", "f\"No {self.labels[label_index]} for this patient\"", ")", "\n", "if", "inputs", ".", "sum", "(", ")", "==", "0", ":", "\n", "                    ", "return", "torch", ".", "tensor", "(", "1.", ",", "device", "=", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "                    ", "return", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "\"cuda\"", ")", "\n", "# Threshold the pred", "\n", "", "", "", "intersection", "=", "EDiceLoss", ".", "compute_intersection", "(", "inputs", ",", "targets", ")", "\n", "if", "metric_mode", ":", "\n", "            ", "dice", "=", "(", "2", "*", "intersection", ")", "/", "(", "(", "inputs", ".", "sum", "(", ")", "+", "targets", ".", "sum", "(", ")", ")", "*", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "dice", "=", "(", "2", "*", "intersection", "+", "smooth", ")", "/", "(", "inputs", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "+", "targets", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "", "if", "metric_mode", ":", "\n", "            ", "return", "dice", "\n", "", "return", "1", "-", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.compute_intersection": [[38, 42], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_intersection", "(", "inputs", ",", "targets", ")", ":", "\n", "        ", "intersection", "=", "torch", ".", "sum", "(", "inputs", "*", "targets", ")", "\n", "return", "intersection", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.forward": [[43, 50], ["range", "target.size", "target.size", "dice.EDiceLoss.binary_dice"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.binary_dice"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "dice", "=", "0", "\n", "for", "i", "in", "range", "(", "target", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "dice", "=", "dice", "+", "self", ".", "binary_dice", "(", "inputs", "[", ":", ",", "i", ",", "...", "]", ",", "target", "[", ":", ",", "i", ",", "...", "]", ",", "i", ")", "\n", "\n", "", "final_dice", "=", "dice", "/", "target", ".", "size", "(", "1", ")", "\n", "return", "final_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.metric": [[51, 59], ["range", "target.size", "range", "dices.append", "target.size", "dice.append", "dice.EDiceLoss.binary_dice"], "methods", ["home.repos.pwc.inspect_result.himashi92_vizviva_brats_2021.loss.dice.EDiceLoss.binary_dice"], ["", "def", "metric", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "dices", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "target", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "dice", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "target", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "dice", ".", "append", "(", "self", ".", "binary_dice", "(", "inputs", "[", "j", ",", "i", "]", ",", "target", "[", "j", ",", "i", "]", ",", "i", ",", "True", ")", ")", "\n", "", "dices", ".", "append", "(", "dice", ")", "\n", "", "return", "dices", "\n", "", "", ""]]}