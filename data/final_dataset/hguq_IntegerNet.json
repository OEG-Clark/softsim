{"home.repos.pwc.inspect_result.hguq_IntegerNet.layer.verify.VerifyInteger.__init__": [[11, 20], ["super().__init__", "layer.misc.get_bounds"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.get_bounds"], ["def", "__init__", "(", "self", ",", "n_bits", "=", "None", ",", "signed", "=", "None", ",", "freq", "=", "1000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_bits", "=", "n_bits", "\n", "if", "n_bits", "is", "not", "None", ":", "\n", "            ", "self", ".", "lower_boud", ",", "self", ".", "upper_bound", "=", "get_bounds", "(", "n_bits", ",", "signed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upper_bound", "=", "self", ".", "lower_bound", "=", "None", "\n", "", "self", ".", "cnt", "=", "0", "\n", "self", ".", "freq", "=", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.verify.VerifyInteger.forward": [[21, 35], ["torch.sum", "torch.abs", "ValueError", "torch.max", "torch.min", "ValueError", "ValueError", "torch.round"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "cnt", "+=", "1", "\n", "if", "self", ".", "cnt", "==", "self", ".", "freq", ":", "\n", "            ", "self", ".", "cnt", "=", "0", "\n", "loss", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "torch", ".", "round", "(", "x", ")", "-", "x", ")", ")", "\n", "if", "loss", "!=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Not Integer at %s\"", "%", "x", ")", "\n", "", "if", "self", ".", "n_bits", "is", "not", "None", ":", "\n", "                ", "max_val", ",", "min_val", "=", "torch", ".", "max", "(", "x", ")", ",", "torch", ".", "min", "(", "x", ")", "\n", "if", "max_val", ">", "self", ".", "upper_bound", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Exceed quantize max value at %s\"", "%", "x", ")", "\n", "", "if", "min_val", "<", "self", ".", "lower_bound", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Exceed quantize min value at %s\"", "%", "x", ")", "\n", "", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STERound.forward": [[18, 21], ["torch.round"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "round", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STERound.backward": [[22, 25], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STEFloor.forward": [[33, 36], ["torch.floor"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "floor", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STEFloor.backward": [[37, 40], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STECeil.forward": [[48, 51], ["torch.ceil"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "ceil", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STECeil.backward": [[52, 55], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "return", "grad", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.RightShift": [[4, 6], ["torch.floor"], "function", ["None"], ["def", "RightShift", "(", "x", ",", "s", ")", ":", "\n", "    ", "return", "torch", ".", "floor", "(", "x", "/", "(", "2", "**", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STERightShift": [[8, 10], ["STEFloor.apply"], "function", ["None"], ["", "def", "STERightShift", "(", "x", ",", "s", ")", ":", "\n", "    ", "return", "STEFloor", ".", "apply", "(", "x", "/", "(", "2", "**", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.MyBatchNorm.__init__": [[33, 50], ["super().__init__", "misc.MyBatchNorm.register_buffer", "misc.MyBatchNorm.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ",", "is_conv", "=", "True", ",", "decay", "=", "0.9", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "is_conv", "=", "is_conv", "\n", "self", ".", "decay", "=", "decay", "\n", "\n", "if", "is_conv", ":", "\n", "            ", "self", ".", "reduce_dim", "=", "(", "0", ",", "2", ",", "3", ")", "\n", "self", ".", "buffer_size", "=", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reduce_dim", "=", "(", "0", ",", ")", "\n", "self", ".", "buffer_size", "=", "(", "1", ",", "self", ".", "num_features", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "self", ".", "buffer_size", ")", ",", "persistent", "=", "True", ")", "\n", "self", ".", "register_buffer", "(", "\"running_std\"", ",", "torch", ".", "ones", "(", "self", ".", "buffer_size", ")", ",", "persistent", "=", "True", ")", "\n", "\n", "self", ".", "hot", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.MyBatchNorm._update_buffer": [[51, 60], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "misc.MyBatchNorm.running_mean.copy_", "misc.MyBatchNorm.running_std.copy_"], "methods", ["None"], ["", "def", "_update_buffer", "(", "self", ",", "cur_mean", ",", "cur_std", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "hot", ":", "\n", "                ", "self", ".", "running_mean", "=", "self", ".", "running_mean", "*", "self", ".", "decay", "+", "cur_mean", "*", "(", "1", "-", "self", ".", "decay", ")", "\n", "self", ".", "running_std", "=", "self", ".", "running_std", "*", "self", ".", "decay", "+", "cur_std", "*", "(", "1", "-", "self", ".", "decay", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "hot", "=", "True", "\n", "self", ".", "running_mean", ".", "copy_", "(", "cur_mean", ")", "\n", "self", ".", "running_std", ".", "copy_", "(", "cur_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.MyBatchNorm.forward": [[61, 69], ["x.mean", "x.std", "misc.MyBatchNorm._update_buffer"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.RecordMeanStd._update_buffer"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "cur_mean", "=", "x", ".", "mean", "(", "dim", "=", "self", ".", "reduce_dim", ",", "keepdim", "=", "True", ")", "\n", "cur_std", "=", "x", ".", "std", "(", "dim", "=", "self", ".", "reduce_dim", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "_update_buffer", "(", "cur_mean", ",", "cur_std", ")", "\n", "return", "(", "x", "-", "cur_mean", ")", "/", "cur_std", "\n", "", "else", ":", "\n", "            ", "return", "(", "x", "-", "self", ".", "running_mean", ")", "/", "self", ".", "running_std", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.DistMonitor.__init__": [[76, 83], ["super().__init__", "time.strftime", "tensorboardX.SummaryWriter", "time.localtime", "time.time"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "module_name", ",", "log_freq", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t", "=", "time", ".", "strftime", "(", "'%Y.%m.%d.%H.%M.%S'", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "\"log/\"", "+", "module_name", "+", "\"_\"", "+", "self", ".", "t", ")", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "log_freq", "=", "log_freq", "\n", "self", ".", "_on", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.DistMonitor.turn_on": [[84, 86], ["None"], "methods", ["None"], ["", "def", "turn_on", "(", "self", ")", ":", "\n", "        ", "self", ".", "_on", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.DistMonitor.turn_off": [[87, 89], ["None"], "methods", ["None"], ["", "def", "turn_off", "(", "self", ")", ":", "\n", "        ", "self", ".", "_on", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.DistMonitor.update": [[90, 92], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "self", ".", "step", "=", "self", ".", "step", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.DistMonitor.forward": [[93, 101], ["misc.DistMonitor.writer.add_histogram", "prev_layer.named_parameters", "prev_layer.named_buffers", "str", "misc.DistMonitor.writer.add_histogram", "misc.DistMonitor.writer.add_histogram", "str", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "prev_layer", ")", ":", "\n", "        ", "if", "self", ".", "_on", "and", "self", ".", "step", "%", "self", ".", "log_freq", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_histogram", "(", "str", "(", "prev_layer", ")", ",", "x", ",", "global_step", "=", "self", ".", "step", ")", "\n", "for", "name", ",", "par", "in", "prev_layer", ".", "named_parameters", "(", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_histogram", "(", "str", "(", "prev_layer", ")", "+", "name", ",", "par", ",", "global_step", "=", "self", ".", "step", ")", "\n", "", "for", "name", ",", "par", "in", "prev_layer", ".", "named_buffers", "(", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_histogram", "(", "str", "(", "prev_layer", ")", "+", "name", ",", "par", ",", "global_step", "=", "self", ".", "step", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.get_bounds": [[9, 26], ["None"], "function", ["None"], ["def", "get_bounds", "(", "n_bits", ",", "signed", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Produce a tuple of integer:\n    if signed:      (-2^(n_bits-1)+1,2^(n_bits)-1)\n    if unsigned:    (0, 2^n_bits-1)\n    :param signed: Whether signed\n    :param n_bits: n bits.\n    :return: tuple\n    \"\"\"", "\n", "if", "signed", ":", "\n", "        ", "upper_bound", "=", "2", "**", "(", "n_bits", "-", "1", ")", "-", "1", "\n", "lower_bound", "=", "-", "upper_bound", "\n", "return", "lower_bound", ",", "upper_bound", "\n", "", "else", ":", "\n", "        ", "lower_bound", "=", "0", "\n", "upper_bound", "=", "2", "**", "n_bits", "-", "1", "\n", "return", "lower_bound", ",", "upper_bound", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeWeight.__init__": [[29, 32], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "n_bits", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_bits", "=", "n_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeWeight.forward": [[33, 35], ["torch.clamp", "STERound.apply", "layer.misc.get_bounds"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.get_bounds"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "STERound", ".", "apply", "(", "x", ")", ",", "*", "get_bounds", "(", "self", ".", "n_bits", ",", "signed", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.LimitAcc.__init__": [[44, 48], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "n_bits", ":", "int", ",", "signed", ":", "bool", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_bits", "=", "n_bits", "\n", "self", ".", "signed", "=", "signed", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.LimitAcc.forward": [[49, 51], ["torch.clamp", "layer.misc.get_bounds"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.get_bounds"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "x", ",", "*", "get_bounds", "(", "self", ".", "n_bits", ",", "self", ".", "signed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.RecordMeanStd.__init__": [[59, 76], ["torch.nn.Module.__init__", "quantize.RecordMeanStd.register_buffer", "quantize.RecordMeanStd.register_buffer", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "num_features", ":", "int", ",", "is_conv", ":", "bool", "=", "True", ",", "decay", ":", "float", "=", "0.9", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "is_conv", "=", "is_conv", "\n", "self", ".", "decay", "=", "decay", "\n", "\n", "if", "is_conv", ":", "\n", "            ", "self", ".", "reduce_dim", "=", "(", "0", ",", "2", ",", "3", ")", "\n", "self", ".", "buffer_size", "=", "(", "1", ",", "self", ".", "num_features", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reduce_dim", "=", "(", "0", ",", ")", "\n", "self", ".", "buffer_size", "=", "(", "1", ",", "self", ".", "num_features", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "self", ".", "buffer_size", ")", ",", "persistent", "=", "True", ")", "\n", "self", ".", "register_buffer", "(", "\"running_std\"", ",", "torch", ".", "zeros", "(", "self", ".", "buffer_size", ")", ",", "persistent", "=", "True", ")", "\n", "\n", "self", ".", "hot", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.RecordMeanStd._update_buffer": [[77, 86], ["torch.no_grad", "quantize.RecordMeanStd.running_mean.copy_", "quantize.RecordMeanStd.running_std.copy_"], "methods", ["None"], ["", "def", "_update_buffer", "(", "self", ",", "cur_mean", ":", "torch", ".", "Tensor", ",", "cur_std", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "hot", ":", "\n", "                ", "self", ".", "running_mean", "=", "self", ".", "running_mean", "*", "self", ".", "decay", "+", "cur_mean", "*", "(", "1", "-", "self", ".", "decay", ")", "\n", "self", ".", "running_std", "=", "self", ".", "running_std", "*", "self", ".", "decay", "+", "cur_std", "*", "(", "1", "-", "self", ".", "decay", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "running_mean", ".", "copy_", "(", "cur_mean", ")", "\n", "self", ".", "running_std", ".", "copy_", "(", "cur_std", ")", "\n", "self", ".", "hot", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.RecordMeanStd.forward": [[87, 95], ["x.mean", "x.std", "quantize.RecordMeanStd._update_buffer"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.RecordMeanStd._update_buffer"], ["", "", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "tuple", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "cur_mean", "=", "x", ".", "mean", "(", "dim", "=", "self", ".", "reduce_dim", ",", "keepdim", "=", "True", ")", "\n", "cur_std", "=", "x", ".", "std", "(", "dim", "=", "self", ".", "reduce_dim", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "_update_buffer", "(", "cur_mean", ",", "cur_std", ")", "\n", "return", "cur_mean", ",", "cur_std", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeActSBN.__init__": [[114, 124], ["quantize.RecordMeanStd.__init__", "quantize.QuantizeActSBN.register_buffer", "quantize.QuantizeActSBN.register_buffer", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "n_bits", ":", "int", ",", "signed", ":", "bool", ",", "num_features", ":", "int", ",", "is_conv", "=", "True", ",", "decay", "=", "0.9", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", "=", "num_features", ",", "is_conv", "=", "is_conv", ",", "decay", "=", "decay", ")", "\n", "self", ".", "n_bits", "=", "n_bits", "\n", "self", ".", "signed", "=", "signed", "\n", "\n", "# persistent bias and shift", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "self", ".", "buffer_size", ")", ",", "persistent", "=", "True", ")", "\n", "self", ".", "register_buffer", "(", "\"shift\"", ",", "torch", ".", "zeros", "(", "self", ".", "buffer_size", ")", ",", "persistent", "=", "True", ")", "\n", "\n", "self", ".", "hot", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeActSBN.train": [[125, 129], ["super().train", "quantize.QuantizeActSBN._prepare_eval"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc.train", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc._prepare_eval"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "if", "not", "mode", ":", "\n", "            ", "self", ".", "_prepare_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeActSBN._prepare_eval": [[130, 136], ["torch.round", "torch.round", "torch.round", "torch.log2", "torch.log2"], "methods", ["None"], ["", "", "def", "_prepare_eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "bias", "=", "torch", ".", "round", "(", "self", ".", "running_mean", ")", "\n", "if", "self", ".", "signed", ":", "\n", "            ", "self", ".", "shift", "=", "torch", ".", "round", "(", "torch", ".", "log2", "(", "self", ".", "running_std", ")", ")", "+", "3", "-", "self", ".", "n_bits", "\n", "", "else", ":", "\n", "            ", "self", ".", "shift", "=", "torch", ".", "round", "(", "torch", ".", "log2", "(", "self", ".", "running_std", ")", ")", "+", "2", "-", "self", ".", "n_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeActSBN.forward": [[137, 154], ["quantize.RecordMeanStd.forward", "STERound.apply", "torch.clamp", "torch.clamp", "STERightShift", "RightShift", "layer.misc.get_bounds", "layer.misc.get_bounds", "STERound.apply", "STERound.apply", "torch.log2", "torch.log2"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.forward", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STERightShift", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.RightShift", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.get_bounds", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.get_bounds"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "cur_mean", ",", "cur_std", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "cur_bias", "=", "STERound", ".", "apply", "(", "cur_mean", ")", "\n", "if", "self", ".", "signed", ":", "\n", "                ", "cur_shift", "=", "STERound", ".", "apply", "(", "torch", ".", "log2", "(", "cur_std", ")", ")", "+", "3", "-", "self", ".", "n_bits", "\n", "", "else", ":", "\n", "                ", "cur_shift", "=", "STERound", ".", "apply", "(", "torch", ".", "log2", "(", "cur_std", ")", ")", "+", "2", "-", "self", ".", "n_bits", "\n", "\n", "", "return", "torch", ".", "clamp", "(", "\n", "STERightShift", "(", "x", "-", "cur_bias", ",", "cur_shift", ")", ",", "\n", "*", "get_bounds", "(", "self", ".", "n_bits", ",", "signed", "=", "self", ".", "signed", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "clamp", "(", "\n", "RightShift", "(", "x", "-", "self", ".", "bias", ",", "self", ".", "shift", ")", ",", "\n", "*", "get_bounds", "(", "self", ".", "n_bits", ",", "signed", "=", "self", ".", "signed", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeConv.__init__": [[162, 178], ["torch.nn.Module.__init__", "quantize.QuantizeWeight", "torch.nn.Parameter", "quantize.QuantizeConv.register_buffer", "quantize.get_normal_weight", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.get_normal_weight"], ["def", "__init__", "(", "self", ",", "n_bits", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_bits", "=", "n_bits", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n", "# Operator that quantize weight.", "\n", "self", ".", "weight_quantize_op", "=", "QuantizeWeight", "(", "self", ".", "n_bits", ")", "\n", "\n", "# create float shadow w and real integer w.", "\n", "weight_size", "=", "(", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", ")", "\n", "self", ".", "shadow_w", "=", "torch", ".", "nn", ".", "Parameter", "(", "get_normal_weight", "(", "weight_size", ",", "n_bits", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"w\"", ",", "torch", ".", "zeros", "(", "weight_size", ")", ",", "persistent", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeConv.forward": [[179, 182], ["torch.nn.functional.conv2d", "quantize.QuantizeConv.weight_quantize_op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight_quantize_op", "(", "self", ".", "shadow_w", ")", "if", "self", ".", "training", "else", "self", ".", "w", "\n", "return", "functional", ".", "conv2d", "(", "x", ",", "w", ",", "bias", "=", "None", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeConv._prepare_eval": [[183, 185], ["quantize.QuantizeConv.weight_quantize_op"], "methods", ["None"], ["", "def", "_prepare_eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "w", "=", "self", ".", "weight_quantize_op", "(", "self", ".", "shadow_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeConv.train": [[186, 190], ["super().train", "quantize.QuantizeConv._prepare_eval"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc.train", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc._prepare_eval"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "if", "not", "mode", ":", "\n", "            ", "self", ".", "_prepare_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuanConvShift.__init__": [[193, 195], ["quantize.QuantizeConv.__init__"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuanConvShift.foward": [[196, 199], ["quantize.QuanConvShift.weight_quantize_op"], "methods", ["None"], ["", "def", "foward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight_quantize_op", "(", "self", ".", "shadow_w", ")", "if", "self", ".", "training", "else", "self", ".", "w", "\n", "w", "=", "2", "**", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc.__init__": [[197, 210], ["torch.nn.Module.__init__", "quantize.QuantizeWeight", "torch.nn.Parameter", "quantize.QuantizeFc.register_buffer", "quantize.get_normal_weight", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.get_normal_weight"], ["        ", "w", "=", "self", ".", "weight_quantize_op", "(", "self", ".", "shadow_w", ")", "if", "self", ".", "training", "else", "self", ".", "w", "\n", "w", "=", "2", "**", "w", "\n", "\n", "\n", "", "", "class", "QuantizeFc", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Implementation of quantized fully connected layer\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "n_bits", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_bits", "=", "n_bits", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc.forward": [[211, 214], ["torch.matmul", "quantize.QuantizeFc.weight_quantize_op"], "methods", ["None"], ["\n", "# Operator that quantize weight.", "\n", "self", ".", "weight_quantize_op", "=", "QuantizeWeight", "(", "self", ".", "n_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc._prepare_eval": [[215, 217], ["quantize.QuantizeFc.weight_quantize_op"], "methods", ["None"], ["# This weight is not integer. It is quantized before forward propagating.", "\n", "weight_size", "=", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "shadow_w", "=", "torch", ".", "nn", ".", "Parameter", "(", "get_normal_weight", "(", "weight_size", ",", "n_bits", ")", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc.train": [[218, 222], ["super().train", "quantize.QuantizeFc._prepare_eval"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc.train", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc._prepare_eval"], ["self", ".", "register_buffer", "(", "\"w\"", ",", "torch", ".", "zeros", "(", "weight_size", ")", ",", "persistent", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight_quantize_op", "(", "self", ".", "shadow_w", ")", "if", "self", ".", "training", "else", "self", ".", "w", "\n", "return", "torch", ".", "matmul", "(", "x", ",", "w", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.get_normal_weight": [[7, 19], ["torch.nn.init.normal_", "torch.clamp", "torch.zeros", "layer.misc.get_bounds"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.misc.get_bounds"], ["def", "get_normal_weight", "(", "size", ":", "tuple", ",", "n_bits", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Generate normal weight.\n    Assume that weight obeys standard normal distribution.\n    First initialize the weight to standard normal distribution.\n    Then scale it to exploit n-bits-integer's representing ability.\n    Assume that normal distribution data spans from -4 to 4.\n    So scale factor is 2 ^ n_bits / 8 = 2 ^ (n_bits - 3)\n    This function has been verified.\n    \"\"\"", "\n", "w", "=", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "torch", ".", "zeros", "(", "size", ")", ")", "\n", "return", "torch", ".", "clamp", "(", "w", "*", "2", "**", "(", "n_bits", "-", "3", ")", ",", "*", "get_bounds", "(", "n_bits", ",", "signed", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.TaskQueueThread.__init__": [[147, 151], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.TaskQueueThread.run": [[152, 158], ["__init__.TaskQueueThread.task_fn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_cfg": [[17, 140], ["json.loads", "print", "torch.nn.DataParallel", "dataset.get_loader", "torch.optim.Adam", "math.pow", "open().read", "override.items", "json.loads.keys", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.parameters", "torch.optim.lr_scheduler.StepLR", "range", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "torch.save", "isinstance", "torch.load", "process.train_one_epoch", "process.test_once", "log.append", "log.append", "log.append", "print", "d[].replace", "isinstance", "torch.nn.DataParallel.module.load_state_dict", "torch.save", "torch.nn.DataParallel.load_state_dict", "torch.save", "open", "open", "eval", "isinstance", "copy.deepcopy", "copy.deepcopy", "f.write", "copy.deepcopy", "copy.deepcopy", "torch.nn.DataParallel.module.state_dict", "torch.nn.DataParallel.state_dict", "torch.optim.Adam.state_dict", "torch.nn.DataParallel.module.state_dict", "torch.nn.DataParallel.state_dict"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.train.train_one_epoch", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_multi_cfg": [[160, 173], ["__init__.TaskQueueThread", "TaskQueueThread.start", "thread_pool.append", "threading.Thread.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.resume.resume": [[5, 28], ["json.load", "print", "cfg.exec_cfg", "open", "float", "float", "int", "input", "input", "input", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_cfg"], ["def", "resume", "(", ")", ":", "\n", "    ", "\"\"\"\n    Continue to train\n    \"\"\"", "\n", "d", "=", "json", ".", "load", "(", "open", "(", "\"./config.json\"", ",", "\"r\"", ")", ")", "\n", "try", ":", "\n", "        ", "lr", "=", "float", "(", "input", "(", "f\"Default LR     is {d['LR']:.3e}, please input LR:\"", ")", ")", "\n", "lr_fin", "=", "float", "(", "input", "(", "f\"Default LR_FIN is {d['LR_FIN']:.3e}, please input LR_FIN:\"", ")", ")", "\n", "epochs", "=", "int", "(", "input", "(", "f\"Default EPOCHS is {d['EPOCHS']}, please input EPOCHS:\"", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "\"Input error, using default\"", ")", "\n", "lr", "=", "d", "[", "\"LR\"", "]", "\n", "lr_fin", "=", "d", "[", "\"LR_FIN\"", "]", "\n", "epochs", "=", "d", "[", "\"EPOCHS\"", "]", "\n", "", "print", "(", "\"********** continue to train **********\"", ")", "\n", "exec_cfg", "(", "\"./config.json\"", ",", "\n", "{", "\n", "\"state_file\"", ":", "\"./state.pth\"", ",", "\n", "\"save_dir\"", ":", "\"..\"", ",", "\n", "\"proj_dir\"", ":", "\"../..\"", ",", "\n", "\"LR\"", ":", "lr", ",", "\n", "\"LR_FIN\"", ":", "lr_fin", ",", "\n", "\"EPOCH\"", ":", "epochs", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.save_image.save_images": [[11, 20], ["range", "numpy.transpose", "f.write", "label.item"], "function", ["None"], ["def", "save_images", "(", "images", ",", "labels", ",", "batch_ind", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "image", "=", "images", "[", "i", "]", "\n", "label", "=", "labels", "[", "i", "]", "\n", "image", "=", "npy", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# only 1 channel", "\n", "# image = np.concatenate([image] * 3, axis=2)", "\n", "# plt.imsave(f\"test_images/{batch_size * batch_ind + i:04d}.{label.item()}.bmp\", image / 255)", "\n", "            ", "f", ".", "write", "(", "f\"{batch_size * batch_ind + i:04d}.{label.item()}.bmp\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.replay.replay": [[8, 20], ["json.loads", "dataset.get_loader", "importlib.import_module", "exec", "net.load_state_dict", "process.test_once", "open().read", "torch.load", "open", "d[].split", "eval"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once"], ["def", "replay", "(", ")", ":", "\n", "    ", "\"\"\"\n    Replay saved model in current directory.\n    There should be config.json, model.py, state.pth, layer.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "d", "[", "\"BATCH_SIZE\"", "]", ")", "\n", "model_module", "=", "importlib", ".", "import_module", "(", "\"net\"", ")", "\n", "exec", "(", "f\"model=model_module.\"", "+", "d", "[", "\"MODEL\"", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "net", "=", "eval", "(", "\"model\"", ")", "(", "**", "d", "[", "\"MODEL_PARAM\"", "]", ")", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"state.pth\"", ")", ")", "\n", "test_once", "(", "net", ",", "test_loader", ",", "batch_size", "=", "d", "[", "\"BATCH_SIZE\"", "]", ",", "epoch", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.train.train_one_epoch": [[5, 56], ["net.train", "tqdm.tqdm", "torch.nn.CrossEntropyLoss", "enumerate", "batch_data.cuda.cuda", "batch_label.cuda.cuda", "net.zero_grad", "net", "torch.nn.CrossEntropyLoss.", "loss_fn.backward", "opt.step", "torch.argmax", "torch.eq().sum().item", "torch.topk", "torch.eq().sum().item", "tqdm.tqdm.set_postfix_str", "lr_sch.step", "torch.eq().sum", "batch_label.cuda.numel", "torch.eq().sum", "batch_label.cuda.numel", "opt.state_dict", "torch.eq", "torch.eq", "batch_label.cuda.view"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.layer.quantize.QuantizeFc.train", "home.repos.pwc.inspect_result.hguq_IntegerNet.layer.function.STECeil.backward"], ["def", "train_one_epoch", "(", "net", ",", "dataloader", ",", "opt", ",", "batch_size", "=", "512", ",", "lr_sch", "=", "None", ",", "epoch", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function is used to train a net with a specific dataset for one epoch.\n    :param net:           torch.nn.Module\n    :param dataloader:      torchvision.data.utils.Dataloader\n    :param opt:             optimizer\n    :param batch_size:      batch size\n    :param lr_sch:          weather to use learning rate scheduler\n    :param epoch:           how many epochs to train\n    :return:                top1_rate & top5_rate, in tuple format\n    \"\"\"", "\n", "# Set net to train mode", "\n", "net", ".", "train", "(", ")", "\n", "bar", "=", "tqdm", ".", "tqdm", "(", "dataloader", ")", "\n", "loss_fn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "top1_correct", "=", "0", "\n", "top5_correct", "=", "0", "\n", "top1_rate", "=", "0", "\n", "top5_rate", "=", "0", "\n", "for", "batch_ind", ",", "(", "batch_data", ",", "batch_label", ")", "in", "enumerate", "(", "bar", ")", ":", "\n", "# Put data input gpu", "\n", "        ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "batch_label", "=", "batch_label", ".", "cuda", "(", ")", "\n", "\n", "# reset net gradient", "\n", "net", ".", "zero_grad", "(", ")", "\n", "# Calculate loss", "\n", "predict", "=", "net", "(", "batch_data", ")", "\n", "loss", "=", "loss_fn", "(", "predict", ",", "batch_label", ")", "\n", "\n", "# back propagate loss and optimize", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "# Calculate top1 & top5 accuracy", "\n", "top1", "=", "torch", ".", "argmax", "(", "predict", ",", "dim", "=", "1", ")", "\n", "top1_correct", "+=", "torch", ".", "eq", "(", "top1", ",", "batch_label", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "top1_rate", "=", "top1_correct", "/", "(", "batch_size", "*", "batch_ind", "+", "batch_label", ".", "numel", "(", ")", ")", "\n", "\n", "_", ",", "top5", "=", "torch", ".", "topk", "(", "predict", ",", "k", "=", "5", ",", "dim", "=", "1", ")", "\n", "top5_correct", "+=", "torch", ".", "eq", "(", "top5", ",", "batch_label", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "top5_rate", "=", "top5_correct", "/", "(", "batch_size", "*", "batch_ind", "+", "batch_label", ".", "numel", "(", ")", ")", "\n", "\n", "cur_lr", "=", "opt", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "bar", ".", "set_postfix_str", "(", "\n", "f\"TRAIN {epoch} {top1_rate * 100:2.2f}% {top5_rate * 100:2.2f}% {cur_lr:.3e}\"", ")", "\n", "", "if", "lr_sch", ":", "\n", "        ", "lr_sch", ".", "step", "(", ")", "\n", "", "return", "top1_rate", ",", "top5_rate", "\n", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.asrt_int": [[14, 18], ["numba.jit", "numpy.sum", "numpy.abs", "numpy.floor"], "function", ["None"], ["@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "asrt_int", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "eps", "=", "1e-100", "\n", "assert", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", "-", "np", ".", "floor", "(", "x", ")", ")", ")", "<", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.raw_relu": [[20, 24], ["numba.jit", "raw.asrt_int", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_relu", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "return", "np", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.raw_pool": [[26, 44], ["numba.jit", "raw.asrt_int", "math.floor", "math.floor", "numpy.zeros", "range", "range", "range", "range", "range", "range", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_pool", "(", "image", ":", "np", ".", "ndarray", ",", "kernel", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "N", ",", "C", ",", "HI", ",", "WI", "=", "image", ".", "shape", "\n", "HO", "=", "math", ".", "floor", "(", "HI", "/", "kernel", "[", "0", "]", ")", "\n", "WO", "=", "math", ".", "floor", "(", "WI", "/", "kernel", "[", "1", "]", ")", "\n", "res", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "C", ",", "HO", ",", "WO", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "for", "ho", "in", "range", "(", "HO", ")", ":", "\n", "                ", "for", "wo", "in", "range", "(", "WO", ")", ":", "\n", "                    ", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "-", "1e20", "\n", "for", "dh", "in", "range", "(", "kernel", "[", "0", "]", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "kernel", "[", "1", "]", ")", ":", "\n", "                            ", "h", "=", "ho", "*", "2", "+", "dh", "\n", "w", "=", "wo", "*", "2", "+", "dw", "\n", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "np", ".", "maximum", "(", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", ",", "image", "[", "n", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.raw_conv": [[46, 77], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "numpy.zeros", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_conv", "(", "image", ":", "np", ".", "ndarray", ",", "weight", ":", "np", ".", "ndarray", ")", ":", "\n", "# image[N, CI, H, W] weight[CO, CI, K, K]", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "asrt_int", "(", "weight", ")", "\n", "\n", "assert", "image", ".", "shape", "[", "1", "]", "==", "weight", ".", "shape", "[", "1", "]", "\n", "assert", "weight", ".", "shape", "[", "2", "]", "==", "weight", ".", "shape", "[", "3", "]", "\n", "N", ",", "CI", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "CO", ",", "_", ",", "K", ",", "_", "=", "weight", ".", "shape", "\n", "# K must be odd", "\n", "assert", "K", "%", "2", "\n", "\n", "# Kernel span range, for example: K=3, then k=1", "\n", "k", "=", "K", "//", "2", "\n", "res", "=", "np", ".", "zeros", "(", "(", "N", ",", "CO", ",", "H", ",", "W", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "                ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "dh", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                            ", "image_h", "=", "h", "+", "dh", "\n", "image_w", "=", "w", "+", "dw", "\n", "if", "0", "<=", "image_h", "<", "H", "and", "0", "<=", "image_w", "<", "W", ":", "\n", "                                ", "weight_h", "=", "k", "+", "dh", "\n", "weight_w", "=", "k", "+", "dw", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                                    ", "res", "[", "n", ",", "co", ",", "h", ",", "w", "]", "+=", "image", "[", "n", ",", "ci", ",", "image_h", ",", "image_w", "]", "*", "weight", "[", "co", ",", "ci", ",", "weight_h", ",", "weight_w", "]", "\n", "", "", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.raw_fc": [[80, 84], ["raw.asrt_int", "raw.asrt_int", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "def", "raw_fc", "(", "x", ",", "w", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "w", ")", "\n", "return", "np", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.raw_quantize": [[86, 103], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "raw.asrt_int", "numpy.floor", "numpy.maximum", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "n_bit", ",", "signed", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "bias", ")", "\n", "asrt_int", "(", "shift", ")", "\n", "res", "=", "np", ".", "floor", "(", "(", "x", "-", "bias", ")", "/", "(", "2", "**", "shift", ")", ")", "\n", "if", "signed", ":", "\n", "        ", "upper_bound", "=", "2", "**", "(", "n_bit", "-", "1", ")", "-", "1", "\n", "lower_bound", "=", "-", "upper_bound", "\n", "", "else", ":", "\n", "        ", "lower_bound", "=", "0", "\n", "upper_bound", "=", "2", "**", "n_bit", "-", "1", "\n", "\n", "# return np.clip(res, -bound, bound)", "\n", "", "res", "=", "np", ".", "maximum", "(", "res", ",", "lower_bound", ")", "\n", "res", "=", "np", ".", "minimum", "(", "res", ",", "upper_bound", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.raw_inference": [[105, 124], ["raw_pool.reshape", "isinstance", "isinstance", "raw.raw_conv", "isinstance", "raw.raw_fc", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "raw.raw_pool"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "def", "raw_inference", "(", "x", ",", "net", ")", ":", "\n", "    ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "            ", "x", "=", "raw_conv", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "            ", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "            ", "x", "=", "raw_fc", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.draw_images": [[126, 135], ["range", "numpy.transpose", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "numpy.concatenate"], "function", ["None"], ["", "def", "draw_images", "(", "images", ",", "s", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "image", "=", "images", "[", "0", "]", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# only 1 channel", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", "]", "*", "3", ",", "axis", "=", "2", ")", "\n", "", "plt", ".", "imshow", "(", "image", "/", "255", ")", "\n", "plt", ".", "title", "(", "s", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.raw_replay": [[137, 153], ["json.loads", "dataset.get_loader", "enumerate", "open().read", "image.cpu().numpy.cpu().numpy", "[].argmax().item", "label[].item", "raw.draw_images", "open", "image.cpu().numpy.cpu", "[].argmax", "raw.raw_inference"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.draw_images", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_inference"], ["", "", "def", "raw_replay", "(", "net", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    replay a model in raw mode.\n    with n image.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "t", "==", "n", ":", "\n", "            ", "break", "\n", "", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "res", "=", "raw_inference", "(", "image", ",", "net", ")", "[", "0", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "label", "=", "label", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "draw_images", "(", "image", ",", "f\"{label}:{res}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.raw.save_raw_parameter": [[155, 250], ["json.loads", "dataset.get_loader", "[].numpy", "open().read", "open", "raw_pool.reshape", "isinstance", "isinstance", "open", "next", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_conv", "isinstance", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_fc", "isinstance", "iter", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "f.write", "f.write", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "raw.raw_relu", "isinstance", "f.write", "f.write", "f.write", "f.write", "f.write", "raw.raw_relu", "range", "f.write", "f.write", "raw.raw_pool", "f.write", "round", "round", "round", "round", "round", "bias[].item", "shift[].item", "w[].item", "bias[].item", "shift[].item", "round", "weight[].item"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "", "def", "save_raw_parameter", "(", "net", ",", "file_path", ")", ":", "\n", "    ", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "x", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "                ", "weight", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "_", ",", "CI", ",", "H", ",", "W", "=", "x", ".", "shape", "# N is deserted", "\n", "CO", ",", "*", "_", "=", "weight", ".", "shape", "\n", "f", ".", "write", "(", "\"CONV \"", ")", "\n", "f", ".", "write", "(", "f\"CO {CO} CI {CI} H {H} W {W}\\n\"", ")", "\n", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                        ", "for", "h", "in", "range", "(", "3", ")", ":", "\n", "                            ", "for", "w", "in", "range", "(", "3", ")", ":", "\n", "                                ", "f", ".", "write", "(", "f\"{round(weight[co, ci, h, w].item())} \"", ")", "\n", "", "", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_conv", "(", "x", ",", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "# here shift is always negative, so change it to positive", "\n", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"POOL \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "                ", "w", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "\n", "CI", ",", "CO", "=", "w", ".", "shape", "\n", "f", ".", "write", "(", "\"FC \"", ")", "\n", "f", ".", "write", "(", "f\"CI {CI} CO {CO}\\n\"", ")", "\n", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                    ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                        ", "f", ".", "write", "(", "f\"{round(w[ci, co].item())} \"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_fc", "(", "x", ",", "w", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {1} W {1}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {x.shape[1]} H 1 W 1\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once": [[6, 38], ["torch.nn.DataParallel.eval", "tqdm.tqdm", "enumerate", "isinstance", "torch.nn.DataParallel", "torch.nn.DataParallel", "batch_data.cuda.cuda", "batch_label.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.nn.DataParallel.", "torch.argmax", "torch.argmax", "torch.eq().sum().item", "torch.eq().sum().item", "torch.topk", "torch.topk", "torch.eq().sum().item", "torch.eq().sum().item", "tqdm.tqdm.set_postfix_str", "torch.eq().sum", "torch.eq().sum", "batch_label.cuda.numel", "torch.eq().sum", "torch.eq().sum", "batch_label.cuda.numel", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "batch_label.cuda.view"], "function", ["None"], ["def", "test_once", "(", "net", ",", "dataloader", ",", "batch_size", "=", "512", ",", "epoch", "=", "None", ")", ":", "\n", "# Set net to test mode", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "bar", "=", "tqdm", ".", "tqdm", "(", "dataloader", ")", "\n", "\n", "# If not paralleled, make it parallel to run on multiple gpu", "\n", "if", "not", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", "\n", "\n", "", "top1_correct", "=", "0", "\n", "top5_correct", "=", "0", "\n", "top1_rate", "=", "0", "\n", "top5_rate", "=", "0", "\n", "for", "batch_ind", ",", "(", "batch_data", ",", "batch_label", ")", "in", "enumerate", "(", "bar", ")", ":", "\n", "# Put data into gpu", "\n", "        ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "batch_label", "=", "batch_label", ".", "cuda", "(", ")", "\n", "\n", "# Pure inference do not require grad", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "predict", "=", "net", "(", "batch_data", ")", "\n", "\n", "top1", "=", "torch", ".", "argmax", "(", "predict", ",", "dim", "=", "1", ")", "\n", "top1_correct", "+=", "torch", ".", "eq", "(", "top1", ",", "batch_label", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "top1_rate", "=", "top1_correct", "/", "(", "batch_size", "*", "batch_ind", "+", "batch_label", ".", "numel", "(", ")", ")", "\n", "\n", "_", ",", "top5", "=", "torch", ".", "topk", "(", "predict", ",", "5", ",", "1", ")", "\n", "top5_correct", "+=", "torch", ".", "eq", "(", "top5", ",", "batch_label", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "top5_rate", "=", "top5_correct", "/", "(", "batch_size", "*", "batch_ind", "+", "batch_label", ".", "numel", "(", ")", ")", "\n", "\n", "bar", ".", "set_postfix_str", "(", "f\"TEST {epoch} TOP1 {top1_rate * 100:2.2f}% TOP5 {top5_rate * 100:2.2f}%\"", ")", "\n", "", "", "return", "top1_rate", ",", "top5_rate", "\n", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.ccpd.CCPD.__init__": [[12, 17], ["open().read().split", "os.listdir", "folder.startswith", "open().read", "open", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "folders", "=", "[", "folder", "for", "folder", "in", "os", ".", "listdir", "(", "self", ".", "path", ")", "if", "folder", ".", "startswith", "(", "\"ccpd\"", ")", "]", "\n", "self", ".", "file_list", "=", "open", "(", "join", "(", "self", ".", "path", ",", "\"splits\"", ",", "\"train.txt\"", "if", "train", "else", "\"test.txt\"", ")", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.ccpd.CCPD.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.ccpd.CCPD.__getitem__": [[21, 27], ["PIL.Image.open", "os.path.join", "ccpd.CCPD.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "file_list", "[", "index", "]", "\n", "pil_img", "=", "Image", ".", "open", "(", "join", "(", "self", ".", "path", ",", "file_name", ")", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "pil_img", "=", "self", ".", "transform", "(", "pil_img", ")", "\n", "", "return", "pil_img", ",", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.ccpd.get_ccpd": [[29, 44], ["ccpd.CCPD", "torch.utils.data.DataLoader", "ccpd.CCPD", "torch.utils.data.DataLoader", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "get_ccpd", "(", "dataset_path", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "\"\"\"\n    return ccpd train & test dataloader\n    :param dataset_path: dataset path\n    :param batch_size: batch size\n    :return: ccpd train & test dataloader\n    \"\"\"", "\n", "if", "num_workers", "is", "None", ":", "\n", "        ", "num_workers", "=", "8", "\n", "", "train_set", "=", "CCPD", "(", "path", "=", "join", "(", "dataset_path", ",", "\"CCPD2019\"", ")", ",", "train", "=", "True", ",", "transform", "=", "ccpd_transform", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "test_set", "=", "CCPD", "(", "path", "=", "join", "(", "dataset_path", ",", "\"CCPD2019\"", ")", ",", "train", "=", "False", ",", "transform", "=", "ccpd_transform", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.cifar100.get_cifar100": [[10, 25], ["torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_cifar100", "(", "dataset_path", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "\"\"\"\n    return cifar100 train & test dataloader\n    :param dataset_path: dataset path\n    :param batch_size:  batch size\n    :return: cifar100 train & test dataloder\n    \"\"\"", "\n", "if", "num_workers", "is", "None", ":", "\n", "        ", "num_workers", "=", "8", "\n", "", "train_set", "=", "CIFAR100", "(", "join", "(", "dataset_path", ",", "\"cifar100\"", ")", ",", "train", "=", "True", ",", "transform", "=", "cifar_train_transform", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "test_set", "=", "CIFAR100", "(", "join", "(", "dataset_path", ",", "\"cifar100\"", ")", ",", "train", "=", "False", ",", "transform", "=", "cifar_test_transform", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.mnist.get_mnist": [[16, 30], ["torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_mnist", "(", "dataset_path", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "\"\"\"\n    return mnist train & test dataloader.\n    :param dataset_path: dataset path\n    :param batch_size: batch size\n    :return: mnist train & test dataloader\n    \"\"\"", "\n", "if", "num_workers", "is", "None", ":", "\n", "        ", "num_workers", "=", "4", "\n", "", "train_set", "=", "MNIST", "(", "join", "(", "dataset_path", ",", "\"mnist\"", ")", ",", "train", "=", "True", ",", "transform", "=", "mnist_transform", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "test_set", "=", "MNIST", "(", "join", "(", "dataset_path", ",", "\"mnist\"", ")", ",", "train", "=", "False", ",", "transform", "=", "mnist_transform", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.imagenet.get_imagenet": [[19, 34], ["torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_imagenet", "(", "dataset_path", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "\"\"\"\n    return imagenet train & test dataloader\n    :param dataset_path: dataset path\n    :param batch_size: batch_size\n    :return: train & test loader\n    \"\"\"", "\n", "if", "num_workers", "is", "None", ":", "\n", "        ", "num_workers", "=", "16", "\n", "", "train_set", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "join", "(", "dataset_path", ",", "\"imagenet/train\"", ")", ",", "\n", "transform", "=", "imagenet_transform", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "test_set", "=", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "join", "(", "dataset_path", ",", "\"imagenet/test\"", ")", ",", "transform", "=", "imagenet_transform", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.cifar10.get_cifar10": [[10, 25], ["torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_cifar10", "(", "dataset_path", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "\"\"\"\n    return cifar10 train & test dataloader\n    :param dataset_path: dataset path\n    :param batch_size: batch size\n    :return: cifar10 train & test dataloader\n    \"\"\"", "\n", "if", "num_workers", "is", "None", ":", "\n", "        ", "num_workers", "=", "8", "\n", "", "train_set", "=", "CIFAR10", "(", "join", "(", "dataset_path", ",", "\"cifar10\"", ")", ",", "train", "=", "True", ",", "transform", "=", "cifar_train_transform", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "test_set", "=", "CIFAR10", "(", "join", "(", "dataset_path", ",", "\"cifar10\"", ")", ",", "train", "=", "False", ",", "transform", "=", "cifar_test_transform", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", "//", "4", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader": [[18, 28], ["eval", "dataset.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.test_datasets": [[30, 67], ["__init__.get_loader", "next", "print", "next", "print", "__init__.get_loader", "next", "print", "next", "print", "__init__.get_loader", "next", "print", "next", "print", "__init__.get_loader", "next", "print", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "next", "print", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "iter", "data.max", "data.min", "iter", "data.max", "data.min", "iter", "data.max", "data.min", "iter", "data.max", "data.min", "iter", "data.max", "data.min", "iter", "data.max", "data.min", "iter", "data.max", "data.min", "data[].permute", "iter", "data.max", "data.min", "data[].permute", "label.item", "label.item"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.util.Float2Int.__call__": [[14, 16], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.util.Float2Int.__repr__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.resume.resume": [[5, 28], ["json.load", "print", "cfg.exec_cfg", "open", "float", "float", "int", "input", "input", "input", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_cfg"], ["def", "resume", "(", ")", ":", "\n", "    ", "\"\"\"\n    Continue to train\n    \"\"\"", "\n", "d", "=", "json", ".", "load", "(", "open", "(", "\"./config.json\"", ",", "\"r\"", ")", ")", "\n", "try", ":", "\n", "        ", "lr", "=", "float", "(", "input", "(", "f\"Default LR     is {d['LR']:.3e}, please input LR:\"", ")", ")", "\n", "lr_fin", "=", "float", "(", "input", "(", "f\"Default LR_FIN is {d['LR_FIN']:.3e}, please input LR_FIN:\"", ")", ")", "\n", "epochs", "=", "int", "(", "input", "(", "f\"Default EPOCHS is {d['EPOCHS']}, please input EPOCHS:\"", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "\"Input error, using default\"", ")", "\n", "lr", "=", "d", "[", "\"LR\"", "]", "\n", "lr_fin", "=", "d", "[", "\"LR_FIN\"", "]", "\n", "epochs", "=", "d", "[", "\"EPOCHS\"", "]", "\n", "", "print", "(", "\"********** continue to train **********\"", ")", "\n", "exec_cfg", "(", "\"./config.json\"", ",", "\n", "{", "\n", "\"state_file\"", ":", "\"./state.pth\"", ",", "\n", "\"save_dir\"", ":", "\"..\"", ",", "\n", "\"proj_dir\"", ":", "\"../..\"", ",", "\n", "\"LR\"", ":", "lr", ",", "\n", "\"LR_FIN\"", ":", "lr_fin", ",", "\n", "\"EPOCH\"", ":", "epochs", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.replay.replay": [[8, 20], ["json.loads", "dataset.get_loader", "importlib.import_module", "exec", "net.load_state_dict", "process.test_once", "open().read", "torch.load", "open", "d[].split", "eval"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once"], ["def", "replay", "(", ")", ":", "\n", "    ", "\"\"\"\n    Replay saved model in current directory.\n    There should be config.json, model.py, state.pth, layer.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "d", "[", "\"BATCH_SIZE\"", "]", ")", "\n", "model_module", "=", "importlib", ".", "import_module", "(", "\"net\"", ")", "\n", "exec", "(", "f\"model=model_module.\"", "+", "d", "[", "\"MODEL\"", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "net", "=", "eval", "(", "\"model\"", ")", "(", "**", "d", "[", "\"MODEL_PARAM\"", "]", ")", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"state.pth\"", ")", ")", "\n", "test_once", "(", "net", ",", "test_loader", ",", "batch_size", "=", "d", "[", "\"BATCH_SIZE\"", "]", ",", "epoch", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.net.MNISTNET_INT.__init__": [[10, 35], ["super().__init__", "Sequential", "Sequential", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeFc", "QuantizeActSBN", "QuantizeFc", "QuantizeActSBN"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 14 * 14", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 7 * 7", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 3 * 3", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "3", "*", "3", "*", "16", ",", "128", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "128", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.net.MNISTNET_INT.forward": [[37, 43], ["net.MNISTNET_INT.conv", "net.MNISTNET_INT.view", "net.MNISTNET_INT.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.asrt_int": [[15, 19], ["numba.jit", "numpy.sum", "numpy.abs", "numpy.floor"], "function", ["None"], ["def", "asrt_int", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "eps", "=", "1e-100", "\n", "assert", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", "-", "np", ".", "floor", "(", "x", ")", ")", ")", "<", "eps", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.raw_relu": [[21, 25], ["numba.jit", "raw.asrt_int", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["def", "raw_relu", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "return", "np", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.raw_pool": [[27, 45], ["numba.jit", "raw.asrt_int", "math.floor", "math.floor", "numpy.zeros", "range", "range", "range", "range", "range", "range", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["def", "raw_pool", "(", "image", ":", "np", ".", "ndarray", ",", "kernel", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "N", ",", "C", ",", "HI", ",", "WI", "=", "image", ".", "shape", "\n", "HO", "=", "math", ".", "floor", "(", "HI", "/", "kernel", "[", "0", "]", ")", "\n", "WO", "=", "math", ".", "floor", "(", "WI", "/", "kernel", "[", "1", "]", ")", "\n", "res", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "C", ",", "HO", ",", "WO", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "for", "ho", "in", "range", "(", "HO", ")", ":", "\n", "                ", "for", "wo", "in", "range", "(", "WO", ")", ":", "\n", "                    ", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "-", "1e20", "\n", "for", "dh", "in", "range", "(", "kernel", "[", "0", "]", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "kernel", "[", "1", "]", ")", ":", "\n", "                            ", "h", "=", "ho", "*", "2", "+", "dh", "\n", "w", "=", "wo", "*", "2", "+", "dw", "\n", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "np", ".", "maximum", "(", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", ",", "image", "[", "n", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "", "", "", "", "", "", "return", "res", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.raw_conv": [[47, 78], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "numpy.zeros", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["def", "raw_conv", "(", "image", ":", "np", ".", "ndarray", ",", "weight", ":", "np", ".", "ndarray", ")", ":", "\n", "# image[N, CI, H, W] weight[CO, CI, K, K]", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "asrt_int", "(", "weight", ")", "\n", "\n", "assert", "image", ".", "shape", "[", "1", "]", "==", "weight", ".", "shape", "[", "1", "]", "\n", "assert", "weight", ".", "shape", "[", "2", "]", "==", "weight", ".", "shape", "[", "3", "]", "\n", "N", ",", "CI", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "CO", ",", "_", ",", "K", ",", "_", "=", "weight", ".", "shape", "\n", "# K must be odd", "\n", "assert", "K", "%", "2", "\n", "\n", "# Kernel span range, for example: K=3, then k=1", "\n", "k", "=", "K", "//", "2", "\n", "res", "=", "np", ".", "zeros", "(", "(", "N", ",", "CO", ",", "H", ",", "W", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "                ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "dh", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                            ", "image_h", "=", "h", "+", "dh", "\n", "image_w", "=", "w", "+", "dw", "\n", "if", "0", "<=", "image_h", "<", "H", "and", "0", "<=", "image_w", "<", "W", ":", "\n", "                                ", "weight_h", "=", "k", "+", "dh", "\n", "weight_w", "=", "k", "+", "dw", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                                    ", "res", "[", "n", ",", "co", ",", "h", ",", "w", "]", "+=", "image", "[", "n", ",", "ci", ",", "image_h", ",", "image_w", "]", "*", "weight", "[", "co", ",", "ci", ",", "weight_h", ",", "weight_w", "]", "\n", "", "", "", "", "", "", "", "", "return", "res", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.raw_fc": [[81, 85], ["raw.asrt_int", "raw.asrt_int", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "w", ")", "\n", "return", "np", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.raw_quantize": [[88, 105], ["raw.asrt_int", "raw.asrt_int", "raw.asrt_int", "numpy.floor", "print", "numpy.maximum", "numpy.minimum", "np.minimum.max", "np.minimum.min"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "bias", ")", "\n", "asrt_int", "(", "shift", ")", "\n", "res", "=", "np", ".", "floor", "(", "(", "x", "-", "bias", ")", "/", "(", "2", "**", "shift", ")", ")", "\n", "if", "signed", ":", "\n", "        ", "upper_bound", "=", "2", "**", "(", "n_bit", "-", "1", ")", "-", "1", "\n", "lower_bound", "=", "-", "upper_bound", "\n", "", "else", ":", "\n", "        ", "lower_bound", "=", "0", "\n", "upper_bound", "=", "2", "**", "n_bit", "-", "1", "\n", "\n", "# return np.clip(res, -bound, bound)", "\n", "", "res", "=", "np", ".", "maximum", "(", "res", ",", "lower_bound", ")", "\n", "res", "=", "np", ".", "minimum", "(", "res", ",", "upper_bound", ")", "\n", "return", "res", "\n", "\n", "\n", "", "def", "raw_inference", "(", "x", ",", "net", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.raw_inference": [[107, 126], ["raw_pool.reshape", "isinstance", "isinstance", "raw.raw_conv", "isinstance", "raw.raw_fc", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "raw.raw_pool"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["        ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "            ", "x", "=", "raw_conv", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "            ", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "            ", "x", "=", "raw_fc", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n", "\n", "", "def", "draw_images", "(", "images", ",", "s", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.draw_images": [[128, 137], ["range", "numpy.transpose", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "numpy.concatenate"], "function", ["None"], ["        ", "image", "=", "images", "[", "0", "]", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# only 1 channel", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", "]", "*", "3", ",", "axis", "=", "2", ")", "\n", "", "plt", ".", "imshow", "(", "image", "/", "255", ")", "\n", "plt", ".", "title", "(", "s", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "", "", "def", "raw_replay", "(", "net", ",", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.raw_replay": [[139, 155], ["json.loads", "dataset.get_loader", "enumerate", "open().read", "image.cpu().numpy.cpu().numpy", "[].argmax().item", "label[].item", "raw.draw_images", "open", "image.cpu().numpy.cpu", "[].argmax", "raw.raw_inference"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.draw_images", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_inference"], ["\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "t", "==", "n", ":", "\n", "            ", "break", "\n", "", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "res", "=", "raw_inference", "(", "image", ",", "net", ")", "[", "0", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "label", "=", "label", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "draw_images", "(", "image", ",", "f\"{label}:{res}\"", ")", "\n", "\n", "\n", "", "", "def", "save_raw_parameter", "(", "net", ",", "file_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_bit4_99.39_99.99.raw.save_raw_parameter": [[157, 252], ["json.loads", "dataset.get_loader", "[].numpy", "open().read", "open", "raw_pool.reshape", "isinstance", "isinstance", "open", "next", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_conv", "isinstance", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_fc", "isinstance", "iter", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "f.write", "f.write", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "raw.raw_relu", "isinstance", "f.write", "f.write", "f.write", "f.write", "f.write", "raw.raw_relu", "range", "f.write", "f.write", "raw.raw_pool", "f.write", "round", "round", "round", "round", "round", "bias[].item", "shift[].item", "w[].item", "bias[].item", "shift[].item", "round", "weight[].item"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "x", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "                ", "weight", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "_", ",", "CI", ",", "H", ",", "W", "=", "x", ".", "shape", "# N is deserted", "\n", "CO", ",", "*", "_", "=", "weight", ".", "shape", "\n", "f", ".", "write", "(", "\"CONV \"", ")", "\n", "f", ".", "write", "(", "f\"CO {CO} CI {CI} H {H} W {W}\\n\"", ")", "\n", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                        ", "for", "h", "in", "range", "(", "3", ")", ":", "\n", "                            ", "for", "w", "in", "range", "(", "3", ")", ":", "\n", "                                ", "f", ".", "write", "(", "f\"{round(weight[co, ci, h, w].item())} \"", ")", "\n", "", "", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_conv", "(", "x", ",", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "# here shift is always negative, so change it to positive", "\n", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"POOL \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "                ", "w", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "\n", "CI", ",", "CO", "=", "w", ".", "shape", "\n", "f", ".", "write", "(", "\"FC \"", ")", "\n", "f", ".", "write", "(", "f\"CI {CI} CO {CO}\\n\"", ")", "\n", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                    ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                        ", "f", ".", "write", "(", "f\"{round(w[ci, co].item())} \"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_fc", "(", "x", ",", "w", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {1} W {1}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {x.shape[1]} H 1 W 1\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.resume.resume": [[5, 28], ["json.load", "print", "cfg.exec_cfg", "open", "float", "float", "int", "input", "input", "input", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_cfg"], ["def", "resume", "(", ")", ":", "\n", "    ", "\"\"\"\n    Continue to train\n    \"\"\"", "\n", "d", "=", "json", ".", "load", "(", "open", "(", "\"./config.json\"", ",", "\"r\"", ")", ")", "\n", "try", ":", "\n", "        ", "lr", "=", "float", "(", "input", "(", "f\"Default LR     is {d['LR']:.3e}, please input LR:\"", ")", ")", "\n", "lr_fin", "=", "float", "(", "input", "(", "f\"Default LR_FIN is {d['LR_FIN']:.3e}, please input LR_FIN:\"", ")", ")", "\n", "epochs", "=", "int", "(", "input", "(", "f\"Default EPOCHS is {d['EPOCHS']}, please input EPOCHS:\"", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "\"Input error, using default\"", ")", "\n", "lr", "=", "d", "[", "\"LR\"", "]", "\n", "lr_fin", "=", "d", "[", "\"LR_FIN\"", "]", "\n", "epochs", "=", "d", "[", "\"EPOCHS\"", "]", "\n", "", "print", "(", "\"********** continue to train **********\"", ")", "\n", "exec_cfg", "(", "\"./config.json\"", ",", "\n", "{", "\n", "\"state_file\"", ":", "\"./state.pth\"", ",", "\n", "\"save_dir\"", ":", "\"..\"", ",", "\n", "\"proj_dir\"", ":", "\"../..\"", ",", "\n", "\"LR\"", ":", "lr", ",", "\n", "\"LR_FIN\"", ":", "lr_fin", ",", "\n", "\"EPOCH\"", ":", "epochs", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.replay.replay": [[8, 20], ["json.loads", "dataset.get_loader", "importlib.import_module", "exec", "net.load_state_dict", "process.test_once", "open().read", "torch.load", "open", "d[].split", "eval"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once"], ["def", "replay", "(", ")", ":", "\n", "    ", "\"\"\"\n    Replay saved model in current directory.\n    There should be config.json, model.py, state.pth, layer.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "d", "[", "\"BATCH_SIZE\"", "]", ")", "\n", "model_module", "=", "importlib", ".", "import_module", "(", "\"net\"", ")", "\n", "exec", "(", "f\"model=model_module.\"", "+", "d", "[", "\"MODEL\"", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "net", "=", "eval", "(", "\"model\"", ")", "(", "**", "d", "[", "\"MODEL_PARAM\"", "]", ")", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"state.pth\"", ")", ")", "\n", "test_once", "(", "net", ",", "test_loader", ",", "batch_size", "=", "d", "[", "\"BATCH_SIZE\"", "]", ",", "epoch", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.net.MNISTNET.__init__": [[6, 35], ["super().__init__", "torch.nn.Sequential", "Sequential", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Linear", "BatchNorm1d", "ReLU", "Linear", "BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "\"\"\"\n    Implementation of a small network for mnist dataset\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 14 * 14", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 7 * 7", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 3 * 3", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "3", "*", "3", "*", "16", ",", "128", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "128", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.net.MNISTNET.forward": [[37, 43], ["net.MNISTNET.conv", "net.MNISTNET.view", "net.MNISTNET.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.asrt_int": [[14, 18], ["numba.jit", "numpy.sum", "numpy.abs", "numpy.floor"], "function", ["None"], ["@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "asrt_int", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "eps", "=", "1e-100", "\n", "assert", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", "-", "np", ".", "floor", "(", "x", ")", ")", ")", "<", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.raw_relu": [[20, 24], ["numba.jit", "raw.asrt_int", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_relu", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "return", "np", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.raw_pool": [[26, 44], ["numba.jit", "raw.asrt_int", "math.floor", "math.floor", "numpy.zeros", "range", "range", "range", "range", "range", "range", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_pool", "(", "image", ":", "np", ".", "ndarray", ",", "kernel", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "N", ",", "C", ",", "HI", ",", "WI", "=", "image", ".", "shape", "\n", "HO", "=", "math", ".", "floor", "(", "HI", "/", "kernel", "[", "0", "]", ")", "\n", "WO", "=", "math", ".", "floor", "(", "WI", "/", "kernel", "[", "1", "]", ")", "\n", "res", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "C", ",", "HO", ",", "WO", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "for", "ho", "in", "range", "(", "HO", ")", ":", "\n", "                ", "for", "wo", "in", "range", "(", "WO", ")", ":", "\n", "                    ", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "-", "1e20", "\n", "for", "dh", "in", "range", "(", "kernel", "[", "0", "]", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "kernel", "[", "1", "]", ")", ":", "\n", "                            ", "h", "=", "ho", "*", "2", "+", "dh", "\n", "w", "=", "wo", "*", "2", "+", "dw", "\n", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "np", ".", "maximum", "(", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", ",", "image", "[", "n", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.raw_conv": [[46, 77], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "numpy.zeros", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_conv", "(", "image", ":", "np", ".", "ndarray", ",", "weight", ":", "np", ".", "ndarray", ")", ":", "\n", "# image[N, CI, H, W] weight[CO, CI, K, K]", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "asrt_int", "(", "weight", ")", "\n", "\n", "assert", "image", ".", "shape", "[", "1", "]", "==", "weight", ".", "shape", "[", "1", "]", "\n", "assert", "weight", ".", "shape", "[", "2", "]", "==", "weight", ".", "shape", "[", "3", "]", "\n", "N", ",", "CI", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "CO", ",", "_", ",", "K", ",", "_", "=", "weight", ".", "shape", "\n", "# K must be odd", "\n", "assert", "K", "%", "2", "\n", "\n", "# Kernel span range, for example: K=3, then k=1", "\n", "k", "=", "K", "//", "2", "\n", "res", "=", "np", ".", "zeros", "(", "(", "N", ",", "CO", ",", "H", ",", "W", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "                ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "dh", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                            ", "image_h", "=", "h", "+", "dh", "\n", "image_w", "=", "w", "+", "dw", "\n", "if", "0", "<=", "image_h", "<", "H", "and", "0", "<=", "image_w", "<", "W", ":", "\n", "                                ", "weight_h", "=", "k", "+", "dh", "\n", "weight_w", "=", "k", "+", "dw", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                                    ", "res", "[", "n", ",", "co", ",", "h", ",", "w", "]", "+=", "image", "[", "n", ",", "ci", ",", "image_h", ",", "image_w", "]", "*", "weight", "[", "co", ",", "ci", ",", "weight_h", ",", "weight_w", "]", "\n", "", "", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.raw_fc": [[80, 84], ["raw.asrt_int", "raw.asrt_int", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "def", "raw_fc", "(", "x", ",", "w", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "w", ")", "\n", "return", "np", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.raw_quantize": [[86, 103], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "raw.asrt_int", "numpy.floor", "numpy.maximum", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "n_bit", ",", "signed", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "bias", ")", "\n", "asrt_int", "(", "shift", ")", "\n", "res", "=", "np", ".", "floor", "(", "(", "x", "-", "bias", ")", "/", "(", "2", "**", "shift", ")", ")", "\n", "if", "signed", ":", "\n", "        ", "upper_bound", "=", "2", "**", "(", "n_bit", "-", "1", ")", "-", "1", "\n", "lower_bound", "=", "-", "upper_bound", "\n", "", "else", ":", "\n", "        ", "lower_bound", "=", "0", "\n", "upper_bound", "=", "2", "**", "n_bit", "-", "1", "\n", "\n", "# return np.clip(res, -bound, bound)", "\n", "", "res", "=", "np", ".", "maximum", "(", "res", ",", "lower_bound", ")", "\n", "res", "=", "np", ".", "minimum", "(", "res", ",", "upper_bound", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.raw_inference": [[105, 124], ["raw_pool.reshape", "isinstance", "isinstance", "raw.raw_conv", "isinstance", "raw.raw_fc", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "raw.raw_pool"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "def", "raw_inference", "(", "x", ",", "net", ")", ":", "\n", "    ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "            ", "x", "=", "raw_conv", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "            ", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "            ", "x", "=", "raw_fc", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.draw_images": [[126, 135], ["range", "numpy.transpose", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "numpy.concatenate"], "function", ["None"], ["", "def", "draw_images", "(", "images", ",", "s", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "image", "=", "images", "[", "0", "]", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# only 1 channel", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", "]", "*", "3", ",", "axis", "=", "2", ")", "\n", "", "plt", ".", "imshow", "(", "image", "/", "255", ")", "\n", "plt", ".", "title", "(", "s", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.raw_replay": [[137, 153], ["json.loads", "dataset.get_loader", "enumerate", "open().read", "image.cpu().numpy.cpu().numpy", "[].argmax().item", "label[].item", "raw.draw_images", "open", "image.cpu().numpy.cpu", "[].argmax", "raw.raw_inference"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.draw_images", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_inference"], ["", "", "def", "raw_replay", "(", "net", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    replay a model in raw mode.\n    with n image.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "t", "==", "n", ":", "\n", "            ", "break", "\n", "", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "res", "=", "raw_inference", "(", "image", ",", "net", ")", "[", "0", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "label", "=", "label", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "draw_images", "(", "image", ",", "f\"{label}:{res}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mnist_99.35_99.99.raw.save_raw_parameter": [[155, 250], ["json.loads", "dataset.get_loader", "[].numpy", "open().read", "open", "raw_pool.reshape", "isinstance", "isinstance", "open", "next", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_conv", "isinstance", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_fc", "isinstance", "iter", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "f.write", "f.write", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "raw.raw_relu", "isinstance", "f.write", "f.write", "f.write", "f.write", "f.write", "raw.raw_relu", "range", "f.write", "f.write", "raw.raw_pool", "f.write", "round", "round", "round", "round", "round", "bias[].item", "shift[].item", "w[].item", "bias[].item", "shift[].item", "round", "weight[].item"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "", "def", "save_raw_parameter", "(", "net", ",", "file_path", ")", ":", "\n", "    ", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "x", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "                ", "weight", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "_", ",", "CI", ",", "H", ",", "W", "=", "x", ".", "shape", "# N is deserted", "\n", "CO", ",", "*", "_", "=", "weight", ".", "shape", "\n", "f", ".", "write", "(", "\"CONV \"", ")", "\n", "f", ".", "write", "(", "f\"CO {CO} CI {CI} H {H} W {W}\\n\"", ")", "\n", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                        ", "for", "h", "in", "range", "(", "3", ")", ":", "\n", "                            ", "for", "w", "in", "range", "(", "3", ")", ":", "\n", "                                ", "f", ".", "write", "(", "f\"{round(weight[co, ci, h, w].item())} \"", ")", "\n", "", "", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_conv", "(", "x", ",", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "# here shift is always negative, so change it to positive", "\n", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"POOL \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "                ", "w", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "\n", "CI", ",", "CO", "=", "w", ".", "shape", "\n", "f", ".", "write", "(", "\"FC \"", ")", "\n", "f", ".", "write", "(", "f\"CI {CI} CO {CO}\\n\"", ")", "\n", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                    ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                        ", "f", ".", "write", "(", "f\"{round(w[ci, co].item())} \"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_fc", "(", "x", ",", "w", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {1} W {1}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {x.shape[1]} H 1 W 1\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.resume.resume": [[5, 28], ["json.load", "print", "cfg.exec_cfg", "open", "float", "float", "int", "input", "input", "input", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_cfg"], ["def", "resume", "(", ")", ":", "\n", "    ", "\"\"\"\n    Continue to train\n    \"\"\"", "\n", "d", "=", "json", ".", "load", "(", "open", "(", "\"./config.json\"", ",", "\"r\"", ")", ")", "\n", "try", ":", "\n", "        ", "lr", "=", "float", "(", "input", "(", "f\"Default LR     is {d['LR']:.3e}, please input LR:\"", ")", ")", "\n", "lr_fin", "=", "float", "(", "input", "(", "f\"Default LR_FIN is {d['LR_FIN']:.3e}, please input LR_FIN:\"", ")", ")", "\n", "epochs", "=", "int", "(", "input", "(", "f\"Default EPOCHS is {d['EPOCHS']}, please input EPOCHS:\"", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "\"Input error, using default\"", ")", "\n", "lr", "=", "d", "[", "\"LR\"", "]", "\n", "lr_fin", "=", "d", "[", "\"LR_FIN\"", "]", "\n", "epochs", "=", "d", "[", "\"EPOCHS\"", "]", "\n", "", "print", "(", "\"********** continue to train **********\"", ")", "\n", "exec_cfg", "(", "\"./config.json\"", ",", "\n", "{", "\n", "\"state_file\"", ":", "\"./state.pth\"", ",", "\n", "\"save_dir\"", ":", "\"..\"", ",", "\n", "\"proj_dir\"", ":", "\"../..\"", ",", "\n", "\"LR\"", ":", "lr", ",", "\n", "\"LR_FIN\"", ":", "lr_fin", ",", "\n", "\"EPOCH\"", ":", "epochs", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.replay.replay": [[8, 20], ["json.loads", "dataset.get_loader", "importlib.import_module", "exec", "net.load_state_dict", "process.test_once", "open().read", "torch.load", "open", "d[].split", "eval"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once"], ["def", "replay", "(", ")", ":", "\n", "    ", "\"\"\"\n    Replay saved model in current directory.\n    There should be config.json, model.py, state.pth, layer.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "d", "[", "\"BATCH_SIZE\"", "]", ")", "\n", "model_module", "=", "importlib", ".", "import_module", "(", "\"net\"", ")", "\n", "exec", "(", "f\"model=model_module.\"", "+", "d", "[", "\"MODEL\"", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "net", "=", "eval", "(", "\"model\"", ")", "(", "**", "d", "[", "\"MODEL_PARAM\"", "]", ")", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"state.pth\"", ")", ")", "\n", "test_once", "(", "net", ",", "test_loader", ",", "batch_size", "=", "d", "[", "\"BATCH_SIZE\"", "]", ",", "epoch", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.net.CIFAR100NET.__init__": [[6, 58], ["super().__init__", "torch.nn.Sequential", "Sequential", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Linear", "BatchNorm1d", "ReLU", "Linear", "BatchNorm1d", "ReLU", "Linear", "BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "\"\"\"\n    Implementation of a small network for mnist dataset\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 14 * 14", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 7 * 7", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 3 * 3", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "3", "*", "3", "*", "16", ",", "128", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "128", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.net.CIFAR100NET.forward": [[60, 66], ["net.CIFAR100NET.conv", "net.CIFAR100NET.view", "net.CIFAR100NET.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.asrt_int": [[14, 18], ["numba.jit", "numpy.sum", "numpy.abs", "numpy.floor"], "function", ["None"], ["@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "asrt_int", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "eps", "=", "1e-100", "\n", "assert", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", "-", "np", ".", "floor", "(", "x", ")", ")", ")", "<", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.raw_relu": [[20, 24], ["numba.jit", "raw.asrt_int", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_relu", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "return", "np", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.raw_pool": [[26, 44], ["numba.jit", "raw.asrt_int", "math.floor", "math.floor", "numpy.zeros", "range", "range", "range", "range", "range", "range", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_pool", "(", "image", ":", "np", ".", "ndarray", ",", "kernel", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "N", ",", "C", ",", "HI", ",", "WI", "=", "image", ".", "shape", "\n", "HO", "=", "math", ".", "floor", "(", "HI", "/", "kernel", "[", "0", "]", ")", "\n", "WO", "=", "math", ".", "floor", "(", "WI", "/", "kernel", "[", "1", "]", ")", "\n", "res", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "C", ",", "HO", ",", "WO", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "for", "ho", "in", "range", "(", "HO", ")", ":", "\n", "                ", "for", "wo", "in", "range", "(", "WO", ")", ":", "\n", "                    ", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "-", "1e20", "\n", "for", "dh", "in", "range", "(", "kernel", "[", "0", "]", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "kernel", "[", "1", "]", ")", ":", "\n", "                            ", "h", "=", "ho", "*", "2", "+", "dh", "\n", "w", "=", "wo", "*", "2", "+", "dw", "\n", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "np", ".", "maximum", "(", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", ",", "image", "[", "n", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.raw_conv": [[46, 77], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "numpy.zeros", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_conv", "(", "image", ":", "np", ".", "ndarray", ",", "weight", ":", "np", ".", "ndarray", ")", ":", "\n", "# image[N, CI, H, W] weight[CO, CI, K, K]", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "asrt_int", "(", "weight", ")", "\n", "\n", "assert", "image", ".", "shape", "[", "1", "]", "==", "weight", ".", "shape", "[", "1", "]", "\n", "assert", "weight", ".", "shape", "[", "2", "]", "==", "weight", ".", "shape", "[", "3", "]", "\n", "N", ",", "CI", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "CO", ",", "_", ",", "K", ",", "_", "=", "weight", ".", "shape", "\n", "# K must be odd", "\n", "assert", "K", "%", "2", "\n", "\n", "# Kernel span range, for example: K=3, then k=1", "\n", "k", "=", "K", "//", "2", "\n", "res", "=", "np", ".", "zeros", "(", "(", "N", ",", "CO", ",", "H", ",", "W", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "                ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "dh", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                            ", "image_h", "=", "h", "+", "dh", "\n", "image_w", "=", "w", "+", "dw", "\n", "if", "0", "<=", "image_h", "<", "H", "and", "0", "<=", "image_w", "<", "W", ":", "\n", "                                ", "weight_h", "=", "k", "+", "dh", "\n", "weight_w", "=", "k", "+", "dw", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                                    ", "res", "[", "n", ",", "co", ",", "h", ",", "w", "]", "+=", "image", "[", "n", ",", "ci", ",", "image_h", ",", "image_w", "]", "*", "weight", "[", "co", ",", "ci", ",", "weight_h", ",", "weight_w", "]", "\n", "", "", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.raw_fc": [[80, 84], ["raw.asrt_int", "raw.asrt_int", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "def", "raw_fc", "(", "x", ",", "w", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "w", ")", "\n", "return", "np", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.raw_quantize": [[86, 103], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "raw.asrt_int", "numpy.floor", "numpy.maximum", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "n_bit", ",", "signed", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "bias", ")", "\n", "asrt_int", "(", "shift", ")", "\n", "res", "=", "np", ".", "floor", "(", "(", "x", "-", "bias", ")", "/", "(", "2", "**", "shift", ")", ")", "\n", "if", "signed", ":", "\n", "        ", "upper_bound", "=", "2", "**", "(", "n_bit", "-", "1", ")", "-", "1", "\n", "lower_bound", "=", "-", "upper_bound", "\n", "", "else", ":", "\n", "        ", "lower_bound", "=", "0", "\n", "upper_bound", "=", "2", "**", "n_bit", "-", "1", "\n", "\n", "# return np.clip(res, -bound, bound)", "\n", "", "res", "=", "np", ".", "maximum", "(", "res", ",", "lower_bound", ")", "\n", "res", "=", "np", ".", "minimum", "(", "res", ",", "upper_bound", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.raw_inference": [[105, 124], ["raw_pool.reshape", "isinstance", "isinstance", "raw.raw_conv", "isinstance", "raw.raw_fc", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "raw.raw_pool"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "def", "raw_inference", "(", "x", ",", "net", ")", ":", "\n", "    ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "            ", "x", "=", "raw_conv", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "            ", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "            ", "x", "=", "raw_fc", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.draw_images": [[126, 135], ["range", "numpy.transpose", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "numpy.concatenate"], "function", ["None"], ["", "def", "draw_images", "(", "images", ",", "s", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "image", "=", "images", "[", "0", "]", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# only 1 channel", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", "]", "*", "3", ",", "axis", "=", "2", ")", "\n", "", "plt", ".", "imshow", "(", "image", "/", "255", ")", "\n", "plt", ".", "title", "(", "s", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.raw_replay": [[137, 153], ["json.loads", "dataset.get_loader", "enumerate", "open().read", "image.cpu().numpy.cpu().numpy", "[].argmax().item", "label[].item", "raw.draw_images", "open", "image.cpu().numpy.cpu", "[].argmax", "raw.raw_inference"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.draw_images", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_inference"], ["", "", "def", "raw_replay", "(", "net", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    replay a model in raw mode.\n    with n image.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "t", "==", "n", ":", "\n", "            ", "break", "\n", "", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "res", "=", "raw_inference", "(", "image", ",", "net", ")", "[", "0", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "label", "=", "label", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "draw_images", "(", "image", ",", "f\"{label}:{res}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_55.70_77.69.raw.save_raw_parameter": [[155, 250], ["json.loads", "dataset.get_loader", "[].numpy", "open().read", "open", "raw_pool.reshape", "isinstance", "isinstance", "open", "next", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_conv", "isinstance", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_fc", "isinstance", "iter", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "f.write", "f.write", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "raw.raw_relu", "isinstance", "f.write", "f.write", "f.write", "f.write", "f.write", "raw.raw_relu", "range", "f.write", "f.write", "raw.raw_pool", "f.write", "round", "round", "round", "round", "round", "bias[].item", "shift[].item", "w[].item", "bias[].item", "shift[].item", "round", "weight[].item"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "", "def", "save_raw_parameter", "(", "net", ",", "file_path", ")", ":", "\n", "    ", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "x", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "                ", "weight", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "_", ",", "CI", ",", "H", ",", "W", "=", "x", ".", "shape", "# N is deserted", "\n", "CO", ",", "*", "_", "=", "weight", ".", "shape", "\n", "f", ".", "write", "(", "\"CONV \"", ")", "\n", "f", ".", "write", "(", "f\"CO {CO} CI {CI} H {H} W {W}\\n\"", ")", "\n", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                        ", "for", "h", "in", "range", "(", "3", ")", ":", "\n", "                            ", "for", "w", "in", "range", "(", "3", ")", ":", "\n", "                                ", "f", ".", "write", "(", "f\"{round(weight[co, ci, h, w].item())} \"", ")", "\n", "", "", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_conv", "(", "x", ",", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "# here shift is always negative, so change it to positive", "\n", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"POOL \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "                ", "w", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "\n", "CI", ",", "CO", "=", "w", ".", "shape", "\n", "f", ".", "write", "(", "\"FC \"", ")", "\n", "f", ".", "write", "(", "f\"CI {CI} CO {CO}\\n\"", ")", "\n", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                    ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                        ", "f", ".", "write", "(", "f\"{round(w[ci, co].item())} \"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_fc", "(", "x", ",", "w", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {1} W {1}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {x.shape[1]} H 1 W 1\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.resume.resume": [[5, 28], ["json.load", "print", "cfg.exec_cfg", "open", "float", "float", "int", "input", "input", "input", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_cfg"], ["def", "resume", "(", ")", ":", "\n", "    ", "\"\"\"\n    Continue to train\n    \"\"\"", "\n", "d", "=", "json", ".", "load", "(", "open", "(", "\"./config.json\"", ",", "\"r\"", ")", ")", "\n", "try", ":", "\n", "        ", "lr", "=", "float", "(", "input", "(", "f\"Default LR     is {d['LR']:.3e}, please input LR:\"", ")", ")", "\n", "lr_fin", "=", "float", "(", "input", "(", "f\"Default LR_FIN is {d['LR_FIN']:.3e}, please input LR_FIN:\"", ")", ")", "\n", "epochs", "=", "int", "(", "input", "(", "f\"Default EPOCHS is {d['EPOCHS']}, please input EPOCHS:\"", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "\"Input error, using default\"", ")", "\n", "lr", "=", "d", "[", "\"LR\"", "]", "\n", "lr_fin", "=", "d", "[", "\"LR_FIN\"", "]", "\n", "epochs", "=", "d", "[", "\"EPOCHS\"", "]", "\n", "", "print", "(", "\"********** continue to train **********\"", ")", "\n", "exec_cfg", "(", "\"./config.json\"", ",", "\n", "{", "\n", "\"state_file\"", ":", "\"./state.pth\"", ",", "\n", "\"save_dir\"", ":", "\"..\"", ",", "\n", "\"proj_dir\"", ":", "\"../..\"", ",", "\n", "\"LR\"", ":", "lr", ",", "\n", "\"LR_FIN\"", ":", "lr_fin", ",", "\n", "\"EPOCH\"", ":", "epochs", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.replay.replay": [[8, 20], ["json.loads", "dataset.get_loader", "importlib.import_module", "exec", "net.load_state_dict", "process.test_once", "open().read", "torch.load", "open", "d[].split", "eval"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once"], ["def", "replay", "(", ")", ":", "\n", "    ", "\"\"\"\n    Replay saved model in current directory.\n    There should be config.json, model.py, state.pth, layer.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "d", "[", "\"BATCH_SIZE\"", "]", ")", "\n", "model_module", "=", "importlib", ".", "import_module", "(", "\"net\"", ")", "\n", "exec", "(", "f\"model=model_module.\"", "+", "d", "[", "\"MODEL\"", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "net", "=", "eval", "(", "\"model\"", ")", "(", "**", "d", "[", "\"MODEL_PARAM\"", "]", ")", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"state.pth\"", ")", ")", "\n", "test_once", "(", "net", ",", "test_loader", ",", "batch_size", "=", "d", "[", "\"BATCH_SIZE\"", "]", ",", "epoch", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.net.CIFAR100NET_INT.__init__": [[6, 58], ["super().__init__", "torch.nn.Sequential", "Sequential", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "MaxPool2d", "QuantizeFc", "QuantizeActSBN", "ReLU", "QuantizeFc", "QuantizeActSBN", "ReLU", "QuantizeFc", "QuantizeActSBN"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "\"\"\"\n    Implementation of a small network for mnist dataset\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 14 * 14", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 7 * 7", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 3 * 3", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "3", "*", "3", "*", "16", ",", "128", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "128", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.net.CIFAR100NET_INT.forward": [[60, 66], ["net.CIFAR100NET_INT.conv", "net.CIFAR100NET_INT.view", "net.CIFAR100NET_INT.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.asrt_int": [[14, 18], ["numba.jit", "numpy.sum", "numpy.abs", "numpy.floor"], "function", ["None"], ["@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "asrt_int", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "eps", "=", "1e-100", "\n", "assert", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", "-", "np", ".", "floor", "(", "x", ")", ")", ")", "<", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.raw_relu": [[20, 24], ["numba.jit", "raw.asrt_int", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_relu", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "return", "np", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.raw_pool": [[26, 44], ["numba.jit", "raw.asrt_int", "math.floor", "math.floor", "numpy.zeros", "range", "range", "range", "range", "range", "range", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_pool", "(", "image", ":", "np", ".", "ndarray", ",", "kernel", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "N", ",", "C", ",", "HI", ",", "WI", "=", "image", ".", "shape", "\n", "HO", "=", "math", ".", "floor", "(", "HI", "/", "kernel", "[", "0", "]", ")", "\n", "WO", "=", "math", ".", "floor", "(", "WI", "/", "kernel", "[", "1", "]", ")", "\n", "res", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "C", ",", "HO", ",", "WO", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "for", "ho", "in", "range", "(", "HO", ")", ":", "\n", "                ", "for", "wo", "in", "range", "(", "WO", ")", ":", "\n", "                    ", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "-", "1e20", "\n", "for", "dh", "in", "range", "(", "kernel", "[", "0", "]", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "kernel", "[", "1", "]", ")", ":", "\n", "                            ", "h", "=", "ho", "*", "2", "+", "dh", "\n", "w", "=", "wo", "*", "2", "+", "dw", "\n", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "np", ".", "maximum", "(", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", ",", "image", "[", "n", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.raw_conv": [[46, 77], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "numpy.zeros", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_conv", "(", "image", ":", "np", ".", "ndarray", ",", "weight", ":", "np", ".", "ndarray", ")", ":", "\n", "# image[N, CI, H, W] weight[CO, CI, K, K]", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "asrt_int", "(", "weight", ")", "\n", "\n", "assert", "image", ".", "shape", "[", "1", "]", "==", "weight", ".", "shape", "[", "1", "]", "\n", "assert", "weight", ".", "shape", "[", "2", "]", "==", "weight", ".", "shape", "[", "3", "]", "\n", "N", ",", "CI", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "CO", ",", "_", ",", "K", ",", "_", "=", "weight", ".", "shape", "\n", "# K must be odd", "\n", "assert", "K", "%", "2", "\n", "\n", "# Kernel span range, for example: K=3, then k=1", "\n", "k", "=", "K", "//", "2", "\n", "res", "=", "np", ".", "zeros", "(", "(", "N", ",", "CO", ",", "H", ",", "W", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "                ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "dh", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                            ", "image_h", "=", "h", "+", "dh", "\n", "image_w", "=", "w", "+", "dw", "\n", "if", "0", "<=", "image_h", "<", "H", "and", "0", "<=", "image_w", "<", "W", ":", "\n", "                                ", "weight_h", "=", "k", "+", "dh", "\n", "weight_w", "=", "k", "+", "dw", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                                    ", "res", "[", "n", ",", "co", ",", "h", ",", "w", "]", "+=", "image", "[", "n", ",", "ci", ",", "image_h", ",", "image_w", "]", "*", "weight", "[", "co", ",", "ci", ",", "weight_h", ",", "weight_w", "]", "\n", "", "", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.raw_fc": [[80, 84], ["raw.asrt_int", "raw.asrt_int", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "def", "raw_fc", "(", "x", ",", "w", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "w", ")", "\n", "return", "np", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.raw_quantize": [[86, 103], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "raw.asrt_int", "numpy.floor", "numpy.maximum", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "n_bit", ",", "signed", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "bias", ")", "\n", "asrt_int", "(", "shift", ")", "\n", "res", "=", "np", ".", "floor", "(", "(", "x", "-", "bias", ")", "/", "(", "2", "**", "shift", ")", ")", "\n", "if", "signed", ":", "\n", "        ", "upper_bound", "=", "2", "**", "(", "n_bit", "-", "1", ")", "-", "1", "\n", "lower_bound", "=", "-", "upper_bound", "\n", "", "else", ":", "\n", "        ", "lower_bound", "=", "0", "\n", "upper_bound", "=", "2", "**", "n_bit", "-", "1", "\n", "\n", "# return np.clip(res, -bound, bound)", "\n", "", "res", "=", "np", ".", "maximum", "(", "res", ",", "lower_bound", ")", "\n", "res", "=", "np", ".", "minimum", "(", "res", ",", "upper_bound", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.raw_inference": [[105, 124], ["raw_pool.reshape", "isinstance", "isinstance", "raw.raw_conv", "isinstance", "raw.raw_fc", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "raw.raw_pool"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "def", "raw_inference", "(", "x", ",", "net", ")", ":", "\n", "    ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "            ", "x", "=", "raw_conv", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "            ", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "            ", "x", "=", "raw_fc", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.draw_images": [[126, 135], ["range", "numpy.transpose", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "numpy.concatenate"], "function", ["None"], ["", "def", "draw_images", "(", "images", ",", "s", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "image", "=", "images", "[", "0", "]", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# only 1 channel", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", "]", "*", "3", ",", "axis", "=", "2", ")", "\n", "", "plt", ".", "imshow", "(", "image", "/", "255", ")", "\n", "plt", ".", "title", "(", "s", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.raw_replay": [[137, 153], ["json.loads", "dataset.get_loader", "enumerate", "open().read", "image.cpu().numpy.cpu().numpy", "[].argmax().item", "label[].item", "raw.draw_images", "open", "image.cpu().numpy.cpu", "[].argmax", "raw.raw_inference"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.draw_images", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_inference"], ["", "", "def", "raw_replay", "(", "net", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    replay a model in raw mode.\n    with n image.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "t", "==", "n", ":", "\n", "            ", "break", "\n", "", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "res", "=", "raw_inference", "(", "image", ",", "net", ")", "[", "0", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "label", "=", "label", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "draw_images", "(", "image", ",", "f\"{label}:{res}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar100_bit4_55.61_75.76.raw.save_raw_parameter": [[155, 250], ["json.loads", "dataset.get_loader", "[].numpy", "open().read", "open", "raw_pool.reshape", "isinstance", "isinstance", "open", "next", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_conv", "isinstance", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_fc", "isinstance", "iter", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "f.write", "f.write", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "raw.raw_relu", "isinstance", "f.write", "f.write", "f.write", "f.write", "f.write", "raw.raw_relu", "range", "f.write", "f.write", "raw.raw_pool", "f.write", "round", "round", "round", "round", "round", "bias[].item", "shift[].item", "w[].item", "bias[].item", "shift[].item", "round", "weight[].item"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "", "def", "save_raw_parameter", "(", "net", ",", "file_path", ")", ":", "\n", "    ", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "x", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "                ", "weight", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "_", ",", "CI", ",", "H", ",", "W", "=", "x", ".", "shape", "# N is deserted", "\n", "CO", ",", "*", "_", "=", "weight", ".", "shape", "\n", "f", ".", "write", "(", "\"CONV \"", ")", "\n", "f", ".", "write", "(", "f\"CO {CO} CI {CI} H {H} W {W}\\n\"", ")", "\n", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                        ", "for", "h", "in", "range", "(", "3", ")", ":", "\n", "                            ", "for", "w", "in", "range", "(", "3", ")", ":", "\n", "                                ", "f", ".", "write", "(", "f\"{round(weight[co, ci, h, w].item())} \"", ")", "\n", "", "", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_conv", "(", "x", ",", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "# here shift is always negative, so change it to positive", "\n", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"POOL \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "                ", "w", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "\n", "CI", ",", "CO", "=", "w", ".", "shape", "\n", "f", ".", "write", "(", "\"FC \"", ")", "\n", "f", ".", "write", "(", "f\"CI {CI} CO {CO}\\n\"", ")", "\n", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                    ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                        ", "f", ".", "write", "(", "f\"{round(w[ci, co].item())} \"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_fc", "(", "x", ",", "w", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {1} W {1}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {x.shape[1]} H 1 W 1\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.resume.resume": [[5, 28], ["json.load", "print", "cfg.exec_cfg", "open", "float", "float", "int", "input", "input", "input", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_cfg"], ["def", "resume", "(", ")", ":", "\n", "    ", "\"\"\"\n    Continue to train\n    \"\"\"", "\n", "d", "=", "json", ".", "load", "(", "open", "(", "\"./config.json\"", ",", "\"r\"", ")", ")", "\n", "try", ":", "\n", "        ", "lr", "=", "float", "(", "input", "(", "f\"Default LR     is {d['LR']:.3e}, please input LR:\"", ")", ")", "\n", "lr_fin", "=", "float", "(", "input", "(", "f\"Default LR_FIN is {d['LR_FIN']:.3e}, please input LR_FIN:\"", ")", ")", "\n", "epochs", "=", "int", "(", "input", "(", "f\"Default EPOCHS is {d['EPOCHS']}, please input EPOCHS:\"", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "\"Input error, using default\"", ")", "\n", "lr", "=", "d", "[", "\"LR\"", "]", "\n", "lr_fin", "=", "d", "[", "\"LR_FIN\"", "]", "\n", "epochs", "=", "d", "[", "\"EPOCHS\"", "]", "\n", "", "print", "(", "\"********** continue to train **********\"", ")", "\n", "exec_cfg", "(", "\"./config.json\"", ",", "\n", "{", "\n", "\"state_file\"", ":", "\"./state.pth\"", ",", "\n", "\"save_dir\"", ":", "\"..\"", ",", "\n", "\"proj_dir\"", ":", "\"../..\"", ",", "\n", "\"LR\"", ":", "lr", ",", "\n", "\"LR_FIN\"", ":", "lr_fin", ",", "\n", "\"EPOCH\"", ":", "epochs", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.replay.replay": [[8, 20], ["json.loads", "dataset.get_loader", "importlib.import_module", "exec", "net.load_state_dict", "process.test_once", "open().read", "torch.load", "open", "d[].split", "eval"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once"], ["def", "replay", "(", ")", ":", "\n", "    ", "\"\"\"\n    Replay saved model in current directory.\n    There should be config.json, model.py, state.pth, layer.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "d", "[", "\"BATCH_SIZE\"", "]", ")", "\n", "model_module", "=", "importlib", ".", "import_module", "(", "\"net\"", ")", "\n", "exec", "(", "f\"model=model_module.\"", "+", "d", "[", "\"MODEL\"", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "net", "=", "eval", "(", "\"model\"", ")", "(", "**", "d", "[", "\"MODEL_PARAM\"", "]", ")", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"state.pth\"", ")", ")", "\n", "test_once", "(", "net", ",", "test_loader", ",", "batch_size", "=", "d", "[", "\"BATCH_SIZE\"", "]", ",", "epoch", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.net.CIFAR10NET_INT.__init__": [[6, 41], ["super().__init__", "torch.nn.Sequential", "Sequential", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeFc", "QuantizeActSBN", "QuantizeFc", "QuantizeActSBN"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "\"\"\"\n    Implementation of a small network for mnist dataset\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 14 * 14", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 7 * 7", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 3 * 3", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "3", "*", "3", "*", "16", ",", "128", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "128", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.net.CIFAR10NET_INT.forward": [[43, 49], ["net.CIFAR10NET_INT.conv", "net.CIFAR10NET_INT.view", "net.CIFAR10NET_INT.fc"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.asrt_int": [[14, 18], ["numba.jit", "numpy.sum", "numpy.abs", "numpy.floor"], "function", ["None"], ["@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "asrt_int", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "eps", "=", "1e-100", "\n", "assert", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", "-", "np", ".", "floor", "(", "x", ")", ")", ")", "<", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.raw_relu": [[20, 24], ["numba.jit", "raw.asrt_int", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_relu", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "return", "np", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.raw_pool": [[26, 44], ["numba.jit", "raw.asrt_int", "math.floor", "math.floor", "numpy.zeros", "range", "range", "range", "range", "range", "range", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_pool", "(", "image", ":", "np", ".", "ndarray", ",", "kernel", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "N", ",", "C", ",", "HI", ",", "WI", "=", "image", ".", "shape", "\n", "HO", "=", "math", ".", "floor", "(", "HI", "/", "kernel", "[", "0", "]", ")", "\n", "WO", "=", "math", ".", "floor", "(", "WI", "/", "kernel", "[", "1", "]", ")", "\n", "res", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "C", ",", "HO", ",", "WO", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "for", "ho", "in", "range", "(", "HO", ")", ":", "\n", "                ", "for", "wo", "in", "range", "(", "WO", ")", ":", "\n", "                    ", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "-", "1e20", "\n", "for", "dh", "in", "range", "(", "kernel", "[", "0", "]", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "kernel", "[", "1", "]", ")", ":", "\n", "                            ", "h", "=", "ho", "*", "2", "+", "dh", "\n", "w", "=", "wo", "*", "2", "+", "dw", "\n", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "np", ".", "maximum", "(", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", ",", "image", "[", "n", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.raw_conv": [[46, 77], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "numpy.zeros", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_conv", "(", "image", ":", "np", ".", "ndarray", ",", "weight", ":", "np", ".", "ndarray", ")", ":", "\n", "# image[N, CI, H, W] weight[CO, CI, K, K]", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "asrt_int", "(", "weight", ")", "\n", "\n", "assert", "image", ".", "shape", "[", "1", "]", "==", "weight", ".", "shape", "[", "1", "]", "\n", "assert", "weight", ".", "shape", "[", "2", "]", "==", "weight", ".", "shape", "[", "3", "]", "\n", "N", ",", "CI", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "CO", ",", "_", ",", "K", ",", "_", "=", "weight", ".", "shape", "\n", "# K must be odd", "\n", "assert", "K", "%", "2", "\n", "\n", "# Kernel span range, for example: K=3, then k=1", "\n", "k", "=", "K", "//", "2", "\n", "res", "=", "np", ".", "zeros", "(", "(", "N", ",", "CO", ",", "H", ",", "W", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "                ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "dh", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                            ", "image_h", "=", "h", "+", "dh", "\n", "image_w", "=", "w", "+", "dw", "\n", "if", "0", "<=", "image_h", "<", "H", "and", "0", "<=", "image_w", "<", "W", ":", "\n", "                                ", "weight_h", "=", "k", "+", "dh", "\n", "weight_w", "=", "k", "+", "dw", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                                    ", "res", "[", "n", ",", "co", ",", "h", ",", "w", "]", "+=", "image", "[", "n", ",", "ci", ",", "image_h", ",", "image_w", "]", "*", "weight", "[", "co", ",", "ci", ",", "weight_h", ",", "weight_w", "]", "\n", "", "", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.raw_fc": [[80, 84], ["raw.asrt_int", "raw.asrt_int", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "def", "raw_fc", "(", "x", ",", "w", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "w", ")", "\n", "return", "np", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.raw_quantize": [[86, 103], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "raw.asrt_int", "numpy.floor", "numpy.maximum", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "n_bit", ",", "signed", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "bias", ")", "\n", "asrt_int", "(", "shift", ")", "\n", "res", "=", "np", ".", "floor", "(", "(", "x", "-", "bias", ")", "/", "(", "2", "**", "shift", ")", ")", "\n", "if", "signed", ":", "\n", "        ", "upper_bound", "=", "2", "**", "(", "n_bit", "-", "1", ")", "-", "1", "\n", "lower_bound", "=", "-", "upper_bound", "\n", "", "else", ":", "\n", "        ", "lower_bound", "=", "0", "\n", "upper_bound", "=", "2", "**", "n_bit", "-", "1", "\n", "\n", "# return np.clip(res, -bound, bound)", "\n", "", "res", "=", "np", ".", "maximum", "(", "res", ",", "lower_bound", ")", "\n", "res", "=", "np", ".", "minimum", "(", "res", ",", "upper_bound", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.raw_inference": [[105, 124], ["raw_pool.reshape", "isinstance", "isinstance", "raw.raw_conv", "isinstance", "raw.raw_fc", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "raw.raw_pool"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "def", "raw_inference", "(", "x", ",", "net", ")", ":", "\n", "    ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "            ", "x", "=", "raw_conv", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "            ", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "            ", "x", "=", "raw_fc", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.draw_images": [[126, 135], ["range", "numpy.transpose", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "numpy.concatenate"], "function", ["None"], ["", "def", "draw_images", "(", "images", ",", "s", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "image", "=", "images", "[", "0", "]", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# only 1 channel", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", "]", "*", "3", ",", "axis", "=", "2", ")", "\n", "", "plt", ".", "imshow", "(", "image", "/", "255", ")", "\n", "plt", ".", "title", "(", "s", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.raw_replay": [[137, 153], ["json.loads", "dataset.get_loader", "enumerate", "open().read", "image.cpu().numpy.cpu().numpy", "[].argmax().item", "label[].item", "raw.draw_images", "open", "image.cpu().numpy.cpu", "[].argmax", "raw.raw_inference"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.draw_images", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_inference"], ["", "", "def", "raw_replay", "(", "net", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    replay a model in raw mode.\n    with n image.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "t", "==", "n", ":", "\n", "            ", "break", "\n", "", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "res", "=", "raw_inference", "(", "image", ",", "net", ")", "[", "0", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "label", "=", "label", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "draw_images", "(", "image", ",", "f\"{label}:{res}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_bit4_86.92_98.47.raw.save_raw_parameter": [[155, 250], ["json.loads", "dataset.get_loader", "[].numpy", "open().read", "open", "raw_pool.reshape", "isinstance", "isinstance", "open", "next", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_conv", "isinstance", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_fc", "isinstance", "iter", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "f.write", "f.write", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "raw.raw_relu", "isinstance", "f.write", "f.write", "f.write", "f.write", "f.write", "raw.raw_relu", "range", "f.write", "f.write", "raw.raw_pool", "f.write", "round", "round", "round", "round", "round", "bias[].item", "shift[].item", "w[].item", "bias[].item", "shift[].item", "round", "weight[].item"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "", "def", "save_raw_parameter", "(", "net", ",", "file_path", ")", ":", "\n", "    ", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "x", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "                ", "weight", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "_", ",", "CI", ",", "H", ",", "W", "=", "x", ".", "shape", "# N is deserted", "\n", "CO", ",", "*", "_", "=", "weight", ".", "shape", "\n", "f", ".", "write", "(", "\"CONV \"", ")", "\n", "f", ".", "write", "(", "f\"CO {CO} CI {CI} H {H} W {W}\\n\"", ")", "\n", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                        ", "for", "h", "in", "range", "(", "3", ")", ":", "\n", "                            ", "for", "w", "in", "range", "(", "3", ")", ":", "\n", "                                ", "f", ".", "write", "(", "f\"{round(weight[co, ci, h, w].item())} \"", ")", "\n", "", "", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_conv", "(", "x", ",", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "# here shift is always negative, so change it to positive", "\n", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"POOL \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "                ", "w", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "\n", "CI", ",", "CO", "=", "w", ".", "shape", "\n", "f", ".", "write", "(", "\"FC \"", ")", "\n", "f", ".", "write", "(", "f\"CI {CI} CO {CO}\\n\"", ")", "\n", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                    ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                        ", "f", ".", "write", "(", "f\"{round(w[ci, co].item())} \"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_fc", "(", "x", ",", "w", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {1} W {1}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {x.shape[1]} H 1 W 1\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.resume.resume": [[5, 28], ["json.load", "print", "cfg.exec_cfg", "open", "float", "float", "int", "input", "input", "input", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cfg.__init__.exec_cfg"], ["def", "resume", "(", ")", ":", "\n", "    ", "\"\"\"\n    Continue to train\n    \"\"\"", "\n", "d", "=", "json", ".", "load", "(", "open", "(", "\"./config.json\"", ",", "\"r\"", ")", ")", "\n", "try", ":", "\n", "        ", "lr", "=", "float", "(", "input", "(", "f\"Default LR     is {d['LR']:.3e}, please input LR:\"", ")", ")", "\n", "lr_fin", "=", "float", "(", "input", "(", "f\"Default LR_FIN is {d['LR_FIN']:.3e}, please input LR_FIN:\"", ")", ")", "\n", "epochs", "=", "int", "(", "input", "(", "f\"Default EPOCHS is {d['EPOCHS']}, please input EPOCHS:\"", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "\"Input error, using default\"", ")", "\n", "lr", "=", "d", "[", "\"LR\"", "]", "\n", "lr_fin", "=", "d", "[", "\"LR_FIN\"", "]", "\n", "epochs", "=", "d", "[", "\"EPOCHS\"", "]", "\n", "", "print", "(", "\"********** continue to train **********\"", ")", "\n", "exec_cfg", "(", "\"./config.json\"", ",", "\n", "{", "\n", "\"state_file\"", ":", "\"./state.pth\"", ",", "\n", "\"save_dir\"", ":", "\"..\"", ",", "\n", "\"proj_dir\"", ":", "\"../..\"", ",", "\n", "\"LR\"", ":", "lr", ",", "\n", "\"LR_FIN\"", ":", "lr_fin", ",", "\n", "\"EPOCH\"", ":", "epochs", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.replay.replay": [[8, 20], ["json.loads", "dataset.get_loader", "importlib.import_module", "exec", "net.load_state_dict", "process.test_once", "open().read", "torch.load", "open", "d[].split", "eval"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.process.test.test_once"], ["def", "replay", "(", ")", ":", "\n", "    ", "\"\"\"\n    Replay saved model in current directory.\n    There should be config.json, model.py, state.pth, layer.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "d", "[", "\"BATCH_SIZE\"", "]", ")", "\n", "model_module", "=", "importlib", ".", "import_module", "(", "\"net\"", ")", "\n", "exec", "(", "f\"model=model_module.\"", "+", "d", "[", "\"MODEL\"", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ")", "\n", "net", "=", "eval", "(", "\"model\"", ")", "(", "**", "d", "[", "\"MODEL_PARAM\"", "]", ")", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"state.pth\"", ")", ")", "\n", "test_once", "(", "net", ",", "test_loader", ",", "batch_size", "=", "d", "[", "\"BATCH_SIZE\"", "]", ",", "epoch", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.net.CIFAR10NET.__init__": [[6, 45], ["super().__init__", "torch.nn.Sequential", "Sequential", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Linear", "BatchNorm1d", "ReLU", "Linear", "BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "\"\"\"\n    Implementation of a small network for mnist dataset\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 14 * 14", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 7 * 7", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "16", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 3 * 3", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "3", "*", "3", "*", "16", ",", "128", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "128", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.net.CIFAR10NET.forward": [[47, 53], ["net.CIFAR10NET.conv", "net.CIFAR10NET.view", "net.CIFAR10NET.fc"], "methods", ["None"], []], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int": [[14, 18], ["numba.jit", "numpy.sum", "numpy.abs", "numpy.floor"], "function", ["None"], ["@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "asrt_int", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "eps", "=", "1e-100", "\n", "assert", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", "-", "np", ".", "floor", "(", "x", ")", ")", ")", "<", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu": [[20, 24], ["numba.jit", "raw.asrt_int", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_relu", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "return", "np", ".", "maximum", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool": [[26, 44], ["numba.jit", "raw.asrt_int", "math.floor", "math.floor", "numpy.zeros", "range", "range", "range", "range", "range", "range", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_pool", "(", "image", ":", "np", ".", "ndarray", ",", "kernel", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "N", ",", "C", ",", "HI", ",", "WI", "=", "image", ".", "shape", "\n", "HO", "=", "math", ".", "floor", "(", "HI", "/", "kernel", "[", "0", "]", ")", "\n", "WO", "=", "math", ".", "floor", "(", "WI", "/", "kernel", "[", "1", "]", ")", "\n", "res", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "C", ",", "HO", ",", "WO", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "for", "ho", "in", "range", "(", "HO", ")", ":", "\n", "                ", "for", "wo", "in", "range", "(", "WO", ")", ":", "\n", "                    ", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "-", "1e20", "\n", "for", "dh", "in", "range", "(", "kernel", "[", "0", "]", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "kernel", "[", "1", "]", ")", ":", "\n", "                            ", "h", "=", "ho", "*", "2", "+", "dh", "\n", "w", "=", "wo", "*", "2", "+", "dw", "\n", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", "=", "np", ".", "maximum", "(", "res", "[", "n", ",", "c", ",", "ho", ",", "wo", "]", ",", "image", "[", "n", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv": [[46, 77], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "numpy.zeros", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_conv", "(", "image", ":", "np", ".", "ndarray", ",", "weight", ":", "np", ".", "ndarray", ")", ":", "\n", "# image[N, CI, H, W] weight[CO, CI, K, K]", "\n", "    ", "asrt_int", "(", "image", ")", "\n", "asrt_int", "(", "weight", ")", "\n", "\n", "assert", "image", ".", "shape", "[", "1", "]", "==", "weight", ".", "shape", "[", "1", "]", "\n", "assert", "weight", ".", "shape", "[", "2", "]", "==", "weight", ".", "shape", "[", "3", "]", "\n", "N", ",", "CI", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "CO", ",", "_", ",", "K", ",", "_", "=", "weight", ".", "shape", "\n", "# K must be odd", "\n", "assert", "K", "%", "2", "\n", "\n", "# Kernel span range, for example: K=3, then k=1", "\n", "k", "=", "K", "//", "2", "\n", "res", "=", "np", ".", "zeros", "(", "(", "N", ",", "CO", ",", "H", ",", "W", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "w", "in", "range", "(", "W", ")", ":", "\n", "            ", "for", "h", "in", "range", "(", "H", ")", ":", "\n", "                ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "dh", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                        ", "for", "dw", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "                            ", "image_h", "=", "h", "+", "dh", "\n", "image_w", "=", "w", "+", "dw", "\n", "if", "0", "<=", "image_h", "<", "H", "and", "0", "<=", "image_w", "<", "W", ":", "\n", "                                ", "weight_h", "=", "k", "+", "dh", "\n", "weight_w", "=", "k", "+", "dw", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                                    ", "res", "[", "n", ",", "co", ",", "h", ",", "w", "]", "+=", "image", "[", "n", ",", "ci", ",", "image_h", ",", "image_w", "]", "*", "weight", "[", "co", ",", "ci", ",", "weight_h", ",", "weight_w", "]", "\n", "", "", "", "", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc": [[80, 84], ["raw.asrt_int", "raw.asrt_int", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "def", "raw_fc", "(", "x", ",", "w", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "w", ")", "\n", "return", "np", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize": [[86, 103], ["numba.jit", "raw.asrt_int", "raw.asrt_int", "raw.asrt_int", "numpy.floor", "numpy.maximum", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.asrt_int"], ["", "@", "jit", "(", "target", "=", "\"cpu\"", ",", "nopython", "=", "True", ")", "\n", "def", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "n_bit", ",", "signed", ")", ":", "\n", "    ", "asrt_int", "(", "x", ")", "\n", "asrt_int", "(", "bias", ")", "\n", "asrt_int", "(", "shift", ")", "\n", "res", "=", "np", ".", "floor", "(", "(", "x", "-", "bias", ")", "/", "(", "2", "**", "shift", ")", ")", "\n", "if", "signed", ":", "\n", "        ", "upper_bound", "=", "2", "**", "(", "n_bit", "-", "1", ")", "-", "1", "\n", "lower_bound", "=", "-", "upper_bound", "\n", "", "else", ":", "\n", "        ", "lower_bound", "=", "0", "\n", "upper_bound", "=", "2", "**", "n_bit", "-", "1", "\n", "\n", "# return np.clip(res, -bound, bound)", "\n", "", "res", "=", "np", ".", "maximum", "(", "res", ",", "lower_bound", ")", "\n", "res", "=", "np", ".", "minimum", "(", "res", ",", "upper_bound", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_inference": [[105, 124], ["raw_pool.reshape", "isinstance", "isinstance", "raw.raw_conv", "isinstance", "raw.raw_fc", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.w.numpy", "raw.raw_quantize", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "isinstance", "layer.bias.numpy", "layer.shift.numpy", "raw.raw_relu", "raw.raw_pool"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "def", "raw_inference", "(", "x", ",", "net", ")", ":", "\n", "    ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "            ", "x", "=", "raw_conv", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "            ", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "        ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "            ", "x", "=", "raw_fc", "(", "x", ",", "layer", ".", "w", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "            ", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "            ", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.draw_images": [[126, 135], ["range", "numpy.transpose", "matplotlib.imshow", "matplotlib.title", "matplotlib.show", "numpy.concatenate"], "function", ["None"], ["", "def", "draw_images", "(", "images", ",", "s", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "image", "=", "images", "[", "0", "]", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "if", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# only 1 channel", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", "]", "*", "3", ",", "axis", "=", "2", ")", "\n", "", "plt", ".", "imshow", "(", "image", "/", "255", ")", "\n", "plt", ".", "title", "(", "s", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_replay": [[137, 153], ["json.loads", "dataset.get_loader", "enumerate", "open().read", "image.cpu().numpy.cpu().numpy", "[].argmax().item", "label[].item", "raw.draw_images", "open", "image.cpu().numpy.cpu", "[].argmax", "raw.raw_inference"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.draw_images", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_inference"], ["", "", "def", "raw_replay", "(", "net", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    replay a model in raw mode.\n    with n image.\n    \"\"\"", "\n", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "\n", "for", "t", ",", "(", "image", ",", "label", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "t", "==", "n", ":", "\n", "            ", "break", "\n", "", "image", "=", "image", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "res", "=", "raw_inference", "(", "image", ",", "net", ")", "[", "0", "]", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "label", "=", "label", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "draw_images", "(", "image", ",", "f\"{label}:{res}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.save_raw_parameter": [[155, 250], ["json.loads", "dataset.get_loader", "[].numpy", "open().read", "open", "raw_pool.reshape", "isinstance", "isinstance", "open", "next", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_conv", "isinstance", "layer.w.numpy", "f.write", "f.write", "range", "f.write", "raw.raw_fc", "isinstance", "iter", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "f.write", "range", "f.write", "f.write", "range", "f.write", "raw.raw_quantize", "isinstance", "range", "f.write", "f.write", "layer.bias.numpy", "layer.shift.numpy", "f.write", "f.write", "raw.raw_relu", "isinstance", "f.write", "f.write", "f.write", "f.write", "f.write", "raw.raw_relu", "range", "f.write", "f.write", "raw.raw_pool", "f.write", "round", "round", "round", "round", "round", "bias[].item", "shift[].item", "w[].item", "bias[].item", "shift[].item", "round", "weight[].item"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.dataset.__init__.get_loader", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_conv", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_fc", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_quantize", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_relu", "home.repos.pwc.inspect_result.hguq_IntegerNet.cifar10_86.45_98.65.raw.raw_pool"], ["", "", "def", "save_raw_parameter", "(", "net", ",", "file_path", ")", ":", "\n", "    ", "d", "=", "json", ".", "loads", "(", "open", "(", "\"config.json\"", ")", ".", "read", "(", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "d", "[", "\"DATASET\"", "]", ",", "1", ",", "0", ")", "\n", "x", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "layer", "in", "net", ".", "conv", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeConv", ")", ":", "\n", "                ", "weight", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "_", ",", "CI", ",", "H", ",", "W", "=", "x", ".", "shape", "# N is deserted", "\n", "CO", ",", "*", "_", "=", "weight", ".", "shape", "\n", "f", ".", "write", "(", "\"CONV \"", ")", "\n", "f", ".", "write", "(", "f\"CO {CO} CI {CI} H {H} W {W}\\n\"", ")", "\n", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                    ", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                        ", "for", "h", "in", "range", "(", "3", ")", ":", "\n", "                            ", "for", "w", "in", "range", "(", "3", ")", ":", "\n", "                                ", "f", ".", "write", "(", "f\"{round(weight[co, ci, h, w].item())} \"", ")", "\n", "", "", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_conv", "(", "x", ",", "weight", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "# here shift is always negative, so change it to positive", "\n", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c, 0, 0].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "layer", ".", "bias", ".", "numpy", "(", ")", ",", "layer", ".", "shift", ".", "numpy", "(", ")", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "MaxPool2d", ")", ":", "\n", "                ", "_", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "\"POOL \"", ")", "\n", "f", ".", "write", "(", "f\"C {C} H {H} W {W}\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_pool", "(", "x", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "", "", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "for", "layer", "in", "net", ".", "fc", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "QuantizeFc", ")", ":", "\n", "                ", "w", "=", "layer", ".", "w", ".", "numpy", "(", ")", "\n", "\n", "CI", ",", "CO", "=", "w", ".", "shape", "\n", "f", ".", "write", "(", "\"FC \"", ")", "\n", "f", ".", "write", "(", "f\"CI {CI} CO {CO}\\n\"", ")", "\n", "\n", "for", "ci", "in", "range", "(", "CI", ")", ":", "\n", "                    ", "for", "co", "in", "range", "(", "CO", ")", ":", "\n", "                        ", "f", ".", "write", "(", "f\"{round(w[ci, co].item())} \"", ")", "\n", "", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_fc", "(", "x", ",", "w", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "QuantizeActSBN", ")", ":", "\n", "\n", "                ", "bias", "=", "layer", ".", "bias", ".", "numpy", "(", ")", "\n", "shift", "=", "layer", ".", "shift", ".", "numpy", "(", ")", "\n", "f", ".", "write", "(", "\"SIGNEDQUAN \"", "if", "layer", ".", "signed", "else", "\"UNSIGNEDQUAN \"", ")", "\n", "_", ",", "C", "=", "x", ".", "shape", "\n", "f", ".", "write", "(", "f\"C {C} H {1} W {1}\\n\"", ")", "\n", "\n", "f", ".", "write", "(", "\"BIAS \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(bias[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"SHIFT \"", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{round(shift[0, c].item())} \"", ")", "\n", "", "f", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_quantize", "(", "x", ",", "bias", ",", "shift", ",", "layer", ".", "n_bits", ",", "signed", "=", "layer", ".", "signed", ")", "\n", "\n", "", "elif", "isinstance", "(", "layer", ",", "ReLU", ")", ":", "\n", "                ", "f", ".", "write", "(", "\"RELU \"", ")", "\n", "f", ".", "write", "(", "f\"C {x.shape[1]} H 1 W 1\\n\\n\"", ")", "\n", "\n", "x", "=", "raw_relu", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.MNISTNET.MNISTNET.__init__": [[6, 35], ["super().__init__", "torch.nn.Sequential", "Sequential", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Linear", "BatchNorm1d", "ReLU", "Linear", "BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "img_size", "[", "2", "]", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "16", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 14 * 14", "\n", "\n", "Conv2d", "(", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "16", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 7 * 7", "\n", "\n", "Conv2d", "(", "16", ",", "16", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "16", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 3 * 3", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "Linear", "(", "3", "*", "3", "*", "16", ",", "128", ")", ",", "\n", "BatchNorm1d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Linear", "(", "128", ",", "num_classes", ")", ",", "\n", "BatchNorm1d", "(", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.MNISTNET.MNISTNET.forward": [[37, 43], ["MNISTNET.MNISTNET.conv", "MNISTNET.MNISTNET.view", "MNISTNET.MNISTNET.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.MNISTNET_INT.MNISTNET_INT.__init__": [[10, 43], ["super().__init__", "Sequential", "Sequential", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeFc", "QuantizeActSBN", "QuantizeFc", "QuantizeActSBN"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "10", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "10", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "10", ",", "10", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "10", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 110 * 110", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "10", ",", "10", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "10", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "10", ",", "10", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "10", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 7 * 7", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "10", ",", "10", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "10", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "10", ",", "10", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "10", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 3 * 3", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "3", "*", "3", "*", "10", ",", "24", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "24", ",", "is_conv", "=", "False", ")", ",", "\n", "QuantizeFc", "(", "n_bits", ",", "24", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.MNISTNET_INT.MNISTNET_INT.forward": [[45, 51], ["MNISTNET_INT.MNISTNET_INT.conv", "MNISTNET_INT.MNISTNET_INT.view", "MNISTNET_INT.MNISTNET_INT.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.CIFAR100NET.CIFAR100NET.__init__": [[6, 58], ["super().__init__", "torch.nn.Sequential", "Sequential", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Linear", "BatchNorm1d", "ReLU", "Linear", "BatchNorm1d", "ReLU", "Linear", "BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "# 32 * 32", "\n", "Conv2d", "(", "img_size", "[", "2", "]", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 16 * 16", "\n", "\n", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 8 * 8", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 4 * 4", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "Linear", "(", "4", "*", "4", "*", "256", ",", "1024", ")", ",", "\n", "BatchNorm1d", "(", "1024", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Linear", "(", "1024", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", "BatchNorm1d", "(", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.CIFAR100NET.CIFAR100NET.forward": [[60, 66], ["CIFAR100NET.CIFAR100NET.conv", "CIFAR100NET.CIFAR100NET.view", "CIFAR100NET.CIFAR100NET.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.CIFAR100NET_INT.CIFAR100NET_INT.__init__": [[6, 58], ["super().__init__", "torch.nn.Sequential", "Sequential", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "QuantizeConv", "QuantizeActSBN", "ReLU", "MaxPool2d", "QuantizeFc", "QuantizeActSBN", "ReLU", "QuantizeFc", "QuantizeActSBN", "ReLU", "QuantizeFc", "QuantizeActSBN"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "# 32 * 32", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "QuantizeConv", "(", "n_bits", ",", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "QuantizeConv", "(", "n_bits", ",", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 16 * 16", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 8 * 8", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "QuantizeConv", "(", "n_bits", ",", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "QuantizeConv", "(", "n_bits", ",", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 4 * 4", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "4", "*", "4", "*", "256", ",", "1024", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "1024", ",", "is_conv", "=", "False", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "1024", ",", "512", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ",", "is_conv", "=", "False", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "512", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.CIFAR100NET_INT.CIFAR100NET_INT.forward": [[60, 66], ["CIFAR100NET_INT.CIFAR100NET_INT.conv", "CIFAR100NET_INT.CIFAR100NET_INT.view", "CIFAR100NET_INT.CIFAR100NET_INT.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.CIFAR10NET_INT.CIFAR10NET_INT.__init__": [[6, 41], ["super().__init__", "torch.nn.Sequential", "Sequential", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeFc", "QuantizeActSBN", "QuantizeFc", "QuantizeActSBN"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "# 32 * 32", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "64", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "64", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 16 * 16", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 8 * 8", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 4 * 4", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "4", "*", "4", "*", "256", ",", "512", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "512", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.CIFAR10NET_INT.CIFAR10NET_INT.forward": [[43, 49], ["CIFAR10NET_INT.CIFAR10NET_INT.conv", "CIFAR10NET_INT.CIFAR10NET_INT.view", "CIFAR10NET_INT.CIFAR10NET_INT.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.CIFAR10NET.CIFAR10NET.__init__": [[6, 45], ["super().__init__", "torch.nn.Sequential", "Sequential", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Linear", "BatchNorm1d", "ReLU", "Linear", "BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "# 32 * 32", "\n", "Conv2d", "(", "img_size", "[", "2", "]", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 16 * 16", "\n", "\n", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 8 * 8", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 4 * 4", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "Linear", "(", "4", "*", "4", "*", "256", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Linear", "(", "512", ",", "num_classes", ")", ",", "\n", "BatchNorm1d", "(", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.CIFAR10NET.CIFAR10NET.forward": [[47, 53], ["CIFAR10NET.CIFAR10NET.conv", "CIFAR10NET.CIFAR10NET.view", "CIFAR10NET.CIFAR10NET.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET_INT.QuantizeBasicBlock.__init__": [[14, 31], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "layer.quantize.QuantizeActSBN", "layer.quantize.QuantizeConv", "layer.quantize.QuantizeActSBN", "layer.quantize.QuantizeConv", "layer.quantize.QuantizeConv"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "n_bits", ",", "in_channels", ",", "out_channels", ",", "down_sample", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual_function", "=", "nn", ".", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", "=", "n_bits", ",", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", "if", "down_sample", "else", "1", ",", "padding", "=", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "out_channels", ",", "is_conv", "=", "True", ")", ",", "\n", "QuantizeConv", "(", "n_bits", "=", "n_bits", ",", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", "=", "n_bits", ",", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "2", "if", "down_sample", "else", "1", ",", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "post", "=", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "out_channels", ",", "is_conv", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET_INT.QuantizeBasicBlock.forward": [[32, 35], ["RESNET_INT.QuantizeBasicBlock.post", "RESNET_INT.QuantizeBasicBlock.residual_function", "RESNET_INT.QuantizeBasicBlock.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "self", ".", "residual_function", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "return", "self", ".", "post", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET_INT.RESNET_INT.__init__": [[42, 86], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "layer.quantize.QuantizeConv", "layer.quantize.QuantizeActSBN", "RESNET_INT.QuantizeBasicBlock", "RESNET_INT.QuantizeBasicBlock", "RESNET_INT.QuantizeBasicBlock", "RESNET_INT.QuantizeBasicBlock", "RESNET_INT.QuantizeBasicBlock", "RESNET_INT.QuantizeBasicBlock", "RESNET_INT.QuantizeBasicBlock", "RESNET_INT.QuantizeBasicBlock", "RESNET_INT.QuantizeBasicBlock", "layer.quantize.QuantizeFc", "layer.quantize.QuantizeActSBN", "layer.quantize.QuantizeFc", "layer.quantize.QuantizeActSBN"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "res", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "# 256 * 256", "\n", "QuantizeConv", "(", "n_bits", "=", "n_bits", ",", "in_channels", "=", "img_size", "[", "2", "]", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "32", ")", ",", "\n", "# 256 * 256", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "32", ",", "32", ",", "down_sample", "=", "True", ")", ",", "\n", "# 128 * 128", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "32", ",", "32", ",", "down_sample", "=", "False", ")", ",", "\n", "# 128 * 128", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "32", ",", "64", ",", "down_sample", "=", "True", ")", ",", "\n", "# 64 * 64", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "64", ",", "64", ",", "down_sample", "=", "False", ")", ",", "\n", "# 64 * 64", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "64", ",", "128", ",", "down_sample", "=", "True", ")", ",", "\n", "# 32 * 32", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "128", ",", "128", ",", "down_sample", "=", "False", ")", ",", "\n", "# 32 * 32", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "128", ",", "256", ",", "down_sample", "=", "True", ")", ",", "\n", "# 16 * 16", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "256", ",", "256", ",", "down_sample", "=", "True", ")", ",", "\n", "# 8 * 8", "\n", "\n", "QuantizeBasicBlock", "(", "n_bits", ",", "256", ",", "256", ",", "down_sample", "=", "True", ")", ",", "\n", "# 4 * 4", "\n", "\n", ")", "\n", "n_feature", "=", "4", "*", "4", "*", "256", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "n_feature", ",", "1024", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "1024", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "1024", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET_INT.RESNET_INT.forward": [[88, 93], ["RESNET_INT.RESNET_INT.res", "RESNET_INT.RESNET_INT.view", "RESNET_INT.RESNET_INT.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "res", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.VGG_INT.VGG_INT.__init__": [[10, 92], ["super().__init__", "torch.nn.Sequential", "Sequential", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "QuantizeConv", "QuantizeActSBN", "MaxPool2d", "QuantizeFc", "QuantizeActSBN", "QuantizeFc", "QuantizeActSBN"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ",", "n_bits", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "QuantizeConv", "(", "n_bits", ",", "img_size", "[", "2", "]", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "64", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "64", ")", ",", "\n", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 128 * 128", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "128", ")", ",", "\n", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 64 * 64", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "256", ")", ",", "\n", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 32 * 32", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "256", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ")", ",", "\n", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 16 * 16", "\n", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ")", ",", "\n", "\n", "QuantizeConv", "(", "n_bits", ",", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "512", ")", ",", "\n", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 8 * 8", "\n", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "QuantizeFc", "(", "n_bits", ",", "8", "*", "8", "*", "512", ",", "1024", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "False", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "1024", ",", "is_conv", "=", "False", ")", ",", "\n", "\n", "QuantizeFc", "(", "n_bits", ",", "1024", ",", "num_classes", ")", ",", "\n", "QuantizeActSBN", "(", "signed", "=", "True", ",", "n_bits", "=", "n_bits", ",", "num_features", "=", "num_classes", ",", "is_conv", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.VGG_INT.VGG_INT.forward": [[94, 100], ["VGG_INT.VGG_INT.conv", "VGG_INT.VGG_INT.view", "VGG_INT.VGG_INT.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.VGG.VGG.__init__": [[10, 95], ["super().__init__", "torch.nn.Sequential", "Sequential", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "Conv2d", "BatchNorm2d", "ReLU", "MaxPool2d", "Linear", "BatchNorm1d", "Linear", "BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "img_size", "[", "2", "]", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 128 * 128", "\n", "\n", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "128", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 64 * 64", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "256", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 32 * 32", "\n", "\n", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 16 * 16", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "BatchNorm2d", "(", "num_features", "=", "512", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "# 8 * 8", "\n", ")", "\n", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "Linear", "(", "8", "*", "8", "*", "512", ",", "1024", ")", ",", "\n", "BatchNorm1d", "(", "num_features", "=", "1024", ")", ",", "\n", "\n", "Linear", "(", "1024", ",", "num_classes", ")", ",", "\n", "BatchNorm1d", "(", "num_features", "=", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.VGG.VGG.forward": [[97, 103], ["VGG.VGG.conv", "VGG.VGG.view", "VGG.VGG.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET.BasicBlock.__init__": [[15, 33], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "down_sample", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual_function", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "down_sample", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "# shortcut\u5e94\u8be5\u4fdd\u8bc1\u8f93\u51fa\u4e0eresidual\u7684\u8f93\u51fa\u662f\u76f8\u7b26\u5408\u7684", "\n", "if", "down_sample", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET.BasicBlock.forward": [[35, 37], ["torch.nn.functional.relu", "RESNET.BasicBlock.residual_function", "RESNET.BasicBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "self", ".", "residual_function", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET.BottleNeck.__init__": [[44, 65], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "bottleneck_channels", ",", "out_channels", ",", "down_sample", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "residual_function", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "bottleneck_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "bottleneck_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# \u5728bottleneck\u5904\u4f7f\u7528stride\u53c2\u6570\uff0c\u82e5stride\u7b49\u4e8e2\uff0c\u5728\u6b64\u5904\u53d1\u751f\u4e0b\u91c7\u6837", "\n", "nn", ".", "Conv2d", "(", "bottleneck_channels", ",", "bottleneck_channels", ",", "stride", "=", "2", "if", "down_sample", "else", "1", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "bottleneck_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "bottleneck_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "down_sample", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET.BottleNeck.forward": [[67, 69], ["torch.nn.functional.relu", "RESNET.BottleNeck.residual_function", "RESNET.BottleNeck.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "relu", "(", "self", ".", "residual_function", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET.RESNET.__init__": [[76, 123], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "RESNET.BasicBlock", "RESNET.BasicBlock", "RESNET.BasicBlock", "RESNET.BasicBlock", "RESNET.BasicBlock", "RESNET.BasicBlock", "RESNET.BasicBlock", "RESNET.BasicBlock", "RESNET.BasicBlock", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "res", "=", "Sequential", "(", "\n", "# 256 * 256", "\n", "\n", "Conv2d", "(", "in_channels", "=", "img_size", "[", "2", "]", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BatchNorm2d", "(", "32", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "# 256 * 256", "\n", "\n", "BasicBlock", "(", "32", ",", "32", ",", "down_sample", "=", "True", ")", ",", "\n", "# 128 * 128", "\n", "\n", "BasicBlock", "(", "32", ",", "32", ",", "down_sample", "=", "False", ")", ",", "\n", "# 128 * 128", "\n", "\n", "BasicBlock", "(", "32", ",", "64", ",", "down_sample", "=", "True", ")", ",", "\n", "# 64 * 64", "\n", "\n", "BasicBlock", "(", "64", ",", "64", ",", "down_sample", "=", "False", ")", ",", "\n", "# 64 * 64", "\n", "\n", "BasicBlock", "(", "64", ",", "128", ",", "down_sample", "=", "True", ")", ",", "\n", "# 32 * 32", "\n", "\n", "BasicBlock", "(", "128", ",", "128", ",", "down_sample", "=", "False", ")", ",", "\n", "# 32 * 32", "\n", "\n", "BasicBlock", "(", "128", ",", "256", ",", "down_sample", "=", "True", ")", ",", "\n", "# 16 * 16", "\n", "\n", "BasicBlock", "(", "256", ",", "256", ",", "down_sample", "=", "True", ")", ",", "\n", "# 8 * 8", "\n", "\n", "BasicBlock", "(", "256", ",", "256", ",", "down_sample", "=", "True", ")", ",", "\n", "# 4 * 4", "\n", ")", "\n", "\n", "n_feature", "=", "4", "*", "4", "*", "256", "\n", "self", ".", "fc", "=", "Sequential", "(", "\n", "Linear", "(", "n_feature", ",", "1024", ")", ",", "\n", "BatchNorm1d", "(", "1024", ")", ",", "\n", "ReLU", "(", ")", ",", "\n", "\n", "Linear", "(", "1024", ",", "num_classes", ")", ",", "\n", "BatchNorm1d", "(", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.mine.RESNET.RESNET.forward": [[125, 130], ["RESNET.RESNET.res", "RESNET.RESNET.view", "RESNET.RESNET.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "res", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenet.Block.__init__": [[14, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenet.Block.forward": [[22, 26], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenet.MobileNet.__init__": [[32, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenet.MobileNet._make_layers": [[39, 47], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenet.MobileNet.forward": [[48, 55], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenet.test": [[57, 62], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.BasicBlock.__init__": [[19, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.BasicBlock.forward": [[36, 42], ["torch.relu", "torch.relu", "torch.relu", "dla_simple.BasicBlock.bn2", "dla_simple.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "dla_simple.BasicBlock.bn1", "dla_simple.BasicBlock.conv2", "dla_simple.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.Root.__init__": [[45, 51], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "Root", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.Root.forward": [[52, 56], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dla_simple.Root.bn", "dla_simple.Root.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xs", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "xs", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.Tree.__init__": [[59, 70], ["torch.Module.__init__", "dla_simple.Root", "block", "block", "dla_simple.Tree", "dla_simple.Tree"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "in_channels", ",", "out_channels", ",", "level", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Tree", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "Root", "(", "2", "*", "out_channels", ",", "out_channels", ")", "\n", "if", "level", "==", "1", ":", "\n", "            ", "self", ".", "left_tree", "=", "block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "stride", ")", "\n", "self", ".", "right_tree", "=", "block", "(", "out_channels", ",", "out_channels", ",", "stride", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "left_tree", "=", "Tree", "(", "block", ",", "in_channels", ",", "\n", "out_channels", ",", "level", "=", "level", "-", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "right_tree", "=", "Tree", "(", "block", ",", "out_channels", ",", "\n", "out_channels", ",", "level", "=", "level", "-", "1", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.Tree.forward": [[71, 76], ["dla_simple.Tree.left_tree", "dla_simple.Tree.right_tree", "dla_simple.Tree.root"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "left_tree", "(", "x", ")", "\n", "out2", "=", "self", ".", "right_tree", "(", "out1", ")", "\n", "out", "=", "self", ".", "root", "(", "[", "out1", ",", "out2", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.SimpleDLA.__init__": [[79, 104], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dla_simple.Tree", "dla_simple.Tree", "dla_simple.Tree", "dla_simple.Tree", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "BasicBlock", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SimpleDLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer3", "=", "Tree", "(", "block", ",", "32", ",", "64", ",", "level", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer4", "=", "Tree", "(", "block", ",", "64", ",", "128", ",", "level", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer5", "=", "Tree", "(", "block", ",", "128", ",", "256", ",", "level", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer6", "=", "Tree", "(", "block", ",", "256", ",", "512", ",", "level", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.SimpleDLA.forward": [[105, 117], ["dla_simple.SimpleDLA.base", "dla_simple.SimpleDLA.layer1", "dla_simple.SimpleDLA.layer2", "dla_simple.SimpleDLA.layer3", "dla_simple.SimpleDLA.layer4", "dla_simple.SimpleDLA.layer5", "dla_simple.SimpleDLA.layer6", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dla_simple.SimpleDLA.view", "dla_simple.SimpleDLA.linear", "dla_simple.SimpleDLA.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "base", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "self", ".", "layer6", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla_simple.test": [[119, 125], ["dla_simple.SimpleDLA", "print", "torch.randn", "torch.randn", "torch.randn", "SimpleDLA.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SimpleDLA", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.vgg.VGG.__init__": [[15, 19], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.vgg.VGG.forward": [[20, 25], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.vgg.VGG._make_layers": [[26, 39], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.vgg.test": [[41, 46], ["vgg.VGG", "torch.randn", "torch.randn", "VGG.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "VGG", "(", "'VGG11'", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.SE.__init__": [[28, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "se_channels", ")", ":", "\n", "        ", "super", "(", "SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "se_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "se2", "=", "nn", ".", "Conv2d", "(", "se_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.SE.forward": [[35, 41], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "efficientnet.swish", "efficientnet.SE.se2().sigmoid", "efficientnet.SE.se1", "efficientnet.SE.se2"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "swish", "(", "self", ".", "se1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "se2", "(", "out", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "x", "*", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.Block.__init__": [[46, 94], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "efficientnet.SE", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "expand_ratio", "=", "1", ",", "\n", "se_ratio", "=", "0.", ",", "\n", "drop_rate", "=", "0.", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "expand_ratio", "=", "expand_ratio", "\n", "\n", "# Expansion", "\n", "channels", "=", "expand_ratio", "*", "in_channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n", "# Depthwise conv", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "1", "if", "kernel_size", "==", "3", "else", "2", ")", ",", "\n", "groups", "=", "channels", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n", "# SE layers", "\n", "se_channels", "=", "int", "(", "in_channels", "*", "se_ratio", ")", "\n", "self", ".", "se", "=", "SE", "(", "channels", ",", "se_channels", ")", "\n", "\n", "# Output", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "# Skip connection if in and out shapes are the same (MV-V2 style)", "\n", "self", ".", "has_skip", "=", "(", "stride", "==", "1", ")", "and", "(", "in_channels", "==", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.Block.forward": [[95, 105], ["efficientnet.swish", "efficientnet.Block.se", "efficientnet.Block.bn3", "efficientnet.swish", "efficientnet.Block.bn2", "efficientnet.Block.conv3", "efficientnet.Block.bn1", "efficientnet.Block.conv2", "efficientnet.drop_connect", "efficientnet.Block.conv1"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.swish", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.swish", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.drop_connect"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "if", "self", ".", "expand_ratio", "==", "1", "else", "swish", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "swish", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "if", "self", ".", "has_skip", ":", "\n", "            ", "if", "self", ".", "training", "and", "self", ".", "drop_rate", ">", "0", ":", "\n", "                ", "out", "=", "drop_connect", "(", "out", ",", "self", ".", "drop_rate", ")", "\n", "", "out", "=", "out", "+", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.EfficientNet.__init__": [[108, 120], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "efficientnet.EfficientNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "EfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "\n", "32", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_channels", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cfg", "[", "'out_channels'", "]", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.EfficientNet._make_layers": [[121, 141], ["sum", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "efficientnet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "cfg", "=", "[", "self", ".", "cfg", "[", "k", "]", "for", "k", "in", "[", "'expansion'", ",", "'out_channels'", ",", "'num_blocks'", ",", "'kernel_size'", ",", "\n", "'stride'", "]", "]", "\n", "b", "=", "0", "\n", "blocks", "=", "sum", "(", "self", ".", "cfg", "[", "'num_blocks'", "]", ")", "\n", "for", "expansion", ",", "out_channels", ",", "num_blocks", ",", "kernel_size", ",", "stride", "in", "zip", "(", "*", "cfg", ")", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "drop_rate", "=", "self", ".", "cfg", "[", "'drop_connect_rate'", "]", "*", "b", "/", "blocks", "\n", "layers", ".", "append", "(", "\n", "Block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "expansion", ",", "\n", "se_ratio", "=", "0.25", ",", "\n", "drop_rate", "=", "drop_rate", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.EfficientNet.forward": [[142, 152], ["efficientnet.swish", "efficientnet.EfficientNet.layers", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.dropout.view", "efficientnet.EfficientNet.linear", "efficientnet.EfficientNet.bn1", "torch.dropout.shape", "torch.dropout", "torch.dropout", "torch.dropout", "efficientnet.EfficientNet.conv1"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "swish", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "(", "0", ")", ",", "-", "1", ")", "\n", "dropout_rate", "=", "self", ".", "cfg", "[", "'dropout_rate'", "]", "\n", "if", "self", ".", "training", "and", "dropout_rate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "dropout_rate", ")", "\n", "", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.swish": [[12, 14], ["x.sigmoid"], "function", ["None"], ["def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "x", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.drop_connect": [[16, 23], ["torch.empty", "torch.empty", "torch.empty", "torch.empty.bernoulli_", "x.div_", "x.mul_"], "function", ["None"], ["", "def", "drop_connect", "(", "x", ",", "drop_ratio", ")", ":", "\n", "    ", "keep_ratio", "=", "1.0", "-", "drop_ratio", "\n", "mask", "=", "torch", ".", "empty", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", ".", "bernoulli_", "(", "keep_ratio", ")", "\n", "x", ".", "div_", "(", "keep_ratio", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.EfficientNetB0": [[154, 165], ["efficientnet.EfficientNet"], "function", ["None"], ["", "", "def", "EfficientNetB0", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'num_blocks'", ":", "[", "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "1", "]", ",", "\n", "'expansion'", ":", "[", "1", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", "]", ",", "\n", "'out_channels'", ":", "[", "16", ",", "24", ",", "40", ",", "80", ",", "112", ",", "192", ",", "320", "]", ",", "\n", "'kernel_size'", ":", "[", "3", ",", "3", ",", "5", ",", "3", ",", "5", ",", "5", ",", "3", "]", ",", "\n", "'stride'", ":", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", ",", "2", ",", "1", "]", ",", "\n", "'dropout_rate'", ":", "0.2", ",", "\n", "'drop_connect_rate'", ":", "0.2", ",", "\n", "}", "\n", "return", "EfficientNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.test": [[167, 172], ["efficientnet.EfficientNetB0", "torch.randn", "torch.randn", "torch.randn", "EfficientNetB0.", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.efficientnet.EfficientNetB0"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "EfficientNetB0", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.Block.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.Block.forward": [[32, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.MobileNetV2.__init__": [[50, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.MobileNetV2._make_layers": [[60, 68], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.MobileNetV2.forward": [[69, 78], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.mobilenetv2.test": [[80, 85], ["mobilenetv2.MobileNetV2", "torch.randn", "torch.randn", "torch.randn", "MobileNetV2.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.SepConv.__init__": [[12, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.SepConv.forward": [[20, 22], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.CellA.__init__": [[25, 32], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.CellA.forward": [[33, 39], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.CellB.__init__": [[41, 55], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.CellB.forward": [[56, 70], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNet.__init__": [[72, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNet._make_layer": [[88, 94], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNet._downsample": [[95, 99], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNetA": [[112, 114], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNetB": [[115, 117], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.test": [[119, 124], ["pnasnet.PNASNetB", "torch.randn", "torch.randn", "torch.randn", "PNASNetB.", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.Bottleneck.__init__": [[8, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.Bottleneck.forward": [[27, 36], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.DPN.__init__": [[39, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.DPN._make_layer": [[53, 60], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.DPN.forward": [[61, 71], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.DPN26": [[73, 81], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.DPN92": [[82, 90], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.test": [[92, 97], ["dpn.DPN92", "torch.randn", "torch.randn", "torch.randn", "DPN92.", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.ShuffleBlock.forward": [[15, 20], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.Bottleneck.__init__": [[23, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.Bottleneck.forward": [[41, 49], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.ShuffleNet.__init__": [[52, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.ShuffleNet._make_layer": [[66, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.ShuffleNet.forward": [[75, 84], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.ShuffleNetG2": [[86, 93], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.ShuffleNetG3": [[94, 101], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.test": [[103, 108], ["shufflenet.ShuffleNetG2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetG2.", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", "=", "2", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.ShuffleBlock.forward": [[15, 20], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.SplitBlock.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "super", "(", "SplitBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.SplitBlock.forward": [[27, 30], ["int", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", "=", "int", "(", "x", ".", "size", "(", "1", ")", "*", "self", ".", "ratio", ")", "\n", "return", "x", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.BasicBlock.__init__": [[33, 47], ["torch.Module.__init__", "shufflenetv2.SplitBlock", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "split_ratio", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "SplitBlock", "(", "split_ratio", ")", "\n", "in_channels", "=", "int", "(", "in_channels", "*", "split_ratio", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.BasicBlock.forward": [[48, 56], ["shufflenetv2.BasicBlock.split", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.BasicBlock.shuffle", "shufflenetv2.BasicBlock.bn1", "shufflenetv2.BasicBlock.conv2", "shufflenetv2.BasicBlock.bn3", "shufflenetv2.BasicBlock.conv1", "shufflenetv2.BasicBlock.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "self", ".", "split", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x2", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "out", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.DownBlock.__init__": [[59, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "2", "\n", "# left", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "# right", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "mid_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.DownBlock.forward": [[82, 94], ["shufflenetv2.DownBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.DownBlock.bn4", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.DownBlock.shuffle", "shufflenetv2.DownBlock.conv1", "shufflenetv2.DownBlock.bn2", "shufflenetv2.DownBlock.bn3", "shufflenetv2.DownBlock.conv4", "shufflenetv2.DownBlock.bn5", "shufflenetv2.DownBlock.conv2", "shufflenetv2.DownBlock.conv3", "shufflenetv2.DownBlock.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# left", "\n", "        ", "out1", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out1", ")", ")", ")", "\n", "# right", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "out2", "=", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "out2", ")", ")", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "out2", ")", ")", ")", "\n", "# concat", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.ShuffleNetV2.__init__": [[97, 113], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "net_size", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "configs", "[", "net_size", "]", "[", "'out_channels'", "]", "\n", "num_blocks", "=", "configs", "[", "net_size", "]", "[", "'num_blocks'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_channels", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "[", "3", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_channels", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.ShuffleNetV2._make_layer": [[114, 120], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.DownBlock", "layers.append", "shufflenetv2.BasicBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ")", ":", "\n", "        ", "layers", "=", "[", "DownBlock", "(", "self", ".", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock", "(", "out_channels", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.ShuffleNetV2.forward": [[121, 132], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv2.ShuffleNetV2.layer1", "shufflenetv2.ShuffleNetV2.layer2", "shufflenetv2.ShuffleNetV2.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenetv2.ShuffleNetV2.view", "shufflenetv2.ShuffleNetV2.linear", "shufflenetv2.ShuffleNetV2.bn1", "shufflenetv2.ShuffleNetV2.bn2", "shufflenetv2.ShuffleNetV2.size", "shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# out = F.max_pool2d(out, 3, stride=2, padding=1)", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.shufflenetv2.test": [[155, 160], ["shufflenetv2.ShuffleNetV2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetV2.", "print"], "function", ["None"], ["def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetV2", "(", "net_size", "=", "0.5", ")", "\n", "x", "=", "torch", ".", "randn", "(", "3", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.BasicBlock.__init__": [[17, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.BasicBlock.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.Bottleneck.__init__": [[45, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.Bottleneck.forward": [[64, 71], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet.__init__": [[74, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet._make_layer": [[87, 94], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet.forward": [[95, 106], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "[", "4", ",", "4", "]", ")", "\n", "# out = F.avg_pool2d(out, 4)", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet18": [[108, 110], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet34": [[112, 114], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet50": [[116, 118], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet101": [[120, 122], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet152": [[124, 126], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.test": [[128, 132], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.BasicBlock.__init__": [[11, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.BasicBlock.forward": [[29, 43], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.PreActBlock.__init__": [[46, 61], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.PreActBlock.forward": [[62, 77], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.SENet.__init__": [[80, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.SENet._make_layer": [[92, 99], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.SENet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.SENet18": [[112, 114], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.test": [[116, 120], ["senet.SENet18", "SENet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.Bottleneck.__init__": [[10, 16], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.Bottleneck.forward": [[17, 22], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.Transition.__init__": [[25, 29], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.Transition.forward": [[30, 34], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet.__init__": [[37, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet._make_dense_layers": [[68, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet.forward": [[75, 85], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet121": [[86, 88], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet169": [[89, 91], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet201": [[92, 94], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.DenseNet161": [[95, 97], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.densenet_cifar": [[98, 100], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.test": [[101, 106], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.densenet.densenet_cifar"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.BasicBlock.__init__": [[14, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.BasicBlock.forward": [[31, 37], ["torch.relu", "torch.relu", "torch.relu", "dla.BasicBlock.bn2", "dla.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "dla.BasicBlock.bn1", "dla.BasicBlock.conv2", "dla.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.Root.__init__": [[40, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "Root", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.Root.forward": [[47, 51], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dla.Root.bn", "dla.Root.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xs", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "xs", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.Tree.__init__": [[54, 70], ["torch.Module.__init__", "dla.Root", "block", "block", "dla.Root", "reversed", "block", "block", "block", "range", "dla.Tree", "dla.Tree.__setattr__"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "in_channels", ",", "out_channels", ",", "level", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Tree", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "level", "=", "level", "\n", "if", "level", "==", "1", ":", "\n", "            ", "self", ".", "root", "=", "Root", "(", "2", "*", "out_channels", ",", "out_channels", ")", "\n", "self", ".", "left_node", "=", "block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "stride", ")", "\n", "self", ".", "right_node", "=", "block", "(", "out_channels", ",", "out_channels", ",", "stride", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "root", "=", "Root", "(", "(", "level", "+", "2", ")", "*", "out_channels", ",", "out_channels", ")", "\n", "for", "i", "in", "reversed", "(", "range", "(", "1", ",", "level", ")", ")", ":", "\n", "                ", "subtree", "=", "Tree", "(", "block", ",", "in_channels", ",", "out_channels", ",", "\n", "level", "=", "i", ",", "stride", "=", "stride", ")", "\n", "self", ".", "__setattr__", "(", "'level_%d'", "%", "i", ",", "subtree", ")", "\n", "", "self", ".", "prev_root", "=", "block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "stride", ")", "\n", "self", ".", "left_node", "=", "block", "(", "out_channels", ",", "out_channels", ",", "stride", "=", "1", ")", "\n", "self", ".", "right_node", "=", "block", "(", "out_channels", ",", "out_channels", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.Tree.forward": [[71, 83], ["reversed", "dla.Tree.left_node", "xs.append", "dla.Tree.right_node", "xs.append", "dla.Tree.root", "range", "dla.Tree.__getattr__", "dla.Tree.", "xs.append", "dla.Tree.prev_root"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xs", "=", "[", "self", ".", "prev_root", "(", "x", ")", "]", "if", "self", ".", "level", ">", "1", "else", "[", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "1", ",", "self", ".", "level", ")", ")", ":", "\n", "            ", "level_i", "=", "self", ".", "__getattr__", "(", "'level_%d'", "%", "i", ")", "\n", "x", "=", "level_i", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "left_node", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "right_node", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "out", "=", "self", ".", "root", "(", "xs", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.DLA.__init__": [[86, 111], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dla.Tree", "dla.Tree", "dla.Tree", "dla.Tree", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "BasicBlock", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer3", "=", "Tree", "(", "block", ",", "32", ",", "64", ",", "level", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer4", "=", "Tree", "(", "block", ",", "64", ",", "128", ",", "level", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer5", "=", "Tree", "(", "block", ",", "128", ",", "256", ",", "level", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer6", "=", "Tree", "(", "block", ",", "256", ",", "512", ",", "level", "=", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.DLA.forward": [[112, 124], ["dla.DLA.base", "dla.DLA.layer1", "dla.DLA.layer2", "dla.DLA.layer3", "dla.DLA.layer4", "dla.DLA.layer5", "dla.DLA.layer6", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dla.DLA.view", "dla.DLA.linear", "dla.DLA.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "base", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "self", ".", "layer6", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.dla.test": [[126, 132], ["dla.DLA", "print", "torch.randn", "torch.randn", "torch.randn", "DLA.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DLA", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.Block.__init__": [[14, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.Block.forward": [[31, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.ResNeXt.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.ResNeXt._make_layer": [[55, 64], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.ResNeXt.forward": [[65, 75], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.ResNeXt29_2x64d": [[77, 79], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.ResNeXt29_4x64d": [[80, 82], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.ResNeXt29_8x64d": [[83, 85], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.ResNeXt29_32x4d": [[86, 88], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.test_resnext": [[89, 94], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.SE.__init__": [[15, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "se_planes", ")", ":", "\n", "        ", "super", "(", "SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "se_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "se2", "=", "nn", ".", "Conv2d", "(", "se_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.SE.forward": [[20, 26], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "regnet.SE.se2().sigmoid", "regnet.SE.se1", "regnet.SE.se2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "se1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "se2", "(", "out", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "x", "*", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.Block.__init__": [[29, 55], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "round", "int", "regnet.SE", "torch.Sequential", "torch.Sequential", "torch.Sequential", "round", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "group_width", ",", "bottleneck_ratio", ",", "se_ratio", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1", "\n", "w_b", "=", "int", "(", "round", "(", "w_out", "*", "bottleneck_ratio", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "w_in", ",", "w_b", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "w_b", ")", "\n", "# 3x3", "\n", "num_groups", "=", "w_b", "//", "group_width", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "w_b", ",", "w_b", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "num_groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "w_b", ")", "\n", "# se", "\n", "self", ".", "with_se", "=", "se_ratio", ">", "0", "\n", "if", "self", ".", "with_se", ":", "\n", "            ", "w_se", "=", "int", "(", "round", "(", "w_in", "*", "se_ratio", ")", ")", "\n", "self", ".", "se", "=", "SE", "(", "w_b", ",", "w_se", ")", "\n", "# 1x1", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "w_b", ",", "w_out", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "w_in", "!=", "w_out", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "w_in", ",", "w_out", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "w_out", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.Block.forward": [[57, 66], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "regnet.Block.bn3", "regnet.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "regnet.Block.bn1", "regnet.Block.bn2", "regnet.Block.se", "regnet.Block.conv3", "regnet.Block.conv1", "regnet.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "if", "self", ".", "with_se", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.RegNet.__init__": [[69, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "regnet.RegNet._make_layer", "regnet.RegNet._make_layer", "regnet.RegNet._make_layer", "regnet.RegNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "RegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "0", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "3", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "cfg", "[", "'widths'", "]", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.RegNet._make_layer": [[82, 97], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "regnet.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "idx", ")", ":", "\n", "        ", "depth", "=", "self", ".", "cfg", "[", "'depths'", "]", "[", "idx", "]", "\n", "width", "=", "self", ".", "cfg", "[", "'widths'", "]", "[", "idx", "]", "\n", "stride", "=", "self", ".", "cfg", "[", "'strides'", "]", "[", "idx", "]", "\n", "group_width", "=", "self", ".", "cfg", "[", "'group_width'", "]", "\n", "bottleneck_ratio", "=", "self", ".", "cfg", "[", "'bottleneck_ratio'", "]", "\n", "se_ratio", "=", "self", ".", "cfg", "[", "'se_ratio'", "]", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "s", "=", "stride", "if", "i", "==", "0", "else", "1", "\n", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "width", ",", "\n", "s", ",", "group_width", ",", "bottleneck_ratio", ",", "se_ratio", ")", ")", "\n", "self", ".", "in_planes", "=", "width", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.RegNet.forward": [[98, 108], ["torch.relu", "torch.relu", "torch.relu", "regnet.RegNet.layer1", "regnet.RegNet.layer2", "regnet.RegNet.layer3", "regnet.RegNet.layer4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "regnet.RegNet.view", "regnet.RegNet.linear", "regnet.RegNet.bn1", "regnet.RegNet.size", "regnet.RegNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.RegNetX_200MF": [[110, 120], ["regnet.RegNet"], "function", ["None"], ["", "", "def", "RegNetX_200MF", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'depths'", ":", "[", "1", ",", "1", ",", "4", ",", "7", "]", ",", "\n", "'widths'", ":", "[", "24", ",", "56", ",", "152", ",", "368", "]", ",", "\n", "'strides'", ":", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "\n", "'group_width'", ":", "8", ",", "\n", "'bottleneck_ratio'", ":", "1", ",", "\n", "'se_ratio'", ":", "0", ",", "\n", "}", "\n", "return", "RegNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.RegNetX_400MF": [[122, 132], ["regnet.RegNet"], "function", ["None"], ["", "def", "RegNetX_400MF", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'depths'", ":", "[", "1", ",", "2", ",", "7", ",", "12", "]", ",", "\n", "'widths'", ":", "[", "32", ",", "64", ",", "160", ",", "384", "]", ",", "\n", "'strides'", ":", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "\n", "'group_width'", ":", "16", ",", "\n", "'bottleneck_ratio'", ":", "1", ",", "\n", "'se_ratio'", ":", "0", ",", "\n", "}", "\n", "return", "RegNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.RegNetY_400MF": [[134, 144], ["regnet.RegNet"], "function", ["None"], ["", "def", "RegNetY_400MF", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'depths'", ":", "[", "1", ",", "2", ",", "7", ",", "12", "]", ",", "\n", "'widths'", ":", "[", "32", ",", "64", ",", "160", ",", "384", "]", ",", "\n", "'strides'", ":", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "\n", "'group_width'", ":", "16", ",", "\n", "'bottleneck_ratio'", ":", "1", ",", "\n", "'se_ratio'", ":", "0.25", ",", "\n", "}", "\n", "return", "RegNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.test": [[146, 152], ["regnet.RegNetX_200MF", "print", "torch.randn", "torch.randn", "torch.randn", "RegNetX_200MF.", "print"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.regnet.RegNetX_200MF"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "RegNetX_200MF", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.googlenet.Inception.__init__": [[8, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.googlenet.Inception.forward": [[48, 54], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.googlenet.GoogLeNet.__init__": [[57, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.googlenet.GoogLeNet.forward": [[82, 99], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.googlenet.test": [[101, 106], ["googlenet.GoogLeNet", "torch.randn", "torch.randn", "torch.randn", "GoogLeNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "GoogLeNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActBlock.__init__": [[16, 26], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActBlock.forward": [[28, 35], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActBottleneck.__init__": [[41, 53], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActBottleneck.forward": [[55, 63], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__": [[66, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet._make_layer": [[77, 84], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet.forward": [[85, 95], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet18": [[97, 99], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet34": [[100, 102], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet50": [[103, 105], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet101": [[106, 108], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet152": [[109, 111], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.test": [[113, 117], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.hguq_IntegerNet.standard.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]]}