{"home.repos.pwc.inspect_result.peterhan91_disease_progression.None.projector.save_obj": [[26, 29], ["open", "pickle.dump"], "function", ["None"], ["def", "save_obj", "(", "obj", ",", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", "+", "'.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.None.projector.project": [[30, 141], ["copy.deepcopy().eval().requires_grad_().to", "projector.project.logprint"], "function", ["None"], ["", "", "def", "project", "(", "\n", "G", ",", "\n", "target", ":", "torch", ".", "Tensor", ",", "# [C,H,W] and dynamic range [0,255], W & H must match G output resolution", "\n", "*", ",", "\n", "num_steps", "=", "1000", ",", "\n", "w_avg_samples", "=", "10000", ",", "\n", "initial_learning_rate", "=", "0.1", ",", "\n", "initial_noise_factor", "=", "0.05", ",", "\n", "lr_rampdown_length", "=", "0.25", ",", "\n", "lr_rampup_length", "=", "0.05", ",", "\n", "noise_ramp_length", "=", "0.75", ",", "\n", "regularize_noise_weight", "=", "1e5", ",", "\n", "verbose", "=", "False", ",", "\n", "device", ":", "torch", ".", "device", "\n", ")", ":", "\n", "    ", "assert", "target", ".", "shape", "==", "(", "G", ".", "img_channels", ",", "G", ".", "img_resolution", ",", "G", ".", "img_resolution", ")", "\n", "\n", "def", "logprint", "(", "*", "args", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "*", "args", ")", "\n", "\n", "", "", "G", "=", "copy", ".", "deepcopy", "(", "G", ")", ".", "eval", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "device", ")", "# type: ignore", "\n", "\n", "# Compute w stats.", "\n", "logprint", "(", "f'Computing W midpoint and stddev using {w_avg_samples} samples...'", ")", "\n", "z_samples", "=", "np", ".", "random", ".", "RandomState", "(", "123", ")", ".", "randn", "(", "w_avg_samples", ",", "G", ".", "z_dim", ")", "\n", "w_samples", "=", "G", ".", "mapping", "(", "torch", ".", "from_numpy", "(", "z_samples", ")", ".", "to", "(", "device", ")", ",", "None", ")", "# [N, L, C]", "\n", "w_samples", "=", "w_samples", "[", ":", ",", ":", "1", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "# [N, 1, C]", "\n", "w_avg", "=", "np", ".", "mean", "(", "w_samples", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "# [1, 1, C]", "\n", "w_std", "=", "(", "np", ".", "sum", "(", "(", "w_samples", "-", "w_avg", ")", "**", "2", ")", "/", "w_avg_samples", ")", "**", "0.5", "\n", "\n", "# Setup noise inputs.", "\n", "noise_bufs", "=", "{", "name", ":", "buf", "for", "(", "name", ",", "buf", ")", "in", "G", ".", "synthesis", ".", "named_buffers", "(", ")", "if", "'noise_const'", "in", "name", "}", "\n", "\n", "# Load VGG16 feature detector.", "\n", "url", "=", "'https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metrics/vgg16.pt'", "\n", "with", "dnnlib", ".", "util", ".", "open_url", "(", "url", ")", "as", "f", ":", "\n", "        ", "vgg16", "=", "torch", ".", "jit", ".", "load", "(", "f", ")", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Features for target image.", "\n", "", "target_images", "=", "target", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "if", "target_images", ".", "shape", "[", "2", "]", ">", "256", ":", "\n", "        ", "target_images", "=", "F", ".", "interpolate", "(", "target_images", ",", "size", "=", "(", "256", ",", "256", ")", ",", "mode", "=", "'area'", ")", "\n", "", "if", "G", ".", "img_channels", "<", "3", ":", "\n", "        ", "target_images", "=", "target_images", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "target_features", "=", "vgg16", "(", "target_images", ",", "resize_images", "=", "False", ",", "return_lpips", "=", "True", ")", "\n", "\n", "w_opt", "=", "torch", ".", "tensor", "(", "w_avg", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "requires_grad", "=", "True", ")", "# pylint: disable=not-callable", "\n", "w_out", "=", "torch", ".", "zeros", "(", "[", "num_steps", "]", "+", "list", "(", "w_opt", ".", "shape", "[", "1", ":", "]", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "w_opt", "]", "+", "list", "(", "noise_bufs", ".", "values", "(", ")", ")", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "lr", "=", "initial_learning_rate", ")", "\n", "\n", "# Init noise.", "\n", "for", "buf", "in", "noise_bufs", ".", "values", "(", ")", ":", "\n", "        ", "buf", "[", ":", "]", "=", "torch", ".", "randn_like", "(", "buf", ")", "\n", "buf", ".", "requires_grad", "=", "True", "\n", "\n", "", "for", "step", "in", "range", "(", "num_steps", ")", ":", "\n", "# Learning rate schedule.", "\n", "        ", "t", "=", "step", "/", "num_steps", "\n", "w_noise_scale", "=", "w_std", "*", "initial_noise_factor", "*", "max", "(", "0.0", ",", "1.0", "-", "t", "/", "noise_ramp_length", ")", "**", "2", "\n", "lr_ramp", "=", "min", "(", "1.0", ",", "(", "1.0", "-", "t", ")", "/", "lr_rampdown_length", ")", "\n", "lr_ramp", "=", "0.5", "-", "0.5", "*", "np", ".", "cos", "(", "lr_ramp", "*", "np", ".", "pi", ")", "\n", "lr_ramp", "=", "lr_ramp", "*", "min", "(", "1.0", ",", "t", "/", "lr_rampup_length", ")", "\n", "lr", "=", "initial_learning_rate", "*", "lr_ramp", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "# Synth images from opt_w.", "\n", "", "w_noise", "=", "torch", ".", "randn_like", "(", "w_opt", ")", "*", "w_noise_scale", "\n", "ws", "=", "(", "w_opt", "+", "w_noise", ")", ".", "repeat", "(", "[", "1", ",", "G", ".", "mapping", ".", "num_ws", ",", "1", "]", ")", "\n", "synth_images", "=", "G", ".", "synthesis", "(", "ws", ",", "noise_mode", "=", "'const'", ")", "\n", "\n", "# Downsample image to 256x256 if it's larger than that. VGG was built for 224x224 images.", "\n", "synth_images", "=", "(", "synth_images", "+", "1", ")", "*", "(", "255", "/", "2", ")", "\n", "if", "synth_images", ".", "shape", "[", "2", "]", ">", "256", ":", "\n", "            ", "synth_images", "=", "F", ".", "interpolate", "(", "synth_images", ",", "size", "=", "(", "256", ",", "256", ")", ",", "mode", "=", "'area'", ")", "\n", "", "if", "G", ".", "img_channels", "<", "3", ":", "\n", "            ", "synth_images", "=", "synth_images", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "# Features for synth images.", "\n", "", "synth_features", "=", "vgg16", "(", "synth_images", ",", "resize_images", "=", "False", ",", "return_lpips", "=", "True", ")", "\n", "dist", "=", "(", "target_features", "-", "synth_features", ")", ".", "square", "(", ")", ".", "sum", "(", ")", "\n", "\n", "# Noise regularization.", "\n", "reg_loss", "=", "0.0", "\n", "for", "v", "in", "noise_bufs", ".", "values", "(", ")", ":", "\n", "            ", "noise", "=", "v", "[", "None", ",", "None", ",", ":", ",", ":", "]", "# must be [1,1,H,W] for F.avg_pool2d()", "\n", "while", "True", ":", "\n", "                ", "reg_loss", "+=", "(", "noise", "*", "torch", ".", "roll", "(", "noise", ",", "shifts", "=", "1", ",", "dims", "=", "3", ")", ")", ".", "mean", "(", ")", "**", "2", "\n", "reg_loss", "+=", "(", "noise", "*", "torch", ".", "roll", "(", "noise", ",", "shifts", "=", "1", ",", "dims", "=", "2", ")", ")", ".", "mean", "(", ")", "**", "2", "\n", "if", "noise", ".", "shape", "[", "2", "]", "<=", "8", ":", "\n", "                    ", "break", "\n", "", "noise", "=", "F", ".", "avg_pool2d", "(", "noise", ",", "kernel_size", "=", "2", ")", "\n", "", "", "loss", "=", "dist", "+", "reg_loss", "*", "regularize_noise_weight", "\n", "\n", "# Step", "\n", "optimizer", ".", "zero_grad", "(", "set_to_none", "=", "True", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "step", "%", "100", "==", "0", ":", "\n", "            ", "logprint", "(", "f'step {step+1:>4d}/{num_steps}: dist {dist:<4.2f} loss {float(loss):<5.2f}'", ")", "\n", "\n", "# Save projected W for each optimization step.", "\n", "", "w_out", "[", "step", "]", "=", "w_opt", ".", "detach", "(", ")", "[", "0", "]", "\n", "\n", "# Normalize noise.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "buf", "in", "noise_bufs", ".", "values", "(", ")", ":", "\n", "                ", "buf", "-=", "buf", ".", "mean", "(", ")", "\n", "buf", "*=", "buf", ".", "square", "(", ")", ".", "mean", "(", ")", ".", "rsqrt", "(", ")", "\n", "\n", "", "", "", "return", "w_out", ".", "repeat", "(", "[", "1", ",", "G", ".", "mapping", ".", "num_ws", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.None.projector.multi_projection": [[144, 220], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "torch.device", "torch.device", "glob.glob", "list", "print", "dict", "projector.save_obj", "dnnlib.util.open_url", "[].requires_grad_().to", "os.path.join", "len", "len", "PIL.Image.open().convert", "min", "np.expand_dims.crop", "np.expand_dims.resize", "numpy.array", "time.perf_counter", "projector.project", "print", "os.path.join", "os.makedirs", "PIL.Image.fromarray().save", "[].requires_grad_().to.synthesis", "[].cpu().numpy", "PIL.Image.fromarray().save", "projected_w.unsqueeze().cpu().numpy", "numpy.savez", "os.listdir", "set", "set", "len", "len", "numpy.ndim", "numpy.expand_dims", "projected_w.unsqueeze", "[].requires_grad_", "PIL.Image.open", "torch.tensor", "torch.tensor", "os.path.basename().split", "PIL.Image.fromarray", "[].cpu", "PIL.Image.fromarray", "os.path.basename", "projected_w.unsqueeze().cpu", "projected_w.unsqueeze().cpu().numpy", "np.array.transpose", "numpy.squeeze", "numpy.squeeze", "time.perf_counter", "os.path.basename", "projected_w.unsqueeze", "projected_w.unsqueeze().cpu", "legacy.load_network_pkl", "[].cpu().numpy.permute().clamp().to", "projected_w.unsqueeze", "[].cpu().numpy.permute().clamp", "[].cpu().numpy.permute"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.None.projector.save_obj", "home.repos.pwc.inspect_result.peterhan91_disease_progression.None.projector.project", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.makedirs"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--network'", ",", "'network_pkl'", ",", "help", "=", "'Network pickle filename'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--target'", ",", "'target_folder'", ",", "help", "=", "'Target image folder to project to'", ",", "required", "=", "True", ",", "metavar", "=", "'DIR'", ")", "\n", "@", "click", ".", "option", "(", "'--num-steps'", ",", "help", "=", "'Number of optimization steps'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "show_default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "help", "=", "'Random seed'", ",", "type", "=", "int", ",", "default", "=", "303", ",", "show_default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--outdir'", ",", "help", "=", "'Where to save the output images'", ",", "required", "=", "True", ",", "metavar", "=", "'DIR'", ")", "\n", "def", "multi_projection", "(", "\n", "target_folder", ":", "str", ",", "\n", "network_pkl", ":", "str", ",", "\n", "outdir", ":", "str", ",", "\n", "seed", ":", "int", ",", "\n", "num_steps", ":", "int", "\n", ")", ":", "\n", "    ", "\"\"\"Project given image to the latent space of pretrained network pickle.\n\n    Examples:\n\n    \\b\n    python projector.py --outdir=out --target=~/mytargetimg.png \\\\\n        --network=https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/ffhq.pkl\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "# Load networks.", "\n", "print", "(", "'Loading networks from \"%s\"...'", "%", "network_pkl", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "with", "dnnlib", ".", "util", ".", "open_url", "(", "network_pkl", ")", "as", "fp", ":", "\n", "        ", "G", "=", "legacy", ".", "load_network_pkl", "(", "fp", ")", "[", "'G_ema'", "]", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "device", ")", "# type: ignore", "\n", "\n", "", "total_fnames", "=", "glob", ".", "glob", "(", "target_folder", "+", "'/*.png'", ")", "\n", "done_fnames", "=", "[", "os", ".", "path", ".", "join", "(", "target_folder", ",", "s", "+", "'.png'", ")", "for", "s", "in", "os", ".", "listdir", "(", "outdir", ")", "]", "\n", "target_fnames", "=", "list", "(", "set", "(", "total_fnames", ")", "-", "set", "(", "done_fnames", ")", ")", "\n", "assert", "len", "(", "target_fnames", ")", "==", "len", "(", "total_fnames", ")", "-", "len", "(", "done_fnames", ")", "\n", "print", "(", "'remaining images to process: '", ",", "len", "(", "target_fnames", ")", ")", "\n", "\n", "mapped_z", "=", "dict", "(", ")", "\n", "\n", "for", "target_fname", "in", "target_fnames", ":", "\n", "# Load target image.", "\n", "        ", "target_pil", "=", "PIL", ".", "Image", ".", "open", "(", "target_fname", ")", ".", "convert", "(", "'L'", ")", "\n", "w", ",", "h", "=", "target_pil", ".", "size", "\n", "s", "=", "min", "(", "w", ",", "h", ")", "\n", "target_pil", "=", "target_pil", ".", "crop", "(", "(", "(", "w", "-", "s", ")", "//", "2", ",", "(", "h", "-", "s", ")", "//", "2", ",", "(", "w", "+", "s", ")", "//", "2", ",", "(", "h", "+", "s", ")", "//", "2", ")", ")", "\n", "target_pil", "=", "target_pil", ".", "resize", "(", "(", "G", ".", "img_resolution", ",", "G", ".", "img_resolution", ")", ",", "PIL", ".", "Image", ".", "LANCZOS", ")", "\n", "if", "np", ".", "ndim", "(", "target_pil", ")", "<", "3", ":", "\n", "            ", "target_pil", "=", "np", ".", "expand_dims", "(", "target_pil", ",", "-", "1", ")", "\n", "", "target_uint8", "=", "np", ".", "array", "(", "target_pil", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Optimize projection.", "\n", "start_time", "=", "perf_counter", "(", ")", "\n", "projected_w_steps", "=", "project", "(", "\n", "G", ",", "\n", "target", "=", "torch", ".", "tensor", "(", "target_uint8", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "device", "=", "device", ")", ",", "# pylint: disable=not-callable", "\n", "num_steps", "=", "num_steps", ",", "\n", "device", "=", "device", ",", "\n", "verbose", "=", "True", "\n", ")", "\n", "print", "(", "f'Elapsed: {(perf_counter()-start_time):.1f} s'", ")", "\n", "\n", "# Render debug output: optional video and projected image and W vector.", "\n", "outdir_", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "os", ".", "path", ".", "basename", "(", "target_fname", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "os", ".", "makedirs", "(", "outdir_", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Save final projected frame and W vector.", "\n", "# target_pil.save(f'{outdir_}/target.png')", "\n", "PIL", ".", "Image", ".", "fromarray", "(", "np", ".", "squeeze", "(", "target_pil", ")", ",", "'L'", ")", ".", "save", "(", "f'{outdir_}/target.png'", ")", "\n", "projected_w", "=", "projected_w_steps", "[", "-", "1", "]", "\n", "synth_image", "=", "G", ".", "synthesis", "(", "projected_w", ".", "unsqueeze", "(", "0", ")", ",", "noise_mode", "=", "'const'", ")", "\n", "synth_image", "=", "(", "synth_image", "+", "1", ")", "*", "(", "255", "/", "2", ")", "\n", "synth_image", "=", "synth_image", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "to", "(", "torch", ".", "uint8", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "PIL", ".", "Image", ".", "fromarray", "(", "np", ".", "squeeze", "(", "synth_image", ")", ",", "'L'", ")", ".", "save", "(", "f'{outdir_}/proj.png'", ")", "\n", "mapped_z", "[", "os", ".", "path", ".", "basename", "(", "target_fname", ")", "]", "=", "projected_w", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "savez", "(", "f'{outdir_}/projected_w.npz'", ",", "w", "=", "projected_w", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "save_obj", "(", "mapped_z", ",", "'latent_z'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.None.prog_w.load_obj": [[16, 19], ["open", "pickle5.load"], "function", ["None"], ["def", "load_obj", "(", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", "+", "'.pkl'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.None.prog_w.func": [[20, 22], ["int", "[].split", "elem.split"], "function", ["None"], ["", "", "def", "func", "(", "elem", ")", ":", "\n", "    ", "return", "int", "(", "elem", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ".", "split", "(", "'_'", ")", "[", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.None.prog_w.pred_w": [[23, 68], ["prog_w.load_obj", "pandas.read_csv", "tqdm.tqdm", "float", "numpy.sqrt", "pandas.DataFrame", "df.sort_values().reset_index.sort_values().reset_index", "numpy.zeros_like", "pats.append", "df[].tolist", "torch.from_numpy().cuda", "G.synthesis", "[].cpu().numpy", "pathlib.Path().mkdir", "PIL.Image.fromarray().save", "z.split", "key.split", "numpy.load", "numpy.array", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.sum", "list", "os.path.join", "os.path.join", "list", "load_obj.keys", "df.sort_values().reset_index.sort_values", "nn.split", "sorted", "pats.append", "torch.from_numpy", "[].cpu", "pathlib.Path", "PIL.Image.fromarray", "load_obj.values", "glob.glob", "numpy.load", "numpy.load", "numpy.squeeze", "int", "int", "[].cpu().numpy.permute().clamp().to", "[].split", "[].split", "[].cpu().numpy.permute().clamp", "[].cpu().numpy.permute", "nns[].split", "nns[].split"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.None.prog_w.load_obj"], ["", "def", "pred_w", "(", "G", ",", "dict_name", ",", "frame_path", ",", "proj_folder", ",", "outdir", ",", "nn_max", "=", "1", ")", ":", "\n", "    ", "z_dic", "=", "load_obj", "(", "dict_name", ")", "\n", "frame", "=", "pd", ".", "read_csv", "(", "frame_path", ")", "\n", "\n", "for", "z", "in", "tqdm", "(", "frame", "[", "'name baseline'", "]", ")", ":", "\n", "        ", "dfs", "=", "frame", "[", "frame", "[", "'name baseline'", "]", "==", "z", "]", "\n", "time", "=", "float", "(", "dfs", "[", "'time inter'", "]", ")", "\n", "key", "=", "z", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "pat", "=", "key", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "w", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "proj_folder", ",", "key", ",", "'projected_w.npz'", ")", ")", "[", "'w'", "]", "\n", "ws", "=", "np", ".", "array", "(", "list", "(", "z_dic", ".", "values", "(", ")", ")", ")", "[", ":", ",", "0", ",", "0", ",", ":", "]", "\n", "difs", "=", "normalize", "(", "ws", ",", "norm", "=", "'l2'", ")", "-", "normalize", "(", "w", "[", ":", ",", "0", ",", ":", "]", ",", "norm", "=", "'l2'", ")", "\n", "l2", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "difs", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "list", "(", "z_dic", ".", "keys", "(", ")", ")", ",", "columns", "=", "[", "'name'", "]", ")", "\n", "df", "[", "'l2'", "]", "=", "l2", "\n", "df", "=", "df", ".", "sort_values", "(", "'l2'", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "counter", "=", "0", "\n", "vdiffs", "=", "np", ".", "zeros_like", "(", "w", ")", "\n", "pats", "=", "[", "]", "\n", "pats", ".", "append", "(", "pat", ")", "\n", "for", "nn", "in", "df", "[", "'name'", "]", ".", "tolist", "(", ")", ":", "\n", "            ", "pat_", "=", "nn", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "lr", "=", "nn", "[", "-", "1", "]", "\n", "if", "not", "pat_", "in", "pats", ":", "\n", "                ", "nns", "=", "sorted", "(", "glob", ".", "glob", "(", "proj_folder", "+", "pat_", "+", "'_*_'", "+", "lr", "+", "'/projected_w.npz'", ")", ",", "key", "=", "func", ")", "\n", "time_", "=", "12", "*", "(", "int", "(", "nns", "[", "-", "1", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ".", "split", "(", "'_'", ")", "[", "2", "]", "[", ":", "4", "]", ")", "-", "int", "(", "nns", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ".", "split", "(", "'_'", ")", "[", "2", "]", "[", ":", "4", "]", ")", ")", "\n", "nn0", "=", "np", ".", "load", "(", "nns", "[", "0", "]", ")", "[", "'w'", "]", "\n", "nn1", "=", "np", ".", "load", "(", "nns", "[", "-", "1", "]", ")", "[", "'w'", "]", "\n", "vdiffs", "+=", "nn1", "-", "nn0", "\n", "ratio", "=", "time_", "/", "time", "\n", "vdiffs", "=", "vdiffs", "*", "ratio", "\n", "counter", "+=", "1", "\n", "pats", ".", "append", "(", "pat_", ")", "\n", "", "if", "counter", ">=", "nn_max", ":", "\n", "                ", "break", "\n", "\n", "", "", "vdiffs", "=", "vdiffs", "/", "counter", "\n", "w_", "=", "vdiffs", "+", "w", "\n", "ws", "=", "torch", ".", "from_numpy", "(", "w_", ")", ".", "cuda", "(", ")", "\n", "synth_image", "=", "G", ".", "synthesis", "(", "ws", ",", "noise_mode", "=", "'const'", ")", "\n", "synth_image", "=", "(", "synth_image", "+", "1", ")", "*", "(", "255", "/", "2", ")", "\n", "synth_image", "=", "synth_image", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "to", "(", "torch", ".", "uint8", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Path", "(", "outdir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "PIL", ".", "Image", ".", "fromarray", "(", "np", ".", "squeeze", "(", "synth_image", ")", ",", "'L'", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "'f_'", "+", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.None.prog_w.run_pred": [[70, 86], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "numpy.random.seed", "torch.manual_seed", "print", "torch.device", "prog_w.pred_w", "dnnlib.util.open_url", "[].requires_grad_().to", "[].requires_grad_", "legacy.load_network_pkl"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.None.prog_w.pred_w"], ["", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--network'", ",", "'network_pkl'", ",", "help", "=", "'Network pickle filename'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "help", "=", "'Random seed'", ",", "type", "=", "int", ",", "default", "=", "303", ",", "show_default", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--dict'", ",", "'dict_name'", ",", "help", "=", "'dictionary name'", ",", "default", "=", "'wdict'", ")", "\n", "@", "click", ".", "option", "(", "'--frame'", ",", "'frame_path'", ",", "help", "=", "'test dataframe csv'", ",", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--pfolder'", ",", "'proj_folder'", ",", "help", "=", "'individual projection folder'", ",", "default", "=", "None", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--outdir'", ",", "'outdir'", ",", "help", "=", "'output dir'", ",", "default", "=", "'./out'", ")", "\n", "def", "run_pred", "(", "network_pkl", ":", "str", ",", "seed", ":", "int", ",", "dict_name", ":", "str", ",", "\n", "frame_path", ":", "str", ",", "proj_folder", ":", "str", ",", "outdir", ":", "str", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "print", "(", "'Loading networks from \"%s\"...'", "%", "network_pkl", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "with", "dnnlib", ".", "util", ".", "open_url", "(", "network_pkl", ")", "as", "fp", ":", "\n", "        ", "G", "=", "legacy", ".", "load_network_pkl", "(", "fp", ")", "[", "'G_ema'", "]", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "device", ")", "\n", "", "pred_w", "(", "G", ",", "dict_name", ",", "frame_path", ",", "proj_folder", ",", "outdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.None.risk.risk_roc": [[7, 50], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "pandas.read_csv", "range", "sklearn.metrics.roc_curve", "sklearn.metrics.roc_curve", "matplotlib.subplots", "ax1.plot", "ax1.plot", "ax1.plot", "ax1.set_xlabel", "ax1.set_ylabel", "ax1.legend", "matplotlib.savefig", "len", "sums.append", "df[].tolist", "sklearn.metrics.roc_auc_score", "sklearn.metrics.roc_auc_score", "df[].tolist"], "function", ["None"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--ytrue'", ",", "'ytrue_path'", ",", "help", "=", "'path for groud truth .npy files'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--ystd'", ",", "'ystd_path'", ",", "help", "=", "'path for baseline supervised model predicted as .npy files'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--ybase'", ",", "'ybase_path'", ",", "help", "=", "'path for KLS classifier predictions on X_i as .npy files'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--yfinal'", ",", "'yfinal_path'", ",", "help", "=", "'path for KLS classifier predictions on X_j as .npy files'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--df'", ",", "'df_path'", ",", "help", "=", "'path for dataframe files including the colume of [fast prog]: c_j-c_i > 1'", ",", "required", "=", "True", ")", "\n", "@", "click", ".", "option", "(", "'--savedir'", ",", "'save_path'", ",", "help", "=", "'path for figure saving'", ",", "default", "=", "'./'", ")", "\n", "def", "risk_roc", "(", "\n", "ytrue_path", ":", "str", ",", "\n", "ystd_path", ":", "str", ",", "\n", "ybase_path", ":", "str", ",", "\n", "yfinal_path", ":", "str", ",", "\n", "df_path", ":", "str", ",", "\n", "save_path", ":", "str", "\n", ")", ":", "\n", "    ", "y_true", "=", "np", ".", "load", "(", "ytrue_path", ")", "\n", "y_std", "=", "np", ".", "load", "(", "ystd_path", ")", "\n", "y_base", "=", "np", ".", "load", "(", "ybase_path", ")", "\n", "y_final", "=", "np", ".", "load", "(", "yfinal_path", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "df_path", ")", "\n", "\n", "progs", "=", "[", "[", "0", ",", "4", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "4", "]", ",", "[", "0", ",", "3", "]", ",", "[", "1", ",", "3", "]", ",", "[", "0", ",", "2", "]", "]", "\n", "sums", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "y_base", ")", ")", ":", "\n", "        ", "pr_b", "=", "y_base", "[", "n", "]", "\n", "pr_f", "=", "y_final", "[", "n", "]", "\n", "local_sum", "=", "0", "\n", "for", "m", "in", "progs", ":", "\n", "            ", "local_sum", "+=", "pr_b", "[", "m", "[", "0", "]", "]", "*", "pr_f", "[", "m", "[", "1", "]", "]", "\n", "", "sums", ".", "append", "(", "local_sum", ")", "\n", "\n", "", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_std", ")", "\n", "fpr_", ",", "tpr_", ",", "_", "=", "roc_curve", "(", "df", "[", "'fast prog'", "]", ".", "tolist", "(", ")", ",", "sums", ")", "\n", "\n", "_", ",", "ax1", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "dpi", "=", "100", ")", "\n", "_", "=", "ax1", ".", "plot", "(", "fpr", ",", "tpr", ",", "'b-'", ",", "alpha", "=", "1", ",", "label", "=", "'Supervised Model (AUC:%2.2f)'", "%", "roc_auc_score", "(", "y_true", ",", "y_std", ")", ")", "\n", "_", "=", "ax1", ".", "plot", "(", "fpr_", ",", "tpr_", ",", "'r-'", ",", "alpha", "=", "1", ",", "label", "=", "'Our Model (AUC:%2.2f)'", "%", "roc_auc_score", "(", "df", "[", "'fast prog'", "]", ".", "tolist", "(", ")", ",", "sums", ")", ")", "\n", "_", "=", "ax1", ".", "plot", "(", "fpr", ",", "fpr", ",", "'k--'", ",", "label", "=", "'Random Guessing'", ")", "\n", "\n", "_", "=", "ax1", ".", "set_xlabel", "(", "'False Positive Rate'", ")", "\n", "_", "=", "ax1", ".", "set_ylabel", "(", "'True Positive Rate'", ")", "\n", "_", "=", "ax1", ".", "legend", "(", "loc", "=", "4", ",", "prop", "=", "{", "'size'", ":", "10", "}", ")", "\n", "_", "=", "plt", ".", "savefig", "(", "save_path", ",", "dpi", "=", "600", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.argument.parser": [[3, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'oai progressor prediction'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--todo'", ",", "choices", "=", "[", "'train'", ",", "'valid'", ",", "'test'", ",", "'visualize'", "]", ",", "default", "=", "'train'", ",", "\n", "help", "=", "'what behavior want to do: train | valid | test | visualize'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'oai'", ",", "help", "=", "'use what dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--subsample'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "default", "=", "'../OAI_Xray/dataset_most/imgs/'", ",", "\n", "help", "=", "'the directory to save the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_root'", ",", "default", "=", "'log'", ",", "\n", "help", "=", "'the directory to save the logs or other imformations (e.g. images)'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_root'", ",", "default", "=", "'checkpoint'", ",", "help", "=", "'the directory to save the models'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_checkpoint'", ",", "default", "=", "'./oldmodel/'", ")", "\n", "parser", ".", "add_argument", "(", "'--affix'", ",", "default", "=", "'default'", ",", "help", "=", "'the affix for the save folder'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Use ImageNet pretraining or not'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "'-b'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "'-m_e'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'the maximum numbers of the model see a sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "'-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "'-w'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'the parameter of l2 restriction for weights'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "default", "=", "'2'", ",", "help", "=", "'which gpu to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_eval_step'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'number of iteration per one evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_checkpoint_step'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "\n", "help", "=", "'number of iteration to save a checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_store_image_step'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "\n", "help", "=", "'number of iteration to save adversaries'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.argument.print_args": [[42, 48], ["vars().items", "vars", "logger.info", "print"], "function", ["None"], ["", "def", "print_args", "(", "args", ",", "logger", "=", "None", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'{:<16} : {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'{:<16} : {}'", ".", "format", "(", "k", ",", "v", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.train.Trainer.__init__": [[18, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "logger", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.train.Trainer.train": [[22, 66], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "time.time.time", "range", "model.parameters", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.optim.lr_scheduler.MultiStepLR.step", "torch.optim.lr_scheduler.MultiStepLR.step", "model.train", "model", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.binary_cross_entropy.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "time.time.time", "train.Trainer.test", "time.time.time", "logger.info", "logger.info", "logger.info", "logger.info", "utils.tensor2cuda", "utils.tensor2cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "logger.info", "time.time.time", "os.path.join", "utils.save_model", "os.path.join", "utils.save_model", "torch.binary_cross_entropy.item", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.train.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.train.Trainer.test", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.save_model", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.save_model"], ["", "def", "train", "(", "self", ",", "model", ",", "tr_loader", ",", "va_loader", "=", "None", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "logger", "=", "self", ".", "logger", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "opt", ",", "milestones", "=", "[", "100", ",", "200", "]", ",", "gamma", "=", "0.1", ")", "\n", "_iter", "=", "0", "\n", "begin_time", "=", "time", "(", ")", "\n", "best_loss", "=", "9999", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "for", "data", ",", "label", "in", "tr_loader", ":", "\n", "                ", "data", ",", "label", "=", "tensor2cuda", "(", "data", ")", ",", "tensor2cuda", "(", "label", ")", "\n", "model", ".", "train", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "output", ")", ",", "label", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "if", "_iter", "%", "args", ".", "n_eval_step", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'epoch: %d, iter: %d, spent %.2f s, tr_loss: %.3f'", "%", "(", "\n", "epoch", ",", "_iter", ",", "time", "(", ")", "-", "begin_time", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "begin_time", "=", "time", "(", ")", "\n", "\n", "", "if", "_iter", "%", "args", ".", "n_checkpoint_step", "==", "0", ":", "\n", "                    ", "file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'checkpoint_%d.pth'", "%", "_iter", ")", "\n", "save_model", "(", "model", ",", "file_name", ")", "\n", "\n", "", "_iter", "+=", "1", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "va_loader", "is", "not", "None", ":", "\n", "                ", "t1", "=", "time", "(", ")", "\n", "va_acc", ",", "va_stdloss", "=", "self", ".", "test", "(", "model", ",", "va_loader", ",", "False", ")", "\n", "va_acc", "=", "va_acc", "*", "100.0", "\n", "if", "va_stdloss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "va_stdloss", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_folder", ",", "'checkpoint_best.pth'", ")", "\n", "save_model", "(", "model", ",", "file_name", ")", "\n", "", "t2", "=", "time", "(", ")", "\n", "logger", ".", "info", "(", "'\\n'", "+", "'='", "*", "20", "+", "' evaluation at epoch: %d iteration: %d '", "%", "(", "epoch", ",", "_iter", ")", "+", "'='", "*", "20", ")", "\n", "logger", ".", "info", "(", "'val acc: %.3f %%, spent: %.3f'", "%", "(", "va_acc", ",", "t2", "-", "t1", ")", ")", "\n", "logger", ".", "info", "(", "'val loss: %.3f, spent: %.3f'", "%", "(", "va_stdloss", ",", "t2", "-", "t1", ")", ")", "\n", "logger", ".", "info", "(", "'='", "*", "28", "+", "' end of evaluation '", "+", "'='", "*", "28", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.train.Trainer.test": [[67, 97], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.squeeze", "numpy.squeeze", "numpy.save", "numpy.save", "model.eval", "model", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "numpy.mean", "numpy.array", "numpy.array", "os.path.join", "os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.tensor2cuda", "utils.tensor2cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "utils.evaluate_", "label_list.append", "pred_list.append", "out.cpu().numpy", "numpy.squeeze.cpu().numpy", "numpy.squeeze.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "out.cpu", "numpy.squeeze.cpu", "numpy.squeeze.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "torch.sigmoid.cpu"], "methods", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.tensor2cuda", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.evaluate_"], ["", "", "", "def", "test", "(", "self", ",", "model", ",", "loader", ",", "if_AUC", "=", "False", ")", ":", "\n", "        ", "total_acc", "=", "0.0", "\n", "total_stdloss", "=", "0.0", "\n", "num", "=", "0", "\n", "t", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "0.5", "]", ")", ".", "cuda", "(", ")", ")", "# threshold to compute accuracy", "\n", "label_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "label", "in", "loader", ":", "\n", "                ", "data", ",", "label", "=", "tensor2cuda", "(", "data", ")", ",", "tensor2cuda", "(", "label", ")", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "std_loss", "=", "F", ".", "binary_cross_entropy", "(", "torch", ".", "sigmoid", "(", "output", ")", ",", "label", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "out", "=", "(", "pred", ">", "t", ")", ".", "float", "(", ")", "\n", "te_acc", "=", "np", ".", "mean", "(", "evaluate_", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "total_acc", "+=", "te_acc", "\n", "total_stdloss", "+=", "std_loss", "\n", "if", "if_AUC", ":", "\n", "                    ", "label_list", ".", "append", "(", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_list", ".", "append", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "num", "+=", "1", "\n", "", "", "if", "if_AUC", ":", "\n", "            ", "pred", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "pred_list", ")", ")", "\n", "label", "=", "np", ".", "squeeze", "(", "np", ".", "array", "(", "label_list", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_folder", ",", "'y_pred.npy'", ")", ",", "pred", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_folder", ",", "'y_true.npy'", ")", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "return", "total_acc", "/", "num", ",", "total_stdloss", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.train.main": [[99, 173], ["os.path.join", "os.path.join", "utils.makedirs", "utils.makedirs", "setattr", "setattr", "utils.create_logger", "argument.print_args", "torchvision.models.resnet50", "torch.Linear", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train.Trainer", "models.resnet50.cuda", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "dataset.PatchDataset", "torch.utils.data.DataLoader", "dataset.PatchDataset", "torch.utils.data.DataLoader", "Trainer.train", "dataset.PatchDataset", "torch.utils.data.DataLoader", "torch.load", "torch.load", "torch.load", "models.resnet50.load_state_dict", "train.Trainer.test", "print", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomAffine", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.makedirs", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.makedirs", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.create_logger", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.argument.print_args", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.train.Trainer.train", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.train.Trainer.test"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "save_folder", "=", "'%s_%s'", "%", "(", "args", ".", "dataset", ",", "args", ".", "affix", ")", "\n", "log_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_root", ",", "save_folder", ")", "\n", "model_folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_root", ",", "save_folder", ")", "\n", "makedirs", "(", "log_folder", ")", "\n", "makedirs", "(", "model_folder", ")", "\n", "setattr", "(", "args", ",", "'log_folder'", ",", "log_folder", ")", "\n", "setattr", "(", "args", ",", "'model_folder'", ",", "model_folder", ")", "\n", "logger", "=", "create_logger", "(", "log_folder", ",", "args", ".", "todo", ",", "'info'", ")", "\n", "print_args", "(", "args", ",", "logger", ")", "\n", "\n", "model", "=", "models", ".", "resnet50", "(", "pretrained", "=", "args", ".", "pretrain", ")", "\n", "num_classes", "=", "1", "\n", "# for ResNet", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "model", ".", "fc", ".", "in_features", ",", "num_classes", ")", "\n", "# for AlexNet and VGG", "\n", "# model.classifier[6] = nn.Linear(model.classifier[6].in_features, num_classes)", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "trainer", "=", "Trainer", "(", "args", ",", "logger", ")", "\n", "means", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "stds", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "if", "args", ".", "todo", "==", "'train'", ":", "\n", "        ", "transform_train", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "\n", "saturation", "=", "0.3", ",", "hue", "=", "0.3", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomAffine", "(", "25", ",", "translate", "=", "(", "0.2", ",", "0.2", ")", ",", "\n", "scale", "=", "(", "0.8", ",", "1.2", ")", ",", "shear", "=", "10", ")", ",", "\n", "tv", ".", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "means", ",", "stds", ")", "\n", "]", ")", "\n", "\n", "transform_test", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "means", ",", "stds", ")", "\n", "]", ")", "\n", "\n", "tr_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'train'", ",", "\n", "sample", "=", "args", ".", "subsample", ",", "\n", "transform", "=", "transform_train", ")", "\n", "tr_loader", "=", "DataLoader", "(", "tr_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "va_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'val'", ",", "\n", "transform", "=", "transform_test", ")", "\n", "va_loader", "=", "DataLoader", "(", "va_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ")", "\n", "\n", "trainer", ".", "train", "(", "model", ",", "tr_loader", ",", "va_loader", ")", "\n", "\n", "", "elif", "args", ".", "todo", "==", "'test'", ":", "\n", "        ", "te_dataset", "=", "patd", ".", "PatchDataset", "(", "path_to_images", "=", "args", ".", "data_root", ",", "\n", "fold", "=", "'test'", ",", "\n", "transform", "=", "tv", ".", "transforms", ".", "Compose", "(", "[", "\n", "tv", ".", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "tv", ".", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "tv", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "tv", ".", "transforms", ".", "Normalize", "(", "means", ",", "stds", ")", "\n", "]", ")", ")", "\n", "te_loader", "=", "DataLoader", "(", "te_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "load_checkpoint", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "std_acc", ",", "adv_acc", "=", "trainer", ".", "test", "(", "model", ",", "te_loader", ",", "if_AUC", "=", "True", ")", "\n", "print", "(", "\"std acc: %.4f, adv_acc: %.4f\"", "%", "(", "std_acc", "*", "100", ",", "adv_acc", "*", "100", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.dataset.PatchDataset.__init__": [[10, 22], ["pandas.read_csv", "dataset.PatchDataset.df.set_index", "dataset.PatchDataset.df.sample", "print", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path_to_images", ",", "fold", ",", "sample", "=", "0", ",", "transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "path_to_images", "=", "path_to_images", "\n", "self", ".", "df", "=", "pd", ".", "read_csv", "(", "\"./label/most.csv\"", ")", "\n", "self", ".", "fold", "=", "fold", "\n", "self", ".", "df", "=", "self", ".", "df", "[", "self", ".", "df", "[", "'fold'", "]", "==", "fold", "]", "\n", "if", "(", "sample", ">", "0", "and", "sample", "<", "len", "(", "self", ".", "df", ")", ")", ":", "\n", "            ", "self", ".", "df", "=", "self", ".", "df", ".", "sample", "(", "frac", "=", "sample", ",", "random_state", "=", "42", ")", "\n", "print", "(", "'subsample the training set with ratio %f'", "%", "sample", ")", "\n", "", "self", ".", "df", "=", "self", ".", "df", ".", "set_index", "(", "'name baseline'", ")", "\n", "self", ".", "PRED_LABEL", "=", "[", "'fast prog'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.dataset.PatchDataset.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.dataset.PatchDataset.__getitem__": [[26, 38], ["PIL.Image.open", "dataset.PatchDataset.convert", "numpy.zeros", "range", "os.path.join", "len", "len", "dataset.PatchDataset.transform", "dataset.PatchDataset.df[].iloc[].astype", "dataset.PatchDataset.df[].iloc[].astype", "dataset.PatchDataset.PRED_LABEL[].strip", "dataset.PatchDataset.PRED_LABEL[].strip"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "filename", "=", "self", ".", "df", ".", "index", "[", "idx", "]", "\n", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path_to_images", ",", "filename", ")", ")", "\n", "image", "=", "image", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "PRED_LABEL", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "PRED_LABEL", ")", ")", ":", "\n", "            ", "if", "(", "self", ".", "df", "[", "self", ".", "PRED_LABEL", "[", "i", "]", ".", "strip", "(", ")", "]", ".", "iloc", "[", "idx", "]", ".", "astype", "(", "'int'", ")", ">", "0", ")", ":", "\n", "                ", "label", "[", "i", "]", "=", "self", ".", "df", "[", "self", ".", "PRED_LABEL", "[", "i", "]", ".", "strip", "(", ")", "]", ".", "iloc", "[", "idx", "]", ".", "astype", "(", "'int'", ")", "\n", "", "", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "return", "(", "image", ",", "label", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.LabelDict.__init__": [[8, 18], ["utils.LabelDict.label_dict.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'cifar-10'", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "if", "dataset", "==", "'cifar-10'", ":", "\n", "            ", "self", ".", "label_dict", "=", "{", "0", ":", "'airplane'", ",", "1", ":", "'automobile'", ",", "2", ":", "'bird'", ",", "3", ":", "'cat'", ",", "\n", "4", ":", "'deer'", ",", "5", ":", "'dog'", ",", "6", ":", "'frog'", ",", "7", ":", "'horse'", ",", "\n", "8", ":", "'ship'", ",", "9", ":", "'truck'", "}", "\n", "", "if", "dataset", "==", "'luna'", ":", "\n", "            ", "self", ".", "label_dict", "=", "{", "0", ":", "'benign'", ",", "1", ":", "'malignant'", "}", "\n", "\n", "", "self", ".", "class_dict", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "label_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.LabelDict.label2class": [[19, 22], ["None"], "methods", ["None"], ["", "def", "label2class", "(", "self", ",", "label", ")", ":", "\n", "        ", "assert", "label", "in", "self", ".", "label_dict", ",", "'the label %d is not in %s'", "%", "(", "label", ",", "self", ".", "dataset", ")", "\n", "return", "self", ".", "label_dict", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.LabelDict.class2label": [[23, 27], ["isinstance"], "methods", ["None"], ["", "def", "class2label", "(", "self", ",", "_class", ")", ":", "\n", "        ", "assert", "isinstance", "(", "_class", ",", "str", ")", "\n", "assert", "_class", "in", "self", ".", "class_dict", ",", "'the class %s is not in %s'", "%", "(", "_class", ",", "self", ".", "dataset", ")", "\n", "return", "self", ".", "class_dict", "[", "_class", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.list2cuda": [[28, 31], ["numpy.array", "utils.numpy2cuda"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.numpy2cuda"], ["", "", "def", "list2cuda", "(", "_list", ")", ":", "\n", "    ", "array", "=", "np", ".", "array", "(", "_list", ")", "\n", "return", "numpy2cuda", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.numpy2cuda": [[32, 36], ["torch.from_numpy", "utils.tensor2cuda"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.tensor2cuda"], ["", "def", "numpy2cuda", "(", "array", ")", ":", "\n", "    ", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "\n", "return", "tensor2cuda", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.tensor2cuda": [[37, 42], ["torch.cuda.is_available", "tensor.cuda().float.cuda().float", "tensor.cuda().float.cuda"], "function", ["None"], ["", "def", "tensor2cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "tensor", "=", "tensor", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.one_hot": [[43, 61], ["torch.zeros", "torch.zeros.scatter_", "len", "len", "ids.cpu().unsqueeze", "ids.cpu"], "function", ["None"], ["", "def", "one_hot", "(", "ids", ",", "n_class", ")", ":", "\n", "# --------------------- ", "\n", "# author\uff1ake1th ", "\n", "# source\uff1aCSDN ", "\n", "# artical\uff1ahttps://blog.csdn.net/u012436149/article/details/77017832 ", "\n", "    ", "b\"\"\"\n    ids: (list, ndarray) shape:[batch_size]\n    out_tensor:FloatTensor shape:[batch_size, depth]\n    \"\"\"", "\n", "\n", "assert", "len", "(", "ids", ".", "shape", ")", "==", "1", ",", "'the ids should be 1-D'", "\n", "# ids = torch.LongTensor(ids).view(-1,1) ", "\n", "\n", "out_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "ids", ")", ",", "n_class", ")", "\n", "\n", "out_tensor", ".", "scatter_", "(", "1", ",", "ids", ".", "cpu", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "1.", ")", "\n", "\n", "return", "out_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.evaluate": [[62, 68], ["correct.mean", "correct.sum"], "function", ["None"], ["", "def", "evaluate", "(", "_input", ",", "_target", ",", "method", "=", "'mean'", ")", ":", "\n", "    ", "correct", "=", "(", "_input", "==", "_target", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "method", "==", "'mean'", ":", "\n", "        ", "return", "correct", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "correct", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.evaluate_": [[69, 76], ["range", "results.append", "sklearn.metrics.accuracy_score"], "function", ["None"], ["", "", "def", "evaluate_", "(", "_input", ",", "_target", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "_input", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "input_vec", "=", "_input", "[", ":", ",", "n", "]", "\n", "target_vec", "=", "_target", "[", ":", ",", "n", "]", "\n", "results", ".", "append", "(", "accuracy_score", "(", "target_vec", ",", "input_vec", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.create_logger": [[77, 99], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "os.path.join", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "create_logger", "(", "save_path", "=", "''", ",", "file_type", "=", "''", ",", "level", "=", "'debug'", ")", ":", "\n", "\n", "    ", "if", "level", "==", "'debug'", ":", "\n", "        ", "_level", "=", "logging", ".", "DEBUG", "\n", "", "elif", "level", "==", "'info'", ":", "\n", "        ", "_level", "=", "logging", ".", "INFO", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "_level", ")", "\n", "\n", "cs", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "cs", ".", "setLevel", "(", "_level", ")", "\n", "logger", ".", "addHandler", "(", "cs", ")", "\n", "\n", "if", "save_path", "!=", "''", ":", "\n", "        ", "file_name", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "file_type", "+", "'_log.txt'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "file_name", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setLevel", "(", "_level", ")", "\n", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.makedirs": [[100, 104], ["os.path.exists", "print", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.makedirs"], ["", "def", "makedirs", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "print", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.load_model": [[105, 108], ["model.load_state_dict", "torch.load"], "function", ["None"], ["", "", "def", "load_model", "(", "model", ",", "file_name", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "file_name", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.save_model": [[109, 111], ["torch.save", "model.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "file_name", ")", ":", "\n", "    ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.count_parameters": [[112, 116], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "# copy from https://discuss.pytorch.org/t/how-do-i-check-the-number-of-parameters-of-a-model/4325/8", "\n", "# baldassarre.fe's reply", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.gram_linear": [[120, 130], ["x.dot"], "function", ["None"], ["", "def", "gram_linear", "(", "x", ")", ":", "\n", "  ", "\"\"\"Compute Gram (kernel) matrix for a linear kernel.\n    Gram (correlation) matrix is defined as correlation between \n    actvtivations across test samples.\n  Args:\n    x: A num_examples x num_features matrix of features.\n  Returns:\n    A num_examples x num_examples Gram matrix of examples.\n  \"\"\"", "\n", "return", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.gram_rbf": [[132, 147], ["x.dot", "numpy.diag", "numpy.median", "numpy.exp"], "function", ["None"], ["", "def", "gram_rbf", "(", "x", ",", "threshold", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Compute Gram (kernel) matrix for an RBF kernel.\n  Args:\n    x: A num_examples x num_features matrix of features.\n    threshold: Fraction of median Euclidean distance to use as RBF kernel\n      bandwidth. (This is the heuristic we use in the paper. There are other\n      possible ways to set the bandwidth; we didn't try them.)\n  Returns:\n    A num_examples x num_examples Gram matrix of examples.\n  \"\"\"", "\n", "dot_products", "=", "x", ".", "dot", "(", "x", ".", "T", ")", "\n", "sq_norms", "=", "np", ".", "diag", "(", "dot_products", ")", "\n", "sq_distances", "=", "-", "2", "*", "dot_products", "+", "sq_norms", "[", ":", ",", "None", "]", "+", "sq_norms", "[", "None", ",", ":", "]", "\n", "sq_median_distance", "=", "np", ".", "median", "(", "sq_distances", ")", "\n", "return", "np", ".", "exp", "(", "-", "sq_distances", "/", "(", "2", "*", "threshold", "**", "2", "*", "sq_median_distance", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.center_gram": [[149, 183], ["gram.copy.copy", "numpy.allclose", "ValueError", "numpy.fill_diagonal", "numpy.fill_diagonal", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.mean"], "function", ["None"], ["", "def", "center_gram", "(", "gram", ",", "unbiased", "=", "False", ")", ":", "\n", "  ", "\"\"\"Center a symmetric Gram matrix.\n  This is equvialent to centering the (possibly infinite-dimensional) features\n  induced by the kernel before computing the Gram matrix.\n  Args:\n    gram: A num_examples x num_examples symmetric matrix.\n    unbiased: Whether to adjust the Gram matrix in order to compute an unbiased\n      estimate of HSIC. Note that this estimator may be negative.\n  Returns:\n    A symmetric matrix with centered columns and rows.\n  \"\"\"", "\n", "if", "not", "np", ".", "allclose", "(", "gram", ",", "gram", ".", "T", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Input must be a symmetric matrix.'", ")", "\n", "", "gram", "=", "gram", ".", "copy", "(", ")", "\n", "\n", "if", "unbiased", ":", "\n", "# This formulation of the U-statistic, from Szekely, G. J., & Rizzo, M.", "\n", "# L. (2014). Partial distance correlation with methods for dissimilarities.", "\n", "# The Annals of Statistics, 42(6), 2382-2412, seems to be more numerically", "\n", "# stable than the alternative from Song et al. (2007).", "\n", "    ", "n", "=", "gram", ".", "shape", "[", "0", "]", "\n", "np", ".", "fill_diagonal", "(", "gram", ",", "0", ")", "\n", "means", "=", "np", ".", "sum", "(", "gram", ",", "0", ",", "dtype", "=", "np", ".", "float64", ")", "/", "(", "n", "-", "2", ")", "\n", "means", "-=", "np", ".", "sum", "(", "means", ")", "/", "(", "2", "*", "(", "n", "-", "1", ")", ")", "\n", "gram", "-=", "means", "[", ":", ",", "None", "]", "\n", "gram", "-=", "means", "[", "None", ",", ":", "]", "\n", "np", ".", "fill_diagonal", "(", "gram", ",", "0", ")", "\n", "", "else", ":", "\n", "    ", "means", "=", "np", ".", "mean", "(", "gram", ",", "0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "means", "-=", "np", ".", "mean", "(", "means", ")", "/", "2", "\n", "gram", "-=", "means", "[", ":", ",", "None", "]", "\n", "gram", "-=", "means", "[", "None", ",", ":", "]", "\n", "\n", "", "return", "gram", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.cka": [[185, 204], ["utils.center_gram", "utils.center_gram", "center_gram.ravel().dot", "numpy.linalg.norm", "numpy.linalg.norm", "center_gram.ravel", "center_gram.ravel"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.center_gram", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.center_gram"], ["", "def", "cka", "(", "gram_x", ",", "gram_y", ",", "debiased", "=", "False", ")", ":", "\n", "  ", "\"\"\"Compute CKA.\n  Args:\n    gram_x: A num_examples x num_examples Gram matrix.\n    gram_y: A num_examples x num_examples Gram matrix.\n    debiased: Use unbiased estimator of HSIC. CKA may still be biased.\n  Returns:\n    The value of CKA between X and Y.\n  \"\"\"", "\n", "gram_x", "=", "center_gram", "(", "gram_x", ",", "unbiased", "=", "debiased", ")", "\n", "gram_y", "=", "center_gram", "(", "gram_y", ",", "unbiased", "=", "debiased", ")", "\n", "\n", "# Note: To obtain HSIC, this should be divided by (n-1)**2 (biased variant) or", "\n", "# n*(n-3) (unbiased variant), but this cancels for CKA.", "\n", "scaled_hsic", "=", "gram_x", ".", "ravel", "(", ")", ".", "dot", "(", "gram_y", ".", "ravel", "(", ")", ")", "\n", "\n", "normalization_x", "=", "np", ".", "linalg", ".", "norm", "(", "gram_x", ")", "\n", "normalization_y", "=", "np", ".", "linalg", ".", "norm", "(", "gram_y", ")", "\n", "return", "scaled_hsic", "/", "(", "normalization_x", "*", "normalization_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils._debiased_dot_product_similarity_helper": [[206, 215], ["sum_squared_rows_x.dot"], "function", ["None"], ["", "def", "_debiased_dot_product_similarity_helper", "(", "\n", "xty", ",", "sum_squared_rows_x", ",", "sum_squared_rows_y", ",", "squared_norm_x", ",", "squared_norm_y", ",", "\n", "n", ")", ":", "\n", "  ", "\"\"\"Helper for computing debiased dot product similarity (i.e. linear HSIC).\"\"\"", "\n", "# This formula can be derived by manipulating the unbiased estimator from", "\n", "# Song et al. (2007).", "\n", "return", "(", "\n", "xty", "-", "n", "/", "(", "n", "-", "2.", ")", "*", "sum_squared_rows_x", ".", "dot", "(", "sum_squared_rows_y", ")", "\n", "+", "squared_norm_x", "*", "squared_norm_y", "/", "(", "(", "n", "-", "1", ")", "*", "(", "n", "-", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils.feature_space_linear_cka": [[217, 255], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.mean", "numpy.mean", "numpy.linalg.norm", "features_x.T.dot", "features_y.T.dot", "numpy.einsum", "numpy.einsum", "numpy.sum", "numpy.sum", "utils._debiased_dot_product_similarity_helper", "numpy.sqrt", "numpy.sqrt", "features_x.T.dot", "utils._debiased_dot_product_similarity_helper", "utils._debiased_dot_product_similarity_helper"], "function", ["home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils._debiased_dot_product_similarity_helper", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils._debiased_dot_product_similarity_helper", "home.repos.pwc.inspect_result.peterhan91_disease_progression.base_classifier.utils._debiased_dot_product_similarity_helper"], ["", "def", "feature_space_linear_cka", "(", "features_x", ",", "features_y", ",", "debiased", "=", "False", ")", ":", "\n", "  ", "\"\"\"Compute CKA with a linear kernel, in feature space.\n  This is typically faster than computing the Gram matrix when there are fewer\n  features than examples.\n  Args:\n    features_x: A num_examples x num_features matrix of features.\n    features_y: A num_examples x num_features matrix of features.\n    debiased: Use unbiased estimator of dot product similarity. CKA may still be\n      biased. Note that this estimator may be negative.\n  Returns:\n    The value of CKA between X and Y.\n  \"\"\"", "\n", "features_x", "=", "features_x", "-", "np", ".", "mean", "(", "features_x", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "features_y", "=", "features_y", "-", "np", ".", "mean", "(", "features_y", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "dot_product_similarity", "=", "np", ".", "linalg", ".", "norm", "(", "features_x", ".", "T", ".", "dot", "(", "features_y", ")", ")", "**", "2", "\n", "normalization_x", "=", "np", ".", "linalg", ".", "norm", "(", "features_x", ".", "T", ".", "dot", "(", "features_x", ")", ")", "\n", "normalization_y", "=", "np", ".", "linalg", ".", "norm", "(", "features_y", ".", "T", ".", "dot", "(", "features_y", ")", ")", "\n", "\n", "if", "debiased", ":", "\n", "    ", "n", "=", "features_x", ".", "shape", "[", "0", "]", "\n", "# Equivalent to np.sum(features_x ** 2, 1) but avoids an intermediate array.", "\n", "sum_squared_rows_x", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "features_x", ",", "features_x", ")", "\n", "sum_squared_rows_y", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "features_y", ",", "features_y", ")", "\n", "squared_norm_x", "=", "np", ".", "sum", "(", "sum_squared_rows_x", ")", "\n", "squared_norm_y", "=", "np", ".", "sum", "(", "sum_squared_rows_y", ")", "\n", "\n", "dot_product_similarity", "=", "_debiased_dot_product_similarity_helper", "(", "\n", "dot_product_similarity", ",", "sum_squared_rows_x", ",", "sum_squared_rows_y", ",", "\n", "squared_norm_x", ",", "squared_norm_y", ",", "n", ")", "\n", "normalization_x", "=", "np", ".", "sqrt", "(", "_debiased_dot_product_similarity_helper", "(", "\n", "normalization_x", "**", "2", ",", "sum_squared_rows_x", ",", "sum_squared_rows_x", ",", "\n", "squared_norm_x", ",", "squared_norm_x", ",", "n", ")", ")", "\n", "normalization_y", "=", "np", ".", "sqrt", "(", "_debiased_dot_product_similarity_helper", "(", "\n", "normalization_y", "**", "2", ",", "sum_squared_rows_y", ",", "sum_squared_rows_y", ",", "\n", "squared_norm_y", ",", "squared_norm_y", ",", "n", ")", ")", "\n", "\n", "", "return", "dot_product_similarity", "/", "(", "normalization_x", "*", "normalization_y", ")", "", "", ""]]}