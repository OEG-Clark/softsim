{"home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.DirectorySelection.__init__": [[18, 29], ["tkinter.Frame", "tkinter.Button", "tkinter.Button.pack", "tkinter.Button.bind", "interface_heatmap.DirectorySelection.frame.pack"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "master", ")", ":", "\n", "\n", "        ", "self", ".", "master", "=", "master", "\n", "self", ".", "frame", "=", "tk", ".", "Frame", "(", "self", ".", "master", ")", "\n", "\n", "# select file button", "\n", "select_button", "=", "tk", ".", "Button", "(", "self", ".", "frame", ",", "text", "=", "'Select Directory'", ")", "\n", "select_button", ".", "pack", "(", "fill", "=", "tk", ".", "X", ")", "\n", "select_button", ".", "bind", "(", "'<Button-1>'", ",", "self", ".", "file_selection", ")", "\n", "\n", "self", ".", "frame", ".", "pack", "(", "padx", "=", "50", ",", "pady", "=", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.DirectorySelection.file_selection": [[32, 39], ["tkinter.filedialog.askdirectory", "print", "interface_heatmap.DirectorySelection.frame.pack_forget", "interface_heatmap.HeatMapSettingsMenu"], "methods", ["None"], ["", "def", "file_selection", "(", "self", ",", "event", ")", ":", "\n", "# open the file selection menu and get the file path", "\n", "        ", "root", ".", "file_path", "=", "filedialog", ".", "askdirectory", "(", "title", "=", "'Please select a info.json containing directory'", ")", "\n", "print", "(", "\"root.file_path: {}\"", ".", "format", "(", "root", ".", "file_path", ")", ")", "\n", "\n", "self", ".", "frame", ".", "pack_forget", "(", ")", "\n", "self", ".", "app", "=", "HeatMapSettingsMenu", "(", "self", ".", "master", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.HeatMapSettingsMenu.__init__": [[43, 113], ["tkinter.Frame", "interface_heatmap.HeatMapSettingsMenu.frame.focus_force", "tkinter.Label", "tkinter.Label.grid", "tkinter.Label", "tkinter.Label.grid", "tkinter.Entry", "interface_heatmap.HeatMapSettingsMenu.entry_file_path.insert", "interface_heatmap.HeatMapSettingsMenu.entry_file_path.grid", "tkinter.Button", "tkinter.Button.grid", "tkinter.ttk.Label", "tkinter.ttk.Label.grid", "tkinter.Entry", "root.register", "interface_heatmap.HeatMapSettingsMenu.gaussian_matrix_size.configure", "interface_heatmap.HeatMapSettingsMenu.gaussian_matrix_size.insert", "interface_heatmap.HeatMapSettingsMenu.gaussian_matrix_size.grid", "tkinter.ttk.Label", "tkinter.ttk.Label.grid", "tkinter.Entry", "interface_heatmap.HeatMapSettingsMenu.standard_deviation.configure", "interface_heatmap.HeatMapSettingsMenu.standard_deviation.insert", "interface_heatmap.HeatMapSettingsMenu.standard_deviation.grid", "tkinter.IntVar", "tkinter.Radiobutton().grid", "tkinter.Radiobutton().grid", "interface_heatmap.HeatMapSettingsMenu.var.set", "tkinter.StringVar", "tkinter.Radiobutton().grid", "tkinter.Radiobutton().grid", "interface_heatmap.HeatMapSettingsMenu.map.set", "tkinter.Button", "tkinter.Button.grid", "tkinter.Button.bind", "tkinter.Button.bind", "interface_heatmap.HeatMapSettingsMenu.frame.pack", "open", "json.load", "int", "tkinter.Radiobutton", "tkinter.Radiobutton", "tkinter.Radiobutton", "tkinter.Radiobutton"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open"], ["    ", "def", "__init__", "(", "self", ",", "master", ")", ":", "\n", "\n", "        ", "self", ".", "frame", "=", "tk", ".", "Frame", "(", "root", ")", "\n", "self", ".", "frame", ".", "focus_force", "(", ")", "\n", "\n", "with", "open", "(", "root", ".", "file_path", "+", "'/info.json'", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "file_path_default", "=", "data", "[", "'File_Path'", "]", "\n", "file_name", "=", "data", "[", "'File_Name'", "]", "\n", "self", ".", "max_level", "=", "int", "(", "data", "[", "'Level_Count'", "]", ")", "-", "1", "\n", "\n", "# File path of source .svs", "\n", "", "label_file_name", "=", "tk", ".", "Label", "(", "self", ".", "frame", ",", "text", "=", "\"File Name: \"", "+", "file_name", ")", "\n", "label_file_name", ".", "grid", "(", "column", "=", "1", ",", "row", "=", "0", ")", "\n", "\n", "label_file_source_path", "=", "tk", ".", "Label", "(", "self", ".", "frame", ",", "text", "=", "\"File Source: \"", ")", "\n", "label_file_source_path", ".", "grid", "(", "sticky", "=", "\"E\"", ",", "column", "=", "0", ",", "row", "=", "1", ")", "\n", "\n", "# Entry Box for File Path", "\n", "self", ".", "entry_file_path", "=", "tk", ".", "Entry", "(", "self", ".", "frame", ",", "width", "=", "65", ")", "\n", "self", ".", "entry_file_path", ".", "insert", "(", "0", ",", "file_path_default", ")", "\n", "self", ".", "entry_file_path", ".", "grid", "(", "column", "=", "1", ",", "row", "=", "1", ")", "\n", "\n", "# Browse Button", "\n", "browse", "=", "tk", ".", "Button", "(", "self", ".", "frame", ",", "text", "=", "'Browse'", ")", "\n", "browse", ".", "grid", "(", "sticky", "=", "\"W\"", ",", "column", "=", "2", ",", "row", "=", "1", ",", "padx", "=", "(", "5", ",", "0", ")", ")", "\n", "\n", "# Gaussian Matrix Size Selection Label", "\n", "gaussian_matrix_size_label", "=", "ttk", ".", "Label", "(", "self", ".", "frame", ",", "text", "=", "\"Gaussian Matrix Size: \"", ")", "\n", "gaussian_matrix_size_label", ".", "grid", "(", "sticky", "=", "\"E\"", ",", "column", "=", "0", ",", "row", "=", "4", ")", "\n", "\n", "\n", "# Entry Box for Gaussian Matrix Selection", "\n", "self", ".", "gaussian_matrix_size", "=", "tk", ".", "Entry", "(", "self", ".", "frame", ",", "width", "=", "10", ")", "\n", "c", "=", "root", ".", "register", "(", "self", ".", "only_numeric_input", ")", "\n", "self", ".", "gaussian_matrix_size", ".", "configure", "(", "validate", "=", "\"key\"", ",", "validatecommand", "=", "(", "c", ",", "'%P'", ")", ")", "\n", "self", ".", "gaussian_matrix_size", ".", "insert", "(", "0", ",", "200", ")", "\n", "self", ".", "gaussian_matrix_size", ".", "grid", "(", "sticky", "=", "\"W\"", ",", "column", "=", "1", ",", "row", "=", "4", ")", "\n", "\n", "# Standard Deviation Label", "\n", "sd_label", "=", "ttk", ".", "Label", "(", "self", ".", "frame", ",", "text", "=", "\"\\t\\t\\tStandard Deviation:\"", ",", "state", "=", "'disabled'", ")", "\n", "sd_label", ".", "grid", "(", "sticky", "=", "\"S\"", ",", "column", "=", "1", ",", "row", "=", "4", ")", "\n", "\n", "# Entry Box for Standard Deviation Selection", "\n", "self", ".", "standard_deviation", "=", "tk", ".", "Entry", "(", "self", ".", "frame", ",", "width", "=", "10", ",", "state", "=", "'disabled'", ")", "\n", "self", ".", "standard_deviation", ".", "configure", "(", "validate", "=", "\"key\"", ",", "validatecommand", "=", "(", "c", ",", "'%P'", ")", ")", "\n", "self", ".", "standard_deviation", ".", "insert", "(", "0", ",", "50", ")", "\n", "self", ".", "standard_deviation", ".", "grid", "(", "sticky", "=", "\"E\"", ",", "column", "=", "1", ",", "row", "=", "4", ")", "\n", "\n", "# Radio Button for level-wise & merged level", "\n", "self", ".", "var", "=", "tk", ".", "IntVar", "(", ")", "\n", "tk", ".", "Radiobutton", "(", "self", ".", "frame", ",", "text", "=", "\"Merge All Levels\"", ",", "variable", "=", "self", ".", "var", ",", "value", "=", "1", ")", ".", "grid", "(", "sticky", "=", "\"W\"", ",", "column", "=", "1", ",", "row", "=", "5", ")", "\n", "tk", ".", "Radiobutton", "(", "self", ".", "frame", ",", "text", "=", "\"Level-wise \\t \\t   \"", ",", "variable", "=", "self", ".", "var", ",", "value", "=", "2", ")", ".", "grid", "(", "sticky", "=", "\"E\"", ",", "column", "=", "1", ",", "row", "=", "5", ")", "\n", "self", ".", "var", ".", "set", "(", "1", ")", "\n", "\n", "# Radio Button for binary map & heat map", "\n", "self", ".", "map", "=", "tk", ".", "StringVar", "(", ")", "\n", "tk", ".", "Radiobutton", "(", "self", ".", "frame", ",", "text", "=", "\"Heat Map\"", ",", "variable", "=", "self", ".", "map", ",", "value", "=", "\"heatmap\"", ")", ".", "grid", "(", "sticky", "=", "\"W\"", ",", "column", "=", "1", ",", "row", "=", "6", ")", "\n", "tk", ".", "Radiobutton", "(", "self", ".", "frame", ",", "text", "=", "\"Binary Map \\t \\t   \"", ",", "variable", "=", "self", ".", "map", ",", "value", "=", "\"binarymap\"", ")", ".", "grid", "(", "sticky", "=", "\"E\"", ",", "column", "=", "1", ",", "row", "=", "6", ")", "\n", "self", ".", "map", ".", "set", "(", "\"heatmap\"", ")", "\n", "\n", "\n", "# Confirm button", "\n", "confirm", "=", "tk", ".", "Button", "(", "self", ".", "frame", ",", "text", "=", "'OK'", ")", "\n", "confirm", ".", "grid", "(", "sticky", "=", "\"S\"", ",", "column", "=", "1", ",", "row", "=", "8", ",", "ipadx", "=", "10", ")", "\n", "\n", "# self.merged_levels()", "\n", "browse", ".", "bind", "(", "'<ButtonRelease>'", ",", "self", ".", "source_file_selection", ")", "\n", "confirm", ".", "bind", "(", "'<ButtonRelease>'", ",", "self", ".", "on_button_press", ")", "\n", "self", ".", "frame", ".", "pack", "(", "padx", "=", "50", ",", "pady", "=", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.HeatMapSettingsMenu.only_numeric_input": [[114, 123], ["e.isdigit"], "methods", ["None"], ["", "def", "only_numeric_input", "(", "self", ",", "e", ")", ":", "\n", "# this is allowing all numeric input", "\n", "        ", "if", "e", ".", "isdigit", "(", ")", ":", "\n", "            ", "return", "True", "\n", "# this will allow backspace to work", "\n", "", "elif", "e", "==", "\"\"", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.HeatMapSettingsMenu.source_file_selection": [[124, 129], ["tkinter.filedialog.askopenfilename", "interface_heatmap.HeatMapSettingsMenu.entry_file_path.delete", "interface_heatmap.HeatMapSettingsMenu.entry_file_path.insert"], "methods", ["None"], ["", "", "def", "source_file_selection", "(", "self", ",", "event", ")", ":", "\n", "        ", "new_file_path", "=", "filedialog", ".", "askopenfilename", "(", ")", "\n", "if", "not", "new_file_path", "==", "\"\"", ":", "\n", "            ", "self", ".", "entry_file_path", ".", "delete", "(", "0", ",", "\"end\"", ")", "\n", "self", ".", "entry_file_path", ".", "insert", "(", "0", ",", "new_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.HeatMapSettingsMenu.merged_levels": [[130, 167], ["os.chdir", "print", "print", "os.path.join", "int", "len", "os.path.exists", "os.makedirs", "range", "glob.glob", "open", "csv.reader", "open", "re.findall", "max_level_merged.append", "os.path.join", "open", "csv.writer", "csv.writer.writerows", "int", "int", "saved_points.append", "str", "int", "int", "round", "round"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open"], ["", "", "def", "merged_levels", "(", "self", ")", ":", "\n", "        ", "max_level_merged", "=", "[", "]", "\n", "count", "=", "0", ";", "\n", "\n", "#bring level points to maxlevel", "\n", "os", ".", "chdir", "(", "root", ".", "file_path", ")", "\n", "result", "=", "[", "i", "for", "i", "in", "glob", ".", "glob", "(", "'Level *[0-9].csv'", ")", "]", "\n", "for", "file", "in", "result", ":", "\n", "            ", "level", "=", "int", "(", "re", ".", "findall", "(", "r'\\d+'", ",", "file", ")", "[", "0", "]", ")", "\n", "scaling_factor", "=", "2", "**", "(", "self", ".", "max_level", "-", "level", ")", "\n", "with", "open", "(", "file", ")", "as", "csv_file", ":", "\n", "                ", "reader", "=", "csv", ".", "reader", "(", "csv_file", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "x", "=", "int", "(", "row", "[", "0", "]", ")", "*", "scaling_factor", "\n", "y", "=", "int", "(", "row", "[", "1", "]", ")", "*", "scaling_factor", "\n", "max_level_merged", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "count", "=", "count", "+", "1", "\n", "\n", "\n", "", "", "", "print", "(", "\"Count: \"", ")", "\n", "print", "(", "len", "(", "max_level_merged", ")", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ".", "file_path", ",", "'Merged_Levels'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "for", "newCSV", "in", "result", ":", "\n", "            ", "for", "level", "in", "range", "(", "9", ",", "self", ".", "max_level", ")", ":", "\n", "                ", "scaling_factor", "=", "2", "**", "(", "self", ".", "max_level", "-", "level", ")", "\n", "csv_output", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"Level \"", "+", "str", "(", "level", ")", "+", "\".csv\"", ")", ",", "\"a\"", ")", "\n", "with", "open", "(", "csv_output", ".", "name", ",", "'wb+'", ")", "as", "csv_file", ":", "\n", "                    ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "saved_points", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "max_level_merged", ":", "\n", "                        ", "saved_points", ".", "append", "(", "(", "int", "(", "round", "(", "x", "/", "scaling_factor", ")", ")", ",", "int", "(", "round", "(", "y", "/", "scaling_factor", ")", ")", ")", ")", "\n", "\n", "", "writer", ".", "writerows", "(", "saved_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.HeatMapSettingsMenu.on_button_press": [[170, 188], ["os.path.isfile", "tkinter.messagebox.showerror", "interface_heatmap.HeatMapSettingsMenu.frame.pack_forget", "openslide.open_slide", "openslide.deepzoom.DeepZoomGenerator", "interface_heatmap.HeatMapSettingsMenu.entry_file_path.get", "interface_heatmap.HeatMapSettingsMenu.entry_file_path.get", "interface_heatmap.HeatMapSettingsMenu.var.get", "modules.heatmap_generation.generate_heatmap", "interface_heatmap.HeatMapSettingsMenu.merged_levels", "modules.heatmap_generation.generate_heatmap", "print", "interface_heatmap.HeatMapSettingsMenu.gaussian_matrix_size.get", "interface_heatmap.HeatMapSettingsMenu.map.get", "os.path.join", "interface_heatmap.HeatMapSettingsMenu.gaussian_matrix_size.get", "interface_heatmap.HeatMapSettingsMenu.map.get"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.generate_heatmap", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.HeatMapSettingsMenu.merged_levels", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.generate_heatmap"], ["", "", "", "", "def", "on_button_press", "(", "self", ",", "event", ")", ":", "\n", "# Warning if source .svs not discovered", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "entry_file_path", ".", "get", "(", ")", ")", ":", "\n", "            ", "messagebox", ".", "showerror", "(", "\"Error\"", ",", "\"Cannot find file source\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "frame", ".", "pack_forget", "(", ")", "\n", "slide", "=", "open_slide", "(", "self", ".", "entry_file_path", ".", "get", "(", ")", ")", "\n", "dz_generator", "=", "DeepZoomGenerator", "(", "slide", ")", "\n", "\n", "if", "self", ".", "var", ".", "get", "(", ")", "==", "2", ":", "\n", "\n", "                ", "heatmap_generation", ".", "generate_heatmap", "(", "dz_generator", ",", "root", ".", "file_path", ",", "self", ".", "gaussian_matrix_size", ".", "get", "(", ")", ",", "self", ".", "map", ".", "get", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "merged_levels", "(", ")", "\n", "# Start main program", "\n", "heatmap_generation", ".", "generate_heatmap", "(", "dz_generator", ",", "os", ".", "path", ".", "join", "(", "root", ".", "file_path", ",", "'Merged_Levels'", ")", ",", "\n", "self", ".", "gaussian_matrix_size", ".", "get", "(", ")", ",", "self", ".", "map", ".", "get", "(", ")", ")", "\n", "print", "(", "\"DONE\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_heatmap.on_closing": [[192, 195], ["tkinter.messagebox.askokcancel", "root.destroy"], "function", ["None"], ["", "", "", "", "def", "on_closing", "(", ")", ":", "\n", "    ", "if", "messagebox", ".", "askokcancel", "(", "\"Quit\"", ",", "\"Do you really wish to quit?\"", ")", ":", "\n", "        ", "root", ".", "destroy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_recorder.FileSelection.__init__": [[12, 28], ["tkinter.Frame", "tkinter.Button", "tkinter.Button.pack", "tkinter.Button.bind", "interface_recorder.FileSelection.frame.pack", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "master", ")", ":", "\n", "\n", "        ", "self", ".", "master", "=", "master", "\n", "self", ".", "frame", "=", "tk", ".", "Frame", "(", "self", ".", "master", ")", "\n", "\n", "# select file button", "\n", "select_button", "=", "tk", ".", "Button", "(", "self", ".", "frame", ",", "text", "=", "'Select File'", ")", "\n", "select_button", ".", "pack", "(", "fill", "=", "tk", ".", "X", ")", "\n", "select_button", ".", "bind", "(", "'<Button-1>'", ",", "self", ".", "file_selection", ")", "\n", "\n", "self", ".", "frame", ".", "pack", "(", "padx", "=", "50", ",", "pady", "=", "50", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", ">=", "2", ":", "\n", "            ", "root", ".", "tiles_directory", "=", "sys", ".", "argv", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "root", ".", "tiles_directory", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_recorder.FileSelection.file_selection": [[29, 39], ["tkinter.filedialog.askopenfilename", "os.path.basename", "print", "interface_recorder.FileSelection.frame.pack_forget", "interface_recorder.LevelSelection"], "methods", ["None"], ["", "", "def", "file_selection", "(", "self", ",", "event", ")", ":", "\n", "# open the file selection menu and get the file path", "\n", "        ", "root", ".", "file_path", "=", "filedialog", ".", "askopenfilename", "(", ")", "\n", "\n", "# separate the file name from the full path", "\n", "root", ".", "file_name", "=", "os", ".", "path", ".", "basename", "(", "root", ".", "file_path", ")", "\n", "print", "(", "\"root.file_path: {}\"", ".", "format", "(", "root", ".", "file_path", ")", ")", "\n", "\n", "self", ".", "frame", ".", "pack_forget", "(", ")", "\n", "self", ".", "app", "=", "LevelSelection", "(", "self", ".", "master", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_recorder.LevelSelection.__init__": [[43, 81], ["tkinter.Frame", "tkinter.Frame.focus_force", "openslide.open_slide", "openslide.deepzoom.DeepZoomGenerator", "tkinter.ttk.Label", "tkinter.ttk.Label.pack", "tkinter.ttk.Combobox", "tkinter.ttk.Combobox.pack", "tkinter.Button", "tkinter.Button.pack", "tkinter.Button.bind", "tkinter.Frame.pack", "tkinter.Frame.pack_forget", "modules.recorder.Recorder", "int", "range", "tkinter.ttk.Combobox.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "master", ")", ":", "\n", "\n", "        ", "frame", "=", "tk", ".", "Frame", "(", "root", ")", "\n", "frame", ".", "focus_force", "(", ")", "\n", "slide", "=", "open_slide", "(", "root", ".", "file_path", ")", "\n", "dz_generator", "=", "DeepZoomGenerator", "(", "slide", ")", "\n", "\n", "select_level", "=", "ttk", ".", "Label", "(", "frame", ",", "text", "=", "\"Select Initial Level\"", ")", "\n", "select_level", ".", "pack", "(", ")", "\n", "\n", "# combo box for initial level", "\n", "selection", "=", "ttk", ".", "Combobox", "(", "\n", "frame", ",", "values", "=", "[", "i", "for", "i", "in", "range", "(", "dz_generator", ".", "level_count", ")", "]", ")", "\n", "selection", ".", "pack", "(", ")", "\n", "\n", "# confirm button", "\n", "confirm", "=", "tk", ".", "Button", "(", "frame", ",", "text", "=", "'OK'", ")", "\n", "confirm", ".", "pack", "(", ")", "\n", "\n", "\n", "def", "on_button_press", "(", "event", ")", ":", "\n", "            ", "frame", ".", "pack_forget", "(", ")", "\n", "\n", "Recorder", "(", "root", ",", "deep_zoom_object", "=", "dz_generator", ",", "level", "=", "int", "(", "selection", ".", "get", "(", ")", ")", ")", "\n", "#     print (\"Recorder\")", "\n", "\n", "# # if tiles_dirctory is provided in args, the visualiser tool is run", "\n", "# if root.tiles_directory is None:", "\n", "#     Recorder(root, deep_zoom_object=dz_generator, level=int(selection.get()))", "\n", "#     print (\"Recorder\")", "\n", "# else:", "\n", "#     Visualiser(root, deep_zoom_object=dz_generator, level=int(selection.get()))", "\n", "#     print (\"Visualiser\")", "\n", "\n", "\n", "", "confirm", ".", "bind", "(", "'<Button-1>'", ",", "on_button_press", ")", "\n", "\n", "frame", ".", "pack", "(", "padx", "=", "50", ",", "pady", "=", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_visualiser.DirectorySelection.__init__": [[13, 24], ["tkinter.Frame", "tkinter.Button", "tkinter.Button.pack", "tkinter.Button.bind", "interface_visualiser.DirectorySelection.frame.pack"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "master", ")", ":", "\n", "\n", "        ", "self", ".", "master", "=", "master", "\n", "self", ".", "frame", "=", "tk", ".", "Frame", "(", "self", ".", "master", ")", "\n", "\n", "# select file button", "\n", "select_button", "=", "tk", ".", "Button", "(", "self", ".", "frame", ",", "text", "=", "'Select Directory'", ")", "\n", "select_button", ".", "pack", "(", "fill", "=", "tk", ".", "X", ")", "\n", "select_button", ".", "bind", "(", "'<Button-1>'", ",", "self", ".", "directory_selection", ")", "\n", "\n", "self", ".", "frame", ".", "pack", "(", "padx", "=", "50", ",", "pady", "=", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_visualiser.DirectorySelection.directory_selection": [[30, 38], ["tkinter.filedialog.askdirectory", "print", "interface_visualiser.DirectorySelection.frame.pack_forget", "interface_visualiser.LevelSelection"], "methods", ["None"], ["", "def", "directory_selection", "(", "self", ",", "event", ")", ":", "\n", "# open the file selection menu and get the file path", "\n", "        ", "root", ".", "file_path", "=", "filedialog", ".", "askdirectory", "(", "title", "=", "'Please select a info.json containing directory'", ")", "\n", "print", "(", "\"root.file_path: {}\"", ".", "format", "(", "root", ".", "file_path", ")", ")", "\n", "root", ".", "tiles_directory", "=", "root", ".", "file_path", "\n", "\n", "self", ".", "frame", ".", "pack_forget", "(", ")", "\n", "self", ".", "app", "=", "LevelSelection", "(", "self", ".", "master", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.None.interface_visualiser.LevelSelection.__init__": [[42, 106], ["tkinter.Frame", "tkinter.Frame.focus_force", "tkinter.Label", "tkinter.Label.grid", "tkinter.Label", "tkinter.Label.grid", "tkinter.Entry", "tkinter.Entry.insert", "tkinter.Entry.grid", "tkinter.Button", "tkinter.Button.grid", "tkinter.ttk.Label", "tkinter.ttk.Label.grid", "tkinter.ttk.Combobox", "tkinter.ttk.Combobox.grid", "tkinter.Button", "tkinter.Button.grid", "tkinter.Button.bind", "tkinter.Button.bind", "tkinter.Frame.pack", "open", "json.load", "tkinter.filedialog.askopenfilename", "tkinter.Entry.delete", "tkinter.Entry.insert", "os.path.isfile", "tkinter.messagebox.showerror", "tkinter.Frame.pack_forget", "openslide.open_slide", "openslide.deepzoom.DeepZoomGenerator", "modules.visualiser.Visualiser", "print", "tkinter.Entry.get", "tkinter.Entry.get", "os.listdir", "os.path.isdir", "int", "os.path.join", "tkinter.ttk.Combobox.get"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open"], ["    ", "def", "__init__", "(", "self", ",", "master", ")", ":", "\n", "\n", "        ", "frame", "=", "tk", ".", "Frame", "(", "root", ")", "\n", "frame", ".", "focus_force", "(", ")", "\n", "\n", "with", "open", "(", "root", ".", "file_path", "+", "'/info.json'", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "file_path_default", "=", "data", "[", "'File_Path'", "]", "\n", "file_name", "=", "data", "[", "'File_Name'", "]", "\n", "\n", "# File path of source .svs", "\n", "", "label_file_name", "=", "tk", ".", "Label", "(", "frame", ",", "text", "=", "\"File Name: \"", "+", "file_name", ")", "\n", "label_file_name", ".", "grid", "(", "column", "=", "1", ",", "row", "=", "0", ")", "\n", "# separate the file name from the full path", "\n", "root", ".", "file_name", "=", "file_name", "\n", "\n", "label_file_source_path", "=", "tk", ".", "Label", "(", "frame", ",", "text", "=", "\"File Source: \"", ")", "\n", "label_file_source_path", ".", "grid", "(", "sticky", "=", "\"E\"", ",", "column", "=", "0", ",", "row", "=", "1", ")", "\n", "\n", "# Entry Box for File Path", "\n", "entry_file_path", "=", "tk", ".", "Entry", "(", "frame", ",", "width", "=", "85", ")", "\n", "entry_file_path", ".", "insert", "(", "0", ",", "file_path_default", ")", "\n", "entry_file_path", ".", "grid", "(", "column", "=", "1", ",", "row", "=", "1", ")", "\n", "\n", "# Browse Button", "\n", "browse", "=", "tk", ".", "Button", "(", "frame", ",", "text", "=", "'Browse'", ")", "\n", "browse", ".", "grid", "(", "sticky", "=", "\"W\"", ",", "column", "=", "2", ",", "row", "=", "1", ",", "padx", "=", "(", "5", ",", "0", ")", ")", "\n", "\n", "# Level Selection", "\n", "select_level", "=", "ttk", ".", "Label", "(", "frame", ",", "text", "=", "\"Select Initial Level: \"", ")", "\n", "select_level", ".", "grid", "(", "sticky", "=", "\"E\"", ",", "column", "=", "0", ",", "row", "=", "4", ")", "\n", "\n", "# Combo box for initial level", "\n", "selection", "=", "ttk", ".", "Combobox", "(", "\n", "frame", ",", "values", "=", "[", "level", "for", "level", "in", "os", ".", "listdir", "(", "root", ".", "file_path", "+", "'/tiles'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "root", ".", "file_path", "+", "'/tiles'", ",", "level", ")", ")", "]", ")", "\n", "selection", ".", "grid", "(", "sticky", "=", "\"W\"", ",", "column", "=", "1", ",", "row", "=", "4", ")", "\n", "\n", "# Confirm button", "\n", "confirm", "=", "tk", ".", "Button", "(", "frame", ",", "text", "=", "'OK'", ")", "\n", "confirm", ".", "grid", "(", "sticky", "=", "\"S\"", ",", "column", "=", "1", ",", "row", "=", "5", ",", "ipadx", "=", "10", ")", "\n", "\n", "def", "source_file_selection", "(", "event", ")", ":", "\n", "            ", "new_file_path", "=", "filedialog", ".", "askopenfilename", "(", ")", "\n", "if", "not", "new_file_path", "==", "\"\"", ":", "\n", "                ", "entry_file_path", ".", "delete", "(", "0", ",", "\"end\"", ")", "\n", "entry_file_path", ".", "insert", "(", "0", ",", "new_file_path", ")", "\n", "\n", "", "", "def", "on_button_press", "(", "event", ")", ":", "\n", "# Warning if source .svs not discovered", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "entry_file_path", ".", "get", "(", ")", ")", ":", "\n", "                ", "messagebox", ".", "showerror", "(", "\"Error\"", ",", "\"Cannot find file source\"", ")", "\n", "", "else", ":", "\n", "                ", "frame", ".", "pack_forget", "(", ")", "\n", "slide", "=", "open_slide", "(", "entry_file_path", ".", "get", "(", ")", ")", "\n", "dz_generator", "=", "DeepZoomGenerator", "(", "slide", ")", "\n", "\n", "# Start main program", "\n", "Visualiser", "(", "root", ",", "deep_zoom_object", "=", "dz_generator", ",", "level", "=", "int", "(", "selection", ".", "get", "(", ")", ")", ")", "\n", "print", "(", "\"Visualiser\"", ")", "\n", "\n", "", "", "browse", ".", "bind", "(", "'<ButtonRelease>'", ",", "source_file_selection", ")", "\n", "confirm", ".", "bind", "(", "'<ButtonRelease>'", ",", "on_button_press", ")", "\n", "frame", ".", "pack", "(", "padx", "=", "50", ",", "pady", "=", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.__init__": [[8, 18], ["threading.Thread.__init__", "threading.Lock", "gazepoint.GazePoint.open", "gazepoint.GazePoint.start", "gazepoint.GazePoint.wait_until_running"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.__init__", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.wait_until_running"], ["    ", "def", "__init__", "(", "self", ",", "ip", "=", "'127.0.0.1'", ",", "port", "=", "4242", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "daemon", "=", "True", "\n", "self", ".", "interrupted", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "self", ".", "gaze_position", "=", "(", "None", ",", "None", ")", "\n", "\n", "self", ".", "open", "(", "ip", ",", "port", ")", "\n", "self", ".", "start", "(", ")", "\n", "self", ".", "wait_until_running", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.get_gaze_position": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get_gaze_position", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "gaze_position", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.run": [[22, 26], ["gazepoint.GazePoint.interrupted.acquire", "gazepoint.GazePoint.interrupted.locked", "gazepoint.GazePoint.tracker.sample"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.sample"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "interrupted", ".", "acquire", "(", ")", "\n", "while", "self", ".", "interrupted", ".", "locked", "(", ")", ":", "\n", "            ", "self", ".", "gaze_position", "=", "self", ".", "tracker", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.stop": [[27, 30], ["gazepoint.GazePoint.interrupted.release", "gazepoint.GazePoint.close"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close"], ["", "", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "interrupted", ".", "release", "(", ")", "\n", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open": [[31, 36], ["print", "tools.OpenGazeTracker", "gazepoint.GazePoint.tracker.calibrate", "gazepoint.GazePoint.tracker.enable_send_data"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_data"], ["", "def", "open", "(", "self", ",", "ip", ",", "port", ")", ":", "\n", "        ", "print", "(", "'Setting Up Gaze Point device, this takes about 10 seconds'", ")", "\n", "self", ".", "tracker", "=", "OpenGazeTracker", "(", "ip", "=", "ip", ",", "port", "=", "port", ")", "\n", "self", ".", "tracker", ".", "calibrate", "(", ")", "\n", "self", ".", "tracker", ".", "enable_send_data", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.close": [[37, 41], ["print", "gazepoint.GazePoint.tracker.enable_send_data", "gazepoint.GazePoint.tracker.close"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_data", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Closing connection to Gaze Point device, this takes about 5 seconds'", ")", "\n", "self", ".", "tracker", ".", "enable_send_data", "(", "False", ")", "\n", "self", ".", "tracker", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.__del__": [[42, 44], ["gazepoint.GazePoint.close"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.__exit__": [[45, 47], ["gazepoint.GazePoint.close"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.wait_until_running": [[48, 51], ["gazepoint.GazePoint.interrupted.locked", "time.sleep"], "methods", ["None"], ["", "def", "wait_until_running", "(", "self", ",", "sleep_time", "=", "0.01", ")", ":", "\n", "        ", "while", "not", "self", ".", "interrupted", ".", "locked", "(", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "sleep_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.__init__": [[24, 124], ["socket.socket", "tools.OpenGazeTracker._sock.connect", "tools.OpenGazeTracker._sock.settimeout", "threading.Lock", "threading.Event", "tools.OpenGazeTracker._connected.set", "threading.Lock", "threading.Lock", "threading.Thread", "multiprocessing.Queue", "threading.Event", "tools.OpenGazeTracker._sock_ready_for_closing.clear", "threading.Thread", "threading.Lock", "tools.OpenGazeTracker._inthread.start", "tools.OpenGazeTracker._outthread.start", "time.sleep", "tools.OpenGazeTracker.enable_send_counter", "tools.OpenGazeTracker.enable_send_cursor", "tools.OpenGazeTracker.enable_send_eye_left", "tools.OpenGazeTracker.enable_send_eye_right", "tools.OpenGazeTracker.enable_send_pog_best", "tools.OpenGazeTracker.enable_send_pog_fix", "tools.OpenGazeTracker.enable_send_pog_left", "tools.OpenGazeTracker.enable_send_pog_right", "tools.OpenGazeTracker.enable_send_pupil_left", "tools.OpenGazeTracker.enable_send_pupil_right", "tools.OpenGazeTracker.enable_send_time", "tools.OpenGazeTracker.enable_send_time_tick", "tools.OpenGazeTracker.enable_send_user_data", "tools.OpenGazeTracker.user_data", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_counter", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_cursor", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_eye_left", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_eye_right", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pog_best", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pog_fix", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pog_left", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pog_right", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pupil_left", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pupil_right", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_time", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_time_tick", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_user_data", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.user_data"], ["    ", "def", "__init__", "(", "self", ",", "ip", "=", "'127.0.0.1'", ",", "port", "=", "4242", ")", ":", "\n", "\n", "        ", "\"\"\"The OpenGazeTracker class communicates to the GazePoint\n        server through a TCP/IP socket. Incoming samples will be written\n        to a log at the specified path.\n\n        Keyword Arguments\n\n        ip\t-\tThe IP address of the computer that is running the\n                OpenGaze server. This will usually be the localhost at\n                127.0.0.1. Type: str. Default = '127.0.0.1'\n\n        port\t-\tThe port number that the OpenGaze server is on; usually\n                this will be 4242. Type: int. Default = 4242\n        \"\"\"", "\n", "\n", "# CONNECTION", "\n", "# Save the ip and port numbers.", "\n", "self", ".", "host", "=", "ip", "\n", "self", ".", "port", "=", "port", "\n", "# Start a new TCP/IP socket. It is curcial that it has a timeout,", "\n", "# as timeout exceptions will be handled gracefully, and are in fact", "\n", "# necessary to prevent the incoming Thread from freezing.", "\n", "self", ".", "_sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "_sock", ".", "connect", "(", "(", "self", ".", "host", ",", "self", ".", "port", ")", ")", "\n", "self", ".", "_sock", ".", "settimeout", "(", "1.0", ")", "\n", "self", ".", "_maxrecvsize", "=", "4096", "\n", "# Create a socket Lock to prevent simultaneous access.", "\n", "self", ".", "_socklock", "=", "Lock", "(", ")", "\n", "# Create an event that should remain set until the connection is", "\n", "# closed. (This is what keeps the Threads running.)", "\n", "self", ".", "_connected", "=", "Event", "(", ")", "\n", "self", ".", "_connected", ".", "set", "(", ")", "\n", "# Set the current calibration point.", "\n", "self", ".", "_current_calibration_point", "=", "None", "\n", "\n", "# INCOMING", "\n", "# Start a new dict for the latest incoming messages, and for", "\n", "# incoming acknowledgements.", "\n", "self", ".", "_incoming", "=", "{", "}", "\n", "self", ".", "_acknowledgements", "=", "{", "}", "\n", "# Create a Lock for the incoming message and acknowledgement dicts.", "\n", "self", ".", "_inlock", "=", "Lock", "(", ")", "\n", "self", ".", "_acklock", "=", "Lock", "(", ")", "\n", "# Create an empty string for the current unfinished message. This", "\n", "# is to prevent half a message being parsed when it is cut off", "\n", "# between two 'self._sock.recv' calls.", "\n", "self", ".", "_unfinished", "=", "''", "\n", "# Start a new Thread that processes the incoming messages.", "\n", "self", ".", "_inthread", "=", "Thread", "(", "\n", "target", "=", "self", ".", "_process_incoming", ",", "\n", "name", "=", "'PyGaze_OpenGazeConnection_incoming'", ",", "\n", "args", "=", "[", "]", ")", "\n", "\n", "# OUTGOING", "\n", "# Start a new outgoing Queue (Thread safe, woop!).", "\n", "self", ".", "_outqueue", "=", "Queue", "(", ")", "\n", "# Set an event that is set when all queued outgoing messages have", "\n", "# been processed.", "\n", "self", ".", "_sock_ready_for_closing", "=", "Event", "(", ")", "\n", "self", ".", "_sock_ready_for_closing", ".", "clear", "(", ")", "\n", "# Create a new Thread that processes the outgoing queue.", "\n", "self", ".", "_outthread", "=", "Thread", "(", "\n", "target", "=", "self", ".", "_process_outgoing", ",", "\n", "name", "=", "'PyGaze_OpenGazeConnection_outgoing'", ",", "\n", "args", "=", "[", "]", ")", "\n", "# Create a dict that will keep track of at what time which command", "\n", "# was sent.", "\n", "self", ".", "_outlatest", "=", "{", "}", "\n", "# Create a Lock to prevent simultaneous access to the outlatest", "\n", "# dict.", "\n", "self", ".", "_outlock", "=", "Lock", "(", ")", "\n", "\n", "# RUN THREADS", "\n", "# Set a signal that will kill all Threads when they receive it.", "\n", "self", ".", "_thread_shutdown_signal", "=", "'KILL_ALL_HUMANS'", "\n", "# Start the threads.", "\n", "self", ".", "_inthread", ".", "start", "(", ")", "\n", "self", ".", "_outthread", ".", "start", "(", ")", "\n", "\n", "# SET UP LOGGING", "\n", "# Wait for a bit to allow the Threads to start.", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "# Enable the tracker to send ALL the things.", "\n", "self", ".", "enable_send_counter", "(", "True", ")", "\n", "self", ".", "enable_send_cursor", "(", "True", ")", "\n", "self", ".", "enable_send_eye_left", "(", "True", ")", "\n", "self", ".", "enable_send_eye_right", "(", "True", ")", "\n", "self", ".", "enable_send_pog_best", "(", "True", ")", "\n", "self", ".", "enable_send_pog_fix", "(", "True", ")", "\n", "self", ".", "enable_send_pog_left", "(", "True", ")", "\n", "self", ".", "enable_send_pog_right", "(", "True", ")", "\n", "self", ".", "enable_send_pupil_left", "(", "True", ")", "\n", "self", ".", "enable_send_pupil_right", "(", "True", ")", "\n", "self", ".", "enable_send_time", "(", "True", ")", "\n", "self", ".", "enable_send_time_tick", "(", "True", ")", "\n", "self", ".", "enable_send_user_data", "(", "True", ")", "\n", "# Reset the user-defined variable.", "\n", "self", ".", "user_data", "(", "\"0\"", ")", "\n", "time", ".", "sleep", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate": [[125, 145], ["tools.OpenGazeTracker.clear_calibration_result", "tools.OpenGazeTracker.calibrate_show", "tools.OpenGazeTracker.calibrate_start", "tools.OpenGazeTracker.calibrate_show", "tools.OpenGazeTracker.get_calibration_result", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.clear_calibration_result", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_show", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_start", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_show", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_calibration_result"], ["", "def", "calibrate", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Calibrates the eye tracker.\n        \"\"\"", "\n", "\n", "# Reset the calibration.", "\n", "self", ".", "clear_calibration_result", "(", ")", "\n", "# Show the calibration screen.", "\n", "self", ".", "calibrate_show", "(", "True", ")", "\n", "# Start the calibration.", "\n", "self", ".", "calibrate_start", "(", "True", ")", "\n", "# Wait for the calibration result.", "\n", "result", "=", "None", "\n", "while", "result", "is", "None", ":", "\n", "            ", "result", "=", "self", ".", "get_calibration_result", "(", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "# Hide the calibration window.", "\n", "", "self", ".", "calibrate_show", "(", "False", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.sample": [[146, 167], ["tools.OpenGazeTracker._inlock.acquire", "tools.OpenGazeTracker._inlock.release", "tools.OpenGazeTracker._incoming.keys", "tools.OpenGazeTracker._incoming[].keys", "float", "float", "[].keys", "[].keys"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "\n", "# If there is no current record yet, return None.", "\n", "        ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "if", "'REC'", "not", "in", "self", ".", "_incoming", ".", "keys", "(", ")", ":", "\n", "            ", "x", "=", "None", "\n", "y", "=", "None", "\n", "", "elif", "'NO_ID'", "not", "in", "self", ".", "_incoming", "[", "'REC'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "x", "=", "None", "\n", "y", "=", "None", "\n", "", "elif", "(", "'BPOGX'", "not", "in", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", ".", "keys", "(", ")", "or", "\n", "'BPOGY'", "not", "in", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", ".", "keys", "(", ")", ")", ":", "\n", "            ", "x", "=", "None", "\n", "y", "=", "None", "\n", "", "else", ":", "\n", "            ", "x", "=", "float", "(", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", "[", "'BPOGX'", "]", ")", "\n", "y", "=", "float", "(", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", "[", "'BPOGY'", "]", ")", "\n", "", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "# Return the (x,y) coordinate.", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.pupil_size": [[168, 201], ["tools.OpenGazeTracker._inlock.acquire", "tools.OpenGazeTracker._inlock.release", "tools.OpenGazeTracker._incoming.keys", "str", "float", "str", "float", "tools.OpenGazeTracker._incoming[].keys", "float", "[].keys", "[].keys", "[].keys", "[].keys"], "methods", ["None"], ["", "def", "pupil_size", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Return the current pupil size.\n        \"\"\"", "\n", "\n", "# If there is no current record yet, return None.", "\n", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "if", "'REC'", "not", "in", "self", ".", "_incoming", ".", "keys", "(", ")", ":", "\n", "            ", "psize", "=", "None", "\n", "", "elif", "'NO_ID'", "not", "in", "self", ".", "_incoming", "[", "'REC'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "psize", "=", "None", "\n", "", "elif", "(", "'LPV'", "not", "in", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", ".", "keys", "(", ")", "or", "\n", "'LPS'", "not", "in", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", ".", "keys", "(", ")", "or", "\n", "'RPV'", "not", "in", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", ".", "keys", "(", ")", "or", "\n", "'RPS'", "not", "in", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", ".", "keys", "(", ")", ")", ":", "\n", "            ", "psize", "=", "None", "\n", "\n", "# Compute the pupil size, and return it if there is valid data.", "\n", "", "n", "=", "0", "\n", "psize", "=", "0", "\n", "if", "str", "(", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", "[", "'LPV'", "]", ")", "==", "'1'", ":", "\n", "            ", "psize", "+=", "float", "(", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", "[", "'LPS'", "]", ")", "\n", "n", "+=", "1", "\n", "", "if", "str", "(", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", "[", "'RPV'", "]", ")", "==", "'1'", ":", "\n", "            ", "psize", "+=", "float", "(", "self", ".", "_incoming", "[", "'REC'", "]", "[", "'NO_ID'", "]", "[", "'RPS'", "]", ")", "\n", "n", "+=", "1", "\n", "", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "if", "n", "==", "0", ":", "\n", "            ", "psize", "=", "None", "\n", "", "else", ":", "\n", "            ", "psize", "=", "psize", "/", "float", "(", "n", ")", "\n", "\n", "", "return", "psize", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.start_recording": [[202, 208], ["tools.OpenGazeTracker.enable_send_data"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_data"], ["", "def", "start_recording", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Start writing data to the log file.\n        \"\"\"", "\n", "\n", "self", ".", "enable_send_data", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.stop_recording": [[209, 215], ["tools.OpenGazeTracker.enable_send_data"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_data"], ["", "def", "stop_recording", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Pause writing data to the log file.\n        \"\"\"", "\n", "\n", "self", ".", "enable_send_data", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._format_msg": [[216, 228], ["command.upper", "ID.upper", "par.upper"], "methods", ["None"], ["", "def", "_format_msg", "(", "self", ",", "command", ",", "ID", ",", "values", "=", "None", ")", ":", "\n", "\n", "# Create the start of the formatted string.", "\n", "        ", "xml", "=", "'<%s ID=\"%s\" '", "%", "(", "command", ".", "upper", "(", ")", ",", "ID", ".", "upper", "(", ")", ")", "\n", "# Add the values for each parameter.", "\n", "if", "values", ":", "\n", "            ", "for", "par", ",", "val", "in", "values", ":", "\n", "                ", "xml", "+=", "'%s=\"%s\" '", "%", "(", "par", ".", "upper", "(", ")", ",", "val", ")", "\n", "# Add the ending.", "\n", "", "", "xml", "+=", "'/>\\r\\n'", "\n", "\n", "return", "xml", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._parse_msg": [[229, 236], ["lxml.etree.fromstring"], "methods", ["None"], ["", "def", "_parse_msg", "(", "self", ",", "xml", ")", ":", "\n", "\n", "# print xml", "\n", "\n", "        ", "e", "=", "lxml", ".", "etree", ".", "fromstring", "(", "xml", ")", "\n", "\n", "return", "(", "e", ".", "tag", ",", "e", ".", "attrib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._process_incoming": [[237, 310], ["tools.OpenGazeTracker._connected.is_set", "tools.OpenGazeTracker._socklock.acquire", "time.time", "tools.OpenGazeTracker._socklock.release", "tools.OpenGazeTracker.split", "tools.OpenGazeTracker._sock.recv", "tools.OpenGazeTracker.split.pop", "copy.copy", "tools.OpenGazeTracker._parse_msg", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "msgdict.items", "tools.OpenGazeTracker._inlock.release", "tools.OpenGazeTracker._acklock.acquire", "copy.copy", "tools.OpenGazeTracker._acklock.release", "tools.OpenGazeTracker._incoming.keys", "msgdict.keys", "tools.OpenGazeTracker._incoming[].keys", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._parse_msg"], ["", "def", "_process_incoming", "(", "self", ")", ":", "\n", "\n", "        ", "while", "self", ".", "_connected", ".", "is_set", "(", ")", ":", "\n", "\n", "# Lock the socket to prevent other Threads from simultaneously", "\n", "# accessing it.", "\n", "            ", "self", ".", "_socklock", ".", "acquire", "(", ")", "\n", "# Get new messages from the OpenGaze Server.", "\n", "timeout", "=", "False", "\n", "try", ":", "\n", "                ", "instring", "=", "self", ".", "_sock", ".", "recv", "(", "self", ".", "_maxrecvsize", ")", "\n", "", "except", "socket", ".", "timeout", ":", "\n", "                ", "timeout", "=", "True", "\n", "# Get a received timestamp.", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "# Unlock the socket again.", "\n", "self", ".", "_socklock", ".", "release", "(", ")", "\n", "\n", "# Skip further processing if no new message came in.", "\n", "if", "timeout", ":", "\n", "                ", "continue", "\n", "\n", "# Split the messages (they are separated by '\\r\\n').", "\n", "", "messages", "=", "instring", ".", "split", "(", "b'\\r\\n'", ")", "\n", "\n", "# Check if there is currently an unfinished message.", "\n", "if", "self", ".", "_unfinished", ":", "\n", "# Combine the currently unfinished message and the", "\n", "# most recent incoming message.", "\n", "                ", "messages", "[", "0", "]", "=", "copy", ".", "copy", "(", "self", ".", "_unfinished", ")", "+", "messages", "[", "0", "]", "\n", "# Reset the unfinished message.", "\n", "self", ".", "_unfinished", "=", "''", "\n", "# Check if the last message was actually complete.", "\n", "", "if", "not", "messages", "[", "-", "1", "]", "[", "-", "2", ":", "]", "==", "'/>'", ":", "\n", "                ", "self", ".", "_unfinished", "=", "messages", ".", "pop", "(", "-", "1", ")", "\n", "\n", "# Run through all messages.", "\n", "", "for", "msg", "in", "messages", ":", "\n", "                ", "try", ":", "\n", "# Parse the message.", "\n", "                    ", "command", ",", "msgdict", "=", "self", ".", "_parse_msg", "(", "msg", ")", "\n", "# Check if the incoming message is an acknowledgement.", "\n", "# Acknowledgements are also stored in a different dict,", "\n", "# which is used to monitor whether sent messages are", "\n", "# properly received.", "\n", "if", "command", "==", "'ACK'", ":", "\n", "                        ", "self", ".", "_acklock", ".", "acquire", "(", ")", "\n", "self", ".", "_acknowledgements", "[", "msgdict", "[", "'ID'", "]", "]", "=", "copy", ".", "copy", "(", "t", ")", "\n", "self", ".", "_acklock", ".", "release", "(", ")", "\n", "# Acquire the Lock for the incoming dict, so that it", "\n", "# won't be accessed at the same time.", "\n", "", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "# Check if this command is already in the current dict.", "\n", "if", "command", "not", "in", "self", ".", "_incoming", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "_incoming", "[", "command", "]", "=", "{", "}", "\n", "# Some messages have no ID, for example 'REC' messages.", "\n", "# We simply assign 'NO_ID' as the ID.", "\n", "", "if", "'ID'", "not", "in", "msgdict", ".", "keys", "(", ")", ":", "\n", "                        ", "msgdict", "[", "'ID'", "]", "=", "'NO_ID'", "\n", "# Check if this ID is already in the current dict.", "\n", "", "if", "msgdict", "[", "'ID'", "]", "not", "in", "self", ".", "_incoming", "[", "command", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "_incoming", "[", "command", "]", "[", "msgdict", "[", "'ID'", "]", "]", "=", "{", "}", "\n", "# Add receiving time stamp, and the values for each", "\n", "# parameter to the current dict.", "\n", "", "self", ".", "_incoming", "[", "command", "]", "[", "msgdict", "[", "'ID'", "]", "]", "[", "'t'", "]", "=", "copy", ".", "copy", "(", "t", ")", "\n", "for", "par", ",", "val", "in", "msgdict", ".", "items", "(", ")", ":", "\n", "                        ", "self", ".", "_incoming", "[", "command", "]", "[", "msgdict", "[", "'ID'", "]", "]", "[", "par", "]", "=", "copy", ".", "copy", "(", "val", ")", "\n", "# Unlock the incoming dict again.", "\n", "", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._process_outgoing": [[311, 340], ["tools.OpenGazeTracker._sock_ready_for_closing.is_set", "tools.OpenGazeTracker._outqueue.get", "tools.OpenGazeTracker._socklock.acquire", "time.time", "tools.OpenGazeTracker._sock.send", "tools.OpenGazeTracker._socklock.release", "tools.OpenGazeTracker._outlock.acquire", "copy.copy", "tools.OpenGazeTracker._outlock.release", "tools.OpenGazeTracker._sock_ready_for_closing.set", "tools.OpenGazeTracker.encode"], "methods", ["None"], ["", "def", "_process_outgoing", "(", "self", ")", ":", "\n", "        ", "while", "not", "self", ".", "_sock_ready_for_closing", ".", "is_set", "(", ")", ":", "\n", "\n", "# Get a new command from the Queue.", "\n", "            ", "msg", "=", "self", ".", "_outqueue", ".", "get", "(", ")", "\n", "\n", "# Check if this is the shutdown signal.", "\n", "if", "msg", "==", "self", ".", "_thread_shutdown_signal", ":", "\n", "# Signal that we're done processing all the outgoing", "\n", "# messages.", "\n", "                ", "self", ".", "_sock_ready_for_closing", ".", "set", "(", ")", "\n", "# Break the while loop.", "\n", "break", "\n", "\n", "# Lock the socket to prevent other Threads from simultaneously", "\n", "# accessing it.", "\n", "", "self", ".", "_socklock", ".", "acquire", "(", ")", "\n", "# Send the command to the OpenGaze Server.", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_sock", ".", "send", "(", "msg", ".", "encode", "(", ")", ")", "\n", "# Unlock the socket again.", "\n", "self", ".", "_socklock", ".", "release", "(", ")", "\n", "\n", "# Store a timestamp for the latest outgoing message.", "\n", "self", ".", "_outlock", ".", "acquire", "(", ")", "\n", "self", ".", "_outlatest", "[", "msg", "]", "=", "copy", ".", "copy", "(", "t", ")", "\n", "self", ".", "_outlock", ".", "release", "(", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message": [[341, 394], ["tools.OpenGazeTracker._format_msg", "time.time", "tools.OpenGazeTracker._outqueue.put", "time.time", "tools.OpenGazeTracker._outlock.acquire", "tools.OpenGazeTracker._outlock.release", "time.sleep", "tools.OpenGazeTracker._acklock.acquire", "tools.OpenGazeTracker._acklock.release", "time.sleep", "time.time", "tools.OpenGazeTracker._outlatest.keys", "copy.copy", "tools.OpenGazeTracker._acknowledgements.keys", "time.time"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._format_msg"], ["", "def", "_send_message", "(", "self", ",", "command", ",", "ID", ",", "values", "=", "None", ",", "\n", "wait_for_acknowledgement", "=", "True", ",", "resend_timeout", "=", "3.0", ",", "maxwait", "=", "9.0", ")", ":", "\n", "\n", "# Format a message in an XML format that the Open Gaze API needs.", "\n", "        ", "msg", "=", "self", ".", "_format_msg", "(", "command", ",", "ID", ",", "values", "=", "values", ")", "\n", "\n", "# Run until the message is acknowledged or a timeout occurs (or", "\n", "# break if we're not supposed to wait for an acknowledgement.)", "\n", "timeout", "=", "False", "\n", "acknowledged", "=", "False", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "while", "(", "not", "acknowledged", ")", "and", "(", "not", "timeout", ")", ":", "\n", "\n", "# Add the command to the outgoing Queue.", "\n", "            ", "self", ".", "_outqueue", ".", "put", "(", "msg", ")", "\n", "\n", "# Wait until an acknowledgement comes in.", "\n", "if", "wait_for_acknowledgement", ":", "\n", "                ", "sent", "=", "False", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "while", "(", "time", ".", "time", "(", ")", "-", "t1", "<", "resend_timeout", ")", "and", "(", "not", "acknowledged", ")", ":", "\n", "# Check the outgoing queue for the sent message to appear.", "\n", "                    ", "if", "not", "sent", ":", "\n", "                        ", "self", ".", "_outlock", ".", "acquire", "(", ")", "\n", "if", "msg", "in", "self", ".", "_outlatest", ".", "keys", "(", ")", ":", "\n", "                            ", "t", "=", "copy", ".", "copy", "(", "self", ".", "_outlatest", "[", "msg", "]", ")", "\n", "sent", "=", "True", "\n", "", "self", ".", "_outlock", ".", "release", "(", ")", "\n", "time", ".", "sleep", "(", "0.001", ")", "\n", "\n", "# Check the incoming queue for the expected", "\n", "# acknowledgement. (NOTE: This does not check", "\n", "# whether the values of the incoming acknowlement", "\n", "# match the sent message. Ideally, they should.)", "\n", "", "else", ":", "\n", "                        ", "self", ".", "_acklock", ".", "acquire", "(", ")", "\n", "if", "ID", "in", "self", ".", "_acknowledgements", ".", "keys", "(", ")", ":", "\n", "                            ", "if", "self", ".", "_acknowledgements", "[", "ID", "]", ">=", "t", ":", "\n", "                                ", "acknowledged", "=", "True", "\n", "", "", "self", ".", "_acklock", ".", "release", "(", ")", "\n", "time", ".", "sleep", "(", "0.001", ")", "\n", "\n", "# Check if there is a timeout.", "\n", "", "if", "(", "not", "acknowledged", ")", "and", "(", "time", ".", "time", "(", ")", "-", "t0", ">", "maxwait", ")", ":", "\n", "                        ", "timeout", "=", "True", "\n", "break", "\n", "\n", "# If we're not supposed to wait for an acknowledgement, break", "\n", "# the while loop.", "\n", "", "", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "acknowledged", ",", "timeout", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close": [[395, 419], ["tools.OpenGazeTracker.user_data", "tools.OpenGazeTracker._connected.clear", "tools.OpenGazeTracker._outqueue.put", "tools.OpenGazeTracker._sock_ready_for_closing.wait", "tools.OpenGazeTracker._sock.close", "tools.OpenGazeTracker._outthread.join", "tools.OpenGazeTracker._inthread.join"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.user_data", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Closes the connection to the tracker, closes the log files, and\n        ends the Threads that process the incoming and outgoing messages,\n        and the logging of samples.\n        \"\"\"", "\n", "\n", "# Reset the user-defined value.", "\n", "self", ".", "user_data", "(", "'0'", ")", "\n", "\n", "# Unset the self._connected event to stop the incoming Thread.", "\n", "self", ".", "_connected", ".", "clear", "(", ")", "\n", "\n", "# Queue the stop signal to stop the outgoing and logging Threads.", "\n", "self", ".", "_outqueue", ".", "put", "(", "self", ".", "_thread_shutdown_signal", ")", "\n", "\n", "# Wait for the outgoing Queue to be fully processed.", "\n", "self", ".", "_sock_ready_for_closing", ".", "wait", "(", ")", "\n", "\n", "# Close the socket connection to the OpenGaze server.", "\n", "self", ".", "_sock", ".", "close", "(", ")", "\n", "\n", "# Join the Threads.", "\n", "self", ".", "_outthread", ".", "join", "(", ")", "\n", "self", ".", "_inthread", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_data": [[420, 431], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_data", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Start (state=True) or stop (state=False) the streaming of data\n        from the server to the client.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_DATA'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_counter": [[432, 443], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_counter", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        the send counter in the data record string.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_COUNTER'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_time": [[444, 455], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_time", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        the send time in the data record string.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_TIME'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_time_tick": [[456, 467], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_time_tick", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        the send time tick in the data record string.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_TIME_TICK'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pog_fix": [[468, 480], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_pog_fix", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        the point of gaze as determined by the tracker's fixation filter in\n        the data record string.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_POG_FIX'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pog_left": [[481, 492], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_pog_left", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        the point of gaze of the left eye in the data record string.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_POG_LEFT'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pog_right": [[493, 504], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_pog_right", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        the point of gaze of the right eye in the data record string.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_POG_RIGHT'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pog_best": [[505, 518], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_pog_best", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        the 'best' point of gaze in the data record string. This is based\n        on the average of the left and right POG if both eyes are available,\n        or on the value of the one available eye.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_POG_BEST'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pupil_left": [[519, 542], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_pupil_left", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        pupil data on the left eye in the data record string. This data\n        consists of the following:\n        LPCX: The horizontal coordinate of the left eye pupil in the camera\n            image, as a fraction of the camera size.\n        LPCY: The vertical coordinate of the left eye pupil in the camera\n            image, as a fraction of the camera size.\n        LPD:  The left eye pupil's diameter in pixels.\n        LPS:  The scale factor of the left eye pupil (unitless). Value\n            equals 1 at calibration depth, is less than 1 when the user\n            is closer to the eye tracker and greater than 1 when the user\n            is further away.\n        LPV:  The valid flag with a value of 1 if the data is valid, and 0\n            if it is not.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_PUPIL_LEFT'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_pupil_right": [[543, 566], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_pupil_right", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        pupil data on the right eye in the data record string. This data\n        consists of the following:\n        RPCX: The horizontal coordinate of the right eye pupil in the camera\n            image, as a fraction of the camera size.\n        RPCY: The vertical coordinate of the right eye pupil in the camera\n            image, as a fraction of the camera size.\n        RPD:  The right eye pupil's diameter in pixels.\n        RPS:  The scale factor of the right eye pupil (unitless). Value\n            equals 1 at calibration depth, is less than 1 when the user\n            is closer to the eye tracker and greater than 1 when the user\n            is further away.\n        RPV:  The valid flag with a value of 1 if the data is valid, and 0\n            if it is not.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_PUPIL_RIGHT'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_eye_left": [[567, 588], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_eye_left", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        3D data on left eye in the data record string. This data consists\n        of the following:\n        LEYEX:   The horizontal coordinate of the left eye in 3D space with\n               respect to the camera focal point, in meters.\n        LEYEY:   The vertical coordinate of the left eye in 3D space with\n               respect to the camera focal point, in meters.\n        LEYEZ:   The depth coordinate of the left eye in 3D space with\n               respect to the camera focal point, in meters.\n        LPUPILD: The diameter of the left eye pupil in meters.\n        LPUPILV: The valid flag with a value of 1 if the data is valid, and\n               0 if it is not.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_EYE_LEFT'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_eye_right": [[589, 610], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_eye_right", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        3D data on right eye in the data record string. This data consists\n        of the following:\n        REYEX:   The horizontal coordinate of the right eye in 3D space with\n               respect to the camera focal point, in meters.\n        REYEY:   The vertical coordinate of the right eye in 3D space with\n               respect to the camera focal point, in meters.\n        REYEZ:   The depth coordinate of the right eye in 3D space with\n               respect to the camera focal point, in meters.\n        RPUPILD: The diameter of the right eye pupil in meters.\n        RPUPILV: The valid flag with a value of 1 if the data is valid, and\n               0 if it is not.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_EYE_RIGHT'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_cursor": [[611, 629], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_cursor", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        data on the mouse cursor in the data record string. This data\n        consists of the following:\n        CX:   The horizontal coordinate of the mouse cursor, as a percentage\n            of the screen resolution.\n        CY:   The vertical coordinate of the mouse cursor, as a percentage\n            of the screen resolution.\n        CS:   The mouse cursor state, 0 for steady state, 1 for left button\n            down, 2 for rigght button down.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_CURSOR'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.enable_send_user_data": [[630, 642], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "enable_send_user_data", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Enable (state=True) or disable (state=False) the inclusion of\n        user-defined variables in the data record string. User-defined\n        variables can be set with the 'user_data' method.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'ENABLE_SEND_USER_DATA'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_start": [[643, 662], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "calibrate_start", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Starts (state=1) or stops (state=0) the calibration procedure.\n        Make sure to call the 'calibrate_show' function beforehand, or to\n        implement your own calibration visualisation; otherwise a call to\n        this function will make the calibration run in the background.\n        \"\"\"", "\n", "\n", "# Reset the current calibration point.", "\n", "if", "state", ":", "\n", "            ", "self", ".", "_current_calibration_point", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "_current_calibration_point", "=", "None", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'CALIBRATE_START'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_show": [[663, 675], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "calibrate_show", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Shows (state=1) or hides (state=0) the calibration window on the\n        tracker's display window. While showing the calibration window, you\n        can call 'calibrate_start' to run the calibration procedure.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'CALIBRATE_SHOW'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_timeout": [[676, 687], ["tools.OpenGazeTracker._send_message", "float"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "calibrate_timeout", "(", "self", ",", "value", ")", ":", "\n", "\n", "        ", "\"\"\"Set the duration of the calibration point (not including the\n        animation time) in seconds. The value can be an int or a float.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'CALIBRATE_TIMEOUT'", ",", "values", "=", "[", "(", "'VALUE'", ",", "float", "(", "value", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_delay": [[688, 700], ["tools.OpenGazeTracker._send_message", "float"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "calibrate_delay", "(", "self", ",", "value", ")", ":", "\n", "\n", "        ", "\"\"\"Set the duration of the calibration animation (before\n        calibration at a point begins) in seconds. The value can be an int\n        or a float.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'CALIBRATE_DELAY'", ",", "values", "=", "[", "(", "'VALUE'", ",", "float", "(", "value", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_result_summary": [[701, 724], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "copy.copy", "tools.OpenGazeTracker._inlock.release"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "calibrate_result_summary", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns a summary of the calibration results, which consists of\n        the following values:\n        AVE_ERROR:    Average error over all calibrated points.\n        VALID_POINTS: Number of successfully calibrated points.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'CALIBRATE_RESULT_SUMMARY'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the results.", "\n", "ave_error", "=", "None", "\n", "valid_points", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "ave_error", "=", "copy", ".", "copy", "(", "\n", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'CALIBRATE_RESULT_SUMMARY'", "]", "[", "'AVE_ERROR'", "]", ")", "\n", "valid_points", "=", "copy", ".", "copy", "(", "\n", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'CALIBRATE_RESULT_SUMMARY'", "]", "[", "'VALID_POINTS'", "]", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "ave_error", ",", "valid_points", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_clear": [[725, 735], ["tools.OpenGazeTracker._send_message"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "calibrate_clear", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Clear the internal list of calibration points.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'CALIBRATE_CLEAR'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_reset": [[736, 747], ["tools.OpenGazeTracker._send_message"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "calibrate_reset", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Reset the internal list of calibration points to the default\n        values.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'CALIBRATE_RESET'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.calibrate_addpoint": [[748, 761], ["tools.OpenGazeTracker._send_message"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "calibrate_addpoint", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "\"\"\"Add a calibration point at the passed horizontal (x) and\n        vertical (y) coordinates. These coordinates should be as a\n        proportion of the screen resolution, where (0,0) is the top-left,\n        (0.5,0.5) is the screen centre, and (1,1) is the bottom-right.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'CALIBRATE_ADDPOINT'", ",", "values", "=", "[", "(", "'X'", ",", "x", ")", ",", "(", "'Y'", ",", "y", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_calibration_points": [[762, 785], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "range", "tools.OpenGazeTracker._inlock.release", "points.append", "copy.copy", "copy.copy", "float", "float"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "get_calibration_points", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns a list of the current calibration points.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'CALIBRATE_ADDPOINT'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the result.", "\n", "points", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "points", "=", "[", "]", "\n", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'CALIBRATE_ADDPOINT'", "]", "[", "'PTS'", "]", ")", ":", "\n", "                ", "points", ".", "append", "(", "\n", "copy", ".", "copy", "(", "float", "(", "\n", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'CALIBRATE_ADDPOINT'", "]", "[", "'X%d'", "%", "i", "+", "1", "]", ")", ")", ",", "\n", "copy", ".", "copy", "(", "float", "(", "\n", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'CALIBRATE_ADDPOINT'", "]", "[", "'Y%d'", "%", "i", "+", "1", "]", ")", ")", "\n", ")", "\n", "", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.clear_calibration_result": [[786, 797], ["tools.OpenGazeTracker._inlock.acquire", "tools.OpenGazeTracker._inlock.release", "tools.OpenGazeTracker._incoming.keys", "tools.OpenGazeTracker._incoming[].keys", "tools.OpenGazeTracker._incoming[].pop"], "methods", ["None"], ["", "def", "clear_calibration_result", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Clears the internally stored calibration result.\n        \"\"\"", "\n", "\n", "# Clear the calibration results.", "\n", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "if", "'CAL'", "in", "self", ".", "_incoming", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'CALIB_RESULT'", "in", "self", ".", "_incoming", "[", "'CAL'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "_incoming", "[", "'CAL'", "]", ".", "pop", "(", "'CALIB_RESULT'", ")", "\n", "", "", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_calibration_result": [[798, 844], ["tools.OpenGazeTracker._inlock.acquire", "tools.OpenGazeTracker._inlock.release", "tools.OpenGazeTracker._incoming.keys", "tools.OpenGazeTracker._incoming[].keys", "copy.deepcopy", "range", "len", "points.append", "len", "copy.deepcopy", "copy.deepcopy.keys", "float"], "methods", ["None"], ["", "def", "get_calibration_result", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the latest available calibration results as a list of\n        dicts, each with the following keys:\n        CALX: Calibration point's horizontal coordinate.\n        CALY: Calibration point's vertical coordinate\n        LX:   Left eye's recorded horizontal point of gaze.\n        LY:   Left eye's recorded vertical point of gaze.\n        LV:   Left eye's validity status (1=valid, 0=invalid)\n        RX:   Right eye's recorded horizontal point of gaze.\n        RY:   Right eye's recorded vertical point of gaze.\n        RV:   Right eye's validity status (1=valid, 0=invalid)\n\n        Returns None if no calibration results are available.\n        \"\"\"", "\n", "\n", "# Parameters of the 'CALIB_RESULT' dict.", "\n", "params", "=", "[", "'CALX'", ",", "'CALY'", ",", "'LX'", ",", "'LY'", ",", "'LV'", ",", "'RX'", ",", "'RY'", ",", "'RV'", "]", "\n", "\n", "# Return the result.", "\n", "points", "=", "None", "\n", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "if", "'CAL'", "in", "self", ".", "_incoming", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'CALIB_RESULT'", "in", "self", ".", "_incoming", "[", "'CAL'", "]", ".", "keys", "(", ")", ":", "\n", "# Get the latest calibration results.", "\n", "                ", "cal", "=", "copy", ".", "deepcopy", "(", "self", ".", "_incoming", "[", "'CAL'", "]", "[", "'CALIB_RESULT'", "]", ")", "\n", "# Compute the number of fixation points by dividing the", "\n", "# total number of parameters in the 'CALIB_RESULT' dict", "\n", "# by 8 (the number of parameters per point). Note that", "\n", "# the 'CALIB_RESULT' dict also has an 'ID' parameter,", "\n", "# which we should account for by subtracting 1 from the", "\n", "# length of the list of keys in the dict.", "\n", "n_points", "=", "(", "len", "(", "cal", ".", "keys", "(", ")", ")", "-", "1", ")", "//", "len", "(", "params", ")", "\n", "# Put the results in a different format.", "\n", "points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "n_points", "+", "1", ")", ":", "\n", "                    ", "p", "=", "{", "}", "\n", "for", "par", "in", "params", ":", "\n", "                        ", "if", "par", "in", "[", "'LV'", ",", "'RV'", "]", ":", "\n", "                            ", "p", "[", "'%s'", "%", "(", "par", ")", "]", "=", "cal", "[", "'%s%d'", "%", "(", "par", ",", "i", ")", "]", "==", "'1'", "\n", "", "else", ":", "\n", "                            ", "p", "[", "'%s'", "%", "(", "par", ")", "]", "=", "float", "(", "cal", "[", "'%s%d'", "%", "(", "par", ",", "i", ")", "]", ")", "\n", "", "", "points", ".", "append", "(", "copy", ".", "deepcopy", "(", "p", ")", ")", "\n", "", "", "", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.wait_for_calibration_point_start": [[845, 915], ["time.time", "tools.OpenGazeTracker._inlock.acquire", "tools.OpenGazeTracker._inlock.release", "tools.OpenGazeTracker._inlock.acquire", "tools.OpenGazeTracker._inlock.release", "tools.OpenGazeTracker._incoming.keys", "time.sleep", "tools.OpenGazeTracker._incoming.keys", "tools.OpenGazeTracker._inlock.acquire", "int", "float", "float", "tools.OpenGazeTracker._inlock.release", "time.sleep", "time.time", "tools.OpenGazeTracker._incoming[].keys", "copy.copy", "tools.OpenGazeTracker._incoming[].keys", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "time.time"], "methods", ["None"], ["", "def", "wait_for_calibration_point_start", "(", "self", ",", "timeout", "=", "10.0", ")", ":", "\n", "\n", "        ", "\"\"\"Waits for the next calibration point start, which is defined as\n        the first unregistered point after the latest calibration start\n        message. This function allows for setting a timeout in seconds\n        (default = 10.0). Returns the (x,y) coordinate in relative\n        coordinates (proportions of the screen width and height) if the\n        point started, and None after a timeout. (Also updates the\n        internally stored latest registered calibration point number.)\n        \"\"\"", "\n", "\n", "# Get the start time of this function.", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Get the most recent calibration start time.", "\n", "t0", "=", "None", "\n", "while", "(", "t0", "is", "None", ")", "and", "(", "time", ".", "time", "(", ")", "-", "start", "<", "timeout", ")", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "if", "'ACK'", "in", "self", ".", "_incoming", ".", "keys", "(", ")", ":", "\n", "                ", "if", "'CALIBRATE_START'", "in", "self", ".", "_incoming", "[", "'ACK'", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "t0", "=", "copy", ".", "copy", "(", "\n", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'CALIBRATE_START'", "]", "[", "'t'", "]", ")", "\n", "", "", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "if", "t0", "is", "None", ":", "\n", "                ", "time", ".", "sleep", "(", "0.001", ")", "\n", "\n", "# Return None if there was no calibration start.", "\n", "", "", "if", "t0", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "# Wait for a new calibration point start, or a timeout.", "\n", "", "pos", "=", "None", "\n", "pt_nr", "=", "None", "\n", "started", "=", "False", "\n", "timed_out", "=", "False", "\n", "while", "(", "not", "started", ")", "and", "(", "not", "timed_out", ")", ":", "\n", "# Get the latest calibration point start.", "\n", "            ", "t1", "=", "0", "\n", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "if", "'CAL'", "in", "self", ".", "_incoming", ".", "keys", "(", ")", ":", "\n", "                ", "if", "'CALIB_START_PT'", "in", "self", ".", "_incoming", "[", "'CAL'", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "t1", "=", "copy", ".", "copy", "(", "\n", "self", ".", "_incoming", "[", "'CAL'", "]", "[", "'CALIB_START_PT'", "]", "[", "'t'", "]", ")", "\n", "", "", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "# Check if the point is later than the most recent", "\n", "# calibration start.", "\n", "if", "t1", ">=", "t0", ":", "\n", "# Check if the current point is already the latest", "\n", "# registered point.", "\n", "                ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "pt_nr", "=", "int", "(", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'CAL'", "]", "[", "'CALIB_START_PT'", "]", "[", "'PT'", "]", ")", ")", "\n", "x", "=", "float", "(", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'CAL'", "]", "[", "'CALIB_START_PT'", "]", "[", "'CALX'", "]", ")", ")", "\n", "y", "=", "float", "(", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'CAL'", "]", "[", "'CALIB_START_PT'", "]", "[", "'CALY'", "]", ")", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "if", "pt_nr", "!=", "self", ".", "_current_calibration_point", ":", "\n", "                    ", "self", ".", "_current_calibration_point", "=", "copy", ".", "copy", "(", "pt_nr", ")", "\n", "pos", "=", "(", "x", ",", "y", ")", "\n", "started", "=", "True", "\n", "# Check if there is a timeout.", "\n", "", "", "if", "time", ".", "time", "(", ")", "-", "start", ">", "timeout", ":", "\n", "                ", "timed_out", "=", "True", "\n", "# Wait for a short bit to avoid wasting too many resources,", "\n", "# and to avoid hogging the incoming messages Lock.", "\n", "", "if", "not", "timed_out", ":", "\n", "                ", "time", ".", "sleep", "(", "0.001", ")", "\n", "\n", "", "", "if", "started", ":", "\n", "            ", "return", "pt_nr", ",", "pos", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.user_data": [[916, 927], ["tools.OpenGazeTracker._send_message", "str"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "", "def", "user_data", "(", "self", ",", "value", ")", ":", "\n", "\n", "        ", "\"\"\"Set the value of the user data field for embedding custom data\n        into the data stream. The user data value should be a string.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'USER_DATA'", ",", "values", "=", "[", "(", "'VALUE'", ",", "str", "(", "value", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.tracker_display": [[928, 939], ["tools.OpenGazeTracker._send_message", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "tracker_display", "(", "self", ",", "state", ")", ":", "\n", "\n", "        ", "\"\"\"Shows (state=1) or hides (state=0) the eye tracker display\n        window.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'TRACKER_DISPLAY'", ",", "values", "=", "[", "(", "'STATE'", ",", "int", "(", "state", ")", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.time_tick_frequency": [[940, 947], ["tools.OpenGazeTracker.get_time_tick_frequency"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_time_tick_frequency"], ["", "def", "time_tick_frequency", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the time-tick frequency to convert the TIME_TICK\n        variable to seconds.\n        \"\"\"", "\n", "\n", "return", "self", ".", "get_time_tick_frequency", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_time_tick_frequency": [[948, 965], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "tools.OpenGazeTracker._inlock.release"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "get_time_tick_frequency", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the time-tick frequency to convert the TIME_TICK\n        variable to seconds.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'TIME_TICK_FREQUENCY'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the result.", "\n", "freq", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "freq", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'TIME_TICK_FREQUENCY'", "]", "[", "'FREQ'", "]", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "freq", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.screen_size": [[966, 978], ["tools.OpenGazeTracker._send_message"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "screen_size", "(", "self", ",", "x", ",", "y", ",", "w", ",", "h", ")", ":", "\n", "\n", "        ", "\"\"\"Set the gaze tracking screen position (x,y) and size (w, h). You\n        can use this to work with multi-monitor systems. All values are in\n        pixels.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'SET'", ",", "'SCREEN_SIZE'", ",", "values", "=", "[", "(", "'X'", ",", "x", ")", ",", "(", "'Y'", ",", "x", ")", ",", "(", "'WIDTH'", ",", "w", ")", ",", "(", "'HEIGHT'", ",", "h", ")", "]", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return a success Boolean.", "\n", "return", "acknowledged", "and", "(", "timeout", "is", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_screen_size": [[979, 1003], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "copy.copy", "copy.copy", "copy.copy", "tools.OpenGazeTracker._inlock.release"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "get_screen_size", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the x and y coordinates of the top-left of the screen in\n        pixels, as well as the screen width and height in pixels. The\n        result is returned as [x, y, w, h].\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'SCREEN_SIZE'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the result.", "\n", "x", "=", "None", "\n", "y", "=", "None", "\n", "w", "=", "None", "\n", "h", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "x", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'SCREEN_SIZE'", "]", "[", "'X'", "]", ")", "\n", "y", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'SCREEN_SIZE'", "]", "[", "'Y'", "]", ")", "\n", "w", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'SCREEN_SIZE'", "]", "[", "'WIDTH'", "]", ")", "\n", "h", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'SCREEN_SIZE'", "]", "[", "'HEIGHT'", "]", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "[", "x", ",", "y", ",", "w", ",", "h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.camera_size": [[1004, 1010], ["tools.OpenGazeTracker.get_camera_size"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_camera_size"], ["", "def", "camera_size", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the size of the camera sensor in pixels, as [w,h].\n        \"\"\"", "\n", "\n", "return", "self", ".", "get_camera_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_camera_size": [[1011, 1029], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "copy.copy", "tools.OpenGazeTracker._inlock.release"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "get_camera_size", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the size of the camera sensor in pixels, as [w,h].\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'CAMERA_SIZE'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the result.", "\n", "w", "=", "None", "\n", "h", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "w", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'CAMERA_SIZE'", "]", "[", "'WIDTH'", "]", ")", "\n", "h", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'CAMERA_SIZE'", "]", "[", "'HEIGHT'", "]", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "[", "w", ",", "h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.product_id": [[1030, 1036], ["tools.OpenGazeTracker.get_product_id"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_product_id"], ["", "def", "product_id", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the identifier of the connected eye-tracker.\n        \"\"\"", "\n", "\n", "return", "self", ".", "get_product_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_product_id": [[1037, 1053], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "tools.OpenGazeTracker._inlock.release"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "get_product_id", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the identifier of the connected eye-tracker.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'PRODUCT_ID'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the result.", "\n", "value", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "value", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'PRODUCT_ID'", "]", "[", "'VALUE'", "]", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.serial_id": [[1054, 1060], ["tools.OpenGazeTracker.get_serial_id"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_serial_id"], ["", "def", "serial_id", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the serial number of the connected eye-tracker.\n        \"\"\"", "\n", "\n", "return", "self", ".", "get_serial_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_serial_id": [[1061, 1077], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "tools.OpenGazeTracker._inlock.release"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "get_serial_id", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the serial number of the connected eye-tracker.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'SERIAL_ID'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the result.", "\n", "value", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "value", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'SERIAL_ID'", "]", "[", "'VALUE'", "]", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.company_id": [[1078, 1085], ["tools.OpenGazeTracker.get_company_id"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_company_id"], ["", "def", "company_id", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the identifier of the manufacturer of the connected\n        eye-tracker.\n        \"\"\"", "\n", "\n", "return", "self", ".", "get_company_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_company_id": [[1086, 1103], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "tools.OpenGazeTracker._inlock.release"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "get_company_id", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the identifier of the manufacturer of the connected\n        eye-tracker.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'COMPANY_ID'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the result.", "\n", "value", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "value", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'COMPANY_ID'", "]", "[", "'VALUE'", "]", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.api_id": [[1104, 1110], ["tools.OpenGazeTracker.get_api_id"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_api_id"], ["", "def", "api_id", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the API version number.\n        \"\"\"", "\n", "\n", "return", "self", ".", "get_api_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.get_api_id": [[1111, 1127], ["tools.OpenGazeTracker._send_message", "tools.OpenGazeTracker._inlock.acquire", "copy.copy", "tools.OpenGazeTracker._inlock.release"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker._send_message"], ["", "def", "get_api_id", "(", "self", ")", ":", "\n", "\n", "        ", "\"\"\"Returns the API version number.\n        \"\"\"", "\n", "\n", "# Send the message (returns after the Server acknowledges receipt).", "\n", "acknowledged", ",", "timeout", "=", "self", ".", "_send_message", "(", "'GET'", ",", "'API_ID'", ",", "values", "=", "None", ",", "wait_for_acknowledgement", "=", "True", ")", "\n", "\n", "# Return the result.", "\n", "value", "=", "None", "\n", "if", "acknowledged", ":", "\n", "            ", "self", ".", "_inlock", ".", "acquire", "(", ")", "\n", "value", "=", "copy", ".", "copy", "(", "self", ".", "_incoming", "[", "'ACK'", "]", "[", "'API_ID'", "]", "[", "'VALUE'", "]", ")", "\n", "self", ".", "_inlock", ".", "release", "(", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.GazePointHeatMap.gazeheatplot.draw_display": [[8, 63], ["numpy.zeros", "matplotlib.pyplot.figure", "matplotlib.pyplot.Axes", "pyplot.Axes.set_axis_off", "pyplot.figure.add_axes", "pyplot.Axes.axis", "pyplot.Axes.imshow", "matplotlib.image.imread", "int", "int", "os.path.isfile", "Exception", "len", "len"], "function", ["None"], ["def", "draw_display", "(", "dispsize", ",", "imagefile", "=", "None", ")", ":", "\n", "\t", "\"\"\"Returns a matplotlib.pyplot Figure and its axes, with a size of\n\tdispsize, a black background colour, and optionally with an image drawn\n\tonto it\n\n\targuments\n\n\tdispsize\t\t-\ttuple or list indicating the size of the display,\n\t\t\t\t\te.g. (1024,768)\n\n\tkeyword arguments\n\n\timagefile\t\t-\tfull path to an image file over which the heatmap\n\t\t\t\t\tis to be laid, or None for no image; NOTE: the image\n\t\t\t\t\tmay be smaller than the display size, the function\n\t\t\t\t\tassumes that the image was presented at the centre of\n\t\t\t\t\tthe display (default = None)\n\n\treturns\n\tfig, ax\t\t-\tmatplotlib.pyplot Figure and its axes: field of zeros\n\t\t\t\t\twith a size of dispsize, and an image drawn onto it\n\t\t\t\t\tif an imagefile was passed\n\t\"\"\"", "\n", "\n", "# construct screen (black background)", "\n", "screen", "=", "numpy", ".", "zeros", "(", "(", "dispsize", "[", "1", "]", ",", "dispsize", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "'float32'", ")", "\n", "# if an image location has been passed, draw the image", "\n", "if", "imagefile", "!=", "None", ":", "\n", "# check if the path to the image exists", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "isfile", "(", "imagefile", ")", ":", "\n", "\t\t\t", "raise", "Exception", "(", "\"ERROR in draw_display: imagefile not found at '%s'\"", "%", "imagefile", ")", "\n", "# load image", "\n", "", "img", "=", "image", ".", "imread", "(", "imagefile", ")", "\n", "\n", "# width and height of the image", "\n", "w", ",", "h", "=", "len", "(", "img", "[", "0", "]", ")", ",", "len", "(", "img", ")", "\n", "# x and y position of the image on the display", "\n", "x", "=", "int", "(", "dispsize", "[", "0", "]", "/", "2", "-", "w", "/", "2", ")", "\n", "y", "=", "int", "(", "dispsize", "[", "1", "]", "/", "2", "-", "h", "/", "2", ")", "\n", "# draw the image on the screen", "\n", "screen", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", ",", ":", "]", "+=", "img", "\n", "# dots per inch", "\n", "", "dpi", "=", "100.0", "\n", "# determine the figure size in inches", "\n", "figsize", "=", "(", "dispsize", "[", "0", "]", "/", "dpi", ",", "dispsize", "[", "1", "]", "/", "dpi", ")", "\n", "# create a figure", "\n", "fig", "=", "pyplot", ".", "figure", "(", "figsize", "=", "figsize", ",", "dpi", "=", "dpi", ",", "frameon", "=", "False", ")", "\n", "ax", "=", "pyplot", ".", "Axes", "(", "fig", ",", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "# plot display", "\n", "ax", ".", "axis", "(", "[", "0", ",", "dispsize", "[", "0", "]", ",", "0", ",", "dispsize", "[", "1", "]", "]", ")", "\n", "ax", ".", "imshow", "(", "screen", ")", "# , origin='upper')", "\n", "\n", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.GazePointHeatMap.gazeheatplot.gaussian": [[64, 94], ["numpy.zeros", "range", "range", "numpy.exp", "float", "float"], "function", ["None"], ["", "def", "gaussian", "(", "x", ",", "sx", ",", "y", "=", "None", ",", "sy", "=", "None", ")", ":", "\n", "\t", "\"\"\"Returns an array of numpy arrays (a matrix) containing values between\n\t1 and 0 in a 2D Gaussian distribution\n\n\targuments\n\tx\t\t-- width in pixels\n\tsx\t\t-- width standard deviation\n\n\tkeyword argments\n\ty\t\t-- height in pixels (default = x)\n\tsy\t\t-- height standard deviation (default = sx)\n\t\"\"\"", "\n", "\n", "# square Gaussian if only x values are passed", "\n", "if", "y", "==", "None", ":", "\n", "\t\t", "y", "=", "x", "\n", "", "if", "sy", "==", "None", ":", "\n", "\t\t", "sy", "=", "sx", "\n", "# centers", "\n", "", "xo", "=", "x", "/", "2", "\n", "yo", "=", "y", "/", "2", "\n", "# matrix of zeros", "\n", "M", "=", "numpy", ".", "zeros", "(", "[", "y", ",", "x", "]", ",", "dtype", "=", "float", ")", "\n", "# gaussian matrix", "\n", "for", "i", "in", "range", "(", "x", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "y", ")", ":", "\n", "\t\t\t", "M", "[", "j", ",", "i", "]", "=", "numpy", ".", "exp", "(", "\n", "-", "1.0", "*", "(", "(", "(", "float", "(", "i", ")", "-", "xo", ")", "**", "2", "/", "(", "2", "*", "sx", "*", "sx", ")", ")", "+", "(", "(", "float", "(", "j", ")", "-", "yo", ")", "**", "2", "/", "(", "2", "*", "sy", "*", "sy", ")", ")", ")", ")", "\n", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.GazePointHeatMap.gazeheatplot.draw_heatmap": [[95, 198], ["gazeheatplot.draw_display", "gazeheatplot.gaussian", "int", "numpy.zeros", "range", "numpy.mean", "ax.invert_yaxis", "len", "map_type.strip", "matplotlib.colors.ListedColormap", "matplotlib.colors.BoundaryNorm", "ax.imshow", "ax.imshow", "fig.savefig", "int", "int", "abs", "abs", "int", "int"], "function", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.GazePointHeatMap.gazeheatplot.draw_display", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.GazePointHeatMap.gazeheatplot.gaussian"], ["", "def", "draw_heatmap", "(", "gazepoints", ",", "dispsize", ",", "imagefile", "=", "None", ",", "alpha", "=", "0.5", ",", "savefilename", "=", "None", ",", "gaussianwh", "=", "200", ",", "gaussiansd", "=", "None", ",", "map_type", "=", "\"heatmap\"", ")", ":", "\n", "\t", "\"\"\"Draws a heatmap of the provided fixations, optionally drawn over an\n\timage, and optionally allocating more weight to fixations with a higher\n\tduration.\n\n\targuments\n\n\tgazepoints\t\t-\ta list of gazepoint tuples (x, y)\n\t\n\tdispsize\t\t-\ttuple or list indicating the size of the display,\n\t\t\t\t\te.g. (1024,768)\n\n\tkeyword arguments\n\n\timagefile\t\t-\tfull path to an image file over which the heatmap\n\t\t\t\t\tis to be laid, or None for no image; NOTE: the image\n\t\t\t\t\tmay be smaller than the display size, the function\n\t\t\t\t\tassumes that the image was presented at the centre of\n\t\t\t\t\tthe display (default = None)\n\talpha\t\t-\tfloat between 0 and 1, indicating the transparancy of\n\t\t\t\t\tthe heatmap, where 0 is completely transparant and 1\n\t\t\t\t\tis completely untransparant (default = 0.5)\n\tsavefilename\t-\tfull path to the file in which the heatmap should be\n\t\t\t\t\tsaved, or None to not save the file (default = None)\n\n\treturns\n\n\tfig\t\t\t-\ta matplotlib.pyplot Figure instance, containing the\n\t\t\t\t\theatmap\n\t\"\"\"", "\n", "\n", "# IMAGE", "\n", "fig", ",", "ax", "=", "draw_display", "(", "dispsize", ",", "imagefile", "=", "imagefile", ")", "\n", "\n", "# HEATMAP", "\n", "# Gaussian", "\n", "gwh", "=", "gaussianwh", "\n", "gsdwh", "=", "gwh", "/", "6", "if", "(", "gaussiansd", "is", "None", ")", "else", "gaussiansd", "\n", "gaus", "=", "gaussian", "(", "gwh", ",", "gsdwh", ")", "\n", "# matrix of zeroes", "\n", "strt", "=", "int", "(", "gwh", "/", "2", ")", "\n", "heatmapsize", "=", "dispsize", "[", "1", "]", "+", "2", "*", "strt", ",", "dispsize", "[", "0", "]", "+", "2", "*", "strt", "\n", "heatmap", "=", "numpy", ".", "zeros", "(", "heatmapsize", ",", "dtype", "=", "float", ")", "\n", "# create heatmap", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "gazepoints", ")", ")", ":", "\n", "# get x and y coordinates", "\n", "\t\t", "x", "=", "strt", "+", "gazepoints", "[", "i", "]", "[", "0", "]", "-", "int", "(", "gwh", "/", "2", ")", "\n", "y", "=", "strt", "+", "gazepoints", "[", "i", "]", "[", "1", "]", "-", "int", "(", "gwh", "/", "2", ")", "\n", "# correct Gaussian size if either coordinate falls outside of", "\n", "# display boundaries", "\n", "if", "(", "not", "0", "<", "x", "<", "dispsize", "[", "0", "]", ")", "or", "(", "not", "0", "<", "y", "<", "dispsize", "[", "1", "]", ")", ":", "\n", "\t\t\t", "hadj", "=", "[", "0", ",", "gwh", "]", ";", "\n", "vadj", "=", "[", "0", ",", "gwh", "]", "\n", "if", "0", ">", "x", ":", "\n", "\t\t\t\t", "hadj", "[", "0", "]", "=", "abs", "(", "x", ")", "\n", "x", "=", "0", "\n", "", "elif", "dispsize", "[", "0", "]", "<", "x", ":", "\n", "\t\t\t\t", "hadj", "[", "1", "]", "=", "gwh", "-", "int", "(", "x", "-", "dispsize", "[", "0", "]", ")", "\n", "", "if", "0", ">", "y", ":", "\n", "\t\t\t\t", "vadj", "[", "0", "]", "=", "abs", "(", "y", ")", "\n", "y", "=", "0", "\n", "", "elif", "dispsize", "[", "1", "]", "<", "y", ":", "\n", "\t\t\t\t", "vadj", "[", "1", "]", "=", "gwh", "-", "int", "(", "y", "-", "dispsize", "[", "1", "]", ")", "\n", "# add adjusted Gaussian to the current heatmap", "\n", "", "try", ":", "\n", "\t\t\t\t", "heatmap", "[", "y", ":", "y", "+", "vadj", "[", "1", "]", ",", "x", ":", "x", "+", "hadj", "[", "1", "]", "]", "+=", "gaus", "[", "vadj", "[", "0", "]", ":", "vadj", "[", "1", "]", ",", "hadj", "[", "0", "]", ":", "hadj", "[", "1", "]", "]", "*", "gazepoints", "[", "i", "]", "[", "2", "]", "\n", "", "except", ":", "\n", "# fixation was probably outside of display", "\n", "\t\t\t\t", "pass", "\n", "", "", "else", ":", "\n", "# add Gaussian to the current heatmap", "\n", "\t\t\t", "heatmap", "[", "y", ":", "y", "+", "gwh", ",", "x", ":", "x", "+", "gwh", "]", "+=", "gaus", "*", "gazepoints", "[", "i", "]", "[", "2", "]", "\n", "# resize heatmap", "\n", "", "", "heatmap", "=", "heatmap", "[", "strt", ":", "dispsize", "[", "1", "]", "+", "strt", ",", "strt", ":", "dispsize", "[", "0", "]", "+", "strt", "]", "\n", "# remove zeros", "\n", "lowbound", "=", "numpy", ".", "mean", "(", "heatmap", "[", "heatmap", ">", "0", "]", ")", "\n", "\n", "\n", "if", "map_type", ".", "strip", "(", ")", "==", "\"binarymap\"", ":", "\n", "\t\t", "heatmap", "[", "heatmap", "<", "lowbound", "]", "=", "0", "\n", "# define the colors - black & white", "\n", "cmap", "=", "matplotlib", ".", "colors", ".", "ListedColormap", "(", "[", "(", "0", ",", "0", ",", "0", ",", "alpha", ")", ",", "(", "1", ",", "1", ",", "1", ",", "0", ")", "]", ")", "\n", "bounds", "=", "[", "0.", ",", "0.5", ",", "1.", "]", "\n", "norm", "=", "matplotlib", ".", "colors", ".", "BoundaryNorm", "(", "bounds", ",", "cmap", ".", "N", ")", "\n", "# draw heatmap on top of image", "\n", "ax", ".", "imshow", "(", "heatmap", ",", "cmap", "=", "cmap", ",", "norm", "=", "norm", ")", "\n", "", "else", ":", "\n", "\t\t", "heatmap", "[", "heatmap", "<", "lowbound", "]", "=", "numpy", ".", "NaN", "\n", "ax", ".", "imshow", "(", "heatmap", ",", "cmap", "=", "'jet'", ",", "alpha", "=", "alpha", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "# FINISH PLOT", "\n", "# invert the y axis, as (0,0) is top left on a display", "\n", "", "ax", ".", "invert_yaxis", "(", ")", "\n", "# save the figure if a file name was provided", "\n", "if", "savefilename", "!=", "None", ":", "\n", "\t\t", "fig", ".", "savefig", "(", "savefilename", ")", "\n", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.__init__": [[10, 54], ["app.App.__init__", "tkinter.Button", "visualiser.Visualiser.toggle_bounding_box_button.pack", "visualiser.Visualiser.toggle_bounding_box_button.cget", "tkinter.Button", "visualiser.Visualiser.undo_button.pack", "tkinter.Button", "tkinter.Button.pack", "visualiser.Visualiser.load_csv_files", "visualiser.Visualiser.canvas.bind", "visualiser.Visualiser.canvas.bind", "range", "visualiser.Visualiser.draw_image_on_canvas"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.__init__", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.load_csv_files", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["    ", "def", "__init__", "(", "self", ",", "root_window", ",", "deep_zoom_object", ",", "level", "=", "0", ")", ":", "\n", "        ", "self", ".", "tiles_directory", "=", "root_window", ".", "tiles_directory", "\n", "# Python 2.x compatible constructor", "\n", "App", ".", "__init__", "(", "self", ",", "root_window", ",", "deep_zoom_object", ",", "self", ".", "tiles_directory", ",", "level", "=", "level", ")", "\n", "\n", "# When pressed, toggles the bounding box point removal tool.", "\n", "self", ".", "toggle_bounding_box_button", "=", "tk", ".", "Button", "(", "self", ".", "frame2", ",", "text", "=", "\"Bounding\\n Box\"", ",", "command", "=", "self", ".", "toggle_bounding_box_mode", ")", "\n", "self", ".", "toggle_bounding_box_button", ".", "pack", "(", "side", "=", "tk", ".", "LEFT", ",", "padx", "=", "(", "5", ",", "5", ")", ",", "pady", "=", "(", "15", ",", "15", ")", ")", "\n", "self", ".", "button_original_bg", "=", "self", ".", "toggle_bounding_box_button", ".", "cget", "(", "\"background\"", ")", "\n", "\n", "# When pressed, undoes the most recent deletion.", "\n", "self", ".", "undo_button", "=", "tk", ".", "Button", "(", "self", ".", "frame2", ",", "text", "=", "\"Undo\"", ",", "command", "=", "self", ".", "undo", ")", "\n", "self", ".", "undo_button", ".", "pack", "(", "side", "=", "tk", ".", "LEFT", ",", "padx", "=", "(", "5", ",", "5", ")", ",", "pady", "=", "(", "15", ",", "15", ")", ")", "\n", "\n", "# When pressed, prompts for new file names of modified CSVs, and saves them.", "\n", "save_csv_button", "=", "tk", ".", "Button", "(", "self", ".", "frame2", ",", "text", "=", "'Save'", ",", "command", "=", "self", ".", "save_modified", ")", "\n", "save_csv_button", ".", "pack", "(", "side", "=", "tk", ".", "LEFT", ",", "padx", "=", "(", "5", ",", "5", ")", ",", "pady", "=", "(", "15", ",", "15", ")", ")", "\n", "\n", "# The radius of the ellipse drawn to represent the points.", "\n", "self", ".", "ellipse_radius", "=", "10", "\n", "self", ".", "saved_points", "=", "self", ".", "load_csv_files", "(", "self", ".", "tiles_directory", ",", "self", ".", "tile_generator", ".", "max_level", ")", "\n", "\n", "# Bind left mouse click to removing a point.", "\n", "self", ".", "canvas", ".", "bind", "(", "'<ButtonPress-1>'", ",", "self", ".", "remove_point", ")", "\n", "\n", "# Bind b key to toggling bounding box point removal tool.", "\n", "self", ".", "canvas", ".", "bind", "(", "'b'", ",", "self", ".", "toggle_bounding_box_mode", ")", "\n", "\n", "# Whether the bounding box mode is currently activated.", "\n", "self", ".", "bb_mode", "=", "False", "\n", "\n", "# A list containing the csv levels that have been modified.", "\n", "self", ".", "modified_files", "=", "[", "]", "\n", "\n", "# A dictionary where the key is the level and the value is an \"undo stack\".", "\n", "# An undo stack is a list of lists, where each list contains points that were deleted in that step.", "\n", "self", ".", "undo_stacks", "=", "{", "}", "\n", "\n", "# Initialize undo stacks to empty lists.", "\n", "for", "level", "in", "range", "(", "self", ".", "tile_generator", ".", "max_level", ")", ":", "\n", "            ", "self", ".", "undo_stacks", "[", "level", "]", "=", "[", "]", "\n", "\n", "# Draw initial image.", "\n", "", "self", ".", "draw_image_on_canvas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.get_image": [[55, 97], ["visualiser.Visualiser.tile_generator.generate_image", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.ellipse", "relevant_points.append", "max", "max", "min", "min"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.generate_image"], ["", "def", "get_image", "(", "self", ",", "box_coords", ",", "force_generation", "=", "False", ")", ":", "\n", "        ", "image", ",", "top_left", "=", "self", ".", "tile_generator", ".", "generate_image", "(", "box_coords", ",", "self", ".", "top_left", ",", "\n", "force_generation", "=", "force_generation", ")", "\n", "\n", "# if image is None, then it's the same as before and no processing needs to be done", "\n", "if", "image", "is", "None", ":", "\n", "            ", "return", "image", ",", "top_left", "\n", "\n", "", "else", ":", "\n", "            ", "current_level", "=", "self", ".", "tile_generator", ".", "level", "\n", "\n", "# if there is no saved csv, the image is returned without changes", "\n", "if", "current_level", "in", "self", ".", "saved_points", ":", "\n", "# points that lie within the current selection", "\n", "                ", "relevant_points", "=", "[", "]", "\n", "min_x", "=", "top_left", "[", "0", "]", "\n", "min_y", "=", "top_left", "[", "1", "]", "\n", "max_x", "=", "top_left", "[", "0", "]", "+", "image", ".", "size", "[", "0", "]", "\n", "max_y", "=", "top_left", "[", "1", "]", "+", "image", ".", "size", "[", "1", "]", "\n", "\n", "level_points", "=", "self", ".", "saved_points", "[", "current_level", "]", "\n", "for", "x", ",", "y", "in", "level_points", ":", "\n", "# If the point is within the range covered by the image.", "\n", "                    ", "if", "x", ">", "min_x", "and", "y", ">", "min_y", "and", "x", "<", "max_x", "and", "y", "<", "max_y", ":", "\n", "# min_x and min_y are subtracted so that the resulting points are coordinates on the image,", "\n", "# instead of on the whole svs file.", "\n", "                        ", "relevant_points", ".", "append", "(", "(", "x", "-", "min_x", ",", "y", "-", "min_y", ")", ")", "\n", "\n", "", "", "draw", "=", "ImageDraw", ".", "Draw", "(", "image", ")", "\n", "for", "x", ",", "y", "in", "relevant_points", ":", "\n", "# top left of the ellipse cannot be less than the size of the image", "\n", "                    ", "ellipse_top_left", "=", "max", "(", "0", ",", "x", "-", "self", ".", "ellipse_radius", ")", ",", "max", "(", "0", ",", "y", "-", "self", ".", "ellipse_radius", ")", "\n", "\n", "# bottom right of the ellopse cannot exceed the size of the image", "\n", "ellipse_bottom_right", "=", "min", "(", "image", ".", "size", "[", "0", "]", ",", "x", "+", "self", ".", "ellipse_radius", ")", ",", "min", "(", "image", ".", "size", "[", "1", "]", ",", "y", "+", "self", ".", "ellipse_radius", ")", "\n", "\n", "# draw a green ellipse", "\n", "draw", ".", "ellipse", "(", "[", "ellipse_top_left", ",", "ellipse_bottom_right", "]", ",", "fill", "=", "(", "0", ",", "255", ",", "0", ",", "255", ")", ")", "\n", "\n", "", "return", "image", ",", "top_left", "\n", "", "else", ":", "\n", "                ", "return", "image", ",", "top_left", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.remove_point": [[98, 123], ["visualiser.Visualiser.move_from", "visualiser.Visualiser.saved_points.get", "visualiser.Visualiser.canvas.canvasx", "visualiser.Visualiser.canvas.canvasy", "visualiser.Visualiser.remove", "visualiser.Visualiser.push_points", "visualiser.Visualiser.draw_image_on_canvas", "abs", "abs", "visualiser.Visualiser.modified_files.append"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.move_from", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.push_points", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["", "", "", "def", "remove_point", "(", "self", ",", "event", ")", ":", "\n", "# move_from needs to be called first, in case the user is just looking around and not removing.", "\n", "        ", "self", ".", "move_from", "(", "event", ")", "\n", "current_level", "=", "self", ".", "tile_generator", ".", "level", "\n", "\n", "# None is returned if the key does not exist in the dictionary.", "\n", "level_points", "=", "self", ".", "saved_points", ".", "get", "(", "current_level", ")", "\n", "\n", "if", "level_points", "is", "not", "None", ":", "\n", "# x and y coordinates of the point on the slide", "\n", "            ", "x_on_slide", "=", "self", ".", "canvas", ".", "canvasx", "(", "event", ".", "x", ")", "\n", "y_on_slide", "=", "self", ".", "canvas", ".", "canvasy", "(", "event", ".", "y", ")", "\n", "\n", "for", "x", ",", "y", "in", "level_points", ":", "\n", "# Check if the click is within the radius of any gaze point.", "\n", "# TODO: Look for closest point if there are multiple points in range.", "\n", "                ", "if", "abs", "(", "x_on_slide", "-", "x", ")", "<=", "self", ".", "ellipse_radius", "and", "abs", "(", "y_on_slide", "-", "y", ")", "<=", "self", ".", "ellipse_radius", ":", "\n", "                    ", "level_points", ".", "remove", "(", "(", "x", ",", "y", ")", ")", "\n", "self", ".", "push_points", "(", "[", "(", "x", ",", "y", ")", "]", ")", "\n", "self", ".", "draw_image_on_canvas", "(", "force_generation", "=", "True", ")", "\n", "\n", "# If the current level has not been modified before, add it to the list of modified levels.", "\n", "if", "current_level", "not", "in", "self", ".", "modified_files", ":", "\n", "                        ", "self", ".", "modified_files", ".", "append", "(", "current_level", ")", "\n", "", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.load_csv_files": [[124, 143], ["range", "os.path.join", "os.path.isfile", "open", "csv.reader", "str", "level_points.append", "int", "int"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open"], ["", "", "", "", "def", "load_csv_files", "(", "self", ",", "directory", ",", "levels", ")", ":", "\n", "        ", "csv_files", "=", "{", "}", "\n", "for", "level", "in", "range", "(", "levels", ")", ":", "\n", "# list containing this level's points", "\n", "            ", "level_points", "=", "[", "]", "\n", "\n", "# The path to the csv, which may or may not exist.", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tiles_directory", ",", "\"Level \"", "+", "str", "(", "level", ")", "+", "\".csv\"", ")", "\n", "\n", "# Open the file if it exists and load the points to an array.", "\n", "if", "os", ".", "path", ".", "isfile", "(", "csv_path", ")", ":", "\n", "                ", "with", "open", "(", "csv_path", ")", "as", "points_file", ":", "\n", "                    ", "for", "x", ",", "y", "in", "csv", ".", "reader", "(", "points_file", ",", "delimiter", "=", "','", ")", ":", "\n", "                        ", "level_points", ".", "append", "(", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ")", "\n", "\n", "# Add the points to the dictionary.", "\n", "", "", "csv_files", "[", "level", "]", "=", "level_points", "\n", "\n", "", "", "return", "csv_files", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.get_names_for_modified": [[144, 158], ["tkinter.simpledialog.askstring", "str"], "methods", ["None"], ["", "def", "get_names_for_modified", "(", "self", ",", "modified_levels", ")", ":", "\n", "\n", "        ", "file_names", "=", "{", "}", "\n", "\n", "for", "level", "in", "modified_levels", ":", "\n", "            ", "new_name", "=", "simpledialog", ".", "askstring", "(", "\"Enter Name\"", ",", "\"Enter new name for CSV for Level {}. \"", "\n", "\"Leave empty to overwrite saved file.\"", ".", "format", "(", "level", ")", ")", "\n", "\n", "# If the string is empty, overwrite the saved csv file.", "\n", "if", "not", "new_name", ":", "\n", "                ", "new_name", "=", "\"Level \"", "+", "str", "(", "level", ")", "\n", "", "file_names", "[", "level", "]", "=", "new_name", "\n", "\n", "", "return", "file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.save_modified": [[159, 173], ["visualiser.Visualiser.get_names_for_modified", "visualiser.Visualiser.items", "os.path.join", "open", "csv.writer", "csv.writer.writerows", "visualiser.Visualiser.saved_points.get"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.get_names_for_modified", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open"], ["", "def", "save_modified", "(", "self", ")", ":", "\n", "\n", "# If array is not empty.", "\n", "        ", "if", "self", ".", "modified_files", ":", "\n", "            ", "file_names", "=", "self", ".", "get_names_for_modified", "(", "self", ".", "modified_files", ")", "\n", "\n", "for", "level", ",", "new_name", "in", "file_names", ".", "items", "(", ")", ":", "\n", "# The path to the save location of the csv", "\n", "                ", "csv_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tiles_directory", ",", "new_name", "+", "\".csv\"", ")", "\n", "with", "open", "(", "csv_path", ",", "'wb+'", ")", "as", "csv_file", ":", "\n", "                    ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerows", "(", "self", ".", "saved_points", ".", "get", "(", "level", ")", ")", "\n", "\n", "", "", "self", ".", "modified_files", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.toggle_bounding_box_mode": [[175, 189], ["visualiser.Visualiser.canvas.bind", "visualiser.Visualiser.canvas.bind", "visualiser.Visualiser.canvas.unbind", "visualiser.Visualiser.toggle_bounding_box_button.config", "visualiser.Visualiser.activate_bb_mode", "visualiser.Visualiser.toggle_bounding_box_button.config"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.activate_bb_mode"], ["", "", "def", "toggle_bounding_box_mode", "(", "self", ",", "event", "=", "None", ")", ":", "\n", "# Resets the bindings to normal if bounding box mode was active before.", "\n", "        ", "if", "self", ".", "bb_mode", ":", "\n", "# Bind left mouse click to removing a point.", "\n", "            ", "self", ".", "canvas", ".", "bind", "(", "\"<ButtonPress-1>\"", ",", "self", ".", "remove_point", ")", "\n", "# Move canvas to the new position using the anchor.", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<B1-Motion>\"", ",", "self", ".", "move_to", ")", "\n", "self", ".", "canvas", ".", "unbind", "(", "\"<ButtonRelease-1>\"", ")", "\n", "self", ".", "toggle_bounding_box_button", ".", "config", "(", "bg", "=", "self", ".", "button_original_bg", ")", "\n", "self", ".", "bb_mode", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "activate_bb_mode", "(", ")", "\n", "self", ".", "toggle_bounding_box_button", ".", "config", "(", "bg", "=", "'gray60'", ")", "\n", "self", ".", "bb_mode", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.activate_bb_mode": [[192, 196], ["visualiser.Visualiser.canvas.bind", "visualiser.Visualiser.canvas.bind", "visualiser.Visualiser.canvas.bind"], "methods", ["None"], ["", "", "def", "activate_bb_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "canvas", ".", "bind", "(", "\"<ButtonPress-1>\"", ",", "self", ".", "bb_left_mouse_press", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<B1-Motion>\"", ",", "self", ".", "bb_mouse_motion", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<ButtonRelease-1>\"", ",", "self", ".", "bb_mouse_release", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.bb_left_mouse_press": [[197, 205], ["visualiser.Visualiser.canvas.canvasx", "visualiser.Visualiser.canvas.canvasy", "visualiser.Visualiser.canvas.create_rectangle"], "methods", ["None"], ["", "def", "bb_left_mouse_press", "(", "self", ",", "event", ")", ":", "\n", "# x and y coordinates of the point on the slide.", "\n", "        ", "self", ".", "bb_start_x", "=", "self", ".", "canvas", ".", "canvasx", "(", "event", ".", "x", ")", "\n", "self", ".", "bb_start_y", "=", "self", ".", "canvas", ".", "canvasy", "(", "event", ".", "y", ")", "\n", "\n", "# Create the rectangle for the bounding box.", "\n", "self", ".", "bb_rectangle", "=", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "bb_start_x", ",", "self", ".", "bb_start_y", ",", "self", ".", "bb_start_x", ",", "\n", "self", ".", "bb_start_y", ",", "fill", "=", "''", ",", "outline", "=", "\"green\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.bb_mouse_motion": [[206, 213], ["visualiser.Visualiser.canvas.canvasx", "visualiser.Visualiser.canvas.canvasy", "visualiser.Visualiser.canvas.coords"], "methods", ["None"], ["", "def", "bb_mouse_motion", "(", "self", ",", "event", ")", ":", "\n", "# x and y coordinates of the current position of the mouse on the slide.", "\n", "        ", "x", "=", "self", ".", "canvas", ".", "canvasx", "(", "event", ".", "x", ")", "\n", "y", "=", "self", ".", "canvas", ".", "canvasy", "(", "event", ".", "y", ")", "\n", "\n", "# Change the dimensions of the bounding box rectangle.", "\n", "self", ".", "canvas", ".", "coords", "(", "self", ".", "bb_rectangle", ",", "self", ".", "bb_start_x", ",", "self", ".", "bb_start_y", ",", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.bb_mouse_release": [[214, 230], ["visualiser.Visualiser.canvas.canvasx", "visualiser.Visualiser.canvas.canvasy", "visualiser.Visualiser.remove_points_between_bounds", "visualiser.Visualiser.push_points", "visualiser.Visualiser.draw_image_on_canvas", "visualiser.Visualiser.canvas.delete"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.remove_points_between_bounds", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.push_points", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["", "def", "bb_mouse_release", "(", "self", ",", "event", ")", ":", "\n", "# x and y coordinates of the position where the mouse was released on the slide.", "\n", "        ", "final_x", "=", "self", ".", "canvas", ".", "canvasx", "(", "event", ".", "x", ")", "\n", "final_y", "=", "self", ".", "canvas", ".", "canvasy", "(", "event", ".", "y", ")", "\n", "\n", "# List of points that have been removed.", "\n", "points_removed", "=", "self", ".", "remove_points_between_bounds", "(", "self", ".", "bb_start_x", ",", "self", ".", "bb_start_y", ",", "final_x", ",", "final_y", ")", "\n", "\n", "# If points were removed, we need to redraw the image since there are now less points.", "\n", "if", "points_removed", ":", "\n", "            ", "self", ".", "push_points", "(", "points_removed", ")", "\n", "self", ".", "draw_image_on_canvas", "(", "force_generation", "=", "True", ")", "\n", "\n", "# If no points were removed, we only need to delete the rectangle.", "\n", "", "else", ":", "\n", "            ", "self", ".", "canvas", ".", "delete", "(", "self", ".", "bb_rectangle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.remove_points_between_bounds": [[231, 278], ["visualiser.Visualiser.saved_points.get", "abs", "abs", "points_to_remove.append", "visualiser.Visualiser.modified_files.append"], "methods", ["None"], ["", "", "def", "remove_points_between_bounds", "(", "self", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ":", "\n", "\n", "# List of points that have to be removed.", "\n", "        ", "points_to_remove", "=", "[", "]", "\n", "\n", "# Change the current representation into top-left coordinates and bottom-right coordinates.", "\n", "\n", "# This function could probably be made neater.", "\n", "\n", "# The lesser of the two is the x-coordinate of the top left pixel.", "\n", "if", "x1", "<", "x2", ":", "\n", "            ", "top_left_x", "=", "x1", "\n", "", "else", ":", "\n", "            ", "top_left_x", "=", "x2", "\n", "\n", "", "bottom_right_x", "=", "top_left_x", "+", "abs", "(", "x2", "-", "x1", ")", "\n", "\n", "# The lesser of the two is the y-coordinate of the top left pixel.", "\n", "if", "y1", "<", "y2", ":", "\n", "            ", "top_left_y", "=", "y1", "\n", "", "else", ":", "\n", "            ", "top_left_y", "=", "y2", "\n", "\n", "", "bottom_right_y", "=", "top_left_y", "+", "abs", "(", "y2", "-", "y1", ")", "\n", "\n", "current_level", "=", "self", ".", "tile_generator", ".", "level", "\n", "\n", "# None is returned if the key does not exist in the dictionary.", "\n", "level_points", "=", "self", ".", "saved_points", ".", "get", "(", "current_level", ")", "\n", "\n", "if", "level_points", "is", "not", "None", ":", "\n", "            ", "for", "x", ",", "y", "in", "level_points", ":", "\n", "# Check if the current point is within the range of the bounding box.", "\n", "# A separate list is used since iteration is messed up if removing while iterating.", "\n", "                ", "if", "x", ">=", "top_left_x", "and", "x", "<=", "bottom_right_x", "and", "y", ">=", "top_left_y", "and", "y", "<=", "bottom_right_y", ":", "\n", "                    ", "points_to_remove", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "# If the current level has not been modified before, add it to the list of modified levels.", "\n", "if", "current_level", "not", "in", "self", ".", "modified_files", ":", "\n", "                        ", "self", ".", "modified_files", ".", "append", "(", "current_level", ")", "\n", "\n", "# If points were removed, then remove them from the list using a comprehension.", "\n", "# A better solution could be found.", "\n", "", "", "", "", "if", "points_to_remove", ":", "\n", "            ", "level_points", "[", ":", "]", "=", "[", "point", "for", "point", "in", "level_points", "if", "point", "not", "in", "points_to_remove", "]", "\n", "\n", "", "return", "points_to_remove", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.push_points": [[279, 287], ["current_level_stack.append"], "methods", ["None"], ["", "def", "push_points", "(", "self", ",", "points", ")", ":", "\n", "        ", "\"\"\"Pushes points onto the current level's undo stack.\n\n        Args:\n            points: A list of points, where each point is an x, y coordinate pair.\n        \"\"\"", "\n", "current_level_stack", "=", "self", ".", "undo_stacks", "[", "self", ".", "tile_generator", ".", "level", "]", "\n", "current_level_stack", ".", "append", "(", "points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.pop_points": [[289, 297], ["current_level_stack.pop"], "methods", ["None"], ["", "def", "pop_points", "(", "self", ")", ":", "\n", "        ", "current_level_stack", "=", "self", ".", "undo_stacks", "[", "self", ".", "tile_generator", ".", "level", "]", "\n", "\n", "# Only pop if the stack is not empty.", "\n", "if", "current_level_stack", ":", "\n", "            ", "return", "current_level_stack", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.undo": [[298, 313], ["visualiser.Visualiser.pop_points", "visualiser.Visualiser.draw_image_on_canvas", "visualiser.Visualiser.modified_files.append"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.visualiser.Visualiser.pop_points", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["", "", "def", "undo", "(", "self", ")", ":", "\n", "# Pop points.", "\n", "        ", "points", "=", "self", ".", "pop_points", "(", ")", "\n", "\n", "current_level", "=", "self", ".", "tile_generator", ".", "level", "\n", "\n", "# If a list is returned, merge it with the current level's saved points.", "\n", "if", "points", ":", "\n", "            ", "self", ".", "saved_points", "[", "current_level", "]", "+=", "points", "\n", "\n", "# Note: Modified files might not always be accurate", "\n", "# since an undo could be returning it to an unmodified state.", "\n", "if", "current_level", "not", "in", "self", ".", "modified_files", ":", "\n", "                ", "self", ".", "modified_files", ".", "append", "(", "current_level", ")", "\n", "", "self", ".", "draw_image_on_canvas", "(", "force_generation", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.heatmap_generation.generate_heatmap": [[10, 130], ["os.path.join", "range", "os.path.join", "os.listdir", "heatmap_generation.construct_image", "print", "final_img.resize.resize", "print", "final_img.resize.save", "print", "os.path.join", "subprocess.call", "print", "os.path.isfile", "print", "str", "os.path.exists", "os.makedirs", "[].split", "present_tiles.append", "sorted", "sorted", "deep_zoom_object.get_tile_dimensions", "deep_zoom_object.get_tile_dimensions", "deep_zoom_object.get_tile_dimensions", "deep_zoom_object.get_tile_dimensions", "deep_zoom_object.get_tile_dimensions", "max", "print", "pandas.read_csv", "pd.read_csv.to_csv", "os.path.join", "os.path.dirname", "os.path.isfile", "os.path.join", "str", "str", "deep_zoom_object.get_tile_dimensions", "os.path.join", "os.path.join", "int", "int", "os.path.abspath", "os.path.join", "str", "str", "os.path.join", "os.rename", "int", "int", "str", "os.path.join", "os.path.join", "os.path.join", "print", "i.split", "csv_name.split", "str"], "function", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.heatmap_generation.construct_image"], ["def", "generate_heatmap", "(", "deep_zoom_object", ",", "folder_path", ",", "gaussian_matrix_size", ",", "map_type", "=", "\"heatmap\"", ",", "alpha", "=", "0.6", ",", "include_unvisited_tiles", "=", "True", ")", ":", "\n", "\n", "    ", "tiles_folder_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'tiles'", ")", "\n", "\n", "for", "level", "in", "range", "(", "deep_zoom_object", ".", "level_count", ")", ":", "\n", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "\"Level \"", "+", "str", "(", "level", ")", "+", "\".csv\"", ")", ")", ":", "\n", "            ", "print", "(", "\"No CSV for Level {}\"", ".", "format", "(", "level", ")", ")", "\n", "continue", "\n", "\n", "# path to the directory pointing to this level's tiles", "\n", "", "current_level_path", "=", "os", ".", "path", ".", "join", "(", "tiles_folder_path", ",", "str", "(", "level", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "current_level_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "current_level_path", ")", "\n", "\n", "", "img_name", "=", "\"Level \"", "+", "str", "(", "level", ")", "+", "\".png\"", "\n", "csv_name", "=", "\"Level \"", "+", "str", "(", "level", ")", "+", "\".csv\"", "\n", "\n", "# tiles that were generated previously", "\n", "present_tiles", "=", "[", "]", "\n", "\n", "files", "=", "os", ".", "listdir", "(", "current_level_path", ")", "\n", "\n", "if", "not", "files", ":", "\n", "            ", "include_unvisited_tiles", "=", "True", "\n", "\n", "", "for", "i", "in", "files", ":", "\n", "# first split to separate the extension, then split row/column", "\n", "            ", "column", ",", "row", "=", "i", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "\n", "present_tiles", ".", "append", "(", "(", "int", "(", "column", ")", ",", "int", "(", "row", ")", ")", ")", "\n", "\n", "# if unvisited tiles are to be included, then the entire area from top-left to bottom right needs to be covered", "\n", "", "if", "include_unvisited_tiles", ":", "\n", "            ", "first_row", ",", "first_column", "=", "(", "0", ",", "0", ")", "\n", "column_count", ",", "row_count", "=", "deep_zoom_object", ".", "level_tiles", "[", "level", "]", "\n", "\n", "# only previously generated tiles are used for heatmap generation", "\n", "", "else", ":", "\n", "            ", "sorted_by_row", "=", "sorted", "(", "present_tiles", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "0", "]", ")", "\n", "first_row", "=", "sorted_by_row", "[", "0", "]", "[", "0", "]", "\n", "row_count", "=", "sorted_by_row", "[", "-", "1", "]", "[", "0", "]", "-", "first_row", "\n", "\n", "sorted_by_column", "=", "sorted", "(", "present_tiles", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", ")", "\n", "first_column", "=", "sorted_by_column", "[", "0", "]", "[", "1", "]", "\n", "column_count", "=", "sorted_by_column", "[", "-", "1", "]", "[", "1", "]", "-", "first_column", "\n", "\n", "# first column/row may have a different width/height than other tiles, if they are the first in that level", "\n", "", "if", "first_column", "==", "0", ":", "\n", "            ", "first_column_width", ",", "_", "=", "deep_zoom_object", ".", "get_tile_dimensions", "(", "level", ",", "(", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "first_column_width", ",", "_", "=", "deep_zoom_object", ".", "get_tile_dimensions", "(", "level", ",", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "if", "first_row", "==", "0", ":", "\n", "            ", "_", ",", "first_row_height", "=", "deep_zoom_object", ".", "get_tile_dimensions", "(", "level", ",", "(", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "first_row_height", "=", "deep_zoom_object", ".", "get_tile_dimensions", "(", "level", ",", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "column_width", ",", "row_height", "=", "(", "0", ",", "0", ")", "\n", "# column width and row height is only relevant when more than one column is required", "\n", "if", "column_count", ">", "1", "and", "row_count", ">", "1", ":", "\n", "            ", "column_width", ",", "row_height", "=", "deep_zoom_object", ".", "get_tile_dimensions", "(", "level", ",", "(", "1", ",", "1", ")", ")", "\n", "", "elif", "column_count", ">", "1", "or", "row_count", ">", "1", ":", "\n", "            ", "column_width", ",", "row_height", "=", "deep_zoom_object", ".", "get_tile_dimensions", "(", "level", ",", "(", "column_count", "-", "1", ",", "row_count", "-", "1", ")", ")", "\n", "\n", "\n", "", "first_index", "=", "first_column", ",", "first_row", "\n", "count", "=", "column_count", ",", "row_count", "\n", "dimensions", "=", "column_width", ",", "row_height", "\n", "first_dimensions", "=", "first_column_width", ",", "first_row_height", "\n", "\n", "final_img", "=", "construct_image", "(", "current_level_path", ",", "present_tiles", ",", "\n", "first_index", ",", "count", ",", "dimensions", ",", "first_dimensions", ",", "deep_zoom_object", ",", "level", ")", "\n", "size", "=", "final_img", ".", "size", "[", "0", "]", ",", "final_img", ".", "size", "[", "1", "]", "\n", "print", "(", "\"Old Size: {}\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "scaling_factor", "=", "1", "\n", "max_size", "=", "5000", ",", "5000", "\n", "\n", "if", "size", "[", "0", "]", ">", "max_size", "[", "0", "]", "or", "size", "[", "1", "]", ">", "max_size", "[", "1", "]", ":", "\n", "            ", "scaling_factor", "=", "max", "(", "size", "[", "0", "]", "/", "max_size", "[", "0", "]", ",", "size", "[", "1", "]", "/", "max_size", "[", "1", "]", ")", "\n", "print", "(", "\"Scaling Factor is {}\"", ".", "format", "(", "scaling_factor", ")", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "csv_name", ")", ",", "\n", "delimiter", "=", "','", ",", "header", "=", "None", ")", "\n", "# gazeheatplot requires ints", "\n", "df", "[", "0", "]", "=", "df", "[", "0", "]", "//", "scaling_factor", "\n", "df", "[", "1", "]", "=", "df", "[", "1", "]", "//", "scaling_factor", "\n", "csv_name", "=", "csv_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "' Rescaled'", "+", "'.csv'", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "csv_name", ")", ",", "sep", "=", "','", ",", "\n", "index", "=", "False", ",", "header", "=", "False", ")", "\n", "\n", "", "final_img", "=", "final_img", ".", "resize", "(", "\n", "(", "int", "(", "size", "[", "0", "]", "/", "scaling_factor", ")", ",", "int", "(", "size", "[", "1", "]", "/", "scaling_factor", ")", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "print", "(", "\"New Size: {}\"", ".", "format", "(", "final_img", ".", "size", ")", ")", "\n", "\n", "if", "map_type", "==", "\"binarymap\"", ":", "\n", "            ", "heatmap_name", "=", "\"Binarymap \"", "+", "img_name", "\n", "", "else", ":", "\n", "            ", "heatmap_name", "=", "\"Heatmap \"", "+", "img_name", "\n", "\n", "# https://pillow.readthedocs.io/en/5.1.x/handbook/image-file-formats.html", "\n", "", "final_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "img_name", ")", ",", "quality", "=", "95", ")", "\n", "print", "(", "\"Generating map for Level {}\"", ".", "format", "(", "level", ")", ")", "\n", "gazeheatplot_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "\n", "__file__", ")", ")", ",", "\"..//GazePointHeatMap\"", ",", "\"gazeheatplot.py\"", ")", "\n", "subprocess", ".", "call", "(", "[", "\"python\"", ",", "gazeheatplot_path", ",", "os", ".", "path", ".", "join", "(", "folder_path", ",", "csv_name", ")", ",", "str", "(", "final_img", ".", "size", "[", "0", "]", ")", ",", "\n", "str", "(", "final_img", ".", "size", "[", "1", "]", ")", ",", "\n", "\"-a \"", "+", "str", "(", "alpha", ")", ",", "\"-o\"", "+", "os", ".", "path", ".", "join", "(", "folder_path", ",", "heatmap_name", ")", ",", "\"-b\"", "+", "os", ".", "path", ".", "join", "(", "folder_path", ",", "img_name", ")", ",", "\n", "\"-n\"", "+", "gaussian_matrix_size", ",", "\"-m\"", "+", "map_type", "]", ")", "\n", "# -sd 20 to be added later", "\n", "\n", "# if the heatmap is not found in the folder then it must be in directory the python subprocess was called from", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "heatmap_name", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "rename", "(", "heatmap_name", ",", "os", ".", "path", ".", "join", "(", "folder_path", ",", "heatmap_name", ")", ")", "\n", "# this exception is thrown when the heatmap was not generated for some reason", "\n", "", "except", "IOError", ":", "\n", "                ", "print", "(", "\"Error while generating map for Level {}\"", ".", "format", "(", "level", ")", ")", "\n", "continue", "\n", "\n", "", "", "print", "(", "\"Map saved as {}\"", ".", "format", "(", "map_type", "+", "\" \"", "+", "img_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.heatmap_generation.construct_image": [[133, 186], ["PIL.Image.new", "range", "range", "PIL.Image.open", "Image.new.paste", "os.path.join", "deep_zoom_object.get_tile", "Image.new.paste", "str", "str"], "function", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open"], ["", "", "def", "construct_image", "(", "tiles_directory", ",", "present_tiles", ",", "first_index", ",", "count", ",", "dimensions", ",", "first_dimensions", ",", "\n", "deep_zoom_object", "=", "None", ",", "level", "=", "0", ")", ":", "\n", "\n", "    ", "first_column", ",", "first_row", "=", "first_index", "\n", "column_count", ",", "row_count", "=", "count", "\n", "column_width", ",", "row_height", "=", "dimensions", "\n", "first_column_width", ",", "first_row_height", "=", "first_dimensions", "\n", "\n", "image_width", "=", "0", "\n", "image_height", "=", "0", "\n", "\n", "# first column/row have a different width/height than other tiles", "\n", "\n", "if", "first_column", "==", "0", ":", "\n", "        ", "image_width", "+=", "first_column_width", "\n", "column_count", "-=", "1", "\n", "", "if", "first_row", "==", "0", ":", "\n", "        ", "image_height", "+=", "first_row_height", "\n", "row_count", "-=", "1", "\n", "\n", "", "image_width", "+=", "column_count", "*", "column_width", "\n", "image_height", "+=", "row_count", "*", "row_height", "\n", "\n", "result", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "image_width", ",", "image_height", ")", ")", "\n", "\n", "current_x", "=", "0", "\n", "current_y", "=", "0", "\n", "\n", "\n", "\n", "\n", "for", "column", "in", "range", "(", "first_column", ",", "first_column", "+", "column_count", "+", "1", ")", ":", "\n", "        ", "prev", "=", "0", "\n", "current_y", "=", "0", "\n", "for", "row", "in", "range", "(", "first_row", ",", "first_row", "+", "row_count", "+", "1", ")", ":", "\n", "\n", "\n", "            ", "if", "(", "column", ",", "row", ")", "in", "present_tiles", ":", "\n", "                ", "tile_name", "=", "str", "(", "column", ")", "+", "'_'", "+", "str", "(", "row", ")", "+", "'.jpeg'", "\n", "\n", "tile", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "tiles_directory", ",", "tile_name", ")", ")", "\n", "result", ".", "paste", "(", "im", "=", "tile", ",", "box", "=", "(", "current_x", ",", "current_y", ")", ")", "\n", "\n", "# if the tile has not been generated previously, then  generate the tile", "\n", "", "elif", "deep_zoom_object", "is", "not", "None", ":", "\n", "                ", "tile", "=", "deep_zoom_object", ".", "get_tile", "(", "level", ",", "(", "column", ",", "row", ")", ")", "\n", "result", ".", "paste", "(", "im", "=", "tile", ",", "box", "=", "(", "current_x", ",", "current_y", ")", ")", "\n", "\n", "", "current_y", "+=", "tile", ".", "size", "[", "1", "]", "\n", "prev", "=", "tile", ".", "size", "[", "0", "]", "\n", "", "current_x", "+=", "prev", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.tracking.main": [[6, 52], ["print", "gp.gazepoint.GazePoint", "canvas.winfo_rootx", "canvas.winfo_rooty", "open", "open.close", "gp.gazepoint.GazePoint.stop", "canvas.winfo_reqwidth", "canvas.winfo_reqheight", "os.path.join", "gp.gazepoint.GazePoint.get_gaze_position", "time.sleep", "open.close", "open", "os.path.join", "open.write", "str", "str", "str", "str", "int", "int"], "function", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.stop", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.get_gaze_position", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open"], ["def", "main", "(", "interface", ",", "resolution", ")", ":", "\n", "# Gazepoint Control must be opened for tracking to work", "\n", "    ", "print", "(", "\"Import successful\"", ")", "\n", "gazetracker", "=", "gp", ".", "gazepoint", ".", "GazePoint", "(", ")", "\n", "tile_generator", "=", "interface", ".", "tile_generator", "\n", "canvas", "=", "interface", ".", "canvas", "\n", "box_coords", "=", "interface", ".", "box_coords", "\n", "folder_path", "=", "tile_generator", ".", "folder_path", "\n", "\n", "current_level", "=", "tile_generator", ".", "level", "\n", "previous_level", "=", "current_level", "\n", "\n", "canvas_start_x", "=", "canvas", ".", "winfo_rootx", "(", ")", "\n", "canvas_start_y", "=", "canvas", ".", "winfo_rooty", "(", ")", "\n", "canvas_end_x", "=", "canvas_start_x", "+", "canvas", ".", "winfo_reqwidth", "(", ")", "\n", "canvas_end_y", "=", "canvas_start_y", "+", "canvas", ".", "winfo_reqheight", "(", ")", "\n", "\n", "csv_output", "=", "open", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "\"Level \"", "+", "str", "(", "current_level", ")", "+", "\".csv\"", ")", ",", "\"a\"", ")", "\n", "\n", "while", "interface", ".", "is_tracking", ":", "\n", "        ", "box_coords", "=", "interface", ".", "box_coords", "\n", "previous_level", "=", "current_level", "\n", "current_level", "=", "tile_generator", ".", "level", "\n", "\n", "# if the level changes, close the old csv and open a new csv file", "\n", "if", "previous_level", "!=", "current_level", ":", "\n", "            ", "csv_output", ".", "close", "(", ")", "\n", "csv_output", "=", "open", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "\"Level \"", "+", "str", "(", "current_level", ")", "+", "\".csv\"", ")", ",", "\"a\"", ")", "\n", "\n", "", "x", ",", "y", "=", "gazetracker", ".", "get_gaze_position", "(", ")", "\n", "# returns a tuple with a value between 0 and 1, can also be negative if looking outside the screen", "\n", "if", "x", "is", "not", "None", "and", "y", "is", "not", "None", ":", "\n", "            ", "x", "*=", "resolution", "[", "0", "]", "\n", "y", "*=", "resolution", "[", "1", "]", "\n", "\n", "if", "x", ">=", "canvas_start_x", "and", "y", ">=", "canvas_start_y", "and", "x", "<=", "canvas_end_x", "and", "y", "<=", "canvas_end_y", ":", "\n", "# position of canvas on screen is subtracted so that", "\n", "# we can consider the top left of the viewer as the origin", "\n", "                ", "x", "=", "x", "-", "canvas_start_x", "+", "box_coords", "[", "0", "]", "\n", "y", "=", "y", "-", "canvas_start_y", "+", "box_coords", "[", "1", "]", "\n", "csv_output", ".", "write", "(", "str", "(", "int", "(", "x", ")", ")", "+", "\",\"", "+", "str", "(", "int", "(", "y", ")", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "csv_output", ".", "close", "(", ")", "\n", "gazetracker", ".", "stop", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.__init__": [[9, 85], ["app.App.root_window.title", "app.App.root_window.attributes", "app.App.root_window.config", "app.App.root_window.protocol", "tkinter.Frame", "app.App.frame2.config", "app.App.frame2.pack", "tkinter.Label", "app.App.zoomLabel.pack", "tkinter.Label", "app.App.fileLabel.pack", "tkinter.Button", "app.App.buttonClose.pack", "app.ResizingFrame", "app.App.frame.config", "app.App.frame.pack", "tkinter.Button", "tkinter.Canvas", "tkinter.Scrollbar", "app.App.hbar.pack", "app.App.hbar.config", "tkinter.Scrollbar", "app.App.vbar.pack", "app.App.vbar.config", "app.App.canvas.bind", "app.App.canvas.bind", "app.App.canvas.bind_all", "app.App.canvas.bind", "app.App.canvas.bind", "app.App.canvas.focus_set", "modules.dynamic_tiling.DynamicTiling", "app.App.set_scroll_region", "app.App.canvas.config", "app.App.canvas.pack", "app.App.canvas.winfo_reqwidth", "app.App.canvas.winfo_reqheight", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.set_scroll_region"], ["    ", "def", "__init__", "(", "self", ",", "root_window", ",", "deep_zoom_object", ",", "tiles_folder", ",", "level", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "root_window", "=", "root_window", "\n", "\n", "self", ".", "x", ",", "self", ".", "y", "=", "0", ",", "0", "\n", "\n", "# x coordinate at top-left, y coordinate at top-left,", "\n", "# x coordinate at bottom-right, y coordinate at bottom-right", "\n", "self", ".", "box_coords", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "\n", "self", ".", "root_window", ".", "title", "(", "\"Large Scale Image Viewer\"", ")", "\n", "self", ".", "root_window", ".", "attributes", "(", "\"-fullscreen\"", ",", "True", ")", "\n", "self", ".", "root_window", ".", "config", "(", "bg", "=", "'gray80'", ")", "\n", "self", ".", "root_window", ".", "protocol", "(", "\"WM_DELETE_WINDOW\"", ",", "self", ".", "on_closing", ")", "\n", "\n", "self", ".", "frame2", "=", "tk", ".", "Frame", "(", "self", ".", "root_window", ",", "width", "=", "50", ",", "height", "=", "50", ")", "\n", "self", ".", "frame2", ".", "config", "(", "bg", "=", "'gray80'", ")", "\n", "self", ".", "frame2", ".", "pack", "(", "fill", "=", "None", ",", "expand", "=", "False", ")", "\n", "\n", "self", ".", "zoomLabel", "=", "tk", ".", "Label", "(", "self", ".", "frame2", ",", "text", "=", "str", "(", "level", ")", "+", "\"x\"", ",", "bg", "=", "'gray90'", ",", "font", "=", "(", "\"Helvetica\"", ",", "14", ")", ",", "borderwidth", "=", "2", ",", "relief", "=", "\"groove\"", ")", "\n", "self", ".", "zoomLabel", ".", "pack", "(", "side", "=", "tk", ".", "LEFT", ",", "padx", "=", "(", "5", ",", "5", ")", ",", "pady", "=", "(", "15", ",", "15", ")", ")", "\n", "\n", "self", ".", "fileLabel", "=", "tk", ".", "Label", "(", "self", ".", "frame2", ",", "text", "=", "str", "(", "\"Source:\\n\"", "+", "self", ".", "root_window", ".", "file_name", ")", ",", "bg", "=", "'gray90'", ",", "font", "=", "(", "\"Helvetica\"", ",", "14", ")", ",", "borderwidth", "=", "2", ",", "relief", "=", "\"groove\"", ")", "\n", "self", ".", "fileLabel", ".", "pack", "(", "side", "=", "tk", ".", "LEFT", ",", "padx", "=", "(", "5", ",", "5", ")", ",", "pady", "=", "(", "15", ",", "15", ")", ")", "\n", "\n", "self", ".", "buttonClose", "=", "tk", ".", "Button", "(", "self", ".", "frame2", ",", "text", "=", "\"Close\"", ",", "command", "=", "self", ".", "on_closing", ")", "\n", "self", ".", "buttonClose", ".", "pack", "(", "side", "=", "tk", ".", "LEFT", ",", "padx", "=", "(", "5", ",", "5", ")", ",", "pady", "=", "(", "15", ",", "15", ")", ")", "\n", "\n", "self", ".", "frame", "=", "ResizingFrame", "(", "self", ".", "root_window", ",", "self", ")", "\n", "self", ".", "frame", ".", "config", "(", "bg", "=", "'gray80'", ")", "\n", "self", ".", "frame", ".", "pack", "(", "fill", "=", "tk", ".", "BOTH", ",", "expand", "=", "tk", ".", "YES", ")", "\n", "\n", "self", ".", "button1", "=", "tk", ".", "Button", "(", "self", ".", "frame", ",", "text", "=", "'Button1'", ")", "\n", "\n", "self", ".", "canvas", "=", "tk", ".", "Canvas", "(", "self", ".", "frame", ",", "bg", "=", "\"gray90\"", ",", "width", "=", "800", ",", "height", "=", "600", ")", "\n", "\n", "# set up the horizontal scroll bar", "\n", "self", ".", "hbar", "=", "tk", ".", "Scrollbar", "(", "self", ".", "frame", ",", "orient", "=", "tk", ".", "HORIZONTAL", ")", "\n", "self", ".", "hbar", ".", "pack", "(", "side", "=", "tk", ".", "BOTTOM", ",", "fill", "=", "tk", ".", "X", ")", "\n", "self", ".", "hbar", ".", "config", "(", "command", "=", "self", ".", "__scroll_x", ")", "\n", "\n", "# set up the vertical scroll bar", "\n", "self", ".", "vbar", "=", "tk", ".", "Scrollbar", "(", "self", ".", "frame", ",", "orient", "=", "tk", ".", "VERTICAL", ")", "\n", "self", ".", "vbar", ".", "pack", "(", "side", "=", "tk", ".", "RIGHT", ",", "fill", "=", "tk", ".", "Y", ")", "\n", "self", ".", "vbar", ".", "config", "(", "command", "=", "self", ".", "__scroll_y", ")", "\n", "\n", "# Sets the anchor which can be used to move the canvas if the mouse is dragged.", "\n", "self", ".", "canvas", ".", "bind", "(", "'<ButtonPress-1>'", ",", "self", ".", "move_from", ")", "\n", "# Move canvas to the new position using the anchor.", "\n", "self", ".", "canvas", ".", "bind", "(", "'<B1-Motion>'", ",", "self", ".", "move_to", ")", "\n", "# zoom for Windows and MacOS, but not Linux", "\n", "self", ".", "canvas", ".", "bind_all", "(", "\"<MouseWheel>\"", ",", "self", ".", "__wheel", ")", "\n", "# zoom for Linux, wheel scroll up", "\n", "self", ".", "canvas", ".", "bind", "(", "'<Button-4>'", ",", "self", ".", "__wheelup", ")", "\n", "# zoom for Linux, wheel scroll down", "\n", "self", ".", "canvas", ".", "bind", "(", "'<Button-5>'", ",", "self", ".", "__wheeldown", ")", "\n", "\n", "self", ".", "canvas", ".", "focus_set", "(", ")", "\n", "\n", "self", ".", "start_x", "=", "None", "\n", "self", ".", "start_y", "=", "None", "\n", "\n", "self", ".", "deep_zoom_object", "=", "deep_zoom_object", "\n", "\n", "# the dynamic tile generator, responsible for providing the image to the canvas to display", "\n", "# TODO: The value it is initialized with might not always remain the same", "\n", "self", ".", "tile_generator", "=", "dynamic_tiling", ".", "DynamicTiling", "(", "\n", "deep_zoom_object", ",", "level", ",", "self", ".", "canvas", ".", "winfo_reqwidth", "(", ")", ",", "self", ".", "canvas", ".", "winfo_reqheight", "(", ")", ",", "tiles_folder", ")", "\n", "\n", "# top left coordinate of the current selection relative to the svs file", "\n", "# (-1, -1) is used as the initial value since it cannot occur naturally", "\n", "self", ".", "top_left", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "\n", "self", ".", "set_scroll_region", "(", ")", "\n", "self", ".", "canvas", ".", "config", "(", "xscrollcommand", "=", "self", ".", "hbar", ".", "set", ",", "yscrollcommand", "=", "self", ".", "vbar", ".", "set", ")", "\n", "self", ".", "canvas", ".", "pack", "(", "expand", "=", "tk", ".", "YES", ",", "fill", "=", "tk", ".", "BOTH", ",", "padx", "=", "(", "100", ",", "100", ")", ",", "pady", "=", "(", "0", ",", "10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.set_scroll_region": [[86, 89], ["app.App.tile_generator.get_dim", "app.App.canvas.config"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.get_dim"], ["", "def", "set_scroll_region", "(", "self", ")", ":", "\n", "        ", "dim", "=", "self", ".", "tile_generator", ".", "get_dim", "(", ")", "\n", "self", ".", "canvas", ".", "config", "(", "scrollregion", "=", "(", "0", ",", "0", ",", "dim", "[", "0", "]", ",", "dim", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.__scroll_x": [[90, 94], ["app.App.canvas.xview", "app.App.draw_image_on_canvas"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["", "def", "__scroll_x", "(", "self", ",", "*", "args", ")", ":", "\n", "# scroll canvas horizontally and redraw the image", "\n", "        ", "self", ".", "canvas", ".", "xview", "(", "*", "args", ")", "\n", "self", ".", "draw_image_on_canvas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.__scroll_y": [[95, 99], ["app.App.canvas.yview", "app.App.draw_image_on_canvas"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["", "def", "__scroll_y", "(", "self", ",", "*", "args", ")", ":", "\n", "# scroll canvas horizontally and redraw the image", "\n", "        ", "self", ".", "canvas", ".", "yview", "(", "*", "args", ")", "\n", "self", ".", "draw_image_on_canvas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.zoom": [[100, 153], ["app.App.canvas.canvasx", "app.App.canvas.canvasy", "app.App.tile_generator.get_dim", "app.App.tile_generator.change_level", "app.App.zoomLabel.config", "app.App.tile_generator.get_dim", "app.App.get_image", "PIL.ImageTk.PhotoImage", "app.App.canvas.delete", "app.App.canvas.create_image", "app.App.canvas.config", "app.App.canvas.xview_moveto", "app.App.canvas.yview_moveto", "app.App.draw_image_on_canvas", "float", "float", "float", "float", "max", "max", "str"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.get_dim", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.change_level", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.get_dim", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.get_image", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["", "def", "zoom", "(", "self", ",", "event", ",", "change", ")", ":", "\n", "# get coordinates of the event on the canvas", "\n", "        ", "x", "=", "self", ".", "canvas", ".", "canvasx", "(", "event", ".", "x", ")", "\n", "y", "=", "self", ".", "canvas", ".", "canvasy", "(", "event", ".", "y", ")", "\n", "\n", "old_dim", "=", "self", ".", "tile_generator", ".", "get_dim", "(", ")", "\n", "\n", "# change the level in the tile generator to the new level", "\n", "self", ".", "tile_generator", ".", "change_level", "(", "self", ".", "tile_generator", ".", "level", "+", "change", ")", "\n", "self", ".", "zoomLabel", ".", "config", "(", "text", "=", "str", "(", "self", ".", "tile_generator", ".", "level", ")", "+", "\"x\"", ")", "\n", "\n", "# get new image dimensions after level change", "\n", "new_dim", "=", "self", ".", "tile_generator", ".", "get_dim", "(", ")", "\n", "\n", "# find the ratio increase/decrease in width and height", "\n", "ratio_w", "=", "float", "(", "new_dim", "[", "0", "]", ")", "/", "float", "(", "old_dim", "[", "0", "]", ")", "\n", "ratio_h", "=", "float", "(", "new_dim", "[", "1", "]", ")", "/", "float", "(", "old_dim", "[", "1", "]", ")", "\n", "\n", "# calculate new centre for the mouse after zooming in/out", "\n", "centre_x", "=", "x", "*", "ratio_w", "\n", "centre_y", "=", "y", "*", "ratio_h", "\n", "\n", "# calculate the new top left for the canvas using the new centre", "\n", "canvas_top_left", "=", "(", "max", "(", "0", ",", "centre_x", "-", "(", "self", ".", "frame", ".", "width", "//", "2", ")", ")", ",", "\n", "max", "(", "0", ",", "centre_y", "-", "(", "self", ".", "frame", ".", "height", "//", "2", ")", ")", ")", "\n", "\n", "self", ".", "box_coords", "=", "(", "canvas_top_left", "[", "0", "]", ",", "canvas_top_left", "[", "1", "]", ",", "\n", "canvas_top_left", "[", "0", "]", "+", "self", ".", "frame", ".", "width", ",", "canvas_top_left", "[", "1", "]", "+", "self", ".", "frame", ".", "height", ")", "\n", "\n", "# reset the top left", "\n", "self", ".", "top_left", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "\n", "# the draw_image_on_canvas function cannot be used since this needs to scroll the canvas too", "\n", "image", ",", "self", ".", "top_left", "=", "self", ".", "get_image", "(", "self", ".", "box_coords", ")", "\n", "\n", "self", ".", "image", "=", "ImageTk", ".", "PhotoImage", "(", "image", "=", "image", ")", "\n", "\n", "# delete the old image and set the new image", "\n", "self", ".", "canvas", ".", "delete", "(", "\"all\"", ")", "\n", "self", ".", "image_on_canvas", "=", "self", ".", "canvas", ".", "create_image", "(", "\n", "canvas_top_left", "[", "0", "]", ",", "canvas_top_left", "[", "1", "]", ",", "image", "=", "self", ".", "image", ",", "anchor", "=", "\"nw\"", ")", "\n", "\n", "scrollbar_x", "=", "canvas_top_left", "[", "0", "]", "/", "new_dim", "[", "0", "]", "\n", "scrollbar_y", "=", "canvas_top_left", "[", "1", "]", "/", "new_dim", "[", "1", "]", "\n", "\n", "# set new dimensions as scroll region", "\n", "self", ".", "canvas", ".", "config", "(", "scrollregion", "=", "(", "0", ",", "0", ",", "new_dim", "[", "0", "]", ",", "new_dim", "[", "1", "]", ")", ")", "\n", "\n", "# move the canvas to the calculated coordinates", "\n", "self", ".", "canvas", ".", "xview_moveto", "(", "scrollbar_x", ")", "\n", "self", ".", "canvas", ".", "yview_moveto", "(", "scrollbar_y", ")", "\n", "\n", "self", ".", "draw_image_on_canvas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.__wheel": [[155, 162], ["app.App.zoom"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.zoom"], ["", "def", "__wheel", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "event", ".", "delta", "==", "-", "120", ":", "# zoom out", "\n", "            ", "change", "=", "-", "1", "\n", "", "else", ":", "# zoom in", "\n", "            ", "change", "=", "+", "1", "\n", "\n", "", "self", ".", "zoom", "(", "event", ",", "change", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.__wheelup": [[164, 166], ["app.App.zoom"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.zoom"], ["", "def", "__wheelup", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "zoom", "(", "event", ",", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.__wheeldown": [[168, 170], ["app.App.zoom"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.zoom"], ["", "def", "__wheeldown", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "zoom", "(", "event", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.move_from": [[171, 174], ["app.App.canvas.scan_mark"], "methods", ["None"], ["", "def", "move_from", "(", "self", ",", "event", ")", ":", "\n", "# scan_mark sets the anchor for the scan_dragto function to use.", "\n", "        ", "self", ".", "canvas", ".", "scan_mark", "(", "event", ".", "x", ",", "event", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.move_to": [[175, 179], ["app.App.canvas.scan_dragto", "app.App.draw_image_on_canvas"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["", "def", "move_to", "(", "self", ",", "event", ")", ":", "\n", "# drag (move) canvas to the new position", "\n", "        ", "self", ".", "canvas", ".", "scan_dragto", "(", "event", ".", "x", ",", "event", ".", "y", ",", "gain", "=", "1", ")", "\n", "self", ".", "draw_image_on_canvas", "(", ")", "# redraw the image", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas": [[180, 209], ["app.App.get_image", "app.App.canvas.canvasx", "app.App.canvas.canvasy", "app.App.canvas.delete", "PIL.ImageTk.PhotoImage", "app.App.canvas.create_image"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.get_image"], ["", "def", "draw_image_on_canvas", "(", "self", ",", "force_generation", "=", "False", ")", ":", "\n", "        ", "\"\"\"Draws the image on the canvas.\n        Args:\n            force_generation: Is True if the image should be re-generated even if the bounds are same as before.\n        \"\"\"", "\n", "\n", "self", ".", "canvas_vertex", "=", "(", "self", ".", "canvas", ".", "canvasx", "(", "0", ")", ",", "self", ".", "canvas", ".", "canvasy", "(", "0", ")", ")", "\n", "box_coords", "=", "(", "self", ".", "canvas_vertex", "[", "0", "]", ",", "self", ".", "canvas_vertex", "[", "1", "]", ",", "\n", "self", ".", "canvas_vertex", "[", "0", "]", "+", "self", ".", "frame", ".", "width", ",", "self", ".", "canvas_vertex", "[", "1", "]", "+", "self", ".", "frame", ".", "height", ")", "\n", "\n", "# some weird bug with canvas being 0 when scrolling back to origin", "\n", "if", "box_coords", "[", "0", "]", "==", "-", "1", ":", "\n", "            ", "box_coords", "=", "(", "box_coords", "[", "0", "]", "+", "1", ",", "box_coords", "[", "1", "]", ",", "box_coords", "[", "2", "]", "+", "1", ",", "box_coords", "[", "3", "]", ")", "\n", "\n", "", "if", "box_coords", "[", "1", "]", "==", "-", "1", ":", "\n", "            ", "box_coords", "=", "(", "box_coords", "[", "0", "]", ",", "box_coords", "[", "1", "]", "+", "1", ",", "box_coords", "[", "2", "]", ",", "box_coords", "[", "3", "]", "+", "1", ")", "\n", "\n", "", "self", ".", "box_coords", "=", "box_coords", "\n", "\n", "image", ",", "self", ".", "top_left", "=", "self", ".", "get_image", "(", "box_coords", ",", "force_generation", "=", "force_generation", ")", "\n", "\n", "if", "image", "is", "not", "None", ":", "\n", "            ", "self", ".", "canvas", ".", "delete", "(", "\"all\"", ")", "\n", "\n", "# this ownership is necessary, or the image does not show up on the canvas", "\n", "self", ".", "image", "=", "ImageTk", ".", "PhotoImage", "(", "image", "=", "image", ")", "\n", "\n", "self", ".", "image_on_canvas", "=", "self", ".", "canvas", ".", "create_image", "(", "\n", "self", ".", "top_left", "[", "0", "]", ",", "self", ".", "top_left", "[", "1", "]", ",", "image", "=", "self", ".", "image", ",", "anchor", "=", "\"nw\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.get_image": [[211, 213], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "get_image", "(", "self", ",", "box_coords", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.generate_heatmap": [[214, 216], ["modules.heatmap_generation.generate_heatmap"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.generate_heatmap"], ["", "def", "generate_heatmap", "(", "self", ",", "event", ")", ":", "\n", "        ", "heatmap_generation", ".", "generate_heatmap", "(", "self", ".", "deep_zoom_object", ",", "self", ".", "tile_generator", ".", "folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.on_closing": [[217, 220], ["tkinter.messagebox.askokcancel", "app.App.root_window.destroy"], "methods", ["None"], ["", "def", "on_closing", "(", "self", ")", ":", "\n", "        ", "if", "messagebox", ".", "askokcancel", "(", "\"Quit\"", ",", "\"Do you really wish to quit?\"", ")", ":", "\n", "            ", "self", ".", "root_window", ".", "destroy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.ResizingFrame.__init__": [[224, 230], ["tkinter.Frame.__init__", "app.ResizingFrame.bind", "app.ResizingFrame.winfo_reqheight", "app.ResizingFrame.winfo_reqwidth"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "app", ",", "**", "kwargs", ")", ":", "\n", "        ", "tk", ".", "Frame", ".", "__init__", "(", "self", ",", "parent", ",", "**", "kwargs", ")", "\n", "self", ".", "app", "=", "app", "\n", "self", ".", "bind", "(", "\"<Configure>\"", ",", "self", ".", "on_resize", ")", "\n", "self", ".", "height", "=", "self", ".", "winfo_reqheight", "(", ")", "\n", "self", ".", "width", "=", "self", ".", "winfo_reqwidth", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.ResizingFrame.on_resize": [[231, 245], ["canvas.config", "canvas.config", "print", "app.ResizingFrame.app.draw_image_on_canvas", "app.ResizingFrame.winfo_children"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.app.App.draw_image_on_canvas"], ["", "def", "on_resize", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "width", "=", "event", ".", "width", "\n", "self", ".", "height", "=", "event", ".", "height", "\n", "canvas", "=", "self", ".", "winfo_children", "(", ")", "[", "0", "]", "# TODO: add a better check for this", "\n", "canvas", ".", "config", "(", "width", "=", "self", ".", "width", ")", "\n", "canvas", ".", "config", "(", "height", "=", "self", ".", "height", ")", "\n", "\n", "print", "(", "\"width changed to {} height changed to {}\"", ".", "format", "(", "\n", "self", ".", "width", ",", "self", ".", "height", ")", ")", "\n", "\n", "# when the frame is resized, change the dimensions in the app and re-generate the image", "\n", "self", ".", "app", ".", "tile_generator", ".", "frame_width", "=", "self", ".", "width", "\n", "self", ".", "app", ".", "tile_generator", ".", "frame_height", "=", "self", ".", "height", "\n", "self", ".", "app", ".", "draw_image_on_canvas", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.__init__": [[11, 27], ["dynamic_tiling.DynamicTiling.get_file_details", "os.path.join", "os.path.join", "str", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.get_file_details"], ["    ", "def", "__init__", "(", "self", ",", "deep_zoom_object", ",", "level", ",", "canvas_width", ",", "canvas_height", ",", "folder_path", ")", ":", "\n", "        ", "self", ".", "deep_zoom", "=", "deep_zoom_object", "\n", "self", ".", "max_level", "=", "deep_zoom_object", ".", "level_count", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "canvas_width", "=", "canvas_width", "\n", "self", ".", "canvas_height", "=", "canvas_height", "\n", "self", ".", "file_extension", "=", "'.jpeg'", "\n", "self", ".", "images_width", ",", "self", ".", "images_height", "=", "self", ".", "get_file_details", "(", ")", "\n", "self", ".", "folder_path", "=", "folder_path", "\n", "self", ".", "tiles_folder_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'tiles'", ")", "\n", "self", ".", "level_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tiles_folder_path", ",", "str", "(", "level", ")", ")", "\n", "self", ".", "tiles_generated", "=", "{", "}", "\n", "\n", "# Create the directory if it does not exist.", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "level_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "level_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.get_dim": [[28, 30], ["None"], "methods", ["None"], ["", "", "def", "get_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deep_zoom", ".", "level_dimensions", "[", "self", ".", "level", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.get_file_details": [[32, 65], ["numpy.zeros", "numpy.zeros", "dynamic_tiling.DynamicTiling.deep_zoom.get_tile_dimensions", "dynamic_tiling.DynamicTiling.deep_zoom.get_tile_dimensions", "dynamic_tiling.DynamicTiling.deep_zoom.get_tile_dimensions"], "methods", ["None"], ["", "def", "get_file_details", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "columns", ",", "self", ".", "rows", "=", "self", ".", "deep_zoom", ".", "level_tiles", "[", "self", ".", "level", "]", "\n", "images_width", "=", "np", ".", "zeros", "(", "(", "self", ".", "columns", ",", "self", ".", "rows", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "images_height", "=", "np", ".", "zeros", "(", "(", "self", ".", "columns", ",", "self", ".", "rows", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "width", ",", "height", "=", "self", ".", "deep_zoom", ".", "get_tile_dimensions", "(", "\n", "self", ".", "level", ",", "(", "0", ",", "0", ")", ")", "# top left tile", "\n", "self", ".", "first_column_width", "=", "width", "\n", "self", ".", "first_row_height", "=", "height", "\n", "\n", "# the if is needed for images where there is only one tile, (0, 0)", "\n", "if", "self", ".", "columns", ">", "1", "and", "self", ".", "rows", ">", "1", ":", "\n", "\n", "            ", "width", ",", "height", "=", "self", ".", "deep_zoom", ".", "get_tile_dimensions", "(", "self", ".", "level", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "column_width", "=", "width", "\n", "self", ".", "row_height", "=", "height", "\n", "images_width", "[", ":", ",", ":", "]", "=", "width", "\n", "images_height", "[", ":", ",", ":", "]", "=", "height", "\n", "", "else", ":", "\n", "            ", "self", ".", "column_width", "=", "self", ".", "first_column_width", "\n", "self", ".", "row_height", "=", "self", ".", "first_row_height", "\n", "\n", "", "images_width", "[", ":", ",", "0", "]", "=", "width", "\n", "images_height", "[", "0", ",", ":", "]", "=", "height", "\n", "\n", "width", ",", "height", "=", "self", ".", "deep_zoom", ".", "get_tile_dimensions", "(", "\n", "self", ".", "level", ",", "(", "self", ".", "columns", "-", "1", ",", "self", ".", "rows", "-", "1", ")", ")", "# bottom right tile", "\n", "\n", "images_width", "[", ":", ",", "-", "1", "]", "=", "width", "\n", "images_height", "[", "-", "1", ",", ":", "]", "=", "height", "\n", "\n", "return", "images_width", ",", "images_height", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.generate_image": [[66, 138], ["dynamic_tiling.DynamicTiling.get_dim", "int", "int", "dynamic_tiling.DynamicTiling.stitch_parts", "int", "int", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.get_dim", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.stitch_parts"], ["", "def", "generate_image", "(", "self", ",", "image_bounds", ",", "previous_top_left", ",", "force_generation", "=", "False", ")", ":", "\n", "\n", "        ", "image_dimensions", "=", "self", ".", "get_dim", "(", ")", "\n", "\n", "# the number of pixels from the left border to the left most column", "\n", "left_column", "=", "image_bounds", "[", "0", "]", "\n", "\n", "if", "left_column", "<", "0", ":", "\n", "            ", "left_column", "=", "0", "\n", "\n", "# the number of columns from the border to the left most column", "\n", "", "first_column", "=", "0", "\n", "if", "left_column", ">=", "self", ".", "first_column_width", ":", "# first_column_width is included in left_column", "\n", "            ", "first_column", "+=", "1", "\n", "left_column", "-=", "self", ".", "first_column_width", "\n", "", "first_column", "+=", "int", "(", "left_column", "//", "self", ".", "column_width", ")", "\n", "\n", "# the number of pixels from the left border to the right most column", "\n", "right_column", "=", "image_bounds", "[", "2", "]", "\n", "\n", "# the 1 is added because of the first column", "\n", "# the ceil function ensures the last column with width < column_width is included", "\n", "# the 2 is added because i dunno why it leaves empty space otherwise :/", "\n", "# Ceil returns a float in Python 2.x, which needs to be converted.", "\n", "last_column", "=", "int", "(", "ceil", "(", "(", "right_column", "-", "self", ".", "first_column_width", ")", "/", "self", ".", "column_width", ")", ")", "+", "1", "+", "2", "\n", "if", "last_column", ">=", "self", ".", "columns", ":", "\n", "            ", "last_column", "=", "self", ".", "columns", "-", "1", "\n", "\n", "# the number of pixels from the top border to the top most row", "\n", "", "top_row", "=", "image_bounds", "[", "1", "]", "\n", "\n", "if", "top_row", "<", "0", ":", "\n", "            ", "top_row", "=", "0", "\n", "\n", "# the number of rows from the border to the top most row", "\n", "", "first_row", "=", "0", "\n", "if", "top_row", ">=", "self", ".", "first_row_height", ":", "# first_row_height is included in top_row", "\n", "            ", "first_row", "+=", "1", "\n", "top_row", "-=", "self", ".", "first_row_height", "\n", "", "first_row", "+=", "int", "(", "top_row", "//", "self", ".", "row_height", ")", "\n", "\n", "# the number of pixels from the top border to the bottom most row", "\n", "bottom_row", "=", "image_bounds", "[", "3", "]", "\n", "\n", "# the 1 is added because of the first row", "\n", "# the ceil function ensures the last row with height < row_height is included", "\n", "# Ceil returns a float in Python 2.x, which needs to be converted.", "\n", "last_row", "=", "int", "(", "ceil", "(", "(", "bottom_row", "-", "self", ".", "first_row_height", ")", "/", "self", ".", "row_height", ")", ")", "+", "1", "\n", "if", "last_row", ">=", "self", ".", "rows", ":", "\n", "            ", "last_row", "=", "self", ".", "rows", "-", "1", "\n", "\n", "", "top_left", "=", "(", "0", ",", "0", ")", "\n", "\n", "if", "first_column", "!=", "0", ":", "\n", "            ", "top_left", "=", "(", "self", ".", "first_column_width", "+", "(", "first_column", "-", "1", ")", "*", "self", ".", "column_width", ",", "top_left", "[", "1", "]", ")", "\n", "\n", "", "if", "first_row", "!=", "0", ":", "\n", "            ", "top_left", "=", "(", "top_left", "[", "0", "]", ",", "self", ".", "first_row_height", "+", "(", "first_row", "-", "1", ")", "*", "self", ".", "row_height", ")", "\n", "\n", "# None is returned if the top left coordinate has not change,", "\n", "# since the image will be the same and it does not need to be processed again", "\n", "# This condition is ignored if force_genration is True.", "\n", "", "if", "top_left", "==", "previous_top_left", "and", "top_left", "!=", "(", "0", ",", "0", ")", "and", "not", "force_generation", ":", "\n", "            ", "return", "None", ",", "top_left", "\n", "\n", "", "if", "(", "image_dimensions", "[", "0", "]", "<", "self", ".", "canvas_width", "and", "image_dimensions", "[", "1", "]", "<", "self", ".", "canvas_height", ")", ":", "\n", "            ", "first_row", "=", "0", "\n", "first_column", "=", "0", "\n", "\n", "", "img", "=", "self", ".", "stitch_parts", "(", "first_column", ",", "last_column", ",", "first_row", ",", "last_row", ")", "\n", "\n", "return", "img", ",", "top_left", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.stitch_parts": [[139, 167], ["dynamic_tiling.DynamicTiling.generate_with_threads", "dynamic_tiling.split_list", "min", "range", "modules.stitch.join_horizontally", "image_columns.append", "len", "numpy.array", "range", "range", "modules.stitch.join_vertically", "str", "str", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.generate_with_threads", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.split_list", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.join_horizontally", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.join_vertically"], ["", "def", "stitch_parts", "(", "self", ",", "first_column", ",", "last_column", ",", "first_row", ",", "last_row", ")", ":", "\n", "\n", "# the list of files required", "\n", "        ", "files_list", "=", "[", "str", "(", "column", ")", "+", "'_'", "+", "str", "(", "row", ")", "+", "self", ".", "file_extension", "\n", "for", "column", "in", "range", "(", "first_column", ",", "last_column", "+", "1", ")", "\n", "for", "row", "in", "range", "(", "first_row", ",", "last_row", "+", "1", ")", "]", "\n", "self", ".", "generate_with_threads", "(", "self", ".", "level_path", ",", "files_list", ",", "num_threads", "=", "3", ")", "\n", "\n", "# split the list so that each part consists of tiles of 1 column", "\n", "files_list", "=", "split_list", "(", "files_list", ",", "last_column", "-", "first_column", "+", "1", ")", "\n", "\n", "image_columns", "=", "[", "]", "\n", "\n", "# join the tiles into columns", "\n", "for", "column", "in", "files_list", ":", "\n", "            ", "image_columns", ".", "append", "(", "stitch", ".", "join_vertically", "(", "self", ".", "level_path", ",", "column", ")", ")", "\n", "\n", "", "minColumn", "=", "min", "(", "[", "(", "(", "np", ".", "array", "(", "i", ")", ")", ".", "shape", "[", "0", "]", ")", "for", "i", "in", "image_columns", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "image_columns", ")", ")", ":", "\n", "            ", "npArray", "=", "np", ".", "array", "(", "image_columns", "[", "i", "]", ")", "\n", "if", "(", "npArray", ".", "shape", "[", "0", "]", ">", "minColumn", ")", ":", "\n", "                ", "image_columns", "[", "i", "]", "=", "npArray", "[", ":", "minColumn", "]", "\n", "\n", "# stitch all the columns to form the image", "\n", "", "", "img", "=", "stitch", ".", "join_horizontally", "(", "image_columns", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.generate_with_threads": [[168, 181], ["dynamic_tiling.split_list", "range", "threading.Thread", "threading.Thread.start", "threads.append", "threading.Thread.join", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.split_list"], ["", "def", "generate_with_threads", "(", "self", ",", "path", ",", "file_names", ",", "num_threads", "=", "1", ")", ":", "\n", "# split the file names into 'thread' parts", "\n", "        ", "file_names", "=", "split_list", "(", "file_names", ",", "num_threads", ")", "\n", "threads", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_threads", ")", ":", "\n", "# create a thread with a partial function", "\n", "            ", "t", "=", "Thread", "(", "target", "=", "partial", "(", "self", ".", "generate_tiles", ",", "path", ",", "file_names", "[", "i", "]", ")", ")", "\n", "t", ".", "start", "(", ")", "# start the thread", "\n", "threads", ".", "append", "(", "t", ")", "\n", "\n", "", "for", "t", "in", "threads", ":", "# call to join is blocked until the thread finishes execution", "\n", "            ", "t", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.generate_tiles": [[182, 191], ["dynamic_tiling.DynamicTiling.tiles_generated.setdefault", "os.path.isfile", "file.split", "dynamic_tiling.DynamicTiling.append", "dynamic_tiling.DynamicTiling.deep_zoom.get_tile", "dynamic_tiling.DynamicTiling.save", "os.path.join", "row.split", "os.path.join", "int", "int", "int", "int"], "methods", ["None"], ["", "", "def", "generate_tiles", "(", "self", ",", "path", ",", "file_names", ")", ":", "\n", "        ", "current_level_tiles", "=", "self", ".", "tiles_generated", ".", "setdefault", "(", "self", ".", "level", ",", "[", "]", ")", "\n", "for", "file", "in", "file_names", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "level_path", ",", "file", ")", ")", ":", "\n", "                ", "column", ",", "row", "=", "file", ".", "split", "(", "'_'", ")", "\n", "row", "=", "row", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "current_level_tiles", ".", "append", "(", "(", "int", "(", "row", ")", ",", "int", "(", "column", ")", ")", ")", "\n", "image", "=", "self", ".", "deep_zoom", ".", "get_tile", "(", "self", ".", "level", ",", "(", "int", "(", "column", ")", ",", "int", "(", "row", ")", ")", ")", "\n", "image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "file", ")", ",", "\"JPEG\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.change_level": [[192, 207], ["print", "os.path.join", "dynamic_tiling.DynamicTiling.get_file_details", "str", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.get_file_details"], ["", "", "", "def", "change_level", "(", "self", ",", "new_level", ")", ":", "\n", "# check bounds", "\n", "        ", "if", "new_level", "<", "self", ".", "max_level", "and", "new_level", ">=", "0", ":", "\n", "            ", "self", ".", "level", "=", "new_level", "\n", "print", "(", "\"Now on level: {}\"", ".", "format", "(", "new_level", ")", ")", "\n", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tiles_folder_path", ",", "str", "(", "new_level", ")", ")", "\n", "\n", "# Create the directory if it does not exist.", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "new_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "new_path", ")", "\n", "\n", "# set the path to the new path", "\n", "", "self", ".", "level_path", "=", "new_path", "\n", "self", ".", "images_width", ",", "self", ".", "images_height", "=", "self", ".", "get_file_details", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.split_list": [[210, 219], ["range", "output_list.append", "len", "output_list.append"], "function", ["None"], ["", "", "", "def", "split_list", "(", "input_list", ",", "parts", ")", ":", "\n", "    ", "part_length", "=", "len", "(", "input_list", ")", "//", "parts", "\n", "output_list", "=", "[", "]", "\n", "# iterate to 1 less so that remaining elements can be appended at the end", "\n", "for", "i", "in", "range", "(", "parts", "-", "1", ")", ":", "\n", "        ", "output_list", ".", "append", "(", "input_list", "[", "i", "*", "part_length", ":", "(", "i", "+", "1", ")", "*", "part_length", "]", ")", "\n", "# append what is left of the list", "\n", "", "output_list", ".", "append", "(", "input_list", "[", "(", "parts", "-", "1", ")", "*", "part_length", ":", "]", ")", "\n", "return", "output_list", "", "", ""]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.join_vertically": [[9, 20], ["stitch.read_files", "min", "range", "numpy.concatenate", "len"], "function", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.read_files"], ["def", "join_vertically", "(", "dir_path", ",", "files", ")", ":", "\n", "    ", "files_arr", "=", "read_files", "(", "dir_path", ",", "files", ")", "\n", "\n", "#Calculating minimum width for each part in order to avoid concatenation shape mismatch", "\n", "minWidth", "=", "min", "(", "[", "(", "i", ".", "shape", "[", "1", "]", ")", "for", "i", "in", "files_arr", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "files_arr", ")", ")", ":", "\n", "            ", "if", "(", "files_arr", "[", "i", "]", ".", "shape", "[", "1", "]", ">", "minWidth", ")", ":", "\n", "                ", "files_arr", "[", "i", "]", "=", "(", "files_arr", "[", "i", "]", ")", "[", ":", ",", ":", "minWidth", "]", "\n", "\n", "", "", "final_image", "=", "np", ".", "concatenate", "(", "files_arr", ")", "\n", "return", "final_image", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.join_horizontally": [[22, 25], ["numpy.concatenate", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "join_horizontally", "(", "parts", ")", ":", "\n", "    ", "par", "=", "np", ".", "concatenate", "(", "parts", ",", "axis", "=", "1", ")", "\n", "return", "Image", ".", "fromarray", "(", "par", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.read_files": [[27, 33], ["cv2.cvtColor", "files_array.append", "cv2.imread", "os.path.join"], "function", ["None"], ["", "def", "read_files", "(", "path", ",", "files", ")", ":", "\n", "    ", "files_array", "=", "[", "]", "\n", "for", "i", "in", "files", ":", "\n", "        ", "img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "path", ",", "i", ")", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "files_array", ".", "append", "(", "img", ")", "\n", "", "return", "files_array", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.__find_shape": [[35, 43], ["stitch.read_files", "int"], "function", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.read_files"], ["", "def", "__find_shape", "(", "path", ",", "files", ")", ":", "\n", "    ", "rows", ",", "columns", "=", "0", "\n", "files_arr", "=", "read_files", "(", "path", ",", "files", ")", "\n", "for", "img", "in", "files_arr", ":", "\n", "        ", "rows", "+=", "img", ".", "shape", "[", "0", "]", "\n", "if", "int", "(", "img", ".", "shape", "[", "1", "]", ")", ">", "columns", ":", "\n", "            ", "columns", "=", "img", ".", "shape", "[", "1", "]", "\n", "", "", "return", "(", "rows", ",", "columns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.stitch.save_img": [[45, 47], ["image.save"], "function", ["None"], ["", "def", "save_img", "(", "image", ",", "name", ")", ":", "\n", "    ", "image", ".", "save", "(", "name", "+", "\".png\"", ")", "", "", ""]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.utils.set_up_folder": [[8, 30], ["os.path.join", "os.makedirs", "range", "os.path.dirname", "datetime.datetime.now().strftime", "level_details.append", "open", "json.dump", "info.close", "os.path.abspath", "os.path.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.gazepoint.GazePoint.open", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.gazepoint.tools.OpenGazeTracker.close"], ["def", "set_up_folder", "(", "dz_generator", ",", "file_name", ",", "file_path", ")", ":", "\n", "    ", "folder_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "\n", "__file__", ")", ")", ",", "'..//output'", ",", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H-%M-%S'", ")", ")", "\n", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n", "level_count", "=", "dz_generator", ".", "level_count", "\n", "level_details", "=", "[", "]", "\n", "\n", "for", "level", "in", "range", "(", "level_count", ")", ":", "\n", "        ", "width", ",", "height", "=", "dz_generator", ".", "level_dimensions", "[", "level", "]", "\n", "level_details", ".", "append", "(", "{", "\"Level\"", ":", "level", ",", "\"Width\"", ":", "width", ",", "\"Height\"", ":", "height", "}", ")", "\n", "\n", "", "properties", "=", "{", "\"File_Name\"", ":", "file_name", ",", "\n", "\"File_Path\"", ":", "file_path", ",", "\n", "\"Level_Count\"", ":", "level_count", ",", "\n", "\"Level_Details\"", ":", "level_details", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "'info.json'", ")", ",", "'w+'", ")", "as", "info", ":", "\n", "        ", "json", ".", "dump", "(", "properties", ",", "info", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "info", ".", "close", "(", ")", "\n", "\n", "", "return", "folder_path", "\n", "", ""]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.__init__": [[12, 34], ["modules.utils.set_up_folder", "modules.app.App.__init__", "os.path.join", "PIL.ImageTk.PhotoImage", "PIL.ImageTk.PhotoImage", "tkinter.Label", "recorder.Recorder.notificationLabel.pack", "tkinter.Button", "recorder.Recorder.gazeToggleButton.pack", "recorder.Recorder.canvas.bind", "recorder.Recorder.canvas.bind", "os.path.dirname", "os.path.abspath", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.utils.set_up_folder", "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_window", ",", "deep_zoom_object", ",", "level", "=", "0", ")", ":", "\n", "        ", "tiles_folder", "=", "set_up_folder", "(", "deep_zoom_object", ",", "root_window", ".", "file_name", ",", "root_window", ".", "file_path", ")", "\n", "# Python 2.x compatible constructor", "\n", "App", ".", "__init__", "(", "self", ",", "root_window", ",", "deep_zoom_object", ",", "tiles_folder", ",", "level", "=", "level", ")", "\n", "\n", "assets_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"..//assets\"", ")", "\n", "\n", "self", ".", "imgEyeOff", "=", "ImageTk", ".", "PhotoImage", "(", "file", "=", "os", ".", "path", ".", "join", "(", "assets_dir", ",", "\"icon2xOff.png\"", ")", ")", "\n", "self", ".", "imgEyeOn", "=", "ImageTk", ".", "PhotoImage", "(", "file", "=", "os", ".", "path", ".", "join", "(", "assets_dir", ",", "\"icon2xOn.png\"", ")", ")", "\n", "\n", "# TODO: Fix the order of buttons", "\n", "self", ".", "notificationLabel", "=", "tk", ".", "Label", "(", "self", ".", "frame2", ",", "text", "=", "\"Gaze Recording Disabled\"", ",", "bg", "=", "'gray90'", ",", "font", "=", "(", "\"Helvetica\"", ",", "14", ")", ",", "borderwidth", "=", "2", ",", "relief", "=", "\"groove\"", ")", "\n", "self", ".", "notificationLabel", ".", "pack", "(", "side", "=", "tk", ".", "LEFT", ",", "padx", "=", "(", "5", ",", "5", ")", ",", "pady", "=", "(", "15", ",", "15", ")", ")", "\n", "\n", "self", ".", "gazeToggleButton", "=", "tk", ".", "Button", "(", "self", ".", "frame2", ",", "fg", "=", "\"red\"", ",", "text", "=", "\"hello\"", ",", "bg", "=", "'gray80'", ",", "image", "=", "self", ".", "imgEyeOff", ",", "command", "=", "self", ".", "start_stop_tracking", ")", "\n", "self", ".", "gazeToggleButton", ".", "pack", "(", "side", "=", "tk", ".", "LEFT", ",", "padx", "=", "(", "15", ",", "15", ")", ",", "pady", "=", "(", "15", ",", "15", ")", ")", "\n", "\n", "self", ".", "canvas", ".", "bind", "(", "\"t\"", ",", "self", ".", "start_stop_tracking", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"h\"", ",", "self", ".", "generate_heatmap", ")", "\n", "\n", "# shows whether the gaze tracker is currently tracking", "\n", "self", ".", "is_tracking", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.start_stop_tracking": [[36, 50], ["recorder.Recorder.notificationLabel.configure", "recorder.Recorder.gazeToggleButton.configure", "recorder.Recorder.gazeToggleButton.configure", "recorder.Recorder.notificationLabel.configure", "functools.partial", "threading.Thread().start", "recorder.Recorder.root_window.winfo_screenwidth", "recorder.Recorder.root_window.winfo_screenheight", "threading.Thread"], "methods", ["None"], ["", "def", "start_stop_tracking", "(", "self", ",", "event", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_tracking", ":", "\n", "            ", "self", ".", "notificationLabel", ".", "configure", "(", "text", "=", "\"Gaze Recording Disabled\"", ")", "\n", "self", ".", "gazeToggleButton", ".", "configure", "(", "image", "=", "self", ".", "imgEyeOff", ")", "\n", "self", ".", "is_tracking", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "gazeToggleButton", ".", "configure", "(", "image", "=", "self", ".", "imgEyeOn", ")", "\n", "self", ".", "notificationLabel", ".", "configure", "(", "text", "=", "\"Gaze Recording in Progress\"", ")", "\n", "self", ".", "is_tracking", "=", "True", "\n", "resolution", "=", "(", "self", ".", "root_window", ".", "winfo_screenwidth", "(", ")", ",", "\n", "self", ".", "root_window", ".", "winfo_screenheight", "(", ")", ")", "# a tuple for resolution", "\n", "partial_function", "=", "partial", "(", "tracking", ".", "main", ",", "self", ",", "resolution", ")", "\n", "Thread", "(", "target", "=", "partial_function", ")", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.recorder.Recorder.get_image": [[51, 54], ["recorder.Recorder.tile_generator.generate_image"], "methods", ["home.repos.pwc.inspect_result.sigmalabresearch_visnotate.modules.dynamic_tiling.DynamicTiling.generate_image"], ["", "", "def", "get_image", "(", "self", ",", "box_coords", ",", "force_generation", "=", "False", ")", ":", "\n", "        ", "image", ",", "top_left", "=", "self", ".", "tile_generator", ".", "generate_image", "(", "box_coords", ",", "self", ".", "top_left", ")", "\n", "return", "image", ",", "top_left", "\n", "", "", ""]]}