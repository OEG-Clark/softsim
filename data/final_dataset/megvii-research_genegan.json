{"home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.align_2p": [[11, 39], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.matrix", "numpy.linalg.inv", "cv2.warpAffine", "numpy.sqrt", "numpy.arctan2", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "align_2p", "(", "img", ",", "left_eye", ",", "right_eye", ")", ":", "\n", "    ", "width", "=", "256", "\n", "eye_width", "=", "70", "\n", "\n", "transform", "=", "np", ".", "matrix", "(", "\n", "[", "[", "1", ",", "0", ",", "left_eye", "[", "0", "]", "]", ",", "[", "0", ",", "1", ",", "left_eye", "[", "1", "]", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "\"float\"", "\n", ")", "\n", "\n", "th", "=", "np", ".", "pi", "+", "-", "np", ".", "arctan2", "(", "left_eye", "[", "1", "]", "-", "right_eye", "[", "1", "]", ",", "left_eye", "[", "0", "]", "-", "right_eye", "[", "0", "]", ")", "\n", "transform", "*=", "np", ".", "matrix", "(", "\n", "[", "[", "np", ".", "cos", "(", "th", ")", ",", "np", ".", "sin", "(", "th", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "th", ")", ",", "np", ".", "cos", "(", "th", ")", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "dtype", "=", "\"float\"", ",", "\n", ")", "\n", "\n", "scale", "=", "(", "\n", "np", ".", "sqrt", "(", "(", "left_eye", "[", "1", "]", "-", "right_eye", "[", "1", "]", ")", "**", "2", "+", "(", "left_eye", "[", "0", "]", "-", "right_eye", "[", "0", "]", ")", "**", "2", ")", "\n", "/", "eye_width", "\n", ")", "\n", "transform", "*=", "np", ".", "matrix", "(", "[", "[", "scale", ",", "0", ",", "0", "]", ",", "[", "0", ",", "scale", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "\"float\"", ")", "\n", "\n", "transform", "*=", "np", ".", "matrix", "(", "\n", "[", "[", "1", ",", "0", ",", "-", "(", "width", "-", "eye_width", ")", "/", "2", "]", ",", "[", "0", ",", "1", ",", "-", "width", "/", "2.42", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "dtype", "=", "\"float\"", ",", "\n", ")", "\n", "\n", "transform", "=", "np", ".", "linalg", ".", "inv", "(", "transform", ")", "\n", "jmg", "=", "cv2", ".", "warpAffine", "(", "img", ",", "transform", "[", ":", "2", "]", ",", "(", "width", ",", "width", ")", ")", "\n", "return", "jmg", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.align_face_2p": [[41, 46], ["preprocess.align_2p"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.align_2p"], ["", "def", "align_face_2p", "(", "img", ",", "landmarks", ")", ":", "\n", "    ", "left_eye", "=", "(", "landmarks", "[", "0", "]", ",", "landmarks", "[", "1", "]", ")", "\n", "right_eye", "=", "(", "landmarks", "[", "2", "]", ",", "landmarks", "[", "3", "]", ")", "\n", "aligned_img", "=", "align_2p", "(", "img", ",", "left_eye", ",", "right_eye", ")", "\n", "return", "aligned_img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess._get_align_5p_mat23_size_256": [[60, 107], ["mean_face_lm5p.copy", "mf[].mean", "mf[].mean", "lm[].mean", "lm[].mean", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["def", "_get_align_5p_mat23_size_256", "(", "lm", ")", ":", "\n", "# legacy code", "\n", "    ", "width", "=", "256", "\n", "mf", "=", "mean_face_lm5p", ".", "copy", "(", ")", "\n", "\n", "# Assumptions:", "\n", "# 1. The output image size is 256x256 pixels", "\n", "# 2. The distance between two eye pupils is 70 pixels", "\n", "ratio", "=", "70.0", "/", "(", "\n", "256.0", "*", "0.34967", "\n", ")", "# magic number 0.34967 to compensate scaling from average landmarks", "\n", "\n", "left_eye_pupil_y", "=", "mf", "[", "0", "]", "[", "1", "]", "\n", "# In an aligned face image, the ratio between the vertical distances from eye to the top and bottom is 1:1.42", "\n", "ratioy", "=", "(", "left_eye_pupil_y", "*", "ratio", "+", "0.5", ")", "*", "(", "1", "+", "1.42", ")", "\n", "mf", "[", ":", ",", "0", "]", "=", "(", "mf", "[", ":", ",", "0", "]", "*", "ratio", "+", "0.5", ")", "*", "width", "\n", "mf", "[", ":", ",", "1", "]", "=", "(", "mf", "[", ":", ",", "1", "]", "*", "ratio", "+", "0.5", ")", "*", "width", "/", "ratioy", "\n", "mx", "=", "mf", "[", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "my", "=", "mf", "[", ":", ",", "1", "]", ".", "mean", "(", ")", "\n", "dmx", "=", "lm", "[", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "dmy", "=", "lm", "[", ":", ",", "1", "]", ".", "mean", "(", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "float", ")", "\n", "ux", "=", "mf", "[", ":", ",", "0", "]", "-", "mx", "\n", "uy", "=", "mf", "[", ":", ",", "1", "]", "-", "my", "\n", "dux", "=", "lm", "[", ":", ",", "0", "]", "-", "dmx", "\n", "duy", "=", "lm", "[", ":", ",", "1", "]", "-", "dmy", "\n", "c1", "=", "(", "ux", "*", "dux", "+", "uy", "*", "duy", ")", ".", "sum", "(", ")", "\n", "c2", "=", "(", "ux", "*", "duy", "-", "uy", "*", "dux", ")", ".", "sum", "(", ")", "\n", "c3", "=", "(", "dux", "**", "2", "+", "duy", "**", "2", ")", ".", "sum", "(", ")", "\n", "a", "=", "c1", "/", "c3", "\n", "b", "=", "c2", "/", "c3", "\n", "\n", "kx", "=", "1", "\n", "ky", "=", "1", "\n", "\n", "s", "=", "c3", "/", "(", "c1", "**", "2", "+", "c2", "**", "2", ")", "\n", "ka", "=", "c1", "*", "s", "\n", "kb", "=", "c2", "*", "s", "\n", "\n", "transform", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", "\n", "transform", "[", "0", "]", "[", "0", "]", "=", "kx", "*", "a", "\n", "transform", "[", "0", "]", "[", "1", "]", "=", "kx", "*", "b", "\n", "transform", "[", "0", "]", "[", "2", "]", "=", "mx", "-", "kx", "*", "a", "*", "dmx", "-", "kx", "*", "b", "*", "dmy", "\n", "transform", "[", "1", "]", "[", "0", "]", "=", "-", "ky", "*", "b", "\n", "transform", "[", "1", "]", "[", "1", "]", "=", "ky", "*", "a", "\n", "transform", "[", "1", "]", "[", "2", "]", "=", "my", "-", "ky", "*", "a", "*", "dmy", "+", "ky", "*", "b", "*", "dmx", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.get_align_5p_mat23": [[109, 122], ["preprocess._get_align_5p_mat23_size_256", "lm5p.copy"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess._get_align_5p_mat23_size_256"], ["", "def", "get_align_5p_mat23", "(", "lm5p", ",", "size", ")", ":", "\n", "    ", "\"\"\"Align a face given 5 facial landmarks of\n    left_eye_pupil, right_eye_pupil, nose_tip, left_mouth_corner, right_mouth_corner\n\n    :param lm5p: nparray of (5, 2), 5 facial landmarks,\n\n    :param size: an integer, the output image size. The face is aligned to the mean face\n\n    :return: a affine transformation matrix of shape (2, 3)\n    \"\"\"", "\n", "mat23", "=", "_get_align_5p_mat23_size_256", "(", "lm5p", ".", "copy", "(", ")", ")", "\n", "mat23", "*=", "size", "/", "256", "\n", "return", "mat23", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.align_given_lm5p": [[124, 127], ["preprocess.get_align_5p_mat23", "cv2.warpAffine"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.get_align_5p_mat23"], ["", "def", "align_given_lm5p", "(", "img", ",", "lm5p", ",", "size", ")", ":", "\n", "    ", "mat23", "=", "get_align_5p_mat23", "(", "lm5p", ",", "size", ")", "\n", "return", "cv2", ".", "warpAffine", "(", "img", ",", "mat23", ",", "(", "size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.align_face_5p": [[129, 132], ["preprocess.align_given_lm5p", "numpy.array().reshape", "numpy.array"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.align_given_lm5p"], ["", "def", "align_face_5p", "(", "img", ",", "landmarks", ")", ":", "\n", "    ", "aligned_img", "=", "align_given_lm5p", "(", "img", ",", "np", ".", "array", "(", "landmarks", ")", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", ",", "256", ")", "\n", "return", "aligned_img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.work": [[134, 141], ["os.path.join", "os.path.join", "cv2.imread", "preprocess.align_face_5p", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.align_face_5p"], ["", "def", "work", "(", "data_dir", ",", "out_dir", ",", "landmarks", ",", "i", ")", ":", "\n", "    ", "src_imname", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"data\"", ",", "\"{:06d}.jpg\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "des_imname", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"{:06d}.jpg\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "src_imname", ")", "\n", "aligned_img", "=", "align_face_5p", "(", "img", ",", "landmarks", "[", "i", "]", ")", "\n", "cv2", ".", "imwrite", "(", "des_imname", ",", "aligned_img", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.None.preprocess.main": [[143, 160], ["glob.glob", "multiprocessing.Pool", "functools.partial", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "os.path.exists", "os.makedirs", "open", "os.path.join", "range", "os.path.join", "list", "len", "map", "f.read().strip().split", "x.split", "f.read().strip", "f.read"], "function", ["None"], ["", "def", "main", "(", "data_dir", ",", "out_dir", ",", "thread_num", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"list_landmarks_celeba.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "landmarks", "=", "[", "\n", "list", "(", "map", "(", "int", ",", "x", ".", "split", "(", ")", "[", "1", ":", "11", "]", ")", ")", "for", "x", "in", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", "2", ":", "]", "\n", "]", "\n", "\n", "", "im_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"data/*.jpg\"", ")", ")", "\n", "\n", "pool", "=", "Pool", "(", "thread_num", ")", "\n", "# pool.starmap(work, zip(range(len(im_list)), repeat(data_dir), repeat(out_dir), repeat(landmarks)))", "\n", "partial_work", "=", "partial", "(", "work", ",", "data_dir", ",", "out_dir", ",", "landmarks", ")", "\n", "pool", ".", "map", "(", "partial_work", ",", "range", "(", "len", "(", "im_list", ")", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.image_pool.ImagePool.__init__": [[12, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "\"\"\"Initialize the ImagePool class\n\n        Parameters:\n            pool_size (int) -- the size of image buffer, if pool_size=0, no buffer will be created\n        \"\"\"", "\n", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "# create an empty pool", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.image_pool.ImagePool.query": [[23, 61], ["torch.cat", "torch.unsqueeze", "image_pool.ImagePool.images.append", "torch.cat.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "\"\"\"Return an image from the pool.\n\n        Parameters:\n            images: the latest generated images from the generator\n\n        Returns images from the buffer.\n\n        By 50/100, the buffer will return input images.\n        By 50/100, the buffer will return images previously stored in the buffer,\n        and insert the current images to the buffer.\n        \"\"\"", "\n", "if", "self", ".", "pool_size", "==", "0", ":", "# if the buffer size is 0, do nothing", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ".", "data", ",", "0", ")", "\n", "if", "(", "\n", "self", ".", "num_imgs", "<", "self", ".", "pool_size", "\n", ")", ":", "# if the buffer is not full; keep inserting current images to the buffer", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "(", "\n", "p", ">", "0.5", "\n", ")", ":", "# by 50% chance, the buffer will return a previously stored image, and insert the current image into the buffer", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "pool_size", "-", "1", "\n", ")", "# randint is inclusive", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "# by another 50% chance, the buffer will return the current image", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "torch", ".", "cat", "(", "return_images", ",", "0", ")", "# collect all the images and return", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.visualizer.Visualizer.__init__": [[14, 41], ["os.path.join", "open", "time.strftime", "log_file.write", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "util.mkdirs"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.util.util.mkdirs"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the Visualizer class\n\n        Parameters:\n            opt -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        Step 1: Cache the training/test options\n        Step 2: create an SummaryWriter(tensorboard) object for saveing results\n        Step 3: create a logging file to store training losses\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "# cache the option", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "saved", "=", "False", "\n", "\n", "# create a logging file to store training losses", "\n", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "\"loss_log.txt\"", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "\n", "\"================ Training Loss (%s) ================\\n\"", "%", "now", "\n", ")", "\n", "\n", "", "self", ".", "use_tb", "=", "True", "\n", "if", "self", ".", "use_tb", ":", "\n", "            ", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "\"tb_log\"", ")", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "self", ".", "log_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "log_dir", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.visualizer.Visualizer.reset": [[42, 45], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the self.saved status\"\"\"", "\n", "self", ".", "saved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.visualizer.Visualizer.display_current_results": [[46, 67], ["enumerate", "numpy.stack", "visualizer.Visualizer.summary_writer.add_images", "visualizer.Visualizer.summary_writer.flush", "visuals.items", "util.tensor2im", "numpy.stack.append", "visuals.keys"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.util.util.tensor2im"], ["", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "save_result", ")", ":", "\n", "        ", "\"\"\"Display current results on tensorboard.\n\n        Parameters:\n            visuals (OrderedDict) - - dictionary of images to display or save\n            epoch (int) - - the current epoch\n            save_result (bool) - - if save the current results to tensorboard\n        \"\"\"", "\n", "if", "self", ".", "use_tb", "and", "save_result", ":", "\n", "            ", "show_imgs", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "label", ",", "image", ")", "in", "enumerate", "(", "visuals", ".", "items", "(", ")", ")", ":", "\n", "                ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "show_imgs", ".", "append", "(", "image_numpy", ")", "\n", "\n", "", "label", "=", "\"-\"", ".", "join", "(", "visuals", ".", "keys", "(", ")", ")", "\n", "show_imgs", "=", "np", ".", "stack", "(", "show_imgs", ",", "axis", "=", "0", ")", "\n", "self", ".", "summary_writer", ".", "add_images", "(", "\n", "\"epoch%.3d: %s\"", "%", "(", "epoch", ",", "label", ")", ",", "show_imgs", ",", "epoch", ",", "dataformats", "=", "\"NHWC\"", "\n", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.visualizer.Visualizer.plot_current_losses": [[68, 79], ["losses.items", "visualizer.Visualizer.summary_writer.add_scalar"], "methods", ["None"], ["", "", "def", "plot_current_losses", "(", "self", ",", "epoch", ",", "epoch_iter", ",", "dataset_size", ",", "losses", ")", ":", "\n", "        ", "\"\"\"display the current losses on tensorboard: dictionary of error labels and values\n\n        Parameters:\n            epoch (int)           -- current epoch\n            counter_ratio (float) -- progress (percentage) in the current epoch, between 0 to 1\n            losses (OrderedDict)  -- training losses stored in the format of (name, float) pairs\n        \"\"\"", "\n", "step", "=", "epoch", "*", "dataset_size", "+", "epoch_iter", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_scalar", "(", "k", ",", "v", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.visualizer.Visualizer.print_current_losses": [[81, 103], ["losses.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "print_current_losses", "(", "self", ",", "epoch", ",", "iters", ",", "losses", ",", "t_comp", ",", "t_data", ")", ":", "\n", "        ", "\"\"\"print current losses on console; also save the losses to the disk\n\n        Parameters:\n            epoch (int) -- current epoch\n            iters (int) -- current training iteration during this epoch (reset to 0 at the end of every epoch)\n            losses (OrderedDict) -- training losses stored in the format of (name, float) pairs\n            t_comp (float) -- computational time per data point (normalized by batch_size)\n            t_data (float) -- data loading time per data point (normalized by batch_size)\n        \"\"\"", "\n", "message", "=", "\"(epoch: %d, iters: %d, time: %.3f, data: %.3f) \"", "%", "(", "\n", "epoch", ",", "\n", "iters", ",", "\n", "t_comp", ",", "\n", "t_data", ",", "\n", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "\"%s: %.3f \"", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "# print the message", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "\"%s\\n\"", "%", "message", ")", "# save the message", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.util.tensor2im": [[9, 32], ["np.tile.astype", "isinstance", "isinstance", "image_tensor[].cpu().float().numpy", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "input_image", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "\"\"\" \"Converts a Tensor array into a numpy image array.\n\n    Parameters:\n        input_image (tensor) --  the input image tensor array\n        imtype (type)        --  the desired type of the converted numpy array\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "input_image", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "# get the data from a variable", "\n", "            ", "image_tensor", "=", "input_image", ".", "data", "\n", "", "else", ":", "\n", "            ", "return", "input_image", "\n", "", "image_numpy", "=", "(", "\n", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", ")", "# convert it into a numpy array", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "# grayscale to RGB", "\n", "            ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "\n", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", ")", "# post-processing: tranpose and scaling", "\n", "", "else", ":", "# if it is a numpy array, do nothing", "\n", "        ", "image_numpy", "=", "input_image", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.util.diagnose_network": [[34, 51], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "\"network\"", ")", ":", "\n", "    ", "\"\"\"Calculate and print the mean of average absolute(gradients)\n\n    Parameters:\n        net (torch network) -- Torch network\n        name (str) -- the name of the network\n    \"\"\"", "\n", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.util.save_image": [[53, 69], ["PIL.Image.fromarray", "image_pil.resize.save", "image_pil.resize.resize", "image_pil.resize.resize", "int", "int"], "function", ["None"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", "aspect_ratio", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Save a numpy image to the disk\n\n    Parameters:\n        image_numpy (numpy array) -- input numpy array\n        image_path (str)          -- the path of the image\n    \"\"\"", "\n", "\n", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "h", ",", "w", ",", "_", "=", "image_numpy", ".", "shape", "\n", "\n", "if", "aspect_ratio", ">", "1.0", ":", "\n", "        ", "image_pil", "=", "image_pil", ".", "resize", "(", "(", "h", ",", "int", "(", "w", "*", "aspect_ratio", ")", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "if", "aspect_ratio", "<", "1.0", ":", "\n", "        ", "image_pil", "=", "image_pil", ".", "resize", "(", "(", "int", "(", "h", "/", "aspect_ratio", ")", ",", "w", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.util.print_numpy": [[71, 86], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "\"\"\"Print the mean, min, max, median, std, and size of a numpy array\n\n    Parameters:\n        val (bool) -- if print the values of the numpy array\n        shp (bool) -- if print the shape of the numpy array\n    \"\"\"", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "\"shape,\"", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "\n", "\"mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f\"", "\n", "%", "(", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.util.mkdirs": [[89, 100], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.util.util.mkdir", "home.repos.pwc.inspect_result.megvii-research_genegan.util.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "\"\"\"create empty directories if they don't exist\n\n    Parameters:\n        paths (str list) -- a list of directory paths\n    \"\"\"", "\n", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.util.util.mkdir": [[102, 110], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "\"\"\"create a single empty directory if it didn't exist\n\n    Parameters:\n        path (str) -- a single directory path\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.Identity.forward": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.AbsLossZero.__init__": [[213, 215], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AbsLossZero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.AbsLossZero.__call__": [[216, 219], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "prediction", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "prediction", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.GANLoss.__init__": [[230, 253], ["torch.Module.__init__", "networks.GANLoss.register_buffer", "networks.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "\"\"\" Initialize the GANLoss class.\n\n        Parameters:\n            gan_mode (str) - - the type of GAN objective. It currently supports vanilla, lsgan, and wgangp.\n            target_real_label (bool) - - label for a real image\n            target_fake_label (bool) - - label of a fake image\n\n        Note: Do not use sigmoid as the last layer of Discriminator.\n        LSGAN needs no sigmoid. vanilla GANs will handle it with BCEWithLogitsLoss.\n        \"\"\"", "\n", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "if", "gan_mode", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'vanilla'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "gan_mode", "in", "[", "'wgangp'", "]", ":", "\n", "            ", "self", ".", "loss", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'gan mode %s not implemented'", "%", "gan_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.GANLoss.get_target_tensor": [[254, 270], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "prediction", ",", "target_is_real", ")", ":", "\n", "        ", "\"\"\"Create label tensors with the same size as the input.\n\n        Parameters:\n            prediction (tensor) - - tpyically the prediction from a discriminator\n            target_is_real (bool) - - if the ground truth label is for real images or fake images\n\n        Returns:\n            A label tensor filled with ground truth label, and with the size of the input\n        \"\"\"", "\n", "\n", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.GANLoss.__call__": [[271, 290], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss", "prediction.mean", "prediction.mean"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "prediction", ",", "target_is_real", ")", ":", "\n", "        ", "\"\"\"Calculate loss given Discriminator's output and grount truth labels.\n\n        Parameters:\n            prediction (tensor) - - tpyically the prediction output from a discriminator\n            target_is_real (bool) - - if the ground truth label is for real images or fake images\n\n        Returns:\n            the calculated loss.\n        \"\"\"", "\n", "if", "self", ".", "gan_mode", "in", "[", "'lsgan'", ",", "'vanilla'", "]", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "prediction", ",", "target_is_real", ")", "\n", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'wgangp'", ":", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "loss", "=", "-", "prediction", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "prediction", ".", "mean", "(", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.ResnetGenerator.__init__": [[335, 384], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "\"\"\"Construct a Resnet-based generator\n\n        Parameters:\n            input_nc (int)      -- the number of channels in input images\n            output_nc (int)     -- the number of channels in output images\n            ngf (int)           -- the number of filters in the last conv layer\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers\n            n_blocks (int)      -- the number of ResNet blocks\n            padding_type (str)  -- the name of padding layer in conv layers: reflect | replicate | zero\n        \"\"\"", "\n", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add downsampling layers", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "# add ResNet blocks", "\n", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add upsampling layers", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.ResnetGenerator.forward": [[385, 388], ["networks.ResnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.ResnetBlock.__init__": [[393, 403], ["torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.ResnetBlock.build_conv_block"], ["def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Initialize the Resnet block\n\n        A resnet block is a conv block with skip connections\n        We construct a conv block with build_conv_block function,\n        and implement skip connections in <forward> function.\n        Original Resnet paper: https://arxiv.org/pdf/1512.03385.pdf\n        \"\"\"", "\n", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.ResnetBlock.build_conv_block": [[404, 443], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "\"\"\"Construct a convolutional block.\n\n        Parameters:\n            dim (int)           -- the number of channels in the conv layer.\n            padding_type (str)  -- the name of padding layer: reflect | replicate | zero\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers.\n            use_bias (bool)     -- if the conv layer uses bias or not\n\n        Returns a conv block (with a conv layer, a normalization layer, and a non-linearity layer (ReLU))\n        \"\"\"", "\n", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.ResnetBlock.forward": [[444, 448], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function (with skip connections)\"\"\"", "\n", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "# add skip connections", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.UnetGenerator.__init__": [[453, 476], ["torch.Module.__init__", "networks.UnetSkipConnectionBlock", "range", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "\"\"\"Construct a Unet generator\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            output_nc (int) -- the number of channels in output images\n            num_downs (int) -- the number of downsamplings in UNet. For example, # if |num_downs| == 7,\n                                image of size 128x128 will become of size 1x1 # at the bottleneck\n            ngf (int)       -- the number of filters in the last conv layer\n            norm_layer      -- normalization layer\n\n        We construct the U-Net from the innermost layer to the outermost layer.\n        It is a recursive process.\n        \"\"\"", "\n", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "# add the innermost layer", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "# add intermediate layers with ngf * 8 filters", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "# gradually reduce the number of filters from ngf * 8 to ngf", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "model", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "# add the outermost layer", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.UnetGenerator.forward": [[477, 480], ["networks.UnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.UnetSkipConnectionBlock.__init__": [[488, 544], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Sequential", "torch.Sequential", "type", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "\"\"\"Construct a Unet submodule with skip connections.\n\n        Parameters:\n            outer_nc (int) -- the number of filters in the outer conv layer\n            inner_nc (int) -- the number of filters in the inner conv layer\n            input_nc (int) -- the number of channels in input images/features\n            submodule (UnetSkipConnectionBlock) -- previously defined submodules\n            outermost (bool)    -- if this module is the outermost module\n            innermost (bool)    -- if this module is the innermost module\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers.\n        \"\"\"", "\n", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.UnetSkipConnectionBlock.forward": [[545, 550], ["networks.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "# add skip connections", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.NLayerDiscriminator.__init__": [[555, 594], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a PatchGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            n_layers (int)  -- the number of conv layers in the discriminator\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "# gradually increase the number of filters", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "# output 1 channel prediction map", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.NLayerDiscriminator.forward": [[595, 598], ["networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.PixelDiscriminator.__init__": [[603, 626], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a 1x1 PatchGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.PixelDiscriminator.forward": [[627, 630], ["networks.PixelDiscriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "return", "self", ".", "net", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.SplitterGenerator.__init__": [[635, 670], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "\"\"\"Construct a GeneGAN splitter generator\n\n        Parameters:\n            input_nc (int)      -- the number of channels in input images\n            output_nc (int)     -- the number of channels in output images\n            ngf (int)           -- the number of filters in the last conv layer\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers\n            n_blocks (int)      -- the number of ResNet blocks\n            padding_type (str)  -- the name of padding layer in conv layers: reflect | replicate | zero\n        \"\"\"", "\n", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "SplitterGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "s_layer1", "=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "\n", "s_layer2", "=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "\n", "s_layer3", "=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "\n", "s_layers", "=", "s_layer1", "+", "s_layer2", "+", "s_layer3", "\n", "self", ".", "split_model", "=", "nn", ".", "Sequential", "(", "*", "s_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.SplitterGenerator.splitter": [[671, 675], ["networks.SplitterGenerator.split_model", "int"], "methods", ["None"], ["", "def", "splitter", "(", "self", ",", "input", ",", "second_ratio", "=", "0.25", ")", ":", "\n", "        ", "x", "=", "self", ".", "split_model", "(", "input", ")", "\n", "num_ch", "=", "int", "(", "x", ".", "shape", "[", "1", "]", "*", "second_ratio", ")", "\n", "return", "x", "[", ":", ",", ":", "-", "num_ch", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "-", "num_ch", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.SplitterGenerator.forward": [[676, 680], ["networks.SplitterGenerator.splitter"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.SplitterGenerator.splitter"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "x1", ",", "x2", "=", "self", ".", "splitter", "(", "input", ")", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.JoinerGenerator.__init__": [[686, 723], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "type", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "\"\"\"Construct a GeneGAN joiner generator\n\n        Parameters:\n            input_nc (int)      -- the number of channels in input images\n            output_nc (int)     -- the number of channels in output images\n            ngf (int)           -- the number of filters in the last conv layer\n            norm_layer          -- normalization layer\n            use_dropout (bool)  -- if use dropout layers\n            n_blocks (int)      -- the number of ResNet blocks\n            padding_type (str)  -- the name of padding layer in conv layers: reflect | replicate | zero\n        \"\"\"", "\n", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "JoinerGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "j_layer1", "=", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "512", ",", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "j_layer2", "=", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "512", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "j_layer3", "=", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "256", ",", "output_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "]", "\n", "\n", "j_layers", "=", "j_layer1", "+", "j_layer2", "+", "j_layer3", "\n", "self", ".", "join_model", "=", "nn", ".", "Sequential", "(", "*", "j_layers", ")", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "self", ".", "b", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "output_nc", ",", "1", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.JoinerGenerator.joiner": [[724, 730], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.JoinerGenerator.join_model", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "networks.JoinerGenerator.b.to"], "methods", ["None"], ["", "def", "joiner", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "input", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "axis", "=", "1", ")", "\n", "x", "=", "self", ".", "join_model", "(", "input", ")", "\n", "x", "=", "x", "+", "self", ".", "b", ".", "to", "(", "x", ".", "device", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.JoinerGenerator.forward": [[731, 735], ["networks.JoinerGenerator.joiner"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.JoinerGenerator.joiner"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "x", "=", "self", ".", "joiner", "(", "x1", ",", "x2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.GlobalDiscriminator.__init__": [[739, 769], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "\"\"\"Construct a GlobalGAN discriminator\n\n        Parameters:\n            input_nc (int)  -- the number of channels in input images\n            ndf (int)       -- the number of filters in the last conv layer\n            norm_layer      -- normalization layer\n        \"\"\"", "\n", "super", "(", "GlobalDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "# no need to use bias as BatchNorm2d has affine parameters", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "layers", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "]", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "layers", ")", "\n", "self", ".", "fc", "=", "torch", ".", "nn", ".", "Linear", "(", "4", "*", "4", "*", "512", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.GlobalDiscriminator.forward": [[770, 776], ["networks.GlobalDiscriminator.net", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "networks.GlobalDiscriminator.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward.\"\"\"", "\n", "x", "=", "self", ".", "net", "(", "input", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.get_norm_layer": [[18, 36], ["functools.partial", "functools.partial", "NotImplementedError", "networks.Identity"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "\"\"\"Return a normalization layer\n\n    Parameters:\n        norm_type (str) -- the name of the normalization layer: batch | instance | none\n\n    For BatchNorm, we use learnable affine parameters and track running statistics (mean/stddev).\n    For InstanceNorm, we do not use learnable affine parameters. We do not track running statistics.\n    \"\"\"", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "def", "norm_layer", "(", "x", ")", ":", "return", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.get_scheduler": [[38, 65], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Return a learning rate scheduler\n\n    Parameters:\n        optimizer          -- the optimizer of the network\n        opt (option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\uff0e\u3000\n                              opt.lr_policy is the name of learning rate policy: linear | step | plateau | cosine\n\n    For 'linear', we keep the same learning rate for the first <opt.n_epochs> epochs\n    and linearly decay the rate to zero over the next <opt.n_epochs_decay> epochs.\n    For other schedulers (step, plateau, and cosine), we use the default PyTorch schedulers.\n    See https://pytorch.org/docs/stable/optim.html for more details.\n    \"\"\"", "\n", "if", "opt", ".", "lr_policy", "==", "'linear'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "n_epochs", ")", "/", "float", "(", "opt", ".", "n_epochs_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "n_epochs", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.init_weights": [[67, 99], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Initialize network weights.\n\n    Parameters:\n        net (network)   -- network to be initialized\n        init_type (str) -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        init_gain (float)    -- scaling factor for normal, xavier and orthogonal.\n\n    We use 'normal' in the original pix2pix and CycleGAN paper. But xavier and kaiming might\n    work better for some applications. Feel free to try yourself.\n    \"\"\"", "\n", "def", "init_func", "(", "m", ")", ":", "# define the initialization function", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "# BatchNorm Layer's weight is not a matrix; only normal distribution applies.", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "# apply the initialization function <init_func>", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.init_net": [[101, 117], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"Initialize a network: 1. register CPU/GPU device (with multi-GPU support); 2. initialize the network weights\n    Parameters:\n        net (network)      -- the network to be initialized\n        init_type (str)    -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        gain (float)       -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n\n    Return an initialized network.\n    \"\"\"", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "# multi-GPUs", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "init_gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.define_G": [[119, 164], ["networks.get_norm_layer", "networks.init_net", "networks.ResnetGenerator", "networks.ResnetGenerator", "networks.UnetGenerator", "networks.UnetGenerator", "networks.SplitterGenerator", "networks.JoinerGenerator", "NotImplementedError", "networks.init_net", "networks.init_net"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.init_net", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.init_net", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.init_net"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"Create a generator\n\n    Parameters:\n        input_nc (int) -- the number of channels in input images\n        output_nc (int) -- the number of channels in output images\n        ngf (int) -- the number of filters in the last conv layer\n        netG (str) -- the architecture's name: resnet_9blocks | resnet_6blocks | unet_256 | unet_128\n        norm (str) -- the name of normalization layers used in the network: batch | instance | none\n        use_dropout (bool) -- if use dropout layers.\n        init_type (str)    -- the name of our initialization method.\n        init_gain (float)  -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n\n    Returns a generator\n\n    Our current implementation provides two types of generators:\n        U-Net: [unet_128] (for 128x128 input images) and [unet_256] (for 256x256 input images)\n        The original U-Net paper: https://arxiv.org/abs/1505.04597\n\n        Resnet-based generator: [resnet_6blocks] (with 6 Resnet blocks) and [resnet_9blocks] (with 9 Resnet blocks)\n        Resnet-based generator consists of several Resnet blocks between a few downsampling/upsampling operations.\n        We adapt Torch code from Justin Johnson's neural style transfer project (https://github.com/jcjohnson/fast-neural-style).\n\n\n    The generator has been initialized by <init_net>. It uses RELU for non-linearity.\n    \"\"\"", "\n", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netG", "==", "'resnet_9blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ")", "\n", "", "elif", "netG", "==", "'resnet_6blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "6", ")", "\n", "", "elif", "netG", "==", "'unet_128'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "7", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "elif", "netG", "==", "'unet_256'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "elif", "netG", "==", "'genenet'", ":", "\n", "        ", "net_split", "=", "SplitterGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "net_join", "=", "JoinerGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "return", "init_net", "(", "net_split", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", ",", "init_net", "(", "net_join", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "netG", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.define_D": [[166, 210], ["networks.get_norm_layer", "networks.init_net", "networks.NLayerDiscriminator", "networks.NLayerDiscriminator", "networks.PixelDiscriminator", "networks.GlobalDiscriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD", ",", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"Create a discriminator\n\n    Parameters:\n        input_nc (int)     -- the number of channels in input images\n        ndf (int)          -- the number of filters in the first conv layer\n        netD (str)         -- the architecture's name: basic | n_layers | pixel\n        n_layers_D (int)   -- the number of conv layers in the discriminator; effective when netD=='n_layers'\n        norm (str)         -- the type of normalization layers used in the network.\n        init_type (str)    -- the name of the initialization method.\n        init_gain (float)  -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n\n    Returns a discriminator\n\n    Our current implementation provides three types of discriminators:\n        [basic]: 'PatchGAN' classifier described in the original pix2pix paper.\n        It can classify whether 70\u00d770 overlapping patches are real or fake.\n        Such a patch-level discriminator architecture has fewer parameters\n        than a full-image discriminator and can work on arbitrarily-sized images\n        in a fully convolutional fashion.\n\n        [n_layers]: With this mode, you can specify the number of conv layers in the discriminator\n        with the parameter <n_layers_D> (default=3 as used in [basic] (PatchGAN).)\n\n        [pixel]: 1x1 PixelGAN discriminator can classify whether a pixel is real or not.\n        It encourages greater color diversity but has no effect on spatial statistics.\n\n    The discriminator has been initialized by <init_net>. It uses Leakly RELU for non-linearity.\n    \"\"\"", "\n", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netD", "==", "'basic'", ":", "# default PatchGAN classifier", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "netD", "==", "'n_layers'", ":", "# more options", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "netD", "==", "'pixel'", ":", "# classify if each pixel is real or fake", "\n", "        ", "net", "=", "PixelDiscriminator", "(", "input_nc", ",", "ndf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "elif", "netD", "==", "'genenet'", ":", "# classify if global image is real or fake", "\n", "        ", "net", "=", "GlobalDiscriminator", "(", "input_nc", ",", "ndf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "netD", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.cal_gradient_penalty": [[292, 327], ["interpolatesv.requires_grad_", "netD", "torch.autograd.grad", "torch.autograd.grad", "gradients[].view", "real_data.size", "torch.ones().to", "torch.ones().to", "torch.rand", "torch.rand", "alpha.expand().contiguous().view.expand().contiguous().view", "NotImplementedError", "torch.ones", "torch.ones", "alpha.expand().contiguous().view.expand().contiguous", "netD.size", "alpha.expand().contiguous().view.expand", "real_data.nelement"], "function", ["None"], ["", "", "def", "cal_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ",", "device", ",", "type", "=", "'mixed'", ",", "constant", "=", "1.0", ",", "lambda_gp", "=", "10.0", ")", ":", "\n", "    ", "\"\"\"Calculate the gradient penalty loss, used in WGAN-GP paper https://arxiv.org/abs/1704.00028\n\n    Arguments:\n        netD (network)              -- discriminator network\n        real_data (tensor array)    -- real images\n        fake_data (tensor array)    -- generated images from the generator\n        device (str)                -- GPU / CPU: from torch.device('cuda:{}'.format(self.gpu_ids[0])) if self.gpu_ids else torch.device('cpu')\n        type (str)                  -- if we mix real and fake data or not [real | fake | mixed].\n        constant (float)            -- the constant used in formula ( ||gradient||_2 - constant)^2\n        lambda_gp (float)           -- weight for this loss\n\n    Returns the gradient penalty loss\n    \"\"\"", "\n", "if", "lambda_gp", ">", "0.0", ":", "\n", "        ", "if", "type", "==", "'real'", ":", "# either use real images, fake images, or a linear interpolation of two.", "\n", "            ", "interpolatesv", "=", "real_data", "\n", "", "elif", "type", "==", "'fake'", ":", "\n", "            ", "interpolatesv", "=", "fake_data", "\n", "", "elif", "type", "==", "'mixed'", ":", "\n", "            ", "alpha", "=", "torch", ".", "rand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "1", ",", "device", "=", "device", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "real_data", ".", "nelement", "(", ")", "//", "real_data", ".", "shape", "[", "0", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "*", "real_data", ".", "shape", ")", "\n", "interpolatesv", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'{} not implemented'", ".", "format", "(", "type", ")", ")", "\n", "", "interpolatesv", ".", "requires_grad_", "(", "True", ")", "\n", "disc_interpolates", "=", "netD", "(", "interpolatesv", ")", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolatesv", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "\n", "gradients", "=", "gradients", "[", "0", "]", ".", "view", "(", "real_data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flat the data", "\n", "gradient_penalty", "=", "(", "(", "(", "gradients", "+", "1e-16", ")", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "constant", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "lambda_gp", "# added eps", "\n", "return", "gradient_penalty", ",", "gradients", "\n", "", "else", ":", "\n", "        ", "return", "0.0", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.test_model.TestModel.modify_commandline_options": [[12, 36], ["parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        The model can only be used during test time. It requires '--dataset_mode single'.\n        You need to specify the network using the option '--model_suffix'.\n        \"\"\"", "\n", "assert", "not", "is_train", ",", "\"TestModel cannot be used during training time\"", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "\"single\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_suffix\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"\"", ",", "\n", "help", "=", "\"In checkpoints_dir, [epoch]_net_G[model_suffix].pth will be loaded as the generator.\"", ",", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.test_model.TestModel.__init__": [[37, 66], ["base_model.BaseModel.__init__", "networks.define_G", "setattr"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.define_G"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the pix2pix class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "assert", "not", "opt", ".", "isTrain", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# specify the training losses you want to print out. The training/test scripts  will call <BaseModel.get_current_losses>", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "# specify the images you want to save/display. The training/test scripts  will call <BaseModel.get_current_visuals>", "\n", "self", ".", "visual_names", "=", "[", "\"real\"", ",", "\"fake\"", "]", "\n", "# specify the models you want to save to the disk. The training/test scripts will call <BaseModel.save_networks> and <BaseModel.load_networks>", "\n", "self", ".", "model_names", "=", "[", "\"G\"", "+", "opt", ".", "model_suffix", "]", "# only generator is needed.", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "\n", "opt", ".", "input_nc", ",", "\n", "opt", ".", "output_nc", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "netG", ",", "\n", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "\n", "opt", ".", "init_type", ",", "\n", "opt", ".", "init_gain", ",", "\n", "self", ".", "gpu_ids", ",", "\n", ")", "\n", "\n", "# assigns the model to self.netG_[suffix] so that it can be loaded", "\n", "# please see <BaseModel.load_networks>", "\n", "setattr", "(", "self", ",", "\"netG\"", "+", "opt", ".", "model_suffix", ",", "self", ".", "netG", ")", "# store netG in self.", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.test_model.TestModel.set_input": [[67, 77], ["input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input: a dictionary that contains the data itself and its metadata information.\n\n        We need to use 'single_dataset' dataset mode. It only load images from one domain.\n        \"\"\"", "\n", "self", ".", "real", "=", "input", "[", "\"A\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "\"A_paths\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.test_model.TestModel.forward": [[78, 81], ["test_model.TestModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass.\"\"\"", "\n", "self", ".", "fake", "=", "self", ".", "netG", "(", "self", ".", "real", ")", "# G(real)", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.test_model.TestModel.optimize_parameters": [[82, 85], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"No optimization for test model.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.modify_commandline_options": [[17, 44], ["parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n\n        \"\"\"", "\n", "parser", ".", "set_defaults", "(", "norm", "=", "\"batch\"", ",", "netG", "=", "\"genenet\"", ",", "netD", "=", "\"genenet\"", ")", "\n", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "pool_size", "=", "50", ",", "gan_mode", "=", "\"wgangp\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lambda_L1\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"weight for L1 loss\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lambda_parallel\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", "help", "=", "\"weight for parallel loss\"", ",", "\n", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.__init__": [[45, 122], ["base_model.BaseModel.__init__", "networks.define_G", "networks.define_D", "networks.define_D", "networks.GANLoss().to", "torch.nn.L1Loss", "networks.AbsLossZero().to", "torch.optim.RMSprop", "torch.optim.RMSprop", "genegan_model.GeneGANModel.optimizers.append", "genegan_model.GeneGANModel.optimizers.append", "itertools.chain", "itertools.chain", "networks.GANLoss", "networks.AbsLossZero", "genegan_model.GeneGANModel.netG_split.parameters", "genegan_model.GeneGANModel.netG_join.parameters", "genegan_model.GeneGANModel.netD1.parameters", "genegan_model.GeneGANModel.netD2.parameters"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.define_G", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.define_D", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.define_D"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the GeneGANModel class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "# specify the training losses you want to print out. The training/test scripts will call <BaseModel.get_current_losses>", "\n", "self", ".", "loss_names", "=", "[", "\"G_GAN\"", ",", "\"G_L1\"", ",", "\"G_e\"", ",", "\"G_parallel\"", ",", "\"D_fake\"", ",", "\"D_real\"", "]", "\n", "# specify the images you want to save/display. The training/test scripts will call <BaseModel.get_current_visuals>", "\n", "self", ".", "visual_names", "=", "[", "\"Ax\"", ",", "\"Be\"", ",", "\"Ax2\"", ",", "\"Be2\"", ",", "\"Bx\"", ",", "\"Ae\"", "]", "\n", "# specify the models you want to save to the disk. The training/test scripts will call <BaseModel.save_networks> and <BaseModel.load_networks>", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "\"G_split\"", ",", "\"G_join\"", ",", "\"D1\"", ",", "\"D2\"", "]", "\n", "", "else", ":", "# during test time, only load G", "\n", "            ", "self", ".", "model_names", "=", "[", "\"G_split\"", ",", "\"G_join\"", "]", "\n", "# define networks (both generator and discriminator)", "\n", "", "self", ".", "netG_split", ",", "self", ".", "netG_join", "=", "networks", ".", "define_G", "(", "\n", "opt", ".", "input_nc", ",", "\n", "opt", ".", "output_nc", ",", "\n", "opt", ".", "ngf", ",", "\n", "opt", ".", "netG", ",", "\n", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "\n", "opt", ".", "init_type", ",", "\n", "opt", ".", "init_gain", ",", "\n", "self", ".", "gpu_ids", ",", "\n", ")", "\n", "\n", "if", "(", "\n", "self", ".", "isTrain", "\n", ")", ":", "# define a discriminator; conditional GANs need to take both input and output images; Therefore, #channels for D is input_nc + output_nc", "\n", "            ", "self", ".", "netD1", "=", "networks", ".", "define_D", "(", "\n", "opt", ".", "output_nc", ",", "\n", "opt", ".", "ndf", ",", "\n", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "\n", "opt", ".", "norm", ",", "\n", "opt", ".", "init_type", ",", "\n", "opt", ".", "init_gain", ",", "\n", "self", ".", "gpu_ids", ",", "\n", ")", "\n", "self", ".", "netD2", "=", "networks", ".", "define_D", "(", "\n", "opt", ".", "output_nc", ",", "\n", "opt", ".", "ndf", ",", "\n", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "\n", "opt", ".", "norm", ",", "\n", "opt", ".", "init_type", ",", "\n", "opt", ".", "init_gain", ",", "\n", "self", ".", "gpu_ids", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "# define loss functions", "\n", "            ", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "opt", ".", "gan_mode", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionAbs_zero", "=", "networks", ".", "AbsLossZero", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# initialize optimizers; schedulers will be automatically created by function <BaseModel.setup>.", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "itertools", ".", "chain", "(", "\n", "self", ".", "netG_split", ".", "parameters", "(", ")", ",", "self", ".", "netG_join", ".", "parameters", "(", ")", "\n", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "alpha", "=", "0.8", ",", "\n", "weight_decay", "=", "1e-5", ",", "\n", "eps", "=", "1e-10", ",", "\n", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "itertools", ".", "chain", "(", "self", ".", "netD1", ".", "parameters", "(", ")", ",", "self", ".", "netD2", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "alpha", "=", "0.8", ",", "\n", "weight_decay", "=", "1e-5", ",", "\n", "eps", "=", "1e-10", ",", "\n", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.set_input": [[123, 134], ["input[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): include the data itself and its metadata information.\n\n        The option 'direction' can be used to swap images in domain A and domain B.\n        \"\"\"", "\n", "self", ".", "Ax", "=", "input", "[", "\"A\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "Be", "=", "input", "[", "\"B\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "\"A_paths\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.forward": [[135, 143], ["genegan_model.GeneGANModel.netG_split", "genegan_model.GeneGANModel.netG_split", "genegan_model.GeneGANModel.netG_join", "genegan_model.GeneGANModel.netG_join", "genegan_model.GeneGANModel.netG_join", "genegan_model.GeneGANModel.netG_join", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "self", ".", "A", ",", "self", ".", "x", "=", "self", ".", "netG_split", "(", "self", ".", "Ax", ")", "\n", "self", ".", "B", ",", "self", ".", "e", "=", "self", ".", "netG_split", "(", "self", ".", "Be", ")", "\n", "self", ".", "Ax2", "=", "self", ".", "netG_join", "(", "self", ".", "A", ",", "self", ".", "x", ")", "\n", "self", ".", "Be2", "=", "self", ".", "netG_join", "(", "self", ".", "B", ",", "torch", ".", "zeros_like", "(", "self", ".", "e", ")", ")", "\n", "self", ".", "Bx", "=", "self", ".", "netG_join", "(", "self", ".", "B", ",", "self", ".", "x", ")", "\n", "self", ".", "Ae", "=", "self", ".", "netG_join", "(", "self", ".", "A", ",", "torch", ".", "zeros_like", "(", "self", ".", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.backward_D": [[144, 161], ["genegan_model.GeneGANModel.netD1", "genegan_model.GeneGANModel.netD2", "genegan_model.GeneGANModel.criterionGAN", "genegan_model.GeneGANModel.criterionGAN", "genegan_model.GeneGANModel.netD1", "genegan_model.GeneGANModel.netD2", "genegan_model.GeneGANModel.criterionGAN", "genegan_model.GeneGANModel.criterionGAN", "genegan_model.GeneGANModel.loss_D.backward", "genegan_model.GeneGANModel.Bx.detach", "genegan_model.GeneGANModel.Ae.detach"], "methods", ["None"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for the discriminator\"\"\"", "\n", "# Fake; stop backprop to the generator by detaching fake_B", "\n", "pred_fake_Bx", "=", "self", ".", "netD1", "(", "self", ".", "Bx", ".", "detach", "(", ")", ")", "\n", "pred_fake_Ae", "=", "self", ".", "netD2", "(", "self", ".", "Ae", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_Bx_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_Bx", ",", "False", ")", "\n", "self", ".", "loss_D_Ae_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake_Ae", ",", "False", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "loss_D_Bx_fake", "+", "self", ".", "loss_D_Ae_fake", "\n", "# Real", "\n", "pred_real_Ax", "=", "self", ".", "netD1", "(", "self", ".", "Ax", ")", "\n", "pred_real_Be", "=", "self", ".", "netD2", "(", "self", ".", "Be", ")", "\n", "self", ".", "loss_D_Ax_real", "=", "self", ".", "criterionGAN", "(", "pred_real_Ax", ",", "True", ")", "\n", "self", ".", "loss_D_Be_real", "=", "self", ".", "criterionGAN", "(", "pred_real_Be", ",", "True", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "loss_D_Ax_real", "+", "self", ".", "loss_D_Be_real", "\n", "# combine loss and calculate gradients", "\n", "self", ".", "loss_D", "=", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.backward_G": [[162, 190], ["genegan_model.GeneGANModel.netD1", "genegan_model.GeneGANModel.netD2", "genegan_model.GeneGANModel.criterionGAN", "genegan_model.GeneGANModel.criterionGAN", "genegan_model.GeneGANModel.criterionAbs_zero", "genegan_model.GeneGANModel.loss_G.backward", "genegan_model.GeneGANModel.criterionL1", "genegan_model.GeneGANModel.criterionL1", "genegan_model.GeneGANModel.criterionAbs_zero"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate GAN and L1 loss for the generator\"\"\"", "\n", "# First, G should fake the discriminator", "\n", "pred_fake_Bx", "=", "self", ".", "netD1", "(", "self", ".", "Bx", ")", "\n", "pred_fake_Ae", "=", "self", ".", "netD2", "(", "self", ".", "Ae", ")", "\n", "self", ".", "loss_G_Bx_fake_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake_Bx", ",", "True", ")", "\n", "self", ".", "loss_G_Ae_fake_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake_Ae", ",", "True", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "loss_G_Bx_fake_GAN", "+", "self", ".", "loss_G_Ae_fake_GAN", "\n", "\n", "# Second, cycle l1 loss", "\n", "self", ".", "loss_G_A_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "Ax", ",", "self", ".", "Ax2", ")", "*", "self", ".", "opt", ".", "lambda_L1", "\n", "self", ".", "loss_G_B_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "Be", ",", "self", ".", "Be2", ")", "*", "self", ".", "opt", ".", "lambda_L1", "\n", "self", ".", "loss_G_L1", "=", "self", ".", "loss_G_A_L1", "+", "self", ".", "loss_G_B_L1", "\n", "\n", "# e loss", "\n", "self", ".", "loss_G_e", "=", "self", ".", "criterionAbs_zero", "(", "self", ".", "e", ")", "\n", "\n", "# parallelogram loss", "\n", "parallel", "=", "self", ".", "Ax", "+", "self", ".", "Be", "-", "self", ".", "Bx", "-", "self", ".", "Ae", "\n", "self", ".", "loss_G_parallel", "=", "(", "\n", "self", ".", "criterionAbs_zero", "(", "parallel", ")", "*", "self", ".", "opt", ".", "lambda_parallel", "\n", ")", "\n", "\n", "# combine loss and calculate gradients", "\n", "self", ".", "loss_G", "=", "(", "\n", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_G_L1", "+", "self", ".", "loss_G_e", "+", "self", ".", "loss_G_parallel", "\n", ")", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.clip_weight": [[191, 194], ["model.parameters", "torch.clip"], "methods", ["None"], ["", "def", "clip_weight", "(", "self", ",", "model", ",", "clip_value", "=", "(", "-", "0.01", ",", "0.01", ")", ")", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "data", "=", "torch", ".", "clip", "(", "param", ".", "data", ",", "min", "=", "clip_value", "[", "0", "]", ",", "max", "=", "clip_value", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.optimize_parameters": [[195, 217], ["genegan_model.GeneGANModel.forward", "genegan_model.GeneGANModel.set_requires_grad", "genegan_model.GeneGANModel.set_requires_grad", "genegan_model.GeneGANModel.optimizer_G.zero_grad", "genegan_model.GeneGANModel.backward_G", "genegan_model.GeneGANModel.optimizer_G.step", "genegan_model.GeneGANModel.set_requires_grad", "genegan_model.GeneGANModel.set_requires_grad", "genegan_model.GeneGANModel.optimizer_D.zero_grad", "genegan_model.GeneGANModel.backward_D", "genegan_model.GeneGANModel.optimizer_D.step", "genegan_model.GeneGANModel.clip_weight", "genegan_model.GeneGANModel.clip_weight"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.backward_G", "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.backward_D", "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.clip_weight", "home.repos.pwc.inspect_result.megvii-research_genegan.models.genegan_model.GeneGANModel.clip_weight"], ["", "", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "# compute fake images: G(A)", "\n", "# update G", "\n", "self", ".", "set_requires_grad", "(", "\n", "self", ".", "netD1", ",", "False", "\n", ")", "# D requires no gradients when optimizing G", "\n", "self", ".", "set_requires_grad", "(", "\n", "self", ".", "netD2", ",", "False", "\n", ")", "# D requires no gradients when optimizing G", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "# calculate graidents for G", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# update D", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD1", ",", "True", ")", "# enable backprop for D", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD2", ",", "True", ")", "# enable backprop for D", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "# set D's gradients to zero", "\n", "self", ".", "backward_D", "(", ")", "# calculate gradients for D", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "# update D's weights", "\n", "\n", "self", ".", "clip_weight", "(", "self", ".", "netD1", ")", "\n", "self", ".", "clip_weight", "(", "self", ".", "netD2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.__init__.find_model_using_name": [[25, 48], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.models.__init__.get_option_setter": [[50, 54], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.models.__init__.create_model": [[56, 70], ["__init__.find_model_using_name", "find_model_using_name.", "print", "type"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.__init__": [[18, 53], ["os.path.join", "torch.device", "torch.device"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the BaseModel class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n\n        When creating your custom class, you need to implement your own initialization.\n        In this function, you should first call <BaseModel.__init__(self, opt)>\n        Then, you need to define four lists:\n            -- self.loss_names (str list):          specify the training losses that you want to plot and save.\n            -- self.model_names (str list):         define networks used in our training.\n            -- self.visual_names (str list):        specify the images that you want to display and save.\n            -- self.optimizers (optimizer list):    define and initialize optimizers. You can define one optimizer for each network. If two networks are updated at the same time, you can use itertools.chain to group them. See cycle_gan_model.py for an example.\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "device", "=", "(", "\n", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "\n", "if", "self", ".", "gpu_ids", "\n", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", ")", "# get device name: CPU or GPU", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", "\n", ")", "# save all the checkpoints to save_dir", "\n", "if", "(", "\n", "opt", ".", "preprocess", "!=", "\"scale_width\"", "\n", ")", ":", "# with [scale_width], input images might have different sizes, which hurts the performance of cudnn.benchmark.", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "self", ".", "metric", "=", "0", "# used for learning rate policy 'plateau'", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.modify_commandline_options": [[54, 66], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new model-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.set_input": [[67, 75], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): includes the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.forward": [[76, 80], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.optimize_parameters": [[81, 85], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.setup": [[86, 100], ["base_model.BaseModel.print_networks", "base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.megvii-research_genegan.models.networks.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Load and print networks; create schedulers\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "\n", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "\n", "]", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "load_suffix", "=", "\"iter_%d\"", "%", "opt", ".", "load_iter", "if", "opt", ".", "load_iter", ">", "0", "else", "opt", ".", "epoch", "\n", "self", ".", "load_networks", "(", "load_suffix", ")", "\n", "", "self", ".", "print_networks", "(", "opt", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.eval": [[101, 107], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make models eval mode during test time\"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "\"net\"", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.test": [[108, 117], ["torch.no_grad", "base_model.BaseModel.forward", "base_model.BaseModel.compute_visuals"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.compute_visuals"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Forward function used in test time.\n\n        This function wraps <forward> function in no_grad() so we don't save intermediate steps for backprop\n        It also calls <compute_visuals> to produce additional visualization results\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "self", ".", "compute_visuals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.compute_visuals": [[118, 121], ["None"], "methods", ["None"], ["", "", "def", "compute_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate additional output images for tensorboard visualization\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.get_image_paths": [[122, 125], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return image paths that are used to load current data\"\"\"", "\n", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.update_learning_rate": [[126, 137], ["print", "scheduler.step", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update learning rates for all the networks; called at the end of every epoch\"\"\"", "\n", "old_lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "if", "self", ".", "opt", ".", "lr_policy", "==", "\"plateau\"", ":", "\n", "                ", "scheduler", ".", "step", "(", "self", ".", "metric", ")", "\n", "", "else", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "print", "(", "\"learning rate %.7f -> %.7f\"", "%", "(", "old_lr", ",", "lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.get_current_visuals": [[138, 145], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return visualization images. train.py will display these images with tensorboard\"\"\"", "\n", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.get_current_losses": [[146, 155], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traning losses / errors. train.py will print out these errors on console, and save them to a file\"\"\"", "\n", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "\n", "getattr", "(", "self", ",", "\"loss_\"", "+", "name", ")", "\n", ")", "# float(...) works for both scalar tensor and float number", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.save_networks": [[156, 173], ["isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "torch.save", "getattr.cuda", "torch.save", "len", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.module.cpu", "getattr.cpu"], "methods", ["None"], ["", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Save all the networks to the disk.\n\n        Parameters:\n            epoch (int) -- current epoch; used in the file name '%s_net_%s.pth' % (epoch, name)\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "\"%s_net_%s.pth\"", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "\"net\"", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.__patch_instance_norm_state_dict": [[174, 190], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "\"\"\"Fix InstanceNorm checkpoints incompatibility (prior to 0.4)\"\"\"", "\n", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "\"InstanceNorm\"", ")", "and", "(", "\n", "key", "==", "\"running_mean\"", "or", "key", "==", "\"running_var\"", "\n", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "\".\"", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "\"InstanceNorm\"", ")", "and", "(", "\n", "key", "==", "\"num_batches_tracked\"", "\n", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "\".\"", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "\n", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.load_networks": [[192, 220], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "hasattr", "list", "getattr.load_state_dict", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "load_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Load all the networks from the disk.\n\n        Parameters:\n            epoch (int) -- current epoch; used in the file name '%s_net_%s.pth' % (epoch, name)\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "\"%s_net_%s.pth\"", "%", "(", "epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "\"net\"", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "\"loading the model from %s\"", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "\"_metadata\"", ")", ":", "\n", "                    ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "for", "key", "in", "list", "(", "\n", "state_dict", ".", "keys", "(", ")", "\n", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                    ", "self", ".", "__patch_instance_norm_state_dict", "(", "\n", "state_dict", ",", "net", ",", "key", ".", "split", "(", "\".\"", ")", "\n", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.print_networks": [[221, 241], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["None"], ["", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "\"\"\"Print the total number of parameters in the network and (if verbose) network architecture\n\n        Parameters:\n            verbose (bool) -- if verbose: print the network architecture\n        \"\"\"", "\n", "print", "(", "\"---------- Networks initialized -------------\"", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "\"net\"", "+", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "\n", "\"[Network %s] Total number of parameters : %.3f M\"", "\n", "%", "(", "name", ",", "num_params", "/", "1e6", ")", "\n", ")", "\n", "", "", "print", "(", "\"-----------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.models.base_model.BaseModel.set_requires_grad": [[242, 254], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n        Parameters:\n            nets (network list)   -- a list of networks\n            requires_grad (bool)  -- whether the networks require gradients or not\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.BaseDataset.__init__": [[23, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the class; save the options in the class\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.BaseDataset.modify_commandline_options": [[32, 44], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.BaseDataset.__len__": [[45, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.BaseDataset.__getitem__": [[50, 61], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns:\n            a dictionary of data with their names. It ususally contains the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.get_params": [[63, 79], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random"], "function", ["None"], ["", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "opt", ".", "preprocess", "==", "\"resize_and_crop\"", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "load_size", "\n", "", "elif", "opt", ".", "preprocess", "==", "\"scale_width_and_crop\"", ":", "\n", "        ", "new_w", "=", "opt", ".", "load_size", "\n", "new_h", "=", "opt", ".", "load_size", "*", "h", "//", "w", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_w", "-", "opt", ".", "crop_size", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_h", "-", "opt", ".", "crop_size", ")", ")", "\n", "\n", "flip", "=", "random", ".", "random", "(", ")", ">", "0.5", "\n", "\n", "return", "{", "\"crop_pos\"", ":", "(", "x", ",", "y", ")", ",", "\"flip\"", ":", "flip", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.get_transform": [[81, 127], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Grayscale", "torchvision.Resize", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Lambda", "transform_list.append", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.RandomCrop", "torchvision.Lambda", "torchvision.RandomHorizontalFlip", "transform_list.append", "torchvision.Normalize", "torchvision.Normalize", "base_dataset.__make_power_2", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__crop", "base_dataset.__flip"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__crop", "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__flip"], ["", "def", "get_transform", "(", "\n", "opt", ",", "params", "=", "None", ",", "grayscale", "=", "False", ",", "method", "=", "Image", ".", "BICUBIC", ",", "convert", "=", "True", "\n", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "grayscale", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Grayscale", "(", "1", ")", ")", "\n", "", "if", "\"resize\"", "in", "opt", ".", "preprocess", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "method", ")", ")", "\n", "", "elif", "\"scale_width\"", "in", "opt", ".", "preprocess", ":", "\n", "        ", "transform_list", ".", "append", "(", "\n", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ",", "opt", ".", "crop_size", ",", "method", ")", "\n", ")", "\n", ")", "\n", "\n", "", "if", "\"crop\"", "in", "opt", ".", "preprocess", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_list", ".", "append", "(", "\n", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "\"crop_pos\"", "]", ",", "opt", ".", "crop_size", ")", "\n", ")", "\n", ")", "\n", "\n", "", "", "if", "opt", ".", "preprocess", "==", "\"none\"", ":", "\n", "        ", "transform_list", ".", "append", "(", "\n", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__make_power_2", "(", "img", ",", "base", "=", "4", ",", "method", "=", "method", ")", ")", "\n", ")", "\n", "\n", "", "if", "not", "opt", ".", "no_flip", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "elif", "params", "[", "\"flip\"", "]", ":", "\n", "            ", "transform_list", ".", "append", "(", "\n", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__flip", "(", "img", ",", "params", "[", "\"flip\"", "]", ")", ")", "\n", ")", "\n", "\n", "", "", "if", "convert", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "grayscale", ":", "\n", "            ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__make_power_2": [[129, 138], ["int", "int", "base_dataset.__print_size_warning", "img.resize", "round", "round"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__print_size_warning"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "h", "==", "oh", "and", "w", "==", "ow", ":", "\n", "        ", "return", "img", "\n", "\n", "", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__scale_width": [[140, 147], ["int", "img.resize", "max"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_size", ",", "crop_size", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "ow", "==", "target_size", "and", "oh", ">=", "crop_size", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_size", "\n", "h", "=", "int", "(", "max", "(", "target_size", "*", "oh", "/", "ow", ",", "crop_size", ")", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__crop": [[149, 156], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "if", "ow", ">", "tw", "or", "oh", ">", "th", ":", "\n", "        ", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__flip": [[158, 162], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.__print_size_warning": [[164, 174], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "\"\"\"Print warning information about image size(only print once)\"\"\"", "\n", "if", "not", "hasattr", "(", "__print_size_warning", ",", "\"has_printed\"", ")", ":", "\n", "        ", "print", "(", "\n", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.CustomDatasetDataLoader.__init__": [[67, 82], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "print", "torch.utils.data.DataLoader", "int", "type"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.CustomDatasetDataLoader.load_data": [[84, 86], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.CustomDatasetDataLoader.__len__": [[87, 90], ["min", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.CustomDatasetDataLoader.__iter__": [[91, 97], ["enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.find_dataset_using_name": [[18, 41], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "NotImplementedError", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.get_option_setter": [[43, 47], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.create_dataset": [[49, 62], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.load_data"], "function", ["home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.CustomDatasetDataLoader.load_data"], []], "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.UnalignedDataset.__init__": [[75, 111], ["data.base_dataset.BaseDataset.__init__", "unaligned_dataset.get_img_paths", "print", "unaligned_dataset.get_attr_label", "unaligned_dataset.get_eval_label", "unaligned_dataset.get_filted_data", "len", "len", "data.base_dataset.get_transform", "data.base_dataset.get_transform", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.get_img_paths", "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.get_attr_label", "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.get_eval_label", "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.get_filted_data", "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.megvii-research_genegan.data.base_dataset.get_transform"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "img_dir", "=", "\"datasets/celebA/align_5p\"", "\n", "self", ".", "img_paths", "=", "get_img_paths", "(", "img_dir", ")", "\n", "print", "(", "\"Total img numbers: \"", ",", "len", "(", "self", ".", "img_paths", ")", ")", "\n", "attr_label_txt", "=", "\"datasets/celebA/list_attr_celeba.txt\"", "\n", "eval_label_txt", "=", "\"datasets/celebA/list_eval_partition.txt\"", "\n", "self", ".", "attr_label", "=", "get_attr_label", "(", "attr_label_txt", ")", "\n", "self", ".", "eval_label", "=", "get_eval_label", "(", "eval_label_txt", ")", "\n", "\n", "self", ".", "A_paths", ",", "self", ".", "B_paths", "=", "get_filted_data", "(", "\n", "self", ".", "img_paths", ",", "\n", "self", ".", "attr_label", ",", "\n", "self", ".", "eval_label", ",", "\n", "task", "=", "opt", ".", "task", ",", "\n", "phase", "=", "opt", ".", "phase", ",", "\n", ")", "\n", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "# get the size of dataset A", "\n", "self", ".", "B_size", "=", "len", "(", "self", ".", "B_paths", ")", "# get the size of dataset B", "\n", "\n", "assert", "(", "\n", "self", ".", "opt", ".", "load_size", ">=", "self", ".", "opt", ".", "crop_size", "\n", ")", "# crop_size should be smaller than the size of loaded image", "\n", "self", ".", "input_nc", "=", "(", "\n", "self", ".", "opt", ".", "output_nc", "if", "self", ".", "opt", ".", "direction", "==", "\"BtoA\"", "else", "self", ".", "opt", ".", "input_nc", "\n", ")", "\n", "self", ".", "output_nc", "=", "(", "\n", "self", ".", "opt", ".", "input_nc", "if", "self", ".", "opt", ".", "direction", "==", "\"BtoA\"", "else", "self", ".", "opt", ".", "output_nc", "\n", ")", "\n", "self", ".", "transform_A", "=", "get_transform", "(", "self", ".", "opt", ",", "grayscale", "=", "(", "self", ".", "input_nc", "==", "1", ")", ")", "\n", "self", ".", "transform_B", "=", "get_transform", "(", "self", ".", "opt", ",", "grayscale", "=", "(", "self", ".", "output_nc", "==", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.UnalignedDataset.__getitem__": [[112, 142], ["cv2.imread", "cv2.imread", "PIL.Image.fromarray", "PIL.Image.fromarray", "unaligned_dataset.UnalignedDataset.transform_A", "unaligned_dataset.UnalignedDataset.transform_B", "random.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns a dictionary that contains A, B, A_paths and B_paths\n            A (tensor) - - an image in the input domain\n            B (tensor) - - its corresponding image in the target domain\n            A_paths (str) - - image paths\n            B_paths (str) - - image paths (same as A_paths)\n        \"\"\"", "\n", "# read a image given a random integer index", "\n", "A_path", "=", "self", ".", "A_paths", "[", "\n", "index", "%", "self", ".", "A_size", "\n", "]", "# make sure index is within then range", "\n", "if", "self", ".", "opt", ".", "serial_batches", ":", "# make sure index is within then range", "\n", "            ", "index_B", "=", "index", "%", "self", ".", "B_size", "\n", "", "else", ":", "# randomize the index for domain B to avoid fixed pairs.", "\n", "            ", "index_B", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "B_size", "-", "1", ")", "\n", "", "B_path", "=", "self", ".", "B_paths", "[", "index_B", "]", "\n", "A_img", "=", "cv2", ".", "imread", "(", "A_path", ")", "\n", "B_img", "=", "cv2", ".", "imread", "(", "B_path", ")", "\n", "A_img", "=", "Image", ".", "fromarray", "(", "A_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "B_img", "=", "Image", ".", "fromarray", "(", "B_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "# apply the same transform to both A and B", "\n", "A", "=", "self", ".", "transform_A", "(", "A_img", ")", "\n", "B", "=", "self", ".", "transform_B", "(", "B_img", ")", "\n", "return", "{", "\"A\"", ":", "A", ",", "\"B\"", ":", "B", ",", "\"A_paths\"", ":", "A_path", ",", "\"B_paths\"", ":", "B_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.UnalignedDataset.__len__": [[143, 146], ["max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "max", "(", "self", ".", "A_size", ",", "self", ".", "B_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.get_img_paths": [[10, 18], ["os.listdir", "sorted", "os.path.join", "int", "os.path.splitext", "x.split"], "function", ["None"], ["def", "get_img_paths", "(", "d", ")", ":", "\n", "    ", "all_files", "=", "os", ".", "listdir", "(", "d", ")", "\n", "filter_paths", "=", "[", "f", "for", "f", "in", "all_files", "if", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "1", "]", "in", "[", "\".jpg\"", ",", "\".png\"", "]", "]", "\n", "filter_paths", "=", "sorted", "(", "\n", "filter_paths", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", ")", "# needs be changed", "\n", "abs_paths", "=", "[", "os", ".", "path", ".", "join", "(", "d", ",", "f", ")", "for", "f", "in", "filter_paths", "]", "\n", "return", "abs_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.get_attr_label": [[20, 34], ["range", "open", "f.read().strip().split", "lines[].split", "len", "lines[].split", "zip", "len", "int", "list", "f.read().strip", "attr_dict.keys", "f.read"], "function", ["None"], ["", "def", "get_attr_label", "(", "p", ")", ":", "\n", "    ", "attr_dict", "=", "{", "}", "\n", "with", "open", "(", "p", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "attrs", "=", "lines", "[", "1", "]", ".", "split", "(", ")", "\n", "", "for", "i", "in", "range", "(", "2", ",", "len", "(", "lines", ")", ")", ":", "\n", "        ", "line", "=", "lines", "[", "i", "]", ".", "split", "(", ")", "\n", "img_name", "=", "line", "[", "0", "]", "\n", "sub_attr_dict", "=", "{", "}", "\n", "for", "attr", ",", "label", "in", "zip", "(", "attrs", ",", "line", "[", "1", ":", "]", ")", ":", "\n", "            ", "sub_attr_dict", "[", "attr", "]", "=", "int", "(", "label", ")", "\n", "", "attr_dict", "[", "img_name", "]", "=", "sub_attr_dict", "\n", "", "assert", "len", "(", "list", "(", "attr_dict", ".", "keys", "(", ")", ")", ")", "==", "CELEBA_SET_SIZE", "\n", "return", "attr_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.get_eval_label": [[36, 47], ["range", "open", "f.read().strip().split", "len", "lines[].split", "int", "len", "list", "f.read().strip", "eval_dict.keys", "f.read"], "function", ["None"], ["", "def", "get_eval_label", "(", "p", ")", ":", "\n", "    ", "eval_dict", "=", "{", "}", "\n", "with", "open", "(", "p", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "        ", "line", "=", "lines", "[", "i", "]", ".", "split", "(", ")", "\n", "img_name", "=", "line", "[", "0", "]", "\n", "label", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "eval_dict", "[", "img_name", "]", "=", "label", "\n", "", "assert", "len", "(", "list", "(", "eval_dict", ".", "keys", "(", ")", ")", ")", "==", "CELEBA_SET_SIZE", "\n", "return", "eval_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.data.unaligned_dataset.get_filted_data": [[49, 66], ["os.path.basename", "A_paths.append", "B_paths.append"], "function", ["None"], ["", "def", "get_filted_data", "(", "img_paths", ",", "attr_label", ",", "eval_label", ",", "task", "=", "None", ",", "phase", "=", "None", ")", ":", "\n", "    ", "A_paths", "=", "[", "]", "\n", "B_paths", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "\n", "eval_id", "=", "eval_label", "[", "name", "]", "\n", "if", "(", "\n", "(", "phase", "==", "\"train\"", "and", "eval_id", "==", "0", ")", "\n", "or", "(", "phase", "==", "\"val\"", "and", "eval_id", "==", "1", ")", "\n", "or", "(", "phase", "==", "\"test\"", "and", "eval_id", "==", "2", ")", "\n", ")", ":", "\n", "            ", "attr", "=", "attr_label", "[", "name", "]", "[", "task", "]", "\n", "if", "attr", "==", "1", ":", "# pos", "\n", "                ", "A_paths", ".", "append", "(", "img_path", ")", "\n", "", "elif", "attr", "==", "-", "1", ":", "# neg", "\n", "                ", "B_paths", ".", "append", "(", "img_path", ")", "\n", "", "", "", "return", "A_paths", ",", "B_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.options.test_options.TestOptions.initialize": [[10, 37], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.get_default"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.initialize"], ["def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "# define shared options", "\n", "parser", ".", "add_argument", "(", "\n", "\"--results_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./results/\"", ",", "help", "=", "\"saves results here.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--aspect_ratio\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"aspect ratio of result images\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--phase\"", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ",", "help", "=", "\"train, val, test, etc\"", "\n", ")", "\n", "# Dropout and Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "\n", "\"--eval\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use eval mode during test time.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_test\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "\"how many test images to run\"", "\n", ")", "\n", "# rewrite devalue values", "\n", "parser", ".", "set_defaults", "(", "model", "=", "\"test\"", ")", "\n", "# To avoid cropping, the load_size should be the same as crop_size", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "parser", ".", "get_default", "(", "\"crop_size\"", ")", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.options.train_options.TrainOptions.initialize": [[10, 109], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.initialize"], ["def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "# tensorboard visualization parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--display_freq\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "400", ",", "\n", "help", "=", "\"frequency of showing training results on screen\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--update_tb_freq\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1000", ",", "\n", "help", "=", "\"frequency of saving training results to tensorboard\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--print_freq\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"frequency of showing training results on console\"", ",", "\n", ")", "\n", "# network saving and loading parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_latest_freq\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5000", ",", "\n", "help", "=", "\"frequency of saving the latest results\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_epoch_freq\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "\"frequency of saving checkpoints at the end of epochs\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_by_iter\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether saves model by iteration\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--continue_train\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"continue training: load the latest model\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epoch_count\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--phase\"", ",", "type", "=", "str", ",", "default", "=", "\"train\"", ",", "help", "=", "\"train, val, test, etc\"", "\n", ")", "\n", "# training parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"number of epochs with the initial learning rate\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_epochs_decay\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "\"number of epochs to linearly decay learning rate to zero\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--beta1\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "\"momentum term of adam\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.00005", ",", "help", "=", "\"initial learning rate for adam\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gan_mode\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"lsgan\"", ",", "\n", "help", "=", "\"the type of GAN objective. [vanilla| lsgan | wgangp]. vanilla GAN loss is the cross-entropy objective used in the original GAN paper.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pool_size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "50", ",", "\n", "help", "=", "\"the size of image buffer that stores previously generated images\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_policy\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"linear\"", ",", "\n", "help", "=", "\"learning rate policy. [linear | step | plateau | cosine]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr_decay_iters\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "50", ",", "\n", "help", "=", "\"multiply by a gamma every lr_decay_iters iterations\"", ",", "\n", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.__init__": [[16, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the class; indicates the class hasn't been initailized\"\"\"", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.initialize": [[20, 194], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "\"\"\"Define the common options that are used in both training and test.\"\"\"", "\n", "# basic parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataroot\"", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"path to images (should have subfolders trainA, trainB, valA, valB, etc)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--task\"", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"specify attr task, all labeled attrs in celebA dataset [Eyeglasses | Bangs | Male | Mouth_Slightly_Open | No_Beard ...]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"experiment_name\"", ",", "\n", "help", "=", "\"name of the experiment. It decides where to store samples and models\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--gpu_ids\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0\"", ",", "\n", "help", "=", "\"gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--checkpoints_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./checkpoints\"", ",", "\n", "help", "=", "\"models are saved here\"", ",", "\n", ")", "\n", "# model parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"genegan\"", ",", "\n", "help", "=", "\"chooses which model to use. [cycle_gan | pix2pix | test | colorization | genegan]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--input_nc\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "\n", "help", "=", "\"# of input image channels: 3 for RGB and 1 for grayscale\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_nc\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "\n", "help", "=", "\"# of output image channels: 3 for RGB and 1 for grayscale\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ngf\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "64", ",", "\n", "help", "=", "\"# of gen filters in the last conv layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ndf\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "64", ",", "\n", "help", "=", "\"# of discrim filters in the first conv layer\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--netD\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"basic\"", ",", "\n", "help", "=", "\"specify discriminator architecture [basic | n_layers | pixel]. The basic model is a 70x70 PatchGAN. n_layers allows you to specify the layers in the discriminator\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--netG\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"resnet_9blocks\"", ",", "\n", "help", "=", "\"specify generator architecture [resnet_9blocks | resnet_6blocks | unet_256 | unet_128 | genenet]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--n_layers_D\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"only used if netD==n_layers\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--norm\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"instance\"", ",", "\n", "help", "=", "\"instance normalization or batch normalization [instance | batch | none]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"normal\"", ",", "\n", "help", "=", "\"network initialization [normal | xavier | kaiming | orthogonal]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init_gain\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.02", ",", "\n", "help", "=", "\"scaling factor for normal, xavier and orthogonal.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no_dropout\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"no dropout for the generator\"", "\n", ")", "\n", "# dataset parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset_mode\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"unaligned\"", ",", "\n", "help", "=", "\"chooses how datasets are loaded. [unaligned | aligned | single | colorization]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--direction\"", ",", "type", "=", "str", ",", "default", "=", "\"AtoB\"", ",", "help", "=", "\"AtoB or BtoA\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--serial_batches\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"if true, takes images in order to make batches, otherwise takes them randomly\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_threads\"", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "\"# threads for loading data\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"input batch size\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "\"scale images to this size\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--crop_size\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "\"then crop to this size\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_dataset_size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "float", "(", "\"inf\"", ")", ",", "\n", "help", "=", "\"Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--preprocess\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"resize_and_crop\"", ",", "\n", "help", "=", "\"scaling and cropping of images at load time [resize_and_crop | crop | scale_width | scale_width_and_crop | none]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no_flip\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"if specified, do not flip the images for data augmentation\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--display_winsize\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "64", ",", "\n", "help", "=", "\"display window size for tensorboard\"", ",", "\n", ")", "\n", "# additional parameters", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epoch\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"latest\"", ",", "\n", "help", "=", "\"which epoch to load? set to latest to use latest cached model\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--load_iter\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "\"0\"", ",", "\n", "help", "=", "\"which iteration to load? if load_iter > 0, the code will load models by iter_[load_iter]; otherwise, the code will load models by [epoch]\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--verbose\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"if specified, print more debugging information\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--suffix\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"customized suffix: opt.name = opt.name + suffix: e.g., {model}_{netG}_size{load_size}\"", ",", "\n", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.gather_options": [[195, 224], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "base_options.BaseOptions.parse_known_args", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.megvii-research_genegan.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize our parser with basic options(only once).\n        Add additional model-specific and dataset-specific options.\n        These options are defined in the <modify_commandline_options> function\n        in model and dataset classes.\n        \"\"\"", "\n", "if", "not", "self", ".", "initialized", ":", "# check if it has been initialized", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", "\n", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "# parse again with new defaults", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_name", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_name", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "# save and return the parser", "\n", "self", ".", "parser", "=", "parser", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.print_options": [[225, 249], ["sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "vars().items", "base_options.BaseOptions.parser.get_default", "open", "opt_file.write", "opt_file.write", "str", "str", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.util.util.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Print and save options\n\n        It will print both current options and default values(if different).\n        It will save options into a text file / [checkpoints_dir] / opt.txt\n        \"\"\"", "\n", "message", "=", "\"\"", "\n", "message", "+=", "\"----------------- Options ---------------\\n\"", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "\"\"", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "\"\\t[default: %s]\"", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "\"{:>25}: {:<30}{}\\n\"", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "\"----------------- End -------------------\"", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "\"{}_opt.txt\"", ".", "format", "(", "opt", ".", "phase", ")", ")", "\n", "with", "open", "(", "file_name", ",", "\"wt\"", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.parse": [[250, 274], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "base_options.BaseOptions.suffix.format", "vars"], "methods", ["home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.megvii-research_genegan.options.base_options.BaseOptions.print_options"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Parse our options, create checkpoints directory suffix, and set up gpu device.\"\"\"", "\n", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "# process opt.suffix", "\n", "if", "opt", ".", "suffix", ":", "\n", "            ", "suffix", "=", "(", "\"_\"", "+", "opt", ".", "suffix", ".", "format", "(", "**", "vars", "(", "opt", ")", ")", ")", "if", "opt", ".", "suffix", "!=", "\"\"", "else", "\"\"", "\n", "opt", ".", "name", "=", "opt", ".", "name", "+", "suffix", "\n", "\n", "", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "\",\"", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}