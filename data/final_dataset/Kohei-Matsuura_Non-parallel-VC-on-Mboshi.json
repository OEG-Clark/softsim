{"home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.tools.load_dat.load_dat": [[4, 30], ["open", "open.read", "struct.unpack", "int", "open.seek", "numpy.fromfile", "np.load.reshape", "np.load.byteswap", "open.close", "filename.split", "int", "numpy.load", "filename.split", "len"], "function", ["None"], ["def", "load_dat", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    To read binary data in htk or npy file.\n    The htk file includes log mel-scale filter bank.\n\n    Args:\n        filename : file name to read htk file\n\n    Returns:\n        dat : 120 (means log mel-scale filter bank) x T (time frame)\n    \"\"\"", "\n", "\n", "if", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'htk'", ":", "\n", "        ", "fh", "=", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "spam", "=", "fh", ".", "read", "(", "12", ")", "\n", "nSamples", ",", "sampPeriod", ",", "sampSize", ",", "parmKind", "=", "unpack", "(", "\">IIHH\"", ",", "spam", ")", "\n", "veclen", "=", "int", "(", "sampSize", "/", "4", ")", "\n", "fh", ".", "seek", "(", "12", ",", "0", ")", "\n", "dat", "=", "np", ".", "fromfile", "(", "fh", ",", "dtype", "=", "'float32'", ")", "\n", "dat", "=", "dat", ".", "reshape", "(", "int", "(", "len", "(", "dat", ")", "/", "veclen", ")", ",", "veclen", ")", "\n", "dat", "=", "dat", ".", "byteswap", "(", ")", "\n", "fh", ".", "close", "(", ")", "\n", "", "elif", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'npy'", ":", "\n", "        ", "dat", "=", "np", ".", "load", "(", "filename", ")", "\n", "\n", "", "return", "dat", "# (T, 120)", "\n", "", ""]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.cgan.remove_short_utts.get_htk_data": [[14, 32], ["open", "open.read", "struct.unpack", "int", "struct.unpack"], "function", ["None"], ["", "", "def", "get_htk_data", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    To read binary data in htk file.\n    The htk file includes log mel-scale filter bank.\n\n    Args:\n        filename : file name to read htk file\n\n    Returns:\n        dat : 120 (means log mel-scale filter bank) x T (time frame)\n    \"\"\"", "\n", "\n", "fh", "=", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "spam", "=", "fh", ".", "read", "(", "12", ")", "\n", "nSamples", ",", "sampPeriod", ",", "sampSize", ",", "parmKind", "=", "unpack", "(", "\">IIHH\"", ",", "spam", ")", "\n", "veclen", "=", "int", "(", "sampSize", "/", "4", ")", "\n", "\n", "return", "unpack", "(", "\">IIHH\"", ",", "spam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.Gadgets.Conv2d_In_GLU.__init__": [[8, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "        ", "super", "(", "Conv2d_In_GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "self", ".", "ins", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ")", "\n", "self", ".", "conv_gate", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "self", ".", "ins_gate", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.Gadgets.Conv2d_In_GLU.forward": [[23, 28], ["Gadgets.Conv2d_In_GLU.ins", "Gadgets.Conv2d_In_GLU.ins_gate", "Gadgets.Conv2d_In_GLU.conv", "Gadgets.Conv2d_In_GLU.conv_gate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", "\n", "first_x2", "=", "self", ".", "ins", "(", "self", ".", "conv", "(", "x1", ")", ")", "\n", "second_x2", "=", "self", ".", "ins_gate", "(", "self", ".", "conv_gate", "(", "x1", ")", ")", "\n", "return", "first_x2", "*", "torch", ".", "sigmoid", "(", "second_x2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.Generator.ResidualBlock.__init__": [[10, 32], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.Conv1d", "torch.Conv1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d"], "methods", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "512", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm1d", "(", "512", ")", "\n", "self", ".", "conv1_gate", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "512", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "in1_gate", "=", "nn", ".", "InstanceNorm1d", "(", "512", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "512", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "in2", "=", "nn", ".", "InstanceNorm1d", "(", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.Generator.ResidualBlock.forward": [[33, 41], ["Generator.ResidualBlock.in1", "Generator.ResidualBlock.in1_gate", "Generator.ResidualBlock.conv2", "Generator.ResidualBlock.in2", "Generator.ResidualBlock.conv1", "Generator.ResidualBlock.conv1_gate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", "\n", "first_x2", "=", "self", ".", "in1", "(", "self", ".", "conv1", "(", "x1", ")", ")", "\n", "second_x2", "=", "self", ".", "in1_gate", "(", "self", ".", "conv1_gate", "(", "x1", ")", ")", "\n", "x2", "=", "first_x2", "*", "torch", ".", "sigmoid", "(", "second_x2", ")", "\n", "x3", "=", "self", ".", "conv2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "in2", "(", "x3", ")", "\n", "return", "x", "+", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.Generator.Generator.__init__": [[44, 145], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv1d", "torch.Conv1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "Generator.ResidualBlock", "Generator.ResidualBlock", "Generator.ResidualBlock", "Generator.ResidualBlock", "Generator.ResidualBlock", "Generator.ResidualBlock", "torch.Conv1d", "torch.Conv1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# For Preprocessing ----------------------------", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "128", ",", "\n", "kernel_size", "=", "(", "15", ",", "5", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "7", ",", "2", ")", ")", "\n", "self", ".", "conv1_gate", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "128", ",", "\n", "kernel_size", "=", "(", "15", ",", "5", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "7", ",", "2", ")", ")", "\n", "\n", "# For Down Sampling ---------------------------", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "in2", "=", "nn", ".", "InstanceNorm2d", "(", "256", ")", "\n", "self", ".", "conv2_gate", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "in2_gate", "=", "nn", ".", "InstanceNorm2d", "(", "256", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "512", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "in3", "=", "nn", ".", "InstanceNorm2d", "(", "512", ")", "\n", "self", ".", "conv3_gate", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "512", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "in3_gate", "=", "nn", ".", "InstanceNorm2d", "(", "512", ")", "\n", "\n", "# For Reshaping from 2d into 1d ---------------", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "5120", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "in4", "=", "nn", ".", "InstanceNorm1d", "(", "512", ")", "\n", "\n", "# For Main Conversion Part --------------------", "\n", "self", ".", "res1", "=", "ResidualBlock", "(", ")", "\n", "self", ".", "res2", "=", "ResidualBlock", "(", ")", "\n", "self", ".", "res3", "=", "ResidualBlock", "(", ")", "\n", "self", ".", "res4", "=", "ResidualBlock", "(", ")", "\n", "self", ".", "res5", "=", "ResidualBlock", "(", ")", "\n", "self", ".", "res6", "=", "ResidualBlock", "(", ")", "\n", "\n", "# For Reshaping from 1d into 2d ---------------", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "5120", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "in5", "=", "nn", ".", "InstanceNorm1d", "(", "5120", ")", "\n", "\n", "# For Up Sampling -----------------------------", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "\n", "out_channels", "=", "1024", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "in6", "=", "nn", ".", "InstanceNorm2d", "(", "1024", ")", "\n", "self", ".", "ps1", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "self", ".", "conv6_gate", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "\n", "out_channels", "=", "1024", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "in6_gate", "=", "nn", ".", "InstanceNorm2d", "(", "1024", ")", "\n", "self", ".", "ps1_gate", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "512", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "in7", "=", "nn", ".", "InstanceNorm2d", "(", "512", ")", "\n", "self", ".", "ps2", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "self", ".", "conv7_gate", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "512", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "in7_gate", "=", "nn", ".", "InstanceNorm2d", "(", "512", ")", "\n", "self", ".", "ps2_gate", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "\n", "\n", "# For Postprocessing -------------------------", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "\n", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "(", "15", ",", "5", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "7", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.Generator.Generator.forward": [[146, 197], ["x.unsqueeze", "Generator.Generator.conv1", "Generator.Generator.conv1_gate", "Generator.Generator.in2", "Generator.Generator.in2_gate", "Generator.Generator.in3", "Generator.Generator.in3_gate", "x4.view.view.view", "Generator.Generator.in4", "Generator.Generator.res1", "Generator.Generator.res2", "Generator.Generator.res3", "Generator.Generator.res4", "Generator.Generator.res5", "Generator.Generator.res6", "Generator.Generator.in5", "x12.view.view.view", "Generator.Generator.in6", "Generator.Generator.in6_gate", "Generator.Generator.in7", "Generator.Generator.in7_gate", "Generator.Generator.conv8", "x15.squeeze.squeeze.squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "Generator.Generator.conv2", "Generator.Generator.conv2_gate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "Generator.Generator.conv3", "Generator.Generator.conv3_gate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "int", "Generator.Generator.conv4", "Generator.Generator.conv5", "int", "int", "Generator.Generator.ps1", "Generator.Generator.ps1_gate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "Generator.Generator.ps2", "Generator.Generator.ps2_gate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "Generator.Generator.conv6", "Generator.Generator.conv6_gate", "Generator.Generator.conv7", "Generator.Generator.conv7_gate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: (B, T, F)", "\n", "        ", "B", ",", "T", ",", "F", "=", "x", ".", "shape", "\n", "\n", "# Preprocessing ------------------------------", "\n", "# Adding channel dim.", "\n", "x1", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "first_x2", "=", "self", ".", "conv1", "(", "x1", ")", "\n", "second_x2", "=", "self", ".", "conv1_gate", "(", "x1", ")", "\n", "x2", "=", "first_x2", "*", "torch", ".", "sigmoid", "(", "second_x2", ")", "\n", "\n", "# Down Sampling ------------------------------", "\n", "first_x3", "=", "self", ".", "in2", "(", "self", ".", "conv2", "(", "x2", ")", ")", "\n", "second_x3", "=", "self", ".", "in2_gate", "(", "self", ".", "conv2_gate", "(", "x2", ")", ")", "\n", "x3", "=", "first_x3", "*", "torch", ".", "sigmoid", "(", "second_x3", ")", "\n", "\n", "first_x4", "=", "self", ".", "in3", "(", "self", ".", "conv3", "(", "x3", ")", ")", "\n", "second_x4", "=", "self", ".", "in3_gate", "(", "self", ".", "conv3_gate", "(", "x3", ")", ")", "\n", "x4", "=", "first_x4", "*", "torch", ".", "sigmoid", "(", "second_x4", ")", "\n", "\n", "# Reshaping from 2d into 1d ------------------", "\n", "x4", "=", "x4", ".", "view", "(", "B", ",", "-", "1", ",", "int", "(", "T", "/", "4", ")", ")", "\n", "x5", "=", "self", ".", "in4", "(", "self", ".", "conv4", "(", "x4", ")", ")", "\n", "\n", "# Main Conversion Part -----------------------", "\n", "x6", "=", "self", ".", "res1", "(", "x5", ")", "\n", "x7", "=", "self", ".", "res2", "(", "x6", ")", "\n", "x8", "=", "self", ".", "res3", "(", "x7", ")", "\n", "x9", "=", "self", ".", "res4", "(", "x8", ")", "\n", "x10", "=", "self", ".", "res5", "(", "x9", ")", "\n", "x11", "=", "self", ".", "res6", "(", "x10", ")", "\n", "\n", "# Reshaping from 1d into 2d ------------------", "\n", "x12", "=", "self", ".", "in5", "(", "self", ".", "conv5", "(", "x11", ")", ")", "\n", "x12", "=", "x12", ".", "view", "(", "B", ",", "-", "1", ",", "int", "(", "T", "/", "4", ")", ",", "int", "(", "F", "/", "4", ")", ")", "\n", "\n", "# Up Sampling --------------------------------", "\n", "x13_first", "=", "self", ".", "in6", "(", "self", ".", "ps1", "(", "self", ".", "conv6", "(", "x12", ")", ")", ")", "\n", "x13_second", "=", "self", ".", "in6_gate", "(", "self", ".", "ps1_gate", "(", "self", ".", "conv6_gate", "(", "x12", ")", ")", ")", "\n", "x13", "=", "x13_first", "*", "torch", ".", "sigmoid", "(", "x13_second", ")", "\n", "\n", "x14_first", "=", "self", ".", "in7", "(", "self", ".", "ps2", "(", "self", ".", "conv7", "(", "x13", ")", ")", ")", "\n", "x14_second", "=", "self", ".", "in7_gate", "(", "self", ".", "ps2_gate", "(", "self", ".", "conv7_gate", "(", "x13", ")", ")", ")", "\n", "x14", "=", "x14_first", "*", "torch", ".", "sigmoid", "(", "x14_second", ")", "\n", "\n", "# Post Processing ----------------------------", "\n", "x15", "=", "self", ".", "conv8", "(", "x14", ")", "\n", "# Removing channel_dim", "\n", "x15", "=", "x15", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "x15", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.Discriminator.Discriminator.__init__": [[12, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.Conv2d_In_GLU", "model.Conv2d_In_GLU", "model.Conv2d_In_GLU", "model.Conv2d_In_GLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1_gate", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "conv_in_glu1", "=", "gad", ".", "Conv2d_In_GLU", "(", "in_channels", "=", "128", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv_in_glu2", "=", "gad", ".", "Conv2d_In_GLU", "(", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "512", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv_in_glu3", "=", "gad", ".", "Conv2d_In_GLU", "(", "in_channels", "=", "512", ",", "\n", "out_channels", "=", "1024", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv_in_glu4", "=", "gad", ".", "Conv2d_In_GLU", "(", "in_channels", "=", "1024", ",", "\n", "out_channels", "=", "1024", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "1024", ",", "\n", "out_channels", "=", "1", ",", "\n", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.Discriminator.Discriminator.forward": [[53, 68], ["x.unsqueeze", "Discriminator.Discriminator.conv1", "Discriminator.Discriminator.conv1_gate", "Discriminator.Discriminator.conv_in_glu1", "Discriminator.Discriminator.conv_in_glu2", "Discriminator.Discriminator.conv_in_glu3", "Discriminator.Discriminator.conv_in_glu4", "Discriminator.Discriminator.conv2", "x7.squeeze.squeeze.squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Adding channel dim.", "\n", "        ", "x1", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "# Discriminating", "\n", "first_x2", "=", "self", ".", "conv1", "(", "x1", ")", "\n", "second_x2", "=", "self", ".", "conv1_gate", "(", "x1", ")", "\n", "x2", "=", "first_x2", "*", "torch", ".", "sigmoid", "(", "second_x2", ")", "\n", "x3", "=", "self", ".", "conv_in_glu1", "(", "x2", ")", "\n", "x4", "=", "self", ".", "conv_in_glu2", "(", "x3", ")", "\n", "x5", "=", "self", ".", "conv_in_glu3", "(", "x4", ")", "\n", "x6", "=", "self", ".", "conv_in_glu4", "(", "x5", ")", "\n", "x7", "=", "self", ".", "conv2", "(", "x6", ")", "\n", "# Removing channel_dim", "\n", "x7", "=", "x7", ".", "squeeze", "(", "1", ")", "\n", "return", "x7", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.__init__": [[11, 22], ["torch.Module.__init__", "model.Generator", "model.Generator", "model.Generator", "model.Generator", "model.Discriminator", "model.Discriminator", "model.Discriminator", "model.Discriminator", "model.Discriminator", "model.Discriminator", "model.Discriminator", "model.Discriminator"], "methods", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "two_step", "=", "False", ")", ":", "\n", "        ", "super", "(", "CycleGAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Gst", "=", "G", ".", "Generator", "(", ")", "\n", "self", ".", "Gts", "=", "G", ".", "Generator", "(", ")", "\n", "self", ".", "Ds", "=", "D", ".", "Discriminator", "(", ")", "\n", "self", ".", "Dt", "=", "D", ".", "Discriminator", "(", ")", "\n", "\n", "self", ".", "two_step", "=", "two_step", "\n", "if", "two_step", ":", "\n", "            ", "self", ".", "Ds2", "=", "D", ".", "Discriminator", "(", ")", "\n", "self", ".", "Dt2", "=", "D", ".", "Discriminator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.forward": [[23, 72], ["CycleGAN.CycleGAN.Gts", "CycleGAN.CycleGAN.Gst", "CycleGAN.CycleGAN.Gts", "CycleGAN.CycleGAN.Gst", "CycleGAN.CycleGAN.Ds", "CycleGAN.CycleGAN.Dt", "CycleGAN.CycleGAN.Ds", "CycleGAN.CycleGAN.Dt", "CycleGAN.CycleGAN.Gst", "CycleGAN.CycleGAN.Gts", "CycleGAN.CycleGAN.Gts", "CycleGAN.CycleGAN.Gst", "CycleGAN.CycleGAN.Ds2", "CycleGAN.CycleGAN.Dt2", "CycleGAN.CycleGAN.Ds2", "CycleGAN.CycleGAN.Dt2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "r\"\"\"\n        args:\n            source: (B, T=128, F)\n            target: (B, T=128, F)\n        output:\n            d: dictionary\n                keys: {'idt_i', 'cyc_i', 'Di_i', 'Di_fake_i'} (i = s, t)\n                if two_step = True, {'Di2_i', 'Di2_cyc_i'} is added.\n        \"\"\"", "\n", "\n", "d", "=", "{", "}", "\n", "# For Identity-mapping", "\n", "idt_s", "=", "self", ".", "Gts", "(", "source", ")", "# G_ts(s)", "\n", "idt_t", "=", "self", ".", "Gst", "(", "target", ")", "# G_st(t)", "\n", "d", "[", "'idt_s'", "]", "=", "idt_s", "\n", "d", "[", "'idt_t'", "]", "=", "idt_t", "\n", "\n", "# For Cycle-consistency", "\n", "cyc_s", "=", "self", ".", "Gts", "(", "self", ".", "Gst", "(", "source", ")", ")", "# G_ts(G_st(s))", "\n", "cyc_t", "=", "self", ".", "Gst", "(", "self", ".", "Gts", "(", "target", ")", ")", "# G_st(G_ts(t))", "\n", "d", "[", "'cyc_s'", "]", "=", "cyc_s", "\n", "d", "[", "'cyc_t'", "]", "=", "cyc_t", "\n", "\n", "# For Adversarial", "\n", "Ds_s", "=", "self", ".", "Ds", "(", "source", ")", "\n", "Dt_t", "=", "self", ".", "Dt", "(", "target", ")", "\n", "d", "[", "'Ds_s'", "]", "=", "Ds_s", "\n", "d", "[", "'Dt_t'", "]", "=", "Dt_t", "\n", "Ds_fake_s", "=", "self", ".", "Ds", "(", "self", ".", "Gts", "(", "target", ")", ")", "\n", "Dt_fake_t", "=", "self", ".", "Dt", "(", "self", ".", "Gst", "(", "source", ")", ")", "\n", "d", "[", "'Ds_fake_s'", "]", "=", "Ds_fake_s", "\n", "d", "[", "'Dt_fake_t'", "]", "=", "Dt_fake_t", "\n", "\n", "# For Two Step Adversarial", "\n", "if", "self", ".", "two_step", ":", "\n", "            ", "Ds2_s", "=", "self", ".", "Ds2", "(", "source", ")", "\n", "Dt2_t", "=", "self", ".", "Dt2", "(", "target", ")", "\n", "d", "[", "'Ds2_s'", "]", "=", "Ds2_s", "\n", "d", "[", "'Dt2_t'", "]", "=", "Dt2_t", "\n", "Ds2_cyc_s", "=", "self", ".", "Ds2", "(", "cyc_s", ")", "\n", "Dt2_cyc_t", "=", "self", ".", "Dt2", "(", "cyc_t", ")", "\n", "d", "[", "'Ds2_cyc_s'", "]", "=", "Ds2_cyc_s", "\n", "d", "[", "'Dt2_cyc_t'", "]", "=", "Dt2_cyc_t", "\n", "\n", "# # Appendix", "\n", "# d['Gst_t'] = self.Gst(source)", "\n", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.convert_st": [[73, 79], ["CycleGAN.CycleGAN.Gst"], "methods", ["None"], ["", "def", "convert_st", "(", "self", ",", "source", ")", ":", "\n", "        ", "r\"\"\"\n        To show a generated image\n        (1, T, 40) -> (1, T, 40)\n        \"\"\"", "\n", "return", "self", ".", "Gst", "(", "source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.model.CycleGAN.CycleGAN.convert_ts": [[80, 86], ["CycleGAN.CycleGAN.Gts"], "methods", ["None"], ["", "def", "convert_ts", "(", "self", ",", "target", ")", ":", "\n", "        ", "r\"\"\"\n        To show a generated image\n        (1, T, 40) -> (1, T, 40)\n        \"\"\"", "\n", "return", "self", ".", "Gts", "(", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.load_dat_htk": [[19, 66], ["open", "open.read", "struct.unpack", "int", "open.seek", "numpy.fromfile", "np.reshape().astype.reshape", "np.reshape().astype.byteswap", "open.close", "int", "np.reshape().astype.tolist", "int", "numpy.reshape", "numpy.reshape().astype", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "len", "numpy.reshape"], "function", ["None"], ["def", "load_dat_htk", "(", "filename", ",", "frame_stack", "=", "True", ",", "spec", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    To read binary data in htk file.\n    The htk file includes log mel-scale filter bank.\n\n    Args:\n        filename : file name to read htk file\n\n    Returns:\n        dat : 120 (means log mel-scale filter bank) x T (time frame)\n    \"\"\"", "\n", "\n", "fh", "=", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "spam", "=", "fh", ".", "read", "(", "12", ")", "\n", "nSamples", ",", "sampPeriod", ",", "sampSize", ",", "parmKind", "=", "unpack", "(", "\">IIHH\"", ",", "spam", ")", "\n", "veclen", "=", "int", "(", "sampSize", "/", "4", ")", "\n", "fh", ".", "seek", "(", "12", ",", "0", ")", "\n", "dat", "=", "np", ".", "fromfile", "(", "fh", ",", "dtype", "=", "'float32'", ")", "\n", "dat", "=", "dat", ".", "reshape", "(", "int", "(", "len", "(", "dat", ")", "/", "veclen", ")", ",", "veclen", ")", "\n", "dat", "=", "dat", ".", "byteswap", "(", ")", "\n", "fh", ".", "close", "(", ")", "\n", "\n", "dat", "=", "dat", "[", ":", ",", ":", "40", "]", "\n", "newlen", "=", "int", "(", "dat", ".", "shape", "[", "0", "]", "/", "3", ")", "\n", "#frame_stacking", "\n", "if", "frame_stack", ":", "\n", "        ", "dat", "=", "dat", "[", ":", "3", "*", "newlen", ",", ":", "]", "\n", "dat", "=", "np", ".", "reshape", "(", "dat", ",", "(", "newlen", ",", "3", ",", "40", ")", ")", "\n", "dat", "=", "np", ".", "reshape", "(", "dat", ",", "(", "newlen", ",", "3", "*", "40", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# spec-augmentation", "\n", "", "if", "spec", "is", "not", "None", ":", "\n", "        ", "aug_F", "=", "spec", "[", "'F'", "]", "\n", "aug_T", "=", "spec", "[", "'T'", "]", "\n", "\n", "# removing freq. bin", "\n", "aug_f_width", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "aug_F", ")", "\n", "aug_f_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "dat", ".", "shape", "[", "0", "]", "-", "aug_F", ")", "\n", "dat", "[", ":", ",", "aug_f_start", ":", "(", "aug_f_start", "+", "aug_f_width", ")", "]", "=", "0.0", "\n", "#np.set_printoptions(threshold=10000)", "\n", "# remove time bin", "\n", "if", "dat", ".", "shape", "[", "0", "]", ">", "aug_T", ":", "\n", "            ", "aug_T_width", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "aug_T", ")", "\n", "aug_T_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "dat", ".", "shape", "[", "0", "]", "-", "aug_T", ")", "\n", "dat", "[", "aug_T_start", ":", "(", "aug_T_start", "+", "aug_T_width", ")", ",", ":", "]", "=", "0.0", "\n", "\n", "", "", "return", "dat", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.load_dat": [[67, 118], ["int", "np.load.tolist", "open", "open.read", "struct.unpack", "int", "open.seek", "numpy.fromfile", "np.load.reshape", "np.load.byteswap", "open.close", "numpy.reshape", "numpy.reshape().astype", "numpy.random.randint", "numpy.random.randint", "filename.split", "int", "numpy.load", "numpy.random.randint", "numpy.random.randint", "filename.split", "numpy.reshape", "len"], "function", ["None"], ["", "def", "load_dat", "(", "filename", ",", "frame_stack", "=", "True", ",", "spec", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    To read binary data in htk or npy file.\n    The htk file includes log mel-scale filter bank.\n\n    Args:\n        filename : file name to read htk file\n\n    Returns:\n        dat : 120 (means log mel-scale filter bank) x T (time frame)\n    \"\"\"", "\n", "\n", "if", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'htk'", ":", "\n", "        ", "fh", "=", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "spam", "=", "fh", ".", "read", "(", "12", ")", "\n", "nSamples", ",", "sampPeriod", ",", "sampSize", ",", "parmKind", "=", "unpack", "(", "\">IIHH\"", ",", "spam", ")", "\n", "veclen", "=", "int", "(", "sampSize", "/", "4", ")", "\n", "fh", ".", "seek", "(", "12", ",", "0", ")", "\n", "dat", "=", "np", ".", "fromfile", "(", "fh", ",", "dtype", "=", "'float32'", ")", "\n", "dat", "=", "dat", ".", "reshape", "(", "int", "(", "len", "(", "dat", ")", "/", "veclen", ")", ",", "veclen", ")", "\n", "dat", "=", "dat", ".", "byteswap", "(", ")", "\n", "fh", ".", "close", "(", ")", "\n", "", "elif", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'npy'", ":", "\n", "        ", "dat", "=", "np", ".", "load", "(", "filename", ")", "\n", "\n", "\n", "", "dat", "=", "dat", "[", ":", ",", ":", "40", "]", "\n", "newlen", "=", "int", "(", "dat", ".", "shape", "[", "0", "]", "/", "3", ")", "\n", "#frame_stacking", "\n", "if", "frame_stack", ":", "\n", "        ", "dat", "=", "dat", "[", ":", "3", "*", "newlen", ",", ":", "]", "\n", "dat", "=", "np", ".", "reshape", "(", "dat", ",", "(", "newlen", ",", "3", ",", "40", ")", ")", "\n", "dat", "=", "np", ".", "reshape", "(", "dat", ",", "(", "newlen", ",", "3", "*", "40", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# spec-augmentation", "\n", "", "if", "spec", "==", "True", ":", "\n", "        ", "aug_F", "=", "15", "\n", "aug_T", "=", "100", "\n", "\n", "# removing freq. bin", "\n", "aug_f_width", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "aug_F", ")", "\n", "aug_f_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "dat", ".", "shape", "[", "0", "]", "-", "aug_F", ")", "\n", "dat", "[", ":", ",", "aug_f_start", ":", "(", "aug_f_start", "+", "aug_f_width", ")", "]", "=", "0.0", "\n", "#np.set_printoptions(threshold=10000)", "\n", "# remove time bin", "\n", "if", "dat", ".", "shape", "[", "0", "]", ">", "aug_T", ":", "\n", "            ", "aug_T_width", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "aug_T", ")", "\n", "aug_T_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "dat", ".", "shape", "[", "0", "]", "-", "aug_T", ")", "\n", "dat", "[", "aug_T_start", ":", "(", "aug_T_start", "+", "aug_T_width", ")", ",", ":", "]", "=", "0.0", "\n", "\n", "", "", "return", "dat", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.dir_to_list": [[119, 126], ["open", "l.strip().split", "id_list.append", "l.strip"], "function", ["None"], ["", "def", "dir_to_list", "(", "dir", ")", ":", "\n", "    ", "id_list", "=", "[", "]", "\n", "with", "open", "(", "dir", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "w", ",", "id", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "id_list", ".", "append", "(", "[", "w", ",", "id", "]", ")", "\n", "", "", "return", "id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.trans_id": [[127, 132], ["None"], "function", ["None"], ["", "def", "trans_id", "(", "input", ",", "id_l", ")", ":", "\n", "    ", "for", "w", ",", "id", "in", "id_l", ":", "\n", "        ", "if", "input", "==", "w", ":", "\n", "            ", "return", "id", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.make_pps_batches": [[133, 141], ["tools.list_to_batches", "tools.batch_to_pps"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.list_to_batches", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.batch_to_pps"], ["", "", "", "def", "make_pps_batches", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ",", "sp", "=", "None", ")", ":", "\n", "#st = time.time()", "\n", "    ", "bx", ",", "bt", "=", "list_to_batches", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ")", "\n", "#print('check1: ' + str(time.time() - st))", "\n", "px", ",", "tensor_bt", ",", "xl", ",", "tl", "=", "batch_to_pps", "(", "bx", ",", "bt", ")", "\n", "#print('check2: ' + str(time.time() - st))", "\n", "\n", "return", "px", ",", "tensor_bt", ",", "xl", ",", "tl", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.make_pps_batches_with_names": [[142, 150], ["tools.list_to_batches_with_names", "tools.batch_to_pps_with_names"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.list_to_batches_with_names", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.batch_to_pps_with_names"], ["", "def", "make_pps_batches_with_names", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ")", ":", "\n", "#st = time.time()", "\n", "    ", "bx", ",", "bt", ",", "n", "=", "list_to_batches_with_names", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ")", "\n", "#print('check1: ' + str(time.time() - st))", "\n", "px", ",", "tensor_bt", ",", "xl", ",", "tl", ",", "n", "=", "batch_to_pps_with_names", "(", "bx", ",", "bt", ",", "n", ")", "\n", "#print('check2: ' + str(time.time() - st))", "\n", "\n", "return", "px", ",", "tensor_bt", ",", "xl", ",", "tl", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.list_to_batches": [[152, 202], ["len", "int", "range", "random.shuffle", "batch_x.append", "batch_t.append", "range", "new_batch_x.append", "new_batch_t.append", "tools.load_dat", "list", "time.time", "batch_x.append", "batch_t.append", "range", "map", "tools.load_dat", "tools.str_to_int_list", "[].strip().split", "[].split", "[].strip"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.load_dat", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.load_dat", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.str_to_int_list"], ["", "def", "list_to_batches", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ",", "shuffle", "=", "False", ",", "spec", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n            str (scr_dir): script directory\n            int (batch_s): batch size\n            int (iter):    'n^th batch'\n    Output:\n            list (batch_x): R^(BATCH_SIZE * x_len * FEATURE_SIZE)\n            list (batch_t): N^(BATCH_SIZE * t_len)\n    \"\"\"", "\n", "\n", "# Read and split into lines", "\n", "x_size", "=", "len", "(", "line_list", ")", "# == FILE_LINE_NUM", "\n", "\n", "# make batch_x and batch_t", "\n", "batch_x", "=", "[", "]", "\n", "batch_t", "=", "[", "]", "\n", "\n", "# If the num of file lines is the n times of minibat size,", "\n", "# it causes error.", "\n", "is_dividable", "=", "False", "\n", "if", "line_num", "%", "bs", "==", "0", ":", "\n", "        ", "is_dividable", "=", "True", "\n", "", "if", "iteration", "<", "int", "(", "line_num", "/", "bs", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "line", "=", "bs", "*", "iteration", "+", "i", "\n", "batch_x", ".", "append", "(", "load_dat", "(", "line_list", "[", "line", "]", "[", "0", "]", ",", "spec", "=", "spec", ")", ")", "\n", "batch_t", ".", "append", "(", "list", "(", "map", "(", "int", ",", "(", "line_list", "[", "line", "]", "[", "1", "]", ")", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", ")", ")", "\n", "", "", "else", ":", "# append rest x", "\n", "        ", "if", "is_dividable", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "x_size", "%", "bs", ")", ":", "\n", "                ", "st", "=", "time", ".", "time", "(", ")", "\n", "start", "=", "x_size", "-", "(", "x_size", "%", "bs", ")", "\n", "batch_x", ".", "append", "(", "load_dat", "(", "line_list", "[", "start", "+", "i", "]", "[", "0", "]", ",", "spec", "=", "spec", ")", ")", "\n", "#batch_x.append(load_dat(line_list[start + i][0], sp))", "\n", "batch_t", ".", "append", "(", "str_to_int_list", "(", "line_list", "[", "start", "+", "i", "]", "[", "1", "]", ".", "split", "(", ")", ")", ")", "\n", "", "", "", "if", "shuffle", ":", "\n", "# For Transformer", "\n", "        ", "new_batch_x", "=", "[", "]", "\n", "new_batch_t", "=", "[", "]", "\n", "x", "=", "[", "i", "for", "i", "in", "range", "(", "bs", ")", "]", "\n", "random", ".", "shuffle", "(", "x", ")", "\n", "for", "ind", "in", "x", ":", "\n", "            ", "new_batch_x", ".", "append", "(", "batch_x", "[", "ind", "]", ")", "\n", "new_batch_t", ".", "append", "(", "batch_t", "[", "ind", "]", ")", "\n", "", "batch_x", "=", "new_batch_x", "\n", "batch_t", "=", "new_batch_t", "\n", "", "return", "batch_x", ",", "batch_t", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.padding_batch": [[204, 222], ["torch.zeros", "torch.zeros", "range", "torch.zeros", "torch.zeros", "range", "x_lens.append", "t_lens.append", "len", "max", "len", "len", "tools.padding", "torch.FloatTensor", "torch.FloatTensor", "len", "tools.padding", "torch.LongTensor", "torch.LongTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len", "len", "max", "len", "max", "max", "len"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.padding", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.padding"], ["", "def", "padding_batch", "(", "lx", ",", "lt", ")", ":", "\n", "    ", "x_lens", "=", "[", "]", "\n", "t_lens", "=", "[", "]", "\n", "for", "x", "in", "lx", ":", "\n", "        ", "x_lens", ".", "append", "(", "len", "(", "x", ")", ")", "\n", "", "for", "t", "in", "lt", ":", "\n", "        ", "t_lens", ".", "append", "(", "len", "(", "t", ")", ")", "\n", "", "bx", "=", "torch", ".", "zeros", "(", "len", "(", "lx", ")", ",", "max", "(", "x_lens", ")", ",", "len", "(", "lx", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "lx", ")", ")", ":", "\n", "        ", "padded_x", "=", "padding", "(", "lx", "[", "i", "]", ",", "max", "(", "x_lens", ")", ",", "[", "0", "]", "*", "len", "(", "lx", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "padded_x", "=", "torch", ".", "FloatTensor", "(", "padded_x", ")", "\n", "bx", "[", "i", "]", "=", "padded_x", "\n", "", "bt", "=", "torch", ".", "zeros", "(", "(", "len", "(", "lt", ")", ",", "max", "(", "t_lens", ")", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "lt", ")", ")", ":", "\n", "        ", "padded_t", "=", "padding", "(", "lt", "[", "i", "]", ",", "max", "(", "t_lens", ")", ",", "0", ")", "\n", "padded_t", "=", "torch", ".", "LongTensor", "(", "padded_t", ")", "\n", "bt", "[", "i", "]", "=", "padded_t", "\n", "", "return", "bx", ",", "torch", ".", "IntTensor", "(", "x_lens", ")", ",", "bt", ",", "torch", ".", "IntTensor", "(", "t_lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.make_onehot_target": [[224, 235], ["torch.zeros", "torch.zeros", "range", "t_lens.append", "len", "max", "len", "enumerate", "len", "tools.int_to_onehot", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.int_to_onehot"], ["", "def", "make_onehot_target", "(", "lt", ",", "class_size", ")", ":", "\n", "    ", "t_lens", "=", "[", "]", "\n", "for", "t", "in", "lt", ":", "\n", "        ", "t_lens", ".", "append", "(", "len", "(", "t", ")", ")", "\n", "", "onehots", "=", "torch", ".", "zeros", "(", "len", "(", "lt", ")", ",", "max", "(", "t_lens", ")", ",", "class_size", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "lt", ")", ")", ":", "\n", "        ", "for", "ind", ",", "j", "in", "enumerate", "(", "lt", "[", "i", "]", ")", ":", "\n", "            ", "tmp", "=", "int_to_onehot", "(", "j", ",", "class_size", ")", "\n", "tmp", "=", "torch", ".", "FloatTensor", "(", "tmp", ")", "\n", "onehots", "[", "i", "]", "[", "ind", "]", "=", "tmp", "\n", "", "", "return", "onehots", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.shift_list": [[237, 244], ["range", "len", "input.append", "truth.append"], "function", ["None"], ["", "def", "shift_list", "(", "lt", ")", ":", "\n", "    ", "input", "=", "[", "]", "\n", "truth", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lt", ")", ")", ":", "\n", "        ", "input", ".", "append", "(", "lt", "[", "i", "]", "[", "1", ":", "]", ")", "\n", "truth", ".", "append", "(", "lt", "[", "i", "]", "[", ":", "-", "1", "]", ")", "\n", "", "return", "input", ",", "truth", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.list_to_batches_with_names": [[246, 251], ["tools.list_to_batches", "tools.list_to_speaker"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.list_to_batches", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.list_to_speaker"], ["", "def", "list_to_batches_with_names", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ",", "sp", ")", ":", "\n", "    ", "batch_x", ",", "batch_t", "=", "list_to_batches", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ",", "sp", ")", "\n", "names", "=", "list_to_speaker", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ")", "\n", "\n", "return", "batch_x", ",", "batch_t", ",", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.htk_file_names": [[253, 262], ["range", "l.append"], "function", ["None"], ["", "def", "htk_file_names", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ")", ":", "\n", "    ", "\"\"\"\n    To return htk file names\n    \"\"\"", "\n", "l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "line", "=", "bs", "*", "iteration", "+", "i", "\n", "l", ".", "append", "(", "line_list", "[", "line", "]", "[", "0", "]", ")", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.list_to_speaker": [[263, 282], ["range", "speaker_list.append", "list", "[].split", "print", "exit", "l.strip().split", "l.split", "[].split", "l.strip", "[].split", "l.strip().split", "l.strip"], "function", ["None"], ["", "def", "list_to_speaker", "(", "line_list", ",", "bs", ",", "line_num", ",", "iteration", ")", ":", "\n", "    ", "\"\"\"\n    x_list -> onehot_speakers\n    \"\"\"", "\n", "speaker_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "line", "=", "bs", "*", "iteration", "+", "i", "\n", "l", "=", "line_list", "[", "line", "]", "[", "0", "]", "\n", "if", "'ainu'", "in", "l", ":", "\n", "            ", "utt", "=", "''", ".", "join", "(", "list", "(", "l", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ")", "[", "-", "2", ":", "]", ")", "\n", "", "elif", "'wsj'", "in", "l", ":", "\n", "            ", "utt", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'c0'", ")", "[", "0", "]", ".", "split", "(", "'o0'", ")", "[", "0", "]", "\n", "", "elif", "'jnas'", "in", "l", ":", "\n", "            ", "utt", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'ERROR: NOT AYNU, JNAS, or WSJ'", ")", "\n", "exit", "(", ")", "\n", "", "speaker_list", ".", "append", "(", "utt", ")", "\n", "", "return", "speaker_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.htk_to_speaker": [[283, 295], ["list", "[].split", "print", "exit", "htk.strip().split", "htk.split", "[].split", "htk.strip", "[].split", "htk.strip().split", "htk.strip"], "function", ["None"], ["", "def", "htk_to_speaker", "(", "htk", ")", ":", "\n", "    ", "utt", "=", "''", "\n", "if", "'ainu'", "in", "htk", ":", "\n", "        ", "utt", "=", "''", ".", "join", "(", "list", "(", "htk", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ")", "[", "-", "2", ":", "]", ")", "\n", "", "elif", "'wsj'", "in", "htk", ":", "\n", "        ", "utt", "=", "htk", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'c0'", ")", "[", "0", "]", ".", "split", "(", "'o0'", ")", "[", "0", "]", "\n", "", "elif", "'jnas'", "in", "htk", ":", "\n", "        ", "utt", "=", "htk", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'ERROR: NOT AYNU, JNAS, or WSJ'", ")", "\n", "exit", "(", ")", "\n", "", "return", "utt", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.speaker_to_list": [[296, 302], ["tools.str_to_int_list", "r_l.append", "tools.trans_id"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.str_to_int_list", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.trans_id"], ["", "def", "speaker_to_list", "(", "l", ",", "sp_list", ")", ":", "\n", "    ", "r_l", "=", "[", "]", "\n", "for", "s", "in", "l", ":", "\n", "        ", "r_l", ".", "append", "(", "trans_id", "(", "s", ",", "sp_list", ")", ")", "\n", "#print(r_l)", "\n", "", "return", "str_to_int_list", "(", "r_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.does_all_contain_str": [[304, 310], ["None"], "function", ["None"], ["", "def", "does_all_contain_str", "(", "s", ",", "l", ")", ":", "\n", "    ", "b", "=", "True", "\n", "for", "e", "in", "l", ":", "\n", "        ", "b", "=", "b", "and", "(", "s", "in", "e", ")", "\n", "# for all e, s is included.", "\n", "", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.does_all_not_contain_str": [[311, 317], ["None"], "function", ["None"], ["", "def", "does_all_not_contain_str", "(", "s", ",", "l", ")", ":", "\n", "    ", "b", "=", "True", "\n", "for", "e", "in", "l", ":", "\n", "        ", "b", "=", "b", "and", "not", "(", "s", "in", "e", ")", "\n", "# for all e, s is not included.", "\n", "", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.batch_to_pps": [[318, 373], ["numpy.argsort", "torch.tensor().cuda", "torch.tensor().cuda", "torch.utils.rnn.pack_padded_sequence", "torch.IntTensor().cuda", "torch.IntTensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.IntTensor().cuda", "torch.IntTensor().cuda", "orig_x_lengths.append", "len", "tools.padding", "padded_x_batch.append", "torch.IntTensor().cuda.append", "torch.IntTensor().cuda.append", "padded_t_batch.append", "len", "max", "torch.tensor", "torch.tensor", "torch.IntTensor", "torch.IntTensor", "len", "tools.padding", "torch.tensor", "torch.tensor", "torch.IntTensor", "torch.IntTensor", "max"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.padding", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.padding"], ["", "def", "batch_to_pps", "(", "x_batch", ",", "t_batch", ")", ":", "\n", "    ", "\"\"\"\n    'pps' means 'pack_padded_sequence'\n    from list_batch to tensor_batch (or pps) by padding\n\n    input:\n        list: [x1, x2, .. , xb] (b = BATCH_SIZE)\n        list: [t1, t2, .. , tb] (      ,,      )\n\n    output:\n        PackedSequence:  x_pps:     R^(longest_x_length * FEATURE_SIZE * BATCH_SIZE)\n        IntTensor:       t_tensor:  N^(BATCH_SIZE * lengest_t_length)\n        IntTensor:       x_lengths: N^(BATCH_SIZE)\n        IntTensor:       t_lengths: N^(BATCH_SIZE)\n        (FEATURE_SIZE ( = 120) is the size of a frame of lmfb)\n    \"\"\"", "\n", "#", "\n", "# ----- Processing x (= acoustic feature) -----", "\n", "#", "\n", "orig_x_lengths", "=", "[", "]", "\n", "for", "x", "in", "x_batch", ":", "\n", "        ", "orig_x_lengths", ".", "append", "(", "len", "(", "x", ")", ")", "\n", "#print(orig_x_lengths)", "\n", "", "arg_sort_lengths", "=", "np", ".", "argsort", "(", "orig_x_lengths", ")", "\n", "#print(arg_sort_lengths)", "\n", "# Revercing is required by PyTorch's pps.", "\n", "rev_arg_sort_lengths", "=", "arg_sort_lengths", "[", ":", ":", "-", "1", "]", "\n", "x_lengths", "=", "[", "]", "\n", "padded_x_batch", "=", "[", "]", "\n", "x_pad", "=", "[", "0", "]", "*", "len", "(", "x_batch", "[", "0", "]", "[", "0", "]", ")", "\n", "# x[0][0] = 120; FEATURE_SIZE", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "padded_x", "=", "padding", "(", "x_batch", "[", "i", "]", ",", "max", "(", "orig_x_lengths", ")", ",", "x_pad", ")", "\n", "padded_x_batch", ".", "append", "(", "padded_x", ")", "\n", "x_lengths", ".", "append", "(", "orig_x_lengths", "[", "i", "]", ")", "\n", "", "x_tensor", "=", "torch", ".", "tensor", "(", "padded_x_batch", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "#print(x_tensor.size())", "\n", "#print(x_lengths)", "\n", "x_pps", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x_tensor", ",", "x_lengths", ",", "batch_first", "=", "True", ")", "\n", "x_lengths", "=", "torch", ".", "IntTensor", "(", "x_lengths", ")", ".", "cuda", "(", ")", "\n", "#", "\n", "# ---------- Processing t (= label) ----------", "\n", "#", "\n", "t_lengths", "=", "[", "]", "\n", "# the same rev_arg_sort_lengths made by x for the consistency", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "t_lengths", ".", "append", "(", "len", "(", "t_batch", "[", "i", "]", ")", ")", "\n", "", "padded_t_batch", "=", "[", "]", "\n", "t_pad", "=", "0", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "padded_t_batch", ".", "append", "(", "padding", "(", "t_batch", "[", "i", "]", ",", "max", "(", "t_lengths", ")", ",", "t_pad", ")", ")", "\n", "", "t_tensor", "=", "torch", ".", "tensor", "(", "padded_t_batch", ")", ".", "cuda", "(", ")", "\n", "t_lengths", "=", "torch", ".", "IntTensor", "(", "t_lengths", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "x_pps", ",", "t_tensor", ",", "x_lengths", ",", "t_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.batch_to_pps_with_names": [[374, 435], ["numpy.argsort", "torch.tensor().cuda", "torch.tensor().cuda", "torch.utils.rnn.pack_padded_sequence", "torch.IntTensor().cuda", "torch.IntTensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.IntTensor().cuda", "torch.IntTensor().cuda", "orig_x_lengths.append", "len", "tools.padding", "padded_x_batch.append", "torch.IntTensor().cuda.append", "torch.IntTensor().cuda.append", "padded_t_batch.append", "new_names.append", "len", "max", "torch.tensor", "torch.tensor", "torch.IntTensor", "torch.IntTensor", "len", "tools.padding", "torch.tensor", "torch.tensor", "torch.IntTensor", "torch.IntTensor", "max"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.padding", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.padding"], ["", "def", "batch_to_pps_with_names", "(", "x_batch", ",", "t_batch", ",", "names", ")", ":", "\n", "    ", "\"\"\"\n    'pps' means 'pack_padded_sequence'\n    from list_batch to tensor_batch (or pps) by padding\n\n    input:\n        list: [x1, x2, .. , xb] (b = BATCH_SIZE)\n        list: [t1, t2, .. , tb] (      ,,      )\n        list: [n1, n2, .. , nb]\n\n    output:\n        PackedSequence:  x_pps:     R^(longest_x_length * FEATURE_SIZE * BATCH_SIZE)\n        IntTensor:       t_tensor:  N^(BATCH_SIZE * lengest_t_length)\n        IntTensor:       x_lengths: N^(BATCH_SIZE)\n        IntTensor:       t_lengths: N^(BATCH_SIZE)\n        list:            new_names: list(str)\n        (FEATURE_SIZE ( = 120) is the size of a frame of lmfb)\n    \"\"\"", "\n", "#", "\n", "# ----- Processing x (= acoustic feature) -----", "\n", "#", "\n", "orig_x_lengths", "=", "[", "]", "\n", "for", "x", "in", "x_batch", ":", "\n", "        ", "orig_x_lengths", ".", "append", "(", "len", "(", "x", ")", ")", "\n", "#print(orig_x_lengths)", "\n", "", "arg_sort_lengths", "=", "np", ".", "argsort", "(", "orig_x_lengths", ")", "\n", "#print(arg_sort_lengths)", "\n", "# Revercing is required by PyTorch's pps.", "\n", "rev_arg_sort_lengths", "=", "arg_sort_lengths", "[", ":", ":", "-", "1", "]", "\n", "x_lengths", "=", "[", "]", "\n", "padded_x_batch", "=", "[", "]", "\n", "x_pad", "=", "[", "0", "]", "*", "len", "(", "x_batch", "[", "0", "]", "[", "0", "]", ")", "\n", "# x[0][0] = 120; FEATURE_SIZE", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "padded_x", "=", "padding", "(", "x_batch", "[", "i", "]", ",", "max", "(", "orig_x_lengths", ")", ",", "x_pad", ")", "\n", "padded_x_batch", ".", "append", "(", "padded_x", ")", "\n", "x_lengths", ".", "append", "(", "orig_x_lengths", "[", "i", "]", ")", "\n", "", "x_tensor", "=", "torch", ".", "tensor", "(", "padded_x_batch", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "#print(x_tensor.size())", "\n", "#print(x_lengths)", "\n", "x_pps", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x_tensor", ",", "x_lengths", ",", "batch_first", "=", "True", ")", "\n", "x_lengths", "=", "torch", ".", "IntTensor", "(", "x_lengths", ")", ".", "cuda", "(", ")", "\n", "#", "\n", "# ---------- Processing t (= label) ----------", "\n", "#", "\n", "t_lengths", "=", "[", "]", "\n", "# the same rev_arg_sort_lengths made by x for the consistency", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "t_lengths", ".", "append", "(", "len", "(", "t_batch", "[", "i", "]", ")", ")", "\n", "", "padded_t_batch", "=", "[", "]", "\n", "t_pad", "=", "0", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "padded_t_batch", ".", "append", "(", "padding", "(", "t_batch", "[", "i", "]", ",", "max", "(", "t_lengths", ")", ",", "t_pad", ")", ")", "\n", "", "t_tensor", "=", "torch", ".", "tensor", "(", "padded_t_batch", ")", ".", "cuda", "(", ")", "\n", "t_lengths", "=", "torch", ".", "IntTensor", "(", "t_lengths", ")", ".", "cuda", "(", ")", "\n", "\n", "new_names", "=", "[", "]", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "new_names", ".", "append", "(", "names", "[", "i", "]", ")", "\n", "\n", "", "return", "x_pps", ",", "t_tensor", ",", "x_lengths", ",", "t_lengths", ",", "new_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.str_to_int_list": [[455, 460], ["int_l.append", "int"], "function", ["None"], ["def", "str_to_int_list", "(", "l", ")", ":", "\n", "    ", "int_l", "=", "[", "]", "\n", "for", "i", "in", "l", ":", "\n", "        ", "int_l", ".", "append", "(", "int", "(", "i", ")", ")", "\n", "", "return", "int_l", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.int_to_str_list": [[461, 466], ["str_l.append", "str"], "function", ["None"], ["", "def", "int_to_str_list", "(", "l", ")", ":", "\n", "    ", "str_l", "=", "[", "]", "\n", "for", "i", "in", "l", ":", "\n", "        ", "str_l", ".", "append", "(", "str", "(", "i", ")", ")", "\n", "", "return", "str_l", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.padding": [[467, 476], ["range", "l.append", "len"], "function", ["None"], ["", "def", "padding", "(", "l", ",", "length", ",", "pad", ")", ":", "\n", "    ", "\"\"\"\n    i.e.\n    input: [1, 2, 3], len = 5, pad = 0\n    output: [1, 2, 3, 0, 0]\n    \"\"\"", "\n", "for", "i", "in", "range", "(", "length", "-", "len", "(", "l", ")", ")", ":", "\n", "        ", "l", ".", "append", "(", "pad", ")", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.int_to_onehot": [[478, 488], ["None"], "function", ["None"], ["", "def", "int_to_onehot", "(", "label_num", ",", "class_num", ")", ":", "\n", "    ", "\"\"\"\n    int -> list\n    WARNING! the label_num must start '0'\n    if label_num = 3, class_num = 10,\n    onehot = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\n    \"\"\"", "\n", "onehot", "=", "[", "0", "]", "*", "class_num", "\n", "onehot", "[", "label_num", "]", "=", "1", "\n", "return", "onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.int_to_LS": [[490, 501], ["None"], "function", ["None"], ["", "def", "int_to_LS", "(", "label_num", ",", "class_num", ",", "LS_lambda", ")", ":", "\n", "    ", "\"\"\"\n    int -> list\n    WARNING! the label_num must start '0'\n    if label_num = 3, class_num = 10,\n    onehot = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\n    \"\"\"", "\n", "onehot", "=", "[", "(", "1", "-", "LS_lambda", ")", "/", "class_num", "]", "*", "class_num", "\n", "onehot", "[", "label_num", "]", "=", "LS_lambda", "\n", "\n", "return", "onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.t_batch_to_onehot": [[505, 521], ["numpy.zeros", "range", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "len", "range", "len", "tl.max", "len", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["def", "t_batch_to_onehot", "(", "targets", ",", "tl", ",", "word_size", ")", ":", "\n", "    ", "\"\"\"\n    int_list -> Tensor\n    \"\"\"", "\n", "onehot_targets", "=", "np", ".", "zeros", "(", "(", "len", "(", "targets", ")", ",", "tl", ".", "max", "(", ")", ",", "word_size", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "targets", "[", "0", "]", ")", ")", ":", "\n", "#a = int(round(time.time()*1000))", "\n", "#print(a)", "\n", "            ", "if", "j", "<", "tl", "[", "i", "]", ":", "\n", "                ", "onehot_targets", "[", "i", "]", "[", "j", "]", "[", "targets", "[", "i", "]", "[", "j", "]", "]", "=", "1", "\n", "", "else", ":", "\n", "# padding", "\n", "                ", "pass", "\n", "", "", "", "onehot_targets", "=", "torch", ".", "FloatTensor", "(", "onehot_targets", ")", ".", "cuda", "(", ")", "\n", "return", "onehot_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.t_batch_to_LS": [[522, 542], ["numpy.array", "range", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "len", "range", "len", "len", "torch.FloatTensor", "torch.FloatTensor", "int", "tl.max"], "function", ["None"], ["", "def", "t_batch_to_LS", "(", "targets", ",", "tl", ",", "word_size", ",", "LS_lambda", ")", ":", "\n", "    ", "\"\"\"\n    int_list -> Tensor\n    \"\"\"", "\n", "#print(LS_lambda)", "\n", "#print(word_size)", "\n", "#print(tl.max())", "\n", "#print(len(targets))", "\n", "onehot_targets", "=", "np", ".", "array", "(", "[", "[", "[", "(", "1", "-", "LS_lambda", ")", "/", "word_size", "]", "*", "word_size", "]", "*", "int", "(", "tl", ".", "max", "(", ")", ")", "]", "*", "len", "(", "targets", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "targets", "[", "0", "]", ")", ")", ":", "\n", "#a = int(round(time.time()*1000))", "\n", "#print(a)", "\n", "            ", "if", "j", "<", "tl", "[", "i", "]", ":", "\n", "                ", "onehot_targets", "[", "i", "]", "[", "j", "]", "[", "targets", "[", "i", "]", "[", "j", "]", "]", "=", "LS_lambda", "\n", "", "else", ":", "\n", "# padding", "\n", "                ", "pass", "\n", "", "", "", "onehot_targets", "=", "torch", ".", "FloatTensor", "(", "onehot_targets", ")", ".", "cuda", "(", ")", "\n", "return", "onehot_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.cross_entropy": [[543, 550], ["torch.log", "torch.log"], "function", ["None"], ["", "def", "cross_entropy", "(", "pred_dist", ",", "true_dist", ")", ":", "\n", "    ", "\"\"\"\n    p: L*W (W: Word Size), already softmaxed\n    q: L*W, onehot vector or all zero (padding)\n    \"\"\"", "\n", "loss", "=", "-", "(", "torch", ".", "log", "(", "pred_dist", ")", "*", "true_dist", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.batch_softmax": [[551, 560], ["torch.zeros().cuda", "torch.zeros().cuda", "range", "len", "b[].max", "torch.exp", "torch.exp", "torch.exp.sum", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "batch_softmax", "(", "b", ")", ":", "\n", "    ", "t", "=", "torch", ".", "zeros", "(", "b", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "        ", "max_x", "=", "b", "[", "i", "]", ".", "max", "(", ")", "\n", "t", "[", "i", "]", "=", "b", "[", "i", "]", "-", "max_x", "\n", "exp_bi", "=", "torch", ".", "exp", "(", "t", "[", "i", "]", ")", "\n", "sum_exp_bi", "=", "exp_bi", ".", "sum", "(", ")", "\n", "t", "[", "i", "]", "=", "exp_bi", "/", "sum_exp_bi", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.KL": [[561, 569], ["torch.log", "torch.log"], "function", ["None"], ["", "def", "KL", "(", "pred_dist", ",", "true_dist", ")", ":", "\n", "    ", "\"\"\"\n    p: L*W (W: Word Size), already softmaxed\n    q: L*W, onehot vector or all zero (padding)\n    \"\"\"", "\n", "loss", "=", "-", "(", "torch", ".", "log", "(", "pred_dist", ")", "*", "true_dist", ")", ".", "sum", "(", ")", "\n", "# true_dist[0] = <SOS>, so you must not include this at comparing.", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.MSE": [[570, 572], ["None"], "function", ["None"], ["", "def", "MSE", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "return", "(", "(", "x1", "-", "x2", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.Cosine": [[573, 577], ["x1.detach().cpu().numpy.detach().cpu().numpy", "x2.detach().cpu().numpy.detach().cpu().numpy", "numpy.dot", "x1.detach().cpu().numpy.detach().cpu", "x2.detach().cpu().numpy.detach().cpu", "numpy.linalg.norm", "numpy.linalg.norm", "x1.detach().cpu().numpy.detach", "x2.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "Cosine", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "x1", "=", "x1", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "x2", "=", "x2", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "np", ".", "dot", "(", "x1", ",", "x2", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "x1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "x2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.init_weight": [[578, 599], ["classname.find", "m.weight.data.uniform_", "isinstance", "classname.find", "m.named_parameters", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.fill_", "classname.find", "m.bias.data.fill_", "torch.init.kaiming_normal_", "param.data.fill_"], "function", ["None"], ["", "def", "init_weight", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    To initialize weights and biases.\n    \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "if", "isinstance", "(", "m", ".", "bias", ",", "nn", ".", "parameter", ".", "Parameter", ")", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "", "", "if", "classname", ".", "find", "(", "'LSTM'", ")", "!=", "-", "1", ":", "\n", "        ", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ".", "data", ")", "\n", "", "if", "'bias'", "in", "name", ":", "\n", "                ", "param", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "", "", "", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "and", "classname", "!=", "'Conv2d_In_GLU'", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "isinstance", "(", "m", ".", "bias", ",", "nn", ".", "parameter", ".", "Parameter", ")", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.file_to_list": [[601, 607], ["open", "l.append", "line.strip"], "function", ["None"], ["", "", "", "def", "file_to_list", "(", "filename", ")", ":", "\n", "    ", "l", "=", "[", "]", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "l", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "return", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.batch_to_lengths": [[609, 614], ["torch.IntTensor().cuda", "torch.IntTensor().cuda", "lens.append", "len", "torch.IntTensor", "torch.IntTensor"], "function", ["None"], ["", "def", "batch_to_lengths", "(", "batch", ")", ":", "\n", "    ", "lens", "=", "[", "]", "\n", "for", "e", "in", "batch", ":", "\n", "        ", "lens", ".", "append", "(", "len", "(", "e", ")", ")", "\n", "", "return", "torch", ".", "IntTensor", "(", "lens", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.print_dict": [[616, 628], ["print", "k.find", "print", "print", "str"], "function", ["None"], ["", "def", "print_dict", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    To print dictionary type.\n    If the key contains 'align', it is not be printed.\n    (Because it is only an alignment.)\n    \"\"\"", "\n", "for", "k", "in", "d", ":", "\n", "        ", "if", "k", ".", "find", "(", "'align'", ")", "==", "-", "1", ":", "\n", "            ", "print", "(", "k", "+", "':\\t'", "+", "str", "(", "d", "[", "k", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "d", "[", "k", "]", ")", "\n", "", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.contractor": [[629, 640], ["con_list.append", "int"], "function", ["None"], ["", "def", "contractor", "(", "l", ",", "BLANK_ID", ")", ":", "\n", "    ", "\"\"\"\n    For decoding CTC\n    \"\"\"", "\n", "prev", "=", "BLANK_ID", "\n", "con_list", "=", "[", "]", "\n", "for", "i", "in", "l", ":", "\n", "        ", "if", "prev", "!=", "i", "and", "i", "!=", "BLANK_ID", ":", "\n", "            ", "con_list", ".", "append", "(", "int", "(", "i", ")", ")", "\n", "prev", "=", "i", "\n", "", "", "return", "con_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.list_to_str": [[641, 646], ["str"], "function", ["None"], ["", "def", "list_to_str", "(", "l", ")", ":", "\n", "    ", "s", "=", "''", "\n", "for", "i", "in", "l", ":", "\n", "        ", "s", "=", "s", "+", "str", "(", "i", ")", "+", "' '", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.batch_to_ave": [[647, 655], ["torch.zeros", "torch.zeros", "range", "torch.zeros.cuda", "bx[].sum"], "function", ["None"], ["", "def", "batch_to_ave", "(", "bx", ",", "xl", ")", ":", "\n", "    ", "\"\"\"\n    B*T*H > B*H\n    \"\"\"", "\n", "ave_bx", "=", "torch", ".", "zeros", "(", "(", "bx", ".", "shape", "[", "0", "]", ",", "bx", ".", "shape", "[", "2", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "bx", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ave_bx", "[", "i", "]", "=", "bx", "[", "i", "]", ".", "sum", "(", "dim", "=", "0", ")", "# / xl[i]", "\n", "", "return", "ave_bx", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.get_clones": [[657, 663], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "def", "get_clones", "(", "module", ",", "n", ")", ":", "\n", "    ", "\"\"\"\n    To implement 'N-layer modules' in Transformer.\\n\n    by deep-copying and making a list of modules \\n\n    \"\"\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "n", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.tensor_to_img": [[667, 673], ["t.cpu.cpu", "matplotlib.subplots", "ax.imshow", "matplotlib.savefig", "t.cpu.detach().numpy", "t.cpu.detach"], "function", ["None"], ["def", "tensor_to_img", "(", "t", ",", "filename", ")", ":", "\n", "    ", "t", "=", "t", ".", "cpu", "(", ")", "\n", "t", "=", "t", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "T", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "imshow", "(", "t", ",", "origin", "=", "'lower'", ")", "\n", "plt", ".", "savefig", "(", "filename", ",", "bbox_inches", "=", "'tight'", ",", "dpi", "=", "640", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.tools.calc_param_num": [[674, 683], ["filter", "list", "model.parameters", "list", "p.size"], "function", ["None"], ["", "def", "calc_param_num", "(", "model", ")", ":", "\n", "    ", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "pp", "=", "0", "\n", "for", "p", "in", "list", "(", "model_parameters", ")", ":", "\n", "        ", "nn", "=", "1", "\n", "for", "s", "in", "list", "(", "p", ".", "size", "(", ")", ")", ":", "\n", "            ", "nn", "=", "nn", "*", "s", "\n", "", "pp", "+=", "nn", "\n", "", "return", "pp", "\n", "", ""]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.load_dat": [[11, 42], ["open", "open.read", "struct.unpack", "int", "open.seek", "numpy.fromfile", "np.load.reshape", "np.load.byteswap", "open.close", "int", "numpy.reshape", "numpy.reshape().astype", "filename.split", "int", "numpy.load", "filename.split", "numpy.reshape", "len"], "function", ["None"], ["def", "load_dat", "(", "filename", ",", "frame_stacking", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    To read binary data in htk or npy file.\n    The htk file includes log mel-scale filter bank.\n\n    Args:\n        filename : file name to read htk file\n\n    Returns:\n        dat : (means log mel-scale filter bank) x T (time frame)\n    \"\"\"", "\n", "if", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'htk'", ":", "\n", "        ", "fh", "=", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "spam", "=", "fh", ".", "read", "(", "12", ")", "\n", "nSamples", ",", "sampPeriod", ",", "sampSize", ",", "parmKind", "=", "unpack", "(", "\">IIHH\"", ",", "spam", ")", "\n", "veclen", "=", "int", "(", "sampSize", "/", "4", ")", "\n", "fh", ".", "seek", "(", "12", ",", "0", ")", "\n", "dat", "=", "np", ".", "fromfile", "(", "fh", ",", "dtype", "=", "'float32'", ")", "\n", "dat", "=", "dat", ".", "reshape", "(", "int", "(", "len", "(", "dat", ")", "/", "veclen", ")", ",", "veclen", ")", "\n", "dat", "=", "dat", ".", "byteswap", "(", ")", "\n", "fh", ".", "close", "(", ")", "\n", "", "elif", "filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'npy'", ":", "\n", "        ", "dat", "=", "np", ".", "load", "(", "filename", ")", "\n", "", "dat", "=", "dat", "[", ":", ",", ":", "40", "]", "# removing delta and delta-delta", "\n", "#frame_stacking", "\n", "if", "frame_stacking", ":", "\n", "        ", "newlen", "=", "int", "(", "dat", ".", "shape", "[", "0", "]", "/", "3", ")", "\n", "dat", "=", "dat", "[", ":", "3", "*", "newlen", ",", ":", "]", "\n", "dat", "=", "np", ".", "reshape", "(", "dat", ",", "(", "newlen", ",", "3", ",", "40", ")", ")", "\n", "dat", "=", "np", ".", "reshape", "(", "dat", ",", "(", "newlen", ",", "3", "*", "40", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "dat", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.add_mergins": [[44, 59], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "add_mergins", "(", "features", ",", "mergin_width", ")", ":", "\n", "    ", "\"\"\"\n    np.array: (L, F) -> np.array: (L-2M, 2M+1, F) \\n\n    From features to features with mergins \\n\n    i.e. \\n\n    [f1, f2, f3, f4, f5] -> [[f1, f2, f3], [f2, f3, f4], [f3, f4, f5]] \\n\n    \"\"\"", "\n", "M", "=", "mergin_width", "\n", "L", "=", "features", ".", "shape", "[", "0", "]", "\n", "F", "=", "features", ".", "shape", "[", "1", "]", "\n", "new_features", "=", "np", ".", "zeros", "(", "(", "L", "-", "2", "*", "M", ",", "2", "*", "M", "+", "1", ",", "F", ")", ")", "\n", "for", "i", "in", "range", "(", "L", "-", "2", "*", "M", ")", ":", "\n", "        ", "C", "=", "i", "+", "M", "# 'C' means 'central'", "\n", "new_features", "[", "i", ",", ":", ",", ":", "]", "=", "features", "[", "C", "-", "M", ":", "C", "+", "M", "+", "1", ",", ":", "]", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.script_to_filelist": [[61, 75], ["open", "filelist.append", "l.strip"], "function", ["None"], ["", "def", "script_to_filelist", "(", "script_dir", ")", ":", "\n", "    ", "\"\"\"\n    The script is supposed to be as below. \\n\n    (MEMO: use script in 'evals', that is, no labels)\n        filename1\\n\n        filename2\\n\n        ...\\n\n        filenameN\\n\n    \"\"\"", "\n", "filelist", "=", "[", "]", "\n", "with", "open", "(", "script_dir", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "filelist", ".", "append", "(", "l", ".", "strip", "(", ")", ")", "\n", "", "", "return", "filelist", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.divide_by_episode": [[77, 92], ["l.split", "divided_list[].append", "divided_list.append"], "function", ["None"], ["", "def", "divide_by_episode", "(", "filelist", ")", ":", "\n", "    ", "\"\"\"\n    To divide filelist by episodes \\n\n    The filelist must not be sorted. \\n\n    \"\"\"", "\n", "divided_list", "=", "[", "]", "\n", "now_episode", "=", "''", "\n", "for", "l", "in", "filelist", ":", "\n", "        ", "episode", "=", "l", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "if", "episode", "==", "now_episode", ":", "\n", "            ", "divided_list", "[", "-", "1", "]", ".", "append", "(", "l", ")", "\n", "", "else", ":", "\n", "            ", "divided_list", ".", "append", "(", "[", "l", "]", ")", "\n", "now_episode", "=", "episode", "\n", "", "", "return", "divided_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.filelist_to_features": [[94, 103], ["numpy.array", "CycleGANTools.load_dat", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.load_dat"], ["", "def", "filelist_to_features", "(", "filelist", ",", "feature_dim", "=", "40", ")", ":", "\n", "    ", "\"\"\"\n    Stacking features from all files\n    \"\"\"", "\n", "stacked_features", "=", "np", ".", "array", "(", "[", "0", "]", "*", "feature_dim", ")", "\n", "for", "l", "in", "filelist", ":", "\n", "        ", "f", "=", "load_dat", "(", "l", ")", "\n", "stacked_features", "=", "np", ".", "vstack", "(", "(", "stacked_features", ",", "f", ")", ")", "\n", "", "return", "stacked_features", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.shuffle_features": [[105, 116], ["numpy.zeros", "numpy.random.permutation", "enumerate"], "function", ["None"], ["", "def", "shuffle_features", "(", "features", ")", ":", "\n", "    ", "\"\"\"\n    np.array: (L-2M, F) -> np.array: (L-2M, F) \\n\n    To shuffle feature blocks\n    \"\"\"", "\n", "feature_num", "=", "features", ".", "shape", "[", "0", "]", "\n", "shuffled_features", "=", "np", ".", "zeros", "(", "features", ".", "shape", ")", "\n", "random_indice", "=", "np", ".", "random", ".", "permutation", "(", "feature_num", ")", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "random_indice", ")", ":", "\n", "        ", "shuffled_features", "[", "i", "]", "=", "features", "[", "ind", "]", "\n", "", "return", "shuffled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.shuffle_features_gpu": [[118, 129], ["torch.zeros().cuda", "torch.zeros().cuda", "numpy.random.permutation", "enumerate", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "shuffle_features_gpu", "(", "features", ")", ":", "\n", "    ", "\"\"\"\n    np.array: (L-2M, F) -> np.array: (L-2M, F) \\n\n    To shuffle feature blocks\n    \"\"\"", "\n", "feature_num", "=", "features", ".", "shape", "[", "0", "]", "\n", "shuffled_features", "=", "torch", ".", "zeros", "(", "features", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "random_indice", "=", "np", ".", "random", ".", "permutation", "(", "feature_num", ")", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "random_indice", ")", ":", "\n", "        ", "shuffled_features", "[", "i", "]", "=", "features", "[", "ind", "]", "\n", "", "return", "shuffled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.prepare_features": [[131, 163], ["CycleGANTools.script_to_filelist", "CycleGANTools.divide_by_episode", "numpy.zeros", "enumerate", "CycleGANTools.shuffle_features", "len", "print", "CycleGANTools.filelist_to_features", "CycleGANTools.add_mergins", "numpy.append", "CycleGANTools.filelist_to_features", "CycleGANTools.add_mergins", "numpy.zeros", "print", "sys.exit", "CycleGANTools.filelist_to_features", "CycleGANTools.add_mergins", "numpy.append"], "function", ["home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.script_to_filelist", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.divide_by_episode", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.shuffle_features", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.filelist_to_features", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.add_mergins", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.filelist_to_features", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.add_mergins", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.filelist_to_features", "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.add_mergins"], ["", "def", "prepare_features", "(", "dir", ",", "M_W", ",", "F", ",", "mergin_option", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    'mergin_option' = 'episode' / 'full' / 'utterance' \\n\n    With this, you can register what to be regarded as an vector.\n    \"\"\"", "\n", "filelist", "=", "script_to_filelist", "(", "dir", ")", "\n", "if", "mergin_option", "==", "'episode'", ":", "\n", "        ", "list_by_episode", "=", "divide_by_episode", "(", "filelist", ")", "\n", "all_features", "=", "np", ".", "zeros", "(", "(", "1", ",", "M_W", "*", "2", "+", "1", ",", "F", ")", ")", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "list_by_episode", ")", ":", "\n", "            ", "episode_num", "=", "len", "(", "list_by_episode", ")", "\n", "print", "(", "'Loading {}/{} episode...'", ".", "format", "(", "i", "+", "1", ",", "episode_num", ")", ")", "\n", "epi_features", "=", "filelist_to_features", "(", "e", ")", "\n", "epi_featureblocks", "=", "add_mergins", "(", "epi_features", ",", "M_W", ")", "\n", "all_features", "=", "np", ".", "append", "(", "all_features", ",", "epi_featureblocks", ",", "axis", "=", "0", ")", "\n", "", "all_features", "=", "all_features", "[", "1", ":", "]", "\n", "", "elif", "mergin_option", "==", "'full'", ":", "\n", "        ", "all_features", "=", "filelist_to_features", "(", "filelist", ")", "\n", "all_features", "=", "add_mergins", "(", "all_features", ",", "M_W", ")", "\n", "", "elif", "mergin_option", "==", "'utterance'", ":", "\n", "        ", "all_features", "=", "np", ".", "zeros", "(", "(", "1", ",", "M_W", "*", "2", "+", "1", ",", "F", ")", ")", "\n", "for", "u", "in", "filelist", ":", "\n", "            ", "features", "=", "filelist_to_features", "(", "[", "u", "]", ")", "\n", "featureblocks", "=", "add_mergins", "(", "features", ",", "M_W", ")", "\n", "all_features", "=", "np", ".", "append", "(", "all_features", ",", "featureblocks", ",", "axis", "=", "0", ")", "\n", "", "all_features", "=", "all_features", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'NO SUCH OPTION: {}'", ".", "format", "(", "mergin_option", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "all_features", "=", "shuffle_features", "(", "all_features", ")", "\n", "", "return", "all_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.gradient_penalty": [[165, 183], ["torch.rand", "torch.rand", "alpha.cuda.expand().contiguous().view", "alpha.cuda.cuda", "interpolates.requires_grad_", "net", "torch.autograd.grad", "torch.autograd.grad", "gradients[].view", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "alpha.cuda.expand().contiguous", "torch.ones().cuda", "torch.ones().cuda", "torch.sum", "torch.sum", "alpha.cuda.expand", "torch.ones", "torch.ones", "net.size"], "function", ["None"], ["", "def", "gradient_penalty", "(", "net", ",", "real", ",", "fake", ")", ":", "\n", "    ", "B", ",", "W", ",", "F", "=", "real", ".", "shape", "\n", "alpha", "=", "torch", ".", "rand", "(", "real", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "B", ",", "W", "*", "F", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "W", ",", "F", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "\n", "interpolates", "=", "real", "*", "alpha", "+", "fake", "*", "(", "1", "-", "alpha", ")", "\n", "interpolates", ".", "requires_grad_", "(", "True", ")", "\n", "D_interpolates", "=", "net", "(", "interpolates", ")", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "D_interpolates", ",", "\n", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "D_interpolates", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "\n", "gradients", "=", "gradients", "[", "0", "]", ".", "view", "(", "B", ",", "-", "1", ")", "# flattening", "\n", "gradient_norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "gradients", "**", "2", ",", "dim", "=", "1", ")", "+", "1e-12", ")", "\n", "gradient_penalty", "=", "torch", ".", "mean", "(", "(", "gradient_norm", "-", "1", ")", "**", "2", ")", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.random_pick": [[231, 238], ["random.randint"], "function", ["None"], ["", "def", "random_pick", "(", "x", ",", "W", ")", ":", "\n", "    ", "r\"\"\"\n    (T, F) -> (W, F) where T > W\n    \"\"\"", "\n", "T", ",", "F", "=", "x", ".", "shape", "\n", "start_edge", "=", "random", ".", "randint", "(", "0", ",", "T", "-", "W", ")", "\n", "return", "x", "[", "start_edge", ":", "(", "start_edge", "+", "W", ")", ",", ":", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.Kohei-Matsuura_Non-parallel-VC-on-Mboshi.utils.CycleGANTools.padding_feats": [[194, 230], ["numpy.argsort", "torch.pad_sequence", "torch.pack_padded_sequence", "torch.IntTensor().cuda", "torch.IntTensor().cuda", "torch.pad_sequence", "torch.IntTensor().cuda", "torch.IntTensor().cuda", "orig_x_lengths.append", "len", "sorted_x_batch.append", "torch.IntTensor().cuda.append", "torch.IntTensor().cuda.append", "sorted_t_batch.append", "len", "torch.IntTensor", "torch.IntTensor", "len", "torch.IntTensor", "torch.IntTensor"], "function", ["None"], ["", "def", "padding_feats", "(", "x_batch", ",", "t_batch", ")", ":", "\n", "    ", "\"\"\"\n    input:\n        conv_x_list: list(tensor)\n        label_list: list(list(int))\n    output:\n        px, bt, xl, tl\n    \"\"\"", "\n", "orig_x_lengths", "=", "[", "]", "\n", "for", "x", "in", "x_batch", ":", "\n", "        ", "orig_x_lengths", ".", "append", "(", "len", "(", "x", ")", ")", "\n", "", "arg_sort_lengths", "=", "np", ".", "argsort", "(", "orig_x_lengths", ")", "\n", "# Revercing is required by PyTorch's pps.", "\n", "rev_arg_sort_lengths", "=", "arg_sort_lengths", "[", ":", ":", "-", "1", "]", "\n", "x_lengths", "=", "[", "]", "\n", "sorted_x_batch", "=", "[", "]", "\n", "x_pad", "=", "[", "0", "]", "*", "len", "(", "x_batch", "[", "0", "]", "[", "0", "]", ")", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "sorted_x_batch", ".", "append", "(", "x_batch", "[", "i", "]", ")", "\n", "x_lengths", ".", "append", "(", "orig_x_lengths", "[", "i", "]", ")", "\n", "", "x_tensor", "=", "rnn", ".", "pad_sequence", "(", "sorted_x_batch", ",", "batch_first", "=", "True", ")", "\n", "x_pps", "=", "rnn", ".", "pack_padded_sequence", "(", "x_tensor", ",", "x_lengths", ",", "batch_first", "=", "True", ")", "\n", "x_lengths", "=", "torch", ".", "IntTensor", "(", "x_lengths", ")", ".", "cuda", "(", ")", "\n", "\n", "t_lengths", "=", "[", "]", "\n", "# the same rev_arg_sort_lengths made by x for the consistency", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "t_lengths", ".", "append", "(", "len", "(", "t_batch", "[", "i", "]", ")", ")", "\n", "", "sorted_t_batch", "=", "[", "]", "\n", "t_pad", "=", "0", "\n", "for", "i", "in", "rev_arg_sort_lengths", ":", "\n", "        ", "sorted_t_batch", ".", "append", "(", "t_batch", "[", "i", "]", ")", "\n", "", "t_tensor", "=", "rnn", ".", "pad_sequence", "(", "sorted_t_batch", ",", "batch_first", "=", "True", ")", "\n", "t_lengths", "=", "torch", ".", "IntTensor", "(", "t_lengths", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "x_pps", ",", "t_tensor", ",", "x_lengths", ",", "t_lengths", "\n", "\n"]]}