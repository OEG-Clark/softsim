{"home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.load_data.load_mnist": [[12, 52], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "affine_transforms.Rotation", "affine_transforms.Zoom", "torchvision.transforms.Normalize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "load_mnist", "(", "data_aug", ",", "batch_size", ",", "test_batch_size", ",", "cuda", ",", "data_target_dir", ")", ":", "\n", "\n", "    ", "if", "data_aug", "==", "1", ":", "\n", "        ", "hw_size", "=", "24", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "hw_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "Rotation", "(", "15", ")", ",", "\n", "Zoom", "(", "(", "0.85", ",", "1.15", ")", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "hw_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "hw_size", "=", "28", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", "\n", "\n", "\n", "", "kwargs", "=", "{", "'num_workers'", ":", "0", ",", "'pin_memory'", ":", "True", "}", "if", "cuda", "else", "{", "}", "\n", "\n", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "data_target_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "data_target_dir", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.load_data.load_data": [[54, 115], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.datasets.STL10", "torchvision.datasets.STL10"], "function", ["None"], ["", "def", "load_data", "(", "data_aug", ",", "batch_size", ",", "workers", ",", "dataset", ",", "data_target_dir", ")", ":", "\n", "\n", "    ", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "\n", "", "elif", "dataset", "==", "'svhn'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "127.5", ",", "127.5", ",", "127.5", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "127.5", ",", "127.5", ",", "127.5", "]", "]", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "\"Unknow dataset : {}\"", ".", "format", "(", "dataset", ")", "\n", "\n", "", "if", "data_aug", "==", "1", ":", "\n", "        ", "if", "dataset", "==", "'svhn'", ":", "\n", "            ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "2", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "CIFAR10", "(", "data_target_dir", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "data_target_dir", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "num_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "CIFAR100", "(", "data_target_dir", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR100", "(", "data_target_dir", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "num_classes", "=", "100", "\n", "", "elif", "dataset", "==", "'svhn'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "SVHN", "(", "data_target_dir", ",", "split", "=", "'train'", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "SVHN", "(", "data_target_dir", ",", "split", "=", "'test'", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "num_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'stl10'", ":", "\n", "        ", "train_data", "=", "datasets", ".", "STL10", "(", "data_target_dir", ",", "split", "=", "'train'", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "datasets", ".", "STL10", "(", "data_target_dir", ",", "split", "=", "'test'", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "num_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'imagenet'", ":", "\n", "        ", "assert", "False", ",", "'Do not finish imagenet code'", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'Do not support dataset : {}'", ".", "format", "(", "dataset", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "num_classes", "", "", ""]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.plots.plotting": [[22, 72], ["pickle.load", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.savefig", "matplotlib.clf", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.savefig", "matplotlib.clf", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.savefig", "matplotlib.clf", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.legend", "matplotlib.savefig", "matplotlib.clf", "open", "numpy.asarray", "os.path.join", "numpy.asarray", "os.path.join", "numpy.asarray", "os.path.join", "numpy.asarray", "os.path.join", "os.path.join"], "function", ["None"], ["def", "plotting", "(", "exp_dir", ")", ":", "\n", "# Load the training log dictionary:", "\n", "    ", "train_dict", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "'log.pkl'", ")", ",", "'rb'", ")", ")", "\n", "\n", "###########################################################", "\n", "### Make the vanilla train and test loss per epoch plot ###", "\n", "###########################################################", "\n", "\n", "plt", ".", "plot", "(", "np", ".", "asarray", "(", "train_dict", "[", "'train_loss'", "]", ")", ",", "label", "=", "'train_loss'", ")", "\n", "\n", "#plt.ylim(0,2000)", "\n", "plt", ".", "xlabel", "(", "'evaluation step'", ")", "\n", "plt", ".", "ylabel", "(", "'metrics'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "'train_loss.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "\n", "\n", "plt", ".", "plot", "(", "np", ".", "asarray", "(", "train_dict", "[", "'test_loss'", "]", ")", ",", "label", "=", "'test_loss'", ")", "\n", "\n", "#plt.ylim(0,100)", "\n", "plt", ".", "xlabel", "(", "'evaluation step'", ")", "\n", "plt", ".", "ylabel", "(", "'metrics'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "'test_loss.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "plt", ".", "plot", "(", "np", ".", "asarray", "(", "train_dict", "[", "'train_acc'", "]", ")", ",", "label", "=", "'train_acc'", ")", "\n", "\n", "#plt.ylim(0,100)", "\n", "plt", ".", "xlabel", "(", "'evaluation step'", ")", "\n", "plt", ".", "ylabel", "(", "'metrics'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "'train_acc.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "\n", "plt", ".", "plot", "(", "np", ".", "asarray", "(", "train_dict", "[", "'test_acc'", "]", ")", ",", "label", "=", "'test_acc'", ")", "\n", "\n", "#plt.ylim(0,100)", "\n", "plt", ".", "xlabel", "(", "'evaluation step'", ")", "\n", "plt", ".", "ylabel", "(", "'metrics'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "exp_dir", ",", "'test_acc.png'", ")", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Affine.__init__": [[73, 145], ["affine_transforms.Rotation", "affine_transforms.Affine.transforms.append", "affine_transforms.Translation", "affine_transforms.Affine.transforms.append", "affine_transforms.Shear", "affine_transforms.Affine.transforms.append", "affine_transforms.Translation", "affine_transforms.Affine.transforms.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "rotation_range", "=", "None", ",", "\n", "translation_range", "=", "None", ",", "\n", "shear_range", "=", "None", ",", "\n", "zoom_range", "=", "None", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "fill_value", "=", "0.", ",", "\n", "target_fill_mode", "=", "'nearest'", ",", "\n", "target_fill_value", "=", "0.", ")", ":", "\n", "        ", "\"\"\"Perform an affine transforms with various sub-transforms, using\n        only one interpolation and without having to instantiate each\n        sub-transform individually.\n\n        Arguments\n        ---------\n        rotation_range : one integer or float\n            image will be rotated between (-degrees, degrees) degrees\n\n        translation_range : a float or a tuple/list w/ 2 floats between [0, 1)\n            first value:\n                image will be horizontally shifted between \n                (-height_range * height_dimension, height_range * height_dimension)\n            second value:\n                Image will be vertically shifted between \n                (-width_range * width_dimension, width_range * width_dimension)\n\n        shear_range : float\n            radian bounds on the shear transform\n\n        zoom_range : list/tuple with two floats between [0, infinity).\n            first float should be less than the second\n            lower and upper bounds on percent zoom. \n            Anything less than 1.0 will zoom in on the image, \n            anything greater than 1.0 will zoom out on the image.\n            e.g. (0.7, 1.0) will only zoom in, \n                 (1.0, 1.4) will only zoom out,\n                 (0.7, 1.4) will randomly zoom in or out\n\n        fill_mode : string in {'constant', 'nearest'}\n            how to fill the empty space caused by the transform\n            ProTip : use 'nearest' for discrete images (e.g. segmentations)\n                    and use 'constant' for continuous images\n\n        fill_value : float\n            the value to fill the empty space with if fill_mode='constant'\n\n        target_fill_mode : same as fill_mode, but for target image\n\n        target_fill_value : same as fill_value, but for target image\n\n        \"\"\"", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "if", "rotation_range", ":", "\n", "            ", "rotation_tform", "=", "Rotation", "(", "rotation_range", ",", "lazy", "=", "True", ")", "\n", "self", ".", "transforms", ".", "append", "(", "rotation_tform", ")", "\n", "\n", "", "if", "translation_range", ":", "\n", "            ", "translation_tform", "=", "Translation", "(", "translation_range", ",", "lazy", "=", "True", ")", "\n", "self", ".", "transforms", ".", "append", "(", "translation_tform", ")", "\n", "\n", "", "if", "shear_range", ":", "\n", "            ", "shear_tform", "=", "Shear", "(", "shear_range", ",", "lazy", "=", "True", ")", "\n", "self", ".", "transforms", ".", "append", "(", "shear_tform", ")", "\n", "\n", "", "if", "zoom_range", ":", "\n", "            ", "zoom_tform", "=", "Translation", "(", "zoom_range", ",", "lazy", "=", "True", ")", "\n", "self", ".", "transforms", ".", "append", "(", "zoom_tform", ")", "\n", "\n", "", "self", ".", "fill_mode", "=", "fill_mode", "\n", "self", ".", "fill_value", "=", "fill_value", "\n", "self", ".", "target_fill_mode", "=", "target_fill_mode", "\n", "self", ".", "target_fill_value", "=", "target_fill_value", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Affine.__call__": [[146, 161], ["torch.from_numpy", "numpy.dot", "affine_transforms.apply_transform", "torch.from_numpy", "tform", "torch.from_numpy.numpy", "affine_transforms.apply_transform", "torch.from_numpy.numpy"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# collect all of the lazily returned tform matrices", "\n", "        ", "tform_matrix", "=", "self", ".", "transforms", "[", "0", "]", "(", "x", ")", "\n", "for", "tform", "in", "self", ".", "transforms", "[", "1", ":", "]", ":", "\n", "            ", "tform_matrix", "=", "np", ".", "dot", "(", "tform_matrix", ",", "tform", "(", "x", ")", ")", "\n", "\n", "", "x", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "x", ".", "numpy", "(", ")", ",", "tform_matrix", ",", "\n", "fill_mode", "=", "self", ".", "fill_mode", ",", "fill_value", "=", "self", ".", "fill_value", ")", ")", "\n", "\n", "if", "y", ":", "\n", "            ", "y", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "y", ".", "numpy", "(", ")", ",", "tform_matrix", ",", "\n", "fill_mode", "=", "self", ".", "target_fill_mode", ",", "fill_value", "=", "self", ".", "target_fill_value", ")", ")", "\n", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.AffineCompose.__init__": [[164, 198], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "transforms", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "fill_value", "=", "0.", ",", "\n", "target_fill_mode", "=", "'nearest'", ",", "\n", "target_fill_value", "=", "0.", ")", ":", "\n", "        ", "\"\"\"Apply a collection of explicit affine transforms to an input image,\n        and to a target image if necessary\n\n        Arguments\n        ---------\n        transforms : list or tuple\n            each element in the list/tuple should be an affine transform.\n            currently supported transforms:\n                - Rotation()\n                - Translation()\n                - Shear()\n                - Zoom()\n\n        fill_mode : string in {'constant', 'nearest'}\n            how to fill the empty space caused by the transform\n\n        fill_value : float\n            the value to fill the empty space with if fill_mode='constant'\n\n        \"\"\"", "\n", "self", ".", "transforms", "=", "transforms", "\n", "# set transforms to lazy so they only return the tform matrix", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "t", ".", "lazy", "=", "True", "\n", "", "self", ".", "fill_mode", "=", "fill_mode", "\n", "self", ".", "fill_value", "=", "fill_value", "\n", "self", ".", "target_fill_mode", "=", "target_fill_mode", "\n", "self", ".", "target_fill_value", "=", "target_fill_value", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.AffineCompose.__call__": [[199, 214], ["torch.from_numpy", "numpy.dot", "affine_transforms.apply_transform", "torch.from_numpy", "tform", "torch.from_numpy.numpy", "affine_transforms.apply_transform", "torch.from_numpy.numpy"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# collect all of the lazily returned tform matrices", "\n", "        ", "tform_matrix", "=", "self", ".", "transforms", "[", "0", "]", "(", "x", ")", "\n", "for", "tform", "in", "self", ".", "transforms", "[", "1", ":", "]", ":", "\n", "            ", "tform_matrix", "=", "np", ".", "dot", "(", "tform_matrix", ",", "tform", "(", "x", ")", ")", "\n", "\n", "", "x", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "x", ".", "numpy", "(", ")", ",", "tform_matrix", ",", "\n", "fill_mode", "=", "self", ".", "fill_mode", ",", "fill_value", "=", "self", ".", "fill_value", ")", ")", "\n", "\n", "if", "y", ":", "\n", "            ", "y", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "y", ".", "numpy", "(", ")", ",", "tform_matrix", ",", "\n", "fill_mode", "=", "self", ".", "target_fill_mode", ",", "fill_value", "=", "self", ".", "target_fill_value", ")", ")", "\n", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Rotation.__init__": [[218, 249], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "rotation_range", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "fill_value", "=", "0.", ",", "\n", "target_fill_mode", "=", "'nearest'", ",", "\n", "target_fill_value", "=", "0.", ",", "\n", "lazy", "=", "False", ")", ":", "\n", "        ", "\"\"\"Randomly rotate an image between (-degrees, degrees). If the image\n        has multiple channels, the same rotation will be applied to each channel.\n\n        Arguments\n        ---------\n        rotation_range : integer or float\n            image will be rotated between (-degrees, degrees) degrees\n\n        fill_mode : string in {'constant', 'nearest'}\n            how to fill the empty space caused by the transform\n\n        fill_value : float\n            the value to fill the empty space with if fill_mode='constant'\n\n        lazy    : boolean\n            if true, perform the transform on the tensor and return the tensor\n            if false, only create the affine transform matrix and return that\n        \"\"\"", "\n", "self", ".", "rotation_range", "=", "rotation_range", "\n", "self", ".", "fill_mode", "=", "fill_mode", "\n", "self", ".", "fill_value", "=", "fill_value", "\n", "self", ".", "target_fill_mode", "=", "target_fill_mode", "\n", "self", ".", "target_fill_value", "=", "target_fill_value", "\n", "self", ".", "lazy", "=", "lazy", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Rotation.__call__": [[250, 267], ["random.uniform", "numpy.array", "torch.from_numpy", "affine_transforms.apply_transform", "torch.from_numpy", "math.cos", "math.sin", "math.cos", "x.numpy", "affine_transforms.apply_transform", "math.sin", "y.numpy"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "degree", "=", "random", ".", "uniform", "(", "-", "self", ".", "rotation_range", ",", "self", ".", "rotation_range", ")", "\n", "theta", "=", "math", ".", "pi", "/", "180", "*", "degree", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "theta", ")", ",", "-", "math", ".", "sin", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "theta", ")", ",", "math", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "if", "self", ".", "lazy", ":", "\n", "            ", "return", "rotation_matrix", "\n", "", "else", ":", "\n", "            ", "x_transformed", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "x", ".", "numpy", "(", ")", ",", "rotation_matrix", ",", "\n", "fill_mode", "=", "self", ".", "fill_mode", ",", "fill_value", "=", "self", ".", "fill_value", ")", ")", "\n", "if", "y", ":", "\n", "                ", "y_transformed", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "y", ".", "numpy", "(", ")", ",", "rotation_matrix", ",", "\n", "fill_mode", "=", "self", ".", "target_fill_mode", ",", "fill_value", "=", "self", ".", "target_fill_value", ")", ")", "\n", "return", "x_transformed", ",", "y_transformed", "\n", "", "else", ":", "\n", "                ", "return", "x_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Translation.__init__": [[271, 313], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "translation_range", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "fill_value", "=", "0.", ",", "\n", "target_fill_mode", "=", "'nearest'", ",", "\n", "target_fill_value", "=", "0.", ",", "\n", "lazy", "=", "False", ")", ":", "\n", "        ", "\"\"\"Randomly translate an image some fraction of total height and/or\n        some fraction of total width. If the image has multiple channels,\n        the same translation will be applied to each channel.\n\n        Arguments\n        ---------\n        translation_range : two floats between [0, 1) \n            first value:\n                fractional bounds of total height to shift image\n                image will be horizontally shifted between \n                (-height_range * height_dimension, height_range * height_dimension)\n            second value:\n                fractional bounds of total width to shift image \n                Image will be vertically shifted between \n                (-width_range * width_dimension, width_range * width_dimension)\n\n        fill_mode : string in {'constant', 'nearest'}\n            how to fill the empty space caused by the transform\n\n        fill_value : float\n            the value to fill the empty space with if fill_mode='constant'\n\n        lazy    : boolean\n            if true, perform the transform on the tensor and return the tensor\n            if false, only create the affine transform matrix and return that\n        \"\"\"", "\n", "if", "isinstance", "(", "translation_range", ",", "float", ")", ":", "\n", "            ", "translation_range", "=", "(", "translation_range", ",", "translation_range", ")", "\n", "", "self", ".", "height_range", "=", "translation_range", "[", "0", "]", "\n", "self", ".", "width_range", "=", "translation_range", "[", "1", "]", "\n", "self", ".", "fill_mode", "=", "fill_mode", "\n", "self", ".", "fill_value", "=", "fill_value", "\n", "self", ".", "target_fill_mode", "=", "target_fill_mode", "\n", "self", ".", "target_fill_value", "=", "target_fill_value", "\n", "self", ".", "lazy", "=", "lazy", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Translation.__call__": [[314, 340], ["numpy.array", "torch.from_numpy", "random.uniform", "x.size", "random.uniform", "x.size", "affine_transforms.apply_transform", "torch.from_numpy", "x.numpy", "affine_transforms.apply_transform", "y.numpy"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# height shift", "\n", "        ", "if", "self", ".", "height_range", ">", "0", ":", "\n", "            ", "tx", "=", "random", ".", "uniform", "(", "-", "self", ".", "height_range", ",", "self", ".", "height_range", ")", "*", "x", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "tx", "=", "0", "\n", "# width shift", "\n", "", "if", "self", ".", "width_range", ">", "0", ":", "\n", "            ", "ty", "=", "random", ".", "uniform", "(", "-", "self", ".", "width_range", ",", "self", ".", "width_range", ")", "*", "x", ".", "size", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "ty", "=", "0", "\n", "\n", "", "translation_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "if", "self", ".", "lazy", ":", "\n", "            ", "return", "translation_matrix", "\n", "", "else", ":", "\n", "            ", "x_transformed", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "x", ".", "numpy", "(", ")", ",", "\n", "translation_matrix", ",", "fill_mode", "=", "self", ".", "fill_mode", ",", "fill_value", "=", "self", ".", "fill_value", ")", ")", "\n", "if", "y", ":", "\n", "                ", "y_transformed", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "y", ".", "numpy", "(", ")", ",", "translation_matrix", ",", "\n", "fill_mode", "=", "self", ".", "target_fill_mode", ",", "fill_value", "=", "self", ".", "target_fill_value", ")", ")", "\n", "return", "x_transformed", ",", "y_transformed", "\n", "", "else", ":", "\n", "                ", "return", "x_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Shear.__init__": [[344, 374], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "shear_range", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "fill_value", "=", "0.", ",", "\n", "target_fill_mode", "=", "'nearest'", ",", "\n", "target_fill_value", "=", "0.", ",", "\n", "lazy", "=", "False", ")", ":", "\n", "        ", "\"\"\"Randomly shear an image with radians (-shear_range, shear_range)\n\n        Arguments\n        ---------\n        shear_range : float\n            radian bounds on the shear transform\n        \n        fill_mode : string in {'constant', 'nearest'}\n            how to fill the empty space caused by the transform\n\n        fill_value : float\n            the value to fill the empty space with if fill_mode='constant'\n\n        lazy    : boolean\n            if true, perform the transform on the tensor and return the tensor\n            if false, only create the affine transform matrix and return that\n        \"\"\"", "\n", "self", ".", "shear_range", "=", "shear_range", "\n", "self", ".", "fill_mode", "=", "fill_mode", "\n", "self", ".", "fill_value", "=", "fill_value", "\n", "self", ".", "target_fill_mode", "=", "target_fill_mode", "\n", "self", ".", "target_fill_value", "=", "target_fill_value", "\n", "self", ".", "lazy", "=", "lazy", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Shear.__call__": [[375, 391], ["random.uniform", "numpy.array", "torch.from_numpy", "affine_transforms.apply_transform", "torch.from_numpy", "math.cos", "x.numpy", "affine_transforms.apply_transform", "math.sin", "y.numpy"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "shear", "=", "random", ".", "uniform", "(", "-", "self", ".", "shear_range", ",", "self", ".", "shear_range", ")", "\n", "shear_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "-", "math", ".", "sin", "(", "shear", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "math", ".", "cos", "(", "shear", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "if", "self", ".", "lazy", ":", "\n", "            ", "return", "shear_matrix", "\n", "", "else", ":", "\n", "            ", "x_transformed", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "x", ".", "numpy", "(", ")", ",", "\n", "shear_matrix", ",", "fill_mode", "=", "self", ".", "fill_mode", ",", "fill_value", "=", "self", ".", "fill_value", ")", ")", "\n", "if", "y", ":", "\n", "                ", "y_transformed", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "y", ".", "numpy", "(", ")", ",", "shear_matrix", ",", "\n", "fill_mode", "=", "self", ".", "target_fill_mode", ",", "fill_value", "=", "self", ".", "target_fill_value", ")", ")", "\n", "return", "x_transformed", ",", "y_transformed", "\n", "", "else", ":", "\n", "                ", "return", "x_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Zoom.__init__": [[395, 432], ["ValueError", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "zoom_range", ",", "\n", "fill_mode", "=", "'constant'", ",", "\n", "fill_value", "=", "0", ",", "\n", "target_fill_mode", "=", "'nearest'", ",", "\n", "target_fill_value", "=", "0.", ",", "\n", "lazy", "=", "False", ")", ":", "\n", "        ", "\"\"\"Randomly zoom in and/or out on an image \n\n        Arguments\n        ---------\n        zoom_range : tuple or list with 2 values, both between (0, infinity)\n            lower and upper bounds on percent zoom. \n            Anything less than 1.0 will zoom in on the image, \n            anything greater than 1.0 will zoom out on the image.\n            e.g. (0.7, 1.0) will only zoom in, \n                 (1.0, 1.4) will only zoom out,\n                 (0.7, 1.4) will randomly zoom in or out\n\n        fill_mode : string in {'constant', 'nearest'}\n            how to fill the empty space caused by the transform\n\n        fill_value : float\n            the value to fill the empty space with if fill_mode='constant'\n\n        lazy    : boolean\n            if true, perform the transform on the tensor and return the tensor\n            if false, only create the affine transform matrix and return that\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "zoom_range", ",", "list", ")", "and", "not", "isinstance", "(", "zoom_range", ",", "tuple", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'zoom_range must be tuple or list with 2 values'", ")", "\n", "", "self", ".", "zoom_range", "=", "zoom_range", "\n", "self", ".", "fill_mode", "=", "fill_mode", "\n", "self", ".", "fill_value", "=", "fill_value", "\n", "self", ".", "target_fill_mode", "=", "target_fill_mode", "\n", "self", ".", "target_fill_value", "=", "target_fill_value", "\n", "self", ".", "lazy", "=", "lazy", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.Zoom.__call__": [[433, 450], ["random.uniform", "random.uniform", "numpy.array", "torch.from_numpy", "affine_transforms.apply_transform", "torch.from_numpy", "x.numpy", "affine_transforms.apply_transform", "y.numpy"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "zx", "=", "random", ".", "uniform", "(", "self", ".", "zoom_range", "[", "0", "]", ",", "self", ".", "zoom_range", "[", "1", "]", ")", "\n", "zy", "=", "random", ".", "uniform", "(", "self", ".", "zoom_range", "[", "0", "]", ",", "self", ".", "zoom_range", "[", "1", "]", ")", "\n", "zoom_matrix", "=", "np", ".", "array", "(", "[", "[", "zx", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "zy", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "if", "self", ".", "lazy", ":", "\n", "            ", "return", "zoom_matrix", "\n", "", "else", ":", "\n", "            ", "x_transformed", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "x", ".", "numpy", "(", ")", ",", "\n", "zoom_matrix", ",", "fill_mode", "=", "self", ".", "fill_mode", ",", "fill_value", "=", "self", ".", "fill_value", ")", ")", "\n", "if", "y", ":", "\n", "                ", "y_transformed", "=", "torch", ".", "from_numpy", "(", "apply_transform", "(", "y", ".", "numpy", "(", ")", ",", "zoom_matrix", ",", "\n", "fill_mode", "=", "self", ".", "target_fill_mode", ",", "fill_value", "=", "self", ".", "target_fill_value", ")", ")", "\n", "return", "x_transformed", ",", "y_transformed", "\n", "", "else", ":", "\n", "                ", "return", "x_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.transform_matrix_offset_center": [[25, 48], ["numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "float", "float"], "function", ["None"], ["def", "transform_matrix_offset_center", "(", "matrix", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Apply offset to a transform matrix so that the image is\n    transformed about the center of the image. \n\n    NOTE: This is a fairly simple operaion, so can easily be\n    moved to full torch.\n\n    Arguments\n    ---------\n    matrix : 3x3 matrix/array\n\n    x : integer\n        height dimension of image to be transformed\n\n    y : integer\n        width dimension of image to be transformed\n    \"\"\"", "\n", "o_x", "=", "float", "(", "x", ")", "/", "2", "+", "0.5", "\n", "o_y", "=", "float", "(", "y", ")", "/", "2", "+", "0.5", "\n", "offset_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "o_x", "]", ",", "[", "0", ",", "1", ",", "o_y", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "reset_matrix", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "-", "o_x", "]", ",", "[", "0", ",", "1", ",", "-", "o_y", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "transform_matrix", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "offset_matrix", ",", "matrix", ")", ",", "reset_matrix", ")", "\n", "return", "transform_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.apply_transform": [[49, 70], ["np.stack.astype", "affine_transforms.transform_matrix_offset_center", "numpy.stack", "scipy.interpolation.affine_transform"], "function", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.affine_transforms.transform_matrix_offset_center"], ["", "def", "apply_transform", "(", "x", ",", "transform", ",", "fill_mode", "=", "'nearest'", ",", "fill_value", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Applies an affine transform to a 2D array, or to each channel of a 3D array.\n\n    NOTE: this can and certainly should be moved to full torch operations.\n\n    Arguments\n    ---------\n    x : np.ndarray\n        array to transform. NOTE: array should be ordered CHW\n    \n    transform : 3x3 affine transform matrix\n        matrix to apply\n    \"\"\"", "\n", "x", "=", "x", ".", "astype", "(", "'float32'", ")", "\n", "transform", "=", "transform_matrix_offset_center", "(", "transform", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ")", "\n", "final_affine_matrix", "=", "transform", "[", ":", "2", ",", ":", "2", "]", "\n", "final_offset", "=", "transform", "[", ":", "2", ",", "2", "]", "\n", "channel_images", "=", "[", "ndi", ".", "interpolation", ".", "affine_transform", "(", "x_channel", ",", "final_affine_matrix", ",", "\n", "final_offset", ",", "order", "=", "0", ",", "mode", "=", "fill_mode", ",", "cval", "=", "fill_value", ")", "for", "x_channel", "in", "x", "]", "\n", "x", "=", "np", ".", "stack", "(", "channel_images", ",", "axis", "=", "0", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.helpers.Cutout.__init__": [[21, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_holes", ",", "length", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.helpers.Cutout.apply": [[25, 53], ["img.size", "img.size", "numpy.ones", "range", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "numpy.random.randint", "numpy.random.randint", "int", "int", "int", "int", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of size (C, H, W).\n        Returns:\n            Tensor: Image with n_holes of dimension length x length cut out of it.\n        \"\"\"", "\n", "h", "=", "img", ".", "size", "(", "2", ")", "\n", "w", "=", "img", ".", "size", "(", "3", ")", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "            ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "int", "(", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "/", "2", ",", "0", ",", "h", ")", ")", "\n", "y2", "=", "int", "(", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "/", "2", ",", "0", ",", "h", ")", ")", "\n", "x1", "=", "int", "(", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "/", "2", ",", "0", ",", "w", ")", ")", "\n", "x2", "=", "int", "(", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "/", "2", ",", "0", ",", "w", ")", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "\n", "", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "=", "img", "*", "mask", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.helpers.experiment_name": [[55, 94], ["print", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "experiment_name", "(", "cod", "=", "True", ",", "\n", "cod_trainable", "=", "False", ",", "\n", "aux_nets", "=", "2", ",", "\n", "opt", "=", "'sgd'", ",", "\n", "epochs", "=", "400", ",", "\n", "batch_size", "=", "64", ",", "\n", "test_batch_size", "=", "1000", ",", "\n", "lr", "=", "0.01", ",", "\n", "momentum", "=", "0.5", ",", "\n", "data_aug", "=", "1", ",", "\n", "manualSeed", "=", "None", ",", "\n", "job_id", "=", "None", ",", "\n", "add_name", "=", "''", ")", ":", "\n", "    ", "if", "cod", ":", "\n", "        ", "exp_name", "=", "'cod_true'", "\n", "if", "cod_trainable", ":", "\n", "            ", "exp_name", "+=", "'_trainable_true'", "\n", "", "else", ":", "\n", "            ", "exp_name", "+=", "'_trainable_false'", "\n", "", "", "else", ":", "\n", "        ", "exp_name", "=", "'cod_false'", "\n", "", "exp_name", "+=", "'_auxnets_'", "+", "str", "(", "aux_nets", ")", "\n", "exp_name", "+=", "'_opt_'", "+", "str", "(", "opt", ")", "\n", "exp_name", "+=", "'_epochs_'", "+", "str", "(", "epochs", ")", "\n", "exp_name", "+=", "'_batch_size_'", "+", "str", "(", "batch_size", ")", "\n", "exp_name", "+=", "'_test_batch_size_'", "+", "str", "(", "test_batch_size", ")", "\n", "exp_name", "+=", "'_lr_'", "+", "str", "(", "lr", ")", "\n", "exp_name", "+=", "'_momentum_'", "+", "str", "(", "momentum", ")", "\n", "exp_name", "+=", "'_data_aug_'", "+", "str", "(", "data_aug", ")", "\n", "if", "manualSeed", "!=", "None", ":", "\n", "        ", "exp_name", "+=", "'_manuael_seed_'", "+", "str", "(", "manualSeed", ")", "\n", "", "if", "job_id", "!=", "None", ":", "\n", "        ", "exp_name", "+=", "'_job_id_'", "+", "str", "(", "job_id", ")", "\n", "", "if", "add_name", "!=", "''", ":", "\n", "        ", "exp_name", "+=", "'_add_name_'", "+", "str", "(", "add_name", ")", "\n", "\n", "# exp_name += strftime(\"_%Y-%m-%d_%H:%M:%S\", gmtime())", "\n", "", "print", "(", "'experiement name: '", "+", "exp_name", ")", "\n", "return", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.helpers.experiment_name_non_mnist": [[96, 129], ["str", "print", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "experiment_name_non_mnist", "(", "arch", "=", "''", ",", "\n", "aux_nets", "=", "2", ",", "\n", "epochs", "=", "400", ",", "\n", "dropout", "=", "True", ",", "\n", "batch_size", "=", "64", ",", "\n", "lr", "=", "0.01", ",", "\n", "momentum", "=", "0.5", ",", "\n", "data_aug", "=", "1", ",", "\n", "manualSeed", "=", "None", ",", "\n", "job_id", "=", "None", ",", "\n", "add_name", "=", "''", ")", ":", "\n", "\n", "    ", "exp_name", "=", "str", "(", "arch", ")", "\n", "exp_name", "+=", "'_auxnets_'", "+", "str", "(", "aux_nets", ")", "\n", "exp_name", "+=", "'_epochs_'", "+", "str", "(", "epochs", ")", "\n", "if", "dropout", ":", "\n", "        ", "exp_name", "+=", "'_dropout_'", "+", "'true'", "\n", "", "else", ":", "\n", "        ", "exp_name", "+=", "'_dropout_'", "+", "'False'", "\n", "", "exp_name", "+=", "'_batch_size_'", "+", "str", "(", "batch_size", ")", "\n", "exp_name", "+=", "'_lr_'", "+", "str", "(", "lr", ")", "\n", "exp_name", "+=", "'_momentum_'", "+", "str", "(", "momentum", ")", "\n", "exp_name", "+=", "'_data_aug_'", "+", "str", "(", "data_aug", ")", "\n", "if", "manualSeed", "!=", "None", ":", "\n", "        ", "exp_name", "+=", "'_manuael_seed_'", "+", "str", "(", "manualSeed", ")", "\n", "", "if", "job_id", "!=", "None", ":", "\n", "        ", "exp_name", "+=", "'_job_id_'", "+", "str", "(", "job_id", ")", "\n", "", "if", "add_name", "!=", "''", ":", "\n", "        ", "exp_name", "+=", "'_add_name_'", "+", "str", "(", "add_name", ")", "\n", "\n", "# exp_name += strftime(\"_%Y-%m-%d_%H:%M:%S\", gmtime())", "\n", "", "print", "(", "'experiement name: '", "+", "exp_name", ")", "\n", "return", "exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.helpers.copy_script_to_folder": [[130, 135], ["os.path.join", "shutil.copy", "caller_path.split"], "function", ["None"], ["", "def", "copy_script_to_folder", "(", "caller_path", ",", "folder", ")", ":", "\n", "    ", "script_filename", "=", "caller_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "script_relative_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "script_filename", ")", "\n", "# Copying script", "\n", "shutil", ".", "copy", "(", "caller_path", ",", "script_relative_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.helpers.cyclic_lr": [[136, 140], ["numpy.ceil", "float", "numpy.mod", "numpy.cos"], "function", ["None"], ["", "def", "cyclic_lr", "(", "initial_lr", ",", "step", ",", "total_steps", ",", "num_cycles", ")", ":", "\n", "    ", "factor", "=", "np", ".", "ceil", "(", "float", "(", "total_steps", ")", "/", "num_cycles", ")", "\n", "theta", "=", "np", ".", "pi", "*", "np", ".", "mod", "(", "step", "-", "1", ",", "factor", ")", "/", "factor", "\n", "return", "(", "initial_lr", "/", "2", ")", "*", "(", "np", ".", "cos", "(", "theta", ")", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau.__init__": [[42, 63], ["object.__init__", "isinstance", "lr_scheduler.ReduceLROnPlateau._reset", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau._reset"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.1", ",", "patience", "=", "10", ",", "\n", "verbose", "=", "0", ",", "epsilon", "=", "1e-4", ",", "cooldown", "=", "0", ",", "min_lr", "=", "0", ")", ":", "\n", "        ", "super", "(", "ReduceLROnPlateau", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "factor", ">=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "'ReduceLROnPlateau '", "\n", "'does not support a factor >= 1.0.'", ")", "\n", "", "self", ".", "factor", "=", "factor", "\n", "self", ".", "min_lr", "=", "min_lr", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "cooldown", "=", "cooldown", "\n", "self", ".", "cooldown_counter", "=", "0", "# Cooldown counter.", "\n", "self", ".", "monitor_op", "=", "None", "\n", "self", ".", "wait", "=", "0", "\n", "self", ".", "best", "=", "0", "\n", "self", ".", "mode", "=", "mode", "\n", "assert", "isinstance", "(", "optimizer", ",", "Optimizer", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau._reset": [[64, 78], ["RuntimeError", "numpy.less", "numpy.greater"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets wait counter and cooldown counter.\n        \"\"\"", "\n", "if", "self", ".", "mode", "not", "in", "[", "'min'", ",", "'max'", "]", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Learning Rate Plateau Reducing mode %s is unknown!'", ")", "\n", "", "if", "self", ".", "mode", "==", "'min'", ":", "\n", "            ", "self", ".", "monitor_op", "=", "lambda", "a", ",", "b", ":", "np", ".", "less", "(", "a", ",", "b", "-", "self", ".", "epsilon", ")", "\n", "self", ".", "best", "=", "np", ".", "Inf", "\n", "", "else", ":", "\n", "            ", "self", ".", "monitor_op", "=", "lambda", "a", ",", "b", ":", "np", ".", "greater", "(", "a", ",", "b", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "best", "=", "-", "np", ".", "Inf", "\n", "", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "wait", "=", "0", "\n", "self", ".", "lr_epsilon", "=", "self", ".", "min_lr", "*", "1e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau.reset": [[79, 81], ["lr_scheduler.ReduceLROnPlateau._reset"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau._reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau.step": [[82, 107], ["warnings.warn", "lr_scheduler.ReduceLROnPlateau.in_cooldown", "lr_scheduler.ReduceLROnPlateau.monitor_op", "lr_scheduler.ReduceLROnPlateau.in_cooldown", "float", "max", "print"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau.in_cooldown", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau.in_cooldown"], ["", "def", "step", "(", "self", ",", "metrics", ",", "epoch", ")", ":", "\n", "        ", "current", "=", "metrics", "\n", "if", "current", "is", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Learning Rate Plateau Reducing requires metrics available!'", ",", "RuntimeWarning", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "in_cooldown", "(", ")", ":", "\n", "                ", "self", ".", "cooldown_counter", "-=", "1", "\n", "self", ".", "wait", "=", "0", "\n", "\n", "", "if", "self", ".", "monitor_op", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "                ", "self", ".", "best", "=", "current", "\n", "self", ".", "wait", "=", "0", "\n", "", "elif", "not", "self", ".", "in_cooldown", "(", ")", ":", "\n", "                ", "if", "self", ".", "wait", ">=", "self", ".", "patience", ":", "\n", "                    ", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                        ", "old_lr", "=", "float", "(", "param_group", "[", "'lr'", "]", ")", "\n", "if", "old_lr", ">", "self", ".", "min_lr", "+", "self", ".", "lr_epsilon", ":", "\n", "                            ", "new_lr", "=", "old_lr", "*", "self", ".", "factor", "\n", "new_lr", "=", "max", "(", "new_lr", ",", "self", ".", "min_lr", ")", "\n", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                                ", "print", "(", "'\\nEpoch %05d: reducing learning rate to %s.'", "%", "(", "epoch", ",", "new_lr", ")", ")", "\n", "", "self", ".", "cooldown_counter", "=", "self", ".", "cooldown", "\n", "self", ".", "wait", "=", "0", "\n", "", "", "", "self", ".", "wait", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.None.lr_scheduler.ReduceLROnPlateau.in_cooldown": [[108, 110], ["None"], "methods", ["None"], ["", "", "", "def", "in_cooldown", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cooldown_counter", ">", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.logger.Logger.__init__": [[14, 17], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "    ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.logger.Logger.scalar_summary": [[18, 22], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.logger.Logger.image_summary": [[23, 45], ["enumerate", "tensorflow.Summary", "logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["None"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "      ", "try", ":", "\n", "        ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "        ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.logger.Logger.histo_summary": [[46, 73], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "      ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "      ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.AverageMeter.__init__": [[9, 11], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.RecorderMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.AverageMeter.reset": [[12, 17], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.AverageMeter.update": [[18, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.RecorderMeter.__init__": [[27, 29], ["utils.RecorderMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.RecorderMeter.reset"], ["def", "__init__", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "self", ".", "reset", "(", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.RecorderMeter.reset": [[30, 39], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "assert", "total_epoch", ">", "0", "\n", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "epoch_losses", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_losses", "=", "self", ".", "epoch_losses", "-", "1", "\n", "\n", "self", ".", "epoch_accuracy", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_accuracy", "=", "self", ".", "epoch_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.RecorderMeter.update": [[40, 48], ["utils.RecorderMeter.max_accuracy"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.RecorderMeter.max_accuracy"], ["", "def", "update", "(", "self", ",", "idx", ",", "train_loss", ",", "train_acc", ",", "val_loss", ",", "val_acc", ")", ":", "\n", "    ", "assert", "idx", ">=", "0", "and", "idx", "<", "self", ".", "total_epoch", ",", "'total_epoch : {} , but update with the {} index'", ".", "format", "(", "self", ".", "total_epoch", ",", "idx", ")", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "0", "]", "=", "train_loss", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "1", "]", "=", "val_loss", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "0", "]", "=", "train_acc", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "=", "val_acc", "\n", "self", ".", "current_epoch", "=", "idx", "+", "1", "\n", "return", "self", ".", "max_accuracy", "(", "False", ")", "==", "val_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.RecorderMeter.max_accuracy": [[49, 53], ["utils.RecorderMeter.epoch_accuracy[].max", "utils.RecorderMeter.epoch_accuracy[].max"], "methods", ["None"], ["", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n", "    ", "if", "self", ".", "current_epoch", "<=", "0", ":", "return", "0", "\n", "if", "istrain", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "0", "]", ".", "max", "(", ")", "\n", "else", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "1", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.RecorderMeter.plot_curve": [[54, 98], ["matplotlib.figure", "matplotlib.figure", "numpy.array", "numpy.zeros", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.grid", "matplotlib.grid", "matplotlib.title", "matplotlib.title", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.close", "matplotlib.close", "numpy.arange", "numpy.arange", "matplotlib.figure.savefig", "print", "float", "float", "range"], "methods", ["None"], ["", "def", "plot_curve", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "title", "=", "'the accuracy/loss curve of train/val'", "\n", "dpi", "=", "80", "\n", "width", ",", "height", "=", "1200", ",", "800", "\n", "legend_fontsize", "=", "10", "\n", "scale_distance", "=", "48.8", "\n", "figsize", "=", "width", "/", "float", "(", "dpi", ")", ",", "height", "/", "float", "(", "dpi", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "x_axis", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_epoch", ")", "]", ")", "# epochs", "\n", "y_axis", "=", "np", ".", "zeros", "(", "self", ".", "total_epoch", ")", "\n", "\n", "plt", ".", "xlim", "(", "0", ",", "self", ".", "total_epoch", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "interval_y", "=", "5", "\n", "interval_x", "=", "5", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "total_epoch", "+", "interval_x", ",", "interval_x", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "100", "+", "interval_y", ",", "interval_y", ")", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'the training epoch'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "'accuracy'", ",", "fontsize", "=", "16", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'train-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'valid-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'g'", ",", "linestyle", "=", "':'", ",", "label", "=", "'train-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'y'", ",", "linestyle", "=", "':'", ",", "label", "=", "'valid-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "      ", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'---- save figure {} into {}'", ".", "format", "(", "title", ",", "save_path", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.time_string": [[100, 104], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.convert_secs2time": [[105, 110], ["int", "int", "int"], "function", ["None"], ["", "def", "convert_secs2time", "(", "epoch_time", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.resnext.utils.time_file_str": [[111, 115], ["time.strftime", "time.gmtime", "random.randint", "time.time"], "function", ["None"], ["", "def", "time_file_str", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d'", "\n", "string", "=", "'{}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "+", "'-{}'", ".", "format", "(", "random", ".", "randint", "(", "1", ",", "10000", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.BasicBlock.__init__": [[14, 23], ["torch.Module.__init__", "imagenet_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "imagenet_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.BasicBlock.forward": [[24, 41], ["imagenet_resnet.BasicBlock.conv1", "imagenet_resnet.BasicBlock.bn1", "imagenet_resnet.BasicBlock.relu", "imagenet_resnet.BasicBlock.conv2", "imagenet_resnet.BasicBlock.bn2", "imagenet_resnet.BasicBlock.relu", "imagenet_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.Bottleneck.__init__": [[46, 58], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.Bottleneck.forward": [[59, 80], ["imagenet_resnet.Bottleneck.conv1", "imagenet_resnet.Bottleneck.bn1", "imagenet_resnet.Bottleneck.relu", "imagenet_resnet.Bottleneck.conv2", "imagenet_resnet.Bottleneck.bn2", "imagenet_resnet.Bottleneck.relu", "imagenet_resnet.Bottleneck.conv3", "imagenet_resnet.Bottleneck.bn3", "imagenet_resnet.Bottleneck.relu", "imagenet_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.ResNet.__init__": [[84, 106], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "imagenet_resnet.ResNet._make_layer", "imagenet_resnet.ResNet._make_layer", "imagenet_resnet.ResNet._make_layer", "imagenet_resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "imagenet_resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.ResNet._make_layer": [[107, 123], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.ResNet.forward": [[124, 140], ["imagenet_resnet.ResNet.conv1", "imagenet_resnet.ResNet.bn1", "imagenet_resnet.ResNet.relu", "imagenet_resnet.ResNet.maxpool", "imagenet_resnet.ResNet.layer1", "imagenet_resnet.ResNet.layer2", "imagenet_resnet.ResNet.layer3", "imagenet_resnet.ResNet.layer4", "imagenet_resnet.ResNet.avgpool", "imagenet_resnet.ResNet.view", "imagenet_resnet.ResNet.fc", "imagenet_resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.conv3x3": [[5, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.resnet18": [[142, 150], ["imagenet_resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.resnet34": [[152, 160], ["imagenet_resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.resnet50": [[162, 170], ["imagenet_resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.resnet101": [[172, 180], ["imagenet_resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.imagenet_resnet.resnet152": [[182, 190], ["imagenet_resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.res_utils.DownsampleA.__init__": [[6, 10], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "    ", "super", "(", "DownsampleA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.res_utils.DownsampleA.forward": [[11, 14], ["res_utils.DownsampleA.avg", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "res_utils.DownsampleA.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "x", ".", "mul", "(", "0", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.res_utils.DownsampleC.__init__": [[17, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "    ", "super", "(", "DownsampleC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "!=", "1", "or", "nIn", "!=", "nOut", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.res_utils.DownsampleC.forward": [[22, 25], ["res_utils.DownsampleC.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.res_utils.DownsampleD.__init__": [[28, 33], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "    ", "super", "(", "DownsampleD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "2", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.res_utils.DownsampleD.forward": [[34, 38], ["res_utils.DownsampleD.conv", "res_utils.DownsampleD.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.wide_basic.__init__": [[27, 38], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.wide_basic.forward": [[40, 46], ["wide_resnet.wide_basic.conv1", "wide_resnet.wide_basic.conv2", "wide_resnet.wide_basic.shortcut", "act", "act", "wide_resnet.wide_basic.bn1", "wide_resnet.wide_basic.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "act", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "act", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.Wide_ResNet.__init__": [[49, 66], ["torch.Module.__init__", "int", "print", "wide_resnet.conv3x3", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet_v2 depth should be 6n+4'", "\n", "n", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.Wide_ResNet._wide_layer": [[67, 76], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.Wide_ResNet.forward": [[109, 133], ["wide_resnet.Wide_ResNet.conv1", "wide_resnet.Wide_ResNet.layer1", "wide_resnet.Wide_ResNet.layer2", "wide_resnet.Wide_ResNet.layer3", "act", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wide_resnet.Wide_ResNet.view", "wide_resnet.Wide_ResNet.linear", "wide_resnet.Wide_ResNet.bn1", "wide_resnet.Wide_ResNet.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print x.shape", "\n", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "act", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "\"\"\"\n        ## modified WRN arch\n        out = x\n        out = F.leaky_relu(self.bn1(self.conv1(out)))\n        out = self.layer1(out)\n        out = self.layer2(out)\n        out = self.layer3(out)\n        #out = F.relu(self.bn1(out))\n        out = F.avg_pool2d(out, 8)\n        out = out.view(out.size(0), -1)\n        out = self.linear(out)\n        \"\"\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.conv3x3": [[14, 16], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.conv_init": [[17, 25], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.wrn28_10": [[134, 138], ["wide_resnet.Wide_ResNet"], "function", ["None"], ["", "", "def", "wrn28_10", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "#print ('this')", "\n", "    ", "model", "=", "Wide_ResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "10", ",", "num_classes", "=", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.wide_resnet.wrn28_2": [[139, 143], ["wide_resnet.Wide_ResNet"], "function", ["None"], ["", "def", "wrn28_2", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "#print ('this')", "\n", "    ", "model", "=", "Wide_ResNet", "(", "depth", "=", "28", ",", "widen_factor", "=", "2", ",", "num_classes", "=", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.BasicBlock.__init__": [[16, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.BasicBlock.forward": [[30, 36], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.Bottleneck.__init__": [[41, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.Bottleneck.forward": [[57, 64], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.ResNet.__init__": [[67, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.ResNet._make_layer": [[79, 86], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.ResNet.forward": [[87, 97], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.resnet18": [[100, 107], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.resnet34": [[109, 116], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.resnet50": [[118, 125], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.resnet101": [[127, 134], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnet.resnet152": [[136, 143], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.Bottleneck.__init__": [[6, 13], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "interChannels", "=", "4", "*", "growthRate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "interChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "interChannels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "interChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.Bottleneck.forward": [[14, 19], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.SingleLayer.__init__": [[21, 25], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ")", ":", "\n", "    ", "super", "(", "SingleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.SingleLayer.forward": [[26, 30], ["densenet.SingleLayer.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "densenet.SingleLayer.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.Transition.__init__": [[32, 36], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "nOutChannels", ")", ":", "\n", "    ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "nOutChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.Transition.forward": [[37, 41], ["densenet.Transition.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.DenseNet.__init__": [[43, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense", "int", "densenet.Transition", "densenet.DenseNet._make_dense", "int", "densenet.Transition", "densenet.DenseNet._make_dense", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "densenet.DenseNet.modules", "int", "int", "math.floor", "math.floor", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.DenseNet._make_dense", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.DenseNet._make_dense", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.DenseNet._make_dense"], ["  ", "def", "__init__", "(", "self", ",", "growthRate", ",", "depth", ",", "reduction", ",", "nClasses", ",", "bottleneck", ")", ":", "\n", "    ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bottleneck", ":", "nDenseBlocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "else", ":", "nDenseBlocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "3", ")", "\n", "\n", "nChannels", "=", "2", "*", "growthRate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", ",", "nClasses", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.DenseNet._make_dense": [[80, 89], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "layers.append", "densenet.Bottleneck", "densenet.SingleLayer"], "methods", ["None"], ["", "", "", "def", "_make_dense", "(", "self", ",", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nDenseBlocks", ")", ")", ":", "\n", "      ", "if", "bottleneck", ":", "\n", "        ", "layers", ".", "append", "(", "Bottleneck", "(", "nChannels", ",", "growthRate", ")", ")", "\n", "", "else", ":", "\n", "        ", "layers", ".", "append", "(", "SingleLayer", "(", "nChannels", ",", "growthRate", ")", ")", "\n", "", "nChannels", "+=", "growthRate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.DenseNet.forward": [[90, 98], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.dense3", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.fc", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense3", "(", "out", ")", "\n", "out", "=", "torch", ".", "squeeze", "(", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", ",", "8", ")", ")", "\n", "out", "=", "F", ".", "log_softmax", "(", "self", ".", "fc", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.densenet100_12": [[99, 102], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "densenet100_12", "(", "num_classes", "=", "10", ")", ":", "\n", "  ", "model", "=", "DenseNet", "(", "12", ",", "100", ",", "0.5", ",", "num_classes", ",", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.densenet.densenet100_24": [[104, 107], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet100_24", "(", "num_classes", "=", "10", ")", ":", "\n", "  ", "model", "=", "DenseNet", "(", "24", ",", "100", ",", "0.5", ",", "num_classes", ",", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.caffe_cifar.CifarCaffeNet.__init__": [[11, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "caffe_cifar.CifarCaffeNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "CifarCaffeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "block_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ")", "\n", "\n", "self", ".", "block_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ")", "\n", "\n", "self", ".", "block_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "128", "*", "9", ",", "self", ".", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.caffe_cifar.CifarCaffeNet.forward": [[49, 56], ["caffe_cifar.CifarCaffeNet.block_1.forward", "caffe_cifar.CifarCaffeNet.block_2.forward", "caffe_cifar.CifarCaffeNet.block_3.forward", "x.view.view.view", "caffe_cifar.CifarCaffeNet.classifier", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.forward", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.forward", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.forward"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "block_1", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "block_2", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "block_3", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "#print ('{}'.format(x.size()))", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.caffe_cifar.caffe_cifar": [[57, 60], ["caffe_cifar.CifarCaffeNet"], "function", ["None"], ["", "", "def", "caffe_cifar", "(", "num_classes", "=", "10", ")", ":", "\n", "  ", "model", "=", "CifarCaffeNet", "(", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.PreActBlock.__init__": [[15, 25], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.PreActBlock.forward": [[27, 34], ["torch.relu", "torch.relu", "torch.relu", "preresnet.PreActBlock.conv1", "preresnet.PreActBlock.conv2", "preresnet.PreActBlock.bn1", "hasattr", "preresnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preresnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.PreActBottleneck.__init__": [[40, 52], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.PreActBottleneck.forward": [[54, 62], ["torch.relu", "torch.relu", "torch.relu", "preresnet.PreActBottleneck.conv1", "preresnet.PreActBottleneck.conv2", "preresnet.PreActBottleneck.conv3", "preresnet.PreActBottleneck.bn1", "hasattr", "preresnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preresnet.PreActBottleneck.bn2", "preresnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.PreActResNet.__init__": [[65, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preresnet.PreActResNet._make_layer", "preresnet.PreActResNet._make_layer", "preresnet.PreActResNet._make_layer", "preresnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.PreActResNet._make_layer": [[76, 83], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.PreActResNet.forward": [[84, 102], ["preresnet.PreActResNet.conv1", "preresnet.PreActResNet.layer1", "preresnet.PreActResNet.layer2", "preresnet.PreActResNet.layer3", "preresnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preresnet.PreActResNet.view", "preresnet.PreActResNet.linear", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "preresnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.preactresnet18": [[104, 106], ["preresnet.PreActResNet"], "function", ["None"], ["", "", "def", "preactresnet18", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.preactresnet34": [[107, 109], ["preresnet.PreActResNet"], "function", ["None"], ["", "def", "preactresnet34", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.preactresnet50": [[110, 112], ["preresnet.PreActResNet"], "function", ["None"], ["", "def", "preactresnet50", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.preactresnet101": [[113, 115], ["preresnet.PreActResNet"], "function", ["None"], ["", "def", "preactresnet101", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.preactresnet152": [[116, 118], ["preresnet.PreActResNet"], "function", ["None"], ["", "def", "preactresnet152", "(", "num_classes", "=", "10", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", ",", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.preresnet.test": [[120, 124], ["PreActResNet18", "PreActResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.ResNeXtBottleneck.__init__": [[11, 27], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "math.floor"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cardinality", ",", "base_width", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "D", "=", "int", "(", "math", ".", "floor", "(", "planes", "*", "(", "base_width", "/", "64.0", ")", ")", ")", "\n", "C", "=", "cardinality", "\n", "\n", "self", ".", "conv_reduce", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "D", "*", "C", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduce", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "\n", "self", ".", "conv_conv", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "D", "*", "C", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "\n", "self", ".", "conv_expand", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_expand", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.ResNeXtBottleneck.forward": [[28, 44], ["resnext.ResNeXtBottleneck.conv_reduce", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.conv_conv", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.conv_expand", "resnext.ResNeXtBottleneck.bn_expand", "torch.relu", "torch.relu", "resnext.ResNeXtBottleneck.bn_reduce", "resnext.ResNeXtBottleneck.bn", "resnext.ResNeXtBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "bottleneck", "=", "self", ".", "conv_reduce", "(", "x", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn_reduce", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "\n", "bottleneck", "=", "self", ".", "conv_conv", "(", "bottleneck", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "\n", "bottleneck", "=", "self", ".", "conv_expand", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "bn_expand", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "F", ".", "relu", "(", "residual", "+", "bottleneck", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__": [[51, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.CifarResNeXt._make_layer", "resnext.CifarResNeXt._make_layer", "resnext.CifarResNeXt._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnext.CifarResNeXt.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.__init__", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer", "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "depth", ",", "cardinality", ",", "base_width", ",", "num_classes", ",", "dropout", ")", ":", "\n", "    ", "super", "(", "CifarResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 29, 38, 47, 56, 101'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layer_blocks", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "256", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt._make_layer": [[83, 99], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "cardinality", ",", "self", ".", "base_width", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "cardinality", ",", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.CifarResNeXt.forward": [[100, 111], ["resnext.CifarResNeXt.conv_1_3x3", "torch.relu", "torch.relu", "resnext.CifarResNeXt.stage_1", "resnext.CifarResNeXt.stage_2", "resnext.CifarResNeXt.stage_3", "resnext.CifarResNeXt.avgpool", "torch.dropout.view", "resnext.CifarResNeXt.classifier", "resnext.CifarResNeXt.bn_1", "torch.dropout.size", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv_1_3x3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.resnext29_16_64": [[112, 120], ["resnext.CifarResNeXt"], "function", ["None"], ["", "", "def", "resnext29_16_64", "(", "num_classes", "=", "10", ",", "dropout", "=", "True", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNeXt-29, 16*64d model for CIFAR-10 (by default)\n  \n  Args:\n    num_classes (uint): number of classes\n  \"\"\"", "\n", "model", "=", "CifarResNeXt", "(", "ResNeXtBottleneck", ",", "29", ",", "16", ",", "64", ",", "num_classes", ",", "dropout", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Learning-and-Intelligent-Systems_DualCutout.models.resnext.resnext29_8_64": [[121, 129], ["resnext.CifarResNeXt"], "function", ["None"], ["", "def", "resnext29_8_64", "(", "num_classes", "=", "10", ",", "dropout", "=", "True", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNeXt-29, 8*64d model for CIFAR-10 (by default)\n  \n  Args:\n    num_classes (uint): number of classes\n  \"\"\"", "\n", "model", "=", "CifarResNeXt", "(", "ResNeXtBottleneck", ",", "29", ",", "8", ",", "64", ",", "num_classes", ",", "dropout", ")", "\n", "return", "model", "\n", "", ""]]}