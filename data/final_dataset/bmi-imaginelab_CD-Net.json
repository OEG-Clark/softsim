{"home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.visualize_attention.apply_mask": [[42, 46], ["range", "numpy.np.uint8"], "function", ["None"], ["def", "apply_mask", "(", "image", ",", "mask", ",", "color", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "        ", "image", "[", ":", ",", ":", ",", "c", "]", "=", "image", "[", ":", ",", ":", ",", "c", "]", "*", "(", "1", "-", "alpha", "*", "mask", ")", "+", "alpha", "*", "mask", "*", "color", "[", "c", "]", "*", "255", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.visualize_attention.random_colors": [[48, 57], ["list", "random.shuffle", "map", "range", "colorsys.hsv_to_rgb"], "function", ["None"], ["", "def", "random_colors", "(", "N", ",", "bright", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Generate random colors.\n    \"\"\"", "\n", "brightness", "=", "1.0", "if", "bright", "else", "0.7", "\n", "hsv", "=", "[", "(", "i", "/", "N", ",", "1", ",", "brightness", ")", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "colors", "=", "list", "(", "map", "(", "lambda", "c", ":", "colorsys", ".", "hsv_to_rgb", "(", "*", "c", ")", ",", "hsv", ")", ")", "\n", "random", ".", "shuffle", "(", "colors", ")", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.visualize_attention.display_instances": [[59, 100], ["matplotlib.figure", "matplotlib.Axes", "plt.gca.set_axis_off", "plt.figure.add_axes", "matplotlib.gca", "visualize_attention.random_colors", "plt.gca.set_ylim", "plt.gca.set_xlim", "plt.gca.axis", "image.astype().copy", "range", "plt.gca.imshow", "plt.figure.savefig", "print", "visualize_attention.apply_mask", "apply_mask.astype", "image.astype", "cv2.blur", "numpy.zeros", "skimage.measure.find_contours", "matplotlib.patches.Polygon", "plt.gca.add_patch", "numpy.fliplr"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.visualize_attention.random_colors", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.visualize_attention.apply_mask"], ["", "def", "display_instances", "(", "image", ",", "mask", ",", "fname", "=", "\"test\"", ",", "figsize", "=", "(", "5", ",", "5", ")", ",", "blur", "=", "False", ",", "contour", "=", "True", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ",", "frameon", "=", "False", ")", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "\n", "N", "=", "1", "\n", "mask", "=", "mask", "[", "None", ",", ":", ",", ":", "]", "\n", "# Generate random colors", "\n", "colors", "=", "random_colors", "(", "N", ")", "\n", "\n", "# Show area outside image boundaries.", "\n", "height", ",", "width", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "margin", "=", "0", "\n", "ax", ".", "set_ylim", "(", "height", "+", "margin", ",", "-", "margin", ")", "\n", "ax", ".", "set_xlim", "(", "-", "margin", ",", "width", "+", "margin", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "masked_image", "=", "image", ".", "astype", "(", "np", ".", "uint32", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "color", "=", "colors", "[", "i", "]", "\n", "_mask", "=", "mask", "[", "i", "]", "\n", "if", "blur", ":", "\n", "            ", "_mask", "=", "cv2", ".", "blur", "(", "_mask", ",", "(", "10", ",", "10", ")", ")", "\n", "# Mask", "\n", "", "masked_image", "=", "apply_mask", "(", "masked_image", ",", "_mask", ",", "color", ",", "alpha", ")", "\n", "# Mask Polygon", "\n", "# Pad to ensure proper polygons for masks that touch image edges.", "\n", "if", "contour", ":", "\n", "            ", "padded_mask", "=", "np", ".", "zeros", "(", "(", "_mask", ".", "shape", "[", "0", "]", "+", "2", ",", "_mask", ".", "shape", "[", "1", "]", "+", "2", ")", ")", "\n", "padded_mask", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "=", "_mask", "\n", "contours", "=", "find_contours", "(", "padded_mask", ",", "0.5", ")", "\n", "for", "verts", "in", "contours", ":", "\n", "# Subtract the padding and flip (y, x) to (x, y)", "\n", "                ", "verts", "=", "np", ".", "fliplr", "(", "verts", ")", "-", "1", "\n", "p", "=", "Polygon", "(", "verts", ",", "facecolor", "=", "\"none\"", ",", "edgecolor", "=", "color", ")", "\n", "ax", ".", "add_patch", "(", "p", ")", "\n", "", "", "", "ax", ".", "imshow", "(", "masked_image", ".", "astype", "(", "np", ".", "uint8", ")", ",", "aspect", "=", "'auto'", ")", "\n", "fig", ".", "savefig", "(", "fname", ")", "\n", "print", "(", "f\"{fname} saved.\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.extract_features.Dataset.__init__": [[154, 161], ["albumentations.Compose", "open", "pickle.load", "albumentations.pytorch.transforms.ToTensorV2"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "files_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "to_tensor", "=", "albumentations", ".", "Compose", "(", "\n", "[", "\n", "ToTensorV2", "(", ")", "\n", "]", ",", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.extract_features.Dataset.__len__": [[164, 166], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.extract_features.Dataset.__getitem__": [[167, 174], ["cv2.cvtColor().astype", "cv2.cvtColor", "extract_features.Dataset.to_tensor", "cv2.imread"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "temp_path", "=", "self", ".", "files_list", "[", "idx", "]", "\n", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "\n", "cv2", ".", "imread", "(", "temp_path", ")", "[", ":", ",", ":", ",", ":", "3", "]", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "# albumentations", "\n", "\n", "return", "(", "self", ".", "to_tensor", "(", "image", "=", "img", ")", "[", "'image'", "]", ",", "[", "]", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.extract_features.extract_feature_pipeline": [[42, 102], ["extract_features.Dataset", "extract_features.Dataset", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.hub.load.cuda", "utils.load_pretrained_weights", "torch.hub.load.eval", "print", "extract_features.extract_features", "print", "extract_features.extract_features", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.get_rank", "extract_features.cpu", "os.path.join", "torch.get_rank", "extract_features.cpu", "os.path.join", "len", "len", "torchvision.models.__dict__.keys", "torch.Identity", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.load_pretrained_weights", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.extract_features.extract_features", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.extract_features.extract_features", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_rank", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_rank"], ["def", "extract_feature_pipeline", "(", "args", ")", ":", "\n", "# ============ preparing data ... ============", "\n", "\n", "    ", "dataset_train", "=", "Dataset", "(", "args", ".", "data_path", "+", "'/train_5x_list.pickle'", ")", "\n", "dataset_val", "=", "Dataset", "(", "args", ".", "data_path", "+", "'/test_5x_list.pickle'", ")", "\n", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset_train", ",", "shuffle", "=", "False", ")", "\n", "data_loader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "args", ".", "batch_size_per_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "dataset_val", ",", "shuffle", "=", "False", ")", "\n", "data_loader_val", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_val", ",", "\n", "sampler", "=", "sampler_val", ",", "\n", "batch_size", "=", "args", ".", "batch_size_per_gpu", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "print", "(", "f\"Data loaded with {len(dataset_train)} train and {len(dataset_val)} val imgs.\"", ")", "\n", "\n", "# ============ building network ... ============", "\n", "if", "\"vit\"", "in", "args", ".", "arch", ":", "\n", "        ", "model", "=", "vits", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "patch_size", "=", "args", ".", "patch_size", ",", "num_classes", "=", "0", ")", "\n", "print", "(", "f\"Model {args.arch} {args.patch_size}x{args.patch_size} built.\"", ")", "\n", "", "elif", "\"xcit\"", "in", "args", ".", "arch", ":", "\n", "        ", "model", "=", "torch", ".", "hub", ".", "load", "(", "'facebookresearch/xcit:main'", ",", "args", ".", "arch", ",", "num_classes", "=", "0", ")", "\n", "", "elif", "args", ".", "arch", "in", "torchvision_models", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "model", "=", "torchvision_models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "0", ")", "\n", "model", ".", "fc", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Architecture {args.arch} non supported\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "utils", ".", "load_pretrained_weights", "(", "model", ",", "args", ".", "pretrained_weights", ",", "args", ".", "checkpoint_key", ",", "args", ".", "arch", ",", "args", ".", "patch_size", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# ============ extract features ... ============", "\n", "print", "(", "\"Extracting features for train set...\"", ")", "\n", "train_features", "=", "extract_features", "(", "model", ",", "data_loader_train", ",", "args", ".", "use_cuda", ")", "\n", "\n", "# save features", "\n", "if", "args", ".", "dump_features", "and", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "torch", ".", "save", "(", "train_features", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "dump_features", ",", "\"trainfeat.pth\"", ")", ")", "\n", "\n", "", "del", "train_features", "\n", "\n", "print", "(", "\"Extracting features for val set...\"", ")", "\n", "test_features", "=", "extract_features", "(", "model", ",", "data_loader_val", ",", "args", ".", "use_cuda", ")", "\n", "\n", "# save features", "\n", "if", "args", ".", "dump_features", "and", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "torch", ".", "save", "(", "test_features", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "dump_features", ",", "\"testfeat.pth\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.extract_features.extract_features": [[106, 152], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.MetricLogger", "utils.MetricLogger.log_every", "samples.cuda.cuda", "index.cuda.cuda", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "list", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather.wait", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "list", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather.wait", "utils.multi_scale", "model().clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.get_world_size", "index.cuda.size", "torch.empty.unbind", "torch.get_world_size", "model().clone.size", "model().clone.size", "torch.empty.unbind", "torch.get_rank", "torch.get_rank", "len", "features.cuda.cuda", "features.cuda.index_copy_", "features.cuda.index_copy_", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.multi_scale", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_world_size", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_world_size", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_rank", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_rank"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "extract_features", "(", "model", ",", "data_loader", ",", "use_cuda", "=", "True", ",", "multiscale", "=", "False", ")", ":", "\n", "    ", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "features", "=", "None", "\n", "for", "samples", ",", "index", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "10", ")", ":", "\n", "        ", "samples", "=", "samples", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "index", "=", "index", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "multiscale", ":", "\n", "            ", "feats", "=", "utils", ".", "multi_scale", "(", "samples", ",", "model", ")", "\n", "", "else", ":", "\n", "            ", "feats", "=", "model", "(", "samples", ")", ".", "clone", "(", ")", "\n", "\n", "# init storage feature matrix", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "features", "is", "None", ":", "\n", "            ", "features", "=", "torch", ".", "zeros", "(", "len", "(", "data_loader", ".", "dataset", ")", ",", "feats", ".", "shape", "[", "-", "1", "]", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "features", "=", "features", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "print", "(", "f\"Storing features into tensor of shape {features.shape}\"", ")", "\n", "\n", "# get indexes from all processes", "\n", "", "y_all", "=", "torch", ".", "empty", "(", "dist", ".", "get_world_size", "(", ")", ",", "index", ".", "size", "(", "0", ")", ",", "dtype", "=", "index", ".", "dtype", ",", "device", "=", "index", ".", "device", ")", "\n", "y_l", "=", "list", "(", "y_all", ".", "unbind", "(", "0", ")", ")", "\n", "y_all_reduce", "=", "torch", ".", "distributed", ".", "all_gather", "(", "y_l", ",", "index", ",", "async_op", "=", "True", ")", "\n", "y_all_reduce", ".", "wait", "(", ")", "\n", "index_all", "=", "torch", ".", "cat", "(", "y_l", ")", "\n", "\n", "# share features between processes", "\n", "feats_all", "=", "torch", ".", "empty", "(", "\n", "dist", ".", "get_world_size", "(", ")", ",", "\n", "feats", ".", "size", "(", "0", ")", ",", "\n", "feats", ".", "size", "(", "1", ")", ",", "\n", "dtype", "=", "feats", ".", "dtype", ",", "\n", "device", "=", "feats", ".", "device", ",", "\n", ")", "\n", "output_l", "=", "list", "(", "feats_all", ".", "unbind", "(", "0", ")", ")", "\n", "output_all_reduce", "=", "torch", ".", "distributed", ".", "all_gather", "(", "output_l", ",", "feats", ",", "async_op", "=", "True", ")", "\n", "output_all_reduce", ".", "wait", "(", ")", "\n", "\n", "# update storage feature matrix", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "features", ".", "index_copy_", "(", "0", ",", "index_all", ",", "torch", ".", "cat", "(", "output_l", ")", ")", "\n", "", "else", ":", "\n", "                ", "features", ".", "index_copy_", "(", "0", ",", "index_all", ".", "cpu", "(", ")", ",", "torch", ".", "cat", "(", "output_l", ")", ".", "cpu", "(", ")", ")", "\n", "", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_vits16": [[22, 35], ["torch.hub.load_state_dict_from_url", "model.load_state_dict"], "function", ["None"], ["def", "dino_vits16", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ViT-Small/16x16 pre-trained with DINO.\n    Achieves 74.5% top-1 accuracy on ImageNet with k-NN classification.\n    \"\"\"", "\n", "model", "=", "vits", ".", "__dict__", "[", "\"vit_small\"", "]", "(", "patch_size", "=", "16", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_vits8": [[37, 50], ["torch.hub.load_state_dict_from_url", "model.load_state_dict"], "function", ["None"], ["", "def", "dino_vits8", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ViT-Small/8x8 pre-trained with DINO.\n    Achieves 78.3% top-1 accuracy on ImageNet with k-NN classification.\n    \"\"\"", "\n", "model", "=", "vits", ".", "__dict__", "[", "\"vit_small\"", "]", "(", "patch_size", "=", "8", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_deitsmall8_pretrain/dino_deitsmall8_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_vitb16": [[52, 65], ["torch.hub.load_state_dict_from_url", "model.load_state_dict"], "function", ["None"], ["", "def", "dino_vitb16", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ViT-Base/16x16 pre-trained with DINO.\n    Achieves 76.1% top-1 accuracy on ImageNet with k-NN classification.\n    \"\"\"", "\n", "model", "=", "vits", ".", "__dict__", "[", "\"vit_base\"", "]", "(", "patch_size", "=", "16", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_vitb8": [[67, 80], ["torch.hub.load_state_dict_from_url", "model.load_state_dict"], "function", ["None"], ["", "def", "dino_vitb8", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ViT-Base/8x8 pre-trained with DINO.\n    Achieves 77.4% top-1 accuracy on ImageNet with k-NN classification.\n    \"\"\"", "\n", "model", "=", "vits", ".", "__dict__", "[", "\"vit_base\"", "]", "(", "patch_size", "=", "8", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_resnet50": [[82, 96], ["torchvision.models.resnet.resnet50", "torch.nn.Identity", "torch.hub.load_state_dict_from_url", "torchvision.models.resnet.resnet50.load_state_dict"], "function", ["None"], ["", "def", "dino_resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    ResNet-50 pre-trained with DINO.\n    Achieves 75.3% top-1 accuracy on ImageNet linear evaluation benchmark (requires to train `fc`).\n    \"\"\"", "\n", "model", "=", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", "\n", "model", ".", "fc", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_resnet50_pretrain/dino_resnet50_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_xcit_small_12_p16": [[98, 110], ["torch.hub.load", "torch.hub.load_state_dict_from_url", "torch.hub.load.load_state_dict"], "function", ["None"], ["", "def", "dino_xcit_small_12_p16", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    XCiT-Small-12/16 pre-trained with DINO.\n    \"\"\"", "\n", "model", "=", "torch", ".", "hub", ".", "load", "(", "'facebookresearch/xcit:main'", ",", "\"xcit_small_12_p16\"", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_xcit_small_12_p16_pretrain/dino_xcit_small_12_p16_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_xcit_small_12_p8": [[112, 124], ["torch.hub.load", "torch.hub.load_state_dict_from_url", "torch.hub.load.load_state_dict"], "function", ["None"], ["", "def", "dino_xcit_small_12_p8", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    XCiT-Small-12/8 pre-trained with DINO.\n    \"\"\"", "\n", "model", "=", "torch", ".", "hub", ".", "load", "(", "'facebookresearch/xcit:main'", ",", "\"xcit_small_12_p8\"", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_xcit_small_12_p8_pretrain/dino_xcit_small_12_p8_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_xcit_medium_24_p16": [[126, 138], ["torch.hub.load", "torch.hub.load_state_dict_from_url", "torch.hub.load.load_state_dict"], "function", ["None"], ["", "def", "dino_xcit_medium_24_p16", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    XCiT-Medium-24/16 pre-trained with DINO.\n    \"\"\"", "\n", "model", "=", "torch", ".", "hub", ".", "load", "(", "'facebookresearch/xcit:main'", ",", "\"xcit_medium_24_p16\"", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_xcit_medium_24_p16_pretrain/dino_xcit_medium_24_p16_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.hubconf.dino_xcit_medium_24_p8": [[140, 152], ["torch.hub.load", "torch.hub.load_state_dict_from_url", "torch.hub.load.load_state_dict"], "function", ["None"], ["", "def", "dino_xcit_medium_24_p8", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    XCiT-Medium-24/8 pre-trained with DINO.\n    \"\"\"", "\n", "model", "=", "torch", ".", "hub", ".", "load", "(", "'facebookresearch/xcit:main'", ",", "\"xcit_medium_24_p8\"", ",", "num_classes", "=", "0", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/dino_xcit_medium_24_p8_pretrain/dino_xcit_medium_24_p8_pretrain.pth\"", ",", "\n", "map_location", "=", "\"cpu\"", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.DropPath.__init__": [[41, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.DropPath.forward": [[45, 47], ["vision_transformer.drop_path"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.Mlp.__init__": [[50, 58], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.Mlp.forward": [[59, 66], ["vision_transformer.Mlp.fc1", "vision_transformer.Mlp.act", "vision_transformer.Mlp.drop", "vision_transformer.Mlp.fc2", "vision_transformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.Attention.__init__": [[69, 79], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.Attention.forward": [[80, 93], ["vision_transformer.Attention.qkv().reshape().permute", "vision_transformer.Attention.softmax", "vision_transformer.Attention.attn_drop", "vision_transformer.Attention.proj", "vision_transformer.Attention.proj_drop", "vision_transformer.Attention.qkv().reshape", "k.transpose", "vision_transformer.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.Block.__init__": [[96, 106], ["torch.Module.__init__", "norm_layer", "vision_transformer.Attention", "norm_layer", "int", "vision_transformer.Mlp", "vision_transformer.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.Block.forward": [[107, 114], ["vision_transformer.Block.attn", "vision_transformer.Block.norm1", "vision_transformer.Block.drop_path", "vision_transformer.Block.drop_path", "vision_transformer.Block.mlp", "vision_transformer.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.drop_path", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "y", ",", "attn", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "if", "return_attention", ":", "\n", "            ", "return", "attn", "\n", "", "x", "=", "x", "+", "self", ".", "drop_path", "(", "y", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.PatchEmbed.__init__": [[119, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_patches", "=", "(", "img_size", "//", "patch_size", ")", "*", "(", "img_size", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.PatchEmbed.forward": [[128, 132], ["vision_transformer.PatchEmbed.proj().flatten().transpose", "vision_transformer.PatchEmbed.proj().flatten", "vision_transformer.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.__init__": [[136, 164], ["torch.Module.__init__", "vision_transformer.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "norm_layer", "utils.trunc_normal_", "utils.trunc_normal_", "vision_transformer.VisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vision_transformer.Block", "range"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.trunc_normal_", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.trunc_normal_", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.PCA.apply"], ["def", "__init__", "(", "self", ",", "img_size", "=", "[", "224", "]", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "0", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", "[", "0", "]", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer._init_weights": [[165, 173], ["isinstance", "utils.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.interpolate_pos_encoding": [[174, 195], ["torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "class_pos_embed.unsqueeze", "patch_pos_embed.permute().view.permute().view.reshape", "int", "int", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "w", ",", "h", ")", ":", "\n", "        ", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "1", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "1", "\n", "if", "npatch", "==", "N", "and", "w", "==", "h", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "1", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "# we add a small number to avoid floating point error in the interpolation", "\n", "# see discussion at https://github.com/facebookresearch/dino/issues/8", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "w0", "/", "math", ".", "sqrt", "(", "N", ")", ",", "h0", "/", "math", ".", "sqrt", "(", "N", ")", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ".", "unsqueeze", "(", "0", ")", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.prepare_tokens": [[196, 208], ["vision_transformer.VisionTransformer.patch_embed", "vision_transformer.VisionTransformer.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vision_transformer.VisionTransformer.pos_drop", "vision_transformer.VisionTransformer.interpolate_pos_encoding"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.interpolate_pos_encoding"], ["", "def", "prepare_tokens", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "# patch linear embedding", "\n", "\n", "# add the [CLS] token to the embed patch tokens", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# add positional encoding to each token", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "\n", "return", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.forward": [[209, 215], ["vision_transformer.VisionTransformer.prepare_tokens", "vision_transformer.VisionTransformer.norm", "blk"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.prepare_tokens"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.get_last_selfattention": [[216, 224], ["vision_transformer.VisionTransformer.prepare_tokens", "enumerate", "blk", "blk", "len"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.prepare_tokens"], ["", "def", "get_last_selfattention", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "self", ".", "blocks", ")", "-", "1", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "else", ":", "\n", "# return attention of the last block", "\n", "                ", "return", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.get_intermediate_layers": [[225, 234], ["vision_transformer.VisionTransformer.prepare_tokens", "enumerate", "blk", "output.append", "len", "vision_transformer.VisionTransformer.norm"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.VisionTransformer.prepare_tokens"], ["", "", "", "def", "get_intermediate_layers", "(", "self", ",", "x", ",", "n", "=", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "# we return the output tokens from the `n` last blocks", "\n", "output", "=", "[", "]", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "if", "len", "(", "self", ".", "blocks", ")", "-", "i", "<=", "n", ":", "\n", "                ", "output", ".", "append", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.DINOHead.__init__": [[271, 293], ["torch.Module.__init__", "max", "vision_transformer.DINOHead.apply", "torch.utils.weight_norm", "torch.utils.weight_norm", "vision_transformer.DINOHead.last_layer.weight_g.data.fill_", "torch.Linear", "torch.Linear", "layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "torch.GELU", "torch.GELU", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "layers.append", "torch.GELU", "torch.GELU", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.PCA.apply"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "use_bn", "=", "False", ",", "norm_last_layer", "=", "True", ",", "nlayers", "=", "3", ",", "hidden_dim", "=", "2048", ",", "bottleneck_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "nlayers", "=", "max", "(", "nlayers", ",", "1", ")", "\n", "if", "nlayers", "==", "1", ":", "\n", "            ", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "in_dim", ",", "bottleneck_dim", ")", "\n", "", "else", ":", "\n", "            ", "layers", "=", "[", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "]", "\n", "if", "use_bn", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "for", "_", "in", "range", "(", "nlayers", "-", "2", ")", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "if", "use_bn", ":", "\n", "                    ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "bottleneck_dim", ")", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "last_layer", "=", "nn", ".", "utils", ".", "weight_norm", "(", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "out_dim", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "last_layer", ".", "weight_g", ".", "data", ".", "fill_", "(", "1", ")", "\n", "if", "norm_last_layer", ":", "\n", "            ", "self", ".", "last_layer", ".", "weight_g", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.DINOHead._init_weights": [[294, 299], ["isinstance", "utils.trunc_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.DINOHead.forward": [[300, 305], ["vision_transformer.DINOHead.mlp", "torch.functional.normalize", "torch.functional.normalize", "vision_transformer.DINOHead.last_layer"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.drop_path": [[27, 36], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.vit_tiny": [[236, 241], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["", "", "def", "vit_tiny", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.vit_tiny_cam": [[243, 248], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_tiny_cam", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.vit_small": [[250, 255], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_small", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.vit_small_cam": [[256, 261], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_small_cam", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "512", ",", "depth", "=", "12", ",", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.vision_transformer.vit_base": [[263, 268], ["vision_transformer.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_base", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.GaussianBlur.__init__": [[40, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "radius_min", "=", "0.1", ",", "radius_max", "=", "2.", ")", ":", "\n", "        ", "self", ".", "prob", "=", "p", "\n", "self", ".", "radius_min", "=", "radius_min", "\n", "self", ".", "radius_max", "=", "radius_max", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.GaussianBlur.__call__": [[45, 53], ["img.filter", "random.random", "PIL.ImageFilter.GaussianBlur", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "do_it", "=", "random", ".", "random", "(", ")", "<=", "self", ".", "prob", "\n", "if", "not", "do_it", ":", "\n", "            ", "return", "img", "\n", "\n", "", "return", "img", ".", "filter", "(", "\n", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "uniform", "(", "self", ".", "radius_min", ",", "self", ".", "radius_max", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.Solarization.__init__": [[61, 63], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.Solarization.__call__": [[64, 69], ["random.random", "PIL.ImageOps.solarize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "ImageOps", ".", "solarize", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.__init__": [[237, 244], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.6f} ({global_avg:.6f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.update": [[245, 249], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.synchronize_between_processes": [[250, 262], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.median": [[263, 267], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.avg": [[268, 272], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.global_avg": [[273, 276], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.max": [[277, 280], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.value": [[281, 284], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.__str__": [[285, 292], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.__init__": [[322, 325], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.update": [[326, 332], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.__getattr__": [[333, 340], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.__str__": [[341, 348], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.synchronize_between_processes": [[349, 352], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.add_meter": [[353, 355], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.log_every": [[356, 409], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "utils.MetricLogger.delimiter.join", "utils.MetricLogger.delimiter.join", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.update", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.6f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.6f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.6f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.LARS.__init__": [[565, 571], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "0", ",", "weight_decay", "=", "0", ",", "momentum", "=", "0.9", ",", "eta", "=", "0.001", ",", "\n", "weight_decay_filter", "=", "None", ",", "lars_adaptation_filter", "=", "None", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ",", "momentum", "=", "momentum", ",", "\n", "eta", "=", "eta", ",", "weight_decay_filter", "=", "weight_decay_filter", ",", "\n", "lars_adaptation_filter", "=", "lars_adaptation_filter", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.LARS.step": [[572, 600], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mu.mul_().add_", "p.add_", "dp.mul.mul.add", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.where", "torch.where", "dp.mul.mul.mul", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "mu.mul_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "g", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "g", "[", "'params'", "]", ":", "\n", "                ", "dp", "=", "p", ".", "grad", "\n", "\n", "if", "dp", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "p", ".", "ndim", "!=", "1", ":", "\n", "                    ", "dp", "=", "dp", ".", "add", "(", "p", ",", "alpha", "=", "g", "[", "'weight_decay'", "]", ")", "\n", "\n", "", "if", "p", ".", "ndim", "!=", "1", ":", "\n", "                    ", "param_norm", "=", "torch", ".", "norm", "(", "p", ")", "\n", "update_norm", "=", "torch", ".", "norm", "(", "dp", ")", "\n", "one", "=", "torch", ".", "ones_like", "(", "param_norm", ")", "\n", "q", "=", "torch", ".", "where", "(", "param_norm", ">", "0.", ",", "\n", "torch", ".", "where", "(", "update_norm", ">", "0", ",", "\n", "(", "g", "[", "'eta'", "]", "*", "param_norm", "/", "update_norm", ")", ",", "one", ")", ",", "one", ")", "\n", "dp", "=", "dp", ".", "mul", "(", "q", ")", "\n", "\n", "", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'mu'", "not", "in", "param_state", ":", "\n", "                    ", "param_state", "[", "'mu'", "]", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "", "mu", "=", "param_state", "[", "'mu'", "]", "\n", "mu", ".", "mul_", "(", "g", "[", "'momentum'", "]", ")", ".", "add_", "(", "dp", ")", "\n", "\n", "p", ".", "add_", "(", "mu", ",", "alpha", "=", "-", "g", "[", "'lr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MultiCropWrapper.__init__": [[611, 617], ["torch.nn.Module.__init__", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ",", "head", ")", ":", "\n", "        ", "super", "(", "MultiCropWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# disable layers dedicated to ImageNet labels classification", "\n", "backbone", ".", "fc", ",", "backbone", ".", "head", "=", "nn", ".", "Identity", "(", ")", ",", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "head", "=", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.MultiCropWrapper.forward": [[618, 641], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "utils.MultiCropWrapper.head", "isinstance", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "utils.MultiCropWrapper.backbone", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# convert to list", "\n", "        ", "if", "not", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "x", "=", "[", "x", "]", "\n", "\n", "", "idx_crops", "=", "torch", ".", "cumsum", "(", "torch", ".", "unique_consecutive", "(", "\n", "torch", ".", "tensor", "(", "[", "inp", ".", "shape", "[", "-", "1", "]", "for", "inp", "in", "x", "]", ")", ",", "\n", "return_counts", "=", "True", ",", "\n", ")", "[", "1", "]", ",", "0", ")", "\n", "\n", "start_idx", ",", "output", "=", "0", ",", "torch", ".", "empty", "(", "0", ")", ".", "to", "(", "x", "[", "0", "]", ".", "device", ")", "\n", "for", "end_idx", "in", "idx_crops", ":", "\n", "            ", "_out", "=", "self", ".", "backbone", "(", "torch", ".", "cat", "(", "x", "[", "start_idx", ":", "end_idx", "]", ")", ")", "\n", "\n", "# The output is a tuple with XCiT model. See:", "\n", "# https://github.com/facebookresearch/xcit/blob/master/xcit.py#L404-L405", "\n", "if", "isinstance", "(", "_out", ",", "tuple", ")", ":", "\n", "                ", "_out", "=", "_out", "[", "0", "]", "\n", "# accumulate outputs", "\n", "", "output", "=", "torch", ".", "cat", "(", "(", "output", ",", "_out", ")", ")", "\n", "start_idx", "=", "end_idx", "\n", "# Run the head forward on the concatenated features.", "\n", "", "return", "self", ".", "head", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.PCA.__init__": [[669, 673], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dim", "=", "256", ",", "whit", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "self", ".", "whit", "=", "whit", "\n", "self", ".", "mean", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.PCA.train_pca": [[674, 699], ["numpy.linalg.eigh", "numpy.diag.sum", "print", "numpy.diag", "numpy.dot", "numpy.diag.max", "numpy.argsort", "numpy.diag.sum"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.max"], ["", "def", "train_pca", "(", "self", ",", "cov", ")", ":", "\n", "        ", "\"\"\"\n        Takes a covariance matrix (np.ndarray) as input.\n        \"\"\"", "\n", "d", ",", "v", "=", "np", ".", "linalg", ".", "eigh", "(", "cov", ")", "\n", "eps", "=", "d", ".", "max", "(", ")", "*", "1e-5", "\n", "n_0", "=", "(", "d", "<", "eps", ")", ".", "sum", "(", ")", "\n", "if", "n_0", ">", "0", ":", "\n", "            ", "d", "[", "d", "<", "eps", "]", "=", "eps", "\n", "\n", "# total energy", "\n", "", "totenergy", "=", "d", ".", "sum", "(", ")", "\n", "\n", "# sort eigenvectors with eigenvalues order", "\n", "idx", "=", "np", ".", "argsort", "(", "d", ")", "[", ":", ":", "-", "1", "]", "[", ":", "self", ".", "dim", "]", "\n", "d", "=", "d", "[", "idx", "]", "\n", "v", "=", "v", "[", ":", ",", "idx", "]", "\n", "\n", "print", "(", "\"keeping %.2f %% of the energy\"", "%", "(", "d", ".", "sum", "(", ")", "/", "totenergy", "*", "100.0", ")", ")", "\n", "\n", "# for the whitening", "\n", "d", "=", "np", ".", "diag", "(", "1.", "/", "d", "**", "self", ".", "whit", ")", "\n", "\n", "# principal components", "\n", "self", ".", "dvt", "=", "np", ".", "dot", "(", "d", ",", "v", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.PCA.apply": [[700, 717], ["isinstance", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.mm().transpose", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.dot", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "x.transpose", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "x.transpose"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "x", ")", ":", "\n", "# input is from numpy", "\n", "        ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "self", ".", "mean", "is", "not", "None", ":", "\n", "                ", "x", "-=", "self", ".", "mean", "\n", "", "return", "np", ".", "dot", "(", "self", ".", "dvt", ",", "x", ".", "T", ")", ".", "T", "\n", "\n", "# input is from torch and is on GPU", "\n", "", "if", "x", ".", "is_cuda", ":", "\n", "            ", "if", "self", ".", "mean", "is", "not", "None", ":", "\n", "                ", "x", "-=", "torch", ".", "cuda", ".", "FloatTensor", "(", "self", ".", "mean", ")", "\n", "", "return", "torch", ".", "mm", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "self", ".", "dvt", ")", ",", "x", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# input if from torch, on CPU", "\n", "", "if", "self", ".", "mean", "is", "not", "None", ":", "\n", "            ", "x", "-=", "torch", ".", "FloatTensor", "(", "self", ".", "mean", ")", "\n", "", "return", "torch", ".", "mm", "(", "torch", ".", "FloatTensor", "(", "self", ".", "dvt", ")", ",", "x", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.load_pretrained_weights": [[71, 110], ["os.path.isfile", "torch.load", "torch.load", "model.load_state_dict", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "k.replace", "k.replace", "utils.setup_for_distributed.print", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "model.load_state_dict", "utils.setup_for_distributed.print", "torch.hub.load_state_dict_from_url.items", "torch.hub.load_state_dict_from_url.items"], "function", ["None"], ["", "", "", "def", "load_pretrained_weights", "(", "model", ",", "pretrained_weights", ",", "checkpoint_key", ",", "model_name", ",", "patch_size", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained_weights", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "pretrained_weights", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "checkpoint_key", "is", "not", "None", "and", "checkpoint_key", "in", "state_dict", ":", "\n", "            ", "print", "(", "f\"Take key {checkpoint_key} in provided checkpoint dict\"", ")", "\n", "state_dict", "=", "state_dict", "[", "checkpoint_key", "]", "\n", "# remove `module.` prefix", "\n", "", "state_dict", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "# remove `backbone.` prefix induced by multicrop wrapper", "\n", "state_dict", "=", "{", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Pretrained weights found at {} and loaded with msg: {}'", ".", "format", "(", "pretrained_weights", ",", "msg", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Please use the `--pretrained_weights` argument to indicate the path of the checkpoint to evaluate.\"", ")", "\n", "url", "=", "None", "\n", "if", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "16", ":", "\n", "            ", "url", "=", "\"dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "8", ":", "\n", "            ", "url", "=", "\"dino_deitsmall8_pretrain/dino_deitsmall8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "16", ":", "\n", "            ", "url", "=", "\"dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "8", ":", "\n", "            ", "url", "=", "\"dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"xcit_small_12_p16\"", ":", "\n", "            ", "url", "=", "\"dino_xcit_small_12_p16_pretrain/dino_xcit_small_12_p16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"xcit_small_12_p8\"", ":", "\n", "            ", "url", "=", "\"dino_xcit_small_12_p8_pretrain/dino_xcit_small_12_p8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"xcit_medium_24_p16\"", ":", "\n", "            ", "url", "=", "\"dino_xcit_medium_24_p16_pretrain/dino_xcit_medium_24_p16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"xcit_medium_24_p8\"", ":", "\n", "            ", "url", "=", "\"dino_xcit_medium_24_p8_pretrain/dino_xcit_medium_24_p8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "            ", "url", "=", "\"dino_resnet50_pretrain/dino_resnet50_pretrain.pth\"", "\n", "", "if", "url", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Since no pretrained weights have been provided, we load the reference pretrained DINO weights.\"", ")", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/\"", "+", "url", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"There is no reference weights available for this model => We use random weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.load_pretrained_linear_weights": [[112, 130], ["utils.setup_for_distributed.print", "linear_classifier.load_state_dict", "utils.setup_for_distributed.print", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url"], "function", ["None"], ["", "", "", "def", "load_pretrained_linear_weights", "(", "linear_classifier", ",", "model_name", ",", "patch_size", ")", ":", "\n", "    ", "url", "=", "None", "\n", "if", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "16", ":", "\n", "        ", "url", "=", "\"dino_deitsmall16_pretrain/dino_deitsmall16_linearweights.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "8", ":", "\n", "        ", "url", "=", "\"dino_deitsmall8_pretrain/dino_deitsmall8_linearweights.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "16", ":", "\n", "        ", "url", "=", "\"dino_vitbase16_pretrain/dino_vitbase16_linearweights.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "8", ":", "\n", "        ", "url", "=", "\"dino_vitbase8_pretrain/dino_vitbase8_linearweights.pth\"", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "        ", "url", "=", "\"dino_resnet50_pretrain/dino_resnet50_linearweights.pth\"", "\n", "", "if", "url", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"We load the reference pretrained linear weights.\"", ")", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/\"", "+", "url", ")", "[", "\"state_dict\"", "]", "\n", "linear_classifier", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"We use random linear weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.clip_gradients": [[132, 142], ["model.named_parameters", "p.grad.data.norm", "norms.append", "p.grad.data.norm.item", "p.grad.data.mul_"], "function", ["None"], ["", "", "def", "clip_gradients", "(", "model", ",", "clip", ")", ":", "\n", "    ", "norms", "=", "[", "]", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", "\n", "norms", ".", "append", "(", "param_norm", ".", "item", "(", ")", ")", "\n", "clip_coef", "=", "clip", "/", "(", "param_norm", "+", "1e-6", ")", "\n", "if", "clip_coef", "<", "1", ":", "\n", "                ", "p", ".", "grad", ".", "data", ".", "mul_", "(", "clip_coef", ")", "\n", "", "", "", "return", "norms", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.cancel_gradients_last_layer": [[144, 150], ["model.named_parameters"], "function", ["None"], ["", "def", "cancel_gradients_last_layer", "(", "epoch", ",", "model", ",", "freeze_last_layer", ")", ":", "\n", "    ", "if", "epoch", ">=", "freeze_last_layer", ":", "\n", "        ", "return", "\n", "", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "\"last_layer\"", "in", "n", ":", "\n", "            ", "p", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.cancel_gradients_encoder": [[152, 158], ["model.named_parameters"], "function", ["None"], ["", "", "", "def", "cancel_gradients_encoder", "(", "epoch", ",", "model", ",", "freeze_encoder", ")", ":", "\n", "    ", "if", "epoch", ">=", "freeze_encoder", ":", "\n", "        ", "return", "\n", "", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "\"head\"", "not", "in", "n", ":", "\n", "            ", "p", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.restart_from_checkpoint": [[160, 193], ["utils.setup_for_distributed.print", "torch.load", "torch.load", "kwargs.items", "os.path.isfile", "utils.setup_for_distributed.print", "value.load_state_dict", "utils.setup_for_distributed.print", "value.load_state_dict", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print"], "function", ["None"], ["", "", "", "def", "restart_from_checkpoint", "(", "ckp_path", ",", "run_variables", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Re-start from checkpoint\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "ckp_path", ")", ":", "\n", "        ", "return", "\n", "", "print", "(", "\"Found checkpoint at {}\"", ".", "format", "(", "ckp_path", ")", ")", "\n", "\n", "# open checkpoint file", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckp_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "# key is what to look for in the checkpoint file", "\n", "# value is the object to load", "\n", "# example: {'state_dict': model}", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "checkpoint", "and", "value", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "msg", "=", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"=> loaded '{}' from checkpoint '{}' with msg {}\"", ".", "format", "(", "key", ",", "ckp_path", ",", "msg", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "try", ":", "\n", "                    ", "msg", "=", "value", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "print", "(", "\"=> loaded '{}' from checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "\"=> failed to load '{}' from checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "print", "(", "\"=> key '{}' not found in checkpoint: '{}'\"", ".", "format", "(", "key", ",", "ckp_path", ")", ")", "\n", "\n", "# re load variable important for the run", "\n", "", "", "if", "run_variables", "is", "not", "None", ":", "\n", "        ", "for", "var_name", "in", "run_variables", ":", "\n", "            ", "if", "var_name", "in", "checkpoint", ":", "\n", "                ", "run_variables", "[", "var_name", "]", "=", "checkpoint", "[", "var_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.cosine_scheduler": [[195, 207], ["numpy.array", "numpy.arange", "numpy.concatenate", "numpy.linspace", "len", "numpy.cos", "len"], "function", ["None"], ["", "", "", "", "def", "cosine_scheduler", "(", "base_value", ",", "final_value", ",", "epochs", ",", "niter_per_ep", ",", "warmup_epochs", "=", "0", ",", "start_warmup_value", "=", "0", ")", ":", "\n", "    ", "warmup_schedule", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "warmup_iters", "=", "warmup_epochs", "*", "niter_per_ep", "\n", "if", "warmup_epochs", ">", "0", ":", "\n", "        ", "warmup_schedule", "=", "np", ".", "linspace", "(", "start_warmup_value", ",", "base_value", ",", "warmup_iters", ")", "\n", "\n", "", "iters", "=", "np", ".", "arange", "(", "epochs", "*", "niter_per_ep", "-", "warmup_iters", ")", "\n", "schedule", "=", "final_value", "+", "0.5", "*", "(", "base_value", "-", "final_value", ")", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "iters", "/", "len", "(", "iters", ")", ")", ")", "\n", "\n", "schedule", "=", "np", ".", "concatenate", "(", "(", "warmup_schedule", ",", "schedule", ")", ")", "\n", "assert", "len", "(", "schedule", ")", "==", "epochs", "*", "niter_per_ep", "\n", "return", "schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.bool_flag": [[209, 221], ["s.lower", "s.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "bool_flag", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    Parse boolean arguments from the command line.\n    \"\"\"", "\n", "FALSY_STRINGS", "=", "{", "\"off\"", ",", "\"false\"", ",", "\"0\"", "}", "\n", "TRUTHY_STRINGS", "=", "{", "\"on\"", ",", "\"true\"", ",", "\"1\"", "}", "\n", "if", "s", ".", "lower", "(", ")", "in", "FALSY_STRINGS", ":", "\n", "        ", "return", "False", "\n", "", "elif", "s", ".", "lower", "(", ")", "in", "TRUTHY_STRINGS", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"invalid value for a boolean flag\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.fix_random_seeds": [[223, 230], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "", "def", "fix_random_seeds", "(", "seed", "=", "31", ")", ":", "\n", "    ", "\"\"\"\n    Fix random seeds.\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.reduce_dict": [[294, 319], ["utils.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_world_size"], ["", "", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_sha": [[411, 429], ["os.path.dirname", "os.path.abspath", "subprocess.check_output().decode().strip", "utils.get_sha._run"], "function", ["None"], ["", "", "def", "get_sha", "(", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "def", "_run", "(", "command", ")", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "command", ",", "cwd", "=", "cwd", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "", "sha", "=", "'N/A'", "\n", "diff", "=", "\"clean\"", "\n", "branch", "=", "'N/A'", "\n", "try", ":", "\n", "        ", "sha", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'diff'", "]", ",", "cwd", "=", "cwd", ")", "\n", "diff", "=", "_run", "(", "[", "'git'", ",", "'diff-index'", ",", "'HEAD'", "]", ")", "\n", "diff", "=", "\"has uncommited changes\"", "if", "diff", "else", "\"clean\"", "\n", "branch", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--abbrev-ref'", ",", "'HEAD'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "", "message", "=", "f\"sha: {sha}, status: {diff}, branch: {branch}\"", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.is_dist_avail_and_initialized": [[431, 437], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_world_size": [[439, 443], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_world_size", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_rank": [[445, 449], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_rank", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.is_main_process": [[451, 453], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.save_on_master": [[455, 458], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.setup_for_distributed": [[460, 473], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.init_distributed_mode": [[475, 508], ["torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.barrier", "utils.setup_for_distributed", "int", "int", "int", "int", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.device_count", "torch.cuda.device_count", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.setup_for_distributed"], ["", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "# launched with torch.distributed.launch", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "# launched with submitit on a slurm cluster", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "# launched naively with `python main_dino.py`", "\n", "# we manually add MASTER_ADDR and MASTER_PORT to env variables", "\n", "", "elif", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'Will run the code on one GPU.'", ")", "\n", "args", ".", "rank", ",", "args", ".", "gpu", ",", "args", ".", "world_size", "=", "0", ",", "0", ",", "1", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'127.0.0.1'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'29500'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Does not support training without GPU.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ",", "\n", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.accuracy": [[510, 518], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.reshape().expand_as", "target.reshape", "correct[].reshape().float().sum", "correct[].reshape().float", "correct[].reshape"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.max"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "return", "[", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "*", "100.", "/", "batch_size", "for", "k", "in", "topk", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils._no_grad_trunc_normal_": [[520, 554], ["warnings.warn", "torch.no_grad", "torch.no_grad", "utils._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.trunc_normal_": [[556, 559], ["utils._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.get_params_groups": [[643, 655], ["model.named_parameters", "name.endswith", "not_regularized.append", "regularized.append", "len"], "function", ["None"], ["", "", "def", "get_params_groups", "(", "model", ")", ":", "\n", "    ", "regularized", "=", "[", "]", "\n", "not_regularized", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "# we do not regularize biases nor Norm parameters", "\n", "", "if", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "len", "(", "param", ".", "shape", ")", "==", "1", ":", "\n", "            ", "not_regularized", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "regularized", ".", "append", "(", "param", ")", "\n", "", "", "return", "[", "{", "'params'", ":", "regularized", "}", ",", "{", "'params'", ":", "not_regularized", ",", "'weight_decay'", ":", "0.", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.has_batchnorms": [[657, 663], ["model.named_modules", "isinstance"], "function", ["None"], ["", "def", "has_batchnorms", "(", "model", ")", ":", "\n", "    ", "bn_types", "=", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ",", "nn", ".", "SyncBatchNorm", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "bn_types", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.compute_ap": [[719, 752], ["len", "numpy.arange", "float", "float"], "function", ["None"], ["", "", "def", "compute_ap", "(", "ranks", ",", "nres", ")", ":", "\n", "    ", "\"\"\"\n    Computes average precision for given ranked indexes.\n    Arguments\n    ---------\n    ranks : zerro-based ranks of positive images\n    nres  : number of positive images\n    Returns\n    -------\n    ap    : average precision\n    \"\"\"", "\n", "\n", "# number of images ranked by the system", "\n", "nimgranks", "=", "len", "(", "ranks", ")", "\n", "\n", "# accumulate trapezoids in PR-plot", "\n", "ap", "=", "0", "\n", "\n", "recall_step", "=", "1.", "/", "nres", "\n", "\n", "for", "j", "in", "np", ".", "arange", "(", "nimgranks", ")", ":", "\n", "        ", "rank", "=", "ranks", "[", "j", "]", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "precision_0", "=", "1.", "\n", "", "else", ":", "\n", "            ", "precision_0", "=", "float", "(", "j", ")", "/", "rank", "\n", "\n", "", "precision_1", "=", "float", "(", "j", "+", "1", ")", "/", "(", "rank", "+", "1", ")", "\n", "\n", "ap", "+=", "(", "precision_0", "+", "precision_1", ")", "*", "recall_step", "/", "2.", "\n", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.compute_map": [[754, 824], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "len", "numpy.array", "len", "utils.compute_ap", "numpy.arange", "len", "float", "float", "numpy.array", "numpy.arange", "numpy.arange", "len", "len", "min", "numpy.empty", "numpy.in1d", "numpy.in1d", "len", "max", "len"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.compute_ap", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.SmoothedValue.max"], ["", "def", "compute_map", "(", "ranks", ",", "gnd", ",", "kappas", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"\n    Computes the mAP for a given set of returned results.\n         Usage:\n           map = compute_map (ranks, gnd)\n                 computes mean average precsion (map) only\n           map, aps, pr, prs = compute_map (ranks, gnd, kappas)\n                 computes mean average precision (map), average precision (aps) for each query\n                 computes mean precision at kappas (pr), precision at kappas (prs) for each query\n         Notes:\n         1) ranks starts from 0, ranks.shape = db_size X #queries\n         2) The junk results (e.g., the query itself) should be declared in the gnd stuct array\n         3) If there are no positive images for some query, that query is excluded from the evaluation\n    \"\"\"", "\n", "\n", "map", "=", "0.", "\n", "nq", "=", "len", "(", "gnd", ")", "# number of queries", "\n", "aps", "=", "np", ".", "zeros", "(", "nq", ")", "\n", "pr", "=", "np", ".", "zeros", "(", "len", "(", "kappas", ")", ")", "\n", "prs", "=", "np", ".", "zeros", "(", "(", "nq", ",", "len", "(", "kappas", ")", ")", ")", "\n", "nempty", "=", "0", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "nq", ")", ":", "\n", "        ", "qgnd", "=", "np", ".", "array", "(", "gnd", "[", "i", "]", "[", "'ok'", "]", ")", "\n", "\n", "# no positive images, skip from the average", "\n", "if", "qgnd", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "aps", "[", "i", "]", "=", "float", "(", "'nan'", ")", "\n", "prs", "[", "i", ",", ":", "]", "=", "float", "(", "'nan'", ")", "\n", "nempty", "+=", "1", "\n", "continue", "\n", "\n", "", "try", ":", "\n", "            ", "qgndj", "=", "np", ".", "array", "(", "gnd", "[", "i", "]", "[", "'junk'", "]", ")", "\n", "", "except", ":", "\n", "            ", "qgndj", "=", "np", ".", "empty", "(", "0", ")", "\n", "\n", "# sorted positions of positive and junk images (0 based)", "\n", "", "pos", "=", "np", ".", "arange", "(", "ranks", ".", "shape", "[", "0", "]", ")", "[", "np", ".", "in1d", "(", "ranks", "[", ":", ",", "i", "]", ",", "qgnd", ")", "]", "\n", "junk", "=", "np", ".", "arange", "(", "ranks", ".", "shape", "[", "0", "]", ")", "[", "np", ".", "in1d", "(", "ranks", "[", ":", ",", "i", "]", ",", "qgndj", ")", "]", "\n", "\n", "k", "=", "0", ";", "\n", "ij", "=", "0", ";", "\n", "if", "len", "(", "junk", ")", ":", "\n", "# decrease positions of positives based on the number of", "\n", "# junk images appearing before them", "\n", "            ", "ip", "=", "0", "\n", "while", "(", "ip", "<", "len", "(", "pos", ")", ")", ":", "\n", "                ", "while", "(", "ij", "<", "len", "(", "junk", ")", "and", "pos", "[", "ip", "]", ">", "junk", "[", "ij", "]", ")", ":", "\n", "                    ", "k", "+=", "1", "\n", "ij", "+=", "1", "\n", "", "pos", "[", "ip", "]", "=", "pos", "[", "ip", "]", "-", "k", "\n", "ip", "+=", "1", "\n", "\n", "# compute ap", "\n", "", "", "ap", "=", "compute_ap", "(", "pos", ",", "len", "(", "qgnd", ")", ")", "\n", "map", "=", "map", "+", "ap", "\n", "aps", "[", "i", "]", "=", "ap", "\n", "\n", "# compute precision @ k", "\n", "pos", "+=", "1", "# get it to 1-based", "\n", "for", "j", "in", "np", ".", "arange", "(", "len", "(", "kappas", ")", ")", ":", "\n", "            ", "kq", "=", "min", "(", "max", "(", "pos", ")", ",", "kappas", "[", "j", "]", ")", ";", "\n", "prs", "[", "i", ",", "j", "]", "=", "(", "pos", "<=", "kq", ")", ".", "sum", "(", ")", "/", "kq", "\n", "", "pr", "=", "pr", "+", "prs", "[", "i", ",", ":", "]", "\n", "\n", "", "map", "=", "map", "/", "(", "nq", "-", "nempty", ")", "\n", "pr", "=", "pr", "/", "(", "nq", "-", "nempty", ")", "\n", "\n", "return", "map", ",", "aps", ",", "pr", ",", "prs", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.utils.multi_scale": [[826, 841], ["v.norm", "model().clone", "samples.clone", "torch.nn.functional.interpolate", "model"], "function", ["None"], ["", "def", "multi_scale", "(", "samples", ",", "model", ")", ":", "\n", "    ", "v", "=", "None", "\n", "for", "s", "in", "[", "1", ",", "1", "/", "2", "**", "(", "1", "/", "2", ")", ",", "1", "/", "2", "]", ":", "# we use 3 different scales", "\n", "        ", "if", "s", "==", "1", ":", "\n", "            ", "inp", "=", "samples", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "inp", "=", "nn", ".", "functional", ".", "interpolate", "(", "samples", ",", "scale_factor", "=", "s", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "feats", "=", "model", "(", "inp", ")", ".", "clone", "(", ")", "\n", "if", "v", "is", "None", ":", "\n", "            ", "v", "=", "feats", "\n", "", "else", ":", "\n", "            ", "v", "+=", "feats", "\n", "", "", "v", "/=", "3", "\n", "v", "/=", "v", ".", "norm", "(", ")", "\n", "return", "v", "\n", "", ""]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__init__": [[59, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.__call__": [[62, 67], ["run_with_submitit.Trainer._setup_gpu_args", "main_dino.train_dino"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer._setup_gpu_args"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "import", "main_dino", "\n", "\n", "self", ".", "_setup_gpu_args", "(", ")", "\n", "main_dino", ".", "train_dino", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer.checkpoint": [[68, 76], ["get_init_file().as_uri", "print", "submitit.helpers.DelayedSubmission", "type", "run_with_submitit.get_init_file"], "methods", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.get_init_file"], ["", "def", "checkpoint", "(", "self", ")", ":", "\n", "        ", "import", "os", "\n", "import", "submitit", "\n", "\n", "self", ".", "args", ".", "dist_url", "=", "get_init_file", "(", ")", ".", "as_uri", "(", ")", "\n", "print", "(", "\"Requeuing \"", ",", "self", ".", "args", ")", "\n", "empty_trainer", "=", "type", "(", "self", ")", "(", "self", ".", "args", ")", "\n", "return", "submitit", ".", "helpers", ".", "DelayedSubmission", "(", "empty_trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.Trainer._setup_gpu_args": [[77, 87], ["submitit.JobEnvironment", "pathlib.Path", "print", "str().replace", "str", "str"], "methods", ["None"], ["", "def", "_setup_gpu_args", "(", "self", ")", ":", "\n", "        ", "import", "submitit", "\n", "from", "pathlib", "import", "Path", "\n", "\n", "job_env", "=", "submitit", ".", "JobEnvironment", "(", ")", "\n", "self", ".", "args", ".", "output_dir", "=", "Path", "(", "str", "(", "self", ".", "args", ".", "output_dir", ")", ".", "replace", "(", "\"%j\"", ",", "str", "(", "job_env", ".", "job_id", ")", ")", ")", "\n", "self", ".", "args", ".", "gpu", "=", "job_env", ".", "local_rank", "\n", "self", ".", "args", ".", "rank", "=", "job_env", ".", "global_rank", "\n", "self", ".", "args", ".", "world_size", "=", "job_env", ".", "num_tasks", "\n", "print", "(", "f\"Process group: {job_env.num_tasks} tasks, rank: {job_env.global_rank}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.parse_args": [[27, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "main_dino.get_args_parser"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Submitit for DINO\"", ",", "parents", "=", "[", "main_dino", ".", "get_args_parser", "(", ")", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--ngpus\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "\"Number of gpus to request on each node\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nodes\"", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "\"Number of nodes to request\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--timeout\"", ",", "default", "=", "2800", ",", "type", "=", "int", ",", "help", "=", "\"Duration of the job\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--partition\"", ",", "default", "=", "\"learnfair\"", ",", "type", "=", "str", ",", "help", "=", "\"Partition where to submit\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_volta32\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Big models? Use this\"", ")", "\n", "parser", ".", "add_argument", "(", "'--comment'", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'Comment to pass to scheduler, e.g. priority message'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.get_shared_folder": [[40, 47], ["os.getenv", "pathlib.Path().is_dir", "RuntimeError", "pathlib.Path", "pathlib.Path.mkdir", "pathlib.Path"], "function", ["None"], ["", "def", "get_shared_folder", "(", ")", "->", "Path", ":", "\n", "    ", "user", "=", "os", ".", "getenv", "(", "\"USER\"", ")", "\n", "if", "Path", "(", "\"/checkpoint/\"", ")", ".", "is_dir", "(", ")", ":", "\n", "        ", "p", "=", "Path", "(", "f\"/checkpoint/{user}/experiments\"", ")", "\n", "p", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "return", "p", "\n", "", "raise", "RuntimeError", "(", "\"No shared folder available\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.get_init_file": [[49, 56], ["os.makedirs", "init_file.exists", "str", "run_with_submitit.get_shared_folder", "os.remove", "run_with_submitit.get_shared_folder", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.get_shared_folder", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.get_shared_folder"], ["", "def", "get_init_file", "(", ")", ":", "\n", "# Init file must not exist, but it's parent dir must exist.", "\n", "    ", "os", ".", "makedirs", "(", "str", "(", "get_shared_folder", "(", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "init_file", "=", "get_shared_folder", "(", ")", "/", "f\"{uuid.uuid4().hex}_init\"", "\n", "if", "init_file", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "remove", "(", "str", "(", "init_file", ")", ")", "\n", "", "return", "init_file", "\n", "\n"]], "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.main": [[89, 129], ["run_with_submitit.parse_args", "pathlib.Path().mkdir", "submitit.AutoExecutor", "submitit.AutoExecutor.update_parameters", "submitit.AutoExecutor.update_parameters", "get_init_file().as_uri", "run_with_submitit.Trainer", "submitit.AutoExecutor.submit", "print", "print", "run_with_submitit.get_shared_folder", "pathlib.Path", "run_with_submitit.get_init_file"], "function", ["home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.parse_args", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.get_shared_folder", "home.repos.pwc.inspect_result.bmi-imaginelab_CD-Net.None.run_with_submitit.get_init_file"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "if", "args", ".", "output_dir", "==", "\"\"", ":", "\n", "        ", "args", ".", "output_dir", "=", "get_shared_folder", "(", ")", "/", "\"%j\"", "\n", "", "Path", "(", "args", ".", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "executor", "=", "submitit", ".", "AutoExecutor", "(", "folder", "=", "args", ".", "output_dir", ",", "slurm_max_num_timeout", "=", "30", ")", "\n", "\n", "num_gpus_per_node", "=", "args", ".", "ngpus", "\n", "nodes", "=", "args", ".", "nodes", "\n", "timeout_min", "=", "args", ".", "timeout", "\n", "\n", "partition", "=", "args", ".", "partition", "\n", "kwargs", "=", "{", "}", "\n", "if", "args", ".", "use_volta32", ":", "\n", "        ", "kwargs", "[", "'slurm_constraint'", "]", "=", "'volta32gb'", "\n", "", "if", "args", ".", "comment", ":", "\n", "        ", "kwargs", "[", "'slurm_comment'", "]", "=", "args", ".", "comment", "\n", "\n", "", "executor", ".", "update_parameters", "(", "\n", "mem_gb", "=", "40", "*", "num_gpus_per_node", ",", "\n", "gpus_per_node", "=", "num_gpus_per_node", ",", "\n", "tasks_per_node", "=", "num_gpus_per_node", ",", "# one task per GPU", "\n", "cpus_per_task", "=", "10", ",", "\n", "nodes", "=", "nodes", ",", "\n", "timeout_min", "=", "timeout_min", ",", "# max is 60 * 72", "\n", "# Below are cluster dependent parameters", "\n", "slurm_partition", "=", "partition", ",", "\n", "slurm_signal_delay_s", "=", "120", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "executor", ".", "update_parameters", "(", "name", "=", "\"dino\"", ")", "\n", "\n", "args", ".", "dist_url", "=", "get_init_file", "(", ")", ".", "as_uri", "(", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "job", "=", "executor", ".", "submit", "(", "trainer", ")", "\n", "\n", "print", "(", "f\"Submitted job_id: {job.job_id}\"", ")", "\n", "print", "(", "f\"Logs and checkpoints will be saved at: {args.output_dir}\"", ")", "\n", "\n"]]}