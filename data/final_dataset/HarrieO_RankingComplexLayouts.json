{"home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.models.naive_model": [[6, 61], ["model_utils._get_doc_tensors", "tensorflow.cast", "tensorflow.zeros", "tensorflow.add", "model_utils._shared_doc_embeddings", "range", "tensorflow.stack", "tensorflow.concat", "tensorflow.summary.histogram", "tensorflow.shape", "tensorflow.range", "model_utils._create_subnetwork", "tensorflow.summary.scalar", "model_utils.select_eps_greedy_action", "tensorflow.gather", "serp_labels.append", "serp_docs.append", "tensorflow.reduce_mean", "tensorflow.cond", "tensorflow.gather", "tensorflow.where", "tensorflow.gather", "tensorflow.tile", "tensorflow.concat", "tensorflow.less", "tensorflow.equal", "tensorflow.gather", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._get_doc_tensors", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils.select_eps_greedy_action"], ["def", "naive_model", "(", "params", ",", "examples", ",", "labels", ",", "epsilon", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "doc_emb_size", "=", "params", "[", "'doc_emb'", "]", "[", "-", "1", "]", "\n", "docs", "=", "mu", ".", "_get_doc_tensors", "(", "examples", ",", "params", ",", "'main'", ")", "\n", "result", "=", "{", "}", "\n", "\n", "n_docs", "=", "tf", ".", "shape", "(", "docs", ")", "[", "0", "]", "\n", "ind_range", "=", "tf", ".", "cast", "(", "tf", ".", "range", "(", "n_docs", ")", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "result", "[", "'docs_per_query'", "]", "=", "n_docs", "\n", "\n", "score_filter", "=", "tf", ".", "zeros", "(", "[", "n_docs", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "neginf", "=", "tf", ".", "add", "(", "score_filter", ",", "np", ".", "NINF", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "serp_docs", "=", "[", "]", "\n", "serp_labels", "=", "[", "]", "\n", "doc_input", "=", "doc_emb", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "scores", "=", "mu", ".", "_create_subnetwork", "(", "doc_input", ",", "params", ",", "\n", "'/main/score/pos_%d'", "%", "i", ",", "\n", "reuse_variable_scope", "=", "False", ",", "\n", "inference", "=", "True", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'policy/scores/pos_%d'", "%", "i", ",", "tf", ".", "reduce_mean", "(", "scores", ")", ")", "\n", "action", ",", "max_ind", "=", "mu", ".", "select_eps_greedy_action", "(", "scores", ",", "\n", "epsilon", ",", "\n", "score_filter", ")", "\n", "\n", "select_doc", "=", "tf", ".", "gather", "(", "docs", ",", "action", ")", "\n", "serp_labels", ".", "append", "(", "\n", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "i", ",", "n_docs", ")", ",", "\n", "lambda", ":", "tf", ".", "gather", "(", "labels", ",", "action", ",", "axis", "=", "0", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "[", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", ")", "\n", ")", "\n", "serp_docs", ".", "append", "(", "select_doc", ")", "\n", "\n", "if", "i", ">", "0", ":", "\n", "      ", "result", "[", "'max_doc_%d'", "%", "i", "]", "=", "tf", ".", "gather", "(", "docs", ",", "max_ind", ")", "\n", "\n", "", "if", "i", "<", "serp_len", "-", "1", ":", "\n", "      ", "score_filter", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "ind_range", ",", "action", ")", ",", "\n", "neginf", ",", "\n", "score_filter", ")", "\n", "select_doc_input", "=", "tf", ".", "gather", "(", "doc_emb", ",", "action", ")", "\n", "tiled", "=", "tf", ".", "tile", "(", "select_doc_input", ",", "[", "n_docs", ",", "1", "]", ")", "\n", "doc_input", "=", "tf", ".", "concat", "(", "[", "tiled", ",", "doc_input", "]", ",", "axis", "=", "1", ")", "\n", "", "", "result", "[", "'serp'", "]", "=", "tf", ".", "stack", "(", "serp_docs", ",", "axis", "=", "1", ")", "\n", "# result['max_docs'] = tf.stack(max_docs, axis=1)", "\n", "result", "[", "'labels'", "]", "=", "tf", ".", "concat", "(", "serp_labels", ",", "axis", "=", "1", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"label/output\"", ",", "result", "[", "'labels'", "]", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.models.pbow_model": [[63, 122], ["model_utils._get_doc_tensors", "tensorflow.zeros", "tensorflow.add", "tensorflow.cast", "model_utils._shared_doc_embeddings", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.concat", "model_utils._shared_doc_embeddings", "range", "tensorflow.shape", "tensorflow.range", "model_utils._create_subnetwork", "tensorflow.summary.scalar", "model_utils.select_eps_greedy_action", "tensorflow.gather", "tensorflow.gather", "tensorflow.cond", "tensorflow.reduce_mean", "tensorflow.less", "tensorflow.gather", "tensorflow.where", "tensorflow.concat", "model_utils._shared_doc_embeddings", "tensorflow.gather", "tensorflow.constant", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._get_doc_tensors", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils.select_eps_greedy_action", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings"], ["", "def", "pbow_model", "(", "params", ",", "examples", ",", "labels", ",", "epsilon", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "doc_emb_size", "=", "params", "[", "'doc_emb'", "]", "[", "-", "1", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "docs", "=", "mu", ".", "_get_doc_tensors", "(", "examples", ",", "params", ",", "'main'", ")", "\n", "result", "=", "{", "}", "\n", "\n", "n_docs", "=", "tf", ".", "shape", "(", "docs", ")", "[", "0", "]", "\n", "result", "[", "'docs_per_query'", "]", "=", "n_docs", "\n", "\n", "score_filter", "=", "tf", ".", "zeros", "(", "[", "n_docs", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "neginf", "=", "tf", ".", "add", "(", "score_filter", ",", "np", ".", "NINF", ")", "\n", "ind_range", "=", "tf", ".", "cast", "(", "tf", ".", "range", "(", "n_docs", ")", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "pbow", "=", "tf", ".", "zeros", "(", "[", "1", ",", "hidden_state_size", "]", ")", "\n", "doc_i", "=", "tf", ".", "zeros", "(", "[", "n_docs", ",", "1", "]", ")", "\n", "doc_pos", "=", "tf", ".", "concat", "(", "[", "doc_i", ",", "docs", "]", ",", "axis", "=", "1", ")", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "doc_pos", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "True", ")", "\n", "doc_input", "=", "doc_emb", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "scores", "=", "mu", ".", "_create_subnetwork", "(", "doc_input", ",", "params", ",", "'/main/score'", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "inference", "=", "True", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'policy/scores/pos_%d'", "%", "i", ",", "tf", ".", "reduce_mean", "(", "scores", ")", ")", "\n", "action", ",", "max_ind", "=", "mu", ".", "select_eps_greedy_action", "(", "scores", ",", "\n", "epsilon", ",", "\n", "score_filter", ")", "\n", "\n", "select_doc", "=", "tf", ".", "gather", "(", "docs", ",", "action", ")", "\n", "select_doc_input", "=", "tf", ".", "gather", "(", "doc_emb", ",", "action", ")", "\n", "result", "[", "'label_%d'", "%", "i", "]", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "i", ",", "n_docs", ")", ",", "\n", "lambda", ":", "tf", ".", "gather", "(", "labels", ",", "action", ",", "axis", "=", "0", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "[", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", ")", "\n", "result", "[", "'doc_%d'", "%", "i", "]", "=", "select_doc", "\n", "\n", "if", "i", ">", "0", ":", "\n", "      ", "result", "[", "'max_doc_%d'", "%", "i", "]", "=", "tf", ".", "gather", "(", "docs", ",", "max_ind", ")", "\n", "\n", "", "if", "i", "<", "serp_len", "-", "1", ":", "\n", "      ", "score_filter", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "ind_range", ",", "action", ")", ",", "\n", "neginf", ",", "\n", "score_filter", ")", "\n", "\n", "pbow", "+=", "select_doc_input", "\n", "doc_i", "+=", "1", "\n", "doc_pos", "=", "tf", ".", "concat", "(", "[", "doc_i", ",", "docs", "]", ",", "axis", "=", "1", ")", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "doc_pos", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "True", ")", "\n", "doc_input", "=", "pbow", "+", "doc_emb", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.models.gru_model": [[124, 217], ["model_utils._shared_doc_embeddings", "tensorflow.zeros", "rnn_utils.get_gru_layer", "model_utils.EpsilonGreedy", "range", "tensorflow.stack", "tensorflow.stack", "tensorflow.Print", "tensorflow.concat", "tensorflow.summary.histogram", "tensorflow.convert_to_tensor", "tensorflow.pad", "tensorflow.reshape", "tensorflow.shape", "tensorflow.tile", "tensorflow.concat", "model_utils._create_subnetwork", "tensorflow.summary.scalar", "mu.EpsilonGreedy.choose", "serp_ind.append", "tensorflow.stack", "tensorflow.gather_nd", "serp_labels.append", "serp.append", "tensorflow.reduce_mean", "tensorflow.gather_nd", "tensorflow.where", "tensorflow.gather_nd", "ru.get_gru_layer.", "tensorflow.range", "tensorflow.less", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.PositionEpsilonGreedy.choose"], ["", "def", "gru_model", "(", "params", ",", "examples", ",", "labels", ",", "epsilon", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "doc_emb_size", "=", "params", "[", "'doc_emb'", "]", "[", "-", "1", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "# docs = mu._get_doc_tensors(examples, params, 'main')", "\n", "docs", "=", "examples", "[", "'doc_tensors'", "]", "\n", "batch_size", "=", "docs", ".", "shape", "[", "0", "]", ".", "value", "\n", "batch_max_docs", "=", "tf", ".", "shape", "(", "docs", ")", "[", "1", "]", "\n", "docs_per_query", "=", "examples", "[", "'n_docs'", "]", "\n", "\n", "# if params['context_input']:", "\n", "#   to_shuffle = tf.concat([tf.cast(labels, tf.float32), docs], axis=1)", "\n", "#   shuffled = tf.random_shuffle(to_shuffle)", "\n", "#   labels = tf.cast(tf.slice(shuffled, [0, 0], [-1, 1]), tf.int64)", "\n", "#   docs = tf.slice(shuffled, [0, 1], [-1, -1])", "\n", "assert", "not", "params", "[", "'context_input'", "]", ",", "'Context not supported for GRU.'", "\n", "\n", "result", "=", "{", "\n", "'docs_per_query'", ":", "docs_per_query", ",", "\n", "}", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "\n", "hidden_init", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "# if params['context_input']:", "\n", "#   context_gru_fn = ru.get_gru_layer(params, '/main/gru/context',", "\n", "#                                     label_network=False,", "\n", "#                                     inference=True,", "\n", "#                                     reuse_variable_scope=False)", "\n", "#   context_init = hidden_init", "\n", "#   context = tf.scan(context_gru_fn,", "\n", "#                     tf.expand_dims(doc_emb, axis=1), context_init)", "\n", "\n", "#   hidden_init = tf.gather(context, n_docs-1)", "\n", "\n", "gru_fn", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "policy", "=", "mu", ".", "EpsilonGreedy", "(", "epsilon", ",", "batch_size", ",", "batch_max_docs", ",", "docs_per_query", ")", "\n", "hidden_state", "=", "hidden_init", "\n", "#tf.zeros([n_docs, hidden_state_size])", "\n", "serp", "=", "[", "]", "\n", "serp_labels", "=", "[", "]", "\n", "serp_ind", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "hidden_states", "=", "tf", ".", "tile", "(", "hidden_state", "[", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "batch_max_docs", ",", "1", "]", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "doc_emb", "]", ",", "axis", "=", "2", ")", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'policy/scores/pos_%d'", "%", "i", ",", "tf", ".", "reduce_mean", "(", "scores", ")", ")", "\n", "action", "=", "policy", ".", "choose", "(", "scores", ")", "\n", "serp_ind", ".", "append", "(", "action", ")", "\n", "\n", "nd_ind", "=", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "action", "]", ",", "axis", "=", "1", ")", "\n", "select_doc", "=", "tf", ".", "gather_nd", "(", "docs", ",", "nd_ind", ")", "\n", "select_labels", "=", "tf", ".", "gather_nd", "(", "labels", ",", "nd_ind", ")", "[", ":", ",", "None", "]", "\n", "\n", "serp_labels", ".", "append", "(", "tf", ".", "where", "(", "\n", "tf", ".", "less", "(", "i", ",", "docs_per_query", ")", ",", "\n", "select_labels", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", ")", ")", "\n", "serp", ".", "append", "(", "select_doc", ")", "\n", "\n", "if", "i", "<", "serp_len", "-", "1", ":", "\n", "      ", "select_emb", "=", "tf", ".", "gather_nd", "(", "doc_emb", ",", "nd_ind", ")", "\n", "hidden_state", "=", "gru_fn", "(", "hidden_state", ",", "select_emb", ")", "\n", "\n", "\n", "", "", "result", "[", "'serp'", "]", "=", "tf", ".", "stack", "(", "serp", ",", "axis", "=", "1", ")", "\n", "result", "[", "'serp_ind'", "]", "=", "tf", ".", "stack", "(", "serp_ind", ",", "axis", "=", "1", ")", "\n", "result", "[", "'serp_ind'", "]", "=", "tf", ".", "Print", "(", "result", "[", "'serp_ind'", "]", ",", "serp_ind", ",", "'serp_ind: '", ")", "\n", "result", "[", "'labels'", "]", "=", "tf", ".", "concat", "(", "serp_labels", ",", "axis", "=", "1", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"label/output\"", ",", "result", "[", "'labels'", "]", ")", "\n", "\n", "# if params['context_input']:", "\n", "max_docs", "=", "params", "[", "'max_docs'", "]", "\n", "padding", "=", "tf", ".", "convert_to_tensor", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "max_docs", "-", "batch_max_docs", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "padded_docs", "=", "tf", ".", "pad", "(", "docs", ",", "padding", ",", "\"CONSTANT\"", ")", "\n", "padded_docs", "=", "tf", ".", "reshape", "(", "padded_docs", ",", "[", "batch_size", ",", "max_docs", ",", "docs", ".", "shape", "[", "2", "]", ".", "value", "]", ")", "\n", "result", "[", "'docs'", "]", "=", "padded_docs", "\n", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letorinput.get_features": [[4, 27], ["tensorflow.FixedLenSequenceFeature", "tensorflow.FixedLenSequenceFeature", "tensorflow.FixedLenFeature", "open", "tensorflow.FixedLenSequenceFeature", "fid.strip"], "function", ["None"], ["def", "get_features", "(", "params", ",", "input_dir", ")", ":", "\n", "  ", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "features", "=", "{", "'qid'", ":", "tf", ".", "FixedLenSequenceFeature", "(", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ",", "\n", "allow_missing", "=", "True", ",", "\n", "default_value", "=", "-", "1", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenSequenceFeature", "(", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ",", "\n", "allow_missing", "=", "True", ")", ",", "\n", "'n_docs'", ":", "tf", ".", "FixedLenFeature", "(", "shape", "=", "[", "1", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "}", "\n", "\n", "with", "open", "(", "input_dir", "+", "'/features.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "for", "fid", "in", "f", ":", "\n", "      ", "features", "[", "fid", ".", "strip", "(", ")", "]", "=", "tf", ".", "FixedLenSequenceFeature", "(", "\n", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "default_value", "=", "0.", ",", "allow_missing", "=", "True", ")", "\n", "\n", "# feature_columns = []", "\n", "# for featid in features:", "\n", "#   if featid not in ['qid', 'label', 'n_docs']:", "\n", "#     feature_columns.append(", "\n", "#       tf.contrib.layers.real_valued_column(", "\n", "#         featid, dimension=1, default_value=0, dtype=tf.float32", "\n", "#         )", "\n", "#       )", "\n", "", "", "return", "features", "#, feature_columns", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letorinput.get_letor_examples": [[28, 75], ["tensorflow.contrib.learn.read_batch_examples", "tensorflow.parse_example", "sorted", "tensorflow.stack", "tensorflow.reduce_min", "tensorflow.reduce_max", "tensorflow.where", "tf.parse_example.items", "tensorflow.equal", "tensorflow.ones_like", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "int", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "features.keys", "str"], "function", ["None"], ["", "def", "get_letor_examples", "(", "params", ",", "input_dir", ",", "features", ",", "num_threads", "=", "3", ")", ":", "\n", "  ", "batched_examples", "=", "tf", ".", "contrib", ".", "learn", ".", "read_batch_examples", "(", "\n", "file_pattern", "=", "input_dir", "+", "params", "[", "'partition'", "]", "+", "'.*-*.tfrecord'", ",", "\n", "batch_size", "=", "params", "[", "'read_batch'", "]", ",", "\n", "reader", "=", "tf", ".", "TFRecordReader", ",", "\n", "randomize_input", "=", "not", "params", "[", "'evaluation'", "]", ",", "\n", "num_epochs", "=", "None", ",", "\n", "queue_capacity", "=", "10000", ",", "\n", "num_threads", "=", "num_threads", ",", "\n", "read_batch_size", "=", "1", ",", "\n", "parse_fn", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "seed", "=", "None", "\n", ")", "\n", "\n", "examples", "=", "tf", ".", "parse_example", "(", "batched_examples", ",", "features", "=", "features", ")", "\n", "\n", "feat_ids", "=", "sorted", "(", "int", "(", "x", ")", "for", "x", "in", "features", ".", "keys", "(", ")", "\n", "if", "x", "not", "in", "[", "'qid'", ",", "'label'", ",", "'n_docs'", "]", ")", "\n", "\n", "doc_tensors", "=", "tf", ".", "stack", "(", "[", "examples", "[", "str", "(", "x", ")", "]", "for", "x", "in", "feat_ids", "]", ",", "axis", "=", "2", ")", "\n", "\n", "min_values", "=", "tf", ".", "reduce_min", "(", "doc_tensors", ",", "axis", "=", "1", ")", "\n", "doc_tensors", "=", "doc_tensors", "-", "min_values", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "max_values", "=", "tf", ".", "reduce_max", "(", "doc_tensors", ",", "axis", "=", "1", ")", "\n", "safe_max", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "max_values", ",", "0.", ")", ",", "\n", "tf", ".", "ones_like", "(", "max_values", ")", ",", "\n", "max_values", ")", "\n", "doc_tensors", "=", "doc_tensors", "/", "safe_max", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "# examples = bsu.spread_out_documents(None, examples)", "\n", "\n", "result", "=", "{", "\n", "'qid'", ":", "tf", ".", "cast", "(", "examples", "[", "'qid'", "]", ",", "tf", ".", "int32", ")", ",", "\n", "'label'", ":", "tf", ".", "cast", "(", "examples", "[", "'label'", "]", ",", "tf", ".", "int32", ")", ",", "\n", "'n_docs'", ":", "tf", ".", "cast", "(", "examples", "[", "'n_docs'", "]", ",", "tf", ".", "int32", ")", ",", "\n", "'doc_tensors'", ":", "doc_tensors", "\n", "}", "\n", "\n", "for", "key", ",", "values", "in", "examples", ".", "items", "(", ")", ":", "\n", "    ", "if", "key", "==", "'label'", ":", "\n", "      ", "tf", ".", "summary", ".", "histogram", "(", "\"label/input\"", ",", "values", ")", "\n", "", "else", ":", "\n", "      ", "tf", ".", "summary", ".", "histogram", "(", "\"input/%s\"", "%", "key", ",", "values", ")", "\n", "\n", "", "", "return", "result", ",", "result", "[", "'label'", "]", "", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils.EpsilonGreedy.__init__": [[206, 214], ["tensorflow.sequence_mask", "tensorflow.where", "tensorflow.zeros", "tensorflow.fill"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "epsilon", ",", "batch_size", ",", "max_n_docs", ",", "docs_per_query", ")", ":", "\n", "    ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_n_docs", "=", "max_n_docs", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "n_doc_filter", "=", "tf", ".", "sequence_mask", "(", "docs_per_query", "[", ":", ",", "0", "]", ",", "max_n_docs", ")", "\n", "self", ".", "score_filter", "=", "tf", ".", "where", "(", "n_doc_filter", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "max_n_docs", "]", ")", ",", "\n", "tf", ".", "fill", "(", "[", "batch_size", ",", "max_n_docs", "]", ",", "np", ".", "NINF", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils.EpsilonGreedy.max_ind": [[215, 217], ["tensorflow.argmax"], "methods", ["None"], ["", "def", "max_ind", "(", "self", ",", "scores", ")", ":", "\n", "    ", "return", "tf", ".", "argmax", "(", "scores", "[", ":", ",", ":", ",", "0", "]", "+", "self", ".", "score_filter", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils.EpsilonGreedy.choose": [[218, 230], ["model_utils.EpsilonGreedy.max_ind", "model_utils.EpsilonGreedy.max_ind", "tensorflow.greater", "tensorflow.where", "tensorflow.where.set_shape", "tensorflow.one_hot", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils.EpsilonGreedy.max_ind", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils.EpsilonGreedy.max_ind"], ["", "def", "choose", "(", "self", ",", "scores", ")", ":", "\n", "    ", "max_ind", "=", "self", ".", "max_ind", "(", "scores", ")", "\n", "noise_ind", "=", "self", ".", "max_ind", "(", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "scores", ")", ")", ")", "\n", "\n", "random_cond", "=", "tf", ".", "greater", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "batch_size", "]", ")", ",", "\n", "self", ".", "epsilon", ")", "\n", "action", "=", "tf", ".", "where", "(", "random_cond", ",", "max_ind", ",", "noise_ind", ")", "\n", "action", ".", "set_shape", "(", "max_ind", ".", "shape", ")", "\n", "\n", "self", ".", "score_filter", "+=", "tf", ".", "one_hot", "(", "action", ",", "self", ".", "max_n_docs", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "return", "action", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._get_feature_dict": [[10, 14], ["isinstance"], "function", ["None"], ["def", "_get_feature_dict", "(", "features", ")", ":", "\n", "  ", "if", "isinstance", "(", "features", ",", "dict", ")", ":", "\n", "    ", "return", "features", "\n", "", "return", "{", "\"\"", ":", "features", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._add_layer_summary": [[15, 18], ["tensorflow.python.summary.summary.scalar", "tensorflow.python.summary.summary.histogram", "tensorflow.nn.zero_fraction"], "function", ["None"], ["", "def", "_add_layer_summary", "(", "value", ",", "tag", ")", ":", "\n", "  ", "summary", ".", "scalar", "(", "\"%s/fraction_of_zero_values\"", "%", "tag", ",", "tf", ".", "nn", ".", "zero_fraction", "(", "value", ")", ")", "\n", "summary", ".", "histogram", "(", "\"%s/activation\"", "%", "tag", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._get_doc_tensors": [[19, 22], ["None"], "function", ["None"], ["", "def", "_get_doc_tensors", "(", "features", ",", "params", ",", "subnetwork_name", "=", "''", ",", "\n", "reuse_variable_scope", "=", "False", ")", ":", "\n", "  ", "assert", "False", ",", "'Only batch reading supported.'", "\n", "# feature_columns = params.get(\"feature_columns\")", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings": [[69, 114], ["params.get", "params.get", "params.get", "tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner", "params.get", "params.get", "tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner", "tensorflow.python.ops.variable_scope.variable_scope", "enumerate", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.contrib.layers.fully_connected"], "function", ["None"], ["", "def", "_shared_doc_embeddings", "(", "doc_tensors", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "''", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "False", ",", "\n", "inference", "=", "False", ")", ":", "\n", "  ", "hidden_units", "=", "params", ".", "get", "(", "\"doc_emb\"", ")", "\n", "activation_fn", "=", "params", ".", "get", "(", "\"activation_fn\"", ")", "or", "tf", ".", "nn", ".", "relu", "\n", "config", "=", "params", ".", "get", "(", "\"config\"", ")", "\n", "model_name", "=", "params", ".", "get", "(", "\"model_name\"", ")", "\n", "l2_scale", "=", "params", "[", "'l2_scale'", "]", "\n", "hidden_dropout", "=", "params", "[", "'hidden_dropout'", "]", "\n", "num_ps_replicas", "=", "config", ".", "num_ps_replicas", "if", "config", "else", "0", "\n", "input_layer_partitioner", "=", "params", ".", "get", "(", "\"input_layer_partitioner\"", ")", "or", "(", "\n", "partitioned_variables", ".", "min_max_variable_partitioner", "(", "\n", "max_partitions", "=", "num_ps_replicas", ",", "\n", "min_slice_size", "=", "64", "<<", "20", ")", ")", "\n", "\n", "parent_scope", "=", "model_name", "+", "subnetwork_name", "\n", "\n", "partitioner", "=", "(", "\n", "partitioned_variables", ".", "min_max_variable_partitioner", "(", "\n", "max_partitions", "=", "num_ps_replicas", ")", ")", "\n", "with", "variable_scope", ".", "variable_scope", "(", "\n", "parent_scope", ",", "\n", "values", "=", "(", "doc_tensors", ",", ")", ",", "\n", "regularizer", "=", "l2_regularizer", "(", "l2_scale", ")", ",", "\n", "partitioner", "=", "partitioner", ",", "\n", "reuse", "=", "reuse_variable_scope", ")", ":", "\n", "\n", "    ", "net", "=", "doc_tensors", "\n", "\n", "for", "layer_id", ",", "num_hidden_units", "in", "enumerate", "(", "hidden_units", ")", ":", "\n", "      ", "with", "variable_scope", ".", "variable_scope", "(", "\n", "\"shared_document_layer_%d\"", "%", "layer_id", ",", "\n", "values", "=", "(", "net", ",", ")", ")", "as", "hidden_layer_scope", ":", "\n", "        ", "net", "=", "layers", ".", "fully_connected", "(", "\n", "net", ",", "\n", "num_hidden_units", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "variables_collections", "=", "[", "parent_scope", "]", ",", "\n", "scope", "=", "hidden_layer_scope", ",", "\n", "trainable", "=", "not", "label_network", ")", "\n", "# _add_layer_summary(net, hidden_layer_scope.name)", "\n", "", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork": [[115, 190], ["params.get", "params.get", "params.get", "tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner", "params.get", "params.get", "tensorflow.python.ops.partitioned_variables.min_max_variable_partitioner", "ValueError", "tensorflow.python.ops.variable_scope.variable_scope", "enumerate", "tensorflow.nn.dropout", "tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.zeros_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.nn.dropout"], "function", ["None"], ["", "def", "_create_subnetwork", "(", "doc_tensors", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "''", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "n_output", "=", "1", ")", ":", "\n", "  ", "hidden_units", "=", "params", ".", "get", "(", "\"hidden_units\"", ")", "\n", "activation_fn", "=", "params", ".", "get", "(", "\"activation_fn\"", ")", "or", "tf", ".", "nn", ".", "relu", "\n", "config", "=", "params", ".", "get", "(", "\"config\"", ")", "\n", "model_name", "=", "params", ".", "get", "(", "\"model_name\"", ")", "\n", "hidden_dropout", "=", "params", "[", "'hidden_dropout'", "]", "\n", "l2_scale", "=", "params", "[", "'l2_scale'", "]", "\n", "if", "params", "[", "'model'", "]", "==", "'exppos'", ":", "\n", "    ", "n_output", "=", "params", "[", "'serp_len'", "]", "\n", "# else:", "\n", "#   n_output = n_output", "\n", "", "num_ps_replicas", "=", "config", ".", "num_ps_replicas", "if", "config", "else", "0", "\n", "input_layer_partitioner", "=", "params", ".", "get", "(", "\"input_layer_partitioner\"", ")", "or", "(", "\n", "partitioned_variables", ".", "min_max_variable_partitioner", "(", "\n", "max_partitions", "=", "num_ps_replicas", ",", "\n", "min_slice_size", "=", "64", "<<", "20", ")", ")", "\n", "\n", "parent_scope", "=", "model_name", "+", "subnetwork_name", "\n", "\n", "if", "hidden_units", "is", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"hidden_units must be defined.\"", ")", "\n", "\n", "", "partitioner", "=", "(", "\n", "partitioned_variables", ".", "min_max_variable_partitioner", "(", "\n", "max_partitions", "=", "num_ps_replicas", ")", ")", "\n", "with", "variable_scope", ".", "variable_scope", "(", "\n", "parent_scope", ",", "\n", "values", "=", "(", "doc_tensors", ",", ")", ",", "\n", "partitioner", "=", "partitioner", ",", "\n", "regularizer", "=", "l2_regularizer", "(", "l2_scale", ")", ",", "\n", "reuse", "=", "reuse_variable_scope", ")", ":", "\n", "\n", "    ", "net", "=", "doc_tensors", "\n", "if", "not", "(", "inference", "or", "label_network", ")", "and", "hidden_dropout", "<", "1", ":", "\n", "      ", "net", "=", "tf", ".", "nn", ".", "dropout", "(", "net", ",", "hidden_dropout", ")", "\n", "\n", "", "for", "layer_id", ",", "num_hidden_units", "in", "enumerate", "(", "hidden_units", ")", ":", "\n", "      ", "with", "variable_scope", ".", "variable_scope", "(", "\n", "\"hiddenlayer_%d\"", "%", "layer_id", ",", "\n", "values", "=", "(", "net", ",", ")", ")", "as", "hidden_layer_scope", ":", "\n", "        ", "net", "=", "layers", ".", "fully_connected", "(", "\n", "net", ",", "\n", "num_hidden_units", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "variables_collections", "=", "[", "parent_scope", "]", ",", "\n", "scope", "=", "hidden_layer_scope", ",", "\n", "trainable", "=", "not", "label_network", ")", "\n", "if", "not", "(", "inference", "or", "label_network", ")", "and", "hidden_dropout", "<", "1", ":", "\n", "          ", "net", "=", "tf", ".", "nn", ".", "dropout", "(", "net", ",", "hidden_dropout", ")", "\n", "\n", "", "", "", "with", "variable_scope", ".", "variable_scope", "(", "\n", "\"logits\"", ",", "\n", "values", "=", "(", "net", ",", ")", ")", "as", "logits_scope", ":", "\n", "\n", "      ", "if", "label_network", ":", "\n", "        ", "w_init", "=", "tf", ".", "zeros_initializer", "(", ")", "\n", "", "else", ":", "\n", "        ", "w_init", "=", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "", "logits", "=", "layers", ".", "fully_connected", "(", "\n", "net", ",", "\n", "n_output", ",", "\n", "activation_fn", "=", "None", ",", "\n", "variables_collections", "=", "[", "parent_scope", "]", ",", "\n", "weights_initializer", "=", "w_init", ",", "\n", "trainable", "=", "not", "label_network", ",", "\n", "scope", "=", "logits_scope", ")", "\n", "", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils.select_eps_greedy_action": [[191, 204], ["tensorflow.argmax", "tensorflow.argmax", "tensorflow.greater", "tensorflow.cond", "tf.cond.set_shape", "tf.argmax.set_shape", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["None"], ["", "def", "select_eps_greedy_action", "(", "scores", ",", "epsilon", ",", "score_filter", ")", ":", "\n", "  ", "max_ind", "=", "tf", ".", "argmax", "(", "scores", "+", "score_filter", ",", "axis", "=", "0", ")", "\n", "\n", "noise", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "scores", ")", ")", "+", "score_filter", "\n", "max_ind_noise", "=", "tf", ".", "argmax", "(", "noise", ",", "axis", "=", "0", ")", "\n", "\n", "random_cond", "=", "tf", ".", "greater", "(", "tf", ".", "random_uniform", "(", "[", "]", ")", ",", "epsilon", ")", "\n", "action", "=", "tf", ".", "cond", "(", "random_cond", ",", "\n", "lambda", ":", "max_ind", ",", "\n", "lambda", ":", "max_ind_noise", ")", "\n", "action", ".", "set_shape", "(", "[", "1", "]", ")", "\n", "max_ind", ".", "set_shape", "(", "[", "1", "]", ")", "\n", "return", "action", ",", "max_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.update_reset_node": [[8, 33], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.tf.sigmoid", "tensorflow.tf.sigmoid", "tensorflow.tf.tanh"], "function", ["None"], ["def", "update_reset_node", "(", "input_vector", ",", "hidden_state", ",", "scope", ",", "keep_prob", ",", "\n", "activation_fn", ",", "hidden_state_size", ",", "label_network", ")", ":", "\n", "# update_gate", "\n", "  ", "if", "keep_prob", "<", "1", ":", "\n", "    ", "hidden_state", "=", "tf", ".", "nn", ".", "dropout", "(", "hidden_state", ",", "keep_prob", ")", "\n", "input_vector", "=", "tf", ".", "nn", ".", "dropout", "(", "input_vector", ",", "keep_prob", ")", "\n", "", "with", "variable_scope", ".", "variable_scope", "(", "\n", "\"input_update\"", ",", "\n", "values", "=", "(", "input_vector", ",", ")", ")", "as", "input_scope", ":", "\n", "    ", "input_update", "=", "layers", ".", "fully_connected", "(", "\n", "input_vector", ",", "hidden_state_size", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "input_scope", ",", "\n", "# Only single bias necessary because of sum.", "\n", "biases_initializer", "=", "None", ",", "\n", "trainable", "=", "not", "label_network", ")", "\n", "", "with", "variable_scope", ".", "variable_scope", "(", "\n", "\"hidden_update\"", ",", "\n", "values", "=", "(", "input_vector", ",", ")", ")", "as", "update_scope", ":", "\n", "    ", "hidden_update", "=", "layers", ".", "fully_connected", "(", "\n", "hidden_state", ",", "hidden_state_size", ",", "\n", "activation_fn", "=", "None", ",", "\n", "scope", "=", "update_scope", ",", "\n", "trainable", "=", "not", "label_network", ")", "\n", "", "return", "activation_fn", "(", "input_update", "+", "hidden_update", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer": [[35, 77], ["tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.python.ops.variable_scope.variable_scope", "rnn_utils.update_reset_node", "tensorflow.python.ops.variable_scope.variable_scope", "rnn_utils.update_reset_node", "tensorflow.python.ops.variable_scope.variable_scope", "rnn_utils.update_reset_node", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.ones_like"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.update_reset_node", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.update_reset_node", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.update_reset_node"], ["", "def", "get_gru_layer", "(", "params", ",", "sub_name", ",", "label_network", ",", "inference", ",", "reuse_variable_scope", ")", ":", "\n", "  ", "parent_scope", "=", "params", "[", "'model_name'", "]", "+", "sub_name", "\n", "# avoiding non_local parameter scope in python 2.7", "\n", "class", "c", ":", "\n", "    ", "reuse_var_scope", "=", "reuse_variable_scope", "\n", "\n", "", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "hidden_dropout", "=", "params", "[", "'hidden_dropout'", "]", "\n", "if", "inference", "or", "label_network", "or", "hidden_dropout", "<", "1", ":", "\n", "    ", "keep_prob", "=", "1.", "\n", "", "else", ":", "\n", "    ", "keep_prob", "=", "hidden_dropout", "\n", "\n", "", "def", "gru_layer", "(", "hidden_state", ",", "input_vector", ")", ":", "\n", "    ", "l2_scale", "=", "params", "[", "'l2_scale'", "]", "\n", "with", "variable_scope", ".", "variable_scope", "(", "parent_scope", ",", "\n", "values", "=", "(", "hidden_state", ",", "input_vector", ")", ",", "\n", "regularizer", "=", "l2_regularizer", "(", "l2_scale", ")", ",", "\n", "reuse", "=", "c", ".", "reuse_var_scope", ")", "as", "gru_scope", ":", "\n", "\n", "# In case function is called more than once.", "\n", "      ", "c", ".", "reuse_var_scope", "=", "True", "\n", "\n", "with", "variable_scope", ".", "variable_scope", "(", "\"update_vector\"", ",", "\n", "values", "=", "(", "input_vector", ",", ")", ")", "as", "update_scope", ":", "\n", "        ", "update_vector", "=", "update_reset_node", "(", "input_vector", ",", "hidden_state", ",", "\n", "gru_scope", ",", "keep_prob", ",", "tf", ".", "sigmoid", ",", "\n", "hidden_state_size", ",", "label_network", ")", "\n", "", "with", "variable_scope", ".", "variable_scope", "(", "\"reset_vector\"", ",", "\n", "values", "=", "(", "input_vector", ",", ")", ")", "as", "update_scope", ":", "\n", "        ", "reset_vector", "=", "update_reset_node", "(", "input_vector", ",", "hidden_state", ",", "\n", "gru_scope", ",", "keep_prob", ",", "tf", ".", "sigmoid", ",", "\n", "hidden_state_size", ",", "label_network", ")", "\n", "", "with", "variable_scope", ".", "variable_scope", "(", "\"candidate\"", ",", "\n", "values", "=", "(", "input_vector", ",", ")", ")", "as", "update_scope", ":", "\n", "        ", "candidate", "=", "update_reset_node", "(", "input_vector", ",", "hidden_state", "*", "reset_vector", ",", "\n", "gru_scope", ",", "keep_prob", ",", "tf", ".", "tanh", ",", "\n", "hidden_state_size", ",", "label_network", ")", "\n", "", "return", "(", "update_vector", "*", "hidden_state", "+", "\n", "(", "tf", ".", "ones_like", "(", "update_vector", ")", "-", "update_vector", ")", "*", "candidate", ")", "\n", "\n", "", "", "return", "gru_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_score_layer": [[78, 102], ["rnn_utils.get_gru_layer", "get_gru_layer.", "tensorflow.concat", "model_utils._create_subnetwork", "model_utils._create_subnetwork"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "get_gru_score_layer", "(", "params", ",", "sub_name", ",", "label_network", ",", "inference", ",", "reuse_variable_scope", ")", ":", "\n", "  ", "class", "c", ":", "\n", "    ", "reuse_var_scope", "=", "reuse_variable_scope", "\n", "", "gru", "=", "get_gru_layer", "(", "params", ",", "sub_name", ",", "label_network", ",", "\n", "inference", ",", "reuse_variable_scope", ")", "\n", "def", "gru_score_layer", "(", "hidden_state_score", ",", "input_vector", ")", ":", "\n", "    ", "hidden_state", ",", "_", "=", "hidden_state_score", "\n", "if", "not", "params", "[", "'compact_gru'", "]", ":", "\n", "      ", "net", "=", "tf", ".", "concat", "(", "[", "hidden_state", ",", "input_vector", "]", ",", "axis", "=", "-", "1", ")", "\n", "score", "=", "mu", ".", "_create_subnetwork", "(", "net", ",", "params", ",", "\n", "subnetwork_name", "=", "sub_name", "+", "'/scoring'", ",", "\n", "label_network", "=", "label_network", ",", "\n", "reuse_variable_scope", "=", "c", ".", "reuse_var_scope", ",", "\n", "inference", "=", "inference", ")", "\n", "", "next_hidden_state", "=", "gru", "(", "hidden_state", ",", "input_vector", ")", "\n", "if", "params", "[", "'compact_gru'", "]", ":", "\n", "      ", "score", "=", "mu", ".", "_create_subnetwork", "(", "next_hidden_state", ",", "params", ",", "\n", "subnetwork_name", "=", "sub_name", "+", "'/scoring'", ",", "\n", "label_network", "=", "label_network", ",", "\n", "reuse_variable_scope", "=", "c", ".", "reuse_var_scope", ",", "\n", "inference", "=", "inference", ")", "\n", "", "c", ".", "reuse_var_scope", "=", "True", "\n", "return", "next_hidden_state", ",", "score", "\n", "", "return", "gru_score_layer", "\n", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_feature": [[19, 21], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["def", "_int64_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_list": [[22, 24], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_list", "(", "value_list", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._float_feature": [[25, 27], ["tensorflow.train.Feature", "tensorflow.train.FloatList"], "function", ["None"], ["", "def", "_float_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._float_list": [[28, 30], ["tensorflow.train.Feature", "tensorflow.train.FloatList"], "function", ["None"], ["", "def", "_float_list", "(", "value_list", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._bytes_feature": [[32, 34], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "_bytes_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion.convert_to": [[36, 64], ["os.path.join", "print", "tensorflow.python_io.TFRecordWriter", "range", "tf.python_io.TFRecordWriter.close", "ValueError", "images[].tostring", "tensorflow.train.Example", "print", "tf.python_io.TFRecordWriter.write", "tf.train.Example.SerializeToString", "tensorflow.train.Features", "letor_conversion._int64_feature", "letor_conversion._int64_feature", "letor_conversion._int64_feature", "letor_conversion._int64_feature", "int"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_feature", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_feature", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_feature", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_feature"], ["", "def", "convert_to", "(", "data_set", ",", "name", ")", ":", "\n", "  ", "\"\"\"Converts a dataset to tfrecords.\"\"\"", "\n", "images", "=", "data_set", ".", "images", "\n", "labels", "=", "data_set", ".", "labels", "\n", "num_examples", "=", "data_set", ".", "num_examples", "\n", "\n", "if", "images", ".", "shape", "[", "0", "]", "!=", "num_examples", ":", "\n", "    ", "raise", "ValueError", "(", "'Images size %d does not match label size %d.'", "%", "\n", "(", "images", ".", "shape", "[", "0", "]", ",", "num_examples", ")", ")", "\n", "", "rows", "=", "images", ".", "shape", "[", "1", "]", "\n", "cols", "=", "images", ".", "shape", "[", "2", "]", "\n", "depth", "=", "images", ".", "shape", "[", "3", "]", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "directory", ",", "name", "+", "'.tfrecords'", ")", "\n", "print", "(", "'Writing'", ",", "filename", ")", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "filename", ")", "\n", "for", "index", "in", "range", "(", "num_examples", ")", ":", "\n", "    ", "image_raw", "=", "images", "[", "index", "]", ".", "tostring", "(", ")", "\n", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'height'", ":", "_int64_feature", "(", "rows", ")", ",", "\n", "'width'", ":", "_int64_feature", "(", "cols", ")", ",", "\n", "'depth'", ":", "_int64_feature", "(", "depth", ")", ",", "\n", "'label'", ":", "_int64_feature", "(", "int", "(", "labels", "[", "index", "]", ")", ")", ",", "\n", "# 'image_raw': _bytes_feature(image_raw)", "\n", "}", ")", ")", "\n", "print", "(", "'Example:'", ",", "example", ")", "\n", "writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion.main": [[66, 134], ["letor_conversion._read_file", "letor_conversion._read_file", "letor_conversion._read_file", "range", "queries.items", "print", "print", "open", "writers.append", "numpy.array", "len", "max", "letor_conversion._int64_list", "letor_conversion._int64_list", "letor_conversion._int64_list", "tensorflow.train.Example", "random.choice().write", "len", "writer.close", "f.write", "tensorflow.python_io.TFRecordWriter", "min", "max", "letor_conversion._float_list", "tf.train.Example.SerializeToString", "query_feat[].append", "len", "len", "tensorflow.train.Features", "random.choice", "doc.get", "int"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._read_file", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._read_file", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._read_file", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_list", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_list", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._int64_list", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._float_list"], ["", "def", "main", "(", "unused_argv", ")", ":", "\n", "# # Get the data.", "\n", "# data_sets = mnist.read_data_sets(FLAGS.directory,", "\n", "#                                  dtype=tf.uint8,", "\n", "#                                  reshape=False,", "\n", "#                                  validation_size=FLAGS.validation_size)", "\n", "\n", "# # Convert to Examples and write the result to TFRecords.", "\n", "# convert_to(data_sets.train, 'train')", "\n", "# convert_to(data_sets.validation, 'validation')", "\n", "# convert_to(data_sets.test, 'test')", "\n", "  ", "train_queries", ",", "train_doclists", ",", "train_labels", ",", "train_feat", "=", "_read_file", "(", "FLAGS", ".", "input_folder", "+", "'/train.txt'", ")", "\n", "vali_queries", ",", "vali_doclists", ",", "vali_labels", ",", "vali_feat", "=", "_read_file", "(", "FLAGS", ".", "input_folder", "+", "'/vali.txt'", ")", "\n", "test_queries", ",", "test_doclists", ",", "test_labels", ",", "test_feat", "=", "_read_file", "(", "FLAGS", ".", "input_folder", "+", "'/test.txt'", ")", "\n", "\n", "features_to_keep", "=", "train_feat", "&", "vali_feat", "\n", "\n", "for", "name", ",", "queries", ",", "doclists", ",", "labels", ",", "shards", "in", "[", "\n", "(", "'train'", ",", "train_queries", ",", "train_doclists", ",", "train_labels", ",", "FLAGS", ".", "train_shards", ")", ",", "\n", "(", "'vali'", ",", "vali_queries", ",", "vali_doclists", ",", "vali_labels", ",", "FLAGS", ".", "vali_shards", ")", ",", "\n", "(", "'test'", ",", "test_queries", ",", "test_doclists", ",", "test_labels", ",", "FLAGS", ".", "test_shards", ")", ",", "\n", "]", ":", "\n", "    ", "writers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "shards", ")", ":", "\n", "      ", "writers", ".", "append", "(", "\n", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "FLAGS", ".", "output_folder", "+", "'/%s.%d-of-%d.tfrecord'", "%", "(", "name", ",", "i", ",", "shards", ")", ")", "\n", ")", "\n", "", "max_n_doc", "=", "0", "\n", "for", "qid", ",", "index", "in", "queries", ".", "items", "(", ")", ":", "\n", "      ", "query_feat", "=", "{", "}", "\n", "for", "fid", "in", "features_to_keep", ":", "\n", "        ", "query_feat", "[", "fid", "]", "=", "[", "]", "\n", "\n", "# cutoff = int(np.random.uniform(4, 11))", "\n", "# labels[index] = labels[index][:cutoff]", "\n", "# doclists[index] = doclists[index][:cutoff]", "\n", "\n", "", "np_labels", "=", "np", ".", "array", "(", "labels", "[", "index", "]", ")", "\n", "n_docs", "=", "len", "(", "labels", "[", "index", "]", ")", "\n", "max_n_doc", "=", "max", "(", "max_n_doc", ",", "n_docs", ")", "\n", "# print(qid, 'n doc:', len(doclists[index]), 'labels', np_labels[np_labels > 0])", "\n", "for", "doc", "in", "doclists", "[", "index", "]", ":", "\n", "        ", "for", "fid", "in", "features_to_keep", ":", "\n", "          ", "query_feat", "[", "fid", "]", ".", "append", "(", "doc", ".", "get", "(", "fid", ",", "0.", ")", ")", "\n", "\n", "", "", "features", "=", "{", "}", "\n", "features", "[", "'qid'", "]", "=", "_int64_list", "(", "[", "int", "(", "qid", ")", "]", "*", "len", "(", "labels", "[", "index", "]", ")", ")", "\n", "features", "[", "'label'", "]", "=", "_int64_list", "(", "labels", "[", "index", "]", ")", "\n", "features", "[", "'n_docs'", "]", "=", "_int64_list", "(", "[", "n_docs", "]", ")", "\n", "# print(\"%s n_docs: %d\" % (name, n_docs))", "\n", "for", "fid", "in", "features_to_keep", ":", "\n", "        ", "assert", "len", "(", "query_feat", "[", "fid", "]", ")", "==", "n_docs", "\n", "min_v", "=", "min", "(", "query_feat", "[", "fid", "]", ")", "\n", "normalized", "=", "[", "x", "-", "min_v", "for", "x", "in", "query_feat", "[", "fid", "]", "]", "\n", "max_v", "=", "max", "(", "normalized", ")", "\n", "if", "max_v", "==", "0", ":", "\n", "          ", "max_v", "=", "1.", "\n", "", "normalized", "=", "[", "x", "/", "max_v", "for", "x", "in", "normalized", "]", "\n", "features", "[", "fid", "]", "=", "_float_list", "(", "normalized", ")", "\n", "", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "features", ")", ")", "\n", "random", ".", "choice", "(", "writers", ")", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "print", "(", "'%s total queries:'", "%", "name", ",", "len", "(", "queries", ")", ")", "\n", "print", "(", "'%s max n docs:'", "%", "name", ",", "max_n_doc", ")", "\n", "[", "writer", ".", "close", "(", ")", "for", "writer", "in", "writers", "]", "\n", "\n", "", "with", "open", "(", "FLAGS", ".", "output_folder", "+", "'/features.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "    ", "for", "fid", "in", "features_to_keep", ":", "\n", "      ", "f", ".", "write", "(", "fid", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.letor_conversion._read_file": [[135, 186], ["set", "open", "line[].split", "int", "doclists[].append", "labels[].append", "set", "info[].split", "len", "doclists.append", "labels.append", "pair.split", "set.add", "float", "set.add", "min", "max", "line.find"], "function", ["None"], ["", "", "", "def", "_read_file", "(", "path", ",", "filter_non_uniq", "=", "True", ")", ":", "\n", "  ", "'''\n  Read letor file and returns dict for qid to indices, labels for queries\n  and list of doclists of features per doc per query.\n  '''", "\n", "current_qid", "=", "None", "\n", "queries", "=", "{", "}", "\n", "queryIndex", "=", "0", "\n", "doclists", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "all_features", "=", "set", "(", ")", "\n", "\n", "feat_bounds", "=", "{", "}", "\n", "\n", "for", "line", "in", "open", "(", "path", ",", "'r'", ")", ":", "\n", "    ", "info", "=", "line", "[", ":", "line", ".", "find", "(", "'#'", ")", "]", ".", "split", "(", ")", "\n", "\n", "qid", "=", "info", "[", "1", "]", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "label", "=", "int", "(", "info", "[", "0", "]", ")", "\n", "if", "qid", "not", "in", "queries", ":", "\n", "      ", "queryIndex", "=", "len", "(", "queries", ")", "\n", "queries", "[", "qid", "]", "=", "queryIndex", "\n", "doclists", ".", "append", "(", "[", "]", ")", "\n", "labels", ".", "append", "(", "[", "]", ")", "\n", "current_qid", "=", "qid", "\n", "", "elif", "qid", "!=", "current_qid", ":", "\n", "      ", "queryIndex", "=", "queries", "[", "qid", "]", "\n", "current_qid", "=", "qid", "\n", "\n", "", "featureDict", "=", "{", "}", "\n", "for", "pair", "in", "info", "[", "2", ":", "]", ":", "\n", "      ", "featid", ",", "feature", "=", "pair", ".", "split", "(", "':'", ")", "\n", "all_features", ".", "add", "(", "featid", ")", "\n", "feat_value", "=", "float", "(", "feature", ")", "\n", "featureDict", "[", "featid", "]", "=", "feat_value", "\n", "if", "featid", "in", "feat_bounds", ":", "\n", "        ", "feat_bounds", "[", "featid", "]", "=", "(", "min", "(", "feat_bounds", "[", "featid", "]", "[", "0", "]", ",", "feat_value", ")", ",", "\n", "max", "(", "feat_bounds", "[", "featid", "]", "[", "1", "]", ",", "feat_value", ")", ")", "\n", "", "else", ":", "\n", "        ", "feat_bounds", "[", "featid", "]", "=", "(", "feat_value", ",", "feat_value", ")", "\n", "", "", "doclists", "[", "queryIndex", "]", ".", "append", "(", "featureDict", ")", "\n", "labels", "[", "queryIndex", "]", ".", "append", "(", "label", ")", "\n", "\n", "", "if", "filter_non_uniq", ":", "\n", "    ", "unique_features", "=", "set", "(", ")", "\n", "for", "featid", "in", "all_features", ":", "\n", "      ", "if", "feat_bounds", "[", "featid", "]", "[", "0", "]", "<", "feat_bounds", "[", "featid", "]", "[", "1", "]", ":", "\n", "        ", "unique_features", ".", "add", "(", "featid", ")", "\n", "", "", "return", "queries", ",", "doclists", ",", "labels", ",", "unique_features", "\n", "", "else", ":", "\n", "    ", "return", "queries", ",", "doclists", ",", "labels", ",", "all_features", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rewards.log2": [[4, 8], ["tensorflow.log", "tensorflow.log", "tensorflow.cast", "tensorflow.constant"], "function", ["None"], ["def", "log2", "(", "x", ")", ":", "\n", "  ", "numerator", "=", "tf", ".", "log", "(", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", ")", "\n", "denominator", "=", "tf", ".", "log", "(", "tf", ".", "constant", "(", "2", ",", "dtype", "=", "numerator", ".", "dtype", ")", ")", "\n", "return", "numerator", "/", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rewards.get_DCG_discounts": [[9, 31], ["all_discounts.items", "tensorflow.minimum", "tensorflow.shape", "range", "tensorflow.convert_to_tensor", "tensorflow.cast", "tensorflow.gather", "numpy.zeros", "numpy.array", "numpy.concatenate", "len_discounts[].append", "numpy.array", "numpy.log2", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rewards.log2"], ["", "def", "get_DCG_discounts", "(", "params", ",", "docs_per_query", ",", "labels", ")", ":", "\n", "  ", "new_discounts", "=", "{", "}", "\n", "perfect_pos", "=", "{", "}", "\n", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "all_discounts", "=", "params", "[", "'all_discounts'", "]", "\n", "batch_size", "=", "tf", ".", "shape", "(", "labels", ")", "[", "0", "]", "\n", "\n", "len_discounts", "=", "{", "}", "\n", "for", "name", ",", "d_ind", "in", "all_discounts", ".", "items", "(", ")", ":", "\n", "    ", "len_discounts", "[", "name", "]", "=", "[", "np", ".", "zeros", "(", "serp_len", ")", "]", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "      ", "cutoff_ind", "=", "np", ".", "array", "(", "[", "x", "for", "x", "in", "d_ind", "if", "x", "<=", "i", "]", ")", "\n", "cutoff_dis", "=", "1.", "/", "(", "np", ".", "log2", "(", "cutoff_ind", "+", "2", ")", ")", "\n", "padded_dis", "=", "np", ".", "concatenate", "(", "[", "cutoff_dis", ",", "np", ".", "zeros", "(", "serp_len", "-", "i", "-", "1", ")", "]", ")", "\n", "len_discounts", "[", "name", "]", ".", "append", "(", "padded_dis", ")", "\n", "", "len_discounts", "[", "name", "]", "=", "tf", ".", "convert_to_tensor", "(", "np", ".", "array", "(", "len_discounts", "[", "name", "]", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "cut_len", "=", "tf", ".", "minimum", "(", "serp_len", ",", "tf", ".", "cast", "(", "docs_per_query", ",", "tf", ".", "int32", ")", ")", "\n", "for", "name", "in", "all_discounts", ":", "\n", "    ", "new_discounts", "[", "name", "]", "=", "tf", ".", "gather", "(", "len_discounts", "[", "name", "]", ",", "\n", "cut_len", "[", ":", ",", "0", "]", ")", "\n", "", "return", "new_discounts", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rewards.calculate_ideal_rewards": [[32, 49], ["tensorflow.zeros", "tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.cast", "tensorflow.reduce_sum", "all_discounts.items", "tensorflow.maximum", "tensorflow.shape"], "function", ["None"], ["", "def", "calculate_ideal_rewards", "(", "params", ",", "labels", ",", "all_discounts", ")", ":", "\n", "  ", "ideal_rewards", "=", "{", "}", "\n", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "padding", "=", "tf", ".", "zeros", "(", "[", "labels", ".", "shape", "[", "0", "]", ",", "\n", "tf", ".", "maximum", "(", "serp_len", "-", "tf", ".", "shape", "(", "labels", ")", "[", "1", "]", ",", "0", ")", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", "\n", "padded_labels", "=", "tf", ".", "concat", "(", "[", "labels", ",", "padding", "]", ",", "axis", "=", "1", ")", "\n", "\n", "top_labels", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "padded_labels", ",", "k", "=", "serp_len", ")", "\n", "nominators", "=", "tf", ".", "cast", "(", "2", "**", "top_labels", "-", "1", ",", "tf", ".", "float32", ")", "\n", "ideal_reward", "=", "tf", ".", "reduce_sum", "(", "nominators", "*", "all_discounts", "[", "'ndcg'", "]", ",", "\n", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "\n", "for", "name", ",", "discounts", "in", "all_discounts", ".", "items", "(", ")", ":", "\n", "    ", "ideal_rewards", "[", "name", "]", "=", "ideal_reward", "\n", "", "return", "ideal_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rewards.calculate_DCG_reward": [[50, 74], ["range", "tensorflow.summary.scalar", "tensorflow.cast", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "rewards.calculate_DCG_reward.mean_helper"], "function", ["None"], ["", "def", "calculate_DCG_reward", "(", "params", ",", "replay", ",", "stats_ops", "=", "[", "]", ",", "ideal_reward", "=", "None", ")", ":", "\n", "  ", "def", "mean_helper", "(", "values", ")", ":", "\n", "    ", "if", "params", "[", "'evaluation'", "]", ":", "\n", "      ", "mean", ",", "update", "=", "tf", ".", "metrics", ".", "mean", "(", "tf", ".", "reduce_mean", "(", "values", ")", ")", "\n", "stats_ops", ".", "append", "(", "update", ")", "\n", "return", "mean", "\n", "", "else", ":", "\n", "      ", "return", "tf", ".", "reduce_mean", "(", "values", ")", "\n", "", "", "rewards", "=", "0.", "\n", "for", "i", "in", "range", "(", "params", "[", "'serp_len'", "]", ")", ":", "\n", "    ", "labels", "=", "replay", "[", "'label_%d'", "%", "i", "]", "\n", "nominators", "=", "tf", ".", "cast", "(", "2", "**", "labels", "-", "1", ",", "tf", ".", "float32", ")", "\n", "denominators", "=", "tf", ".", "log", "(", "\n", "tf", ".", "cast", "(", "i", "+", "2", ",", "tf", ".", "float32", ")", ")", "/", "tf", ".", "log", "(", "tf", ".", "constant", "(", "2.", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "rewards", "+=", "nominators", "/", "denominators", "\n", "tf", ".", "summary", ".", "scalar", "(", "'label/pos_%d'", "%", "i", ",", "mean_helper", "(", "tf", ".", "cast", "(", "labels", ",", "tf", ".", "float32", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'exp_label/pos_%d'", "%", "i", ",", "mean_helper", "(", "tf", ".", "cast", "(", "nominators", ",", "tf", ".", "float32", ")", ")", ")", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "'reward'", ",", "mean_helper", "(", "rewards", ")", ")", "\n", "if", "ideal_reward", "is", "not", "None", ":", "\n", "    ", "denom", "=", "tf", ".", "where", "(", "ideal_reward", "==", "0.", ",", "\n", "tf", ".", "ones_like", "(", "ideal_reward", ")", ",", "\n", "ideal_reward", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'normalized_reward'", ",", "mean_helper", "(", "rewards", "/", "denom", ")", ")", "\n", "", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rewards.calculate_custom_discount_reward": [[75, 166], ["tensorflow.cast", "range", "tensorflow.summary.scalar", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.tile", "tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.where", "rewards.calculate_DCG_reward.mean_helper"], "function", ["None"], ["", "def", "calculate_custom_discount_reward", "(", "params", ",", "replay", ",", "stats_ops", "=", "[", "]", ")", ":", "\n", "  ", "def", "mean_helper", "(", "values", ")", ":", "\n", "    ", "if", "params", "[", "'evaluation'", "]", ":", "\n", "      ", "mean", ",", "update", "=", "tf", ".", "metrics", ".", "mean", "(", "tf", ".", "reduce_mean", "(", "values", ")", ")", "\n", "stats_ops", ".", "append", "(", "update", ")", "\n", "return", "mean", "\n", "", "else", ":", "\n", "      ", "return", "tf", ".", "reduce_mean", "(", "values", ")", "\n", "\n", "", "", "cur_reward", "=", "params", "[", "'discount'", "]", "\n", "rewards", "=", "{", "}", "\n", "doc_rewards", "=", "{", "}", "\n", "\n", "labels", "=", "tf", ".", "cast", "(", "replay", "[", "'labels'", "]", ",", "tf", ".", "float32", ")", "\n", "\n", "if", "params", "[", "'model'", "]", "==", "'seppos'", ":", "\n", "    ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "\n", "docs_per_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "pos_order", "=", "tf", ".", "cast", "(", "replay", "[", "'pos_order'", "]", ",", "tf", ".", "int32", ")", "\n", "\n", "first_sort", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "pos_order", ",", "k", "=", "serp_len", ")", "[", "1", "]", "\n", "second_sort", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "first_sort", ",", "k", "=", "serp_len", ")", "[", "1", "]", "\n", "# pos_order = tf.minimum(pos_order, serp_len-1)", "\n", "pos_labels", "=", "tf", ".", "cast", "(", "replay", "[", "'select_order_labels'", "]", ",", "tf", ".", "float32", ")", "\n", "pos_nominators", "=", "2", "**", "pos_labels", "-", "1", "\n", "\n", "to_few_docs", "=", "tf", ".", "less", "(", "docs_per_query", ",", "serp_len", ")", "[", ":", ",", "0", "]", "\n", "\n", "safe_order", "=", "tf", ".", "where", "(", "to_few_docs", ",", "second_sort", ",", "pos_order", ")", "\n", "\n", "batch_ind", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "serp_len", "]", ")", "\n", "pos_ind_nd", "=", "tf", ".", "stack", "(", "[", "tf", ".", "reshape", "(", "batch_ind", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "safe_order", ",", "[", "-", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "nominators", "=", "2", "**", "labels", "-", "1", "\n", "for", "name", "in", "params", "[", "'all_discounts'", "]", ":", "\n", "    ", "discounts", "=", "replay", "[", "'discounts/%s'", "%", "name", "]", "\n", "doc_rewards", "[", "name", "]", "=", "discounts", "*", "nominators", "\n", "rewards", "[", "name", "]", "=", "tf", ".", "reduce_sum", "(", "discounts", "*", "nominators", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "\n", "if", "params", "[", "'model'", "]", "==", "'seppos'", ":", "\n", "\n", "      ", "pos_discounts", "=", "tf", ".", "gather_nd", "(", "discounts", ",", "pos_ind_nd", ")", "\n", "pos_discounts", "=", "tf", ".", "reshape", "(", "pos_discounts", ",", "[", "batch_size", ",", "serp_len", "]", ")", "\n", "\n", "doc_rewards", "[", "name", "]", "=", "pos_discounts", "*", "pos_nominators", "\n", "\n", "", "ideal_reward", "=", "replay", "[", "'ideal_rewards/%s'", "%", "name", "]", "\n", "\n", "denom", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "ideal_reward", ",", "0", ")", ",", "\n", "tf", ".", "ones_like", "(", "ideal_reward", ")", ",", "\n", "ideal_reward", ")", "\n", "norm_reward", "=", "mean_helper", "(", "rewards", "[", "name", "]", "/", "denom", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'normalized_rewards/%s'", "%", "name", ",", "norm_reward", ")", "\n", "if", "name", "==", "cur_reward", ":", "\n", "      ", "tf", ".", "summary", ".", "scalar", "(", "'normalized_reward'", ",", "norm_reward", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "params", "[", "'serp_len'", "]", ")", ":", "\n", "    ", "label_i", "=", "tf", ".", "gather", "(", "labels", ",", "i", ",", "axis", "=", "1", ")", "\n", "nom_i", "=", "tf", ".", "gather", "(", "nominators", ",", "i", ",", "axis", "=", "1", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'label/pos_%d'", "%", "i", ",", "mean_helper", "(", "label_i", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'exp_label/pos_%d'", "%", "i", ",", "\n", "mean_helper", "(", "nom_i", ")", ")", "\n", "if", "'pos_order'", "in", "replay", ":", "\n", "      ", "tf", ".", "summary", ".", "scalar", "(", "'pos_order/pos_%d'", "%", "i", ",", "mean_helper", "(", "replay", "[", "'pos_order'", "]", "[", ":", ",", "i", "]", ")", ")", "\n", "label_order", "=", "tf", ".", "cast", "(", "replay", "[", "'select_order_labels'", "]", ",", "tf", ".", "float32", ")", "\n", "nom_order", "=", "2", "**", "label_order", "-", "1", "\n", "tf", ".", "summary", ".", "scalar", "(", "'label_order2/label_%d'", "%", "i", ",", "mean_helper", "(", "label_order", "[", ":", ",", "i", "]", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'label_order/exp_label_%d'", "%", "i", ",", "mean_helper", "(", "nom_order", "[", ":", ",", "i", "]", ")", ")", "\n", "\n", "", "", "tf", ".", "summary", ".", "scalar", "(", "'reward'", ",", "mean_helper", "(", "rewards", "[", "cur_reward", "]", ")", ")", "\n", "\n", "# per_name = 'perfect_pos/%s' % cur_reward", "\n", "# pos_order = tf.cast(replay['pos_order'], tf.float32)", "\n", "# match = tf.cast(tf.equal(pos_order, replay[per_name]), tf.float32)", "\n", "# rewards = tf.reduce_sum(match, axis=1, keep_dims=True)", "\n", "# tf.summary.scalar('pos_reward', mean_helper(rewards))", "\n", "\n", "# # serp_len = params['serp_len']", "\n", "# # rewards = tf.Print(rewards, [replay[per_name][0, i] for i in range(serp_len)], 'perfect:   ')", "\n", "# # rewards = tf.Print(rewards, [pos_order[0, i] for i in range(serp_len)], 'pos_order: ')", "\n", "# # rewards = tf.Print(rewards, [rewards[0, 0]], 'rewards: ')", "\n", "# return rewards", "\n", "\n", "\n", "# rewards[cur_reward] = tf.Print(rewards[cur_reward], [labels[0, j] for j in range(10)], 'labels %s:' % cur_reward)", "\n", "# rewards[cur_reward] = tf.Print(rewards[cur_reward], [rewards[cur_reward][0]], 'reward %s:' % cur_reward)", "\n", "\n", "return", "rewards", "[", "cur_reward", "]", ",", "doc_rewards", "[", "cur_reward", "]", "", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.losses.get_pos_loss": [[6, 39], ["tensorflow.where", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "q_loss.append", "monte_carlo_loss.append", "tensorflow.less", "tensorflow.zeros_like", "tensorflow.less", "tensorflow.zeros_like", "tensorflow.reduce_mean", "loss.append", "loss.append"], "function", ["None"], ["def", "get_pos_loss", "(", "params", ",", "prev_loss", ",", "pos", ",", "docs_in_query", ",", "scores", ",", "max_q", ",", "rewards", ")", ":", "\n", "  ", "if", "prev_loss", "is", "None", ":", "\n", "    ", "loss", ",", "q_loss", ",", "monte_carlo_loss", "=", "(", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "    ", "loss", ",", "q_loss", ",", "monte_carlo_loss", "=", "prev_loss", "\n", "\n", "", "q_pos_loss", "=", "(", "scores", "-", "max_q", ")", "**", "2", "\n", "mc_pos_loss", "=", "(", "scores", "-", "rewards", ")", "**", "2", "\n", "# Filter shorter queries.", "\n", "q_pos_loss", "=", "tf", ".", "where", "(", "tf", ".", "less", "(", "pos", ",", "docs_in_query", ")", ",", "\n", "q_pos_loss", ",", "\n", "tf", ".", "zeros_like", "(", "q_pos_loss", ")", ")", "\n", "mc_pos_loss", "=", "tf", ".", "where", "(", "tf", ".", "less", "(", "pos", ",", "docs_in_query", ")", ",", "\n", "mc_pos_loss", ",", "\n", "tf", ".", "zeros_like", "(", "mc_pos_loss", ")", ")", "\n", "\n", "q_pos_loss", "=", "tf", ".", "reduce_mean", "(", "q_pos_loss", ")", "\n", "mc_pos_loss", "=", "tf", ".", "reduce_mean", "(", "mc_pos_loss", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'scores/pos_%d'", "%", "pos", ",", "\n", "tf", ".", "reduce_mean", "(", "scores", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'q_loss/pos_%d'", "%", "pos", ",", "\n", "q_pos_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'monte_carlo/loss_pos_%d'", "%", "pos", ",", "\n", "mc_pos_loss", ")", "\n", "\n", "q_loss", ".", "append", "(", "q_pos_loss", ")", "\n", "monte_carlo_loss", ".", "append", "(", "mc_pos_loss", ")", "\n", "if", "params", "[", "'update'", "]", "==", "'monte_carlo'", ":", "\n", "    ", "loss", ".", "append", "(", "mc_pos_loss", ")", "\n", "", "else", ":", "\n", "    ", "loss", ".", "append", "(", "q_pos_loss", ")", "\n", "", "return", "loss", ",", "q_loss", ",", "monte_carlo_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.losses.calculate_naive_loss": [[40, 84], ["tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.gather", "range", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.less", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.shape", "main_scores.append", "tensorflow.range", "tensorflow.zeros_like", "model_utils._create_subnetwork", "tensorflow.concat", "tensorflow.gather"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "calculate_naive_loss", "(", "params", ",", "replay", ",", "rewards", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "visible_dropout", "=", "params", "[", "'visible_dropout'", "]", "\n", "docs_in_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "batch_docs", "=", "replay", "[", "'serp'", "]", "\n", "n_docs", "=", "tf", ".", "shape", "(", "batch_docs", ")", "[", "0", "]", "\n", "\n", "drop_docs", "=", "tf", ".", "nn", ".", "dropout", "(", "batch_docs", ",", "visible_dropout", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "main_serp", "=", "tf", ".", "gather", "(", "doc_emb", ",", "1", ",", "axis", "=", "1", ")", "\n", "main_scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "main_scores", ".", "append", "(", "mu", ".", "_create_subnetwork", "(", "main_serp", ",", "params", ",", "\n", "'/main/score/pos_%d'", "%", "i", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ")", ")", "\n", "if", "i", "<", "serp_len", "-", "1", ":", "\n", "      ", "main_serp", "=", "tf", ".", "concat", "(", "[", "\n", "main_serp", ",", "\n", "tf", ".", "gather", "(", "doc_emb", ",", "1", ",", "axis", "=", "1", ")", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "scores", "=", "tf", ".", "concat", "(", "main_scores", ",", "axis", "=", "1", ")", "\n", "unfiltered_mc_loss", "=", "(", "rewards", "-", "scores", ")", "**", "2", "\n", "\n", "ind", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "serp_len", ")", ",", "0", ")", "\n", "mask", "=", "tf", ".", "less", "(", "ind", ",", "docs_in_query", ")", "\n", "filtered_mc_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_mc_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_mc_loss", ")", ")", "\n", "mc_loss", "=", "tf", ".", "reduce_mean", "(", "filtered_mc_loss", ")", "\n", "\n", "# tf.summary.scalar('q_loss/loss', mean_losses[1])", "\n", "tf", ".", "summary", ".", "scalar", "(", "'monte_carlo/loss'", ",", "mc_loss", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "mc_loss", ")", "\n", "\n", "return", "(", "mc_loss", ",", "mc_loss", ",", "mc_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.losses.calculate_pbow_loss": [[154, 233], ["tensorflow.zeros", "range", "range", "model_utils._create_subnetwork", "losses.get_pos_loss", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.shape", "tensorflow.nn.dropout", "tensorflow.concat", "main_emb.append", "tensorflow.concat", "label_emb.append", "model_utils._create_subnetwork", "model_utils._create_subnetwork", "losses.get_pos_loss", "tensorflow.reduce_mean", "range", "range", "model_utils._shared_doc_embeddings", "model_utils._shared_doc_embeddings", "tensorflow.concat", "max_emb.append", "model_utils._shared_doc_embeddings"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.losses.get_pos_loss", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.losses.get_pos_loss", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings"], ["", "def", "calculate_pbow_loss", "(", "params", ",", "replay", ",", "rewards", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "visible_dropout", "=", "params", "[", "'visible_dropout'", "]", "\n", "batch_size", "=", "tf", ".", "shape", "(", "replay", "[", "'doc_0'", "]", ")", "[", "0", "]", "\n", "docs_in_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "\n", "# Gather documents from replay.", "\n", "docs", "=", "[", "replay", "[", "'doc_%d'", "%", "i", "]", "for", "i", "in", "range", "(", "serp_len", ")", "]", "\n", "drop_docs", "=", "[", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "visible_dropout", ")", "for", "x", "in", "docs", "]", "\n", "max_docs", "=", "[", "replay", "[", "'max_doc_%d'", "%", "i", "]", "for", "i", "in", "range", "(", "1", ",", "serp_len", ")", "]", "\n", "\n", "# Create embeddings from documents.", "\n", "doc_i", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "1", "]", ")", "\n", "main_emb", "=", "[", "]", "\n", "label_emb", "=", "[", "]", "\n", "max_emb", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "main_pos_doc", "=", "tf", ".", "concat", "(", "[", "doc_i", ",", "drop_docs", "[", "i", "]", "]", ",", "axis", "=", "1", ")", "\n", "main_emb", ".", "append", "(", "mu", ".", "_shared_doc_embeddings", "(", "\n", "main_pos_doc", ",", "\n", "params", ",", "'/main/doc_emb'", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ")", ")", "\n", "\n", "label_pos_doc", "=", "tf", ".", "concat", "(", "[", "doc_i", ",", "docs", "[", "i", "]", "]", ",", "axis", "=", "1", ")", "\n", "label_emb", ".", "append", "(", "mu", ".", "_shared_doc_embeddings", "(", "label_pos_doc", ",", "\n", "params", ",", "'/label/doc_emb'", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ")", ")", "\n", "doc_i", "+=", "1", "\n", "# Documents for max choices, index is one behind.", "\n", "if", "i", "<", "serp_len", "-", "1", ":", "\n", "      ", "max_pos_doc", "=", "tf", ".", "concat", "(", "[", "doc_i", ",", "max_docs", "[", "i", "]", "]", ",", "axis", "=", "1", ")", "\n", "max_emb", ".", "append", "(", "mu", ".", "_shared_doc_embeddings", "(", "max_pos_doc", ",", "\n", "params", ",", "'/label/doc_emb'", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ")", ")", "\n", "\n", "", "", "serp_pbow", "=", "main_emb", "[", "0", "]", "\n", "label_pbow", "=", "label_emb", "[", "0", "]", "\n", "losses", "=", "None", "\n", "for", "i", "in", "range", "(", "serp_len", "-", "1", ")", ":", "\n", "    ", "scores", "=", "mu", ".", "_create_subnetwork", "(", "serp_pbow", ",", "params", ",", "'/main/score'", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ")", "\n", "\n", "max_scores", "=", "mu", ".", "_create_subnetwork", "(", "label_pbow", "+", "max_emb", "[", "i", "]", ",", "\n", "params", ",", "\n", "'/label/score'", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "False", ")", "\n", "\n", "losses", "=", "get_pos_loss", "(", "params", ",", "losses", ",", "i", ",", "docs_in_query", ",", "\n", "scores", ",", "max_scores", ",", "rewards", ")", "\n", "\n", "serp_pbow", "+=", "main_emb", "[", "i", "+", "1", "]", "\n", "if", "i", "<", "serp_len", "-", "2", ":", "\n", "      ", "label_pbow", "+=", "label_emb", "[", "i", "+", "1", "]", "\n", "\n", "", "", "scores", "=", "mu", ".", "_create_subnetwork", "(", "serp_pbow", ",", "params", ",", "\n", "'/main/score'", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ")", "\n", "losses", "=", "get_pos_loss", "(", "params", ",", "losses", ",", "\n", "serp_len", "-", "1", ",", "docs_in_query", ",", "\n", "scores", ",", "rewards", ",", "rewards", ")", "\n", "\n", "mean_losses", "=", "[", "tf", ".", "reduce_mean", "(", "loss", ")", "for", "loss", "in", "losses", "]", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'q_loss/loss'", ",", "mean_losses", "[", "1", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'monte_carlo/loss'", ",", "mean_losses", "[", "2", "]", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "mean_losses", "[", "0", "]", ")", "\n", "return", "mean_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.losses.max_train_filter": [[234, 254], ["tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.squeeze", "tensorflow.one_hot", "tensorflow.cumsum", "tensorflow.sequence_mask", "tensorflow.where", "tensorflow.argmax", "tensorflow.one_hot", "tensorflow.zeros_like", "tensorflow.fill", "gru"], "function", ["None"], ["", "def", "max_train_filter", "(", "gru", ",", "hidden_states", ",", "serp_len", ",", "doc_col", ",", "\n", "serp_ind", ",", "docs_in_query", ",", "max_n_docs", ")", ":", "\n", "  ", "hidden_states", "=", "tf", ".", "transpose", "(", "hidden_states", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "max_states", "=", "tf", ".", "expand_dims", "(", "hidden_states", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "max_col", "=", "tf", ".", "expand_dims", "(", "doc_col", ",", "axis", "=", "1", ")", "\n", "train_scores", "=", "tf", ".", "squeeze", "(", "gru", "(", "(", "max_states", ",", "None", ")", ",", "max_col", ")", "[", "1", "]", ",", "axis", "=", "3", ")", "\n", "score_filter", "=", "tf", ".", "one_hot", "(", "serp_ind", "[", ":", ",", ":", "-", "1", "]", ",", "max_n_docs", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "\n", "score_filter", "=", "tf", ".", "cumsum", "(", "score_filter", ",", "axis", "=", "1", ")", "\n", "\n", "n_doc_filter", "=", "tf", ".", "sequence_mask", "(", "docs_in_query", ",", "max_n_docs", ")", "\n", "n_doc_filter", "=", "tf", ".", "where", "(", "n_doc_filter", ",", "\n", "tf", ".", "zeros_like", "(", "n_doc_filter", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "fill", "(", "n_doc_filter", ".", "shape", ",", "np", ".", "NINF", ")", ")", "\n", "score_filter", "+=", "n_doc_filter", "\n", "\n", "argmax_s", "=", "tf", ".", "argmax", "(", "train_scores", "+", "score_filter", ",", "axis", "=", "2", ")", "\n", "\n", "return", "tf", ".", "one_hot", "(", "argmax_s", ",", "max_n_docs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.losses.get_label_scores": [[255, 290], ["model_utils._shared_doc_embeddings", "model_utils._shared_doc_embeddings", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.transpose", "rnn_utils.get_gru_score_layer", "tensorflow.scan", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.squeeze", "tensorflow.stop_gradient", "tensorflow.shape", "ru.get_gru_score_layer."], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_score_layer"], ["", "def", "get_label_scores", "(", "params", ",", "replay", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "batch_size", "=", "tf", ".", "shape", "(", "replay", "[", "'serp'", "]", ")", "[", "0", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "\n", "doc_col", "=", "mu", ".", "_shared_doc_embeddings", "(", "replay", "[", "'docs'", "]", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "inference", "=", "True", ",", "\n", "label_network", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "replay", "[", "'serp'", "]", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "inference", "=", "True", ",", "\n", "label_network", "=", "True", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "init_scores", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "1", "]", ")", "\n", "init_hidden", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "\n", "serp_emb", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru", "=", "ru", ".", "get_gru_score_layer", "(", "params", ",", "'/label/gru'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "hidden_states", ",", "_", "=", "tf", ".", "scan", "(", "gru", ",", "serp_emb", ",", "(", "init_hidden", ",", "init_scores", ")", ")", "\n", "\n", "hidden_states", "=", "tf", ".", "transpose", "(", "hidden_states", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "hidden_states", "=", "hidden_states", "[", ":", ",", ":", "-", "1", ",", "None", ",", ":", "]", "\n", "\n", "max_col", "=", "tf", ".", "expand_dims", "(", "doc_col", ",", "axis", "=", "1", ")", "\n", "label_scores", "=", "tf", ".", "squeeze", "(", "gru", "(", "(", "hidden_states", ",", "None", ")", ",", "max_col", ")", "[", "1", "]", ",", "axis", "=", "3", ")", "\n", "\n", "return", "tf", ".", "stop_gradient", "(", "label_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.losses.calculate_gru_loss": [[292, 395], ["tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.zeros", "tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.transpose", "rnn_utils.get_gru_layer", "tensorflow.zeros", "tensorflow.scan", "tensorflow.concat", "model_utils._create_subnetwork", "tensorflow.squeeze", "losses.max_train_filter", "losses.get_label_scores", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.equal", "tensorflow.tile", "tensorflow.where", "tensorflow.cast", "tensorflow.squeeze", "tensorflow.where", "tensorflow.where", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.where", "tensorflow.summary.scalar", "tensorflow.shape", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.sequence_mask", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.zeros_like", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.range", "tensorflow.minimum"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.max_train_filter", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.get_label_scores"], ["", "def", "calculate_gru_loss", "(", "params", ",", "replay", ",", "rewards", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "visible_dropout", "=", "params", "[", "'visible_dropout'", "]", "\n", "docs_in_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "batch_docs", "=", "replay", "[", "'serp'", "]", "\n", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "n_docs", "=", "tf", ".", "shape", "(", "batch_docs", ")", "[", "0", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "\n", "drop_col", "=", "tf", ".", "nn", ".", "dropout", "(", "replay", "[", "'docs'", "]", ",", "visible_dropout", ")", "\n", "\n", "doc_col", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_col", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "# if params['context_input']:", "\n", "#   gru = ru.get_gru_layer(params, '/main/gru/collection/',", "\n", "#                                label_network=False,", "\n", "#                                inference=False,", "\n", "#                                reuse_variable_scope=False)", "\n", "#   input_col = tf.transpose(doc_col, [1, 0, 2])", "\n", "\n", "#   hidden_col = tf.scan(gru, input_col, init_hidden)", "\n", "\n", "#   hidden_col = tf.transpose(hidden_col, [1, 0, 2])", "\n", "\n", "#   indices = tf.stack([tf.range(n_docs), tf.squeeze(docs_in_query-1 ,axis=1)], axis=1)", "\n", "#   init_hidden = tf.gather_nd(hidden_col, indices)", "\n", "# else:", "\n", "init_hidden", "=", "tf", ".", "zeros", "(", "[", "n_docs", ",", "hidden_state_size", "]", ")", "\n", "\n", "drop_docs", "=", "tf", ".", "nn", ".", "dropout", "(", "batch_docs", ",", "visible_dropout", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "serp_emb", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "init_scores", "=", "tf", ".", "zeros", "(", "[", "n_docs", ",", "1", "]", ")", "\n", "hidden_states", "=", "tf", ".", "scan", "(", "gru", ",", "serp_emb", "[", ":", "-", "1", ",", ":", ",", ":", "]", ",", "init_hidden", ")", "\n", "hidden_states", "=", "tf", ".", "concat", "(", "[", "init_hidden", "[", "None", ",", ":", ",", ":", "]", ",", "hidden_states", "]", ",", "axis", "=", "0", ")", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "\n", "scores", "=", "tf", ".", "squeeze", "(", "tf", ".", "transpose", "(", "scores", ",", "[", "1", ",", "0", ",", "2", "]", ")", ",", "axis", "=", "2", ")", "\n", "unfiltered_mc_loss", "=", "(", "rewards", "-", "scores", ")", "**", "2.", "\n", "\n", "max_filter", "=", "max_train_filter", "(", "gru", ",", "hidden_states", ",", "serp_len", ",", "\n", "doc_col", ",", "replay", "[", "'serp_ind'", "]", ",", "\n", "docs_in_query", ",", "max_n_docs", ")", "\n", "\n", "label_scores", "=", "get_label_scores", "(", "params", ",", "replay", ")", "\n", "\n", "double_max_scores", "=", "tf", ".", "reduce_sum", "(", "max_filter", "*", "label_scores", ",", "axis", "=", "2", ")", "\n", "q_values", "=", "tf", ".", "concat", "(", "[", "double_max_scores", ",", "rewards", "]", ",", "axis", "=", "1", ")", "\n", "\n", "end_mask", "=", "tf", ".", "equal", "(", "docs_in_query", "-", "1", ",", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "serp_len", ")", ",", "axis", "=", "0", ")", ")", "\n", "reward_tile", "=", "tf", ".", "tile", "(", "rewards", ",", "[", "1", ",", "serp_len", "]", ")", "\n", "q_values", "=", "tf", ".", "where", "(", "end_mask", ",", "reward_tile", ",", "q_values", ")", "\n", "\n", "unfiltered_dqn_loss", "=", "(", "scores", "-", "q_values", ")", "**", "2.", "\n", "\n", "doc_denom", "=", "tf", ".", "cast", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "minimum", "(", "docs_in_query", ",", "serp_len", ")", ")", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "squeeze", "(", "tf", ".", "sequence_mask", "(", "docs_in_query", ",", "serp_len", ")", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "filtered_mc_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_mc_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_mc_loss", ")", ")", "\n", "mc_loss", "=", "tf", ".", "reduce_sum", "(", "filtered_mc_loss", ")", "/", "doc_denom", "\n", "\n", "filtered_dqn_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_dqn_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_dqn_loss", ")", ")", "\n", "\n", "dqn_loss", "=", "tf", ".", "reduce_sum", "(", "filtered_dqn_loss", ")", "/", "doc_denom", "\n", "\n", "# tf.summary.scalar('q_loss/loss', mean_losses[1])", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'monte_carlo/loss'", ",", "mc_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/loss'", ",", "dqn_loss", ")", "\n", "\n", "filtered_double_max", "=", "tf", ".", "where", "(", "mask", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "double_max_scores", ",", "\n", "tf", ".", "zeros_like", "(", "double_max_scores", ")", ")", "\n", "double_max_denom", "=", "doc_denom", "-", "tf", ".", "cast", "(", "n_docs", ",", "tf", ".", "float32", ")", "\n", "double_max_mean", "=", "tf", ".", "reduce_sum", "(", "filtered_double_max", ")", "/", "double_max_denom", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/double_max_scores'", ",", "double_max_mean", ")", "\n", "\n", "return", "mc_loss", ",", "dqn_loss", "", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.gru.gru.model": [[6, 101], ["model_utils._shared_doc_embeddings", "tensorflow.zeros", "rnn_utils.get_gru_layer", "model_utils.EpsilonGreedy", "range", "tensorflow.stack", "tensorflow.stack", "tensorflow.concat", "tensorflow.summary.histogram", "tensorflow.convert_to_tensor", "tensorflow.pad", "tensorflow.reshape", "tensorflow.shape", "tensorflow.concat", "tensorflow.random_shuffle", "tensorflow.transpose", "tensorflow.cast", "tensorflow.slice", "rnn_utils.get_gru_layer", "tensorflow.transpose", "tensorflow.scan", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.tile", "tensorflow.concat", "model_utils._create_subnetwork", "mu.EpsilonGreedy.choose", "serp_ind.append", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.summary.scalar", "serp_labels.append", "serp.append", "tensorflow.transpose", "tensorflow.slice", "tensorflow.gather_nd", "tensorflow.reduce_mean", "tensorflow.where", "tensorflow.gather_nd", "ru.get_gru_layer.", "tensorflow.cast", "tensorflow.range", "tensorflow.gather_nd", "tensorflow.less", "tensorflow.zeros", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.PositionEpsilonGreedy.choose"], ["def", "model", "(", "params", ",", "examples", ",", "labels", ",", "epsilon", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "doc_emb_size", "=", "params", "[", "'doc_emb'", "]", "[", "-", "1", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "docs", "=", "examples", "[", "'doc_tensors'", "]", "\n", "batch_size", "=", "docs", ".", "shape", "[", "0", "]", ".", "value", "\n", "batch_max_docs", "=", "tf", ".", "shape", "(", "docs", ")", "[", "1", "]", "\n", "docs_per_query", "=", "examples", "[", "'n_docs'", "]", "\n", "\n", "if", "params", "[", "'context_input'", "]", ":", "\n", "    ", "to_shuffle", "=", "tf", ".", "concat", "(", "[", "tf", ".", "cast", "(", "labels", "[", ":", ",", ":", ",", "None", "]", ",", "tf", ".", "float32", ")", ",", "docs", "]", ",", "axis", "=", "2", ")", "\n", "shuffled", "=", "tf", ".", "random_shuffle", "(", "tf", ".", "transpose", "(", "to_shuffle", ",", "[", "1", ",", "0", ",", "2", "]", ")", ")", "\n", "shuffled", "=", "tf", ".", "transpose", "(", "shuffled", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "labels", "=", "tf", ".", "cast", "(", "tf", ".", "slice", "(", "shuffled", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", "]", ")", ",", "tf", ".", "int32", ")", "\n", "labels", "=", "labels", "[", ":", ",", ":", ",", "0", "]", "\n", "docs", "=", "tf", ".", "slice", "(", "shuffled", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "# assert not params['context_input'], 'Context not supported for GRU.'", "\n", "\n", "", "result", "=", "{", "\n", "'docs_per_query'", ":", "docs_per_query", ",", "\n", "}", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "\n", "hidden_init", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "if", "params", "[", "'context_input'", "]", ":", "\n", "    ", "context_gru_fn", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru/context'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "scan_input", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "context", "=", "tf", ".", "scan", "(", "context_gru_fn", ",", "scan_input", ",", "hidden_init", ")", "\n", "\n", "ind_nd", "=", "tf", ".", "concat", "(", "[", "docs_per_query", "-", "1", ",", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "\n", "hidden_init", "=", "tf", ".", "gather_nd", "(", "context", ",", "ind_nd", ")", "\n", "\n", "", "gru_fn", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "policy", "=", "mu", ".", "EpsilonGreedy", "(", "epsilon", ",", "batch_size", ",", "batch_max_docs", ",", "docs_per_query", ")", "\n", "hidden_state", "=", "hidden_init", "\n", "#tf.zeros([n_docs, hidden_state_size])", "\n", "serp", "=", "[", "]", "\n", "serp_labels", "=", "[", "]", "\n", "serp_ind", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "hidden_states", "=", "tf", ".", "tile", "(", "hidden_state", "[", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "batch_max_docs", ",", "1", "]", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "doc_emb", "]", ",", "axis", "=", "2", ")", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "\n", "action", "=", "policy", ".", "choose", "(", "scores", ")", "\n", "serp_ind", ".", "append", "(", "action", ")", "\n", "\n", "nd_ind", "=", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "action", "]", ",", "axis", "=", "1", ")", "\n", "select_doc", "=", "tf", ".", "gather_nd", "(", "docs", ",", "nd_ind", ")", "\n", "select_labels", "=", "tf", ".", "gather_nd", "(", "labels", ",", "nd_ind", ")", "[", ":", ",", "None", "]", "\n", "tf", ".", "summary", ".", "scalar", "(", "'policy/scores/pos_%d'", "%", "i", ",", "\n", "tf", ".", "reduce_mean", "(", "tf", ".", "gather_nd", "(", "scores", ",", "nd_ind", ")", ")", ")", "\n", "\n", "serp_labels", ".", "append", "(", "tf", ".", "where", "(", "\n", "tf", ".", "less", "(", "i", ",", "docs_per_query", ")", ",", "\n", "select_labels", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", ")", ")", "\n", "serp", ".", "append", "(", "select_doc", ")", "\n", "\n", "if", "i", "<", "serp_len", "-", "1", ":", "\n", "      ", "select_emb", "=", "tf", ".", "gather_nd", "(", "doc_emb", ",", "nd_ind", ")", "\n", "hidden_state", "=", "gru_fn", "(", "hidden_state", ",", "select_emb", ")", "\n", "\n", "\n", "", "", "result", "[", "'serp'", "]", "=", "tf", ".", "stack", "(", "serp", ",", "axis", "=", "1", ")", "\n", "result", "[", "'serp_ind'", "]", "=", "tf", ".", "stack", "(", "serp_ind", ",", "axis", "=", "1", ")", "\n", "result", "[", "'labels'", "]", "=", "tf", ".", "concat", "(", "serp_labels", ",", "axis", "=", "1", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"label/output\"", ",", "result", "[", "'labels'", "]", ")", "\n", "\n", "# if params['context_input']:", "\n", "max_docs", "=", "params", "[", "'max_docs'", "]", "\n", "padding", "=", "tf", ".", "convert_to_tensor", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "max_docs", "-", "batch_max_docs", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "padded_docs", "=", "tf", ".", "pad", "(", "docs", ",", "padding", ",", "\"CONSTANT\"", ")", "\n", "padded_docs", "=", "tf", ".", "reshape", "(", "padded_docs", ",", "[", "batch_size", ",", "max_docs", ",", "docs", ".", "shape", "[", "2", "]", ".", "value", "]", ")", "\n", "result", "[", "'docs'", "]", "=", "padded_docs", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.gru.gru.max_train_docs": [[102, 131], ["tensorflow.one_hot", "tensorflow.cumsum", "tensorflow.sequence_mask", "tensorflow.transpose", "tensorflow.tile", "tensorflow.tile", "tensorflow.concat", "tensorflow.argmax", "tensorflow.where", "model_utils._create_subnetwork", "tensorflow.zeros", "tensorflow.fill"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "max_train_docs", "(", "params", ",", "replay", ",", "hidden_states", ",", "doc_col", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "batch_size", "=", "params", "[", "'replay_batch'", "]", "\n", "serp_ind", "=", "replay", "[", "'serp_ind'", "]", "\n", "docs_per_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "\n", "score_filter", "=", "tf", ".", "one_hot", "(", "serp_ind", "[", ":", ",", ":", "-", "1", "]", ",", "max_n_docs", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "score_filter", "=", "tf", ".", "cumsum", "(", "score_filter", ",", "axis", "=", "1", ")", "\n", "\n", "n_doc_filter", "=", "tf", ".", "sequence_mask", "(", "docs_per_query", "[", ":", ",", "0", "]", ",", "max_n_docs", ")", "\n", "score_filter", "+=", "tf", ".", "where", "(", "n_doc_filter", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "max_n_docs", "]", ")", ",", "\n", "tf", ".", "fill", "(", "[", "batch_size", ",", "max_n_docs", "]", ",", "np", ".", "NINF", ")", ")", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "hidden_states", "=", "tf", ".", "transpose", "(", "hidden_states", "[", "1", ":", ",", ":", ",", ":", "]", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "tiled_states", "=", "tf", ".", "tile", "(", "hidden_states", "[", ":", ",", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "1", ",", "max_n_docs", ",", "1", "]", ")", "\n", "tiled_docs", "=", "tf", ".", "tile", "(", "doc_col", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "[", "1", ",", "serp_len", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "tiled_states", ",", "tiled_docs", "]", ",", "axis", "=", "3", ")", "\n", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "return", "tf", ".", "argmax", "(", "scores", "+", "score_filter", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.gru.gru.get_label_scores": [[132, 190], ["tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.reshape", "model_utils._shared_doc_embeddings", "model_utils._shared_doc_embeddings", "rnn_utils.get_gru_layer", "tensorflow.zeros", "tensorflow.transpose", "tensorflow.scan", "tensorflow.transpose", "tensorflow.concat", "model_utils._create_subnetwork", "model_utils._shared_doc_embeddings", "rnn_utils.get_gru_layer", "tensorflow.transpose", "tensorflow.scan", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.stop_gradient", "tensorflow.range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer"], ["", "def", "get_label_scores", "(", "params", ",", "replay", ",", "max_train_ind", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "batch_size", "=", "replay", "[", "'serp'", "]", ".", "shape", "[", "0", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "docs_per_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "doc_col", "=", "replay", "[", "'docs'", "]", "\n", "batch_ind", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "serp_len", "-", "1", "]", ")", "\n", "max_ind", "=", "tf", ".", "stack", "(", "[", "tf", ".", "reshape", "(", "batch_ind", ",", "[", "-", "1", "]", ")", ",", "tf", ".", "reshape", "(", "max_train_ind", ",", "[", "-", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "max_docs", "=", "tf", ".", "gather_nd", "(", "doc_col", ",", "max_ind", ")", "\n", "max_docs", "=", "tf", ".", "reshape", "(", "max_docs", ",", "[", "batch_size", ",", "serp_len", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "max_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "max_docs", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "inference", "=", "True", ",", "\n", "label_network", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "replay", "[", "'serp'", "]", "[", ":", ",", ":", "-", "1", "]", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "inference", "=", "True", ",", "\n", "label_network", "=", "True", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "\n", "gru", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/label/gru'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "init_hidden", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "if", "params", "[", "'context_input'", "]", ":", "\n", "    ", "emb_col", "=", "mu", ".", "_shared_doc_embeddings", "(", "doc_col", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "inference", "=", "True", ",", "\n", "label_network", "=", "True", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "context_gru_fn", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/label/gru/context'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "scan_input", "=", "tf", ".", "transpose", "(", "emb_col", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "context", "=", "tf", ".", "scan", "(", "context_gru_fn", ",", "scan_input", ",", "init_hidden", ")", "\n", "\n", "ind_nd", "=", "tf", ".", "concat", "(", "[", "docs_per_query", "-", "1", ",", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "\n", "init_hidden", "=", "tf", ".", "gather_nd", "(", "context", ",", "ind_nd", ")", "\n", "\n", "", "serp_emb", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "hidden_states", "=", "tf", ".", "scan", "(", "gru", ",", "serp_emb", ",", "init_hidden", ")", "\n", "hidden_states", "=", "tf", ".", "transpose", "(", "hidden_states", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "max_emb", "]", ",", "axis", "=", "2", ")", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/label/scoring'", ",", "\n", "label_network", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ",", "\n", "inference", "=", "True", ")", "\n", "return", "tf", ".", "stop_gradient", "(", "scores", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.gru.gru.loss": [[192, 300], ["tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.zeros", "tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.transpose", "rnn_utils.get_gru_layer", "tensorflow.scan", "tensorflow.concat", "tensorflow.concat", "model_utils._create_subnetwork", "gru.max_train_docs", "gru.get_label_scores", "tensorflow.squeeze", "tensorflow.cast", "tensorflow.minimum", "tensorflow.maximum", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "rnn_utils.get_gru_layer", "tensorflow.transpose", "tensorflow.scan", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.transpose", "tensorflow.cumsum", "tensorflow.concat", "tensorflow.equal", "tensorflow.tile", "tensorflow.where", "tensorflow.zeros", "tensorflow.concat", "tensorflow.equal", "tensorflow.where", "tensorflow.sequence_mask", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.reduce_mean", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.range", "tensorflow.range", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.gru.gru.max_train_docs", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.get_label_scores", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer"], ["", "def", "loss", "(", "params", ",", "replay", ",", "rewards", ",", "doc_rewards", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "visible_dropout", "=", "params", "[", "'visible_dropout'", "]", "\n", "docs_per_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "batch_docs", "=", "replay", "[", "'serp'", "]", "\n", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "batch_size", "=", "params", "[", "'replay_batch'", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "doc_level_rewards", "=", "params", "[", "'doc_rewards'", "]", "\n", "\n", "drop_col", "=", "tf", ".", "nn", ".", "dropout", "(", "replay", "[", "'docs'", "]", ",", "visible_dropout", ")", "\n", "\n", "doc_col", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_col", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "init_hidden", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "if", "params", "[", "'context_input'", "]", ":", "\n", "    ", "context_gru_fn", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru/context'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "scan_input", "=", "tf", ".", "transpose", "(", "doc_col", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "context", "=", "tf", ".", "scan", "(", "context_gru_fn", ",", "scan_input", ",", "init_hidden", ")", "\n", "\n", "ind_nd", "=", "tf", ".", "concat", "(", "[", "docs_per_query", "-", "1", ",", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "\n", "init_hidden", "=", "tf", ".", "gather_nd", "(", "context", ",", "ind_nd", ")", "\n", "\n", "", "drop_docs", "=", "tf", ".", "nn", ".", "dropout", "(", "batch_docs", ",", "visible_dropout", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "serp_emb", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "hidden_states", "=", "tf", ".", "scan", "(", "gru", ",", "serp_emb", "[", ":", "-", "1", ",", ":", ",", ":", "]", ",", "init_hidden", ")", "\n", "hidden_states", "=", "tf", ".", "concat", "(", "[", "init_hidden", "[", "None", ",", ":", ",", ":", "]", ",", "hidden_states", "]", ",", "axis", "=", "0", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "serp_emb", "]", ",", "axis", "=", "2", ")", "\n", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ")", "\n", "\n", "\n", "scores", "=", "tf", ".", "transpose", "(", "scores", ",", "[", "1", ",", "0", ",", "2", "]", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "if", "not", "doc_level_rewards", ":", "\n", "    ", "unfiltered_mc_loss", "=", "(", "rewards", "-", "scores", ")", "**", "2.", "\n", "", "else", ":", "\n", "    ", "cum_rewards", "=", "tf", ".", "cumsum", "(", "doc_rewards", ",", "axis", "=", "1", ",", "reverse", "=", "True", ")", "\n", "unfiltered_mc_loss", "=", "(", "rewards", "-", "scores", ")", "**", "2.", "\n", "\n", "", "max_train_ind", "=", "max_train_docs", "(", "params", ",", "replay", ",", "hidden_states", ",", "doc_col", ")", "\n", "label_scores", "=", "get_label_scores", "(", "params", ",", "replay", ",", "max_train_ind", ")", "\n", "if", "not", "doc_level_rewards", ":", "\n", "    ", "q_values", "=", "tf", ".", "concat", "(", "[", "label_scores", ",", "rewards", "]", ",", "axis", "=", "1", ")", "\n", "\n", "end_mask", "=", "tf", ".", "equal", "(", "docs_per_query", "-", "1", ",", "tf", ".", "range", "(", "serp_len", ")", "[", "None", ",", ":", "]", ")", "\n", "reward_tile", "=", "tf", ".", "tile", "(", "rewards", ",", "[", "1", ",", "serp_len", "]", ")", "\n", "q_values", "=", "tf", ".", "where", "(", "end_mask", ",", "reward_tile", ",", "q_values", ")", "\n", "\n", "unfiltered_dqn_loss", "=", "(", "scores", "-", "q_values", ")", "**", "2.", "\n", "", "else", ":", "\n", "    ", "zero_end", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "1", "]", ")", "\n", "q_values", "=", "tf", ".", "concat", "(", "[", "label_scores", ",", "zero_end", "]", ",", "axis", "=", "1", ")", "\n", "end_mask", "=", "tf", ".", "equal", "(", "docs_per_query", "-", "1", ",", "tf", ".", "range", "(", "serp_len", ")", "[", "None", ",", ":", "]", ")", "\n", "q_values", "=", "tf", ".", "where", "(", "end_mask", ",", "tf", ".", "zeros_like", "(", "q_values", ")", ",", "q_values", ")", "\n", "q_values", "+=", "doc_rewards", "\n", "\n", "unfiltered_dqn_loss", "=", "(", "scores", "-", "q_values", ")", "**", "2.", "\n", "\n", "", "mask", "=", "tf", ".", "squeeze", "(", "tf", ".", "sequence_mask", "(", "docs_per_query", ",", "serp_len", ")", ",", "axis", "=", "1", ")", "\n", "query_denom", "=", "tf", ".", "cast", "(", "docs_per_query", "[", ":", ",", "0", "]", ",", "tf", ".", "float32", ")", "\n", "query_denom", "=", "tf", ".", "minimum", "(", "query_denom", ",", "serp_len", ")", "\n", "query_denom", "=", "tf", ".", "maximum", "(", "query_denom", ",", "tf", ".", "ones_like", "(", "query_denom", ")", ")", "\n", "\n", "filtered_mc_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_mc_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_mc_loss", ")", ")", "\n", "mc_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "filtered_mc_loss", ",", "axis", "=", "1", ")", "/", "query_denom", ")", "\n", "\n", "filtered_dqn_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_dqn_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_dqn_loss", ")", ")", "\n", "dqn_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "filtered_dqn_loss", ",", "axis", "=", "1", ")", "/", "query_denom", ")", "\n", "\n", "# dqn_loss = tf.Print(dqn_loss, [filtered_dqn_loss[0, j] for j in range(10)], 'dqn loss: ')", "\n", "# dqn_loss = tf.Print(dqn_loss, [query_denom[0]], 'denom: ')", "\n", "# dqn_loss = tf.Print(dqn_loss, [dqn_loss], 'total loss: ')", "\n", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'monte_carlo/loss'", ",", "mc_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/loss'", ",", "dqn_loss", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/double_max_scores'", ",", "tf", ".", "reduce_mean", "(", "label_scores", ")", ")", "\n", "\n", "return", "mc_loss", ",", "dqn_loss", "", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.PositionEpsilonGreedy.__init__": [[7, 16], ["tensorflow.zeros", "tensorflow.zeros"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "serp_len", ",", "epsilon", ",", "n_docs", ",", "split_explore", "=", "True", ")", ":", "\n", "    ", "self", ".", "serp_len", "=", "serp_len", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "n_docs", "=", "n_docs", "\n", "self", ".", "split_explore", "=", "split_explore", "\n", "self", ".", "original_doc_filter", "=", "tf", ".", "zeros", "(", "[", "n_docs", "]", ")", "\n", "self", ".", "original_pos_filter", "=", "tf", ".", "zeros", "(", "[", "1", ",", "serp_len", "]", ")", "\n", "self", ".", "doc_filter", "=", "self", ".", "original_doc_filter", "\n", "self", ".", "pos_filter", "=", "self", ".", "original_pos_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.PositionEpsilonGreedy.max_doc_ind": [[23, 25], ["tensorflow.argmax"], "methods", ["None"], ["", "def", "max_doc_ind", "(", "self", ",", "scores", ")", ":", "\n", "    ", "return", "tf", ".", "argmax", "(", "scores", "+", "self", ".", "doc_filter", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.PositionEpsilonGreedy.max_pos": [[26, 29], ["tensorflow.nn.top_k", "tensorflow.squeeze", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "max_pos", "(", "self", ",", "scores", ")", ":", "\n", "    ", "values", ",", "indices", "=", "tf", ".", "nn", ".", "top_k", "(", "scores", "+", "self", ".", "pos_filter", ",", "k", "=", "1", ")", "\n", "return", "tf", ".", "squeeze", "(", "values", ",", "axis", "=", "1", ")", ",", "tf", ".", "squeeze", "(", "indices", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.PositionEpsilonGreedy.choose": [[30, 67], ["exppos.PositionEpsilonGreedy.max_pos", "exppos.PositionEpsilonGreedy.max_doc_ind", "tensorflow.gather", "tensorflow.random_uniform", "exppos.PositionEpsilonGreedy.max_pos", "tensorflow.random_uniform", "exppos.PositionEpsilonGreedy.max_doc_ind", "tensorflow.greater_equal", "tensorflow.cond", "tensorflow.reshape", "tensorflow.cond", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.random_uniform", "tensorflow.greater_equal", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_pos", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_doc_ind", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_pos", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_doc_ind"], ["", "def", "choose", "(", "self", ",", "scores", ")", ":", "\n", "    ", "pos_values", ",", "max_pos_ind", "=", "self", ".", "max_pos", "(", "scores", ")", "\n", "max_ind", "=", "self", ".", "max_doc_ind", "(", "pos_values", ")", "\n", "max_pos", "=", "tf", ".", "gather", "(", "max_pos_ind", ",", "max_ind", ")", "\n", "\n", "noise_scores", "=", "tf", ".", "random_uniform", "(", "[", "1", ",", "self", ".", "serp_len", "]", ")", "\n", "_", ",", "noise_pos_ind", "=", "self", ".", "max_pos", "(", "noise_scores", ")", "\n", "noise_values", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "pos_values", ")", ")", "\n", "noise_ind", "=", "self", ".", "max_doc_ind", "(", "noise_values", ")", "\n", "noise_pos", "=", "noise_pos_ind", "[", "0", "]", "\n", "\n", "random_doc", "=", "tf", ".", "greater_equal", "(", "tf", ".", "random_uniform", "(", "[", "]", ")", ",", "\n", "self", ".", "epsilon", ")", "\n", "if", "self", ".", "split_explore", ":", "\n", "      ", "random_pos", "=", "tf", ".", "greater_equal", "(", "tf", ".", "random_uniform", "(", "[", "]", ")", ",", "\n", "self", ".", "epsilon", ")", "\n", "", "else", ":", "\n", "      ", "random_pos", "=", "random_doc", "\n", "\n", "", "action_ind", "=", "tf", ".", "cond", "(", "random_doc", ",", "\n", "lambda", ":", "max_ind", ",", "\n", "lambda", ":", "noise_ind", ")", "\n", "action_ind", "=", "tf", ".", "reshape", "(", "action_ind", ",", "[", "1", "]", ")", "\n", "action_pos", "=", "tf", ".", "cond", "(", "random_pos", ",", "\n", "lambda", ":", "max_pos", ",", "\n", "lambda", ":", "noise_pos", ")", "\n", "action_pos", "=", "tf", ".", "reshape", "(", "action_pos", ",", "[", "1", "]", ")", "\n", "\n", "cur_pos", "=", "tf", ".", "one_hot", "(", "action_pos", ",", "self", ".", "serp_len", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "self", ".", "pos_filter", "+=", "cur_pos", "\n", "\n", "cur_ind", "=", "tf", ".", "one_hot", "(", "action_ind", ",", "self", ".", "n_docs", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "self", ".", "doc_filter", "+=", "tf", ".", "squeeze", "(", "cur_ind", ",", "axis", "=", "0", ")", "\n", "\n", "return", "action_ind", ",", "action_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.mean_summary": [[68, 75], ["tensorflow.summary.scalar", "tensorflow.metrics.mean", "stats_ops.append", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "", "def", "mean_summary", "(", "params", ",", "name", ",", "values", ",", "stats_ops", ")", ":", "\n", "    ", "if", "params", "[", "'evaluation'", "]", ":", "\n", "      ", "mean", ",", "update", "=", "tf", ".", "metrics", ".", "mean", "(", "tf", ".", "reduce_mean", "(", "values", ")", ")", "\n", "stats_ops", ".", "append", "(", "update", ")", "\n", "", "else", ":", "\n", "      ", "mean", "=", "tf", ".", "reduce_mean", "(", "values", ")", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.model": [[76, 172], ["model_utils._get_doc_tensors", "model_utils._shared_doc_embeddings", "tensorflow.zeros", "rnn_utils.get_gru_layer", "exppos.PositionEpsilonGreedy", "range", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.gather", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.convert_to_tensor", "tensorflow.pad", "tensorflow.reshape", "tensorflow.shape", "tensorflow.tile", "tensorflow.concat", "model_utils._create_subnetwork", "range", "exppos.PositionEpsilonGreedy.choose", "tensorflow.gather", "serp.append", "serp_ind.append", "tensorflow.less", "serp_labels.append", "serp_labels[].set_shape", "serp_pos.append", "serp_pos[].set_shape", "tensorflow.nn.top_k", "tensorflow.concat", "exppos.mean_summary", "tensorflow.cond", "tensorflow.cond", "tensorflow.expand_dims", "tensorflow.gather", "tensorflow.concat", "ru.get_gru_layer.", "tensorflow.cast", "tensorflow.gather", "tensorflow.constant", "tensorflow.expand_dims", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._get_doc_tensors", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.PositionEpsilonGreedy.choose", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.mean_summary"], ["", "def", "model", "(", "params", ",", "examples", ",", "labels", ",", "epsilon", ",", "stats_ops", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "doc_emb_size", "=", "params", "[", "'doc_emb'", "]", "[", "-", "1", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "docs", "=", "mu", ".", "_get_doc_tensors", "(", "examples", ",", "params", ",", "'main'", ")", "\n", "\n", "result", "=", "{", "}", "\n", "\n", "n_docs", "=", "tf", ".", "shape", "(", "docs", ")", "[", "0", "]", "\n", "result", "[", "'docs_per_query'", "]", "=", "n_docs", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "hidden_init", "=", "tf", ".", "zeros", "(", "[", "1", ",", "hidden_state_size", "]", ")", "\n", "\n", "gru_fn", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "policy", "=", "PositionEpsilonGreedy", "(", "serp_len", ",", "epsilon", ",", "n_docs", ")", "\n", "\n", "hidden_state", "=", "hidden_init", "#tf.zeros([n_docs, hidden_state_size])", "\n", "serp", "=", "[", "]", "\n", "serp_pos", "=", "[", "]", "\n", "serp_labels", "=", "[", "]", "\n", "serp_ind", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "hidden_states", "=", "tf", ".", "tile", "(", "hidden_state", ",", "[", "n_docs", ",", "1", "]", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "doc_emb", "]", ",", "axis", "=", "1", ")", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "inference", "=", "True", ")", "\n", "for", "j", "in", "range", "(", "serp_len", ")", ":", "\n", "      ", "mean_summary", "(", "params", ",", "'policy_%d/pos_%d'", "%", "(", "i", ",", "j", ")", ",", "scores", "[", ":", ",", "j", "]", ",", "stats_ops", ")", "\n", "\n", "", "action_ind", ",", "action_pos", "=", "policy", ".", "choose", "(", "scores", ")", "\n", "select_doc", "=", "tf", ".", "gather", "(", "docs", ",", "action_ind", ")", "\n", "\n", "serp", ".", "append", "(", "select_doc", ")", "\n", "serp_ind", ".", "append", "(", "action_ind", ")", "\n", "\n", "in_doc", "=", "tf", ".", "less", "(", "i", ",", "n_docs", ")", "\n", "serp_labels", ".", "append", "(", "tf", ".", "cond", "(", "\n", "in_doc", ",", "\n", "lambda", ":", "tf", ".", "gather", "(", "labels", ",", "action_ind", ",", "axis", "=", "0", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "[", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", ")", ")", "\n", "serp_labels", "[", "-", "1", "]", ".", "set_shape", "(", "[", "1", ",", "1", "]", ")", "\n", "serp_pos", ".", "append", "(", "tf", ".", "cond", "(", "\n", "in_doc", ",", "\n", "lambda", ":", "tf", ".", "expand_dims", "(", "action_pos", ",", "axis", "=", "1", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "[", "[", "serp_len", "]", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", ")", ")", "\n", "serp_pos", "[", "-", "1", "]", ".", "set_shape", "(", "[", "1", ",", "1", "]", ")", "\n", "\n", "\n", "if", "i", "<", "serp_len", "-", "1", ":", "\n", "      ", "a_pos", "=", "tf", ".", "expand_dims", "(", "tf", ".", "cast", "(", "action_pos", ",", "tf", ".", "float32", ")", ",", "axis", "=", "1", ")", "\n", "a_doc", "=", "tf", ".", "gather", "(", "doc_emb", ",", "action_ind", ")", "\n", "gru_input", "=", "tf", ".", "concat", "(", "[", "a_doc", ",", "a_pos", "]", ",", "axis", "=", "1", ")", "\n", "hidden_state", "=", "gru_fn", "(", "hidden_state", ",", "gru_input", ")", "\n", "\n", "", "", "pos_order", "=", "tf", ".", "concat", "(", "serp_pos", ",", "axis", "=", "1", ")", "\n", "\n", "order_ind", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "pos_order", ",", "serp_len", ")", "[", "1", "]", "\n", "# order_ind.set_shape()", "\n", "unordered_labels", "=", "tf", ".", "squeeze", "(", "tf", ".", "concat", "(", "serp_labels", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "ordered_labels", "=", "tf", ".", "gather", "(", "unordered_labels", ",", "order_ind", ")", "\n", "\n", "result", "[", "'serp'", "]", "=", "tf", ".", "stack", "(", "serp", ",", "axis", "=", "1", ")", "\n", "result", "[", "'serp_ind'", "]", "=", "tf", ".", "stack", "(", "serp_ind", ",", "axis", "=", "1", ")", "\n", "result", "[", "'serp_doc'", "]", "=", "tf", ".", "stack", "(", "serp_ind", ",", "axis", "=", "1", ")", "\n", "result", "[", "'labels'", "]", "=", "ordered_labels", "\n", "result", "[", "'select_order_labels'", "]", "=", "unordered_labels", "[", "None", ",", ":", "]", "\n", "# pos_order = tf.Print(pos_order, [unordered_labels[i] for i in range(10)], 'unordered: ')", "\n", "# pos_order = tf.Print(pos_order, [pos_order[0, i] for i in range(10)], 'reranking: ')", "\n", "# pos_order = tf.Print(pos_order, [result['labels'][0, i] for i in range(10)], 'ordered: ')", "\n", "# pos_order = tf.Print(pos_order, [n_docs], '                        ')", "\n", "result", "[", "'pos_order'", "]", "=", "pos_order", "\n", "\n", "\n", "# tf.summary.histogram(\"label/output\", result['labels'])", "\n", "\n", "# if params['context_input']:", "\n", "max_docs", "=", "params", "[", "'max_docs'", "]", "\n", "padding", "=", "tf", ".", "convert_to_tensor", "(", "[", "[", "0", ",", "max_docs", "-", "n_docs", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "padded_docs", "=", "tf", ".", "pad", "(", "docs", ",", "padding", ",", "\"CONSTANT\"", ")", "\n", "padded_docs", "=", "tf", ".", "reshape", "(", "padded_docs", ",", "[", "1", ",", "max_docs", ",", "docs", ".", "shape", "[", "1", "]", ".", "value", "]", ")", "\n", "result", "[", "'docs'", "]", "=", "padded_docs", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.max_train_filter": [[173, 210], ["tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.concat", "model_utils._create_subnetwork", "tensorflow.expand_dims", "tensorflow.one_hot", "tensorflow.cumsum", "tensorflow.one_hot", "tensorflow.expand_dims", "tensorflow.sequence_mask", "tensorflow.where", "tensorflow.nn.top_k", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.cumsum", "tensorflow.zeros_like", "tensorflow.fill", "tensorflow.argmax"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "max_train_filter", "(", "params", ",", "hidden_states", ",", "serp_len", ",", "doc_col", ",", "\n", "serp_ind", ",", "pos_order", ",", "docs_in_query", ",", "max_n_docs", ")", ":", "\n", "  ", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "hidden_states", "=", "tf", ".", "transpose", "(", "hidden_states", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "max_states", "=", "tf", ".", "expand_dims", "(", "hidden_states", "[", ":", ",", ":", "serp_len", "-", "1", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "max_states", "=", "tf", ".", "tile", "(", "max_states", ",", "[", "1", ",", "1", ",", "max_n_docs", ",", "1", "]", ")", "\n", "max_col", "=", "tf", ".", "expand_dims", "(", "doc_col", ",", "axis", "=", "1", ")", "\n", "max_col", "=", "tf", ".", "tile", "(", "max_col", ",", "[", "1", ",", "serp_len", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "max_states", ",", "max_col", "]", ",", "axis", "=", "3", ")", "\n", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ")", "\n", "pos_filter", "=", "tf", ".", "expand_dims", "(", "pos_order", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "2", ")", "\n", "pos_filter", "=", "tf", ".", "one_hot", "(", "pos_filter", ",", "serp_len", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "pos_filter", "=", "tf", ".", "cumsum", "(", "pos_filter", ",", "axis", "=", "1", ")", "\n", "doc_filter", "=", "tf", ".", "one_hot", "(", "serp_ind", "[", ":", ",", ":", "-", "1", "]", ",", "max_n_docs", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "doc_filter", "=", "tf", ".", "expand_dims", "(", "tf", ".", "cumsum", "(", "doc_filter", ",", "axis", "=", "1", ")", ",", "axis", "=", "3", ")", "\n", "n_doc_filter", "=", "tf", ".", "sequence_mask", "(", "docs_in_query", ",", "max_n_docs", ")", "\n", "n_doc_filter", "=", "tf", ".", "where", "(", "n_doc_filter", ",", "\n", "tf", ".", "zeros_like", "(", "n_doc_filter", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "fill", "(", "n_doc_filter", ".", "shape", ",", "np", ".", "NINF", ")", ")", "\n", "doc_filter", "=", "doc_filter", "+", "n_doc_filter", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "score_filter", "=", "pos_filter", "+", "doc_filter", "\n", "\n", "pos_scores", ",", "pos_ind", "=", "tf", ".", "nn", ".", "top_k", "(", "scores", "+", "score_filter", ",", "k", "=", "1", ")", "\n", "doc_ind", "=", "tf", ".", "argmax", "(", "pos_scores", ",", "axis", "=", "2", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "unfilter_pos", "=", "tf", ".", "one_hot", "(", "pos_ind", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "serp_len", ")", "\n", "doc_filter", "=", "tf", ".", "one_hot", "(", "doc_ind", ",", "max_n_docs", ")", "\n", "\n", "return", "doc_filter", "[", ":", ",", ":", ",", ":", ",", "None", "]", "*", "unfilter_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.get_label_scores": [[211, 256], ["tensorflow.zeros", "model_utils._shared_doc_embeddings", "model_utils._shared_doc_embeddings", "tensorflow.transpose", "rnn_utils.get_gru_layer", "tensorflow.transpose", "tensorflow.concat", "tensorflow.scan", "tensorflow.transpose", "tensorflow.tile", "tensorflow.tile", "tensorflow.concat", "model_utils._create_subnetwork", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "get_label_scores", "(", "params", ",", "replay", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "all_docs", "=", "replay", "[", "'docs'", "]", "\n", "batch_docs", "=", "replay", "[", "'serp'", "]", "\n", "batch_pos", "=", "replay", "[", "'pos_order'", "]", "\n", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "n_docs", "=", "batch_docs", ".", "shape", "[", "0", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "\n", "init_hidden", "=", "tf", ".", "zeros", "(", "[", "n_docs", ",", "hidden_state_size", "]", ")", "\n", "\n", "doc_col", "=", "mu", ".", "_shared_doc_embeddings", "(", "all_docs", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "batch_docs", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "serp_emb", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/label/gru'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "pos", "=", "tf", ".", "cast", "(", "batch_pos", ",", "tf", ".", "float32", ")", "[", ":", ",", ":", "-", "1", ",", "None", "]", "\n", "pos", "=", "tf", ".", "transpose", "(", "pos", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru_input", "=", "tf", ".", "concat", "(", "[", "serp_emb", ",", "pos", "]", ",", "axis", "=", "2", ")", "\n", "hidden_states", "=", "tf", ".", "scan", "(", "gru", ",", "gru_input", ",", "init_hidden", ")", "\n", "hidden_states", "=", "tf", ".", "transpose", "(", "hidden_states", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "tiled_states", "=", "tf", ".", "tile", "(", "hidden_states", "[", ":", ",", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "1", ",", "max_n_docs", ",", "1", "]", ")", "\n", "tiled_docs", "=", "tf", ".", "tile", "(", "doc_col", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "[", "1", ",", "serp_len", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "tiled_states", ",", "tiled_docs", "]", ",", "axis", "=", "3", ")", "\n", "return", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/label/scoring'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.loss": [[258, 349], ["tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.zeros", "tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.transpose", "rnn_utils.get_gru_layer", "tensorflow.expand_dims", "tensorflow.transpose", "tensorflow.concat", "tensorflow.scan", "tensorflow.concat", "tensorflow.concat", "model_utils._create_subnetwork", "tensorflow.transpose", "tensorflow.one_hot", "tensorflow.reduce_sum", "exppos.max_train_filter", "exppos.get_label_scores", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.equal", "tensorflow.tile", "tensorflow.where", "tensorflow.cast", "tensorflow.squeeze", "tensorflow.where", "tensorflow.where", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.sequence_mask", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.exppos.exppos.max_train_filter", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.get_label_scores"], ["", "def", "loss", "(", "params", ",", "replay", ",", "rewards", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "visible_dropout", "=", "params", "[", "'visible_dropout'", "]", "\n", "docs_in_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "batch_docs", "=", "replay", "[", "'serp'", "]", "\n", "batch_pos", "=", "replay", "[", "'pos_order'", "]", "\n", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "n_docs", "=", "batch_docs", ".", "shape", "[", "0", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "\n", "drop_col", "=", "tf", ".", "nn", ".", "dropout", "(", "replay", "[", "'docs'", "]", ",", "visible_dropout", ")", "\n", "\n", "doc_col", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_col", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "init_hidden", "=", "tf", ".", "zeros", "(", "[", "n_docs", ",", "hidden_state_size", "]", ")", "\n", "\n", "drop_docs", "=", "tf", ".", "nn", ".", "dropout", "(", "batch_docs", ",", "visible_dropout", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "serp_emb", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "pos", "=", "tf", ".", "expand_dims", "(", "tf", ".", "cast", "(", "batch_pos", ",", "tf", ".", "float32", ")", ",", "axis", "=", "2", ")", "\n", "pos", "=", "tf", ".", "transpose", "(", "pos", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru_input", "=", "tf", ".", "concat", "(", "[", "serp_emb", ",", "pos", "]", ",", "axis", "=", "2", ")", "\n", "hidden_states", "=", "tf", ".", "scan", "(", "gru", ",", "gru_input", ",", "init_hidden", ")", "\n", "score_states", "=", "tf", ".", "concat", "(", "[", "init_hidden", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "hidden_states", "[", ":", "-", "1", ",", ":", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "score_states", ",", "serp_emb", "]", ",", "axis", "=", "2", ")", "\n", "pos_scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ")", "\n", "pos_scores", "=", "tf", ".", "transpose", "(", "pos_scores", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "pos_filter", "=", "tf", ".", "one_hot", "(", "batch_pos", ",", "serp_len", ")", "\n", "\n", "scores", "=", "tf", ".", "reduce_sum", "(", "pos_scores", "*", "pos_filter", ",", "axis", "=", "2", ")", "\n", "unfiltered_mc_loss", "=", "(", "rewards", "-", "scores", ")", "**", "2", "\n", "\n", "max_filter", "=", "max_train_filter", "(", "params", ",", "hidden_states", ",", "serp_len", ",", "\n", "doc_col", ",", "replay", "[", "'serp_ind'", "]", ",", "\n", "batch_pos", ",", "docs_in_query", ",", "max_n_docs", ")", "\n", "\n", "label_scores", "=", "get_label_scores", "(", "params", ",", "replay", ")", "\n", "\n", "double_max_scores", "=", "tf", ".", "reduce_sum", "(", "max_filter", "*", "label_scores", ",", "axis", "=", "[", "2", ",", "3", "]", ")", "\n", "q_values", "=", "tf", ".", "concat", "(", "[", "double_max_scores", ",", "rewards", "]", ",", "axis", "=", "1", ")", "\n", "\n", "end_mask", "=", "tf", ".", "equal", "(", "docs_in_query", "-", "1", ",", "\n", "tf", ".", "range", "(", "serp_len", ")", "[", "None", ",", ":", "]", ")", "\n", "reward_tile", "=", "tf", ".", "tile", "(", "rewards", ",", "[", "1", ",", "serp_len", "]", ")", "\n", "q_values", "=", "tf", ".", "where", "(", "end_mask", ",", "reward_tile", ",", "q_values", ")", "\n", "\n", "unfiltered_dqn_loss", "=", "(", "scores", "-", "q_values", ")", "**", "2", "\n", "\n", "doc_denom", "=", "tf", ".", "cast", "(", "tf", ".", "reduce_sum", "(", "docs_in_query", ")", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "squeeze", "(", "tf", ".", "sequence_mask", "(", "docs_in_query", ",", "serp_len", ")", ",", "axis", "=", "1", ")", "\n", "\n", "filtered_mc_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_mc_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_mc_loss", ")", ")", "\n", "mc_loss", "=", "tf", ".", "reduce_sum", "(", "filtered_mc_loss", ")", "/", "doc_denom", "\n", "\n", "filtered_dqn_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_dqn_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_dqn_loss", ")", ")", "\n", "dqn_loss", "=", "tf", ".", "reduce_sum", "(", "filtered_dqn_loss", ")", "/", "doc_denom", "\n", "\n", "# dqn_loss = tf.Print(dqn_loss, [scores[0,i] for i in range(10)], 'Scores:')", "\n", "# dqn_loss = tf.Print(dqn_loss, [q_values[0,i] for i in range(10)], 'Q_values:')", "\n", "# dqn_loss = tf.Print(dqn_loss, [unfiltered_dqn_loss[0,i] for i in range(10)], 'Loss:')", "\n", "# dqn_loss = tf.Print(dqn_loss, [n_docs], 'DQN:')", "\n", "# mc_loss = tf.Print(mc_loss, [n_docs], 'MC:')", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'monte_carlo/loss'", ",", "mc_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/loss'", ",", "dqn_loss", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/double_max_scores'", ",", "tf", ".", "reduce_mean", "(", "double_max_scores", ")", ")", "\n", "\n", "return", "mc_loss", ",", "dqn_loss", "", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.__init__": [[7, 17], ["tensorflow.zeros", "tensorflow.sequence_mask", "tensorflow.where", "tensorflow.zeros", "tensorflow.fill"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "serp_len", ",", "epsilon", ",", "batch_size", ",", "batch_max_docs", ",", "docs_per_query", ")", ":", "\n", "    ", "self", ".", "serp_len", "=", "serp_len", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "n_docs", "=", "batch_max_docs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "pos_filter", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "serp_len", "]", ")", "\n", "n_doc_filter", "=", "tf", ".", "sequence_mask", "(", "docs_per_query", "[", ":", ",", "0", "]", ",", "batch_max_docs", ")", "\n", "self", ".", "doc_filter", "=", "tf", ".", "where", "(", "n_doc_filter", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "batch_max_docs", "]", ")", ",", "\n", "tf", ".", "fill", "(", "[", "batch_size", ",", "batch_max_docs", "]", ",", "np", ".", "NINF", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_doc_ind": [[18, 20], ["tensorflow.argmax"], "methods", ["None"], ["", "def", "max_doc_ind", "(", "self", ",", "scores", ")", ":", "\n", "    ", "return", "tf", ".", "argmax", "(", "scores", "+", "self", ".", "doc_filter", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_pos": [[21, 23], ["tensorflow.argmax"], "methods", ["None"], ["", "def", "max_pos", "(", "self", ",", "scores", ")", ":", "\n", "    ", "return", "tf", ".", "argmax", "(", "scores", "+", "self", ".", "pos_filter", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.choose_doc": [[24, 40], ["seppos.PositionEpsilonGreedy.max_doc_ind", "tensorflow.random_uniform", "seppos.PositionEpsilonGreedy.max_doc_ind", "tensorflow.greater_equal", "tensorflow.where", "tensorflow.one_hot", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_doc_ind", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_doc_ind"], ["", "def", "choose_doc", "(", "self", ",", "scores", ")", ":", "\n", "    ", "max_ind", "=", "self", ".", "max_doc_ind", "(", "scores", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "noise", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "batch_size", ",", "self", ".", "n_docs", "]", ")", "\n", "noise_ind", "=", "self", ".", "max_doc_ind", "(", "noise", ")", "\n", "\n", "random_doc", "=", "tf", ".", "greater_equal", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "batch_size", "]", ")", ",", "\n", "self", ".", "epsilon", ")", "\n", "action_ind", "=", "tf", ".", "where", "(", "random_doc", ",", "\n", "max_ind", ",", "\n", "noise_ind", ")", "\n", "\n", "cur_ind", "=", "tf", ".", "one_hot", "(", "action_ind", ",", "self", ".", "n_docs", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "self", ".", "doc_filter", "+=", "cur_ind", "\n", "\n", "return", "action_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.choose_pos": [[41, 58], ["seppos.PositionEpsilonGreedy.max_pos", "tensorflow.random_uniform", "seppos.PositionEpsilonGreedy.max_pos", "tensorflow.greater_equal", "tensorflow.where", "tensorflow.one_hot", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_pos", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.max_pos"], ["", "def", "choose_pos", "(", "self", ",", "scores", ")", ":", "\n", "    ", "max_pos", "=", "self", ".", "max_pos", "(", "scores", ")", "\n", "noise", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "batch_size", ",", "self", ".", "serp_len", "]", ")", "\n", "noise_pos", "=", "self", ".", "max_pos", "(", "noise", ")", "\n", "\n", "random_pos", "=", "tf", ".", "greater_equal", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "batch_size", "]", ")", ",", "\n", "self", ".", "epsilon", ")", "\n", "\n", "action_pos", "=", "tf", ".", "where", "(", "random_pos", ",", "max_pos", ",", "noise_pos", ")", "\n", "\n", "# action_pos = tf.Print(action_pos, [max_pos, noise_pos, action_pos], 'pos: ')", "\n", "\n", "cur_pos", "=", "tf", ".", "one_hot", "(", "action_pos", ",", "self", ".", "serp_len", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "self", ".", "pos_filter", "+=", "cur_pos", "\n", "\n", "return", "action_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.mean_summary": [[59, 66], ["tensorflow.summary.scalar", "tensorflow.metrics.mean", "stats_ops.append", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "", "def", "mean_summary", "(", "params", ",", "name", ",", "values", ",", "stats_ops", ")", ":", "\n", "    ", "if", "params", "[", "'evaluation'", "]", ":", "\n", "      ", "mean", ",", "update", "=", "tf", ".", "metrics", ".", "mean", "(", "tf", ".", "reduce_mean", "(", "values", ")", ")", "\n", "stats_ops", ".", "append", "(", "update", ")", "\n", "", "else", ":", "\n", "      ", "mean", "=", "tf", ".", "reduce_mean", "(", "values", ")", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.model": [[67, 181], ["model_utils._shared_doc_embeddings", "tensorflow.zeros", "rnn_utils.get_gru_layer", "seppos.PositionEpsilonGreedy", "range", "tensorflow.stack", "tensorflow.nn.top_k", "tensorflow.stack", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.reshape", "tensorflow.stack", "tensorflow.stack", "tensorflow.convert_to_tensor", "tensorflow.pad", "tensorflow.reshape", "tensorflow.shape", "tensorflow.tile", "tensorflow.concat", "model_utils._create_subnetwork", "seppos.PositionEpsilonGreedy.choose_doc", "tensorflow.stack", "tensorflow.gather_nd", "serp.append", "serp_ind.append", "tensorflow.gather_nd", "tensorflow.concat", "model_utils._create_subnetwork", "seppos.mean_summary", "range", "seppos.PositionEpsilonGreedy.choose_pos", "tensorflow.less", "serp_labels.append", "serp_pos.append", "tensorflow.gather_nd", "seppos.mean_summary", "tensorflow.where", "tensorflow.where", "tensorflow.concat", "ru.get_gru_layer.", "tensorflow.range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.range", "tensorflow.gather_nd", "tensorflow.zeros", "tensorflow.fill", "tensorflow.cast", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.choose_doc", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.mean_summary", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.PositionEpsilonGreedy.choose_pos", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.mean_summary"], ["", "def", "model", "(", "params", ",", "examples", ",", "labels", ",", "epsilon", ",", "stats_ops", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "doc_emb_size", "=", "params", "[", "'doc_emb'", "]", "[", "-", "1", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "docs", "=", "examples", "[", "'doc_tensors'", "]", "\n", "batch_size", "=", "docs", ".", "shape", "[", "0", "]", ".", "value", "\n", "batch_max_docs", "=", "tf", ".", "shape", "(", "docs", ")", "[", "1", "]", "\n", "docs_per_query", "=", "examples", "[", "'n_docs'", "]", "\n", "\n", "result", "=", "{", "\n", "'docs_per_query'", ":", "docs_per_query", ",", "\n", "}", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "True", ")", "\n", "\n", "hidden_init", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "\n", "gru_fn", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "policy", "=", "PositionEpsilonGreedy", "(", "serp_len", ",", "epsilon", ",", "batch_size", ",", "\n", "batch_max_docs", ",", "docs_per_query", ")", "\n", "\n", "hidden_state", "=", "hidden_init", "\n", "serp", "=", "[", "]", "\n", "serp_pos", "=", "[", "]", "\n", "serp_labels", "=", "[", "]", "\n", "serp_ind", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "hidden_states", "=", "tf", ".", "tile", "(", "hidden_state", "[", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "batch_max_docs", ",", "1", "]", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "doc_emb", "]", ",", "axis", "=", "2", ")", "\n", "doc_scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring/doc'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "inference", "=", "True", ",", "\n", "n_output", "=", "1", ")", "\n", "\n", "action_ind", "=", "policy", ".", "choose_doc", "(", "doc_scores", ")", "\n", "\n", "ind_nd", "=", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "action_ind", "]", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "select_doc", "=", "tf", ".", "gather_nd", "(", "docs", ",", "ind_nd", ")", "\n", "\n", "serp", ".", "append", "(", "select_doc", ")", "\n", "serp_ind", ".", "append", "(", "action_ind", ")", "\n", "\n", "select_emb", "=", "tf", ".", "gather_nd", "(", "doc_emb", ",", "ind_nd", ")", "\n", "pos_input", "=", "tf", ".", "concat", "(", "[", "hidden_state", ",", "select_emb", "]", ",", "axis", "=", "1", ")", "\n", "pos_scores", "=", "mu", ".", "_create_subnetwork", "(", "pos_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring/pos'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "inference", "=", "True", ",", "\n", "n_output", "=", "10", ")", "\n", "# pos_scores = tf.Print(pos_scores, [pos_scores[0,x] for x in range(10)], 'scores %d: ' % i)", "\n", "\n", "mean_summary", "(", "params", ",", "'policy_%d/doc'", "%", "i", ",", "\n", "tf", ".", "gather_nd", "(", "doc_scores", ",", "ind_nd", ")", ",", "stats_ops", ")", "\n", "for", "j", "in", "range", "(", "serp_len", ")", ":", "\n", "      ", "mean_summary", "(", "params", ",", "'policy_%d/pos_%d'", "%", "(", "i", ",", "j", ")", ",", "\n", "pos_scores", "[", ":", ",", "j", "]", ",", "stats_ops", ")", "\n", "\n", "", "action_pos", "=", "policy", ".", "choose_pos", "(", "pos_scores", ")", "\n", "# if i == 0:", "\n", "#   action_pos = tf.Print(action_pos, [pos_scores[0,x] for x in range(10)], 'pos_scores: ')", "\n", "#   action_pos = tf.Print(action_pos, [action_pos], 'pos: ')", "\n", "\n", "in_doc", "=", "tf", ".", "less", "(", "i", ",", "docs_per_query", "[", ":", ",", "0", "]", ")", "\n", "serp_labels", ".", "append", "(", "tf", ".", "where", "(", "\n", "in_doc", ",", "\n", "tf", ".", "gather_nd", "(", "labels", ",", "ind_nd", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", ")", ")", "\n", "serp_pos", ".", "append", "(", "tf", ".", "where", "(", "\n", "in_doc", ",", "\n", "action_pos", ",", "\n", "tf", ".", "fill", "(", "[", "batch_size", "]", ",", "tf", ".", "cast", "(", "serp_len", ",", "dtype", "=", "tf", ".", "int64", ")", ")", ",", "\n", ")", ")", "\n", "\n", "if", "i", "<", "serp_len", "-", "1", ":", "\n", "      ", "a_pos", "=", "tf", ".", "cast", "(", "action_pos", ",", "tf", ".", "float32", ")", "[", ":", ",", "None", "]", "\n", "gru_input", "=", "tf", ".", "concat", "(", "[", "select_emb", ",", "a_pos", "]", ",", "axis", "=", "1", ")", "\n", "hidden_state", "=", "gru_fn", "(", "hidden_state", ",", "gru_input", ")", "\n", "\n", "", "", "pos_order", "=", "tf", ".", "stack", "(", "serp_pos", ",", "axis", "=", "1", ")", "\n", "_", ",", "order_ind", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "pos_order", ",", "serp_len", ")", "\n", "unordered_labels", "=", "tf", ".", "stack", "(", "serp_labels", ",", "axis", "=", "1", ")", "\n", "batch_ind_nd", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "serp_len", "]", ")", "\n", "order_ind_nd", "=", "tf", ".", "stack", "(", "[", "tf", ".", "reshape", "(", "batch_ind_nd", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "order_ind", ",", "[", "-", "1", "]", ")", "]", ",", "\n", "axis", "=", "1", ")", "\n", "ordered_labels", "=", "tf", ".", "gather_nd", "(", "unordered_labels", ",", "order_ind_nd", ")", "\n", "ordered_labels", "=", "tf", ".", "reshape", "(", "ordered_labels", ",", "[", "batch_size", ",", "serp_len", "]", ")", "\n", "\n", "result", "[", "'serp'", "]", "=", "tf", ".", "stack", "(", "serp", ",", "axis", "=", "1", ")", "\n", "result", "[", "'serp_ind'", "]", "=", "tf", ".", "stack", "(", "serp_ind", ",", "axis", "=", "1", ")", "\n", "result", "[", "'labels'", "]", "=", "ordered_labels", "\n", "result", "[", "'select_order_labels'", "]", "=", "unordered_labels", "\n", "result", "[", "'pos_order'", "]", "=", "pos_order", "\n", "\n", "max_docs", "=", "params", "[", "'max_docs'", "]", "\n", "padding", "=", "tf", ".", "convert_to_tensor", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "max_docs", "-", "batch_max_docs", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "padded_docs", "=", "tf", ".", "pad", "(", "docs", ",", "padding", ",", "\"CONSTANT\"", ")", "\n", "padded_docs", "=", "tf", ".", "reshape", "(", "padded_docs", ",", "[", "batch_size", ",", "max_docs", ",", "docs", ".", "shape", "[", "2", "]", ".", "value", "]", ")", "\n", "result", "[", "'docs'", "]", "=", "padded_docs", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.max_train_doc_pos": [[182, 226], ["tensorflow.tile", "tensorflow.tile", "tensorflow.concat", "tensorflow.one_hot", "tensorflow.cumsum", "tensorflow.sequence_mask", "tensorflow.where", "tensorflow.argmax", "tensorflow.concat", "model_utils._create_subnetwork", "tensorflow.one_hot", "tensorflow.cumsum", "tensorflow.concat", "tensorflow.argmax", "model_utils._create_subnetwork", "tensorflow.zeros", "tensorflow.fill", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "max_train_doc_pos", "(", "params", ",", "hidden_states", ",", "serp_emb", ",", "serp_len", ",", "doc_col", ",", "\n", "serp_ind", ",", "pos_order", ",", "docs_per_query", ",", "max_n_docs", ")", ":", "\n", "  ", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "batch_size", "=", "hidden_states", ".", "shape", "[", "0", "]", "\n", "\n", "doc_states", "=", "tf", ".", "tile", "(", "hidden_states", "[", ":", ",", "1", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "1", ",", "max_n_docs", ",", "1", "]", ")", "\n", "max_col", "=", "tf", ".", "tile", "(", "doc_col", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "[", "1", ",", "serp_len", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "doc_input", "=", "tf", ".", "concat", "(", "[", "doc_states", ",", "max_col", "]", ",", "axis", "=", "3", ")", "\n", "\n", "doc_scores", "=", "mu", ".", "_create_subnetwork", "(", "doc_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring/doc'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "\n", "doc_filter", "=", "tf", ".", "one_hot", "(", "serp_ind", "[", ":", ",", ":", "-", "1", "]", ",", "max_n_docs", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "doc_filter", "=", "tf", ".", "cumsum", "(", "doc_filter", ",", "axis", "=", "1", ")", "\n", "n_doc_filter", "=", "tf", ".", "sequence_mask", "(", "docs_per_query", ",", "max_n_docs", ")", "\n", "n_doc_filter", "=", "tf", ".", "where", "(", "n_doc_filter", ",", "\n", "tf", ".", "zeros", "(", "n_doc_filter", ".", "shape", ")", ",", "\n", "tf", ".", "fill", "(", "n_doc_filter", ".", "shape", ",", "np", ".", "NINF", ")", ")", "\n", "max_doc_ind", "=", "tf", ".", "argmax", "(", "doc_scores", "+", "doc_filter", "+", "n_doc_filter", ",", "axis", "=", "2", ")", "\n", "\n", "pos_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "serp_emb", "]", ",", "axis", "=", "2", ")", "\n", "pos_scores", "=", "mu", ".", "_create_subnetwork", "(", "pos_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring/pos'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ",", "\n", "n_output", "=", "10", ")", "\n", "\n", "pos_filter", "=", "tf", ".", "one_hot", "(", "pos_order", "[", ":", ",", ":", "-", "1", "]", ",", "serp_len", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "pos_filter", "=", "tf", ".", "cumsum", "(", "pos_filter", ",", "axis", "=", "1", ")", "\n", "pos_filter", "=", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "[", "batch_size", ",", "1", ",", "serp_len", "]", ")", ",", "\n", "pos_filter", "]", ",", "axis", "=", "1", ")", "\n", "\n", "max_pos", "=", "tf", ".", "argmax", "(", "pos_scores", "+", "pos_filter", ",", "axis", "=", "2", ")", "\n", "\n", "return", "max_doc_ind", ",", "max_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.get_label_scores": [[227, 297], ["tensorflow.zeros", "model_utils._shared_doc_embeddings", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.reshape", "model_utils._shared_doc_embeddings", "tensorflow.transpose", "rnn_utils.get_gru_layer", "tensorflow.transpose", "tensorflow.concat", "tensorflow.scan", "tensorflow.transpose", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "model_utils._create_subnetwork", "tensorflow.tile", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.reshape", "tensorflow.cast", "model_utils._create_subnetwork", "tensorflow.range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.range", "tensorflow.range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "get_label_scores", "(", "params", ",", "replay", ",", "max_doc_ind", ",", "max_pos", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "all_docs", "=", "replay", "[", "'docs'", "]", "\n", "batch_docs", "=", "replay", "[", "'serp'", "]", "\n", "batch_pos", "=", "replay", "[", "'pos_order'", "]", "\n", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "batch_size", "=", "all_docs", ".", "shape", "[", "0", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "\n", "init_hidden", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "batch_docs", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "batch_ind_nd", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "serp_len", "-", "1", "]", ")", "\n", "doc_ind_nd", "=", "tf", ".", "stack", "(", "[", "tf", ".", "reshape", "(", "batch_ind_nd", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "max_doc_ind", ",", "[", "-", "1", "]", ")", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "max_docs", "=", "tf", ".", "gather_nd", "(", "all_docs", ",", "doc_ind_nd", ")", "\n", "max_docs", "=", "tf", ".", "reshape", "(", "max_docs", ",", "[", "batch_size", ",", "serp_len", "-", "1", ",", "all_docs", ".", "shape", "[", "2", "]", "]", ")", "\n", "\n", "max_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "max_docs", ",", "params", ",", "\n", "'/label/doc_emb'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "serp_emb", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/label/gru'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "pos", "=", "tf", ".", "cast", "(", "batch_pos", ",", "tf", ".", "float32", ")", "[", ":", ",", ":", "-", "1", ",", "None", "]", "\n", "pos", "=", "tf", ".", "transpose", "(", "pos", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru_input", "=", "tf", ".", "concat", "(", "[", "serp_emb", "[", ":", "-", "1", ",", ":", ",", ":", "]", ",", "pos", "]", ",", "axis", "=", "2", ")", "\n", "hidden_states", "=", "tf", ".", "scan", "(", "gru", ",", "gru_input", ",", "init_hidden", ")", "\n", "hidden_states", "=", "tf", ".", "transpose", "(", "hidden_states", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "max_emb", "]", ",", "axis", "=", "2", ")", "\n", "doc_scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/label/scoring/doc'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "pos_states", "=", "tf", ".", "concat", "(", "[", "init_hidden", "[", ":", ",", "None", ",", ":", "]", ",", "hidden_states", "]", ",", "axis", "=", "1", ")", "\n", "pos_input", "=", "tf", ".", "concat", "(", "[", "pos_states", ",", "doc_emb", "]", ",", "axis", "=", "2", ")", "\n", "pos_scores", "=", "mu", ".", "_create_subnetwork", "(", "pos_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/label/scoring/pos'", ",", "\n", "label_network", "=", "True", ",", "\n", "inference", "=", "True", ",", "\n", "reuse_variable_scope", "=", "False", ",", "\n", "n_output", "=", "10", ")", "\n", "\n", "batch_ind_nd", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "serp_len", "]", ")", "\n", "serp_ind_nd", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "serp_len", ",", "dtype", "=", "tf", ".", "int64", ")", "[", "None", ",", ":", "]", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "pos_ind_nd", "=", "tf", ".", "stack", "(", "[", "tf", ".", "reshape", "(", "batch_ind_nd", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "serp_ind_nd", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "max_pos", ",", "[", "-", "1", "]", ")", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "pos_scores", "=", "tf", ".", "gather_nd", "(", "pos_scores", ",", "pos_ind_nd", ")", "\n", "pos_scores", "=", "tf", ".", "reshape", "(", "pos_scores", ",", "[", "batch_size", ",", "serp_len", "]", ")", "\n", "\n", "return", "doc_scores", ",", "pos_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.loss": [[298, 428], ["tensorflow.squeeze", "tensorflow.zeros", "tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.nn.dropout", "model_utils._shared_doc_embeddings", "tensorflow.transpose", "rnn_utils.get_gru_layer", "tensorflow.transpose", "tensorflow.concat", "tensorflow.scan", "tensorflow.concat", "tensorflow.transpose", "tensorflow.concat", "model_utils._create_subnetwork", "tensorflow.where", "tensorflow.tile", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.reshape", "seppos.max_train_doc_pos", "seppos.get_label_scores", "tensorflow.cast", "tensorflow.minimum", "tensorflow.maximum", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.sequence_mask", "tensorflow.cast", "model_utils._create_subnetwork", "tensorflow.zeros_like", "tensorflow.cumsum", "tensorflow.concat", "tensorflow.equal", "tensorflow.tile", "tensorflow.where", "tensorflow.zeros", "tensorflow.concat", "tensorflow.equal", "tensorflow.where", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.range", "tensorflow.range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.range", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.rnn_utils.get_gru_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.max_train_doc_pos", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.seppos.seppos.get_label_scores", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "loss", "(", "params", ",", "replay", ",", "rewards", ",", "doc_rewards", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "visible_dropout", "=", "params", "[", "'visible_dropout'", "]", "\n", "docs_per_query", "=", "replay", "[", "'docs_per_query'", "]", "\n", "batch_docs", "=", "replay", "[", "'serp'", "]", "\n", "batch_pos", "=", "replay", "[", "'pos_order'", "]", "\n", "max_n_docs", "=", "params", "[", "'max_docs'", "]", "\n", "batch_size", "=", "batch_docs", ".", "shape", "[", "0", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "doc_level_rewards", "=", "params", "[", "'doc_rewards'", "]", "\n", "\n", "mask", "=", "tf", ".", "squeeze", "(", "tf", ".", "sequence_mask", "(", "docs_per_query", ",", "serp_len", ")", ",", "axis", "=", "1", ")", "\n", "\n", "init_hidden", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "\n", "drop_col", "=", "tf", ".", "nn", ".", "dropout", "(", "replay", "[", "'docs'", "]", ",", "visible_dropout", ")", "\n", "\n", "doc_col", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_col", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "drop_docs", "=", "tf", ".", "nn", ".", "dropout", "(", "batch_docs", ",", "visible_dropout", ")", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "drop_docs", ",", "params", ",", "\n", "'/main/doc_emb'", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "serp_emb", "=", "tf", ".", "transpose", "(", "doc_emb", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru", "=", "ru", ".", "get_gru_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ")", "\n", "\n", "pos", "=", "tf", ".", "cast", "(", "batch_pos", ",", "tf", ".", "float32", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "pos", "=", "tf", ".", "transpose", "(", "pos", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "gru_input", "=", "tf", ".", "concat", "(", "[", "serp_emb", ",", "pos", "]", ",", "axis", "=", "2", ")", "\n", "hidden_states", "=", "tf", ".", "scan", "(", "gru", ",", "gru_input", ",", "init_hidden", ")", "\n", "hidden_states", "=", "tf", ".", "concat", "(", "[", "init_hidden", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "hidden_states", "[", ":", "-", "1", ",", ":", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "hidden_states", "=", "tf", ".", "transpose", "(", "hidden_states", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "doc_emb", "]", ",", "axis", "=", "2", ")", "\n", "doc_scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring/doc'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "pos_scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring/pos'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "True", ",", "\n", "inference", "=", "False", ",", "\n", "n_output", "=", "serp_len", ")", "\n", "\n", "batch_pos_filtered", "=", "tf", ".", "where", "(", "mask", ",", "\n", "batch_pos", ",", "\n", "tf", ".", "zeros_like", "(", "batch_pos", ")", ")", "\n", "batch_ind_nd", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", "[", ":", ",", "None", "]", ",", "[", "1", ",", "serp_len", "]", ")", "\n", "serp_ind_nd", "=", "tf", ".", "tile", "(", "tf", ".", "range", "(", "serp_len", ",", "dtype", "=", "tf", ".", "int64", ")", "[", ":", ",", "None", "]", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "pos_ind_nd", "=", "tf", ".", "stack", "(", "[", "tf", ".", "reshape", "(", "batch_ind_nd", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "serp_ind_nd", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "batch_pos_filtered", ",", "[", "-", "1", "]", ")", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "pos_scores", "=", "tf", ".", "gather_nd", "(", "pos_scores", ",", "pos_ind_nd", ")", "\n", "pos_scores", "=", "tf", ".", "reshape", "(", "pos_scores", ",", "[", "batch_size", ",", "serp_len", "]", ")", "\n", "\n", "if", "not", "doc_level_rewards", ":", "\n", "    ", "unfiltered_mc_loss", "=", "(", "rewards", "-", "pos_scores", ")", "**", "2", "+", "(", "rewards", "-", "doc_scores", ")", "**", "2", "\n", "", "else", ":", "\n", "    ", "cum_rewards", "=", "tf", ".", "cumsum", "(", "doc_rewards", ",", "axis", "=", "1", ",", "reverse", "=", "True", ")", "\n", "unfiltered_mc_loss", "=", "(", "cum_rewards", "-", "pos_scores", ")", "**", "2", "+", "(", "cum_rewards", "-", "doc_scores", ")", "**", "2", "\n", "\n", "", "max_doc_ind", ",", "max_pos", "=", "max_train_doc_pos", "(", "params", ",", "hidden_states", ",", "\n", "doc_emb", ",", "serp_len", ",", "doc_col", ",", "\n", "replay", "[", "'serp_ind'", "]", ",", "batch_pos", ",", "\n", "docs_per_query", ",", "max_n_docs", ")", "\n", "\n", "label_doc_scores", ",", "q_pos_values", "=", "get_label_scores", "(", "params", ",", "replay", ",", "max_doc_ind", ",", "max_pos", ")", "\n", "\n", "if", "not", "doc_level_rewards", ":", "\n", "    ", "q_doc_values", "=", "tf", ".", "concat", "(", "[", "label_doc_scores", ",", "rewards", "]", ",", "axis", "=", "1", ")", "\n", "end_mask", "=", "tf", ".", "equal", "(", "docs_per_query", "-", "1", ",", "\n", "tf", ".", "range", "(", "serp_len", ")", "[", "None", ",", ":", "]", ")", "\n", "reward_tile", "=", "tf", ".", "tile", "(", "rewards", ",", "[", "1", ",", "serp_len", "]", ")", "\n", "q_doc_values", "=", "tf", ".", "where", "(", "end_mask", ",", "reward_tile", ",", "q_doc_values", ")", "\n", "", "else", ":", "\n", "    ", "zero_end", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "1", "]", ")", "\n", "q_doc_values", "=", "tf", ".", "concat", "(", "[", "label_doc_scores", ",", "zero_end", "]", ",", "axis", "=", "1", ")", "\n", "end_mask", "=", "tf", ".", "equal", "(", "docs_per_query", "-", "1", ",", "\n", "tf", ".", "range", "(", "serp_len", ")", "[", "None", ",", ":", "]", ")", "\n", "q_doc_values", "=", "tf", ".", "where", "(", "end_mask", ",", "tf", ".", "zeros_like", "(", "q_doc_values", ")", ",", "q_doc_values", ")", "\n", "q_doc_values", "+=", "doc_rewards", "\n", "\n", "\n", "# q_doc_values = tf.Print(q_doc_values, [batch_pos[0,x] for x in range(10)], 'pos: ')", "\n", "# q_doc_values = tf.Print(q_doc_values, [pos_scores[0,x] for x in range(10)], 'pos_scores: ')", "\n", "# q_doc_values = tf.Print(q_doc_values, [q_doc_values[0,x] for x in range(10)], 'q-values: ')", "\n", "# q_doc_values = tf.Print(q_doc_values, [doc_rewards[0,x] for x in range(10)], 'doc_rewards: ')", "\n", "\n", "\n", "", "unfiltered_doc_loss", "=", "(", "doc_scores", "-", "q_pos_values", ")", "**", "2", "\n", "unfiltered_pos_loss", "=", "(", "pos_scores", "-", "q_doc_values", ")", "**", "2", "\n", "unfiltered_dqn_loss", "=", "unfiltered_doc_loss", "+", "unfiltered_pos_loss", "\n", "\n", "query_denom", "=", "tf", ".", "cast", "(", "docs_per_query", "[", ":", ",", "0", "]", ",", "tf", ".", "float32", ")", "\n", "query_denom", "=", "tf", ".", "minimum", "(", "query_denom", ",", "serp_len", ")", "\n", "query_denom", "=", "tf", ".", "maximum", "(", "query_denom", ",", "tf", ".", "ones_like", "(", "query_denom", ")", ")", "\n", "\n", "filtered_mc_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_mc_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_mc_loss", ")", ")", "\n", "mc_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "filtered_mc_loss", ",", "axis", "=", "1", ")", "/", "query_denom", ")", "\n", "\n", "filtered_dqn_loss", "=", "tf", ".", "where", "(", "mask", ",", "\n", "unfiltered_dqn_loss", ",", "\n", "tf", ".", "zeros_like", "(", "unfiltered_dqn_loss", ")", ")", "\n", "dqn_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "filtered_dqn_loss", ",", "axis", "=", "1", ")", "/", "query_denom", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'monte_carlo/loss'", ",", "mc_loss", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/loss'", ",", "dqn_loss", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/max_doc_scores'", ",", "tf", ".", "reduce_mean", "(", "label_doc_scores", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'DQN/max_pos_scores'", ",", "tf", ".", "reduce_mean", "(", "q_pos_values", ")", ")", "\n", "\n", "return", "mc_loss", ",", "dqn_loss", "", "", ""]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.mdprank.mdprank.get_sigmoid_layer": [[8, 39], ["tensorflow.python.ops.variable_scope.variable_scope", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected"], "function", ["None"], ["def", "get_sigmoid_layer", "(", "params", ",", "sub_name", ",", "label_network", ",", "inference", ",", "reuse_variable_scope", ")", ":", "\n", "  ", "parent_scope", "=", "params", "[", "'model_name'", "]", "+", "sub_name", "\n", "# avoiding non_local parameter scope in python 2.7", "\n", "class", "c", ":", "\n", "    ", "reuse_var_scope", "=", "reuse_variable_scope", "\n", "\n", "", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "hidden_dropout", "=", "params", "[", "'hidden_dropout'", "]", "\n", "if", "inference", "or", "label_network", "or", "hidden_dropout", "<", "1", ":", "\n", "    ", "keep_prob", "=", "1.", "\n", "", "else", ":", "\n", "    ", "keep_prob", "=", "hidden_dropout", "\n", "\n", "", "def", "sigmoid_layer", "(", "hidden_state", ",", "input_vector", ")", ":", "\n", "    ", "l2_scale", "=", "params", "[", "'l2_scale'", "]", "\n", "with", "variable_scope", ".", "variable_scope", "(", "parent_scope", ",", "\n", "values", "=", "(", "hidden_state", ",", "input_vector", ")", ",", "\n", "reuse", "=", "c", ".", "reuse_var_scope", ")", "as", "gru_scope", ":", "\n", "\n", "# In case function is called more than once.", "\n", "      ", "c", ".", "reuse_var_scope", "=", "True", "\n", "\n", "sigmoid_input", "=", "tf", ".", "concat", "(", "[", "hidden_state", ",", "input_vector", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "layers", ".", "fully_connected", "(", "\n", "sigmoid_input", ",", "hidden_state_size", ",", "\n", "activation_fn", "=", "tf", ".", "sigmoid", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "trainable", "=", "not", "label_network", ")", "\n", "\n", "", "", "return", "sigmoid_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.mdprank.mdprank.model": [[40, 142], ["model_utils._shared_doc_embeddings", "tensorflow.zeros", "mdprank.get_sigmoid_layer", "tensorflow.sequence_mask", "tensorflow.where", "range", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.shape", "tensorflow.range", "tensorflow.zeros", "tensorflow.fill", "tensorflow.tile", "tensorflow.concat", "tensorflow.less", "serp_ind.append", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.exp", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.one_hot", "tensorflow.gather_nd", "get_sigmoid_layer.", "tensorflow.gather_nd", "serp_labels.append", "probs.append", "model_utils._create_subnetwork", "tensorflow.multinomial", "tensorflow.where", "tensorflow.less", "tensorflow.where", "tensorflow.where", "tensorflow.argmax", "tensorflow.zeros_like", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._shared_doc_embeddings", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.mdprank.mdprank.get_sigmoid_layer", "home.repos.pwc.inspect_result.HarrieO_RankingComplexLayouts.None.model_utils._create_subnetwork"], ["", "def", "model", "(", "params", ",", "examples", ",", "labels", ")", ":", "\n", "  ", "serp_len", "=", "params", "[", "'serp_len'", "]", "\n", "doc_emb_size", "=", "params", "[", "'doc_emb'", "]", "[", "-", "1", "]", "\n", "hidden_state_size", "=", "params", "[", "'hidden_state_size'", "]", "\n", "docs", "=", "examples", "[", "'doc_tensors'", "]", "\n", "batch_size", "=", "docs", ".", "shape", "[", "0", "]", ".", "value", "\n", "batch_max_docs", "=", "tf", ".", "shape", "(", "docs", ")", "[", "1", "]", "\n", "docs_per_query", "=", "examples", "[", "'n_docs'", "]", "\n", "\n", "result", "=", "{", "\n", "'docs_per_query'", ":", "docs_per_query", ",", "\n", "}", "\n", "\n", "doc_emb", "=", "mu", ".", "_shared_doc_embeddings", "(", "docs", ",", "params", ",", "\n", "'/main/doc_emb'", ")", "\n", "\n", "\n", "hidden_init", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "hidden_state_size", "]", ")", "\n", "\n", "\n", "rnn_fn", "=", "get_sigmoid_layer", "(", "params", ",", "'/main/gru'", ",", "\n", "label_network", "=", "False", ",", "\n", "inference", "=", "False", ",", "\n", "reuse_variable_scope", "=", "False", ")", "\n", "\n", "batch_ind", "=", "tf", ".", "range", "(", "batch_size", ",", "dtype", "=", "tf", ".", "int64", ")", "[", ":", ",", "None", "]", "\n", "\n", "hidden_state", "=", "hidden_init", "\n", "n_doc_filter", "=", "tf", ".", "sequence_mask", "(", "docs_per_query", "[", ":", ",", "0", "]", ",", "batch_max_docs", ")", "\n", "doc_filter", "=", "tf", ".", "where", "(", "n_doc_filter", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "batch_max_docs", "]", ")", ",", "\n", "tf", ".", "fill", "(", "[", "batch_size", ",", "batch_max_docs", "]", ",", "np", ".", "NINF", ")", ")", "\n", "#tf.zeros([n_docs, hidden_state_size])", "\n", "serp_labels", "=", "[", "]", "\n", "serp_ind", "=", "[", "]", "\n", "probs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "serp_len", ")", ":", "\n", "    ", "hidden_states", "=", "tf", ".", "tile", "(", "hidden_state", "[", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "batch_max_docs", ",", "1", "]", ")", "\n", "score_input", "=", "tf", ".", "concat", "(", "[", "hidden_states", ",", "doc_emb", "]", ",", "axis", "=", "2", ")", "\n", "scores", "=", "mu", ".", "_create_subnetwork", "(", "score_input", ",", "\n", "params", ",", "\n", "subnetwork_name", "=", "'/main/scoring'", ",", "\n", "label_network", "=", "False", ",", "\n", "reuse_variable_scope", "=", "i", ">", "0", ",", "\n", "inference", "=", "False", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "seq_mask", "=", "tf", ".", "less", "(", "i", ",", "docs_per_query", "[", ":", ",", "0", "]", ")", "\n", "if", "params", "[", "'evaluation'", "]", ":", "\n", "      ", "sampled", "=", "tf", ".", "argmax", "(", "scores", "+", "doc_filter", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "      ", "sampled", "=", "tf", ".", "multinomial", "(", "(", "scores", "+", "doc_filter", ")", ",", "1", ")", "\n", "sampled", "=", "tf", ".", "where", "(", "seq_mask", ",", "\n", "sampled", ",", "\n", "tf", ".", "zeros_like", "(", "sampled", ")", ")", "\n", "", "serp_ind", ".", "append", "(", "sampled", "[", ":", ",", "0", "]", ")", "\n", "# sampled = tf.Print(sampled, [tf.shape(scores + doc_filter)], 'shape: ')", "\n", "# sampled = tf.Print(sampled, [tf.reduce_sum(scores, axis=1)], 'scores: ')", "\n", "# sampled = tf.Print(sampled, [tf.reduce_sum(doc_filter, axis=1)], 'filter: ')", "\n", "# sampled = tf.Print(sampled, [tf.reduce_sum(scores + doc_filter, axis=1)], 'sum: ')", "\n", "# sampled = tf.Print(sampled, [docs_per_query[:,0]], 'docs_per_query: ')", "\n", "# sampled = tf.Print(sampled, [sampled[:,0]], 'sampled: ')", "\n", "\n", "gather_ind", "=", "tf", ".", "concat", "(", "[", "batch_ind", ",", "sampled", "]", ",", "axis", "=", "1", ")", "\n", "sampled_scores", "=", "tf", ".", "gather_nd", "(", "scores", ",", "gather_ind", ")", "\n", "exp_scores", "=", "tf", ".", "exp", "(", "scores", "+", "doc_filter", ")", "\n", "exp_scores", "=", "tf", ".", "where", "(", "tf", ".", "less", "(", "exp_scores", ",", "0.001", ")", ",", "\n", "exp_scores", "+", "0.001", ",", "\n", "exp_scores", ")", "\n", "denom", "=", "tf", ".", "reduce_sum", "(", "exp_scores", ",", "axis", "=", "1", ")", "\n", "\n", "doc_filter", "+=", "tf", ".", "one_hot", "(", "sampled", "[", ":", ",", "0", "]", ",", "batch_max_docs", ",", "\n", "on_value", "=", "np", ".", "NINF", ",", "off_value", "=", "0.", ")", "\n", "select_doc", "=", "tf", ".", "gather_nd", "(", "doc_emb", ",", "gather_ind", ")", "\n", "hidden_state", "=", "rnn_fn", "(", "hidden_state", ",", "select_doc", ")", "\n", "\n", "select_labels", "=", "tf", ".", "gather_nd", "(", "labels", ",", "gather_ind", ")", "\n", "serp_labels", ".", "append", "(", "tf", ".", "where", "(", "\n", "seq_mask", ",", "\n", "select_labels", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", ")", ")", "\n", "probs", ".", "append", "(", "tf", ".", "where", "(", "\n", "seq_mask", ",", "\n", "sampled_scores", "-", "tf", ".", "log", "(", "denom", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", "]", ")", ",", "\n", ")", ")", "\n", "# probs[-1] = tf.Print(probs[-1], [denom], 'denom %d:' % i)", "\n", "# probs[-1] = tf.Print(probs[-1], [tf.exp(np.NINF)], 'test %d:' % i)", "\n", "\n", "# probs[-1] = tf.Print(probs[-1], [sampled], 'sampled %d:' % i)", "\n", "# probs[-1] = tf.Print(probs[-1], [serp_labels[-1]], 'labels %d:' % i)", "\n", "# probs[-1] = tf.Print(probs[-1], [probs[-1]], 'probs %d:' % i)", "\n", "\n", "\n", "", "result", "[", "'labels'", "]", "=", "tf", ".", "stack", "(", "serp_labels", ",", "axis", "=", "1", ")", "\n", "result", "[", "'probs'", "]", "=", "tf", ".", "stack", "(", "probs", ",", "axis", "=", "1", ")", "\n", "result", "[", "'serp_ind'", "]", "=", "tf", ".", "stack", "(", "serp_ind", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "# result['probs'] = tf.Print(result['probs'], [result['serp_ind']], 'serp_ind: ')", "\n", "# result['probs'] = tf.Print(result['probs'], [tf.exp(result['probs'])], 'prob: ')", "\n", "\n", "return", "result", "", "", ""]]}