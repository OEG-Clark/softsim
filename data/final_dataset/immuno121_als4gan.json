{"home.repos.pwc.inspect_result.immuno121_als4gan.utils.crf.DenseCRF.__init__": [[7, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "iter_max", ",", "pos_w", ",", "pos_xy_std", ",", "bi_w", ",", "bi_xy_std", ",", "bi_rgb_std", ")", ":", "\n", "        ", "self", ".", "iter_max", "=", "iter_max", "\n", "self", ".", "pos_w", "=", "pos_w", "\n", "self", ".", "pos_xy_std", "=", "pos_xy_std", "\n", "self", ".", "bi_w", "=", "bi_w", "\n", "self", ".", "bi_xy_std", "=", "bi_xy_std", "\n", "self", ".", "bi_rgb_std", "=", "bi_rgb_std", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.utils.crf.DenseCRF.__call__": [[15, 40], ["pydensecrf.unary_from_softmax", "pydensecrf.unary_from_softmax", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "pydensecrf.DenseCRF2D", "pydensecrf.DenseCRF2D", "pydensecrf.DenseCRF2D.setUnaryEnergy", "pydensecrf.DenseCRF2D.addPairwiseGaussian", "pydensecrf.DenseCRF2D.addPairwiseBilateral", "pydensecrf.DenseCRF2D.inference", "numpy.array().reshape", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "probmap", ")", ":", "\n", "#print(np.max(probmap), \"probmap\")", "\n", "        ", "C", ",", "H", ",", "W", "=", "probmap", ".", "shape", "\n", "\n", "U", "=", "utils", ".", "unary_from_softmax", "(", "probmap", ")", "\n", "#print(U, \"unary_from_softmax\")", "\n", "U", "=", "np", ".", "ascontiguousarray", "(", "U", ")", "\n", "#print(U, \"unary_from_softmax\")", "\n", "\n", "image", "=", "np", ".", "ascontiguousarray", "(", "image", ")", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "W", ",", "H", ",", "C", ")", "\n", "#print(d, \"DenseCRF2D\")", "\n", "d", ".", "setUnaryEnergy", "(", "U", ")", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "self", ".", "pos_xy_std", ",", "compat", "=", "self", ".", "pos_w", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "\n", "sxy", "=", "self", ".", "bi_xy_std", ",", "srgb", "=", "self", ".", "bi_rgb_std", ",", "rgbim", "=", "image", ",", "compat", "=", "self", ".", "bi_w", "\n", ")", "\n", "#print(d, \"DenseCRF2D\")", "\n", "#print(np.array(d), \"d\")", "\n", "Q", "=", "d", ".", "inference", "(", "self", ".", "iter_max", ")", "\n", "#print(np.array(Q), \"Q\")", "\n", "Q", "=", "np", ".", "array", "(", "Q", ")", ".", "reshape", "(", "(", "C", ",", "H", ",", "W", ")", ")", "\n", "\n", "return", "Q", "", "", "", ""]], "home.repos.pwc.inspect_result.immuno121_als4gan.utils.loss.CrossEntropy2d.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.utils.loss.CrossEntropy2d.forward": [[13, 33], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "target.data.dim", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.immuno121_als4gan.utils.lr_scheduler.PolynomialLR.__init__": [[5, 10], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "step_size", ",", "iter_max", ",", "power", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "iter_max", "=", "iter_max", "\n", "self", ".", "power", "=", "power", "\n", "super", "(", "PolynomialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.utils.lr_scheduler.PolynomialLR.polynomial_decay": [[11, 13], ["float"], "methods", ["None"], ["", "def", "polynomial_decay", "(", "self", ",", "lr", ")", ":", "\n", "        ", "return", "lr", "*", "(", "1", "-", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "iter_max", ")", "**", "self", ".", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.utils.lr_scheduler.PolynomialLR.get_lr": [[14, 22], ["lr_scheduler.PolynomialLR.polynomial_decay"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.utils.lr_scheduler.PolynomialLR.polynomial_decay"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "(", "\n", "(", "self", ".", "last_epoch", "==", "0", ")", "\n", "or", "(", "self", ".", "last_epoch", "%", "self", ".", "step_size", "!=", "0", ")", "\n", "or", "(", "self", ".", "last_epoch", ">", "self", ".", "iter_max", ")", "\n", ")", ":", "\n", "            ", "return", "[", "group", "[", "\"lr\"", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "return", "[", "self", ".", "polynomial_decay", "(", "lr", ")", "for", "lr", "in", "self", ".", "base_lrs", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.immuno121_als4gan.utils.metric._fast_hist": [[7, 14], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["def", "_fast_hist", "(", "label_true", ",", "label_pred", ",", "n_class", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "n_class", "**", "2", ",", "\n", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.utils.metric.scores": [[16, 36], ["numpy.zeros", "zip", "numpy.nanmean", "numpy.nanmean", "dict", "metric._fast_hist", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "np.zeros.sum", "zip", "lt.flatten", "lp.flatten", "numpy.diag", "range", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.immuno121_als4gan.utils.metric._fast_hist"], ["", "def", "scores", "(", "label_trues", ",", "label_preds", ",", "n_class", ")", ":", "\n", "    ", "hist", "=", "np", ".", "zeros", "(", "(", "n_class", ",", "n_class", ")", ")", "\n", "for", "lt", ",", "lp", "in", "zip", "(", "label_trues", ",", "label_preds", ")", ":", "\n", "        ", "hist", "+=", "_fast_hist", "(", "lt", ".", "flatten", "(", ")", ",", "lp", ".", "flatten", "(", ")", ",", "n_class", ")", "\n", "", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "valid", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", "# added", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", "[", "valid", "]", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "cls_iu", "=", "dict", "(", "zip", "(", "range", "(", "n_class", ")", ",", "iu", ")", ")", "\n", "\n", "return", "{", "\n", "\"Pixel Accuracy\"", ":", "acc", ",", "\n", "\"Mean Accuracy\"", ":", "acc_cls", ",", "\n", "\"Frequency Weighted IoU\"", ":", "fwavacc", ",", "\n", "\"Mean IoU\"", ":", "mean_iu", ",", "\n", "\"Class IoU\"", ":", "cls_iu", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.get_arguments": [[46, 111], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "  ", "\"\"\"Parse all the arguments provided from the CLI.\n\n  Returns:\n    A list of parsed arguments.\n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"dataset to be used\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--labeled-ratio\"", ",", "type", "=", "float", ",", "default", "=", "None", ",", "\n", "help", "=", "\"ratio of the labeled data to full dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--threshold-st\"", ",", "type", "=", "float", ",", "required", "=", "True", ",", "\n", "help", "=", "\"threshold_st for the self-training threshold.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"label value to ignored for loss calculation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Path to the directory containing the PASCAL VOC dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint-dir\"", ",", "type", "=", "str", ",", "default", "=", "'./checkpoint'", ",", "\n", "help", "=", "\"checkpoint dir.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--active-learning\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"whether to use active learning to select labeled examples\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoint_final.pth\"", ",", "\n", "help", "=", "\"restore from checkpoint\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--active-learning-images-array\"", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "\"path to active learning list of images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_viz\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"dataset to be used\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--generator_viz_dir\"", ",", "type", "=", "str", ",", "default", "=", "'./visualization'", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-D\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_D", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-fm\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_FM", ",", "\n", "help", "=", "\"lambda_fm for feature-matching loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-st\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ST", ",", "\n", "help", "=", "\"lambda_st for self-training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-after-iter\"", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "\"save predicted maps after this iteration\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "default", "=", "True", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"choose gpu device.\"", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.get_device": [[118, 129], ["print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "range", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name"], "function", ["None"], ["def", "get_device", "(", "cuda", ")", ":", "\n", "  ", "cuda", "=", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "print", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'cuda available'", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "cuda", "else", "\"cpu\"", ")", "\n", "if", "cuda", ":", "\n", "    ", "print", "(", "\"Device:\"", ")", "\n", "for", "i", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ":", "\n", "      ", "print", "(", "\"    {}:\"", ".", "format", "(", "i", ")", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "i", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "print", "(", "\"Device: CPU\"", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.loss_calc": [[131, 135], ["torch.autograd.Variable().to", "utils.loss.CrossEntropy2d().to", "CrossEntropy2d().to.", "torch.autograd.Variable", "utils.loss.CrossEntropy2d", "Variable().to.long"], "function", ["None"], ["", "def", "loss_calc", "(", "pred", ",", "label", ",", "device", ")", ":", "\n", "  ", "label", "=", "Variable", "(", "label", ".", "long", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "criterion", "=", "CrossEntropy2d", "(", "ignore_label", "=", "args", ".", "ignore_label", ")", ".", "to", "(", "device", ")", "# Ignore label ??", "\n", "return", "criterion", "(", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.lr_poly": [[137, 139], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "  ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.adjust_learning_rate_D": [[141, 146], ["train_s4gan.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.lr_poly"], ["", "def", "adjust_learning_rate_D", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "  ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate_D", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "    ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.one_hot": [[148, 155], ["label.numpy.numpy", "numpy.zeros", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "", "def", "one_hot", "(", "label", ")", ":", "\n", "  ", "label", "=", "label", ".", "numpy", "(", ")", "\n", "one_hot", "=", "np", ".", "zeros", "(", "(", "label", ".", "shape", "[", "0", "]", ",", "args", ".", "num_classes", ",", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "label", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "    ", "one_hot", "[", ":", ",", "i", ",", "...", "]", "=", "(", "label", "==", "i", ")", "\n", "# handle ignore labels", "\n", "", "return", "torch", ".", "FloatTensor", "(", "one_hot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.compute_argmax_map": [[157, 163], ["torch.from_numpy().float.detach().cpu().numpy", "torch.from_numpy().float.transpose", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.argmax", "torch.from_numpy().float.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float.detach"], "function", ["None"], ["", "def", "compute_argmax_map", "(", "output", ")", ":", "\n", "  ", "output", "=", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", ".", "float", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.makedirs": [[165, 168], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.makedirs"], ["", "def", "makedirs", "(", "dirs", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirs", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dirs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.find_good_maps": [[170, 191], ["range", "D_outs.size", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "indexes.append", "pred_all.size", "pred_all.size", "pred_all.size", "torch.Tensor.size", "torch.Tensor.size", "D_outs.size", "torch.Tensor.to", "torch.Tensor.to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "train_s4gan.compute_argmax_map"], "function", ["home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.compute_argmax_map"], ["", "", "def", "find_good_maps", "(", "D_outs", ",", "pred_all", ",", "device", ")", ":", "\n", "  ", "count", "=", "0", "\n", "indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "D_outs", ".", "size", "(", "0", ")", ")", ":", "\n", "    ", "if", "D_outs", "[", "i", "]", ">", "args", ".", "threshold_st", ":", "\n", "      ", "count", "+=", "1", "\n", "indexes", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "count", ">", "0", ":", "\n", "    ", "print", "(", "'Above ST-Threshold : '", ",", "count", ",", "'/'", ",", "args", ".", "batch_size", ")", "\n", "pred_sel", "=", "torch", ".", "Tensor", "(", "count", ",", "pred_all", ".", "size", "(", "1", ")", ",", "pred_all", ".", "size", "(", "2", ")", ",", "pred_all", ".", "size", "(", "3", ")", ")", "\n", "label_sel", "=", "torch", ".", "Tensor", "(", "count", ",", "pred_sel", ".", "size", "(", "2", ")", ",", "pred_sel", ".", "size", "(", "3", ")", ")", "\n", "num_sel", "=", "0", "\n", "for", "j", "in", "range", "(", "D_outs", ".", "size", "(", "0", ")", ")", ":", "\n", "      ", "if", "D_outs", "[", "j", "]", ">", "args", ".", "threshold_st", ":", "\n", "        ", "pred_sel", "[", "num_sel", "]", "=", "pred_all", "[", "j", "]", "\n", "label_sel", "[", "num_sel", "]", "=", "compute_argmax_map", "(", "pred_all", "[", "j", "]", ")", "\n", "num_sel", "+=", "1", "\n", "", "", "return", "pred_sel", ".", "to", "(", "device", ")", ",", "label_sel", ".", "to", "(", "device", ")", ",", "count", ",", "indexes", "\n", "", "else", ":", "\n", "    ", "return", "torch", ".", "Tensor", "(", ")", ",", "torch", ".", "Tensor", "(", ")", ",", "count", ",", "indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.get_params": [[196, 216], ["model.named_modules", "model.named_modules", "model.named_modules", "isinstance", "isinstance", "isinstance", "m[].parameters"], "function", ["None"], ["def", "get_params", "(", "model", ",", "key", ")", ":", "\n", "# For Dilated FCN", "\n", "  ", "if", "key", "==", "\"1x\"", ":", "\n", "    ", "for", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "      ", "if", "\"layer\"", "in", "m", "[", "0", "]", ":", "\n", "        ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "          ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "yield", "p", "\n", "# For conv weight in the ASPP module", "\n", "", "", "", "", "", "if", "key", "==", "\"10x\"", ":", "\n", "    ", "for", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "      ", "if", "\"aspp\"", "in", "m", "[", "0", "]", ":", "\n", "        ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "          ", "yield", "m", "[", "1", "]", ".", "weight", "\n", "# For conv bias in the ASPP module", "\n", "", "", "", "", "if", "key", "==", "\"20x\"", ":", "\n", "    ", "for", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "      ", "if", "\"aspp\"", "in", "m", "[", "0", "]", ":", "\n", "        ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "          ", "yield", "m", "[", "1", "]", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.main": [[217, 514], ["map", "train_s4gan.get_device", "DeepLabV2_ResNet101_MSC", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.to.state_dict().copy", "model.state_dict().copy.items", "model.to.load_state_dict", "torch.DataParallel", "model.to.to", "model.to.train", "model.discriminator.s4GAN_discriminator", "torch.DataParallel", "model_D.to.to", "model_D.to.train", "len", "print", "iter", "iter", "iter", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "utils.lr_scheduler.PolynomialLR", "torch.Adam", "optim.Adam.zero_grad", "torch.Upsample", "print", "range", "timeit.default_timer", "print", "args.input_size.split", "data.ucm.UCMDataSet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model_D.to.parameters", "os.path.exists", "train_s4gan.makedirs", "os.path.exists", "os.makedirs", "torch.optim.SGD.zero_grad", "optim.Adam.zero_grad", "train_s4gan.adjust_learning_rate_D", "model_D.to.parameters", "torch.autograd.Variable().to", "nn.Upsample.", "train_s4gan.loss_calc", "torch.autograd.Variable().to", "nn.Upsample.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_D.to.", "train_s4gan.find_good_maps", "torch.autograd.Variable().to", "images_gt.to.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_D.to.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss_S.backward", "loss_calc.item", "loss_S.item", "model_D.to.parameters", "pred_cat.detach.detach", "model_D.to.", "torch.autograd.Variable", "criterion", "model_D.to.", "torch.autograd.Variable", "criterion", "loss_D.backward", "loss_D.item", "torch.optim.SGD.step", "optim.Adam.step", "utils.lr_scheduler.PolynomialLR.step", "print", "ValueError", "ValueError", "ValueError", "model.to.state_dict", "new_params[].copy_", "data.deepglobe.DeepGlobeDataSet", "NotImplementedError", "numpy.load", "numpy.array", "numpy.array", "numpy.where", "numpy.arange", "numpy.delete", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int", "numpy.arange", "numpy.random.shuffle", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "model.to.", "next", "model.to.", "train_s4gan.loss_calc", "next", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "ValueError", "param.size", "saved_state_dict[].size", "i_id.strip", "numpy.isin", "iter", "next", "torch.autograd.Variable", "iter", "next", "torch.autograd.Variable", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.softmax", "range", "iter", "next", "torch.autograd.Variable", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "model.to.module.state_dict", "os.path.join", "model_D.to.module.state_dict", "os.path.join", "model.to.module.state_dict", "os.path.join", "model_D.to.module.state_dict", "os.path.join", "open", "train_s4gan.get_params", "train_s4gan.get_params", "train_s4gan.get_params", "labels_sel.size", "os.path.join", "numpy.save", "train_s4gan.one_hot", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "str", "gen_viz.cpu().numpy", "D_out_z.size", "D_out_z_gt.size", "str", "str", "str", "str", "gen_viz.cpu"], "function", ["home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.get_device", "home.repos.pwc.inspect_result.immuno121_als4gan.model.__init__.DeepLabV2_ResNet101_MSC", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.makedirs", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.makedirs", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.adjust_learning_rate_D", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.loss_calc", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.find_good_maps", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.loss_calc", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.get_params", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.get_params", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.get_params", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_s4gan.one_hot"], ["", "", "", "", "", "def", "main", "(", ")", ":", "\n", "  ", "dataset_name", "=", "args", ".", "dataset", "\n", "num_classes", "=", "args", ".", "num_classes", "\n", "\n", "if", "dataset_name", "==", "'ucm'", ":", "\n", "    ", "if", "num_classes", "!=", "18", ":", "\n", "      ", "raise", "ValueError", "(", "'number of classes should be equal to 21 when dataset=UCM'", ")", "\n", "", "", "elif", "dataset_name", "==", "\"deepglobe\"", ":", "\n", "    ", "if", "num_classes", "!=", "6", ":", "\n", "      ", "raise", "ValueError", "(", "'number of classes should be equal to 6 when dataset=DeepGlobe'", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'Currently this code only supports ucm and deepglobe'", ")", "\n", "\n", "", "if", "args", ".", "active_learning", ":", "\n", "      ", "if", "not", "args", ".", "active_learning_images_array", ":", "\n", "          ", "raise", "ValueError", "(", "'Need to provide active_learning_images_array when training usinig active learning'", ")", "\n", "\n", "", "", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "input_size", "=", "(", "h", ",", "w", ")", "\n", "checkpoint_dir", "=", "args", ".", "checkpoint_dir", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cuda", "=", "args", ".", "cuda", "\n", "device", "=", "get_device", "(", "cuda", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# create network", "\n", "model", "=", "DeepLabV2_ResNet101_MSC", "(", "n_classes", "=", "num_classes", ")", "\n", "\n", "# load pretrained parameters", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "\n", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "name", ",", "param", "in", "new_params", ".", "items", "(", ")", ":", "\n", "    ", "if", "name", "in", "saved_state_dict", "and", "param", ".", "size", "(", ")", "==", "saved_state_dict", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "      ", "new_params", "[", "name", "]", ".", "copy_", "(", "saved_state_dict", "[", "name", "]", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "\n", "# init D", "\n", "model_D", "=", "s4GAN_discriminator", "(", "num_classes", "=", "args", ".", "num_classes", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "model_D", "=", "nn", ".", "DataParallel", "(", "model_D", ")", "\n", "model_D", "=", "model_D", ".", "to", "(", "device", ")", "\n", "model_D", ".", "train", "(", ")", "\n", "\n", "\n", "if", "dataset_name", "==", "'ucm'", ":", "\n", "    ", "train_dataset", "=", "UCMDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "module", "=", "'s4gan'", ",", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", "\n", "\n", "", "elif", "dataset_name", "==", "'deepglobe'", ":", "\n", "    ", "train_dataset", "=", "DeepGlobeDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "module", "=", "'s4gan'", ",", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "(", "'only ucm and deepglobe datasets are supported currently'", ")", "\n", "", "train_dataset_size", "=", "len", "(", "train_dataset", ")", "\n", "print", "(", "'dataset size: '", ",", "train_dataset_size", ")", "\n", "\n", "if", "args", ".", "labeled_ratio", "is", "None", ":", "\n", "    ", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_gt", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_remain", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "active_learning", ":", "\n", "    ", "active_img_names", "=", "np", ".", "load", "(", "args", ".", "active_learning_images_array", ")", "\n", "all_img_names", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "args", ".", "data_list", ")", "]", "\n", "active_img_names", "=", "np", ".", "array", "(", "active_img_names", ")", "\n", "all_img_names", "=", "np", ".", "array", "(", "all_img_names", ")", "\n", "'''\n    numpy.isin(element, test_elements, assume_unique=False, invert=False)\n    Calculates element in test_elements, broadcasting over element only.\n    Returns a boolean array of the same shape as element that is True\n    where an element of element is in test_elements and False otherwise.\n    '''", "\n", "active_ids", "=", "np", ".", "where", "(", "np", ".", "isin", "(", "all_img_names", ",", "active_img_names", ")", ")", "#np.isin will return a boolean array of size all_image_names.", "\n", "active_ids", "=", "active_ids", "[", "0", "]", "\n", "\n", "train_ids", "=", "np", ".", "arange", "(", "train_dataset_size", ")", "\n", "remaining_ids", "=", "np", ".", "delete", "(", "train_ids", ",", "active_ids", ")", "\n", "\n", "train_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "active_ids", ")", "\n", "train_remain_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "remaining_ids", ")", "\n", "train_gt_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "active_ids", ")", "\n", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_remain", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "train_remain_sampler", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_gt", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "train_gt_sampler", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "", "else", ":", "\n", "    ", "partial_size", "=", "int", "(", "args", ".", "labeled_ratio", "*", "train_dataset_size", ")", "\n", "train_ids", "=", "np", ".", "arange", "(", "train_dataset_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_ids", ")", "\n", "\n", "train_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", ":", "partial_size", "]", ")", "\n", "train_remain_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", "partial_size", ":", "]", ")", "\n", "train_gt_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", ":", "partial_size", "]", ")", "\n", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_remain", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "train_remain_sampler", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_gt", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "sampler", "=", "train_gt_sampler", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "\n", "", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "trainloader_gt_iter", "=", "iter", "(", "trainloader_gt", ")", "\n", "\n", "# optimizer for segmentation network", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "# cf lr_mult and decay_mult in train.prototxt", "\n", "params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "get_params", "(", "model", ".", "module", ",", "key", "=", "\"1x\"", ")", ",", "\n", "\"lr\"", ":", "LEARNING_RATE", ",", "\n", "\"weight_decay\"", ":", "WEIGHT_DECAY", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "get_params", "(", "model", ".", "module", ",", "key", "=", "\"10x\"", ")", ",", "\n", "\"lr\"", ":", "10", "*", "LEARNING_RATE", ",", "\n", "\"weight_decay\"", ":", "WEIGHT_DECAY", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "get_params", "(", "model", ".", "module", ",", "key", "=", "\"20x\"", ")", ",", "\n", "\"lr\"", ":", "20", "*", "LEARNING_RATE", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "}", ",", "\n", "]", ",", "\n", "momentum", "=", "MOMENTUM", ",", "\n", ")", "\n", "\n", "# Learning rate scheduler", "\n", "scheduler", "=", "PolynomialLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "LR_DECAY", ",", "\n", "iter_max", "=", "ITER_MAX", ",", "\n", "power", "=", "POWER", ",", "\n", ")", "\n", "\n", "# optimizer for discriminator network", "\n", "optimizer_D", "=", "optim", ".", "Adam", "(", "model_D", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "    ", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "print", "(", "\"Checkpoint dst:\"", ",", "checkpoint_dir", ")", "\n", "\n", "generator_viz_dir", "=", "args", ".", "generator_viz_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "generator_viz_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "generator_viz_dir", ")", "\n", "\n", "\n", "", "for", "i_iter", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "\n", "    ", "loss_ce_value", "=", "0", "\n", "loss_D_value", "=", "0", "\n", "loss_fm_value", "=", "0", "\n", "loss_S_value", "=", "0", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate_D", "(", "optimizer_D", ",", "i_iter", ")", "\n", "\n", "# train Segmentation Network", "\n", "# don't accumulate grads in D", "\n", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "      ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# training loss for labeled data only", "\n", "", "try", ":", "\n", "      ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "", "except", ":", "\n", "      ", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "\n", "", "images", ",", "labels", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "Variable", "(", "images", ")", ".", "to", "(", "device", ")", "\n", "pred", "=", "interp", "(", "model", "(", "images", ")", ")", "\n", "loss_ce", "=", "loss_calc", "(", "pred", ",", "labels", ",", "device", ")", "\n", "\n", "try", ":", "\n", "      ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "", "except", ":", "\n", "      ", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "\n", "", "images_remain", ",", "_", ",", "_", ",", "names", ",", "_", "=", "batch_remain", "\n", "images_remain", "=", "Variable", "(", "images_remain", ")", ".", "to", "(", "device", ")", "\n", "\n", "pred_remain", "=", "interp", "(", "model", "(", "images_remain", ")", ")", "\n", "\n", "# concatenate the prediction with the input images", "\n", "images_remain", "=", "(", "images_remain", "-", "torch", ".", "min", "(", "images_remain", ")", ")", "/", "(", "torch", ".", "max", "(", "images_remain", ")", "-", "torch", ".", "min", "(", "images_remain", ")", ")", "\n", "# print (pred_remain.size(), images_remain.size())", "\n", "pred_cat", "=", "torch", ".", "cat", "(", "(", "F", ".", "softmax", "(", "pred_remain", ",", "dim", "=", "1", ")", ",", "images_remain", ")", ",", "dim", "=", "1", ")", "\n", "D_out_z", ",", "D_out_y_pred", "=", "model_D", "(", "pred_cat", ")", "# predicts the D ouput 0-1 and feature map for FM-loss", "\n", "\n", "# find predicted segmentation maps above threshold", "\n", "pred_sel", ",", "labels_sel", ",", "count", ",", "indexes", "=", "find_good_maps", "(", "D_out_z", ",", "pred_remain", ",", "device", ")", "\n", "\n", "# save the labels above threshold", "\n", "if", "args", ".", "save_viz", ":", "\n", "      ", "if", "labels_sel", ".", "size", "(", "0", ")", "!=", "0", "and", "i_iter", ">", "args", ".", "save_after_iter", ":", "\n", "        ", "for", "i", "in", "range", "(", "count", ")", ":", "\n", "          ", "index", "=", "indexes", "[", "i", "]", "\n", "name", "=", "names", "[", "index", "]", "\n", "name", "=", "name", "+", "'_iter_'", "+", "str", "(", "i_iter", ")", "\n", "gen_viz", "=", "labels_sel", "[", "i", "]", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "generator_viz_dir", ",", "name", "+", "\".npy\"", ")", "\n", "np", ".", "save", "(", "filename", ",", "gen_viz", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# training loss on above threshold segmentation predictions (Cross Entropy Loss)IN: 321", "\n", "\n", "", "", "", "if", "count", ">", "0", "and", "i_iter", ">", "args", ".", "save_after_iter", ":", "\n", "# loss_st = loss_calc(pred_sel, labels_sel, args.gpu)", "\n", "      ", "loss_st", "=", "loss_calc", "(", "pred_sel", ",", "labels_sel", ",", "device", ")", "\n", "", "else", ":", "\n", "      ", "loss_st", "=", "0.0", "\n", "\n", "# Concatenates the input images and ground-truth maps for the Districrimator 'Real' input", "\n", "", "try", ":", "\n", "      ", "batch_gt", "=", "next", "(", "trainloader_gt_iter", ")", "\n", "", "except", ":", "\n", "      ", "trainloader_gt_iter", "=", "iter", "(", "trainloader_gt", ")", "\n", "batch_gt", "=", "next", "(", "trainloader_gt_iter", ")", "\n", "\n", "", "images_gt", ",", "labels_gt", ",", "_", ",", "_", ",", "_", "=", "batch_gt", "\n", "# Converts grounth truth segmentation into 'num_classes' segmentation maps.", "\n", "D_gt_v", "=", "Variable", "(", "one_hot", "(", "labels_gt", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "images_gt", "=", "images_gt", ".", "to", "(", "device", ")", "\n", "images_gt", "=", "(", "images_gt", "-", "torch", ".", "min", "(", "images_gt", ")", ")", "/", "(", "torch", ".", "max", "(", "images", ")", "-", "torch", ".", "min", "(", "images", ")", ")", "\n", "\n", "D_gt_v_cat", "=", "torch", ".", "cat", "(", "(", "D_gt_v", ",", "images_gt", ")", ",", "dim", "=", "1", ")", "\n", "D_out_z_gt", ",", "D_out_y_gt", "=", "model_D", "(", "D_gt_v_cat", ")", "\n", "\n", "# L1 loss for Feature Matching Loss", "\n", "loss_fm", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "torch", ".", "mean", "(", "D_out_y_gt", ",", "0", ")", "-", "torch", ".", "mean", "(", "D_out_y_pred", ",", "0", ")", ")", ")", "\n", "\n", "if", "count", ">", "0", "and", "i_iter", ">", "0", ":", "# if any good predictions found for self-training loss", "\n", "      ", "loss_S", "=", "loss_ce", "+", "args", ".", "lambda_fm", "*", "loss_fm", "+", "args", ".", "lambda_st", "*", "loss_st", "\n", "", "else", ":", "\n", "      ", "loss_S", "=", "loss_ce", "+", "args", ".", "lambda_fm", "*", "loss_fm", "\n", "\n", "", "loss_S", ".", "backward", "(", ")", "\n", "loss_fm_value", "+=", "args", ".", "lambda_fm", "*", "loss_fm", "\n", "\n", "loss_ce_value", "+=", "loss_ce", ".", "item", "(", ")", "\n", "loss_S_value", "+=", "loss_S", ".", "item", "(", ")", "\n", "\n", "# train D", "\n", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "      ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "# train with pred", "\n", "", "pred_cat", "=", "pred_cat", ".", "detach", "(", ")", "# detach does not allow the graddients to back propagate.", "\n", "\n", "D_out_z", ",", "_", "=", "model_D", "(", "pred_cat", ")", "\n", "y_fake_", "=", "Variable", "(", "torch", ".", "zeros", "(", "D_out_z", ".", "size", "(", "0", ")", ",", "1", ")", ".", "to", "(", "device", ")", ")", "\n", "loss_D_fake", "=", "criterion", "(", "D_out_z", ",", "y_fake_", ")", "\n", "\n", "# train with gt", "\n", "D_out_z_gt", ",", "_", "=", "model_D", "(", "D_gt_v_cat", ")", "\n", "y_real_", "=", "Variable", "(", "torch", ".", "ones", "(", "D_out_z_gt", ".", "size", "(", "0", ")", ",", "1", ")", ".", "to", "(", "device", ")", ")", "\n", "loss_D_real", "=", "criterion", "(", "D_out_z_gt", ",", "y_real_", ")", "\n", "\n", "loss_D", "=", "(", "loss_D_fake", "+", "loss_D_real", ")", "/", "2.0", "\n", "loss_D", ".", "backward", "(", ")", "\n", "loss_D_value", "+=", "loss_D", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", "epoch", "=", "i_iter", ")", "\n", "\n", "print", "(", "'iter = {0:8d}/{1:8d}, loss_ce = {2:.3f}, loss_fm = {3:.3f}, loss_S = {4:.3f}, loss_D = {5:.3f}'", ".", "format", "(", "i_iter", ",", "args", ".", "num_steps", ",", "loss_ce_value", ",", "loss_fm_value", ",", "loss_S_value", ",", "loss_D_value", ")", ")", "\n", "\n", "if", "i_iter", ">=", "args", ".", "num_steps", "-", "1", ":", "\n", "      ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'checkpoint'", "+", "str", "(", "args", ".", "num_steps", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'checkpoint'", "+", "str", "(", "args", ".", "num_steps", ")", "+", "'_D.pth'", ")", ")", "\n", "break", "\n", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "      ", "print", "(", "'saving checkpoint  ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'checkpoint'", "+", "str", "(", "i_iter", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'checkpoint'", "+", "str", "(", "i_iter", ")", "+", "'_D.pth'", ")", ")", "\n", "\n", "", "", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "end", "-", "start", ",", "'seconds'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_AL.ImageClassifier.__init__": [[128, 133], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "       ", "super", "(", "ImageClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "model_dict", "[", "model_name", "]", "\n", "self", ".", "final_layer", "=", "nn", ".", "Linear", "(", "1000", ",", "num_classes", ")", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_AL.ImageClassifier.forward": [[134, 138], ["train_AL.ImageClassifier.net", "train_AL.ImageClassifier.final_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "       ", "x1", "=", "self", ".", "net", "(", "x", ")", "\n", "y", "=", "self", ".", "final_layer", "(", "x1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_AL.create_model_dict": [[26, 36], ["dict", "torchvision.vgg16", "torchvision.resnet50", "torchvision.resnet101"], "function", ["None"], ["def", "create_model_dict", "(", ")", ":", "\n", "\n", "    ", "model_dict", "=", "dict", "(", ")", "\n", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ",", "progress", "=", "True", ")", "\n", "res50", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ",", "progress", "=", "True", ")", "\n", "res101", "=", "models", ".", "resnet101", "(", "pretrained", "=", "True", ",", "progress", "=", "True", ")", "\n", "model_dict", "[", "'vgg16'", "]", "=", "vgg16", "\n", "model_dict", "[", "'res50'", "]", "=", "res50", "\n", "model_dict", "[", "'res101'", "]", "=", "res101", "\n", "return", "model_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_AL.create_dataset_dict": [[37, 48], ["dict", "data.ucm.UCMDataSet", "data.deepglobe.DeepGlobeDataSet"], "function", ["None"], ["", "def", "create_dataset_dict", "(", "input_size", ")", ":", "\n", "    ", "dataset_dict", "=", "dict", "(", ")", "\n", "if", "args", ".", "dataset_name", "==", "'UCM'", ":", "\n", "        ", "dataset_dict", "[", "'UCM'", "]", "=", "UCMDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ",", "\n", "module", "=", "'AL'", ")", "\n", "", "else", ":", "\n", "        ", "dataset_dict", "[", "'deepglobe'", "]", "=", "DeepGlobeDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ",", "\n", "module", "=", "'AL'", ")", "\n", "", "return", "dataset_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_AL.makedirs": [[49, 52], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.makedirs"], ["", "def", "makedirs", "(", "dirs", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirs", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.train_AL.get_arguments": [[54, 89], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "get_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Arguments\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset-name\"", ",", "type", "=", "str", ",", "default", "=", "\"UCM\"", ",", "help", "=", "\"UCM/deepglobe\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--query-strategy\"", ",", "type", "=", "str", ",", "default", "=", "\"margin\"", ",", "\n", "help", "=", "\"uncertainty, margin, entropy sampling\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./train\"", ",", "\n", "help", "=", "\"Path to the directory containing the PASCAL VOC dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "\"./train/image_list.txt\"", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--labeled-ratio\"", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "\n", "help", "=", "\"labeled ratio\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "\"alpha for initial pool\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--beta\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "\"beta for number of images to learn on\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-name\"", ",", "type", "=", "str", ",", "default", "=", "\"res50\"", ",", "help", "=", "\"vgg16/res50/res101\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "21", ",", "help", "=", "\"UCM: 21, deepglobe: 6\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-dir\"", ",", "type", "=", "str", ",", "default", "=", "'./active_learning'", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "\"Learning Rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "\"Batch Size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-epochs\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "\"Number of Epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "\"Momentum\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", ",", "\n", "help", "=", "\"cuda/cpu\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of images.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.get_arguments": [[41, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n    \n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"evaluation script\"", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\"--start-eval\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"epoch from which we want to start evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--end-eval\"", ",", "type", "=", "int", ",", "default", "=", "20000", ",", "\n", "help", "=", "\"epoch upto which we want to evaluate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--step-eval\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"evaluation steps\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "DATASET", ",", "\n", "help", "=", "\"dataset name ucm/deepglobe\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the PASCAL VOC dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-dir\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_DIRECTORY", ",", "\n", "help", "=", "\"Directory to store results\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint-dir\"", ",", "type", "=", "str", ",", "default", "=", "CHECKPOINT_DIRECTORY", ",", "\n", "help", "=", "\"Directory to store results\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--crf\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"apply crf postprocessing to precomputed logits\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of images.\"", ")", "\n", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.makedirs": [[78, 81], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.makedirs"], ["", "def", "makedirs", "(", "dirs", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirs", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.crf_process": [[82, 93], ["torch.interpolate", "[].cpu().numpy", "torch.squeeze", "torch.squeeze", "torch.squeeze", "image.astype().transpose.numpy", "image.astype().transpose.astype().transpose", "postprocessor", "numpy.argmax", "[].cpu", "image.astype().transpose.astype", "torch.softmax"], "function", ["None"], ["", "", "def", "crf_process", "(", "image", ",", "label", ",", "logit", ",", "size", ",", "postprocessor", ")", ":", "\n", "        ", "H", "=", "size", "[", "0", "]", "\n", "W", "=", "size", "[", "1", "]", "\n", "logit", "=", "F", ".", "interpolate", "(", "logit", ",", "size", "=", "(", "H", ",", "W", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "image", "=", "torch", ".", "squeeze", "(", "image", ")", "\n", "image", "=", "image", ".", "numpy", "(", ")", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "prob_post", "=", "postprocessor", "(", "image", ",", "prob", ")", "\n", "crf_label", "=", "np", ".", "argmax", "(", "prob_post", ",", "axis", "=", "0", ")", "\n", "return", "crf_label", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.main": [[94, 198], ["auto_evaluate.get_arguments", "map", "range", "get_arguments.input_size.split", "os.path.exists", "os.makedirs", "DeepLabV2_ResNet101_MSC", "DeepLabV2_ResNet101_MSC.cuda", "torch.load", "torch.load", "torch.load", "DeepLabV2_ResNet101_MSC.load_state_dict", "DeepLabV2_ResNet101_MSC.eval", "DeepLabV2_ResNet101_MSC.cuda", "enumerate", "utils.metric.scores", "os.path.join", "data.deepglobe.DeepGlobeDataSet", "torch.utils.data.DataLoader", "torch.Upsample", "DeepLabV2_ResNet101_MSC.", "np.asarray.clone().detach", "nn.Upsample.cpu().data[].numpy", "numpy.asarray", "np.asarray.transpose", "numpy.asarray", "gt_list.append", "output_list.append", "os.path.join", "print", "utils.metric.scores", "open", "json.dump", "data.ucm.UCMDataSet", "torch.utils.data.DataLoader", "torch.Upsample", "print", "torch.autograd.Variable().cuda", "numpy.argmax", "utils.crf.DenseCRF", "auto_evaluate.crf_process", "crf_result_list.append", "os.path.join", "print", "open", "json.dump", "np.asarray.clone", "label[].numpy", "str", "str", "torch.autograd.Variable", "str", "nn.Upsample.cpu", "str", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.get_arguments", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.makedirs", "home.repos.pwc.inspect_result.immuno121_als4gan.model.__init__.DeepLabV2_ResNet101_MSC", "home.repos.pwc.inspect_result.immuno121_als4gan.utils.metric.scores", "home.repos.pwc.inspect_result.immuno121_als4gan.utils.metric.scores", "home.repos.pwc.inspect_result.immuno121_als4gan.tools.auto_evaluate.crf_process"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "args", "=", "get_arguments", "(", ")", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "start", "=", "args", ".", "start_eval", "\n", "end", "=", "args", ".", "end_eval", "\n", "step", "=", "args", ".", "step_eval", "\n", "\n", "max_mean_iou", "=", "0.0", "\n", "max_crf_mean_iou", "=", "0.0", "\n", "\n", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "input_size", "=", "(", "h", ",", "w", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start", ",", "end", "+", "1", ",", "step", ")", ":", "\n", "\n", "        ", "model", "=", "DeepLabV2_ResNet101_MSC", "(", "n_classes", "=", "args", ".", "num_classes", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'checkpoint'", "+", "str", "(", "epoch", ")", "+", "'.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'deepglobe'", ":", "\n", "            ", "dataset", "=", "DeepGlobeDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "module", "=", "'s4gan'", ",", "crop_size", "=", "input_size", ")", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "320", ",", "320", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'ucm'", ":", "\n", "          ", "dataset", "=", "UCMDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "module", "=", "'s4gan'", ",", "crop_size", "=", "input_size", ")", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "256", ",", "256", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "\n", "", "gt_list", "=", "[", "]", "\n", "output_list", "=", "[", "]", "\n", "crf_result_list", "=", "[", "]", "\n", "\n", "for", "index", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "\n", "            ", "if", "index", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'%d processed'", "%", "(", "index", ")", ")", "\n", "", "image", ",", "label", ",", "size", ",", "name", ",", "_", "=", "batch", "\n", "size", "=", "size", "[", "0", "]", "\n", "output", "=", "model", "(", "Variable", "(", "image", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "gpu0", ")", ")", "\n", "crf_output", "=", "output", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "output", "=", "interp", "(", "output", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "output", "[", ":", ",", ":", "size", "[", "0", "]", ",", ":", "size", "[", "1", "]", "]", "\n", "gt", "=", "np", ".", "asarray", "(", "label", "[", "0", "]", ".", "numpy", "(", ")", "[", ":", "size", "[", "0", "]", ",", ":", "size", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "\n", "if", "args", ".", "crf", ":", "\n", "                ", "postprocessor", "=", "DenseCRF", "(", "iter_max", "=", "CRF_ITER_MAX", ",", "\n", "pos_xy_std", "=", "CRF_POS_XY_STD", ",", "\n", "pos_w", "=", "CRF_POS_W", ",", "\n", "bi_xy_std", "=", "CRF_BI_XY_STD", ",", "\n", "bi_rgb_std", "=", "CRF_BI_RGB_STD", ",", "\n", "bi_w", "=", "CRF_BI_W", ",", ")", "\n", "result_crf", "=", "crf_process", "(", "image", ",", "label", ",", "crf_output", ",", "size", ",", "postprocessor", ")", "\n", "\n", "", "gt_list", ".", "append", "(", "gt", ")", "\n", "output_list", ".", "append", "(", "output", ")", "\n", "\n", "if", "args", ".", "crf", ":", "\n", "                ", "crf_result_list", ".", "append", "(", "result_crf", ")", "\n", "\n", "", "", "score", "=", "scores", "(", "gt_list", ",", "output_list", ",", "args", ".", "num_classes", ")", "\n", "\n", "#auto-evaluate logic to evaluate scores and store the best one", "\n", "\n", "mean_iou", "=", "score", "[", "'Mean IoU'", "]", "\n", "\n", "if", "mean_iou", ">", "max_mean_iou", ":", "\n", "            ", "max_mean_iou", "=", "mean_iou", "\n", "best_score", "=", "score", "\n", "best_score_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"best_scores_\"", "+", "str", "(", "epoch", ")", "+", "\".json\"", ")", "\n", "print", "(", "'best so far...'", "+", "str", "(", "mean_iou", ")", ")", "\n", "\n", "", "if", "args", ".", "crf", ":", "\n", "            ", "score_crf", "=", "scores", "(", "gt_list", ",", "crf_result_list", ",", "args", ".", "num_classes", ")", "\n", "crf_mean_iou", "=", "score_crf", "[", "'Mean IoU'", "]", "\n", "if", "crf_mean_iou", ">", "max_crf_mean_iou", ":", "\n", "                ", "max_crf_mean_iou", "=", "crf_mean_iou", "\n", "best_score_crf", "=", "score_crf", "\n", "best_score_filename_crf", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"best_scores_crf_\"", "+", "str", "(", "epoch", ")", "+", "\".json\"", ")", "\n", "print", "(", "\"CRF Scores saved at: \"", ",", "best_score_filename_crf", ")", "\n", "\n", "", "", "with", "open", "(", "best_score_filename", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "best_score", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "\n", "", "if", "args", ".", "crf", ":", "\n", "            ", "with", "open", "(", "best_score_filename_crf", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "best_score_crf", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.discriminator.s4GAN_discriminator.__init__": [[6, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.LeakyReLU", "torch.Dropout2d", "torch.Sigmoid", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "dataset", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "s4GAN_discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#print(dataset, 'in discriminator')", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", "+", "3", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 160 x 160", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 80 x 80", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 40 x 40", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# 20 x 20", "\n", "if", "dataset", "==", "'pascal_voc'", "or", "dataset", "==", "'pascal_context'", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "(", "20", ",", "20", ")", ")", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "(", "16", ",", "32", ")", ")", "\n", "", "elif", "dataset", "==", "'ucm'", "or", "dataset", "==", "'deepglobe'", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "(", "20", ",", "20", ")", ")", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", ",", "1", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.discriminator.s4GAN_discriminator.forward": [[25, 48], ["discriminator.s4GAN_discriminator.conv1", "discriminator.s4GAN_discriminator.leaky_relu", "discriminator.s4GAN_discriminator.drop", "discriminator.s4GAN_discriminator.conv2", "discriminator.s4GAN_discriminator.leaky_relu", "discriminator.s4GAN_discriminator.drop", "discriminator.s4GAN_discriminator.conv3", "discriminator.s4GAN_discriminator.leaky_relu", "discriminator.s4GAN_discriminator.drop", "discriminator.s4GAN_discriminator.conv4", "discriminator.s4GAN_discriminator.leaky_relu", "discriminator.s4GAN_discriminator.avgpool", "discriminator.s4GAN_discriminator.view", "discriminator.s4GAN_discriminator.sigmoid", "discriminator.s4GAN_discriminator.size", "discriminator.s4GAN_discriminator.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "\n", "maps", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "conv4_maps", "=", "maps", "\n", "out", "=", "maps", ".", "view", "(", "maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "self", ".", "fc", "(", "out", ")", ")", "\n", "\n", "return", "out", ",", "conv4_maps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.deeplabv2._ASPP.__init__": [[22, 33], ["torch.Module.__init__", "enumerate", "deeplabv2._ASPP.children", "deeplabv2._ASPP.add_module", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "rates", ")", ":", "\n", "        ", "super", "(", "_ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", ",", "rate", "in", "enumerate", "(", "rates", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "\"c{}\"", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "1", ",", "padding", "=", "rate", ",", "dilation", "=", "rate", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.deeplabv2._ASPP.forward": [[34, 36], ["sum", "stage", "deeplabv2._ASPP.children"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "sum", "(", "[", "stage", "(", "x", ")", "for", "stage", "in", "self", ".", "children", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.deeplabv2.DeepLabV2.__init__": [[44, 53], ["torch.Sequential.__init__", "deeplabv2.DeepLabV2.add_module", "deeplabv2.DeepLabV2.add_module", "deeplabv2.DeepLabV2.add_module", "deeplabv2.DeepLabV2.add_module", "deeplabv2.DeepLabV2.add_module", "deeplabv2.DeepLabV2.add_module", "resnet._Stem", "resnet._ResLayer", "resnet._ResLayer", "resnet._ResLayer", "resnet._ResLayer", "deeplabv2._ASPP", "range"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["def", "__init__", "(", "self", ",", "n_classes", ",", "n_blocks", ",", "atrous_rates", ")", ":", "\n", "        ", "super", "(", "DeepLabV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ch", "=", "[", "64", "*", "2", "**", "p", "for", "p", "in", "range", "(", "6", ")", "]", "\n", "self", ".", "add_module", "(", "\"layer1\"", ",", "_Stem", "(", "ch", "[", "0", "]", ")", ")", "\n", "self", ".", "add_module", "(", "\"layer2\"", ",", "_ResLayer", "(", "n_blocks", "[", "0", "]", ",", "ch", "[", "0", "]", ",", "ch", "[", "2", "]", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "add_module", "(", "\"layer3\"", ",", "_ResLayer", "(", "n_blocks", "[", "1", "]", ",", "ch", "[", "2", "]", ",", "ch", "[", "3", "]", ",", "2", ",", "1", ")", ")", "\n", "self", ".", "add_module", "(", "\"layer4\"", ",", "_ResLayer", "(", "n_blocks", "[", "2", "]", ",", "ch", "[", "3", "]", ",", "ch", "[", "4", "]", ",", "1", ",", "2", ")", ")", "\n", "self", ".", "add_module", "(", "\"layer5\"", ",", "_ResLayer", "(", "n_blocks", "[", "3", "]", ",", "ch", "[", "4", "]", ",", "ch", "[", "5", "]", ",", "1", ",", "4", ")", ")", "\n", "self", ".", "add_module", "(", "\"aspp\"", ",", "_ASPP", "(", "ch", "[", "5", "]", ",", "n_classes", ",", "atrous_rates", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.deeplabv2.DeepLabV2.freeze_bn": [[54, 58], ["deeplabv2.DeepLabV2.modules", "isinstance", "m.eval"], "methods", ["None"], ["", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "_ConvBnReLU", ".", "BATCH_NORM", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.resnet._ConvBnReLU.__init__": [[33, 47], ["torch.Sequential.__init__", "resnet._ConvBnReLU.add_module", "resnet._ConvBnReLU.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "_BATCH_NORM", "resnet._ConvBnReLU.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_ch", ",", "out_ch", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "relu", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "_ConvBnReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "\n", "\"conv\"", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_ch", ",", "out_ch", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "bias", "=", "False", "\n", ")", ",", "\n", ")", "\n", "self", ".", "add_module", "(", "\"bn\"", ",", "_BATCH_NORM", "(", "out_ch", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.999", ")", ")", "\n", "\n", "if", "relu", ":", "\n", "            ", "self", ".", "add_module", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.resnet._Bottleneck.__init__": [[54, 64], ["torch.Module.__init__", "resnet._ConvBnReLU", "resnet._ConvBnReLU", "resnet._ConvBnReLU", "resnet._ConvBnReLU"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "stride", ",", "dilation", ",", "downsample", ")", ":", "\n", "        ", "super", "(", "_Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_ch", "=", "out_ch", "//", "_BOTTLENECK_EXPANSION", "\n", "self", ".", "reduce", "=", "_ConvBnReLU", "(", "in_ch", ",", "mid_ch", ",", "1", ",", "stride", ",", "0", ",", "1", ",", "True", ")", "\n", "self", ".", "conv3x3", "=", "_ConvBnReLU", "(", "mid_ch", ",", "mid_ch", ",", "3", ",", "1", ",", "dilation", ",", "dilation", ",", "True", ")", "\n", "self", ".", "increase", "=", "_ConvBnReLU", "(", "mid_ch", ",", "out_ch", ",", "1", ",", "1", ",", "0", ",", "1", ",", "False", ")", "\n", "self", ".", "shortcut", "=", "(", "\n", "_ConvBnReLU", "(", "in_ch", ",", "out_ch", ",", "1", ",", "stride", ",", "0", ",", "1", ",", "False", ")", "\n", "if", "downsample", "\n", "else", "lambda", "x", ":", "x", "# identity", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.resnet._Bottleneck.forward": [[66, 72], ["resnet._Bottleneck.reduce", "resnet._Bottleneck.conv3x3", "resnet._Bottleneck.increase", "resnet._Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "reduce", "(", "x", ")", "\n", "h", "=", "self", ".", "conv3x3", "(", "h", ")", "\n", "h", "=", "self", ".", "increase", "(", "h", ")", "\n", "h", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.resnet._ResLayer.__init__": [[79, 97], ["torch.Sequential.__init__", "range", "resnet._ResLayer.add_module", "len", "resnet._Bottleneck", "range"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["def", "__init__", "(", "self", ",", "n_layers", ",", "in_ch", ",", "out_ch", ",", "stride", ",", "dilation", ",", "multi_grids", "=", "None", ")", ":", "\n", "        ", "super", "(", "_ResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "multi_grids", "is", "None", ":", "\n", "            ", "multi_grids", "=", "[", "1", "for", "_", "in", "range", "(", "n_layers", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "n_layers", "==", "len", "(", "multi_grids", ")", "\n", "\n", "# Downsampling is only in the first block", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "\"block{}\"", ".", "format", "(", "i", "+", "1", ")", ",", "\n", "_Bottleneck", "(", "\n", "in_ch", "=", "(", "in_ch", "if", "i", "==", "0", "else", "out_ch", ")", ",", "\n", "out_ch", "=", "out_ch", ",", "\n", "stride", "=", "(", "stride", "if", "i", "==", "0", "else", "1", ")", ",", "\n", "dilation", "=", "dilation", "*", "multi_grids", "[", "i", "]", ",", "\n", "downsample", "=", "(", "True", "if", "i", "==", "0", "else", "False", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.resnet._Stem.__init__": [[107, 111], ["torch.Sequential.__init__", "resnet._Stem.add_module", "resnet._Stem.add_module", "resnet._ConvBnReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["def", "__init__", "(", "self", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "_Stem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "\"conv1\"", ",", "_ConvBnReLU", "(", "3", ",", "out_ch", ",", "7", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "add_module", "(", "\"pool\"", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "2", ",", "1", ",", "ceil_mode", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.resnet._Flatten.forward": [[114, 116], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.resnet.ResNet.__init__": [[119, 130], ["torch.Sequential.__init__", "resnet.ResNet.add_module", "resnet.ResNet.add_module", "resnet.ResNet.add_module", "resnet.ResNet.add_module", "resnet.ResNet.add_module", "resnet.ResNet.add_module", "resnet.ResNet.add_module", "resnet.ResNet.add_module", "resnet._Stem", "resnet._ResLayer", "resnet._ResLayer", "resnet._ResLayer", "resnet._ResLayer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet._Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_blocks", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ch", "=", "[", "64", "*", "2", "**", "p", "for", "p", "in", "range", "(", "6", ")", "]", "\n", "self", ".", "add_module", "(", "\"layer1\"", ",", "_Stem", "(", "ch", "[", "0", "]", ")", ")", "\n", "self", ".", "add_module", "(", "\"layer2\"", ",", "_ResLayer", "(", "n_blocks", "[", "0", "]", ",", "ch", "[", "0", "]", ",", "ch", "[", "2", "]", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "add_module", "(", "\"layer3\"", ",", "_ResLayer", "(", "n_blocks", "[", "1", "]", ",", "ch", "[", "2", "]", ",", "ch", "[", "3", "]", ",", "2", ",", "1", ")", ")", "\n", "self", ".", "add_module", "(", "\"layer4\"", ",", "_ResLayer", "(", "n_blocks", "[", "2", "]", ",", "ch", "[", "3", "]", ",", "ch", "[", "4", "]", ",", "2", ",", "1", ")", ")", "\n", "self", ".", "add_module", "(", "\"layer5\"", ",", "_ResLayer", "(", "n_blocks", "[", "3", "]", ",", "ch", "[", "4", "]", ",", "ch", "[", "5", "]", ",", "2", ",", "1", ")", ")", "\n", "self", ".", "add_module", "(", "\"pool5\"", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ")", "\n", "self", ".", "add_module", "(", "\"flatten\"", ",", "_Flatten", "(", ")", ")", "\n", "self", ".", "add_module", "(", "\"fc\"", ",", "nn", ".", "Linear", "(", "ch", "[", "5", "]", ",", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.__init__.init_weights": [[7, 20], ["isinstance", "nn.init.kaiming_normal_", "isinstance", "nn.init.constant_", "nn.init.kaiming_normal_", "isinstance", "nn.init.constant_", "nn.init.constant_", "nn.init.constant_"], "function", ["None"], ["def", "init_weights", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "1", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.__init__.DeepLabV2_ResNet101_MSC": [[21, 27], ["msc.MSC", "deeplabv2.DeepLabV2"], "function", ["None"], ["", "", "", "def", "DeepLabV2_ResNet101_MSC", "(", "n_classes", ")", ":", "\n", "    ", "return", "MSC", "(", "\n", "base", "=", "DeepLabV2", "(", "\n", "n_classes", "=", "n_classes", ",", "n_blocks", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "atrous_rates", "=", "[", "6", ",", "12", ",", "18", ",", "24", "]", "\n", ")", ",", "\n", "scales", "=", "[", "0.5", ",", "0.75", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.msc.MSC.__init__": [[18, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__"], ["def", "__init__", "(", "self", ",", "base", ",", "scales", "=", "None", ")", ":", "\n", "        ", "super", "(", "MSC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "base", "\n", "if", "scales", ":", "\n", "            ", "self", ".", "scales", "=", "scales", "\n", "", "else", ":", "\n", "            ", "self", ".", "scales", "=", "[", "0.5", ",", "0.75", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.model.msc.MSC.forward": [[26, 53], ["msc.MSC.base"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Original", "\n", "        ", "import", "pdb", "\n", "#pdb.set_trace()", "\n", "logits", "=", "self", ".", "base", "(", "x", ")", "\n", "'''\n        _, _, H, W = logits.shape\n        interp = lambda l: F.interpolate(\n            l, size=(H, W), mode=\"bilinear\", align_corners=False\n        )\n         \n        # Scaled\n        logits_pyramid = []\n        for p in self.scales:\n            h = F.interpolate(x, scale_factor=p, mode=\"bilinear\", align_corners=False)\n            logits_pyramid.append(self.base(h))\n\n        # Pixel-wise max\n        logits_all = [logits] + [interp(l) for l in logits_pyramid]\n        logits_max = torch.max(torch.stack(logits_all), dim=0)[0]\n\n        if self.training:\n            return [logits] + logits_pyramid + [logits_max]\n        else:\n            return logits_max\n        '''", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.ucm.UCMDataSet.__init__": [[10, 44], ["i_id.strip", "os.join", "ucm.UCMDataSet.files.append", "open", "os.join", "re.compile", "re.compile.match().groups", "re.compile.match"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "module", ",", "crop_size", "=", "(", "320", ",", "320", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "ignore_label", "=", "255", ")", ":", "\n", "\n", "        ", "self", ".", "module", "=", "module", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "class_map", "=", "{", "'agricultural'", ":", "0", ",", "'airplane'", ":", "1", ",", "'baseballdiamond'", ":", "2", ",", "'beach'", ":", "3", ",", "'buildings'", ":", "4", ",", "'chaparral'", ":", "5", ",", "\n", "'denseresidential'", ":", "6", ",", "'forest'", ":", "7", ",", "'freeway'", ":", "8", ",", "'golfcourse'", ":", "9", ",", "'harbor'", ":", "10", ",", "'intersection'", ":", "11", ",", "\n", "'mediumresidential'", ":", "12", ",", "'mobilehomepark'", ":", "13", ",", "'overpass'", ":", "14", ",", "'parkinglot'", ":", "15", ",", "'river'", ":", "16", ",", "\n", "'runway'", ":", "17", ",", "'sparseresidential'", ":", "18", ",", "'storagetanks'", ":", "19", ",", "'tenniscourt'", ":", "20", "}", "\n", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"UCMerced_Images/%s.tif\"", "%", "name", ")", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "                ", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"UCMerced_Labels/%s.png\"", "%", "name", ")", "\n", "", "else", ":", "\n", "                ", "template", "=", "re", ".", "compile", "(", "\"([a-zA-Z]+)([0-9]+)\"", ")", "\n", "class_name", "=", "template", ".", "match", "(", "name", ")", ".", "groups", "(", ")", "[", "0", "]", "\n", "label_file", "=", "self", ".", "class_map", "[", "class_name", "]", "\n", "\n", "\n", "", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.ucm.UCMDataSet.__len__": [[47, 49], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.ucm.UCMDataSet.generate_scale_label": [[50, 56], ["cv2.resize", "cv2.resize", "random.randint"], "methods", ["None"], ["", "def", "generate_scale_label", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "f_scale", "=", "0.5", "+", "random", ".", "randint", "(", "0", ",", "11", ")", "/", "10.0", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.ucm.UCMDataSet.__getitem__": [[57, 113], ["cv2.imread", "cv2.resize", "numpy.asarray", "max", "max", "random.randint", "random.randint", "numpy.asarray", "image.transpose.transpose.transpose", "numpy.asarray", "numpy.asarray", "ucm.UCMDataSet.generate_scale_label", "cv2.copyMakeBorder", "numpy.asarray", "image.transpose.transpose.copy", "numpy.asarray.copy", "numpy.array", "PIL.Image.open", "cv2.copyMakeBorder", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.generate_scale_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "-", "1", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "256", ",", "256", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "            ", "label", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "np", ".", "asarray", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "generate_scale_label", "(", "image", ",", "label", ")", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "-=", "self", ".", "mean", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "            ", "img_h", ",", "img_w", "=", "label", ".", "shape", "\n", "", "else", ":", "\n", "            ", "img_h", "=", "image", ".", "shape", "[", "0", "]", "\n", "img_w", "=", "image", ".", "shape", "[", "1", "]", "\n", "\n", "", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "                ", "label_pad", "=", "cv2", ".", "copyMakeBorder", "(", "label", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "label_pad", "=", "label", "\n", "", "", "else", ":", "\n", "            ", "img_pad", ",", "label_pad", "=", "image", ",", "label", "\n", "\n", "", "img_h", ",", "img_w", "=", "img_pad", ".", "shape", "[", "0", "]", ",", "img_pad", ".", "shape", "[", "1", "]", "\n", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "crop_h", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "crop_w", ")", "\n", "image", "=", "np", ".", "asarray", "(", "img_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "            ", "label", "=", "np", ".", "asarray", "(", "label_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "is_mirror", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "                ", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "\n", "", "", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", ",", "index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__init__": [[11, 42], ["json.load", "i_id.strip", "open", "os.join", "deepglobe.DeepGlobeDataSet.files.append", "open", "os.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "module", ",", "crop_size", "=", "(", "320", ",", "320", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "ignore_label", "=", "255", ")", ":", "\n", "\n", "        ", "self", ".", "module", "=", "module", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "class_map", "=", "json", ".", "load", "(", "open", "(", "'class_map.json'", ",", "'r'", ")", ")", "\n", "self", ".", "class_mappings", "=", "{", "'urban_land'", ":", "0", ",", "'agriculture_land'", ":", "1", ",", "'rangeland'", ":", "2", ",", "'forest_land'", ":", "3", ",", "'water'", ":", "4", ",", "'barren_land'", ":", "5", "}", "\n", "\n", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"DeepGlobe_Images/%s_sat.jpg\"", "%", "name", ")", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "                ", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"DeepGlobe_Labels/%s_mask.png\"", "%", "name", ")", "\n", "", "else", ":", "\n", "                ", "class_id", "=", "self", ".", "class_map", "[", "name", "]", "\n", "label_file", "=", "self", ".", "class_mappings", "[", "class_id", "]", "\n", "\n", "\n", "", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.generate_scale_label": [[48, 54], ["cv2.resize", "cv2.resize", "random.randint"], "methods", ["None"], ["", "def", "generate_scale_label", "(", "self", ",", "image", ",", "label", ")", ":", "\n", "        ", "f_scale", "=", "0.5", "+", "random", ".", "randint", "(", "0", ",", "11", ")", "/", "10.0", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "            ", "label", "=", "cv2", ".", "resize", "(", "label", ",", "None", ",", "fx", "=", "f_scale", ",", "fy", "=", "f_scale", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.get_deepglobe_labels": [[56, 69], ["numpy.asarray"], "methods", ["None"], ["", "def", "get_deepglobe_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the mapping that associates pascal classes with label colors\n        Returns:\n            np.ndarray with dimensions (5, 3)\n        \"\"\"", "\n", "\n", "return", "np", ".", "asarray", "(", "\n", "[", "\n", "[", "0", ",", "255", ",", "255", "]", ",", "#urban_land", "\n", "[", "255", ",", "255", ",", "0", "]", ",", "#agriculture_land", "\n", "[", "255", ",", "0", ",", "255", "]", ",", "#rangeland", "\n", "[", "0", ",", "255", ",", "0", "]", ",", "#forest", "\n", "[", "0", ",", "0", ",", "255", "]", "#water ", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.encode_segmap": [[73, 88], ["mask.astype.astype.astype", "numpy.zeros", "enumerate", "label_mask.astype.astype.astype", "deepglobe.DeepGlobeDataSet.get_deepglobe_labels", "numpy.where", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.get_deepglobe_labels"], ["", "def", "encode_segmap", "(", "self", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Encode segmentation label images as deepglobe classes\n        Args:\n            mask (np.ndarray): raw segmentation label image of dimension\n               (M, N, 3), in which the Pascal classes are encoded as colours.\n            Returns:\n             (np.ndarray): class map with dimensions (M,N), where the value at\n             a given location is the integer denoting the class index.\n        \"\"\"", "\n", "mask", "=", "mask", ".", "astype", "(", "int", ")", "\n", "label_mask", "=", "np", ".", "zeros", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "ii", ",", "label", "in", "enumerate", "(", "self", ".", "get_deepglobe_labels", "(", ")", ")", ":", "\n", "            ", "label_mask", "[", "np", ".", "where", "(", "np", ".", "all", "(", "mask", "==", "label", ",", "axis", "=", "-", "1", ")", ")", "[", ":", "2", "]", "]", "=", "ii", "\n", "", "label_mask", "=", "label_mask", ".", "astype", "(", "int", ")", "\n", "return", "label_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.__getitem__": [[89, 147], ["cv2.imread", "cv2.resize", "numpy.asarray", "max", "max", "random.randint", "random.randint", "numpy.asarray", "image.transpose.transpose.transpose", "cv2.imread", "cv2.resize", "deepglobe.DeepGlobeDataSet.encode_segmap", "numpy.asarray", "deepglobe.DeepGlobeDataSet.generate_scale_label", "cv2.copyMakeBorder", "numpy.asarray", "image.transpose.transpose.copy", "numpy.asarray.copy", "numpy.array", "cv2.copyMakeBorder", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.encode_segmap", "home.repos.pwc.inspect_result.immuno121_als4gan.data.deepglobe.DeepGlobeDataSet.generate_scale_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "-", "1", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "320", ",", "320", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "            ", "label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "320", ",", "320", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "label", "=", "self", ".", "encode_segmap", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "np", ".", "asarray", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "generate_scale_label", "(", "image", ",", "label", ")", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "image", "-=", "self", ".", "mean", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "            ", "img_h", ",", "img_w", "=", "label", ".", "shape", "\n", "", "else", ":", "\n", "            ", "img_h", "=", "image", ".", "shape", "[", "0", "]", "\n", "img_w", "=", "image", ".", "shape", "[", "1", "]", "\n", "\n", "", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "                ", "label_pad", "=", "cv2", ".", "copyMakeBorder", "(", "label", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "label_pad", "=", "label", "\n", "", "", "else", ":", "\n", "            ", "img_pad", ",", "label_pad", "=", "image", ",", "label", "\n", "\n", "", "img_h", ",", "img_w", "=", "img_pad", ".", "shape", "[", "0", "]", ",", "img_pad", ".", "shape", "[", "1", "]", "\n", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "crop_h", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "crop_w", ")", "\n", "image", "=", "np", ".", "asarray", "(", "img_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "            ", "label", "=", "np", ".", "asarray", "(", "label_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "is_mirror", ":", "\n", "            ", "flip", "=", "np", ".", "random", ".", "choice", "(", "2", ")", "*", "2", "-", "1", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "flip", "]", "\n", "if", "self", ".", "module", "==", "'s4gan'", ":", "\n", "                ", "label", "=", "label", "[", ":", ",", ":", ":", "flip", "]", "\n", "", "", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", ",", "index", "\n", "", "", ""]]}