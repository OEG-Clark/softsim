{"home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Conv1d.__init__": [[9, 17], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "cout", ")", "\n", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Conv1d.forward": [[18, 23], ["models.Conv1d.conv_block", "models.Conv1d.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "\t\t\t", "out", "+=", "x", "\n", "", "return", "self", ".", "act", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Conv2d.__init__": [[27, 35], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cout", ")", "\n", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Conv2d.forward": [[36, 41], ["models.Conv2d.conv_block", "models.Conv2d.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "\t\t\t", "out", "+=", "x", "\n", "", "return", "self", ".", "act", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Conv2dTranspose.__init__": [[45, 52], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", "=", "0", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cout", ")", "\n", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Conv2dTranspose.forward": [[53, 56], ["models.Conv2dTranspose.conv_block", "models.Conv2dTranspose.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "self", ".", "act", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Lipsync_Student.__init__": [[59, 110], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.Sequential", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Lipsync_Student", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "audio_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", ")", "\n", "\n", "self", ".", "face_decoder_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", ")", ",", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "# 3,3", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 6, 6", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 12, 12", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 24, 24", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 48, 48", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "0", ",", "1", ")", ")", ",", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "]", ")", "# 48,96", "\n", "\n", "self", ".", "output_block", "=", "nn", ".", "Sequential", "(", "Conv2d", "(", "32", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Lipsync_Student.forward": [[111, 133], ["torch.cat.size", "len", "models.Lipsync_Student.audio_encoder", "models.Lipsync_Student.output_block", "torch.cat.size", "torch.cat", "f", "torch.split", "torch.stack", "range", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "audio_sequences", ")", ":", "\n", "# audio_sequences = (B, T, 1, 80, 16)", "\n", "        ", "B", "=", "audio_sequences", ".", "size", "(", "0", ")", "\n", "\n", "input_dim_size", "=", "len", "(", "audio_sequences", ".", "size", "(", ")", ")", "\n", "if", "input_dim_size", ">", "4", ":", "\n", "            ", "audio_sequences", "=", "torch", ".", "cat", "(", "[", "audio_sequences", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "audio_sequences", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "x", "=", "self", ".", "audio_encoder", "(", "audio_sequences", ")", "# B, 512, 1, 1", "\n", "for", "f", "in", "self", ".", "face_decoder_blocks", ":", "\n", "            ", "x", "=", "f", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "output_block", "(", "x", ")", "\n", "\n", "if", "input_dim_size", ">", "4", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "B", ",", "dim", "=", "0", ")", "# [(B, C, H, W)]", "\n", "outputs", "=", "torch", ".", "stack", "(", "x", ",", "dim", "=", "2", ")", "# (B, C, T, H, W)", "\n", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "x", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Model.__init__": [[138, 198], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "torch.nn.Upsample", "models.Conv1d", "torch.nn.Upsample", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "models.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "audio_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv1d", "(", "514", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "face_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "2", ")", ",", "# Bx32x25x48x48", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx64x25x24x24", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx128x25x12x12", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx256x25x6x6", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx512x25x3x3", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", ",", "# Bx512x25x1x1", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "time_upsampler", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "Conv1d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "Conv1d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv1d", "(", "1112", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "1024", ",", "514", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.models.Model.forward": [[201, 244], ["torch.cat.size", "torch.cat", "models.Model.face_encoder", "torch.split", "torch.stack", "face_enc.view.view.view", "models.Model.time_upsampler", "stft_sequence.permute", "models.Model.audio_encoder", "torch.cat", "models.Model.decoder", "models.Model.permute", "torch.sigmoid", "face_enc.view.view.size", "face_enc.view.view.size", "range", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "stft_sequence", ",", "face_sequence", ")", ":", "\n", "\n", "# -----------------------------Face----------------------------------- #", "\n", "# print(\"Face input: \", face_sequence.size())\t\t\t\t\t\t# Bx3xTx48x96", "\n", "\n", "\t\t", "B", "=", "face_sequence", ".", "size", "(", "0", ")", "\n", "face_sequence", "=", "torch", ".", "cat", "(", "[", "face_sequence", "[", ":", ",", ":", ",", "i", "]", "for", "i", "in", "range", "(", "face_sequence", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "# print(\"Face sequence concatenated: \", face_sequence.size())\t\t# (B*T)x3x48x96", "\n", "\n", "# Face encoder", "\n", "face_enc", "=", "self", ".", "face_encoder", "(", "face_sequence", ")", "# (B*T)x512x1x1", "\n", "face_enc", "=", "torch", ".", "split", "(", "face_enc", ",", "B", ",", "dim", "=", "0", ")", "\n", "face_enc", "=", "torch", ".", "stack", "(", "face_enc", ",", "dim", "=", "2", ")", "# Bx512xTx1x1\t\t\t\t", "\n", "\n", "face_enc", "=", "face_enc", ".", "view", "(", "-", "1", ",", "face_enc", ".", "size", "(", "1", ")", ",", "face_enc", ".", "size", "(", "2", ")", ")", "# Bx512xT", "\n", "\n", "face_output", "=", "self", ".", "time_upsampler", "(", "face_enc", ")", "# Bx512x(T*4)", "\n", "# -------------------------------------------------------------------- #", "\n", "\n", "# -------------------------- Audio ------------------------------- #", "\n", "\n", "# print(\"STFT input: \", stft_sequence.size())\t\t\t\t\t\t# BxTx514", "\n", "\n", "stft_sequence_permuted", "=", "stft_sequence", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# Bx514xT", "\n", "\n", "# Audio encoder", "\n", "audio_enc", "=", "self", ".", "audio_encoder", "(", "stft_sequence_permuted", ")", "# Bx600xT", "\n", "\n", "# Concatenate face network output and audio encoder output", "\n", "concatenated", "=", "torch", ".", "cat", "(", "[", "audio_enc", ",", "face_output", "]", ",", "dim", "=", "1", ")", "# Bx1112xT", "\n", "\n", "# Audio decoder", "\n", "dec", "=", "self", ".", "decoder", "(", "concatenated", ")", "# Bx514xT", "\n", "\n", "# Mask", "\n", "mask", "=", "dec", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# BxTx514", "\n", "\n", "# Add the mask with the input noisy spec", "\n", "output", "=", "mask", "+", "stft_sequence", "\n", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "# BxTx514", "\n", "# -------------------------------------------------------------------- #", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.load_wav": [[15, 27], ["subprocess.call", "audio.load_wav", "audio.load_wav", "os.remove"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav"], ["def", "load_wav", "(", "args", ")", ":", "\n", "\n", "\t", "wav_file", "=", "'tmp.wav'", ";", "\n", "\n", "subprocess", ".", "call", "(", "'ffmpeg -hide_banner -loglevel panic -threads 1 -y -i %s -async 1 -ac 1 -vn \\\n\t\t\t\t\t-acodec pcm_s16le -ar 16000 %s'", "%", "(", "args", ".", "input", ",", "wav_file", ")", ",", "shell", "=", "True", ")", "\n", "\n", "wav", "=", "audio", ".", "load_wav", "(", "wav_file", ",", "sampling_rate", ")", "\n", "\n", "os", ".", "remove", "(", "\"tmp.wav\"", ")", "\n", "\n", "return", "wav", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.get_spec": [[29, 48], ["numpy.abs", "audio.db_from_amp", "audio.db_from_amp", "audio.angle", "audio.angle", "audio.normalize_mag", "audio.normalize_mag", "audio.normalize_phase", "audio.normalize_phase", "numpy.concatenate", "librosa.stft"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.db_from_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.db_from_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_phase", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_phase"], ["", "def", "get_spec", "(", "wav", ")", ":", "\n", "\n", "# Compute STFT using librosa", "\n", "\t", "stft", "=", "librosa", ".", "stft", "(", "y", "=", "wav", ",", "n_fft", "=", "hp", ".", "hparams", ".", "n_fft_den", ",", "hop_length", "=", "hp", ".", "hparams", ".", "hop_size_den", ",", "win_length", "=", "hp", ".", "hparams", ".", "win_size_den", ")", ".", "T", "\n", "stft", "=", "stft", "[", ":", "-", "1", "]", "# Tx257", "\n", "\n", "# Decompose into magnitude and phase representations", "\n", "mag", "=", "np", ".", "abs", "(", "stft", ")", "\n", "mag", "=", "audio", ".", "db_from_amp", "(", "mag", ")", "\n", "phase", "=", "audio", ".", "angle", "(", "stft", ")", "\n", "\n", "# Normalize the magnitude and phase representations", "\n", "norm_mag", "=", "audio", ".", "normalize_mag", "(", "mag", ")", "\n", "norm_phase", "=", "audio", ".", "normalize_phase", "(", "phase", ")", "\n", "\n", "# Concatenate the magnitude and phase representations", "\n", "spec_ip", "=", "np", ".", "concatenate", "(", "(", "norm_mag", ",", "norm_phase", ")", ",", "axis", "=", "1", ")", "# Tx514", "\n", "\n", "return", "spec_ip", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.crop_mels": [[50, 64], ["len", "audio.melspectrogram", "audio.melspectrogram"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram"], ["", "def", "crop_mels", "(", "start_idx", ",", "noisy_wav", ")", ":", "\n", "\n", "    ", "end_idx", "=", "start_idx", "+", "3200", "\n", "\n", "# Get the segmented wav (0.2 second)", "\n", "noisy_seg_wav", "=", "noisy_wav", "[", "start_idx", ":", "end_idx", "]", "\n", "if", "len", "(", "noisy_seg_wav", ")", "!=", "3200", ":", "\n", "        ", "return", "None", "\n", "\n", "# Compute the melspectrogram using librosa", "\n", "", "spec", "=", "audio", ".", "melspectrogram", "(", "noisy_seg_wav", ",", "hp", ".", "hparams", ")", ".", "T", "# 16x80", "\n", "spec", "=", "spec", "[", ":", "-", "1", "]", "\n", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.get_segmented_mels": [[65, 81], ["range", "numpy.asarray", "inference.crop_mels", "np.asarray.append"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.crop_mels"], ["", "def", "get_segmented_mels", "(", "start_idx", ",", "noisy_wav", ")", ":", "\n", "\n", "    ", "mels", "=", "[", "]", "\n", "if", "start_idx", "-", "1280", "<", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "# Get the overlapping continuous segments of noisy mels", "\n", "", "for", "i", "in", "range", "(", "start_idx", ",", "start_idx", "+", "hp", ".", "hparams", ".", "wav_step_size", ",", "640", ")", ":", "\n", "        ", "m", "=", "crop_mels", "(", "i", "-", "1280", ",", "noisy_wav", ")", "\n", "if", "m", "is", "None", "or", "m", ".", "shape", "[", "0", "]", "!=", "hp", ".", "hparams", ".", "mel_step_size", ":", "\n", "            ", "return", "None", "\n", "", "mels", ".", "append", "(", "m", ".", "T", ")", "\n", "\n", "", "mels", "=", "np", ".", "asarray", "(", "mels", ")", "\n", "\n", "return", "mels", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.generate_video": [[83, 125], ["audio.unnormalize_mag", "audio.unnormalize_mag", "audio.unnormalize_phase", "audio.unnormalize_phase", "audio.amp_from_db", "audio.amp_from_db", "audio.make_complex", "audio.make_complex", "librosa.istft", "os.path.join", "librosa.output.write_wav", "print", "os.path.exists", "os.makedirs", "os.path.join", "subprocess.call", "os.path.join", "os.path.exists", "subprocess.call", "os.remove", "print", "args.input.split", "os.remove"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.unnormalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.unnormalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.unnormalize_phase", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.unnormalize_phase", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.amp_from_db", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.amp_from_db", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.make_complex", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.make_complex"], ["", "def", "generate_video", "(", "stft", ",", "args", ")", ":", "\n", "\n", "# Reconstruct the predicted wav", "\n", "\t", "mag", "=", "stft", "[", ":", "257", ",", ":", "]", "\n", "phase", "=", "stft", "[", "257", ":", ",", ":", "]", "\n", "\n", "denorm_mag", "=", "audio", ".", "unnormalize_mag", "(", "mag", ")", "\n", "denorm_phase", "=", "audio", ".", "unnormalize_phase", "(", "phase", ")", "\n", "recon_mag", "=", "audio", ".", "amp_from_db", "(", "denorm_mag", ")", "\n", "complex_arr", "=", "audio", ".", "make_complex", "(", "recon_mag", ",", "denorm_phase", ")", "\n", "wav", "=", "librosa", ".", "istft", "(", "complex_arr", ",", "hop_length", "=", "hp", ".", "hparams", ".", "hop_size_den", ",", "win_length", "=", "hp", ".", "hparams", ".", "win_size_den", ")", "\n", "\n", "# Create the folder to save the results", "\n", "result_dir", "=", "args", ".", "result_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "# Save the wav file", "\n", "", "audio_output", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'result.wav'", ")", "\n", "librosa", ".", "output", ".", "write_wav", "(", "audio_output", ",", "wav", ",", "sampling_rate", ")", "\n", "\n", "print", "(", "\"Saved the denoised audio file:\"", ",", "audio_output", ")", "\n", "\n", "# Save the video output file if the input is a video file", "\n", "if", "args", ".", "input", ".", "split", "(", "'.'", ")", "[", "1", "]", "in", "[", "'wav'", ",", "'mp3'", "]", ":", "\n", "\t\t", "return", "\n", "", "else", ":", "\n", "\t\t", "no_sound_video", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'result_nosouund.mp4'", ")", "\n", "subprocess", ".", "call", "(", "'ffmpeg -hide_banner -loglevel panic -i %s -c copy -an -strict -2 %s'", "%", "(", "args", ".", "input", ",", "no_sound_video", ")", ",", "shell", "=", "True", ")", "\n", "\n", "video_output_mp4", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'result.mp4'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "video_output_mp4", ")", ":", "\n", "\t\t\t", "os", ".", "remove", "(", "video_output_mp4", ")", "\n", "\n", "", "subprocess", ".", "call", "(", "'ffmpeg -hide_banner -loglevel panic -y -i %s -i %s -strict -2 -q:v 1 %s'", "%", "\n", "(", "audio_output", ",", "no_sound_video", ",", "video_output_mp4", ")", ",", "shell", "=", "True", ")", "\n", "\n", "os", ".", "remove", "(", "no_sound_video", ")", "\n", "\n", "print", "(", "\"Saved the denoised video file:\"", ",", "video_output_mp4", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.load_model": [[127, 148], ["models.Model", "print", "checkpoint[].keys", "model.to.load_state_dict", "model.to.to", "model.to.eval", "torch.cuda.is_available", "torch.load", "torch.load", "key.startswith", "key.split"], "function", ["None"], ["", "", "def", "load_model", "(", "args", ")", ":", "\n", "\n", "\t", "model", "=", "Model", "(", ")", "\n", "print", "(", "\"Loaded model from: \"", ",", "args", ".", "checkpoint_path", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "\t\t", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ")", "\n", "\n", "", "ckpt", "=", "{", "}", "\n", "for", "key", "in", "checkpoint", "[", "'state_dict'", "]", ".", "keys", "(", ")", ":", "\n", "\t\t", "if", "key", ".", "startswith", "(", "'module.'", ")", ":", "\n", "\t\t\t", "k", "=", "key", ".", "split", "(", "'module.'", ",", "1", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "k", "=", "key", "\n", "", "ckpt", "[", "k", "]", "=", "checkpoint", "[", "'state_dict'", "]", "[", "key", "]", "\n", "", "model", ".", "load_state_dict", "(", "ckpt", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "return", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.load_lipsync_model": [[149, 169], ["models.Lipsync_Student", "lipsync_student_checkpoint[].keys", "lipsync_student.to.load_state_dict", "lipsync_student.to.to", "lipsync_student.to.eval", "torch.cuda.is_available", "torch.load", "torch.load", "key.startswith", "key.split"], "function", ["None"], ["", "def", "load_lipsync_model", "(", "args", ")", ":", "\n", "\n", "\t", "lipsync_student", "=", "Lipsync_Student", "(", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "lipsync_student_checkpoint", "=", "torch", ".", "load", "(", "args", ".", "lipsync_student_model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "\t\t", "lipsync_student_checkpoint", "=", "torch", ".", "load", "(", "args", ".", "lipsync_student_model_path", ")", "\n", "\n", "", "ckpt", "=", "{", "}", "\n", "for", "key", "in", "lipsync_student_checkpoint", "[", "'state_dict'", "]", ".", "keys", "(", ")", ":", "\n", "\t\t", "if", "key", ".", "startswith", "(", "'module.'", ")", ":", "\n", "\t\t\t", "k", "=", "key", ".", "split", "(", "'module.'", ",", "1", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "\t\t\t", "k", "=", "key", "\n", "", "ckpt", "[", "k", "]", "=", "lipsync_student_checkpoint", "[", "'state_dict'", "]", "[", "key", "]", "\n", "", "lipsync_student", ".", "load_state_dict", "(", "ckpt", ")", "\n", "lipsync_student", "=", "lipsync_student", ".", "to", "(", "device", ")", "\n", "\n", "return", "lipsync_student", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.predict": [[171, 278], ["inference.load_wav", "print", "inference.load_lipsync_model", "inference.load_model", "enumerate", "numpy.array", "numpy.array", "print", "tqdm.tqdm", "print", "numpy.array", "int", "range", "range", "inference.get_spec", "np.array.append", "inference.get_segmented_mels", "numpy.expand_dims", "np.array.append", "range", "torch.FloatTensor().to", "torch.FloatTensor().to", "model.cpu().numpy", "np.array.extend", "inference.generate_video", "print", "range", "len", "len", "torch.no_grad", "load_lipsync_model.", "torch.no_grad", "load_model.", "numpy.concatenate", "numpy.concatenate", "torch.FloatTensor", "torch.FloatTensor", "model.cpu"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.inference.load_lipsync_model", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.inference.load_model", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.get_spec", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.get_segmented_mels", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.generate_video"], ["", "def", "predict", "(", "args", ")", ":", "\n", "\n", "# Load the input wav", "\n", "\t", "inp_wav", "=", "load_wav", "(", "args", ")", "\n", "print", "(", "\"Input wav: \"", ",", "inp_wav", ".", "shape", ")", "\n", "\n", "total_steps", "=", "inp_wav", ".", "shape", "[", "0", "]", "\n", "\n", "# Get the windows of 1 second wav step segments with a small overlap", "\n", "id_windows", "=", "[", "range", "(", "i", ",", "i", "+", "hp", ".", "hparams", ".", "wav_step_size", ")", "for", "i", "in", "range", "(", "1280", ",", "total_steps", ",", "\n", "hp", ".", "hparams", ".", "wav_step_size", "-", "hp", ".", "hparams", ".", "wav_step_overlap", ")", "if", "(", "i", "+", "hp", ".", "hparams", ".", "wav_step_size", "<=", "total_steps", ")", "]", "\n", "\n", "# Load the student lipsync model", "\n", "lipsync_student", "=", "load_lipsync_model", "(", "args", ")", "\n", "\n", "# Load the model", "\n", "model", "=", "load_model", "(", "args", ")", "\n", "\n", "generated_stft", "=", "None", "\n", "all_spec_batch", "=", "[", "]", "\n", "all_mel_batch", "=", "[", "]", "\n", "skip", "=", "False", "\n", "for", "i", ",", "window", "in", "enumerate", "(", "id_windows", ")", ":", "\n", "\n", "\t\t", "start_idx", "=", "window", "[", "0", "]", "\n", "end_idx", "=", "start_idx", "+", "hp", ".", "hparams", ".", "wav_step_size", "\n", "\n", "# Segment the wav (1 second window)", "\n", "wav", "=", "inp_wav", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "# Get the corresponding input noisy melspectrograms", "\n", "spec_window", "=", "get_spec", "(", "wav", ")", "\n", "if", "(", "spec_window", ".", "shape", "[", "0", "]", "!=", "hp", ".", "hparams", ".", "spec_step_size", ")", ":", "\n", "\t\t\t", "skip", "=", "True", "\n", "break", "\n", "", "all_spec_batch", ".", "append", "(", "spec_window", ")", "\n", "\n", "# Get the melspectrogram for lipsync model", "\n", "mel_window", "=", "get_segmented_mels", "(", "start_idx", ",", "inp_wav", ")", "\n", "if", "(", "mel_window", "is", "None", ")", ":", "\n", "\t\t\t", "skip", "=", "True", "\n", "break", "\n", "\n", "", "mel_window", "=", "np", ".", "expand_dims", "(", "mel_window", ",", "axis", "=", "1", ")", "\n", "all_mel_batch", ".", "append", "(", "mel_window", ")", "\n", "\n", "\n", "", "if", "skip", "==", "True", "or", "len", "(", "all_spec_batch", ")", "==", "0", "or", "len", "(", "all_mel_batch", ")", "==", "0", ":", "\n", "\t\t", "return", "None", "\n", "\n", "", "all_spec_batch", "=", "np", ".", "array", "(", "all_spec_batch", ")", "\n", "\n", "all_mel_batch", "=", "np", ".", "array", "(", "all_mel_batch", ")", "\n", "\n", "if", "all_spec_batch", ".", "shape", "[", "0", "]", "!=", "all_mel_batch", ".", "shape", "[", "0", "]", ":", "\n", "\t\t", "return", "None", "\n", "\n", "", "print", "(", "\"Total input segment windows: \"", ",", "all_spec_batch", ".", "shape", "[", "0", "]", ")", "\n", "\n", "pred_stft", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "all_spec_batch", ".", "shape", "[", "0", "]", ",", "args", ".", "batch_size", ")", ")", ":", "\n", "\n", "\t\t", "mel_batch", "=", "all_mel_batch", "[", "i", ":", "i", "+", "args", ".", "batch_size", "]", "\n", "spec_batch", "=", "all_spec_batch", "[", "i", ":", "i", "+", "args", ".", "batch_size", "]", "\n", "\n", "# Convert to torch tensors", "\n", "inp_mel", "=", "torch", ".", "FloatTensor", "(", "mel_batch", ")", ".", "to", "(", "device", ")", "\n", "inp_stft", "=", "torch", ".", "FloatTensor", "(", "spec_batch", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Predict the faces using the student lipsync model", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "faces", "=", "lipsync_student", "(", "inp_mel", ")", "\n", "\n", "# Predict the spectrograms for the corresponding window", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "pred", "=", "model", "(", "inp_stft", ",", "faces", ")", "\n", "\n", "# Detach from gpu", "\n", "", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_stft", ".", "extend", "(", "pred", ")", "\n", "\n", "", "print", "(", "\"Successfully predicted for all the windows\"", ")", "\n", "\n", "# Convert to numpy array", "\n", "pred_stft", "=", "np", ".", "array", "(", "pred_stft", ")", "\n", "\n", "# Concatenate all the predictions ", "\n", "steps", "=", "int", "(", "hp", ".", "hparams", ".", "spec_step_size", "-", "(", "(", "hp", ".", "hparams", ".", "wav_step_overlap", "/", "640", ")", "*", "4", ")", ")", "\n", "\n", "if", "pred_stft", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "\t\t", "generated_stft", "=", "pred_stft", "[", "0", "]", ".", "T", "\n", "", "else", ":", "\n", "\t\t", "generated_stft", "=", "pred_stft", "[", "0", "]", ".", "T", "[", ":", ",", ":", "steps", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "pred_stft", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Last batch", "\n", "\t\t", "if", "i", "==", "pred_stft", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "\t\t\t", "generated_stft", "=", "np", ".", "concatenate", "(", "(", "generated_stft", ",", "pred_stft", "[", "i", "]", ".", "T", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "generated_stft", "=", "np", ".", "concatenate", "(", "(", "generated_stft", ",", "pred_stft", "[", "i", "]", ".", "T", "[", ":", ",", ":", "steps", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "", "", "if", "generated_stft", "is", "not", "None", ":", "\n", "\t\t", "generate_video", "(", "generated_stft", ",", "args", ")", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "\"Oops! Couldn't denoise the input file!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.generate_video": [[20, 40], ["cv2.VideoWriter", "range", "cv2.VideoWriter.release", "subprocess.call", "subprocess.call", "os.remove", "os.remove", "cv2.VideoWriter_fourcc", "len", "numpy.clip", "cv2.VideoWriter.write", "numpy.round", "numpy.uint8"], "function", ["None"], ["def", "generate_video", "(", "frames", ",", "audio_file", ",", "output_file_name", ",", "fps", "=", "25", ")", ":", "\n", "\n", "\t", "fname", "=", "'output_lower.avi'", "\n", "video", "=", "cv2", ".", "VideoWriter", "(", "fname", ",", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'DIVX'", ")", ",", "fps", ",", "(", "frames", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "frames", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", ":", "\n", "\t\t", "img", "=", "np", ".", "clip", "(", "np", ".", "round", "(", "frames", "[", "i", "]", "*", "255", ")", ",", "0", ",", "255", ")", "\n", "video", ".", "write", "(", "np", ".", "uint8", "(", "img", ")", ")", "\n", "\n", "", "video", ".", "release", "(", ")", "\n", "\n", "no_sound_video", "=", "output_file_name", "+", "'_nosound.mp4'", "\n", "subprocess", ".", "call", "(", "'ffmpeg -hide_banner -loglevel panic -i %s -c copy -an -strict -2 %s'", "%", "(", "fname", ",", "no_sound_video", ")", ",", "shell", "=", "True", ")", "\n", "\n", "video_output", "=", "output_file_name", "+", "'.mp4'", "\n", "subprocess", ".", "call", "(", "'ffmpeg -hide_banner -loglevel panic -y -i %s -i %s -strict -2 -q:v 1 %s'", "%", "\n", "(", "audio_file", ",", "no_sound_video", ",", "video_output", ")", ",", "shell", "=", "True", ")", "\n", "\n", "os", ".", "remove", "(", "fname", ")", "\n", "os", ".", "remove", "(", "no_sound_video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.reconstruct_wav": [[42, 54], ["audio.unnormalize_mag", "audio.unnormalize_phase", "audio.amp_from_db", "audio.make_complex", "librosa.istft"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.unnormalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.unnormalize_phase", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.amp_from_db", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.make_complex"], ["", "def", "reconstruct_wav", "(", "stft", ")", ":", "\n", "\n", "\t", "mag", "=", "stft", "[", ":", "257", ",", ":", "]", "\n", "phase", "=", "stft", "[", "257", ":", ",", ":", "]", "\n", "\n", "denorm_mag", "=", "audio", ".", "unnormalize_mag", "(", "mag", ")", "\n", "denorm_phase", "=", "audio", ".", "unnormalize_phase", "(", "phase", ")", "\n", "recon_mag", "=", "audio", ".", "amp_from_db", "(", "denorm_mag", ")", "\n", "complex_arr", "=", "audio", ".", "make_complex", "(", "recon_mag", ",", "denorm_phase", ")", "\n", "wav", "=", "librosa", ".", "istft", "(", "complex_arr", ",", "hop_length", "=", "hparams", ".", "hparams", ".", "hop_size_den", ",", "win_length", "=", "hparams", ".", "hparams", ".", "win_size_den", ")", "\n", "\n", "return", "wav", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.save_samples": [[56, 93], ["gt_stft.detach().cpu().numpy.detach().cpu().numpy", "inp_stft.detach().cpu().numpy.detach().cpu().numpy", "output_stft.detach().cpu().numpy.detach().cpu().numpy", "faces.detach().cpu().numpy.permute", "faces.detach().cpu().numpy.detach().cpu().numpy", "join", "range", "print", "os.path.exists", "os.mkdir", "train.reconstruct_wav", "os.path.join", "librosa.output.write_wav", "train.reconstruct_wav", "os.path.join", "librosa.output.write_wav", "train.reconstruct_wav", "os.path.join", "librosa.output.write_wav", "os.path.join", "train.generate_video", "gt_stft.detach().cpu().numpy.detach().cpu", "inp_stft.detach().cpu().numpy.detach().cpu", "output_stft.detach().cpu().numpy.detach().cpu", "faces.detach().cpu().numpy.detach().cpu", "str", "str", "str", "str", "gt_stft.detach().cpu().numpy.detach", "inp_stft.detach().cpu().numpy.detach", "output_stft.detach().cpu().numpy.detach", "faces.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.reconstruct_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.reconstruct_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.reconstruct_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.generate_video"], ["", "def", "save_samples", "(", "gt_stft", ",", "inp_stft", ",", "output_stft", ",", "faces", ",", "epoch", ",", "checkpoint_dir", ")", ":", "\n", "\n", "\t", "gt_stft", "=", "gt_stft", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "inp_stft", "=", "inp_stft", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "output_stft", "=", "output_stft", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "faces", "=", "faces", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "\n", "faces", "=", "faces", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "folder", "=", "join", "(", "checkpoint_dir", ",", "\"samples_step{:04d}\"", ".", "format", "(", "epoch", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "(", "gt_stft", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "\n", "# Save GT audio", "\n", "\t\t", "gt", "=", "gt_stft", "[", "step", "]", "\n", "gt_wav", "=", "reconstruct_wav", "(", "gt", ".", "T", ")", "\n", "gt_aud_fname", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "str", "(", "step", ")", "+", "'_gt.wav'", ")", "\n", "librosa", ".", "output", ".", "write_wav", "(", "gt_aud_fname", ",", "gt_wav", ",", "16000", ")", "\n", "\n", "# Save input audio", "\n", "inp", "=", "inp_stft", "[", "step", "]", "\n", "inp_wav", "=", "reconstruct_wav", "(", "inp", ".", "T", ")", "\n", "inp_aud_fname", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "str", "(", "step", ")", "+", "'_inp.wav'", ")", "\n", "librosa", ".", "output", ".", "write_wav", "(", "inp_aud_fname", ",", "inp_wav", ",", "16000", ")", "\n", "\n", "# Save generated audio", "\n", "generated", "=", "output_stft", "[", "step", "]", "\n", "generated_wav", "=", "reconstruct_wav", "(", "generated", ".", "T", ")", "\n", "generated_aud_fname", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "str", "(", "step", ")", "+", "'_pred.wav'", ")", "\n", "librosa", ".", "output", ".", "write_wav", "(", "generated_aud_fname", ",", "generated_wav", ",", "16000", ")", "\n", "\n", "# Save generated video", "\n", "generated_vid_fname", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "str", "(", "step", ")", "+", "'_pred'", ")", "\n", "generate_video", "(", "faces", "[", "step", "]", ",", "generated_aud_fname", ",", "generated_vid_fname", ")", "\n", "\n", "", "print", "(", "\"Saved samples:\"", ",", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.train": [[95, 148], ["nn.L1Loss", "range", "print", "lipsync_student.eval", "tqdm.tqdm", "enumerate", "model.train", "optimizer.zero_grad", "inp_mel.to.to", "inp_stft.to.to", "gt_stft.to.to", "model", "nn.L1Loss.", "l1_loss.item", "l1_loss.backward", "optimizer.step", "tqdm.tqdm.set_description", "tqdm.tqdm.refresh", "train.save_checkpoint", "torch.no_grad", "torch.no_grad", "lipsync_student", "torch.no_grad", "torch.no_grad", "train.validate"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.train", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.save_checkpoint", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.validate"], ["", "def", "train", "(", "device", ",", "lipsync_student", ",", "model", ",", "train_loader", ",", "test_loader", ",", "optimizer", ",", "epoch_resume", ",", "total_epochs", ",", "checkpoint_dir", ",", "args", ")", ":", "\n", "\n", "\t", "l1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epoch_resume", "+", "1", ",", "total_epochs", "+", "1", ")", ":", "\n", "\n", "\t\t", "print", "(", "\"Epoch %d\"", "%", "epoch", ")", "\n", "lipsync_student", ".", "eval", "(", ")", "\n", "\n", "total_loss", "=", "0.0", "\n", "progress_bar", "=", "tqdm", "(", "enumerate", "(", "train_loader", ")", ")", "\n", "\n", "for", "step", ",", "(", "inp_mel", ",", "inp_stft", ",", "gt_stft", ")", "in", "progress_bar", ":", "\n", "\n", "\t\t\t", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Transform data to CUDA device", "\n", "inp_mel", "=", "inp_mel", ".", "to", "(", "device", ")", "# BxTx1x80x16", "\n", "inp_stft", "=", "inp_stft", ".", "to", "(", "device", ")", "# BxTx514", "\n", "gt_stft", "=", "gt_stft", ".", "to", "(", "device", ")", "# BxTx514", "\n", "\n", "# Generate the faces using lipsync student model", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "faces", "=", "lipsync_student", "(", "inp_mel", ")", "# Bx3xTx48x96", "\n", "\n", "# Generate the clean stft", "\n", "", "output_stft", "=", "model", "(", "inp_stft", ",", "faces", ")", "# BxTx514", "\n", "\n", "# Compute the L1 reconstruction loss", "\n", "loss", "=", "l1_loss", "(", "output_stft", ",", "gt_stft", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "# Backpropagate", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Display the training progress", "\n", "progress_bar", ".", "set_description", "(", "'Loss: {}'", ".", "format", "(", "total_loss", "/", "(", "step", "+", "1", ")", ")", ")", "\n", "progress_bar", ".", "refresh", "(", ")", "\n", "\n", "", "train_loss", "=", "total_loss", "/", "total_batch", "\n", "\n", "# Save the checkpoint", "\n", "if", "epoch", "%", "args", ".", "ckpt_freq", "==", "0", ":", "\n", "\n", "# Save the model", "\n", "\t\t\t", "save_checkpoint", "(", "model", ",", "optimizer", ",", "train_loss", ",", "checkpoint_dir", ",", "epoch", ")", "\n", "\n", "# Validation loop", "\n", "", "if", "epoch", "%", "args", ".", "validation_interval", "==", "0", ":", "\n", "\t\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "validate", "(", "device", ",", "lipsync_student", ",", "model", ",", "test_loader", ",", "epoch", ",", "checkpoint_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.validate": [[150, 185], ["print", "nn.L1Loss", "enumerate", "print", "train.save_samples", "model.eval", "inp_mel.to.to", "inp_stft.to.to", "gt_stft.to.to", "lipsync_student", "model", "nn.L1Loss.", "losses.append", "sum", "len", "len", "l1_loss.item"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.save_samples"], ["", "", "", "", "def", "validate", "(", "device", ",", "lipsync_student", ",", "model", ",", "test_loader", ",", "epoch", ",", "checkpoint_dir", ")", ":", "\n", "\n", "\t", "print", "(", "'\\nEvaluating for {} steps'", ".", "format", "(", "len", "(", "test_loader", ")", ")", ")", "\n", "\n", "l1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "\n", "for", "step", ",", "(", "inp_mel", ",", "inp_stft", ",", "gt_stft", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "\n", "\t\t", "model", ".", "eval", "(", ")", "\n", "\n", "# Transform data to CUDA device", "\n", "inp_mel", "=", "inp_mel", ".", "to", "(", "device", ")", "\n", "inp_stft", "=", "inp_stft", ".", "to", "(", "device", ")", "\n", "gt_stft", "=", "gt_stft", ".", "to", "(", "device", ")", "\n", "\n", "# Generate the faces using lipsync student model", "\n", "faces", "=", "lipsync_student", "(", "inp_mel", ")", "\n", "\n", "# Generate the clean stft", "\n", "output_stft", "=", "model", "(", "inp_stft", ",", "faces", ")", "\n", "\n", "# Compute the L1 reconstruction loss", "\n", "loss", "=", "l1_loss", "(", "output_stft", ",", "gt_stft", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# Compute the average of the validation loss", "\n", "", "averaged_loss", "=", "sum", "(", "losses", ")", "/", "len", "(", "losses", ")", "\n", "print", "(", "\"Validation loss: \"", ",", "averaged_loss", ")", "\n", "\n", "# Save the GT and the denoised files", "\n", "save_samples", "(", "gt_stft", ",", "inp_stft", ",", "output_stft", ",", "faces", ",", "epoch", ",", "checkpoint_dir", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.save_checkpoint": [[186, 198], ["join", "torch.save", "torch.save", "print", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_checkpoint", "(", "model", ",", "optimizer", ",", "train_loss", ",", "checkpoint_dir", ",", "epoch", ")", ":", "\n", "\n", "\t", "checkpoint_path", "=", "join", "(", "checkpoint_dir", ",", "\"checkpoint_step{:04d}.pt\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"loss\"", ":", "train_loss", ",", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "}", ",", "checkpoint_path", ")", "\n", "\n", "print", "(", "\"Saved checkpoint:\"", ",", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train._load": [[199, 207], ["torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "_load", "(", "checkpoint_path", ")", ":", "\n", "\n", "\t", "if", "use_cuda", ":", "\n", "\t\t", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "", "else", ":", "\n", "\t\t", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.train.load_checkpoint": [[209, 242], ["print", "train._load", "s.items", "model.load_state_dict", "print", "print", "print", "print", "optimizer.load_state_dict", "k.startswith", "k.replace"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student._load"], ["", "def", "load_checkpoint", "(", "path", ",", "model", ",", "optimizer", ",", "reset_optimizer", "=", "False", ")", ":", "\n", "\n", "\t", "print", "(", "\"Load checkpoint from: {}\"", ".", "format", "(", "path", ")", ")", "\n", "checkpoint", "=", "_load", "(", "path", ")", "\n", "s", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "new_s", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "s", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "hparams", ".", "hparams", ".", "n_gpu", ">", "1", ":", "\n", "\t\t\t", "if", "not", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "\t\t\t\t", "new_s", "[", "'module.'", "+", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "\t\t\t\t", "new_s", "[", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "\t\t\t", "new_s", "[", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "]", "=", "v", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "new_s", ")", "\n", "\n", "epoch_resume", "=", "0", "\n", "if", "not", "reset_optimizer", ":", "\n", "\t\t", "optimizer_state", "=", "checkpoint", "[", "\"optimizer\"", "]", "\n", "if", "optimizer_state", "is", "not", "None", ":", "\n", "\t\t\t", "print", "(", "\"Load optimizer state from {}\"", ".", "format", "(", "path", ")", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "", "epoch_resume", "=", "checkpoint", "[", "'epoch'", "]", "\n", "loss", "=", "checkpoint", "[", "'loss'", "]", "\n", "\n", "print", "(", "\"Model resumed for training...\"", ")", "\n", "print", "(", "\"Epoch: \"", ",", "epoch_resume", ")", "\n", "print", "(", "\"Loss: \"", ",", "loss", ")", "\n", "\n", "", "return", "model", ",", "epoch_resume", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.preprocess.process_video_file": [[35, 65], ["cv2.VideoCapture", "os.path.join", "os.makedirs", "cv2.VideoCapture.read", "frames.append", "os.path.basename().split", "vfile.split", "fa[].get_detections_for_batch", "enumerate", "cv2.VideoCapture.release", "range", "numpy.asarray", "cv2.imwrite", "os.path.basename", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.api.FaceAlignment.get_detections_for_batch"], ["def", "process_video_file", "(", "vfile", ",", "args", ",", "gpu_id", ")", ":", "\n", "\t", "video_stream", "=", "cv2", ".", "VideoCapture", "(", "vfile", ")", "\n", "\n", "frames", "=", "[", "]", "\n", "while", "1", ":", "\n", "\t\t", "still_reading", ",", "frame", "=", "video_stream", ".", "read", "(", ")", "\n", "if", "not", "still_reading", ":", "\n", "\t\t\t", "video_stream", ".", "release", "(", ")", "\n", "break", "\n", "", "frames", ".", "append", "(", "frame", ")", "\n", "\n", "", "vidname", "=", "os", ".", "path", ".", "basename", "(", "vfile", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "dirname", "=", "vfile", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "\n", "fulldir", "=", "path", ".", "join", "(", "args", ".", "preprocessed_root", ",", "dirname", ",", "vidname", ")", "\n", "os", ".", "makedirs", "(", "fulldir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "batches", "=", "[", "frames", "[", "i", ":", "i", "+", "args", ".", "batch_size", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "frames", ")", ",", "args", ".", "batch_size", ")", "]", "\n", "\n", "i", "=", "-", "1", "\n", "for", "fb", "in", "batches", ":", "\n", "\t\t", "preds", "=", "fa", "[", "gpu_id", "]", ".", "get_detections_for_batch", "(", "np", ".", "asarray", "(", "fb", ")", ")", "\n", "\n", "for", "j", ",", "f", "in", "enumerate", "(", "preds", ")", ":", "\n", "\t\t\t", "i", "+=", "1", "\n", "if", "f", "is", "None", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "f", "\n", "cv2", ".", "imwrite", "(", "path", ".", "join", "(", "fulldir", ",", "'{}.jpg'", ".", "format", "(", "i", ")", ")", ",", "fb", "[", "j", "]", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.preprocess.mp_handler": [[67, 75], ["preprocess.process_video_file", "exit", "traceback.print_exc"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.preprocess.process_video_file"], ["", "", "", "def", "mp_handler", "(", "job", ")", ":", "\n", "\t", "vfile", ",", "args", ",", "gpu_id", "=", "job", "\n", "try", ":", "\n", "\t\t", "process_video_file", "(", "vfile", ",", "args", ",", "gpu_id", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "\t\t", "exit", "(", "0", ")", "\n", "", "except", ":", "\n", "\t\t", "traceback", ".", "print_exc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.None.preprocess.main": [[76, 85], ["print", "glob.glob", "concurrent.futures.ThreadPoolExecutor", "os.path.join", "concurrent.futures.ThreadPoolExecutor.submit", "r.result", "enumerate", "tqdm.tqdm", "concurrent.futures.as_completed", "len"], "function", ["None"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "\t", "print", "(", "'Started processing for {} with {} GPUs'", ".", "format", "(", "args", ".", "data_root", ",", "args", ".", "ngpu", ")", ")", "\n", "\n", "filelist", "=", "glob", "(", "path", ".", "join", "(", "args", ".", "data_root", ",", "'*/*.mp4'", ")", ")", "\n", "\n", "jobs", "=", "[", "(", "vfile", ",", "args", ",", "i", "%", "args", ".", "ngpu", ")", "for", "i", ",", "vfile", "in", "enumerate", "(", "filelist", ")", "]", "\n", "p", "=", "ThreadPoolExecutor", "(", "args", ".", "ngpu", ")", "\n", "futures", "=", "[", "p", ".", "submit", "(", "mp_handler", ",", "j", ")", "for", "j", "in", "jobs", "]", "\n", "_", "=", "[", "r", ".", "result", "(", ")", "for", "r", "in", "tqdm", "(", "as_completed", "(", "futures", ")", ",", "total", "=", "len", "(", "futures", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.models.Conv2d.__init__": [[7, 15], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["class", "Conv1d", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "cout", ")", "\n", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.models.Conv2d.forward": [[16, 21], ["models.Conv2d.conv_block", "models.Conv2d.act"], "methods", ["None"], ["self", ".", "residual", "=", "residual", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "\t\t\t", "out", "+=", "x", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.models.Conv2dTranspose.__init__": [[24, 31], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["\n", "", "", "class", "Conv2d", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cout", ")", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.models.Conv2dTranspose.forward": [[32, 35], ["models.Conv2dTranspose.conv_block", "models.Conv2dTranspose.act"], "methods", ["None"], [")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.models.Wav2Lip_Teacher.__init__": [[38, 115], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.Sequential", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["if", "self", ".", "residual", ":", "\n", "\t\t\t", "out", "+=", "x", "\n", "", "return", "self", ".", "act", "(", "out", ")", "\n", "\n", "\n", "", "", "class", "Conv2dTranspose", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", "=", "0", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cout", ")", "\n", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "self", ".", "act", "(", "out", ")", "\n", "\n", "\n", "", "", "class", "Lipsync_Student", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Lipsync_Student", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "audio_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", ")", "\n", "\n", "self", ".", "face_decoder_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", ")", ",", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "# 3,3", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 6, 6", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 12, 12", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 24, 24", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 48, 48", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "0", ",", "1", ")", ")", ",", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "]", ")", "# 48,96", "\n", "\n", "self", ".", "output_block", "=", "nn", ".", "Sequential", "(", "Conv2d", "(", "32", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "audio_sequences", ")", ":", "\n", "# audio_sequences = (B, T, 1, 80, 16)", "\n", "        ", "B", "=", "audio_sequences", ".", "size", "(", "0", ")", "\n", "\n", "input_dim_size", "=", "len", "(", "audio_sequences", ".", "size", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.models.Wav2Lip_Teacher.forward": [[116, 155], ["torch.cat.size", "len", "models.Wav2Lip_Teacher.audio_encoder", "models.Wav2Lip_Teacher.output_block", "torch.cat.size", "torch.cat", "torch.cat", "f", "feats.append", "f", "feats.pop", "torch.split", "torch.stack", "torch.cat", "print", "print", "range", "range", "torch.cat.size", "feats[].size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["if", "input_dim_size", ">", "4", ":", "\n", "            ", "audio_sequences", "=", "torch", ".", "cat", "(", "[", "audio_sequences", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "audio_sequences", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "x", "=", "self", ".", "audio_encoder", "(", "audio_sequences", ")", "# B, 512, 1, 1", "\n", "for", "f", "in", "self", ".", "face_decoder_blocks", ":", "\n", "            ", "x", "=", "f", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "output_block", "(", "x", ")", "\n", "\n", "if", "input_dim_size", ">", "4", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "B", ",", "dim", "=", "0", ")", "# [(B, C, H, W)]", "\n", "outputs", "=", "torch", ".", "stack", "(", "x", ",", "dim", "=", "2", ")", "# (B, C, T, H, W)", "\n", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "x", "\n", "\n", "", "return", "outputs", "\n", "\n", "\n", "\n", "", "", "class", "Model", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "audio_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv1d", "(", "514", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "face_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "2", ")", ",", "# Bx32x25x48x48", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.models.Lipsync_Student.__init__": [[159, 210], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.Sequential", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "models.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d", "models.Conv2dTranspose", "models.Conv2d", "models.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["\n", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx128x25x12x12", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx256x25x6x6", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx512x25x3x3", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", ",", "# Bx512x25x1x1", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "time_upsampler", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "Conv1d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "Conv1d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv1d", "(", "1112", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "1024", ",", "514", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "stft_sequence", ",", "face_sequence", ")", ":", "\n", "\n", "# -----------------------------Face----------------------------------- #", "\n", "# print(\"Face input: \", face_sequence.size())\t\t\t\t\t\t# Bx3xTx48x96", "\n", "\n", "\t\t", "B", "=", "face_sequence", ".", "size", "(", "0", ")", "\n", "face_sequence", "=", "torch", ".", "cat", "(", "[", "face_sequence", "[", ":", ",", ":", ",", "i", "]", "for", "i", "in", "range", "(", "face_sequence", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "# print(\"Face sequence concatenated: \", face_sequence.size())\t\t# (B*T)x3x48x96", "\n", "\n", "# Face encoder", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.models.Lipsync_Student.forward": [[211, 233], ["torch.cat.size", "len", "models.Lipsync_Student.audio_encoder", "models.Lipsync_Student.output_block", "torch.cat.size", "torch.cat", "f", "torch.split", "torch.stack", "range", "torch.cat.size"], "methods", ["None"], ["face_enc", "=", "self", ".", "face_encoder", "(", "face_sequence", ")", "# (B*T)x512x1x1", "\n", "face_enc", "=", "torch", ".", "split", "(", "face_enc", ",", "B", ",", "dim", "=", "0", ")", "\n", "face_enc", "=", "torch", ".", "stack", "(", "face_enc", ",", "dim", "=", "2", ")", "# Bx512xTx1x1\t\t\t\t", "\n", "\n", "face_enc", "=", "face_enc", ".", "view", "(", "-", "1", ",", "face_enc", ".", "size", "(", "1", ")", ",", "face_enc", ".", "size", "(", "2", ")", ")", "# Bx512xT", "\n", "\n", "face_output", "=", "self", ".", "time_upsampler", "(", "face_enc", ")", "# Bx512x(T*4)", "\n", "# -------------------------------------------------------------------- #", "\n", "\n", "# -------------------------- Audio ------------------------------- #", "\n", "\n", "# print(\"STFT input: \", stft_sequence.size())\t\t\t\t\t\t# BxTx514", "\n", "\n", "stft_sequence_permuted", "=", "stft_sequence", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# Bx514xT", "\n", "\n", "# Audio encoder", "\n", "audio_enc", "=", "self", ".", "audio_encoder", "(", "stft_sequence_permuted", ")", "# Bx600xT", "\n", "\n", "# Concatenate face network output and audio encoder output", "\n", "concatenated", "=", "torch", ".", "cat", "(", "[", "audio_enc", ",", "face_output", "]", ",", "dim", "=", "1", ")", "# Bx1112xT", "\n", "\n", "# Audio decoder", "\n", "dec", "=", "self", ".", "decoder", "(", "concatenated", ")", "# Bx514xT", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.inference.datagen": [[10, 32], ["enumerate", "np.reshape.append", "len", "numpy.asarray", "numpy.reshape", "len", "numpy.asarray", "numpy.reshape", "len", "len"], "function", ["None"], ["\n", "# Initialize the global variables", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "sampling_rate", "=", "16000", "\n", "\n", "def", "load_wav", "(", "args", ")", ":", "\n", "\n", "\t", "wav_file", "=", "'tmp.wav'", ";", "\n", "\n", "subprocess", ".", "call", "(", "'ffmpeg -hide_banner -loglevel panic -threads 1 -y -i %s -async 1 -ac 1 -vn \\\n\t\t\t\t\t-acodec pcm_s16le -ar 16000 %s'", "%", "(", "args", ".", "input", ",", "wav_file", ")", ",", "shell", "=", "True", ")", "\n", "\n", "wav", "=", "audio", ".", "load_wav", "(", "wav_file", ",", "sampling_rate", ")", "\n", "\n", "os", ".", "remove", "(", "\"tmp.wav\"", ")", "\n", "\n", "return", "wav", "\n", "\n", "\n", "", "def", "get_spec", "(", "wav", ")", ":", "\n", "\n", "# Compute STFT using librosa", "\n", "\t", "stft", "=", "librosa", ".", "stft", "(", "y", "=", "wav", ",", "n_fft", "=", "hp", ".", "hparams", ".", "n_fft_den", ",", "hop_length", "=", "hp", ".", "hparams", ".", "hop_size_den", ",", "win_length", "=", "hp", ".", "hparams", ".", "win_size_den", ")", ".", "T", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.inference._load": [[37, 44], ["torch.load", "torch.load"], "function", ["None"], ["mag", "=", "audio", ".", "db_from_amp", "(", "mag", ")", "\n", "phase", "=", "audio", ".", "angle", "(", "stft", ")", "\n", "\n", "# Normalize the magnitude and phase representations", "\n", "norm_mag", "=", "audio", ".", "normalize_mag", "(", "mag", ")", "\n", "norm_phase", "=", "audio", ".", "normalize_phase", "(", "phase", ")", "\n", "\n", "# Concatenate the magnitude and phase representations", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.inference.load_model": [[45, 57], ["models.Lipsync_Student", "print", "inference._load", "s.items", "model.to.load_state_dict", "model.to.to", "model.to.eval", "k.replace"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student._load"], ["spec_ip", "=", "np", ".", "concatenate", "(", "(", "norm_mag", ",", "norm_phase", ")", ",", "axis", "=", "1", ")", "# Tx514", "\n", "\n", "return", "spec_ip", "\n", "\n", "\n", "", "def", "crop_mels", "(", "start_idx", ",", "noisy_wav", ")", ":", "\n", "\n", "    ", "end_idx", "=", "start_idx", "+", "3200", "\n", "\n", "# Get the segmented wav (0.2 second)", "\n", "noisy_seg_wav", "=", "noisy_wav", "[", "start_idx", ":", "end_idx", "]", "\n", "if", "len", "(", "noisy_seg_wav", ")", "!=", "3200", ":", "\n", "        ", "return", "None", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.inference.main": [[58, 121], ["audio.load_wav", "audio.melspectrogram", "print", "inference.datagen", "enumerate", "cv2.VideoWriter.release", "subprocess.call", "args.audio.endswith", "print", "subprocess.call", "numpy.isnan().sum", "ValueError", "int", "mel_chunks.append", "os.path.exists", "os.makedirs", "tqdm.tqdm", "torch.FloatTensor().to", "os.path.join", "os.path.join", "len", "mel_chunks.append", "len", "inference.load_model", "print", "cv2.VideoWriter", "torch.no_grad", "load_model.", "cv2.VideoWriter.write", "numpy.isnan", "int", "os.path.join", "cv2.VideoWriter_fourcc", "torch.FloatTensor", "audio.melspectrogram.reshape", "numpy.ceil", "numpy.transpose", "model.cpu().numpy().transpose", "float", "model.cpu().numpy", "len", "len", "model.cpu"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.inference.datagen", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.inference.load_model"], ["\n", "# Compute the melspectrogram using librosa", "\n", "", "spec", "=", "audio", ".", "melspectrogram", "(", "noisy_seg_wav", ",", "hp", ".", "hparams", ")", ".", "T", "# 16x80", "\n", "spec", "=", "spec", "[", ":", "-", "1", "]", "\n", "\n", "return", "spec", "\n", "\n", "", "def", "get_segmented_mels", "(", "start_idx", ",", "noisy_wav", ")", ":", "\n", "\n", "    ", "mels", "=", "[", "]", "\n", "if", "start_idx", "-", "1280", "<", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "# Get the overlapping continuous segments of noisy mels", "\n", "", "for", "i", "in", "range", "(", "start_idx", ",", "start_idx", "+", "hp", ".", "hparams", ".", "wav_step_size", ",", "640", ")", ":", "\n", "        ", "m", "=", "crop_mels", "(", "i", "-", "1280", ",", "noisy_wav", ")", "\n", "if", "m", "is", "None", "or", "m", ".", "shape", "[", "0", "]", "!=", "hp", ".", "hparams", ".", "mel_step_size", ":", "\n", "            ", "return", "None", "\n", "", "mels", ".", "append", "(", "m", ".", "T", ")", "\n", "\n", "", "mels", "=", "np", ".", "asarray", "(", "mels", ")", "\n", "\n", "return", "mels", "\n", "\n", "\n", "", "def", "generate_video", "(", "stft", ",", "args", ")", ":", "\n", "\n", "# Reconstruct the predicted wav", "\n", "\t", "mag", "=", "stft", "[", ":", "257", ",", ":", "]", "\n", "phase", "=", "stft", "[", "257", ":", ",", ":", "]", "\n", "\n", "denorm_mag", "=", "audio", ".", "unnormalize_mag", "(", "mag", ")", "\n", "denorm_phase", "=", "audio", ".", "unnormalize_phase", "(", "phase", ")", "\n", "recon_mag", "=", "audio", ".", "amp_from_db", "(", "denorm_mag", ")", "\n", "complex_arr", "=", "audio", ".", "make_complex", "(", "recon_mag", ",", "denorm_phase", ")", "\n", "wav", "=", "librosa", ".", "istft", "(", "complex_arr", ",", "hop_length", "=", "hp", ".", "hparams", ".", "hop_size_den", ",", "win_length", "=", "hp", ".", "hparams", ".", "win_size_den", ")", "\n", "\n", "# Create the folder to save the results", "\n", "result_dir", "=", "args", ".", "result_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "# Save the wav file", "\n", "", "audio_output", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'result.wav'", ")", "\n", "librosa", ".", "output", ".", "write_wav", "(", "audio_output", ",", "wav", ",", "sampling_rate", ")", "\n", "\n", "print", "(", "\"Saved the denoised audio file:\"", ",", "audio_output", ")", "\n", "\n", "# Save the video output file if the input is a video file", "\n", "if", "args", ".", "input", ".", "split", "(", "'.'", ")", "[", "1", "]", "in", "[", "'wav'", ",", "'mp3'", "]", ":", "\n", "\t\t", "return", "\n", "", "else", ":", "\n", "\t\t", "no_sound_video", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'result_nosouund.mp4'", ")", "\n", "subprocess", ".", "call", "(", "'ffmpeg -hide_banner -loglevel panic -i %s -c copy -an -strict -2 %s'", "%", "(", "args", ".", "input", ",", "no_sound_video", ")", ",", "shell", "=", "True", ")", "\n", "\n", "video_output_mp4", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'result.mp4'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "video_output_mp4", ")", ":", "\n", "\t\t\t", "os", ".", "remove", "(", "video_output_mp4", ")", "\n", "\n", "", "subprocess", ".", "call", "(", "'ffmpeg -hide_banner -loglevel panic -y -i %s -i %s -strict -2 -q:v 1 %s'", "%", "\n", "(", "audio_output", ",", "no_sound_video", ",", "video_output_mp4", ")", ",", "shell", "=", "True", ")", "\n", "\n", "os", ".", "remove", "(", "no_sound_video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio.load_wav": [[7, 9], ["librosa.core.load", "librosa.core.load"], "function", ["None"], ["def", "load_wav", "(", "path", ",", "sr", ")", ":", "\n", "    ", "return", "librosa", ".", "core", ".", "load", "(", "path", ",", "sr", "=", "sr", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio.preemphasis": [[10, 14], ["scipy.signal.lfilter", "hparams.hparams", "hparams.hparams", "hparams.hparams", "hparams.hparams"], "function", ["None"], ["", "def", "preemphasis", "(", "wav", ",", "k", ",", "preemphasize", "=", "True", ")", ":", "\n", "    ", "if", "preemphasize", ":", "\n", "        ", "return", "signal", ".", "lfilter", "(", "[", "1", ",", "-", "k", "]", ",", "[", "1", "]", ",", "wav", ")", "\n", "", "return", "wav", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio.inv_preemphasis": [[15, 19], ["scipy.signal.lfilter", "hparams.hparams", "hparams.hparams", "hparams.hparams", "hparams.hparams", "hparams.hparams", "hparams.hparams", "hparams.hparams", "hparams.hparams"], "function", ["None"], ["", "def", "inv_preemphasis", "(", "wav", ",", "k", ",", "inv_preemphasize", "=", "True", ")", ":", "\n", "    ", "if", "inv_preemphasize", ":", "\n", "        ", "return", "signal", ".", "lfilter", "(", "[", "1", "]", ",", "[", "1", ",", "-", "k", "]", ",", "wav", ")", "\n", "", "return", "wav", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio.get_hop_size": [[20, 26], ["int"], "function", ["None"], ["", "def", "get_hop_size", "(", ")", ":", "\n", "    ", "hop_size", "=", "hp", ".", "hop_size", "\n", "if", "hop_size", "is", "None", ":", "\n", "        ", "assert", "hp", ".", "frame_shift_ms", "is", "not", "None", "\n", "hop_size", "=", "int", "(", "hp", ".", "frame_shift_ms", "/", "1000", "*", "hp", ".", "sample_rate", ")", "\n", "", "return", "hop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio.linearspectrogram": [[27, 34], ["audio._stft", "audio.preemphasis", "audio._amp_to_db", "audio._normalize", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._stft", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._amp_to_db", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._normalize"], ["", "def", "linearspectrogram", "(", "wav", ")", ":", "\n", "    ", "D", "=", "_stft", "(", "preemphasis", "(", "wav", ",", "hp", ".", "preemphasis", ",", "hp", ".", "preemphasize", ")", ")", "\n", "S", "=", "_amp_to_db", "(", "np", ".", "abs", "(", "D", ")", ")", "-", "hp", ".", "ref_level_db", "\n", "\n", "if", "hp", ".", "signal_normalization", ":", "\n", "        ", "return", "_normalize", "(", "S", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio.melspectrogram": [[35, 42], ["audio._stft", "audio.preemphasis", "audio._amp_to_db", "audio._normalize", "audio._linear_to_mel", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._stft", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._amp_to_db", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._normalize", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._linear_to_mel"], ["", "def", "melspectrogram", "(", "wav", ")", ":", "\n", "    ", "D", "=", "_stft", "(", "preemphasis", "(", "wav", ",", "hp", ".", "preemphasis", ",", "hp", ".", "preemphasize", ")", ")", "\n", "S", "=", "_amp_to_db", "(", "_linear_to_mel", "(", "np", ".", "abs", "(", "D", ")", ")", ")", "-", "hp", ".", "ref_level_db", "\n", "\n", "if", "hp", ".", "signal_normalization", ":", "\n", "        ", "return", "_normalize", "(", "S", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio.inv_linear_spectrogram": [[43, 59], ["audio._db_to_amp", "audio._denormalize", "audio._lws_processor", "_lws_processor.run_lws", "_lws_processor.istft().astype", "audio.inv_preemphasis", "audio.inv_preemphasis", "audio._griffin_lim", "_lws_processor.istft", "_db_to_amp.astype"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._db_to_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._denormalize", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._lws_processor", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._griffin_lim"], ["", "def", "inv_linear_spectrogram", "(", "linear_spectrogram", ")", ":", "\n", "    ", "\"\"\"Converts linear spectrogram to waveform using librosa\"\"\"", "\n", "if", "hp", ".", "signal_normalization", ":", "\n", "        ", "D", "=", "_denormalize", "(", "linear_spectrogram", ")", "\n", "", "else", ":", "\n", "        ", "D", "=", "linear_spectrogram", "\n", "\n", "", "S", "=", "_db_to_amp", "(", "D", "+", "hp", ".", "ref_level_db", ")", "#Convert back to linear", "\n", "\n", "if", "hp", ".", "use_lws", ":", "\n", "        ", "processor", "=", "_lws_processor", "(", "hp", ")", "\n", "D", "=", "processor", ".", "run_lws", "(", "S", ".", "astype", "(", "np", ".", "float64", ")", ".", "T", "**", "hp", ".", "power", ")", "\n", "y", "=", "processor", ".", "istft", "(", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "inv_preemphasis", "(", "y", ",", "hp", ".", "preemphasis", ",", "hp", ".", "preemphasize", ")", "\n", "", "else", ":", "\n", "        ", "return", "inv_preemphasis", "(", "_griffin_lim", "(", "S", "**", "hp", ".", "power", ")", ",", "hp", ".", "preemphasis", ",", "hp", ".", "preemphasize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio.inv_mel_spectrogram": [[60, 76], ["audio._mel_to_linear", "audio._denormalize", "audio._db_to_amp", "audio._lws_processor", "_lws_processor.run_lws", "_lws_processor.istft().astype", "audio.inv_preemphasis", "audio.inv_preemphasis", "audio._griffin_lim", "_lws_processor.istft", "_mel_to_linear.astype"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._mel_to_linear", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._denormalize", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._db_to_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._lws_processor", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._griffin_lim"], ["", "", "def", "inv_mel_spectrogram", "(", "mel_spectrogram", ")", ":", "\n", "    ", "\"\"\"Converts mel spectrogram to waveform using librosa\"\"\"", "\n", "if", "hp", ".", "signal_normalization", ":", "\n", "        ", "D", "=", "_denormalize", "(", "mel_spectrogram", ")", "\n", "", "else", ":", "\n", "        ", "D", "=", "mel_spectrogram", "\n", "\n", "", "S", "=", "_mel_to_linear", "(", "_db_to_amp", "(", "D", "+", "hp", ".", "ref_level_db", ")", ")", "# Convert back to linear", "\n", "\n", "if", "hp", ".", "use_lws", ":", "\n", "        ", "processor", "=", "_lws_processor", "(", "hp", ")", "\n", "D", "=", "processor", ".", "run_lws", "(", "S", ".", "astype", "(", "np", ".", "float64", ")", ".", "T", "**", "hp", ".", "power", ")", "\n", "y", "=", "processor", ".", "istft", "(", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "inv_preemphasis", "(", "y", ",", "hp", ".", "preemphasis", ",", "hp", ".", "preemphasize", ")", "\n", "", "else", ":", "\n", "        ", "return", "inv_preemphasis", "(", "_griffin_lim", "(", "S", "**", "hp", ".", "power", ")", ",", "hp", ".", "preemphasis", ",", "hp", ".", "preemphasize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._lws_processor": [[77, 80], ["lws.lws", "audio.get_hop_size", "hparams.hparams", "numpy.np.float32", "hparams.hparams", "numpy.np.float32", "hparams.hparams"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.get_hop_size"], ["", "", "def", "_lws_processor", "(", ")", ":", "\n", "    ", "import", "lws", "\n", "return", "lws", ".", "lws", "(", "hp", ".", "n_fft", ",", "get_hop_size", "(", ")", ",", "fftsize", "=", "hp", ".", "win_size", ",", "mode", "=", "\"speech\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._griffin_lim": [[81, 92], ["numpy.exp", "numpy.abs().astype", "audio._istft", "range", "numpy.exp", "audio._istft", "numpy.random.rand", "numpy.abs", "numpy.angle", "audio._stft"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._istft", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._istft", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._stft"], ["", "def", "_griffin_lim", "(", "S", ")", ":", "\n", "    ", "\"\"\"librosa implementation of Griffin-Lim\n    Based on https://github.com/librosa/librosa/issues/434\n    \"\"\"", "\n", "angles", "=", "np", ".", "exp", "(", "2j", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "rand", "(", "*", "S", ".", "shape", ")", ")", "\n", "S_complex", "=", "np", ".", "abs", "(", "S", ")", ".", "astype", "(", "np", ".", "complex", ")", "\n", "y", "=", "_istft", "(", "S_complex", "*", "angles", ")", "\n", "for", "i", "in", "range", "(", "hp", ".", "griffin_lim_iters", ")", ":", "\n", "        ", "angles", "=", "np", ".", "exp", "(", "1j", "*", "np", ".", "angle", "(", "_stft", "(", "y", ")", ")", ")", "\n", "y", "=", "_istft", "(", "S_complex", "*", "angles", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._stft": [[93, 98], ["librosa.stft", "librosa.stft", "_lws_processor().stft", "audio.get_hop_size", "audio._lws_processor"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.get_hop_size", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._lws_processor"], ["", "def", "_stft", "(", "y", ")", ":", "\n", "    ", "if", "hp", ".", "use_lws", ":", "\n", "        ", "return", "_lws_processor", "(", "hp", ")", ".", "stft", "(", "y", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "return", "librosa", ".", "stft", "(", "y", "=", "y", ",", "n_fft", "=", "hp", ".", "n_fft", ",", "hop_length", "=", "get_hop_size", "(", ")", ",", "win_length", "=", "hp", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._istft": [[99, 101], ["librosa.istft", "librosa.istft", "audio.get_hop_size"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.get_hop_size"], ["", "", "def", "_istft", "(", "y", ")", ":", "\n", "    ", "return", "librosa", ".", "istft", "(", "y", ",", "hop_length", "=", "get_hop_size", "(", ")", ",", "win_length", "=", "hp", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._linear_to_mel": [[106, 111], ["numpy.dot", "audio._build_mel_basis"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._build_mel_basis"], ["def", "_linear_to_mel", "(", "spectogram", ")", ":", "\n", "    ", "global", "_mel_basis", "\n", "if", "_mel_basis", "is", "None", ":", "\n", "        ", "_mel_basis", "=", "_build_mel_basis", "(", ")", "\n", "", "return", "np", ".", "dot", "(", "_mel_basis", ",", "spectogram", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._mel_to_linear": [[112, 117], ["numpy.maximum", "numpy.linalg.pinv", "numpy.dot", "audio._build_mel_basis", "numpy.np.float64"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._build_mel_basis"], ["", "def", "_mel_to_linear", "(", "mel_spectrogram", ")", ":", "\n", "    ", "global", "_inv_mel_basis", "\n", "if", "_inv_mel_basis", "is", "None", ":", "\n", "        ", "_inv_mel_basis", "=", "np", ".", "linalg", ".", "pinv", "(", "_build_mel_basis", "(", ")", ")", "\n", "", "return", "np", ".", "maximum", "(", "1e-10", ",", "np", ".", "dot", "(", "_inv_mel_basis", ",", "mel_spectrogram", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._build_mel_basis": [[118, 122], ["librosa.filters.mel", "librosa.filters.mel"], "function", ["None"], ["", "def", "_build_mel_basis", "(", ")", ":", "\n", "    ", "assert", "hp", ".", "fmax", "<=", "hp", ".", "sample_rate", "//", "2", "\n", "return", "librosa", ".", "filters", ".", "mel", "(", "hp", ".", "sample_rate", ",", "hp", ".", "n_fft", ",", "n_mels", "=", "hp", ".", "num_mels", ",", "\n", "fmin", "=", "hp", ".", "fmin", ",", "fmax", "=", "hp", ".", "fmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._amp_to_db": [[123, 126], ["numpy.exp", "numpy.log10", "numpy.log", "numpy.maximum"], "function", ["None"], ["", "def", "_amp_to_db", "(", "x", ")", ":", "\n", "    ", "min_level", "=", "np", ".", "exp", "(", "hp", ".", "min_level_db", "/", "20", "*", "np", ".", "log", "(", "10", ")", ")", "\n", "return", "20", "*", "np", ".", "log10", "(", "np", ".", "maximum", "(", "min_level", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._db_to_amp": [[127, 129], ["numpy.power", "numpy.np.float64"], "function", ["None"], ["", "def", "_db_to_amp", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "power", "(", "10.0", ",", "(", "x", ")", "*", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._normalize": [[130, 143], ["numpy.clip", "numpy.clip", "S.max", "S.min"], "function", ["None"], ["", "def", "_normalize", "(", "S", ")", ":", "\n", "    ", "if", "hp", ".", "allow_clipping_in_normalization", ":", "\n", "        ", "if", "hp", ".", "symmetric_mels", ":", "\n", "            ", "return", "np", ".", "clip", "(", "(", "2", "*", "hp", ".", "max_abs_value", ")", "*", "(", "(", "S", "-", "hp", ".", "min_level_db", ")", "/", "(", "-", "hp", ".", "min_level_db", ")", ")", "-", "hp", ".", "max_abs_value", ",", "\n", "-", "hp", ".", "max_abs_value", ",", "hp", ".", "max_abs_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "clip", "(", "hp", ".", "max_abs_value", "*", "(", "(", "S", "-", "hp", ".", "min_level_db", ")", "/", "(", "-", "hp", ".", "min_level_db", ")", ")", ",", "0", ",", "hp", ".", "max_abs_value", ")", "\n", "\n", "", "", "assert", "S", ".", "max", "(", ")", "<=", "0", "and", "S", ".", "min", "(", ")", "-", "hp", ".", "min_level_db", ">=", "0", "\n", "if", "hp", ".", "symmetric_mels", ":", "\n", "        ", "return", "(", "2", "*", "hp", ".", "max_abs_value", ")", "*", "(", "(", "S", "-", "hp", ".", "min_level_db", ")", "/", "(", "-", "hp", ".", "min_level_db", ")", ")", "-", "hp", ".", "max_abs_value", "\n", "", "else", ":", "\n", "        ", "return", "hp", ".", "max_abs_value", "*", "(", "(", "S", "-", "hp", ".", "min_level_db", ")", "/", "(", "-", "hp", ".", "min_level_db", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.audio._denormalize": [[144, 157], ["numpy.clip", "numpy.clip"], "function", ["None"], ["", "", "def", "_denormalize", "(", "D", ")", ":", "\n", "    ", "if", "hp", ".", "allow_clipping_in_normalization", ":", "\n", "        ", "if", "hp", ".", "symmetric_mels", ":", "\n", "            ", "return", "(", "(", "(", "np", ".", "clip", "(", "D", ",", "-", "hp", ".", "max_abs_value", ",", "\n", "hp", ".", "max_abs_value", ")", "+", "hp", ".", "max_abs_value", ")", "*", "-", "hp", ".", "min_level_db", "/", "(", "2", "*", "hp", ".", "max_abs_value", ")", ")", "\n", "+", "hp", ".", "min_level_db", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "(", "np", ".", "clip", "(", "D", ",", "0", ",", "hp", ".", "max_abs_value", ")", "*", "-", "hp", ".", "min_level_db", "/", "hp", ".", "max_abs_value", ")", "+", "hp", ".", "min_level_db", ")", "\n", "\n", "", "", "if", "hp", ".", "symmetric_mels", ":", "\n", "        ", "return", "(", "(", "(", "D", "+", "hp", ".", "max_abs_value", ")", "*", "-", "hp", ".", "min_level_db", "/", "(", "2", "*", "hp", ".", "max_abs_value", ")", ")", "+", "hp", ".", "min_level_db", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "(", "D", "*", "-", "hp", ".", "min_level_db", "/", "hp", ".", "max_abs_value", ")", "+", "hp", ".", "min_level_db", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.Dataset.__init__": [[33, 43], ["hparams.hparams.get_all_files", "hparams.hparams.get_noise_list", "cv2.imread", "cv2.resize", "train_student.Dataset.prepare_window", "train_student.Dataset.prepare_window", "numpy.concatenate", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_all_files", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_noise_list", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.Dataset.prepare_window", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.Dataset.prepare_window"], ["\t", "def", "__init__", "(", "self", ",", "split", ")", ":", "\n", "\t\t", "self", ".", "all_videos", "=", "get_all_files", "(", "args", ".", "data_root_lrs3_pretrain", ",", "args", ".", "data_root_lrs3_train", ",", "split", ")", "\n", "self", ".", "all_noises", "=", "get_noise_list", "(", "args", ".", "noise_data_root", ")", "\n", "self", ".", "face", "=", "cv2", ".", "imread", "(", "'checkpoints/taylor.jpg'", ")", "\n", "self", ".", "face", "=", "cv2", ".", "resize", "(", "self", ".", "face", ",", "(", "hparams", ".", "img_size", ",", "hparams", ".", "img_size", ")", ")", "\n", "\n", "wrong_window", "=", "self", ".", "prepare_window", "(", "[", "self", ".", "face", "for", "_", "in", "range", "(", "hparams", ".", "syncnet_T", ")", "]", ")", "\n", "window", "=", "self", ".", "prepare_window", "(", "[", "self", ".", "face", "for", "_", "in", "range", "(", "hparams", ".", "syncnet_T", ")", "]", ")", "\n", "window", "[", ":", ",", ":", ",", "window", ".", "shape", "[", "2", "]", "//", "2", ":", "]", "=", "0", "\n", "self", ".", "face", "=", "np", ".", "concatenate", "(", "[", "window", ",", "wrong_window", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.Dataset.get_segmented_mels": [[44, 116], ["random.randint", "audio.load_wav", "range", "numpy.asarray", "numpy.asarray", "len", "audio.melspectrogram", "random.choice", "numpy.asarray.append", "numpy.asarray.append", "audio.melspectrogram", "audio.melspectrogram", "len", "random.uniform", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram"], ["", "def", "get_segmented_mels", "(", "self", ",", "wav", ")", ":", "\n", "\t\t", "clean_mels", "=", "[", "]", "\n", "noisy_mels", "=", "[", "]", "\n", "assert", "hparams", ".", "syncnet_T", "==", "5", "\n", "\n", "# Get the random start index", "\n", "start_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "wav", ")", "-", "hparams", ".", "syncnet_wav_step_size", "-", "1", ")", "## Hard-coded for 25fps, 16000 sample_rate", "\n", "end_idx", "=", "start_idx", "+", "hparams", ".", "syncnet_wav_step_size", "\n", "\n", "# Segment the clean wav based on start and end index ", "\n", "seg_wav", "=", "wav", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "# Check if the segmented wav corresponds to wav step size (here: 3200)", "\n", "if", "len", "(", "seg_wav", ")", "!=", "hparams", ".", "syncnet_wav_step_size", ":", "\n", "\t\t\t", "return", "None", ",", "[", "None", ",", "None", "]", "\n", "\n", "# Get the melspectrogram of the segmented clean wav", "\n", "", "spec", "=", "audio", ".", "melspectrogram", "(", "seg_wav", ")", ".", "T", "# (T+1)x80", "\n", "spec", "=", "spec", "[", ":", "-", "1", "]", "# Drop last time-step, Tx80", "\n", "\n", "# Choose the random wav from VGG sound data", "\n", "noisy_wav", "=", "audio", ".", "load_wav", "(", "random", ".", "choice", "(", "self", ".", "all_noises", ")", ",", "sr", "=", "hparams", ".", "sample_rate", ")", "\n", "\n", "# Mix the random wav with the clean wav", "\n", "try", ":", "\n", "\t\t\t", "noisy_wav", "=", "wav", "+", "random", ".", "uniform", "(", "0.3", ",", "1", ")", "*", "noisy_wav", "[", ":", "len", "(", "wav", ")", "]", "\n", "", "except", ":", "\n", "\t\t\t", "return", "None", ",", "[", "None", ",", "None", "]", "\n", "\n", "# Get the 5 overlapping continuous segments of clean and noisy mels", "\n", "", "for", "i", "in", "range", "(", "start_idx", ",", "start_idx", "+", "3200", ",", "640", ")", ":", "\n", "\n", "# Start index (2 steps behind)", "\n", "\t\t\t", "s", "=", "i", "-", "1280", "\n", "if", "s", "<", "0", ":", "\n", "\t\t\t\t", "return", "None", ",", "[", "None", ",", "None", "]", "\n", "\n", "# End index", "\n", "", "e", "=", "s", "+", "hparams", ".", "syncnet_wav_step_size", "\n", "\n", "# Get the corresponding clean and noisy wav segments", "\n", "clean_seg_wav", "=", "wav", "[", "s", ":", "e", "]", "\n", "noisy_seg_wav", "=", "noisy_wav", "[", "s", ":", "e", "]", "\n", "\n", "# Check for the wav step size (here: 3200)", "\n", "if", "len", "(", "noisy_seg_wav", ")", "!=", "hparams", ".", "syncnet_wav_step_size", "or", "len", "(", "clean_seg_wav", ")", "!=", "hparams", ".", "syncnet_wav_step_size", ":", "\n", "\t\t\t\t", "return", "None", ",", "[", "None", ",", "None", "]", "\n", "\n", "# Compute the melspectrogram for the clean wav segment", "\n", "", "clean_m", "=", "audio", ".", "melspectrogram", "(", "clean_seg_wav", ")", ".", "T", "\n", "clean_m", "=", "clean_m", "[", ":", "-", "1", "]", "# Tx80", "\n", "\n", "# Compute the melspectrogram for the noisy wav segment", "\n", "noisy_m", "=", "audio", ".", "melspectrogram", "(", "noisy_seg_wav", ")", ".", "T", "\n", "noisy_m", "=", "noisy_m", "[", ":", "-", "1", "]", "# Tx80", "\n", "\n", "# Check for the melspec dimensions", "\n", "if", "clean_m", "is", "None", "or", "clean_m", ".", "shape", "[", "0", "]", "!=", "hparams", ".", "syncnet_mel_step_size", ":", "\n", "\t\t\t\t", "return", "None", ",", "[", "None", ",", "None", "]", "\n", "", "if", "noisy_m", "is", "None", "or", "noisy_m", ".", "shape", "[", "0", "]", "!=", "hparams", ".", "syncnet_mel_step_size", ":", "\n", "\t\t\t\t", "return", "None", ",", "[", "None", ",", "None", "]", "\n", "\n", "", "clean_mels", ".", "append", "(", "clean_m", ".", "T", ")", "\n", "noisy_mels", ".", "append", "(", "noisy_m", ".", "T", ")", "\n", "\n", "# Convert to array", "\n", "", "clean_mels", "=", "np", ".", "asarray", "(", "clean_mels", ")", "# 5x80xT", "\n", "noisy_mels", "=", "np", ".", "asarray", "(", "noisy_mels", ")", "# 5x80xT     ", "\n", "\n", "indiv_mels", "=", "[", "clean_mels", ",", "noisy_mels", "]", "\n", "\n", "return", "spec", ",", "indiv_mels", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.Dataset.prepare_window": [[117, 124], ["numpy.transpose", "numpy.asarray"], "methods", ["None"], ["", "def", "prepare_window", "(", "self", ",", "window", ")", ":", "\n", "\n", "# 3 x T x H x W", "\n", "\t\t", "x", "=", "np", ".", "asarray", "(", "window", ")", "/", "255.", "\n", "x", "=", "np", ".", "transpose", "(", "x", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.Dataset.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "all_videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.Dataset.__getitem__": [[128, 152], ["random.randint", "train_student.Dataset.get_segmented_mels", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "os.path.join", "audio.load_wav", "audio.load_wav.copy", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.get_segmented_mels", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "while", "1", ":", "\n", "\t\t\t", "idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "all_videos", ")", "-", "1", ")", "\n", "vidname", "=", "self", ".", "all_videos", "[", "idx", "]", "\n", "\n", "try", ":", "\n", "\t\t\t\t", "wavpath", "=", "os", ".", "path", ".", "join", "(", "vidname", ",", "\"audio.wav\"", ")", "\n", "wav", "=", "audio", ".", "load_wav", "(", "wavpath", ",", "sr", "=", "hparams", ".", "sample_rate", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "mel", ",", "indiv_mels", "=", "self", ".", "get_segmented_mels", "(", "wav", ".", "copy", "(", ")", ")", "\n", "clean_indiv_mels", "=", "indiv_mels", "[", "0", "]", "\n", "noisy_indiv_mels", "=", "indiv_mels", "[", "1", "]", "\n", "\n", "if", "clean_indiv_mels", "is", "None", "or", "noisy_indiv_mels", "is", "None", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "mel", "=", "torch", ".", "FloatTensor", "(", "mel", ".", "T", ")", ".", "unsqueeze", "(", "0", ")", "# 1x80xT", "\n", "clean_indiv_mels", "=", "torch", ".", "FloatTensor", "(", "clean_indiv_mels", ")", ".", "unsqueeze", "(", "1", ")", "# 5x1x80xT    ", "\n", "noisy_indiv_mels", "=", "torch", ".", "FloatTensor", "(", "noisy_indiv_mels", ")", ".", "unsqueeze", "(", "1", ")", "# 5x1x80xT    ", "\n", "y", "=", "torch", ".", "FloatTensor", "(", "self", ".", "face", ")", "# 6x5x96x96                                 ", "\n", "\n", "return", "mel", ",", "clean_indiv_mels", ",", "noisy_indiv_mels", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.save_sample_images": [[153, 165], ["os.path.join", "numpy.concatenate", "enumerate", "print", "os.path.exists", "os.mkdir", "range", "len", "cv2.imwrite", "g.detach().cpu().numpy().transpose", "gt.detach().cpu().numpy().transpose", "g.detach().cpu().numpy", "gt.detach().cpu().numpy", "g.detach().cpu", "gt.detach().cpu", "g.detach", "gt.detach"], "function", ["None"], ["", "", "", "def", "save_sample_images", "(", "g", ",", "gt", ",", "global_step", ",", "checkpoint_dir", ")", ":", "\n", "\t", "g", "=", "(", "g", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "*", "255.", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "gt", "=", "(", "gt", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "*", "255.", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "folder", "=", "join", "(", "checkpoint_dir", ",", "\"samples_step{:05d}\"", ".", "format", "(", "global_step", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "os", ".", "mkdir", "(", "folder", ")", "\n", "collage", "=", "np", ".", "concatenate", "(", "(", "g", ",", "gt", ")", ",", "axis", "=", "-", "2", ")", "\n", "for", "batch_idx", ",", "c", "in", "enumerate", "(", "collage", ")", ":", "\n", "\t\t", "for", "t", "in", "range", "(", "len", "(", "c", ")", ")", ":", "\n", "\t\t\t", "cv2", ".", "imwrite", "(", "'{}/{}_{}.jpg'", ".", "format", "(", "folder", ",", "batch_idx", ",", "t", ")", ",", "c", "[", "t", "]", ")", "\n", "\n", "", "", "print", "(", "\"Saved samples:\"", ",", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.train": [[168, 224], ["tqdm.tqdm", "enumerate", "model.train", "optimizer.zero_grad", "mel.to.to", "clean_indiv_mels.to.to", "noisy_indiv_mels.to.to", "face.to.to", "model", "recon_loss", "recon_loss.item", "recon_loss.backward", "optimizer.step", "tqdm.tqdm.set_description", "torch.no_grad", "torch.no_grad", "wav2lip_teacher", "train_student.save_checkpoint", "torch.no_grad", "torch.no_grad", "train_student.validate", "wav2lip_teacher.size"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.train", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.save_checkpoint", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.validate"], ["", "def", "train", "(", "device", ",", "model", ",", "train_data_loader", ",", "test_data_loader", ",", "optimizer", ",", "\n", "checkpoint_dir", ",", "checkpoint_interval", ",", "nepochs", ")", ":", "\n", "\n", "\t", "global", "wav2lip_teacher", "\n", "global", "global_step", ",", "global_epoch", "\n", "\n", "resumed_step", "=", "global_step", "\n", "\n", "while", "global_epoch", "<", "nepochs", ":", "\n", "\n", "\t\t", "running_l1_loss", "=", "0.0", "\n", "prog_bar", "=", "tqdm", "(", "enumerate", "(", "train_data_loader", ")", ")", "\n", "\n", "for", "step", ",", "(", "mel", ",", "clean_indiv_mels", ",", "noisy_indiv_mels", ",", "face", ")", "in", "prog_bar", ":", "\n", "\n", "\t\t\t", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Transform data to CUDA device", "\n", "mel", "=", "mel", ".", "to", "(", "device", ")", "# Bx1x80x16", "\n", "clean_indiv_mels", "=", "clean_indiv_mels", ".", "to", "(", "device", ")", "# Bx5x1x80x16", "\n", "noisy_indiv_mels", "=", "noisy_indiv_mels", ".", "to", "(", "device", ")", "# Bx5x1x80x16", "\n", "face", "=", "face", ".", "to", "(", "device", ")", "# Bx6x5x96x96", "\n", "\n", "# Get the GT lip-shape using the teacher wav2lip model", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "gt", "=", "wav2lip_teacher", "(", "clean_indiv_mels", ",", "face", ")", "# Bx3x5x96x96", "\n", "\n", "# Generate the lips using the student lisync model (on noisy data)", "\n", "", "generated_face", "=", "model", "(", "noisy_indiv_mels", ")", "# Bx3x5x48x96", "\n", "\n", "# Get the L1 reconstruction loss", "\n", "loss", "=", "recon_loss", "(", "generated_face", ",", "gt", "[", ":", ",", ":", ",", ":", ",", "gt", ".", "size", "(", "3", ")", "//", "2", ":", "]", ")", "\n", "running_l1_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "# Backpropagate", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Logs", "\n", "global_step", "+=", "1", "\n", "cur_session_steps", "=", "global_step", "-", "resumed_step", "\n", "\n", "# Save the model", "\n", "if", "global_step", "==", "1", "or", "global_step", "%", "checkpoint_interval", "==", "0", ":", "\n", "\t\t\t\t", "save_checkpoint", "(", "model", ",", "optimizer", ",", "global_step", ",", "checkpoint_dir", ",", "global_epoch", ")", "\n", "\n", "# Validation loop", "\n", "", "if", "global_step", "==", "1", "or", "global_step", "%", "hparams", ".", "eval_interval", "==", "0", ":", "\n", "\t\t\t\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t\t", "validate", "(", "test_data_loader", ",", "global_step", ",", "device", ",", "model", ",", "checkpoint_dir", ")", "\n", "\n", "# Display the training progress", "\n", "", "", "prog_bar", ".", "set_description", "(", "'L1: {}'", ".", "format", "(", "running_l1_loss", "/", "(", "step", "+", "1", ")", ")", ")", "\n", "\n", "", "global_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.validate": [[226, 259], ["print", "enumerate", "print", "train_student.save_sample_images", "model.eval", "mel.to.to", "clean_indiv_mels.to.to", "noisy_indiv_mels.to.to", "face.to.to", "model", "recon_loss", "recon_losses.append", "sum", "len", "len", "torch.no_grad", "torch.no_grad", "wav2lip_teacher", "recon_loss.item", "wav2lip_teacher.size", "wav2lip_teacher.size"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.save_sample_images"], ["", "", "def", "validate", "(", "test_data_loader", ",", "global_step", ",", "device", ",", "model", ",", "checkpoint_dir", ")", ":", "\n", "\n", "\t", "print", "(", "'Evaluating for {} steps'", ".", "format", "(", "len", "(", "test_data_loader", ")", ")", ")", "\n", "\n", "recon_losses", "=", "[", "]", "\n", "\n", "for", "step", ",", "(", "mel", ",", "clean_indiv_mels", ",", "noisy_indiv_mels", ",", "face", ")", "in", "enumerate", "(", "(", "test_data_loader", ")", ")", ":", "\n", "\n", "\t\t", "model", ".", "eval", "(", ")", "\n", "\n", "# Transform data to CUDA device", "\n", "mel", "=", "mel", ".", "to", "(", "device", ")", "\n", "clean_indiv_mels", "=", "clean_indiv_mels", ".", "to", "(", "device", ")", "\n", "noisy_indiv_mels", "=", "noisy_indiv_mels", ".", "to", "(", "device", ")", "\n", "face", "=", "face", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t", "gt", "=", "wav2lip_teacher", "(", "clean_indiv_mels", ",", "face", ")", "\n", "\n", "", "generated_face", "=", "model", "(", "noisy_indiv_mels", ")", "\n", "\n", "l1loss", "=", "recon_loss", "(", "generated_face", ",", "gt", "[", ":", ",", ":", ",", ":", ",", "gt", ".", "size", "(", "3", ")", "//", "2", ":", "]", ")", "\n", "recon_losses", ".", "append", "(", "l1loss", ".", "item", "(", ")", ")", "\n", "\n", "# Compute the average of the validation loss", "\n", "", "averaged_recon_loss", "=", "sum", "(", "recon_losses", ")", "/", "len", "(", "recon_losses", ")", "\n", "print", "(", "'L1: {}'", ".", "format", "(", "averaged_recon_loss", ")", ")", "\n", "\n", "# Save the ground truth and the generated samples", "\n", "gt_lh", "=", "gt", "[", ":", ",", ":", ",", ":", ",", "gt", ".", "size", "(", "3", ")", "//", "2", ":", ",", ":", "]", "\n", "save_sample_images", "(", "generated_face", ",", "gt_lh", ",", "global_step", ",", "checkpoint_dir", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.save_checkpoint": [[261, 273], ["os.path.join", "torch.save", "torch.save", "print", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "def", "save_checkpoint", "(", "model", ",", "optimizer", ",", "step", ",", "checkpoint_dir", ",", "epoch", ")", ":", "\n", "\n", "\t", "checkpoint_path", "=", "join", "(", "checkpoint_dir", ",", "\"checkpoint_step{:05d}.pth\"", ".", "format", "(", "global_step", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"global_step\"", ":", "step", ",", "\n", "\"global_epoch\"", ":", "epoch", ",", "\n", "}", ",", "checkpoint_path", ")", "\n", "\n", "print", "(", "\"Saved checkpoint:\"", ",", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student._load": [[275, 283], ["torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "_load", "(", "checkpoint_path", ")", ":", "\n", "\n", "\t", "if", "use_cuda", ":", "\n", "\t\t", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "", "else", ":", "\n", "\t\t", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student.load_checkpoint": [[285, 317], ["print", "train_student._load", "s.items", "model.load_state_dict", "torch.cuda.device_count", "torch.cuda.device_count", "print", "optimizer.load_state_dict", "k.startswith", "k.replace"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.train_student._load"], ["", "def", "load_checkpoint", "(", "path", ",", "model", ",", "optimizer", ",", "reset_optimizer", "=", "False", ",", "overwrite_global_states", "=", "True", ")", ":", "\n", "\n", "\t", "global", "global_step", "\n", "global", "global_epoch", "\n", "\n", "print", "(", "\"Load checkpoint from: {}\"", ".", "format", "(", "path", ")", ")", "\n", "checkpoint", "=", "_load", "(", "path", ")", "\n", "s", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "new_s", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "s", ".", "items", "(", ")", ":", "\n", "\t\t", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "\t\t\t", "if", "not", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "\t\t\t\t", "new_s", "[", "'module.'", "+", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "\t\t\t\t", "new_s", "[", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "\t\t\t", "new_s", "[", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "]", "=", "v", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "new_s", ")", "\n", "\n", "if", "not", "reset_optimizer", ":", "\n", "\t\t", "optimizer_state", "=", "checkpoint", "[", "\"optimizer\"", "]", "\n", "if", "optimizer_state", "is", "not", "None", ":", "\n", "\t\t\t", "print", "(", "\"Load optimizer state from {}\"", ".", "format", "(", "path", ")", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "", "", "if", "overwrite_global_states", ":", "\n", "\t\t", "global_step", "=", "checkpoint", "[", "\"global_step\"", "]", "\n", "global_epoch", "=", "checkpoint", "[", "\"global_epoch\"", "]", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.hparams.get_filelist": [[6, 23], ["os.path.exists", "glob.glob", "open", "pickle.load", "open", "pickle.dump", "int", "int", "len", "len"], "function", ["None"], ["def", "get_filelist", "(", "dataset", ",", "data_root", ",", "split", ")", ":", "\n", "    ", "pkl_file", "=", "'filenames_{}_{}.pkl'", ".", "format", "(", "dataset", ",", "split", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "pkl_file", ")", ":", "\n", "        ", "with", "open", "(", "pkl_file", ",", "'rb'", ")", "as", "p", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "p", ")", "\n", "", "", "else", ":", "\n", "        ", "filelist", "=", "glob", "(", "'{}/*/*'", ".", "format", "(", "data_root", ")", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "filelist", "=", "filelist", "[", ":", "int", "(", ".95", "*", "len", "(", "filelist", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "filelist", "=", "filelist", "[", "int", "(", ".95", "*", "len", "(", "filelist", ")", ")", ":", "]", "\n", "\n", "", "with", "open", "(", "pkl_file", ",", "'wb'", ")", "as", "p", ":", "\n", "            ", "pickle", ".", "dump", "(", "filelist", ",", "p", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "filelist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.hparams.get_noise_list": [[24, 35], ["os.path.exists", "glob.glob", "open", "pickle.load", "open", "pickle.dump"], "function", ["None"], ["", "", "def", "get_noise_list", "(", "data_root", ")", ":", "\n", "    ", "pkl_file", "=", "'filenames_noisy.pkl'", "\n", "if", "os", ".", "path", ".", "exists", "(", "pkl_file", ")", ":", "\n", "        ", "with", "open", "(", "pkl_file", ",", "'rb'", ")", "as", "p", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "p", ")", "\n", "", "", "else", ":", "\n", "        ", "filelist", "=", "glob", "(", "'{}/*.wav'", ".", "format", "(", "data_root", ")", ")", "\n", "with", "open", "(", "pkl_file", ",", "'wb'", ")", "as", "p", ":", "\n", "            ", "pickle", ".", "dump", "(", "filelist", ",", "p", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "filelist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.lipsync.hparams.get_all_files": [[36, 48], ["hparams.get_filelist", "hparams.get_filelist"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_filelist", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_filelist"], ["", "", "def", "get_all_files", "(", "pretrain_path", ",", "train_path", ",", "split", ")", ":", "\n", "\n", "# LRS3 train files", "\n", "    ", "filelist_lrs3", "=", "get_filelist", "(", "'lrs3_train'", ",", "train_path", ",", "split", ")", "\n", "\n", "# LRS3 pre-train files", "\n", "filelist_lrs3_pretrain", "=", "get_filelist", "(", "'lrs3_pretrain'", ",", "pretrain_path", ",", "split", ")", "\n", "\n", "# Combine all the files", "\n", "filelist", "=", "filelist_lrs3", "+", "filelist_lrs3_pretrain", "\n", "\n", "return", "filelist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav": [[6, 8], ["librosa.core.load", "librosa.core.load"], "function", ["None"], ["def", "load_wav", "(", "path", ",", "sr", ")", ":", "\n", "    ", "return", "librosa", ".", "core", ".", "load", "(", "path", ",", "sr", "=", "sr", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.preemphasis": [[9, 13], ["scipy.signal.lfilter"], "function", ["None"], ["", "def", "preemphasis", "(", "wav", ",", "k", ",", "preemphasize", "=", "True", ")", ":", "\n", "    ", "if", "preemphasize", ":", "\n", "        ", "return", "signal", ".", "lfilter", "(", "[", "1", ",", "-", "k", "]", ",", "[", "1", "]", ",", "wav", ")", "\n", "", "return", "wav", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis": [[14, 18], ["scipy.signal.lfilter"], "function", ["None"], ["", "def", "inv_preemphasis", "(", "wav", ",", "k", ",", "inv_preemphasize", "=", "True", ")", ":", "\n", "    ", "if", "inv_preemphasize", ":", "\n", "        ", "return", "signal", ".", "lfilter", "(", "[", "1", "]", ",", "[", "1", ",", "-", "k", "]", ",", "wav", ")", "\n", "", "return", "wav", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.get_hop_size": [[19, 25], ["int"], "function", ["None"], ["", "def", "get_hop_size", "(", "hparams", ")", ":", "\n", "    ", "hop_size", "=", "hparams", ".", "hop_size", "\n", "if", "hop_size", "is", "None", ":", "\n", "        ", "assert", "hparams", ".", "frame_shift_ms", "is", "not", "None", "\n", "hop_size", "=", "int", "(", "hparams", ".", "frame_shift_ms", "/", "1000", "*", "hparams", ".", "sample_rate", ")", "\n", "", "return", "hop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.linearspectrogram": [[26, 33], ["audio_utils._stft", "audio_utils.preemphasis", "audio_utils._amp_to_db", "audio_utils._normalize", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._stft", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._amp_to_db", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._normalize"], ["", "def", "linearspectrogram", "(", "wav", ",", "hparams", ")", ":", "\n", "    ", "D", "=", "_stft", "(", "preemphasis", "(", "wav", ",", "hparams", ".", "preemphasis", ",", "hparams", ".", "preemphasize", ")", ",", "hparams", ")", "\n", "S", "=", "_amp_to_db", "(", "np", ".", "abs", "(", "D", ")", ",", "hparams", ")", "-", "hparams", ".", "ref_level_db", "\n", "\n", "if", "hparams", ".", "signal_normalization", ":", "\n", "        ", "return", "_normalize", "(", "S", ",", "hparams", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram": [[34, 41], ["audio_utils._stft", "audio_utils.preemphasis", "audio_utils._amp_to_db", "audio_utils._normalize", "audio_utils._linear_to_mel", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._stft", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._amp_to_db", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._normalize", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._linear_to_mel"], ["", "def", "melspectrogram", "(", "wav", ",", "hparams", ")", ":", "\n", "    ", "D", "=", "_stft", "(", "preemphasis", "(", "wav", ",", "hparams", ".", "preemphasis", ",", "hparams", ".", "preemphasize", ")", ",", "hparams", ")", "\n", "S", "=", "_amp_to_db", "(", "_linear_to_mel", "(", "np", ".", "abs", "(", "D", ")", ",", "hparams", ")", ",", "hparams", ")", "-", "hparams", ".", "ref_level_db", "\n", "\n", "if", "hparams", ".", "signal_normalization", ":", "\n", "        ", "return", "_normalize", "(", "S", ",", "hparams", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_linear_spectrogram": [[42, 58], ["audio_utils._db_to_amp", "audio_utils._denormalize", "audio_utils._lws_processor", "_lws_processor.run_lws", "_lws_processor.istft().astype", "audio_utils.inv_preemphasis", "audio_utils.inv_preemphasis", "audio_utils._griffin_lim", "_lws_processor.istft", "_db_to_amp.astype"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._db_to_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._denormalize", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._lws_processor", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._griffin_lim"], ["", "def", "inv_linear_spectrogram", "(", "linear_spectrogram", ",", "hparams", ")", ":", "\n", "    ", "\"\"\"Converts linear spectrogram to waveform using librosa\"\"\"", "\n", "if", "hparams", ".", "signal_normalization", ":", "\n", "        ", "D", "=", "_denormalize", "(", "linear_spectrogram", ",", "hparams", ")", "\n", "", "else", ":", "\n", "        ", "D", "=", "linear_spectrogram", "\n", "\n", "", "S", "=", "_db_to_amp", "(", "D", "+", "hparams", ".", "ref_level_db", ")", "#Convert back to linear", "\n", "\n", "if", "hparams", ".", "use_lws", ":", "\n", "        ", "processor", "=", "_lws_processor", "(", "hparams", ")", "\n", "D", "=", "processor", ".", "run_lws", "(", "S", ".", "astype", "(", "np", ".", "float64", ")", ".", "T", "**", "hparams", ".", "power", ")", "\n", "y", "=", "processor", ".", "istft", "(", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "inv_preemphasis", "(", "y", ",", "hparams", ".", "preemphasis", ",", "hparams", ".", "preemphasize", ")", "\n", "", "else", ":", "\n", "        ", "return", "inv_preemphasis", "(", "_griffin_lim", "(", "S", "**", "hparams", ".", "power", ",", "hparams", ")", ",", "hparams", ".", "preemphasis", ",", "hparams", ".", "preemphasize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_mel_spectrogram": [[59, 75], ["audio_utils._mel_to_linear", "audio_utils._denormalize", "audio_utils._db_to_amp", "audio_utils._lws_processor", "_lws_processor.run_lws", "_lws_processor.istft().astype", "audio_utils.inv_preemphasis", "audio_utils.inv_preemphasis", "audio_utils._griffin_lim", "_lws_processor.istft", "_mel_to_linear.astype"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._mel_to_linear", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._denormalize", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._db_to_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._lws_processor", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.inv_preemphasis", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._griffin_lim"], ["", "", "def", "inv_mel_spectrogram", "(", "mel_spectrogram", ",", "hparams", ")", ":", "\n", "    ", "\"\"\"Converts mel spectrogram to waveform using librosa\"\"\"", "\n", "if", "hparams", ".", "signal_normalization", ":", "\n", "        ", "D", "=", "_denormalize", "(", "mel_spectrogram", ",", "hparams", ")", "\n", "", "else", ":", "\n", "        ", "D", "=", "mel_spectrogram", "\n", "\n", "", "S", "=", "_mel_to_linear", "(", "_db_to_amp", "(", "D", "+", "hparams", ".", "ref_level_db", ")", ",", "hparams", ")", "# Convert back to linear", "\n", "\n", "if", "hparams", ".", "use_lws", ":", "\n", "        ", "processor", "=", "_lws_processor", "(", "hparams", ")", "\n", "D", "=", "processor", ".", "run_lws", "(", "S", ".", "astype", "(", "np", ".", "float64", ")", ".", "T", "**", "hparams", ".", "power", ")", "\n", "y", "=", "processor", ".", "istft", "(", "D", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "inv_preemphasis", "(", "y", ",", "hparams", ".", "preemphasis", ",", "hparams", ".", "preemphasize", ")", "\n", "", "else", ":", "\n", "        ", "return", "inv_preemphasis", "(", "_griffin_lim", "(", "S", "**", "hparams", ".", "power", ",", "hparams", ")", ",", "hparams", ".", "preemphasis", ",", "hparams", ".", "preemphasize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._lws_processor": [[76, 79], ["lws.lws", "audio_utils.get_hop_size", "numpy.np.float32", "numpy.np.float32"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.get_hop_size"], ["", "", "def", "_lws_processor", "(", "hparams", ")", ":", "\n", "    ", "import", "lws", "\n", "return", "lws", ".", "lws", "(", "hparams", ".", "n_fft", ",", "get_hop_size", "(", "hparams", ")", ",", "fftsize", "=", "hparams", ".", "win_size", ",", "mode", "=", "\"speech\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._griffin_lim": [[80, 91], ["numpy.exp", "numpy.abs().astype", "audio_utils._istft", "range", "numpy.exp", "audio_utils._istft", "numpy.random.rand", "numpy.abs", "numpy.angle", "audio_utils._stft"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._istft", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._istft", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._stft"], ["", "def", "_griffin_lim", "(", "S", ",", "hparams", ")", ":", "\n", "    ", "\"\"\"librosa implementation of Griffin-Lim\n    Based on https://github.com/librosa/librosa/issues/434\n    \"\"\"", "\n", "angles", "=", "np", ".", "exp", "(", "2j", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "rand", "(", "*", "S", ".", "shape", ")", ")", "\n", "S_complex", "=", "np", ".", "abs", "(", "S", ")", ".", "astype", "(", "np", ".", "complex", ")", "\n", "y", "=", "_istft", "(", "S_complex", "*", "angles", ",", "hparams", ")", "\n", "for", "i", "in", "range", "(", "hparams", ".", "griffin_lim_iters", ")", ":", "\n", "        ", "angles", "=", "np", ".", "exp", "(", "1j", "*", "np", ".", "angle", "(", "_stft", "(", "y", ",", "hparams", ")", ")", ")", "\n", "y", "=", "_istft", "(", "S_complex", "*", "angles", ",", "hparams", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._stft": [[92, 97], ["librosa.stft", "librosa.stft", "_lws_processor().stft", "audio_utils.get_hop_size", "audio_utils._lws_processor"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.get_hop_size", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._lws_processor"], ["", "def", "_stft", "(", "y", ",", "hparams", ")", ":", "\n", "    ", "if", "hparams", ".", "use_lws", ":", "\n", "        ", "return", "_lws_processor", "(", "hparams", ")", ".", "stft", "(", "y", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "return", "librosa", ".", "stft", "(", "y", "=", "y", ",", "n_fft", "=", "hparams", ".", "n_fft", ",", "hop_length", "=", "get_hop_size", "(", "hparams", ")", ",", "win_length", "=", "hparams", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._istft": [[98, 100], ["librosa.istft", "librosa.istft", "audio_utils.get_hop_size"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.get_hop_size"], ["", "", "def", "_istft", "(", "y", ",", "hparams", ")", ":", "\n", "    ", "return", "librosa", ".", "istft", "(", "y", ",", "hop_length", "=", "get_hop_size", "(", "hparams", ")", ",", "win_length", "=", "hparams", ".", "win_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._linear_to_mel": [[105, 110], ["numpy.dot", "audio_utils._build_mel_basis"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._build_mel_basis"], ["def", "_linear_to_mel", "(", "spectogram", ",", "hparams", ")", ":", "\n", "    ", "global", "_mel_basis", "\n", "if", "_mel_basis", "is", "None", ":", "\n", "        ", "_mel_basis", "=", "_build_mel_basis", "(", "hparams", ")", "\n", "", "return", "np", ".", "dot", "(", "_mel_basis", ",", "spectogram", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._mel_to_linear": [[111, 116], ["numpy.maximum", "numpy.linalg.pinv", "numpy.dot", "audio_utils._build_mel_basis", "numpy.np.float64"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._build_mel_basis"], ["", "def", "_mel_to_linear", "(", "mel_spectrogram", ",", "hparams", ")", ":", "\n", "    ", "global", "_inv_mel_basis", "\n", "if", "_inv_mel_basis", "is", "None", ":", "\n", "        ", "_inv_mel_basis", "=", "np", ".", "linalg", ".", "pinv", "(", "_build_mel_basis", "(", "hparams", ")", ")", "\n", "", "return", "np", ".", "maximum", "(", "1e-10", ",", "np", ".", "dot", "(", "_inv_mel_basis", ",", "mel_spectrogram", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._build_mel_basis": [[117, 121], ["librosa.filters.mel", "librosa.filters.mel"], "function", ["None"], ["", "def", "_build_mel_basis", "(", "hparams", ")", ":", "\n", "    ", "assert", "hparams", ".", "fmax", "<=", "hparams", ".", "sample_rate", "//", "2", "\n", "return", "librosa", ".", "filters", ".", "mel", "(", "hparams", ".", "sample_rate", ",", "hparams", ".", "n_fft", ",", "n_mels", "=", "hparams", ".", "num_mels", ",", "\n", "fmin", "=", "hparams", ".", "fmin", ",", "fmax", "=", "hparams", ".", "fmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._amp_to_db": [[122, 125], ["numpy.exp", "numpy.log10", "numpy.log", "numpy.maximum"], "function", ["None"], ["", "def", "_amp_to_db", "(", "x", ",", "hparams", ")", ":", "\n", "    ", "min_level", "=", "np", ".", "exp", "(", "hparams", ".", "min_level_db", "/", "20", "*", "np", ".", "log", "(", "10", ")", ")", "\n", "return", "20", "*", "np", ".", "log10", "(", "np", ".", "maximum", "(", "min_level", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._db_to_amp": [[126, 128], ["numpy.power", "numpy.np.float64"], "function", ["None"], ["", "def", "_db_to_amp", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "power", "(", "10.0", ",", "(", "x", ")", "*", "0.05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._normalize": [[129, 142], ["numpy.clip", "numpy.clip", "S.max", "S.min"], "function", ["None"], ["", "def", "_normalize", "(", "S", ",", "hparams", ")", ":", "\n", "    ", "if", "hparams", ".", "allow_clipping_in_normalization", ":", "\n", "        ", "if", "hparams", ".", "symmetric_mels", ":", "\n", "            ", "return", "np", ".", "clip", "(", "(", "2", "*", "hparams", ".", "max_abs_value", ")", "*", "(", "(", "S", "-", "hparams", ".", "min_level_db", ")", "/", "(", "-", "hparams", ".", "min_level_db", ")", ")", "-", "hparams", ".", "max_abs_value", ",", "\n", "-", "hparams", ".", "max_abs_value", ",", "hparams", ".", "max_abs_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "clip", "(", "hparams", ".", "max_abs_value", "*", "(", "(", "S", "-", "hparams", ".", "min_level_db", ")", "/", "(", "-", "hparams", ".", "min_level_db", ")", ")", ",", "0", ",", "hparams", ".", "max_abs_value", ")", "\n", "\n", "", "", "assert", "S", ".", "max", "(", ")", "<=", "0", "and", "S", ".", "min", "(", ")", "-", "hparams", ".", "min_level_db", ">=", "0", "\n", "if", "hparams", ".", "symmetric_mels", ":", "\n", "        ", "return", "(", "2", "*", "hparams", ".", "max_abs_value", ")", "*", "(", "(", "S", "-", "hparams", ".", "min_level_db", ")", "/", "(", "-", "hparams", ".", "min_level_db", ")", ")", "-", "hparams", ".", "max_abs_value", "\n", "", "else", ":", "\n", "        ", "return", "hparams", ".", "max_abs_value", "*", "(", "(", "S", "-", "hparams", ".", "min_level_db", ")", "/", "(", "-", "hparams", ".", "min_level_db", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils._denormalize": [[143, 156], ["numpy.clip", "numpy.clip"], "function", ["None"], ["", "", "def", "_denormalize", "(", "D", ",", "hparams", ")", ":", "\n", "    ", "if", "hparams", ".", "allow_clipping_in_normalization", ":", "\n", "        ", "if", "hparams", ".", "symmetric_mels", ":", "\n", "            ", "return", "(", "(", "(", "np", ".", "clip", "(", "D", ",", "-", "hparams", ".", "max_abs_value", ",", "\n", "hparams", ".", "max_abs_value", ")", "+", "hparams", ".", "max_abs_value", ")", "*", "-", "hparams", ".", "min_level_db", "/", "(", "2", "*", "hparams", ".", "max_abs_value", ")", ")", "\n", "+", "hparams", ".", "min_level_db", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "(", "np", ".", "clip", "(", "D", ",", "0", ",", "hparams", ".", "max_abs_value", ")", "*", "-", "hparams", ".", "min_level_db", "/", "hparams", ".", "max_abs_value", ")", "+", "hparams", ".", "min_level_db", ")", "\n", "\n", "", "", "if", "hparams", ".", "symmetric_mels", ":", "\n", "        ", "return", "(", "(", "(", "D", "+", "hparams", ".", "max_abs_value", ")", "*", "-", "hparams", ".", "min_level_db", "/", "(", "2", "*", "hparams", ".", "max_abs_value", ")", ")", "+", "hparams", ".", "min_level_db", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "(", "D", "*", "-", "hparams", ".", "min_level_db", "/", "hparams", ".", "max_abs_value", ")", "+", "hparams", ".", "min_level_db", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.db_from_amp": [[158, 160], ["numpy.log10", "numpy.maximum"], "function", ["None"], ["", "", "def", "db_from_amp", "(", "x", ")", ":", "\n", "    ", "return", "20.", "*", "np", ".", "log10", "(", "np", ".", "maximum", "(", "1e-5", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.amp_from_db": [[161, 163], ["numpy.power"], "function", ["None"], ["", "def", "amp_from_db", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "power", "(", "10.", ",", "x", "/", "20.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle": [[164, 180], ["numpy.arctan2", "numpy.imag", "numpy.real"], "function", ["None"], ["", "def", "angle", "(", "z", ")", ":", "\n", "# from https://github.com/tensorflow/tensorflow/issues/483", "\n", "  ", "\"\"\"\n  Returns the elementwise arctan of z, choosing the quadrant correctly.\n\n  Quadrant I: arctan(y/x)\n  Qaudrant II: \\pi + arctan(y/x) (phase of x<0, y=0 is \\pi)\n  Quadrant III: -\\pi + arctan(y/x)\n  Quadrant IV: arctan(y/x)\n\n  Inputs:\n      z: tf.complex64 or tf.complex128 tensor\n  Retunrs:\n      Angle of z\n  \"\"\"", "\n", "return", "np", ".", "arctan2", "(", "np", ".", "imag", "(", "z", ")", ",", "np", ".", "real", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.cast_complex": [[181, 184], ["x.astype"], "function", ["None"], ["", "def", "cast_complex", "(", "x", ")", ":", "\n", "    ", "complex_x", "=", "x", ".", "astype", "(", "np", ".", "complex64", ")", "\n", "return", "complex_x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.make_complex": [[185, 190], ["audio_utils.cast_complex", "audio_utils.cast_complex", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.cast_complex", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.cast_complex"], ["", "def", "make_complex", "(", "mag", ",", "phase", ")", ":", "\n", "    ", "mag", "=", "cast_complex", "(", "mag", ")", "\n", "phase", "=", "cast_complex", "(", "phase", ")", "\n", "compex_arr", "=", "mag", "*", "(", "np", ".", "cos", "(", "phase", ")", "+", "1j", "*", "np", ".", "sin", "(", "phase", ")", ")", "\n", "return", "compex_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_mag": [[191, 193], ["float"], "function", ["None"], ["", "def", "normalize_mag", "(", "x", ",", "min_val", "=", "-", "100", ",", "max_val", "=", "80", ")", ":", "\n", "    ", "return", "(", "x", "-", "min_val", ")", "/", "float", "(", "max_val", "-", "min_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_phase": [[194, 196], ["float"], "function", ["None"], ["", "def", "normalize_phase", "(", "x", ",", "min_val", "=", "-", "np", ".", "pi", ",", "max_val", "=", "np", ".", "pi", ")", ":", "\n", "    ", "return", "(", "x", "-", "min_val", ")", "/", "float", "(", "max_val", "-", "min_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.unnormalize_mag": [[197, 199], ["float"], "function", ["None"], ["", "def", "unnormalize_mag", "(", "y", ",", "min_val", "=", "-", "100", ",", "max_val", "=", "80", ")", ":", "\n", "    ", "return", "float", "(", "max_val", "-", "min_val", ")", "*", "y", "+", "min_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.unnormalize_phase": [[200, 202], ["float"], "function", ["None"], ["", "def", "unnormalize_phase", "(", "y", ",", "min_val", "=", "-", "np", ".", "pi", ",", "max_val", "=", "np", ".", "pi", ")", ":", "\n", "    ", "return", "float", "(", "max_val", "-", "min_val", ")", "*", "y", "+", "min_val", "\n", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_filelist": [[6, 23], ["os.path.exists", "glob.glob", "open", "pickle.load", "open", "pickle.dump", "int", "int", "len", "len"], "function", ["None"], ["def", "get_filelist", "(", "dataset", ",", "data_root", ",", "split", ")", ":", "\n", "    ", "pkl_file", "=", "'filenames_{}_{}.pkl'", ".", "format", "(", "dataset", ",", "split", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "pkl_file", ")", ":", "\n", "        ", "with", "open", "(", "pkl_file", ",", "'rb'", ")", "as", "p", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "p", ")", "\n", "", "", "else", ":", "\n", "        ", "filelist", "=", "glob", "(", "'{}/*/*'", ".", "format", "(", "data_root", ")", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "filelist", "=", "filelist", "[", ":", "int", "(", ".95", "*", "len", "(", "filelist", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "filelist", "=", "filelist", "[", "int", "(", ".95", "*", "len", "(", "filelist", ")", ")", ":", "]", "\n", "\n", "", "with", "open", "(", "pkl_file", ",", "'wb'", ")", "as", "p", ":", "\n", "            ", "pickle", ".", "dump", "(", "filelist", ",", "p", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "filelist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_noise_list": [[24, 35], ["os.path.exists", "glob.glob", "open", "pickle.load", "open", "pickle.dump"], "function", ["None"], ["", "", "def", "get_noise_list", "(", "data_root", ")", ":", "\n", "    ", "pkl_file", "=", "'filenames_noisy.pkl'", "\n", "if", "os", ".", "path", ".", "exists", "(", "pkl_file", ")", ":", "\n", "        ", "with", "open", "(", "pkl_file", ",", "'rb'", ")", "as", "p", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "p", ")", "\n", "", "", "else", ":", "\n", "        ", "filelist", "=", "glob", "(", "'{}/*.wav'", ".", "format", "(", "data_root", ")", ")", "\n", "with", "open", "(", "pkl_file", ",", "'wb'", ")", "as", "p", ":", "\n", "            ", "pickle", ".", "dump", "(", "filelist", ",", "p", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "filelist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_all_files": [[36, 48], ["hparams.get_filelist", "hparams.get_filelist"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_filelist", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_filelist"], ["", "", "def", "get_all_files", "(", "pretrain_path", ",", "train_path", ",", "split", ")", ":", "\n", "\n", "# LRS3 train files", "\n", "    ", "filelist_lrs3", "=", "get_filelist", "(", "'lrs3_train'", ",", "train_path", ",", "split", ")", "\n", "\n", "# LRS3 pre-train files", "\n", "filelist_lrs3_pretrain", "=", "get_filelist", "(", "'lrs3_pretrain'", ",", "pretrain_path", ",", "split", ")", "\n", "\n", "# Combine all the files", "\n", "filelist", "=", "filelist_lrs3", "+", "filelist_lrs3_pretrain", "\n", "\n", "return", "filelist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.__init__": [[12, 17], ["audio.get_all_files", "audio.get_all_files", "audio.get_noise_list", "audio.get_noise_list"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_all_files", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_all_files", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_noise_list", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.hparams.get_noise_list"], ["    ", "def", "__init__", "(", "self", ",", "pretrain_path", ",", "train_path", ",", "noise_path", ",", "sampling_rate", ",", "split", ")", ":", "\n", "\n", "        ", "self", ".", "files", "=", "hparams", ".", "get_all_files", "(", "pretrain_path", ",", "train_path", ",", "split", ")", "\n", "self", ".", "random_files", "=", "hparams", ".", "get_noise_list", "(", "noise_path", ")", "\n", "self", ".", "sampling_rate", "=", "sampling_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.__len__": [[19, 21], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.__getitem__": [[22, 38], ["random.randint", "data_loader.DataGenerator.process_audio", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor", "numpy.array", "numpy.array", "len", "torch.FloatTensor", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.process_audio"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "while", "(", "1", ")", ":", "\n", "            ", "index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "files", ")", "-", "1", ")", "\n", "fname", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "mel", ",", "stft", ",", "y", "=", "self", ".", "process_audio", "(", "fname", ")", "\n", "\n", "if", "mel", "is", "None", "or", "stft", "is", "None", "or", "y", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "inp_mel", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "mel", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "inp_stft", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "stft", ")", ")", "\n", "gt_stft", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "y", ")", ")", "\n", "\n", "return", "inp_mel", ",", "inp_stft", ",", "gt_stft", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.process_audio": [[40, 99], ["random.choice", "data_loader.DataGenerator.crop_audio_window", "data_loader.DataGenerator.get_spec", "data_loader.DataGenerator.get_spec", "data_loader.DataGenerator.get_segmented_mels", "numpy.array", "numpy.array", "numpy.array", "audio.load_wav", "audio.load_wav", "audio.load_wav", "audio.load_wav", "audio.load_wav", "audio.load_wav", "audio.load_wav", "audio.load_wav", "random.randint", "random.choice", "data_loader.DataGenerator.add_noise", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.crop_audio_window", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.get_spec", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.get_spec", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.get_segmented_mels", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.load_wav", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.add_noise"], ["", "", "def", "process_audio", "(", "self", ",", "file", ")", ":", "\n", "\n", "# Load the gt wav file", "\n", "        ", "try", ":", "\n", "            ", "gt_wav", "=", "audio", ".", "load_wav", "(", "file", ",", "self", ".", "sampling_rate", ")", "# m", "\n", "", "except", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "# Get the random file from VGGSound to mix with the ground truth file", "\n", "", "random_file", "=", "random", ".", "choice", "(", "self", ".", "random_files", ")", "\n", "\n", "# Load the random wav file", "\n", "try", ":", "\n", "            ", "random_wav", "=", "audio", ".", "load_wav", "(", "random_file", ",", "self", ".", "sampling_rate", ")", "# n", "\n", "", "except", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "# Mix the noisy wav file with the clean GT file", "\n", "", "try", ":", "\n", "            ", "idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "random_wav", ")", "-", "len", "(", "gt_wav", ")", "-", "1", ")", "\n", "random_wav", "=", "random_wav", "[", "idx", ":", "idx", "+", "len", "(", "gt_wav", ")", "]", "\n", "snrs", "=", "[", "0", ",", "5", ",", "10", "]", "\n", "target_snr", "=", "random", ".", "choice", "(", "snrs", ")", "\n", "noisy_wav", "=", "self", ".", "add_noise", "(", "gt_wav", ",", "random_wav", ",", "target_snr", ")", "\n", "", "except", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "# Extract the corresponding audio segments of 1 second", "\n", "", "start_idx", ",", "gt_seg_wav", ",", "noisy_seg_wav", "=", "self", ".", "crop_audio_window", "(", "gt_wav", ",", "noisy_wav", ",", "random_wav", ")", "\n", "\n", "if", "start_idx", "is", "None", "or", "gt_seg_wav", "is", "None", "or", "noisy_seg_wav", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "\n", "# -----------------------------------STFTs--------------------------------------------- #", "\n", "# Get the STFT, normalize and concatenate the mag and phase of GT and noisy wavs", "\n", "", "gt_spec", "=", "self", ".", "get_spec", "(", "gt_seg_wav", ")", "# Tx514", "\n", "\n", "noisy_spec", "=", "self", ".", "get_spec", "(", "noisy_seg_wav", ")", "# Tx514 ", "\n", "# ------------------------------------------------------------------------------------- #", "\n", "\n", "\n", "# -----------------------------------Melspecs------------------------------------------ #                          ", "\n", "noisy_mels", "=", "self", ".", "get_segmented_mels", "(", "start_idx", ",", "noisy_wav", ")", "# Tx80x16", "\n", "if", "noisy_mels", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "# ------------------------------------------------------------------------------------- #", "\n", "\n", "# Input to the lipsync student model: Noisy melspectrogram", "\n", "", "inp_mel", "=", "np", ".", "array", "(", "noisy_mels", ")", "# Tx80x16", "\n", "\n", "# Input to the denoising model: Noisy linear spectrogram", "\n", "inp_stft", "=", "np", ".", "array", "(", "noisy_spec", ")", "# Tx514", "\n", "\n", "# GT to the denoising model: Clean linear spectrogram", "\n", "gt_stft", "=", "np", ".", "array", "(", "gt_spec", ")", "# Tx514", "\n", "\n", "\n", "return", "inp_mel", ",", "inp_stft", ",", "gt_stft", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.crop_audio_window": [[101, 137], ["numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "random.choice", "len", "len"], "methods", ["None"], ["", "def", "crop_audio_window", "(", "self", ",", "gt_wav", ",", "noisy_wav", ",", "random_wav", ")", ":", "\n", "\n", "        ", "if", "gt_wav", ".", "shape", "[", "0", "]", "-", "hparams", ".", "hparams", ".", "wav_step_size", "<=", "1280", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "# Get 1 second random segment from the wav", "\n", "", "start_idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "1280", ",", "high", "=", "gt_wav", ".", "shape", "[", "0", "]", "-", "hparams", ".", "hparams", ".", "wav_step_size", ")", "\n", "end_idx", "=", "start_idx", "+", "hparams", ".", "hparams", ".", "wav_step_size", "\n", "gt_seg_wav", "=", "gt_wav", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "if", "len", "(", "gt_seg_wav", ")", "!=", "hparams", ".", "hparams", ".", "wav_step_size", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "noisy_seg_wav", "=", "noisy_wav", "[", "start_idx", ":", "end_idx", "]", "\n", "if", "len", "(", "noisy_seg_wav", ")", "!=", "hparams", ".", "hparams", ".", "wav_step_size", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "# Data augmentation", "\n", "", "aug_steps", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "3200", ")", "\n", "aug_start_idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "hparams", ".", "hparams", ".", "wav_step_size", "-", "aug_steps", ")", "\n", "aug_end_idx", "=", "aug_start_idx", "+", "aug_steps", "\n", "\n", "aug_types", "=", "[", "'zero_speech'", ",", "'reduce_speech'", ",", "'increase_noise'", "]", "\n", "aug", "=", "random", ".", "choice", "(", "aug_types", ")", "\n", "\n", "if", "aug", "==", "'zero_speech'", ":", "\n", "            ", "noisy_seg_wav", "[", "aug_start_idx", ":", "aug_end_idx", "]", "=", "0.0", "\n", "\n", "", "elif", "aug", "==", "'reduce_speech'", ":", "\n", "            ", "noisy_seg_wav", "[", "aug_start_idx", ":", "aug_end_idx", "]", "=", "0.1", "*", "gt_seg_wav", "[", "aug_start_idx", ":", "aug_end_idx", "]", "\n", "\n", "", "elif", "aug", "==", "'increase_noise'", ":", "\n", "            ", "random_seg_wav", "=", "random_wav", "[", "start_idx", ":", "end_idx", "]", "\n", "noisy_seg_wav", "[", "aug_start_idx", ":", "aug_end_idx", "]", "=", "gt_seg_wav", "[", "aug_start_idx", ":", "aug_end_idx", "]", "+", "(", "2", "*", "random_seg_wav", "[", "aug_start_idx", ":", "aug_end_idx", "]", ")", "\n", "\n", "", "return", "start_idx", ",", "gt_seg_wav", ",", "noisy_seg_wav", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.crop_mels": [[139, 153], ["len", "audio.melspectrogram", "audio.melspectrogram", "audio.melspectrogram", "audio.melspectrogram"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.melspectrogram"], ["", "def", "crop_mels", "(", "self", ",", "start_idx", ",", "noisy_wav", ")", ":", "\n", "\n", "        ", "end_idx", "=", "start_idx", "+", "3200", "\n", "\n", "# Get the segmented wav (0.2 second)", "\n", "noisy_seg_wav", "=", "noisy_wav", "[", "start_idx", ":", "end_idx", "]", "\n", "if", "len", "(", "noisy_seg_wav", ")", "!=", "3200", ":", "\n", "            ", "return", "None", "\n", "\n", "# Compute the melspectrogram using librosa", "\n", "", "spec", "=", "audio", ".", "melspectrogram", "(", "noisy_seg_wav", ",", "hparams", ".", "hparams", ")", ".", "T", "# 16x80", "\n", "spec", "=", "spec", "[", ":", "-", "1", "]", "\n", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.get_segmented_mels": [[155, 171], ["range", "numpy.asarray", "data_loader.DataGenerator.crop_mels", "numpy.asarray.append"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.crop_mels"], ["", "def", "get_segmented_mels", "(", "self", ",", "start_idx", ",", "noisy_wav", ")", ":", "\n", "\n", "        ", "mels", "=", "[", "]", "\n", "if", "start_idx", "-", "1280", "<", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# Get the overlapping continuous segments of noisy mels", "\n", "", "for", "i", "in", "range", "(", "start_idx", ",", "start_idx", "+", "hparams", ".", "hparams", ".", "wav_step_size", ",", "640", ")", ":", "\n", "            ", "m", "=", "self", ".", "crop_mels", "(", "i", "-", "1280", ",", "noisy_wav", ")", "# Hard-coded to get 0.2sec segments (5 frames)", "\n", "if", "m", "is", "None", "or", "m", ".", "shape", "[", "0", "]", "!=", "hparams", ".", "hparams", ".", "mel_step_size", ":", "\n", "                ", "return", "None", "\n", "", "mels", ".", "append", "(", "m", ".", "T", ")", "\n", "\n", "", "mels", "=", "np", ".", "asarray", "(", "mels", ")", "# Tx80x16", "\n", "\n", "return", "mels", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.get_spec": [[173, 193], ["numpy.abs", "audio.db_from_amp", "audio.db_from_amp", "audio.db_from_amp", "audio.db_from_amp", "audio.angle", "audio.angle", "audio.angle", "audio.angle", "audio.normalize_mag", "audio.normalize_mag", "audio.normalize_mag", "audio.normalize_mag", "audio.normalize_phase", "audio.normalize_phase", "audio.normalize_phase", "audio.normalize_phase", "numpy.concatenate", "librosa.stft"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.db_from_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.db_from_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.db_from_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.db_from_amp", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.angle", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_mag", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_phase", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_phase", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_phase", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.audio.audio_utils.normalize_phase"], ["", "def", "get_spec", "(", "self", ",", "wav", ")", ":", "\n", "\n", "# Compute STFT using librosa", "\n", "        ", "stft", "=", "librosa", ".", "stft", "(", "y", "=", "wav", ",", "n_fft", "=", "hparams", ".", "hparams", ".", "n_fft_den", ",", "hop_length", "=", "hparams", ".", "hparams", ".", "hop_size_den", ",", "win_length", "=", "hparams", ".", "hparams", ".", "win_size_den", ")", ".", "T", "\n", "stft", "=", "stft", "[", ":", "-", "1", "]", "# Tx257", "\n", "\n", "# Decompose into magnitude and phase representations", "\n", "mag", "=", "np", ".", "abs", "(", "stft", ")", "\n", "mag", "=", "audio", ".", "db_from_amp", "(", "mag", ")", "\n", "phase", "=", "audio", ".", "angle", "(", "stft", ")", "\n", "\n", "# Normalize the magnitude and phase representations", "\n", "norm_mag", "=", "audio", ".", "normalize_mag", "(", "mag", ")", "\n", "norm_phase", "=", "audio", ".", "normalize_phase", "(", "phase", ")", "\n", "\n", "# Concatenate the magnitude and phase representations", "\n", "spec", "=", "np", ".", "concatenate", "(", "(", "norm_mag", ",", "norm_phase", ")", ",", "axis", "=", "1", ")", "# Tx514", "\n", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.DataGenerator.add_noise": [[194, 208], ["len", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.square", "numpy.square", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "add_noise", "(", "self", ",", "gt_wav", ",", "random_wav", ",", "desired_snr", ")", ":", "\n", "\n", "        ", "samples", "=", "len", "(", "gt_wav", ")", "\n", "\n", "signal_power", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "np", ".", "abs", "(", "gt_wav", ")", ")", ")", "/", "samples", "\n", "noise_power", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "np", ".", "abs", "(", "random_wav", ")", ")", ")", "/", "samples", "\n", "\n", "k", "=", "(", "signal_power", "/", "(", "noise_power", "+", "1e-8", ")", ")", "*", "(", "10", "**", "(", "-", "desired_snr", "/", "10", ")", ")", "\n", "\n", "scaled_random_wav", "=", "np", ".", "sqrt", "(", "k", ")", "*", "random_wav", "\n", "\n", "noisy_wav", "=", "gt_wav", "+", "scaled_random_wav", "\n", "\n", "return", "noisy_wav", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.data_loader.load_data": [[210, 217], ["data_loader.DataGenerator", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "load_data", "(", "pretrain_path", ",", "train_path", ",", "noise_path", ",", "num_workers", ",", "batch_size", "=", "4", ",", "split", "=", "'train'", ",", "sampling_rate", "=", "16000", ",", "shuffle", "=", "False", ")", ":", "\n", "\n", "    ", "dataset", "=", "DataGenerator", "(", "pretrain_path", ",", "train_path", ",", "noise_path", ",", "sampling_rate", ",", "split", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "shuffle", "=", "shuffle", ")", "\n", "\n", "return", "data_loader", "", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.scripts.plot_sepc.plot": [[11, 26], ["librosa.stft", "librosa.stft", "print", "numpy.abs", "librosa.display.specshow", "librosa.display.specshow", "matplotlib.title", "matplotlib.colorbar", "matplotlib.tight_layout", "matplotlib.show", "matplotlib.savefig", "matplotlib.clf", "librosa.load", "librosa.load", "librosa.amplitude_to_db", "librosa.amplitude_to_db"], "function", ["None"], ["def", "plot", "(", "file", ",", "fname", ")", ":", "\n", "\n", "\t", "wav", "=", "librosa", ".", "load", "(", "file", ",", "sr", "=", "16000", ")", "[", "0", "]", "\n", "stft", "=", "librosa", ".", "stft", "(", "y", "=", "wav", ",", "n_fft", "=", "hp", ".", "hparams", ".", "n_fft_den", ",", "hop_length", "=", "hp", ".", "hparams", ".", "hop_size_den", ",", "win_length", "=", "hp", ".", "hparams", ".", "win_size_den", ")", "\n", "print", "(", "\"STFT: \"", ",", "stft", ".", "shape", ")", "\n", "\n", "# Display magnitude spectrogram", "\n", "D", "=", "np", ".", "abs", "(", "stft", ")", "\n", "librosa", ".", "display", ".", "specshow", "(", "librosa", ".", "amplitude_to_db", "(", "D", ",", "ref", "=", "np", ".", "max", ")", ",", "y_axis", "=", "'log'", ",", "x_axis", "=", "'time'", ")", "\n", "plt", ".", "title", "(", "'Power spectrogram'", ")", "\n", "plt", ".", "colorbar", "(", "format", "=", "'%+2.0f dB'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "\".jpg\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ConvBlock.__init__": [[14, 32], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.conv3x3", "int", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.conv3x3", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.conv3x3", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.conv3x3"], [")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "\t\t\t", "out", "+=", "x", "\n", "", "return", "self", ".", "act", "(", "out", ")", "\n", "\n", "\n", "", "", "class", "Conv2d", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ConvBlock.forward": [[33, 56], ["models.ConvBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "models.ConvBlock.conv1", "models.ConvBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "models.ConvBlock.conv2", "models.ConvBlock.bn3", "torch.relu", "torch.relu", "torch.relu", "models.ConvBlock.conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.ConvBlock.downsample"], "methods", ["None"], ["self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "\t\t\t", "out", "+=", "x", "\n", "", "return", "self", ".", "act", "(", "out", ")", "\n", "\n", "\n", "", "", "class", "Conv2dTranspose", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", "=", "0", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "cin", ",", "cout", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "cout", ")", "\n", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "self", ".", "act", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.Bottleneck.__init__": [[62, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["self", ".", "audio_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.Bottleneck.forward": [[75, 96], ["models.Bottleneck.conv1", "models.Bottleneck.bn1", "models.Bottleneck.relu", "models.Bottleneck.conv2", "models.Bottleneck.bn2", "models.Bottleneck.relu", "models.Bottleneck.conv3", "models.Bottleneck.bn3", "models.Bottleneck.relu", "models.Bottleneck.downsample"], "methods", ["None"], ["Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", ")", "\n", "\n", "self", ".", "face_decoder_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", ")", ",", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "# 3,3", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 6, 6", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 12, 12", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.HourGlass.__init__": [[99, 106], ["torch.Module.__init__", "models.HourGlass._generate_network"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.HourGlass._generate_network"], ["nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "# 48, 48", "\n", "\n", "nn", ".", "Sequential", "(", "Conv2dTranspose", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "1", ",", "output_padding", "=", "(", "0", ",", "1", ")", ")", ",", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", ")", ",", "]", ")", "# 48,96", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.HourGlass._generate_network": [[107, 118], ["models.HourGlass.add_module", "models.HourGlass.add_module", "models.HourGlass.add_module", "models.ConvBlock", "models.ConvBlock", "models.HourGlass._generate_network", "models.HourGlass.add_module", "models.ConvBlock", "str", "str", "models.ConvBlock", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.HourGlass._generate_network"], ["self", ".", "output_block", "=", "nn", ".", "Sequential", "(", "Conv2d", "(", "32", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "audio_sequences", ")", ":", "\n", "# audio_sequences = (B, T, 1, 80, 16)", "\n", "        ", "B", "=", "audio_sequences", ".", "size", "(", "0", ")", "\n", "\n", "input_dim_size", "=", "len", "(", "audio_sequences", ".", "size", "(", ")", ")", "\n", "if", "input_dim_size", ">", "4", ":", "\n", "            ", "audio_sequences", "=", "torch", ".", "cat", "(", "[", "audio_sequences", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "audio_sequences", ".", "size", "(", "1", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.HourGlass._forward": [[119, 140], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "models.HourGlass._forward", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.HourGlass._forward"], ["", "x", "=", "self", ".", "audio_encoder", "(", "audio_sequences", ")", "# B, 512, 1, 1", "\n", "for", "f", "in", "self", ".", "face_decoder_blocks", ":", "\n", "            ", "x", "=", "f", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "output_block", "(", "x", ")", "\n", "\n", "if", "input_dim_size", ">", "4", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "B", ",", "dim", "=", "0", ")", "# [(B, C, H, W)]", "\n", "outputs", "=", "torch", ".", "stack", "(", "x", ",", "dim", "=", "2", ")", "# (B, C, T, H, W)", "\n", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "x", "\n", "\n", "", "return", "outputs", "\n", "\n", "\n", "\n", "", "", "class", "Model", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.HourGlass.forward": [[141, 143], ["models.HourGlass._forward"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.HourGlass._forward"], ["\n", "self", ".", "audio_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv1d", "(", "514", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.FAN.__init__": [[147, 173], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.ConvBlock", "models.ConvBlock", "models.ConvBlock", "range", "models.FAN.add_module", "models.FAN.add_module", "models.FAN.add_module", "models.FAN.add_module", "models.FAN.add_module", "models.HourGlass", "models.ConvBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.FAN.add_module", "models.FAN.add_module", "str", "str", "str", "str", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "600", ",", "600", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", ")", "\n", "\n", "\n", "self", ".", "face_encoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "2", ")", ",", "# Bx32x25x48x48", "\n", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx64x25x24x24", "\n", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx128x25x12x12", "\n", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx256x25x6x6", "\n", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "1", ")", ",", "# Bx512x25x3x3", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", ",", "# Bx512x25x1x1", "\n", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.FAN.forward": [[174, 202], ["torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "models.FAN.conv3", "models.FAN.conv4", "range", "models.FAN.bn1", "models.FAN.conv2", "torch.relu", "torch.relu", "torch.relu", "outputs.append", "models.FAN.conv1", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["self", ".", "time_upsampler", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "Conv1d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "Conv1d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "Conv1d", "(", "1112", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "Conv1d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "residual", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "1024", ",", "514", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "stft_sequence", ",", "face_sequence", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ResNetDepth.__init__": [[206, 228], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "models.ResNetDepth._make_layer", "models.ResNetDepth._make_layer", "models.ResNetDepth._make_layer", "models.ResNetDepth._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "models.ResNetDepth.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ResNetDepth._make_layer", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ResNetDepth._make_layer", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ResNetDepth._make_layer", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ResNetDepth._make_layer"], ["\t\t", "B", "=", "face_sequence", ".", "size", "(", "0", ")", "\n", "face_sequence", "=", "torch", ".", "cat", "(", "[", "face_sequence", "[", ":", ",", ":", ",", "i", "]", "for", "i", "in", "range", "(", "face_sequence", ".", "size", "(", "2", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "# print(\"Face sequence concatenated: \", face_sequence.size())\t\t# (B*T)x3x48x96", "\n", "\n", "# Face encoder", "\n", "face_enc", "=", "self", ".", "face_encoder", "(", "face_sequence", ")", "# (B*T)x512x1x1", "\n", "face_enc", "=", "torch", ".", "split", "(", "face_enc", ",", "B", ",", "dim", "=", "0", ")", "\n", "face_enc", "=", "torch", ".", "stack", "(", "face_enc", ",", "dim", "=", "2", ")", "# Bx512xTx1x1\t\t\t\t", "\n", "\n", "face_enc", "=", "face_enc", ".", "view", "(", "-", "1", ",", "face_enc", ".", "size", "(", "1", ")", ",", "face_enc", ".", "size", "(", "2", ")", ")", "# Bx512xT", "\n", "\n", "face_output", "=", "self", ".", "time_upsampler", "(", "face_enc", ")", "# Bx512x(T*4)", "\n", "# -------------------------------------------------------------------- #", "\n", "\n", "# -------------------------- Audio ------------------------------- #", "\n", "\n", "# print(\"STFT input: \", stft_sequence.size())\t\t\t\t\t\t# BxTx514", "\n", "\n", "stft_sequence_permuted", "=", "stft_sequence", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# Bx514xT", "\n", "\n", "# Audio encoder", "\n", "audio_enc", "=", "self", ".", "audio_encoder", "(", "stft_sequence_permuted", ")", "# Bx600xT", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ResNetDepth._make_layer": [[229, 245], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["# Concatenate face network output and audio encoder output", "\n", "concatenated", "=", "torch", ".", "cat", "(", "[", "audio_enc", ",", "face_output", "]", ",", "dim", "=", "1", ")", "# Bx1112xT", "\n", "\n", "# Audio decoder", "\n", "dec", "=", "self", ".", "decoder", "(", "concatenated", ")", "# Bx514xT", "\n", "\n", "# Mask", "\n", "mask", "=", "dec", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# BxTx514", "\n", "\n", "# Add the mask with the input noisy spec", "\n", "output", "=", "mask", "+", "stft_sequence", "\n", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "# BxTx514", "\n", "# -------------------------------------------------------------------- #", "\n", "\n", "return", "output", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.ResNetDepth.forward": [[246, 262], ["models.ResNetDepth.conv1", "models.ResNetDepth.bn1", "models.ResNetDepth.relu", "models.ResNetDepth.maxpool", "models.ResNetDepth.layer1", "models.ResNetDepth.layer2", "models.ResNetDepth.layer3", "models.ResNetDepth.layer4", "models.ResNetDepth.avgpool", "models.ResNetDepth.view", "models.ResNetDepth.fc", "models.ResNetDepth.size"], "methods", ["None"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.models.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["class", "Conv1d", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "cin", ",", "cout", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "residual", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.api.NetworkSize.__new__": [[36, 40], ["object.__new__"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.api.NetworkSize.__new__"], ["def", "__new__", "(", "cls", ",", "value", ")", ":", "\n", "        ", "member", "=", "object", ".", "__new__", "(", "cls", ")", "\n", "member", ".", "_value_", "=", "value", "\n", "return", "member", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.api.NetworkSize.__int__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__int__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.api.FaceAlignment.__init__": [[47, 63], ["int", "__import__", "__import__.FaceDetector", "globals", "locals"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "landmarks_type", ",", "network_size", "=", "NetworkSize", ".", "LARGE", ",", "\n", "device", "=", "'cuda'", ",", "flip_input", "=", "False", ",", "face_detector", "=", "'sfd'", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "flip_input", "=", "flip_input", "\n", "self", ".", "landmarks_type", "=", "landmarks_type", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "network_size", "=", "int", "(", "network_size", ")", "\n", "\n", "if", "'cuda'", "in", "device", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Get the face detector", "\n", "", "face_detector_module", "=", "__import__", "(", "'face_detection.detection.'", "+", "face_detector", ",", "\n", "globals", "(", ")", ",", "locals", "(", ")", ",", "[", "face_detector", "]", ",", "0", ")", "\n", "self", ".", "face_detector", "=", "face_detector_module", ".", "FaceDetector", "(", "device", "=", "device", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.api.FaceAlignment.get_detections_for_batch": [[64, 80], ["api.FaceAlignment.face_detector.detect_from_batch", "enumerate", "images.copy", "numpy.clip", "map", "results.append", "len", "results.append"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.sfd_detector.SFDDetector.detect_from_batch"], ["", "def", "get_detections_for_batch", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "images", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "detected_faces", "=", "self", ".", "face_detector", ".", "detect_from_batch", "(", "images", ".", "copy", "(", ")", ")", "\n", "results", "=", "[", "]", "\n", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "detected_faces", ")", ":", "\n", "            ", "if", "len", "(", "d", ")", "==", "0", ":", "\n", "                ", "results", ".", "append", "(", "None", ")", "\n", "continue", "\n", "", "d", "=", "d", "[", "0", "]", "\n", "d", "=", "np", ".", "clip", "(", "d", ",", "0", ",", "None", ")", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "map", "(", "int", ",", "d", "[", ":", "-", "1", "]", ")", "\n", "results", ".", "append", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "", "return", "results", "", "", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils._gaussian": [[11, 35], ["numpy.empty", "range", "range", "numpy.sum", "math.exp", "math.pow", "math.pow"], "function", ["None"], ["def", "_gaussian", "(", "\n", "size", "=", "3", ",", "sigma", "=", "0.25", ",", "amplitude", "=", "1", ",", "normalize", "=", "False", ",", "width", "=", "None", ",", "\n", "height", "=", "None", ",", "sigma_horz", "=", "None", ",", "sigma_vert", "=", "None", ",", "mean_horz", "=", "0.5", ",", "\n", "mean_vert", "=", "0.5", ")", ":", "\n", "# handle some defaults", "\n", "    ", "if", "width", "is", "None", ":", "\n", "        ", "width", "=", "size", "\n", "", "if", "height", "is", "None", ":", "\n", "        ", "height", "=", "size", "\n", "", "if", "sigma_horz", "is", "None", ":", "\n", "        ", "sigma_horz", "=", "sigma", "\n", "", "if", "sigma_vert", "is", "None", ":", "\n", "        ", "sigma_vert", "=", "sigma", "\n", "", "center_x", "=", "mean_horz", "*", "width", "+", "0.5", "\n", "center_y", "=", "mean_vert", "*", "height", "+", "0.5", "\n", "gauss", "=", "np", ".", "empty", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# generate kernel", "\n", "for", "i", "in", "range", "(", "height", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "width", ")", ":", "\n", "            ", "gauss", "[", "i", "]", "[", "j", "]", "=", "amplitude", "*", "math", ".", "exp", "(", "-", "(", "math", ".", "pow", "(", "(", "j", "+", "1", "-", "center_x", ")", "/", "(", "\n", "sigma_horz", "*", "width", ")", ",", "2", ")", "/", "2.0", "+", "math", ".", "pow", "(", "(", "i", "+", "1", "-", "center_y", ")", "/", "(", "sigma_vert", "*", "height", ")", ",", "2", ")", "/", "2.0", ")", ")", "\n", "", "", "if", "normalize", ":", "\n", "        ", "gauss", "=", "gauss", "/", "np", ".", "sum", "(", "gauss", ")", "\n", "", "return", "gauss", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.draw_gaussian": [[37, 54], ["utils._gaussian", "math.floor", "math.floor", "math.floor", "math.floor", "int", "int", "int", "int", "int", "int", "max", "int", "max", "int", "max", "min", "max", "min", "int", "int", "max", "int", "int", "max", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils._gaussian"], ["", "def", "draw_gaussian", "(", "image", ",", "point", ",", "sigma", ")", ":", "\n", "# Check if the gaussian is inside", "\n", "    ", "ul", "=", "[", "math", ".", "floor", "(", "point", "[", "0", "]", "-", "3", "*", "sigma", ")", ",", "math", ".", "floor", "(", "point", "[", "1", "]", "-", "3", "*", "sigma", ")", "]", "\n", "br", "=", "[", "math", ".", "floor", "(", "point", "[", "0", "]", "+", "3", "*", "sigma", ")", ",", "math", ".", "floor", "(", "point", "[", "1", "]", "+", "3", "*", "sigma", ")", "]", "\n", "if", "(", "ul", "[", "0", "]", ">", "image", ".", "shape", "[", "1", "]", "or", "ul", "[", "1", "]", ">", "image", ".", "shape", "[", "0", "]", "or", "br", "[", "0", "]", "<", "1", "or", "br", "[", "1", "]", "<", "1", ")", ":", "\n", "        ", "return", "image", "\n", "", "size", "=", "6", "*", "sigma", "+", "1", "\n", "g", "=", "_gaussian", "(", "size", ")", "\n", "g_x", "=", "[", "int", "(", "max", "(", "1", ",", "-", "ul", "[", "0", "]", ")", ")", ",", "int", "(", "min", "(", "br", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", ")", "-", "int", "(", "max", "(", "1", ",", "ul", "[", "0", "]", ")", ")", "+", "int", "(", "max", "(", "1", ",", "-", "ul", "[", "0", "]", ")", ")", "]", "\n", "g_y", "=", "[", "int", "(", "max", "(", "1", ",", "-", "ul", "[", "1", "]", ")", ")", ",", "int", "(", "min", "(", "br", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "-", "int", "(", "max", "(", "1", ",", "ul", "[", "1", "]", ")", ")", "+", "int", "(", "max", "(", "1", ",", "-", "ul", "[", "1", "]", ")", ")", "]", "\n", "img_x", "=", "[", "int", "(", "max", "(", "1", ",", "ul", "[", "0", "]", ")", ")", ",", "int", "(", "min", "(", "br", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", ")", "]", "\n", "img_y", "=", "[", "int", "(", "max", "(", "1", ",", "ul", "[", "1", "]", ")", ")", ",", "int", "(", "min", "(", "br", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "]", "\n", "assert", "(", "g_x", "[", "0", "]", ">", "0", "and", "g_y", "[", "1", "]", ">", "0", ")", "\n", "image", "[", "img_y", "[", "0", "]", "-", "1", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", "-", "1", ":", "img_x", "[", "1", "]", "\n", "]", "=", "image", "[", "img_y", "[", "0", "]", "-", "1", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", "-", "1", ":", "img_x", "[", "1", "]", "]", "+", "g", "[", "g_y", "[", "0", "]", "-", "1", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", "-", "1", ":", "g_x", "[", "1", "]", "]", "\n", "image", "[", "image", ">", "1", "]", "=", "1", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.transform": [[56, 90], ["torch.ones", "torch.eye", "new_point.int", "torch.inverse", "torch.matmul"], "function", ["None"], ["", "def", "transform", "(", "point", ",", "center", ",", "scale", ",", "resolution", ",", "invert", "=", "False", ")", ":", "\n", "    ", "\"\"\"Generate and affine transformation matrix.\n\n    Given a set of points, a center, a scale and a targer resolution, the\n    function generates and affine transformation matrix. If invert is ``True``\n    it will produce the inverse transformation.\n\n    Arguments:\n        point {torch.tensor} -- the input 2D point\n        center {torch.tensor or numpy.array} -- the center around which to perform the transformations\n        scale {float} -- the scale of the face/object\n        resolution {float} -- the output resolution\n\n    Keyword Arguments:\n        invert {bool} -- define wherever the function should produce the direct or the\n        inverse transformation matrix (default: {False})\n    \"\"\"", "\n", "_pt", "=", "torch", ".", "ones", "(", "3", ")", "\n", "_pt", "[", "0", "]", "=", "point", "[", "0", "]", "\n", "_pt", "[", "1", "]", "=", "point", "[", "1", "]", "\n", "\n", "h", "=", "200.0", "*", "scale", "\n", "t", "=", "torch", ".", "eye", "(", "3", ")", "\n", "t", "[", "0", ",", "0", "]", "=", "resolution", "/", "h", "\n", "t", "[", "1", ",", "1", "]", "=", "resolution", "/", "h", "\n", "t", "[", "0", ",", "2", "]", "=", "resolution", "*", "(", "-", "center", "[", "0", "]", "/", "h", "+", "0.5", ")", "\n", "t", "[", "1", ",", "2", "]", "=", "resolution", "*", "(", "-", "center", "[", "1", "]", "/", "h", "+", "0.5", ")", "\n", "\n", "if", "invert", ":", "\n", "        ", "t", "=", "torch", ".", "inverse", "(", "t", ")", "\n", "\n", "", "new_point", "=", "(", "torch", ".", "matmul", "(", "t", ",", "_pt", ")", ")", "[", "0", ":", "2", "]", "\n", "\n", "return", "new_point", ".", "int", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.crop": [[92, 130], ["utils.transform", "utils.transform", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "cv2.resize", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "max", "max", "max", "min", "max", "min", "min", "min", "int", "int"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.transform", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.transform"], ["", "def", "crop", "(", "image", ",", "center", ",", "scale", ",", "resolution", "=", "256.0", ")", ":", "\n", "    ", "\"\"\"Center crops an image or set of heatmaps\n\n    Arguments:\n        image {numpy.array} -- an rgb image\n        center {numpy.array} -- the center of the object, usually the same as of the bounding box\n        scale {float} -- scale of the face\n\n    Keyword Arguments:\n        resolution {float} -- the size of the output cropped image (default: {256.0})\n\n    Returns:\n        [type] -- [description]\n    \"\"\"", "# Crop around the center point", "\n", "\"\"\" Crops the image around the center. Input is expected to be an np.ndarray \"\"\"", "\n", "ul", "=", "transform", "(", "[", "1", ",", "1", "]", ",", "center", ",", "scale", ",", "resolution", ",", "True", ")", "\n", "br", "=", "transform", "(", "[", "resolution", ",", "resolution", "]", ",", "center", ",", "scale", ",", "resolution", ",", "True", ")", "\n", "# pad = math.ceil(torch.norm((ul - br).float()) / 2.0 - (br[0] - ul[0]) / 2.0)", "\n", "if", "image", ".", "ndim", ">", "2", ":", "\n", "        ", "newDim", "=", "np", ".", "array", "(", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", ",", "\n", "image", ".", "shape", "[", "2", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "newImg", "=", "np", ".", "zeros", "(", "newDim", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "newDim", "=", "np", ".", "array", "(", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "newImg", "=", "np", ".", "zeros", "(", "newDim", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "ht", "=", "image", ".", "shape", "[", "0", "]", "\n", "wd", "=", "image", ".", "shape", "[", "1", "]", "\n", "newX", "=", "np", ".", "array", "(", "\n", "[", "max", "(", "1", ",", "-", "ul", "[", "0", "]", "+", "1", ")", ",", "min", "(", "br", "[", "0", "]", ",", "wd", ")", "-", "ul", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "newY", "=", "np", ".", "array", "(", "\n", "[", "max", "(", "1", ",", "-", "ul", "[", "1", "]", "+", "1", ")", ",", "min", "(", "br", "[", "1", "]", ",", "ht", ")", "-", "ul", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "oldX", "=", "np", ".", "array", "(", "[", "max", "(", "1", ",", "ul", "[", "0", "]", "+", "1", ")", ",", "min", "(", "br", "[", "0", "]", ",", "wd", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "oldY", "=", "np", ".", "array", "(", "[", "max", "(", "1", ",", "ul", "[", "1", "]", "+", "1", ")", ",", "min", "(", "br", "[", "1", "]", ",", "ht", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "newImg", "[", "newY", "[", "0", "]", "-", "1", ":", "newY", "[", "1", "]", ",", "newX", "[", "0", "]", "-", "1", ":", "newX", "[", "1", "]", "\n", "]", "=", "image", "[", "oldY", "[", "0", "]", "-", "1", ":", "oldY", "[", "1", "]", ",", "oldX", "[", "0", "]", "-", "1", ":", "oldX", "[", "1", "]", ",", ":", "]", "\n", "newImg", "=", "cv2", ".", "resize", "(", "newImg", ",", "dsize", "=", "(", "int", "(", "resolution", ")", ",", "int", "(", "resolution", ")", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "return", "newImg", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.get_preds_fromhm": [[132, 171], ["torch.max", "idx.view().repeat().float", "preds[].apply_", "preds[].add_().div_().floor_().add_", "range", "idx.view().repeat().float.add_", "torch.zeros", "hm.view", "idx.view().repeat().float.size", "range", "idx.view().repeat().float.size", "range", "hm.size", "hm.size", "idx.view().repeat", "preds[].add_().div_().floor_", "idx.view().repeat().float.size", "hm.size", "range", "hm.size", "hm.size", "torch.FloatTensor", "preds[].add_", "hm.size", "utils.transform", "idx.view", "hm.size", "preds[].add_().div_", "int", "int", "torch.FloatTensor.sign_().mul_", "hm.size", "idx.size", "idx.size", "hm.size", "preds[].add_", "torch.FloatTensor.sign_"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.transform"], ["", "def", "get_preds_fromhm", "(", "hm", ",", "center", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "    ", "\"\"\"Obtain (x,y) coordinates given a set of N heatmaps. If the center\n    and the scale is provided the function will return the points also in\n    the original coordinate frame.\n\n    Arguments:\n        hm {torch.tensor} -- the predicted heatmaps, of shape [B, N, W, H]\n\n    Keyword Arguments:\n        center {torch.tensor} -- the center of the bounding box (default: {None})\n        scale {float} -- face scale (default: {None})\n    \"\"\"", "\n", "max", ",", "idx", "=", "torch", ".", "max", "(", "\n", "hm", ".", "view", "(", "hm", ".", "size", "(", "0", ")", ",", "hm", ".", "size", "(", "1", ")", ",", "hm", ".", "size", "(", "2", ")", "*", "hm", ".", "size", "(", "3", ")", ")", ",", "2", ")", "\n", "idx", "+=", "1", "\n", "preds", "=", "idx", ".", "view", "(", "idx", ".", "size", "(", "0", ")", ",", "idx", ".", "size", "(", "1", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "preds", "[", "...", ",", "0", "]", ".", "apply_", "(", "lambda", "x", ":", "(", "x", "-", "1", ")", "%", "hm", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "preds", "[", "...", ",", "1", "]", ".", "add_", "(", "-", "1", ")", ".", "div_", "(", "hm", ".", "size", "(", "2", ")", ")", ".", "floor_", "(", ")", ".", "add_", "(", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "preds", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm_", "=", "hm", "[", "i", ",", "j", ",", ":", "]", "\n", "pX", ",", "pY", "=", "int", "(", "preds", "[", "i", ",", "j", ",", "0", "]", ")", "-", "1", ",", "int", "(", "preds", "[", "i", ",", "j", ",", "1", "]", ")", "-", "1", "\n", "if", "pX", ">", "0", "and", "pX", "<", "63", "and", "pY", ">", "0", "and", "pY", "<", "63", ":", "\n", "                ", "diff", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "hm_", "[", "pY", ",", "pX", "+", "1", "]", "-", "hm_", "[", "pY", ",", "pX", "-", "1", "]", ",", "\n", "hm_", "[", "pY", "+", "1", ",", "pX", "]", "-", "hm_", "[", "pY", "-", "1", ",", "pX", "]", "]", ")", "\n", "preds", "[", "i", ",", "j", "]", ".", "add_", "(", "diff", ".", "sign_", "(", ")", ".", "mul_", "(", ".25", ")", ")", "\n", "\n", "", "", "", "preds", ".", "add_", "(", "-", ".5", ")", "\n", "\n", "preds_orig", "=", "torch", ".", "zeros", "(", "preds", ".", "size", "(", ")", ")", "\n", "if", "center", "is", "not", "None", "and", "scale", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "hm", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "hm", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "preds_orig", "[", "i", ",", "j", "]", "=", "transform", "(", "\n", "preds", "[", "i", ",", "j", "]", ",", "center", ",", "scale", ",", "hm", ".", "size", "(", "2", ")", ",", "True", ")", "\n", "\n", "", "", "", "return", "preds", ",", "preds_orig", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.get_preds_fromhm_batch": [[172, 211], ["torch.max", "idx.view().repeat().float", "preds[].apply_", "preds[].add_().div_().floor_().add_", "range", "idx.view().repeat().float.add_", "torch.zeros", "hm.view", "idx.view().repeat().float.size", "range", "idx.view().repeat().float.size", "range", "hm.size", "hm.size", "idx.view().repeat", "preds[].add_().div_().floor_", "idx.view().repeat().float.size", "hm.size", "range", "hm.size", "hm.size", "torch.FloatTensor", "preds[].add_", "hm.size", "utils.transform", "idx.view", "hm.size", "preds[].add_().div_", "int", "int", "torch.FloatTensor.sign_().mul_", "hm.size", "idx.size", "idx.size", "hm.size", "preds[].add_", "torch.FloatTensor.sign_"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.transform"], ["", "def", "get_preds_fromhm_batch", "(", "hm", ",", "centers", "=", "None", ",", "scales", "=", "None", ")", ":", "\n", "    ", "\"\"\"Obtain (x,y) coordinates given a set of N heatmaps. If the centers\n    and the scales is provided the function will return the points also in\n    the original coordinate frame.\n\n    Arguments:\n        hm {torch.tensor} -- the predicted heatmaps, of shape [B, N, W, H]\n\n    Keyword Arguments:\n        centers {torch.tensor} -- the centers of the bounding box (default: {None})\n        scales {float} -- face scales (default: {None})\n    \"\"\"", "\n", "max", ",", "idx", "=", "torch", ".", "max", "(", "\n", "hm", ".", "view", "(", "hm", ".", "size", "(", "0", ")", ",", "hm", ".", "size", "(", "1", ")", ",", "hm", ".", "size", "(", "2", ")", "*", "hm", ".", "size", "(", "3", ")", ")", ",", "2", ")", "\n", "idx", "+=", "1", "\n", "preds", "=", "idx", ".", "view", "(", "idx", ".", "size", "(", "0", ")", ",", "idx", ".", "size", "(", "1", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "preds", "[", "...", ",", "0", "]", ".", "apply_", "(", "lambda", "x", ":", "(", "x", "-", "1", ")", "%", "hm", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "preds", "[", "...", ",", "1", "]", ".", "add_", "(", "-", "1", ")", ".", "div_", "(", "hm", ".", "size", "(", "2", ")", ")", ".", "floor_", "(", ")", ".", "add_", "(", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "preds", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm_", "=", "hm", "[", "i", ",", "j", ",", ":", "]", "\n", "pX", ",", "pY", "=", "int", "(", "preds", "[", "i", ",", "j", ",", "0", "]", ")", "-", "1", ",", "int", "(", "preds", "[", "i", ",", "j", ",", "1", "]", ")", "-", "1", "\n", "if", "pX", ">", "0", "and", "pX", "<", "63", "and", "pY", ">", "0", "and", "pY", "<", "63", ":", "\n", "                ", "diff", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "hm_", "[", "pY", ",", "pX", "+", "1", "]", "-", "hm_", "[", "pY", ",", "pX", "-", "1", "]", ",", "\n", "hm_", "[", "pY", "+", "1", ",", "pX", "]", "-", "hm_", "[", "pY", "-", "1", ",", "pX", "]", "]", ")", "\n", "preds", "[", "i", ",", "j", "]", ".", "add_", "(", "diff", ".", "sign_", "(", ")", ".", "mul_", "(", ".25", ")", ")", "\n", "\n", "", "", "", "preds", ".", "add_", "(", "-", ".5", ")", "\n", "\n", "preds_orig", "=", "torch", ".", "zeros", "(", "preds", ".", "size", "(", ")", ")", "\n", "if", "centers", "is", "not", "None", "and", "scales", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "hm", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "hm", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "preds_orig", "[", "i", ",", "j", "]", "=", "transform", "(", "\n", "preds", "[", "i", ",", "j", "]", ",", "centers", "[", "i", "]", ",", "scales", "[", "i", "]", ",", "hm", ".", "size", "(", "2", ")", ",", "True", ")", "\n", "\n", "", "", "", "return", "preds", ",", "preds_orig", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.shuffle_lr": [[212, 235], ["parts.ndimension"], "function", ["None"], ["", "def", "shuffle_lr", "(", "parts", ",", "pairs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Shuffle the points left-right according to the axis of symmetry\n    of the object.\n\n    Arguments:\n        parts {torch.tensor} -- a 3D or 4D object containing the\n        heatmaps.\n\n    Keyword Arguments:\n        pairs {list of integers} -- [order of the flipped points] (default: {None})\n    \"\"\"", "\n", "if", "pairs", "is", "None", ":", "\n", "        ", "pairs", "=", "[", "16", ",", "15", ",", "14", ",", "13", ",", "12", ",", "11", ",", "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", ",", "0", ",", "\n", "26", ",", "25", ",", "24", ",", "23", ",", "22", ",", "21", ",", "20", ",", "19", ",", "18", ",", "17", ",", "27", ",", "28", ",", "29", ",", "30", ",", "35", ",", "\n", "34", ",", "33", ",", "32", ",", "31", ",", "45", ",", "44", ",", "43", ",", "42", ",", "47", ",", "46", ",", "39", ",", "38", ",", "37", ",", "36", ",", "41", ",", "\n", "40", ",", "54", ",", "53", ",", "52", ",", "51", ",", "50", ",", "49", ",", "48", ",", "59", ",", "58", ",", "57", ",", "56", ",", "55", ",", "64", ",", "63", ",", "\n", "62", ",", "61", ",", "60", ",", "67", ",", "66", ",", "65", "]", "\n", "", "if", "parts", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "        ", "parts", "=", "parts", "[", "pairs", ",", "...", "]", "\n", "", "else", ":", "\n", "        ", "parts", "=", "parts", "[", ":", ",", "pairs", ",", "...", "]", "\n", "\n", "", "return", "parts", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.flip": [[237, 255], ["torch.is_tensor", "torch.from_numpy", "shuffle_lr().flip", "tensor.flip.flip", "utils.shuffle_lr", "tensor.flip.ndimension", "tensor.flip.ndimension"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.flip", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.flip", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.shuffle_lr"], ["", "def", "flip", "(", "tensor", ",", "is_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Flip an image or a set of heatmaps left-right\n\n    Arguments:\n        tensor {numpy.array or torch.tensor} -- [the input image or heatmaps]\n\n    Keyword Arguments:\n        is_label {bool} -- [denote wherever the input is an image or a set of heatmaps ] (default: {False})\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "from_numpy", "(", "tensor", ")", "\n", "\n", "", "if", "is_label", ":", "\n", "        ", "tensor", "=", "shuffle_lr", "(", "tensor", ")", ".", "flip", "(", "tensor", ".", "ndimension", "(", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "tensor", "=", "tensor", ".", "flip", "(", "tensor", ".", "ndimension", "(", ")", "-", "1", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.appdata_dir": [[259, 314], ["os.getenv", "sys.platform.startswith", "getattr", "os.path.expanduser", "sys.platform.startswith", "os.path.abspath", "os.path.abspath", "os.path.isdir", "os.path.join", "os.path.isdir", "os.getenv", "os.getenv", "os.path.join", "os.path.isdir", "os.path.dirname", "os.path.join", "os.path.isdir", "os.mkdir", "open().close", "os.remove", "appname.lstrip", "os.path.join", "open", "os.path.join"], "function", ["None"], ["", "def", "appdata_dir", "(", "appname", "=", "None", ",", "roaming", "=", "False", ")", ":", "\n", "    ", "\"\"\" appdata_dir(appname=None, roaming=False)\n\n    Get the path to the application directory, where applications are allowed\n    to write user specific files (e.g. configurations). For non-user specific\n    data, consider using common_appdata_dir().\n    If appname is given, a subdir is appended (and created if necessary).\n    If roaming is True, will prefer a roaming directory (Windows Vista/7).\n    \"\"\"", "\n", "\n", "# Define default user directory", "\n", "userDir", "=", "os", ".", "getenv", "(", "'FACEALIGNMENT_USERDIR'", ",", "None", ")", "\n", "if", "userDir", "is", "None", ":", "\n", "        ", "userDir", "=", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "userDir", ")", ":", "# pragma: no cover", "\n", "            ", "userDir", "=", "'/var/tmp'", "# issue #54", "\n", "\n", "# Get system app data dir", "\n", "", "", "path", "=", "None", "\n", "if", "sys", ".", "platform", ".", "startswith", "(", "'win'", ")", ":", "\n", "        ", "path1", ",", "path2", "=", "os", ".", "getenv", "(", "'LOCALAPPDATA'", ")", ",", "os", ".", "getenv", "(", "'APPDATA'", ")", "\n", "path", "=", "(", "path2", "or", "path1", ")", "if", "roaming", "else", "(", "path1", "or", "path2", ")", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "'darwin'", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "userDir", ",", "'Library'", ",", "'Application Support'", ")", "\n", "# On Linux and as fallback", "\n", "", "if", "not", "(", "path", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ")", ":", "\n", "        ", "path", "=", "userDir", "\n", "\n", "# Maybe we should store things local to the executable (in case of a", "\n", "# portable distro or a frozen application that wants to be portable)", "\n", "", "prefix", "=", "sys", ".", "prefix", "\n", "if", "getattr", "(", "sys", ",", "'frozen'", ",", "None", ")", ":", "\n", "        ", "prefix", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "sys", ".", "executable", ")", ")", "\n", "", "for", "reldir", "in", "(", "'settings'", ",", "'../settings'", ")", ":", "\n", "        ", "localpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "reldir", ")", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "localpath", ")", ":", "# pragma: no cover", "\n", "            ", "try", ":", "\n", "                ", "open", "(", "os", ".", "path", ".", "join", "(", "localpath", ",", "'test.write'", ")", ",", "'wb'", ")", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "localpath", ",", "'test.write'", ")", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "pass", "# We cannot write in this directory", "\n", "", "else", ":", "\n", "                ", "path", "=", "localpath", "\n", "break", "\n", "\n", "# Get path specific for this app", "\n", "", "", "", "if", "appname", ":", "\n", "        ", "if", "path", "==", "userDir", ":", "\n", "            ", "appname", "=", "'.'", "+", "appname", ".", "lstrip", "(", "'.'", ")", "# Make it a hidden directory", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "appname", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "# pragma: no cover", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n", "# Done", "\n", "", "", "return", "path", "\n", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.detection.core.FaceDetector.__init__": [[18, 31], ["logging.getLogger", "logging.getLogger.warning", "logging.getLogger.error"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "device", ",", "verbose", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "if", "verbose", ":", "\n", "            ", "if", "'cpu'", "in", "device", ":", "\n", "                ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "warning", "(", "\"Detection running on CPU, this may be potentially slow.\"", ")", "\n", "\n", "", "", "if", "'cpu'", "not", "in", "device", "and", "'cuda'", "not", "in", "device", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "logger", ".", "error", "(", "\"Expected values for device are: {cpu, cuda} but got: %s\"", ",", "device", ")", "\n", "", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.detection.core.FaceDetector.detect_from_image": [[32, 53], ["None"], "methods", ["None"], ["", "", "def", "detect_from_image", "(", "self", ",", "tensor_or_path", ")", ":", "\n", "        ", "\"\"\"Detects faces in a given image.\n\n        This function detects the faces present in a provided BGR(usually)\n        image. The input can be either the image itself or the path to it.\n\n        Arguments:\n            tensor_or_path {numpy.ndarray, torch.tensor or string} -- the path\n            to an image or the image itself.\n\n        Example::\n\n            >>> path_to_image = 'data/image_01.jpg'\n            ...   detected_faces = detect_from_image(path_to_image)\n            [A list of bounding boxes (x1, y1, x2, y2)]\n            >>> image = cv2.imread(path_to_image)\n            ...   detected_faces = detect_from_image(image)\n            [A list of bounding boxes (x1, y1, x2, y2)]\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.detection.core.FaceDetector.detect_from_directory": [[54, 102], ["tqdm.tqdm.tqdm", "logging.getLogger", "len", "logging.getLogger.info", "files.extend", "logging.getLogger.info", "logging.getLogger.info", "core.FaceDetector.detect_from_image", "logging.getLogger.info", "logging.getLogger.error", "glob.glob", "len", "logging.getLogger.info", "len"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.sfd_detector.SFDDetector.detect_from_image"], ["", "def", "detect_from_directory", "(", "self", ",", "path", ",", "extensions", "=", "[", "'.jpg'", ",", "'.png'", "]", ",", "recursive", "=", "False", ",", "show_progress_bar", "=", "True", ")", ":", "\n", "        ", "\"\"\"Detects faces from all the images present in a given directory.\n\n        Arguments:\n            path {string} -- a string containing a path that points to the folder containing the images\n\n        Keyword Arguments:\n            extensions {list} -- list of string containing the extensions to be\n            consider in the following format: ``.extension_name`` (default:\n            {['.jpg', '.png']}) recursive {bool} -- option wherever to scan the\n            folder recursively (default: {False}) show_progress_bar {bool} --\n            display a progressbar (default: {True})\n\n        Example:\n        >>> directory = 'data'\n        ...   detected_faces = detect_from_directory(directory)\n        {A dictionary of [lists containing bounding boxes(x1, y1, x2, y2)]}\n\n        \"\"\"", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "", "if", "len", "(", "extensions", ")", "==", "0", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "logger", ".", "error", "(", "\"Expected at list one extension, but none was received.\"", ")", "\n", "", "raise", "ValueError", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "\"Constructing the list of images.\"", ")", "\n", "", "additional_pattern", "=", "'/**/*'", "if", "recursive", "else", "'/*'", "\n", "files", "=", "[", "]", "\n", "for", "extension", "in", "extensions", ":", "\n", "            ", "files", ".", "extend", "(", "glob", ".", "glob", "(", "path", "+", "additional_pattern", "+", "extension", ",", "recursive", "=", "recursive", ")", ")", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "\"Finished searching for images. %s images found\"", ",", "len", "(", "files", ")", ")", "\n", "logger", ".", "info", "(", "\"Preparing to run the detection.\"", ")", "\n", "\n", "", "predictions", "=", "{", "}", "\n", "for", "image_path", "in", "tqdm", "(", "files", ",", "disable", "=", "not", "show_progress_bar", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "logger", ".", "info", "(", "\"Running the face detector on image: %s\"", ",", "image_path", ")", "\n", "", "predictions", "[", "image_path", "]", "=", "self", ".", "detect_from_image", "(", "image_path", ")", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "\"The detector was successfully run on all %s images\"", ",", "len", "(", "files", ")", ")", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.detection.core.FaceDetector.reference_scale": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reference_scale", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.detection.core.FaceDetector.reference_x_shift": [[107, 110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reference_x_shift", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.detection.core.FaceDetector.reference_y_shift": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reference_y_shift", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.detection.core.FaceDetector.tensor_or_path_to_ndarray": [[115, 131], ["isinstance", "torch.is_tensor", "cv2.imread", "isinstance", "cv2.imread", "[].copy", "tensor_or_path.cpu().numpy", "tensor_or_path[].copy", "tensor_or_path.cpu", "tensor_or_path.cpu().numpy", "tensor_or_path.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "tensor_or_path_to_ndarray", "(", "tensor_or_path", ",", "rgb", "=", "True", ")", ":", "\n", "        ", "\"\"\"Convert path (represented as a string) or torch.tensor to a numpy.ndarray\n\n        Arguments:\n            tensor_or_path {numpy.ndarray, torch.tensor or string} -- path to the image, or the image itself\n        \"\"\"", "\n", "if", "isinstance", "(", "tensor_or_path", ",", "str", ")", ":", "\n", "            ", "return", "cv2", ".", "imread", "(", "tensor_or_path", ")", "if", "not", "rgb", "else", "cv2", ".", "imread", "(", "tensor_or_path", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "tensor_or_path", ")", ":", "\n", "# Call cpu in case its coming from cuda", "\n", "            ", "return", "tensor_or_path", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "...", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "if", "not", "rgb", "else", "tensor_or_path", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "tensor_or_path", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "tensor_or_path", "[", "...", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "if", "not", "rgb", "else", "tensor_or_path", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.sfd_detector.SFDDetector.__init__": [[17, 30], ["os.path.join", "core.FaceDetector.__init__", "net_s3fd.s3fd", "sfd_detector.SFDDetector.face_detector.load_state_dict", "sfd_detector.SFDDetector.face_detector.to", "sfd_detector.SFDDetector.face_detector.eval", "os.path.dirname", "os.path.isfile", "torch.utils.model_zoo.load_url", "torch.load", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "path_to_detector", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'s3fd.pth'", ")", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "super", "(", "SFDDetector", ",", "self", ")", ".", "__init__", "(", "device", ",", "verbose", ")", "\n", "\n", "# Initialise the face detector", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_to_detector", ")", ":", "\n", "            ", "model_weights", "=", "load_url", "(", "models_urls", "[", "'s3fd'", "]", ")", "\n", "", "else", ":", "\n", "            ", "model_weights", "=", "torch", ".", "load", "(", "path_to_detector", ")", "\n", "\n", "", "self", ".", "face_detector", "=", "s3fd", "(", ")", "\n", "self", ".", "face_detector", ".", "load_state_dict", "(", "model_weights", ")", "\n", "self", ".", "face_detector", ".", "to", "(", "device", ")", "\n", "self", ".", "face_detector", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.sfd_detector.SFDDetector.detect_from_image": [[31, 40], ["sfd_detector.SFDDetector.tensor_or_path_to_ndarray", "detect.detect.detect", "bbox.nms"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.detection.core.FaceDetector.tensor_or_path_to_ndarray", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.detect.detect", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.nms"], ["", "def", "detect_from_image", "(", "self", ",", "tensor_or_path", ")", ":", "\n", "        ", "image", "=", "self", ".", "tensor_or_path_to_ndarray", "(", "tensor_or_path", ")", "\n", "\n", "bboxlist", "=", "detect", "(", "self", ".", "face_detector", ",", "image", ",", "device", "=", "self", ".", "device", ")", "\n", "keep", "=", "nms", "(", "bboxlist", ",", "0.3", ")", "\n", "bboxlist", "=", "bboxlist", "[", "keep", ",", ":", "]", "\n", "bboxlist", "=", "[", "x", "for", "x", "in", "bboxlist", "if", "x", "[", "-", "1", "]", ">", "0.5", "]", "\n", "\n", "return", "bboxlist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.sfd_detector.SFDDetector.detect_from_batch": [[41, 48], ["detect.detect.batch_detect", "bbox.nms", "range", "enumerate"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.detect.batch_detect", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.nms"], ["", "def", "detect_from_batch", "(", "self", ",", "images", ")", ":", "\n", "        ", "bboxlists", "=", "batch_detect", "(", "self", ".", "face_detector", ",", "images", ",", "device", "=", "self", ".", "device", ")", "\n", "keeps", "=", "[", "nms", "(", "bboxlists", "[", ":", ",", "i", ",", ":", "]", ",", "0.3", ")", "for", "i", "in", "range", "(", "bboxlists", ".", "shape", "[", "1", "]", ")", "]", "\n", "bboxlists", "=", "[", "bboxlists", "[", "keep", ",", "i", ",", ":", "]", "for", "i", ",", "keep", "in", "enumerate", "(", "keeps", ")", "]", "\n", "bboxlists", "=", "[", "[", "x", "for", "x", "in", "bboxlist", "if", "x", "[", "-", "1", "]", ">", "0.5", "]", "for", "bboxlist", "in", "bboxlists", "]", "\n", "\n", "return", "bboxlists", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.sfd_detector.SFDDetector.reference_scale": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reference_scale", "(", "self", ")", ":", "\n", "        ", "return", "195", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.sfd_detector.SFDDetector.reference_x_shift": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reference_x_shift", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.sfd_detector.SFDDetector.reference_y_shift": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "reference_y_shift", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.bboxlog": [[30, 35], ["math.log", "math.log"], "function", ["None"], ["", "", "", "def", "bboxlog", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "axc", ",", "ayc", ",", "aww", ",", "ahh", ")", ":", "\n", "    ", "xc", ",", "yc", ",", "ww", ",", "hh", "=", "(", "x2", "+", "x1", ")", "/", "2", ",", "(", "y2", "+", "y1", ")", "/", "2", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "\n", "dx", ",", "dy", "=", "(", "xc", "-", "axc", ")", "/", "aww", ",", "(", "yc", "-", "ayc", ")", "/", "ahh", "\n", "dw", ",", "dh", "=", "math", ".", "log", "(", "ww", "/", "aww", ")", ",", "math", ".", "log", "(", "hh", "/", "ahh", ")", "\n", "return", "dx", ",", "dy", ",", "dw", ",", "dh", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.bboxloginv": [[37, 42], ["math.exp", "math.exp"], "function", ["None"], ["", "def", "bboxloginv", "(", "dx", ",", "dy", ",", "dw", ",", "dh", ",", "axc", ",", "ayc", ",", "aww", ",", "ahh", ")", ":", "\n", "    ", "xc", ",", "yc", "=", "dx", "*", "aww", "+", "axc", ",", "dy", "*", "ahh", "+", "ayc", "\n", "ww", ",", "hh", "=", "math", ".", "exp", "(", "dw", ")", "*", "aww", ",", "math", ".", "exp", "(", "dh", ")", "*", "ahh", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "xc", "-", "ww", "/", "2", ",", "xc", "+", "ww", "/", "2", ",", "yc", "-", "hh", "/", "2", ",", "yc", "+", "hh", "/", "2", "\n", "return", "x1", ",", "y1", ",", "x2", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.nms": [[44, 65], ["len", "scores.argsort", "keep.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "nms", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "if", "0", "==", "len", "(", "dets", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "scores", "=", "dets", "[", ":", ",", "0", "]", ",", "dets", "[", ":", ",", "1", "]", ",", "dets", "[", ":", ",", "2", "]", ",", "dets", "[", ":", ",", "3", "]", ",", "dets", "[", ":", ",", "4", "]", "\n", "areas", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "xx1", ",", "yy1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", "1", ":", "]", "]", ")", ",", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "xx2", ",", "yy2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", "1", ":", "]", "]", ")", ",", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "\n", "w", ",", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", ",", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "ovr", "=", "w", "*", "h", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "w", "*", "h", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.encode": [[67, 89], ["torch.cat", "torch.log"], "function", ["None"], ["", "def", "encode", "(", "matched", ",", "priors", ",", "variances", ")", ":", "\n", "    ", "\"\"\"Encode the variances from the priorbox layers into the ground truth boxes\n    we have matched (based on jaccard overlap) with the prior boxes.\n    Args:\n        matched: (tensor) Coords of ground truth for each prior in point-form\n            Shape: [num_priors, 4].\n        priors: (tensor) Prior boxes in center-offset form\n            Shape: [num_priors,4].\n        variances: (list[float]) Variances of priorboxes\n    Return:\n        encoded boxes (tensor), Shape: [num_priors, 4]\n    \"\"\"", "\n", "\n", "# dist b/t match center and prior's center", "\n", "g_cxcy", "=", "(", "matched", "[", ":", ",", ":", "2", "]", "+", "matched", "[", ":", ",", "2", ":", "]", ")", "/", "2", "-", "priors", "[", ":", ",", ":", "2", "]", "\n", "# encode variance", "\n", "g_cxcy", "/=", "(", "variances", "[", "0", "]", "*", "priors", "[", ":", ",", "2", ":", "]", ")", "\n", "# match wh / prior wh", "\n", "g_wh", "=", "(", "matched", "[", ":", ",", "2", ":", "]", "-", "matched", "[", ":", ",", ":", "2", "]", ")", "/", "priors", "[", ":", ",", "2", ":", "]", "\n", "g_wh", "=", "torch", ".", "log", "(", "g_wh", ")", "/", "variances", "[", "1", "]", "\n", "# return target for smooth_l1_loss", "\n", "return", "torch", ".", "cat", "(", "[", "g_cxcy", ",", "g_wh", "]", ",", "1", ")", "# [num_priors,4]", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.decode": [[91, 110], ["torch.cat", "torch.exp"], "function", ["None"], ["", "def", "decode", "(", "loc", ",", "priors", ",", "variances", ")", ":", "\n", "    ", "\"\"\"Decode locations from predictions using priors to undo\n    the encoding we did for offset regression at train time.\n    Args:\n        loc (tensor): location predictions for loc layers,\n            Shape: [num_priors,4]\n        priors (tensor): Prior boxes in center-offset form.\n            Shape: [num_priors,4].\n        variances: (list[float]) Variances of priorboxes\n    Return:\n        decoded bounding box predictions\n    \"\"\"", "\n", "\n", "boxes", "=", "torch", ".", "cat", "(", "(", "\n", "priors", "[", ":", ",", ":", "2", "]", "+", "loc", "[", ":", ",", ":", "2", "]", "*", "variances", "[", "0", "]", "*", "priors", "[", ":", ",", "2", ":", "]", ",", "\n", "priors", "[", ":", ",", "2", ":", "]", "*", "torch", ".", "exp", "(", "loc", "[", ":", ",", "2", ":", "]", "*", "variances", "[", "1", "]", ")", ")", ",", "1", ")", "\n", "boxes", "[", ":", ",", ":", "2", "]", "-=", "boxes", "[", ":", ",", "2", ":", "]", "/", "2", "\n", "boxes", "[", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.batch_decode": [[111, 130], ["torch.cat", "torch.exp"], "function", ["None"], ["", "def", "batch_decode", "(", "loc", ",", "priors", ",", "variances", ")", ":", "\n", "    ", "\"\"\"Decode locations from predictions using priors to undo\n    the encoding we did for offset regression at train time.\n    Args:\n        loc (tensor): location predictions for loc layers,\n            Shape: [num_priors,4]\n        priors (tensor): Prior boxes in center-offset form.\n            Shape: [num_priors,4].\n        variances: (list[float]) Variances of priorboxes\n    Return:\n        decoded bounding box predictions\n    \"\"\"", "\n", "\n", "boxes", "=", "torch", ".", "cat", "(", "(", "\n", "priors", "[", ":", ",", ":", ",", ":", "2", "]", "+", "loc", "[", ":", ",", ":", ",", ":", "2", "]", "*", "variances", "[", "0", "]", "*", "priors", "[", ":", ",", ":", ",", "2", ":", "]", ",", "\n", "priors", "[", ":", ",", ":", ",", "2", ":", "]", "*", "torch", ".", "exp", "(", "loc", "[", ":", ",", ":", ",", "2", ":", "]", "*", "variances", "[", "1", "]", ")", ")", ",", "2", ")", "\n", "boxes", "[", ":", ",", ":", ",", ":", "2", "]", "-=", "boxes", "[", ":", ",", ":", ",", "2", ":", "]", "/", "2", "\n", "boxes", "[", ":", ",", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "return", "boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.L2Norm.__init__": [[7, 15], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "L2Norm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "eps", "=", "1e-10", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_channels", ")", ")", "\n", "self", ".", "weight", ".", "data", "*=", "0.0", "\n", "self", ".", "weight", ".", "data", "+=", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.L2Norm.forward": [[16, 20], ["x.pow().sum().sqrt", "net_s3fd.L2Norm.weight.view", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "self", ".", "eps", "\n", "x", "=", "x", "/", "norm", "*", "self", ".", "weight", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__": [[23, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "net_s3fd.L2Norm", "net_s3fd.L2Norm", "net_s3fd.L2Norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "s3fd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "3", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "conv6_1", "=", "nn", ".", "Conv2d", "(", "1024", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv6_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv7_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv7_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv3_3_norm", "=", "L2Norm", "(", "256", ",", "scale", "=", "10", ")", "\n", "self", ".", "conv4_3_norm", "=", "L2Norm", "(", "512", ",", "scale", "=", "8", ")", "\n", "self", ".", "conv5_3_norm", "=", "L2Norm", "(", "512", ",", "scale", "=", "5", ")", "\n", "\n", "self", ".", "conv3_3_norm_mbox_conf", "=", "nn", ".", "Conv2d", "(", "256", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_3_norm_mbox_loc", "=", "nn", ".", "Conv2d", "(", "256", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_3_norm_mbox_conf", "=", "nn", ".", "Conv2d", "(", "512", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4_3_norm_mbox_loc", "=", "nn", ".", "Conv2d", "(", "512", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_3_norm_mbox_conf", "=", "nn", ".", "Conv2d", "(", "512", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5_3_norm_mbox_loc", "=", "nn", ".", "Conv2d", "(", "512", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "fc7_mbox_conf", "=", "nn", ".", "Conv2d", "(", "1024", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "fc7_mbox_loc", "=", "nn", ".", "Conv2d", "(", "1024", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv6_2_mbox_conf", "=", "nn", ".", "Conv2d", "(", "512", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv6_2_mbox_loc", "=", "nn", ".", "Conv2d", "(", "512", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv7_2_mbox_conf", "=", "nn", ".", "Conv2d", "(", "256", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv7_2_mbox_loc", "=", "nn", ".", "Conv2d", "(", "256", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.net_s3fd.s3fd.forward": [[70, 130], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "net_s3fd.s3fd.conv3_3_norm", "net_s3fd.s3fd.conv4_3_norm", "net_s3fd.s3fd.conv5_3_norm", "net_s3fd.s3fd.conv3_3_norm_mbox_conf", "net_s3fd.s3fd.conv3_3_norm_mbox_loc", "net_s3fd.s3fd.conv4_3_norm_mbox_conf", "net_s3fd.s3fd.conv4_3_norm_mbox_loc", "net_s3fd.s3fd.conv5_3_norm_mbox_conf", "net_s3fd.s3fd.conv5_3_norm_mbox_loc", "net_s3fd.s3fd.fc7_mbox_conf", "net_s3fd.s3fd.fc7_mbox_loc", "net_s3fd.s3fd.conv6_2_mbox_conf", "net_s3fd.s3fd.conv6_2_mbox_loc", "net_s3fd.s3fd.conv7_2_mbox_conf", "net_s3fd.s3fd.conv7_2_mbox_loc", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_s3fd.s3fd.conv1_1", "net_s3fd.s3fd.conv1_2", "net_s3fd.s3fd.conv2_1", "net_s3fd.s3fd.conv2_2", "net_s3fd.s3fd.conv3_1", "net_s3fd.s3fd.conv3_2", "net_s3fd.s3fd.conv3_3", "net_s3fd.s3fd.conv4_1", "net_s3fd.s3fd.conv4_2", "net_s3fd.s3fd.conv4_3", "net_s3fd.s3fd.conv5_1", "net_s3fd.s3fd.conv5_2", "net_s3fd.s3fd.conv5_3", "net_s3fd.s3fd.fc6", "net_s3fd.s3fd.fc7", "net_s3fd.s3fd.conv6_1", "net_s3fd.s3fd.conv6_2", "net_s3fd.s3fd.conv7_1", "net_s3fd.s3fd.conv7_2", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "conv1_1", "(", "x", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv1_2", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "2", ",", "2", ")", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv2_1", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv2_2", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "2", ",", "2", ")", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv3_1", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv3_2", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv3_3", "(", "h", ")", ")", "\n", "f3_3", "=", "h", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "2", ",", "2", ")", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv4_1", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv4_2", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv4_3", "(", "h", ")", ")", "\n", "f4_3", "=", "h", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "2", ",", "2", ")", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv5_1", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv5_2", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv5_3", "(", "h", ")", ")", "\n", "f5_3", "=", "h", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "2", ",", "2", ")", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "h", ")", ")", "\n", "ffc7", "=", "h", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv6_1", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv6_2", "(", "h", ")", ")", "\n", "f6_2", "=", "h", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv7_1", "(", "h", ")", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "conv7_2", "(", "h", ")", ")", "\n", "f7_2", "=", "h", "\n", "\n", "f3_3", "=", "self", ".", "conv3_3_norm", "(", "f3_3", ")", "\n", "f4_3", "=", "self", ".", "conv4_3_norm", "(", "f4_3", ")", "\n", "f5_3", "=", "self", ".", "conv5_3_norm", "(", "f5_3", ")", "\n", "\n", "cls1", "=", "self", ".", "conv3_3_norm_mbox_conf", "(", "f3_3", ")", "\n", "reg1", "=", "self", ".", "conv3_3_norm_mbox_loc", "(", "f3_3", ")", "\n", "cls2", "=", "self", ".", "conv4_3_norm_mbox_conf", "(", "f4_3", ")", "\n", "reg2", "=", "self", ".", "conv4_3_norm_mbox_loc", "(", "f4_3", ")", "\n", "cls3", "=", "self", ".", "conv5_3_norm_mbox_conf", "(", "f5_3", ")", "\n", "reg3", "=", "self", ".", "conv5_3_norm_mbox_loc", "(", "f5_3", ")", "\n", "cls4", "=", "self", ".", "fc7_mbox_conf", "(", "ffc7", ")", "\n", "reg4", "=", "self", ".", "fc7_mbox_loc", "(", "ffc7", ")", "\n", "cls5", "=", "self", ".", "conv6_2_mbox_conf", "(", "f6_2", ")", "\n", "reg5", "=", "self", ".", "conv6_2_mbox_loc", "(", "f6_2", ")", "\n", "cls6", "=", "self", ".", "conv7_2_mbox_conf", "(", "f7_2", ")", "\n", "reg6", "=", "self", ".", "conv7_2_mbox_loc", "(", "f7_2", ")", "\n", "\n", "# max-out background label", "\n", "chunk", "=", "torch", ".", "chunk", "(", "cls1", ",", "4", ",", "1", ")", "\n", "bmax", "=", "torch", ".", "max", "(", "torch", ".", "max", "(", "chunk", "[", "0", "]", ",", "chunk", "[", "1", "]", ")", ",", "chunk", "[", "2", "]", ")", "\n", "cls1", "=", "torch", ".", "cat", "(", "[", "bmax", ",", "chunk", "[", "3", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "[", "cls1", ",", "reg1", ",", "cls2", ",", "reg2", ",", "cls3", ",", "reg3", ",", "cls4", ",", "reg4", ",", "cls5", ",", "reg5", ",", "cls6", ",", "reg6", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.detect.detect": [[19, 57], ["torch.from_numpy().float().to.transpose", "torch.from_numpy().float().to.reshape", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to.size", "range", "range", "numpy.array", "numpy.array", "torch.no_grad", "torch.no_grad", "net", "torch.softmax", "oelem.data.cpu", "ocls.size", "zip", "len", "numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "len", "len", "oreg[].contiguous().view", "torch.Tensor", "torch.Tensor", "bbox.decode", "np.zeros.append", "numpy.where", "torch.from_numpy", "torch.from_numpy", "oreg[].contiguous"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.decode"], ["def", "detect", "(", "net", ",", "img", ",", "device", ")", ":", "\n", "    ", "img", "=", "img", "-", "np", ".", "array", "(", "[", "104", ",", "117", ",", "123", "]", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "img", ".", "reshape", "(", "(", "1", ",", ")", "+", "img", ".", "shape", ")", "\n", "\n", "if", "'cuda'", "in", "device", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "BB", ",", "CC", ",", "HH", ",", "WW", "=", "img", ".", "size", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "olist", "=", "net", "(", "img", ")", "\n", "\n", "", "bboxlist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "olist", ")", "//", "2", ")", ":", "\n", "        ", "olist", "[", "i", "*", "2", "]", "=", "F", ".", "softmax", "(", "olist", "[", "i", "*", "2", "]", ",", "dim", "=", "1", ")", "\n", "", "olist", "=", "[", "oelem", ".", "data", ".", "cpu", "(", ")", "for", "oelem", "in", "olist", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "olist", ")", "//", "2", ")", ":", "\n", "        ", "ocls", ",", "oreg", "=", "olist", "[", "i", "*", "2", "]", ",", "olist", "[", "i", "*", "2", "+", "1", "]", "\n", "FB", ",", "FC", ",", "FH", ",", "FW", "=", "ocls", ".", "size", "(", ")", "# feature map size", "\n", "stride", "=", "2", "**", "(", "i", "+", "2", ")", "# 4,8,16,32,64,128", "\n", "anchor", "=", "stride", "*", "4", "\n", "poss", "=", "zip", "(", "*", "np", ".", "where", "(", "ocls", "[", ":", ",", "1", ",", ":", ",", ":", "]", ">", "0.05", ")", ")", "\n", "for", "Iindex", ",", "hindex", ",", "windex", "in", "poss", ":", "\n", "            ", "axc", ",", "ayc", "=", "stride", "/", "2", "+", "windex", "*", "stride", ",", "stride", "/", "2", "+", "hindex", "*", "stride", "\n", "score", "=", "ocls", "[", "0", ",", "1", ",", "hindex", ",", "windex", "]", "\n", "loc", "=", "oreg", "[", "0", ",", ":", ",", "hindex", ",", "windex", "]", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "4", ")", "\n", "priors", "=", "torch", ".", "Tensor", "(", "[", "[", "axc", "/", "1.0", ",", "ayc", "/", "1.0", ",", "stride", "*", "4", "/", "1.0", ",", "stride", "*", "4", "/", "1.0", "]", "]", ")", "\n", "variances", "=", "[", "0.1", ",", "0.2", "]", "\n", "box", "=", "decode", "(", "loc", ",", "priors", ",", "variances", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "box", "[", "0", "]", "*", "1.0", "\n", "# cv2.rectangle(imgshow,(int(x1),int(y1)),(int(x2),int(y2)),(0,0,255),1)", "\n", "bboxlist", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "score", "]", ")", "\n", "", "", "bboxlist", "=", "np", ".", "array", "(", "bboxlist", ")", "\n", "if", "0", "==", "len", "(", "bboxlist", ")", ":", "\n", "        ", "bboxlist", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", ")", ")", "\n", "\n", "", "return", "bboxlist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.detect.batch_detect": [[58, 95], ["torch.from_numpy().float().to.transpose", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to.size", "range", "range", "numpy.array", "numpy.array", "torch.no_grad", "torch.no_grad", "net", "torch.softmax", "oelem.data.cpu", "ocls.size", "zip", "len", "numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "len", "len", "oreg[].contiguous().view", "torch.Tensor().view", "torch.Tensor().view", "bbox.batch_decode", "np.zeros.append", "numpy.where", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "oreg[].contiguous", "torch.Tensor", "torch.Tensor", "torch.cat().cpu", "torch.cat().cpu", "torch.cat", "torch.cat", "score.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.bbox.batch_decode"], ["", "def", "batch_detect", "(", "net", ",", "imgs", ",", "device", ")", ":", "\n", "    ", "imgs", "=", "imgs", "-", "np", ".", "array", "(", "[", "104", ",", "117", ",", "123", "]", ")", "\n", "imgs", "=", "imgs", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "if", "'cuda'", "in", "device", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "imgs", "=", "torch", ".", "from_numpy", "(", "imgs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "BB", ",", "CC", ",", "HH", ",", "WW", "=", "imgs", ".", "size", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "olist", "=", "net", "(", "imgs", ")", "\n", "\n", "", "bboxlist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "olist", ")", "//", "2", ")", ":", "\n", "        ", "olist", "[", "i", "*", "2", "]", "=", "F", ".", "softmax", "(", "olist", "[", "i", "*", "2", "]", ",", "dim", "=", "1", ")", "\n", "", "olist", "=", "[", "oelem", ".", "data", ".", "cpu", "(", ")", "for", "oelem", "in", "olist", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "olist", ")", "//", "2", ")", ":", "\n", "        ", "ocls", ",", "oreg", "=", "olist", "[", "i", "*", "2", "]", ",", "olist", "[", "i", "*", "2", "+", "1", "]", "\n", "FB", ",", "FC", ",", "FH", ",", "FW", "=", "ocls", ".", "size", "(", ")", "# feature map size", "\n", "stride", "=", "2", "**", "(", "i", "+", "2", ")", "# 4,8,16,32,64,128", "\n", "anchor", "=", "stride", "*", "4", "\n", "poss", "=", "zip", "(", "*", "np", ".", "where", "(", "ocls", "[", ":", ",", "1", ",", ":", ",", ":", "]", ">", "0.05", ")", ")", "\n", "for", "Iindex", ",", "hindex", ",", "windex", "in", "poss", ":", "\n", "            ", "axc", ",", "ayc", "=", "stride", "/", "2", "+", "windex", "*", "stride", ",", "stride", "/", "2", "+", "hindex", "*", "stride", "\n", "score", "=", "ocls", "[", ":", ",", "1", ",", "hindex", ",", "windex", "]", "\n", "loc", "=", "oreg", "[", ":", ",", ":", ",", "hindex", ",", "windex", "]", ".", "contiguous", "(", ")", ".", "view", "(", "BB", ",", "1", ",", "4", ")", "\n", "priors", "=", "torch", ".", "Tensor", "(", "[", "[", "axc", "/", "1.0", ",", "ayc", "/", "1.0", ",", "stride", "*", "4", "/", "1.0", ",", "stride", "*", "4", "/", "1.0", "]", "]", ")", ".", "view", "(", "1", ",", "1", ",", "4", ")", "\n", "variances", "=", "[", "0.1", ",", "0.2", "]", "\n", "box", "=", "batch_decode", "(", "loc", ",", "priors", ",", "variances", ")", "\n", "box", "=", "box", "[", ":", ",", "0", "]", "*", "1.0", "\n", "# cv2.rectangle(imgshow,(int(x1),int(y1)),(int(x2),int(y2)),(0,0,255),1)", "\n", "bboxlist", ".", "append", "(", "torch", ".", "cat", "(", "[", "box", ",", "score", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "bboxlist", "=", "np", ".", "array", "(", "bboxlist", ")", "\n", "if", "0", "==", "len", "(", "bboxlist", ")", ":", "\n", "        ", "bboxlist", "=", "np", ".", "zeros", "(", "(", "1", ",", "BB", ",", "5", ")", ")", "\n", "\n", "", "return", "bboxlist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.detect.flip_detect": [[96, 107], ["cv2.flip", "detect.detect", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.face_detection.utils.flip", "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.detect.detect"], ["", "def", "flip_detect", "(", "net", ",", "img", ",", "device", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "b", "=", "detect", "(", "net", ",", "img", ",", "device", ")", "\n", "\n", "bboxlist", "=", "np", ".", "zeros", "(", "b", ".", "shape", ")", "\n", "bboxlist", "[", ":", ",", "0", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "b", "[", ":", ",", "2", "]", "\n", "bboxlist", "[", ":", ",", "1", "]", "=", "b", "[", ":", ",", "1", "]", "\n", "bboxlist", "[", ":", ",", "2", "]", "=", "img", ".", "shape", "[", "1", "]", "-", "b", "[", ":", ",", "0", "]", "\n", "bboxlist", "[", ":", ",", "3", "]", "=", "b", "[", ":", ",", "3", "]", "\n", "bboxlist", "[", ":", ",", "4", "]", "=", "b", "[", ":", ",", "4", "]", "\n", "return", "bboxlist", "\n", "\n"]], "home.repos.pwc.inspect_result.Sindhu-Hegde_pseudo-visual-speech-denoising.sfd.detect.pts_to_bb": [[109, 113], ["numpy.min", "numpy.max", "numpy.array"], "function", ["None"], ["", "def", "pts_to_bb", "(", "pts", ")", ":", "\n", "    ", "min_x", ",", "min_y", "=", "np", ".", "min", "(", "pts", ",", "axis", "=", "0", ")", "\n", "max_x", ",", "max_y", "=", "np", ".", "max", "(", "pts", ",", "axis", "=", "0", ")", "\n", "return", "np", ".", "array", "(", "[", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "]", ")", "\n", "", ""]]}