{"home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.data_sequence.__init__": [[106, 124], ["image_name[].lower", "load_data.data_sequence.train_T.append", "image_name[].lower", "load_data.data_sequence.train_S1.append", "image_name[].lower", "load_data.data_sequence.train_S2.append", "image_name[].lower", "load_data.data_sequence.train_S3.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trainT_path", ",", "trainS1_path", ",", "trainS2_path", ",", "trainS3_path", ",", "image_list_T", ",", "image_list_S1", ",", "image_list_S2", ",", "image_list_S3", ",", "batch_size", "=", "1", ")", ":", "# , D_model, use_multiscale_discriminator, use_supervised_learning, REAL_LABEL):", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "train_T", "=", "[", "]", "\n", "self", ".", "train_S1", "=", "[", "]", "\n", "self", ".", "train_S2", "=", "[", "]", "\n", "self", ".", "train_S3", "=", "[", "]", "\n", "for", "image_name", "in", "image_list_T", ":", "\n", "            ", "if", "image_name", "[", "-", "1", "]", ".", "lower", "(", ")", "==", "'g'", ":", "# to avoid e.g. thumbs.db files", "\n", "                ", "self", ".", "train_T", ".", "append", "(", "os", ".", "path", ".", "join", "(", "trainT_path", ",", "image_name", ")", ")", "\n", "", "", "for", "image_name", "in", "image_list_S1", ":", "\n", "            ", "if", "image_name", "[", "-", "1", "]", ".", "lower", "(", ")", "==", "'g'", ":", "# to avoid e.g. thumbs.db files", "\n", "                ", "self", ".", "train_S1", ".", "append", "(", "os", ".", "path", ".", "join", "(", "trainS1_path", ",", "image_name", ")", ")", "\n", "", "", "for", "image_name", "in", "image_list_S2", ":", "\n", "            ", "if", "image_name", "[", "-", "1", "]", ".", "lower", "(", ")", "==", "'g'", ":", "# to avoid e.g. thumbs.db files", "\n", "                ", "self", ".", "train_S2", ".", "append", "(", "os", ".", "path", ".", "join", "(", "trainS2_path", ",", "image_name", ")", ")", "\n", "", "", "for", "image_name", "in", "image_list_S3", ":", "\n", "            ", "if", "image_name", "[", "-", "1", "]", ".", "lower", "(", ")", "==", "'g'", ":", "# to avoid e.g. thumbs.db files", "\n", "                ", "self", ".", "train_S3", ".", "append", "(", "os", ".", "path", ".", "join", "(", "trainS3_path", ",", "image_name", ")", ")", "\n", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.data_sequence.__len__": [[124, 126], ["int", "max", "float", "len", "len", "len", "len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "max", "(", "len", "(", "self", ".", "train_T", ")", ",", "len", "(", "self", ".", "train_S1", ")", ",", "len", "(", "self", ".", "train_S2", ")", ",", "len", "(", "self", ".", "train_S3", ")", ")", "/", "float", "(", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.data_sequence.__getitem__": [[127, 153], ["load_data.create_image_array", "load_data.create_image_array", "load_data.create_image_array", "load_data.create_image_array"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "# , use_multiscale_discriminator, use_supervised_learning):if loop_index + batch_size >= min_nr_imgs:", "\n", "#        if idx >= min(len(self.train_A), len(self.train_B)):", "\n", "#            # If all images soon are used for one domain,", "\n", "#            # randomly pick from this domain", "\n", "#            if len(self.train_A) <= len(self.train_B):", "\n", "#                indexes_A = np.random.randint(len(self.train_A), size=self.batch_size)", "\n", "#                batch_A = []", "\n", "#                for i in indexes_A:", "\n", "#                    batch_A.append(self.train_A[i])", "\n", "#                batch_B = self.train_B[idx * self.batch_size:(idx + 1) * self.batch_size]", "\n", "#            else:", "\n", "#                indexes_B = np.random.randint(len(self.train_B), size=self.batch_size)", "\n", "#                batch_B = []", "\n", "#                for i in indexes_B:", "\n", "#                    batch_B.append(self.train_B[i])", "\n", "#                batch_A = self.train_A[idx * self.batch_size:(idx + 1) * self.batch_size]", "\n", "#        else:", "\n", "        ", "batch_T", "=", "self", ".", "train_T", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch_S1", "=", "self", ".", "train_S1", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch_S2", "=", "self", ".", "train_S2", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch_S3", "=", "self", ".", "train_S3", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "real_images_T", "=", "create_image_array", "(", "batch_T", ",", "''", ",", "3", ")", "\n", "real_images_S1", "=", "create_image_array", "(", "batch_S1", ",", "''", ",", "3", ")", "\n", "real_images_S2", "=", "create_image_array", "(", "batch_S2", ",", "''", ",", "3", ")", "\n", "real_images_S3", "=", "create_image_array", "(", "batch_S3", ",", "''", ",", "3", ")", "\n", "return", "real_images_T", ",", "real_images_S1", ",", "real_images_S2", ",", "real_images_S3", "# input_data, target_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.load_data": [[8, 79], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "load_data.data_sequence", "load_data.create_image_array", "load_data.create_image_array", "load_data.create_image_array", "load_data.create_image_array", "load_data.create_image_array", "load_data.create_image_array", "load_data.create_image_array", "load_data.create_image_array"], "function", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array"], ["def", "load_data", "(", "nr_of_channels", ",", "batch_size", "=", "1", ",", "nr_target_train_imgs", "=", "None", ",", "nr_S1_train_imgs", "=", "None", ",", "nr_S2_train_imgs", "=", "None", ",", "nr_S3_train_imgs", "=", "None", ",", "\n", "nr_target_test_imgs", "=", "None", ",", "nr_S1_test_imgs", "=", "None", ",", "nr_S2_test_imgs", "=", "None", ",", "nr_S3_test_imgs", "=", "None", ",", "subfolder", "=", "''", ",", "\n", "generator", "=", "False", ",", "D_model", "=", "None", ",", "use_multiscale_discriminator", "=", "False", ",", "use_supervised_learning", "=", "False", ",", "REAL_LABEL", "=", "1.0", ")", ":", "\n", "\n", "    ", "trainT_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "subfolder", ",", "'trainT'", ")", "\n", "trainS1_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "subfolder", ",", "'trainS1'", ")", "\n", "trainS2_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "subfolder", ",", "'trainS2'", ")", "\n", "trainS3_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "subfolder", ",", "'trainS3'", ")", "\n", "testT_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "subfolder", ",", "'testT'", ")", "\n", "testS1_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "subfolder", ",", "'testS1'", ")", "\n", "testS2_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "subfolder", ",", "'testS2'", ")", "\n", "testS3_path", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "subfolder", ",", "'testS3'", ")", "\n", "trainT_image_names", "=", "os", ".", "listdir", "(", "trainT_path", ")", "\n", "if", "nr_target_train_imgs", "!=", "None", ":", "\n", "        ", "trainT_image_names", "=", "trainT_image_names", "[", ":", "nr_target_train_imgs", "]", "\n", "\n", "", "trainS1_image_names", "=", "os", ".", "listdir", "(", "trainS1_path", ")", "\n", "if", "nr_S1_train_imgs", "!=", "None", ":", "\n", "        ", "trainS1_image_names", "=", "trainS1_image_names", "[", ":", "nr_S1_train_imgs", "]", "\n", "\n", "", "trainS2_image_names", "=", "os", ".", "listdir", "(", "trainS2_path", ")", "\n", "if", "nr_S2_train_imgs", "!=", "None", ":", "\n", "        ", "trainS2_image_names", "=", "trainS2_image_names", "[", ":", "nr_S2_train_imgs", "]", "\n", "\n", "", "trainS3_image_names", "=", "os", ".", "listdir", "(", "trainS3_path", ")", "\n", "if", "nr_S3_train_imgs", "!=", "None", ":", "\n", "        ", "trainS3_image_names", "=", "trainS3_image_names", "[", ":", "nr_S3_train_imgs", "]", "\n", "\n", "", "testT_image_names", "=", "os", ".", "listdir", "(", "testT_path", ")", "\n", "if", "nr_target_test_imgs", "!=", "None", ":", "\n", "        ", "testT_image_names", "=", "testT_image_names", "[", ":", "nr_target_test_imgs", "]", "\n", "\n", "", "testS1_image_names", "=", "os", ".", "listdir", "(", "testS1_path", ")", "\n", "if", "nr_S1_test_imgs", "!=", "None", ":", "\n", "        ", "testS1_image_names", "=", "testS1_image_names", "[", ":", "nr_S1_test_imgs", "]", "\n", "\n", "", "testS2_image_names", "=", "os", ".", "listdir", "(", "testS2_path", ")", "\n", "if", "nr_S2_test_imgs", "!=", "None", ":", "\n", "        ", "testS2_image_names", "=", "testS2_image_names", "[", ":", "nr_S2_test_imgs", "]", "\n", "\n", "", "testS3_image_names", "=", "os", ".", "listdir", "(", "testS3_path", ")", "\n", "if", "nr_S3_test_imgs", "!=", "None", ":", "\n", "        ", "testS3_image_names", "=", "testS3_image_names", "[", ":", "nr_S3_test_imgs", "]", "\n", "\n", "", "if", "generator", ":", "\n", "        ", "return", "data_sequence", "(", "trainT_path", ",", "trainS1_path", ",", "trainS2_path", ",", "trainS3_path", ",", "trainT_image_names", ",", "trainS1_image_names", ",", "trainS2_image_names", ",", "trainS3_image_names", ",", "batch_size", "=", "batch_size", ")", "# D_model, use_multiscale_discriminator, use_supervised_learning, REAL_LABEL)", "\n", "", "else", ":", "\n", "        ", "trainT_images", "=", "create_image_array", "(", "trainT_image_names", ",", "trainT_path", ",", "nr_of_channels", ")", "\n", "trainS1_images", "=", "create_image_array", "(", "trainS1_image_names", ",", "trainS1_path", ",", "nr_of_channels", ")", "\n", "trainS2_images", "=", "create_image_array", "(", "trainS2_image_names", ",", "trainS2_path", ",", "nr_of_channels", ")", "\n", "trainS3_images", "=", "create_image_array", "(", "trainS3_image_names", ",", "trainS3_path", ",", "nr_of_channels", ")", "\n", "testT_images", "=", "create_image_array", "(", "testT_image_names", ",", "testT_path", ",", "nr_of_channels", ")", "\n", "testS1_images", "=", "create_image_array", "(", "testS1_image_names", ",", "testS1_path", ",", "nr_of_channels", ")", "\n", "testS2_images", "=", "create_image_array", "(", "testS2_image_names", ",", "testS2_path", ",", "nr_of_channels", ")", "\n", "testS3_images", "=", "create_image_array", "(", "testS3_image_names", ",", "testS3_path", ",", "nr_of_channels", ")", "\n", "return", "{", "\"trainT_images\"", ":", "trainT_images", ",", "\n", "\"trainS1_images\"", ":", "trainS1_images", ",", "\n", "\"trainS2_images\"", ":", "trainS2_images", ",", "\n", "\"trainS3_images\"", ":", "trainS3_images", ",", "\n", "\"testT_images\"", ":", "testT_images", ",", "\n", "\"testS1_images\"", ":", "testS1_images", ",", "\n", "\"testS2_images\"", ":", "testS2_images", ",", "\n", "\"testS3_images\"", ":", "testS3_images", ",", "\n", "\"trainT_image_names\"", ":", "trainT_image_names", ",", "\n", "\"trainS1_image_names\"", ":", "trainS1_image_names", ",", "\n", "\"trainS2_image_names\"", ":", "trainS2_image_names", ",", "\n", "\"trainS3_image_names\"", ":", "trainS3_image_names", ",", "\n", "\"testT_image_names\"", ":", "testT_image_names", ",", "\n", "\"testS1_image_names\"", ":", "testS1_image_names", ",", "\n", "\"testS2_image_names\"", ":", "testS2_image_names", ",", "\n", "\"testS3_image_names\"", ":", "testS3_image_names", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.create_image_array": [[82, 95], ["numpy.array", "image_name[].lower", "load_data.normalize_array", "image_array.append", "numpy.array", "numpy.array", "PIL.Image.open", "PIL.Image.open", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.normalize_array"], ["", "", "def", "create_image_array", "(", "image_list", ",", "image_path", ",", "nr_of_channels", ")", ":", "\n", "    ", "image_array", "=", "[", "]", "\n", "for", "image_name", "in", "image_list", ":", "\n", "        ", "if", "image_name", "[", "-", "1", "]", ".", "lower", "(", ")", "==", "'g'", ":", "# to avoid e.g. thumbs.db files", "\n", "            ", "if", "nr_of_channels", "==", "1", ":", "# Gray scale image -> MR image", "\n", "                ", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "image_path", ",", "image_name", ")", ")", ")", "\n", "image", "=", "image", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "", "else", ":", "# RGB image -> 3 channels", "\n", "                ", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "image_path", ",", "image_name", ")", ")", ")", "\n", "", "image", "=", "normalize_array", "(", "image", ")", "\n", "image_array", ".", "append", "(", "image", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "image_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.normalize_array": [[98, 102], ["None"], "function", ["None"], ["", "def", "normalize_array", "(", "array", ")", ":", "\n", "    ", "array", "=", "array", "/", "127.5", "-", "1", "\n", "#   array = array / 100", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.__init__": [[35, 229], ["keras.optimizers.Adam", "keras.optimizers.Adam", "keras.layers.Input", "keras.layers.Input", "train.DiamondGAN.", "train.DiamondGAN.", "keras.models.Model", "keras.models.Model", "train.DiamondGAN.D_S.compile", "train.DiamondGAN.D_T.compile", "keras.engine.topology.Container", "keras.engine.topology.Container", "train.DiamondGAN.modelGenerator", "train.DiamondGAN.modelGenerator", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "train.DiamondGAN.G_S2T", "train.DiamondGAN.G_T2S", "train.DiamondGAN.D_S_static", "train.DiamondGAN.D_T_static", "train.DiamondGAN.G_T2S", "train.DiamondGAN.G_S2T", "keras.models.Model", "train.DiamondGAN.G_model.compile", "sys.stdout.flush", "load_data.load_data", "os.path.join", "train.DiamondGAN.writeMetaDataToJSON", "tensorflow.ConfigProto", "keras.tensorflow_backend.set_session", "sys.stdout.flush", "train.DiamondGAN.train", "time.strftime", "train.DiamondGAN.modelMultiScaleDiscriminator", "train.DiamondGAN.modelMultiScaleDiscriminator", "train.DiamondGAN.modelDiscriminator", "train.DiamondGAN.modelDiscriminator", "range", "range", "model_outputs.append", "model_outputs.append", "print", "print", "load_data.load_data", "print", "os.path.exists", "os.makedirs", "tensorflow.Session", "time.localtime", "compile_losses.append", "compile_weights.append", "model_outputs.append", "model_outputs.append"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelGenerator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelGenerator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.load_data", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.writeMetaDataToJSON", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.train", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelMultiScaleDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelMultiScaleDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.load_data"], ["    ", "def", "__init__", "(", "self", ",", "lr_D", "=", "2e-4", ",", "lr_G", "=", "2e-4", ",", "img_shape", "=", "(", "240", ",", "240", ",", "3", ")", ",", "domain_shape", "=", "(", "240", ",", "240", ",", "1", ")", ",", "\n", "date_time_string_addition", "=", "''", ",", "image_folder", "=", "'MR'", ")", ":", "\n", "        ", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "hinge", "=", "hinge", "\n", "#       self.gram_loss = gram_loss", "\n", "self", ".", "domain_shape", "=", "domain_shape", "\n", "self", ".", "channels", "=", "self", ".", "img_shape", "[", "-", "1", "]", "\n", "self", ".", "normalization", "=", "InstanceNormalization", "\n", "# Hyper parameters", "\n", "self", ".", "lambda_1", "=", "8.0", "# Cyclic loss weight A_2_B", "\n", "self", ".", "lambda_2", "=", "8.0", "# Cyclic loss weight B_2_A", "\n", "self", ".", "lambda_D", "=", "1.0", "# Weight for loss from discriminator guess on synthetic images", "\n", "self", ".", "learning_rate_D", "=", "lr_D", "\n", "self", ".", "learning_rate_G", "=", "lr_G", "\n", "self", ".", "generator_iterations", "=", "1", "# Number of generator training iterations in each training loop", "\n", "self", ".", "discriminator_iterations", "=", "1", "# Number of generator training iterations in each training loop", "\n", "self", ".", "beta_1", "=", "0.5", "\n", "self", ".", "beta_2", "=", "0.999", "\n", "self", ".", "batch_size", "=", "5", "\n", "self", ".", "epochs", "=", "100", "# choose multiples of 25 since the models are save each 25th epoch", "\n", "self", ".", "save_interval", "=", "1", "\n", "self", ".", "synthetic_pool_size", "=", "25", "\n", "\n", "# Linear decay of learning rate, for both discriminators and generators", "\n", "self", ".", "use_linear_decay", "=", "True", "\n", "self", ".", "decay_epoch", "=", "101", "# The epoch where the linear decay of the learning rates start", "\n", "\n", "# PatchGAN - if false the discriminator learning rate should be decreased", "\n", "self", ".", "use_patchgan", "=", "True", "\n", "# Multi scale discriminator - if True the generator have an extra encoding/decoding step to match discriminator information access", "\n", "self", ".", "use_multiscale_discriminator", "=", "False", "\n", "# Resize convolution - instead of transpose convolution in deconvolution layers (uk) - can reduce checkerboard artifacts but the blurring might affect the cycle-consistency", "\n", "self", ".", "use_resize_convolution", "=", "False", "\n", "# Fetch data during training instead of pre caching all images - might be necessary for large datasets", "\n", "self", ".", "use_data_generator", "=", "False", "\n", "\n", "# Tweaks", "\n", "self", ".", "REAL_LABEL", "=", "0.95", "# Use e.g. 0.9 to avoid training the discriminators to zero loss", "\n", "# Used as storage folder name", "\n", "self", ".", "date_time", "=", "time", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "+", "date_time_string_addition", "\n", "# optimizer", "\n", "self", ".", "opt_D", "=", "Adam", "(", "self", ".", "learning_rate_D", ",", "self", ".", "beta_1", ",", "self", ".", "beta_2", ")", "\n", "self", ".", "opt_G", "=", "Adam", "(", "self", ".", "learning_rate_G", ",", "self", ".", "beta_1", ",", "self", ".", "beta_2", ")", "\n", "## S = source domain, T = target domain", "\n", "# ======= Discriminator model ========== **** domain matrix as a part of the input???? ****", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "            ", "D_S", "=", "self", ".", "modelMultiScaleDiscriminator", "(", ")", "#source domain", "\n", "D_T", "=", "self", ".", "modelMultiScaleDiscriminator", "(", ")", "\n", "loss_weights_D", "=", "[", "0.5", ",", "0.5", "]", "# 0.5 since we train on real and synthetic images", "\n", "", "else", ":", "\n", "            ", "D_S", "=", "self", ".", "modelDiscriminator", "(", ")", "\n", "D_T", "=", "self", ".", "modelDiscriminator", "(", ")", "\n", "loss_weights_D", "=", "[", "0.5", "]", "# 0.5 since we train on real and synthetic images", "\n", "\n", "# Discriminator builds", "\n", "", "image_S", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "image_T", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "guess_S", "=", "D_S", "(", "image_S", ")", "\n", "guess_T", "=", "D_T", "(", "image_T", ")", "\n", "self", ".", "D_S", "=", "Model", "(", "inputs", "=", "image_S", ",", "outputs", "=", "guess_S", ",", "name", "=", "'D_S_model'", ")", "\n", "self", ".", "D_T", "=", "Model", "(", "inputs", "=", "image_T", ",", "outputs", "=", "guess_T", ",", "name", "=", "'D_T_model'", ")", "\n", "\n", "# self.D.summary()", "\n", "self", ".", "D_S", ".", "compile", "(", "optimizer", "=", "self", ".", "opt_D", ",", "\n", "loss", "=", "self", ".", "lse", ",", "\n", "loss_weights", "=", "loss_weights_D", ")", "\n", "self", ".", "D_T", ".", "compile", "(", "optimizer", "=", "self", ".", "opt_D", ",", "\n", "loss", "=", "self", ".", "lse", ",", "\n", "loss_weights", "=", "loss_weights_D", ")", "\n", "\n", "# Use containers to avoid falsy keras error about weight descripancies", "\n", "self", ".", "D_S_static", "=", "Container", "(", "inputs", "=", "image_S", ",", "outputs", "=", "guess_S", ",", "name", "=", "'D_S_static_model'", ")", "\n", "self", ".", "D_T_static", "=", "Container", "(", "inputs", "=", "image_T", ",", "outputs", "=", "guess_T", ",", "name", "=", "'D_T_static_model'", ")", "\n", "\n", "#######################################################################################################", "\n", "# ======= Generator model ==========", "\n", "# Do not update discriminator weights during generator training", "\n", "self", ".", "D_S_static", ".", "trainable", "=", "False", "\n", "self", ".", "D_T_static", ".", "trainable", "=", "False", "\n", "# Generators", "\n", "self", ".", "G_S2T", "=", "self", ".", "modelGenerator", "(", "name", "=", "'G_S2T_model'", ")", "\n", "self", ".", "G_T2S", "=", "self", ".", "modelGenerator", "(", "name", "=", "'G_T2S_model'", ")", "\n", "# self.G.summary()", "\n", "# Generator builds", "\n", "real_S", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ",", "name", "=", "'real_S'", ")", "\n", "real_T", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ",", "name", "=", "'real_T'", ")", "\n", "domain_matrix", "=", "Input", "(", "shape", "=", "self", ".", "domain_shape", ",", "name", "=", "'domain_matrix'", ")", "# the source domain matrix to identify the input modality. It is produced by spacially replicating the domain-mask vector", "\n", "\n", "synthetic_T", "=", "self", ".", "G_S2T", "(", "[", "real_S", ",", "domain_matrix", "]", ")", "# source to target", "\n", "synthetic_S", "=", "self", ".", "G_T2S", "(", "[", "real_T", ",", "domain_matrix", "]", ")", "\n", "\n", "dS_guess_synthetic", "=", "self", ".", "D_S_static", "(", "synthetic_S", ")", "\n", "dT_guess_synthetic", "=", "self", ".", "D_T_static", "(", "synthetic_T", ")", "\n", "reconstructed_S", "=", "self", ".", "G_T2S", "(", "[", "synthetic_T", ",", "domain_matrix", "]", ")", "\n", "reconstructed_T", "=", "self", ".", "G_S2T", "(", "[", "synthetic_S", ",", "domain_matrix", "]", ")", "\n", "\n", "model_outputs", "=", "[", "reconstructed_S", ",", "reconstructed_T", "]", "\n", "compile_losses", "=", "[", "self", ".", "cycle_loss", ",", "self", ".", "cycle_loss", ",", "\n", "self", ".", "lse", ",", "self", ".", "lse", "]", "\n", "compile_weights", "=", "[", "self", ".", "lambda_1", ",", "self", ".", "lambda_2", ",", "\n", "self", ".", "lambda_D", ",", "self", ".", "lambda_D", "]", "\n", "\n", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "            ", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                ", "compile_losses", ".", "append", "(", "self", ".", "lse", ")", "\n", "compile_weights", ".", "append", "(", "self", ".", "lambda_D", ")", "# * 1e-3)  # Lower weight to regularize the model", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "model_outputs", ".", "append", "(", "dS_guess_synthetic", "[", "i", "]", ")", "\n", "model_outputs", ".", "append", "(", "dT_guess_synthetic", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "model_outputs", ".", "append", "(", "dS_guess_synthetic", ")", "\n", "model_outputs", ".", "append", "(", "dT_guess_synthetic", ")", "\n", "\n", "", "self", ".", "G_model", "=", "Model", "(", "inputs", "=", "[", "real_S", ",", "real_T", ",", "domain_matrix", "]", ",", "### ", "\n", "outputs", "=", "model_outputs", ",", "\n", "name", "=", "'G_model'", ")", "\n", "\n", "self", ".", "G_model", ".", "compile", "(", "optimizer", "=", "self", ".", "opt_G", ",", "\n", "loss", "=", "compile_losses", ",", "\n", "loss_weights", "=", "compile_weights", ")", "\n", "\n", "# ======= Data ==========", "\n", "# Use 'None' to fetch all available images", "\n", "nr_target_train_imgs", "=", "None", "# ", "\n", "nr_S1_train_imgs", "=", "None", "# source domain images", "\n", "nr_S2_train_imgs", "=", "None", "\n", "nr_S3_train_imgs", "=", "None", "\n", "nr_target_test_imgs", "=", "None", "\n", "nr_S1_test_imgs", "=", "None", "\n", "nr_S2_test_imgs", "=", "None", "\n", "nr_S3_test_imgs", "=", "None", "\n", "if", "self", ".", "use_data_generator", ":", "\n", "            ", "print", "(", "'--- Using dataloader during training ---'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'--- Caching data ---'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "self", ".", "use_data_generator", ":", "\n", "            ", "self", ".", "data_generator", "=", "load_data", ".", "load_data", "(", "\n", "nr_of_channels", "=", "self", ".", "batch_size", ",", "generator", "=", "True", ",", "subfolder", "=", "image_folder", ")", "\n", "\n", "# Only store test images", "\n", "nr_target_train_imgs", "=", "0", "\n", "nr_S1_train_imgs", "=", "0", "\n", "nr_S2_train_imgs", "=", "0", "\n", "nr_S3_train_imgs", "=", "0", "\n", "", "data", "=", "load_data", ".", "load_data", "(", "nr_of_channels", "=", "self", ".", "channels", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "nr_target_train_imgs", "=", "nr_target_train_imgs", ",", "\n", "nr_S1_train_imgs", "=", "nr_S1_train_imgs", ",", "\n", "nr_S2_train_imgs", "=", "nr_S2_train_imgs", ",", "\n", "nr_S3_train_imgs", "=", "nr_S3_train_imgs", ",", "\n", "nr_target_test_imgs", "=", "nr_target_test_imgs", ",", "\n", "nr_S1_test_imgs", "=", "nr_S1_test_imgs", ",", "\n", "nr_S2_test_imgs", "=", "nr_S2_test_imgs", ",", "\n", "nr_S3_test_imgs", "=", "nr_S3_test_imgs", ",", "\n", "subfolder", "=", "image_folder", ")", "\n", "\n", "self", ".", "T_train", "=", "data", "[", "\"trainT_images\"", "]", "\n", "self", ".", "S1_train", "=", "data", "[", "\"trainS1_images\"", "]", "\n", "self", ".", "S2_train", "=", "data", "[", "\"trainS2_images\"", "]", "\n", "self", ".", "S3_train", "=", "data", "[", "\"trainS3_images\"", "]", "\n", "self", ".", "T_test", "=", "data", "[", "\"testT_images\"", "]", "\n", "self", ".", "S1_test", "=", "data", "[", "\"testS1_images\"", "]", "\n", "self", ".", "S2_test", "=", "data", "[", "\"testS2_images\"", "]", "\n", "self", ".", "S3_test", "=", "data", "[", "\"testS3_images\"", "]", "\n", "self", ".", "testT_image_names", "=", "data", "[", "\"testT_image_names\"", "]", "\n", "self", ".", "testS1_image_names", "=", "data", "[", "\"testS1_image_names\"", "]", "\n", "self", ".", "testS2_image_names", "=", "data", "[", "\"testS2_image_names\"", "]", "\n", "self", ".", "testS3_image_names", "=", "data", "[", "\"testS3_image_names\"", "]", "\n", "if", "not", "self", ".", "use_data_generator", ":", "\n", "            ", "print", "(", "'Data has been loaded'", ")", "\n", "\n", "# ======= Create designated run folder and store meta data ==========", "\n", "", "directory", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "self", ".", "date_time", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "self", ".", "writeMetaDataToJSON", "(", ")", "\n", "\n", "# ======= Avoid pre-allocating GPU memory ==========", "\n", "# TensorFlow wizardry", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "\n", "# Don't pre-allocate memory; allocate as-needed", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "# Create a session with the above options specified.", "\n", "K", ".", "tensorflow_backend", ".", "set_session", "(", "tf", ".", "Session", "(", "config", "=", "config", ")", ")", "\n", "\n", "# ======= Initialize training ==========", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "#plot_model(self.G_A2B, to_file='GA2B_expanded_model_new.png', show_shapes=True)", "\n", "self", ".", "train", "(", "epochs", "=", "self", ".", "epochs", ",", "batch_size", "=", "self", ".", "batch_size", ",", "save_interval", "=", "self", ".", "save_interval", ")", "\n", "#        self.load_model_and_generate_synthetic_images()", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.ck": [[234, 241], ["keras.layers.Conv2D", "keras.layers.advanced_activations.LeakyReLU", "train.DiamondGAN.normalization"], "methods", ["None"], ["", "def", "ck", "(", "self", ",", "x", ",", "k", ",", "use_normalization", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "# Normalization is not done on the first discriminator layer", "\n", "if", "use_normalization", ":", "\n", "            ", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "", "x", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.c7Ak": [[242, 247], ["keras.layers.Conv2D", "train.DiamondGAN.normalization", "keras.layers.Activation"], "methods", ["None"], ["", "def", "c7Ak", "(", "self", ",", "x", ",", "k", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "7", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.dk": [[248, 253], ["keras.layers.Conv2D", "train.DiamondGAN.normalization", "keras.layers.Activation"], "methods", ["None"], ["", "def", "dk", "(", "self", ",", "x", ",", "k", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.Rk": [[254, 266], ["int", "keras.layers.add", "keras.layers.Conv2D", "train.DiamondGAN.normalization", "keras.layers.Activation", "keras.layers.Conv2D", "train.DiamondGAN.normalization"], "methods", ["None"], ["", "def", "Rk", "(", "self", ",", "x0", ")", ":", "\n", "        ", "k", "=", "int", "(", "x0", ".", "shape", "[", "-", "1", "]", ")", "\n", "# first layer", "\n", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "x0", ")", "\n", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "# second layer", "\n", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "# merge", "\n", "x", "=", "add", "(", "[", "x", ",", "x0", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.uk": [[267, 278], ["train.DiamondGAN.normalization", "keras.layers.Activation", "keras.layers.UpSampling2D", "train.ReflectionPadding2D", "keras.layers.Conv2D", "keras.layers.Conv2DTranspose"], "methods", ["None"], ["", "def", "uk", "(", "self", ",", "x", ",", "k", ")", ":", "\n", "# (up sampling followed by 1x1 convolution <=> fractional-strided 1/2)", "\n", "        ", "if", "self", ".", "use_resize_convolution", ":", "\n", "            ", "x", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ")", "(", "x", ")", "# Nearest neighbor upsampling", "\n", "x", "=", "ReflectionPadding2D", "(", "(", "1", ",", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "Conv2DTranspose", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "# this matches fractionally stided with stride 1/2", "\n", "", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.modelMultiScaleDiscriminator": [[282, 292], ["keras.layers.Input", "keras.models.Model", "keras.layers.AveragePooling2D", "train.DiamondGAN.modelDiscriminator", "train.DiamondGAN.modelDiscriminator"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator"], ["", "def", "modelMultiScaleDiscriminator", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "x1", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "x2", "=", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "x1", ")", "\n", "#x4 = AveragePooling2D(pool_size=(2, 2))(x2)", "\n", "\n", "out_x1", "=", "self", ".", "modelDiscriminator", "(", "'D1'", ")", "(", "x1", ")", "\n", "out_x2", "=", "self", ".", "modelDiscriminator", "(", "'D2'", ")", "(", "x2", ")", "\n", "#out_x4 = self.modelDiscriminator('D4')(x4)", "\n", "\n", "return", "Model", "(", "inputs", "=", "x1", ",", "outputs", "=", "[", "out_x1", ",", "out_x2", "]", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.modelDiscriminator": [[293, 312], ["keras.layers.Input", "train.DiamondGAN.ck", "train.DiamondGAN.ck", "train.DiamondGAN.ck", "train.DiamondGAN.ck", "keras.models.Model", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Flatten", "keras.layers.core.Dense"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck"], ["", "def", "modelDiscriminator", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "# Specify input", "\n", "        ", "input_img", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "# Layer 1 (#Instance normalization is not used for this layer)", "\n", "x", "=", "self", ".", "ck", "(", "input_img", ",", "64", ",", "False", ")", "\n", "# Layer 2", "\n", "x", "=", "self", ".", "ck", "(", "x", ",", "128", ",", "True", ")", "\n", "# Layer 3", "\n", "x", "=", "self", ".", "ck", "(", "x", ",", "256", ",", "True", ")", "\n", "# Layer 4", "\n", "x", "=", "self", ".", "ck", "(", "x", ",", "512", ",", "True", ")", "\n", "# Output layer", "\n", "if", "self", ".", "use_patchgan", ":", "\n", "            ", "x", "=", "Conv2D", "(", "filters", "=", "1", ",", "kernel_size", "=", "4", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "1", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'sigmoid'", ")", "(", "x", ")", "\n", "return", "Model", "(", "inputs", "=", "input_img", ",", "outputs", "=", "x", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.modelGenerator": [[313, 356], ["keras.layers.Input", "keras.layers.Input", "train.DiamondGAN.c7Ak", "train.DiamondGAN.c7Ak", "train.DiamondGAN.dk", "train.DiamondGAN.dk", "train.DiamondGAN.dk", "train.DiamondGAN.dk", "range", "keras.layers.concatenate", "train.DiamondGAN.uk", "train.DiamondGAN.uk", "train.DiamondGAN.uk", "keras.models.Model", "train.ReflectionPadding2D", "train.ReflectionPadding2D", "train.DiamondGAN.dk", "train.DiamondGAN.dk", "train.DiamondGAN.Rk", "train.DiamondGAN.Rk", "train.DiamondGAN.uk", "train.ReflectionPadding2D", "keras.layers.Conv2D", "keras.layers.Activation"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.c7Ak", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.c7Ak", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.Rk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.Rk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk"], ["", "def", "modelGenerator", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "# Specify input", "\n", "        ", "input_img", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "input_domain", "=", "Input", "(", "shape", "=", "self", ".", "domain_shape", ")", "\n", "\n", "# Layer 1", "\n", "x", "=", "ReflectionPadding2D", "(", "(", "3", ",", "3", ")", ")", "(", "input_img", ")", "\n", "d", "=", "ReflectionPadding2D", "(", "(", "3", ",", "3", ")", ")", "(", "input_domain", ")", "\n", "\n", "x", "=", "self", ".", "c7Ak", "(", "x", ",", "48", ")", "\n", "d", "=", "self", ".", "c7Ak", "(", "d", ",", "48", ")", "\n", "# Layer 2", "\n", "x", "=", "self", ".", "dk", "(", "x", ",", "72", ")", "\n", "d", "=", "self", ".", "dk", "(", "d", ",", "72", ")", "\n", "# Layer 3", "\n", "x", "=", "self", ".", "dk", "(", "x", ",", "144", ")", "\n", "d", "=", "self", ".", "dk", "(", "d", ",", "144", ")", "\n", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "# Layer 3.5", "\n", "            ", "x", "=", "self", ".", "dk", "(", "x", ",", "256", ")", "\n", "d", "=", "self", ".", "dk", "(", "d", ",", "256", ")", "\n", "#   x = concatenate([x, d], axis = -1)", "\n", "# Layer 4-12: Residual layer", "\n", "\n", "", "for", "_", "in", "range", "(", "4", ",", "13", ")", ":", "\n", "            ", "x", "=", "self", ".", "Rk", "(", "x", ")", "\n", "d", "=", "self", ".", "Rk", "(", "d", ")", "\n", "", "x", "=", "concatenate", "(", "[", "x", ",", "d", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "# Layer 12.5", "\n", "            ", "x", "=", "self", ".", "uk", "(", "x", ",", "128", ")", "\n", "\n", "# Layer 13", "\n", "", "x", "=", "self", ".", "uk", "(", "x", ",", "72", ")", "\n", "# Layer 14", "\n", "x", "=", "self", ".", "uk", "(", "x", ",", "48", ")", "\n", "d", "=", "self", ".", "uk", "(", "d", ",", "48", ")", "\n", "x", "=", "ReflectionPadding2D", "(", "(", "3", ",", "3", ")", ")", "(", "x", ")", "\n", "#     d = ReflectionPadding2D((3, 3))(d)", "\n", "x", "=", "Conv2D", "(", "3", ",", "kernel_size", "=", "7", ",", "strides", "=", "1", ")", "(", "x", ")", "\n", "x", "=", "Activation", "(", "'tanh'", ")", "(", "x", ")", "# They say they use Relu but really they do not", "\n", "return", "Model", "(", "inputs", "=", "[", "input_img", ",", "input_domain", "]", ",", "outputs", "=", "x", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.train": [[360, 603], ["collections.OrderedDict", "train.ImagePool", "train.ImagePool", "time.time", "range", "train.DiamondGAN.G_S2T.predict", "train.DiamondGAN.G_T2S.predict", "train.ImagePool.query", "train.ImagePool.query", "range", "range", "DS_losses.append", "DT_losses.append", "gS_d_losses_synthetic.append", "gT_d_losses_synthetic.append", "gS_losses_reconstructed.append", "gT_losses_reconstructed.append", "D_losses.append", "GS_losses.append", "GT_losses.append", "G_losses.append", "reconstruction_losses.append", "print", "print", "print", "print", "print", "print", "print", "print", "train.DiamondGAN.get_lr_linear_decay_rate", "train.DiamondGAN.writeLossDataToFile", "sys.stdout.flush", "train.DiamondGAN.D_S.train_on_batch", "train.DiamondGAN.D_T.train_on_batch", "train.DiamondGAN.D_S.train_on_batch", "train.DiamondGAN.D_T.train_on_batch", "range", "target_data.append", "target_data.append", "train.DiamondGAN.G_model.train_on_batch", "train.DiamondGAN.update_lr", "train.DiamondGAN.update_lr", "train.DiamondGAN.update_lr", "train.DiamondGAN.print_ETA", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.random.randint", "len", "numpy.load", "numpy.load", "range", "train.DiamondGAN.saveModel", "train.DiamondGAN.saveModel", "train.DiamondGAN.saveModel", "train.DiamondGAN.saveModel", "print", "print", "print", "sys.stdout.flush", "target_data.append", "target_data.append", "print", "sys.stdout.flush", "train.DiamondGAN.train.run_training_iteration"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ImagePool.query", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ImagePool.query", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.get_lr_linear_decay_rate", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.writeLossDataToFile", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.update_lr", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.update_lr", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.update_lr", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.print_ETA", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel"], ["", "def", "train", "(", "self", ",", "epochs", ",", "batch_size", "=", "1", ",", "save_interval", "=", "1", ")", ":", "\n", "        ", "def", "run_training_iteration", "(", "loop_index", ",", "epoch_iterations", ")", ":", "\n", "# ======= Discriminator training ==========", "\n", "# Generate batch of synthetic images", "\n", "            ", "synthetic_images_T", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "real_images_S", ",", "domain_matrix", "]", ")", "\n", "synthetic_images_S", "=", "self", ".", "G_T2S", ".", "predict", "(", "[", "real_images_T", ",", "domain_matrix", "]", ")", "\n", "synthetic_images_S", "=", "synthetic_pool_S", ".", "query", "(", "synthetic_images_S", ")", "\n", "synthetic_images_T", "=", "synthetic_pool_T", ".", "query", "(", "synthetic_images_T", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "discriminator_iterations", ")", ":", "\n", "                ", "DS_loss_real", "=", "self", ".", "D_S", ".", "train_on_batch", "(", "x", "=", "real_images_S", ",", "y", "=", "ones", ")", "\n", "DT_loss_real", "=", "self", ".", "D_T", ".", "train_on_batch", "(", "x", "=", "real_images_T", ",", "y", "=", "ones", ")", "\n", "DS_loss_synthetic", "=", "self", ".", "D_S", ".", "train_on_batch", "(", "x", "=", "synthetic_images_S", ",", "y", "=", "zeros", ")", "\n", "DT_loss_synthetic", "=", "self", ".", "D_T", ".", "train_on_batch", "(", "x", "=", "synthetic_images_T", ",", "y", "=", "zeros", ")", "\n", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "                    ", "DS_loss", "=", "sum", "(", "DS_loss_real", ")", "+", "sum", "(", "DS_loss_synthetic", ")", "\n", "DT_loss", "=", "sum", "(", "DT_loss_real", ")", "+", "sum", "(", "DT_loss_synthetic", ")", "\n", "print", "(", "'DS_losses: '", ",", "np", ".", "add", "(", "DS_loss_real", ",", "DS_loss_synthetic", ")", ")", "\n", "print", "(", "'DT_losses: '", ",", "np", ".", "add", "(", "DT_loss_real", ",", "DT_loss_synthetic", ")", ")", "\n", "", "else", ":", "\n", "                    ", "DS_loss", "=", "DS_loss_real", "+", "DS_loss_synthetic", "\n", "DT_loss", "=", "DT_loss_real", "+", "DT_loss_synthetic", "\n", "", "D_loss", "=", "DS_loss", "+", "DT_loss", "\n", "\n", "if", "self", ".", "discriminator_iterations", ">", "1", ":", "\n", "                    ", "print", "(", "'D_loss:'", ",", "D_loss", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# ======= Generator training ==========", "\n", "", "", "target_data", "=", "[", "real_images_S", ",", "real_images_T", "]", "# Compare reconstructed images to real images", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "target_data", ".", "append", "(", "ones", "[", "i", "]", ")", "\n", "target_data", ".", "append", "(", "ones", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "target_data", ".", "append", "(", "ones", ")", "\n", "target_data", ".", "append", "(", "ones", ")", "\n", "\n", "\n", "\n", "", "for", "_", "in", "range", "(", "self", ".", "generator_iterations", ")", ":", "\n", "                ", "G_loss", "=", "self", ".", "G_model", ".", "train_on_batch", "(", "\n", "x", "=", "[", "real_images_S", ",", "real_images_T", ",", "domain_matrix", "]", ",", "y", "=", "target_data", ")", "\n", "if", "self", ".", "generator_iterations", ">", "1", ":", "\n", "                    ", "print", "(", "'G_loss:'", ",", "G_loss", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "gS_d_loss_synthetic", "=", "G_loss", "[", "1", "]", "\n", "gT_d_loss_synthetic", "=", "G_loss", "[", "2", "]", "\n", "reconstruction_loss_S", "=", "G_loss", "[", "3", "]", "\n", "reconstruction_loss_T", "=", "G_loss", "[", "4", "]", "\n", "\n", "# Update learning rates", "\n", "if", "self", ".", "use_linear_decay", "and", "epoch", ">", "self", ".", "decay_epoch", ":", "\n", "                ", "self", ".", "update_lr", "(", "self", ".", "D_S", ",", "decay_D", ")", "\n", "self", ".", "update_lr", "(", "self", ".", "D_T", ",", "decay_D", ")", "\n", "self", ".", "update_lr", "(", "self", ".", "G_model", ",", "decay_G", ")", "\n", "\n", "# Store some training data", "\n", "", "DS_losses", ".", "append", "(", "DS_loss", ")", "\n", "DT_losses", ".", "append", "(", "DT_loss", ")", "\n", "gS_d_losses_synthetic", ".", "append", "(", "gS_d_loss_synthetic", ")", "\n", "gT_d_losses_synthetic", ".", "append", "(", "gT_d_loss_synthetic", ")", "\n", "gS_losses_reconstructed", ".", "append", "(", "reconstruction_loss_S", ")", "\n", "gT_losses_reconstructed", ".", "append", "(", "reconstruction_loss_T", ")", "\n", "\n", "GS_loss", "=", "gS_d_loss_synthetic", "+", "reconstruction_loss_S", "\n", "GT_loss", "=", "gT_d_loss_synthetic", "+", "reconstruction_loss_T", "\n", "D_losses", ".", "append", "(", "D_loss", ")", "\n", "GS_losses", ".", "append", "(", "GS_loss", ")", "\n", "GT_losses", ".", "append", "(", "GT_loss", ")", "\n", "G_losses", ".", "append", "(", "G_loss", ")", "\n", "reconstruction_loss", "=", "reconstruction_loss_S", "+", "reconstruction_loss_T", "\n", "reconstruction_losses", ".", "append", "(", "reconstruction_loss", ")", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'Epoch----------------'", ",", "epoch", ",", "'/'", ",", "epochs", ")", "\n", "print", "(", "'Loop index----------------'", ",", "loop_index", "+", "1", ",", "'/'", ",", "epoch_iterations", ")", "\n", "print", "(", "'D_loss: '", ",", "D_loss", ")", "\n", "print", "(", "'G_loss: '", ",", "G_loss", "[", "0", "]", ")", "\n", "print", "(", "'reconstruction_loss: '", ",", "reconstruction_loss", ")", "\n", "print", "(", "'DS_loss:'", ",", "DS_loss", ")", "\n", "print", "(", "'DT_loss:'", ",", "DT_loss", ")", "\n", "\n", "if", "loop_index", "%", "20", "==", "0", ":", "\n", "# Save temporary images continously", "\n", "#   self.save_tmp_images(real_images_S, real_images_T, synthetic_images_S, synthetic_images_T)", "\n", "                ", "self", ".", "print_ETA", "(", "start_time", ",", "epoch", ",", "epoch_iterations", ",", "loop_index", ")", "\n", "\n", "\n", "# ======================================================================", "\n", "# Begin training", "\n", "# ======================================================================", "\n", "", "", "training_history", "=", "OrderedDict", "(", ")", "\n", "\n", "DS_losses", "=", "[", "]", "\n", "DT_losses", "=", "[", "]", "\n", "gS_d_losses_synthetic", "=", "[", "]", "\n", "gT_d_losses_synthetic", "=", "[", "]", "\n", "gS_losses_reconstructed", "=", "[", "]", "\n", "gT_losses_reconstructed", "=", "[", "]", "\n", "\n", "GS_losses", "=", "[", "]", "\n", "GT_losses", "=", "[", "]", "\n", "reconstruction_losses", "=", "[", "]", "\n", "D_losses", "=", "[", "]", "\n", "G_losses", "=", "[", "]", "\n", "\n", "# Image pools used to update the discriminators", "\n", "synthetic_pool_S", "=", "ImagePool", "(", "self", ".", "synthetic_pool_size", ")", "\n", "synthetic_pool_T", "=", "ImagePool", "(", "self", ".", "synthetic_pool_size", ")", "\n", "# self.saveImages('(init)')", "\n", "# labels", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "            ", "label_shape1", "=", "(", "batch_size", ",", ")", "+", "self", ".", "D_S", ".", "output_shape", "[", "0", "]", "[", "1", ":", "]", "\n", "label_shape2", "=", "(", "batch_size", ",", ")", "+", "self", ".", "D_S", ".", "output_shape", "[", "1", "]", "[", "1", ":", "]", "\n", "#label_shape4 = (batch_size,) + self.D_A.output_shape[2][1:]", "\n", "ones1", "=", "np", ".", "ones", "(", "shape", "=", "label_shape1", ")", "*", "self", ".", "REAL_LABEL", "\n", "ones2", "=", "np", ".", "ones", "(", "shape", "=", "label_shape2", ")", "*", "self", ".", "REAL_LABEL", "\n", "#ones4 = np.ones(shape=label_shape4) * self.REAL_LABEL", "\n", "ones", "=", "[", "ones1", ",", "ones2", "]", "# , ones4]", "\n", "zeros1", "=", "ones1", "*", "0", "\n", "zeros2", "=", "ones2", "*", "0", "\n", "#zeros4 = ones4 * 0", "\n", "zeros", "=", "[", "zeros1", ",", "zeros2", "]", "# , zeros4]", "\n", "", "else", ":", "\n", "            ", "label_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "D_S", ".", "output_shape", "[", "1", ":", "]", "\n", "ones", "=", "np", ".", "ones", "(", "shape", "=", "label_shape", ")", "*", "self", ".", "REAL_LABEL", "\n", "zeros", "=", "ones", "*", "0", "\n", "\n", "# Linear decay", "\n", "", "if", "self", ".", "use_linear_decay", ":", "\n", "            ", "decay_D", ",", "decay_G", "=", "self", ".", "get_lr_linear_decay_rate", "(", ")", "\n", "\n", "# Start stopwatch for ETAs", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "            ", "if", "self", ".", "use_data_generator", ":", "\n", "                ", "loop_index", "=", "1", "\n", "for", "images", "in", "self", ".", "data_generator", ":", "\n", "                    ", "real_images_T", "=", "images", "[", "0", "]", "\n", "real_images_S1", "=", "images", "[", "1", "]", "\n", "real_images_S2", "=", "images", "[", "2", "]", "\n", "real_images_S3", "=", "images", "[", "3", "]", "\n", "if", "len", "(", "real_images_T", ".", "shape", ")", "==", "3", ":", "\n", "                        ", "real_images_T", "=", "real_images_T", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S1", "=", "real_images_S1", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S2", "=", "real_images_S2", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S3", "=", "real_images_S3", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "# Run all training steps", "\n", "", "run_training_iteration", "(", "loop_index", ",", "self", ".", "data_generator", ".", "__len__", "(", ")", ")", "\n", "\n", "# Store models", "\n", "if", "loop_index", "%", "20000", "==", "0", ":", "\n", "                        ", "self", ".", "saveModel", "(", "self", ".", "D", ",", "loop_index", ")", "\n", "self", ".", "saveModel", "(", "self", ".", "G", ",", "loop_index", ")", "\n", "# Break if loop has ended", "\n", "", "if", "loop_index", ">=", "self", ".", "data_generator", ".", "__len__", "(", ")", ":", "\n", "                        ", "break", "\n", "", "loop_index", "+=", "1", "\n", "\n", "", "", "else", ":", "# Train with all data in cache", "\n", "                ", "T_train", "=", "self", ".", "T_train", "\n", "S1_train", "=", "self", ".", "S1_train", "\n", "S2_train", "=", "self", ".", "S2_train", "\n", "S3_train", "=", "self", ".", "S3_train", "\n", "random_order_T", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "T_train", ")", ",", "size", "=", "len", "(", "T_train", ")", ")", "\n", "\n", "epoch_iterations", "=", "len", "(", "random_order_T", ")", "\n", "#               min_nr_imgs = len(random_order_A)", "\n", "############################   KEY COMPONENT  ###################", "\n", "domain_matrix_all", "=", "np", ".", "load", "(", "'domain_matrix.npy'", ")", "\n", "domain_dictionary", "=", "np", ".", "load", "(", "'domain_dictionary.npy'", ")", "\n", "for", "loop_index", "in", "range", "(", "0", ",", "epoch_iterations", ",", "batch_size", ")", ":", "\n", "                    ", "indexes_T", "=", "random_order_T", "[", "loop_index", ":", "loop_index", "+", "batch_size", "]", "\n", "indexes_S1", "=", "indexes_T", "\n", "indexes_S2", "=", "indexes_T", "\n", "indexes_S3", "=", "indexes_T", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "real_images_T", "=", "T_train", "[", "indexes_T", "]", "\n", "\n", "# ", "\n", "real_images_S1", "=", "S1_train", "[", "indexes_S1", "]", "\n", "real_images_S2", "=", "S2_train", "[", "indexes_S2", "]", "\n", "real_images_S3", "=", "S3_train", "[", "indexes_S3", "]", "\n", "if", "len", "(", "real_images_S1", ".", "shape", ")", "==", "3", ":", "\n", "                        ", "real_images_T", "=", "real_images_T", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S1", "=", "real_images_S1", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S2", "=", "real_images_S2", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S3", "=", "real_images_S3", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "# Run all training steps", "\n", "############ generating multi-channel input data based on the varied domain input", "\n", "# domain_dictionary = [[1, 0, 0],  [0, 1, 0], [0, 0, 1], [1, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]]", "\n", "#domain_matrix = np.zeros(np.shape(target_images), dtype = 'float64')", "\n", "", "real_images_T", "=", "np", ".", "concatenate", "(", "(", "real_images_T", ",", "real_images_T", ",", "real_images_T", ")", ",", "axis", "=", "-", "1", ")", "\n", "print", "(", "np", ".", "shape", "(", "real_images_T", ")", ")", "\n", "for", "dd", "in", "range", "(", "np", ".", "shape", "(", "domain_dictionary", ")", "[", "0", "]", ")", ":", "\n", "                        ", "real_images_S", "=", "np", ".", "concatenate", "(", "(", "real_images_S1", ",", "real_images_S2", ",", "real_images_S3", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "dd", "==", "0", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "real_images_S", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "1", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "real_images_S", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "2", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "real_images_S", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "3", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "4", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "5", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "\n", "", "domain_matrix", "=", "np", ".", "tile", "(", "domain_matrix_all", "[", ":", ",", ":", ",", "dd", ":", "dd", "+", "1", "]", ",", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "# Run all training steps", "\n", "run_training_iteration", "(", "loop_index", ",", "epoch_iterations", ")", "\n", "\n", "#================== within epoch loop end ==========================", "\n", "", "", "", "if", "epoch", "%", "1", "==", "0", ":", "\n", "# self.saveModel(self.G_model)", "\n", "                ", "self", ".", "saveModel", "(", "self", ".", "D_S", ",", "epoch", ")", "\n", "self", ".", "saveModel", "(", "self", ".", "D_T", ",", "epoch", ")", "\n", "self", ".", "saveModel", "(", "self", ".", "G_S2T", ",", "epoch", ")", "\n", "self", ".", "saveModel", "(", "self", ".", "G_T2S", ",", "epoch", ")", "\n", "\n", "", "training_history", "=", "{", "\n", "'DS_losses'", ":", "DS_losses", ",", "\n", "'DT_losses'", ":", "DT_losses", ",", "\n", "'gS_d_losses_synthetic'", ":", "gS_d_losses_synthetic", ",", "\n", "'gT_d_losses_synthetic'", ":", "gT_d_losses_synthetic", ",", "\n", "'gS_losses_reconstructed'", ":", "gS_losses_reconstructed", ",", "\n", "'gT_losses_reconstructed'", ":", "gT_losses_reconstructed", ",", "\n", "'D_losses'", ":", "D_losses", ",", "\n", "'G_losses'", ":", "G_losses", ",", "\n", "'reconstruction_losses'", ":", "reconstruction_losses", "}", "\n", "self", ".", "writeLossDataToFile", "(", "training_history", ")", "\n", "\n", "# Flush out prints each loop iteration", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.lse": [[606, 609], ["tensorflow.reduce_mean", "tensorflow.squared_difference"], "methods", ["None"], ["", "", "def", "lse", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "squared_difference", "(", "y_pred", ",", "y_true", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.cycle_loss": [[610, 613], ["tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], ["", "def", "cycle_loss", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "# normal L1 loss ", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "y_pred", "-", "y_true", ")", ")", "\n", "return", "loss", "\n", "#    def combined_loss(self, y_true, y_pred):", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.truncateAndSave": [[632, 653], ["synthetic.clip.clip.clip", "reconstructed.clip.clip.clip", "scipy.misc.toimage().save", "len", "numpy.hstack", "numpy.hstack", "len", "scipy.misc.toimage"], "methods", ["None"], ["", "def", "truncateAndSave", "(", "self", ",", "real_", ",", "real", ",", "synthetic", ",", "reconstructed", ",", "path_name", ")", ":", "\n", "        ", "if", "len", "(", "real", ".", "shape", ")", ">", "3", ":", "\n", "            ", "real", "=", "real", "[", "0", "]", "\n", "synthetic", "=", "synthetic", "[", "0", "]", "\n", "reconstructed", "=", "reconstructed", "[", "0", "]", "\n", "\n", "", "synthetic", "=", "synthetic", ".", "clip", "(", "min", "=", "0", ")", "\n", "reconstructed", "=", "reconstructed", ".", "clip", "(", "min", "=", "0", ")", "\n", "\n", "# Append and save", "\n", "if", "real_", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "real_", ".", "shape", ")", ">", "4", ":", "\n", "                ", "real_", "=", "real_", "[", "0", "]", "\n", "", "image", "=", "np", ".", "hstack", "(", "(", "real_", "[", "0", "]", ",", "real", ",", "synthetic", ",", "reconstructed", ")", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "np", ".", "hstack", "(", "(", "real", ",", "synthetic", ",", "reconstructed", ")", ")", "\n", "\n", "", "if", "self", ".", "channels", "==", "1", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "", "toimage", "(", "image", ",", "cmin", "=", "0", ",", "cmax", "=", "1", ")", ".", "save", "(", "path_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.get_lr_linear_decay_rate": [[702, 718], ["len", "max", "len", "len"], "methods", ["None"], ["", "def", "get_lr_linear_decay_rate", "(", "self", ")", ":", "\n", "# Calculate decay rates", "\n", "        ", "if", "self", ".", "use_data_generator", ":", "\n", "            ", "max_nr_images", "=", "len", "(", "self", ".", "data_generator", ")", "\n", "", "else", ":", "\n", "            ", "max_nr_images", "=", "max", "(", "len", "(", "self", ".", "S1_train", ")", ",", "len", "(", "self", ".", "T_train", ")", ")", "\n", "\n", "", "updates_per_epoch_D", "=", "2", "*", "max_nr_images", "+", "self", ".", "discriminator_iterations", "-", "1", "\n", "updates_per_epoch_G", "=", "max_nr_images", "+", "self", ".", "generator_iterations", "-", "1", "\n", "\n", "denominator_D", "=", "(", "self", ".", "epochs", "-", "self", ".", "decay_epoch", ")", "*", "updates_per_epoch_D", "\n", "denominator_G", "=", "(", "self", ".", "epochs", "-", "self", ".", "decay_epoch", ")", "*", "updates_per_epoch_G", "\n", "decay_D", "=", "self", ".", "learning_rate_D", "/", "denominator_D", "\n", "decay_G", "=", "self", ".", "learning_rate_G", "/", "denominator_G", "\n", "\n", "return", "decay_D", ",", "decay_G", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.update_lr": [[719, 725], ["keras.set_value", "keras.get_value"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "model", ",", "decay", ")", ":", "\n", "        ", "new_lr", "=", "K", ".", "get_value", "(", "model", ".", "optimizer", ".", "lr", ")", "-", "decay", "\n", "if", "new_lr", "<", "0", ":", "\n", "            ", "new_lr", "=", "0", "\n", "# print(K.get_value(model.optimizer.lr))", "\n", "", "K", ".", "set_value", "(", "model", ".", "optimizer", ".", "lr", ",", "new_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.print_ETA": [[726, 737], ["round", "str", "str", "print", "time.time", "datetime.timedelta", "datetime.timedelta", "round"], "methods", ["None"], ["", "def", "print_ETA", "(", "self", ",", "start_time", ",", "epoch", ",", "epoch_iterations", ",", "loop_index", ")", ":", "\n", "        ", "passed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "iterations_so_far", "=", "(", "(", "epoch", "-", "1", ")", "*", "epoch_iterations", "+", "loop_index", ")", "/", "self", ".", "batch_size", "\n", "iterations_total", "=", "self", ".", "epochs", "*", "epoch_iterations", "/", "self", ".", "batch_size", "\n", "iterations_left", "=", "iterations_total", "-", "iterations_so_far", "\n", "eta", "=", "round", "(", "passed_time", "/", "(", "iterations_so_far", "+", "1e-5", ")", "*", "iterations_left", ")", "\n", "\n", "passed_time_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "round", "(", "passed_time", ")", ")", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "eta", ")", ")", "\n", "print", "(", "'Time passed'", ",", "passed_time_string", ",", "': ETA in'", ",", "eta_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.saveModel": [[742, 756], ["os.path.join", "model.save_weights", "model.save_weights", "model.to_json", "print", "os.path.exists", "os.makedirs", "open", "json.dump"], "methods", ["None"], ["", "def", "saveModel", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "# Create folder to save model architecture and weights", "\n", "        ", "directory", "=", "os", ".", "path", ".", "join", "(", "'saved_models'", ",", "self", ".", "date_time", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "model_path_w", "=", "'saved_models/{}/{}_weights_epoch_{}.hdf5'", ".", "format", "(", "self", ".", "date_time", ",", "model", ".", "name", ",", "epoch", ")", "\n", "model", ".", "save_weights", "(", "model_path_w", ")", "\n", "model_path_m", "=", "'saved_models/{}/{}_model_epoch_{}.json'", ".", "format", "(", "self", ".", "date_time", ",", "model", ".", "name", ",", "epoch", ")", "\n", "model", ".", "save_weights", "(", "model_path_m", ")", "\n", "json_string", "=", "model", ".", "to_json", "(", ")", "\n", "with", "open", "(", "model_path_m", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "json_string", ",", "outfile", ")", "\n", "", "print", "(", "'{} has been saved in saved_models/{}/'", ".", "format", "(", "model", ".", "name", ",", "self", ".", "date_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.writeLossDataToFile": [[757, 763], ["sorted", "history.keys", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "zip"], "methods", ["None"], ["", "def", "writeLossDataToFile", "(", "self", ",", "history", ")", ":", "\n", "        ", "keys", "=", "sorted", "(", "history", ".", "keys", "(", ")", ")", "\n", "with", "open", "(", "'images/{}/loss_output.csv'", ".", "format", "(", "self", ".", "date_time", ")", ",", "'w'", ")", "as", "csv_file", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "keys", ")", "\n", "writer", ".", "writerows", "(", "zip", "(", "*", "[", "history", "[", "key", "]", "for", "key", "in", "keys", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.writeMetaDataToJSON": [[764, 799], ["os.path.join", "data[].append", "os.path.exists", "os.makedirs", "open", "json.dump", "str", "len", "len", "len", "len"], "methods", ["None"], ["", "", "def", "writeMetaDataToJSON", "(", "self", ")", ":", "\n", "\n", "        ", "directory", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "self", ".", "date_time", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "# Save meta_data", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "'meta_data'", "]", "=", "[", "]", "\n", "data", "[", "'meta_data'", "]", ".", "append", "(", "{", "\n", "'img shape: height,width,channels'", ":", "self", ".", "img_shape", ",", "\n", "'batch size'", ":", "self", ".", "batch_size", ",", "\n", "'save interval'", ":", "self", ".", "save_interval", ",", "\n", "'normalization function'", ":", "str", "(", "self", ".", "normalization", ")", ",", "\n", "'lambda_1'", ":", "self", ".", "lambda_1", ",", "\n", "'lambda_d'", ":", "self", ".", "lambda_D", ",", "\n", "'learning_rate_D'", ":", "self", ".", "learning_rate_D", ",", "\n", "'learning rate G'", ":", "self", ".", "learning_rate_G", ",", "\n", "'epochs'", ":", "self", ".", "epochs", ",", "\n", "'use linear decay on learning rates'", ":", "self", ".", "use_linear_decay", ",", "\n", "'use multiscale discriminator'", ":", "self", ".", "use_multiscale_discriminator", ",", "\n", "'epoch where learning rate linear decay is initialized (if use_linear_decay)'", ":", "self", ".", "decay_epoch", ",", "\n", "'generator iterations'", ":", "self", ".", "generator_iterations", ",", "\n", "'discriminator iterations'", ":", "self", ".", "discriminator_iterations", ",", "\n", "'use patchGan in discriminator'", ":", "self", ".", "use_patchgan", ",", "\n", "'beta 1'", ":", "self", ".", "beta_1", ",", "\n", "'beta 2'", ":", "self", ".", "beta_2", ",", "\n", "'REAL_LABEL'", ":", "self", ".", "REAL_LABEL", ",", "\n", "'number of T train examples'", ":", "len", "(", "self", ".", "T_train", ")", ",", "\n", "'number of S1 train examples'", ":", "len", "(", "self", ".", "S1_train", ")", ",", "\n", "'number of T test examples'", ":", "len", "(", "self", ".", "T_test", ")", ",", "\n", "'number of S1 test examples'", ":", "len", "(", "self", ".", "S1_test", ")", ",", "\n", "}", ")", "\n", "\n", "with", "open", "(", "'images/{}/meta_data.json'", ".", "format", "(", "self", ".", "date_time", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "outfile", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.load_model_and_weights": [[800, 805], ["os.path.join", "os.path.join", "model.load_weights"], "methods", ["None"], ["", "", "def", "load_model_and_weights", "(", "self", ",", "model", ")", ":", "\n", "        ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "'generate_images'", ",", "'models'", ",", "'{}.json'", ".", "format", "(", "model", ".", "name", ")", ")", "\n", "path_to_weights", "=", "os", ".", "path", ".", "join", "(", "'generate_images'", ",", "'models'", ",", "'{}.hdf5'", ".", "format", "(", "model", ".", "name", ")", ")", "\n", "#model = model_from_json(path_to_model)", "\n", "model", ".", "load_weights", "(", "path_to_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.DiamondGAN.load_model_and_generate_synthetic_images": [[806, 852], ["[].lower", "numpy.load", "numpy.load", "train.DiamondGAN.load_model_and_weights", "range", "scipy.misc.imsave", "len", "numpy.tile", "input", "os.path.join", "numpy.shape", "train.DiamondGAN.G_S2T.predict", "range", "train.DiamondGAN.G_S2T.predict", "range", "train.DiamondGAN.G_S2T.predict", "range", "len", "train.DiamondGAN.load_model_and_generate_synthetic_images.save_image"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.load_model_and_weights"], ["", "def", "load_model_and_generate_synthetic_images", "(", "self", ")", ":", "\n", "        ", "response", "=", "input", "(", "'Are you sure you want to generate synthetic images instead of training? (y/n): '", ")", "[", "0", "]", ".", "lower", "(", ")", "\n", "if", "response", "==", "'y'", ":", "\n", "            ", "domain_matrix_all", "=", "np", ".", "load", "(", "'domain_matrix.npy'", ")", "\n", "domain_dictionary", "=", "np", ".", "load", "(", "'domain_dictionary.npy'", ")", "\n", "self", ".", "load_model_and_weights", "(", "self", ".", "G", ")", "\n", "# save function", "\n", "def", "save_image", "(", "image", ",", "name", ",", "domain", ")", ":", "\n", "                ", "image", "=", "image", "[", ":", ",", ":", ",", "0", "]", "\n", "scipy", ".", "misc", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "'generate_images'", ",", "'synthetic_images'", ",", "domain", ",", "name", ")", ",", "image", ")", "\n", "\n", "############ generating multi-channel input data based on the varied domain input", "\n", "# domain_dictionary = [[1, 0], [0, 1]]", "\n", "", "S1_test", "=", "self", ".", "S1_test", "\n", "if", "len", "(", "S1_test", ".", "shape", ")", "==", "3", ":", "\n", "                ", "S1_test", "=", "self", ".", "S1_test", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "S2_test", "=", "self", ".", "S2_test", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "S3_test", "=", "self", ".", "S3_test", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "#input_all = np.concatenate((B_test, C_test), axis = -1)", "\n", "", "for", "dd", "in", "range", "(", "np", ".", "shape", "(", "domain_dictionary", ")", "[", "0", "]", ")", ":", "\n", "\n", "                ", "domain_matrix", "=", "np", ".", "tile", "(", "domain_matrix_all", "[", ":", ",", ":", ",", "dd", ":", "dd", "+", "1", "]", ",", "(", "np", ".", "shape", "(", "S1_test", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "if", "dd", "==", "0", ":", "\n", "                    ", "input_images", "=", "S1_test", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "input_images", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testA_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_s1'", ")", "\n", "", "", "if", "dd", "==", "1", ":", "\n", "                    ", "input_images", "=", "S2_test", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "input_images", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testA_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_s2'", ")", "\n", "", "", "if", "dd", "==", "2", ":", "\n", "                    ", "input_images", "=", "S3_test", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "input_images", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testA_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_s3'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.ReflectionPadding2D.__init__": [[858, 862], ["tuple", "keras.layers.Layer.__init__", "keras_contrib.layers.normalization.InputSpec"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ImagePool.__init__"], ["    ", "def", "__init__", "(", "self", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "padding", "=", "tuple", "(", "padding", ")", "\n", "self", ".", "input_spec", "=", "[", "InputSpec", "(", "ndim", "=", "4", ")", "]", "\n", "super", "(", "ReflectionPadding2D", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.ReflectionPadding2D.compute_output_shape": [[863, 865], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "(", "s", "[", "0", "]", ",", "s", "[", "1", "]", "+", "2", "*", "self", ".", "padding", "[", "0", "]", ",", "s", "[", "2", "]", "+", "2", "*", "self", ".", "padding", "[", "1", "]", ",", "s", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.ReflectionPadding2D.call": [[866, 869], ["tensorflow.pad"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "w_pad", ",", "h_pad", "=", "self", ".", "padding", "\n", "return", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "h_pad", ",", "h_pad", "]", ",", "[", "w_pad", ",", "w_pad", "]", ",", "[", "0", ",", "0", "]", "]", ",", "'REFLECT'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.ImagePool.__init__": [[872, 877], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.train.ImagePool.query": [[878, 916], ["len", "random.uniform", "len", "numpy.vstack", "len", "numpy.vstack", "random.randint", "len", "numpy.vstack", "len", "numpy.vstack"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "                ", "image", "=", "image", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "# fill up the image pool", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "                    ", "self", ".", "images", "=", "image", "\n", "", "else", ":", "\n", "                    ", "self", ".", "images", "=", "np", ".", "vstack", "(", "(", "self", ".", "images", ",", "image", ")", ")", "\n", "\n", "", "if", "len", "(", "return_images", ")", "==", "0", ":", "\n", "                    ", "return_images", "=", "image", "\n", "", "else", ":", "\n", "                    ", "return_images", "=", "np", ".", "vstack", "(", "(", "return_images", ",", "image", ")", ")", "\n", "\n", "", "", "else", ":", "# 50% chance that we replace an old synthetic image", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", ",", ":", ",", ":", ",", ":", "]", "\n", "tmp", "=", "tmp", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "images", "[", "random_id", ",", ":", ",", ":", ",", ":", "]", "=", "image", "[", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "if", "len", "(", "return_images", ")", "==", "0", ":", "\n", "                        ", "return_images", "=", "tmp", "\n", "", "else", ":", "\n", "                        ", "return_images", "=", "np", ".", "vstack", "(", "(", "return_images", ",", "tmp", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "len", "(", "return_images", ")", "==", "0", ":", "\n", "                        ", "return_images", "=", "image", "\n", "", "else", ":", "\n", "                        ", "return_images", "=", "np", ".", "vstack", "(", "(", "return_images", ",", "image", ")", ")", "\n", "\n", "", "", "", "", "return", "return_images", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.__init__": [[35, 230], ["keras.optimizers.Adam", "keras.optimizers.Adam", "keras.layers.Input", "keras.layers.Input", "test.DiamondGAN.", "test.DiamondGAN.", "keras.models.Model", "keras.models.Model", "test.DiamondGAN.D_S.compile", "test.DiamondGAN.D_T.compile", "keras.engine.topology.Container", "keras.engine.topology.Container", "test.DiamondGAN.modelGenerator", "test.DiamondGAN.modelGenerator", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "test.DiamondGAN.G_S2T", "test.DiamondGAN.G_T2S", "test.DiamondGAN.D_S_static", "test.DiamondGAN.D_T_static", "test.DiamondGAN.G_T2S", "test.DiamondGAN.G_S2T", "keras.models.Model", "test.DiamondGAN.G_model.compile", "sys.stdout.flush", "load_data.load_data", "os.path.join", "test.DiamondGAN.writeMetaDataToJSON", "tensorflow.ConfigProto", "keras.tensorflow_backend.set_session", "sys.stdout.flush", "test.DiamondGAN.load_model_and_generate_synthetic_images", "time.strftime", "test.DiamondGAN.modelMultiScaleDiscriminator", "test.DiamondGAN.modelMultiScaleDiscriminator", "test.DiamondGAN.modelDiscriminator", "test.DiamondGAN.modelDiscriminator", "range", "range", "model_outputs.append", "model_outputs.append", "print", "print", "load_data.load_data", "print", "os.path.exists", "os.makedirs", "tensorflow.Session", "time.localtime", "compile_losses.append", "compile_weights.append", "model_outputs.append", "model_outputs.append"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelGenerator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelGenerator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.load_data", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.writeMetaDataToJSON", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.load_model_and_generate_synthetic_images", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelMultiScaleDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelMultiScaleDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.load_data.load_data"], ["    ", "def", "__init__", "(", "self", ",", "lr_D", "=", "2e-4", ",", "lr_G", "=", "2e-4", ",", "img_shape", "=", "(", "240", ",", "240", ",", "3", ")", ",", "domain_shape", "=", "(", "240", ",", "240", ",", "1", ")", ",", "\n", "date_time_string_addition", "=", "''", ",", "image_folder", "=", "'MR'", ")", ":", "\n", "        ", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "hinge", "=", "hinge", "\n", "#       self.gram_loss = gram_loss", "\n", "self", ".", "domain_shape", "=", "domain_shape", "\n", "self", ".", "channels", "=", "self", ".", "img_shape", "[", "-", "1", "]", "\n", "self", ".", "normalization", "=", "InstanceNormalization", "\n", "# Hyper parameters", "\n", "self", ".", "lambda_1", "=", "8.0", "# Cyclic loss weight A_2_B", "\n", "self", ".", "lambda_2", "=", "8.0", "# Cyclic loss weight B_2_A", "\n", "self", ".", "lambda_D", "=", "1.0", "# Weight for loss from discriminator guess on synthetic images", "\n", "self", ".", "learning_rate_D", "=", "lr_D", "\n", "self", ".", "learning_rate_G", "=", "lr_G", "\n", "self", ".", "generator_iterations", "=", "1", "# Number of generator training iterations in each training loop", "\n", "self", ".", "discriminator_iterations", "=", "1", "# Number of generator training iterations in each training loop", "\n", "self", ".", "beta_1", "=", "0.5", "\n", "self", ".", "beta_2", "=", "0.999", "\n", "self", ".", "batch_size", "=", "5", "\n", "self", ".", "epochs", "=", "100", "# choose multiples of 25 since the models are save each 25th epoch", "\n", "self", ".", "save_interval", "=", "1", "\n", "self", ".", "synthetic_pool_size", "=", "25", "\n", "\n", "# Linear decay of learning rate, for both discriminators and generators", "\n", "self", ".", "use_linear_decay", "=", "True", "\n", "self", ".", "decay_epoch", "=", "101", "# The epoch where the linear decay of the learning rates start", "\n", "\n", "# PatchGAN - if false the discriminator learning rate should be decreased", "\n", "self", ".", "use_patchgan", "=", "True", "\n", "# Multi scale discriminator - if True the generator have an extra encoding/decoding step to match discriminator information access", "\n", "self", ".", "use_multiscale_discriminator", "=", "False", "\n", "# Resize convolution - instead of transpose convolution in deconvolution layers (uk) - can reduce checkerboard artifacts but the blurring might affect the cycle-consistency", "\n", "self", ".", "use_resize_convolution", "=", "False", "\n", "# Fetch data during training instead of pre caching all images - might be necessary for large datasets", "\n", "self", ".", "use_data_generator", "=", "False", "\n", "\n", "# Tweaks", "\n", "self", ".", "REAL_LABEL", "=", "0.95", "# Use e.g. 0.9 to avoid training the discriminators to zero loss", "\n", "# Used as storage folder name", "\n", "self", ".", "date_time", "=", "time", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "+", "date_time_string_addition", "\n", "# optimizer", "\n", "self", ".", "opt_D", "=", "Adam", "(", "self", ".", "learning_rate_D", ",", "self", ".", "beta_1", ",", "self", ".", "beta_2", ")", "\n", "self", ".", "opt_G", "=", "Adam", "(", "self", ".", "learning_rate_G", ",", "self", ".", "beta_1", ",", "self", ".", "beta_2", ")", "\n", "## S = source domain, T = target domain", "\n", "# ======= Discriminator model ========== **** domain matrix as a part of the input???? ****", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "            ", "D_S", "=", "self", ".", "modelMultiScaleDiscriminator", "(", ")", "#source domain", "\n", "D_T", "=", "self", ".", "modelMultiScaleDiscriminator", "(", ")", "\n", "loss_weights_D", "=", "[", "0.5", ",", "0.5", "]", "# 0.5 since we train on real and synthetic images", "\n", "", "else", ":", "\n", "            ", "D_S", "=", "self", ".", "modelDiscriminator", "(", ")", "\n", "D_T", "=", "self", ".", "modelDiscriminator", "(", ")", "\n", "loss_weights_D", "=", "[", "0.5", "]", "# 0.5 since we train on real and synthetic images", "\n", "\n", "# Discriminator builds", "\n", "", "image_S", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "image_T", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "guess_S", "=", "D_S", "(", "image_S", ")", "\n", "guess_T", "=", "D_T", "(", "image_T", ")", "\n", "self", ".", "D_S", "=", "Model", "(", "inputs", "=", "image_S", ",", "outputs", "=", "guess_S", ",", "name", "=", "'D_S_model'", ")", "\n", "self", ".", "D_T", "=", "Model", "(", "inputs", "=", "image_T", ",", "outputs", "=", "guess_T", ",", "name", "=", "'D_T_model'", ")", "\n", "\n", "# self.D.summary()", "\n", "self", ".", "D_S", ".", "compile", "(", "optimizer", "=", "self", ".", "opt_D", ",", "\n", "loss", "=", "self", ".", "lse", ",", "\n", "loss_weights", "=", "loss_weights_D", ")", "\n", "self", ".", "D_T", ".", "compile", "(", "optimizer", "=", "self", ".", "opt_D", ",", "\n", "loss", "=", "self", ".", "lse", ",", "\n", "loss_weights", "=", "loss_weights_D", ")", "\n", "\n", "# Use containers to avoid falsy keras error about weight descripancies", "\n", "self", ".", "D_S_static", "=", "Container", "(", "inputs", "=", "image_S", ",", "outputs", "=", "guess_S", ",", "name", "=", "'D_S_static_model'", ")", "\n", "self", ".", "D_T_static", "=", "Container", "(", "inputs", "=", "image_T", ",", "outputs", "=", "guess_T", ",", "name", "=", "'D_T_static_model'", ")", "\n", "\n", "#######################################################################################################", "\n", "# ======= Generator model ==========", "\n", "# Do not update discriminator weights during generator training", "\n", "self", ".", "D_S_static", ".", "trainable", "=", "False", "\n", "self", ".", "D_T_static", ".", "trainable", "=", "False", "\n", "# Generators", "\n", "self", ".", "G_S2T", "=", "self", ".", "modelGenerator", "(", "name", "=", "'G_S2T_model'", ")", "\n", "self", ".", "G_T2S", "=", "self", ".", "modelGenerator", "(", "name", "=", "'G_T2S_model'", ")", "\n", "# self.G.summary()", "\n", "# Generator builds", "\n", "real_S", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ",", "name", "=", "'real_S'", ")", "\n", "real_T", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ",", "name", "=", "'real_T'", ")", "\n", "domain_matrix", "=", "Input", "(", "shape", "=", "self", ".", "domain_shape", ",", "name", "=", "'domain_matrix'", ")", "# the source domain matrix to identify the input modality. It is produced by spacially replicating the domain-mask vector", "\n", "\n", "synthetic_T", "=", "self", ".", "G_S2T", "(", "[", "real_S", ",", "domain_matrix", "]", ")", "# source to target", "\n", "synthetic_S", "=", "self", ".", "G_T2S", "(", "[", "real_T", ",", "domain_matrix", "]", ")", "\n", "\n", "dS_guess_synthetic", "=", "self", ".", "D_S_static", "(", "synthetic_S", ")", "\n", "dT_guess_synthetic", "=", "self", ".", "D_T_static", "(", "synthetic_T", ")", "\n", "reconstructed_S", "=", "self", ".", "G_T2S", "(", "[", "synthetic_T", ",", "domain_matrix", "]", ")", "\n", "reconstructed_T", "=", "self", ".", "G_S2T", "(", "[", "synthetic_S", ",", "domain_matrix", "]", ")", "\n", "\n", "model_outputs", "=", "[", "reconstructed_S", ",", "reconstructed_T", "]", "\n", "compile_losses", "=", "[", "self", ".", "cycle_loss", ",", "self", ".", "cycle_loss", ",", "\n", "self", ".", "lse", ",", "self", ".", "lse", "]", "\n", "compile_weights", "=", "[", "self", ".", "lambda_1", ",", "self", ".", "lambda_2", ",", "\n", "self", ".", "lambda_D", ",", "self", ".", "lambda_D", "]", "\n", "\n", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "            ", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                ", "compile_losses", ".", "append", "(", "self", ".", "lse", ")", "\n", "compile_weights", ".", "append", "(", "self", ".", "lambda_D", ")", "# * 1e-3)  # Lower weight to regularize the model", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "model_outputs", ".", "append", "(", "dS_guess_synthetic", "[", "i", "]", ")", "\n", "model_outputs", ".", "append", "(", "dT_guess_synthetic", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "model_outputs", ".", "append", "(", "dS_guess_synthetic", ")", "\n", "model_outputs", ".", "append", "(", "dT_guess_synthetic", ")", "\n", "\n", "", "self", ".", "G_model", "=", "Model", "(", "inputs", "=", "[", "real_S", ",", "real_T", ",", "domain_matrix", "]", ",", "### ", "\n", "outputs", "=", "model_outputs", ",", "\n", "name", "=", "'G_model'", ")", "\n", "\n", "self", ".", "G_model", ".", "compile", "(", "optimizer", "=", "self", ".", "opt_G", ",", "\n", "loss", "=", "compile_losses", ",", "\n", "loss_weights", "=", "compile_weights", ")", "\n", "\n", "# ======= Data ==========", "\n", "# Use 'None' to fetch all available images", "\n", "nr_target_train_imgs", "=", "None", "# ", "\n", "nr_S1_train_imgs", "=", "None", "# source domain images", "\n", "nr_S2_train_imgs", "=", "None", "\n", "nr_S3_train_imgs", "=", "None", "\n", "nr_target_test_imgs", "=", "None", "\n", "nr_S1_test_imgs", "=", "None", "\n", "nr_S2_test_imgs", "=", "None", "\n", "nr_S3_test_imgs", "=", "None", "\n", "if", "self", ".", "use_data_generator", ":", "\n", "            ", "print", "(", "'--- Using dataloader during training ---'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'--- Caching data ---'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "self", ".", "use_data_generator", ":", "\n", "            ", "self", ".", "data_generator", "=", "load_data", ".", "load_data", "(", "\n", "nr_of_channels", "=", "self", ".", "batch_size", ",", "generator", "=", "True", ",", "subfolder", "=", "image_folder", ")", "\n", "\n", "# Only store test images", "\n", "nr_target_train_imgs", "=", "0", "\n", "nr_S1_train_imgs", "=", "0", "\n", "nr_S2_train_imgs", "=", "0", "\n", "nr_S3_train_imgs", "=", "0", "\n", "", "data", "=", "load_data", ".", "load_data", "(", "nr_of_channels", "=", "self", ".", "channels", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "nr_target_train_imgs", "=", "nr_target_train_imgs", ",", "\n", "nr_S1_train_imgs", "=", "nr_S1_train_imgs", ",", "\n", "nr_S2_train_imgs", "=", "nr_S2_train_imgs", ",", "\n", "nr_S3_train_imgs", "=", "nr_S3_train_imgs", ",", "\n", "nr_target_test_imgs", "=", "nr_target_test_imgs", ",", "\n", "nr_S1_test_imgs", "=", "nr_S1_test_imgs", ",", "\n", "nr_S2_test_imgs", "=", "nr_S2_test_imgs", ",", "\n", "nr_S3_test_imgs", "=", "nr_S3_test_imgs", ",", "\n", "subfolder", "=", "image_folder", ")", "\n", "\n", "self", ".", "T_train", "=", "data", "[", "\"trainT_images\"", "]", "\n", "self", ".", "S1_train", "=", "data", "[", "\"trainS1_images\"", "]", "\n", "self", ".", "S2_train", "=", "data", "[", "\"trainS2_images\"", "]", "\n", "self", ".", "S3_train", "=", "data", "[", "\"trainS3_images\"", "]", "\n", "self", ".", "T_test", "=", "data", "[", "\"testT_images\"", "]", "\n", "self", ".", "S1_test", "=", "data", "[", "\"testS1_images\"", "]", "\n", "self", ".", "S2_test", "=", "data", "[", "\"testS2_images\"", "]", "\n", "self", ".", "S3_test", "=", "data", "[", "\"testS3_images\"", "]", "\n", "self", ".", "testT_image_names", "=", "data", "[", "\"testT_image_names\"", "]", "\n", "self", ".", "testS1_image_names", "=", "data", "[", "\"testS1_image_names\"", "]", "\n", "self", ".", "testS2_image_names", "=", "data", "[", "\"testS2_image_names\"", "]", "\n", "self", ".", "testS3_image_names", "=", "data", "[", "\"testS3_image_names\"", "]", "\n", "if", "not", "self", ".", "use_data_generator", ":", "\n", "            ", "print", "(", "'Data has been loaded'", ")", "\n", "\n", "# ======= Create designated run folder and store meta data ==========", "\n", "", "directory", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "self", ".", "date_time", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "self", ".", "writeMetaDataToJSON", "(", ")", "\n", "\n", "# ======= Avoid pre-allocating GPU memory ==========", "\n", "# TensorFlow wizardry", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "\n", "# Don't pre-allocate memory; allocate as-needed", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "# Create a session with the above options specified.", "\n", "K", ".", "tensorflow_backend", ".", "set_session", "(", "tf", ".", "Session", "(", "config", "=", "config", ")", ")", "\n", "\n", "# ======= Initialize training ==========", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "#plot_model(self.G_A2B, to_file='GA2B_expanded_model_new.png', show_shapes=True)", "\n", "#        self.train(epochs=self.epochs, batch_size=self.batch_size, save_interval=self.save_interval)", "\n", "self", ".", "load_model_and_generate_synthetic_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck": [[234, 241], ["keras.layers.Conv2D", "keras.layers.advanced_activations.LeakyReLU", "test.DiamondGAN.normalization"], "methods", ["None"], ["", "def", "ck", "(", "self", ",", "x", ",", "k", ",", "use_normalization", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "4", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "# Normalization is not done on the first discriminator layer", "\n", "if", "use_normalization", ":", "\n", "            ", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "", "x", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.c7Ak": [[242, 247], ["keras.layers.Conv2D", "test.DiamondGAN.normalization", "keras.layers.Activation"], "methods", ["None"], ["", "def", "c7Ak", "(", "self", ",", "x", ",", "k", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "7", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk": [[248, 253], ["keras.layers.Conv2D", "test.DiamondGAN.normalization", "keras.layers.Activation"], "methods", ["None"], ["", "def", "dk", "(", "self", ",", "x", ",", "k", ")", ":", "\n", "        ", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.Rk": [[254, 266], ["int", "keras.layers.add", "keras.layers.Conv2D", "test.DiamondGAN.normalization", "keras.layers.Activation", "keras.layers.Conv2D", "test.DiamondGAN.normalization"], "methods", ["None"], ["", "def", "Rk", "(", "self", ",", "x0", ")", ":", "\n", "        ", "k", "=", "int", "(", "x0", ".", "shape", "[", "-", "1", "]", ")", "\n", "# first layer", "\n", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "x0", ")", "\n", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "# second layer", "\n", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "# merge", "\n", "x", "=", "add", "(", "[", "x", ",", "x0", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk": [[267, 278], ["test.DiamondGAN.normalization", "keras.layers.Activation", "keras.layers.UpSampling2D", "test.ReflectionPadding2D", "keras.layers.Conv2D", "keras.layers.Conv2DTranspose"], "methods", ["None"], ["", "def", "uk", "(", "self", ",", "x", ",", "k", ")", ":", "\n", "# (up sampling followed by 1x1 convolution <=> fractional-strided 1/2)", "\n", "        ", "if", "self", ".", "use_resize_convolution", ":", "\n", "            ", "x", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ")", "(", "x", ")", "# Nearest neighbor upsampling", "\n", "x", "=", "ReflectionPadding2D", "(", "(", "1", ",", "1", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "Conv2DTranspose", "(", "filters", "=", "k", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ")", "(", "x", ")", "# this matches fractionally stided with stride 1/2", "\n", "", "x", "=", "self", ".", "normalization", "(", "axis", "=", "3", ",", "center", "=", "True", ",", "epsilon", "=", "1e-5", ")", "(", "x", ",", "training", "=", "True", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelMultiScaleDiscriminator": [[282, 292], ["keras.layers.Input", "keras.models.Model", "keras.layers.AveragePooling2D", "test.DiamondGAN.modelDiscriminator", "test.DiamondGAN.modelDiscriminator"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator"], ["", "def", "modelMultiScaleDiscriminator", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "x1", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "x2", "=", "AveragePooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "x1", ")", "\n", "#x4 = AveragePooling2D(pool_size=(2, 2))(x2)", "\n", "\n", "out_x1", "=", "self", ".", "modelDiscriminator", "(", "'D1'", ")", "(", "x1", ")", "\n", "out_x2", "=", "self", ".", "modelDiscriminator", "(", "'D2'", ")", "(", "x2", ")", "\n", "#out_x4 = self.modelDiscriminator('D4')(x4)", "\n", "\n", "return", "Model", "(", "inputs", "=", "x1", ",", "outputs", "=", "[", "out_x1", ",", "out_x2", "]", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelDiscriminator": [[293, 312], ["keras.layers.Input", "test.DiamondGAN.ck", "test.DiamondGAN.ck", "test.DiamondGAN.ck", "test.DiamondGAN.ck", "keras.models.Model", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Flatten", "keras.layers.core.Dense"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.ck"], ["", "def", "modelDiscriminator", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "# Specify input", "\n", "        ", "input_img", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "# Layer 1 (#Instance normalization is not used for this layer)", "\n", "x", "=", "self", ".", "ck", "(", "input_img", ",", "64", ",", "False", ")", "\n", "# Layer 2", "\n", "x", "=", "self", ".", "ck", "(", "x", ",", "128", ",", "True", ")", "\n", "# Layer 3", "\n", "x", "=", "self", ".", "ck", "(", "x", ",", "256", ",", "True", ")", "\n", "# Layer 4", "\n", "x", "=", "self", ".", "ck", "(", "x", ",", "512", ",", "True", ")", "\n", "# Output layer", "\n", "if", "self", ".", "use_patchgan", ":", "\n", "            ", "x", "=", "Conv2D", "(", "filters", "=", "1", ",", "kernel_size", "=", "4", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "Flatten", "(", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "1", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'sigmoid'", ")", "(", "x", ")", "\n", "return", "Model", "(", "inputs", "=", "input_img", ",", "outputs", "=", "x", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.modelGenerator": [[313, 356], ["keras.layers.Input", "keras.layers.Input", "test.DiamondGAN.c7Ak", "test.DiamondGAN.c7Ak", "test.DiamondGAN.dk", "test.DiamondGAN.dk", "test.DiamondGAN.dk", "test.DiamondGAN.dk", "range", "keras.layers.concatenate", "test.DiamondGAN.uk", "test.DiamondGAN.uk", "test.DiamondGAN.uk", "keras.models.Model", "test.ReflectionPadding2D", "test.ReflectionPadding2D", "test.DiamondGAN.dk", "test.DiamondGAN.dk", "test.DiamondGAN.Rk", "test.DiamondGAN.Rk", "test.DiamondGAN.uk", "test.ReflectionPadding2D", "keras.layers.Conv2D", "keras.layers.Activation"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.c7Ak", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.c7Ak", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.dk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.Rk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.Rk", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.uk"], ["", "def", "modelGenerator", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "# Specify input", "\n", "        ", "input_img", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "input_domain", "=", "Input", "(", "shape", "=", "self", ".", "domain_shape", ")", "\n", "\n", "# Layer 1", "\n", "x", "=", "ReflectionPadding2D", "(", "(", "3", ",", "3", ")", ")", "(", "input_img", ")", "\n", "d", "=", "ReflectionPadding2D", "(", "(", "3", ",", "3", ")", ")", "(", "input_domain", ")", "\n", "\n", "x", "=", "self", ".", "c7Ak", "(", "x", ",", "48", ")", "\n", "d", "=", "self", ".", "c7Ak", "(", "d", ",", "48", ")", "\n", "# Layer 2", "\n", "x", "=", "self", ".", "dk", "(", "x", ",", "72", ")", "\n", "d", "=", "self", ".", "dk", "(", "d", ",", "72", ")", "\n", "# Layer 3", "\n", "x", "=", "self", ".", "dk", "(", "x", ",", "144", ")", "\n", "d", "=", "self", ".", "dk", "(", "d", ",", "144", ")", "\n", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "# Layer 3.5", "\n", "            ", "x", "=", "self", ".", "dk", "(", "x", ",", "256", ")", "\n", "d", "=", "self", ".", "dk", "(", "d", ",", "256", ")", "\n", "#   x = concatenate([x, d], axis = -1)", "\n", "# Layer 4-12: Residual layer", "\n", "\n", "", "for", "_", "in", "range", "(", "4", ",", "13", ")", ":", "\n", "            ", "x", "=", "self", ".", "Rk", "(", "x", ")", "\n", "d", "=", "self", ".", "Rk", "(", "d", ")", "\n", "", "x", "=", "concatenate", "(", "[", "x", ",", "d", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "# Layer 12.5", "\n", "            ", "x", "=", "self", ".", "uk", "(", "x", ",", "128", ")", "\n", "\n", "# Layer 13", "\n", "", "x", "=", "self", ".", "uk", "(", "x", ",", "72", ")", "\n", "# Layer 14", "\n", "x", "=", "self", ".", "uk", "(", "x", ",", "48", ")", "\n", "d", "=", "self", ".", "uk", "(", "d", ",", "48", ")", "\n", "x", "=", "ReflectionPadding2D", "(", "(", "3", ",", "3", ")", ")", "(", "x", ")", "\n", "#     d = ReflectionPadding2D((3, 3))(d)", "\n", "x", "=", "Conv2D", "(", "3", ",", "kernel_size", "=", "7", ",", "strides", "=", "1", ")", "(", "x", ")", "\n", "x", "=", "Activation", "(", "'tanh'", ")", "(", "x", ")", "# They say they use Relu but really they do not", "\n", "return", "Model", "(", "inputs", "=", "[", "input_img", ",", "input_domain", "]", ",", "outputs", "=", "x", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.train": [[360, 603], ["collections.OrderedDict", "test.ImagePool", "test.ImagePool", "time.time", "range", "test.DiamondGAN.G_S2T.predict", "test.DiamondGAN.G_T2S.predict", "test.ImagePool.query", "test.ImagePool.query", "range", "range", "DS_losses.append", "DT_losses.append", "gS_d_losses_synthetic.append", "gT_d_losses_synthetic.append", "gS_losses_reconstructed.append", "gT_losses_reconstructed.append", "D_losses.append", "GS_losses.append", "GT_losses.append", "G_losses.append", "reconstruction_losses.append", "print", "print", "print", "print", "print", "print", "print", "print", "test.DiamondGAN.get_lr_linear_decay_rate", "test.DiamondGAN.writeLossDataToFile", "sys.stdout.flush", "test.DiamondGAN.D_S.train_on_batch", "test.DiamondGAN.D_T.train_on_batch", "test.DiamondGAN.D_S.train_on_batch", "test.DiamondGAN.D_T.train_on_batch", "range", "target_data.append", "target_data.append", "test.DiamondGAN.G_model.train_on_batch", "test.DiamondGAN.update_lr", "test.DiamondGAN.update_lr", "test.DiamondGAN.update_lr", "test.DiamondGAN.print_ETA", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.random.randint", "len", "numpy.load", "numpy.load", "range", "test.DiamondGAN.saveModel", "test.DiamondGAN.saveModel", "test.DiamondGAN.saveModel", "test.DiamondGAN.saveModel", "print", "print", "print", "sys.stdout.flush", "target_data.append", "target_data.append", "print", "sys.stdout.flush", "test.DiamondGAN.train.run_training_iteration"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ImagePool.query", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ImagePool.query", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.get_lr_linear_decay_rate", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.writeLossDataToFile", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.update_lr", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.update_lr", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.update_lr", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.print_ETA", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel", "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel"], ["", "def", "train", "(", "self", ",", "epochs", ",", "batch_size", "=", "1", ",", "save_interval", "=", "1", ")", ":", "\n", "        ", "def", "run_training_iteration", "(", "loop_index", ",", "epoch_iterations", ")", ":", "\n", "# ======= Discriminator training ==========", "\n", "# Generate batch of synthetic images", "\n", "            ", "synthetic_images_T", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "real_images_S", ",", "domain_matrix", "]", ")", "\n", "synthetic_images_S", "=", "self", ".", "G_T2S", ".", "predict", "(", "[", "real_images_T", ",", "domain_matrix", "]", ")", "\n", "synthetic_images_S", "=", "synthetic_pool_S", ".", "query", "(", "synthetic_images_S", ")", "\n", "synthetic_images_T", "=", "synthetic_pool_T", ".", "query", "(", "synthetic_images_T", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "discriminator_iterations", ")", ":", "\n", "                ", "DS_loss_real", "=", "self", ".", "D_S", ".", "train_on_batch", "(", "x", "=", "real_images_S", ",", "y", "=", "ones", ")", "\n", "DT_loss_real", "=", "self", ".", "D_T", ".", "train_on_batch", "(", "x", "=", "real_images_T", ",", "y", "=", "ones", ")", "\n", "DS_loss_synthetic", "=", "self", ".", "D_S", ".", "train_on_batch", "(", "x", "=", "synthetic_images_S", ",", "y", "=", "zeros", ")", "\n", "DT_loss_synthetic", "=", "self", ".", "D_T", ".", "train_on_batch", "(", "x", "=", "synthetic_images_T", ",", "y", "=", "zeros", ")", "\n", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "                    ", "DS_loss", "=", "sum", "(", "DS_loss_real", ")", "+", "sum", "(", "DS_loss_synthetic", ")", "\n", "DT_loss", "=", "sum", "(", "DT_loss_real", ")", "+", "sum", "(", "DT_loss_synthetic", ")", "\n", "print", "(", "'DS_losses: '", ",", "np", ".", "add", "(", "DS_loss_real", ",", "DS_loss_synthetic", ")", ")", "\n", "print", "(", "'DT_losses: '", ",", "np", ".", "add", "(", "DT_loss_real", ",", "DT_loss_synthetic", ")", ")", "\n", "", "else", ":", "\n", "                    ", "DS_loss", "=", "DS_loss_real", "+", "DS_loss_synthetic", "\n", "DT_loss", "=", "DT_loss_real", "+", "DT_loss_synthetic", "\n", "", "D_loss", "=", "DS_loss", "+", "DT_loss", "\n", "\n", "if", "self", ".", "discriminator_iterations", ">", "1", ":", "\n", "                    ", "print", "(", "'D_loss:'", ",", "D_loss", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# ======= Generator training ==========", "\n", "", "", "target_data", "=", "[", "real_images_S", ",", "real_images_T", "]", "# Compare reconstructed images to real images", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "                ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                    ", "target_data", ".", "append", "(", "ones", "[", "i", "]", ")", "\n", "target_data", ".", "append", "(", "ones", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "target_data", ".", "append", "(", "ones", ")", "\n", "target_data", ".", "append", "(", "ones", ")", "\n", "\n", "\n", "\n", "", "for", "_", "in", "range", "(", "self", ".", "generator_iterations", ")", ":", "\n", "                ", "G_loss", "=", "self", ".", "G_model", ".", "train_on_batch", "(", "\n", "x", "=", "[", "real_images_S", ",", "real_images_T", ",", "domain_matrix", "]", ",", "y", "=", "target_data", ")", "\n", "if", "self", ".", "generator_iterations", ">", "1", ":", "\n", "                    ", "print", "(", "'G_loss:'", ",", "G_loss", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "gS_d_loss_synthetic", "=", "G_loss", "[", "1", "]", "\n", "gT_d_loss_synthetic", "=", "G_loss", "[", "2", "]", "\n", "reconstruction_loss_S", "=", "G_loss", "[", "3", "]", "\n", "reconstruction_loss_T", "=", "G_loss", "[", "4", "]", "\n", "\n", "# Update learning rates", "\n", "if", "self", ".", "use_linear_decay", "and", "epoch", ">", "self", ".", "decay_epoch", ":", "\n", "                ", "self", ".", "update_lr", "(", "self", ".", "D_S", ",", "decay_D", ")", "\n", "self", ".", "update_lr", "(", "self", ".", "D_T", ",", "decay_D", ")", "\n", "self", ".", "update_lr", "(", "self", ".", "G_model", ",", "decay_G", ")", "\n", "\n", "# Store some training data", "\n", "", "DS_losses", ".", "append", "(", "DS_loss", ")", "\n", "DT_losses", ".", "append", "(", "DT_loss", ")", "\n", "gS_d_losses_synthetic", ".", "append", "(", "gS_d_loss_synthetic", ")", "\n", "gT_d_losses_synthetic", ".", "append", "(", "gT_d_loss_synthetic", ")", "\n", "gS_losses_reconstructed", ".", "append", "(", "reconstruction_loss_S", ")", "\n", "gT_losses_reconstructed", ".", "append", "(", "reconstruction_loss_T", ")", "\n", "\n", "GS_loss", "=", "gS_d_loss_synthetic", "+", "reconstruction_loss_S", "\n", "GT_loss", "=", "gT_d_loss_synthetic", "+", "reconstruction_loss_T", "\n", "D_losses", ".", "append", "(", "D_loss", ")", "\n", "GS_losses", ".", "append", "(", "GS_loss", ")", "\n", "GT_losses", ".", "append", "(", "GT_loss", ")", "\n", "G_losses", ".", "append", "(", "G_loss", ")", "\n", "reconstruction_loss", "=", "reconstruction_loss_S", "+", "reconstruction_loss_T", "\n", "reconstruction_losses", ".", "append", "(", "reconstruction_loss", ")", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "print", "(", "'Epoch----------------'", ",", "epoch", ",", "'/'", ",", "epochs", ")", "\n", "print", "(", "'Loop index----------------'", ",", "loop_index", "+", "1", ",", "'/'", ",", "epoch_iterations", ")", "\n", "print", "(", "'D_loss: '", ",", "D_loss", ")", "\n", "print", "(", "'G_loss: '", ",", "G_loss", "[", "0", "]", ")", "\n", "print", "(", "'reconstruction_loss: '", ",", "reconstruction_loss", ")", "\n", "print", "(", "'DS_loss:'", ",", "DS_loss", ")", "\n", "print", "(", "'DT_loss:'", ",", "DT_loss", ")", "\n", "\n", "if", "loop_index", "%", "20", "==", "0", ":", "\n", "# Save temporary images continously", "\n", "#   self.save_tmp_images(real_images_S, real_images_T, synthetic_images_S, synthetic_images_T)", "\n", "                ", "self", ".", "print_ETA", "(", "start_time", ",", "epoch", ",", "epoch_iterations", ",", "loop_index", ")", "\n", "\n", "\n", "# ======================================================================", "\n", "# Begin training", "\n", "# ======================================================================", "\n", "", "", "training_history", "=", "OrderedDict", "(", ")", "\n", "\n", "DS_losses", "=", "[", "]", "\n", "DT_losses", "=", "[", "]", "\n", "gS_d_losses_synthetic", "=", "[", "]", "\n", "gT_d_losses_synthetic", "=", "[", "]", "\n", "gS_losses_reconstructed", "=", "[", "]", "\n", "gT_losses_reconstructed", "=", "[", "]", "\n", "\n", "GS_losses", "=", "[", "]", "\n", "GT_losses", "=", "[", "]", "\n", "reconstruction_losses", "=", "[", "]", "\n", "D_losses", "=", "[", "]", "\n", "G_losses", "=", "[", "]", "\n", "\n", "# Image pools used to update the discriminators", "\n", "synthetic_pool_S", "=", "ImagePool", "(", "self", ".", "synthetic_pool_size", ")", "\n", "synthetic_pool_T", "=", "ImagePool", "(", "self", ".", "synthetic_pool_size", ")", "\n", "# self.saveImages('(init)')", "\n", "# labels", "\n", "if", "self", ".", "use_multiscale_discriminator", ":", "\n", "            ", "label_shape1", "=", "(", "batch_size", ",", ")", "+", "self", ".", "D_S", ".", "output_shape", "[", "0", "]", "[", "1", ":", "]", "\n", "label_shape2", "=", "(", "batch_size", ",", ")", "+", "self", ".", "D_S", ".", "output_shape", "[", "1", "]", "[", "1", ":", "]", "\n", "#label_shape4 = (batch_size,) + self.D_A.output_shape[2][1:]", "\n", "ones1", "=", "np", ".", "ones", "(", "shape", "=", "label_shape1", ")", "*", "self", ".", "REAL_LABEL", "\n", "ones2", "=", "np", ".", "ones", "(", "shape", "=", "label_shape2", ")", "*", "self", ".", "REAL_LABEL", "\n", "#ones4 = np.ones(shape=label_shape4) * self.REAL_LABEL", "\n", "ones", "=", "[", "ones1", ",", "ones2", "]", "# , ones4]", "\n", "zeros1", "=", "ones1", "*", "0", "\n", "zeros2", "=", "ones2", "*", "0", "\n", "#zeros4 = ones4 * 0", "\n", "zeros", "=", "[", "zeros1", ",", "zeros2", "]", "# , zeros4]", "\n", "", "else", ":", "\n", "            ", "label_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "D_S", ".", "output_shape", "[", "1", ":", "]", "\n", "ones", "=", "np", ".", "ones", "(", "shape", "=", "label_shape", ")", "*", "self", ".", "REAL_LABEL", "\n", "zeros", "=", "ones", "*", "0", "\n", "\n", "# Linear decay", "\n", "", "if", "self", ".", "use_linear_decay", ":", "\n", "            ", "decay_D", ",", "decay_G", "=", "self", ".", "get_lr_linear_decay_rate", "(", ")", "\n", "\n", "# Start stopwatch for ETAs", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "            ", "if", "self", ".", "use_data_generator", ":", "\n", "                ", "loop_index", "=", "1", "\n", "for", "images", "in", "self", ".", "data_generator", ":", "\n", "                    ", "real_images_T", "=", "images", "[", "0", "]", "\n", "real_images_S1", "=", "images", "[", "1", "]", "\n", "real_images_S2", "=", "images", "[", "2", "]", "\n", "real_images_S3", "=", "images", "[", "3", "]", "\n", "if", "len", "(", "real_images_T", ".", "shape", ")", "==", "3", ":", "\n", "                        ", "real_images_T", "=", "real_images_T", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S1", "=", "real_images_S1", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S2", "=", "real_images_S2", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S3", "=", "real_images_S3", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "# Run all training steps", "\n", "", "run_training_iteration", "(", "loop_index", ",", "self", ".", "data_generator", ".", "__len__", "(", ")", ")", "\n", "\n", "# Store models", "\n", "if", "loop_index", "%", "20000", "==", "0", ":", "\n", "                        ", "self", ".", "saveModel", "(", "self", ".", "D", ",", "loop_index", ")", "\n", "self", ".", "saveModel", "(", "self", ".", "G", ",", "loop_index", ")", "\n", "# Break if loop has ended", "\n", "", "if", "loop_index", ">=", "self", ".", "data_generator", ".", "__len__", "(", ")", ":", "\n", "                        ", "break", "\n", "", "loop_index", "+=", "1", "\n", "\n", "", "", "else", ":", "# Train with all data in cache", "\n", "                ", "T_train", "=", "self", ".", "T_train", "\n", "S1_train", "=", "self", ".", "S1_train", "\n", "S2_train", "=", "self", ".", "S2_train", "\n", "S3_train", "=", "self", ".", "S3_train", "\n", "random_order_T", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "T_train", ")", ",", "size", "=", "len", "(", "T_train", ")", ")", "\n", "\n", "epoch_iterations", "=", "len", "(", "random_order_T", ")", "\n", "#               min_nr_imgs = len(random_order_A)", "\n", "############################   KEY COMPONENT  ###################", "\n", "domain_matrix_all", "=", "np", ".", "load", "(", "'domain_matrix.npy'", ")", "\n", "domain_dictionary", "=", "np", ".", "load", "(", "'domain_dictionary.npy'", ")", "\n", "for", "loop_index", "in", "range", "(", "0", ",", "epoch_iterations", ",", "batch_size", ")", ":", "\n", "                    ", "indexes_T", "=", "random_order_T", "[", "loop_index", ":", "loop_index", "+", "batch_size", "]", "\n", "indexes_S1", "=", "indexes_T", "\n", "indexes_S2", "=", "indexes_T", "\n", "indexes_S3", "=", "indexes_T", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "real_images_T", "=", "T_train", "[", "indexes_T", "]", "\n", "\n", "# ", "\n", "real_images_S1", "=", "S1_train", "[", "indexes_S1", "]", "\n", "real_images_S2", "=", "S2_train", "[", "indexes_S2", "]", "\n", "real_images_S3", "=", "S3_train", "[", "indexes_S3", "]", "\n", "if", "len", "(", "real_images_S1", ".", "shape", ")", "==", "3", ":", "\n", "                        ", "real_images_T", "=", "real_images_T", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S1", "=", "real_images_S1", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S2", "=", "real_images_S2", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "real_images_S3", "=", "real_images_S3", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "# Run all training steps", "\n", "############ generating multi-channel input data based on the varied domain input", "\n", "# domain_dictionary = [[1, 0, 0],  [0, 1, 0], [0, 0, 1], [1, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]]", "\n", "#domain_matrix = np.zeros(np.shape(target_images), dtype = 'float64')", "\n", "", "real_images_T", "=", "np", ".", "concatenate", "(", "(", "real_images_T", ",", "real_images_T", ",", "real_images_T", ")", ",", "axis", "=", "-", "1", ")", "\n", "print", "(", "np", ".", "shape", "(", "real_images_T", ")", ")", "\n", "for", "dd", "in", "range", "(", "np", ".", "shape", "(", "domain_dictionary", ")", "[", "0", "]", ")", ":", "\n", "                        ", "real_images_S", "=", "np", ".", "concatenate", "(", "(", "real_images_S1", ",", "real_images_S2", ",", "real_images_S3", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "dd", "==", "0", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "real_images_S", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "1", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "real_images_S", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "2", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "real_images_S", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "3", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "4", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "", "if", "dd", "==", "5", ":", "\n", "                            ", "real_images_S", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "\n", "", "domain_matrix", "=", "np", ".", "tile", "(", "domain_matrix_all", "[", ":", ",", ":", ",", "dd", ":", "dd", "+", "1", "]", ",", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "# Run all training steps", "\n", "run_training_iteration", "(", "loop_index", ",", "epoch_iterations", ")", "\n", "\n", "#================== within epoch loop end ==========================", "\n", "", "", "", "if", "epoch", "%", "1", "==", "0", ":", "\n", "# self.saveModel(self.G_model)", "\n", "                ", "self", ".", "saveModel", "(", "self", ".", "D_S", ",", "epoch", ")", "\n", "self", ".", "saveModel", "(", "self", ".", "D_T", ",", "epoch", ")", "\n", "self", ".", "saveModel", "(", "self", ".", "G_S2T", ",", "epoch", ")", "\n", "self", ".", "saveModel", "(", "self", ".", "G_T2S", ",", "epoch", ")", "\n", "\n", "", "training_history", "=", "{", "\n", "'DS_losses'", ":", "DS_losses", ",", "\n", "'DT_losses'", ":", "DT_losses", ",", "\n", "'gS_d_losses_synthetic'", ":", "gS_d_losses_synthetic", ",", "\n", "'gT_d_losses_synthetic'", ":", "gT_d_losses_synthetic", ",", "\n", "'gS_losses_reconstructed'", ":", "gS_losses_reconstructed", ",", "\n", "'gT_losses_reconstructed'", ":", "gT_losses_reconstructed", ",", "\n", "'D_losses'", ":", "D_losses", ",", "\n", "'G_losses'", ":", "G_losses", ",", "\n", "'reconstruction_losses'", ":", "reconstruction_losses", "}", "\n", "self", ".", "writeLossDataToFile", "(", "training_history", ")", "\n", "\n", "# Flush out prints each loop iteration", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.lse": [[606, 609], ["tensorflow.reduce_mean", "tensorflow.squared_difference"], "methods", ["None"], ["", "", "def", "lse", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "squared_difference", "(", "y_pred", ",", "y_true", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.cycle_loss": [[610, 613], ["tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], ["", "def", "cycle_loss", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "# normal L1 loss ", "\n", "        ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "y_pred", "-", "y_true", ")", ")", "\n", "return", "loss", "\n", "#    def combined_loss(self, y_true, y_pred):", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.truncateAndSave": [[632, 653], ["synthetic.clip.clip.clip", "reconstructed.clip.clip.clip", "scipy.misc.toimage().save", "len", "numpy.hstack", "numpy.hstack", "len", "scipy.misc.toimage"], "methods", ["None"], ["", "def", "truncateAndSave", "(", "self", ",", "real_", ",", "real", ",", "synthetic", ",", "reconstructed", ",", "path_name", ")", ":", "\n", "        ", "if", "len", "(", "real", ".", "shape", ")", ">", "3", ":", "\n", "            ", "real", "=", "real", "[", "0", "]", "\n", "synthetic", "=", "synthetic", "[", "0", "]", "\n", "reconstructed", "=", "reconstructed", "[", "0", "]", "\n", "\n", "", "synthetic", "=", "synthetic", ".", "clip", "(", "min", "=", "0", ")", "\n", "reconstructed", "=", "reconstructed", ".", "clip", "(", "min", "=", "0", ")", "\n", "\n", "# Append and save", "\n", "if", "real_", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "real_", ".", "shape", ")", ">", "4", ":", "\n", "                ", "real_", "=", "real_", "[", "0", "]", "\n", "", "image", "=", "np", ".", "hstack", "(", "(", "real_", "[", "0", "]", ",", "real", ",", "synthetic", ",", "reconstructed", ")", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "np", ".", "hstack", "(", "(", "real", ",", "synthetic", ",", "reconstructed", ")", ")", "\n", "\n", "", "if", "self", ".", "channels", "==", "1", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "", "toimage", "(", "image", ",", "cmin", "=", "0", ",", "cmax", "=", "1", ")", ".", "save", "(", "path_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.get_lr_linear_decay_rate": [[702, 718], ["len", "max", "len", "len"], "methods", ["None"], ["", "def", "get_lr_linear_decay_rate", "(", "self", ")", ":", "\n", "# Calculate decay rates", "\n", "        ", "if", "self", ".", "use_data_generator", ":", "\n", "            ", "max_nr_images", "=", "len", "(", "self", ".", "data_generator", ")", "\n", "", "else", ":", "\n", "            ", "max_nr_images", "=", "max", "(", "len", "(", "self", ".", "S1_train", ")", ",", "len", "(", "self", ".", "T_train", ")", ")", "\n", "\n", "", "updates_per_epoch_D", "=", "2", "*", "max_nr_images", "+", "self", ".", "discriminator_iterations", "-", "1", "\n", "updates_per_epoch_G", "=", "max_nr_images", "+", "self", ".", "generator_iterations", "-", "1", "\n", "\n", "denominator_D", "=", "(", "self", ".", "epochs", "-", "self", ".", "decay_epoch", ")", "*", "updates_per_epoch_D", "\n", "denominator_G", "=", "(", "self", ".", "epochs", "-", "self", ".", "decay_epoch", ")", "*", "updates_per_epoch_G", "\n", "decay_D", "=", "self", ".", "learning_rate_D", "/", "denominator_D", "\n", "decay_G", "=", "self", ".", "learning_rate_G", "/", "denominator_G", "\n", "\n", "return", "decay_D", ",", "decay_G", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.update_lr": [[719, 725], ["keras.set_value", "keras.get_value"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "model", ",", "decay", ")", ":", "\n", "        ", "new_lr", "=", "K", ".", "get_value", "(", "model", ".", "optimizer", ".", "lr", ")", "-", "decay", "\n", "if", "new_lr", "<", "0", ":", "\n", "            ", "new_lr", "=", "0", "\n", "# print(K.get_value(model.optimizer.lr))", "\n", "", "K", ".", "set_value", "(", "model", ".", "optimizer", ".", "lr", ",", "new_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.print_ETA": [[726, 737], ["round", "str", "str", "print", "time.time", "datetime.timedelta", "datetime.timedelta", "round"], "methods", ["None"], ["", "def", "print_ETA", "(", "self", ",", "start_time", ",", "epoch", ",", "epoch_iterations", ",", "loop_index", ")", ":", "\n", "        ", "passed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "\n", "iterations_so_far", "=", "(", "(", "epoch", "-", "1", ")", "*", "epoch_iterations", "+", "loop_index", ")", "/", "self", ".", "batch_size", "\n", "iterations_total", "=", "self", ".", "epochs", "*", "epoch_iterations", "/", "self", ".", "batch_size", "\n", "iterations_left", "=", "iterations_total", "-", "iterations_so_far", "\n", "eta", "=", "round", "(", "passed_time", "/", "(", "iterations_so_far", "+", "1e-5", ")", "*", "iterations_left", ")", "\n", "\n", "passed_time_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "round", "(", "passed_time", ")", ")", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "eta", ")", ")", "\n", "print", "(", "'Time passed'", ",", "passed_time_string", ",", "': ETA in'", ",", "eta_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.saveModel": [[742, 756], ["os.path.join", "model.save_weights", "model.save_weights", "model.to_json", "print", "os.path.exists", "os.makedirs", "open", "json.dump"], "methods", ["None"], ["", "def", "saveModel", "(", "self", ",", "model", ",", "epoch", ")", ":", "\n", "# Create folder to save model architecture and weights", "\n", "        ", "directory", "=", "os", ".", "path", ".", "join", "(", "'saved_models'", ",", "self", ".", "date_time", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "model_path_w", "=", "'saved_models/{}/{}_weights_epoch_{}.hdf5'", ".", "format", "(", "self", ".", "date_time", ",", "model", ".", "name", ",", "epoch", ")", "\n", "model", ".", "save_weights", "(", "model_path_w", ")", "\n", "model_path_m", "=", "'saved_models/{}/{}_model_epoch_{}.json'", ".", "format", "(", "self", ".", "date_time", ",", "model", ".", "name", ",", "epoch", ")", "\n", "model", ".", "save_weights", "(", "model_path_m", ")", "\n", "json_string", "=", "model", ".", "to_json", "(", ")", "\n", "with", "open", "(", "model_path_m", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "json_string", ",", "outfile", ")", "\n", "", "print", "(", "'{} has been saved in saved_models/{}/'", ".", "format", "(", "model", ".", "name", ",", "self", ".", "date_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.writeLossDataToFile": [[757, 763], ["sorted", "history.keys", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "zip"], "methods", ["None"], ["", "def", "writeLossDataToFile", "(", "self", ",", "history", ")", ":", "\n", "        ", "keys", "=", "sorted", "(", "history", ".", "keys", "(", ")", ")", "\n", "with", "open", "(", "'images/{}/loss_output.csv'", ".", "format", "(", "self", ".", "date_time", ")", ",", "'w'", ")", "as", "csv_file", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "writer", ".", "writerow", "(", "keys", ")", "\n", "writer", ".", "writerows", "(", "zip", "(", "*", "[", "history", "[", "key", "]", "for", "key", "in", "keys", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.writeMetaDataToJSON": [[764, 799], ["os.path.join", "data[].append", "os.path.exists", "os.makedirs", "open", "json.dump", "str", "len", "len", "len", "len"], "methods", ["None"], ["", "", "def", "writeMetaDataToJSON", "(", "self", ")", ":", "\n", "\n", "        ", "directory", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "self", ".", "date_time", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "# Save meta_data", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "'meta_data'", "]", "=", "[", "]", "\n", "data", "[", "'meta_data'", "]", ".", "append", "(", "{", "\n", "'img shape: height,width,channels'", ":", "self", ".", "img_shape", ",", "\n", "'batch size'", ":", "self", ".", "batch_size", ",", "\n", "'save interval'", ":", "self", ".", "save_interval", ",", "\n", "'normalization function'", ":", "str", "(", "self", ".", "normalization", ")", ",", "\n", "'lambda_1'", ":", "self", ".", "lambda_1", ",", "\n", "'lambda_d'", ":", "self", ".", "lambda_D", ",", "\n", "'learning_rate_D'", ":", "self", ".", "learning_rate_D", ",", "\n", "'learning rate G'", ":", "self", ".", "learning_rate_G", ",", "\n", "'epochs'", ":", "self", ".", "epochs", ",", "\n", "'use linear decay on learning rates'", ":", "self", ".", "use_linear_decay", ",", "\n", "'use multiscale discriminator'", ":", "self", ".", "use_multiscale_discriminator", ",", "\n", "'epoch where learning rate linear decay is initialized (if use_linear_decay)'", ":", "self", ".", "decay_epoch", ",", "\n", "'generator iterations'", ":", "self", ".", "generator_iterations", ",", "\n", "'discriminator iterations'", ":", "self", ".", "discriminator_iterations", ",", "\n", "'use patchGan in discriminator'", ":", "self", ".", "use_patchgan", ",", "\n", "'beta 1'", ":", "self", ".", "beta_1", ",", "\n", "'beta 2'", ":", "self", ".", "beta_2", ",", "\n", "'REAL_LABEL'", ":", "self", ".", "REAL_LABEL", ",", "\n", "'number of T train examples'", ":", "len", "(", "self", ".", "T_train", ")", ",", "\n", "'number of S1 train examples'", ":", "len", "(", "self", ".", "S1_train", ")", ",", "\n", "'number of T test examples'", ":", "len", "(", "self", ".", "T_test", ")", ",", "\n", "'number of S1 test examples'", ":", "len", "(", "self", ".", "S1_test", ")", ",", "\n", "}", ")", "\n", "\n", "with", "open", "(", "'images/{}/meta_data.json'", ".", "format", "(", "self", ".", "date_time", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "outfile", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.load_model_and_weights": [[800, 805], ["os.path.join", "os.path.join", "model.load_weights"], "methods", ["None"], ["", "", "def", "load_model_and_weights", "(", "self", ",", "model", ")", ":", "\n", "        ", "path_to_model", "=", "os", ".", "path", ".", "join", "(", "'generate_images'", ",", "'models'", ",", "'{}.json'", ".", "format", "(", "model", ".", "name", ")", ")", "\n", "path_to_weights", "=", "os", ".", "path", ".", "join", "(", "'generate_images'", ",", "'models'", ",", "'{}.hdf5'", ".", "format", "(", "model", ".", "name", ")", ")", "\n", "#model = model_from_json(path_to_model)", "\n", "model", ".", "load_weights", "(", "path_to_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.load_model_and_generate_synthetic_images": [[806, 893], ["[].lower", "numpy.load", "numpy.load", "test.DiamondGAN.load_model_and_weights", "range", "scipy.misc.imsave", "len", "numpy.concatenate", "numpy.tile", "input", "os.path.join", "numpy.shape", "test.DiamondGAN.G_S2T.predict", "range", "test.DiamondGAN.G_S2T.predict", "range", "test.DiamondGAN.G_S2T.predict", "range", "test.DiamondGAN.G_S2T.predict", "range", "test.DiamondGAN.G_S2T.predict", "range", "test.DiamondGAN.G_S2T.predict", "range", "test.DiamondGAN.G_S2T.predict", "range", "len", "test.DiamondGAN.load_model_and_generate_synthetic_images.save_image"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.DiamondGAN.load_model_and_weights"], ["", "def", "load_model_and_generate_synthetic_images", "(", "self", ")", ":", "\n", "        ", "response", "=", "input", "(", "'Are you sure you want to generate synthetic images instead of training? (y/n): '", ")", "[", "0", "]", ".", "lower", "(", ")", "\n", "if", "response", "==", "'y'", ":", "\n", "            ", "domain_matrix_all", "=", "np", ".", "load", "(", "'domain_matrix.npy'", ")", "\n", "domain_dictionary", "=", "np", ".", "load", "(", "'domain_dictionary.npy'", ")", "\n", "self", ".", "load_model_and_weights", "(", "self", ".", "G_S2T", ")", "\n", "# save function", "\n", "def", "save_image", "(", "image", ",", "name", ",", "domain", ")", ":", "\n", "#                image = image[:, :, 0]", "\n", "                ", "scipy", ".", "misc", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "'generate_images'", ",", "'synthetic_images'", ",", "domain", ",", "name", ")", ",", "image", ")", "\n", "\n", "############ generating multi-channel input data based on the varied domain input", "\n", "# domain_dictionary = [[1, 0, 0],  [0, 1, 0], [0, 0, 1], [1, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]]", "\n", "", "S1_test", "=", "self", ".", "S1_test", "\n", "if", "len", "(", "S1_test", ".", "shape", ")", "==", "3", ":", "\n", "                ", "S1_test", "=", "self", ".", "S1_test", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "S2_test", "=", "self", ".", "S2_test", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "S3_test", "=", "self", ".", "S3_test", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "#input_all = np.concatenate((B_test, C_test), axis = -1)", "\n", "\n", "", "for", "dd", "in", "range", "(", "np", ".", "shape", "(", "domain_dictionary", ")", "[", "0", "]", ")", ":", "\n", "                ", "S_test", "=", "np", ".", "concatenate", "(", "(", "S1_test", ",", "S2_test", ",", "S3_test", ")", ",", "axis", "=", "-", "1", ")", "\n", "domain_matrix", "=", "np", ".", "tile", "(", "domain_matrix_all", "[", ":", ",", ":", ",", "dd", ":", "dd", "+", "1", "]", ",", "(", "np", ".", "shape", "(", "S_test", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "if", "dd", "==", "0", ":", "\n", "                    ", "S_test", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "S_test", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "S_test", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testT_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_100'", ")", "\n", "", "", "if", "dd", "==", "1", ":", "\n", "                    ", "S_test", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "S_test", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "S_test", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testT_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_010'", ")", "\n", "", "", "if", "dd", "==", "2", ":", "\n", "                    ", "S_test", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "S_test", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "input_images", "=", "S_test", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "input_images", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testT_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_001'", ")", "\n", "", "", "if", "dd", "==", "3", ":", "\n", "                    ", "S_test", "[", "...", ",", "2", "]", "=", "-", "1", "\n", "input_images", "=", "S_test", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "input_images", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testT_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_110'", ")", "\n", "", "", "if", "dd", "==", "4", ":", "\n", "                    ", "S_test", "[", "...", ",", "0", "]", "=", "-", "1", "\n", "input_images", "=", "S_test", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "input_images", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testT_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", ",", ":", ",", ":", ",", "1", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_011'", ")", "\n", "", "", "if", "dd", "==", "5", ":", "\n", "                    ", "S_test", "[", "...", ",", "1", "]", "=", "-", "1", "\n", "input_images", "=", "S_test", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "input_images", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testT_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", ",", ":", ",", ":", ",", "0", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_101'", ")", "\n", "", "", "if", "dd", "==", "6", ":", "\n", "\n", "                    ", "input_images", "=", "S_test", "\n", "synthetic_images", "=", "self", ".", "G_S2T", ".", "predict", "(", "[", "input_images", ",", "domain_matrix", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "synthetic_images", ")", ")", ":", "\n", "# Get the name from the image it was conditioned on", "\n", "                        ", "name", "=", "self", ".", "testT_image_names", "[", "i", "]", ".", "strip", "(", "'.png'", ")", "+", "'_synthetic.png'", "\n", "synt_A", "=", "synthetic_images", "[", "i", ",", ":", ",", ":", ",", "1", "]", "\n", "save_image", "(", "synt_A", ",", "name", ",", "'T_111'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ReflectionPadding2D.__init__": [[897, 901], ["tuple", "keras.layers.Layer.__init__", "keras_contrib.layers.normalization.InputSpec"], "methods", ["home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ImagePool.__init__"], ["    ", "def", "__init__", "(", "self", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "padding", "=", "tuple", "(", "padding", ")", "\n", "self", ".", "input_spec", "=", "[", "InputSpec", "(", "ndim", "=", "4", ")", "]", "\n", "super", "(", "ReflectionPadding2D", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ReflectionPadding2D.compute_output_shape": [[902, 904], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "(", "s", "[", "0", "]", ",", "s", "[", "1", "]", "+", "2", "*", "self", ".", "padding", "[", "0", "]", ",", "s", "[", "2", "]", "+", "2", "*", "self", ".", "padding", "[", "1", "]", ",", "s", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ReflectionPadding2D.call": [[905, 908], ["tensorflow.pad"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "w_pad", ",", "h_pad", "=", "self", ".", "padding", "\n", "return", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "h_pad", ",", "h_pad", "]", ",", "[", "w_pad", ",", "w_pad", "]", ",", "[", "0", ",", "0", "]", "]", ",", "'REFLECT'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ImagePool.__init__": [[911, 916], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hongweilibran_DiamondGAN.None.test.ImagePool.query": [[917, 955], ["len", "random.uniform", "len", "numpy.vstack", "len", "numpy.vstack", "random.randint", "len", "numpy.vstack", "len", "numpy.vstack"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "                ", "image", "=", "image", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "# fill up the image pool", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "if", "len", "(", "self", ".", "images", ")", "==", "0", ":", "\n", "                    ", "self", ".", "images", "=", "image", "\n", "", "else", ":", "\n", "                    ", "self", ".", "images", "=", "np", ".", "vstack", "(", "(", "self", ".", "images", ",", "image", ")", ")", "\n", "\n", "", "if", "len", "(", "return_images", ")", "==", "0", ":", "\n", "                    ", "return_images", "=", "image", "\n", "", "else", ":", "\n", "                    ", "return_images", "=", "np", ".", "vstack", "(", "(", "return_images", ",", "image", ")", ")", "\n", "\n", "", "", "else", ":", "# 50% chance that we replace an old synthetic image", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", ",", ":", ",", ":", ",", ":", "]", "\n", "tmp", "=", "tmp", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "images", "[", "random_id", ",", ":", ",", ":", ",", ":", "]", "=", "image", "[", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "if", "len", "(", "return_images", ")", "==", "0", ":", "\n", "                        ", "return_images", "=", "tmp", "\n", "", "else", ":", "\n", "                        ", "return_images", "=", "np", ".", "vstack", "(", "(", "return_images", ",", "tmp", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "len", "(", "return_images", ")", "==", "0", ":", "\n", "                        ", "return_images", "=", "image", "\n", "", "else", ":", "\n", "                        ", "return_images", "=", "np", ".", "vstack", "(", "(", "return_images", ",", "image", ")", ")", "\n", "\n", "", "", "", "", "return", "return_images", "\n", "\n"]]}