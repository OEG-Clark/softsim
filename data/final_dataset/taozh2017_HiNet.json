{"home.repos.pwc.inspect_result.taozh2017_HiNet.None.config.parse": [[35, 48], ["kwargs.items", "print", "config..__class__.__dict__.items", "setattr", "hasattr", "warnings.warn", "k.startswith", "print", "getattr"], "function", ["None"], ["", "def", "parse", "(", "self", ",", "kwargs", ")", ":", "\n", "        ", "'''\n        \u6839\u636e\u5b57\u5178kwargs \u66f4\u65b0 config\u53c2\u6570\n        '''", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "k", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"Warning: opt has not attribut %s\"", "%", "k", ")", "\n", "", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "'user config:'", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "__class__", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "k", ".", "startswith", "(", "'__'", ")", ":", "\n", "                ", "print", "(", "k", ",", "getattr", "(", "self", ",", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.main.train": [[15, 21], ["config.opt.parse", "HiNet_SynthModel.LatentSynthModel", "HiNet_SynthModel.LatentSynthModel.train"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.None.config.parse", "home.repos.pwc.inspect_result.taozh2017_HiNet.None.HiNet_SynthModel.LatentSynthModel.train"], ["def", "train", "(", "**", "kwargs", ")", ":", "\n", "\n", "    ", "opt", ".", "parse", "(", "kwargs", ")", "\n", "\n", "SynModel", "=", "LatentSynthModel", "(", "opt", "=", "opt", ")", "\n", "SynModel", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.main.test": [[23, 28], ["config.opt.parse", "HiNet_SynthModel.LatentSynthModel", "HiNet_SynthModel.LatentSynthModel.test"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.None.config.parse", "home.repos.pwc.inspect_result.taozh2017_HiNet.None.HiNet_SynthModel.LatentSynthModel.test"], ["", "def", "test", "(", "**", "kwargs", ")", ":", "\n", "\n", "    ", "opt", ".", "parse", "(", "kwargs", ")", "\n", "SynModel", "=", "LatentSynthModel", "(", "opt", "=", "opt", ")", "\n", "SynModel", ".", "test", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.dataset.MultiModalityData_load.__init__": [[38, 54], ["sorted", "numpy.array", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "int", "[].split", "x.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "transforms", "=", "None", ",", "train", "=", "True", ",", "test", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "train", "=", "train", "\n", "\n", "if", "self", ".", "test", ":", "\n", "            ", "path_test", "=", "opt", ".", "data_path", "+", "'test/'", "\n", "data_paths", "=", "[", "os", ".", "path", ".", "join", "(", "path_test", ",", "i", ")", "for", "i", "in", "os", ".", "listdir", "(", "path_test", ")", "]", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "path_train", "=", "opt", ".", "data_path", "+", "'train/'", "\n", "data_paths", "=", "[", "os", ".", "path", ".", "join", "(", "path_train", ",", "i", ")", "for", "i", "in", "os", ".", "listdir", "(", "path_train", ")", "]", "\n", "\n", "", "data_paths", "=", "sorted", "(", "data_paths", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "data_paths", "=", "np", ".", "array", "(", "data_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.dataset.MultiModalityData_load.__getitem__": [[56, 72], ["funcs.utils.loadSubjectData", "funcs.utils.generate_all_2D_patches", "funcs.utils.generate_all_2D_patches", "funcs.utils.generate_all_2D_patches", "funcs.utils.generate_all_2D_patches"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.loadSubjectData", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_all_2D_patches", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_all_2D_patches", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_all_2D_patches", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_all_2D_patches"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# path", "\n", "        ", "cur_path", "=", "self", ".", "data_paths", "[", "index", "]", "\n", "\n", "# get images", "\n", "img_t1", ",", "img_t1ce", ",", "img_t2", ",", "img_flair", "=", "loadSubjectData", "(", "cur_path", ")", "\n", "\n", "\n", "# split into patches (128*128) ", "\n", "img_t1_patches", "=", "generate_all_2D_patches", "(", "img_t1", ")", "\n", "img_t1ce_patches", "=", "generate_all_2D_patches", "(", "img_t1ce", ")", "\n", "img_t2_patches", "=", "generate_all_2D_patches", "(", "img_t2", ")", "\n", "img_flair_patches", "=", "generate_all_2D_patches", "(", "img_flair", ")", "\n", "\n", "return", "img_t1_patches", ",", "img_t1ce_patches", ",", "img_t2_patches", ",", "img_flair_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.dataset.MultiModalityData_load.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.dataset.loadSubjectData": [[18, 34], ["scipy.loadmat", "[].astype", "[].astype", "[].astype", "[].astype"], "function", ["None"], ["def", "loadSubjectData", "(", "path", ")", ":", "\n", "\n", "    ", "data_imgs", "=", "scio", ".", "loadmat", "(", "path", ")", "\n", "\n", "img_flair", "=", "data_imgs", "[", "'data_img'", "]", "[", "'flair'", "]", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_t1", "=", "data_imgs", "[", "'data_img'", "]", "[", "'t1'", "]", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_t1ce", "=", "data_imgs", "[", "'data_img'", "]", "[", "'t1ce'", "]", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_t2", "=", "data_imgs", "[", "'data_img'", "]", "[", "'t2'", "]", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# crop 160*180 images", "\n", "img_t1", "=", "img_t1", "[", "40", ":", "200", ",", "20", ":", "200", ",", ":", "]", "\n", "img_t1ce", "=", "img_t1ce", "[", "40", ":", "200", ",", "20", ":", "200", ",", ":", "]", "\n", "img_t2", "=", "img_t2", "[", "40", ":", "200", ",", "20", ":", "200", ",", ":", "]", "\n", "img_flair", "=", "img_flair", "[", "40", ":", "200", ",", "20", ":", "200", ",", ":", "]", "\n", "\n", "return", "img_t1", ",", "img_t1ce", ",", "img_t2", ",", "img_flair", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.HiNet_SynthModel.LatentSynthModel.__init__": [[47, 60], ["model.Multi_modal_generator", "model.Discriminator", "HiNet_SynthModel.LatentSynthModel.generator.cuda", "HiNet_SynthModel.LatentSynthModel.discrimator.cuda", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "generator", "=", "models", ".", "Multi_modal_generator", "(", "1", ",", "1", ",", "32", ")", "\n", "self", ".", "discrimator", "=", "models", ".", "Discriminator", "(", ")", "\n", "\n", "if", "opt", ".", "use_gpu", ":", "\n", "            ", "self", ".", "generator", "=", "self", ".", "generator", ".", "cuda", "(", ")", "\n", "self", ".", "discrimator", "=", "self", ".", "discrimator", ".", "cuda", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "generator", "=", "nn", ".", "DataParallel", "(", "self", ".", "generator", ",", "device_ids", "=", "self", ".", "opt", ".", "gpu_id", ")", "\n", "self", ".", "discrimator", "=", "nn", ".", "DataParallel", "(", "self", ".", "discrimator", ",", "device_ids", "=", "self", ".", "opt", ".", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.HiNet_SynthModel.LatentSynthModel.train": [[64, 176], ["funcs.utils.Logger", "funcs.utils.Logger.set_names", "HiNet_SynthModel.LatentSynthModel.generator.apply", "HiNet_SynthModel.LatentSynthModel.discrimator.apply", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.MSELoss().cuda", "torch.MSELoss().cuda", "torch.MSELoss().cuda", "torch.MSELoss().cuda", "torch.L1Loss().cuda", "torch.L1Loss().cuda", "torch.L1Loss().cuda", "torch.L1Loss().cuda", "dataset.MultiModalityData_load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "range", "os.path.isdir", "funcs.utils.mkdir_p", "os.path.join", "HiNet_SynthModel.LatentSynthModel.discrimator.parameters", "HiNet_SynthModel.LatentSynthModel.generator.parameters", "enumerate", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "funcs.utils.Logger.append", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "print", "funcs.utils.model_task", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "HiNet_SynthModel.LatentSynthModel.generator", "torch.L1Loss().cuda.", "torch.L1Loss().cuda.", "torch.L1Loss().cuda.", "torch.MSELoss().cuda.", "loss_G.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.MSELoss().cuda.", "torch.MSELoss().cuda.", "loss_D.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "datetime.timedelta", "time.time", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "funcs.utils.LambdaLR", "funcs.utils.LambdaLR", "x1.cuda.cuda.cuda", "x2.cuda.cuda.cuda", "x3.cuda.cuda.cuda", "HiNet_SynthModel.LatentSynthModel.discrimator", "HiNet_SynthModel.LatentSynthModel.discrimator", "HiNet_SynthModel.LatentSynthModel.discrimator", "loss_D.item", "loss_G.item", "HiNet_SynthModel.LatentSynthModel.generator.state_dict", "HiNet_SynthModel.LatentSynthModel.discrimator.state_dict", "str", "str", "len", "loss_D.item", "loss_G.item", "str", "len", "str", "str", "time.time"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.set_names", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.mkdir_p", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.append", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.model_task", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "opt", ".", "save_path", "+", "'/'", "+", "'task_'", "+", "str", "(", "self", ".", "opt", ".", "task_id", ")", "+", "'/'", ")", ":", "\n", "            ", "mkdir_p", "(", "self", ".", "opt", ".", "save_path", "+", "'/'", "+", "'task_'", "+", "str", "(", "self", ".", "opt", ".", "task_id", ")", "+", "'/'", ")", "\n", "\n", "", "logger", "=", "Logger", "(", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "save_path", "+", "'/'", "+", "'task_'", "+", "str", "(", "self", ".", "opt", ".", "task_id", ")", "+", "'/'", "+", "'run_log.txt'", ")", ",", "title", "=", "''", ")", "\n", "logger", ".", "set_names", "(", "[", "'Run epoch'", ",", "'D Loss'", ",", "'G Loss'", "]", ")", "\n", "\n", "#", "\n", "self", ".", "generator", ".", "apply", "(", "weights_init_normal", ")", "\n", "self", ".", "discrimator", ".", "apply", "(", "weights_init_normal", ")", "\n", "print", "(", "'weights_init_normal'", ")", "\n", "\n", "# Optimizers", "\n", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "discrimator", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "b1", ",", "self", ".", "opt", ".", "b2", ")", ")", "\n", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "generator", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "b1", ",", "self", ".", "opt", ".", "b2", ")", ")", "\n", "\n", "# Learning rate update schedulers", "\n", "lr_scheduler_G", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer_G", ",", "lr_lambda", "=", "LambdaLR", "(", "self", ".", "opt", ".", "epochs", ",", "0", ",", "self", ".", "opt", ".", "decay_epoch", ")", ".", "step", ")", "\n", "lr_scheduler_D", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer_D", ",", "lr_lambda", "=", "LambdaLR", "(", "self", ".", "opt", ".", "epochs", ",", "0", ",", "self", ".", "opt", ".", "decay_epoch", ")", ".", "step", ")", "\n", "\n", "\n", "# Lossesgenerator", "\n", "criterion_GAN", "=", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "criterion_identity", "=", "nn", ".", "L1Loss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# Load data        ", "\n", "train_data", "=", "MultiModalityData_load", "(", "self", ".", "opt", ",", "train", "=", "True", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_data", ",", "batch_size", "=", "self", ".", "opt", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "\n", "batches_done", "=", "0", "\n", "prev_time", "=", "time", ".", "time", "(", ")", "\n", "# ---------------------------- *training * ---------------------------------", "\n", "for", "epoch", "in", "range", "(", "self", ".", "opt", ".", "epochs", ")", ":", "\n", "            ", "for", "ii", ",", "inputs", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "print", "(", "ii", ")", "\n", "\n", "# define diferent synthesis tasks", "\n", "[", "x1", ",", "x2", ",", "x3", "]", "=", "model_task", "(", "inputs", ",", "self", ".", "opt", ".", "task_id", ")", "# train different synthesis task", "\n", "\n", "fake", "=", "torch", ".", "zeros", "(", "[", "inputs", "[", "0", "]", ".", "shape", "[", "1", "]", "*", "inputs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "1", ",", "6", ",", "6", "]", ",", "requires_grad", "=", "False", ")", "#.cuda()", "\n", "valid", "=", "torch", ".", "ones", "(", "[", "inputs", "[", "0", "]", ".", "shape", "[", "1", "]", "*", "inputs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "1", ",", "6", ",", "6", "]", ",", "requires_grad", "=", "False", ")", "#.cuda()", "\n", "\n", "###############################################################                     ", "\n", "if", "self", ".", "opt", ".", "use_gpu", ":", "\n", "                    ", "x1", "=", "x1", ".", "cuda", "(", ")", "\n", "x2", "=", "x2", ".", "cuda", "(", ")", "\n", "x3", "=", "x3", ".", "cuda", "(", ")", "\n", "\n", "", "x_fu", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# ----------------------", "\n", "#  Train generator", "\n", "# ----------------------", "\n", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "\n", "x_fake", ",", "x1_re", ",", "x2_re", "=", "self", ".", "generator", "(", "x_fu", ")", "\n", "\n", "# Identity loss", "\n", "loss_re3", "=", "criterion_identity", "(", "x_fake", ",", "x3", ")", "\n", "loss_re1", "=", "criterion_identity", "(", "x1_re", ",", "x1", ")", "\n", "loss_re2", "=", "criterion_identity", "(", "x2_re", ",", "x2", ")", "\n", "\n", "\n", "# gan loss ", "\n", "loss_GAN", "=", "criterion_GAN", "(", "self", ".", "discrimator", "(", "x_fake", ")", ",", "valid", ")", "\n", "\n", "# total loss", "\n", "loss_G", "=", "loss_GAN", "+", "100", "*", "loss_re3", "+", "20", "*", "loss_re1", "+", "20", "*", "loss_re2", "\n", "\n", "\n", "loss_G", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# ----------------------", "\n", "#  Train Discriminators", "\n", "# ----------------------", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "# Real loss", "\n", "loss_real", "=", "criterion_GAN", "(", "self", ".", "discrimator", "(", "x3", ")", ",", "valid", ")", "\n", "loss_fake", "=", "criterion_GAN", "(", "self", ".", "discrimator", "(", "x_fake", ")", ",", "fake", ")", "\n", "# Total loss", "\n", "loss_D", "=", "(", "loss_real", "+", "loss_fake", ")", "/", "2", "\n", "\n", "loss_D", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# time", "\n", "batches_left", "=", "self", ".", "opt", ".", "epochs", "*", "len", "(", "train_loader", ")", "-", "batches_done", "\n", "time_left", "=", "datetime", ".", "timedelta", "(", "seconds", "=", "batches_left", "*", "(", "time", ".", "time", "(", ")", "-", "prev_time", ")", "/", "self", ".", "opt", ".", "n_critic", ")", "\n", "prev_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "#print('Epoch:', epoch, '| D_loss: %.6f' % loss_D.item(),'| G_loss: %.6f' % loss_G.item())", "\n", "print", "(", "'\\r[Epoch %d/%d]:'", "%", "(", "epoch", ",", "self", ".", "opt", ".", "epochs", ")", ",", "'[Batch %d/%d]:'", "%", "(", "ii", ",", "len", "(", "train_loader", ")", ")", ",", "'| D_loss: %.6f'", "%", "loss_D", ".", "item", "(", ")", ",", "'| G_loss: %.6f'", "%", "loss_G", ".", "item", "(", ")", ",", "'ETA: %s'", "%", "time_left", ")", "\n", "\n", "batches_done", "+=", "1", "\n", "\n", "\n", "# Update learning rates", "\n", "", "lr_scheduler_G", ".", "step", "(", ")", "\n", "lr_scheduler_D", ".", "step", "(", ")", "\n", "\n", "logger", ".", "append", "(", "[", "epoch", ",", "loss_D", ".", "item", "(", ")", ",", "loss_G", ".", "item", "(", ")", "]", ")", "\n", "\n", "# Save model checkpoints", "\n", "if", "epoch", ">", "20", "and", "(", "epoch", ")", "%", "self", ".", "opt", ".", "checkpoint_interval", "==", "0", ":", "\n", "\n", "                ", "torch", ".", "save", "(", "self", ".", "generator", ".", "state_dict", "(", ")", ",", "self", ".", "opt", ".", "save_path", "+", "'/'", "+", "'task_'", "+", "str", "(", "self", ".", "opt", ".", "task_id", ")", "+", "'/generator_%d.pkl'", "%", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "discrimator", ".", "state_dict", "(", ")", ",", "self", ".", "opt", ".", "save_path", "+", "'/'", "+", "'task_'", "+", "str", "(", "self", ".", "opt", ".", "task_id", ")", "+", "'/discrimator_%d.pkl'", "%", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.None.HiNet_SynthModel.LatentSynthModel.test": [[179, 212], ["HiNet_SynthModel.LatentSynthModel.generator.load_state_dict", "dataset.MultiModalityData_load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "funcs.utils.model_task", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "HiNet_SynthModel.LatentSynthModel.generator", "funcs.utils.prediction_syn_results", "print", "pred_eva_set.append", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "[].mean", "x_fusion.cuda.cuda.cuda", "str", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "str"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.model_task", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.prediction_syn_results", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.append"], ["", "", "", "def", "test", "(", "self", ",", "ind_epoch", ")", ":", "\n", "\n", "        ", "self", ".", "generator", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "opt", ".", "save_path", "+", "'/'", "+", "'task_'", "+", "str", "(", "self", ".", "opt", ".", "task_id", ")", "+", "'/'", "+", "'generator_'", "+", "str", "(", "ind_epoch", ")", "+", "'.pkl'", ")", ",", "strict", "=", "False", ")", "\n", "\n", "# Load data        ", "\n", "te_data", "=", "MultiModalityData_load", "(", "self", ".", "opt", ",", "train", "=", "False", ",", "test", "=", "True", ")", "\n", "te_loader", "=", "DataLoader", "(", "te_data", ",", "batch_size", "=", "self", ".", "opt", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "pred_eva_set", "=", "[", "]", "\n", "for", "ii", ",", "inputs", "in", "enumerate", "(", "te_loader", ")", ":", "\n", "#print(ii) ", "\n", "# define diferent synthesis tasks", "\n", "            ", "[", "x_in1", ",", "x_in2", ",", "x_out", "]", "=", "model_task", "(", "inputs", ",", "self", ".", "opt", ".", "task_id", ")", "\n", "x_fusion", "=", "torch", ".", "cat", "(", "[", "x_in1", ",", "x_in2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "opt", ".", "use_gpu", ":", "\n", "                ", "x_fusion", "=", "x_fusion", ".", "cuda", "(", ")", "\n", "\n", "\n", "# pred_out -- [batch_size*4,1,128,128]", "\n", "# x3       -- [batch_size*4,1,128,128]", "\n", "", "pred_out", ",", "pred_out1", ",", "pred_out2", "=", "self", ".", "generator", "(", "x_fusion", ")", "\n", "\n", "\n", "errors", "=", "prediction_syn_results", "(", "pred_out", ",", "x_out", ")", "\n", "\n", "print", "(", "errors", ")", "\n", "\n", "pred_eva_set", ".", "append", "(", "[", "errors", "[", "'MSE'", "]", ",", "errors", "[", "'SSIM'", "]", ",", "errors", "[", "'PSNR'", "]", "]", ")", "\n", "\n", "", "mean_values", "=", "[", "ind_epoch", ",", "np", ".", "array", "(", "pred_eva_set", ")", "[", ":", ",", "0", "]", ".", "mean", "(", ")", ",", "np", ".", "array", "(", "pred_eva_set", ")", "[", ":", ",", "1", "]", ".", "mean", "(", ")", ",", "np", ".", "array", "(", "pred_eva_set", ")", "[", ":", ",", "2", "]", ".", "mean", "(", ")", ",", "np", ".", "array", "(", "pred_eva_set", ")", "[", ":", ",", "3", "]", ".", "mean", "(", ")", ",", "np", ".", "array", "(", "pred_eva_set", ")", "[", ":", ",", "4", "]", ".", "mean", "(", ")", ",", "np", ".", "array", "(", "pred_eva_set", ")", "[", ":", ",", "5", "]", ".", "mean", "(", ")", "]", "\n", "\n", "return", "mean_values", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.MixedFusion_Block.__init__": [[32, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "act_fn", ")", ":", "\n", "        ", "super", "(", "MixedFusion_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", "*", "3", ",", "in_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "in_dim", ")", ",", "act_fn", ",", ")", "\n", "\n", "# revised in 09/09/2019.", "\n", "#self.layer1 = nn.Sequential(nn.Conv2d(in_dim*3, in_dim,  kernel_size=1),nn.BatchNorm2d(in_dim),act_fn,)", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", "*", "2", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "act_fn", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.MixedFusion_Block.forward": [[42, 59], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "syn_model.MixedFusion_Block.layer1", "syn_model.MixedFusion_Block.layer2", "torch.cat.max", "torch.cat.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "xx", ")", ":", "\n", "\n", "# multi-style fusion", "\n", "        ", "fusion_sum", "=", "torch", ".", "add", "(", "x1", ",", "x2", ")", "# sum", "\n", "fusion_mul", "=", "torch", ".", "mul", "(", "x1", ",", "x2", ")", "\n", "\n", "modal_in1", "=", "torch", ".", "reshape", "(", "x1", ",", "[", "x1", ".", "shape", "[", "0", "]", ",", "1", ",", "x1", ".", "shape", "[", "1", "]", ",", "x1", ".", "shape", "[", "2", "]", ",", "x1", ".", "shape", "[", "3", "]", "]", ")", "\n", "modal_in2", "=", "torch", ".", "reshape", "(", "x2", ",", "[", "x2", ".", "shape", "[", "0", "]", ",", "1", ",", "x2", ".", "shape", "[", "1", "]", ",", "x2", ".", "shape", "[", "2", "]", ",", "x2", ".", "shape", "[", "3", "]", "]", ")", "\n", "modal_cat", "=", "torch", ".", "cat", "(", "(", "modal_in1", ",", "modal_in2", ")", ",", "dim", "=", "1", ")", "\n", "fusion_max", "=", "modal_cat", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "out_fusion", "=", "torch", ".", "cat", "(", "(", "fusion_sum", ",", "fusion_mul", ",", "fusion_max", ")", ",", "dim", "=", "1", ")", "\n", "\n", "out1", "=", "self", ".", "layer1", "(", "out_fusion", ")", "\n", "out2", "=", "self", ".", "layer2", "(", "torch", ".", "cat", "(", "(", "out1", ",", "xx", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.MixedFusion_Block0.__init__": [[62, 68], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "act_fn", ")", ":", "\n", "        ", "super", "(", "MixedFusion_Block0", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", "*", "3", ",", "in_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "in_dim", ")", ",", "act_fn", ",", ")", "\n", "#self.layer1 = nn.Sequential(nn.Conv2d(in_dim*3, in_dim, kernel_size=1),nn.BatchNorm2d(in_dim),act_fn,)", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "act_fn", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.MixedFusion_Block0.forward": [[70, 87], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "syn_model.MixedFusion_Block0.layer1", "syn_model.MixedFusion_Block0.layer2", "torch.cat.max", "torch.cat.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\n", "# multi-style fusion", "\n", "        ", "fusion_sum", "=", "torch", ".", "add", "(", "x1", ",", "x2", ")", "# sum", "\n", "fusion_mul", "=", "torch", ".", "mul", "(", "x1", ",", "x2", ")", "\n", "\n", "modal_in1", "=", "torch", ".", "reshape", "(", "x1", ",", "[", "x1", ".", "shape", "[", "0", "]", ",", "1", ",", "x1", ".", "shape", "[", "1", "]", ",", "x1", ".", "shape", "[", "2", "]", ",", "x1", ".", "shape", "[", "3", "]", "]", ")", "\n", "modal_in2", "=", "torch", ".", "reshape", "(", "x2", ",", "[", "x2", ".", "shape", "[", "0", "]", ",", "1", ",", "x2", ".", "shape", "[", "1", "]", ",", "x2", ".", "shape", "[", "2", "]", ",", "x2", ".", "shape", "[", "3", "]", "]", ")", "\n", "modal_cat", "=", "torch", ".", "cat", "(", "(", "modal_in1", ",", "modal_in2", ")", ",", "dim", "=", "1", ")", "\n", "fusion_max", "=", "modal_cat", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "out_fusion", "=", "torch", ".", "cat", "(", "(", "fusion_sum", ",", "fusion_mul", ",", "fusion_max", ")", ",", "dim", "=", "1", ")", "\n", "\n", "out1", "=", "self", ".", "layer1", "(", "out_fusion", ")", "\n", "out2", "=", "self", ".", "layer2", "(", "out1", ")", "\n", "\n", "return", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.Multi_modal_generator.__init__": [[93, 194], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "syn_model.maxpool", "torch.Sequential", "torch.Sequential", "syn_model.maxpool", "torch.Sequential", "torch.Sequential", "syn_model.maxpool", "torch.Sequential", "torch.Sequential", "syn_model.maxpool", "torch.Sequential", "torch.Sequential", "syn_model.maxpool", "torch.Sequential", "torch.Sequential", "syn_model.maxpool", "syn_model.MixedFusion_Block0", "syn_model.maxpool", "syn_model.MixedFusion_Block", "syn_model.maxpool", "syn_model.MixedFusion_Block", "syn_model.maxpool", "torch.Sequential", "torch.Sequential", "syn_model.conv_decod_block", "syn_model.MixedFusion_Block", "syn_model.MixedFusion_Block", "syn_model.MixedFusion_Block", "syn_model.conv_decod_block", "torch.Sequential", "torch.Sequential", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "torch.Sequential", "torch.Sequential", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "syn_model.conv_decod_block", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "int", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "int", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.__init__", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "Multi_modal_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "in_dim", "=", "input_nc", "\n", "self", ".", "out_dim", "=", "ngf", "\n", "self", ".", "final_out_dim", "=", "output_nc", "\n", "\n", "act_fn", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "#act_fn = nn.ReLU()", "\n", "\n", "act_fn2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "#nn.ReLU()", "\n", "\n", "# ~~~ Encoding Paths ~~~~~~ #", "\n", "# Encoder (Modality 1)", "\n", "\n", "#######################################################################", "\n", "# Encoder **Modality 1", "\n", "#######################################################################", "\n", "self", ".", "down_1_0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_dim", ",", "out_channels", "=", "self", ".", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", ")", ",", "act_fn", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", ",", "out_channels", "=", "self", ".", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", ")", ",", "act_fn", ",", "\n", ")", "\n", "self", ".", "pool_1_0", "=", "maxpool", "(", ")", "\n", "\n", "self", ".", "down_2_0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", ",", "out_channels", "=", "self", ".", "out_dim", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "2", ")", ",", "act_fn", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", "*", "2", ",", "out_channels", "=", "self", ".", "out_dim", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "2", ")", ",", "act_fn", ",", "\n", ")", "\n", "self", ".", "pool_2_0", "=", "maxpool", "(", ")", "\n", "\n", "self", ".", "down_3_0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", "*", "2", ",", "out_channels", "=", "self", ".", "out_dim", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "4", ")", ",", "act_fn", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", "*", "4", ",", "out_channels", "=", "self", ".", "out_dim", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "4", ")", ",", "act_fn", ",", "\n", ")", "\n", "self", ".", "pool_3_0", "=", "maxpool", "(", ")", "\n", "\n", "\n", "#######################################################################", "\n", "# Encoder **Modality 2", "\n", "#######################################################################", "\n", "self", ".", "down_1_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_dim", ",", "out_channels", "=", "self", ".", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", ")", ",", "act_fn", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", ",", "out_channels", "=", "self", ".", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", ")", ",", "act_fn", ",", "\n", ")", "\n", "self", ".", "pool_1_1", "=", "maxpool", "(", ")", "\n", "\n", "self", ".", "down_2_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", ",", "out_channels", "=", "self", ".", "out_dim", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "2", ")", ",", "act_fn", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", "*", "2", ",", "out_channels", "=", "self", ".", "out_dim", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "2", ")", ",", "act_fn", ",", "\n", ")", "\n", "self", ".", "pool_2_1", "=", "maxpool", "(", ")", "\n", "\n", "self", ".", "down_3_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", "*", "2", ",", "out_channels", "=", "self", ".", "out_dim", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "4", ")", ",", "act_fn", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", "*", "4", ",", "out_channels", "=", "self", ".", "out_dim", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "4", ")", ",", "act_fn", ",", "\n", ")", "\n", "self", ".", "pool_3_1", "=", "maxpool", "(", ")", "\n", "\n", "\n", "#######################################################################", "\n", "# fusion layer", "\n", "#######################################################################", "\n", "# down 1st layer", "\n", "self", ".", "down_fu_1", "=", "MixedFusion_Block0", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn", ")", "\n", "self", ".", "pool_fu_1", "=", "maxpool", "(", ")", "\n", "\n", "self", ".", "down_fu_2", "=", "MixedFusion_Block", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn", ")", "\n", "self", ".", "pool_fu_2", "=", "maxpool", "(", ")", "\n", "\n", "self", ".", "down_fu_3", "=", "MixedFusion_Block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn", ")", "\n", "self", ".", "pool_fu_3", "=", "maxpool", "(", ")", "\n", "\n", "# down 4th layer", "\n", "self", ".", "down_fu_4", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "out_dim", "*", "4", ",", "out_channels", "=", "self", ".", "out_dim", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "out_dim", "*", "8", ")", ",", "act_fn", ",", ")", "\n", "\n", "# ~~~ Decoding Path ~~~~~~ #", "\n", "self", ".", "deconv_1_0", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "8", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn2", ")", "\n", "self", ".", "deconv_2_0", "=", "MixedFusion_Block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn2", ")", "\n", "self", ".", "deconv_3_0", "=", "MixedFusion_Block", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", "*", "1", ",", "act_fn2", ")", "\n", "self", ".", "deconv_4_0", "=", "MixedFusion_Block", "(", "self", ".", "out_dim", "*", "1", ",", "self", ".", "out_dim", ",", "act_fn2", ")", "\n", "self", ".", "deconv_5_0", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "1", ",", "self", ".", "out_dim", ",", "act_fn2", ")", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "out_dim", ")", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "#  self.final_out_dim", "\n", "\n", "# Modality 1", "\n", "self", ".", "deconv_1_1", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn2", ")", "\n", "self", ".", "deconv_2_1", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn2", ")", "\n", "self", ".", "deconv_3_1", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn2", ")", "\n", "self", ".", "deconv_4_1", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn2", ")", "\n", "self", ".", "deconv_5_1", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", "*", "1", ",", "act_fn2", ")", "\n", "self", ".", "deconv_6_1", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "1", ",", "int", "(", "self", ".", "out_dim", ")", ",", "act_fn2", ")", "\n", "self", ".", "out1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "out_dim", ")", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "#  self.final_out_dim", "\n", "\n", "# modality 2", "\n", "self", ".", "deconv_1_2", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn2", ")", "\n", "self", ".", "deconv_2_2", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn2", ")", "\n", "self", ".", "deconv_3_2", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn2", ")", "\n", "self", ".", "deconv_4_2", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn2", ")", "\n", "self", ".", "deconv_5_2", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", "*", "1", ",", "act_fn2", ")", "\n", "self", ".", "deconv_6_2", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "1", ",", "int", "(", "self", ".", "out_dim", ")", ",", "act_fn2", ")", "\n", "self", ".", "out2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "out_dim", ")", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "#  self.final_out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.Multi_modal_generator.forward": [[196, 270], ["syn_model.Multi_modal_generator.down_1_0", "syn_model.Multi_modal_generator.down_1_1", "syn_model.Multi_modal_generator.pool_1_0", "syn_model.Multi_modal_generator.pool_1_1", "syn_model.Multi_modal_generator.down_2_0", "syn_model.Multi_modal_generator.down_2_1", "syn_model.Multi_modal_generator.pool_2_0", "syn_model.Multi_modal_generator.pool_2_1", "syn_model.Multi_modal_generator.down_3_0", "syn_model.Multi_modal_generator.down_3_1", "syn_model.Multi_modal_generator.pool_3_0", "syn_model.Multi_modal_generator.pool_3_1", "syn_model.Multi_modal_generator.down_fu_1", "syn_model.Multi_modal_generator.pool_fu_1", "syn_model.Multi_modal_generator.down_fu_2", "syn_model.Multi_modal_generator.pool_fu_2", "syn_model.Multi_modal_generator.down_fu_3", "syn_model.Multi_modal_generator.down_fu_4", "syn_model.Multi_modal_generator.deconv_1_0", "syn_model.Multi_modal_generator.deconv_2_0", "syn_model.Multi_modal_generator.deconv_3_0", "syn_model.Multi_modal_generator.deconv_4_0", "syn_model.Multi_modal_generator.deconv_5_0", "syn_model.Multi_modal_generator.out", "syn_model.Multi_modal_generator.deconv_1_1", "syn_model.Multi_modal_generator.deconv_2_1", "syn_model.Multi_modal_generator.deconv_3_1", "syn_model.Multi_modal_generator.deconv_4_1", "syn_model.Multi_modal_generator.deconv_5_1", "syn_model.Multi_modal_generator.deconv_6_1", "syn_model.Multi_modal_generator.out1", "syn_model.Multi_modal_generator.deconv_1_2", "syn_model.Multi_modal_generator.deconv_2_2", "syn_model.Multi_modal_generator.deconv_3_2", "syn_model.Multi_modal_generator.deconv_4_2", "syn_model.Multi_modal_generator.deconv_5_2", "syn_model.Multi_modal_generator.deconv_6_2", "syn_model.Multi_modal_generator.out2", "syn_model.up", "syn_model.up", "syn_model.up", "syn_model.up", "syn_model.up", "syn_model.up", "syn_model.up", "syn_model.up", "syn_model.up"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up", "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "# ############################# #", "\n", "        ", "i0", "=", "inputs", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "i1", "=", "inputs", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "\n", "# -----  First Level -------- ", "\n", "down_1_0", "=", "self", ".", "down_1_0", "(", "i0", ")", "\n", "down_1_1", "=", "self", ".", "down_1_1", "(", "i1", ")", "\n", "\n", "\n", "# -----  Second Level --------", "\n", "#input_2nd = torch.cat((down_1_0,down_1_1,down_1_2,down_1_3),dim=1)", "\n", "# Max-pool", "\n", "down_1_0m", "=", "self", ".", "pool_1_0", "(", "down_1_0", ")", "\n", "down_1_1m", "=", "self", ".", "pool_1_1", "(", "down_1_1", ")", "\n", "\n", "down_2_0", "=", "self", ".", "down_2_0", "(", "down_1_0m", ")", "\n", "down_2_1", "=", "self", ".", "down_2_1", "(", "down_1_1m", ")", "\n", "\n", "\n", "# -----  Third Level --------", "\n", "# Max-pool", "\n", "down_2_0m", "=", "self", ".", "pool_2_0", "(", "down_2_0", ")", "\n", "down_2_1m", "=", "self", ".", "pool_2_1", "(", "down_2_1", ")", "\n", "\n", "down_3_0", "=", "self", ".", "down_3_0", "(", "down_2_0m", ")", "\n", "down_3_1", "=", "self", ".", "down_3_1", "(", "down_2_1m", ")", "\n", "\n", "# Max-pool", "\n", "down_3_0m", "=", "self", ".", "pool_3_0", "(", "down_3_0", ")", "\n", "down_3_1m", "=", "self", ".", "pool_3_1", "(", "down_3_1", ")", "\n", "\n", "# ----------------------------------------", "\n", "# fusion layer", "\n", "down_fu_1", "=", "self", ".", "down_fu_1", "(", "down_1_0m", ",", "down_1_1m", ")", "\n", "down_fu_1m", "=", "self", ".", "pool_fu_1", "(", "down_fu_1", ")", "\n", "\n", "down_fu_2", "=", "self", ".", "down_fu_2", "(", "down_2_0m", ",", "down_2_1m", ",", "down_fu_1m", ")", "\n", "down_fu_2m", "=", "self", ".", "pool_fu_2", "(", "down_fu_2", ")", "\n", "\n", "down_fu_3", "=", "self", ".", "down_fu_3", "(", "down_3_0m", ",", "down_3_1m", ",", "down_fu_2m", ")", "\n", "down_fu_4", "=", "self", ".", "down_fu_4", "(", "down_fu_3", ")", "\n", "\n", "#latents     = self.down_fu_4(output_atten)", "\n", "\n", "#######################################################################                                                                                                ", "\n", "# ~~~~~~ Decoding ", "\n", "deconv_1_0", "=", "self", ".", "deconv_1_0", "(", "down_fu_4", ")", "\n", "deconv_2_0", "=", "self", ".", "deconv_2_0", "(", "down_3_0m", ",", "down_3_1m", ",", "deconv_1_0", ")", "\n", "deconv_3_0", "=", "self", ".", "deconv_3_0", "(", "down_2_0m", ",", "down_2_1m", ",", "up", "(", "deconv_2_0", ")", ")", "\n", "deconv_4_0", "=", "self", ".", "deconv_4_0", "(", "down_1_0m", ",", "down_1_1m", ",", "up", "(", "deconv_3_0", ")", ")", "\n", "deconv_5_0", "=", "self", ".", "deconv_5_0", "(", "up", "(", "deconv_4_0", ")", ")", "\n", "output", "=", "self", ".", "out", "(", "deconv_5_0", ")", "\n", "\n", "# modality 1", "\n", "deconv_1_1", "=", "self", ".", "deconv_1_1", "(", "(", "down_3_0m", ")", ")", "\n", "deconv_2_1", "=", "self", ".", "deconv_2_1", "(", "up", "(", "deconv_1_1", ")", ")", "\n", "deconv_3_1", "=", "self", ".", "deconv_3_1", "(", "(", "deconv_2_1", ")", ")", "\n", "deconv_4_1", "=", "self", ".", "deconv_4_1", "(", "up", "(", "deconv_3_1", ")", ")", "\n", "deconv_5_1", "=", "self", ".", "deconv_5_1", "(", "(", "deconv_4_1", ")", ")", "\n", "deconv_6_1", "=", "self", ".", "deconv_6_1", "(", "up", "(", "deconv_5_1", ")", ")", "\n", "output1", "=", "self", ".", "out1", "(", "deconv_6_1", ")", "\n", "\n", "# modality 2", "\n", "deconv_1_2", "=", "self", ".", "deconv_1_2", "(", "(", "down_3_1m", ")", ")", "\n", "deconv_2_2", "=", "self", ".", "deconv_2_2", "(", "up", "(", "deconv_1_2", ")", ")", "\n", "deconv_3_2", "=", "self", ".", "deconv_3_2", "(", "(", "deconv_2_2", ")", ")", "\n", "deconv_4_2", "=", "self", ".", "deconv_4_2", "(", "up", "(", "deconv_3_2", ")", ")", "\n", "deconv_5_2", "=", "self", ".", "deconv_5_2", "(", "(", "deconv_4_2", ")", ")", "\n", "deconv_6_2", "=", "self", ".", "deconv_6_2", "(", "up", "(", "deconv_5_2", ")", ")", "\n", "output2", "=", "self", ".", "out2", "(", "deconv_6_2", ")", "\n", "\n", "return", "output", ",", "output1", ",", "output2", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.Discriminator.__init__": [[273, 291], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "torch.LeakyReLU", "torch.LeakyReLU", "syn_model.Discriminator.__init__.discrimintor_block"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.__init__", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.append", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "discrimintor_block", "(", "in_features", ",", "out_features", ",", "normalize", "=", "True", ")", ":", "\n", "            ", "\"\"\"Discriminator block\"\"\"", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "]", "\n", "if", "normalize", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_features", ",", "0.8", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "return", "layers", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "*", "discrimintor_block", "(", "in_channels", ",", "32", ",", "normalize", "=", "False", ")", ",", "\n", "*", "discrimintor_block", "(", "32", ",", "64", ")", ",", "\n", "*", "discrimintor_block", "(", "64", ",", "128", ")", ",", "\n", "*", "discrimintor_block", "(", "128", ",", "256", ")", ",", "\n", "#nn.ZeroPad2d((1, 0, 1, 0)),", "\n", "nn", ".", "Conv2d", "(", "256", ",", "1", ",", "kernel_size", "=", "3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.Discriminator.forward": [[293, 295], ["syn_model.Discriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.up": [[13, 15], ["torch.functional.interpolate"], "function", ["None"], ["def", "up", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.maxpool": [[16, 19], ["torch.MaxPool2d"], "function", ["None"], ["", "def", "maxpool", "(", ")", ":", "\n", "    ", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "return", "pool", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.model.syn_model.conv_decod_block": [[20, 27], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["", "def", "conv_decod_block", "(", "in_dim", ",", "out_dim", ",", "act_fn", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "act_fn", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.__init__": [[329, 334], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_epochs", ",", "offset", ",", "decay_start_epoch", ")", ":", "\n", "        ", "assert", "(", "(", "n_epochs", "-", "decay_start_epoch", ")", ">", "0", ")", ",", "\"Decay must start before the training session ends!\"", "\n", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "decay_start_epoch", "=", "decay_start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.LambdaLR.step": [[335, 337], ["max"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "self", ".", "offset", "-", "self", ".", "decay_start_epoch", ")", "/", "(", "self", ".", "n_epochs", "-", "self", ".", "decay_start_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.__init__": [[341, 362], ["open", "utils.Logger.file.readline", "utils.Logger.rstrip().split", "enumerate", "utils.Logger.file.close", "open", "open", "numbers.rstrip().split.rstrip().split.rstrip().split", "range", "utils.Logger.rstrip", "len", "utils.Logger.numbers[].append", "numbers.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.close", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.append"], ["def", "__init__", "(", "self", ",", "fpath", ",", "title", "=", "None", ",", "resume", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "file", "=", "None", "\n", "self", ".", "resume", "=", "resume", "\n", "self", ".", "title", "=", "''", "if", "title", "==", "None", "else", "title", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "\t\t\t", "if", "resume", ":", "\n", "\t\t\t\t", "self", ".", "file", "=", "open", "(", "fpath", ",", "'r'", ")", "\n", "name", "=", "self", ".", "file", ".", "readline", "(", ")", "\n", "self", ".", "names", "=", "name", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "=", "{", "}", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "\t\t\t\t\t", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "for", "numbers", "in", "self", ".", "file", ":", "\n", "\t\t\t\t\t", "numbers", "=", "numbers", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "numbers", ")", ")", ":", "\n", "\t\t\t\t\t\t", "self", ".", "numbers", "[", "self", ".", "names", "[", "i", "]", "]", ".", "append", "(", "numbers", "[", "i", "]", ")", "\n", "", "", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'a'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.set_names": [[363, 375], ["enumerate", "utils.Logger.file.write", "utils.Logger.file.flush", "utils.Logger.file.write", "utils.Logger.file.write"], "methods", ["None"], ["", "", "", "def", "set_names", "(", "self", ",", "names", ")", ":", "\n", "\t\t", "if", "self", ".", "resume", ":", "\n", "\t\t\t", "pass", "\n", "# initialize numbers as empty list", "\n", "", "self", ".", "numbers", "=", "{", "}", "\n", "self", ".", "names", "=", "names", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "\t\t\t", "self", ".", "file", ".", "write", "(", "name", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.append": [[377, 385], ["enumerate", "utils.Logger.file.write", "utils.Logger.file.flush", "len", "len", "utils.Logger.file.write", "utils.Logger.file.write", "utils.Logger.numbers[].append"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.append"], ["", "def", "append", "(", "self", ",", "numbers", ")", ":", "\n", "\t\t", "assert", "len", "(", "self", ".", "names", ")", "==", "len", "(", "numbers", ")", ",", "'Numbers do not match names'", "\n", "for", "index", ",", "num", "in", "enumerate", "(", "numbers", ")", ":", "\n", "\t\t\t", "self", ".", "file", ".", "write", "(", "\"{0:.6f}\"", ".", "format", "(", "num", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "self", ".", "names", "[", "index", "]", "]", ".", "append", "(", "num", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.plot": [[386, 394], ["enumerate", "matplotlib.legend", "matplotlib.grid", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.plot"], ["", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "\t\t", "names", "=", "self", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "self", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "\t\t\t", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "plt", ".", "legend", "(", "[", "self", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.close": [[395, 398], ["utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "\t\t\t", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.__init__": [[404, 406], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.reset": [[407, 411], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "val", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.update": [[412, 416], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "\t\t", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.AverageMeter.avg": [[417, 419], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_2D_patches": [[20, 46], ["utils.generate_patch_loc", "utils.generate_patch_loc", "numpy.zeros", "range", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc"], ["def", "generate_2D_patches", "(", "in_data", ")", ":", "\n", "\n", "# in_data     --> 240*240*155 for BraTS ", "\n", "# out_patch   --> 128*128*128", "\n", "# num_patches --> num = 9", "\n", "#in_size  = [240,240,155]", "\n", "    ", "in_size", "=", "[", "160", ",", "180", "]", "\n", "out_size", "=", "[", "128", ",", "128", "]", "\n", "num", "=", "2", "\n", "\n", "x_locs", "=", "generate_patch_loc", "(", "in_size", "[", "0", "]", ",", "out_size", "[", "0", "]", ",", "num", ")", "\n", "y_locs", "=", "generate_patch_loc", "(", "in_size", "[", "1", "]", ",", "out_size", "[", "1", "]", ",", "num", ")", "\n", "\n", "\n", "patches", "=", "np", ".", "zeros", "(", "[", "num", "*", "num", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", "]", ")", "\n", "count", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "x_locs", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "y_locs", ")", ")", ":", "\n", "            ", "xx", "=", "x_locs", "[", "i", "]", "[", "0", "]", "\n", "yy", "=", "y_locs", "[", "j", "]", "[", "0", "]", "\n", "\n", "patches", "[", "count", ",", ":", ",", ":", "]", "=", "in_data", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "\n", "count", "=", "count", "+", "1", "\n", "\n", "", "", "return", "patches", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_all_2D_patches": [[48, 59], ["numpy.zeros", "range", "utils.generate_2D_patches"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_2D_patches"], ["", "def", "generate_all_2D_patches", "(", "in_data", ")", ":", "\n", "\n", "#in_size  = [160,180]", "\n", "    ", "used_data", "=", "in_data", "[", ":", ",", ":", "]", "\n", "out_size", "=", "[", "128", ",", "128", "]", "\n", "num", "=", "1", "\n", "out_patches", "=", "np", ".", "zeros", "(", "[", "num", "*", "4", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "out_patches", "[", "i", "*", "4", ":", "(", "i", "+", "1", ")", "*", "4", "]", "=", "generate_2D_patches", "(", "used_data", "[", ":", ",", ":", "]", ")", "\n", "\n", "", "return", "out_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_2D_pathches_slice_test": [[61, 72], ["numpy.zeros", "range", "utils.generate_2D_patches"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_2D_patches"], ["", "def", "generate_2D_pathches_slice_test", "(", "in_data", ")", ":", "\n", "\n", "#in_size  = [160,180,155]", "\n", "    ", "used_data", "=", "in_data", "\n", "out_size", "=", "[", "128", ",", "128", "]", "\n", "num", "=", "used_data", ".", "shape", "[", "2", "]", "\n", "out_patches", "=", "np", ".", "zeros", "(", "[", "num", "*", "4", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "out_patches", "[", "i", "*", "4", ":", "(", "i", "+", "1", ")", "*", "4", "]", "=", "generate_2D_patches", "(", "used_data", "[", ":", ",", ":", ",", "i", "]", ")", "\n", "\n", "", "return", "out_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_2D_patches_slice": [[73, 83], ["numpy.zeros", "utils.generate_2D_patches"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_2D_patches"], ["", "def", "generate_2D_patches_slice", "(", "in_data", ")", ":", "\n", "\n", "#in_size  = [160,180]", "\n", "    ", "used_data", "=", "in_data", "\n", "out_size", "=", "[", "128", ",", "128", "]", "\n", "num", "=", "1", "\n", "out_patches", "=", "np", ".", "zeros", "(", "[", "num", "*", "4", ",", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", "]", ")", "\n", "out_patches", "=", "generate_2D_patches", "(", "used_data", "[", ":", ",", ":", "]", ")", "\n", "\n", "return", "out_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc": [[85, 97], ["numpy.zeros", "range", "np.zeros.astype", "int"], "function", ["None"], ["", "def", "generate_patch_loc", "(", "in_size", ",", "out_size", ",", "num", ")", ":", "\n", "\n", "    ", "locs", "=", "np", ".", "zeros", "(", "[", "num", ",", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "locs", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "locs", "[", "i", "]", "=", "int", "(", "(", "in_size", "-", "out_size", ")", "/", "(", "num", "-", "1", ")", ")", "*", "i", "\n", "\n", "#locs[i] = in_size-out_size - 1", "\n", "\n", "", "", "return", "locs", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.prediction_in_testing_2Dimages": [[98, 158], ["torch.reshape", "utils.generate_patch_loc", "utils.generate_patch_loc", "numpy.zeros", "numpy.zeros", "range", "torch.reshape", "torch.zeros", "torch.zeros", "torch.reshape", "range", "compute_psnr", "compute_nmse", "compute_ssim", "int", "torch.reshape.min", "torch.reshape.max", "len", "range", "pred_res.min", "pred_res.max", "torch.reshape.min", "torch.reshape.max", "len", "torch.reshape", "torch.reshape.min", "torch.reshape.max", "torch.reshape.cpu"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc"], ["", "def", "prediction_in_testing_2Dimages", "(", "x_in", ",", "x03_real", ")", ":", "\n", "\n", "\n", "    ", "x_in_re", "=", "torch", ".", "reshape", "(", "torch", ".", "reshape", "(", "x_in", ",", "[", "x_in", ".", "shape", "[", "0", "]", ",", "x_in", ".", "shape", "[", "2", "]", ",", "x_in", ".", "shape", "[", "3", "]", "]", ")", ",", "[", "int", "(", "x_in", ".", "shape", "[", "0", "]", "/", "4", ")", ",", "4", ",", "x_in", ".", "shape", "[", "2", "]", ",", "x_in", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "in_size", "=", "[", "160", ",", "180", "]", "\n", "out_size", "=", "[", "128", ",", "128", "]", "\n", "num", "=", "2", "\n", "x_locs", "=", "generate_patch_loc", "(", "in_size", "[", "0", "]", ",", "out_size", "[", "0", "]", ",", "num", ")", "\n", "y_locs", "=", "generate_patch_loc", "(", "in_size", "[", "1", "]", ",", "out_size", "[", "1", "]", ",", "num", ")", "\n", "\n", "pred_images", "=", "np", ".", "zeros", "(", "[", "x_in_re", ".", "shape", "[", "0", "]", ",", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", "]", ")", "\n", "pred_values", "=", "np", ".", "zeros", "(", "[", "x_in_re", ".", "shape", "[", "0", "]", ",", "3", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "x_in_re", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "count", "=", "0", "\n", "matOut", "=", "torch", ".", "zeros", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ")", ")", "\n", "used", "=", "torch", ".", "zeros", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ")", ")", "\n", "\n", "cur_real_data", "=", "torch", ".", "reshape", "(", "x03_real", "[", ":", ",", ":", ",", "k", "]", ",", "[", "160", ",", "180", "]", ")", "\n", "cur_real_data", "=", "cur_real_data", "-", "cur_real_data", ".", "min", "(", ")", "\n", "cur_real_data", "=", "cur_real_data", "/", "cur_real_data", ".", "max", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "x_locs", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "y_locs", ")", ")", ":", "\n", "                ", "xx", "=", "x_locs", "[", "i", "]", "[", "0", "]", "\n", "yy", "=", "y_locs", "[", "j", "]", "[", "0", "]", "\n", "\n", "temp_out", "=", "x_in_re", "[", "k", ",", "count", ",", ":", ",", ":", "]", "\n", "temp_out", "=", "torch", ".", "reshape", "(", "temp_out", ",", "[", "128", ",", "128", "]", ")", "\n", "\n", "\n", "# normalization", "\n", "temp_out", "=", "temp_out", "-", "temp_out", ".", "min", "(", ")", "\n", "temp_out", "=", "temp_out", "/", "temp_out", ".", "max", "(", ")", "\n", "\n", "\n", "matOut", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "=", "matOut", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "+", "temp_out", ".", "cpu", "(", ")", "\n", "used", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "=", "used", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "+", "1", "\n", "\n", "count", "=", "count", "+", "1", "\n", "\n", "#--------------------", "\n", "", "", "pred_res", "=", "matOut", "/", "used", "\n", "pred_res", "=", "pred_res", "-", "pred_res", ".", "min", "(", ")", "\n", "pred_res", "=", "pred_res", "/", "pred_res", ".", "max", "(", ")", "\n", "\n", "cur_real_data", "=", "cur_real_data", "-", "cur_real_data", ".", "min", "(", ")", "\n", "cur_real_data", "=", "cur_real_data", "/", "cur_real_data", ".", "max", "(", ")", "\n", "\n", "# --------------------", "\n", "psnr", "=", "compute_psnr", "(", "pred_res", ",", "cur_real_data", ")", "\n", "nmse", "=", "compute_nmse", "(", "pred_res", ",", "cur_real_data", ")", "\n", "ssim", "=", "compute_ssim", "(", "pred_res", ",", "cur_real_data", ")", "\n", "\n", "pred_images", "[", "k", ",", ":", ",", ":", "]", "=", "(", "matOut", "/", "used", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "pred_values", "[", "k", ",", ":", "]", "=", "[", "psnr", ",", "nmse", ",", "ssim", "]", "\n", "\n", "", "return", "pred_images", ",", "pred_values", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.prediction_in_testing_2DimagesNEW": [[161, 223], ["torch.reshape", "utils.generate_patch_loc", "utils.generate_patch_loc", "numpy.zeros", "numpy.zeros", "range", "torch.reshape", "torch.zeros", "torch.zeros", "torch.reshape", "range", "compute_psnr", "compute_nmse", "int", "torch.reshape.min", "torch.reshape.max", "len", "range", "pred_res.min", "pred_res.max", "len", "torch.reshape", "torch.reshape.min", "torch.reshape.max", "torch.reshape.cpu"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc"], ["", "def", "prediction_in_testing_2DimagesNEW", "(", "pred_out", ",", "x03_real", ")", ":", "\n", "#print(pred_out.shape)", "\n", "    ", "x_in", "=", "pred_out", "\n", "x_in_re", "=", "torch", ".", "reshape", "(", "torch", ".", "reshape", "(", "x_in", ",", "[", "x_in", ".", "shape", "[", "0", "]", ",", "x_in", ".", "shape", "[", "2", "]", ",", "x_in", ".", "shape", "[", "3", "]", "]", ")", ",", "[", "int", "(", "x_in", ".", "shape", "[", "0", "]", "/", "4", ")", ",", "4", ",", "x_in", ".", "shape", "[", "2", "]", ",", "x_in", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "in_size", "=", "[", "160", ",", "180", "]", "\n", "out_size", "=", "[", "128", ",", "128", "]", "\n", "num", "=", "2", "\n", "x_locs", "=", "generate_patch_loc", "(", "in_size", "[", "0", "]", ",", "out_size", "[", "0", "]", ",", "num", ")", "\n", "y_locs", "=", "generate_patch_loc", "(", "in_size", "[", "1", "]", ",", "out_size", "[", "1", "]", ",", "num", ")", "\n", "\n", "pred_images", "=", "np", ".", "zeros", "(", "[", "x_in_re", ".", "shape", "[", "0", "]", ",", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", "]", ")", "\n", "pred_values", "=", "np", ".", "zeros", "(", "[", "x_in_re", ".", "shape", "[", "0", "]", ",", "2", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "x_in_re", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "count", "=", "0", "\n", "matOut", "=", "torch", ".", "zeros", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ")", ")", "\n", "used", "=", "torch", ".", "zeros", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ")", ")", "\n", "\n", "cur_real_data", "=", "torch", ".", "reshape", "(", "x03_real", "[", ":", ",", ":", ",", "k", "]", ",", "[", "160", ",", "180", "]", ")", "\n", "cur_real_data", "=", "cur_real_data", "-", "cur_real_data", ".", "min", "(", ")", "\n", "\n", "cur_real_data", "=", "cur_real_data", "/", "cur_real_data", ".", "max", "(", ")", "\n", "#        print('our model:',[cur_real_data.max(),cur_real_data.min(),aa.max(),aa.min()])", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "x_locs", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "y_locs", ")", ")", ":", "\n", "                ", "xx", "=", "x_locs", "[", "i", "]", "[", "0", "]", "\n", "yy", "=", "y_locs", "[", "j", "]", "[", "0", "]", "\n", "\n", "temp_out", "=", "x_in_re", "[", "k", ",", "count", ",", ":", ",", ":", "]", "\n", "temp_out", "=", "torch", ".", "reshape", "(", "temp_out", ",", "[", "128", ",", "128", "]", ")", "\n", "\n", "\n", "# normalization", "\n", "temp_out", "=", "temp_out", "-", "temp_out", ".", "min", "(", ")", "\n", "temp_out", "=", "temp_out", "/", "temp_out", ".", "max", "(", ")", "\n", "\n", "\n", "matOut", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "=", "matOut", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "+", "temp_out", ".", "cpu", "(", ")", "\n", "used", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "=", "used", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "+", "1", "\n", "\n", "count", "=", "count", "+", "1", "\n", "\n", "#--------------------", "\n", "", "", "pred_res", "=", "matOut", "/", "used", "+", "0.2", "\n", "pred_res", "=", "pred_res", "-", "pred_res", ".", "min", "(", ")", "\n", "pred_res", "=", "pred_res", "/", "pred_res", ".", "max", "(", ")", "\n", "\n", "#        cur_real_data = cur_real_data - cur_real_data.min()", "\n", "#        cur_real_data = cur_real_data/cur_real_data.max()", "\n", "\n", "# --------------------", "\n", "psnr", "=", "compute_psnr", "(", "pred_res", ",", "cur_real_data", ")", "\n", "nmse", "=", "compute_nmse", "(", "pred_res", ",", "cur_real_data", ")", "\n", "# ssims = compute_ssim(pred_res, cur_real_data)", "\n", "\n", "pred_images", "[", "k", ",", ":", ",", ":", "]", "=", "(", "matOut", "/", "used", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "pred_values", "[", "k", ",", ":", "]", "=", "[", "psnr", ",", "nmse", "]", "\n", "#pred_values = 1", "\n", "", "return", "pred_images", ",", "pred_values", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.prediction_syn_results": [[226, 313], ["torch.reshape", "torch.reshape", "utils.generate_patch_loc", "utils.generate_patch_loc", "numpy.zeros", "numpy.zeros", "range", "utils.ErrorMetrics", "torch.reshape", "torch.reshape", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "pred_res.detach().numpy", "real_res.detach().numpy", "np.zeros.min", "np.zeros.max", "np.zeros.min", "np.zeros.max", "np.zeros.astype", "np.zeros.astype", "int", "int", "len", "range", "len", "torch.reshape", "torch.reshape", "pred_res.detach", "real_res.detach", "torch.reshape.min", "torch.reshape.max", "torch.reshape.min", "torch.reshape.max", "torch.reshape.cpu", "torch.reshape.cpu"], "function", ["home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.generate_patch_loc", "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.ErrorMetrics"], ["", "def", "prediction_syn_results", "(", "pred_out", ",", "real_out", ")", ":", "\n", "\n", "###########################################################################", "\n", "### Note that", "\n", "# there is two manners to evaluate the testing sets", "\n", "# for example, using T1 + T2 to synthesize Flair", "\n", "# -->(1) the ground truths of Flair keep original size ([160,180,batch_size]) without spliting into small pathces (128*128). In this case, the ", "\n", "# synthesized results with size [batch_size*num_patch,1,128,128]\uff0c we need change it to [160,180,batch_size]", "\n", "\n", "# -->(2) the ground truths and synthesized results are all with size [batch_size*num_patch,1,128,128]\uff0c we need change ", "\n", "# them to [160,180,batch_size]. See details of this maner below.", "\n", "\n", "# When one volume as input, we set batch_size=num_slice", "\n", "\n", "###########################################################################    ", "\n", "\n", "\n", "# [batch_size*num_patch,1,128,128] -- > [batch_size, num_patch, 128, 128]", "\n", "    ", "pred_out_re", "=", "torch", ".", "reshape", "(", "torch", ".", "reshape", "(", "pred_out", ",", "[", "pred_out", ".", "shape", "[", "0", "]", ",", "pred_out", ".", "shape", "[", "2", "]", ",", "pred_out", ".", "shape", "[", "3", "]", "]", ")", ",", "[", "int", "(", "pred_out", ".", "shape", "[", "0", "]", "/", "4", ")", ",", "4", ",", "pred_out", ".", "shape", "[", "2", "]", ",", "pred_out", ".", "shape", "[", "3", "]", "]", ")", "\n", "real_out_re", "=", "torch", ".", "reshape", "(", "torch", ".", "reshape", "(", "real_out", ",", "[", "real_out", ".", "shape", "[", "0", "]", ",", "real_out", ".", "shape", "[", "2", "]", ",", "real_out", ".", "shape", "[", "3", "]", "]", ")", ",", "[", "int", "(", "real_out", ".", "shape", "[", "0", "]", "/", "4", ")", ",", "4", ",", "real_out", ".", "shape", "[", "2", "]", ",", "real_out", ".", "shape", "[", "3", "]", "]", ")", "\n", "\n", "in_size", "=", "[", "160", ",", "180", "]", "\n", "out_size", "=", "[", "128", ",", "128", "]", "\n", "num", "=", "2", "# num_patch = num*num", "\n", "\n", "x_locs", "=", "generate_patch_loc", "(", "in_size", "[", "0", "]", ",", "out_size", "[", "0", "]", ",", "num", ")", "\n", "y_locs", "=", "generate_patch_loc", "(", "in_size", "[", "1", "]", ",", "out_size", "[", "1", "]", ",", "num", ")", "\n", "\n", "pred_images", "=", "np", ".", "zeros", "(", "[", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "pred_out_re", ".", "shape", "[", "0", "]", "]", ")", "\n", "real_images", "=", "np", ".", "zeros", "(", "[", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ",", "pred_out_re", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "pred_out_re", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "count", "=", "0", "\n", "mat_pred_Out", "=", "torch", ".", "zeros", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ")", ")", "\n", "used_pred", "=", "torch", ".", "zeros", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ")", ")", "\n", "\n", "mat_real_Out", "=", "torch", ".", "zeros", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ")", ")", "\n", "used_real", "=", "torch", ".", "zeros", "(", "(", "in_size", "[", "0", "]", ",", "in_size", "[", "1", "]", ")", ")", "\n", "\n", "## ", "\n", "for", "i", "in", "range", "(", "len", "(", "x_locs", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "y_locs", ")", ")", ":", "\n", "                ", "xx", "=", "x_locs", "[", "i", "]", "[", "0", "]", "\n", "yy", "=", "y_locs", "[", "j", "]", "[", "0", "]", "\n", "\n", "temp_pred_out", "=", "pred_out_re", "[", "k", ",", "count", ",", ":", ",", ":", "]", "\n", "temp_pred_out", "=", "torch", ".", "reshape", "(", "temp_pred_out", ",", "[", "128", ",", "128", "]", ")", "\n", "\n", "temp_real_out", "=", "real_out_re", "[", "k", ",", "count", ",", ":", ",", ":", "]", "\n", "temp_real_out", "=", "torch", ".", "reshape", "(", "temp_real_out", ",", "[", "128", ",", "128", "]", ")", "\n", "\n", "# normalization", "\n", "temp_pred_out", "=", "temp_pred_out", "-", "temp_pred_out", ".", "min", "(", ")", "\n", "temp_pred_out", "=", "temp_pred_out", "/", "temp_pred_out", ".", "max", "(", ")", "\n", "\n", "temp_real_out", "=", "temp_real_out", "-", "temp_real_out", ".", "min", "(", ")", "\n", "temp_real_out", "=", "temp_real_out", "/", "temp_real_out", ".", "max", "(", ")", "\n", "\n", "\n", "mat_pred_Out", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "=", "mat_pred_Out", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "+", "temp_pred_out", ".", "cpu", "(", ")", "\n", "used_pred", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "=", "used_pred", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "+", "1", "\n", "\n", "mat_real_Out", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "=", "mat_real_Out", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "+", "temp_real_out", ".", "cpu", "(", ")", "\n", "used_real", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "=", "used_real", "[", "xx", ":", "xx", "+", "out_size", "[", "0", "]", ",", "yy", ":", "yy", "+", "out_size", "[", "1", "]", "]", "+", "1", "\n", "\n", "\n", "count", "=", "count", "+", "1", "\n", "\n", "#--------------------", "\n", "", "", "pred_res", "=", "mat_pred_Out", "/", "used_pred", "\n", "real_res", "=", "mat_real_Out", "/", "used_real", "\n", "\n", "\n", "pred_images", "[", ":", ",", ":", ",", "k", "]", "=", "pred_res", ".", "detach", "(", ")", ".", "numpy", "(", ")", "#pred_res.cpu().detach().numpy()", "\n", "real_images", "[", ":", ",", ":", ",", "k", "]", "=", "real_res", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "pred_images", "=", "pred_images", "-", "pred_images", ".", "min", "(", ")", "\n", "pred_images", "=", "pred_images", "/", "pred_images", ".", "max", "(", ")", "\n", "\n", "real_images", "=", "real_images", "-", "real_images", ".", "min", "(", ")", "\n", "real_images", "=", "real_images", "/", "real_images", ".", "max", "(", ")", "\n", "\n", "errors", "=", "ErrorMetrics", "(", "pred_images", ".", "astype", "(", "np", ".", "float32", ")", ",", "real_images", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.loadSubjectData": [[315, 325], ["scipy.loadmat", "[].astype", "[].astype", "[].astype", "[].astype"], "function", ["None"], ["", "def", "loadSubjectData", "(", "path", ")", ":", "\n", "\n", "    ", "data_imgs", "=", "sio", ".", "loadmat", "(", "path", ")", "\n", "\n", "img_flair", "=", "data_imgs", "[", "'data'", "]", "[", "'img_flair'", "]", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_t1", "=", "data_imgs", "[", "'data'", "]", "[", "'img_t1'", "]", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_t1ce", "=", "data_imgs", "[", "'data'", "]", "[", "'img_t1ce'", "]", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_t2", "=", "data_imgs", "[", "'data'", "]", "[", "'img_t2'", "]", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "img_t1", ",", "img_t1ce", ",", "img_t2", ",", "img_flair", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.mkdir_p": [[420, 429], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "", "def", "mkdir_p", "(", "path", ")", ":", "\n", "\t", "'''make dir if not exist'''", "\n", "try", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "\t\t", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "\t\t\t", "pass", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.model_task": [[432, 461], ["torch.reshape().type", "torch.reshape().type", "torch.reshape().type", "torch.reshape", "torch.reshape", "torch.reshape"], "function", ["None"], ["", "", "", "def", "model_task", "(", "inputs", ",", "task_id", ")", ":", "\n", "\n", "    ", "if", "task_id", "==", "1", ":", "\n", "        ", "in_id1", "=", "0", "\n", "in_id2", "=", "1", "\n", "out_id", "=", "2", "\n", "\n", "", "if", "task_id", "==", "2", ":", "\n", "        ", "in_id1", "=", "0", "\n", "in_id2", "=", "2", "\n", "out_id", "=", "3", "\n", "\n", "", "if", "task_id", "==", "3", ":", "\n", "        ", "in_id1", "=", "0", "\n", "in_id2", "=", "3", "\n", "out_id", "=", "2", "\n", "\n", "", "if", "task_id", "==", "4", ":", "\n", "        ", "in_id1", "=", "2", "\n", "in_id2", "=", "3", "\n", "out_id", "=", "0", "\n", "\n", "\n", "", "x1", "=", "torch", ".", "reshape", "(", "inputs", "[", "in_id1", "]", ",", "[", "inputs", "[", "in_id1", "]", ".", "shape", "[", "1", "]", "*", "inputs", "[", "in_id1", "]", ".", "shape", "[", "0", "]", ",", "1", ",", "inputs", "[", "in_id1", "]", ".", "shape", "[", "2", "]", ",", "inputs", "[", "in_id1", "]", ".", "shape", "[", "3", "]", "]", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "x2", "=", "torch", ".", "reshape", "(", "inputs", "[", "in_id2", "]", ",", "[", "inputs", "[", "in_id2", "]", ".", "shape", "[", "1", "]", "*", "inputs", "[", "in_id2", "]", ".", "shape", "[", "0", "]", ",", "1", ",", "inputs", "[", "in_id2", "]", ".", "shape", "[", "2", "]", ",", "inputs", "[", "in_id2", "]", ".", "shape", "[", "3", "]", "]", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "x3", "=", "torch", ".", "reshape", "(", "inputs", "[", "out_id", "]", ",", "[", "inputs", "[", "out_id", "]", ".", "shape", "[", "1", "]", "*", "inputs", "[", "out_id", "]", ".", "shape", "[", "0", "]", ",", "1", ",", "inputs", "[", "out_id", "]", ".", "shape", "[", "2", "]", ",", "inputs", "[", "out_id", "]", ".", "shape", "[", "3", "]", "]", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "return", "x1", ",", "x2", ",", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.weights_init_normal": [[462, 469], ["classname.find", "torch.nn.init.normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"BatchNorm2d\"", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taozh2017_HiNet.funcs.utils.ErrorMetrics": [[471, 514], ["vol_s.astype.astype", "skimage.measure.compare_ssim", "skimage.measure.compare_psnr", "len", "len", "numpy.sum", "numpy.sum", "numpy.max", "numpy.min", "vol_s.astype.max", "vol_t.max", "vol_s.astype.min", "vol_t.min"], "function", ["None"], ["", "", "def", "ErrorMetrics", "(", "vol_s", ",", "vol_t", ")", ":", "\n", "\n", "# calculate various error metrics.", "\n", "# vol_s should be the synthesized volume (a 3d numpy array) or an array of these volumes", "\n", "# vol_t should be the ground truth volume (a 3d numpy array) or an array of these volumes", "\n", "\n", "#    vol_s = np.squeeze(vol_s)", "\n", "#    vol_t = np.squeeze(vol_t)", "\n", "\n", "#    vol_s = vol_s.numpy()", "\n", "#    vol_t = vol_t.numpy()", "\n", "\n", "    ", "assert", "len", "(", "vol_s", ".", "shape", ")", "==", "len", "(", "vol_t", ".", "shape", ")", "==", "3", "\n", "assert", "vol_s", ".", "shape", "[", "0", "]", "==", "vol_t", ".", "shape", "[", "0", "]", "\n", "assert", "vol_s", ".", "shape", "[", "1", "]", "==", "vol_t", ".", "shape", "[", "1", "]", "\n", "assert", "vol_s", ".", "shape", "[", "2", "]", "==", "vol_t", ".", "shape", "[", "2", "]", "\n", "\n", "vol_s", "[", "vol_t", "==", "0", "]", "=", "0", "\n", "vol_s", "[", "vol_s", "<", "0", "]", "=", "0", "\n", "\n", "errors", "=", "{", "}", "\n", "\n", "vol_s", "=", "vol_s", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# errors['MSE'] = np.mean((vol_s - vol_t) ** 2.)", "\n", "errors", "[", "'MSE'", "]", "=", "np", ".", "sum", "(", "(", "vol_s", "-", "vol_t", ")", "**", "2.", ")", "/", "np", ".", "sum", "(", "vol_t", "**", "2", ")", "\n", "errors", "[", "'SSIM'", "]", "=", "ssim", "(", "vol_t", ",", "vol_s", ")", "\n", "dr", "=", "np", ".", "max", "(", "[", "vol_s", ".", "max", "(", ")", ",", "vol_t", ".", "max", "(", ")", "]", ")", "-", "np", ".", "min", "(", "[", "vol_s", ".", "min", "(", ")", ",", "vol_t", ".", "min", "(", ")", "]", ")", "\n", "errors", "[", "'PSNR'", "]", "=", "psnr", "(", "vol_t", ",", "vol_s", ",", "dynamic_range", "=", "dr", ")", "\n", "\n", "#    # non background in both", "\n", "#    non_bg = (vol_t != vol_t[0, 0, 0])", "\n", "#    errors['SSIM_NBG'] = ssim(vol_t[non_bg], vol_s[non_bg])", "\n", "#    dr = np.max([vol_t[non_bg].max(), vol_s[non_bg].max()]) - np.min([vol_t[non_bg].min(), vol_s[non_bg].min()])", "\n", "#    errors['PSNR_NBG'] = psnr(vol_t[non_bg], vol_s[non_bg], dynamic_range=dr)", "\n", "#", "\n", "#    vol_s_non_bg = vol_s[non_bg].flatten()", "\n", "#    vol_t_non_bg = vol_t[non_bg].flatten()", "\n", "#    ", "\n", "#    # errors['MSE_NBG'] = np.mean((vol_s_non_bg - vol_t_non_bg) ** 2.)", "\n", "#    errors['MSE_NBG'] = np.sum((vol_s_non_bg - vol_t_non_bg) ** 2.) /np.sum(vol_t_non_bg**2)", "\n", "\n", "return", "errors", "\n", "", ""]]}