{"home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.TumDataSet.__init__": [[25, 82], ["numpy.array", "numpy.load", "numpy.load", "numpy.array", "range", "len", "len", "os.path.join", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.empty", "len", "range", "numpy.append", "numpy.append", "os.listdir", "str", "image_paths.append", "depth_paths.append", "flow_paths.append", "int", "int", "DataLoader.TumDataSet.appendElementByIdx", "DataLoader.TumDataSet.appendElementByIdx", "DataLoader.TumDataSet.appendElementByIdx", "len", "str", "str", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.TumDataSet.appendElementByIdx", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.TumDataSet.appendElementByIdx", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.TumDataSet.appendElementByIdx"], ["    ", "def", "__init__", "(", "self", ",", "gyro", "=", "False", ",", "acc", "=", "False", ",", "test_seq", "=", "[", "2", ",", "7", "]", ",", "data_path", "=", "'../data/'", ")", ":", "\n", "        ", "num_seqs", "=", "10", "\n", "test_seq", "=", "np", ".", "array", "(", "test_seq", ",", "dtype", "=", "'int'", ")", "\n", "\n", "# parameters", "\n", "lut", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'seq1/cam1/v1_lut.npy'", ")", ")", "\n", "cam", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'seq1/cam1/camera.npy'", ")", ")", "\n", "cam", "=", "np", ".", "array", "(", "[", "[", "cam", "[", "0", "]", ",", "0", ",", "cam", "[", "2", "]", "]", ",", "\n", "[", "0", ",", "cam", "[", "1", "]", ",", "cam", "[", "3", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "params", "=", "{", "'lut'", ":", "lut", ",", "\n", "'cam'", ":", "cam", ",", "\n", "'img_shape'", ":", "[", "256", ",", "320", "]", "}", "\n", "\n", "# get entire dataset and split data for training/testing", "\n", "self", ".", "data", "=", "{", "}", "\n", "self", ".", "data", "[", "'train'", "]", "=", "{", "'size'", ":", "0", ",", "'image_paths'", ":", "[", "]", ",", "'imus'", ":", "[", "]", ",", "'poses'", ":", "[", "]", ",", "\n", "'vels'", ":", "[", "]", ",", "'depth_paths'", ":", "[", "]", ",", "'flow_paths'", ":", "[", "]", "}", "\n", "self", ".", "data", "[", "'val'", "]", "=", "{", "'size'", ":", "0", ",", "'image_paths'", ":", "[", "]", ",", "'imus'", ":", "[", "]", ",", "'poses'", ":", "[", "]", ",", "\n", "'vels'", ":", "[", "]", ",", "'depth_paths'", ":", "[", "]", ",", "'flow_paths'", ":", "[", "]", "}", "\n", "self", ".", "data", "[", "'test'", "]", "=", "{", "}", "\n", "for", "seq", "in", "range", "(", "1", ",", "num_seqs", "+", "1", ")", ":", "\n", "            ", "seq_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'seq'", "+", "str", "(", "seq", ")", "+", "'/cam1/'", ")", "\n", "poses", "=", "np", ".", "load", "(", "seq_path", "+", "'pose_cam1_v1.npy'", ")", "\n", "vels", "=", "poses", "[", ":", ",", "-", "1", ",", ":", "]", "# velocity = last row pose / 1.0", "\n", "imus_raw", "=", "np", ".", "load", "(", "seq_path", "+", "'imu_cam1_v1.npy'", ")", "\n", "imus", "=", "np", ".", "empty", "(", "(", "imus_raw", ".", "shape", "[", "0", "]", ",", "imus_raw", ".", "shape", "[", "1", "]", ",", "0", ")", ")", "\n", "if", "gyro", ":", "\n", "                ", "imus", "=", "np", ".", "append", "(", "imus", ",", "imus_raw", "[", ":", ",", ":", ",", ":", "3", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "if", "acc", ":", "\n", "                ", "imus", "=", "np", ".", "append", "(", "imus", ",", "imus_raw", "[", ":", ",", ":", ",", "3", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "count", "=", "len", "(", "os", ".", "listdir", "(", "seq_path", "+", "'flows_rs2gs/'", ")", ")", "\n", "image_paths", ",", "depth_paths", ",", "flow_paths", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "count", ")", ":", "\n", "                ", "fi", "=", "str", "(", "i", ")", "\n", "image_paths", ".", "append", "(", "seq_path", "+", "'images/'", "+", "fi", "+", "'.png'", ")", "\n", "depth_paths", ".", "append", "(", "seq_path", "+", "'depth/'", "+", "fi", "+", "'.npy'", ")", "\n", "flow_paths", ".", "append", "(", "seq_path", "+", "'flows_rs2gs/'", "+", "str", "(", "fi", ")", "+", "'.npy'", ")", "\n", "\n", "# split data", "\n", "", "if", "seq", "in", "test_seq", ":", "\n", "                ", "self", ".", "data", "[", "'test'", "]", "[", "seq", "]", "=", "{", "'size'", ":", "len", "(", "image_paths", ")", ",", "'image_paths'", ":", "image_paths", ",", "\n", "'imus'", ":", "imus", ",", "'poses'", ":", "poses", ",", "'vels'", ":", "vels", ",", "\n", "'depth_paths'", ":", "depth_paths", ",", "'flow_paths'", ":", "flow_paths", "}", "\n", "", "else", ":", "\n", "# use the middle 10% as validation", "\n", "                ", "val_start", "=", "int", "(", "0.45", "*", "count", ")", "\n", "val_end", "=", "int", "(", "0.55", "*", "count", ")", "\n", "self", ".", "appendElementByIdx", "(", "'train'", ",", "image_paths", ",", "imus", ",", "depth_paths", ",", "flow_paths", ",", "\n", "poses", ",", "vels", ",", "[", "i", "for", "i", "in", "range", "(", "val_start", ")", "]", ")", "\n", "self", ".", "appendElementByIdx", "(", "'val'", ",", "image_paths", ",", "imus", ",", "depth_paths", ",", "flow_paths", ",", "\n", "poses", ",", "vels", ",", "[", "i", "for", "i", "in", "range", "(", "val_start", ",", "val_end", ")", "]", ")", "\n", "self", ".", "appendElementByIdx", "(", "'train'", ",", "image_paths", ",", "imus", ",", "depth_paths", ",", "flow_paths", ",", "\n", "poses", ",", "vels", ",", "[", "i", "for", "i", "in", "range", "(", "val_end", ",", "count", ")", "]", ")", "\n", "\n", "", "", "self", ".", "data", "[", "'train'", "]", "[", "'size'", "]", "=", "len", "(", "self", ".", "data", "[", "'train'", "]", "[", "'image_paths'", "]", ")", "\n", "self", ".", "data", "[", "'val'", "]", "[", "'size'", "]", "=", "len", "(", "self", ".", "data", "[", "'val'", "]", "[", "'image_paths'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.TumDataSet.appendElementByIdx": [[83, 91], ["[].append", "[].append", "[].append", "[].append", "[].append", "[].append"], "methods", ["None"], ["", "def", "appendElementByIdx", "(", "self", ",", "split", ",", "image_paths", ",", "imus", ",", "depth_paths", ",", "flow_paths", ",", "poses", ",", "vels", ",", "indices", ")", ":", "\n", "        ", "for", "i", "in", "indices", ":", "\n", "            ", "self", ".", "data", "[", "split", "]", "[", "'image_paths'", "]", ".", "append", "(", "image_paths", "[", "i", "]", ")", "\n", "self", ".", "data", "[", "split", "]", "[", "'imus'", "]", ".", "append", "(", "imus", "[", "i", "]", ")", "\n", "self", ".", "data", "[", "split", "]", "[", "'poses'", "]", ".", "append", "(", "poses", "[", "i", "]", ")", "\n", "self", ".", "data", "[", "split", "]", "[", "'vels'", "]", ".", "append", "(", "vels", "[", "i", "]", ")", "\n", "self", ".", "data", "[", "split", "]", "[", "'depth_paths'", "]", ".", "append", "(", "depth_paths", "[", "i", "]", ")", "\n", "self", ".", "data", "[", "split", "]", "[", "'flow_paths'", "]", ".", "append", "(", "flow_paths", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.DataGenerator.__init__": [[95, 100], ["DataLoader.DataGenerator.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.DataGenerator.on_epoch_end"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "batch_size", ",", "dtype", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "on_epoch_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.DataGenerator.__len__": [[101, 103], ["int", "numpy.ceil"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "np", ".", "ceil", "(", "self", ".", "data", "[", "'size'", "]", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.DataGenerator.__getitem__": [[104, 129], ["numpy.expand_dims", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.load", "numpy.array", "numpy.array", "numpy.array", "cv2.imread", "numpy.load"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "indexes", "=", "self", ".", "indexes", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch_image", "=", "np", ".", "array", "(", "\n", "[", "cv2", ".", "imread", "(", "self", ".", "data", "[", "'image_paths'", "]", "[", "i", "]", ")", "for", "i", "in", "indexes", "]", ")", "/", "255.0", "\n", "batch_depth", "=", "np", ".", "expand_dims", "(", "\n", "np", ".", "array", "(", "[", "np", ".", "load", "(", "self", ".", "data", "[", "'depth_paths'", "]", "[", "i", "]", ")", "for", "i", "in", "indexes", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "batch_flow", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "load", "(", "self", ".", "data", "[", "'flow_paths'", "]", "[", "i", "]", ")", "for", "i", "in", "indexes", "]", ")", "\n", "batch_depth_flow", "=", "np", ".", "concatenate", "(", "(", "batch_depth", ",", "batch_flow", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "dtype", "==", "'depth'", ":", "\n", "            ", "inputs", "=", "batch_image", "\n", "outputs", "=", "batch_depth", "\n", "", "elif", "self", ".", "dtype", "==", "'vel'", ":", "\n", "            ", "batch_vel", "=", "np", ".", "array", "(", "[", "self", ".", "data", "[", "'vels'", "]", "[", "i", "]", "for", "i", "in", "indexes", "]", ")", "\n", "inputs", "=", "batch_image", "\n", "outputs", "=", "{", "'vel'", ":", "batch_vel", ",", "'flow'", ":", "batch_depth_flow", "}", "\n", "", "else", ":", "\n", "            ", "assert", "(", "self", ".", "dtype", "==", "'pose'", ")", "\n", "batch_imu", "=", "np", ".", "array", "(", "[", "self", ".", "data", "[", "'imus'", "]", "[", "i", "]", "for", "i", "in", "indexes", "]", ")", "\n", "batch_pose", "=", "np", ".", "array", "(", "[", "self", ".", "data", "[", "'poses'", "]", "[", "i", "]", "for", "i", "in", "indexes", "]", ")", "\n", "inputs", "=", "[", "batch_image", ",", "batch_imu", "]", "\n", "outputs", "=", "{", "'pose'", ":", "batch_pose", ",", "'flow'", ":", "batch_depth_flow", "}", "\n", "\n", "", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.DataLoader.DataGenerator.on_epoch_end": [[130, 133], ["numpy.arange", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "indexes", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "'size'", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.test.get_flows_pred": [[34, 47], ["numpy.empty", "range", "range", "numpy.array", "model_depth.model.predict", "helpers.getFlow().numpy", "numpy.append", "min", "numpy.array", "model_rspose.model.predict", "helpers.getFlow", "cv2.imread"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.helpers.getFlow"], ["def", "get_flows_pred", "(", "data", ",", "batch_size", "=", "32", ")", ":", "\n", "    ", "flows_pred", "=", "np", ".", "empty", "(", "(", "0", ",", "rows", ",", "cols", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "data", "[", "'size'", "]", ",", "batch_size", ")", ":", "\n", "        ", "rg", "=", "range", "(", "i", ",", "min", "(", "i", "+", "batch_size", ",", "data", "[", "'size'", "]", ")", ")", "\n", "img", "=", "np", ".", "array", "(", "[", "cv2", ".", "imread", "(", "data", "[", "'image_paths'", "]", "[", "j", "]", ")", "\n", "for", "j", "in", "rg", "]", ")", "/", "255.0", "\n", "imu", "=", "np", ".", "array", "(", "[", "data", "[", "'imus'", "]", "[", "j", "]", "for", "j", "in", "rg", "]", ")", "\n", "pose_mat", "=", "model_rspose", ".", "model", ".", "predict", "(", "[", "img", ",", "imu", "]", ")", "[", "'flow'", "]", "\n", "depth_pred", "=", "model_depth", ".", "model", ".", "predict", "(", "img", ")", "\n", "flow_pred", "=", "getFlow", "(", "depth_pred", ",", "pose_mat", ",", "dataset", ".", "params", ")", ".", "numpy", "(", ")", "\n", "flows_pred", "=", "np", ".", "append", "(", "flows_pred", ",", "flow_pred", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "flows_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.test.rectify_imgs": [[49, 82], ["os.makedirs", "range", "numpy.indices", "numpy.stack", "numpy.array", "numpy.clip", "numpy.clip", "numpy.reshape", "numpy.full", "numpy.full", "numpy.reshape", "numpy.reshape", "numpy.stack", "pandas.DataFrame().interpolate", "pandas.DataFrame().interpolate", "cv2.imread", "cv2.remap", "cv2.imwrite", "numpy.reshape", "numpy.reshape", "pandas.DataFrame", "pandas.DataFrame"], "function", ["None"], ["", "def", "rectify_imgs", "(", "data", ",", "flow", ",", "img_path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "img_path", ")", "\n", "for", "i", "in", "range", "(", "data", "[", "'size'", "]", ")", ":", "\n", "        ", "flow_rs2gs", "=", "flow", "[", "i", "]", "\n", "size_1d", "=", "rows", "*", "cols", "\n", "ind_v", ",", "ind_u", "=", "np", ".", "indices", "(", "(", "rows", ",", "cols", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# map: rs to gs", "\n", "uv_rs", "=", "np", ".", "stack", "(", "(", "ind_u", ",", "ind_v", ")", ",", "axis", "=", "-", "1", ")", "\n", "uv_gs", "=", "np", ".", "array", "(", "uv_rs", "+", "flow_rs2gs", "+", "0.5", ",", "dtype", "=", "'int'", ")", "\n", "u_gs", "=", "np", ".", "clip", "(", "uv_gs", "[", ":", ",", ":", ",", "0", "]", ",", "0", ",", "cols", "-", "1", ")", "\n", "v_gs", "=", "np", ".", "clip", "(", "uv_gs", "[", ":", ",", ":", ",", "1", "]", ",", "0", ",", "rows", "-", "1", ")", "\n", "uv_gs_1d", "=", "v_gs", "*", "cols", "+", "u_gs", "\n", "uv_gs_1d", "=", "np", ".", "reshape", "(", "uv_gs_1d", ",", "(", "size_1d", ")", ")", "\n", "\n", "# reverse the map: gs to rs", "\n", "flow_gs2rs_1d_u", "=", "np", ".", "full", "(", "(", "size_1d", ")", ",", "np", ".", "nan", ",", "dtype", "=", "'float32'", ")", "\n", "flow_gs2rs_1d_v", "=", "np", ".", "full", "(", "(", "size_1d", ")", ",", "np", ".", "nan", ",", "dtype", "=", "'float32'", ")", "\n", "flow_gs2rs_1d_u", "[", "uv_gs_1d", "]", "=", "np", ".", "reshape", "(", "-", "flow_rs2gs", "[", ":", ",", ":", ",", "0", "]", ",", "(", "size_1d", ")", ")", "\n", "flow_gs2rs_1d_v", "[", "uv_gs_1d", "]", "=", "np", ".", "reshape", "(", "-", "flow_rs2gs", "[", ":", ",", ":", ",", "1", "]", ",", "(", "size_1d", ")", ")", "\n", "flow_gs2rs", "=", "np", ".", "stack", "(", "[", "np", ".", "reshape", "(", "flow_gs2rs_1d_u", ",", "(", "rows", ",", "cols", ")", ")", ",", "\n", "np", ".", "reshape", "(", "flow_gs2rs_1d_v", ",", "(", "rows", ",", "cols", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# 2d interpolation", "\n", "flow_gs2rs", "[", ":", ",", ":", ",", "0", "]", "=", "pd", ".", "DataFrame", "(", "flow_gs2rs", "[", ":", ",", ":", ",", "0", "]", ")", ".", "interpolate", "(", ")", "\n", "flow_gs2rs", "[", ":", ",", ":", ",", "1", "]", "=", "pd", ".", "DataFrame", "(", "flow_gs2rs", "[", ":", ",", ":", ",", "1", "]", ")", ".", "interpolate", "(", ")", "\n", "\n", "# reconstruct gs image", "\n", "map_u", "=", "ind_u", "+", "flow_gs2rs", "[", ":", ",", ":", ",", "0", "]", "\n", "map_v", "=", "ind_v", "+", "flow_gs2rs", "[", ":", ",", ":", ",", "1", "]", "\n", "img_rs", "=", "cv2", ".", "imread", "(", "data", "[", "'image_paths'", "]", "[", "i", "]", ")", "\n", "img_gs", "=", "cv2", ".", "remap", "(", "img_rs", ",", "map_u", ",", "map_v", ",", "cv2", ".", "INTER_LINEAR", ")", "\n", "cv2", ".", "imwrite", "(", "'{}{}.png'", ".", "format", "(", "img_path", ",", "i", ")", ",", "img_gs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.helpers.getFlow": [[24, 50], ["tensorflow.split", "tensorflow.expand_dims", "tensorflow.cos", "numpy.indices", "numpy.matmul", "tensorflow.stack", "tensorflow.matmul", "tensorflow.split", "numpy.stack", "tensorflow.identity", "tensorflow.norm", "numpy.stack", "numpy.linalg.inv", "numpy.ones_like", "tensorflow.squeeze", "tensorflow.linalg.cross", "tensorflow.sin", "tensorflow.reduce_sum"], "function", ["None"], ["def", "getFlow", "(", "depth", ",", "pose", ",", "params", ")", ":", "\n", "    ", "rows", ",", "cols", "=", "params", "[", "'img_shape'", "]", "\n", "\n", "# split pose to translation and angel-axis representation rotation", "\n", "trans", ",", "rot", "=", "tf", ".", "split", "(", "pose", ",", "[", "3", ",", "3", "]", ",", "-", "1", ")", "\n", "angle", "=", "tf", ".", "expand_dims", "(", "tf", ".", "norm", "(", "rot", ",", "axis", "=", "-", "1", ")", ",", "-", "1", ")", "\n", "cos_angle", "=", "tf", ".", "cos", "(", "angle", ")", "\n", "axis", "=", "rot", "/", "(", "angle", "+", "1e-20", ")", "\n", "\n", "# recover 3D point in RS frame", "\n", "v_rs", ",", "u_rs", "=", "np", ".", "indices", "(", "(", "rows", ",", "cols", ")", ",", "dtype", "=", "'float32'", ")", "\n", "Kiu_rs", "=", "np", ".", "matmul", "(", "np", ".", "stack", "(", "[", "u_rs", ",", "v_rs", ",", "np", ".", "ones_like", "(", "\n", "u_rs", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "np", ".", "linalg", ".", "inv", "(", "params", "[", "'cam'", "]", ")", ".", "T", ")", "\n", "depth", "=", "tf", ".", "stack", "(", "[", "tf", ".", "squeeze", "(", "depth", ",", "axis", "=", "-", "1", ")", "]", "*", "3", ",", "axis", "=", "-", "1", ")", "\n", "xyz_rs", "=", "depth", "*", "Kiu_rs", "\n", "\n", "# project to GS frame", "\n", "xyz_gs", "=", "xyz_rs", "*", "cos_angle", "+", "tf", ".", "linalg", ".", "cross", "(", "axis", ",", "xyz_rs", ")", "*", "tf", ".", "sin", "(", "\n", "angle", ")", "+", "axis", "*", "tf", ".", "reduce_sum", "(", "axis", "*", "xyz_rs", ",", "-", "1", ",", "True", ")", "*", "(", "1", "-", "cos_angle", ")", "+", "trans", "\n", "uvd_gs", "=", "tf", ".", "matmul", "(", "xyz_gs", ",", "params", "[", "'cam'", "]", ".", "T", ")", "\n", "uv_gs", ",", "d_gs", "=", "tf", ".", "split", "(", "uvd_gs", ",", "[", "2", ",", "1", "]", ",", "-", "1", ")", "\n", "uv_gs", "=", "uv_gs", "/", "(", "d_gs", "+", "1e-20", ")", "\n", "\n", "uv_rs", "=", "np", ".", "stack", "(", "[", "u_rs", ",", "v_rs", "]", ",", "axis", "=", "-", "1", ")", "\n", "flow", "=", "tf", ".", "identity", "(", "uv_gs", "-", "uv_rs", ",", "name", "=", "'flow'", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.helpers.flowLossByPose": [[52, 60], ["tensorflow.split", "tensorflow.where", "helpers.getFlow", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.math.is_nan", "tensorflow.ones_like", "tensorflow.math.is_nan", "tensorflow.zeros_like", "tensorflow.norm"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.helpers.getFlow"], ["", "def", "flowLossByPose", "(", "df_true", ",", "p_pred", ",", "params", ")", ":", "\n", "    ", "d_true", ",", "f_true", "=", "tf", ".", "split", "(", "df_true", ",", "[", "1", ",", "2", "]", ",", "-", "1", ")", "\n", "d_true", "=", "tf", ".", "where", "(", "tf", ".", "math", ".", "is_nan", "(", "d_true", ")", ",", "\n", "tf", ".", "ones_like", "(", "d_true", ")", ",", "d_true", ")", "\n", "f_pred", "=", "getFlow", "(", "d_true", ",", "p_pred", ",", "params", ")", "\n", "diff", "=", "tf", ".", "where", "(", "tf", ".", "math", ".", "is_nan", "(", "f_true", ")", ",", "\n", "tf", ".", "zeros_like", "(", "f_true", ")", ",", "f_true", "-", "f_pred", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "norm", "(", "diff", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.helpers.baseNet": [[62, 77], ["classification_models.keras.Classifiers.get", "ResNet34", "classification_models.keras.Classifiers.get", "ResNet50", "vgg.get_layer", "keras.applications.vgg16.VGG16"], "function", ["None"], ["", "def", "baseNet", "(", "img_input", ",", "base", "=", "'ResNet34'", ")", ":", "\n", "    ", "_", ",", "rows", ",", "cols", ",", "_", "=", "img_input", ".", "shape", "\n", "if", "base", "==", "'ResNet34'", ":", "\n", "        ", "ResNet34", ",", "_", "=", "Classifiers", ".", "get", "(", "'resnet34'", ")", "\n", "features", "=", "ResNet34", "(", "input_shape", "=", "(", "rows", ",", "cols", ",", "3", ")", ",", "\n", "weights", "=", "'imagenet'", ",", "include_top", "=", "False", ")", "(", "img_input", ")", "\n", "", "elif", "base", "==", "'ResNet50'", ":", "\n", "        ", "ResNet50", ",", "_", "=", "Classifiers", ".", "get", "(", "'resnet50'", ")", "\n", "features", "=", "ResNet50", "(", "input_shape", "=", "(", "rows", ",", "cols", ",", "3", ")", ",", "\n", "weights", "=", "'imagenet'", ",", "include_top", "=", "False", ")", "(", "img_input", ")", "\n", "", "elif", "base", "==", "'VGG16'", ":", "\n", "        ", "vgg", "=", "VGG16", "(", "input_shape", "=", "(", "rows", ",", "cols", ",", "3", ")", ",", "\n", "weights", "=", "'imagenet'", ",", "include_top", "=", "False", ")", "(", "img_input", ")", "\n", "features", "=", "vgg", ".", "get_layer", "(", "'block5_pool'", ")", "\n", "", "return", "features", "\n", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.RsPoseNet.__init__": [[41, 54], ["keras.models.Input", "keras.models.Input", "RsPoseNet.RsPoseNet.poseNet", "RsPoseNet.RsPoseNet.convertToPoseMat", "keras.models.Model"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.RsPoseNet.poseNet", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.RsPoseNet.convertToPoseMat"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "gyro", "=", "True", ",", "acc", "=", "True", ")", ":", "\n", "        ", "rows", ",", "cols", "=", "params", "[", "'img_shape'", "]", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "pose_scale", "=", "10", "\n", "\n", "# inputs", "\n", "input_img", "=", "Input", "(", "(", "rows", ",", "cols", ",", "3", ")", ")", "\n", "input_imu", "=", "Input", "(", "(", "rows", ",", "3", "*", "gyro", "+", "3", "*", "acc", ")", ")", "\n", "pose_scaled", "=", "self", ".", "poseNet", "(", "input_img", ",", "input_imu", ")", "# for poseLoss", "\n", "pose_mat", "=", "self", ".", "convertToPoseMat", "(", "pose_scaled", ")", "# for flowLoss", "\n", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "[", "input_img", ",", "input_imu", "]", ",", "outputs", "=", "{", "\n", "'pose'", ":", "pose_scaled", ",", "'flow'", ":", "pose_mat", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.RsPoseNet.poseNet": [[55, 76], ["helpers.baseNet", "RsPoseNet.poseConv", "RsPoseNet.poseConv", "RsPoseNet.poseConv", "RsPoseNet.poseConv", "RsPoseNet.poseConv", "keras.layers.Conv2D", "keras.layers.Reshape", "keras.layers.Concatenate", "keras.layers.LSTM", "keras.layers.LSTM"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.helpers.baseNet", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.poseConv", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.poseConv", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.poseConv", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.poseConv", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.poseConv"], ["", "def", "poseNet", "(", "self", ",", "input_img", ",", "input_imu", ")", ":", "\n", "        ", "features", "=", "baseNet", "(", "input_img", ")", "\n", "\n", "x", "=", "poseConv", "(", "features", ",", "512", ",", "3", ",", "5", ")", "\n", "x", "=", "poseConv", "(", "x", ",", "256", ",", "3", ",", "4", ")", "\n", "x", "=", "poseConv", "(", "x", ",", "128", ",", "3", ",", "3", ")", "\n", "x", "=", "poseConv", "(", "x", ",", "64", ",", "3", ",", "2", ")", "\n", "x", "=", "poseConv", "(", "x", ",", "32", ",", "3", ",", "1", ")", "\n", "\n", "img_pose", "=", "Conv2D", "(", "6", ",", "1", ",", "1", ",", "'same'", ",", "activation", "=", "'tanh'", ",", "\n", "name", "=", "'pose_conv'", ")", "(", "x", ")", "\n", "\n", "img_pose", "=", "Reshape", "(", "\n", "(", "self", ".", "params", "[", "'img_shape'", "]", "[", "0", "]", ",", "6", ")", ",", "name", "=", "'img_pose'", ")", "(", "img_pose", ")", "\n", "\n", "# extend pose from image by IMU", "\n", "img_imu", "=", "Concatenate", "(", ")", "(", "[", "img_pose", ",", "input_imu", "]", ")", "\n", "h", "=", "LSTM", "(", "6", ",", "return_sequences", "=", "True", ",", "name", "=", "'imu_lstm1'", ")", "(", "img_imu", ")", "\n", "pose", "=", "LSTM", "(", "6", ",", "return_sequences", "=", "True", ",", "name", "=", "'pose'", ")", "(", "h", ")", "\n", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.RsPoseNet.convertToPoseMat": [[77, 82], ["tensorflow.gather"], "methods", ["None"], ["", "def", "convertToPoseMat", "(", "self", ",", "pose_scaled", ")", ":", "\n", "# -1 x 256 x 6 -> -1 x 256 x 320 x 6", "\n", "        ", "pose_mat", "=", "tf", ".", "gather", "(", "pose_scaled", "/", "self", ".", "pose_scale", ",", "\n", "self", ".", "params", "[", "'lut'", "]", ",", "axis", "=", "1", ",", "name", "=", "'flow'", ")", "\n", "return", "pose_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.RsPoseNet.poseLoss": [[83, 85], ["tensorflow.reduce_mean", "tensorflow.norm"], "methods", ["None"], ["", "def", "poseLoss", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "norm", "(", "self", ".", "pose_scale", "*", "y_true", "-", "y_pred", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.RsPoseNet.flowLoss": [[86, 88], ["helpers.flowLossByPose"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.helpers.flowLossByPose"], ["", "def", "flowLoss", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "flowLossByPose", "(", "y_true", ",", "y_pred", ",", "self", ".", "params", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsPoseNet.poseConv": [[31, 38], ["keras.layers.Conv2D", "keras.layers.Conv2DTranspose", "keras.layers.Activation", "keras.layers.BatchNormalization", "str", "str", "str"], "function", ["None"], ["def", "poseConv", "(", "x", ",", "filters", ",", "kernel_size", ",", "lvl", ")", ":", "\n", "    ", "x", "=", "Conv2D", "(", "filters", ",", "kernel_size", ",", "(", "1", ",", "2", ")", ",", "'same'", ",", "\n", "activation", "=", "'relu'", ",", "name", "=", "'conv'", "+", "str", "(", "lvl", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2DTranspose", "(", "filters", ",", "kernel_size", ",", "(", "2", ",", "1", ")", ",", "\n", "'same'", ",", "name", "=", "'upconv'", "+", "str", "(", "lvl", ")", ")", "(", "x", ")", "\n", "x", "=", "Activation", "(", "'relu'", ")", "(", "BatchNormalization", "(", "name", "=", "'bn'", "+", "str", "(", "lvl", ")", ")", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.RsDepthNet.__init__": [[43, 48], ["keras.models.Input", "RsDepthNet.RsDepthNet.depthNet", "keras.models.Model"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.RsDepthNet.depthNet"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "rows", ",", "cols", "=", "params", "[", "'img_shape'", "]", "\n", "input_img", "=", "Input", "(", "(", "rows", ",", "cols", ",", "3", ")", ")", "\n", "depth", "=", "self", ".", "depthNet", "(", "input_img", ")", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "input_img", ",", "outputs", "=", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.RsDepthNet.depthNet": [[49, 74], ["RsDepthNet.iconv_pr", "RsDepthNet.iconv_pr", "RsDepthNet.iconv_pr", "RsDepthNet.iconv_pr", "RsDepthNet.iconv_pr", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.UpSampling2D"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.iconv_pr", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.iconv_pr", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.iconv_pr", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.iconv_pr", "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.iconv_pr"], ["", "def", "depthNet", "(", "self", ",", "img", ")", ":", "\n", "# encoder", "\n", "        ", "c1", "=", "Conv2D", "(", "64", ",", "7", ",", "2", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv1'", ")", "(", "img", ")", "\n", "c2", "=", "Conv2D", "(", "128", ",", "5", ",", "2", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv2'", ")", "(", "c1", ")", "\n", "c3a", "=", "Conv2D", "(", "256", ",", "5", ",", "2", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv3a'", ")", "(", "c2", ")", "\n", "c3b", "=", "Conv2D", "(", "256", ",", "3", ",", "1", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv3b'", ")", "(", "c3a", ")", "\n", "c4a", "=", "Conv2D", "(", "512", ",", "3", ",", "2", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv4a'", ")", "(", "c3b", ")", "\n", "c4b", "=", "Conv2D", "(", "512", ",", "3", ",", "1", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv4b'", ")", "(", "c4a", ")", "\n", "c5a", "=", "Conv2D", "(", "512", ",", "3", ",", "2", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv5a'", ")", "(", "c4b", ")", "\n", "c5b", "=", "Conv2D", "(", "512", ",", "3", ",", "1", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv5b'", ")", "(", "c5a", ")", "\n", "c6a", "=", "Conv2D", "(", "1024", ",", "3", ",", "2", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv6a'", ")", "(", "c5b", ")", "\n", "c6b", "=", "Conv2D", "(", "1024", ",", "3", ",", "1", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'conv6b'", ")", "(", "c6a", ")", "\n", "\n", "pr6", "=", "Conv2D", "(", "1", ",", "3", ",", "1", ",", "'same'", ",", "activation", "=", "'relu'", ",", "name", "=", "'pr6'", ")", "(", "c6a", ")", "\n", "\n", "# decoder", "\n", "[", "ic5", ",", "pr5", "]", "=", "iconv_pr", "(", "c6b", ",", "pr6", ",", "c5b", ",", "512", ",", "5", ")", "\n", "[", "ic4", ",", "pr4", "]", "=", "iconv_pr", "(", "ic5", ",", "pr5", ",", "c4b", ",", "256", ",", "4", ")", "\n", "[", "ic3", ",", "pr3", "]", "=", "iconv_pr", "(", "ic4", ",", "pr4", ",", "c3b", ",", "128", ",", "3", ")", "\n", "[", "ic2", ",", "pr2", "]", "=", "iconv_pr", "(", "ic3", ",", "pr3", ",", "c2", ",", "64", ",", "2", ")", "\n", "[", "ic1", ",", "pr1", "]", "=", "iconv_pr", "(", "ic2", ",", "pr2", ",", "c1", ",", "32", ",", "1", ")", "\n", "\n", "d1", "=", "UpSampling2D", "(", "interpolation", "=", "'bilinear'", ",", "name", "=", "'depth'", ")", "(", "pr1", ")", "\n", "\n", "return", "d1", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.RsDepthNet.depthLoss": [[75, 79], ["tensorflow.where", "tensorflow.reduce_mean", "tensorflow.math.is_nan", "tensorflow.zeros_like", "tensorflow.abs"], "methods", ["None"], ["", "def", "depthLoss", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "diff", "=", "tf", ".", "where", "(", "tf", ".", "math", ".", "is_nan", "(", "y_true", ")", ",", "\n", "tf", ".", "zeros_like", "(", "y_true", ")", ",", "y_true", "-", "y_pred", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "diff", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.network.RsDepthNet.iconv_pr": [[29, 40], ["keras.layers.Activation", "keras.layers.UpSampling2D", "keras.layers.Concatenate", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Conv2DTranspose", "str", "str", "str", "str"], "function", ["None"], ["def", "iconv_pr", "(", "iconv_prv", ",", "pr_prv", ",", "conv_encoder", ",", "filters", ",", "lvl", ")", ":", "\n", "    ", "upconv", "=", "Activation", "(", "'relu'", ")", "(", "BatchNormalization", "(", "name", "=", "'upconv{}bn'", ".", "format", "(", "lvl", ")", ")", "(", "\n", "Conv2DTranspose", "(", "filters", ",", "4", ",", "2", ",", "'same'", ",", "name", "=", "'upconv'", "+", "str", "(", "lvl", ")", ")", "(", "iconv_prv", ")", ")", ")", "\n", "upsampled", "=", "UpSampling2D", "(", "interpolation", "=", "'bilinear'", ",", "\n", "name", "=", "'upsampled'", "+", "str", "(", "lvl", ")", ")", "(", "pr_prv", ")", "\n", "ctnt", "=", "Concatenate", "(", ")", "(", "[", "upconv", ",", "upsampled", ",", "conv_encoder", "]", ")", "\n", "iconv", "=", "Conv2D", "(", "filters", ",", "3", ",", "1", ",", "'same'", ",", "activation", "=", "'relu'", ",", "\n", "name", "=", "'iconv'", "+", "str", "(", "lvl", ")", ")", "(", "ctnt", ")", "\n", "pr", "=", "Conv2D", "(", "1", ",", "3", ",", "1", ",", "'same'", ",", "activation", "=", "'relu'", ",", "\n", "name", "=", "'pr'", "+", "str", "(", "lvl", ")", ")", "(", "iconv", ")", "\n", "return", "[", "iconv", ",", "pr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.__init__": [[179, 217], ["tensorflow.reset_default_graph", "tensorflow.Graph", "pwcnet.ModelPWCNet.graph.as_default", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.train.Saver", "os.path.join", "pwcnet.ModelPWCNet.saver.restore", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.device", "pwcnet.ModelPWCNet.nn", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.nn"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'pwcnet'", ",", "session", "=", "None", ",", "options", "=", "_DEFAULT_PWCNET_TEST_OPTIONS", ")", ":", "\n", "        ", "self", ".", "opts", "=", "options", "\n", "self", ".", "y_hat_train_tnsr", "=", "self", ".", "y_hat_val_tnsr", "=", "self", ".", "y_hat_test_tnsr", "=", "None", "\n", "self", ".", "name", "=", "name", "\n", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "self", ".", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "# Configure a TF session, if one doesn't already exist", "\n", "            ", "if", "session", "is", "None", ":", "\n", "                ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sess", "=", "session", "\n", "\n", "# Build the TF graph", "\n", "", "batch_size", "=", "self", ".", "opts", "[", "'batch_size'", "]", "\n", "self", ".", "x_tnsr", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "[", "batch_size", "]", "+", "[", "2", ",", "None", ",", "None", ",", "3", "]", ",", "'x_tnsr'", ")", "\n", "self", ".", "y_tnsr", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "[", "batch_size", "]", "+", "[", "None", ",", "None", ",", "2", "]", ",", "'y_tnsr'", ")", "\n", "\n", "# Build the backbone neural nets and collect the output tensors", "\n", "with", "tf", ".", "device", "(", "self", ".", "opts", "[", "'controller'", "]", ")", ":", "\n", "                ", "self", ".", "flow_pred_tnsr", ",", "self", ".", "flow_pyr_tnsr", "=", "self", ".", "nn", "(", "self", ".", "x_tnsr", ")", "\n", "\n", "# Set output tensors", "\n", "", "self", ".", "y_hat_test_tnsr", "=", "[", "self", ".", "flow_pred_tnsr", ",", "self", ".", "flow_pyr_tnsr", "]", "\n", "\n", "# Init saver (override if you wish) and load checkpoint if it exists", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "# Initialize the graph with the content of the checkpoint", "\n", "self", ".", "last_ckpt", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "self", ".", "opts", "[", "'ckpt_path'", "]", ")", "\n", "assert", "(", "self", ".", "last_ckpt", "is", "not", "None", ")", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "self", ".", "last_ckpt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.adapt_x": [[221, 251], ["isinstance", "divmod", "divmod", "isinstance", "isinstance", "isinstance", "numpy.array", "x.astype", "numpy.pad", "len", "len"], "methods", ["None"], ["", "", "def", "adapt_x", "(", "self", ",", "x", ")", ":", "\n", "# Ensure we're dealing with RGB image pairs", "\n", "        ", "assert", "(", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", "or", "isinstance", "(", "x", ",", "list", ")", ")", "\n", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "assert", "(", "len", "(", "x", ".", "shape", ")", "==", "5", ")", "\n", "assert", "(", "x", ".", "shape", "[", "1", "]", "==", "2", "and", "x", ".", "shape", "[", "4", "]", "==", "3", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "len", "(", "x", "[", "0", "]", ".", "shape", ")", "==", "4", ")", "\n", "assert", "(", "x", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "2", "or", "x", "[", "0", "]", ".", "shape", "[", "3", "]", "==", "3", ")", "\n", "\n", "# Bring image range from 0..255 to 0..1 and use floats (also, list[(2,H,W,3)] -> (batch_size,2,H,W,3))", "\n", "", "x_adapt", "=", "np", ".", "array", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "if", "isinstance", "(", "\n", "x", ",", "list", ")", "else", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x_adapt", "/=", "255.", "\n", "\n", "# Make sure the image dimensions are multiples of 2**pyramid_levels, pad them if they're not", "\n", "_", ",", "pad_h", "=", "divmod", "(", "x_adapt", ".", "shape", "[", "2", "]", ",", "2", "**", "self", ".", "opts", "[", "'pyr_lvls'", "]", ")", "\n", "if", "pad_h", "!=", "0", ":", "\n", "            ", "pad_h", "=", "2", "**", "self", ".", "opts", "[", "'pyr_lvls'", "]", "-", "pad_h", "\n", "", "_", ",", "pad_w", "=", "divmod", "(", "x_adapt", ".", "shape", "[", "3", "]", ",", "2", "**", "self", ".", "opts", "[", "'pyr_lvls'", "]", ")", "\n", "if", "pad_w", "!=", "0", ":", "\n", "            ", "pad_w", "=", "2", "**", "self", ".", "opts", "[", "'pyr_lvls'", "]", "-", "pad_w", "\n", "", "x_adapt_info", "=", "None", "\n", "if", "pad_h", "!=", "0", "or", "pad_w", "!=", "0", ":", "\n", "            ", "padding", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", "]", "\n", "x_adapt_info", "=", "x_adapt", ".", "shape", "# Save original shape", "\n", "x_adapt", "=", "np", ".", "pad", "(", "x_adapt", ",", "padding", ",", "\n", "mode", "=", "'constant'", ",", "constant_values", "=", "0.", ")", "\n", "\n", "", "return", "x_adapt", ",", "x_adapt_info", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.postproc_y_hat_test": [[252, 270], ["range", "isinstance", "len", "range", "pred_flows_pyramid.append", "len", "pyramid.append"], "methods", ["None"], ["", "def", "postproc_y_hat_test", "(", "self", ",", "y_hat", ",", "adapt_info", "=", "None", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "y_hat", ",", "list", ")", "and", "len", "(", "y_hat", ")", "==", "2", ")", "\n", "\n", "# Have the samples been padded to fit the network's requirements? If so, crop flows back to original size.", "\n", "pred_flows", "=", "y_hat", "[", "0", "]", "\n", "if", "adapt_info", "is", "not", "None", ":", "\n", "            ", "pred_flows", "=", "pred_flows", "[", ":", ",", "0", ":", "adapt_info", "[", "1", "]", ",", "0", ":", "adapt_info", "[", "2", "]", ",", ":", "]", "\n", "\n", "# Individuate flows of the flow pyramid (at this point, they are still batched)", "\n", "", "pyramids", "=", "y_hat", "[", "1", "]", "\n", "pred_flows_pyramid", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "pred_flows", ")", ")", ":", "\n", "            ", "pyramid", "=", "[", "]", "\n", "for", "lvl", "in", "range", "(", "self", ".", "opts", "[", "'pyr_lvls'", "]", "-", "self", ".", "opts", "[", "'flow_pred_lvl'", "]", "+", "1", ")", ":", "\n", "                ", "pyramid", ".", "append", "(", "pyramids", "[", "lvl", "]", "[", "idx", "]", ")", "\n", "", "pred_flows_pyramid", ".", "append", "(", "pyramid", ")", "\n", "\n", "", "return", "pred_flows", ",", "pred_flows_pyramid", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.predict_from_img_pairs": [[271, 316], ["pwcnet.ModelPWCNet.graph.as_default", "len", "divmod", "range", "numpy.array", "pwcnet.ModelPWCNet.adapt_x", "pwcnet.ModelPWCNet.sess.run", "pwcnet.ModelPWCNet.postproc_y_hat_test", "list", "preds.append", "range", "list", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.adapt_x", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.postproc_y_hat_test"], ["", "def", "predict_from_img_pairs", "(", "self", ",", "img_pairs", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "# Chunk image pair list", "\n", "            ", "batch_size", "=", "self", ".", "opts", "[", "'batch_size'", "]", "\n", "test_size", "=", "len", "(", "img_pairs", ")", "\n", "rounds", ",", "rounds_left", "=", "divmod", "(", "test_size", ",", "batch_size", ")", "\n", "if", "rounds_left", ":", "\n", "                ", "rounds", "+=", "1", "\n", "\n", "# Loop through input samples and run inference on them", "\n", "", "preds", ",", "test_ptr", "=", "[", "]", ",", "0", "\n", "for", "_round", "in", "range", "(", "rounds", ")", ":", "\n", "# In batch mode, make sure to wrap around if there aren't enough input samples to process", "\n", "                ", "if", "test_ptr", "+", "batch_size", "<", "test_size", ":", "\n", "                    ", "new_ptr", "=", "test_ptr", "+", "batch_size", "\n", "indices", "=", "list", "(", "range", "(", "test_ptr", ",", "test_ptr", "+", "batch_size", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_ptr", "=", "(", "test_ptr", "+", "batch_size", ")", "%", "test_size", "\n", "indices", "=", "list", "(", "range", "(", "test_ptr", ",", "test_size", ")", ")", "+", "list", "(", "range", "(", "0", ",", "new_ptr", ")", ")", "\n", "", "test_ptr", "=", "new_ptr", "\n", "\n", "# Repackage input image pairs as np.ndarray", "\n", "x", "=", "np", ".", "array", "(", "[", "img_pairs", "[", "idx", "]", "for", "idx", "in", "indices", "]", ")", "\n", "\n", "# Make input samples conform to the network's requirements", "\n", "# x: [batch_size,2,H,W,3] uint8; x_adapt: [batch_size,2,H,W,3] float32", "\n", "x_adapt", ",", "x_adapt_info", "=", "self", ".", "adapt_x", "(", "x", ")", "\n", "if", "x_adapt_info", "is", "not", "None", ":", "\n", "                    ", "y_adapt_info", "=", "(", "\n", "x_adapt_info", "[", "0", "]", ",", "x_adapt_info", "[", "2", "]", ",", "x_adapt_info", "[", "3", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "y_adapt_info", "=", "None", "\n", "\n", "# Run the adapted samples through the network", "\n", "", "feed_dict", "=", "{", "self", ".", "x_tnsr", ":", "x_adapt", "}", "\n", "y_hat", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "y_hat_test_tnsr", ",", "feed_dict", "=", "feed_dict", ")", "\n", "y_hats", ",", "_", "=", "self", ".", "postproc_y_hat_test", "(", "y_hat", ",", "y_adapt_info", ")", "\n", "\n", "# Return flat list of predicted labels", "\n", "for", "y_hat", "in", "y_hats", ":", "\n", "                    ", "preds", ".", "append", "(", "y_hat", ")", "\n", "\n", "", "", "", "return", "preds", "[", "0", ":", "test_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.extract_features": [[320, 344], ["tensorflow.keras.initializers.he_normal", "tensorflow.variable_scope", "zip", "range", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "pyr.append", "str", "str"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ",", "x_tnsr", ",", "name", "=", "'featpyr'", ")", ":", "\n", "        ", "assert", "(", "1", "<=", "self", ".", "opts", "[", "'pyr_lvls'", "]", "<=", "6", ")", "\n", "# Make the feature pyramids 1-based for better readability down the line", "\n", "num_chann", "=", "[", "None", ",", "16", ",", "32", ",", "64", ",", "96", ",", "128", ",", "196", "]", "\n", "c1", ",", "c2", "=", "[", "None", "]", ",", "[", "None", "]", "\n", "init", "=", "tf", ".", "keras", ".", "initializers", ".", "he_normal", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "for", "pyr", ",", "x", ",", "reuse", ",", "name", "in", "zip", "(", "[", "c1", ",", "c2", "]", ",", "[", "x_tnsr", "[", ":", ",", "0", "]", ",", "x_tnsr", "[", ":", ",", "1", "]", "]", ",", "[", "None", ",", "True", "]", ",", "[", "'c1'", ",", "'c2'", "]", ")", ":", "\n", "                ", "for", "lvl", "in", "range", "(", "1", ",", "self", ".", "opts", "[", "'pyr_lvls'", "]", "+", "1", ")", ":", "\n", "# tf.layers.conv2d(inputs, filters, kernel_size, strides=(1, 1), padding='valid', ... , name, reuse)", "\n", "# reuse is set to True because we want to learn a single set of weights for the pyramid", "\n", "# kernel_initializer = 'he_normal' or tf.keras.initializers.he_normal(seed=None)", "\n", "                    ", "f", "=", "num_chann", "[", "lvl", "]", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "f", ",", "3", ",", "2", ",", "'same'", ",", "kernel_initializer", "=", "init", ",", "name", "=", "'conv{}a'", ".", "format", "(", "lvl", ")", ",", "reuse", "=", "reuse", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "f", ",", "3", ",", "1", ",", "'same'", ",", "kernel_initializer", "=", "init", ",", "name", "=", "'conv{}aa'", ".", "format", "(", "lvl", ")", ",", "reuse", "=", "reuse", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "f", ",", "3", ",", "1", ",", "'same'", ",", "kernel_initializer", "=", "init", ",", "name", "=", "'conv{}b'", ".", "format", "(", "lvl", ")", ",", "reuse", "=", "reuse", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ",", "name", "=", "str", "(", "name", ")", "+", "str", "(", "lvl", ")", ")", "\n", "pyr", ".", "append", "(", "x", ")", "\n", "", "", "", "return", "c1", ",", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.warp": [[348, 352], ["str", "str", "tensorflow.name_scope", "pwcnet.dense_image_warp"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.dense_image_warp"], ["", "def", "warp", "(", "self", ",", "c2", ",", "sc_up_flow", ",", "lvl", ",", "name", "=", "'warp'", ")", ":", "\n", "        ", "op_name", "=", "str", "(", "name", ")", "+", "str", "(", "lvl", ")", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "            ", "return", "dense_image_warp", "(", "c2", ",", "sc_up_flow", ",", "name", "=", "op_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.deconv": [[353, 358], ["str", "str", "tensorflow.variable_scope", "tensorflow.layers.conv2d_transpose"], "methods", ["None"], ["", "", "def", "deconv", "(", "self", ",", "x", ",", "lvl", ",", "name", "=", "'up_flow'", ")", ":", "\n", "        ", "op_name", "=", "str", "(", "name", ")", "+", "str", "(", "lvl", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'upsample'", ")", ":", "\n", "# tf.layers.conv2d_transpose(inputs, filters, kernel_size, strides=(1, 1), padding='valid', ... , name)", "\n", "            ", "return", "tf", ".", "layers", ".", "conv2d_transpose", "(", "x", ",", "2", ",", "4", ",", "2", ",", "'same'", ",", "name", "=", "op_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.corr": [[362, 366], ["str", "tensorflow.name_scope", "pwcnet.cost_volume"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.cost_volume"], ["", "", "def", "corr", "(", "self", ",", "c1", ",", "warp", ",", "lvl", ",", "name", "=", "'corr'", ")", ":", "\n", "        ", "op_name", "=", "'corr'", "+", "str", "(", "lvl", ")", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "            ", "return", "cost_volume", "(", "c1", ",", "warp", ",", "self", ".", "opts", "[", "'search_range'", "]", ",", "op_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.predict_flow": [[370, 409], ["tensorflow.keras.initializers.he_normal", "str", "tensorflow.variable_scope", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.concat", "tensorflow.layers.conv2d", "tensorflow.concat", "str"], "methods", ["None"], ["", "", "def", "predict_flow", "(", "self", ",", "corr", ",", "c1", ",", "up_flow", ",", "up_feat", ",", "lvl", ",", "name", "=", "'predict_flow'", ")", ":", "\n", "        ", "op_name", "=", "'flow'", "+", "str", "(", "lvl", ")", "\n", "init", "=", "tf", ".", "keras", ".", "initializers", ".", "he_normal", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "c1", "is", "None", "and", "up_flow", "is", "None", "and", "up_feat", "is", "None", ":", "\n", "                ", "x", "=", "corr", "\n", "", "else", ":", "\n", "                ", "x", "=", "tf", ".", "concat", "(", "[", "corr", ",", "c1", ",", "up_flow", ",", "up_feat", "]", ",", "axis", "=", "3", ")", "\n", "\n", "", "conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "128", ",", "3", ",", "1", ",", "'same'", ",", "kernel_initializer", "=", "init", ",", "name", "=", "'conv{}_0'", ".", "format", "(", "lvl", ")", ")", "\n", "# default alpha is 0.2 for TF", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "conv", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "act", ",", "x", "]", ",", "axis", "=", "3", ")", "\n", "\n", "conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "128", ",", "3", ",", "1", ",", "'same'", ",", "kernel_initializer", "=", "init", ",", "name", "=", "'conv{}_1'", ".", "format", "(", "lvl", ")", ")", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "conv", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "act", ",", "x", "]", ",", "axis", "=", "3", ")", "\n", "\n", "conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "96", ",", "3", ",", "1", ",", "'same'", ",", "kernel_initializer", "=", "init", ",", "name", "=", "'conv{}_2'", ".", "format", "(", "lvl", ")", ")", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "conv", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "act", ",", "x", "]", ",", "axis", "=", "3", ")", "\n", "\n", "conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "64", ",", "3", ",", "1", ",", "'same'", ",", "kernel_initializer", "=", "init", ",", "name", "=", "'conv{}_3'", ".", "format", "(", "lvl", ")", ")", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "conv", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "act", ",", "x", "]", ",", "axis", "=", "3", ")", "\n", "\n", "conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "x", ",", "32", ",", "3", ",", "1", ",", "'same'", ",", "kernel_initializer", "=", "init", ",", "name", "=", "'conv{}_4'", ".", "format", "(", "lvl", ")", ")", "\n", "# will also be used as an input by the context network", "\n", "act", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "conv", ",", "alpha", "=", "0.1", ")", "\n", "upfeat", "=", "tf", ".", "concat", "(", "[", "act", ",", "x", "]", ",", "axis", "=", "3", ",", "name", "=", "'upfeat'", "+", "str", "(", "lvl", ")", ")", "\n", "\n", "flow", "=", "tf", ".", "layers", ".", "conv2d", "(", "upfeat", ",", "2", ",", "3", ",", "1", ",", "'same'", ",", "name", "=", "op_name", ")", "\n", "\n", "return", "upfeat", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.refine_flow": [[413, 439], ["tensorflow.keras.initializers.he_normal", "str", "tensorflow.variable_scope", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.layers.conv2d", "tensorflow.nn.leaky_relu", "tensorflow.layers.conv2d", "tensorflow.add"], "methods", ["None"], ["", "", "def", "refine_flow", "(", "self", ",", "feat", ",", "flow", ",", "lvl", ",", "name", "=", "'ctxt'", ")", ":", "\n", "        ", "op_name", "=", "'refined_flow'", "+", "str", "(", "lvl", ")", "\n", "init", "=", "tf", ".", "keras", ".", "initializers", ".", "he_normal", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "feat", ",", "128", ",", "3", ",", "1", ",", "'same'", ",", "dilation_rate", "=", "1", ",", "\n", "kernel_initializer", "=", "init", ",", "name", "=", "'dc_conv{}1'", ".", "format", "(", "lvl", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ")", "# default alpha is 0.2 for TF", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "128", ",", "3", ",", "1", ",", "'same'", ",", "dilation_rate", "=", "2", ",", "\n", "kernel_initializer", "=", "init", ",", "name", "=", "'dc_conv{}2'", ".", "format", "(", "lvl", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "128", ",", "3", ",", "1", ",", "'same'", ",", "dilation_rate", "=", "4", ",", "\n", "kernel_initializer", "=", "init", ",", "name", "=", "'dc_conv{}3'", ".", "format", "(", "lvl", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "96", ",", "3", ",", "1", ",", "'same'", ",", "dilation_rate", "=", "8", ",", "\n", "kernel_initializer", "=", "init", ",", "name", "=", "'dc_conv{}4'", ".", "format", "(", "lvl", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "64", ",", "3", ",", "1", ",", "'same'", ",", "dilation_rate", "=", "16", ",", "\n", "kernel_initializer", "=", "init", ",", "name", "=", "'dc_conv{}5'", ".", "format", "(", "lvl", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "32", ",", "3", ",", "1", ",", "'same'", ",", "dilation_rate", "=", "1", ",", "\n", "kernel_initializer", "=", "init", ",", "name", "=", "'dc_conv{}6'", ".", "format", "(", "lvl", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "0.1", ")", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "x", ",", "2", ",", "3", ",", "1", ",", "'same'", ",", "dilation_rate", "=", "1", ",", "\n", "kernel_initializer", "=", "init", ",", "name", "=", "'dc_conv{}7'", ".", "format", "(", "lvl", ")", ")", "\n", "\n", "return", "tf", ".", "add", "(", "flow", ",", "x", ",", "name", "=", "op_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.nn": [[443, 495], ["tensorflow.variable_scope", "pwcnet.ModelPWCNet.extract_features", "range", "tensorflow.unstack", "pwcnet.ModelPWCNet.corr", "pwcnet.ModelPWCNet.predict_flow", "pwcnet.ModelPWCNet.warp", "pwcnet.ModelPWCNet.corr", "pwcnet.ModelPWCNet.predict_flow", "tensorflow.shape", "pwcnet.ModelPWCNet.refine_flow", "flow_pyr.append", "pwcnet.ModelPWCNet.deconv", "pwcnet.ModelPWCNet.deconv", "pwcnet.ModelPWCNet.refine_flow", "flow_pyr.append", "tensorflow.image.resize_bilinear"], "methods", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.extract_features", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.corr", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.predict_flow", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.warp", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.corr", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.predict_flow", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.refine_flow", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.deconv", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.deconv", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.refine_flow"], ["", "", "def", "nn", "(", "self", ",", "x_tnsr", ",", "name", "=", "'pwcnet'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "# Extract pyramids of CNN features from both input images (1-based lists))", "\n", "            ", "c1", ",", "c2", "=", "self", ".", "extract_features", "(", "x_tnsr", ")", "\n", "\n", "flow_pyr", "=", "[", "]", "\n", "\n", "for", "lvl", "in", "range", "(", "self", ".", "opts", "[", "'pyr_lvls'", "]", ",", "self", ".", "opts", "[", "'flow_pred_lvl'", "]", "-", "1", ",", "-", "1", ")", ":", "\n", "\n", "                ", "if", "lvl", "==", "self", ".", "opts", "[", "'pyr_lvls'", "]", ":", "\n", "# Compute the cost volume", "\n", "                    ", "corr", "=", "self", ".", "corr", "(", "c1", "[", "lvl", "]", ",", "c2", "[", "lvl", "]", ",", "lvl", ")", "\n", "\n", "# Estimate the optical flow", "\n", "upfeat", ",", "flow", "=", "self", ".", "predict_flow", "(", "\n", "corr", ",", "None", ",", "None", ",", "None", ",", "lvl", ")", "\n", "", "else", ":", "\n", "# Warp level of Image1's using the upsampled flow", "\n", "                    ", "scaler", "=", "20.", "/", "2", "**", "lvl", "# scaler values are 0.625, 1.25, 2.5, 5.0", "\n", "warp", "=", "self", ".", "warp", "(", "c2", "[", "lvl", "]", ",", "up_flow", "*", "scaler", ",", "lvl", ")", "\n", "\n", "# Compute the cost volume", "\n", "corr", "=", "self", ".", "corr", "(", "c1", "[", "lvl", "]", ",", "warp", ",", "lvl", ")", "\n", "\n", "# Estimate the optical flow", "\n", "upfeat", ",", "flow", "=", "self", ".", "predict_flow", "(", "\n", "corr", ",", "c1", "[", "lvl", "]", ",", "up_flow", ",", "up_feat", ",", "lvl", ")", "\n", "\n", "", "_", ",", "lvl_height", ",", "lvl_width", ",", "_", "=", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "c1", "[", "lvl", "]", ")", ")", "\n", "\n", "if", "lvl", "!=", "self", ".", "opts", "[", "'flow_pred_lvl'", "]", ":", "\n", "                    ", "flow", "=", "self", ".", "refine_flow", "(", "upfeat", ",", "flow", ",", "lvl", ")", "\n", "\n", "# Upsample predicted flow and the features used to compute predicted flow", "\n", "flow_pyr", ".", "append", "(", "flow", ")", "\n", "\n", "up_flow", "=", "self", ".", "deconv", "(", "flow", ",", "lvl", ",", "'up_flow'", ")", "\n", "up_feat", "=", "self", ".", "deconv", "(", "upfeat", ",", "lvl", ",", "'up_feat'", ")", "\n", "", "else", ":", "\n", "# Refine the final predicted flow", "\n", "                    ", "flow", "=", "self", ".", "refine_flow", "(", "upfeat", ",", "flow", ",", "lvl", ")", "\n", "flow_pyr", ".", "append", "(", "flow", ")", "\n", "\n", "# Upsample the predicted flow (final output) to match the size of the images", "\n", "scaler", "=", "2", "**", "self", ".", "opts", "[", "'flow_pred_lvl'", "]", "\n", "size", "=", "(", "lvl_height", "*", "scaler", ",", "lvl_width", "*", "scaler", ")", "\n", "flow_pred", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "\n", "flow", ",", "size", ",", "name", "=", "\"flow_pred\"", ")", "*", "scaler", "\n", "break", "\n", "\n", "", "", "return", "flow_pred", ",", "flow_pyr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.cost_volume": [[35, 57], ["tensorflow.pad", "tensorflow.unstack", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.shape", "range", "tensorflow.slice", "tensorflow.reduce_mean", "tf.nn.leaky_relu.append"], "function", ["None"], ["def", "cost_volume", "(", "c1", ",", "warp", ",", "search_range", ",", "name", ")", ":", "\n", "    ", "\"\"\"Build cost volume for associating a pixel from Image1 with its corresponding pixels in Image2.\n    Args:\n        c1: Level of the feature pyramid of Image1\n        warp: Warped level of the feature pyramid of image22\n        search_range: Search range (maximum displacement)\n    \"\"\"", "\n", "padded_lvl", "=", "tf", ".", "pad", "(", "warp", ",", "[", "[", "0", ",", "0", "]", ",", "[", "search_range", ",", "search_range", "]", ",", "[", "\n", "search_range", ",", "search_range", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "_", ",", "h", ",", "w", ",", "_", "=", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "c1", ")", ")", "\n", "max_offset", "=", "search_range", "*", "2", "+", "1", "\n", "\n", "cost_vol", "=", "[", "]", "\n", "for", "y", "in", "range", "(", "0", ",", "max_offset", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "0", ",", "max_offset", ")", ":", "\n", "            ", "slice", "=", "tf", ".", "slice", "(", "padded_lvl", ",", "[", "0", ",", "y", ",", "x", ",", "0", "]", ",", "[", "-", "1", ",", "h", ",", "w", ",", "-", "1", "]", ")", "\n", "cost", "=", "tf", ".", "reduce_mean", "(", "c1", "*", "slice", ",", "axis", "=", "3", ",", "keepdims", "=", "True", ")", "\n", "cost_vol", ".", "append", "(", "cost", ")", "\n", "", "", "cost_vol", "=", "tf", ".", "concat", "(", "cost_vol", ",", "axis", "=", "3", ")", "\n", "cost_vol", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "cost_vol", ",", "alpha", "=", "0.1", ",", "name", "=", "name", ")", "\n", "\n", "return", "cost_vol", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet._interpolate_bilinear": [[59, 154], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.ops.array_ops.unstack", "tensorflow.python.ops.array_ops.unstack", "tensorflow.python.ops.array_ops.unstack", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.reshape", "pwcnet._interpolate_bilinear.gather"], "function", ["None"], ["", "def", "_interpolate_bilinear", "(", "grid", ",", "\n", "query_points", ",", "\n", "name", "=", "'interpolate_bilinear'", ",", "\n", "indexing", "=", "'ij'", ")", ":", "\n", "    ", "if", "indexing", "!=", "'ij'", "and", "indexing", "!=", "'xy'", ":", "\n", "        ", "raise", "ValueError", "(", "'Indexing mode must be \\'ij\\' or \\'xy\\''", ")", "\n", "\n", "", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "        ", "grid", "=", "ops", ".", "convert_to_tensor", "(", "grid", ")", "\n", "query_points", "=", "ops", ".", "convert_to_tensor", "(", "query_points", ")", "\n", "shape", "=", "array_ops", ".", "unstack", "(", "array_ops", ".", "shape", "(", "grid", ")", ")", "\n", "if", "len", "(", "shape", ")", "!=", "4", ":", "\n", "            ", "msg", "=", "'Grid must be 4 dimensional. Received: '", "\n", "raise", "ValueError", "(", "msg", "+", "str", "(", "shape", ")", ")", "\n", "\n", "", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "shape", "\n", "query_type", "=", "query_points", ".", "dtype", "\n", "query_shape", "=", "array_ops", ".", "unstack", "(", "array_ops", ".", "shape", "(", "query_points", ")", ")", "\n", "grid_type", "=", "grid", ".", "dtype", "\n", "\n", "if", "len", "(", "query_shape", ")", "!=", "3", ":", "\n", "            ", "msg", "=", "(", "'Query points must be 3 dimensional. Received: '", ")", "\n", "raise", "ValueError", "(", "msg", "+", "str", "(", "query_shape", ")", ")", "\n", "\n", "", "_", ",", "num_queries", ",", "_", "=", "query_shape", "\n", "\n", "alphas", "=", "[", "]", "\n", "floors", "=", "[", "]", "\n", "ceils", "=", "[", "]", "\n", "\n", "index_order", "=", "[", "0", ",", "1", "]", "if", "indexing", "==", "'ij'", "else", "[", "1", ",", "0", "]", "\n", "unstacked_query_points", "=", "array_ops", ".", "unstack", "(", "query_points", ",", "axis", "=", "2", ")", "\n", "\n", "for", "dim", "in", "index_order", ":", "\n", "            ", "with", "ops", ".", "name_scope", "(", "'dim-'", "+", "str", "(", "dim", ")", ")", ":", "\n", "                ", "queries", "=", "unstacked_query_points", "[", "dim", "]", "\n", "\n", "size_in_indexing_dimension", "=", "shape", "[", "dim", "+", "1", "]", "\n", "\n", "# max_floor is size_in_indexing_dimension - 2 so that max_floor + 1", "\n", "# is still a valid index into the grid.", "\n", "max_floor", "=", "math_ops", ".", "cast", "(", "\n", "size_in_indexing_dimension", "-", "2", ",", "query_type", ")", "\n", "min_floor", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "query_type", ")", "\n", "floor", "=", "math_ops", ".", "minimum", "(", "\n", "math_ops", ".", "maximum", "(", "min_floor", ",", "math_ops", ".", "floor", "(", "queries", ")", ")", ",", "max_floor", ")", "\n", "int_floor", "=", "math_ops", ".", "cast", "(", "floor", ",", "dtypes", ".", "int32", ")", "\n", "floors", ".", "append", "(", "int_floor", ")", "\n", "ceil", "=", "int_floor", "+", "1", "\n", "ceils", ".", "append", "(", "ceil", ")", "\n", "\n", "# alpha has the same type as the grid, as we will directly use alpha", "\n", "# when taking linear combinations of pixel values from the image.", "\n", "alpha", "=", "math_ops", ".", "cast", "(", "queries", "-", "floor", ",", "grid_type", ")", "\n", "min_alpha", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "grid_type", ")", "\n", "max_alpha", "=", "constant_op", ".", "constant", "(", "1.0", ",", "dtype", "=", "grid_type", ")", "\n", "alpha", "=", "math_ops", ".", "minimum", "(", "\n", "math_ops", ".", "maximum", "(", "min_alpha", ",", "alpha", ")", ",", "max_alpha", ")", "\n", "\n", "# Expand alpha to [b, n, 1] so we can use broadcasting", "\n", "# (since the alpha values don't depend on the channel).", "\n", "alpha", "=", "array_ops", ".", "expand_dims", "(", "alpha", ",", "2", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "\n", "", "", "flattened_grid", "=", "array_ops", ".", "reshape", "(", "grid", ",", "\n", "[", "batch_size", "*", "height", "*", "width", ",", "channels", "]", ")", "\n", "batch_offsets", "=", "array_ops", ".", "reshape", "(", "\n", "math_ops", ".", "range", "(", "batch_size", ")", "*", "height", "*", "width", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "# This wraps array_ops.gather. We reshape the image data such that the", "\n", "# batch, y, and x coordinates are pulled into the first dimension.", "\n", "# Then we gather. Finally, we reshape the output back. It's possible this", "\n", "# code would be made simpler by using array_ops.gather_nd.", "\n", "def", "gather", "(", "y_coords", ",", "x_coords", ",", "name", ")", ":", "\n", "            ", "with", "ops", ".", "name_scope", "(", "'gather-'", "+", "name", ")", ":", "\n", "                ", "linear_coordinates", "=", "batch_offsets", "+", "y_coords", "*", "width", "+", "x_coords", "\n", "gathered_values", "=", "array_ops", ".", "gather", "(", "\n", "flattened_grid", ",", "linear_coordinates", ")", "\n", "return", "array_ops", ".", "reshape", "(", "gathered_values", ",", "\n", "[", "batch_size", ",", "num_queries", ",", "channels", "]", ")", "\n", "\n", "# grab the pixel values in the 4 corners around each query point", "\n", "", "", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "\n", "\n", "# now, do the actual interpolation", "\n", "with", "ops", ".", "name_scope", "(", "'interpolate'", ")", ":", "\n", "            ", "interp_top", "=", "alphas", "[", "1", "]", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "alphas", "[", "1", "]", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "alphas", "[", "0", "]", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "return", "interp", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.dense_image_warp": [[156, 176], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.array_ops.unstack", "tensorflow.python.ops.array_ops.meshgrid", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.array_ops.expand_dims", "tensorflow.python.ops.array_ops.reshape", "pwcnet._interpolate_bilinear", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.array_ops.stack"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet._interpolate_bilinear"], ["", "", "def", "dense_image_warp", "(", "image", ",", "flow", ",", "name", "=", "'dense_image_warp'", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "        ", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "array_ops", ".", "unstack", "(", "\n", "array_ops", ".", "shape", "(", "image", ")", ")", "\n", "# The flow is defined on the image grid. Turn the flow into a list of query", "\n", "# points in the grid space.", "\n", "grid_x", ",", "grid_y", "=", "array_ops", ".", "meshgrid", "(", "\n", "math_ops", ".", "range", "(", "width", ")", ",", "math_ops", ".", "range", "(", "height", ")", ")", "\n", "stacked_grid", "=", "math_ops", ".", "cast", "(", "\n", "array_ops", ".", "stack", "(", "[", "grid_y", ",", "grid_x", "]", ",", "axis", "=", "2", ")", ",", "flow", ".", "dtype", ")", "\n", "batched_grid", "=", "array_ops", ".", "expand_dims", "(", "stacked_grid", ",", "axis", "=", "0", ")", "\n", "query_points_on_grid", "=", "batched_grid", "-", "flow", "\n", "query_points_flattened", "=", "array_ops", ".", "reshape", "(", "query_points_on_grid", ",", "\n", "[", "batch_size", ",", "height", "*", "width", ",", "2", "]", ")", "\n", "# Compute values at the query points, then reshape the result back to the", "\n", "# image grid.", "\n", "interpolated", "=", "_interpolate_bilinear", "(", "image", ",", "query_points_flattened", ")", "\n", "interpolated", "=", "array_ops", ".", "reshape", "(", "interpolated", ",", "\n", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", ")", "\n", "return", "interpolated", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Imu.__init__": [[28, 43], ["csv.reader", "next", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "range", "scipy.interpolate.interp1d", "open", "list", "len", "numpy.matmul", "numpy.matmul", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imu_file", ",", "R_cam1_imu", ")", ":", "\n", "        ", "imu_reader", "=", "csv", ".", "reader", "(", "open", "(", "imu_file", ")", ",", "delimiter", "=", "\" \"", ")", "\n", "next", "(", "imu_reader", ")", "# skip the header line", "\n", "imu_ns_w_a", "=", "np", ".", "array", "(", "list", "(", "imu_reader", ")", ")", "\n", "imu_ns", "=", "np", ".", "array", "(", "imu_ns_w_a", "[", ":", ",", "0", "]", ",", "dtype", "=", "np", ".", "long", ")", "\n", "imu_w_a", "=", "np", ".", "array", "(", "imu_ns_w_a", "[", ":", ",", "1", ":", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "first_ns", "=", "imu_ns", "[", "1", "]", "\n", "self", ".", "last_ns", "=", "imu_ns", "[", "-", "2", "]", "\n", "\n", "cam1_w_a", "=", "np", ".", "zeros", "(", "(", "len", "(", "imu_ns", ")", ",", "6", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "imu_ns", ")", ")", ":", "\n", "            ", "cam1_w_a", "[", "i", ",", ":", "3", "]", "=", "np", ".", "matmul", "(", "R_cam1_imu", ",", "imu_w_a", "[", "i", ",", ":", "3", "]", ")", "\n", "cam1_w_a", "[", "i", ",", "3", ":", "]", "=", "np", ".", "matmul", "(", "R_cam1_imu", ",", "imu_w_a", "[", "i", ",", "3", ":", "]", ")", "\n", "\n", "", "self", ".", "imu_interp", "=", "interp1d", "(", "imu_ns", ",", "cam1_w_a", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Imu.isValidNs": [[44, 46], ["None"], "methods", ["None"], ["", "def", "isValidNs", "(", "self", ",", "query_ns", ")", ":", "\n", "        ", "return", "self", ".", "first_ns", "<=", "query_ns", "<=", "self", ".", "last_ns", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Imu.getImuAt": [[47, 49], ["poseHandler.Imu.imu_interp"], "methods", ["None"], ["", "def", "getImuAt", "(", "self", ",", "query_ns", ")", ":", "\n", "        ", "return", "self", ".", "imu_interp", "(", "query_ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.__init__": [[52, 76], ["csv.reader", "next", "numpy.array", "numpy.array", "numpy.array", "range", "scipy.interpolate.CubicSpline", "scipy.spatial.transform.RotationSpline", "open", "list", "len", "numpy.identity", "scipy.spatial.transform.Rotation.from_quat().as_matrix", "numpy.matmul", "ts.append", "Rs.append", "scipy.spatial.transform.Rotation.from_matrix", "scipy.spatial.transform.Rotation.from_quat", "numpy.ix_"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gt_file", ",", "T_imu_cam1", ")", ":", "\n", "        ", "gt_reader", "=", "csv", ".", "reader", "(", "open", "(", "gt_file", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "next", "(", "gt_reader", ")", "# skip the header line", "\n", "gt_ns_t_q", "=", "np", ".", "array", "(", "list", "(", "gt_reader", ")", ")", "\n", "gt_ns", "=", "np", ".", "array", "(", "gt_ns_t_q", "[", ":", ",", "0", "]", ",", "dtype", "=", "np", ".", "long", ")", "\n", "gt_t_q", "=", "np", ".", "array", "(", "gt_ns_t_q", "[", ":", ",", "1", ":", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "first_ns", "=", "gt_ns", "[", "1", "]", "\n", "self", ".", "last_ns", "=", "gt_ns", "[", "-", "2", "]", "\n", "\n", "# transfer to target coordinate", "\n", "ts", ",", "Rs", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_ns", ")", ")", ":", "\n", "            ", "T_w_gt", "=", "np", ".", "identity", "(", "4", ")", "\n", "T_w_gt", "[", "0", ":", "3", ",", "3", "]", "=", "gt_t_q", "[", "i", ",", ":", "3", "]", "\n", "# convert to qx qy qz qw for from_quat", "\n", "gt_q", "=", "gt_t_q", "[", "i", ",", "np", ".", "ix_", "(", "[", "4", ",", "5", ",", "6", ",", "3", "]", ")", "]", "\n", "T_w_gt", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rotation", ".", "from_quat", "(", "gt_q", ")", ".", "as_matrix", "(", ")", "\n", "T_w_cam1", "=", "np", ".", "matmul", "(", "T_w_gt", ",", "T_imu_cam1", ")", "\n", "ts", ".", "append", "(", "T_w_cam1", "[", "0", ":", "3", ",", "3", "]", ")", "\n", "Rs", ".", "append", "(", "T_w_cam1", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", "\n", "\n", "# splines", "\n", "", "self", ".", "t_spline", "=", "CubicSpline", "(", "gt_ns", ",", "ts", ")", "\n", "self", ".", "R_spline", "=", "RotationSpline", "(", "gt_ns", ",", "Rotation", ".", "from_matrix", "(", "Rs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.isValidNs": [[77, 79], ["None"], "methods", ["None"], ["", "def", "isValidNs", "(", "self", ",", "query_ns", ")", ":", "\n", "        ", "return", "self", ".", "first_ns", "<=", "query_ns", "<=", "self", ".", "last_ns", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.getPoseAt": [[80, 85], ["numpy.identity", "poseHandler.Pose.R_spline().as_matrix", "poseHandler.Pose.t_spline", "poseHandler.Pose.R_spline"], "methods", ["None"], ["", "def", "getPoseAt", "(", "self", ",", "query_ns", ")", ":", "\n", "        ", "T", "=", "np", ".", "identity", "(", "4", ")", "\n", "T", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "self", ".", "R_spline", "(", "query_ns", ")", ".", "as_matrix", "(", ")", "\n", "T", "[", "0", ":", "3", ",", "3", "]", "=", "self", ".", "t_spline", "(", "query_ns", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.getPoses": [[87, 154], ["open().read().splitlines", "range", "numpy.load", "numpy.identity", "numpy.load", "numpy.matmul", "poseHandler.Pose", "poseHandler.Imu", "tqdm.tqdm", "os.path.join", "numpy.save", "os.path.join", "numpy.save", "os.path.join", "numpy.savetxt", "os.path.join", "numpy.save", "os.path.join", "numpy.save", "len", "img_ns.append", "numpy.transpose", "range", "valid_ns.append", "poseHandler.Pose.getPoseAt", "scipy.spatial.transform.Rotation.from_matrix().as_quat", "pose_w_cam1.append", "numpy.linalg.inv", "numpy.matmul", "numpy.zeros", "numpy.zeros", "range", "T_cam0_v1.append", "pose_cam1_v1.append", "imu_cam1_v1.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "open().read", "times[].split", "int", "len", "numpy.array", "poseHandler.Imu.getImuAt", "poseHandler.Pose.getPoseAt", "T_cam0_v1_i.append", "numpy.matmul", "scipy.spatial.transform.Rotation.from_matrix().as_rotvec", "poseHandler.Pose.isValidNs", "poseHandler.Pose.isValidNs", "poseHandler.Imu.isValidNs", "poseHandler.Imu.isValidNs", "scipy.spatial.transform.Rotation.from_matrix", "numpy.matmul", "open", "scipy.spatial.transform.Rotation.from_matrix"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.getPoseAt", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Imu.getImuAt", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.getPoseAt", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.isValidNs", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.isValidNs", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.isValidNs", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.poseHandler.Pose.isValidNs"], ["", "", "def", "getPoses", "(", "data_path", ",", "save_path", ",", "img_h", ",", "ns_per_v", ")", ":", "\n", "# image name/time_ns", "\n", "    ", "img_ns", "=", "[", "]", "\n", "times", "=", "open", "(", "data_path", "+", "'cam0/times.txt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "times", ")", ")", ":", "\n", "        ", "cur_ns", "=", "times", "[", "i", "]", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "img_ns", ".", "append", "(", "int", "(", "cur_ns", ")", ")", "\n", "\n", "# pose ground truth", "\n", "", "cam1", "=", "np", ".", "load", "(", "save_path", "+", "\"cam1/camera.npy\"", ")", "\n", "T_cam0_cam1", "=", "np", ".", "identity", "(", "4", ")", "\n", "T_cam0_cam1", "[", "0", ",", "3", "]", "=", "-", "cam1", "[", "4", "]", "\n", "T_imu_cam0", "=", "np", ".", "load", "(", "save_path", "+", "\"cam0/T_imu_cam0.npy\"", ")", "\n", "T_imu_cam1", "=", "np", ".", "matmul", "(", "T_imu_cam0", ",", "T_cam0_cam1", ")", "\n", "gt_pose_cam1", "=", "Pose", "(", "data_path", "+", "'gt_imu.csv'", ",", "T_imu_cam1", ")", "\n", "imu_cam1", "=", "Imu", "(", "data_path", "+", "'imu.txt'", ",", "np", ".", "transpose", "(", "T_imu_cam1", "[", ":", "3", ",", ":", "3", "]", ")", ")", "\n", "\n", "valid_ns", ",", "T_cam0_v1", ",", "pose_w_cam1", ",", "pose_cam1_v1", ",", "imu_cam1_v1", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "img_ns", ")", ")", ")", ":", "\n", "        ", "if", "not", "(", "gt_pose_cam1", ".", "isValidNs", "(", "img_ns", "[", "i", "]", "+", "ns_per_v", "*", "(", "img_h", "-", "1", ")", ")", "\n", "and", "gt_pose_cam1", ".", "isValidNs", "(", "img_ns", "[", "i", "]", ")", "\n", "and", "imu_cam1", ".", "isValidNs", "(", "img_ns", "[", "i", "]", "+", "ns_per_v", "*", "(", "img_h", "-", "1", ")", ")", "\n", "and", "imu_cam1", ".", "isValidNs", "(", "img_ns", "[", "i", "]", ")", ")", ":", "\n", "            ", "continue", "\n", "", "valid_ns", ".", "append", "(", "img_ns", "[", "i", "]", ")", "\n", "\n", "T_w_cam1", "=", "gt_pose_cam1", ".", "getPoseAt", "(", "img_ns", "[", "i", "]", ")", "\n", "t", "=", "T_w_cam1", "[", "0", ":", "3", ",", "3", "]", "\n", "q", "=", "Rotation", ".", "from_matrix", "(", "T_w_cam1", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", ".", "as_quat", "(", ")", "\n", "pose_w_cam1", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "i", ",", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", ",", "q", "[", "0", "]", ",", "q", "[", "1", "]", ",", "q", "[", "2", "]", ",", "q", "[", "3", "]", "]", ")", ")", "\n", "\n", "T_cam1_w", "=", "LA", ".", "inv", "(", "T_w_cam1", ")", "\n", "T_cam0_w", "=", "np", ".", "matmul", "(", "T_cam0_cam1", ",", "T_cam1_w", ")", "\n", "# get pose for each scan line", "\n", "T_cam0_v1_i", "=", "[", "]", "\n", "pose_cam1_v1_i", "=", "np", ".", "zeros", "(", "(", "img_h", ",", "6", ")", ")", "\n", "imu_cam1_v1_i", "=", "np", ".", "zeros", "(", "(", "img_h", ",", "6", ")", ")", "\n", "for", "v", "in", "range", "(", "img_h", ")", ":", "\n", "# row-wise imu", "\n", "            ", "imu_cam1_v1_i", "[", "v", "]", "=", "imu_cam1", ".", "getImuAt", "(", "img_ns", "[", "i", "]", "+", "ns_per_v", "*", "v", ")", "\n", "# row-wise pose", "\n", "T_w_v1", "=", "gt_pose_cam1", ".", "getPoseAt", "(", "img_ns", "[", "i", "]", "+", "ns_per_v", "*", "v", ")", "\n", "T_cam0_v1_i", ".", "append", "(", "np", ".", "matmul", "(", "T_cam0_w", ",", "T_w_v1", ")", ")", "\n", "\n", "T_cam1_v1_i", "=", "np", ".", "matmul", "(", "T_cam1_w", ",", "T_w_v1", ")", "\n", "t", "=", "T_cam1_v1_i", "[", "0", ":", "3", ",", "3", "]", "\n", "r", "=", "Rotation", ".", "from_matrix", "(", "T_cam1_v1_i", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", ".", "as_rotvec", "(", ")", "\n", "pose_cam1_v1_i", "[", "v", "]", "=", "[", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", ",", "r", "[", "0", "]", ",", "r", "[", "1", "]", ",", "r", "[", "2", "]", "]", "\n", "", "T_cam0_v1", ".", "append", "(", "T_cam0_v1_i", ")", "\n", "pose_cam1_v1", ".", "append", "(", "pose_cam1_v1_i", ")", "\n", "imu_cam1_v1", ".", "append", "(", "imu_cam1_v1_i", ")", "\n", "\n", "", "ns_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"valid_ns.npy\"", ")", "\n", "np", ".", "save", "(", "ns_path", ",", "np", ".", "array", "(", "valid_ns", ")", ")", "\n", "\n", "pose0_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"T_cam0_v1.npy\"", ")", "\n", "np", ".", "save", "(", "pose0_path", ",", "np", ".", "array", "(", "T_cam0_v1", ")", ")", "\n", "\n", "pose1w_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"cam1/pose_w_cam1.txt\"", ")", "\n", "np", ".", "savetxt", "(", "pose1w_path", ",", "np", ".", "array", "(", "pose_w_cam1", ")", ",", "delimiter", "=", "','", ")", "\n", "\n", "posev1_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"cam1/pose_cam1_v1.npy\"", ")", "\n", "np", ".", "save", "(", "posev1_path", ",", "np", ".", "array", "(", "pose_cam1_v1", ")", ")", "\n", "\n", "imu_cam1_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"cam1/imu_cam1_v1.npy\"", ")", "\n", "np", ".", "save", "(", "imu_cam1_path", ",", "np", ".", "array", "(", "imu_cam1_v1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.stereoRectifier.stereoRectify": [[26, 84], ["cv2.fisheye.stereoRectify", "cv2.fisheye.initUndistortRectifyMap", "cv2.fisheye.initUndistortRectifyMap", "numpy.save", "numpy.save", "numpy.indices", "cv2.remap", "numpy.array", "numpy.save", "numpy.array", "numpy.array", "numpy.save", "numpy.save", "numpy.matrix", "numpy.identity", "numpy.linalg.inv", "numpy.save", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "open", "yaml.load", "tuple", "numpy.matrix", "numpy.array", "numpy.matrix", "numpy.array", "numpy.matrix", "numpy.array", "numpy.array", "numpy.ix_", "numpy.ix_"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.stereoRectifier.stereoRectify"], ["def", "stereoRectify", "(", "data_path", ",", "save_path", ",", "resolution", ")", ":", "\n", "    ", "img0_path", "=", "save_path", "+", "\"cam0/images/\"", "\n", "img1_path", "=", "save_path", "+", "\"cam1/images/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img0_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "img0_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "img1_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "img1_path", ")", "\n", "\n", "# Read original calibration file", "\n", "", "with", "open", "(", "data_path", "+", "\"camchain.yaml\"", ")", "as", "file", ":", "\n", "        ", "camchain", "=", "yaml", ".", "load", "(", "file", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "imageSize", "=", "tuple", "(", "camchain", "[", "'cam0'", "]", "[", "'resolution'", "]", ")", "\n", "cam0_intrinsics", "=", "camchain", "[", "'cam0'", "]", "[", "'intrinsics'", "]", "\n", "K0", "=", "np", ".", "matrix", "(", "[", "[", "cam0_intrinsics", "[", "0", "]", ",", "0", ",", "cam0_intrinsics", "[", "2", "]", "]", ",", "\n", "[", "0", ",", "cam0_intrinsics", "[", "1", "]", ",", "cam0_intrinsics", "[", "3", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "D0", "=", "np", ".", "array", "(", "camchain", "[", "'cam0'", "]", "[", "'distortion_coeffs'", "]", ")", "\n", "\n", "cam1_intrinsics", "=", "camchain", "[", "'cam1'", "]", "[", "'intrinsics'", "]", "\n", "K1", "=", "np", ".", "matrix", "(", "[", "[", "cam1_intrinsics", "[", "0", "]", ",", "0", ",", "cam1_intrinsics", "[", "2", "]", "]", ",", "\n", "[", "0", ",", "cam1_intrinsics", "[", "1", "]", ",", "cam1_intrinsics", "[", "3", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "D1", "=", "np", ".", "array", "(", "camchain", "[", "'cam1'", "]", "[", "'distortion_coeffs'", "]", ")", "\n", "\n", "T01", "=", "np", ".", "matrix", "(", "camchain", "[", "'cam1'", "]", "[", "'T_cn_cnm1'", "]", ")", "\n", "R", "=", "T01", "[", "np", ".", "ix_", "(", "[", "0", ",", "1", ",", "2", "]", ",", "[", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "tvec", "=", "T01", "[", "np", ".", "ix_", "(", "[", "0", ",", "1", ",", "2", "]", ",", "[", "3", "]", ")", "]", "\n", "\n", "# Fisheye stere0 rectify", "\n", "", "R0", ",", "R1", ",", "P0", ",", "P1", ",", "Q", "=", "cv2", ".", "fisheye", ".", "stereoRectify", "(", "\n", "K0", ",", "D0", ",", "K1", ",", "D1", ",", "imageSize", ",", "R", ",", "tvec", ",", "0", ",", "newImageSize", "=", "resolution", ")", "\n", "map0", "=", "cv2", ".", "fisheye", ".", "initUndistortRectifyMap", "(", "\n", "K0", ",", "D0", ",", "R0", ",", "P0", ",", "resolution", ",", "cv2", ".", "CV_32F", ")", "\n", "map1", "=", "cv2", ".", "fisheye", ".", "initUndistortRectifyMap", "(", "\n", "K1", ",", "D1", ",", "R1", ",", "P1", ",", "resolution", ",", "cv2", ".", "CV_32F", ")", "\n", "np", ".", "save", "(", "save_path", "+", "\"cam0/stereo_map.npy\"", ",", "np", ".", "array", "(", "map0", ")", ")", "\n", "np", ".", "save", "(", "save_path", "+", "\"cam1/stereo_map.npy\"", ",", "np", ".", "array", "(", "map1", ")", ")", "\n", "\n", "# Loopup table for rolling shutter time query", "\n", "cols_idx", ",", "_", "=", "np", ".", "indices", "(", "(", "imageSize", "[", "1", "]", ",", "imageSize", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cols_idx", "=", "cols_idx", "/", "imageSize", "[", "1", "]", "*", "resolution", "[", "1", "]", "\n", "v1_lut", "=", "cv2", ".", "remap", "(", "cols_idx", ",", "map1", "[", "0", "]", ",", "map1", "[", "1", "]", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "v1_lut", "=", "np", ".", "array", "(", "v1_lut", ",", "dtype", "=", "int", ")", "\n", "np", ".", "save", "(", "save_path", "+", "\"cam1/v1_lut.npy\"", ",", "v1_lut", ")", "\n", "\n", "fxfycxcytx0", "=", "np", ".", "array", "(", "\n", "[", "P0", "[", "0", ",", "0", "]", ",", "P0", "[", "1", ",", "1", "]", ",", "P0", "[", "0", ",", "2", "]", ",", "P0", "[", "1", ",", "2", "]", ",", "P0", "[", "0", ",", "3", "]", "/", "P0", "[", "0", ",", "0", "]", "]", ")", "\n", "fxfycxcytx1", "=", "np", ".", "array", "(", "\n", "[", "P1", "[", "0", ",", "0", "]", ",", "P1", "[", "1", ",", "1", "]", ",", "P1", "[", "0", ",", "2", "]", ",", "P1", "[", "1", ",", "2", "]", ",", "P1", "[", "0", ",", "3", "]", "/", "P1", "[", "0", ",", "0", "]", "]", ")", "\n", "np", ".", "save", "(", "save_path", "+", "\"cam0/camera.npy\"", ",", "fxfycxcytx0", ")", "\n", "np", ".", "save", "(", "save_path", "+", "\"cam1/camera.npy\"", ",", "fxfycxcytx1", ")", "\n", "\n", "T_cam0_imu", "=", "np", ".", "matrix", "(", "camchain", "[", "'cam0'", "]", "[", "'T_cam_imu'", "]", ")", "\n", "T2rectified", "=", "np", ".", "identity", "(", "4", ")", "\n", "T2rectified", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "R0", "\n", "T_imu_cam0", "=", "LA", ".", "inv", "(", "T2rectified", "*", "T_cam0_imu", ")", "\n", "np", ".", "save", "(", "save_path", "+", "\"cam0/T_imu_cam0.npy\"", ",", "T_imu_cam0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.stereoRectifier.stereoRemap": [[86, 100], ["numpy.load", "numpy.load", "numpy.load", "tqdm.tqdm", "range", "cv2.imread", "cv2.remap", "cv2.imwrite"], "function", ["None"], ["", "def", "stereoRemap", "(", "data_path", ",", "save_path", ")", ":", "\n", "    ", "valid_ns", "=", "np", ".", "load", "(", "save_path", "+", "\"valid_ns.npy\"", ")", "\n", "map0", "=", "np", ".", "load", "(", "save_path", "+", "\"cam0/stereo_map.npy\"", ")", "\n", "map1", "=", "np", ".", "load", "(", "save_path", "+", "\"cam1/stereo_map.npy\"", ")", "\n", "maps", "=", "[", "map0", ",", "map1", "]", "\n", "# Remap images", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "valid_ns", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "for", "cam_i", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "\n", "'{}cam{}/images/{}.png'", ".", "format", "(", "data_path", ",", "cam_i", ",", "valid_ns", "[", "i", "]", ")", ")", "\n", "img_rect", "=", "cv2", ".", "remap", "(", "\n", "img", ",", "maps", "[", "cam_i", "]", "[", "0", "]", ",", "maps", "[", "cam_i", "]", "[", "1", "]", ",", "cv2", ".", "INTER_LINEAR", ")", "\n", "save_file", "=", "'{}cam{}/images/{}.png'", ".", "format", "(", "save_path", ",", "cam_i", ",", "i", ")", "\n", "cv2", ".", "imwrite", "(", "save_file", ",", "img_rect", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.gtFlowGenerator.projectPoint": [[24, 33], ["numpy.ones", "numpy.matmul", "numpy.expand_dims"], "function", ["None"], ["def", "projectPoint", "(", "ua", ",", "va", ",", "da", ",", "cam_a", ",", "T_b_a", ",", "cam_b", ")", ":", "\n", "    ", "Xa", "=", "np", ".", "ones", "(", "[", "3", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Xa", "[", "0", "]", "=", "(", "ua", "-", "cam_a", "[", "2", "]", ")", "/", "cam_a", "[", "0", "]", "\n", "Xa", "[", "1", "]", "=", "(", "va", "-", "cam_a", "[", "3", "]", ")", "/", "cam_a", "[", "1", "]", "\n", "Xa", "=", "Xa", "*", "da", "\n", "Xb", "=", "np", ".", "matmul", "(", "T_b_a", "[", "0", ":", "3", ",", "0", ":", "3", "]", ",", "Xa", ")", "+", "np", ".", "expand_dims", "(", "T_b_a", "[", "0", ":", "3", ",", "3", "]", ",", "-", "1", ")", "\n", "ub", "=", "Xb", "[", "0", ",", "0", "]", "/", "Xb", "[", "2", ",", "0", "]", "*", "cam_b", "[", "0", "]", "+", "cam_b", "[", "2", "]", "\n", "vb", "=", "Xb", "[", "1", ",", "0", "]", "/", "Xb", "[", "2", ",", "0", "]", "*", "cam_b", "[", "1", "]", "+", "cam_b", "[", "3", "]", "\n", "return", "[", "ub", ",", "vb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.gtFlowGenerator.getRS2GSFlow": [[35, 56], ["numpy.full", "numpy.empty_like", "range", "range", "numpy.matmul", "range", "numpy.linalg.inv", "numpy.isnan", "gtFlowGenerator.projectPoint", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.gtFlowGenerator.projectPoint"], ["", "def", "getRS2GSFlow", "(", "depth_rs", ",", "cam1", ",", "T_cam0_v1", ",", "v1_lut", ")", ":", "\n", "    ", "h", ",", "w", "=", "depth_rs", ".", "shape", "[", ":", "2", "]", "\n", "flow_rs2gs", "=", "np", ".", "full", "(", "[", "h", ",", "w", ",", "2", "]", ",", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "T_gs_rs", "=", "np", ".", "empty_like", "(", "T_cam0_v1", ")", "\n", "for", "v1", "in", "range", "(", "h", ")", ":", "\n", "        ", "T_gs_rs", "[", "v1", "]", "=", "np", ".", "matmul", "(", "LA", ".", "inv", "(", "T_cam0_v1", "[", "0", "]", ")", ",", "T_cam0_v1", "[", "v1", "]", ")", "\n", "\n", "# Project from rs to gs", "\n", "", "for", "v1rs", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "u1rs", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "np", ".", "isnan", "(", "depth_rs", "[", "v1rs", ",", "u1rs", "]", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "[", "u1gs", ",", "v1gs", "]", "=", "projectPoint", "(", "\n", "u1rs", ",", "v1rs", ",", "depth_rs", "[", "v1rs", ",", "u1rs", "]", ",", "cam1", ",", "T_gs_rs", "[", "v1_lut", "[", "v1rs", ",", "u1rs", "]", "]", ",", "cam1", ")", "\n", "if", "not", "np", ".", "isnan", "(", "u1gs", ")", ":", "\n", "                ", "flow_rs2gs", "[", "v1rs", ",", "u1rs", ",", "0", "]", "=", "u1gs", "-", "u1rs", "\n", "flow_rs2gs", "[", "v1rs", ",", "u1rs", ",", "1", "]", "=", "v1gs", "-", "v1rs", "\n", "\n", "", "", "", "return", "flow_rs2gs", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.gtFlowGenerator.getRS2GSFlows": [[58, 75], ["numpy.load", "numpy.load", "numpy.load", "tqdm.tqdm", "os.path.exists", "os.makedirs", "range", "numpy.load", "gtFlowGenerator.getRS2GSFlow", "os.path.join", "numpy.save", "str"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.gtFlowGenerator.getRS2GSFlow"], ["", "def", "getRS2GSFlows", "(", "save_path", ",", "ns_per_v", ")", ":", "\n", "    ", "depth1_path", "=", "save_path", "+", "\"cam1/depth/\"", "\n", "cam1", "=", "np", ".", "load", "(", "save_path", "+", "\"cam1/camera.npy\"", ")", "\n", "flows_rs2gs_path", "=", "save_path", "+", "\"cam1/flows_rs2gs/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "flows_rs2gs_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "flows_rs2gs_path", ")", "\n", "\n", "# Load poses", "\n", "", "T_cam0_v1", "=", "np", ".", "load", "(", "save_path", "+", "\"T_cam0_v1.npy\"", ")", "\n", "v1_lut", "=", "np", ".", "load", "(", "save_path", "+", "\"cam1/v1_lut.npy\"", ")", "\n", "\n", "img_count", "=", "T_cam0_v1", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "img_count", ")", ")", ":", "\n", "        ", "depth1", "=", "np", ".", "load", "(", "'{}{}.npy'", ".", "format", "(", "depth1_path", ",", "i", ")", ")", "\n", "flow_rs2gs", "=", "getRS2GSFlow", "(", "depth1", ",", "cam1", ",", "T_cam0_v1", "[", "i", "]", ",", "v1_lut", ")", "\n", "rs2gs_name", "=", "os", ".", "path", ".", "join", "(", "flows_rs2gs_path", ",", "str", "(", "i", ")", ")", "\n", "np", ".", "save", "(", "rs2gs_name", ",", "flow_rs2gs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.gsImgRectifier.rectify_gs_imgs": [[25, 66], ["len", "tqdm.tqdm", "os.path.exists", "os.makedirs", "os.listdir", "range", "str", "numpy.load", "numpy.indices", "numpy.stack", "numpy.array", "numpy.clip", "numpy.clip", "numpy.reshape", "numpy.full", "numpy.full", "numpy.reshape", "numpy.reshape", "numpy.stack", "pandas.DataFrame().interpolate", "pandas.DataFrame().interpolate", "cv2.imread", "cv2.remap", "cv2.imwrite", "numpy.reshape", "numpy.reshape", "pandas.DataFrame", "pandas.DataFrame"], "function", ["None"], ["def", "rectify_gs_imgs", "(", "save_path", ",", "resolution", ")", ":", "\n", "    ", "gs_img_path", "=", "save_path", "+", "\"cam1/images_gs/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "gs_img_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "gs_img_path", ")", "\n", "\n", "", "cols", ",", "rows", "=", "resolution", "\n", "rs_img_path", "=", "save_path", "+", "\"cam1/images/\"", "\n", "flows_rs2gs_path", "=", "save_path", "+", "\"cam1/flows_rs2gs/\"", "\n", "count", "=", "len", "(", "os", ".", "listdir", "(", "flows_rs2gs_path", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "count", ")", ")", ":", "\n", "        ", "fi", "=", "str", "(", "i", ")", "\n", "flow_rs2gs", "=", "np", ".", "load", "(", "flows_rs2gs_path", "+", "fi", "+", "'.npy'", ")", "\n", "size_1d", "=", "rows", "*", "cols", "\n", "ind_v", ",", "ind_u", "=", "np", ".", "indices", "(", "(", "rows", ",", "cols", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# map: rs to gs", "\n", "uv_rs", "=", "np", ".", "stack", "(", "(", "ind_u", ",", "ind_v", ")", ",", "axis", "=", "-", "1", ")", "\n", "uv_gs", "=", "np", ".", "array", "(", "uv_rs", "+", "flow_rs2gs", "+", "0.5", ",", "dtype", "=", "'int'", ")", "\n", "u_gs", "=", "np", ".", "clip", "(", "uv_gs", "[", ":", ",", ":", ",", "0", "]", ",", "0", ",", "cols", "-", "1", ")", "\n", "v_gs", "=", "np", ".", "clip", "(", "uv_gs", "[", ":", ",", ":", ",", "1", "]", ",", "0", ",", "rows", "-", "1", ")", "\n", "uv_gs_1d", "=", "v_gs", "*", "cols", "+", "u_gs", "\n", "uv_gs_1d", "=", "np", ".", "reshape", "(", "uv_gs_1d", ",", "(", "size_1d", ")", ")", "\n", "\n", "# reverse the map: gs to rs", "\n", "flow_gs2rs_1d_u", "=", "np", ".", "full", "(", "(", "size_1d", ")", ",", "np", ".", "nan", ",", "dtype", "=", "'float32'", ")", "\n", "flow_gs2rs_1d_v", "=", "np", ".", "full", "(", "(", "size_1d", ")", ",", "np", ".", "nan", ",", "dtype", "=", "'float32'", ")", "\n", "flow_gs2rs_1d_u", "[", "uv_gs_1d", "]", "=", "np", ".", "reshape", "(", "-", "flow_rs2gs", "[", ":", ",", ":", ",", "0", "]", ",", "(", "size_1d", ")", ")", "\n", "flow_gs2rs_1d_v", "[", "uv_gs_1d", "]", "=", "np", ".", "reshape", "(", "-", "flow_rs2gs", "[", ":", ",", ":", ",", "1", "]", ",", "(", "size_1d", ")", ")", "\n", "flow_gs2rs", "=", "np", ".", "stack", "(", "[", "np", ".", "reshape", "(", "flow_gs2rs_1d_u", ",", "(", "rows", ",", "cols", ")", ")", ",", "\n", "np", ".", "reshape", "(", "flow_gs2rs_1d_v", ",", "(", "rows", ",", "cols", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# 2d interpolation", "\n", "flow_gs2rs", "[", ":", ",", ":", ",", "0", "]", "=", "pd", ".", "DataFrame", "(", "flow_gs2rs", "[", ":", ",", ":", ",", "0", "]", ")", ".", "interpolate", "(", ")", "\n", "flow_gs2rs", "[", ":", ",", ":", ",", "1", "]", "=", "pd", ".", "DataFrame", "(", "flow_gs2rs", "[", ":", ",", ":", ",", "1", "]", ")", ".", "interpolate", "(", ")", "\n", "\n", "# reconstruct gs image", "\n", "map_u", "=", "ind_u", "+", "flow_gs2rs", "[", ":", ",", ":", ",", "0", "]", "\n", "map_v", "=", "ind_v", "+", "flow_gs2rs", "[", ":", ",", ":", ",", "1", "]", "\n", "img_rs", "=", "cv2", ".", "imread", "(", "rs_img_path", "+", "fi", "+", "'.png'", ")", "\n", "img_gs", "=", "cv2", ".", "remap", "(", "img_rs", ",", "map_u", ",", "map_v", ",", "cv2", ".", "INTER_LINEAR", ")", "\n", "cv2", ".", "imwrite", "(", "'{}{}.png'", ".", "format", "(", "gs_img_path", ",", "i", ")", ",", "img_gs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.getFlowBD": [[29, 49], ["pwc_net.predict_from_img_pairs", "numpy.full_like", "range", "range", "int", "int"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.pwcnet.ModelPWCNet.predict_from_img_pairs"], ["def", "getFlowBD", "(", "img0", ",", "img1", ",", "windowName", "=", "''", ")", ":", "\n", "    ", "FLOW_THRES", "=", "2", "# threshold to accept a flow by bi-directional matching", "\n", "h", ",", "w", "=", "img0", ".", "shape", "[", ":", "2", "]", "\n", "\n", "img_pairs", "=", "[", "(", "img0", ",", "img1", ")", ",", "(", "img1", ",", "img0", ")", "]", "\n", "flow01", ",", "flow10", "=", "pwc_net", ".", "predict_from_img_pairs", "(", "img_pairs", ",", "batch_size", "=", "2", ")", "\n", "\n", "flow01_filtered", "=", "np", ".", "full_like", "(", "flow01", ",", "np", ".", "nan", ")", "\n", "for", "v0", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "u0", "in", "range", "(", "w", ")", ":", "\n", "            ", "fu01", ",", "fv01", "=", "flow01", "[", "v0", ",", "u0", ",", ":", "]", "\n", "u1", ",", "v1", "=", "u0", "+", "fu01", ",", "v0", "+", "fv01", "\n", "u1i", ",", "v1i", "=", "int", "(", "u1", "+", "0.5", ")", ",", "int", "(", "v1", "+", "0.5", ")", "\n", "if", "0", "<=", "v1i", "<", "h", "and", "0", "<=", "u1i", "<", "w", ":", "\n", "                ", "fu10", ",", "fv10", "=", "flow10", "[", "v1i", ",", "u1i", ",", ":", "]", "\n", "du", ",", "dv", "=", "u1", "+", "fu10", "-", "u0", ",", "v1", "+", "fv10", "-", "v0", "\n", "if", "(", "du", "*", "du", "+", "dv", "*", "dv", ")", "<", "FLOW_THRES", ":", "# bi-directional filtering", "\n", "                    ", "flow01_filtered", "[", "v0", ",", "u0", ",", "0", "]", "=", "flow01", "[", "v0", ",", "u0", ",", "0", "]", "\n", "flow01_filtered", "[", "v0", ",", "u0", ",", "1", "]", "=", "flow01", "[", "v0", ",", "u0", ",", "1", "]", "\n", "", "", "", "", "return", "flow01_filtered", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.getRay": [[51, 56], ["numpy.ones", "numpy.expand_dims", "numpy.linalg.norm"], "function", ["None"], ["", "def", "getRay", "(", "cam", ",", "uv", ")", ":", "\n", "    ", "ray_uv", "=", "np", ".", "ones", "(", "3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ray_uv", "[", "0", "]", "=", "(", "uv", "[", "0", "]", "-", "cam", "[", "2", "]", ")", "/", "cam", "[", "0", "]", "\n", "ray_uv", "[", "1", "]", "=", "(", "uv", "[", "1", "]", "-", "cam", "[", "3", "]", ")", "/", "cam", "[", "1", "]", "\n", "return", "np", ".", "expand_dims", "(", "ray_uv", "/", "LA", ".", "norm", "(", "ray_uv", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.depthFromTriangulation": [[58, 72], ["depthEstimator.getRay", "depthEstimator.getRay", "numpy.hstack", "numpy.matmul", "numpy.fabs", "numpy.linalg.det", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.linalg.inv"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.getRay", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.getRay"], ["", "def", "depthFromTriangulation", "(", "cam_ref", ",", "cam_cur", ",", "T_cur_ref", ",", "uv_ref", ",", "uv_cur", ")", ":", "\n", "    ", "R_cur_ref", "=", "T_cur_ref", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "t_cur_ref", "=", "T_cur_ref", "[", "0", ":", "3", ",", "3", "]", "\n", "ray_uv_ref", "=", "getRay", "(", "cam_ref", ",", "uv_ref", ")", "\n", "ray_uv_cur", "=", "getRay", "(", "cam_cur", ",", "uv_cur", ")", "\n", "\n", "A", "=", "np", ".", "hstack", "(", "(", "np", ".", "matmul", "(", "R_cur_ref", ",", "ray_uv_ref", ")", ",", "ray_uv_cur", ")", ")", "\n", "AtA", "=", "np", ".", "matmul", "(", "A", ".", "T", ",", "A", ")", "\n", "if", "LA", ".", "det", "(", "AtA", ")", "<", "1e-5", ":", "\n", "        ", "return", "-", "1", "\n", "", "depth2", "=", "-", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "LA", ".", "inv", "(", "AtA", ")", ",", "A", ".", "T", ")", ",", "t_cur_ref", ")", "\n", "depth", "=", "np", ".", "fabs", "(", "depth2", "[", "0", "]", ")", "\n", "\n", "return", "depth", "*", "ray_uv_ref", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.calculateCurDepth": [[74, 89], ["numpy.full", "depthEstimator.getFlowBD", "range", "range", "numpy.isnan", "depthEstimator.depthFromTriangulation"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.getFlowBD", "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.depthFromTriangulation"], ["", "def", "calculateCurDepth", "(", "cam0", ",", "img0", ",", "cam1", ",", "img1", ",", "T_cam0_v1", ",", "v1_lut", ")", ":", "\n", "    ", "h", ",", "w", "=", "img0", ".", "shape", "[", ":", "2", "]", "\n", "\n", "depth1", "=", "np", ".", "full", "(", "[", "h", ",", "w", "]", ",", "np", ".", "nan", ",", "dtype", "=", "float", ")", "\n", "\n", "flow10", "=", "getFlowBD", "(", "img1", ",", "img0", ",", "'Match'", ")", "\n", "for", "v1", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "u1", "in", "range", "(", "w", ")", ":", "\n", "            ", "fu", ",", "fv", "=", "flow10", "[", "v1", ",", "u1", ",", ":", "]", "\n", "if", "not", "np", ".", "isnan", "(", "fu", ")", ":", "\n", "                ", "uv0", "=", "[", "u1", "+", "fu", ",", "v1", "+", "fv", "]", "\n", "depth1", "[", "v1", ",", "u1", "]", "=", "depthFromTriangulation", "(", "\n", "cam1", ",", "cam0", ",", "T_cam0_v1", "[", "v1_lut", "[", "v1", ",", "u1", "]", "]", ",", "[", "u1", ",", "v1", "]", ",", "uv0", ")", "\n", "\n", "", "", "", "return", "depth1", "\n", "\n"]], "home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.getDepth": [[91, 115], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "tqdm.tqdm", "os.path.exists", "os.makedirs", "range", "cv2.imread", "cv2.imread", "depthEstimator.calculateCurDepth", "os.path.join", "numpy.save", "str"], "function", ["home.repos.pwc.inspect_result.IRVLab_unrolling.dataset.depthEstimator.calculateCurDepth"], ["", "def", "getDepth", "(", "save_path", ")", ":", "\n", "    ", "img0_path", "=", "save_path", "+", "\"cam0/images/\"", "\n", "img1_path", "=", "save_path", "+", "\"cam1/images/\"", "\n", "depth1_path", "=", "save_path", "+", "\"cam1/depth/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "depth1_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "depth1_path", ")", "\n", "\n", "# Load cameras", "\n", "", "cam0", "=", "np", ".", "load", "(", "save_path", "+", "\"cam0/camera.npy\"", ")", "\n", "cam1", "=", "np", ".", "load", "(", "save_path", "+", "\"cam1/camera.npy\"", ")", "\n", "\n", "# Load poses", "\n", "T_cam0_v1", "=", "np", ".", "load", "(", "save_path", "+", "\"T_cam0_v1.npy\"", ")", "\n", "v1_lut", "=", "np", ".", "load", "(", "save_path", "+", "\"cam1/v1_lut.npy\"", ")", "\n", "img_count", "=", "T_cam0_v1", ".", "shape", "[", "0", "]", "\n", "\n", "# Get depth", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "img_count", ")", ")", ":", "\n", "        ", "img0", "=", "cv2", ".", "imread", "(", "'{}{}.png'", ".", "format", "(", "img0_path", ",", "i", ")", ")", "\n", "img1", "=", "cv2", ".", "imread", "(", "'{}{}.png'", ".", "format", "(", "img1_path", ",", "i", ")", ")", "\n", "depth1", "=", "calculateCurDepth", "(", "\n", "cam0", ",", "img0", ",", "cam1", ",", "img1", ",", "T_cam0_v1", "[", "i", "]", ",", "v1_lut", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "depth1_path", ",", "str", "(", "i", ")", ")", "\n", "np", ".", "save", "(", "fname", ",", "depth1", ")", "\n", "", "", ""]]}