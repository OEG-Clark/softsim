{"home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.__init__": [[29, 76], ["logging.info", "pandas.DataFrame", "evaluate.RepresentationEvaluator.consolidate_corpora", "kwargs.get", "list", "torch.utils.tensorboard.SummaryWriter", "CLASSIFIER_PARAMS.values", "evaluate.RepresentationEvaluator.init_dataset", "network.ModelManager", "list", "evaluate.RepresentationEvaluator._build_representation_index_ranges", "evaluate.RepresentationEvaluator.init_dataset", "evaluate.RepresentationEvaluator.model.network.keys", "args.model_pos.split", "args.model_vel.split"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.consolidate_corpora", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.init_dataset", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.init_dataset"], ["    ", "def", "__init__", "(", "self", ",", "tasks", ",", "classifiers", "=", "'all'", ",", "args", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'\\n---------- Initializing evaluator ----------'", ")", "\n", "\n", "self", ".", "save_tsne_plot", "=", "args", ".", "save_tsne_plot", "\n", "self", ".", "scatterplot_dims", "=", "2", "\n", "self", ".", "viewing_time", "=", "kwargs", ".", "get", "(", "'viewing_time'", ")", "or", "args", ".", "viewing_time", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "if", "args", ".", "batch_size", "<", "256", "else", "256", "\n", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "scorers", "=", "[", "'accuracy'", "]", "\n", "if", "classifiers", "==", "'all'", ":", "\n", "            ", "self", ".", "classifiers", "=", "list", "(", "CLASSIFIER_PARAMS", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifiers", "=", "[", "CLASSIFIER_PARAMS", "[", "c", "]", "for", "c", "in", "classifiers", "]", "\n", "\n", "# evaluate while training; use model passed in by trainer", "\n", "", "if", "'model'", "in", "kwargs", ":", "\n", "            ", "self", ".", "_caller", "=", "'trainer'", "\n", "self", ".", "model", "=", "kwargs", "[", "'model'", "]", "\n", "self", ".", "representation_name", "=", "kwargs", "[", "'representation_name'", "]", "\n", "self", ".", "signal_types", "=", "[", "args", ".", "signal_type", "]", "\n", "self", ".", "feature_type_idxs", "=", "[", "]", "\n", "self", ".", "dataset", "=", "{", "args", ".", "signal_type", ":", "kwargs", "[", "'dataset'", "]", "}", "\n", "# initialize own data set if the trainer is using sliced samples", "\n", "if", "not", "kwargs", "[", "'dataset'", "]", ":", "\n", "                ", "self", ".", "dataset", "=", "self", ".", "init_dataset", "(", "args", ",", "**", "kwargs", ")", "\n", "\n", "# evaluate using pretrained models", "\n", "", "", "elif", "args", ".", "model_pos", "or", "args", ".", "model_vel", ":", "\n", "            ", "self", ".", "_caller", "=", "'main'", "\n", "self", ".", "model", "=", "ModelManager", "(", "args", ",", "training", "=", "False", ")", "\n", "self", ".", "representation_name", "=", "'{}-pos-{}-vel-{}'", ".", "format", "(", "\n", "run_identifier", ",", "\n", "args", ".", "model_pos", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "\n", "args", ".", "model_vel", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "self", ".", "signal_types", "=", "list", "(", "self", ".", "model", ".", "network", ".", "keys", "(", ")", ")", "\n", "self", ".", "feature_type_idxs", "=", "self", ".", "_build_representation_index_ranges", "(", ")", "\n", "self", ".", "dataset", "=", "self", ".", "init_dataset", "(", "args", ")", "\n", "\n", "# will store each corpus' info into a unified self.df.", "\n", "# this will hold each trial's representation", "\n", "", "self", ".", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'corpus'", ",", "'subj'", ",", "'stim'", ",", "'task'", "]", ")", "\n", "\n", "self", ".", "tensorboard", "=", "(", "SummaryWriter", "(", "\n", "'tensorboard_evals/{}'", ".", "format", "(", "self", ".", "representation_name", ")", ")", "\n", "if", "args", ".", "tensorboard", "else", "None", ")", "\n", "\n", "self", ".", "consolidate_corpora", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.consolidate_corpora": [[77, 111], ["logging.info", "pandas.DataFrame", "evaluate.RepresentationEvaluator.dataset[].corpora.keys", "sample.split", "evaluate.RepresentationEvaluator.dataset[].corpora[].data.iloc[].copy", "df_rows.append", "evaluate.RepresentationEvaluator.consolidate_corpora.get_corpus_df"], "methods", ["None"], ["", "def", "consolidate_corpora", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Constructs own data frame self.df that holds holds input data and\n        metadata for each sample\n        \"\"\"", "\n", "def", "get_corpus_df", "(", "corpus_name", ",", "signal_type", ")", ":", "\n", "            ", "corpus", "=", "self", ".", "dataset", "[", "signal_type", "]", ".", "corpora", "[", "corpus_name", "]", "\n", "\n", "corpus", ".", "data", "[", "'corpus'", "]", "=", "corpus_name", "\n", "return", "corpus", ".", "data", "\n", "\n", "# _signal = self.signal_types[0]  # <-- for when I was doing pos + vel", "\n", "", "_signal", "=", "'vel'", "\n", "if", "self", ".", "dataset", "[", "_signal", "]", ".", "stratify", ":", "\n", "# perform classification tasks only on the validation set", "\n", "# Not really optimal, I could collate the whole validation set", "\n", "# with matching metadata within data.py...", "\n", "            ", "df_rows", "=", "[", "]", "\n", "for", "sample", "in", "self", ".", "dataset", "[", "'vel'", "]", ".", "val_set", ".", "train_set", ":", "\n", "                ", "corpus", ",", "idx", "=", "sample", ".", "split", "(", "'|'", ")", "\n", "row", "=", "self", ".", "dataset", "[", "'vel'", "]", ".", "corpora", "[", "corpus", "]", ".", "data", ".", "iloc", "[", "int", "(", "idx", ")", "]", ".", "copy", "(", ")", "\n", "row", "[", "'corpus'", "]", "=", "corpus", "\n", "df_rows", ".", "append", "(", "row", ")", "\n", "", "self", ".", "df", "=", "pd", ".", "DataFrame", "(", "df_rows", ")", "\n", "", "else", ":", "\n", "            ", "for", "corpus_name", "in", "self", ".", "dataset", "[", "_signal", "]", ".", "corpora", ".", "keys", "(", ")", ":", "\n", "                ", "corpus_df", "=", "get_corpus_df", "(", "corpus_name", ",", "self", ".", "signal_types", "[", "0", "]", ")", "\n", "logging", ".", "info", "(", "'{} {} signals loaded. Found {} trials'", ".", "format", "(", "\n", "corpus_name", ",", "self", ".", "signal_types", "[", "0", "]", ",", "len", "(", "corpus_df", ")", ")", ")", "\n", "\n", "self", ".", "df", "=", "pd", ".", "concat", "(", "[", "self", ".", "df", ",", "corpus_df", "]", ",", "sort", "=", "False", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'Loaded corpora ({}) to Evaluator. {} total trials found'", ".", "format", "(", "\n", "self", ".", "signal_types", ",", "len", "(", "self", ".", "df", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.init_dataset": [[112, 130], ["data.get_corpora", "data.data.SignalDataset", "logging.info", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.__init__.get_corpora"], ["", "def", "init_dataset", "(", "self", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "datasets", "=", "{", "}", "\n", "for", "signal_type", "in", "self", ".", "signal_types", ":", "\n", "            ", "args", ".", "signal_type", "=", "signal_type", "\n", "\n", "# hacky. tmp :(", "\n", "if", "'contrastive'", "in", "self", ".", "representation_name", ":", "\n", "                ", "args", ".", "loss_type", "=", "None", "\n", "args", ".", "viewing_time", "=", "kwargs", ".", "get", "(", "'viewing_time'", ")", "or", "args", ".", "viewing_time", "\n", "logging", ".", "info", "(", "'[evaluator] modified loss type -> {}, viewing time -> {}'", ".", "format", "(", "\n", "args", ".", "loss_type", ",", "args", ".", "viewing_time", ")", ")", "\n", "\n", "", "corpora", "=", "get_corpora", "(", "args", ")", "\n", "datasets", "[", "signal_type", "]", "=", "SignalDataset", "(", "corpora", ",", "args", ",", "\n", "# caller='evaluator',", "\n", "load_to_memory", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.extract_representations": [[131, 163], ["evaluate.RepresentationEvaluator.df.apply", "logging.info", "logging.info", "z_cols.append", "evaluate.RepresentationEvaluator._extract_representations", "evals.utils.tsne_plot_corpus", "numpy.stack", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator._extract_representations", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.tsne_plot_corpus"], ["", "def", "extract_representations", "(", "self", ",", "e", "=", "None", ",", "log_stats", "=", "False", ")", ":", "\n", "        ", "z_cols", "=", "[", "]", "\n", "for", "signal_type", "in", "self", ".", "signal_types", ":", "\n", "            ", "logging", ".", "info", "(", "'\\nExtracting {} representations...'", ".", "format", "(", "\n", "signal_type", ")", ")", "\n", "# dataset = self.dataset[signal_type]", "\n", "z_col", "=", "'z_'", "+", "signal_type", "\n", "z_cols", ".", "append", "(", "z_col", ")", "\n", "in_col", "=", "'in_'", "+", "signal_type", "\n", "\n", "try", ":", "\n", "                ", "network", "=", "self", ".", "model", ".", "network", "[", "signal_type", "]", "\n", "", "except", "TypeError", ":", "\n", "                ", "network", "=", "self", ".", "model", ".", "network", "\n", "\n", "", "_input", "=", "(", "np", ".", "stack", "(", "self", ".", "df", "[", "in_col", "]", ")", "if", "self", ".", "viewing_time", ">", "0", "\n", "else", "self", ".", "df", "[", "in_col", "]", ")", "\n", "\n", "self", ".", "df", "[", "z_col", "]", "=", "self", ".", "_extract_representations", "(", "network", ",", "_input", ")", "\n", "\n", "", "self", ".", "df", "[", "'z'", "]", "=", "self", ".", "df", ".", "apply", "(", "\n", "lambda", "x", ":", "np", ".", "concatenate", "(", "[", "x", "[", "col", "]", "for", "col", "in", "z_cols", "]", ")", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "logging", ".", "info", "(", "'Done. Final representation shape: {}'", ".", "format", "(", "\n", "self", ".", "df", "[", "'z'", "]", ".", "iloc", "[", "0", "]", ".", "shape", ")", ")", "\n", "\n", "# for analysis only! I run these manually", "\n", "if", "self", ".", "_caller", "!=", "'trainer'", ":", "\n", "# tsne_plot_fifa(self.df)", "\n", "# tsne_plot_etra(self.df)", "\n", "            ", "tsne_plot_corpus", "(", "self", ".", "df", ",", "self", ".", "representation_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator._extract_representations": [[164, 185], ["network.eval", "len", "x.swapaxes.swapaxes.to_numpy", "torch.no_grad", "range", "x.swapaxes.swapaxes.swapaxes", "math.ceil", "reps.append", "torch.Tensor().T.unsqueeze", "torch.Tensor", "[].cpu().detach().numpy", "len", "[].cpu().detach", "torch.Tensor", "[].cpu", "network.encode", "torch.Tensor.cuda"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.network.contrastive.ContrastiveEncoder.encode"], ["", "", "def", "_extract_representations", "(", "self", ",", "network", ",", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "if", "x", ".", "shape", "[", "1", "]", ">", "x", ".", "shape", "[", "2", "]", ":", "\n", "                ", "x", "=", "x", ".", "swapaxes", "(", "1", ",", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "to_numpy", "(", ")", "\n", "batch_size", "=", "1", "\n", "\n", "", "reps", "=", "[", "]", "\n", "network", ".", "eval", "(", ")", "\n", "with", "no_grad", "(", ")", ":", "\n", "            ", "for", "s", "in", "range", "(", "ceil", "(", "len", "(", "x", ")", "/", "batch_size", ")", ")", ":", "\n", "                ", "if", "batch_size", "==", "1", ":", "\n", "                    ", "batch", "=", "Tensor", "(", "x", "[", "s", "]", ")", ".", "T", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "batch", "=", "Tensor", "(", "x", "[", "batch_size", "*", "s", ":", "batch_size", "*", "(", "s", "+", "1", ")", "]", ")", "\n", "\n", "", "reps", ".", "append", "(", "network", ".", "encode", "(", "batch", ".", "cuda", "(", ")", "\n", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "return", "reps", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.evaluate": [[186, 236], ["enumerate", "logging.info", "task.get_xy", "evaluate.RepresentationEvaluator._log_labels", "evaluate.RepresentationEvaluator._write_scatterplot", "len", "sklearn.model_selection.KFold", "logging.info", "logging.info", "sklearn.pipeline.Pipeline", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "sklearn.model_selection.GridSearchCV.cv_results_[].max", "logging.info", "task.get_test", "len", "numpy.stack", "sklearn.model_selection.GridSearchCV.score", "logging.info", "evaluate.RepresentationEvaluator._write_scatterplot", "numpy.stack", "sklearn.preprocessing.StandardScaler"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT_CVCL.get_xy", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator._log_labels", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator._write_scatterplot", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_EMVIC.get_test", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator._write_scatterplot"], ["", "def", "evaluate", "(", "self", ",", "e", "=", "None", ")", ":", "\n", "        ", "scores", "=", "{", "}", "\n", "for", "i", ",", "task", "in", "enumerate", "(", "self", ".", "tasks", ")", ":", "\n", "            ", "_task", "=", "task", ".", "__class__", ".", "__name__", "# convenience var", "\n", "logging", ".", "info", "(", "'\\nTask {}: {}'", ".", "format", "(", "i", "+", "1", ",", "_task", ")", ")", "\n", "x", ",", "y", ",", "=", "task", ".", "get_xy", "(", "self", ".", "df", ")", "\n", "if", "len", "(", "x", ")", "<", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "n_fold", ",", "refit", ",", "test_set", "=", "5", ",", "False", ",", "None", "\n", "if", "_task", "==", "'Biometrics_EMVIC'", ":", "# to compare with LPiTrack", "\n", "                ", "n_fold", ",", "refit", ",", "test_set", "=", "4", ",", "'accuracy'", ",", "task", ".", "get_test", "(", "self", ".", "df", ")", "\n", "", "if", "_task", "==", "'ETRAStimuli_NonBlank'", ":", "\n", "                ", "n_fold", "=", "kf", "=", "KFold", "(", "len", "(", "x", ")", ")", "\n", "logging", ".", "info", "(", "'Performing LOOCV.'", ")", "\n", "logging", ".", "info", "(", "kf", ")", "\n", "\n", "", "self", ".", "_log_labels", "(", "x", ",", "y", ")", "\n", "self", ".", "_write_scatterplot", "(", "_task", ",", "x", ",", "y", ",", "e", ")", "\n", "# self._run_dummy_classifier(x, y)", "\n", "\n", "scores", "[", "task", ".", "__class__", ".", "__name__", "]", "=", "{", "}", "\n", "for", "classifier", ",", "params_grid", "in", "self", ".", "classifiers", ":", "\n", "                ", "if", "self", ".", "_caller", "!=", "'trainer'", "and", "classifier", "[", "0", "]", "==", "'svm_linear'", ":", "\n", "                    ", "refit", "=", "'accuracy'", "# for feature importances", "\n", "\n", "", "pipeline", "=", "Pipeline", "(", "[", "(", "'scaler'", ",", "StandardScaler", "(", ")", ")", ",", "classifier", "]", ")", "\n", "\n", "grid_cv", "=", "GridSearchCV", "(", "pipeline", ",", "params_grid", ",", "cv", "=", "n_fold", ",", "\n", "n_jobs", "=", "-", "1", ",", "\n", "scoring", "=", "self", ".", "scorers", ",", "\n", "refit", "=", "refit", ")", "\n", "grid_cv", ".", "fit", "(", "np", ".", "stack", "(", "x", ")", ",", "y", ")", "\n", "\n", "# f1 = grid_cv.cv_results_['mean_test_f1_micro'].max()", "\n", "acc", "=", "grid_cv", ".", "cv_results_", "[", "'mean_test_accuracy'", "]", ".", "max", "(", ")", "\n", "logging", ".", "info", "(", "'[{}] Acc: {:.4f}'", ".", "format", "(", "classifier", "[", "0", "]", ",", "acc", ")", ")", "\n", "\n", "scores", "[", "_task", "]", "[", "classifier", "[", "0", "]", "]", "=", "acc", "\n", "\n", "if", "test_set", "is", "not", "None", ":", "\n", "                    ", "x_", ",", "y_", "=", "test_set", "\n", "# self._log_labels(x_, y_)", "\n", "test_acc", "=", "grid_cv", ".", "score", "(", "np", ".", "stack", "(", "x_", ")", ",", "y_", ")", "\n", "logging", ".", "info", "(", "'Test Acc: {:.4f}'", ".", "format", "(", "test_acc", ")", ")", "\n", "scores", "[", "_task", "+", "'_test'", "]", "=", "{", "}", "\n", "scores", "[", "_task", "+", "'_test'", "]", "[", "classifier", "[", "0", "]", "]", "=", "test_acc", "\n", "self", ".", "_write_scatterplot", "(", "_task", ",", "x_", ",", "y_", ",", "e", ")", "\n", "\n", "", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator._log_labels": [[237, 245], ["numpy.unique", "logging.info", "logging.info", "len", "len", "dict", "zip", "map"], "methods", ["None"], ["", "def", "_log_labels", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "True", ":", "\n", "# if self._caller == 'main':", "\n", "            ", "labels", "=", "np", ".", "unique", "(", "y", ",", "return_counts", "=", "True", ")", "\n", "logging", ".", "info", "(", "\n", "'{} samples, {} Classes: '", ".", "format", "(", "len", "(", "x", ")", ",", "len", "(", "labels", "[", "0", "]", ")", ")", ")", "\n", "logging", ".", "info", "(", "\n", "'Class Counts: {}'", ".", "format", "(", "dict", "(", "zip", "(", "*", "map", "(", "list", ",", "labels", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator._write_scatterplot": [[246, 269], ["evals.utils.plot_scatter", "evaluate.RepresentationEvaluator.tensorboard.add_figure", "logging.info", "sklearn.preprocessing.StandardScaler().fit_transform", "pandas.DataFrame", "list", "evaluate.RepresentationEvaluator._write_scatterplot.add_figure"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter"], ["", "", "def", "_write_scatterplot", "(", "self", ",", "task", ",", "x", ",", "y", ",", "e", ")", ":", "\n", "        ", "def", "add_figure", "(", "df", ",", "method", ",", "title_suffix", "=", "''", ")", ":", "\n", "            ", "title", "=", "'_'", ".", "join", "(", "[", "task", ",", "method", "]", ")", "\n", "\n", "if", "e", "is", "not", "None", ":", "# means training, dont save each plot to disk", "\n", "                ", "savefig_title", "=", "None", "\n", "", "else", ":", "\n", "                ", "savefig_title", "=", "self", ".", "representation_name", "+", "'_'", "+", "title", "+", "title_suffix", "\n", "", "fig", "=", "plot_scatter", "(", "df", ",", "savefig_title", ")", "\n", "\n", "if", "not", "self", ".", "tensorboard", ":", "\n", "                ", "return", "\n", "", "self", ".", "tensorboard", ".", "add_figure", "(", "title", ",", "fig", ",", "global_step", "=", "e", ")", "\n", "logging", ".", "info", "(", "'{} scatterplot saved to tensorboard'", ".", "format", "(", "method", ")", ")", "\n", "\n", "", "if", "self", ".", "save_tsne_plot", ":", "\n", "            ", "z_values", "=", "StandardScaler", "(", ")", ".", "fit_transform", "(", "np", ".", "stack", "(", "x", ")", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "TSNE", "(", "self", ".", "scatterplot_dims", ",", "\n", "perplexity", "=", "30", ",", "\n", "learning_rate", "=", "500", ",", "\n", "n_jobs", "=", "3", ")", ".", "fit_transform", "(", "z_values", ")", ")", "\n", "df", "[", "'label'", "]", "=", "list", "(", "y", ")", "\n", "add_figure", "(", "df", ",", "'tSNE'", ",", "'-p{}-lr{}'", ".", "format", "(", "30", ",", "500", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator._run_dummy_classifier": [[270, 277], ["sklearn.pipeline.Pipeline", "sklearn.model_selection.cross_validate", "logging.info", "numpy.stack", "numpy.mean", "sklearn.preprocessing.StandardScaler", "sklearn.dummy.DummyClassifier"], "methods", ["None"], ["", "", "def", "_run_dummy_classifier", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "dummy_pipeline", "=", "Pipeline", "(", "[", "\n", "(", "'scaler'", ",", "StandardScaler", "(", ")", ")", ",", "(", "'dummy'", ",", "DummyClassifier", "(", ")", ")", "]", ")", "\n", "dummy_scores", "=", "cross_validate", "(", "\n", "dummy_pipeline", ",", "np", ".", "stack", "(", "x", ")", ",", "y", ",", "cv", "=", "5", ",", "scoring", "=", "self", ".", "scorers", ")", "\n", "logging", ".", "info", "(", "'Chance Mean Acc: {:.2f}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "dummy_scores", "[", "'test_accuracy'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.__init__": [[32, 48], ["network.ModelManager", "train.Trainer._load_data", "network.losses.NT_XentLoss", "data.transformer.DataTransformer", "train.Trainer._init_evaluator", "train.Trainer.model.network.cuda", "torch.cuda.amp.GradScaler"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer._load_data", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer._init_evaluator"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "ModelManager", "(", "args", ")", "\n", "self", ".", "eval_checkpoint", "=", "args", ".", "eval_checkpoint", "\n", "self", ".", "save_model", "=", "args", ".", "save_model", "\n", "self", ".", "cuda", "=", "args", ".", "cuda", "\n", "self", ".", "use_fp16", "=", "args", ".", "use_fp16", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "model", ".", "network", "=", "self", ".", "model", ".", "network", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "_load_data", "(", ")", "\n", "self", ".", "loss_fn", "=", "NT_XentLoss", "(", "args", ")", "\n", "if", "self", ".", "use_fp16", ":", "\n", "            ", "self", ".", "grad_scaler", "=", "amp", ".", "GradScaler", "(", ")", "\n", "", "self", ".", "data_transformer", "=", "DataTransformer", "(", "args", ")", "\n", "self", ".", "global_losses", "=", "{", "'train'", ":", "[", "]", ",", "'val'", ":", "[", "]", "}", "\n", "self", ".", "_init_evaluator", "(", "args", ".", "name_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer._load_data": [[49, 62], ["data.data.SignalDataset", "torch.utils.data.DataLoader", "_loader_params.update", "data.get_corpora", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.__init__.get_corpora"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "SignalDataset", "(", "get_corpora", "(", "args", ")", ",", "args", ",", "\n", "caller", "=", "'trainer'", ")", "\n", "\n", "_loader_params", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", ",", "'shuffle'", ":", "True", ",", "\n", "'pin_memory'", ":", "True", ",", "'num_workers'", ":", "4", ",", "\n", "'drop_last'", ":", "True", "}", "\n", "\n", "self", ".", "dataloader", "=", "DataLoader", "(", "self", ".", "dataset", ",", "**", "_loader_params", ")", "\n", "_loader_params", ".", "update", "(", "{", "'drop_last'", ":", "False", "}", ")", "\n", "self", ".", "val_dataloader", "=", "(", "\n", "DataLoader", "(", "self", ".", "dataset", ".", "val_set", ",", "**", "_loader_params", ")", "\n", "if", "self", ".", "dataset", ".", "val_set", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer._init_evaluator": [[63, 93], ["evaluate.RepresentationEvaluator", "torch.utils.tensorboard.SummaryWriter", "evals.classification_tasks.Biometrics_EMVIC", "evals.classification_tasks.Biometrics_ETRA", "evals.classification_tasks.Biometrics_ETRA_Fixation", "evals.classification_tasks.Biometrics_ETRA_All", "evals.classification_tasks.Biometrics_FIFA", "evals.classification_tasks.Biometrics_MIT_LTP", "evals.classification_tasks.Biometrics_MIT_LR", "evals.classification_tasks.Biometrics_MIT_CVCL"], "methods", ["None"], ["", "def", "_init_evaluator", "(", "self", ",", "prefix", ")", ":", "\n", "# for logging out this run", "\n", "        ", "_rep_name", "=", "'{}{}{}-hz:{}-s:{}-tau:{}-bs:{}'", ".", "format", "(", "\n", "prefix", ",", "run_identifier", ",", "'contrastive'", ",", "\n", "self", ".", "dataset", ".", "hz", ",", "self", ".", "dataset", ".", "signal_type", ",", "\n", "self", ".", "loss_fn", ".", "tau", ",", "self", ".", "dataloader", ".", "batch_size", ")", "\n", "\n", "self", ".", "evaluator", "=", "RepresentationEvaluator", "(", "\n", "tasks", "=", "[", "Biometrics_EMVIC", "(", ")", ",", "\n", "Biometrics_ETRA", "(", ")", ",", "\n", "Biometrics_ETRA_Fixation", "(", ")", ",", "\n", "Biometrics_ETRA_All", "(", ")", ",", "\n", "Biometrics_FIFA", "(", ")", ",", "\n", "Biometrics_MIT_LTP", "(", ")", ",", "\n", "Biometrics_MIT_LR", "(", ")", ",", "\n", "Biometrics_MIT_CVCL", "(", ")", "]", ",", "\n", "classifiers", "=", "[", "'svm_linear'", "]", ",", "\n", "args", "=", "args", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "# dataset=None,  # make evaluator initialize its own", "\n", "dataset", "=", "self", ".", "dataset", ",", "\n", "representation_name", "=", "_rep_name", ",", "\n", "# to evaluate on whole viewing time", "\n", "viewing_time", "=", "-", "1", ")", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "self", ".", "tensorboard", "=", "SummaryWriter", "(", "\n", "'tensorboard_runs/{}'", ".", "format", "(", "_rep_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tensorboard", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer._reset_epoch_losses": [[94, 96], ["None"], "methods", ["None"], ["", "", "def", "_reset_epoch_losses", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch_losses", "=", "{", "'train'", ":", "0.0", ",", "'val'", ":", "0.0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer._update_global_losses": [[97, 100], ["train.Trainer.global_losses[].append"], "methods", ["None"], ["", "def", "_update_global_losses", "(", "self", ")", ":", "\n", "        ", "for", "dset", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "self", ".", "global_losses", "[", "dset", "]", ".", "append", "(", "self", ".", "epoch_losses", "[", "dset", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.train": [[101, 135], ["logging.info", "logging.info", "logging.info", "time.time", "train.Trainer.evaluate_representation", "train.Trainer._reset_epoch_losses", "enumerate", "train.Trainer._update_global_losses", "train.Trainer.log", "time.time", "len", "len", "str", "train.Trainer.model.network.train", "train.Trainer.forward", "train.Trainer.model.network.eval", "train.Trainer.evaluate_representation", "torch.no_grad", "time.time", "train.Trainer.forward"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.evaluate_representation", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer._reset_epoch_losses", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer._update_global_losses", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.log", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.train", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.losses.NT_XentLoss.forward", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.evaluate_representation", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.losses.NT_XentLoss.forward"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'\\n===== STARTING TRAINING ====='", ")", "\n", "logging", ".", "info", "(", "'{} samples, {} batches.'", ".", "format", "(", "\n", "len", "(", "self", ".", "dataset", ")", ",", "len", "(", "self", ".", "dataloader", ")", ")", ")", "\n", "logging", ".", "info", "(", "'Loss Fn:'", "+", "str", "(", "self", ".", "loss_fn", ")", ")", "\n", "\n", "i", ",", "e", "=", "0", ",", "0", "\n", "_checkpoint_start", "=", "time", ".", "time", "(", ")", "\n", "while", "i", "<", "MAX_TRAIN_ITERS", ":", "\n", "            ", "self", ".", "_reset_epoch_losses", "(", ")", "\n", "\n", "# TRAINING SET", "\n", "for", "b", ",", "batch", "in", "enumerate", "(", "self", ".", "dataloader", ")", ":", "\n", "                ", "self", ".", "model", ".", "network", ".", "train", "(", ")", "\n", "self", ".", "forward", "(", "batch", ",", "is_training", "=", "True", ")", "\n", "i", "+=", "1", "\n", "\n", "# VALIDATION SET", "\n", "", "if", "self", ".", "val_dataloader", "is", "not", "None", ":", "\n", "                ", "self", ".", "model", ".", "network", ".", "eval", "(", ")", "\n", "with", "no_grad", "(", ")", ":", "\n", "                    ", "for", "val_batch", "in", "self", ".", "val_dataloader", ":", "\n", "                        ", "self", ".", "forward", "(", "val_batch", ",", "is_training", "=", "False", ")", "\n", "\n", "", "", "", "self", ".", "_update_global_losses", "(", ")", "\n", "self", ".", "log", "(", "i", ",", "time", ".", "time", "(", ")", "-", "_checkpoint_start", ")", "\n", "\n", "e", "+=", "1", "\n", "if", "e", "%", "self", ".", "eval_checkpoint", "==", "0", ":", "\n", "                ", "self", ".", "evaluate_representation", "(", "i", ")", "\n", "\n", "", "_checkpoint_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "self", ".", "evaluate_representation", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.forward": [[136, 167], ["batch.cuda.cuda.float", "batch.cuda.cuda.reshape", "train.Trainer.item", "train.Trainer.model.network", "train.Trainer.loss_fn", "batch.cuda.cuda.cuda", "train.Trainer.forward._forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "def", "_forward", "(", "b", ")", ":", "\n", "            ", "out", "=", "self", ".", "model", ".", "network", "(", "b", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "out", ")", "\n", "return", "out", ",", "loss", "\n", "\n", "", "batch", "=", "batch", ".", "float", "(", ")", "\n", "batch", "=", "batch", ".", "reshape", "(", "-", "1", ",", "batch", ".", "shape", "[", "2", "]", ",", "self", ".", "dataset", ".", "num_gaze_points", ")", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "", "if", "self", ".", "use_fp16", ":", "\n", "            ", "with", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "out", ",", "loss", "=", "_forward", "(", "batch", ")", "\n", "", "", "else", ":", "\n", "            ", "out", ",", "loss", "=", "_forward", "(", "batch", ")", "\n", "\n", "", "dset", "=", "'train'", "if", "is_training", "else", "'val'", "\n", "self", ".", "epoch_losses", "[", "dset", "]", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "self", ".", "model", ".", "network", ".", "training", ":", "\n", "            ", "if", "self", ".", "use_fp16", ":", "\n", "                ", "self", ".", "grad_scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "grad_scaler", ".", "step", "(", "self", ".", "model", ".", "optim", ")", "\n", "self", ".", "grad_scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "self", ".", "model", ".", "optim", ".", "step", "(", ")", "\n", "", "self", ".", "model", ".", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.evaluate_representation": [[168, 178], ["train.Trainer.evaluator.extract_representations", "train.Trainer.evaluator.evaluate", "train.Trainer.items", "train.Trainer.model.save", "classifiers.items", "train.Trainer.tensorboard.add_scalar"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.extract_representations", "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.evaluate.RepresentationEvaluator.evaluate", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager.save"], ["", "def", "evaluate_representation", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "evaluator", ".", "extract_representations", "(", "i", ")", "\n", "scores", "=", "self", ".", "evaluator", ".", "evaluate", "(", "i", ")", "\n", "if", "self", ".", "tensorboard", ":", "\n", "            ", "for", "task", ",", "classifiers", "in", "scores", ".", "items", "(", ")", ":", "\n", "                ", "for", "classifier", ",", "acc", "in", "classifiers", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "tensorboard", ".", "add_scalar", "(", "\n", "'{}_{}_acc'", ".", "format", "(", "task", ",", "classifier", ")", ",", "acc", ",", "i", ")", "\n", "", "", "", "if", "self", ".", "save_model", ":", "\n", "            ", "self", ".", "model", ".", "save", "(", "i", ",", "run_identifier", ",", "self", ".", "global_losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.train.Trainer.log": [[179, 193], ["logging.info", "len", "train.Trainer.tensorboard.add_scalar", "len", "train.Trainer.tensorboard.add_scalar"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "i", ",", "t", ")", ":", "\n", "        ", "mean_train_loss", "=", "self", ".", "epoch_losses", "[", "'train'", "]", "/", "len", "(", "self", ".", "dataloader", ")", "\n", "if", "self", ".", "val_dataloader", "is", "None", ":", "\n", "            ", "mean_val_loss", "=", "0", "\n", "", "else", ":", "\n", "            ", "mean_val_loss", "=", "self", ".", "epoch_losses", "[", "'val'", "]", "/", "len", "(", "self", ".", "val_dataloader", ")", "\n", "\n", "", "logging", ".", "info", "(", "'[{}/{}] TLoss: {:.4f}, VLoss: {:.4f} ({:.2f}s)'", ".", "format", "(", "\n", "i", ",", "MAX_TRAIN_ITERS", ",", "mean_train_loss", ",", "mean_val_loss", ",", "t", ")", ")", "\n", "\n", "if", "self", ".", "tensorboard", ":", "\n", "            ", "self", ".", "tensorboard", ".", "add_scalar", "(", "'train_total_loss'", ",", "mean_train_loss", ",", "i", ")", "\n", "if", "mean_val_loss", ">", "0", ":", "\n", "                ", "self", ".", "tensorboard", ".", "add_scalar", "(", "'val_total_loss'", ",", "mean_val_loss", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.settings.print_settings": [[30, 34], ["logging.info", "globals().items", "k.isupper", "globals", "k.startswith"], "function", ["None"], ["def", "print_settings", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "{", "\n", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "globals", "(", ")", ".", "items", "(", ")", "\n", "if", "not", "k", ".", "startswith", "(", "'_'", ")", "and", "k", ".", "isupper", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.settings.get_parser": [[36, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"-l\"", ",", "\"--log-to-file\"", ",", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-v\"", ",", "\"--verbose\"", ",", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-model\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tau\"", ",", "default", "=", "0.3", ",", "type", "=", "float", ")", "\n", "# Encoder Settings", "\n", "parser", ".", "add_argument", "(", "\"--multiscale\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--squeeze-and-excite\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "# Data Settings", "\n", "parser", ".", "add_argument", "(", "\"-hz\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"-vt\"", ",", "\"--viewing-time\"", ",", "\n", "help", "=", "\"Cut raw gaze samples to this value (seconds)\"", ",", "\n", "default", "=", "-", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--signal-type\"", ",", "default", "=", "'vel'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"'pos' or 'vel'\"", ")", "\n", "# Training Settings", "\n", "parser", ".", "add_argument", "(", "\"--val-set-size\"", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--stratify\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "\"--use-fp16\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-bs\"", ",", "\"--batch-size\"", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"-e\"", ",", "\"--epochs\"", ",", "default", "=", "200", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"-lr\"", ",", "\"--learning-rate\"", ",", "default", "=", "5e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-pos\"", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--model-vel\"", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--name-prefix\"", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval-checkpoint\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "# Evaluation Settings", "\n", "parser", ".", "add_argument", "(", "\"--save-tsne-plot\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cv\"", ",", "\"--cv-folds\"", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--representation-layer\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"0: TCN output, 1: 1st projection layer\"", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.utils.setup_logging": [[12, 25], ["logging.getLogger().setLevel", "logging.basicConfig", "logging.basicConfig", "logging.getLogger().addHandler", "logging.getLogger", "logging.roost.removeHandler", "logging.StreamHandler", "logging.getLogger().setLevel", "logging.getLogger", "logging.getLogger"], "function", ["None"], ["def", "setup_logging", "(", "args", ",", "run_identifier", "=", "''", ")", ":", "\n", "    ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "if", "args", ".", "log_to_file", ":", "\n", "        ", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "            ", "logging", ".", "roost", ".", "removeHandler", "(", "handler", ")", "\n", "", "log_filename", "=", "run_identifier", "+", "'.log'", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "'../logs/'", "+", "log_filename", ",", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "'%(message)s'", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "", "elif", "args", ".", "verbose", ":", "\n", "        ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "", "logging", ".", "basicConfig", "(", "format", "=", "'%(message)s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.utils.visualize_reconstruction": [[27, 53], ["target.squeeze.squeeze", "torch.sigmoid.detach().squeeze", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.title", "matplotlib.legend", "matplotlib.tight_layout", "torch.sigmoid", "matplotlib.savefig", "matplotlib.close", "torch.sigmoid.detach"], "function", ["None"], ["", "def", "visualize_reconstruction", "(", "target", ",", "output", ",", "filename", ",", "loss_func", ",", "\n", "title", "=", "''", ",", "savefig", "=", "False", ")", ":", "\n", "    ", "save_dir", "=", "'../generated-data/comparisons/{}.jpg'", ".", "format", "(", "filename", ")", "\n", "target", "=", "target", ".", "squeeze", "(", ")", "\n", "output", "=", "output", ".", "detach", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "'bce'", "in", "loss_func", ":", "\n", "        ", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "\n", "", "line_params", "=", "{", "'alpha'", ":", "0.5", ",", "'linewidth'", ":", "1", "}", "\n", "viz", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "\n", "plt", ".", "plot", "(", "target", "[", "0", ",", ":", "]", ",", "'b'", ",", "label", "=", "'target_x'", ",", "**", "line_params", ")", "\n", "plt", ".", "plot", "(", "output", "[", "0", ",", ":", "]", ",", "'c'", ",", "label", "=", "'output_x'", ",", "**", "line_params", ")", "\n", "plt", ".", "plot", "(", "target", "[", "1", ",", ":", "]", ",", "'r'", ",", "label", "=", "'target_y'", ",", "**", "line_params", ")", "\n", "plt", ".", "plot", "(", "output", "[", "1", ",", ":", "]", ",", "'m'", ",", "label", "=", "'output_y'", ",", "**", "line_params", ")", "\n", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "savefig", ":", "\n", "        ", "plt", ".", "savefig", "(", "save_dir", ",", "quality", "=", "80", ")", "\n", "plt", ".", "close", "(", ")", "# is handled by tensorboard add_figure()?", "\n", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "viz", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.utils.plot_hist": [[55, 62], ["matplotlib.figure", "seaborn.distplot", "matplotlib.tight_layout"], "function", ["None"], ["", "", "def", "plot_hist", "(", "values", ",", "title", ")", ":", "\n", "    ", "viz", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "3", ")", ")", "\n", "sns", ".", "distplot", "(", "values", ")", "\n", "# plt.title(title)", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "# plt.close()", "\n", "return", "viz", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.None.utils.plot_scatter": [[64, 86], ["list", "matplotlib.figure", "matplotlib.tight_layout", "range", "len", "seaborn.scatterplot", "plt.figure.add_subplot", "zip", "logging.info", "matplotlib.close", "viz.add_subplot.scatter", "len", "df[].value_counts", "[].to_numpy"], "function", ["None"], ["", "def", "plot_scatter", "(", "df", ",", "savefig", "=", "False", ")", ":", "\n", "    ", "dims", "=", "list", "(", "range", "(", "len", "(", "df", ".", "columns", ")", "-", "1", ")", ")", "\n", "viz", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "5", ",", "5", ")", ")", "\n", "if", "len", "(", "dims", ")", "==", "2", ":", "\n", "        ", "sns", ".", "scatterplot", "(", "*", "dims", ",", "data", "=", "df", ",", "hue", "=", "'label'", ")", "\n", "", "else", ":", "\n", "        ", "ax", "=", "viz", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "# get 6 most frequent labels", "\n", "# TO-DO: Allow more than 6 labels (need to adjust colors)", "\n", "labels", "=", "df", "[", "'label'", "]", ".", "value_counts", "(", ")", "[", ":", "6", "]", ".", "index", "\n", "for", "label", ",", "color", "in", "zip", "(", "labels", ",", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'y'", ",", "'m'", "]", ")", ":", "\n", "            ", "ax", ".", "scatter", "(", "*", "df", "[", "df", "[", "'label'", "]", "==", "label", "]", "[", "dims", "]", ".", "to_numpy", "(", ")", ".", "T", ",", "c", "=", "color", ",", "alpha", "=", "0.33", ")", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "if", "savefig", ":", "\n", "        ", "logging", ".", "info", "(", "'savefig not implemented! Need to pass on filename!'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# plt.savefig('./tmp/{}-{}-{}-perplexity{}-iter{}.jpg'.format(", "\n", "#     task, method, len(df), 50, 3000), quality=85)", "\n", "# plt.close()", "\n", "", "else", ":", "\n", "        ", "return", "viz", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_3.get_xy": [[5, 11], ["data.corpus.apply", "data[].str.contains"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "_bool", "=", "data", ".", "corpus", ".", "apply", "(", "\n", "lambda", "x", ":", "x", "in", "[", "'EMVIC2014'", ",", "'Cerf2007-FIFA'", ",", "'ETRA2019'", "]", ")", "\n", "data", "=", "data", "[", "_bool", "]", "\n", "data", "=", "data", "[", "~", "data", "[", "'subj'", "]", ".", "str", ".", "contains", "(", "'test'", ")", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_All.get_xy": [[14, 17], ["data.subj.apply", "x.replace"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", ".", "subj", "=", "data", ".", "subj", ".", "apply", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'test-'", ",", "''", ")", ")", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_EMVIC.get_xy": [[20, 24], ["data.subj.str.contains"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", "=", "data", "[", "data", ".", "corpus", "==", "'EMVIC2014'", "]", "\n", "data", "=", "data", "[", "~", "data", ".", "subj", ".", "str", ".", "contains", "(", "'test'", ")", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_EMVIC.get_test": [[25, 30], ["data.subj.apply", "data.subj.str.contains", "x.replace"], "methods", ["None"], ["", "def", "get_test", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", "=", "data", "[", "data", ".", "corpus", "==", "'EMVIC2014'", "]", "\n", "data", "=", "data", "[", "data", ".", "subj", ".", "str", ".", "contains", "(", "'test'", ")", "]", "\n", "data", ".", "subj", "=", "data", ".", "subj", ".", "apply", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'test-'", ",", "''", ")", ")", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_FIFA.get_xy": [[33, 36], ["None"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", "=", "data", "[", "data", ".", "corpus", "==", "'Cerf2007-FIFA'", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_ETRA.get_xy": [[39, 42], ["None"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", "=", "data", "[", "data", ".", "corpus", "==", "'ETRA2019'", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_ETRA_Fixation.get_xy": [[45, 48], ["None"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", "=", "data", "[", "data", ".", "corpus", "==", "'ETRA2019-Fixation'", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_ETRA_All.get_xy": [[51, 55], ["data.corpus.apply"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "_bool", "=", "data", ".", "corpus", ".", "apply", "(", "lambda", "x", ":", "'ETRA'", "in", "x", ")", "\n", "data", "=", "data", "[", "_bool", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT.get_xy": [[58, 62], ["data.corpus.apply", "x.startswith"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "_bool", "=", "data", ".", "corpus", ".", "apply", "(", "lambda", "x", ":", "x", ".", "startswith", "(", "'MIT'", ")", ")", "\n", "data", "=", "data", "[", "_bool", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT_LTP.get_xy": [[65, 69], ["data.corpus.apply"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "_bool", "=", "data", ".", "corpus", ".", "apply", "(", "lambda", "x", ":", "x", "==", "'MIT-LearningToPredict'", ")", "\n", "data", "=", "data", "[", "_bool", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT_LR.get_xy": [[72, 76], ["data.corpus.apply"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "_bool", "=", "data", ".", "corpus", ".", "apply", "(", "lambda", "x", ":", "x", "==", "'MIT-LowRes'", ")", "\n", "data", "=", "data", "[", "_bool", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT_CVCL.get_xy": [[79, 83], ["data.corpus.apply"], "methods", ["None"], ["    ", "def", "get_xy", "(", "self", ",", "data", ")", ":", "\n", "        ", "_bool", "=", "data", ".", "corpus", ".", "apply", "(", "lambda", "x", ":", "x", "==", "'MIT-CVCL'", ")", "\n", "data", "=", "data", "[", "_bool", "]", "\n", "return", "data", ".", "z", ",", "data", ".", "subj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.setup_logging": [[15, 28], ["logging.getLogger().setLevel", "logging.basicConfig", "logging.basicConfig", "logging.getLogger().addHandler", "logging.getLogger", "logging.roost.removeHandler", "logging.StreamHandler", "logging.getLogger().setLevel", "logging.getLogger", "logging.getLogger"], "function", ["None"], ["        ", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "            ", "logging", ".", "roost", ".", "removeHandler", "(", "handler", ")", "\n", "", "log_filename", "=", "run_identifier", "+", "'.log'", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "'../logs/'", "+", "log_filename", ",", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "'%(message)s'", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "", "elif", "args", ".", "verbose", ":", "\n", "        ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "", "logging", ".", "basicConfig", "(", "format", "=", "'%(message)s'", ")", "\n", "\n", "\n", "", "def", "visualize_reconstruction", "(", "target", ",", "output", ",", "filename", ",", "loss_func", ",", "\n", "title", "=", "''", ",", "savefig", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.visualize_reconstruction": [[30, 65], ["target.squeeze.squeeze", "torch.sigmoid.detach().squeeze", "matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.tight_layout", "torch.sigmoid", "matplotlib.savefig", "matplotlib.close", "torch.sigmoid.detach"], "function", ["None"], ["target", "=", "target", ".", "squeeze", "(", ")", "\n", "output", "=", "output", ".", "detach", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "'bce'", "in", "loss_func", ":", "\n", "        ", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "\n", "", "line_params", "=", "{", "'alpha'", ":", "0.5", ",", "'linewidth'", ":", "1", "}", "\n", "viz", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "\n", "plt", ".", "plot", "(", "target", "[", "0", ",", ":", "]", ",", "'b'", ",", "label", "=", "'target_x'", ",", "**", "line_params", ")", "\n", "plt", ".", "plot", "(", "output", "[", "0", ",", ":", "]", ",", "'c'", ",", "label", "=", "'output_x'", ",", "**", "line_params", ")", "\n", "plt", ".", "plot", "(", "target", "[", "1", ",", ":", "]", ",", "'r'", ",", "label", "=", "'target_y'", ",", "**", "line_params", ")", "\n", "plt", ".", "plot", "(", "output", "[", "1", ",", ":", "]", ",", "'m'", ",", "label", "=", "'output_y'", ",", "**", "line_params", ")", "\n", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "savefig", ":", "\n", "        ", "plt", ".", "savefig", "(", "save_dir", ",", "quality", "=", "80", ")", "\n", "plt", ".", "close", "(", ")", "# is handled by tensorboard add_figure()?", "\n", "return", "None", "\n", "", "else", ":", "\n", "        ", "return", "viz", "\n", "\n", "\n", "", "", "def", "plot_hist", "(", "values", ",", "title", ")", ":", "\n", "    ", "viz", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "3", ")", ")", "\n", "sns", ".", "distplot", "(", "values", ")", "\n", "# plt.title(title)", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "# plt.close()", "\n", "return", "viz", "\n", "\n", "\n", "", "def", "plot_scatter", "(", "df", ",", "savefig", "=", "False", ")", ":", "\n", "    ", "dims", "=", "list", "(", "range", "(", "len", "(", "df", ".", "columns", ")", "-", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.visualize_pos_to_vel": [[67, 82], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.tight_layout", "pdb.set_trace", "numpy.abs", "numpy.diff"], "function", ["None"], ["if", "len", "(", "dims", ")", "==", "2", ":", "\n", "        ", "sns", ".", "scatterplot", "(", "*", "dims", ",", "data", "=", "df", ",", "hue", "=", "'label'", ")", "\n", "", "else", ":", "\n", "        ", "ax", "=", "viz", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "# get 6 most frequent labels", "\n", "# TO-DO: Allow more than 6 labels (need to adjust colors)", "\n", "labels", "=", "df", "[", "'label'", "]", ".", "value_counts", "(", ")", "[", ":", "6", "]", ".", "index", "\n", "for", "label", ",", "color", "in", "zip", "(", "labels", ",", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'y'", ",", "'m'", "]", ")", ":", "\n", "            ", "ax", ".", "scatter", "(", "*", "df", "[", "df", "[", "'label'", "]", "==", "label", "]", "[", "dims", "]", ".", "to_numpy", "(", ")", ".", "T", ",", "c", "=", "color", ",", "alpha", "=", "0.33", ")", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "if", "savefig", ":", "\n", "        ", "logging", ".", "info", "(", "'savefig not implemented! Need to pass on filename!'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# plt.savefig('./tmp/{}-{}-{}-perplexity{}-iter{}.jpg'.format(", "\n", "#     task, method, len(df), 50, 3000), quality=85)", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.visualize_signal": [[84, 89], ["matplotlib.figure", "matplotlib.plot", "matplotlib.plot"], "function", ["None"], ["", "else", ":", "\n", "        ", "return", "viz", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_hist": [[91, 98], ["matplotlib.figure", "seaborn.distplot", "matplotlib.tight_layout"], "function", ["None"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter": [[100, 132], ["list", "matplotlib.figure", "matplotlib.tick_params", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.tight_layout", "range", "len", "seaborn.scatterplot", "plt.figure.add_subplot", "zip", "matplotlib.savefig", "logging.info", "viz.add_subplot.scatter", "len", "df[].value_counts", "df.label.isin", "seaborn.color_palette", "df[].value_counts", "len", "len", "[].to_numpy"], "function", ["None"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_feature_importance": [[134, 220], ["df[].fillna.reset_index", "utils.plot_feature_importance.plot_counts"], "function", ["None"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.tsne_plot_fifa": [[224, 248], ["numpy.stack", "pandas.DataFrame", "utils.plot_scatter", "pdb.set_trace", "utils.plot_scatter", "utils.plot_scatter", "TSNE().fit_transform", "AgeGroupBinary().get_xy", "GenderBinary().get_xy", "TSNE", "AgeGroupBinary", "GenderBinary"], "function", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT_CVCL.get_xy", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT_CVCL.get_xy"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.tsne_plot_etra": [[250, 273], ["numpy.stack", "pandas.DataFrame", "utils.plot_scatter", "pdb.set_trace", "utils.plot_scatter", "utils.plot_scatter", "TSNE().fit_transform", "SearchTaskETRA().get_xy", "ETRAStimuli().get_xy", "TSNE", "SearchTaskETRA", "ETRAStimuli"], "function", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT_CVCL.get_xy", "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.classification_tasks.Biometrics_MIT_CVCL.get_xy"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.tsne_plot_corpus": [[275, 292], ["StandardScaler().fit_transform", "pandas.DataFrame", "list", "utils.plot_scatter", "matplotlib.savefig", "logging.info", "pdb.set_trace", "numpy.stack", "TSNE().fit_transform", "StandardScaler", "TSNE"], "function", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.evals.utils.plot_scatter"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.Encoder.__init__": [[6, 45], ["torch.nn.Module.__init__", "int", "enumerate", "torch.nn.Sequential", "int", "logging.info", "logging.info", "logging.info", "logging.info", "zip", "encoder.ResidualBlock", "encoder.Encoder.blocks.append"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "kernel_size", ",", "filters", ",", "dilations", ",", "downsamples", ",", "\n", "global_pool", "=", "True", ",", "in_channels", "=", "2", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multiscale", "=", "args", ".", "multiscale", "\n", "self", ".", "in_dim", "=", "int", "(", "args", ".", "hz", "*", "args", ".", "viewing_time", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "global_pool", "=", "global_pool", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "filters", "=", "filters", "\n", "self", ".", "dilations", "=", "dilations", "\n", "self", ".", "downsamples", "=", "downsamples", "\n", "# Do not downsample at the last layer!", "\n", "# self.downsamples[-1] = 0", "\n", "\n", "self", ".", "out_dim", "=", "self", ".", "filters", "[", "-", "1", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "block_num", ",", "(", "f", ",", "dil", ",", "down", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "filters", ",", "\n", "self", ".", "dilations", ",", "\n", "self", ".", "downsamples", ")", ")", ":", "\n", "            ", "residual_block", "=", "ResidualBlock", "(", "\n", "in_channels", "=", "(", "self", ".", "in_channels", "if", "block_num", "==", "0", "\n", "else", "self", ".", "filters", "[", "block_num", "-", "1", "]", ")", ",", "\n", "mid_channels", "=", "f", ",", "\n", "out_channels", "=", "f", ",", "\n", "dilations", "=", "dil", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "downsample", "=", "down", ",", "\n", "squeeze_and_excite", "=", "args", ".", "squeeze_and_excite", "\n", ")", "\n", "self", ".", "blocks", ".", "append", "(", "residual_block", ")", "\n", "\n", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "self", ".", "out_dim", "=", "int", "(", "self", ".", "out_dim", ")", "\n", "logging", ".", "info", "(", "'\\nEncoder initialized.'", ")", "\n", "logging", ".", "info", "(", "'Multiscale Rep.: {}'", ".", "format", "(", "self", ".", "multiscale", ")", ")", "\n", "logging", ".", "info", "(", "'Global Pool: {}'", ".", "format", "(", "self", ".", "global_pool", ")", ")", "\n", "logging", ".", "info", "(", "'Downsample amounts per block: {}\\n'", ".", "format", "(", "self", ".", "downsamples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.Encoder.forward": [[46, 57], ["enumerate", "encoder.Encoder.blocks", "encoder.Encoder._gap", "block", "block_features.append", "encoder.Encoder._gap"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.Encoder._gap", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.Encoder._gap"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "multiscale", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "return", "self", ".", "_gap", "(", "x", ")", "# Global Average Pooling", "\n", "\n", "", "block_features", "=", "[", "]", "\n", "for", "block_num", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "block_features", ".", "append", "(", "self", ".", "_gap", "(", "x", ")", ")", "\n", "", "return", "block_features", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.Encoder._gap": [[58, 60], ["x.mean"], "methods", ["None"], ["", "def", "_gap", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "mean", "(", "-", "1", ")", "if", "self", ".", "global_pool", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.ResidualBlock.__init__": [[63, 87], ["torch.nn.Module.__init__", "torch.nn.ReLU", "encoder.ResidualBlock._build_conv_layer", "torch.nn.BatchNorm1d", "encoder.ResidualBlock._build_conv_layer", "torch.nn.BatchNorm1d", "kwargs.get", "torch.nn.Conv1d", "torch.nn.MaxPool1d", "encoder.SqueezeAndExciteBlock"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.ResidualBlock._build_conv_layer", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.ResidualBlock._build_conv_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "mid_channels", ",", "out_channels", ",", "dilations", ",", "\n", "kernel_size", ",", "downsample", "=", "0", ",", "no_skip", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv1", "=", "self", ".", "_build_conv_layer", "(", "\n", "in_channels", ",", "mid_channels", ",", "dilations", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "conv2", "=", "self", ".", "_build_conv_layer", "(", "\n", "mid_channels", ",", "out_channels", ",", "dilations", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "out_channels", ")", "\n", "\n", "self", ".", "skip_conv", "=", "(", "nn", ".", "Conv1d", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "if", "not", "no_skip", "else", "None", ")", "\n", "\n", "if", "downsample", ">", "0", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "MaxPool1d", "(", "downsample", ",", "downsample", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "if", "kwargs", ".", "get", "(", "'squeeze_and_excite'", ")", ":", "\n", "            ", "self", ".", "se_block", "=", "SqueezeAndExciteBlock", "(", "mid_channels", ",", "r", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.ResidualBlock._build_conv_layer": [[88, 97], ["int", "torch.nn.Sequential", "torch.nn.Conv1d", "torch.nn.ConstantPad1d", "torch.nn.Conv1d"], "methods", ["None"], ["", "", "def", "_build_conv_layer", "(", "self", ",", "in_ch", ",", "out_ch", ",", "dilation", ")", ":", "\n", "        ", "if", "dilation", ">=", "1", ":", "\n", "            ", "padding", "=", "dilation", "*", "(", "self", ".", "kernel_size", "-", "1", ")", "\n", "pad_sides", "=", "int", "(", "padding", "/", "2", ")", "\n", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConstantPad1d", "(", "pad_sides", ",", "0", ")", ",", "\n", "nn", ".", "Conv1d", "(", "in_ch", ",", "out_ch", ",", "self", ".", "kernel_size", ",", "dilation", "=", "dilation", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "Conv1d", "(", "in_ch", ",", "out_ch", ",", "self", ".", "kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.ResidualBlock.forward": [[98, 115], ["encoder.ResidualBlock.bn1", "encoder.ResidualBlock.conv2", "encoder.ResidualBlock.bn2", "encoder.ResidualBlock.relu", "encoder.ResidualBlock.se_block", "encoder.ResidualBlock.relu", "encoder.ResidualBlock.downsample", "encoder.ResidualBlock.conv1", "encoder.ResidualBlock.skip_conv"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.downsample"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "try", ":", "\n", "            ", "out", "=", "self", ".", "se_block", "(", "out", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "self", ".", "skip_conv", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "self", ".", "skip_conv", "(", "x", ")", "\n", "", "out", "=", "self", ".", "bn2", "(", "self", ".", "relu", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "downsample", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.SqueezeAndExciteBlock.__init__": [[118, 127], ["torch.nn.Module.__init__", "int", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "r", ")", ":", "\n", "        ", "super", "(", "SqueezeAndExciteBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "squeeze_dim", "=", "int", "(", "in_dim", "/", "r", ")", "\n", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "squeeze_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "squeeze_dim", ",", "in_dim", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.encoder.SqueezeAndExciteBlock.forward": [[129, 131], ["torch.mul", "encoder.SqueezeAndExciteBlock.se().unsqueeze", "encoder.SqueezeAndExciteBlock.se", "x.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "mul", "(", "self", ".", "se", "(", "x", ".", "mean", "(", "-", "1", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.contrastive.ContrastiveEncoder.__init__": [[12, 36], ["torch.nn.Module.__init__", "network.encoder.Encoder", "int", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ContrastiveEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "representation_layer", "=", "args", ".", "representation_layer", "\n", "self", ".", "encoder", "=", "Encoder", "(", "args", ",", "*", "ENCODER_PARAMS", ")", "\n", "if", "self", ".", "encoder", ".", "multiscale", ":", "\n", "            ", "self", ".", "skip_1", "=", "nn", ".", "Linear", "(", "ENCODER_FILTERS", "[", "0", "]", ",", "ENCODER_FILTERS", "[", "-", "1", "]", ")", "\n", "self", ".", "skip_2", "=", "nn", ".", "Linear", "(", "ENCODER_FILTERS", "[", "1", "]", ",", "ENCODER_FILTERS", "[", "-", "1", "]", ")", "\n", "\n", "", "p_in_dim", "=", "self", ".", "encoder", ".", "out_dim", "\n", "p_mid_dim", "=", "int", "(", "self", ".", "encoder", ".", "out_dim", ")", "\n", "\n", "self", ".", "projection", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "p_in_dim", ",", "p_mid_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ",", "\n", "nn", ".", "Linear", "(", "p_mid_dim", ",", "LATENT_SIZE", ")", "\n", "]", ")", "\n", "\n", "# what will be used for downstream", "\n", "if", "self", ".", "representation_layer", "==", "0", ":", "\n", "            ", "self", ".", "latent_size", "=", "p_in_dim", "\n", "", "elif", "self", ".", "representation_layer", "==", "1", ":", "\n", "            ", "self", ".", "latent_size", "=", "p_mid_dim", "\n", "", "else", ":", "\n", "            ", "assert", "1", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.contrastive.ContrastiveEncoder.forward": [[37, 44], ["contrastive.ContrastiveEncoder.encode", "layer"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.network.contrastive.ContrastiveEncoder.encode"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ",", "True", ")", "\n", "\n", "for", "layer", "in", "self", ".", "projection", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.contrastive.ContrastiveEncoder.encode": [[45, 58], ["contrastive.ContrastiveEncoder.encoder", "enumerate", "layer", "contrastive.ContrastiveEncoder.skip_1", "contrastive.ContrastiveEncoder.skip_2"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ",", "is_training", "=", "False", ")", ":", "# returns representation", "\n", "        ", "z", "=", "self", ".", "encoder", "(", "x", ")", "\n", "\n", "if", "self", ".", "encoder", ".", "multiscale", ":", "\n", "            ", "z", "=", "self", ".", "skip_1", "(", "z", "[", "0", "]", ")", "+", "self", ".", "skip_2", "(", "z", "[", "1", "]", ")", "+", "z", "[", "2", "]", "\n", "\n", "", "if", "is_training", "or", "self", ".", "representation_layer", "==", "0", ":", "\n", "            ", "return", "z", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "projection", ")", ":", "\n", "                ", "z", "=", "layer", "(", "z", ")", "\n", "if", "(", "i", "+", "1", ")", "==", "self", ".", "representation_layer", ":", "\n", "                    ", "return", "[", "z", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager.__init__": [[9, 12], ["__init__.ModelManager.load_network"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager.load_network"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager.load_network": [[13, 32], ["contrastive.ContrastiveEncoder", "torch.optim.Adam", "__init__.ModelManager._log", "__init__.ModelManager._load_pretrained_model", "__init__.ModelManager._load_pretrained_model", "__init__.ModelManager._load_pretrained_model", "__init__.ModelManager.network.parameters", "__init__.ModelManager.eval", "__init__.ModelManager.eval"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager._log", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager._load_pretrained_model", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager._load_pretrained_model", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager._load_pretrained_model"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager._load_pretrained_model": [[33, 53], ["logging.info", "torch.load", "__init__.ModelManager._log", "network.load_state_dict", "torch.optim.Adam", "torch.optim.Adam.load_state_dict", "network.parameters"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load", "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager._log"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager._log": [[54, 59], ["logging.info", "logging.info", "str", "str", "sum", "p.numel", "network.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager.save": [[60, 71], ["torch.save", "logging.info", "str", "__init__.ModelManager.network.state_dict", "__init__.ModelManager.optim.state_dict"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.network.__init__.ModelManager.save"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.losses.NT_XentLoss.__init__": [[7, 12], ["super().__init__", "torch.nn.CosineSimilarity", "logging.info"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "NT_XentLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tau", "=", "args", ".", "tau", "\n", "self", ".", "similarity_fn", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ")", "\n", "logging", ".", "info", "(", "'NT-XEnt Loss initialized. Tau = {:.2f}'", ".", "format", "(", "self", ".", "tau", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.network.losses.NT_XentLoss.forward": [[13, 34], ["torch.nn.functional.normalize", "z.unsqueeze.unsqueeze.unsqueeze", "torch.exp", "[].repeat_interleave", "torch.exp.sum", "torch.exp.diag", "losses.NT_XentLoss.similarity_fn", "torch.exp.diag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        N: batch size\n        Z: projection dim\n        Input has shape (2N, Z)\n        \"\"\"", "\n", "# L2 normalization for each row", "\n", "z", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "z", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "# (2N, Z) to (2N, Z, 1)", "\n", "z", "=", "z", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# 2N x 2N matrix", "\n", "mat", "=", "torch", ".", "exp", "(", "self", ".", "similarity_fn", "(", "z", ",", "z", ".", "T", ")", "/", "self", ".", "tau", ")", "\n", "\n", "# take values 1 step above the diagonal,", "\n", "# but keep only alternating ones => these are for (i, j) pair", "\n", "# then repeat values for (j, i) pair (Cosine Similarity is symmetric)", "\n", "numerator", "=", "mat", ".", "diag", "(", "1", ")", "[", ":", ":", "2", "]", ".", "repeat_interleave", "(", "2", ")", "\n", "\n", "# sum value per row, but subtract value when i == j", "\n", "denominator", "=", "mat", ".", "sum", "(", "-", "1", ")", "-", "mat", ".", "diag", "(", ")", "\n", "return", "(", "-", "(", "numerator", "/", "denominator", ")", ".", "log", "(", ")", ")", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.MIT_LearningToPredict.__init__": [[28, 40], ["corpus.EyeTrackingCorpus.__init__"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "px_per_dva", "=", "41.889", "# reported in .mat files", "\n", "self", ".", "hz", "=", "240", "\n", "self", ".", "w", ",", "self", ".", "h", "=", "(", "1280", ",", "1024", ")", "\n", "# but image: long side of stimuli is 1024", "\n", "\n", "self", ".", "subjects", "=", "[", "'CNG'", ",", "'ajs'", ",", "'emb'", ",", "'ems'", ",", "'ff'", ",", "'hp'", ",", "'jcw'", ",", "\n", "'jw'", ",", "'kae'", ",", "'krl'", ",", "'po'", ",", "'tmj'", ",", "'tu'", ",", "'ya'", ",", "'zb'", "]", "\n", "self", ".", "root", "=", "'MIT-learningtopredict/'", "\n", "self", ".", "stim_dir", "=", "self", ".", "root", "+", "'ALLSTIMULI/'", "\n", "\n", "super", "(", "MIT_LearningToPredict", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.MIT_LearningToPredict.extract": [[41, 60], ["listdir", "itertools.product", "utils.load", "data.append", "list", "utils.load.keys", "img.replace", "[].item", "[].item", "[].item", "[].item"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "images", "=", "listdir", "(", "self", ".", "root", "+", "'ALLSTIMULI'", ")", "\n", "for", "(", "subj", ",", "img", ")", "in", "product", "(", "self", ".", "subjects", ",", "images", ")", ":", "\n", "            ", "mat", "=", "load", "(", "\n", "self", ".", "root", "+", "'DATA/{}/{}'", ".", "format", "(", "\n", "subj", ",", "img", ".", "replace", "(", "'.jpeg'", ",", "''", ")", ")", ",", "\n", "'matlab'", ")", "\n", "\n", "key", "=", "list", "(", "mat", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "\n", "data", ".", "append", "(", "[", "subj", ",", "\n", "img", ",", "\n", "'free-viewing'", ",", "\n", "# cut the data until 720 frames only", "\n", "# by observation, samples after 720th frame", "\n", "# are outliers", "\n", "mat", "[", "key", "]", "[", "'DATA'", "]", ".", "item", "(", ")", "[", "'eyeData'", "]", ".", "item", "(", ")", ".", "T", "[", "0", "]", "[", ":", "720", "]", ",", "\n", "mat", "[", "key", "]", "[", "'DATA'", "]", ".", "item", "(", ")", "[", "'eyeData'", "]", ".", "item", "(", ")", ".", "T", "[", "1", "]", "[", ":", "720", "]", "]", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.MIT_LowRes.__init__": [[77, 85], ["corpora.MIT_LowRes.root.replace", "corpus.EyeTrackingCorpus.__init__"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "px_per_dva", "=", "35", "# stated in paper", "\n", "self", ".", "hz", "=", "240", "\n", "self", ".", "w", ",", "self", ".", "h", "=", "(", "1280", ",", "1024", ")", "# stimuli is 860 x 1024", "\n", "self", ".", "root", "=", "'MIT-LOWRES/DATA/'", "\n", "self", ".", "stim_dir", "=", "self", ".", "root", ".", "replace", "(", "'DATA'", ",", "'ALLSTIMULI'", ")", "\n", "\n", "super", "(", "MIT_LowRes", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.MIT_LowRes.extract": [[86, 105], ["listdir", "listdir", "stim.startswith", "utils.load", "data.append", "list", "utils.load.keys", "stim.replace", "[].item", "[].item", "[].item", "[].item"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "for", "subj", "in", "listdir", "(", "self", ".", "root", ")", ":", "\n", "            ", "subj_dir", "=", "self", ".", "root", "+", "'/'", "+", "subj", "\n", "for", "stim", "in", "listdir", "(", "subj_dir", ")", ":", "\n", "# ignore non-natural and low resolution images...", "\n", "# or should i not?", "\n", "# if 'colornoise' in stim or '512.mat' not in stim:", "\n", "#     continue", "\n", "                ", "if", "stim", ".", "startswith", "(", "'.'", ")", ":", "\n", "                    ", "continue", "\n", "", "mat", "=", "load", "(", "subj_dir", "+", "'/'", "+", "stim", ",", "'matlab'", ")", "\n", "key", "=", "list", "(", "mat", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "\n", "data", ".", "append", "(", "[", "subj", ",", "\n", "stim", ".", "replace", "(", "'.mat'", ",", "'.jpeg'", ")", ",", "\n", "'free-viewing'", ",", "# double check", "\n", "mat", "[", "key", "]", "[", "'DATA'", "]", ".", "item", "(", ")", "[", "'eyeData'", "]", ".", "item", "(", ")", ".", "T", "[", "0", "]", "[", ":", "720", "]", ",", "\n", "mat", "[", "key", "]", "[", "'DATA'", "]", ".", "item", "(", ")", "[", "'eyeData'", "]", ".", "item", "(", ")", ".", "T", "[", "1", "]", "[", ":", "720", "]", "]", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.MIT_CVCL.__init__": [[132, 140], ["corpus.EyeTrackingCorpus.__init__"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "px_per_dva", "=", "35", "\n", "self", ".", "w", ",", "self", ".", "h", "=", "(", "1024", ",", "768", ")", "# image is 800x600", "\n", "self", ".", "hz", "=", "240", "\n", "self", ".", "root", "=", "'MIT-CVCL/Dataset_EyeData/eyeData/'", "\n", "self", ".", "stim_dir", "=", "'MIT-CVCL/Dataset_STIMULI/'", "\n", "\n", "super", "(", "MIT_CVCL", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.MIT_CVCL.extract": [[141, 161], ["listdir", "numpy.array", "utils.load", "zip", "list", "[].item", "[].item", "data.append", "utils.load.keys", "stim.replace", "list", "list"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "for", "stim", "in", "listdir", "(", "self", ".", "root", ")", ":", "\n", "            ", "mat", "=", "load", "(", "self", ".", "root", "+", "stim", ",", "'matlab'", ")", "\n", "key", "=", "list", "(", "mat", ".", "keys", "(", ")", ")", "[", "-", "1", "]", "\n", "subjects", "=", "mat", "[", "key", "]", "[", "'subdata'", "]", ".", "item", "(", ")", "[", "'subName'", "]", "\n", "eyedata", "=", "mat", "[", "key", "]", "[", "'subdata'", "]", ".", "item", "(", ")", "[", "'eyedata'", "]", "\n", "\n", "# eyedata has three columns, maybe third column is a validity code", "\n", "# (values 0, 1, 2, 3). Can't find what this 3rd column means.", "\n", "for", "subj", ",", "subj_eyedata", "in", "zip", "(", "subjects", ",", "eyedata", ")", ":", "\n", "                ", "data", ".", "append", "(", "[", "\n", "subj", ",", "\n", "stim", ".", "replace", "(", "'.mat'", ",", "'.jpg'", ")", ",", "\n", "'search'", ",", "\n", "list", "(", "subj_eyedata", "[", ":", ",", "0", "]", ")", ",", "\n", "list", "(", "subj_eyedata", "[", ":", ",", "1", "]", ")", ",", "\n", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.DOVES.__init__": [[171, 176], ["corpus.EyeTrackingCorpus.__init__"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "w", ",", "self", ".", "h", "=", "(", "1024", ",", "768", ")", "\n", "\n", "self", ".", "root", "=", "'DOVES/RawData/'", "\n", "super", "(", "DOVES", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.DOVES.extract": [[177, 203], ["listdir", "numpy.array", "trial.split.split.split", "numpy.array", "re.findall", "len", "logging.info", "list", "open", "f.read", "data.append", "map", "corpora.DOVES.extract.extract_trial"], "methods", ["None"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "def", "extract_trial", "(", "trial", ")", ":", "\n", "            ", "trial", "=", "trial", ".", "split", "(", "'\\n'", ")", "\n", "\n", "stimuli", "=", "trial", "[", "0", "]", "\n", "num_samples", "=", "trial", "[", "1", "]", "\n", "\n", "# should contain rows which have 3 space-separated values:", "\n", "# (x, y, ?)", "\n", "samples", "=", "trial", "[", "2", ":", "-", "1", "]", "\n", "\n", "if", "num_samples", "!=", "len", "(", "samples", ")", ":", "\n", "                ", "logging", ".", "info", "(", "'Number of samples extracted does not match stated number!'", ")", "\n", "\n", "", "coords", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "split", "(", ")", "[", ":", "2", "]", ",", "samples", ")", ")", ")", "\n", "return", "stimuli", ",", "'free-viewing'", ",", "coords", "[", ":", ",", "0", "]", ",", "coords", "[", ":", ",", "1", "]", "\n", "\n", "", "data", "=", "[", "]", "\n", "for", "subj", "in", "listdir", "(", "self", ".", "root", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "root", "+", "subj", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "text", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "for", "trial", "in", "findall", "(", "r'imk\\d+\\.iml[\\n-.\\d]+\\['", ",", "text", ")", ":", "\n", "                ", "data", ".", "append", "(", "[", "subj", ",", "*", "extract_trial", "(", "trial", ")", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.ETRA2019.__init__": [[215, 230], ["corpus.EyeTrackingCorpus.__init__"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "w", ",", "self", ".", "h", "=", "(", "1024", ",", "768", ")", "\n", "self", ".", "hz", "=", "500", "\n", "self", ".", "px_per_dva", "=", "35", "\n", "self", ".", "root", "=", "'ETRA2019/data/{}'", "\n", "self", ".", "stim_dir", "=", "'ETRA2019/images/'", "\n", "self", ".", "subjects", "=", "[", "'009'", ",", "'019'", ",", "'022'", ",", "'058'", ",", "'059'", ",", "\n", "'060'", ",", "'062'", ",", "'SMC'", "]", "\n", "\n", "# the grey stimuli is not included in the data set, here's code to", "\n", "# generate a grey image. copy paste grey.bmp to a new 'BLANK' folder.", "\n", "# from PIL import Image", "\n", "# Image.new('RGB', (921, 630), color=(127, 127, 127)).save('grey.bmp', quality=100)", "\n", "\n", "super", "(", "ETRA2019", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.ETRA2019.extract": [[231, 259], ["numpy.array", "corpora.ETRA2019.root.format", "utils.listdir_", "stim.split", "stim_type.upper", "utils.load", "data.append", "stim_file.replace"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.listdir_", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "\n", "for", "subj", "in", "self", ".", "subjects", ":", "\n", "            ", "subj_dir", "=", "self", ".", "root", ".", "format", "(", "subj", ")", "\n", "for", "stim", "in", "listdir_", "(", "subj_dir", ")", ":", "\n", "                ", "_", ",", "_", ",", "condition", ",", "stim_type", ",", "stim_file", "=", "stim", ".", "split", "(", "'_'", ")", "\n", "if", "condition", "==", "'Fixation'", ":", "\n", "                    ", "continue", "\n", "\n", "", "stim_folder", "=", "stim_type", ".", "upper", "(", ")", "\n", "if", "stim_type", "in", "[", "'Blank'", ",", "'Natural'", "]", ":", "\n", "                    ", "task", "=", "stim_type", "+", "'_free-viewing'", "\n", "", "else", ":", "# Waldo, Puzzle", "\n", "                    ", "task", "=", "stim_type", "+", "'_search'", "\n", "# task = ('free-viewing' if stim_type in ['Blank', 'Natural']", "\n", "#         else 'search')", "\n", "\n", "", "csv", "=", "load", "(", "subj_dir", "+", "'/'", "+", "stim", ",", "'csv'", ",", "delimiter", "=", "','", ")", "\n", "\n", "data", ".", "append", "(", "[", "\n", "subj", ",", "\n", "'/'", ".", "join", "(", "[", "stim_folder", ",", "stim_file", ".", "replace", "(", "'csv'", ",", "'bmp'", ")", "]", ")", ",", "\n", "task", ",", "\n", "(", "(", "csv", "[", "'LXpix'", "]", "+", "csv", "[", "'RXpix'", "]", ")", "/", "2", ")", ".", "to_list", "(", ")", ",", "\n", "(", "(", "csv", "[", "'LYpix'", "]", "+", "csv", "[", "'RYpix'", "]", ")", "/", "2", ")", ".", "to_list", "(", ")", "\n", "]", ")", "\n", "", "", "return", "np", ".", "array", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.ETRA2019_Fixation.extract": [[262, 290], ["numpy.array", "corpora.ETRA2019_Fixation.root.format", "utils.listdir_", "stim.split", "stim_type.upper", "utils.load", "data.append", "stim_file.replace"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.listdir_", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load"], ["    ", "def", "extract", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "\n", "for", "subj", "in", "self", ".", "subjects", ":", "\n", "            ", "subj_dir", "=", "self", ".", "root", ".", "format", "(", "subj", ")", "\n", "for", "stim", "in", "listdir_", "(", "subj_dir", ")", ":", "\n", "                ", "_", ",", "_", ",", "condition", ",", "stim_type", ",", "stim_file", "=", "stim", ".", "split", "(", "'_'", ")", "\n", "if", "condition", "!=", "'Fixation'", ":", "\n", "                    ", "continue", "\n", "\n", "", "stim_folder", "=", "stim_type", ".", "upper", "(", ")", "\n", "if", "stim_type", "in", "[", "'Blank'", ",", "'Natural'", "]", ":", "\n", "                    ", "task", "=", "stim_type", "+", "'_free-viewing'", "\n", "", "else", ":", "# Waldo, Puzzle", "\n", "                    ", "task", "=", "stim_type", "+", "'_search'", "\n", "# task = ('free-viewing' if stim_type in ['Blank', 'Natural']", "\n", "#         else 'search')", "\n", "\n", "", "csv", "=", "load", "(", "subj_dir", "+", "'/'", "+", "stim", ",", "'csv'", ",", "delimiter", "=", "','", ")", "\n", "\n", "data", ".", "append", "(", "[", "\n", "subj", ",", "\n", "'/'", ".", "join", "(", "[", "stim_folder", ",", "stim_file", ".", "replace", "(", "'csv'", ",", "'bmp'", ")", "]", ")", ",", "\n", "task", ",", "\n", "(", "(", "csv", "[", "'LXpix'", "]", "+", "csv", "[", "'RXpix'", "]", ")", "/", "2", ")", ".", "to_list", "(", ")", ",", "\n", "(", "(", "csv", "[", "'LYpix'", "]", "+", "csv", "[", "'RYpix'", "]", ")", "/", "2", ")", ".", "to_list", "(", ")", "\n", "]", ")", "\n", "", "", "return", "np", ".", "array", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.EMVIC2014.__init__": [[323, 331], ["corpus.EyeTrackingCorpus.__init__"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "w", ",", "self", ".", "h", "=", "(", "None", ",", "None", ")", "\n", "self", ".", "hz", "=", "1000", "\n", "# self.root = 'EMVIC2014/Data-Suppl-material/'  # <-- for files given by LPiTrack", "\n", "self", ".", "root", "=", "'EMVIC2014/official_files/'", "\n", "self", ".", "stim_dir", "=", "None", "\n", "\n", "super", "(", "EMVIC2014", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.EMVIC2014.extract": [[332, 355], ["numpy.array", "enumerate", "open", "list", "list", "data.append", "t.split", "len", "map", "map", "f.read().split", "numpy.min", "numpy.min", "f.read"], "methods", ["None"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "for", "split", "in", "[", "'train'", ",", "'testSolved'", "]", ":", "\n", "            ", "with", "open", "(", "self", ".", "root", "+", "split", "+", "'.csv'", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "trials", "=", "[", "t", ".", "split", "(", "','", ")", "for", "t", "in", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "]", "\n", "\n", "", "for", "i", ",", "trial", "in", "enumerate", "(", "trials", ")", ":", "\n", "                ", "if", "len", "(", "trial", ")", "==", "1", ":", "\n", "                    ", "continue", "\n", "\n", "", "x", "=", "list", "(", "map", "(", "float", ",", "trial", "[", "2", ":", ":", "2", "]", ")", ")", "\n", "y", "=", "list", "(", "map", "(", "float", ",", "trial", "[", "3", ":", ":", "2", "]", ")", ")", "\n", "data", ".", "append", "(", "[", "\n", "# trial[0] if split == 'train' else 'test-subj-' + str(i),", "\n", "trial", "[", "0", "]", "if", "split", "==", "'train'", "else", "'test-'", "+", "trial", "[", "0", "]", ",", "\n", "''", ",", "\n", "'face'", ",", "\n", "# normalize so that (0, 0) is upper left of screen", "\n", "x", "-", "np", ".", "min", "(", "x", ")", ",", "\n", "y", "-", "np", ".", "min", "(", "y", ")", "\n", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.Cerf2007_FIFA.__init__": [[393, 408], ["corpus.EyeTrackingCorpus.__init__"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "w", ",", "self", ".", "h", "=", "(", "1024", ",", "768", ")", "\n", "\n", "self", ".", "root", "=", "'Cerf2007-FIFA/subjects/'", "\n", "self", ".", "stim_dir", "=", "'Cerf2007-FIFA/stimuli/faces-jpg/'", "\n", "self", ".", "hz", "=", "1000", "\n", "self", ".", "px_per_dva", "=", "36.57", "# approximated based on ratio with others' px_per_dva  ", "\n", "\n", "# Got this list from the accompanying general.mat", "\n", "self", ".", "stimuli", "=", "[", "\n", "[", "'0001'", ",", "'0002'", ",", "'0003'", ",", "'0004'", ",", "'0005'", ",", "'0006'", ",", "'0007'", ",", "'0008'", ",", "'0009'", ",", "'0010'", ",", "'0011'", ",", "'0022'", ",", "'0023'", ",", "'0024'", ",", "'0025'", ",", "'0026'", ",", "'0028'", ",", "'0030'", ",", "'0034'", ",", "'0035'", ",", "'0036'", ",", "'0038'", ",", "'0039'", ",", "'0040'", ",", "'0041'", ",", "'0042'", ",", "'0043'", ",", "'0044'", ",", "'0045'", ",", "'0046'", ",", "'0047'", ",", "'0053'", ",", "'0055'", ",", "'0060'", ",", "'0061'", ",", "'0062'", ",", "'0063'", ",", "'0065'", ",", "'0069'", ",", "'0070'", ",", "'0071'", ",", "'0074'", ",", "'0075'", ",", "'0076'", ",", "'0082'", ",", "'0083'", ",", "'0085'", ",", "'0091'", ",", "'0092'", ",", "'0106'", ",", "'0113'", ",", "'0115'", ",", "'0116'", ",", "'0117'", ",", "'0118'", ",", "'0119'", ",", "'0120'", ",", "'0122'", ",", "'0123'", ",", "'0124'", ",", "'0125'", ",", "'0126'", ",", "'0127'", ",", "'0131'", ",", "'0132'", ",", "'0133'", ",", "'0134'", ",", "'0135'", ",", "'0136'", ",", "'0138'", ",", "'0139'", ",", "'0140'", ",", "'0141'", ",", "'0142'", ",", "'0143'", ",", "'0144'", ",", "'0145'", ",", "'0146'", ",", "'0147'", ",", "'0148'", ",", "'0149'", ",", "'0150'", ",", "'0151'", ",", "'0152'", ",", "'0153'", ",", "'0154'", ",", "'0155'", ",", "'0158'", ",", "'0159'", ",", "'0160'", ",", "'0161'", ",", "'0162'", ",", "'0163'", ",", "'0164'", ",", "'0165'", ",", "'0166'", ",", "'0167'", ",", "'0168'", ",", "'0169'", ",", "'0170'", ",", "'0171'", ",", "'0172'", ",", "'0173'", ",", "'0174'", ",", "'0175'", ",", "'0176'", ",", "'0177'", ",", "'0178'", ",", "'0179'", ",", "'0180'", ",", "'0181'", ",", "'0182'", ",", "'0183'", ",", "'0184'", ",", "'0185'", ",", "'0186'", ",", "'0187'", ",", "'0188'", ",", "'0189'", ",", "'0190'", ",", "'0191'", ",", "'0192'", ",", "'0193'", ",", "'0194'", ",", "'0195'", ",", "'0196'", ",", "'0197'", ",", "'0198'", ",", "'0199'", ",", "'0200'", ",", "'0201'", ",", "'0202'", ",", "'0203'", ",", "'0204'", ",", "'0205'", ",", "'0206'", ",", "'0207'", ",", "'0208'", ",", "'0209'", ",", "'0210'", ",", "'0211'", ",", "'0212'", ",", "'0213'", ",", "'0214'", ",", "'0215'", ",", "'0216'", ",", "'0217'", ",", "'0218'", ",", "'0219'", ",", "'0220'", ",", "'0221'", ",", "'0222'", ",", "'0223'", ",", "'0224'", ",", "'0225'", ",", "'0226'", ",", "'0227'", ",", "'0228'", ",", "'0229'", ",", "'0230'", ",", "'0231'", ",", "'0232'", ",", "'0233'", ",", "'0234'", ",", "'0235'", ",", "'0236'", ",", "'0237'", ",", "'0238'", ",", "'0239'", ",", "'0240'", ",", "'0241'", ",", "'0242'", ",", "'0243'", ",", "'0244'", ",", "'0245'", ",", "'0246'", ",", "'0247'", ",", "'0248'", ",", "'0249'", ",", "'0250'", ",", "'0251'", ",", "'0252'", ",", "'0253'", ",", "'0254'", ",", "'0255'", ",", "'0256'", ",", "'0257'", ",", "'0258'", ",", "'0259'", ",", "'0260'", ",", "'0261'", ",", "'0262'", ",", "'0263'", ",", "'0264'", ",", "'0265'", ",", "'0266'", ",", "'0267'", ",", "'0268'", ",", "'0269'", ",", "'0270'", "]", ",", "\n", "[", "'0134'", ",", "'0135'", ",", "'0154'", ",", "'0147'", ",", "'0126'", ",", "'0143'", ",", "'0144'", ",", "'0123'", ",", "'0150'", ",", "'0142'", ",", "'0152'", ",", "'0124'", ",", "'0145'", ",", "'0053'", ",", "'0106'", ",", "'0125'", ",", "'0148'", ",", "'0136'", ",", "'0149'", ",", "'0139'", ",", "'0132'", ",", "'0155'", ",", "'0140'", ",", "'0146'", ",", "'0138'", ",", "'0141'", ",", "'0131'", ",", "'0122'", ",", "'0127'", ",", "'0133'", ",", "'0033'", ",", "'0052'", ",", "'0107'", ",", "'0031'", ",", "'0066'", ",", "'0019'", ",", "'0097'", ",", "'0099'", ",", "'0102'", ",", "'0048'", ",", "'0072'", ",", "'0112'", ",", "'0018'", ",", "'0020'", ",", "'0050'", ",", "'0089'", ",", "'0093'", ",", "'0014'", ",", "'0016'", ",", "'0077'", ",", "'0084'", ",", "'0087'", ",", "'0095'", ",", "'0104'", ",", "'0110'", ",", "'0029'", ",", "'0098'", ",", "'0027'", ",", "'0086'", ",", "'0101'", ",", "'0094'", ",", "'0111'", ",", "'0137'", ",", "'0032'", ",", "'0051'", ",", "'0054'", ",", "'0064'", ",", "'0096'", ",", "'0073'", ",", "'0081'", ",", "'0156'", ",", "'0049'", ",", "'0090'", ",", "'0103'", ",", "'0105'", ",", "'0017'", ",", "'0037'", ",", "'0068'", ",", "'0109'", ",", "'0157'", ",", "'0007'", ",", "'0022'", ",", "'0042'", ",", "'0044'", ",", "'0063'", ",", "'0069'", ",", "'0038'", ",", "'0045'", ",", "'0071'", ",", "'0118'", ",", "'0119'", ",", "'0120'", ",", "'0002'", ",", "'0003'", ",", "'0006'", ",", "'0025'", ",", "'0113'", ",", "'0115'", ",", "'0034'", ",", "'0074'", ",", "'0075'", ",", "'0082'", ",", "'0083'", ",", "'0151'", ",", "'0009'", ",", "'0023'", ",", "'0024'", ",", "'0092'", ",", "'0116'", ",", "'0153'", ",", "'0001'", ",", "'0026'", ",", "'0040'", ",", "'0047'", ",", "'0076'", ",", "'0195'", ",", "'0011'", ",", "'0046'", ",", "'0055'", ",", "'0062'", ",", "'0197'", ",", "'0232'", ",", "'0004'", ",", "'0005'", ",", "'0008'", ",", "'0035'", ",", "'0041'", ",", "'0065'", ",", "'0028'", ",", "'0030'", ",", "'0036'", ",", "'0060'", ",", "'0061'", ",", "'0117'", ",", "'0010'", ",", "'0039'", ",", "'0043'", ",", "'0070'", ",", "'0085'", ",", "'0091'", ",", "'0004'", ",", "'0025'", ",", "'0091'", ",", "'0008'", ",", "'0035'", ",", "'0082'", ",", "'0023'", ",", "'0115'", ",", "'0119'", ",", "'0120'", ",", "'0151'", ",", "'0153'", ",", "'0030'", ",", "'0044'", ",", "'0045'", ",", "'0047'", ",", "'0076'", ",", "'0092'", ",", "'0026'", ",", "'0034'", ",", "'0040'", ",", "'0069'", ",", "'0070'", ",", "'0085'", ",", "'0001'", ",", "'0002'", ",", "'0003'", ",", "'0010'", ",", "'0011'", ",", "'0116'", ",", "'0195'", ",", "'0197'", ",", "'0232'", ",", "'0006'", ",", "'0041'", ",", "'0043'", ",", "'0007'", ",", "'0009'", ",", "'0022'", ",", "'0024'", ",", "'0028'", ",", "'0063'", ",", "'0005'", ",", "'0039'", ",", "'0055'", ",", "'0060'", ",", "'0071'", ",", "'0083'", ",", "'0036'", ",", "'0046'", ",", "'0061'", ",", "'0062'", ",", "'0065'", ",", "'0113'", ",", "'0038'", ",", "'0042'", ",", "'0074'", ",", "'0075'", ",", "'0117'", ",", "'0118'", "]", ",", "\n", "]", "\n", "\n", "super", "(", "Cerf2007_FIFA", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpora.Cerf2007_FIFA.extract": [[409, 446], ["listdir", "numpy.array", "subj.startswith", "utils.load", "enumerate", "experiment[].item", "enumerate", "data.append", "list", "list", "eye_data[].item", "eye_data[].item"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "_tmp", "=", "{", "}", "\n", "# Paper states 7 subjects, but has data for 8", "\n", "# (general.mat lists 34 subjects though...)", "\n", "for", "subj", "in", "listdir", "(", "self", ".", "root", ")", ":", "\n", "            ", "if", "subj", ".", "startswith", "(", "'_'", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "mat", "=", "load", "(", "self", ".", "root", "+", "subj", ",", "'matlab'", ")", "\n", "\n", "subj", "=", "mat", "[", "'name'", "]", "\n", "# 4 experiments in file, but only 3 has gaze data.", "\n", "# the third is supposedly the memory task, but it contains data", "\n", "# for 200 images, so idk what it's for.", "\n", "# decision: use the first 2 phases only.", "\n", "for", "phase", ",", "experiment", "in", "enumerate", "(", "mat", "[", "'experiments'", "]", "[", ":", "2", "]", ")", ":", "\n", "# not the filenames but really just the order of the index", "\n", "# stimuli_order = experiment['order'].item()", "\n", "                ", "stimuli_data", "=", "experiment", "[", "'scan'", "]", ".", "item", "(", ")", "\n", "\n", "task", "=", "(", "'free-viewing'", "if", "phase", "==", "0", "\n", "else", "(", "'search'", "if", "phase", "==", "1", "\n", "else", "'memory'", ")", ")", "\n", "\n", "# _tmp[subj + str(phase)] = stimuli_order", "\n", "\n", "for", "n", ",", "eye_data", "in", "enumerate", "(", "stimuli_data", ")", ":", "\n", "                    ", "data", ".", "append", "(", "[", "\n", "subj", ",", "\n", "self", ".", "stimuli", "[", "phase", "]", "[", "n", "]", "+", "'.jpg'", ",", "\n", "task", ",", "\n", "list", "(", "eye_data", "[", "'scan_x'", "]", ".", "item", "(", ")", ")", ",", "\n", "list", "(", "eye_data", "[", "'scan_y'", "]", ".", "item", "(", ")", ")", ",", "\n", "]", ")", "\n", "# TO-DO: for the 2nd phase, need to filter out probe image data", "\n", "", "", "", "return", "np", ".", "array", "(", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset.__init__": [[28, 85], ["data.SignalDataset.__reformat_val_set", "int", "data.SignalDataset.corpora.items", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "data.transformer.DataTransformer", "corpus.load_data", "data.SignalDataset._train_test_split", "data.SignalDataset.train_set.extend", "data.SignalDataset.val_set.extend", "len", "data.SignalDataset_Val", "data.SignalDataset._get_signal", "corpus.data.drop", "len", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset.__reformat_val_set", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.load_data", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset._train_test_split", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset._get_signal"], ["def", "__init__", "(", "self", ",", "corpora", ",", "args", ",", "caller", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "signal_type", "=", "args", ".", "signal_type", "\n", "assert", "self", ".", "signal_type", "in", "[", "'vel'", ",", "'pos'", "]", "\n", "self", ".", "input_column", "=", "'in_{}'", ".", "format", "(", "self", ".", "signal_type", ")", "\n", "\n", "self", ".", "val_set_size", "=", "self", ".", "__reformat_val_set", "(", "args", ".", "val_set_size", ")", "\n", "self", ".", "stratify", "=", "args", ".", "stratify", "\n", "if", "caller", "==", "'trainer'", ":", "\n", "            ", "assert", "args", ".", "viewing_time", ">", "0", "\n", "self", ".", "mode", "=", "'unsupervised_contrastive'", "\n", "self", ".", "transformer", "=", "DataTransformer", "(", "args", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "mode", "=", "'evaluation'", "\n", "self", ".", "transformer", "=", "None", "\n", "\n", "# self.normalize = args.rec_loss == 'bce' or args.signal_type == 'pos'", "\n", "", "self", ".", "normalize", "=", "False", "\n", "self", ".", "corpora", "=", "corpora", "\n", "\n", "assert", "args", ".", "hz", ">", "0", "\n", "self", ".", "hz", "=", "args", ".", "hz", "\n", "self", ".", "viewing_time", "=", "args", ".", "viewing_time", "\n", "self", ".", "num_gaze_points", "=", "int", "(", "self", ".", "hz", "*", "self", ".", "viewing_time", ")", "\n", "self", ".", "train_set", ",", "self", ".", "val_set", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "corpus_name", ",", "corpus", "in", "self", ".", "corpora", ".", "items", "(", ")", ":", "\n", "            ", "corpus", ".", "load_data", "(", ")", "\n", "corpus_samples", "=", "[", "'{}|{}'", ".", "format", "(", "corpus_name", ",", "i", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "corpus", ".", "data", ")", ")", "]", "\n", "\n", "# if kwargs.get('load_to_memory'):", "\n", "if", "True", ":", "\n", "                ", "signal", "=", "self", ".", "_get_signal", "(", "corpus", ".", "data", ")", "\n", "corpus", ".", "data", "[", "self", ".", "input_column", "]", "=", "signal", "\n", "corpus", ".", "data", ".", "drop", "(", "[", "'x'", ",", "'y'", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "", "train", ",", "val", "=", "self", ".", "_train_test_split", "(", "corpus_samples", ",", "corpus", ")", "\n", "self", ".", "train_set", ".", "extend", "(", "train", ")", "\n", "self", ".", "val_set", ".", "extend", "(", "val", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "val_set", ")", ">", "0", ":", "\n", "            ", "self", ".", "val_set", "=", "SignalDataset_Val", "(", "self", ".", "val_set", ",", "\n", "self", ".", "corpora", ",", "\n", "self", ".", "normalize", ",", "\n", "self", ".", "signal_type", ",", "\n", "self", ".", "input_column", ",", "\n", "self", ".", "mode", ",", "\n", "self", ".", "transformer", ")", "\n", "\n", "", "logging", ".", "info", "(", "'\\nDataset class initialized from {}.'", ".", "format", "(", "caller", ")", ")", "\n", "logging", ".", "info", "(", "'Hz: {}. View Time (s): {}'", ".", "format", "(", "\n", "args", ".", "hz", ",", "self", ".", "viewing_time", ")", ")", "\n", "logging", ".", "info", "(", "'Signal type: {}'", ".", "format", "(", "self", ".", "signal_type", ")", ")", "\n", "logging", ".", "info", "(", "'Normalize: {}'", ".", "format", "(", "self", ".", "normalize", ")", ")", "\n", "logging", ".", "info", "(", "'Training samples: {}'", ".", "format", "(", "len", "(", "self", ".", "train_set", ")", ")", ")", "\n", "logging", ".", "info", "(", "'Validation samples: {}'", ".", "format", "(", "len", "(", "self", ".", "val_set", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset._get_signal": [[86, 101], ["df.apply.apply", "df[].apply", "df.apply", "data.utils.pad", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pad"], ["", "def", "_get_signal", "(", "self", ",", "df", ")", ":", "\n", "        ", "if", "self", ".", "signal_type", "==", "'vel'", ":", "\n", "            ", "signal", "=", "df", "[", "'v'", "]", "\n", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "normalize", ":", "\n", "                ", "signal", "=", "df", "[", "[", "'x'", ",", "'y'", "]", "]", ".", "apply", "(", "self", ".", "normalize_sample", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "signal", "=", "df", ".", "apply", "(", "lambda", "r", ":", "np", ".", "stack", "(", "r", "[", "[", "'x'", ",", "'y'", "]", "]", ")", ".", "T", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "num_gaze_points", ">", "0", "and", "self", ".", "mode", "!=", "'unsupervised_contrastive'", ":", "\n", "            ", "signal", "=", "signal", ".", "apply", "(", "lambda", "x", ":", "pad", "(", "self", ".", "num_gaze_points", ",", "x", ")", ")", "\n", "\n", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset._train_test_split": [[102, 127], ["isinstance", "corpus.data.subj.apply", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "corpus.name.lower", "corpus.data[].to_numpy", "x.split"], "methods", ["None"], ["", "def", "_train_test_split", "(", "self", ",", "corpus_samples", ",", "corpus", ")", ":", "\n", "# to add support for specifying which WHOLE data sets will be", "\n", "# used as validation set", "\n", "        ", "if", "isinstance", "(", "self", ".", "val_set_size", ",", "list", ")", ":", "\n", "            ", "if", "corpus", ".", "name", ".", "lower", "(", ")", "in", "self", ".", "val_set_size", ":", "\n", "                ", "return", "[", "]", ",", "corpus_samples", "\n", "", "else", ":", "\n", "                ", "return", "corpus_samples", ",", "[", "]", "\n", "\n", "", "", "if", "self", ".", "val_set_size", "==", "0", ":", "\n", "            ", "return", "corpus_samples", ",", "[", "]", "\n", "\n", "", "if", "self", ".", "stratify", ":", "\n", "            ", "corpus", ".", "data", "[", "'subj_'", "]", "=", "corpus", ".", "data", ".", "subj", ".", "apply", "(", "\n", "lambda", "x", ":", "x", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", "\n", "return", "train_test_split", "(", "\n", "corpus_samples", ",", "\n", "test_size", "=", "self", ".", "val_set_size", ",", "\n", "random_state", "=", "RAND_SEED", ",", "\n", "stratify", "=", "corpus", ".", "data", "[", "'subj_'", "]", ".", "to_numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "train_test_split", "(", "\n", "corpus_samples", ",", "\n", "test_size", "=", "self", ".", "val_set_size", ",", "\n", "random_state", "=", "RAND_SEED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset.__reformat_val_set": [[128, 134], ["float", "args_val_set.replace.replace.replace", "args_val_set.replace.replace.lower().split", "args_val_set.replace.replace.lower"], "methods", ["None"], ["", "", "def", "__reformat_val_set", "(", "self", ",", "args_val_set", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "float", "(", "args_val_set", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "args_val_set", "=", "args_val_set", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "return", "args_val_set", ".", "lower", "(", ")", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset.__getitem__": [[135, 150], ["data.SignalDataset.train_set[].split", "type", "torch.stack", "data.SignalDataset.normalize_sample", "data.SignalDataset.transformer.transform", "int", "int"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset.normalize_sample", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.transform"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "corpus", ",", "idx", "=", "self", ".", "train_set", "[", "i", "]", ".", "split", "(", "'|'", ")", "\n", "data", "=", "self", ".", "corpora", "[", "corpus", "]", ".", "data", "\n", "\n", "if", "type", "(", "data", ")", "==", "pd", ".", "DataFrame", ":", "\n", "            ", "signal", "=", "data", ".", "iloc", "[", "int", "(", "idx", ")", "]", "[", "self", ".", "input_column", "]", "\n", "", "else", ":", "# saved time slices", "\n", "            ", "signal", "=", "data", "[", "int", "(", "idx", ")", "]", "\n", "if", "self", ".", "normalize", "and", "self", ".", "signal_type", "!=", "'vel'", ":", "\n", "                ", "signal", "=", "self", ".", "normalize_sample", "(", "signal", ")", "\n", "\n", "", "", "if", "self", ".", "mode", "==", "'unsupervised_contrastive'", ":", "\n", "            ", "return", "stack", "(", "self", ".", "transformer", ".", "transform", "(", "signal", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "signal", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset.__len__": [[151, 153], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset.normalize_sample": [[154, 163], ["isinstance", "numpy.array"], "methods", ["None"], ["", "def", "normalize_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "isinstance", "(", "sample", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "sample", "[", ":", ",", "0", "]", "/=", "MAX_X_RESOLUTION", "\n", "sample", "[", ":", ",", "1", "]", "/=", "MAX_Y_RESOLUTION", "\n", "return", "sample", "\n", "\n", "", "sample", ".", "x", "/=", "MAX_X_RESOLUTION", "\n", "sample", ".", "y", "/=", "MAX_Y_RESOLUTION", "\n", "return", "np", ".", "array", "(", "[", "sample", ".", "x", ",", "sample", ".", "y", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.data.SignalDataset_Val.__init__": [[166, 175], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "samples", ",", "corpora", ",", "normalize", ",", "signal_type", ",", "input_column", ",", "\n", "mode", ",", "transformer", ")", ":", "\n", "        ", "self", ".", "train_set", "=", "samples", "\n", "self", ".", "corpora", "=", "corpora", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "signal_type", "=", "signal_type", "\n", "self", ".", "input_column", "=", "input_column", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "transformer", "=", "transformer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.__init__": [[14, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", "=", "None", ")", ":", "\n", "        ", "if", "args", ":", "\n", "            ", "self", ".", "signal_type", "=", "args", ".", "signal_type", "\n", "self", ".", "effective_hz", "=", "args", ".", "hz", "or", "self", ".", "hz", "\n", "\n", "", "self", ".", "viewing_time", "=", "0", "\n", "self", ".", "root", "=", "DATA_ROOT", "+", "self", ".", "root", "\n", "self", ".", "stim_dir", "=", "DATA_ROOT", "+", "self", ".", "stim_dir", "if", "self", ".", "stim_dir", "else", "None", "\n", "\n", "self", ".", "name", "=", "self", ".", "__class__", ".", "__name__", "\n", "self", ".", "dir", "=", "GENERATED_DATA_ROOT", "+", "self", ".", "name", "\n", "self", ".", "data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.load_data": [[27, 29], ["corpus.EyeTrackingCorpus.load_raw_data"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.load_raw_data"], ["", "def", "load_data", "(", "self", ",", "load_labels", "=", "False", ")", ":", "\n", "        ", "self", ".", "load_raw_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.load_raw_data": [[30, 53], ["logging.info", "corpus.EyeTrackingCorpus.preprocess_data", "os.path.exists", "time.time", "pandas.DataFrame", "corpus.EyeTrackingCorpus.data.x.apply", "corpus.EyeTrackingCorpus.data.y.apply", "logging.info", "logging.info", "logging.info", "open", "pickle.dump", "open", "pickle.load", "corpus.EyeTrackingCorpus.extract", "numpy.array", "numpy.array", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.preprocess_data", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.extract"], ["", "def", "load_raw_data", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Extracting raw data...'", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "\n", "data_file", "=", "self", ".", "dir", "+", "'-data.pickle'", "\n", "if", "not", "path", ".", "exists", "(", "data_file", ")", ":", "\n", "            ", "extract_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "data", "=", "pd", ".", "DataFrame", "(", "\n", "columns", "=", "[", "'subj'", ",", "'stim'", ",", "'task'", ",", "'x'", ",", "'y'", "]", ",", "\n", "data", "=", "self", ".", "extract", "(", ")", ")", "\n", "self", ".", "data", ".", "x", "=", "self", ".", "data", ".", "x", ".", "apply", "(", "lambda", "a", ":", "np", ".", "array", "(", "a", ")", ")", "\n", "self", ".", "data", ".", "y", "=", "self", ".", "data", ".", "y", ".", "apply", "(", "lambda", "a", ":", "np", ".", "array", "(", "a", ")", ")", "\n", "logging", ".", "info", "(", "'- Done. Found {} samples. ({:.2f}s)'", ".", "format", "(", "\n", "len", "(", "self", ".", "data", ")", ",", "\n", "time", ".", "time", "(", ")", "-", "extract_start", ")", ")", "\n", "with", "open", "(", "data_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "data", ",", "f", ")", "\n", "", "logging", ".", "info", "(", "'- Data saved to'", "+", "data_file", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "data_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "logging", ".", "info", "(", "'- Data loaded from'", "+", "data_file", ")", "\n", "\n", "", "self", ".", "preprocess_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.extract": [[54, 62], ["None"], "methods", ["None"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Should be implemented by all data sets in corpora.py\n        Go through all samples and return a NumPy array of size (N, 4)\n        N: number of samples (subjects x stimuli)\n        4: columns for the pd DataFrame (subj, stim, x coords, y coords)\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.append_to_df": [[63, 67], ["corpus.EyeTrackingCorpus.data.append", "dict", "zip", "list"], "methods", ["None"], ["", "def", "append_to_df", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "data", "=", "self", ".", "data", ".", "append", "(", "\n", "dict", "(", "zip", "(", "[", "'subj'", ",", "'stim'", ",", "'x'", ",", "'y'", "]", ",", "list", "(", "data", ")", ")", ")", ",", "\n", "ignore_index", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.__len__": [[68, 70], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.corpus.EyeTrackingCorpus.preprocess_data": [[71, 141], ["corpus.EyeTrackingCorpus.data.apply", "numpy.clip", "numpy.clip", "data.interpolate_nans", "data.interpolate_nans", "int", "logging.info", "logging.info", "logging.info", "logging.info", "corpus.EyeTrackingCorpus.pull_coords_to_zero", "data.downsample", "corpus.EyeTrackingCorpus.data[].apply", "data.get_stats", "corpus.EyeTrackingCorpus.data.apply", "data.get_stats", "numpy.where", "numpy.where", "data.upsample", "numpy.abs", "numpy.stack", "numpy.diff", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.interpolate_nans", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.interpolate_nans", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pull_coords_to_zero", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.downsample", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.get_stats", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.get_stats", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.upsample"], ["", "def", "preprocess_data", "(", "self", ")", ":", "\n", "        ", "def", "preprocess", "(", "trial", ")", ":", "\n", "# trim to specified viewing time", "\n", "# no trim happens when self.slice_time_windows or contrastive", "\n", "            ", "trial", ".", "x", "=", "trial", ".", "x", "[", ":", "sample_limit", "]", "\n", "trial", ".", "y", "=", "trial", ".", "y", "[", ":", "sample_limit", "]", "\n", "\n", "# always convert blinks (negative values) to 0.", "\n", "# trial.x[np.where(trial.x < 0)] = 0", "\n", "# trial.y[np.where(trial.y < 0)] = 0", "\n", "\n", "# # convert negative values and outliers to NaN", "\n", "trial", ".", "x", "[", "np", ".", "where", "(", "trial", ".", "x", "<", "0", ")", "]", "=", "np", ".", "nan", "\n", "trial", ".", "y", "[", "np", ".", "where", "(", "trial", ".", "y", "<", "0", ")", "]", "=", "np", ".", "nan", "\n", "\n", "# coordinate normalization is not necessary for velocity space", "\n", "trial", ".", "x", "=", "np", ".", "clip", "(", "trial", ".", "x", ",", "a_min", "=", "0", ",", "a_max", "=", "self", ".", "w", "or", "MAX_X_RESOLUTION", ")", "\n", "trial", ".", "y", "=", "np", ".", "clip", "(", "trial", ".", "y", ",", "a_min", "=", "0", ",", "a_max", "=", "self", ".", "h", "or", "MAX_Y_RESOLUTION", ")", "\n", "\n", "trial", ".", "x", "=", "du", ".", "interpolate_nans", "(", "trial", ".", "x", ")", "\n", "trial", ".", "y", "=", "du", ".", "interpolate_nans", "(", "trial", ".", "y", ")", "\n", "\n", "if", "self", ".", "signal_type", "==", "'pos'", ":", "\n", "                ", "trial", "=", "self", ".", "pull_coords_to_zero", "(", "trial", ")", "\n", "\n", "# scale coordinates so 1 degree of visual angle = 35 pixels", "\n", "", "try", ":", "\n", "                ", "scale_value", "=", "PX_PER_DVA", "/", "self", ".", "px_per_dva", "\n", "trial", "[", "[", "'x'", ",", "'y'", "]", "]", "*=", "scale_value", "\n", "", "except", "AttributeError", ":", "# if corpora has no information about dva", "\n", "                ", "pass", "\n", "\n", "", "if", "self", ".", "resample", "==", "'down'", ":", "\n", "                ", "trial", "=", "du", ".", "downsample", "(", "trial", ",", "self", ".", "effective_hz", ",", "self", ".", "hz", ")", "\n", "", "elif", "self", ".", "resample", "==", "'up'", ":", "\n", "                ", "trial", "=", "du", ".", "upsample", "(", "trial", ",", "self", ".", "effective_hz", ",", "self", ".", "hz", ")", "\n", "\n", "", "return", "trial", "\n", "\n", "", "sample_limit", "=", "(", "int", "(", "self", ".", "hz", "*", "self", ".", "viewing_time", ")", "\n", "if", "self", ".", "viewing_time", ">", "0", "\n", "else", "None", ")", "\n", "\n", "if", "(", "self", ".", "hz", "-", "self", ".", "effective_hz", ")", ">", "10", ":", "\n", "            ", "self", ".", "resample", "=", "'down'", "\n", "", "elif", "(", "self", ".", "effective_hz", "-", "self", ".", "hz", ")", ">", "10", ":", "\n", "            ", "self", ".", "resample", "=", "'up'", "\n", "", "else", ":", "\n", "            ", "self", ".", "resample", "=", "None", "\n", "\n", "", "if", "self", ".", "resample", ":", "\n", "            ", "logging", ".", "info", "(", "'- Resampling {} to {}.'", ".", "format", "(", "self", ".", "hz", ",", "self", ".", "effective_hz", ")", ")", "\n", "\n", "", "self", ".", "data", "=", "self", ".", "data", ".", "apply", "(", "preprocess", ",", "1", ")", "\n", "\n", "if", "'vel'", "in", "self", ".", "signal_type", ":", "\n", "            ", "logging", ".", "info", "(", "'Calculating velocities...'", ")", "\n", "ms_per_sample", "=", "1000", "/", "self", ".", "effective_hz", "\n", "self", ".", "data", "[", "'v'", "]", "=", "self", ".", "data", "[", "[", "'x'", ",", "'y'", "]", "]", ".", "apply", "(", "\n", "lambda", "x", ":", "np", ".", "abs", "(", "np", ".", "diff", "(", "np", ".", "stack", "(", "x", ")", ")", ")", ".", "T", ",", "1", ")", "/", "ms_per_sample", "\n", "logging", ".", "info", "(", "du", ".", "get_stats", "(", "self", ".", "data", "[", "'v'", "]", ")", ")", "\n", "\n", "if", "self", ".", "signal_type", "==", "'posvel'", ":", "\n", "                ", "self", ".", "data", "[", "'pv'", "]", "=", "self", ".", "data", ".", "apply", "(", "lambda", "x", ":", "np", ".", "stack", "(", "\n", "(", "x", "[", "'x'", "]", "[", ":", "-", "1", "]", ",", "x", "[", "'y'", "]", "[", ":", "-", "1", "]", ",", "\n", "x", "[", "'v'", "]", "[", ":", ",", "0", "]", ",", "x", "[", "'v'", "]", "[", ":", ",", "1", "]", ")", ")", ".", "T", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "du", ".", "get_stats", "(", "self", ".", "data", "[", "[", "'x'", ",", "'y'", "]", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.__init__.get_corpora": [[22, 37], ["list", "isinstance", "CORPUS_LIST.keys", "list.append", "logging.info"], "function", ["None"], []], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.__init__": [[11, 38], ["int", "torch.distributions.normal.Normal", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "slice_limit", "=", "int", "(", "args", ".", "hz", "*", "args", ".", "viewing_time", ")", "\n", "self", ".", "signal_type", "=", "args", ".", "signal_type", "\n", "self", ".", "gaussian", "=", "Normal", "(", "0.0", ",", "0.5", ")", "\n", "\n", "self", ".", "transforms", "=", "[", "\n", "self", ".", "dropout", ",", "\n", "self", ".", "add_gaussian_noise", ",", "\n", "self", ".", "dropout_and_noise", ",", "\n", "self", ".", "chunk_dropout", ",", "\n", "self", ".", "chunk_copy", ",", "\n", "self", ".", "chunk_swap", ",", "\n", "self", ".", "alternate_dropout", ",", "\n", "self", ".", "channel_dropout", ",", "\n", "self", ".", "identity", ",", "\n", "]", "\n", "\n", "self", ".", "crop_methods", "=", "[", "'random'", ",", "'same'", ",", "'consecutive'", "]", "\n", "\n", "self", ".", "dropout_p", "=", "0.2", "\n", "self", ".", "chunk_length", "=", "0.2", "\n", "logging", ".", "info", "(", "'Data transformer for contrastive learning initialized.'", ")", "\n", "logging", ".", "info", "(", "'Dropout p={}'", ".", "format", "(", "self", ".", "dropout_p", ")", ")", "\n", "logging", ".", "info", "(", "'Chunk length={}'", ".", "format", "(", "self", ".", "chunk_length", ")", ")", "\n", "logging", ".", "info", "(", "'Other transformations:\\n{}'", ".", "format", "(", "\n", "[", "t", ".", "__name__", "for", "t", "in", "self", ".", "transforms", "[", "1", ":", "]", "]", ")", ")", "\n", "logging", ".", "info", "(", "'Crop methods: {}'", ".", "format", "(", "self", ".", "crop_methods", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.transform": [[39, 53], ["numpy.random.choice", "transformer.DataTransformer.crop", "transformer.DataTransformer.clone", "numpy.random.choice", "transformer.DataTransformer.consecutive_crop", "transformer.DataTransformer.transform._fn"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.crop", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.consecutive_crop"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "def", "_fn", "(", "x", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "choice", "(", "self", ".", "transforms", ")", "(", "x", ")", "\n", "\n", "", "crop_method", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "crop_methods", ")", "\n", "if", "crop_method", "==", "'same'", ":", "\n", "            ", "crop1", "=", "self", ".", "crop", "(", "x", ")", "\n", "crop2", "=", "crop1", ".", "clone", "(", ")", "\n", "", "elif", "crop_method", "==", "'random'", ":", "\n", "            ", "crop1", ",", "crop2", "=", "self", ".", "crop", "(", "x", ")", ",", "self", ".", "crop", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "crop1", ",", "crop2", "=", "self", ".", "consecutive_crop", "(", "x", ")", "\n", "\n", "", "return", "_fn", "(", "crop1", ")", ".", "T", ",", "_fn", "(", "crop2", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.consecutive_crop": [[54, 73], ["len", "numpy.random.randint", "int", "len", "data.utils.pad", "len", "data.utils.pad", "torch.Tensor", "torch.Tensor", "len", "len"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pad", "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pad"], ["", "def", "consecutive_crop", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ")", ">", "self", ".", "slice_limit", "*", "2", ":", "\n", "            ", "start_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "x", ")", "-", "self", ".", "slice_limit", "*", "2", ")", "\n", "cut_at_idx", "=", "start_idx", "+", "self", ".", "slice_limit", "\n", "end_at_idx", "=", "cut_at_idx", "+", "self", ".", "slice_limit", "\n", "", "else", ":", "# just split in half", "\n", "            ", "start_idx", "=", "0", "\n", "cut_at_idx", "=", "int", "(", "len", "(", "x", ")", "/", "2", ")", "\n", "end_at_idx", "=", "None", "\n", "\n", "", "crop_1", "=", "x", "[", "start_idx", ":", "cut_at_idx", "]", "\n", "crop_2", "=", "x", "[", "cut_at_idx", ":", "end_at_idx", "]", "\n", "\n", "if", "len", "(", "crop_1", ")", "<", "self", ".", "slice_limit", ":", "\n", "            ", "crop_1", "=", "pad", "(", "self", ".", "slice_limit", ",", "crop_1", ")", "\n", "", "if", "len", "(", "crop_2", ")", "<", "self", ".", "slice_limit", ":", "\n", "            ", "crop_2", "=", "pad", "(", "self", ".", "slice_limit", ",", "crop_2", ")", "\n", "\n", "", "return", "Tensor", "(", "crop_1", ")", ",", "Tensor", "(", "crop_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.crop": [[74, 87], ["torch.Tensor", "numpy.random.randint", "len", "data.utils.pad", "len"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pad"], ["", "def", "crop", "(", "self", ",", "x", ")", ":", "\n", "# Choose which time step to start the crop", "\n", "# allow the cropped version to have trailing zeros", "\n", "        ", "try", ":", "\n", "            ", "start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "x", ")", "-", "self", ".", "slice_limit", "/", "2", ")", "\n", "crop", "=", "x", "[", "start", ":", "start", "+", "self", ".", "slice_limit", "]", "\n", "", "except", "ValueError", ":", "# when the original signal's too short to crop", "\n", "            ", "crop", "=", "x", "\n", "\n", "", "if", "len", "(", "crop", ")", "<", "self", ".", "slice_limit", ":", "\n", "            ", "crop", "=", "pad", "(", "self", ".", "slice_limit", ",", "crop", ")", "\n", "\n", "", "return", "Tensor", "(", "crop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.downsample": [[88, 92], ["data.utils.pad", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pad"], ["", "def", "downsample", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "[", ":", ":", "2", "]", "\n", "x", "=", "pad", "(", "self", ".", "slice_limit", ",", "x", ")", "\n", "return", "Tensor", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.add_gaussian_noise": [[93, 97], ["transformer.DataTransformer.gaussian.sample"], "methods", ["None"], ["", "def", "add_gaussian_noise", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "gaussian", ".", "sample", "(", "x", ".", "shape", ")", "\n", "x", "[", "x", "<", "0", "]", "=", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.dropout_and_noise": [[98, 101], ["transformer.DataTransformer.add_gaussian_noise"], "methods", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.add_gaussian_noise"], ["", "def", "dropout_and_noise", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "add_gaussian_noise", "(", "x", ")", "\n", "return", "self", ".", "transforms", "[", "0", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.chunk_dropout": [[102, 107], ["int", "numpy.random.randint", "len", "len"], "methods", ["None"], ["", "def", "chunk_dropout", "(", "self", ",", "x", ")", ":", "\n", "        ", "chunk_size", "=", "int", "(", "len", "(", "x", ")", "*", "self", ".", "chunk_length", ")", "\n", "chunk_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "x", ")", "-", "chunk_size", ")", "\n", "x", "[", "chunk_start", ":", "chunk_start", "+", "chunk_size", "]", "=", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.chunk_copy": [[108, 124], ["int", "numpy.random.randint", "x[].clone", "numpy.random.choice", "len", "len"], "methods", ["None"], ["", "def", "chunk_copy", "(", "self", ",", "x", ")", ":", "\n", "        ", "chunk_length", "=", "int", "(", "len", "(", "x", ")", "*", "self", ".", "chunk_length", ")", "\n", "chunk_start", "=", "np", ".", "random", ".", "randint", "(", "chunk_length", "*", "2", ",", "\n", "len", "(", "x", ")", "-", "chunk_length", "*", "2", ")", "\n", "chunk_end", "=", "chunk_start", "+", "chunk_length", "\n", "chunk", "=", "x", "[", "chunk_start", ":", "chunk_end", "]", ".", "clone", "(", ")", "\n", "\n", "direction", "=", "np", ".", "random", ".", "choice", "(", "[", "'left'", ",", "'right'", "]", ")", "\n", "if", "direction", "==", "'left'", ":", "\n", "            ", "start", "=", "chunk_start", "-", "chunk_length", "\n", "end", "=", "chunk_start", "\n", "", "else", ":", "\n", "            ", "start", "=", "chunk_end", "\n", "end", "=", "chunk_end", "+", "chunk_length", "\n", "", "x", "[", "start", ":", "end", "]", "=", "chunk", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.chunk_swap": [[125, 147], ["int", "numpy.random.randint", "numpy.random.choice", "x[].clone", "len", "len"], "methods", ["None"], ["", "def", "chunk_swap", "(", "self", ",", "x", ")", ":", "\n", "# get a random chunk of the sequence", "\n", "        ", "chunk_length", "=", "int", "(", "len", "(", "x", ")", "*", "self", ".", "chunk_length", ")", "\n", "chunk_start", "=", "np", ".", "random", ".", "randint", "(", "chunk_length", "*", "2", ",", "\n", "len", "(", "x", ")", "-", "chunk_length", "*", "2", ")", "\n", "\n", "chunk_end", "=", "chunk_start", "+", "chunk_length", "\n", "chunk", "=", "x", "[", "chunk_start", ":", "chunk_end", "]", "\n", "\n", "direction", "=", "np", ".", "random", ".", "choice", "(", "[", "'left'", ",", "'right'", "]", ")", "\n", "if", "direction", "==", "'left'", ":", "\n", "            ", "start", "=", "chunk_start", "-", "chunk_length", "\n", "end", "=", "chunk_start", "\n", "", "else", ":", "\n", "            ", "start", "=", "chunk_end", "\n", "end", "=", "chunk_end", "+", "chunk_length", "\n", "\n", "# swap", "\n", "", "tmp", "=", "x", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "x", "[", "start", ":", "end", "]", "=", "chunk", "\n", "x", "[", "chunk_start", ":", "chunk_end", "]", "=", "tmp", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.dropout": [[148, 154], ["numpy.argwhere", "numpy.random.choice", "numpy.argwhere.reshape", "len"], "methods", ["None"], ["", "def", "dropout", "(", "self", ",", "x", ")", ":", "\n", "        ", "points_to_dropout", "=", "np", ".", "argwhere", "(", "\n", "np", ".", "random", ".", "choice", "(", "[", "True", ",", "False", "]", ",", "size", "=", "len", "(", "x", ")", ",", "\n", "p", "=", "[", "self", ".", "dropout_p", ",", "1", "-", "self", ".", "dropout_p", "]", ")", ")", "\n", "x", "[", "points_to_dropout", ".", "reshape", "(", "-", "1", ")", "]", "=", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.alternate_dropout": [[155, 158], ["None"], "methods", ["None"], ["", "def", "alternate_dropout", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "[", ":", ":", "2", "]", "=", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.channel_dropout": [[159, 164], ["numpy.random.choice", "list", "range"], "methods", ["None"], ["", "def", "channel_dropout", "(", "self", ",", "x", ")", ":", "\n", "        ", "num_channels", "=", "x", ".", "shape", "[", "1", "]", "\n", "channel", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "num_channels", ")", ")", ")", "\n", "x", "[", ":", ",", "channel", "]", "=", "0", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.transformer.DataTransformer.identity": [[165, 167], ["None"], "methods", ["None"], ["", "def", "identity", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.load": [[9, 17], ["scipy.io.loadmat", "pandas.read_excel", "pandas.read_csv"], "function", ["None"], ["sns", ".", "set_style", "(", "'darkgrid'", ")", "\n", "\n", "\n", "def", "setup_logging", "(", "args", ",", "run_identifier", "=", "''", ")", ":", "\n", "    ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "if", "args", ".", "log_to_file", ":", "\n", "        ", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "            ", "logging", ".", "roost", ".", "removeHandler", "(", "handler", ")", "\n", "", "log_filename", "=", "run_identifier", "+", "'.log'", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.listdir_": [[19, 22], ["os.listdir", "f.startswith"], "function", ["None"], ["level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "'%(message)s'", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "", "elif", "args", ".", "verbose", ":", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pad": [[24, 30], ["numpy.array", "numpy.pad", "len"], "function", ["home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pad"], ["", "logging", ".", "basicConfig", "(", "format", "=", "'%(message)s'", ")", "\n", "\n", "\n", "", "def", "visualize_reconstruction", "(", "target", ",", "output", ",", "filename", ",", "loss_func", ",", "\n", "title", "=", "''", ",", "savefig", "=", "False", ")", ":", "\n", "    ", "save_dir", "=", "'../generated-data/comparisons/{}.jpg'", ".", "format", "(", "filename", ")", "\n", "target", "=", "target", ".", "squeeze", "(", ")", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.interpolate_nans": [[32, 41], ["numpy.isnan", "numpy.interp", "np.isnan.any", "numpy.where", "numpy.where"], "function", ["None"], ["\n", "if", "'bce'", "in", "loss_func", ":", "\n", "        ", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "\n", "", "line_params", "=", "{", "'alpha'", ":", "0.5", ",", "'linewidth'", ":", "1", "}", "\n", "viz", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "\n", "plt", ".", "plot", "(", "target", "[", "0", ",", ":", "]", ",", "'b'", ",", "label", "=", "'target_x'", ",", "**", "line_params", ")", "\n", "plt", ".", "plot", "(", "output", "[", "0", ",", ":", "]", ",", "'c'", ",", "label", "=", "'output_x'", ",", "**", "line_params", ")", "\n", "plt", ".", "plot", "(", "target", "[", "1", ",", ":", "]", ",", "'r'", ",", "label", "=", "'target_y'", ",", "**", "line_params", ")", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.pull_coords_to_zero": [[43, 49], ["coords.x[].min", "coords.y[].min"], "function", ["None"], ["\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "savefig", ":", "\n", "        ", "plt", ".", "savefig", "(", "save_dir", ",", "quality", "=", "80", ")", "\n", "plt", ".", "close", "(", ")", "# is handled by tensorboard add_figure()?", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.downsample": [[51, 56], ["int"], "function", ["None"], ["", "else", ":", "\n", "        ", "return", "viz", "\n", "\n", "\n", "", "", "def", "plot_hist", "(", "values", ",", "title", ")", ":", "\n", "    ", "viz", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "3", ")", ")", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.upsample": [[58, 66], ["int", "numpy.arange", "numpy.arange", "len", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "trial.x.reshape", "trial.y.reshape"], "function", ["None"], ["# plt.title(title)", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "# plt.close()", "\n", "return", "viz", "\n", "\n", "\n", "", "def", "plot_scatter", "(", "df", ",", "savefig", "=", "False", ")", ":", "\n", "    ", "dims", "=", "list", "(", "range", "(", "len", "(", "df", ".", "columns", ")", "-", "1", ")", ")", "\n", "viz", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "5", ",", "5", ")", ")", "\n"]], "home.repos.pwc.inspect_result.chipbautista_clrgaze.data.utils.get_stats": [[68, 83], ["pandas.DataFrame", "series.apply.apply().describe", "series.apply.apply().describe", "series.apply.apply().describe", "series.apply", "series.apply", "series.apply.apply().describe", "series.apply.apply", "series.apply.apply", "series.apply.apply", "series.apply.apply", "numpy.nanmin", "numpy.nanmax", "numpy.nanmin", "numpy.nanmax"], "function", ["None"], ["        ", "sns", ".", "scatterplot", "(", "*", "dims", ",", "data", "=", "df", ",", "hue", "=", "'label'", ")", "\n", "", "else", ":", "\n", "        ", "ax", "=", "viz", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "# get 6 most frequent labels", "\n", "# TO-DO: Allow more than 6 labels (need to adjust colors)", "\n", "labels", "=", "df", "[", "'label'", "]", ".", "value_counts", "(", ")", "[", ":", "6", "]", ".", "index", "\n", "for", "label", ",", "color", "in", "zip", "(", "labels", ",", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'c'", ",", "'y'", ",", "'m'", "]", ")", ":", "\n", "            ", "ax", ".", "scatter", "(", "*", "df", "[", "df", "[", "'label'", "]", "==", "label", "]", "[", "dims", "]", ".", "to_numpy", "(", ")", ".", "T", ",", "c", "=", "color", ",", "alpha", "=", "0.33", ")", "\n", "\n", "", "", "plt", ".", "tight_layout", "(", ")", "\n", "if", "savefig", ":", "\n", "        ", "logging", ".", "info", "(", "'savefig not implemented! Need to pass on filename!'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# plt.savefig('./tmp/{}-{}-{}-perplexity{}-iter{}.jpg'.format(", "\n", "#     task, method, len(df), 50, 3000), quality=85)", "\n", "# plt.close()", "\n"]]}