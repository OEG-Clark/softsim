{"home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.SeqSampler.__init__": [[101, 105], ["torch.utils.data.Sampler.__init__"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "idx", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_source", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "idx", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.SeqSampler.__iter__": [[106, 108], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.SeqSampler.__len__": [[109, 111], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm_dropout.__init__": [[295, 315], ["super().__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "SAASmodule.resnet_lstm_dropout.share.add_module", "SAASmodule.resnet_lstm_dropout.share.add_module", "SAASmodule.resnet_lstm_dropout.share.add_module", "SAASmodule.resnet_lstm_dropout.share.add_module", "SAASmodule.resnet_lstm_dropout.share.add_module", "SAASmodule.resnet_lstm_dropout.share.add_module", "SAASmodule.resnet_lstm_dropout.share.add_module", "SAASmodule.resnet_lstm_dropout.share.add_module", "SAASmodule.resnet_lstm_dropout.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm_dropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "fcDropout", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "1", "]", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm_dropout.forward": [[316, 327], ["x.view.view.view", "SAASmodule.resnet_lstm_dropout.share.forward", "x.view.view.view", "x.view.view.view", "SAASmodule.resnet_lstm_dropout.lstm.flatten_parameters", "SAASmodule.resnet_lstm_dropout.lstm", "SAASmodule.resnet_lstm_dropout.contiguous().view", "SAASmodule.resnet_lstm_dropout.fcDropout", "SAASmodule.resnet_lstm_dropout.fc", "SAASmodule.resnet_lstm_dropout.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "y", "=", "self", ".", "fcDropout", "(", "y", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm.__init__": [[147, 167], ["super().__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "SAASmodule.resnet_lstm.share.add_module", "SAASmodule.resnet_lstm.share.add_module", "SAASmodule.resnet_lstm.share.add_module", "SAASmodule.resnet_lstm.share.add_module", "SAASmodule.resnet_lstm.share.add_module", "SAASmodule.resnet_lstm.share.add_module", "SAASmodule.resnet_lstm.share.add_module", "SAASmodule.resnet_lstm.share.add_module", "SAASmodule.resnet_lstm.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ")", "\n", "# self.fcDropout = nn.Dropout(0.5)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "1", "]", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm.forward": [[168, 179], ["x.view.view.view", "SAASmodule.resnet_lstm.share.forward", "x.view.view.view", "x.view.view.view", "SAASmodule.resnet_lstm.lstm.flatten_parameters", "SAASmodule.resnet_lstm.lstm", "SAASmodule.resnet_lstm.contiguous().view", "SAASmodule.resnet_lstm.fc", "SAASmodule.resnet_lstm.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "# y = self.fcDropout(y)", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm_feature.__init__": [[181, 201], ["super().__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "SAASmodule.resnet_lstm_feature.share.add_module", "SAASmodule.resnet_lstm_feature.share.add_module", "SAASmodule.resnet_lstm_feature.share.add_module", "SAASmodule.resnet_lstm_feature.share.add_module", "SAASmodule.resnet_lstm_feature.share.add_module", "SAASmodule.resnet_lstm_feature.share.add_module", "SAASmodule.resnet_lstm_feature.share.add_module", "SAASmodule.resnet_lstm_feature.share.add_module", "SAASmodule.resnet_lstm_feature.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm_feature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ")", "\n", "# self.fcDropout = nn.Dropout(0.5)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "1", "]", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm_feature.forward": [[202, 215], ["x.view.view.view", "SAASmodule.resnet_lstm_feature.share.forward", "x.view.view.view", "x.view.view.view", "SAASmodule.resnet_lstm_feature.lstm.flatten_parameters", "SAASmodule.resnet_lstm_feature.lstm", "SAASmodule.resnet_lstm_feature.contiguous().view", "SAASmodule.resnet_lstm_feature.clone().detach", "SAASmodule.resnet_lstm_feature.fc", "SAASmodule.resnet_lstm_feature.contiguous", "SAASmodule.resnet_lstm_feature.clone"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "# feature = x.clone().detach()", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "feature", "=", "y", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# y = self.fcDropout(y)", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "y", ",", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm_nonlocal.__init__": [[217, 257], ["super().__init__", "SAASmodule.resnet_lstm", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet_lstm.load_state_dict", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "SAASmodule.resnet_lstm_nonlocal.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torchvision.models.resnet.NonLocalBlock_test_Conv1", "SAASmodule.resnet_lstm_nonlocal.nl.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm_nonlocal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet_lstm_base", "=", "resnet_lstm", "(", ")", "\n", "chkPath", "=", "'../AL_Res_LSTM/results/1568095370.2707942/checkpoint_best-25.pt'", "\n", "print", "(", "\"Restoring: \"", ",", "chkPath", ")", "\n", "# Load", "\n", "state", "=", "torch", ".", "load", "(", "chkPath", ")", "\n", "resnet_lstm_base", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet_lstm_base", ".", "share", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet_lstm_base", ".", "share", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet_lstm_base", ".", "share", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet_lstm_base", ".", "share", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet_lstm_base", ".", "share", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet_lstm_base", ".", "share", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet_lstm_base", ".", "share", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet_lstm_base", ".", "share", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet_lstm_base", ".", "share", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ")", "\n", "# self.share.add_module(\"lstm\", resnet_lstm_base.lstm)", "\n", "# planes = 256", "\n", "# block.expansion = 4", "\n", "# inplanes = planes * block.expansion", "\n", "\n", "outplanes", "=", "512", "\n", "self", ".", "nl", "=", "NonLocalBlock_test_Conv1", "(", "outplanes", ",", "outplanes", ",", "outplanes", "//", "2", ")", "\n", "# self.nonlocal = Bottleneck_test(inplanes, planes, 1, None, temp_conv[i], temp_stride[i], use_nl=True)", "\n", "# self.nonlocal = Bottleneck_test()", "\n", "for", "m", "in", "self", ".", "nl", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "fcDropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "# self.relu = nn.ReLU(inplace=True)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ")", "\n", "# init.xavier_normal_(self.lstm.all_weights[0][0])", "\n", "# init.xavier_normal_(self.lstm.all_weights[0][1])", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm_nonlocal.forward": [[258, 275], ["x.view.view.view", "SAASmodule.resnet_lstm_nonlocal.share.forward", "x.view.view.view", "x.view.view.view", "SAASmodule.resnet_lstm_nonlocal.lstm.flatten_parameters", "SAASmodule.resnet_lstm_nonlocal.lstm", "y.contiguous().view.contiguous().view.contiguous().view", "y.contiguous().view.contiguous().view.permute", "SAASmodule.resnet_lstm_nonlocal.nl", "SAASmodule.resnet_lstm_nonlocal.fcDropout", "SAASmodule.resnet_lstm_nonlocal.permute", "SAASmodule.resnet_lstm_nonlocal.contiguous().view", "SAASmodule.resnet_lstm_nonlocal.fc", "y.contiguous().view.contiguous().view.contiguous", "SAASmodule.resnet_lstm_nonlocal.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "# y = y.contiguous().view(-1, 512) # b x T x C", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "512", ")", "# b x T x C", "\n", "y_p", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# b x T x C -> b x C x T (b x 512 x 10)", "\n", "y_p", "=", "self", ".", "nl", "(", "y_p", ")", "\n", "# out = self.relu(out)", "\n", "y_p", "=", "self", ".", "fcDropout", "(", "y_p", ")", "\n", "y_p_p", "=", "y_p", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#(b x 512 x 10) - > b x 10 x 512", "\n", "y_p_p", "=", "y_p_p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "y_p_p", ".", "shape", "[", "-", "1", "]", ")", "# 160 x 512", "\n", "y_p_p", "=", "self", ".", "fc", "(", "y_p_p", ")", "\n", "return", "y_p_p", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm_nonlocal.nonlocal_features": [[276, 293], ["x.view.view.view", "SAASmodule.resnet_lstm_nonlocal.share.forward", "x.view.view.view", "x.view.view.view", "SAASmodule.resnet_lstm_nonlocal.lstm.flatten_parameters", "SAASmodule.resnet_lstm_nonlocal.lstm", "y.contiguous().view.contiguous().view.contiguous().view", "y.contiguous().view.contiguous().view.permute", "y.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "nonlocal_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "# y = y.contiguous().view(-1, 512) # b x T x C", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "512", ")", "# b x T x C", "\n", "y_p", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# b x T x C -> b x C x T (b x 512 x 10)", "\n", "# y_p = self.nl(y_p)", "\n", "# # out = self.relu(out)", "\n", "# y_p = self.fcDropout(y_p)", "\n", "# y_p_p = y_p.permute(0, 2, 1)#(b x 512 x 10) - > b x 10 x 512", "\n", "# y_p_p = y_p_p.contiguous().view(-1,y_p_p.shape[-1]) # 160 x 512", "\n", "# return y_p_p", "\n", "return", "y_p", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.load_select_data": [[39, 45], ["open", "json.load", "list", "json.load.keys"], "function", ["None"], ["def", "load_select_data", "(", "filename", ")", ":", "\n", "    ", "import", "json", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "assert", "list", "(", "data", ".", "keys", "(", ")", ")", "==", "[", "'selected'", ",", "'unselected'", ",", "'mask'", "]", "\n", "", "return", "data", "[", "'selected'", "]", ",", "data", "[", "'unselected'", "]", ",", "data", "[", "'mask'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.save_select_data": [[46, 54], ["json.dumps", "os.path.join", "open", "open.write", "open.close", "str", "str", "len"], "function", ["None"], ["", "def", "save_select_data", "(", "save_select_txt_path", ",", "selected", ",", "unselected", ",", "mask", ",", "time_cur", ")", ":", "\n", "    ", "import", "json", "\n", "dictObj", "=", "{", "'selected'", ":", "selected", ",", "'unselected'", ":", "unselected", ",", "'mask'", ":", "mask", "}", "\n", "jsObj", "=", "json", ".", "dumps", "(", "dictObj", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "save_select_txt_path", ",", "str", "(", "len", "(", "selected", ")", ")", "+", "'_'", "+", "str", "(", "time_cur", ")", "+", "'.json'", ")", "\n", "fileObject", "=", "open", "(", "save_name", ",", "'w'", ")", "\n", "fileObject", ".", "write", "(", "jsObj", ")", "\n", "fileObject", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.save_indices": [[55, 66], ["json.dumps", "os.path.join", "print", "open", "open.write", "open.close", "os.path.exists", "os.makedirs", "str", "str", "str", "len"], "function", ["None"], ["", "def", "save_indices", "(", "time_cur", ",", "indices", ",", "epoch", ",", "save_select_txt_path", ")", ":", "\n", "    ", "import", "json", "\n", "dictObj", "=", "{", "'indices'", ":", "indices", ",", "'round'", ":", "epoch", "}", "\n", "jsObj", "=", "json", ".", "dumps", "(", "dictObj", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "save_select_txt_path", ",", "str", "(", "time_cur", ")", "+", "str", "(", "len", "(", "indices", ")", ")", "+", "'_'", "+", "str", "(", "epoch", ")", "+", "'.json'", ")", "\n", "print", "(", "save_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_select_txt_path", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_select_txt_path", ")", "\n", "", "fileObject", "=", "open", "(", "save_name", ",", "'w'", ")", "\n", "fileObject", ".", "write", "(", "jsObj", ")", "\n", "fileObject", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.save_select_data_bylabel": [[67, 75], ["json.dumps", "os.path.join", "open", "open.write", "open.close", "str", "str", "len"], "function", ["None"], ["", "def", "save_select_data_bylabel", "(", "save_select_txt_path", ",", "selected", ",", "unselected", ",", "mask", ",", "label", ")", ":", "\n", "    ", "import", "json", "\n", "dictObj", "=", "{", "'selected'", ":", "selected", ",", "'unselected'", ":", "unselected", ",", "'mask'", ":", "mask", "}", "\n", "jsObj", "=", "json", ".", "dumps", "(", "dictObj", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "save_select_txt_path", ",", "str", "(", "len", "(", "selected", ")", ")", "+", "'_'", "+", "str", "(", "label", ")", "+", "'_'", "+", "currtime", "+", "'.json'", ")", "\n", "fileObject", "=", "open", "(", "save_name", ",", "'w'", ")", "\n", "fileObject", ".", "write", "(", "jsObj", ")", "\n", "fileObject", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.random_select_data": [[76, 99], ["random.sample", "range", "selected.extend", "selected.sort", "print", "print", "print", "len", "range", "len"], "function", ["None"], ["", "def", "random_select_data", "(", "X", ",", "N", ",", "selected", ",", "unselected", ",", "mask", ")", ":", "\n", "    ", "'''\n    parameter\n    X:input sorted index list[0,1,2,3,4,5,6]\n    N: how many samples to select\n    selected:list that are aready selected in X\n    unselected:list that are not selected in X\n    mask:list using 0/1 to represent each position is selected/unavaliable(0) or unselected/avaliable(1)\n    write by @michelle\n    '''", "\n", "# pdb.set_trace()", "\n", "new_samples", "=", "random", ".", "sample", "(", "unselected", ",", "N", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "X", "[", "i", "]", "in", "new_samples", ":", "\n", "            ", "mask", "[", "i", "]", "=", "0", "\n", "", "", "selected", ".", "extend", "(", "new_samples", ")", "\n", "selected", ".", "sort", "(", ")", "\n", "# unselected = [j for j in X if j not in selected]", "\n", "unselected", "=", "[", "X", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", "if", "X", "[", "i", "]", "not", "in", "selected", "]", "\n", "print", "(", "\"selected:\"", ",", "selected", ")", "\n", "print", "(", "\"unselected:\"", ",", "unselected", ")", "\n", "print", "(", "\"mask:\"", ",", "mask", ")", "\n", "return", "selected", ",", "unselected", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.val_for_selection": [[328, 428], ["len", "range", "len", "torch.utils.data.DataLoader", "SAASmodule.resnet_lstm_nonlocal", "torch.load", "torch.load", "torch.load", "state[].items", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "time.time", "time.time", "len", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "test_idx.append", "SAASmodule.SeqSampler", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "[].mean", "print", "pdb.set_trace", "data[].to", "data[].to", "inputs.view.view", "torch.nn.DataParallel.module.nonlocal_features", "torch.nn.DataParallel.module.nl.softmax_results", "time.time", "str", "torch.topk", "torch.topk", "torch.topk", "model.module.nl.softmax_results.view"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.resnet_lstm_nonlocal.nonlocal_features", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.NonLocalBlock_test_Conv1.softmax_results"], ["", "", "def", "val_for_selection", "(", "model_path", ",", "dataset", ",", "sequence_length", ",", "unselected", ")", ":", "\n", "    ", "num_test", "=", "len", "(", "unselected", ")", "\n", "# test_useful_start_idx = get_useful_start_idx(sequence_length, test_num_each)", "\n", "\n", "# num_test_we_use = len(test_useful_start_idx)", "\n", "\n", "# test_we_use_start_idx = test_useful_start_idx[0:num_test_we_use]", "\n", "\n", "# test_idx = []", "\n", "# for i in range(num_test_we_use):", "\n", "#     for j in range(sequence_length):", "\n", "#         test_idx.append(test_we_use_start_idx[i] + j)", "\n", "\n", "# num_test_all = len(test_idx)", "\n", "\n", "# print('num test start idx : {:6d}'.format(len(test_useful_start_idx)))", "\n", "# print('last idx test start: {:6d}'.format(test_useful_start_idx[-1]))", "\n", "# print('num of test dataset: {:6d}'.format(num_test))", "\n", "# print('num of test we use : {:6d}'.format(num_test_we_use))", "\n", "# print('num of all test use: {:6d}'.format(num_test_all))", "\n", "# test_loader = DataLoader(train_dataset,", "\n", "#                          batch_size=test_batch_size,", "\n", "#                          sampler=SeqSampler(test_dataset, test_idx),", "\n", "#                          num_workers=workers)", "\n", "pred_val_dicts", "=", "{", "}", "\n", "test_batch_size", "=", "sequence_length", "\n", "workers", "=", "2", "\n", "sequence_length", "=", "10", "\n", "test_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unselected", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "            ", "test_idx", ".", "append", "(", "unselected", "[", "i", "]", "+", "j", ")", "\n", "", "", "num_test_all", "=", "len", "(", "test_idx", ")", "\n", "\n", "# test_loader = DataLoader(", "\n", "#     dataset,", "\n", "#     batch_size=test_batch_size,", "\n", "#     sampler=SeqSampler(dataset, test_idx),", "\n", "#     num_workers=workers,", "\n", "#     pin_memory=True", "\n", "# )", "\n", "test_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "sampler", "=", "SeqSampler", "(", "dataset", ",", "test_idx", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "# model = i3_res50_nl_new_test(400)", "\n", "# model = i3_res50_nl_new_test_1block(400)", "\n", "model", "=", "resnet_lstm_nonlocal", "(", ")", "\n", "# num_ftrs = model.fc.in_features", "\n", "# model.fc = nn.Linear(num_ftrs, class_num) ", "\n", "# print(model)", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "#consider multi gpu formatted at module.", "\n", "", "state", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "newdict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "[", "0", ":", "7", "]", "==", "'module.'", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "\n", "newdict", "[", "name", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "newdict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "newdict", ")", "\n", "model", "=", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "# criterion = nn.CrossEntropyLoss(size_average=False)", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.0", "\n", "test_corrects", "=", "0", "\n", "test_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "all_preds", "=", "[", "]", "\n", "pth_blobs", "=", "{", "}", "\n", "# f = open('./possibility.txt', 'a')", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# torch.cuda.empty_cache()            ", "\n", "            ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "\n", "if", "crop_type", "==", "0", "or", "crop_type", "==", "1", ":", "\n", "                ", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "3", ",", "224", ",", "224", ")", "\n", "outputs", "=", "model", ".", "module", ".", "nonlocal_features", "(", "inputs", ")", "\n", "relation_matrix", "=", "model", ".", "module", ".", "nl", ".", "softmax_results", "(", "outputs", ")", "\n", "# outputs = outputs[sequence_length - 1::sequence_length]", "\n", "", "topN", "=", "5", "\n", "clip_relation_score", "=", "torch", ".", "topk", "(", "relation_matrix", ".", "view", "(", "-", "1", ")", ",", "topN", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "pred_val_dicts", "[", "str", "(", "unselected", "[", "i", "]", ")", "]", "=", "clip_relation_score", "\n", "select_oneclip_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"select:%d, select_oneclip_time:%.2f\"", "%", "(", "i", ",", "select_oneclip_time", ")", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "", "return", "pred_val_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.val_for_CNNembselection": [[429, 488], ["len", "range", "len", "torch.utils.data.DataLoader", "SAASmodule.resnet_lstm_feature", "torch.load", "torch.load", "torch.load", "state[].items", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "time.time", "len", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "test_idx.append", "SAASmodule.SeqSampler", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "[].mean", "print", "data[].to", "data[].to", "inputs.view.view", "torch.nn.DataParallel.module.forward", "torch.bmm", "torch.bmm", "torch.bmm", "cnn_emb_fea.view", "cnn_emb_fea.view().permute", "str", "torch.topk", "torch.topk", "torch.topk", "cnn_emb_fea.view", "torch.bmm.view"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "val_for_CNNembselection", "(", "model_path", ",", "dataset", ",", "sequence_length", ",", "unselected", ",", "sim_metric", ")", ":", "\n", "    ", "num_test", "=", "len", "(", "unselected", ")", "\n", "pred_val_dicts", "=", "{", "}", "\n", "test_batch_size", "=", "sequence_length", "\n", "workers", "=", "2", "\n", "sequence_length", "=", "10", "\n", "test_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unselected", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "            ", "test_idx", ".", "append", "(", "unselected", "[", "i", "]", "+", "j", ")", "\n", "", "", "num_test_all", "=", "len", "(", "test_idx", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "sampler", "=", "SeqSampler", "(", "dataset", ",", "test_idx", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "model", "=", "resnet_lstm_feature", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "#consider multi gpu formatted at module.", "\n", "", "state", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "newdict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "[", "0", ":", "7", "]", "==", "'module.'", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "\n", "newdict", "[", "name", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "newdict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "newdict", ")", "\n", "model", "=", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.0", "\n", "test_corrects", "=", "0", "\n", "test_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "all_preds", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "\n", "if", "crop_type", "==", "0", "or", "crop_type", "==", "1", ":", "\n", "                ", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "3", ",", "224", ",", "224", ")", "\n", "outputs", ",", "cnn_emb_fea", "=", "model", ".", "module", ".", "forward", "(", "inputs", ")", "\n", "", "if", "sim_metric", "==", "\"dot\"", ":", "# dot product as a similarity metric.", "\n", "# relation_matrix = torch.bmm(cnn_emb_fea.view(-1, sequence_length, 2048), cnn_emb_fea.view(-1, sequence_length, 2048).permute(0, 2, 1))", "\n", "                ", "relation_matrix", "=", "torch", ".", "bmm", "(", "cnn_emb_fea", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "cnn_emb_fea", ".", "shape", "[", "-", "1", "]", ")", ",", "cnn_emb_fea", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "cnn_emb_fea", ".", "shape", "[", "-", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "topN", "=", "5", "\n", "clip_relation_score", "=", "torch", ".", "topk", "(", "relation_matrix", ".", "view", "(", "-", "1", ")", ",", "topN", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "pred_val_dicts", "[", "str", "(", "unselected", "[", "i", "]", ")", "]", "=", "clip_relation_score", "\n", "print", "(", "\"select:\"", ",", "i", ")", "\n", "\n", "", "", "return", "pred_val_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.val_for_DBNselection": [[489, 558], ["len", "range", "len", "torch.utils.data.DataLoader", "SAASmodule.resnet_lstm_dropout", "torch.load", "torch.load", "torch.load", "state[].items", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "time.time", "len", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "test_idx.append", "SAASmodule.SeqSampler", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.Softmax", "nn.Softmax.", "pdb.set_trace", "torch.max", "torch.max", "torch.max", "numpy.log2", "print", "data[].to", "data[].to", "inputs.view.view", "torch.nn.DataParallel.module.forward", "Class_Probability.data.cpu", "numpy.multiply", "Class_Probability.data.cpu", "str"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "val_for_DBNselection", "(", "model_path", ",", "dataset", ",", "sequence_length", ",", "unselected", ")", ":", "\n", "    ", "num_test", "=", "len", "(", "unselected", ")", "\n", "pred_val_dicts", "=", "{", "}", "\n", "test_batch_size", "=", "sequence_length", "\n", "workers", "=", "2", "\n", "sequence_length", "=", "10", "\n", "test_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unselected", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "            ", "test_idx", ".", "append", "(", "unselected", "[", "i", "]", "+", "j", ")", "\n", "", "", "num_test_all", "=", "len", "(", "test_idx", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "sampler", "=", "SeqSampler", "(", "dataset", ",", "test_idx", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "model", "=", "resnet_lstm_dropout", "(", ")", "\n", "# num_ftrs = model.fc.in_features", "\n", "# model.fc = nn.Linear(num_ftrs, class_num) ", "\n", "# print(model)", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "#consider multi gpu formatted at module.", "\n", "", "state", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "newdict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "[", "0", ":", "7", "]", "==", "'module.'", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "\n", "newdict", "[", "name", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "newdict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "newdict", ")", "\n", "model", "=", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "# criterion = nn.CrossEntropyLoss(size_average=False)", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.0", "\n", "test_corrects", "=", "0", "\n", "test_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "all_preds", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# torch.cuda.empty_cache()            ", "\n", "            ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "\n", "if", "crop_type", "==", "0", "or", "crop_type", "==", "1", ":", "\n", "                ", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "3", ",", "224", ",", "224", ")", "\n", "outputs", "=", "model", ".", "module", ".", "forward", "(", "inputs", ")", "\n", "\n", "", "outputs", "=", "outputs", "[", "sequence_length", "-", "1", ":", ":", "sequence_length", "]", "\n", "Sm", "=", "nn", ".", "Softmax", "(", ")", "\n", "outputs", "=", "Sm", "(", "outputs", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "Class_Probability", ",", "_", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "Class_Log_Probability", "=", "np", ".", "log2", "(", "Class_Probability", ".", "data", ".", "cpu", "(", ")", ")", "\n", "Entropy_Each_Cell", "=", "-", "np", ".", "multiply", "(", "Class_Probability", ".", "data", ".", "cpu", "(", ")", ",", "Class_Log_Probability", ")", "\n", "pred_val_dicts", "[", "str", "(", "unselected", "[", "i", "]", ")", "]", "=", "Entropy_Each_Cell", "\n", "print", "(", "\"select:\"", ",", "i", ")", "\n", "\n", "", "", "return", "pred_val_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.non_local_select": [[559, 579], ["SAASmodule.val_for_selection", "sorted", "selected.extend", "selected.sort", "range", "val_for_selection.items", "keys.append", "values.append", "len", "itemgetter", "int", "float"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.val_for_selection"], ["", "def", "non_local_select", "(", "val_model_path", ",", "pool_dataset", ",", "sequence_length", ",", "X", ",", "select_num", ",", "selected", ",", "unselected", ",", "mask", ")", ":", "\n", "    ", "pred_val_dicts", "=", "val_for_selection", "(", "val_model_path", ",", "pool_dataset", ",", "sequence_length", ",", "unselected", ")", "\n", "from", "operator", "import", "itemgetter", "\n", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "#ranking probobility, low score in the front, high in the back", "\n", "for", "key", ",", "value", "in", "sorted", "(", "pred_val_dicts", ".", "items", "(", ")", ",", "key", "=", "itemgetter", "(", "1", ")", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "keys", ".", "append", "(", "int", "(", "key", ")", ")", "\n", "values", ".", "append", "(", "float", "(", "value", ")", ")", "\n", "# pick", "\n", "", "new_samples", "=", "keys", "[", "0", ":", "select_num", "-", "1", "]", "#pick the low probobility", "\n", "# update selected/unselected/mask", "\n", "selected", ".", "extend", "(", "new_samples", ")", "\n", "selected", ".", "sort", "(", ")", "\n", "unselected", "=", "[", "j", "for", "j", "in", "X", "if", "j", "not", "in", "selected", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "i", "in", "new_samples", ":", "\n", "            ", "mask", "[", "i", "]", "=", "0", "\n", "\n", "", "", "return", "selected", ",", "unselected", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.CNN_emb_select": [[580, 600], ["SAASmodule.val_for_CNNembselection", "sorted", "selected.extend", "selected.sort", "range", "val_for_CNNembselection.items", "keys.append", "values.append", "len", "itemgetter", "int", "float"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.val_for_CNNembselection"], ["", "def", "CNN_emb_select", "(", "val_model_path", ",", "pool_dataset", ",", "sequence_length", ",", "X", ",", "select_num", ",", "selected", ",", "unselected", ",", "mask", ")", ":", "\n", "    ", "pred_val_dicts", "=", "val_for_CNNembselection", "(", "val_model_path", ",", "pool_dataset", ",", "sequence_length", ",", "unselected", ",", "'dot'", ")", "\n", "from", "operator", "import", "itemgetter", "\n", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "#ranking probobility, low score in the front, high in the back", "\n", "for", "key", ",", "value", "in", "sorted", "(", "pred_val_dicts", ".", "items", "(", ")", ",", "key", "=", "itemgetter", "(", "1", ")", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "keys", ".", "append", "(", "int", "(", "key", ")", ")", "\n", "values", ".", "append", "(", "float", "(", "value", ")", ")", "\n", "# pick", "\n", "", "new_samples", "=", "keys", "[", "0", ":", "select_num", "-", "1", "]", "#pick the low probobility", "\n", "# update selected/unselected/mask", "\n", "selected", ".", "extend", "(", "new_samples", ")", "\n", "selected", ".", "sort", "(", ")", "\n", "unselected", "=", "[", "j", "for", "j", "in", "X", "if", "j", "not", "in", "selected", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "i", "in", "new_samples", ":", "\n", "            ", "mask", "[", "i", "]", "=", "0", "\n", "\n", "", "", "return", "selected", ",", "unselected", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.DBN_select": [[601, 624], ["SAASmodule.val_for_DBNselection", "sorted", "selected.extend", "selected.sort", "range", "val_for_DBNselection.items", "keys.append", "values.append", "len", "itemgetter", "int", "float"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.val_for_DBNselection"], ["", "def", "DBN_select", "(", "val_model_path", ",", "pool_dataset", ",", "sequence_length", ",", "X", ",", "select_num", ",", "selected", ",", "unselected", ",", "mask", ")", ":", "\n", "    ", "pred_val_dicts", "=", "val_for_DBNselection", "(", "val_model_path", ",", "pool_dataset", ",", "sequence_length", ",", "unselected", ")", "\n", "from", "operator", "import", "itemgetter", "\n", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "#ranking probobility, low score in the front, high in the back", "\n", "for", "key", ",", "value", "in", "sorted", "(", "pred_val_dicts", ".", "items", "(", ")", ",", "key", "=", "itemgetter", "(", "1", ")", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "keys", ".", "append", "(", "int", "(", "key", ")", ")", "\n", "values", ".", "append", "(", "float", "(", "value", ")", ")", "\n", "# pick", "\n", "#invere to decending order", "\n", "", "keys_dc", "=", "keys", "[", ":", ":", "-", "1", "]", "#high score in the front, low in the back", "\n", "#pick the large entropy", "\n", "new_samples", "=", "keys_dc", "[", "0", ":", "select_num", "-", "1", "]", "\n", "# update selected/unselected/mask", "\n", "selected", ".", "extend", "(", "new_samples", ")", "\n", "selected", ".", "sort", "(", ")", "\n", "unselected", "=", "[", "j", "for", "j", "in", "X", "if", "j", "not", "in", "selected", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "i", "in", "new_samples", ":", "\n", "            ", "mask", "[", "i", "]", "=", "0", "\n", "\n", "", "", "return", "selected", ",", "unselected", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.p_value": [[625, 661], ["numpy.zeros", "numpy.zeros", "range", "stats.ttest_ind", "print", "pdb.set_trace", "open", "pickle.load", "open", "pickle.load", "len", "result_A[].cpu().numpy", "result_B[].cpu().numpy", "len", "len", "result_A[].cpu", "result_B[].cpu"], "function", ["None"], ["", "def", "p_value", "(", "result1", ",", "result2", ")", ":", "\n", "#calculate p-value", "\n", "    ", "from", "scipy", "import", "stats", "\n", "import", "pickle", "\n", "'''\n    path10 = 'results_ResLSTM_Nolocal/RESLSTM_NOLOCAL/1572444732.135057txtname8602_1571811265.416326.json_0.0005_tbs400_seq10_opt1_crop0_adamgamma0.1_adamstep3_adamweightdecay0.0001_block_num1/checkpoint_best-13_test_8075_crop_1.pkl'\n    path20 = 'results_ResLSTM_Nolocal/RESLSTM_NOLOCAL/1572599460.4324906txtname17195_1572568659.835147.json_0.0005_tbs400_seq10_opt1_crop0_adamgamma0.1_adamstep3_adamweightdecay0.0001_block_num1/checkpoint_best-23_test_8237_crop_1.pkl'\n    path30 = 'results_ResLSTM_Nolocal/RESLSTM_NOLOCAL/1572651009.994679txtname25788_1572620340.5691814.json_0.0005_tbs400_seq10_opt1_crop0_adamgamma0.1_adamstep3_adamweightdecay0.0001_block_num1/checkpoint_best-24_test_8238_crop_1.pkl'\n    path40 = 'results_ResLSTM_Nolocal/RESLSTM_NOLOCAL/1572741346.4730155txtname34381_1572702907.6751492.json_0.0005_tbs400_seq10_opt1_crop0_adamgamma0.1_adamstep3_adamweightdecay0.0001_block_num1/checkpoint_best-16_test_8253_crop_1.pkl'\n    path50 = 'results_ResLSTM_Nolocal/RESLSTM_NOLOCAL/1572847215.642195txtname42974_1572767025.1601517.json_0.0005_tbs400_seq10_opt1_crop0_adamgamma0.1_adamstep3_adamweightdecay0.0001_block_num1/checkpoint_best-23_test_8414_crop_1.pkl'\n    '''", "\n", "\n", "with", "open", "(", "result1", ",", "'rb'", ")", "as", "f1", ":", "\n", "        ", "result_A", "=", "pickle", ".", "load", "(", "f1", ")", "\n", "", "with", "open", "(", "result2", ",", "'rb'", ")", "as", "f2", ":", "\n", "        ", "result_B", "=", "pickle", ".", "load", "(", "f2", ")", "\n", "\n", "# result_A = np.array([0.9,0.8,0.7,0.6,0.4])", "\n", "# result_B = np.array([0.9,0.8,0.7,0.6,0.5])", "\n", "\n", "# t_value,p_value = stats.ttest_ind(result_A,result_B)", "\n", "\n", "", "resultA_numpy", "=", "np", ".", "zeros", "(", "(", "len", "(", "result_A", ")", ",", "1", ")", ")", "\n", "resultB_numpy", "=", "np", ".", "zeros", "(", "(", "len", "(", "result_B", ")", ",", "1", ")", ")", "\n", "# prosB = val('../srccheckpoint/org/cxuecode/task2/full/2018_10_27_15_01_15/clean_2018_10_27_15_01_15_baseline_weightsS.hdf5')", "\n", "# t_value,p_value = stats.ttest_1samp(rvs,0.0)", "\n", "# pros = np.array([0.9,0.8,0.7,0.6,0.4])", "\n", "# pros_full = np.array([0.9,0.8,0.7,0.6,0.5])", "\n", "# t_value,p_value = stats.ttest_ind(pros[483:599],pros_full[483:599])", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "result_A", ")", ")", ":", "\n", "        ", "resultA_numpy", "[", "i", "]", "=", "result_A", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "resultB_numpy", "[", "i", "]", "=", "result_B", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "t_value", ",", "p_value", "=", "stats", ".", "ttest_ind", "(", "resultA_numpy", ",", "resultB_numpy", ",", "equal_var", "=", "False", ")", "\n", "print", "(", "t_value", ",", "p_value", ")", "\n", "pdb", ".", "set_trace", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.get_paths_labels.get_dirs": [[18, 29], ["os.listdir", "file_names.sort", "file_paths.sort", "os.path.join", "os.path.isdir", "file_paths.append", "file_names.append", "os.path.basename"], "function", ["None"], ["def", "get_dirs", "(", "root_dir", ")", ":", "\n", "    ", "file_paths", "=", "[", "]", "\n", "file_names", "=", "[", "]", "\n", "for", "lists", "in", "os", ".", "listdir", "(", "root_dir", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "lists", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "file_paths", ".", "append", "(", "path", ")", "\n", "file_names", ".", "append", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "\n", "", "", "file_names", ".", "sort", "(", ")", "\n", "file_paths", ".", "sort", "(", ")", "\n", "return", "file_names", ",", "file_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.get_paths_labels.get_files": [[30, 41], ["os.listdir", "file_names.sort", "file_paths.sort", "os.path.join", "os.path.isdir", "file_paths.append", "file_names.append", "os.path.basename"], "function", ["None"], ["", "def", "get_files", "(", "root_dir", ")", ":", "\n", "    ", "file_paths", "=", "[", "]", "\n", "file_names", "=", "[", "]", "\n", "for", "lists", "in", "os", ".", "listdir", "(", "root_dir", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "lists", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "file_paths", ".", "append", "(", "path", ")", "\n", "file_names", ".", "append", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "\n", "", "", "file_names", ".", "sort", "(", ")", "\n", "file_paths", ".", "sort", "(", ")", "\n", "return", "file_names", ",", "file_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.RandomCrop.__init__": [[154, 161], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.RandomCrop.__call__": [[162, 178], ["random.seed", "random.randint", "random.randint", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", "\n", "\n", "", "random", ".", "seed", "(", "self", ".", "count", "//", "sequence_length", ")", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "# print(self.count, x1, y1)", "\n", "self", ".", "count", "+=", "1", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.RandomHorizontalFlip.__init__": [[181, 183], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.RandomHorizontalFlip.__call__": [[184, 193], ["random.seed", "random.random", "img.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "seed", "=", "self", ".", "count", "//", "sequence_length", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "prob", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "count", "+=", "1", "\n", "# print(self.count, seed, prob)", "\n", "if", "prob", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.RandomRotation.__init__": [[195, 198], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degrees", ")", ":", "\n", "        ", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.RandomRotation.__call__": [[199, 205], ["random.seed", "random.randint", "torchvision.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "seed", "=", "self", ".", "count", "//", "sequence_length", "\n", "self", ".", "count", "+=", "1", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "angle", "=", "random", ".", "randint", "(", "-", "self", ".", "degrees", ",", "self", ".", "degrees", ")", "\n", "return", "TF", ".", "rotate", "(", "img", ",", "angle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.ColorJitter.__init__": [[207, 213], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "brightness", "=", "0.1", ",", "contrast", "=", "0.1", ",", "saturation", "=", "0.1", ",", "hue", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "hue", "=", "hue", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.ColorJitter.__call__": [[214, 229], ["random.seed", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "torchvision.adjust_brightness", "torchvision.adjust_contrast", "torchvision.adjust_saturation", "torchvision.adjust_hue"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "seed", "=", "self", ".", "count", "//", "sequence_length", "\n", "self", ".", "count", "+=", "1", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "brightness_factor", "=", "random", ".", "uniform", "(", "1", "-", "self", ".", "brightness", ",", "1", "+", "self", ".", "brightness", ")", "\n", "contrast_factor", "=", "random", ".", "uniform", "(", "1", "-", "self", ".", "contrast", ",", "1", "+", "self", ".", "contrast", ")", "\n", "saturation_factor", "=", "random", ".", "uniform", "(", "1", "-", "self", ".", "saturation", ",", "1", "+", "self", ".", "saturation", ")", "\n", "hue_factor", "=", "random", ".", "uniform", "(", "-", "self", ".", "hue", ",", "self", ".", "hue", ")", "\n", "\n", "img_", "=", "TF", ".", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", "\n", "img_", "=", "TF", ".", "adjust_contrast", "(", "img_", ",", "contrast_factor", ")", "\n", "img_", "=", "TF", ".", "adjust_saturation", "(", "img_", ",", "saturation_factor", ")", "\n", "img_", "=", "TF", ".", "adjust_hue", "(", "img_", ",", "hue_factor", ")", "\n", "\n", "return", "img_", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.CholecDataset.__init__": [[231, 237], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_paths", ",", "file_labels", ",", "transform", "=", "None", ",", "\n", "loader", "=", "pil_loader", ")", ":", "\n", "        ", "self", ".", "file_paths", "=", "file_paths", "\n", "self", ".", "file_labels", "=", "file_labels", "[", ":", ",", "-", "1", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.CholecDataset.__getitem__": [[238, 246], ["train_singlenet_phase_addnonlocal_AL.CholecDataset.loader", "train_singlenet_phase_addnonlocal_AL.CholecDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_names", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "labels", "=", "self", ".", "file_labels", "[", "index", "]", "\n", "imgs", "=", "self", ".", "loader", "(", "img_names", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "imgs", "=", "self", ".", "transform", "(", "imgs", ")", "\n", "\n", "", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.CholecDataset.__len__": [[247, 249], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.CholecDataset1.__init__": [[251, 269], ["train_singlenet_phase_addnonlocal_AL.get_useful_start_idx", "range", "range", "len", "train_singlenet_phase_addnonlocal_AL.CholecDataset1.idx_start.append"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.get_useful_start_idx"], ["    ", "def", "__init__", "(", "self", ",", "file_paths", ",", "file_labels", ",", "clip_len", ",", "num_each", ",", "split", ",", "transform", "=", "None", ",", "\n", "loader", "=", "pil_loader", ")", ":", "\n", "        ", "self", ".", "file_paths", "=", "file_paths", "\n", "self", ".", "file_labels", "=", "file_labels", "[", ":", ",", "-", "1", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "split", "=", "split", "\n", "useful_start_idx", "=", "get_useful_start_idx", "(", "32", ",", "num_each", ")", "\n", "\n", "num_we_use", "=", "len", "(", "useful_start_idx", ")", "//", "num_gpu", "*", "num_gpu", "\n", "\n", "we_use_start_idx", "=", "useful_start_idx", "[", "0", ":", "num_we_use", "]", "\n", "\n", "self", ".", "idx_start", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_we_use", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "clip_len", ")", ":", "\n", "                ", "self", ".", "idx_start", ".", "append", "(", "we_use_start_idx", "[", "i", "]", "+", "j", ")", "\n", "# num_train_all = len(train_idx)", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.CholecDataset1.__getitem__": [[272, 284], ["range", "frames.permute.permute.permute", "train_singlenet_phase_addnonlocal_AL.CholecDataset1.loader", "len", "frames.permute.permute.append", "train_singlenet_phase_addnonlocal_AL.CholecDataset1.transform"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# entry = self.data[index]", "\n", "        ", "imgs", "=", "[", "self", ".", "loader", "(", "img", ")", "for", "img", "in", "self", ".", "file_paths", "[", "self", ".", "idx_start", "[", "index", "]", ":", "self", ".", "idx_start", "[", "index", "]", "+", "self", ".", "clip_len", "]", "]", "\n", "labels", "=", "[", "label", "for", "label", "in", "self", ".", "file_labels", "[", "self", ".", "idx_start", "[", "index", "]", ":", "self", ".", "idx_start", "[", "index", "]", "+", "self", ".", "clip_len", "]", "]", "\n", "# frames = self.transform(frame for frame in frames) # (T, 3, 224, 224)", "\n", "frames", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "            ", "frames", ".", "append", "(", "self", ".", "transform", "(", "imgs", "[", "i", "]", ")", ")", "# (T, 3, 224, 224)", "\n", "", "frames", "=", "frames", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "# (3, T, 224, 224)", "\n", "instance", "=", "{", "'frames'", ":", "frames", ",", "'label'", ":", "labels", "}", "\n", "\n", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.CholecDataset1.__len__": [[285, 287], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx_start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.resnet_lstm.__init__": [[289, 309], ["super().__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ")", "\n", "# self.fcDropout = nn.Dropout(0.5)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "1", "]", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.resnet_lstm.forward": [[310, 321], ["x.view.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.share.forward", "x.view.view.view", "x.view.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.lstm.flatten_parameters", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.lstm", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.contiguous().view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.fc", "train_singlenet_phase_addnonlocal_AL.resnet_lstm.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "# y = self.fcDropout(y)", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.__init__": [[323, 343], ["super().__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm_dropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ",", "dropout", "=", "0.2", ")", "\n", "self", ".", "fcDropout", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "1", "]", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.forward": [[344, 355], ["x.view.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.share.forward", "x.view.view.view", "x.view.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.lstm.flatten_parameters", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.lstm", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.contiguous().view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.fcDropout", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.fc", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "y", "=", "self", ".", "fcDropout", "(", "y", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.__init__": [[357, 397], ["super().__init__", "train_singlenet_phase_addnonlocal_AL.resnet_lstm", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet_lstm.load_state_dict", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torchvision.models.resnet.NonLocalBlock_test_Conv1", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.nl.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm_nonlocal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet_lstm_base", "=", "resnet_lstm", "(", ")", "\n", "chkPath", "=", "FT_checkpoint", "\n", "print", "(", "\"Restoring: \"", ",", "chkPath", ")", "\n", "# Load", "\n", "state", "=", "torch", ".", "load", "(", "chkPath", ")", "\n", "resnet_lstm_base", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet_lstm_base", ".", "share", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet_lstm_base", ".", "share", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet_lstm_base", ".", "share", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet_lstm_base", ".", "share", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet_lstm_base", ".", "share", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet_lstm_base", ".", "share", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet_lstm_base", ".", "share", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet_lstm_base", ".", "share", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet_lstm_base", ".", "share", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ")", "\n", "# self.share.add_module(\"lstm\", resnet_lstm_base.lstm)", "\n", "# planes = 256", "\n", "# block.expansion = 4", "\n", "# inplanes = planes * block.expansion", "\n", "\n", "outplanes", "=", "512", "\n", "self", ".", "nl", "=", "NonLocalBlock_test_Conv1", "(", "outplanes", ",", "outplanes", ",", "outplanes", "//", "2", ")", "\n", "# self.nonlocal = Bottleneck_test(inplanes, planes, 1, None, temp_conv[i], temp_stride[i], use_nl=True)", "\n", "# self.nonlocal = Bottleneck_test()", "\n", "for", "m", "in", "self", ".", "nl", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "fcDropout", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "# self.relu = nn.ReLU(inplace=True)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ")", "\n", "# init.xavier_normal_(self.lstm.all_weights[0][0])", "\n", "# init.xavier_normal_(self.lstm.all_weights[0][1])", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.forward": [[398, 415], ["x.view.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.share.forward", "x.view.view.view", "x.view.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.lstm.flatten_parameters", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.lstm", "y.contiguous().view.contiguous().view.contiguous().view", "y.contiguous().view.contiguous().view.permute", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.nl", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.fcDropout", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.permute", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.contiguous().view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.fc", "y.contiguous().view.contiguous().view.contiguous", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "# y = y.contiguous().view(-1, 512) # b x T x C", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "512", ")", "# b x T x C", "\n", "y_p", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# b x T x C -> b x C x T (b x 512 x 10)", "\n", "y_p", "=", "self", ".", "nl", "(", "y_p", ")", "\n", "# out = self.relu(out)", "\n", "y_p", "=", "self", ".", "fcDropout", "(", "y_p", ")", "\n", "y_p_p", "=", "y_p", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#(b x 512 x 10) - > b x 10 x 512", "\n", "y_p_p", "=", "y_p_p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "y_p_p", ".", "shape", "[", "-", "1", "]", ")", "# 160 x 512", "\n", "y_p_p", "=", "self", ".", "fc", "(", "y_p_p", ")", "\n", "return", "y_p_p", "\n", ""]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.SeqSampler.__init__": [[543, 547], ["torch.utils.data.Sampler.__init__"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "idx", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_source", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "idx", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.SeqSampler.__iter__": [[548, 550], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.SeqSampler.__len__": [[551, 553], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.pil_loader": [[147, 151], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.get_useful_start_idx": [[433, 441], ["range", "len", "range", "idx.append"], "function", ["None"], ["", "def", "get_useful_start_idx", "(", "sequence_length", ",", "list_each_length", ")", ":", "\n", "    ", "count", "=", "0", "\n", "idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_each_length", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "count", ",", "count", "+", "(", "list_each_length", "[", "i", "]", "+", "1", "-", "sequence_length", ")", ")", ":", "\n", "            ", "idx", ".", "append", "(", "j", ")", "\n", "", "count", "+=", "list_each_length", "[", "i", "]", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.get_data": [[443, 540], ["print", "print", "print", "print", "numpy.asarray", "numpy.asarray", "train_singlenet_phase_addnonlocal_AL.CholecDataset", "train_singlenet_phase_addnonlocal_AL.CholecDataset", "open", "pickle.load", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "len", "len", "len", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "train_singlenet_phase_addnonlocal_AL.RandomCrop", "train_singlenet_phase_addnonlocal_AL.ColorJitter", "train_singlenet_phase_addnonlocal_AL.RandomHorizontalFlip", "train_singlenet_phase_addnonlocal_AL.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.FiveCrop", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Resize", "torchvision.transforms.TenCrop", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_data", "(", "data_path", ")", ":", "\n", "    ", "with", "open", "(", "data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "train_test_paths_labels", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "train_paths", "=", "train_test_paths_labels", "[", "0", "]", "\n", "val_paths", "=", "train_test_paths_labels", "[", "1", "]", "\n", "#    test_paths = train_test_paths_labels[2]", "\n", "train_labels", "=", "train_test_paths_labels", "[", "3", "]", "\n", "val_labels", "=", "train_test_paths_labels", "[", "4", "]", "\n", "#    test_labels = train_test_paths_labels[5]", "\n", "train_num_each", "=", "train_test_paths_labels", "[", "6", "]", "\n", "val_num_each", "=", "train_test_paths_labels", "[", "7", "]", "\n", "#    test_num_each = train_test_paths_labels[8]", "\n", "\n", "print", "(", "'train_paths  : {:6d}'", ".", "format", "(", "len", "(", "train_paths", ")", ")", ")", "\n", "print", "(", "'train_labels : {:6d}'", ".", "format", "(", "len", "(", "train_labels", ")", ")", ")", "\n", "print", "(", "'valid_paths  : {:6d}'", ".", "format", "(", "len", "(", "val_paths", ")", ")", ")", "\n", "print", "(", "'valid_labels : {:6d}'", ".", "format", "(", "len", "(", "val_labels", ")", ")", ")", "\n", "#    print('test_paths   : {:6d}'.format(len(test_paths)))", "\n", "#    print('test_labels  : {:6d}'.format(len(test_labels)))", "\n", "\n", "train_labels", "=", "np", ".", "asarray", "(", "train_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "val_labels", "=", "np", ".", "asarray", "(", "val_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "#    test_labels = np.asarray(test_labels, dtype=np.int64)", "\n", "\n", "train_transforms", "=", "None", "\n", "test_transforms", "=", "None", "\n", "\n", "if", "use_flip", "==", "0", ":", "\n", "        ", "train_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "250", ",", "250", ")", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.40577063", ",", "0.27282622", ",", "0.28533617", "]", ",", "[", "0.24071056", ",", "0.19952665", ",", "0.20165241", "]", ")", "\n", "]", ")", "\n", "", "elif", "use_flip", "==", "1", ":", "\n", "        ", "train_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "250", ",", "250", ")", ")", ",", "\n", "RandomCrop", "(", "224", ")", ",", "\n", "ColorJitter", "(", "brightness", "=", "0.2", ",", "contrast", "=", "0.2", ",", "saturation", "=", "0.2", ",", "hue", "=", "0.05", ")", ",", "\n", "RandomHorizontalFlip", "(", ")", ",", "\n", "RandomRotation", "(", "10", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.40577063", ",", "0.27282622", ",", "0.28533617", "]", ",", "[", "0.24071056", ",", "0.19952665", ",", "0.20165241", "]", ")", "\n", "]", ")", "\n", "\n", "", "if", "crop_type", "==", "0", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "250", ",", "250", ")", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.40577063", ",", "0.27282622", ",", "0.28533617", "]", ",", "[", "0.24071056", ",", "0.19952665", ",", "0.20165241", "]", ")", "\n", "]", ")", "\n", "", "elif", "crop_type", "==", "1", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "250", ",", "250", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.40577063", ",", "0.27282622", ",", "0.28533617", "]", ",", "[", "0.24071056", ",", "0.19952665", ",", "0.20165241", "]", ")", "\n", "]", ")", "\n", "", "elif", "crop_type", "==", "5", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "250", ",", "250", ")", ")", ",", "\n", "transforms", ".", "FiveCrop", "(", "224", ")", ",", "\n", "Lambda", "(", "lambda", "crops", ":", "torch", ".", "stack", "(", "[", "transforms", ".", "ToTensor", "(", ")", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", ",", "\n", "Lambda", "(", "\n", "lambda", "crops", ":", "torch", ".", "stack", "(", "\n", "[", "transforms", ".", "Normalize", "(", "[", "0.40577063", ",", "0.27282622", ",", "0.28533617", "]", ",", "[", "0.24071056", ",", "0.19952665", ",", "0.20165241", "]", ")", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "crop_type", "==", "10", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "250", ",", "250", ")", ")", ",", "\n", "transforms", ".", "TenCrop", "(", "224", ")", ",", "\n", "Lambda", "(", "lambda", "crops", ":", "torch", ".", "stack", "(", "[", "transforms", ".", "ToTensor", "(", ")", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", ",", "\n", "Lambda", "(", "\n", "lambda", "crops", ":", "torch", ".", "stack", "(", "\n", "[", "transforms", ".", "Normalize", "(", "[", "0.40577063", ",", "0.27282622", ",", "0.28533617", "]", ",", "[", "0.24071056", ",", "0.19952665", ",", "0.20165241", "]", ")", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", "\n", "]", ")", "\n", "\n", "", "train_dataset", "=", "CholecDataset", "(", "train_paths", ",", "train_labels", ",", "train_transforms", ")", "\n", "val_dataset", "=", "CholecDataset", "(", "val_paths", ",", "val_labels", ",", "test_transforms", ")", "\n", "\n", "# print('num of train dataset: {:6d}'.format(num_train))", "\n", "# print('num train start idx : {:6d}'.format(len(train_useful_start_idx)))", "\n", "# print('last idx train start: {:6d}'.format(train_useful_start_idx[-1]))", "\n", "# print('num of train we use : {:6d}'.format(num_train_we_use))", "\n", "# print('num of all train use: {:6d}'.format(num_train_all))", "\n", "# print('num of valid dataset: {:6d}'.format(num_val))", "\n", "# print('num valid start idx : {:6d}'.format(len(val_useful_start_idx)))", "\n", "# print('last idx valid start: {:6d}'.format(val_useful_start_idx[-1]))", "\n", "# print('num of valid we use : {:6d}'.format(num_val_we_use))", "\n", "# print('num of all valid use: {:6d}'.format(num_val_all))", "\n", "# train_dataset = CholecDataset1(train_paths, train_labels, 32, train_num_each, 'train', train_transforms)", "\n", "# val_dataset = CholecDataset1(val_paths, val_labels, 32, val_num_each, 'val', test_transforms)", "\n", "# pdb.set_trace()", "\n", "#    test_dataset = CholecDataset(test_paths, test_labels, test_transforms)", "\n", "\n", "return", "train_dataset", ",", "train_num_each", ",", "val_dataset", ",", "val_num_each", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.train_model": [[555, 973], ["tensorboardX.SummaryWriter", "utils.get_log", "train_singlenet_phase_addnonlocal_AL.get_useful_start_idx", "train_singlenet_phase_addnonlocal_AL.get_useful_start_idx", "range", "len", "torch.utils.data.DataLoader", "math.floor", "pdb.set_trace", "torch.CrossEntropyLoss", "copy.deepcopy", "range", "tensorboardX.SummaryWriter.close", "pdb.set_trace", "print", "time.time", "len", "range", "pdb.set_trace", "print", "random.sample", "range", "SAASmodule.save_select_data", "SAASmodule.load_select_data", "os.makedirs", "train_singlenet_phase_addnonlocal_AL.resnet_lstm", "torch.nn.DataParallel", "resnet_lstm_dropout.to", "glob.glob", "numpy.zeros", "range", "print", "torch.load", "torch.load", "torch.load", "torch.load", "state[].items", "resnet_lstm_dropout.load_state_dict", "optim.Adam.load_state_dict", "int", "resnet_lstm_dropout.module.state_dict", "numpy.random.shuffle", "range", "len", "torch.utils.data.DataLoader", "resnet_lstm_dropout.train", "time.time", "resnet_lstm_dropout.eval", "time.time", "tensorboardX.SummaryWriter.add_scalars", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.isfile", "utils.get_log.info", "utils.get_log.info", "utils.get_log.info", "utils.get_log.info", "utils.get_log.info", "utils.get_log.info", "utils.get_log.info", "utils.get_log.info", "utils.get_log.info", "str", "val_idx.append", "train_singlenet_phase_addnonlocal_AL.SeqSampler", "len", "len", "os.path.join", "print", "range", "len", "torch.utils.data.Subset", "SAASmodule.non_local_select", "SAASmodule.save_select_data", "str", "len", "print", "print", "pdb.set_trace", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal", "torch.SGD", "len", "numpy.max", "print", "torch.load", "torch.load", "torch.load", "torch.load", "state[].items", "resnet_lstm_dropout.load_state_dict", "len", "range", "optim.Adam.zero_grad", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "lr_scheduler.ReduceLROnPlateau.step", "os.path.isfile", "torch.save", "torch.save", "torch.save", "torch.save", "resnet_lstm_dropout.module.state_dict", "optim.Adam.state_dict", "os.remove", "str", "range", "range", "len", "range", "print", "range", "len", "torch.utils.data.Subset", "SAASmodule.DBN_select", "str", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_nonlocal", "print", "torch.load", "torch.load", "torch.load", "torch.load", "resnet_lstm_dropout.load_state_dict", "resnet_lstm_dropout.parameters", "torch.optim.lr_scheduler.StepLR", "torch.Adam", "torch.SGD", "len", "int", "str", "train_idx.append", "train_singlenet_phase_addnonlocal_AL.SeqSampler", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "inputs.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.forward", "torch.max", "torch.max", "torch.max", "torch.max", "nn.CrossEntropyLoss.", "criterion.backward", "optim.Adam.step", "criterion.data.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "float", "torch.max", "torch.max", "torch.max", "torch.max", "nn.CrossEntropyLoss.", "criterion.data.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "float", "lr_scheduler.ReduceLROnPlateau.step", "copy.deepcopy", "os.remove", "optim.Adam.state_dict", "time.strftime", "time.strftime", "len", "len", "test_idx.append", "len", "range", "print", "range", "len", "SAASmodule.random_select_data", "pdb.set_trace", "print", "str", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout", "print", "pdb.set_trace", "torch.optim.lr_scheduler.ReduceLROnPlateau", "resnet_lstm_dropout.parameters", "torch.optim.lr_scheduler.StepLR", "list", "print", "torch.Adam", "torch.optim.lr_scheduler.StepLR", "re.findall", "int", "print", "round", "print", "inputs.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.forward", "print", "round", "print", "lr_scheduler.ReduceLROnPlateau.step", "resnet_lstm_dropout.module.state_dict", "copy.deepcopy", "str", "str", "time.localtime", "time.localtime", "test_idx.append", "len", "range", "str", "os.listdir", "torch.optim.lr_scheduler.ReduceLROnPlateau", "filter", "numpy.max", "data[].to", "data[].to", "float", "data[].to", "data[].to", "inputs.view.permute().contiguous", "inputs.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.forward", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "resnet_lstm_dropout.module.state_dict", "str", "str", "str", "int", "int", "int", "int", "int", "int", "test_idx.append", "range", "str", "resnet_lstm_dropout.module.share.parameters", "resnet_lstm_dropout.module.lstm.parameters", "resnet_lstm_dropout.module.fc.parameters", "resnet_lstm_dropout.parameters", "len", "inputs.view.permute().contiguous", "inputs.view.view", "train_singlenet_phase_addnonlocal_AL.resnet_lstm_dropout.forward", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "str", "numpy.mod", "numpy.mod", "len", "str", "inputs.view.permute", "numpy.mod", "numpy.mod", "numpy.mod", "numpy.mod", "str", "str", "str", "inputs.view.permute", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.utils.get_log", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.get_useful_start_idx", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.get_useful_start_idx", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.save_select_data", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.load_select_data", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.non_local_select", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.save_select_data", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.DBN_select", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.SAASmodule.random_select_data", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "", "def", "train_model", "(", "train_dataset", ",", "train_num_each", ",", "val_dataset", ",", "val_num_each", ")", ":", "\n", "    ", "if", "if_load_old", "==", "True", ":", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "print", "(", "\"please choose the previous one\"", ")", "\n", "time_cur", "=", "'1586310709.4848218'", "\n", "", "else", ":", "\n", "        ", "time_cur", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "summary_dir", "+", "str", "(", "time_cur", ")", ")", "\n", "logger", "=", "utils", ".", "get_log", "(", "'log/'", "+", "str", "(", "time_cur", ")", "+", "'.txt'", ")", "\n", "\n", "# num_train = len(train_dataset)", "\n", "# num_val = len(val_dataset)", "\n", "\n", "train_useful_start_idx", "=", "get_useful_start_idx", "(", "sequence_length", ",", "train_num_each", ")", "\n", "val_useful_start_idx", "=", "get_useful_start_idx", "(", "sequence_length", ",", "val_num_each", ")", "\n", "# train_idx = []", "\n", "# for i in range(num_train_we_use):", "\n", "#     for j in range(sequence_length):", "\n", "#         train_idx.append(train_we_use_start_idx[i] + j)", "\n", "\n", "val_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "val_useful_start_idx", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "            ", "val_idx", ".", "append", "(", "val_useful_start_idx", "[", "i", "]", "+", "j", ")", "\n", "\n", "# num_train_all = len(train_idx)", "\n", "", "", "num_val_all", "=", "len", "(", "val_idx", ")", "\n", "# print('num of train dataset: {:6d}'.format(num_train))", "\n", "# print('num train start idx : {:6d}'.format(len(train_useful_start_idx)))", "\n", "# print('last idx train start: {:6d}'.format(train_useful_start_idx[-1]))", "\n", "# print('num of train we use : {:6d}'.format(num_train_we_use))", "\n", "# print('num of all train use: {:6d}'.format(num_train_all))", "\n", "# print('num of valid dataset: {:6d}'.format(num_val))", "\n", "# print('num valid start idx : {:6d}'.format(len(val_useful_start_idx)))", "\n", "# print('last idx valid start: {:6d}'.format(val_useful_start_idx[-1]))", "\n", "# print('num of valid we use : {:6d}'.format(num_val_we_use))", "\n", "# print('num of all valid use: {:6d}'.format(num_val_all))", "\n", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "val_batch_size", ",", "\n", "sampler", "=", "SeqSampler", "(", "val_dataset", ",", "val_idx", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "#select data to train", "\n", "X", "=", "train_useful_start_idx", "\n", "select_num", "=", "math", ".", "floor", "(", "len", "(", "X", ")", "*", "quary_portion", ")", "#every time choose 10% ", "\n", "if", "is_first_selection", "is", "True", ":", "\n", "        ", "pdb", ".", "set_trace", "(", ")", "\n", "print", "(", "\"this is first selectin!!!! please check your parameter in .sh\"", ")", "\n", "import", "random", "\n", "mask", "=", "[", "1", "for", "n", "in", "range", "(", "0", ",", "len", "(", "X", ")", ")", "]", "\n", "selected", "=", "random", ".", "sample", "(", "X", ",", "select_num", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "            ", "if", "X", "[", "i", "]", "in", "selected", ":", "\n", "                ", "mask", "[", "i", "]", "=", "0", "\n", "", "", "unselected", "=", "[", "X", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", "if", "X", "[", "i", "]", "not", "in", "selected", "]", "\n", "save_select_data", "(", "save_select_txt_path", ",", "selected", ",", "unselected", ",", "mask", ",", "time_cur", ")", "\n", "", "else", ":", "\n", "# load_select_data return: data['selected'],data['unselected'],data['mask']", "\n", "        ", "selected", ",", "unselected", ",", "mask", "=", "load_select_data", "(", "os", ".", "path", ".", "join", "(", "save_select_txt_path", ",", "json_name", ")", ")", "\n", "if", "select_chose", "==", "'non_local'", ":", "\n", "            ", "print", "(", "\"this is non_local select\"", ")", "\n", "test_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unselected", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "                    ", "test_idx", ".", "append", "(", "unselected", "[", "i", "]", "+", "j", ")", "\n", "", "", "num_test_all", "=", "len", "(", "test_idx", ")", "\n", "subset", "=", "Subset", "(", "train_dataset", ",", "test_idx", ")", "\n", "selected", ",", "unselected", ",", "mask", "=", "non_local_select", "(", "val_model_path", ",", "subset", ",", "sequence_length", ",", "X", ",", "select_num", ",", "selected", ",", "unselected", ",", "mask", ")", "\n", "", "elif", "select_chose", "==", "'DBN'", ":", "\n", "            ", "print", "(", "\"this is DBN select\"", ")", "\n", "test_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unselected", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "                    ", "test_idx", ".", "append", "(", "unselected", "[", "i", "]", "+", "j", ")", "\n", "", "", "num_test_all", "=", "len", "(", "test_idx", ")", "\n", "subset", "=", "Subset", "(", "train_dataset", ",", "test_idx", ")", "\n", "selected", ",", "unselected", ",", "mask", "=", "DBN_select", "(", "val_model_path", ",", "subset", ",", "sequence_length", ",", "X", ",", "select_num", ",", "selected", ",", "unselected", ",", "mask", ")", "\n", "", "elif", "select_chose", "==", "'random'", ":", "\n", "            ", "print", "(", "\"this is random select\"", ")", "\n", "test_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unselected", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "                    ", "test_idx", ".", "append", "(", "unselected", "[", "i", "]", "+", "j", ")", "\n", "", "", "num_test_all", "=", "len", "(", "test_idx", ")", "\n", "selected", ",", "unselected", ",", "mask", "=", "random_select_data", "(", "X", ",", "select_num", ",", "selected", ",", "unselected", ",", "mask", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "selected", "=", "[", "selected", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "selected", ")", ")", "if", "selected", "[", "i", "]", "in", "test_idx", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"just using old load select data to train without select new data\"", ")", "\n", "# pdb.set_trace()", "\n", "", "if", "is_save_json", "is", "True", ":", "\n", "            ", "save_select_data", "(", "save_select_txt_path", ",", "selected", ",", "unselected", ",", "mask", ",", "time_cur", ")", "\n", "", "", "pdb", ".", "set_trace", "(", ")", "\n", "# save_dir = save_dir_base + '/' + str(time_cur) + '_' + str(learning_rate) + '_tbs' + str(train_batch_size) \\", "\n", "# + '_seq' + str(sequence_length) + '_opt' + str(optimizer_choice) + '_crop' + str(crop_type) + '_adjlr' \\", "\n", "#  + '_adamgamma' + str(adamgamma) + '_adamstep' + str(adam_step) + '_weight_decay' + str(adamweightdecay) + '_block_num' + str(block_num)", "\n", "if", "train_mode", "==", "'RESLSTM'", "or", "train_mode", "==", "'RESLSTM_DBN'", ":", "\n", "        ", "save_dir", "=", "save_dir_base", "+", "'/'", "+", "str", "(", "train_mode", ")", "+", "'/'", "+", "str", "(", "time_cur", ")", "+", "'txtname'", "+", "json_name", "+", "'_'", "+", "str", "(", "learning_rate", ")", "+", "'_tbs'", "+", "str", "(", "train_batch_size", ")", "+", "'_seq'", "+", "str", "(", "sequence_length", ")", "+", "'_opt'", "+", "str", "(", "optimizer_choice", ")", "+", "'_crop'", "+", "str", "(", "crop_type", ")", "+", "'_sgdstep'", "+", "str", "(", "sgd_step", ")", "+", "'_sgd_gamma'", "+", "str", "(", "sgd_gamma", ")", "+", "'_sgd_adjust_lr'", "+", "str", "(", "sgd_adjust_lr", ")", "+", "'_weight_decay'", "+", "str", "(", "weight_decay", ")", "\n", "", "elif", "train_mode", "==", "'RESLSTM_NOLOCAL'", "or", "train_mode", "==", "'RESLSTM_NOLOCAL_dropout0.2'", ":", "\n", "        ", "save_dir", "=", "save_dir_base", "+", "'/'", "+", "str", "(", "train_mode", ")", "+", "'/'", "+", "str", "(", "time_cur", ")", "+", "'txtname'", "+", "json_name", "+", "'_'", "+", "str", "(", "learning_rate", ")", "+", "'_tbs'", "+", "str", "(", "train_batch_size", ")", "+", "'_seq'", "+", "str", "(", "sequence_length", ")", "+", "'_opt'", "+", "str", "(", "optimizer_choice", ")", "+", "'_crop'", "+", "str", "(", "crop_type", ")", "+", "'_adamgamma'", "+", "str", "(", "adamgamma", ")", "+", "'_adamstep'", "+", "str", "(", "adam_step", ")", "+", "'_adamweightdecay'", "+", "str", "(", "adamweightdecay", ")", "+", "'_block_num'", "+", "str", "(", "block_num", ")", "\n", "\n", "", "if", "if_load_old", "==", "True", ":", "\n", "# Check if a checkpoint is in there", "\n", "        ", "if", "len", "(", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "save_dir", ")", "]", ")", ">", "0", ":", "\n", "            ", "print", "(", "\"Loading old model\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"nothing to load\"", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "if", "train_mode", "==", "'RESLSTM'", ":", "\n", "        ", "model", "=", "resnet_lstm", "(", ")", "\n", "", "elif", "train_mode", "==", "'RESLSTM_NOLOCAL'", ":", "\n", "        ", "model", "=", "resnet_lstm_nonlocal", "(", ")", "\n", "", "elif", "train_mode", "==", "'RESLSTM_NOLOCAL_dropout0.2'", ":", "\n", "        ", "model", "=", "resnet_lstm_nonlocal", "(", ")", "\n", "chk", "=", "'results_ResLSTM_Nolocal/RESLSTM_NOLOCAL/1572847215.642195txtname42974_1572767025.1601517.json_0.0005_tbs400_seq10_opt1_crop0_adamgamma0.1_adamstep3_adamweightdecay0.0001_block_num1/checkpoint_best-23.pt'", "\n", "print", "(", "\"Restoring: \"", ",", "chk", ")", "\n", "# Load", "\n", "state", "=", "torch", ".", "load", "(", "chk", ")", "\n", "# newdict = {}    ", "\n", "# for k,v in state['state_dict'].items():", "\n", "#     if k[0:7] != 'module.': ", "\n", "#         name = 'module.' + k", "\n", "#         newdict[name] = v", "\n", "#     else:", "\n", "#         newdict[k] = v", "\n", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "", "elif", "train_mode", "==", "'RESLSTM_DBN'", ":", "\n", "        ", "model", "=", "resnet_lstm_dropout", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"not implemented\"", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "# print (model)", "\n", "# pdb.set_trace()", "\n", "", "if", "use_gpu", ":", "\n", "        ", "model", "=", "DataParallel", "(", "model", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "size_average", "=", "False", ")", "\n", "\n", "optimizer", "=", "None", "\n", "exp_lr_scheduler", "=", "None", "\n", "\n", "if", "multi_optim", "==", "0", ":", "\n", "        ", "if", "optimizer_choice", "==", "0", ":", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "use_nesterov", ")", "\n", "if", "sgd_adjust_lr", "==", "0", ":", "\n", "                ", "exp_lr_scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "sgd_step", ",", "gamma", "=", "sgd_gamma", ")", "\n", "", "elif", "sgd_adjust_lr", "==", "1", ":", "\n", "                ", "exp_lr_scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "'min'", ")", "\n", "", "", "elif", "optimizer_choice", "==", "1", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "", "", "elif", "multi_optim", "==", "1", ":", "\n", "        ", "if", "optimizer_choice", "==", "0", ":", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "[", "\n", "{", "'params'", ":", "model", ".", "module", ".", "share", ".", "parameters", "(", ")", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "lstm", ".", "parameters", "(", ")", ",", "'lr'", ":", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "fc", ".", "parameters", "(", ")", ",", "'lr'", ":", "learning_rate", "}", ",", "\n", "]", ",", "lr", "=", "learning_rate", "/", "10", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "use_nesterov", ")", "\n", "if", "sgd_adjust_lr", "==", "0", ":", "\n", "                ", "exp_lr_scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "sgd_step", ",", "gamma", "=", "sgd_gamma", ")", "\n", "", "elif", "sgd_adjust_lr", "==", "1", ":", "\n", "                ", "exp_lr_scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "'min'", ")", "\n", "", "", "elif", "optimizer_choice", "==", "1", ":", "\n", "# optimizer = optim.Adam([", "\n", "#     {'params': model.module.share.parameters()},", "\n", "#     {'params': model.module.lstm.parameters(), 'lr': learning_rate},", "\n", "#     {'params': model.module.fc.parameters(), 'lr': learning_rate},", "\n", "# ], lr=learning_rate / 10)", "\n", "            ", "optim_params", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "print", "(", "'Optimizing %d paramters'", "%", "len", "(", "optim_params", ")", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "learning_rate", ",", "weight_decay", "=", "adamweightdecay", ")", "\n", "exp_lr_scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "adam_step", ",", "gamma", "=", "adamgamma", ")", "\n", "\n", "#check if need load old weigth, optimizer", "\n", "", "", "if", "if_load_old", ":", "\n", "# Find last, not last best checkpoint", "\n", "        ", "files", "=", "glob", "(", "save_dir", "+", "'/*'", ")", "\n", "global_steps", "=", "np", ".", "zeros", "(", "[", "len", "(", "files", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "files", ")", ")", ":", "\n", "# Use meta files to find the highest index", "\n", "            ", "if", "'best'", "in", "files", "[", "i", "]", ":", "\n", "                ", "continue", "\n", "", "if", "'checkpoint-'", "not", "in", "files", "[", "i", "]", ":", "\n", "                ", "continue", "\n", "# Extract global step", "\n", "", "nums", "=", "[", "int", "(", "s", ")", "for", "s", "in", "re", ".", "findall", "(", "r'\\d+'", ",", "files", "[", "i", "]", ")", "]", "\n", "global_steps", "[", "i", "]", "=", "nums", "[", "-", "1", "]", "\n", "# Create path with maximum global step found", "\n", "", "chkPath", "=", "save_dir", "+", "'/checkpoint-'", "+", "str", "(", "int", "(", "np", ".", "max", "(", "global_steps", ")", ")", ")", "+", "'.pt'", "\n", "print", "(", "\"Restoring: \"", ",", "chkPath", ")", "\n", "# Load", "\n", "state", "=", "torch", ".", "load", "(", "chkPath", ")", "\n", "# Initialize model and optimizer", "\n", "newdict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "[", "0", ":", "7", "]", "!=", "'module.'", ":", "\n", "                ", "name", "=", "'module.'", "+", "k", "\n", "newdict", "[", "name", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "newdict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "newdict", ")", "\n", "# model.load_state_dict(state['state_dict'])", "\n", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optimizer'", "]", ")", "\n", "# pdb.set_trace()   ", "\n", "start_epoch", "=", "state", "[", "'epoch'", "]", "\n", "best_epoch", "=", "int", "(", "np", ".", "max", "(", "global_steps", ")", ")", "\n", "best_val_accuracy", "=", "state", "[", "'best_val_accuracy'", "]", "\n", "correspond_train_acc", "=", "state", "[", "'correspond_train_acc'", "]", "\n", "", "else", ":", "\n", "        ", "start_epoch", "=", "1", "\n", "best_epoch", "=", "-", "1", "\n", "best_val_accuracy", "=", "0.0", "\n", "correspond_train_acc", "=", "0.0", "\n", "if", "sv_init_model", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Restoring supervised model: \"", ",", "sv_init_model", ")", "\n", "# Load", "\n", "state", "=", "torch", ".", "load", "(", "sv_init_model", ")", "\n", "# Initialize model and optimizer", "\n", "newdict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "[", "0", ":", "7", "]", "!=", "'module.'", ":", "\n", "                    ", "name", "=", "'module.'", "+", "k", "\n", "newdict", "[", "name", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "newdict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "newdict", ")", "\n", "\n", "", "", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "module", ".", "state_dict", "(", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "epochs", "+", "1", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "selected", ")", "\n", "train_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "selected", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "                ", "train_idx", ".", "append", "(", "selected", "[", "i", "]", "+", "j", ")", "\n", "", "", "num_train_all", "=", "len", "(", "train_idx", ")", "\n", "# subset = Subset(train_dataset,train_idx)", "\n", "# train_loader = DataLoader(", "\n", "#     subset,", "\n", "#     batch_size=train_batch_size,", "\n", "#     sampler=SeqSampler(subset, train_idx),", "\n", "#     num_workers=workers,", "\n", "#     pin_memory=True", "\n", "# )", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "sampler", "=", "SeqSampler", "(", "train_dataset", ",", "train_idx", ")", ",", "\n", "num_workers", "=", "workers", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "# pdb.set_trace()", "\n", "# Sets the module in training mode.", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0.0", "\n", "train_corrects", "=", "0", "\n", "batch_progress", "=", "0.0", "\n", "train_start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "data", "in", "train_loader", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "# torch.cuda.empty_cache()", "\n", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "", "else", ":", "\n", "                    ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "# pdb.set_trace()", "\n", "", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "3", ",", "224", ",", "224", ")", "\n", "# pdb.set_trace()", "\n", "outputs", "=", "model", ".", "forward", "(", "inputs", ")", "\n", "# pdb.set_trace()", "\n", "outputs", "=", "outputs", "[", "sequence_length", "-", "1", ":", ":", "sequence_length", "]", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "batch_corrects", "=", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "data", ")", "\n", "train_corrects", "+=", "batch_corrects", "\n", "\n", "batch_acc", "=", "float", "(", "batch_corrects", ")", "/", "train_batch_size", "*", "sequence_length", "\n", "\n", "batch_progress", "+=", "1", "\n", "if", "batch_progress", "*", "train_batch_size", ">=", "num_train_all", ":", "\n", "                    ", "percent", "=", "100.0", "\n", "print", "(", "'Batch progress: %s [%d/%d] Batch acc:%.2f'", "%", "(", "str", "(", "percent", ")", "+", "'%'", ",", "num_train_all", ",", "num_train_all", ",", "batch_acc", ")", ",", "end", "=", "'\\n'", ")", "\n", "", "else", ":", "\n", "                    ", "percent", "=", "round", "(", "batch_progress", "*", "train_batch_size", "/", "num_train_all", "*", "100", ",", "2", ")", "\n", "print", "(", "'Batch progress: %s [%d/%d] Batch acc:%.2f'", "%", "(", "str", "(", "percent", ")", "+", "'%'", ",", "batch_progress", "*", "train_batch_size", ",", "num_train_all", ",", "batch_acc", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "", "", "", "train_elapsed_time", "=", "time", ".", "time", "(", ")", "-", "train_start_time", "\n", "train_accuracy", "=", "float", "(", "train_corrects", ")", "/", "float", "(", "num_train_all", ")", "*", "sequence_length", "\n", "train_average_loss", "=", "train_loss", "/", "num_train_all", "*", "sequence_length", "\n", "\n", "# Sets the module in evaluation mode.", "\n", "model", ".", "eval", "(", ")", "\n", "val_loss", "=", "0.0", "\n", "val_corrects", "=", "0", "\n", "val_start_time", "=", "time", ".", "time", "(", ")", "\n", "val_progress", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", "in", "val_loader", ":", "\n", "# torch.cuda.empty_cache()", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "", "else", ":", "\n", "                    ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "\n", "", "if", "crop_type", "==", "0", "or", "crop_type", "==", "1", ":", "\n", "                    ", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "3", ",", "224", ",", "224", ")", "\n", "outputs", "=", "model", ".", "forward", "(", "inputs", ")", "\n", "\n", "", "elif", "crop_type", "==", "5", ":", "\n", "                    ", "inputs", "=", "inputs", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "outputs", "=", "model", ".", "forward", "(", "inputs", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "5", ",", "-", "1", ",", "7", ")", "\n", "outputs", "=", "torch", ".", "mean", "(", "outputs", ",", "0", ")", "\n", "", "elif", "crop_type", "==", "10", ":", "\n", "                    ", "inputs", "=", "inputs", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "outputs", "=", "model", ".", "forward", "(", "inputs", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "10", ",", "-", "1", ",", "7", ")", "\n", "outputs", "=", "torch", ".", "mean", "(", "outputs", ",", "0", ")", "\n", "\n", "", "outputs", "=", "outputs", "[", "sequence_length", "-", "1", ":", ":", "sequence_length", "]", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "val_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "val_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "data", ")", "\n", "\n", "val_progress", "+=", "1", "\n", "if", "val_progress", "*", "val_batch_size", ">=", "num_val_all", ":", "\n", "                    ", "percent", "=", "100.0", "\n", "print", "(", "'Val progress: %s [%d/%d]'", "%", "(", "str", "(", "percent", ")", "+", "'%'", ",", "num_val_all", ",", "num_val_all", ")", ",", "end", "=", "'\\n'", ")", "\n", "", "else", ":", "\n", "                    ", "percent", "=", "round", "(", "val_progress", "*", "val_batch_size", "/", "num_val_all", "*", "100", ",", "2", ")", "\n", "print", "(", "'Val progress: %s [%d/%d]'", "%", "(", "str", "(", "percent", ")", "+", "'%'", ",", "val_progress", "*", "val_batch_size", ",", "num_val_all", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "", "", "", "val_elapsed_time", "=", "time", ".", "time", "(", ")", "-", "val_start_time", "\n", "val_accuracy", "=", "float", "(", "val_corrects", ")", "/", "float", "(", "num_val_all", ")", "*", "sequence_length", "\n", "val_average_loss", "=", "val_loss", "/", "num_val_all", "*", "sequence_length", "\n", "write_dict", "=", "{", "\"train_loss\"", ":", "train_average_loss", ",", "\"val_loss\"", ":", "val_average_loss", ",", "\"train_accuracy\"", ":", "train_accuracy", ",", "\"val_accuracy\"", ":", "val_accuracy", "}", "\n", "writer", ".", "add_scalars", "(", "'scalar'", ",", "write_dict", ",", "epoch", ")", "\n", "\n", "if", "optimizer_choice", "==", "0", ":", "\n", "            ", "if", "sgd_adjust_lr", "==", "0", ":", "\n", "                ", "exp_lr_scheduler", ".", "step", "(", ")", "\n", "", "elif", "sgd_adjust_lr", "==", "1", ":", "\n", "                ", "exp_lr_scheduler", ".", "step", "(", "val_average_loss", ")", "\n", "\n", "", "", "if", "optimizer_choice", "==", "1", ":", "\n", "            ", "exp_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "if", "val_accuracy", ">=", "best_val_accuracy", ":", "\n", "            ", "if", "val_accuracy", ">", "best_val_accuracy", ":", "\n", "                ", "best_val_accuracy", "=", "val_accuracy", "\n", "correspond_train_acc", "=", "train_accuracy", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "module", ".", "state_dict", "(", ")", ")", "\n", "oldBestInd", "=", "best_epoch", "\n", "best_epoch", "=", "epoch", "\n", "", "if", "val_accuracy", "==", "best_val_accuracy", ":", "\n", "                ", "if", "train_accuracy", ">", "correspond_train_acc", ":", "\n", "                    ", "correspond_train_acc", "=", "train_accuracy", "\n", "best_model_wts", "=", "copy", ".", "deepcopy", "(", "model", ".", "module", ".", "state_dict", "(", ")", ")", "\n", "oldBestInd", "=", "best_epoch", "\n", "best_epoch", "=", "epoch", "\n", "# Delte previously best model", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "save_dir", "+", "'/checkpoint_best-'", "+", "str", "(", "oldBestInd", ")", "+", "'.pt'", ")", ":", "\n", "                ", "os", ".", "remove", "(", "save_dir", "+", "'/checkpoint_best-'", "+", "str", "(", "oldBestInd", ")", "+", "'.pt'", ")", "\n", "# Save currently best model", "\n", "", "state", "=", "{", "'epoch'", ":", "epoch", ",", "'state_dict'", ":", "best_model_wts", ",", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_val_accuracy'", ":", "best_val_accuracy", ",", "'correspond_train_acc'", ":", "correspond_train_acc", "}", "\n", "torch", ".", "save", "(", "state", ",", "save_dir", "+", "'/checkpoint_best-'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "\n", "# If its not better, just save it delete the last checkpoint if it is not current best one", "\n", "# Save current model", "\n", "", "state", "=", "{", "'epoch'", ":", "epoch", ",", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_val_accuracy'", ":", "best_val_accuracy", ",", "'correspond_train_acc'", ":", "correspond_train_acc", "}", "\n", "torch", ".", "save", "(", "state", ",", "save_dir", "+", "'/checkpoint-'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "# Delete last one", "\n", "if", "os", ".", "path", ".", "isfile", "(", "save_dir", "+", "'/checkpoint-'", "+", "str", "(", "epoch", "-", "1", ")", "+", "'.pt'", ")", ":", "\n", "            ", "os", ".", "remove", "(", "save_dir", "+", "'/checkpoint-'", "+", "str", "(", "epoch", "-", "1", ")", "+", "'.pt'", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"\\n\"", ")", "\n", "logger", ".", "info", "(", "'Epoch: %d/%d (%d h %d m %d s)'", "%", "(", "epoch", ",", "epochs", ",", "int", "(", "train_elapsed_time", "/", "3600", ")", ",", "int", "(", "np", ".", "mod", "(", "train_elapsed_time", ",", "3600", ")", "/", "60", ")", ",", "int", "(", "np", ".", "mod", "(", "np", ".", "mod", "(", "train_elapsed_time", ",", "3600", ")", ",", "60", ")", ")", ")", "+", "time", ".", "strftime", "(", "\"%d.%m.-%H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'validation time: %d h %d m %d s'", "%", "(", "int", "(", "val_elapsed_time", "/", "3600", ")", ",", "int", "(", "np", ".", "mod", "(", "val_elapsed_time", ",", "3600", ")", "/", "60", ")", ",", "int", "(", "np", ".", "mod", "(", "np", ".", "mod", "(", "val_elapsed_time", ",", "3600", ")", ",", "60", ")", ")", ")", "+", "time", ".", "strftime", "(", "\"%d.%m.-%H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"training loss: %6f\"", "%", "train_average_loss", ")", "\n", "logger", ".", "info", "(", "\"validation loss: %6f\"", "%", "val_average_loss", ")", "\n", "logger", ".", "info", "(", "\"train accu: %6f\"", "%", "train_accuracy", ")", "\n", "logger", ".", "info", "(", "\"validation accu: %6f\"", "%", "val_accuracy", ")", "\n", "logger", ".", "info", "(", "\"best val accu: %6f at Epoch %d\"", "%", "(", "best_val_accuracy", ",", "best_epoch", ")", ")", "\n", "logger", ".", "info", "(", "\"best corresponding train accu: %6f\"", "%", "correspond_train_acc", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "# print('best accuracy: {:.4f} cor train accu: {:.4f}'.format(best_val_accuracy, correspond_train_acc))", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.main": [[975, 983], ["train_singlenet_phase_addnonlocal_AL.get_data", "train_singlenet_phase_addnonlocal_AL.train_model"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.get_data", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.train_singlenet_phase_addnonlocal_AL.train_model"], ["", "def", "main", "(", ")", ":", "\n", "# pkl_path = 'train32_val8_test40_paths_labels.pkl'", "\n", "# pkl_path = 'train40_val8_test32_paths_labels.pkl'", "\n", "# pkl_path = 'train40_val32-40_test40_paths_labels.pkl'", "\n", "# pkl_path = 'train40_val8_test32_paths_labels.pkl'", "\n", "    ", "pkl_path", "=", "'train40_val8_test41-80_paths_labels_server.pkl'", "\n", "train_dataset", ",", "train_num_each", ",", "val_dataset", ",", "val_num_each", "=", "get_data", "(", "pkl_path", ")", "\n", "train_model", "(", "train_dataset", ",", "train_num_each", ",", "val_dataset", ",", "val_num_each", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.CholecDataset.__init__": [[61, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file_paths", ",", "file_labels", ",", "transform", "=", "None", ",", "\n", "loader", "=", "pil_loader", ")", ":", "\n", "        ", "self", ".", "file_paths", "=", "file_paths", "\n", "self", ".", "file_labels", "=", "file_labels", "[", ":", ",", "-", "1", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.CholecDataset.__getitem__": [[68, 76], ["test_singlenet_phase_+nonlocal.CholecDataset.loader", "test_singlenet_phase_+nonlocal.CholecDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_names", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "labels", "=", "self", ".", "file_labels", "[", "index", "]", "\n", "imgs", "=", "self", ".", "loader", "(", "img_names", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "imgs", "=", "self", ".", "transform", "(", "imgs", ")", "\n", "\n", "", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.CholecDataset.__len__": [[77, 79], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.resnet_lstm.__init__": [[82, 101], ["super().__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_normal_", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "7", ")", "\n", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "0", "]", ")", "\n", "init", ".", "xavier_normal_", "(", "self", ".", "lstm", ".", "all_weights", "[", "0", "]", "[", "1", "]", ")", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.resnet_lstm.forward": [[102, 112], ["x.view.view.view", "test_singlenet_phase_+nonlocal.resnet_lstm.share.forward", "x.view.view.view", "x.view.view.view", "test_singlenet_phase_+nonlocal.resnet_lstm.lstm.flatten_parameters", "test_singlenet_phase_+nonlocal.resnet_lstm.lstm", "test_singlenet_phase_+nonlocal.resnet_lstm.contiguous().view", "test_singlenet_phase_+nonlocal.resnet_lstm.fc", "test_singlenet_phase_+nonlocal.resnet_lstm.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.__init__": [[114, 164], ["super().__init__", "test_singlenet_phase_+nonlocal.resnet_lstm", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet_lstm.load_state_dict", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.add_module", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torchvision.models.resnet.NonLocalBlock_test_Conv1", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.nl.modules", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "resnet_lstm_nonlocal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet_lstm_base", "=", "resnet_lstm", "(", ")", "\n", "chkPath", "=", "'../AL_Res_LSTM/results/1568095370.2707942/checkpoint_best-25.pt'", "\n", "print", "(", "\"Restoring: \"", ",", "chkPath", ")", "\n", "# Load", "\n", "state", "=", "torch", ".", "load", "(", "chkPath", ")", "\n", "# pdb.set_trace()", "\n", "# Initialize model and optimizer", "\n", "# newdict = {}    ", "\n", "# for k,v in state['state_dict'].items():", "\n", "#     if k[0:5] == 'share': ", "\n", "#         name = 'module.share.' + k", "\n", "#         newdict[name] = v", "\n", "#     else:", "\n", "#         name = 'module.' + k", "\n", "#         newdict[name] = v", "\n", "resnet_lstm_base", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "self", ".", "share", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"conv1\"", ",", "resnet_lstm_base", ".", "share", ".", "conv1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"bn1\"", ",", "resnet_lstm_base", ".", "share", ".", "bn1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"relu\"", ",", "resnet_lstm_base", ".", "share", ".", "relu", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"maxpool\"", ",", "resnet_lstm_base", ".", "share", ".", "maxpool", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer1\"", ",", "resnet_lstm_base", ".", "share", ".", "layer1", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer2\"", ",", "resnet_lstm_base", ".", "share", ".", "layer2", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer3\"", ",", "resnet_lstm_base", ".", "share", ".", "layer3", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"layer4\"", ",", "resnet_lstm_base", ".", "share", ".", "layer4", ")", "\n", "self", ".", "share", ".", "add_module", "(", "\"avgpool\"", ",", "resnet_lstm_base", ".", "share", ".", "avgpool", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "2048", ",", "512", ",", "batch_first", "=", "True", ")", "\n", "# self.share.add_module(\"lstm\", resnet_lstm_base.lstm)", "\n", "# planes = 256", "\n", "# block.expansion = 4", "\n", "# inplanes = planes * block.expansion", "\n", "\n", "outplanes", "=", "512", "\n", "self", ".", "nl", "=", "NonLocalBlock_test_Conv1", "(", "outplanes", ",", "outplanes", ",", "outplanes", "//", "2", ")", "\n", "# self.nonlocal = Bottleneck_test(inplanes, planes, 1, None, temp_conv[i], temp_stride[i], use_nl=True)", "\n", "# self.nonlocal = Bottleneck_test()", "\n", "for", "m", "in", "self", ".", "nl", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "fcDropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "# self.relu = nn.ReLU(inplace=True)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "class_num", ")", "\n", "# init.xavier_normal_(self.lstm.all_weights[0][0])", "\n", "# init.xavier_normal_(self.lstm.all_weights[0][1])", "\n", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.forward": [[165, 182], ["x.view.view.view", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.share.forward", "x.view.view.view", "x.view.view.view", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.lstm.flatten_parameters", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.lstm", "y.contiguous().view.contiguous().view.contiguous().view", "y.contiguous().view.contiguous().view.permute", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.nl", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.fcDropout", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.permute", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.contiguous().view", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.fc", "y.contiguous().view.contiguous().view.contiguous", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal.contiguous"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "x", "=", "self", ".", "share", ".", "forward", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "2048", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "2048", ")", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "y", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "# y = y.contiguous().view(-1, 512) # b x T x C", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "512", ")", "# b x T x C", "\n", "y_p", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# b x T x C -> b x C x T (b x 512 x 10)", "\n", "y_p", "=", "self", ".", "nl", "(", "y_p", ")", "\n", "# out = self.relu(out)", "\n", "y_p", "=", "self", ".", "fcDropout", "(", "y_p", ")", "\n", "y_p_p", "=", "y_p", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "#(b x 512 x 10) - > b x 10 x 512", "\n", "y_p_p", "=", "y_p_p", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "y_p_p", ".", "shape", "[", "-", "1", "]", ")", "# 160 x 512", "\n", "y_p_p", "=", "self", ".", "fc", "(", "y_p_p", ")", "\n", "return", "y_p_p", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.SeqSampler.__init__": [[253, 257], ["torch.utils.data.Sampler.__init__"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "idx", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_source", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "idx", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.SeqSampler.__iter__": [[258, 260], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.SeqSampler.__len__": [[261, 263], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.pil_loader": [[54, 58], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.get_useful_start_idx": [[183, 191], ["range", "len", "range", "idx.append"], "function", ["None"], ["", "", "def", "get_useful_start_idx", "(", "sequence_length", ",", "list_each_length", ")", ":", "\n", "    ", "count", "=", "0", "\n", "idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_each_length", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "count", ",", "count", "+", "(", "list_each_length", "[", "i", "]", "+", "1", "-", "sequence_length", ")", ")", ":", "\n", "            ", "idx", ".", "append", "(", "j", ")", "\n", "", "count", "+=", "list_each_length", "[", "i", "]", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.get_test_data": [[193, 251], ["print", "print", "numpy.asarray", "test_singlenet_phase_+nonlocal.CholecDataset", "open", "pickle.load", "torchvision.transforms.Compose", "len", "len", "torchvision.transforms.Compose", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.FiveCrop", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Compose", "torchvision.transforms.TenCrop", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.Compose", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_test_data", "(", "data_path", ")", ":", "\n", "    ", "with", "open", "(", "data_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "train_test_paths_labels", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "test_paths", "=", "train_test_paths_labels", "[", "2", "]", "\n", "test_labels", "=", "train_test_paths_labels", "[", "5", "]", "\n", "test_num_each", "=", "train_test_paths_labels", "[", "8", "]", "\n", "\n", "print", "(", "'test_paths   : {:6d}'", ".", "format", "(", "len", "(", "test_paths", ")", ")", ")", "\n", "print", "(", "'test_labels  : {:6d}'", ".", "format", "(", "len", "(", "test_labels", ")", ")", ")", "\n", "\n", "test_labels", "=", "np", ".", "asarray", "(", "test_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "test_transforms", "=", "None", "\n", "if", "crop_type", "==", "0", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.4310", ",", "0.2971", ",", "0.3126", "]", ",", "[", "0.2405", ",", "0.1863", ",", "0.1935", "]", ")", "\n", "]", ")", "\n", "", "elif", "crop_type", "==", "1", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.4310", ",", "0.2971", ",", "0.3126", "]", ",", "[", "0.2405", ",", "0.1863", ",", "0.1935", "]", ")", "\n", "]", ")", "\n", "", "elif", "crop_type", "==", "5", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "FiveCrop", "(", "224", ")", ",", "\n", "Lambda", "(", "lambda", "crops", ":", "torch", ".", "stack", "(", "[", "transforms", ".", "ToTensor", "(", ")", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", ",", "\n", "Lambda", "(", "\n", "lambda", "crops", ":", "torch", ".", "stack", "(", "\n", "[", "transforms", ".", "Normalize", "(", "[", "0.4310", ",", "0.2971", ",", "0.3126", "]", ",", "[", "0.2405", ",", "0.1863", ",", "0.1935", "]", ")", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "crop_type", "==", "10", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "TenCrop", "(", "224", ")", ",", "\n", "Lambda", "(", "lambda", "crops", ":", "torch", ".", "stack", "(", "[", "transforms", ".", "ToTensor", "(", ")", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", ",", "\n", "Lambda", "(", "\n", "lambda", "crops", ":", "torch", ".", "stack", "(", "\n", "[", "transforms", ".", "Normalize", "(", "[", "0.4310", ",", "0.2971", ",", "0.3126", "]", ",", "[", "0.2405", ",", "0.1863", ",", "0.1935", "]", ")", "(", "crop", ")", "for", "crop", "in", "crops", "]", ")", ")", "\n", "]", ")", "\n", "", "elif", "crop_type", "==", "2", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "250", ",", "250", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.4310", ",", "0.2971", ",", "0.3126", "]", ",", "[", "0.2405", ",", "0.1863", ",", "0.1935", "]", ")", "\n", "]", ")", "\n", "", "elif", "crop_type", "==", "3", ":", "\n", "        ", "test_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.4310", ",", "0.2971", ",", "0.3126", "]", ",", "[", "0.2405", ",", "0.1863", ",", "0.1935", "]", ")", "\n", "]", ")", "\n", "\n", "", "test_dataset", "=", "CholecDataset", "(", "test_paths", ",", "test_labels", ",", "test_transforms", ")", "\n", "return", "test_dataset", ",", "test_num_each", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.test_model": [[264, 385], ["len", "test_singlenet_phase_+nonlocal.get_useful_start_idx", "len", "range", "len", "print", "print", "print", "print", "print", "torch.utils.data.DataLoader", "test_singlenet_phase_+nonlocal.resnet_lstm_nonlocal", "print", "torch.load", "torch.load", "torch.load", "state[].items", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel", "torch.CrossEntropyLoss", "torch.nn.DataParallel.eval", "time.time", "int", "print", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "torch.nn.DataParallel.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "float", "float", "open", "pickle.dump", "test_idx.append", "len", "test_singlenet_phase_+nonlocal.SeqSampler", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.max", "torch.max", "torch.max", "range", "print", "nn.CrossEntropyLoss.", "criterion.data.item", "torch.sum", "torch.sum", "torch.sum", "print", "print", "criterion.data.item", "print", "str", "inputs.view.view", "torch.nn.DataParallel.forward", "len", "all_preds.append", "len", "data[].to", "data[].to", "str"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.get_useful_start_idx", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward"], ["", "", "def", "test_model", "(", "test_dataset", ",", "test_num_each", ")", ":", "\n", "    ", "num_test", "=", "len", "(", "test_dataset", ")", "\n", "test_useful_start_idx", "=", "get_useful_start_idx", "(", "sequence_length", ",", "test_num_each", ")", "\n", "\n", "num_test_we_use", "=", "len", "(", "test_useful_start_idx", ")", "\n", "\n", "test_we_use_start_idx", "=", "test_useful_start_idx", "[", "0", ":", "num_test_we_use", "]", "\n", "\n", "test_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_test_we_use", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "sequence_length", ")", ":", "\n", "            ", "test_idx", ".", "append", "(", "test_we_use_start_idx", "[", "i", "]", "+", "j", ")", "\n", "\n", "", "", "num_test_all", "=", "len", "(", "test_idx", ")", "\n", "\n", "print", "(", "'num test start idx : {:6d}'", ".", "format", "(", "len", "(", "test_useful_start_idx", ")", ")", ")", "\n", "print", "(", "'last idx test start: {:6d}'", ".", "format", "(", "test_useful_start_idx", "[", "-", "1", "]", ")", ")", "\n", "print", "(", "'num of test dataset: {:6d}'", ".", "format", "(", "num_test", ")", ")", "\n", "print", "(", "'num of test we use : {:6d}'", ".", "format", "(", "num_test_we_use", ")", ")", "\n", "print", "(", "'num of all test use: {:6d}'", ".", "format", "(", "num_test_all", ")", ")", "\n", "\n", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "sampler", "=", "SeqSampler", "(", "test_dataset", ",", "test_idx", ")", ",", "\n", "num_workers", "=", "workers", ")", "\n", "\n", "# model = i3_res50_nl_new_test(400)", "\n", "# model = i3_res50_nl_new_test_1block(400)", "\n", "model", "=", "resnet_lstm_nonlocal", "(", ")", "\n", "# num_ftrs = model.fc.in_features", "\n", "# model.fc = nn.Linear(num_ftrs, class_num) ", "\n", "print", "(", "model", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "print", "(", "\"Let's use\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs!\"", ")", "\n", "#consider multi gpu formatted at module.", "\n", "", "state", "=", "torch", ".", "load", "(", "model_name", ")", "\n", "newdict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "[", "0", ":", "7", "]", "==", "'module.'", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "\n", "newdict", "[", "name", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "newdict", "[", "k", "]", "=", "v", "\n", "", "", "model", ".", "load_state_dict", "(", "newdict", ")", "\n", "model", "=", "DataParallel", "(", "model", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "size_average", "=", "False", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.0", "\n", "test_corrects", "=", "0", "\n", "test_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "all_preds", "=", "[", "]", "\n", "pth_blobs", "=", "{", "}", "\n", "# f = open('./possibility.txt', 'a')", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "for", "data", "in", "test_loader", ":", "\n", "\n", "# torch.cuda.empty_cache()            ", "\n", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "", "else", ":", "\n", "                ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ",", "data", "[", "1", "]", "\n", "labels", "=", "labels", "[", "(", "sequence_length", "-", "1", ")", ":", ":", "sequence_length", "]", "\n", "\n", "", "if", "crop_type", "==", "0", "or", "crop_type", "==", "1", ":", "\n", "                ", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "sequence_length", ",", "3", ",", "224", ",", "224", ")", "\n", "outputs", "=", "model", ".", "forward", "(", "inputs", ")", "\n", "\n", "\n", "", "outputs", "=", "outputs", "[", "sequence_length", "-", "1", ":", ":", "sequence_length", "]", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "                ", "all_preds", ".", "append", "(", "preds", "[", "i", "]", ")", "\n", "", "print", "(", "\"all_preds length:\"", ",", "len", "(", "all_preds", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "test_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "test_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "labels", ".", "data", ")", "\n", "\n", "print", "(", "\"preds:\"", ",", "preds", ")", "\n", "print", "(", "\"labels:\"", ",", "labels", ".", "data", ")", "\n", "# pdb.set_trace()", "\n", "test_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "print", "(", "\"test_corrects:\"", ",", "test_corrects", ")", "\n", "# f.write(\"preds:\"+str(preds.cpu().numpy()))", "\n", "# f.write('\\t')", "\n", "# f.write(\"labels:\" + str(labels.data.cpu().numpy()))", "\n", "# f.write('\\t')", "\n", "# f.write(\"possibility:\" + str(possibility.cpu().numpy()))", "\n", "# f.write('\\n')", "\n", "\n", "# f.close()", "\n", "\n", "", "", "test_elapsed_time", "=", "time", ".", "time", "(", ")", "-", "test_start_time", "\n", "test_accuracy", "=", "float", "(", "test_corrects", ")", "/", "float", "(", "num_test_we_use", ")", "\n", "test_average_loss", "=", "test_loss", "/", "num_test_we_use", "\n", "\n", "# print('type of all_preds:', type(all_preds))", "\n", "# print('leng of all preds:', len(all_preds))", "\n", "save_test", "=", "int", "(", "\"{:4.0f}\"", ".", "format", "(", "test_accuracy", "*", "10000", ")", ")", "\n", "pred_name", "=", "model_pure_name", "+", "'_test_'", "+", "str", "(", "save_test", ")", "+", "'_crop_'", "+", "str", "(", "crop_type", ")", "+", "'.pkl'", "\n", "\n", "with", "open", "(", "pred_name", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_preds", ",", "f", ")", "\n", "", "print", "(", "'test elapsed: {:2.0f}m{:2.0f}s'", "\n", "' test loss: {:4.4f}'", "\n", "' test accu: {:.4f}'", "\n", ".", "format", "(", "test_elapsed_time", "//", "60", ",", "\n", "test_elapsed_time", "%", "60", ",", "\n", "test_average_loss", ",", "test_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.main": [[387, 394], ["test_singlenet_phase_+nonlocal.get_test_data", "test_singlenet_phase_+nonlocal.test_model"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.get_test_data", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.test_singlenet_phase_+nonlocal.test_model"], ["", "def", "main", "(", ")", ":", "\n", "# test_dataset, test_num_each = get_test_data('train40_val32-40_test40_paths_labels.pkl')", "\n", "    ", "test_dataset", ",", "test_num_each", "=", "get_test_data", "(", "pkl_path", ")", "\n", "\n", "# train40_val8_test32_paths_labels", "\n", "# train40_val32-40_test60-80_paths_labels.pkl", "\n", "test_model", "(", "test_dataset", ",", "test_num_each", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.utils.data_prefetcher.__init__": [[25, 35], ["iter", "torch.cuda.Stream", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "utils.data_prefetcher.preload", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.utils.data_prefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "loader", "=", "iter", "(", "loader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", "*", "255", ",", "0.456", "*", "255", ",", "0.406", "*", "255", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", "*", "255", ",", "0.224", "*", "255", ",", "0.225", "*", "255", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "# With Amp, it isn't necessary to manually convert data to half.", "\n", "# if args.fp16:", "\n", "#     self.mean = self.mean.half()", "\n", "#     self.std = self.std.half()", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.utils.data_prefetcher.preload": [[36, 52], ["next", "torch.cuda.stream", "utils.data_prefetcher.next_input.cuda", "utils.data_prefetcher.next_target.cuda", "utils.data_prefetcher.next_input.float", "utils.data_prefetcher.next_input.sub_().div_", "utils.data_prefetcher.next_input.sub_"], "methods", ["None"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_input", ",", "self", ".", "next_target", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_input", "=", "None", "\n", "self", ".", "next_target", "=", "None", "\n", "return", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "next_input", "=", "self", ".", "next_input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "self", ".", "next_target", "=", "self", ".", "next_target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# With Amp, it isn't necessary to manually convert data to half.", "\n", "# if args.fp16:", "\n", "#     self.next_input = self.next_input.half()", "\n", "# else:", "\n", "self", ".", "next_input", "=", "self", ".", "next_input", ".", "float", "(", ")", "\n", "self", ".", "next_input", "=", "self", ".", "next_input", ".", "sub_", "(", "self", ".", "mean", ")", ".", "div_", "(", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.utils.get_log": [[7, 23], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_log", "(", "file_name", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'*'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "file_name", ",", "mode", "=", "'a'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s - %(message)s'", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.utils.makeArrayOneHot": [[53, 64], ["numpy.zeros", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.swapaxes", "list", "range", "list"], "function", ["None"], ["", "", "", "def", "makeArrayOneHot", "(", "arrayWithClassInts", ",", "cardinality", ",", "axisInResultToUseForCategories", ")", ":", "\n", "# arrayWithClassInts: np array of shape [batchSize, r, c, z], with sampled ints expressing classes for each of the samples.", "\n", "    ", "oneHotsArray", "=", "np", ".", "zeros", "(", "[", "cardinality", "]", "+", "list", "(", "arrayWithClassInts", ".", "shape", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "oneHotsArray", "=", "np", ".", "reshape", "(", "oneHotsArray", ",", "newshape", "=", "(", "cardinality", ",", "-", "1", ")", ")", "#Flatten all dimensions except the first.", "\n", "arrayWithClassInts", "=", "np", ".", "reshape", "(", "arrayWithClassInts", ",", "newshape", "=", "-", "1", ")", "# Flatten", "\n", "\n", "oneHotsArray", "[", "arrayWithClassInts", ",", "range", "(", "oneHotsArray", ".", "shape", "[", "1", "]", ")", "]", "=", "1", "\n", "oneHotsArray", "=", "np", ".", "reshape", "(", "oneHotsArray", ",", "newshape", "=", "[", "cardinality", "]", "+", "list", "(", "arrayWithClassInts", ".", "shape", ")", ")", "# CAREFUL! cardinality first!", "\n", "oneHotsArray", "=", "np", ".", "swapaxes", "(", "oneHotsArray", ",", "0", ",", "axisInResultToUseForCategories", ")", "# in my implementation, axisInResultToUseForCategories == 1 usually.", "\n", "\n", "return", "oneHotsArray", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.utils.onehot_to_label": [[65, 70], ["torch.argmax"], "function", ["None"], ["", "def", "onehot_to_label", "(", "one_hot", ")", ":", "\n", "# result means the digit label ", "\n", "# result = torch.topk(one_hot, 1)[1].squeeze(1)", "\n", "    ", "result", "=", "torch", ".", "argmax", "(", "one_hot", ",", "dim", "=", "1", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.None.utils.get_confusion_matrix_values": [[71, 74], ["sklearn.metrics.confusion_matrix"], "function", ["None"], ["", "def", "get_confusion_matrix_values", "(", "y_true", ",", "y_pred", ",", "labels", ")", ":", "\n", "    ", "cm", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ",", "labels", "=", "labels", ")", "\n", "return", "(", "cm", ",", "cm", "[", "0", "]", "[", "0", "]", ",", "cm", "[", "0", "]", "[", "1", "]", ",", "cm", "[", "1", "]", "[", "0", "]", ",", "cm", "[", "1", "]", "[", "1", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.FrozenBN.__init__": [[13, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "momentum", "=", "0.1", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "FrozenBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "params_set", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.FrozenBN.set_params": [[20, 26], ["resnet.FrozenBN.register_buffer", "resnet.FrozenBN.register_buffer", "resnet.FrozenBN.register_buffer", "resnet.FrozenBN.register_buffer"], "methods", ["None"], ["", "def", "set_params", "(", "self", ",", "scale", ",", "bias", ",", "running_mean", ",", "running_var", ")", ":", "\n", "        ", "self", ".", "register_buffer", "(", "'scale'", ",", "scale", ")", "\n", "self", ".", "register_buffer", "(", "'bias'", ",", "bias", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "running_mean", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "running_var", ")", "\n", "self", ".", "params_set", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.FrozenBN.forward": [[27, 30], ["torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "params_set", ",", "'model.set_params(...) must be called before the forward pass'", "\n", "return", "torch", ".", "batch_norm", "(", "x", ",", "self", ".", "scale", ",", "self", ".", "bias", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "False", ",", "self", ".", "momentum", ",", "self", ".", "eps", ",", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.FrozenBN.__repr__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'FrozenBN(%d)'", "%", "self", ".", "num_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.Bottleneck.__init__": [[49, 63], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.NonLocalBlock"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "temp_conv", ",", "temp_stride", ",", "use_nl", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "(", "1", "+", "temp_conv", "*", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "temp_stride", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "temp_conv", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "outplanes", "=", "planes", "*", "4", "\n", "self", ".", "nl", "=", "NonLocalBlock", "(", "outplanes", ",", "outplanes", ",", "outplanes", "//", "2", ")", "if", "use_nl", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.Bottleneck.forward": [[65, 90], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample", "resnet.Bottleneck.nl"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# gpu_tracker.track()", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "nl", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "nl", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.Bottleneck_test.__init__": [[94, 108], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.NonLocalBlock_test"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "temp_conv", ",", "temp_stride", ",", "use_nl", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck_test", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "(", "1", "+", "temp_conv", "*", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "temp_stride", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "temp_conv", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "outplanes", "=", "planes", "*", "4", "\n", "self", ".", "nl", "=", "NonLocalBlock_test", "(", "outplanes", ",", "outplanes", ",", "outplanes", "//", "2", ")", "if", "use_nl", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.Bottleneck_test.forward": [[110, 135], ["resnet.Bottleneck_test.conv1", "resnet.Bottleneck_test.bn1", "resnet.Bottleneck_test.relu", "resnet.Bottleneck_test.conv2", "resnet.Bottleneck_test.bn2", "resnet.Bottleneck_test.relu", "resnet.Bottleneck_test.conv3", "resnet.Bottleneck_test.bn3", "resnet.Bottleneck_test.relu", "resnet.Bottleneck_test.downsample", "resnet.Bottleneck_test.nl"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# gpu_tracker.track()", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "nl", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "nl", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "", "", "class", "NonLocalBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.NonLocalBlock.__init__": [[136, 150], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_inner", ")", ":", "\n", "        ", "super", "(", "NonLocalBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_inner", "=", "dim_inner", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "\n", "self", ".", "theta", "=", "nn", ".", "Conv3d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Conv3d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "g", "=", "nn", ".", "Conv3d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Conv3d", "(", "dim_inner", ",", "dim_out", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.NonLocalBlock.forward": [[151, 175], ["resnet.NonLocalBlock.maxpool", "resnet.NonLocalBlock.theta", "resnet.NonLocalBlock.phi", "resnet.NonLocalBlock.g", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "t.view.view.view", "resnet.NonLocalBlock.out", "resnet.NonLocalBlock.bn", "resnet.NonLocalBlock.view", "resnet.NonLocalBlock.view", "resnet.NonLocalBlock.view", "resnet.NonLocalBlock.transpose", "torch.softmax.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "mp", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "theta", "=", "self", ".", "theta", "(", "x", ")", "\n", "phi", "=", "self", ".", "phi", "(", "mp", ")", "\n", "g", "=", "self", ".", "g", "(", "mp", ")", "\n", "\n", "theta_shape_5d", "=", "theta", ".", "shape", "\n", "theta", ",", "phi", ",", "g", "=", "theta", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", ",", "phi", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", ",", "g", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", "\n", "\n", "theta_phi", "=", "torch", ".", "bmm", "(", "theta", ".", "transpose", "(", "1", ",", "2", ")", ",", "phi", ")", "# (8, 1024, 784) * (8, 1024, 784) => (8, 784, 784)", "\n", "theta_phi_sc", "=", "theta_phi", "*", "(", "self", ".", "dim_inner", "**", "-", ".5", ")", "\n", "p", "=", "F", ".", "softmax", "(", "theta_phi_sc", ",", "dim", "=", "-", "1", ")", "\n", "\n", "t", "=", "torch", ".", "bmm", "(", "g", ",", "p", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "t", "=", "t", ".", "view", "(", "theta_shape_5d", ")", "\n", "\n", "out", "=", "self", ".", "out", "(", "t", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "\n", "out", "=", "out", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.NonLocalBlock_test.__init__": [[177, 191], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_inner", ")", ":", "\n", "        ", "super", "(", "NonLocalBlock_test", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_inner", "=", "dim_inner", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "\n", "self", ".", "theta", "=", "nn", ".", "Conv3d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Conv3d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "g", "=", "nn", ".", "Conv3d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Conv3d", "(", "dim_inner", ",", "dim_out", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.NonLocalBlock_test.forward": [[192, 217], ["resnet.NonLocalBlock_test.maxpool", "resnet.NonLocalBlock_test.theta", "resnet.NonLocalBlock_test.phi", "resnet.NonLocalBlock_test.g", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "resnet.NonLocalBlock_test.t.view", "resnet.NonLocalBlock_test.t.detach", "resnet.NonLocalBlock_test.out", "resnet.NonLocalBlock_test.bn", "resnet.NonLocalBlock_test.view", "resnet.NonLocalBlock_test.view", "resnet.NonLocalBlock_test.view", "resnet.NonLocalBlock_test.transpose", "torch.softmax.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "mp", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "theta", "=", "self", ".", "theta", "(", "x", ")", "\n", "phi", "=", "self", ".", "phi", "(", "mp", ")", "\n", "g", "=", "self", ".", "g", "(", "mp", ")", "\n", "\n", "theta_shape_5d", "=", "theta", ".", "shape", "\n", "theta", ",", "phi", ",", "g", "=", "theta", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", ",", "phi", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", ",", "g", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", "\n", "\n", "theta_phi", "=", "torch", ".", "bmm", "(", "theta", ".", "transpose", "(", "1", ",", "2", ")", ",", "phi", ")", "# (8, 1024, 784) * (8, 1024, 784) => (8, 784, 784)", "\n", "theta_phi_sc", "=", "theta_phi", "*", "(", "self", ".", "dim_inner", "**", "-", ".5", ")", "\n", "p", "=", "F", ".", "softmax", "(", "theta_phi_sc", ",", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "t", "=", "torch", ".", "bmm", "(", "g", ",", "p", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "t", "=", "self", ".", "t", ".", "view", "(", "theta_shape_5d", ")", "\n", "self", ".", "featuremap1", "=", "self", ".", "t", ".", "detach", "(", ")", "\n", "\n", "out", "=", "self", ".", "out", "(", "self", ".", "t", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "\n", "out", "=", "out", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.NonLocalBlock_test_Conv1.__init__": [[219, 234], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dim_inner", ")", ":", "\n", "# B x C x T x 1 x 1", "\n", "        ", "super", "(", "NonLocalBlock_test_Conv1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_inner", "=", "dim_inner", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "\n", "self", ".", "theta", "=", "nn", ".", "Conv1d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Conv1d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "g", "=", "nn", ".", "Conv1d", "(", "dim_in", ",", "dim_inner", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Conv1d", "(", "dim_inner", ",", "dim_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.NonLocalBlock_test_Conv1.forward": [[235, 260], ["resnet.NonLocalBlock_test_Conv1.maxpool", "resnet.NonLocalBlock_test_Conv1.theta", "resnet.NonLocalBlock_test_Conv1.phi", "resnet.NonLocalBlock_test_Conv1.g", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "resnet.NonLocalBlock_test_Conv1.t.view", "resnet.NonLocalBlock_test_Conv1.t.detach", "resnet.NonLocalBlock_test_Conv1.out", "resnet.NonLocalBlock_test_Conv1.bn", "resnet.NonLocalBlock_test_Conv1.view", "resnet.NonLocalBlock_test_Conv1.view", "resnet.NonLocalBlock_test_Conv1.view", "resnet.NonLocalBlock_test_Conv1.transpose", "torch.softmax.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "mp", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "theta", "=", "self", ".", "theta", "(", "x", ")", "\n", "phi", "=", "self", ".", "phi", "(", "mp", ")", "\n", "g", "=", "self", ".", "g", "(", "mp", ")", "\n", "\n", "theta_shape_5d", "=", "theta", ".", "shape", "\n", "theta", ",", "phi", ",", "g", "=", "theta", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", ",", "phi", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", ",", "g", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", "\n", "\n", "theta_phi", "=", "torch", ".", "bmm", "(", "theta", ".", "transpose", "(", "1", ",", "2", ")", ",", "phi", ")", "# (8, 1024, 784) * (8, 1024, 784) => (8, 784, 784)", "\n", "theta_phi_sc", "=", "theta_phi", "*", "(", "self", ".", "dim_inner", "**", "-", ".5", ")", "#scale 1/512", "\n", "p", "=", "F", ".", "softmax", "(", "theta_phi_sc", ",", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "t", "=", "torch", ".", "bmm", "(", "g", ",", "p", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "t", "=", "self", ".", "t", ".", "view", "(", "theta_shape_5d", ")", "\n", "self", ".", "featuremap1", "=", "self", ".", "t", ".", "detach", "(", ")", "\n", "\n", "out", "=", "self", ".", "out", "(", "self", ".", "t", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "\n", "out", "=", "out", "+", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.NonLocalBlock_test_Conv1.softmax_results": [[261, 279], ["resnet.NonLocalBlock_test_Conv1.maxpool", "resnet.NonLocalBlock_test_Conv1.theta", "resnet.NonLocalBlock_test_Conv1.phi", "resnet.NonLocalBlock_test_Conv1.g", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "resnet.NonLocalBlock_test_Conv1.view", "resnet.NonLocalBlock_test_Conv1.view", "resnet.NonLocalBlock_test_Conv1.view", "resnet.NonLocalBlock_test_Conv1.transpose"], "methods", ["None"], ["", "def", "softmax_results", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "mp", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "theta", "=", "self", ".", "theta", "(", "x", ")", "\n", "phi", "=", "self", ".", "phi", "(", "mp", ")", "\n", "g", "=", "self", ".", "g", "(", "mp", ")", "\n", "\n", "theta_shape_5d", "=", "theta", ".", "shape", "\n", "theta", ",", "phi", ",", "g", "=", "theta", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", ",", "phi", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", ",", "g", ".", "view", "(", "batch_size", ",", "self", ".", "dim_inner", ",", "-", "1", ")", "\n", "\n", "theta_phi", "=", "torch", ".", "bmm", "(", "theta", ".", "transpose", "(", "1", ",", "2", ")", ",", "phi", ")", "# (8, 1024, 784) * (8, 1024, 784) => (8, 784, 784)", "\n", "theta_phi_sc", "=", "theta_phi", "*", "(", "self", ".", "dim_inner", "**", "-", ".5", ")", "#scale 1/512", "\n", "# p = F.softmax(theta_phi_sc, dim=-1)", "\n", "\n", "# t = torch.bmm(g, p.transpose(1, 2))", "\n", "return", "theta_phi_sc", "\n", "#-----------------------------------------------------------------------------------------------#", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50.__init__": [[283, 307], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet.I3Res50._make_layer", "resnet.I3Res50._make_layer", "resnet.I3Res50._make_layer", "resnet.I3Res50._make_layer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.I3Res50.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "400", ",", "use_nl", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "I3Res50", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "5", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "2", ",", "3", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "nonlocal_mod", "=", "2", "if", "use_nl", "else", "1000", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "temp_conv", "=", "[", "1", ",", "1", ",", "1", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "1", ",", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "nonlocal_mod", "=", "nonlocal_mod", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "nonlocal_mod", "=", "nonlocal_mod", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50._make_layer": [[308, 323], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "temp_conv", ",", "temp_stride", ",", "nonlocal_mod", "=", "1000", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "temp_stride", "[", "0", "]", "!=", "1", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "temp_stride", "[", "0", "]", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "temp_conv", "[", "0", "]", ",", "temp_stride", "[", "0", "]", ",", "False", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "temp_conv", "[", "i", "]", ",", "temp_stride", "[", "i", "]", ",", "i", "%", "nonlocal_mod", "==", "nonlocal_mod", "-", "1", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50.forward_single": [[324, 342], ["resnet.I3Res50.conv1", "resnet.I3Res50.bn1", "resnet.I3Res50.relu", "resnet.I3Res50.maxpool1", "resnet.I3Res50.layer1", "resnet.I3Res50.maxpool2", "resnet.I3Res50.layer2", "resnet.I3Res50.layer3", "resnet.I3Res50.layer4", "resnet.I3Res50.avgpool", "resnet.I3Res50.drop", "resnet.I3Res50.view", "resnet.I3Res50.fc"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50.forward_multi": [[343, 355], ["range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "resnet.I3Res50.forward_single", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single"], ["", "def", "forward_multi", "(", "self", ",", "x", ")", ":", "\n", "        ", "clip_preds", "=", "[", "]", "\n", "for", "clip_idx", "in", "range", "(", "x", ".", "shape", "[", "1", "]", ")", ":", "# B, 10, 3, 3, 32, 224, 224", "\n", "            ", "spatial_crops", "=", "[", "]", "\n", "for", "crop_idx", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "clip", "=", "x", "[", ":", ",", "clip_idx", ",", "crop_idx", "]", "\n", "clip", "=", "self", ".", "forward_single", "(", "clip", ")", "\n", "spatial_crops", ".", "append", "(", "clip", ")", "\n", "", "spatial_crops", "=", "torch", ".", "stack", "(", "spatial_crops", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "clip_preds", ".", "append", "(", "spatial_crops", ")", "\n", "", "clip_preds", "=", "torch", ".", "stack", "(", "clip_preds", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "return", "clip_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50.forward": [[356, 372], ["batch[].dim", "resnet.I3Res50.forward_single", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "batch[].dim", "resnet.I3Res50.forward_multi"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_multi"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\n", "# 5D tensor == single clip", "\n", "        ", "if", "batch", "[", "'frames'", "]", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "pred", "=", "self", ".", "forward_single", "(", "batch", "[", "'frames'", "]", ")", "\n", "\n", "# 7D tensor == 3 crops/10 clips", "\n", "", "elif", "batch", "[", "'frames'", "]", ".", "dim", "(", ")", "==", "7", ":", "\n", "            ", "pred", "=", "self", ".", "forward_multi", "(", "batch", "[", "'frames'", "]", ")", "\n", "\n", "", "loss_dict", "=", "{", "}", "\n", "if", "'label'", "in", "batch", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "batch", "[", "'label'", "]", ",", "reduction", "=", "'none'", ")", "\n", "loss_dict", "=", "{", "'loss'", ":", "loss", "}", "\n", "\n", "", "return", "pred", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new.__init__": [[375, 399], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet.I3Res50_new._make_layer", "resnet.I3Res50_new._make_layer", "resnet.I3Res50_new._make_layer", "resnet.I3Res50_new._make_layer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.I3Res50_new.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "400", ",", "use_nl", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "I3Res50_new", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "5", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "2", ",", "3", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "nonlocal_mod", "=", "2", "if", "use_nl", "else", "1000", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "temp_conv", "=", "[", "1", ",", "1", ",", "1", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "1", ",", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "nonlocal_mod", "=", "nonlocal_mod", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new._make_layer": [[400, 415], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "temp_conv", ",", "temp_stride", ",", "nonlocal_mod", "=", "1000", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "temp_stride", "[", "0", "]", "!=", "1", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "temp_stride", "[", "0", "]", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "temp_conv", "[", "0", "]", ",", "temp_stride", "[", "0", "]", ",", "False", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "temp_conv", "[", "i", "]", ",", "temp_stride", "[", "i", "]", ",", "i", "%", "nonlocal_mod", "==", "nonlocal_mod", "-", "1", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new.forward_single": [[416, 434], ["resnet.I3Res50_new.conv1", "resnet.I3Res50_new.bn1", "resnet.I3Res50_new.relu", "resnet.I3Res50_new.maxpool1", "resnet.I3Res50_new.layer1", "resnet.I3Res50_new.maxpool2", "resnet.I3Res50_new.layer2", "resnet.I3Res50_new.layer3", "resnet.I3Res50_new.layer4", "resnet.I3Res50_new.avgpool", "resnet.I3Res50_new.drop", "resnet.I3Res50_new.view", "resnet.I3Res50_new.fc"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new.forward_multi": [[435, 447], ["range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "resnet.I3Res50_new.forward_single", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single"], ["", "def", "forward_multi", "(", "self", ",", "x", ")", ":", "\n", "        ", "clip_preds", "=", "[", "]", "\n", "for", "clip_idx", "in", "range", "(", "x", ".", "shape", "[", "1", "]", ")", ":", "# B, 10, 3, 3, 32, 224, 224", "\n", "            ", "spatial_crops", "=", "[", "]", "\n", "for", "crop_idx", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "clip", "=", "x", "[", ":", ",", "clip_idx", ",", "crop_idx", "]", "\n", "clip", "=", "self", ".", "forward_single", "(", "clip", ")", "\n", "spatial_crops", ".", "append", "(", "clip", ")", "\n", "", "spatial_crops", "=", "torch", ".", "stack", "(", "spatial_crops", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "clip_preds", ".", "append", "(", "spatial_crops", ")", "\n", "", "clip_preds", "=", "torch", ".", "stack", "(", "clip_preds", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "return", "clip_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new.forward": [[448, 464], ["batch[].dim", "resnet.I3Res50_new.forward_single", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "batch[].dim", "resnet.I3Res50_new.forward_multi"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_multi"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\n", "# 5D tensor == single clip", "\n", "        ", "if", "batch", "[", "'frames'", "]", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "pred", "=", "self", ".", "forward_single", "(", "batch", "[", "'frames'", "]", ")", "\n", "\n", "# 7D tensor == 3 crops/10 clips", "\n", "", "elif", "batch", "[", "'frames'", "]", ".", "dim", "(", ")", "==", "7", ":", "\n", "            ", "pred", "=", "self", ".", "forward_multi", "(", "batch", "[", "'frames'", "]", ")", "\n", "\n", "", "loss_dict", "=", "{", "}", "\n", "if", "'label'", "in", "batch", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "batch", "[", "'label'", "]", ",", "reduction", "=", "'none'", ")", "\n", "loss_dict", "=", "{", "'loss'", ":", "loss", "}", "\n", "\n", "", "return", "pred", ",", "loss_dict", "\n", "#-----------------------------------------------------------------------------------------------#", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test.__init__": [[593, 633], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet.I3Res50_new_test._make_layer", "resnet.I3Res50_new_test._make_layer", "resnet.I3Res50_new_test._make_layer", "resnet.I3Res50_new_test._make_layer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.I3Res50_new_test.modules", "int", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "Bottleneck_test", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "400", ",", "use_nl", "=", "False", ")", ":", "\n", "        ", "arc_type", "=", "2", "\n", "if", "arc_type", "==", "2", ":", "\n", "            ", "use_temp_convs_1", "=", "[", "2", "]", "\n", "temp_strides_1", "=", "[", "1", "]", "\n", "use_temp_convs_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "temp_strides_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_3", "=", "[", "1", ",", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_3", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_4", "=", "[", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_4", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_5", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_5", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "\n", "pool_stride", "=", "int", "(", "8", "/", "2", ")", "\n", "use_temp_convs_set", "=", "[", "use_temp_convs_1", ",", "use_temp_convs_2", ",", "use_temp_convs_3", ",", "use_temp_convs_4", ",", "use_temp_convs_5", "]", "\n", "temp_strides_set", "=", "[", "temp_strides_1", ",", "temp_strides_2", ",", "temp_strides_3", ",", "temp_strides_4", ",", "temp_strides_5", "]", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "I3Res50_new_test", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "5", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "[", "2", ",", "3", ",", "3", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "nonlocal_mod", "=", "2", "if", "use_nl", "else", "1000", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "temp_conv", "=", "[", "1", ",", "1", ",", "1", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "1", ",", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "nonlocal_mod", "=", "nonlocal_mod", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test._make_layer": [[634, 649], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "temp_conv", ",", "temp_stride", ",", "nonlocal_mod", "=", "1000", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "temp_stride", "[", "0", "]", "!=", "1", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "temp_stride", "[", "0", "]", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "temp_conv", "[", "0", "]", ",", "temp_stride", "[", "0", "]", ",", "False", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "temp_conv", "[", "i", "]", ",", "temp_stride", "[", "i", "]", ",", "i", "%", "nonlocal_mod", "==", "nonlocal_mod", "-", "1", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test.forward_single": [[650, 668], ["resnet.I3Res50_new_test.conv1", "resnet.I3Res50_new_test.bn1", "resnet.I3Res50_new_test.relu", "resnet.I3Res50_new_test.maxpool1", "resnet.I3Res50_new_test.layer1", "resnet.I3Res50_new_test.maxpool2", "resnet.I3Res50_new_test.layer2", "resnet.I3Res50_new_test.layer3", "resnet.I3Res50_new_test.layer4", "resnet.I3Res50_new_test.avgpool", "resnet.I3Res50_new_test.drop", "resnet.I3Res50_new_test.view", "resnet.I3Res50_new_test.fc"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", ""]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test.forward_layer3": [[695, 707], ["resnet.I3Res50_new_test.conv1", "resnet.I3Res50_new_test.bn1", "resnet.I3Res50_new_test.relu", "resnet.I3Res50_new_test.maxpool1", "resnet.I3Res50_new_test.layer1", "resnet.I3Res50_new_test.maxpool2", "resnet.I3Res50_new_test.layer2", "resnet.I3Res50_new_test.layer3"], "methods", ["None"], ["def", "forward_layer3", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "def", "forward_multi", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test.forward_multi": [[707, 719], ["range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "resnet.I3Res50_new_test.forward_single", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single"], ["", "def", "forward_multi", "(", "self", ",", "x", ")", ":", "\n", "        ", "clip_preds", "=", "[", "]", "\n", "for", "clip_idx", "in", "range", "(", "x", ".", "shape", "[", "1", "]", ")", ":", "# B, 10, 3, 3, 32, 224, 224", "\n", "            ", "spatial_crops", "=", "[", "]", "\n", "for", "crop_idx", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "clip", "=", "x", "[", ":", ",", "clip_idx", ",", "crop_idx", "]", "\n", "clip", "=", "self", ".", "forward_single", "(", "clip", ")", "\n", "spatial_crops", ".", "append", "(", "clip", ")", "\n", "", "spatial_crops", "=", "torch", ".", "stack", "(", "spatial_crops", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "clip_preds", ".", "append", "(", "spatial_crops", ")", "\n", "", "clip_preds", "=", "torch", ".", "stack", "(", "clip_preds", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "return", "clip_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test.forward": [[720, 736], ["batch[].dim", "resnet.I3Res50_new_test.forward_single", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "batch[].dim", "resnet.I3Res50_new_test.forward_multi"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_multi"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\n", "# 5D tensor == single clip", "\n", "        ", "if", "batch", "[", "'frames'", "]", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "pred", "=", "self", ".", "forward_single", "(", "batch", "[", "'frames'", "]", ")", "\n", "\n", "# 7D tensor == 3 crops/10 clips", "\n", "", "elif", "batch", "[", "'frames'", "]", ".", "dim", "(", ")", "==", "7", ":", "\n", "            ", "pred", "=", "self", ".", "forward_multi", "(", "batch", "[", "'frames'", "]", ")", "\n", "\n", "", "loss_dict", "=", "{", "}", "\n", "if", "'label'", "in", "batch", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "batch", "[", "'label'", "]", ",", "reduction", "=", "'none'", ")", "\n", "loss_dict", "=", "{", "'loss'", ":", "loss", "}", "\n", "\n", "", "return", "pred", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.__init__": [[739, 779], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet.I3Res50_new_test_1block._make_layer", "resnet.I3Res50_new_test_1block._make_layer", "resnet.I3Res50_new_test_1block._make_layer", "resnet.I3Res50_new_test_1block._make_layer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.I3Res50_new_test_1block.modules", "int", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "Bottleneck_test", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "400", ",", "use_nl", "=", "False", ")", ":", "\n", "        ", "arc_type", "=", "2", "\n", "if", "arc_type", "==", "2", ":", "\n", "            ", "use_temp_convs_1", "=", "[", "2", "]", "\n", "temp_strides_1", "=", "[", "1", "]", "\n", "use_temp_convs_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "temp_strides_2", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_3", "=", "[", "1", ",", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_3", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_4", "=", "[", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_4", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "use_temp_convs_5", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "temp_strides_5", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "\n", "pool_stride", "=", "int", "(", "8", "/", "2", ")", "\n", "use_temp_convs_set", "=", "[", "use_temp_convs_1", ",", "use_temp_convs_2", ",", "use_temp_convs_3", ",", "use_temp_convs_4", ",", "use_temp_convs_5", "]", "\n", "temp_strides_set", "=", "[", "temp_strides_1", ",", "temp_strides_2", ",", "temp_strides_3", ",", "temp_strides_4", ",", "temp_strides_5", "]", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "I3Res50_new_test_1block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "5", ",", "7", ",", "7", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "[", "2", ",", "3", ",", "3", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "nonlocal_mod", "=", "5", "if", "use_nl", "else", "1000", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "temp_conv", "=", "[", "1", ",", "1", ",", "1", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "1", ",", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "nonlocal_mod", "=", "nonlocal_mod", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "temp_conv", "=", "[", "0", ",", "1", ",", "0", "]", ",", "temp_stride", "=", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block._make_layer": [[780, 795], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "temp_conv", ",", "temp_stride", ",", "nonlocal_mod", "=", "1000", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "temp_stride", "[", "0", "]", "!=", "1", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "temp_stride", "[", "0", "]", ",", "stride", ",", "stride", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "temp_conv", "[", "0", "]", ",", "temp_stride", "[", "0", "]", ",", "False", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "temp_conv", "[", "i", "]", ",", "temp_stride", "[", "i", "]", ",", "i", "%", "nonlocal_mod", "==", "nonlocal_mod", "-", "5", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single": [[796, 814], ["resnet.I3Res50_new_test_1block.conv1", "resnet.I3Res50_new_test_1block.bn1", "resnet.I3Res50_new_test_1block.relu", "resnet.I3Res50_new_test_1block.maxpool1", "resnet.I3Res50_new_test_1block.layer1", "resnet.I3Res50_new_test_1block.maxpool2", "resnet.I3Res50_new_test_1block.layer2", "resnet.I3Res50_new_test_1block.layer3", "resnet.I3Res50_new_test_1block.layer4", "resnet.I3Res50_new_test_1block.avgpool", "resnet.I3Res50_new_test_1block.drop", "resnet.I3Res50_new_test_1block.view", "resnet.I3Res50_new_test_1block.fc"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", ""]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_layer3": [[841, 853], ["resnet.I3Res50_new_test_1block.conv1", "resnet.I3Res50_new_test_1block.bn1", "resnet.I3Res50_new_test_1block.relu", "resnet.I3Res50_new_test_1block.maxpool1", "resnet.I3Res50_new_test_1block.layer1", "resnet.I3Res50_new_test_1block.maxpool2", "resnet.I3Res50_new_test_1block.layer2", "resnet.I3Res50_new_test_1block.layer3"], "methods", ["None"], ["def", "forward_layer3", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "def", "forward_multi", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_multi": [[853, 865], ["range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "resnet.I3Res50_new_test_1block.forward_single", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack().mean.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single"], ["", "def", "forward_multi", "(", "self", ",", "x", ")", ":", "\n", "        ", "clip_preds", "=", "[", "]", "\n", "for", "clip_idx", "in", "range", "(", "x", ".", "shape", "[", "1", "]", ")", ":", "# B, 10, 3, 3, 32, 224, 224", "\n", "            ", "spatial_crops", "=", "[", "]", "\n", "for", "crop_idx", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "clip", "=", "x", "[", ":", ",", "clip_idx", ",", "crop_idx", "]", "\n", "clip", "=", "self", ".", "forward_single", "(", "clip", ")", "\n", "spatial_crops", ".", "append", "(", "clip", ")", "\n", "", "spatial_crops", "=", "torch", ".", "stack", "(", "spatial_crops", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "clip_preds", ".", "append", "(", "spatial_crops", ")", "\n", "", "clip_preds", "=", "torch", ".", "stack", "(", "clip_preds", ",", "1", ")", ".", "mean", "(", "1", ")", "# (B, 400)", "\n", "return", "clip_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward": [[866, 882], ["batch[].dim", "resnet.I3Res50_new_test_1block.forward_single", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "batch[].dim", "resnet.I3Res50_new_test_1block.forward_multi"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_single", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.I3Res50_new_test_1block.forward_multi"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\n", "# 5D tensor == single clip", "\n", "        ", "if", "batch", "[", "'frames'", "]", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "pred", "=", "self", ".", "forward_single", "(", "batch", "[", "'frames'", "]", ")", "\n", "\n", "# 7D tensor == 3 crops/10 clips", "\n", "", "elif", "batch", "[", "'frames'", "]", ".", "dim", "(", ")", "==", "7", ":", "\n", "            ", "pred", "=", "self", ".", "forward_multi", "(", "batch", "[", "'frames'", "]", ")", "\n", "\n", "", "loss_dict", "=", "{", "}", "\n", "if", "'label'", "in", "batch", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "batch", "[", "'label'", "]", ",", "reduction", "=", "'none'", ")", "\n", "loss_dict", "=", "{", "'loss'", ":", "loss", "}", "\n", "\n", "", "return", "pred", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__": [[927, 941], ["torch.Module.__init__", "resnet.i3_res50_nl_new", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.__init__", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.i3_res50_nl_new"], ["    ", "def", "__init__", "(", "self", ")", ":", "# input the dim of output fea-map of Resnet:", "\n", "        ", "super", "(", "MyModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "i3_res50_nl_new", "(", "400", ")", "\n", "num_ftrs", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "8", ")", "\n", "\n", "# add_block = []", "\n", "# add_block += [nn.Linear(2048, 512)]", "\n", "# add_block += [nn.LeakyReLU(inplace=True)]", "\n", "# add_block = nn.Sequential(*add_block)", "\n", "# add_block.apply(weights_init_xavier)", "\n", "\n", "self", ".", "newmodel", "=", "model", ".", "module", ".", "layer3", "\n", "# self.add_block = add_block", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.MyModel.forward": [[944, 948], ["resnet.MyModel.newmodel"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "newmodel", "(", "input", ")", "\n", "##### \u5173\u952e\u6b65\u9aa4 #####", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.freeze_bn": [[34, 43], ["dir", "m.named_children", "getattr", "resnet.freeze_bn", "type", "resnet.FrozenBN", "resnet.FrozenBN.set_params", "setattr"], "function", ["home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.freeze_bn", "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.FrozenBN.set_params"], ["", "", "def", "freeze_bn", "(", "m", ",", "name", ")", ":", "\n", "    ", "for", "attr_str", "in", "dir", "(", "m", ")", ":", "\n", "        ", "target_attr", "=", "getattr", "(", "m", ",", "attr_str", ")", "\n", "if", "type", "(", "target_attr", ")", "==", "torch", ".", "nn", ".", "BatchNorm3d", ":", "\n", "            ", "frozen_bn", "=", "FrozenBN", "(", "target_attr", ".", "num_features", ",", "target_attr", ".", "momentum", ",", "target_attr", ".", "eps", ")", "\n", "frozen_bn", ".", "set_params", "(", "target_attr", ".", "weight", ".", "data", ",", "target_attr", ".", "bias", ".", "data", ",", "target_attr", ".", "running_mean", ",", "target_attr", ".", "running_var", ")", "\n", "setattr", "(", "m", ",", "attr_str", ",", "frozen_bn", ")", "\n", "", "", "for", "n", ",", "ch", "in", "m", ".", "named_children", "(", ")", ":", "\n", "        ", "freeze_bn", "(", "ch", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.i3_res50": [[883, 889], ["resnet.I3Res50", "torch.load", "torch.load", "torch.load", "I3Res50.load_state_dict"], "function", ["None"], ["", "", "def", "i3_res50", "(", "num_classes", ")", ":", "\n", "    ", "net", "=", "I3Res50", "(", "num_classes", "=", "num_classes", ",", "use_nl", "=", "False", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "'pretrained/i3d_r50_kinetics.pth'", ")", "\n", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# freeze_bn(net, \"net\") # Only needed for finetuning. For validation, .eval() works.", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.i3_res50_nl": [[890, 897], ["resnet.I3Res50", "torch.load", "torch.load", "torch.load", "I3Res50.load_state_dict"], "function", ["None"], ["", "def", "i3_res50_nl", "(", "num_classes", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "net", "=", "I3Res50", "(", "num_classes", "=", "num_classes", ",", "use_nl", "=", "True", ")", "\n", "if", "pretrained", "is", "True", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "'pretrained/i3d_r50_nl_kinetics.pth'", ")", "\n", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# freeze_bn(net, \"net\") # Only needed for finetuning. For validation, .eval() works.", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.i3_res50_nl_new": [[898, 905], ["resnet.I3Res50_new", "torch.load", "torch.load", "torch.load", "I3Res50_new.load_state_dict"], "function", ["None"], ["", "def", "i3_res50_nl_new", "(", "num_classes", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "net", "=", "I3Res50_new", "(", "num_classes", "=", "num_classes", ",", "use_nl", "=", "True", ")", "\n", "if", "pretrained", "is", "True", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "'pretrained/i3d_r50_nl_kinetics.pth'", ")", "\n", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# freeze_bn(net, \"net\") # Only needed for finetuning. For validation, .eval() works.", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.i3_res50_nl_new_test": [[906, 913], ["resnet.I3Res50_new_test", "torch.load", "torch.load", "torch.load", "I3Res50_new_test.load_state_dict"], "function", ["None"], ["", "def", "i3_res50_nl_new_test", "(", "num_classes", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "net", "=", "I3Res50_new_test", "(", "num_classes", "=", "num_classes", ",", "use_nl", "=", "True", ")", "\n", "if", "pretrained", "is", "True", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "'pretrained/i3d_r50_nl_kinetics.pth'", ")", "\n", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# freeze_bn(net, \"net\") # Only needed for finetuning. For validation, .eval() works.", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.xmichelleshihx_AL-LRTD.models.resnet.i3_res50_nl_new_test_1block": [[914, 921], ["resnet.I3Res50_new_test_1block", "torch.load", "torch.load", "torch.load", "I3Res50_new_test_1block.load_state_dict"], "function", ["None"], ["", "def", "i3_res50_nl_new_test_1block", "(", "num_classes", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "net", "=", "I3Res50_new_test_1block", "(", "num_classes", "=", "num_classes", ",", "use_nl", "=", "True", ")", "\n", "if", "pretrained", "is", "True", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "'pretrained/i3d_r50_nl_kinetics.pth'", ")", "\n", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# freeze_bn(net, \"net\") # Only needed for finetuning. For validation, .eval() works.", "\n", "", "return", "net", "\n", "# if __name__=='__main__':", "\n"]]}