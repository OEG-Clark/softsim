{"home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.__init__": [[15, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "conf", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "conf", "=", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.run": [[19, 23], ["enumerate", "log.info", "model_tester.ModelTester.test_modality"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.test_modality"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "modi", ",", "mod", "in", "enumerate", "(", "self", ".", "model", ".", "modalities", ")", ":", "\n", "            ", "log", ".", "info", "(", "'Evaluating model on test data for %s'", "%", "mod", ")", "\n", "self", ".", "test_modality", "(", "mod", ",", "modi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.make_test_folder": [[24, 29], ["os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "", "def", "make_test_folder", "(", "self", ",", "modality", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "conf", ".", "folder", ",", "'test_results_%s_%s_%s'", "%", "(", "self", ".", "conf", ".", "test_dataset", ",", "modality", ",", "suffix", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "return", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.test_modality": [[30, 48], ["loaders.loader_factory.init_loader", "loaders.loader_factory.init_loader.load_all_modalities_concatenated", "loader_factory.init_loader.load_all_modalities_concatenated.crop", "loader_factory.init_loader.load_all_modalities_concatenated.randomise_pairs", "model_tester.ModelTester.make_test_folder", "model_tester.ModelTester.test_modality_type", "model_tester.ModelTester.make_test_folder", "model_tester.ModelTester.test_modality_type"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.loader_factory.init_loader", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.crop", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.randomise_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.make_test_folder", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.test_modality_type", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.make_test_folder", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.test_modality_type"], ["", "def", "test_modality", "(", "self", ",", "modality", ",", "modality_index", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate model on a given modality\n        :param modality: the modality to load\n        \"\"\"", "\n", "test_loader", "=", "loader_factory", ".", "init_loader", "(", "self", ".", "conf", ".", "test_dataset", ")", "\n", "test_loader", ".", "modalities", "=", "self", ".", "conf", ".", "modality", "\n", "test_data", "=", "test_loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "'test'", ",", "self", ".", "conf", ".", "image_downsample", ")", "\n", "test_data", ".", "crop", "(", "self", ".", "conf", ".", "input_shape", "[", ":", "2", "]", ")", "# crop data to input shape", "\n", "\n", "for", "type", "in", "[", "'simple'", ",", "'def'", ",", "'max'", "]", ":", "\n", "            ", "folder", "=", "self", ".", "make_test_folder", "(", "modality", ",", "suffix", "=", "type", ")", "\n", "self", ".", "test_modality_type", "(", "folder", ",", "modality_index", ",", "type", ",", "test_loader", ",", "test_data", ")", "\n", "\n", "", "test_data", ".", "randomise_pairs", "(", "length", "=", "2", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "for", "type", "in", "[", "'simple'", ",", "'def'", ",", "'max'", "]", ":", "\n", "            ", "folder", "=", "self", ".", "make_test_folder", "(", "modality", ",", "suffix", "=", "type", "+", "'_rand'", ")", "\n", "self", ".", "test_modality_type", "(", "folder", ",", "modality_index", ",", "type", ",", "test_loader", ",", "test_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.test_modality_type": [[49, 86], ["os.path.join", "open", "open.writelines", "test_data.volumes", "print", "open.close", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "test_data.get_volume_images_modi", "test_data.get_volume_images_modi", "test_data.get_volume_masks_modi", "model_tester.ModelTester.model.predict_mask", "synth.append", "costs.dice", "open.writelines", "model_tester.ModelTester.plot_images", "os.path.exists", "os.makedirs", "costs.dice", "tuple", "str", "range", "str", "numpy.mean", "list", "im_dice.values", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.predict_mask", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.plot_images", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice"], ["", "", "def", "test_modality_type", "(", "self", ",", "folder", ",", "modality_index", ",", "type", ",", "test_loader", ",", "test_data", ")", ":", "\n", "        ", "assert", "type", "in", "[", "'simple'", ",", "'def'", ",", "'max'", ",", "'maxnostn'", "]", "\n", "\n", "samples", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'samples'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "samples", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "samples", ")", "\n", "\n", "", "synth", "=", "[", "]", "\n", "im_dice", "=", "{", "}", "\n", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'results.csv'", ")", ",", "'w'", ")", "\n", "f", ".", "writelines", "(", "'Vol, Dice, '", "+", "', '", ".", "join", "(", "[", "'Dice%d'", "%", "mi", "for", "mi", "in", "range", "(", "test_loader", ".", "num_masks", ")", "]", ")", "+", "'\\n'", ")", "\n", "for", "vol_i", "in", "test_data", ".", "volumes", "(", ")", ":", "\n", "            ", "vol_folder", "=", "os", ".", "path", ".", "join", "(", "samples", ",", "'vol_%s'", "%", "str", "(", "vol_i", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "vol_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "vol_folder", ")", "\n", "\n", "", "vol_image_mod1", "=", "test_data", ".", "get_volume_images_modi", "(", "0", ",", "vol_i", ")", "\n", "vol_image_mod2", "=", "test_data", ".", "get_volume_images_modi", "(", "1", ",", "vol_i", ")", "\n", "assert", "vol_image_mod1", ".", "shape", "[", "0", "]", ">", "0", "\n", "\n", "vol_mask", "=", "test_data", ".", "get_volume_masks_modi", "(", "modality_index", ",", "vol_i", ")", "\n", "prd_mask", "=", "self", ".", "model", ".", "predict_mask", "(", "modality_index", ",", "type", ",", "[", "vol_image_mod1", ",", "vol_image_mod2", "]", ")", "\n", "\n", "synth", ".", "append", "(", "prd_mask", ")", "\n", "im_dice", "[", "vol_i", "]", "=", "costs", ".", "dice", "(", "vol_mask", ",", "prd_mask", ",", "binarise", "=", "True", ")", "\n", "sep_dice", "=", "[", "costs", ".", "dice", "(", "vol_mask", "[", "...", ",", "mi", ":", "mi", "+", "1", "]", ",", "prd_mask", "[", "...", ",", "mi", ":", "mi", "+", "1", "]", ",", "binarise", "=", "True", ")", "\n", "for", "mi", "in", "range", "(", "test_loader", ".", "num_masks", ")", "]", "\n", "\n", "s", "=", "'%s, %.3f, '", "+", "', '", ".", "join", "(", "[", "'%.3f'", "]", "*", "test_loader", ".", "num_masks", ")", "+", "'\\n'", "\n", "d", "=", "(", "str", "(", "vol_i", ")", ",", "im_dice", "[", "vol_i", "]", ")", "+", "tuple", "(", "sep_dice", ")", "\n", "f", ".", "writelines", "(", "s", "%", "d", ")", "\n", "\n", "self", ".", "plot_images", "(", "samples", ",", "vol_i", ",", "modality_index", ",", "prd_mask", ",", "vol_mask", ",", "[", "vol_image_mod1", ",", "vol_image_mod2", "]", ")", "\n", "\n", "", "print", "(", "'%s - Dice score: %.3f'", "%", "(", "type", ",", "np", ".", "mean", "(", "list", "(", "im_dice", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.model_tester.ModelTester.plot_images": [[87, 103], ["range", "os.path.join", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "scipy.misc.imsave", "os.path.exists", "os.makedirs", "os.path.join", "str", "range", "range", "str"], "methods", ["None"], ["", "def", "plot_images", "(", "self", ",", "samples", ",", "vol_i", ",", "modality_index", ",", "prd_mask", ",", "vol_mask", ",", "image_list", ")", ":", "\n", "        ", "vol_image_mod2", "=", "image_list", "[", "modality_index", "]", "\n", "\n", "for", "i", "in", "range", "(", "vol_image_mod2", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "vol_folder", "=", "os", ".", "path", ".", "join", "(", "samples", ",", "'vol_%s'", "%", "str", "(", "vol_i", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "vol_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "vol_folder", ")", "\n", "\n", "", "row1", "=", "[", "vol_image_mod2", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", "+", "[", "prd_mask", "[", "i", ",", ":", ",", ":", ",", "j", "]", "for", "j", "in", "range", "(", "vol_mask", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "row2", "=", "[", "vol_image_mod2", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", "+", "[", "vol_mask", "[", "i", ",", ":", ",", ":", ",", "j", "]", "for", "j", "in", "range", "(", "vol_mask", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "\n", "row1", "=", "np", ".", "concatenate", "(", "row1", ",", "axis", "=", "1", ")", "\n", "row2", "=", "np", ".", "concatenate", "(", "row2", ",", "axis", "=", "1", ")", "\n", "im", "=", "np", ".", "concatenate", "(", "[", "row1", ",", "row2", "]", ",", "axis", "=", "0", ")", "\n", "\n", "scipy", ".", "misc", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "vol_folder", ",", "'test_vol%s_im%d.png'", "%", "(", "str", "(", "vol_i", ")", ",", "i", ")", ")", ",", "im", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "log", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.init_logging": [[21, 30], ["logging.basicConfig", "logging.getLogger().addHandler", "logging.getLogger", "experiment.Experiment.log.debug", "experiment.Experiment.log.info", "os.path.exists", "os.makedirs", "logging.StreamHandler", "config.items", "logging.getLogger"], "methods", ["None"], ["", "def", "init_logging", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "config", ".", "folder", ")", "\n", "", "logging", ".", "basicConfig", "(", "filename", "=", "config", ".", "folder", "+", "'/logfile.log'", ",", "level", "=", "logging", ".", "DEBUG", ",", "format", "=", "'%(asctime)s %(message)s'", ")", "\n", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "\n", "self", ".", "log", "=", "logging", ".", "getLogger", "(", ")", "\n", "self", ".", "log", ".", "debug", "(", "config", ".", "items", "(", ")", ")", "\n", "self", ".", "log", ".", "info", "(", "'---- Setting up experiment at '", "+", "config", ".", "folder", "+", "'----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.get_config": [[31, 73], ["importlib.import_module().get", "easydict.EasyDict", "hasattr", "easydict.EasyDict.folder.replace", "experiment.Experiment.save_config", "float", "str", "print", "importlib.import_module", "hasattr", "hasattr", "hasattr", "hasattr", "git.Repo"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.configuration.dafnet_config_chaos.get", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.save_config"], ["", "def", "get_config", "(", "self", ",", "split", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Read a config file and convert it into an object for easy processing.\n        :param split: the cross-validation split id\n        :param args:  the command arguments\n        :return: config object(namespace)\n        \"\"\"", "\n", "config_script", "=", "args", ".", "config", "\n", "\n", "config_dict", "=", "importlib", ".", "import_module", "(", "'configuration.'", "+", "config_script", ")", ".", "get", "(", ")", "\n", "config", "=", "EasyDict", "(", "config_dict", ")", "\n", "config", ".", "split", "=", "split", "\n", "\n", "if", "(", "hasattr", "(", "config", ",", "'randomise'", ")", "and", "config", ".", "randomise", ")", "or", "(", "hasattr", "(", "args", ",", "'randomise'", ")", "and", "args", ".", "randomise", ")", ":", "\n", "            ", "config", ".", "randomise", "=", "True", "\n", "config", ".", "folder", "+=", "'_randomise'", "\n", "\n", "", "config", ".", "n_pairs", "=", "1", "\n", "if", "(", "hasattr", "(", "config", ",", "'automatedpairing'", ")", "and", "config", ".", "automatedpairing", ")", "or", "(", "hasattr", "(", "args", ",", "'automatedpairing'", ")", "and", "args", ".", "automatedpairing", ")", ":", "\n", "            ", "config", ".", "automatedpairing", "=", "True", "\n", "config", ".", "folder", "+=", "'_automatedpairing'", "\n", "config", ".", "n_pairs", "=", "3", "\n", "\n", "", "l_mix", "=", "config", ".", "l_mix", "\n", "if", "hasattr", "(", "args", ",", "'l_mix'", ")", ":", "\n", "            ", "config", ".", "l_mix", "=", "float", "(", "args", ".", "l_mix", ")", "\n", "l_mix", "=", "args", ".", "l_mix", "\n", "", "config", ".", "folder", "+=", "'_l%s'", "%", "l_mix", "\n", "\n", "config", ".", "folder", "+=", "'_'", "+", "str", "(", "config", ".", "modality", ")", "\n", "config", ".", "folder", "+=", "'_split%s'", "%", "split", "\n", "config", ".", "folder", "=", "config", ".", "folder", ".", "replace", "(", "'.'", ",", "''", ")", "\n", "\n", "if", "args", ".", "test_dataset", ":", "\n", "            ", "print", "(", "'Overriding default test dataset'", ")", "\n", "config", ".", "test_dataset", "=", "args", ".", "test_dataset", "\n", "\n", "", "config", ".", "githash", "=", "git", ".", "Repo", "(", "search_parent_directories", "=", "True", ")", ".", "head", ".", "object", ".", "hexsha", "\n", "\n", "self", ".", "save_config", "(", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.save_config": [[74, 79], ["os.path.exists", "os.makedirs", "open", "json.dump", "dict", "config.items"], "methods", ["None"], ["", "def", "save_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "config", ".", "folder", ")", "\n", "", "with", "open", "(", "config", ".", "folder", "+", "'/experiment_configuration.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "dict", "(", "config", ".", "items", "(", ")", ")", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.run": [[80, 85], ["experiment.Experiment.read_console_parameters", "experiment.Experiment.get_config", "experiment.Experiment.init_logging", "experiment.Experiment.run_experiment", "int"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.read_console_parameters", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.Spectral.get_config", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.init_logging", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.run_experiment"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "args", "=", "Experiment", ".", "read_console_parameters", "(", ")", "\n", "configuration", "=", "self", ".", "get_config", "(", "int", "(", "args", ".", "split", ")", ",", "args", ")", "\n", "self", ".", "init_logging", "(", "configuration", ")", "\n", "self", ".", "run_experiment", "(", "configuration", ",", "args", ".", "test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.run_experiment": [[86, 99], ["experiment.Experiment.get_executor", "experiment.Experiment.test", "experiment.Experiment.train", "experiment.Experiment.test", "isinstance", "open", "json.dump", "int", "vars"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.get_executor", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.test", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.test"], ["", "def", "run_experiment", "(", "self", ",", "configuration", ",", "test", ")", ":", "\n", "        ", "executor", "=", "self", ".", "get_executor", "(", "configuration", ",", "test", ")", "\n", "\n", "if", "test", ":", "\n", "            ", "executor", ".", "test", "(", ")", "\n", "", "else", ":", "\n", "            ", "executor", ".", "train", "(", ")", "\n", "def", "default", "(", "o", ")", ":", "\n", "                ", "if", "isinstance", "(", "o", ",", "numpy", ".", "int64", ")", ":", "return", "int", "(", "o", ")", "\n", "raise", "TypeError", "\n", "", "with", "open", "(", "configuration", ".", "folder", "+", "'/experiment_configuration.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "                ", "json", ".", "dump", "(", "vars", "(", "configuration", ")", ",", "outfile", ",", "default", "=", "default", ")", "\n", "", "executor", ".", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.read_console_parameters": [[100, 112], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "read_console_parameters", "(", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "default", "=", "''", ",", "help", "=", "'The experiment configuration file'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "help", "=", "'Evaluate the model on test data'", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--test_dataset'", ",", "help", "=", "'Override default test dataset'", ",", "choices", "=", "[", "'chaos'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "help", "=", "'Data split to run.'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--l_mix'", ",", "help", "=", "'Percentage of labelled data'", ")", "\n", "parser", ".", "add_argument", "(", "'--automatedpairing'", ",", "help", "=", "'Use weighted cost for training'", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--randomise'", ",", "help", "=", "'Randomise multimodal pairs'", ",", "type", "=", "bool", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.get_executor": [[113, 125], ["model.build", "config.model.split", "config.model.split", "getattr", "config.executor.split", "config.executor.split", "getattr", "importlib.import_module", "importlib.import_module"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build"], ["", "def", "get_executor", "(", "self", ",", "config", ",", "test", ")", ":", "\n", "# Initialise model", "\n", "        ", "module_name", "=", "config", ".", "model", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "model_name", "=", "config", ".", "model", ".", "split", "(", "'.'", ")", "[", "1", "]", "\n", "model", "=", "getattr", "(", "importlib", ".", "import_module", "(", "'models.'", "+", "module_name", ")", ",", "model_name", ")", "(", "config", ")", "\n", "model", ".", "build", "(", ")", "\n", "\n", "# Initialise executor", "\n", "module_name", "=", "config", ".", "executor", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "model_name", "=", "config", ".", "executor", ".", "split", "(", "'.'", ")", "[", "1", "]", "\n", "executor", "=", "getattr", "(", "importlib", ".", "import_module", "(", "'model_executors.'", "+", "module_name", ")", ",", "model_name", ")", "(", "config", ",", "model", ")", "\n", "return", "executor", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_similarity_weighted_mae": [[14, 22], ["keras.backend.int_shape", "tensorflow.expand_dims", "tensorflow.multiply", "keras.backend.mean", "tensorflow.expand_dims", "keras.backend.abs", "tensorflow.tile"], "function", ["None"], ["def", "make_similarity_weighted_mae", "(", "weights", ")", ":", "\n", "    ", "def", "similarity_weighted_mae", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "shape", "=", "K", ".", "int_shape", "(", "y_pred", ")", "\n", "w_reshaped", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "weights", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "mae", "=", "tf", ".", "multiply", "(", "K", ".", "abs", "(", "y_true", "-", "y_pred", ")", ",", "tf", ".", "tile", "(", "w_reshaped", ",", "(", "1", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ",", "1", ")", ")", ")", "\n", "return", "K", ".", "mean", "(", "mae", ")", "\n", "\n", "", "return", "similarity_weighted_mae", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.mae_single_input": [[24, 27], ["keras.backend.mean", "keras.backend.abs"], "function", ["None"], ["", "def", "mae_single_input", "(", "y", ")", ":", "\n", "    ", "y1", ",", "y2", "=", "y", "\n", "return", "K", ".", "mean", "(", "K", ".", "abs", "(", "y1", "-", "y2", ")", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.dice": [[31, 42], ["numpy.mean", "numpy.round", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "dice", "(", "y_true", ",", "y_pred", ",", "binarise", "=", "False", ",", "smooth", "=", "1e-12", ")", ":", "\n", "    ", "y_pred", "=", "y_pred", "[", "...", ",", "0", ":", "y_true", ".", "shape", "[", "-", "1", "]", "]", "\n", "\n", "# Cast the prediction to binary 0 or 1", "\n", "if", "binarise", ":", "\n", "        ", "y_pred", "=", "np", ".", "round", "(", "y_pred", ")", "\n", "\n", "# Symbolically compute the intersection", "\n", "", "y_int", "=", "y_true", "*", "y_pred", "\n", "return", "np", ".", "mean", "(", "(", "2", "*", "np", ".", "sum", "(", "y_int", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "smooth", ")", "\n", "/", "(", "np", ".", "sum", "(", "y_true", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "np", ".", "sum", "(", "y_pred", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "smooth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.dice_coef_perbatch": [[43, 49], ["keras.backend.sum", "keras.backend.sum", "keras.backend.sum"], "function", ["None"], ["", "def", "dice_coef_perbatch", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# Symbolically compute the intersection", "\n", "    ", "intersection", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "union", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "dice", "=", "(", "2", "*", "intersection", "+", "1e-12", ")", "/", "(", "union", "+", "1e-12", ")", "\n", "return", "1", "-", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.dice_coef_loss": [[50, 57], ["keras.backend.mean", "costs.dice_coef_perbatch"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.dice_coef_perbatch"], ["", "def", "dice_coef_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "'''\n    DICE Loss.\n    :param y_true: a tensor of ground truth data\n    :param y_pred: a tensor of predicted data\n    '''", "\n", "return", "K", ".", "mean", "(", "dice_coef_perbatch", "(", "y_true", ",", "y_pred", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_dice_loss_fnc": [[59, 68], ["log.debug", "costs.dice_coef_loss"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.dice_coef_loss"], ["", "def", "make_dice_loss_fnc", "(", "restrict_chn", "=", "1", ")", ":", "\n", "    ", "log", ".", "debug", "(", "'Making DICE loss function for the first %d channels'", "%", "restrict_chn", ")", "\n", "\n", "def", "dice_fnc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "y_pred_new", "=", "y_pred", "[", "...", ",", "0", ":", "restrict_chn", "]", "+", "0.", "\n", "y_true_new", "=", "y_true", "[", "...", ",", "0", ":", "restrict_chn", "]", "+", "0.", "\n", "return", "dice_coef_loss", "(", "y_true_new", ",", "y_pred_new", ")", "\n", "\n", "", "return", "dice_fnc", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.weighted_cross_entropy_loss": [[70, 86], ["tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.to_float", "tensorflow.multiply", "tensorflow.reduce_mean", "keras.backend.int_shape", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.cast", "range", "range", "tensorflow.log"], "function", ["None"], ["", "def", "weighted_cross_entropy_loss", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "\"\"\"\n    Define weighted cross - entropy function for classification tasks.\n    :param y_pred: tensor[None, width, height, n_classes]\n    :param y_true: tensor[None, width, height, n_classes]\n    \"\"\"", "\n", "num_classes", "=", "K", ".", "int_shape", "(", "y_true", ")", "[", "-", "1", "]", "\n", "n", "=", "[", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "y_true", "[", "...", ",", "c", "]", ",", "tf", ".", "float32", ")", ")", "for", "c", "in", "range", "(", "num_classes", ")", "]", "\n", "n_tot", "=", "tf", ".", "reduce_sum", "(", "n", ")", "\n", "weights", "=", "[", "n_tot", "/", "(", "n", "[", "c", "]", "+", "1e-12", ")", "for", "c", "in", "range", "(", "num_classes", ")", "]", "\n", "y_pred", "=", "tf", ".", "reshape", "(", "y_pred", ",", "(", "-", "1", ",", "num_classes", ")", ")", "\n", "y_true", "=", "tf", ".", "to_float", "(", "tf", ".", "reshape", "(", "y_true", ",", "(", "-", "1", ",", "num_classes", ")", ")", ")", "\n", "w_cross_entropy", "=", "tf", ".", "multiply", "(", "y_true", "*", "tf", ".", "log", "(", "y_pred", "+", "1e-12", ")", ",", "weights", ")", "\n", "w_cross_entropy", "=", "-", "tf", ".", "reduce_sum", "(", "w_cross_entropy", ",", "reduction_indices", "=", "[", "1", "]", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "w_cross_entropy", ",", "name", "=", "'weighted_cross_entropy'", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.weighted_cross_entropy_perbatch": [[88, 109], ["keras.backend.int_shape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.to_float", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.log"], "function", ["None"], ["", "def", "weighted_cross_entropy_perbatch", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "\"\"\"\n    Define weighted cross - entropy function for classification tasks.\n    :param y_pred: tensor[None, width, height, n_classes]\n    :param y_true: tensor[None, width, height, n_classes]\n    \"\"\"", "\n", "shape", "=", "K", ".", "int_shape", "(", "y_true", ")", "\n", "restrict_chn", "=", "shape", "[", "-", "1", "]", "\n", "\n", "n", "=", "tf", ".", "reduce_sum", "(", "y_true", ",", "axis", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "n_tot", "=", "tf", ".", "reduce_sum", "(", "n", ",", "axis", "=", "0", ")", "\n", "weights", "=", "n_tot", "/", "(", "n", "+", "1e-12", ")", "\n", "\n", "y_pred", "=", "tf", ".", "reshape", "(", "y_pred", ",", "(", "-", "1", ",", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", ",", "restrict_chn", ")", ")", "\n", "y_true2", "=", "tf", ".", "to_float", "(", "tf", ".", "reshape", "(", "y_true", ",", "(", "-", "1", ",", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", ",", "restrict_chn", ")", ")", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "y_pred", ")", "\n", "\n", "w_cross_entropy", "=", "-", "tf", ".", "reduce_sum", "(", "y_true2", "*", "tf", ".", "log", "(", "softmax", "+", "1e-12", ")", "*", "weights", ",", "reduction_indices", "=", "[", "2", "]", ")", "\n", "# w_cross_entropy = tf.multiply(w_cross_entropy, tf.tile(tf.expand_dims(contributions, axis=-1), (1, shape[1] * shape[2])))", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "w_cross_entropy", ",", "axis", "=", "1", ",", "name", "=", "'softmax_weighted_cross_entropy'", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.similarity_weighted_dice": [[111, 127], ["log.debug", "keras.backend.sum", "keras.backend.mean", "keras.backend.sum", "keras.backend.sum"], "function", ["None"], ["", "def", "similarity_weighted_dice", "(", "weights", ",", "restrict_chn", ")", ":", "\n", "    ", "log", ".", "debug", "(", "'Making similarity weighted DICE loss function for the first %d channels'", "%", "restrict_chn", ")", "\n", "\n", "def", "weighted_dice_fnc", "(", "y_true", ")", ":", "\n", "        ", "y_pred_new", ",", "y_true_new", "=", "y_true", "\n", "# assert K.int_shape(y_pred)[-1] == K.int_shape(y_true)[-1] + 1, 'y_pred does not contain similarity weights'", "\n", "\n", "y_pred_new", "=", "y_pred_new", "[", "...", ",", "0", ":", "restrict_chn", "]", "+", "0.", "\n", "y_true_new", "=", "y_true_new", "[", "...", ",", "0", ":", "restrict_chn", "]", "+", "0.", "\n", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true_new", "*", "y_pred_new", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "union", "=", "K", ".", "sum", "(", "y_true_new", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "K", ".", "sum", "(", "y_pred_new", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "dice", "=", "(", "2", "*", "intersection", "+", "1e-5", ")", "/", "(", "union", "+", "1e-5", ")", "\n", "return", "K", ".", "mean", "(", "weights", "*", "(", "1", "-", "dice", ")", ")", "\n", "\n", "", "return", "weighted_dice_fnc", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_combined_dice_bce": [[129, 137], ["costs.make_dice_loss_fnc", "make_dice_loss_fnc.", "bce"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_dice_loss_fnc"], ["", "def", "make_combined_dice_bce", "(", "num_classes", ")", ":", "\n", "    ", "dice", "=", "make_dice_loss_fnc", "(", "num_classes", ")", "\n", "bce", "=", "weighted_cross_entropy_loss", "\n", "\n", "def", "combined_dice_bce", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "dice", "(", "y_true", ",", "y_pred", ")", "+", "lambda_bce", "*", "bce", "(", "y_true", ",", "y_pred", ")", "\n", "\n", "", "return", "combined_dice_bce", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_combined_dice_bce_perbatch": [[138, 144], ["costs.dice_coef_perbatch", "costs.weighted_cross_entropy_perbatch"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.dice_coef_perbatch", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.weighted_cross_entropy_perbatch"], ["", "def", "make_combined_dice_bce_perbatch", "(", "num_classes", ")", ":", "\n", "    ", "def", "fnc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "y_pred_new", "=", "y_pred", "[", "...", ",", "0", ":", "num_classes", "]", "+", "0.", "\n", "y_true_new", "=", "y_true", "[", "...", ",", "0", ":", "num_classes", "]", "+", "0.", "\n", "return", "dice_coef_perbatch", "(", "y_true_new", ",", "y_pred_new", ")", "+", "lambda_bce", "*", "weighted_cross_entropy_perbatch", "(", "y_true", ",", "y_pred", ")", "\n", "", "return", "fnc", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.similarity_weighted_dice_bce": [[145, 183], ["log.debug", "keras.backend.sum", "keras.backend.mean", "keras.backend.int_shape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.to_float", "tensorflow.multiply", "tensorflow.reduce_mean", "keras.backend.sum", "keras.backend.sum", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.tile", "costs.similarity_weighted_dice.weighted_dice_fnc"], "function", ["None"], ["", "def", "similarity_weighted_dice_bce", "(", "contributions", ",", "restrict_chn", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "log", ".", "debug", "(", "'Making similarity weighted DICE loss function for the first %d channels'", "%", "restrict_chn", ")", "\n", "\n", "def", "weighted_dice_fnc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "y_pred_new", "=", "y_pred", "[", "...", ",", "0", ":", "restrict_chn", "]", "+", "0.", "\n", "y_true_new", "=", "y_true", "[", "...", ",", "0", ":", "restrict_chn", "]", "+", "0.", "\n", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true_new", "*", "y_pred_new", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "union", "=", "K", ".", "sum", "(", "y_true_new", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "K", ".", "sum", "(", "y_pred_new", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "dice", "=", "(", "2", "*", "intersection", "+", "eps", ")", "/", "(", "union", "+", "eps", ")", "\n", "return", "K", ".", "mean", "(", "contributions", "*", "(", "1", "-", "dice", ")", ")", "\n", "\n", "", "def", "weighted_cross_entropy", "(", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Define weighted cross - entropy function for classification tasks.\n        :param y_pred: tensor[None, width, height, n_classes]\n        :param y_true: tensor[None, width, height, n_classes]\n        \"\"\"", "\n", "shape", "=", "K", ".", "int_shape", "(", "y_true", ")", "\n", "num_chn", "=", "shape", "[", "-", "1", "]", "\n", "\n", "n", "=", "tf", ".", "reduce_sum", "(", "y_true", ",", "axis", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "n_tot", "=", "tf", ".", "reduce_sum", "(", "n", ",", "axis", "=", "0", ")", "\n", "weights", "=", "n_tot", "/", "(", "n", "+", "eps", ")", "\n", "\n", "y_pred", "=", "tf", ".", "reshape", "(", "y_pred", ",", "(", "-", "1", ",", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", ",", "num_chn", ")", ")", "\n", "y_true2", "=", "tf", ".", "to_float", "(", "tf", ".", "reshape", "(", "y_true", ",", "(", "-", "1", ",", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", ",", "num_chn", ")", ")", ")", "\n", "\n", "w_cross_entropy", "=", "-", "tf", ".", "reduce_sum", "(", "y_true2", "*", "tf", ".", "log", "(", "y_pred", "+", "eps", ")", "*", "weights", ",", "reduction_indices", "=", "[", "2", "]", ")", "\n", "w_cross_entropy", "=", "tf", ".", "multiply", "(", "w_cross_entropy", ",", "tf", ".", "tile", "(", "contributions", ",", "(", "1", ",", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", ")", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "w_cross_entropy", ",", "name", "=", "'weighted_cross_entropy'", ")", "\n", "\n", "return", "loss", "\n", "\n", "", "def", "combined_fnc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "return", "weighted_dice_fnc", "(", "y_true", ",", "y_pred", ")", "+", "lambda_bce", "*", "weighted_cross_entropy", "(", "y_true", ",", "y_pred", ")", "\n", "\n", "", "return", "combined_fnc", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.kl": [[186, 190], ["keras.backend.reshape", "keras.backend.sum", "keras.backend.exp", "keras.backend.square"], "function", ["None"], ["", "def", "kl", "(", "args", ")", ":", "\n", "    ", "mean", ",", "log_var", "=", "args", "\n", "kl_loss", "=", "-", "0.5", "*", "K", ".", "sum", "(", "1", "+", "log_var", "-", "K", ".", "square", "(", "mean", ")", "-", "K", ".", "exp", "(", "log_var", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "K", ".", "reshape", "(", "kl_loss", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.ypred": [[194, 196], ["None"], "function", ["None"], ["", "def", "ypred", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.distance_correlation": [[198, 219], ["scipy.spatial.distance.squareform", "scipy.spatial.distance.squareform", "ValueError", "scipy.spatial.distance.pdist", "scipy.spatial.distance.pdist", "scipy.spatial.distance.squareform.mean", "scipy.spatial.distance.squareform.mean", "float", "float", "float", "numpy.sqrt", "numpy.sqrt", "scipy.spatial.distance.squareform.mean", "scipy.spatial.distance.squareform.mean", "numpy.sqrt", "numpy.sqrt", "scipy.spatial.distance.squareform.mean", "scipy.spatial.distance.squareform.mean"], "function", ["None"], ["", "def", "distance_correlation", "(", "A", ",", "B", ")", ":", "\n", "    ", "'''\n    Calculate the Distance Correlation between the two vectors. https://en.wikipedia.org/wiki/Distance_correlation\n    Value of 0 implies independence. A and B can be vectors of different length.\n    :param A:    vector A of shape (num_samples, sizeA)\n    :param B:    vector B of shape (num_samples, sizeB)\n    :return:     the distance correlation between A and B\n    '''", "\n", "n", "=", "A", ".", "shape", "[", "0", "]", "\n", "if", "B", ".", "shape", "[", "0", "]", "!=", "A", ".", "shape", "[", "0", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'Number of samples must match'", ")", "\n", "", "a", "=", "squareform", "(", "pdist", "(", "A", ")", ")", "\n", "b", "=", "squareform", "(", "pdist", "(", "B", ")", ")", "\n", "A", "=", "a", "-", "a", ".", "mean", "(", "axis", "=", "0", ")", "[", "None", ",", ":", "]", "-", "a", ".", "mean", "(", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "+", "a", ".", "mean", "(", ")", "\n", "B", "=", "b", "-", "b", ".", "mean", "(", "axis", "=", "0", ")", "[", "None", ",", ":", "]", "-", "b", ".", "mean", "(", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "+", "b", ".", "mean", "(", ")", "\n", "\n", "dcov2_xy", "=", "(", "A", "*", "B", ")", ".", "sum", "(", ")", "/", "float", "(", "n", "*", "n", ")", "\n", "dcov2_xx", "=", "(", "A", "*", "A", ")", ".", "sum", "(", ")", "/", "float", "(", "n", "*", "n", ")", "\n", "dcov2_yy", "=", "(", "B", "*", "B", ")", ".", "sum", "(", ")", "/", "float", "(", "n", "*", "n", ")", "\n", "dcor", "=", "np", ".", "sqrt", "(", "dcov2_xy", ")", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "dcov2_xx", ")", "*", "np", ".", "sqrt", "(", "dcov2_yy", ")", ")", "\n", "return", "dcor", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_fuser.build": [[12, 39], ["keras.Input", "keras.Input", "layers.stn_spline.build_locnet", "stn_spline.build_locnet.", "keras.Model", "log.info", "keras.Model.summary", "layers.stn_spline.ThinPlateSpline2D", "keras.layers.Maximum"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.build_locnet"], ["def", "build", "(", "conf", ")", ":", "\n", "    ", "\"\"\"\n    Build a model that deforms and fuses anatomies, used to combine multimodal information.\n    Two anatomies are assumed: the first anatomy is deformed to match the second.\n    Deformation model uses a STN.\n    :param conf: a configuration object\n    \"\"\"", "\n", "anatomy1", "=", "Input", "(", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "# anatomy from modality1", "\n", "anatomy2", "=", "Input", "(", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "# anatomy from modality2", "\n", "\n", "output_shape", "=", "conf", ".", "anatomy_encoder", ".", "output_shape", "\n", "\n", "dims", "=", "conf", ".", "anatomy_encoder", ".", "output_shape", "[", ":", "-", "1", "]", "\n", "cp", "=", "[", "5", ",", "5", "]", "\n", "channels", "=", "conf", ".", "anatomy_encoder", ".", "out_channels", "\n", "\n", "locnet", "=", "stn_spline", ".", "build_locnet", "(", "output_shape", ",", "output_shape", ",", "cp", "[", "0", "]", "*", "cp", "[", "1", "]", "*", "2", ")", "\n", "theta", "=", "locnet", "(", "[", "anatomy1", ",", "anatomy2", "]", ")", "\n", "anatomy1_deformed", "=", "ThinPlateSpline2D", "(", "dims", ",", "cp", ",", "channels", ")", "(", "[", "anatomy1", ",", "theta", "]", ")", "\n", "\n", "# Fusion step", "\n", "anatomy_fused", "=", "keras", ".", "layers", ".", "Maximum", "(", ")", "(", "[", "anatomy1_deformed", ",", "anatomy2", "]", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "anatomy1", ",", "anatomy2", "]", ",", "outputs", "=", "[", "anatomy1_deformed", ",", "anatomy_fused", "]", ",", "name", "=", "'Anatomy_Fuser'", ")", "\n", "log", ".", "info", "(", "'Anatomy fuser'", ")", "\n", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.modality_encoder.build": [[13, 32], ["keras.Input", "keras.Input", "modality_encoder.build_simple_encoder", "keras.Model", "log.info", "keras.Model.summary", "keras.layers.Lambda", "keras.layers.Lambda"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.modality_encoder.build_simple_encoder"], ["def", "build", "(", "conf", ")", ":", "\n", "    ", "\"\"\"\n    Build an encoder to extract intensity information from the image.\n    :param conf: a configuration object\n    \"\"\"", "\n", "anatomy", "=", "Input", "(", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "\n", "image", "=", "Input", "(", "conf", ".", "input_shape", ")", "\n", "\n", "z_mean", ",", "z_log_var", "=", "build_simple_encoder", "(", "conf", ",", "anatomy", ",", "image", ")", "\n", "\n", "# use reparameterization trick to push the sampling out as input", "\n", "# note that \"output_shape\" isn't necessary with the TensorFlow backend", "\n", "z", "=", "Lambda", "(", "sampling", ",", "name", "=", "'z'", ")", "(", "[", "z_mean", ",", "z_log_var", "]", ")", "\n", "divergence", "=", "Lambda", "(", "costs", ".", "kl", ",", "name", "=", "'divergence'", ")", "(", "[", "z_mean", ",", "z_log_var", "]", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "anatomy", ",", "image", "]", ",", "outputs", "=", "[", "z", ",", "divergence", "]", ",", "name", "=", "'Enc_Modality'", ")", "\n", "log", ".", "info", "(", "'Enc_Modality'", ")", "\n", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.modality_encoder.build_simple_encoder": [[34, 53], ["keras.layers.Concatenate", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.LeakyReLU", "keras.layers.Dense", "keras.layers.Dense"], "function", ["None"], ["", "def", "build_simple_encoder", "(", "conf", ",", "anatomy", ",", "image", ")", ":", "\n", "    ", "l", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "anatomy", ",", "image", "]", ")", "\n", "l", "=", "Conv2D", "(", "16", ",", "3", ",", "strides", "=", "2", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "l", "=", "Conv2D", "(", "32", ",", "3", ",", "strides", "=", "2", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "l", "=", "Conv2D", "(", "64", ",", "3", ",", "strides", "=", "2", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "l", "=", "Conv2D", "(", "128", ",", "3", ",", "strides", "=", "2", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "\n", "l", "=", "Flatten", "(", ")", "(", "l", ")", "\n", "l", "=", "Dense", "(", "32", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "\n", "z_mean", "=", "Dense", "(", "conf", ".", "num_z", ",", "name", "=", "'z_mean'", ")", "(", "l", ")", "\n", "z_log_var", "=", "Dense", "(", "conf", ".", "num_z", ",", "name", "=", "'z_log_var'", ")", "(", "l", ")", "\n", "\n", "return", "z_mean", ",", "z_log_var", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.build": [[11, 32], ["keras.Input", "keras.Input", "keras.Input", "keras.Input", "keras.Model", "log.info", "keras.Model.summary", "keras.layers.Concatenate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Lambda", "keras.layers.Lambda", "tensorflow.nn.softmax"], "function", ["None"], ["def", "build", "(", "conf", ")", ":", "\n", "    ", "\"\"\"\n    Build a model that predicts similarity weights between anatomies. These are based on the overlap of the anatomies\n    calculated with Dice\n    :param conf: a configuration object\n    \"\"\"", "\n", "x1", "=", "Input", "(", "shape", "=", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "\n", "x2", "=", "Input", "(", "shape", "=", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "\n", "x3", "=", "Input", "(", "shape", "=", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "\n", "x4", "=", "Input", "(", "shape", "=", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "\n", "\n", "overlap", "=", "[", "Lambda", "(", "dice", ")", "(", "[", "x1", ",", "x", "]", ")", "for", "x", "in", "[", "x2", ",", "x3", ",", "x4", "]", "]", "\n", "x", "=", "Concatenate", "(", ")", "(", "overlap", ")", "\n", "l", "=", "Dense", "(", "5", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "w", "=", "Dense", "(", "conf", ".", "n_pairs", ",", "name", "=", "'beta'", ")", "(", "l", ")", "\n", "w", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "nn", ".", "softmax", "(", "x", ",", "dim", "=", "-", "1", ")", ")", "(", "w", ")", "\n", "\n", "m", "=", "Model", "(", "inputs", "=", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", ",", "outputs", "=", "w", ",", "name", "=", "'Balancer'", ")", "\n", "log", ".", "info", "(", "'Balancer'", ")", "\n", "m", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice": [[33, 39], ["keras.sum", "keras.expand_dims", "keras.sum", "keras.sum"], "function", ["None"], ["", "def", "dice", "(", "y", ")", ":", "\n", "    ", "y_true", ",", "y_pred", "=", "y", "\n", "intersection", "=", "K", ".", "sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "union", "=", "K", ".", "sum", "(", "y_true", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "K", ".", "sum", "(", "y_pred", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "dice", "=", "(", "2", "*", "intersection", "+", "1e-12", ")", "/", "(", "union", "+", "1e-12", ")", "\n", "return", "K", ".", "expand_dims", "(", "dice", ",", "axis", "=", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder.build": [[12, 34], ["keras.Input", "keras.Input", "log.info", "keras.Model", "keras.Model.summary", "decoder._film_decoder", "keras.layers.Conv2D", "decoder._spade_decoder", "ValueError", "str"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._film_decoder", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._spade_decoder"], ["def", "build", "(", "conf", ")", ":", "\n", "    ", "\"\"\"\n    Build a decoder that generates an image by combining an anatomical and a modality\n    representation. Two decoders are considered based on FiLM or SPADE conditioning.\n    :param conf: a configuration object\n    \"\"\"", "\n", "anatomy_input", "=", "Input", "(", "shape", "=", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "\n", "modality_input", "=", "Input", "(", "(", "conf", ".", "num_z", ",", ")", ")", "\n", "\n", "if", "conf", ".", "decoder_type", "==", "'film'", ":", "\n", "        ", "l", "=", "_film_decoder", "(", "anatomy_input", ",", "modality_input", ")", "\n", "", "elif", "conf", ".", "decoder_type", "==", "'spade'", ":", "\n", "        ", "l", "=", "_spade_decoder", "(", "conf", ",", "anatomy_input", ",", "modality_input", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown decoder_type value: '", "+", "str", "(", "conf", ".", "decoder_type", ")", ")", "\n", "\n", "", "l", "=", "Conv2D", "(", "1", ",", "1", ",", "activation", "=", "'tanh'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'glorot_normal'", ")", "(", "l", ")", "\n", "log", ".", "info", "(", "'Decoder'", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "anatomy_input", ",", "modality_input", "]", ",", "outputs", "=", "l", ",", "name", "=", "'Decoder'", ")", "\n", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._gamma_beta_pred": [[36, 42], ["keras.layers.Dense", "keras.layers.LeakyReLU", "keras.layers.Dense", "keras.layers.LeakyReLU"], "function", ["None"], ["", "def", "_gamma_beta_pred", "(", "inp", ",", "num_chn", ")", ":", "\n", "    ", "gamma", "=", "Dense", "(", "num_chn", ")", "(", "inp", ")", "\n", "gamma", "=", "LeakyReLU", "(", ")", "(", "gamma", ")", "\n", "beta", "=", "Dense", "(", "num_chn", ")", "(", "inp", ")", "\n", "beta", "=", "LeakyReLU", "(", ")", "(", "beta", ")", "\n", "return", "gamma", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._film_layer": [[44, 55], ["decoder._gamma_beta_pred", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.Conv2D", "layers.film.FiLM", "keras.layers.LeakyReLU", "keras.layers.Add"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._gamma_beta_pred"], ["", "def", "_film_layer", "(", "anatomy_input", ",", "modality_input", ")", ":", "\n", "    ", "l1", "=", "Conv2D", "(", "8", ",", "3", ",", "padding", "=", "'same'", ")", "(", "anatomy_input", ")", "\n", "l1", "=", "LeakyReLU", "(", ")", "(", "l1", ")", "\n", "\n", "l2", "=", "Conv2D", "(", "8", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ")", "(", "l1", ")", "\n", "gamma_l2", ",", "beta_l2", "=", "_gamma_beta_pred", "(", "modality_input", ",", "8", ")", "\n", "l2", "=", "FiLM", "(", ")", "(", "[", "l2", ",", "gamma_l2", ",", "beta_l2", "]", ")", "\n", "l2", "=", "LeakyReLU", "(", ")", "(", "l2", ")", "\n", "\n", "l", "=", "Add", "(", ")", "(", "[", "l1", ",", "l2", "]", ")", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._film_decoder": [[57, 65], ["decoder._film_layer", "decoder._film_layer", "decoder._film_layer", "decoder._film_layer", "keras.layers.Conv2D", "keras.layers.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._film_layer", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._film_layer", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._film_layer", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._film_layer"], ["", "def", "_film_decoder", "(", "anatomy_input", ",", "modality_input", ")", ":", "\n", "    ", "l", "=", "Conv2D", "(", "8", ",", "3", ",", "padding", "=", "'same'", ")", "(", "anatomy_input", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "l1", "=", "_film_layer", "(", "l", ",", "modality_input", ")", "\n", "l2", "=", "_film_layer", "(", "l1", ",", "modality_input", ")", "\n", "l3", "=", "_film_layer", "(", "l2", ",", "modality_input", ")", "\n", "l4", "=", "_film_layer", "(", "l3", ",", "modality_input", ")", "\n", "return", "l4", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.decoder._spade_decoder": [[67, 82], ["layers.spade.spade_block", "layers.spade.spade_block", "layers.spade.spade_block", "layers.spade.spade_block", "layers.spade.spade_block", "layers.spade.spade_block", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D", "keras.layers.UpSampling2D"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.spade_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.spade_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.spade_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.spade_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.spade_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.spade_block"], ["", "def", "_spade_decoder", "(", "conf", ",", "anatomy_input", ",", "modality_input", ")", ":", "\n", "    ", "modality", "=", "Dense", "(", "conf", ".", "input_shape", "[", "0", "]", "*", "conf", ".", "input_shape", "[", "1", "]", "*", "128", "//", "1024", ")", "(", "modality_input", ")", "\n", "l1", "=", "Reshape", "(", "(", "conf", ".", "input_shape", "[", "0", "]", "//", "32", ",", "conf", ".", "input_shape", "[", "1", "]", "//", "32", ",", "128", ")", ")", "(", "modality", ")", "\n", "l1", "=", "spade_block", "(", "conf", ",", "anatomy_input", ",", "l1", ",", "128", ",", "128", ")", "\n", "l1", "=", "UpSampling2D", "(", "size", "=", "2", ")", "(", "l1", ")", "\n", "l1", "=", "spade_block", "(", "conf", ",", "anatomy_input", ",", "l1", ",", "128", ",", "128", ")", "\n", "l1", "=", "UpSampling2D", "(", "size", "=", "2", ")", "(", "l1", ")", "\n", "l2", "=", "spade_block", "(", "conf", ",", "anatomy_input", ",", "l1", ",", "128", ",", "128", ")", "\n", "l3", "=", "UpSampling2D", "(", "size", "=", "2", ")", "(", "l2", ")", "\n", "l4", "=", "spade_block", "(", "conf", ",", "anatomy_input", ",", "l3", ",", "128", ",", "64", ")", "\n", "l5", "=", "UpSampling2D", "(", "size", "=", "2", ")", "(", "l4", ")", "\n", "l6", "=", "spade_block", "(", "conf", ",", "anatomy_input", ",", "l5", ",", "64", ",", "32", ")", "\n", "l7", "=", "UpSampling2D", "(", "size", "=", "2", ")", "(", "l6", ")", "\n", "l8", "=", "spade_block", "(", "conf", ",", "anatomy_input", ",", "l7", ",", "32", ",", "16", ")", "\n", "return", "l8", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_encoder.AnatomyEncoders.__init__": [[34, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "modalities", ")", ":", "\n", "        ", "self", ".", "modalities", "=", "modalities", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_encoder.AnatomyEncoders.build": [[37, 74], ["models.unet.UNet", "keras.Input", "keras.Model.unet_downsample", "models.unet.UNet", "keras.Input", "keras.Model.unet_downsample", "anatomy_encoder.AnatomyEncoders.build_decoder", "anatomy_encoder.AnatomyEncoders.evaluate_decoder", "anatomy_encoder.AnatomyEncoders.evaluate_decoder", "keras.layers.Conv2D", "keras.layers.Conv2D.", "keras.layers.Conv2D.", "keras.Model", "keras.Model", "layers.rounding.Rounding", "layers.rounding.Rounding"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_downsample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_downsample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_encoder.AnatomyEncoders.build_decoder", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_encoder.AnatomyEncoders.evaluate_decoder", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_encoder.AnatomyEncoders.evaluate_decoder"], ["", "def", "build", "(", "self", ",", "conf", ")", ":", "\n", "# build encoder1", "\n", "        ", "encoder1", "=", "UNet", "(", "conf", ")", "\n", "encoder1", ".", "input", "=", "Input", "(", "shape", "=", "conf", ".", "input_shape", ")", "\n", "l1", "=", "encoder1", ".", "unet_downsample", "(", "encoder1", ".", "input", ",", "encoder1", ".", "normalise", ")", "\n", "\n", "# build encoder2", "\n", "encoder2", "=", "UNet", "(", "conf", ")", "\n", "encoder2", ".", "input", "=", "Input", "(", "shape", "=", "conf", ".", "input_shape", ")", "\n", "l2", "=", "encoder2", ".", "unet_downsample", "(", "encoder2", ".", "input", ",", "encoder2", ".", "normalise", ")", "\n", "\n", "self", ".", "build_decoder", "(", "conf", ")", "\n", "\n", "d1_l3", "=", "encoder1", ".", "d_l3", "if", "conf", ".", "downsample", ">", "3", "else", "None", "\n", "d2_l3", "=", "encoder2", ".", "d_l3", "if", "conf", ".", "downsample", ">", "3", "else", "None", "\n", "anatomy_output1", "=", "self", ".", "evaluate_decoder", "(", "conf", ",", "\n", "l1", ",", "d1_l3", ",", "encoder1", ".", "d_l2", ",", "encoder1", ".", "d_l1", ",", "encoder1", ".", "d_l0", ")", "\n", "anatomy_output2", "=", "self", ".", "evaluate_decoder", "(", "conf", ",", "\n", "l2", ",", "d2_l3", ",", "encoder2", ".", "d_l2", ",", "encoder2", ".", "d_l1", ",", "encoder2", ".", "d_l0", ")", "\n", "\n", "# build shared layer", "\n", "shr_lay4", "=", "Conv2D", "(", "conf", ".", "out_channels", ",", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'softmax'", ",", "name", "=", "'conv_anatomy'", ")", "\n", "\n", "# connect models", "\n", "encoder1_output", "=", "shr_lay4", "(", "anatomy_output1", ")", "\n", "encoder2_output", "=", "shr_lay4", "(", "anatomy_output2", ")", "\n", "\n", "if", "conf", ".", "rounding", ":", "\n", "            ", "encoder1_output", "=", "Rounding", "(", ")", "(", "encoder1_output", ")", "\n", "encoder2_output", "=", "Rounding", "(", ")", "(", "encoder2_output", ")", "\n", "\n", "", "encoder1", "=", "Model", "(", "inputs", "=", "encoder1", ".", "input", ",", "outputs", "=", "encoder1_output", ",", "\n", "name", "=", "'Enc_Anatomy_%s'", "%", "self", ".", "modalities", "[", "0", "]", ")", "\n", "encoder2", "=", "Model", "(", "inputs", "=", "encoder2", ".", "input", ",", "outputs", "=", "encoder2_output", ",", "\n", "name", "=", "'Enc_Anatomy_%s'", "%", "self", ".", "modalities", "[", "1", "]", ")", "\n", "\n", "return", "[", "encoder1", ",", "encoder2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_encoder.AnatomyEncoders.evaluate_decoder": [[75, 99], ["anatomy_encoder.AnatomyEncoders.l0_6", "anatomy_encoder.AnatomyEncoders.l13", "anatomy_encoder.AnatomyEncoders.l14", "anatomy_encoder.AnatomyEncoders.l20", "anatomy_encoder.AnatomyEncoders.l23", "anatomy_encoder.AnatomyEncoders.l14", "anatomy_encoder.AnatomyEncoders.l30", "anatomy_encoder.AnatomyEncoders.l33", "anatomy_encoder.AnatomyEncoders.l34", "anatomy_encoder.AnatomyEncoders.l40", "anatomy_encoder.AnatomyEncoders.l0_5", "anatomy_encoder.AnatomyEncoders.l3", "anatomy_encoder.AnatomyEncoders.l4", "anatomy_encoder.AnatomyEncoders.l10", "anatomy_encoder.AnatomyEncoders.l12", "anatomy_encoder.AnatomyEncoders.l19", "anatomy_encoder.AnatomyEncoders.l22", "anatomy_encoder.AnatomyEncoders.l29", "anatomy_encoder.AnatomyEncoders.l32", "anatomy_encoder.AnatomyEncoders.l39", "anatomy_encoder.AnatomyEncoders.l0_4", "anatomy_encoder.AnatomyEncoders.l2", "anatomy_encoder.AnatomyEncoders.l9", "anatomy_encoder.AnatomyEncoders.l11", "anatomy_encoder.AnatomyEncoders.l18", "anatomy_encoder.AnatomyEncoders.l21", "anatomy_encoder.AnatomyEncoders.l28", "anatomy_encoder.AnatomyEncoders.l31", "anatomy_encoder.AnatomyEncoders.l38", "anatomy_encoder.AnatomyEncoders.l0_3", "anatomy_encoder.AnatomyEncoders.l1", "anatomy_encoder.AnatomyEncoders.l8", "anatomy_encoder.AnatomyEncoders.l17", "anatomy_encoder.AnatomyEncoders.l27", "anatomy_encoder.AnatomyEncoders.l37", "anatomy_encoder.AnatomyEncoders.l0_2", "anatomy_encoder.AnatomyEncoders.l7", "anatomy_encoder.AnatomyEncoders.l16", "anatomy_encoder.AnatomyEncoders.l26", "anatomy_encoder.AnatomyEncoders.l36", "anatomy_encoder.AnatomyEncoders.l0_1", "anatomy_encoder.AnatomyEncoders.l6", "anatomy_encoder.AnatomyEncoders.l15", "anatomy_encoder.AnatomyEncoders.l25", "anatomy_encoder.AnatomyEncoders.l35", "anatomy_encoder.AnatomyEncoders.l5"], "methods", ["None"], ["", "def", "evaluate_decoder", "(", "self", ",", "conf", ",", "decoder_input", ",", "decoder_l3", ",", "decoder_l2", ",", "decoder_l1", ",", "decoder_l0", ")", ":", "\n", "        ", "l0_out", "=", "self", ".", "l0_6", "(", "self", ".", "l0_5", "(", "self", ".", "l0_4", "(", "self", ".", "l0_3", "(", "self", ".", "l0_2", "(", "self", ".", "l0_1", "(", "decoder_input", ")", ")", ")", ")", ")", ")", "\n", "\n", "if", "conf", ".", "downsample", ">", "3", ":", "\n", "            ", "l3_out", "=", "self", ".", "l3", "(", "self", ".", "l2", "(", "self", ".", "l1", "(", "l0_out", ")", ")", ")", "\n", "l4_out", "=", "self", ".", "l4", "(", "[", "l3_out", ",", "decoder_l3", "]", ")", "\n", "\n", "l10_out", "=", "self", ".", "l10", "(", "self", ".", "l9", "(", "self", ".", "l8", "(", "self", ".", "l7", "(", "self", ".", "l6", "(", "self", ".", "l5", "(", "l4_out", ")", ")", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "l10_out", "=", "l0_out", "\n", "\n", "", "l13_out", "=", "self", ".", "l13", "(", "self", ".", "l12", "(", "self", ".", "l11", "(", "l10_out", ")", ")", ")", "\n", "l14_out", "=", "self", ".", "l14", "(", "[", "l13_out", ",", "decoder_l2", "]", ")", "\n", "\n", "l20_out", "=", "self", ".", "l20", "(", "self", ".", "l19", "(", "self", ".", "l18", "(", "self", ".", "l17", "(", "self", ".", "l16", "(", "self", ".", "l15", "(", "l14_out", ")", ")", ")", ")", ")", ")", "\n", "l23_out", "=", "self", ".", "l23", "(", "self", ".", "l22", "(", "self", ".", "l21", "(", "l20_out", ")", ")", ")", "\n", "l24_out", "=", "self", ".", "l14", "(", "[", "l23_out", ",", "decoder_l1", "]", ")", "\n", "\n", "l30_out", "=", "self", ".", "l30", "(", "self", ".", "l29", "(", "self", ".", "l28", "(", "self", ".", "l27", "(", "self", ".", "l26", "(", "self", ".", "l25", "(", "l24_out", ")", ")", ")", ")", ")", ")", "\n", "l33_out", "=", "self", ".", "l33", "(", "self", ".", "l32", "(", "self", ".", "l31", "(", "l30_out", ")", ")", ")", "\n", "l34_out", "=", "self", ".", "l34", "(", "[", "l33_out", ",", "decoder_l0", "]", ")", "\n", "\n", "l40_out", "=", "self", ".", "l40", "(", "self", ".", "l39", "(", "self", ".", "l38", "(", "self", ".", "l37", "(", "self", ".", "l36", "(", "self", ".", "l35", "(", "l34_out", ")", ")", ")", ")", ")", ")", "\n", "return", "l40_out", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_encoder.AnatomyEncoders.build_decoder": [[100, 157], ["keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.UpSampling2D", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Concatenate", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.UpSampling2D", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Concatenate", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.UpSampling2D", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Concatenate", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.UpSampling2D", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Concatenate", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise"], ["", "def", "build_decoder", "(", "self", ",", "conf", ")", ":", "\n", "        ", "f0", "=", "conf", ".", "filters", "*", "16", "if", "conf", ".", "downsample", ">", "3", "else", "conf", ".", "filters", "*", "8", "\n", "self", ".", "l0_1", "=", "Conv2D", "(", "f0", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l0_2", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l0_3", "=", "Activation", "(", "'relu'", ")", "\n", "self", ".", "l0_4", "=", "Conv2D", "(", "f0", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l0_5", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l0_6", "=", "Activation", "(", "'relu'", ")", "\n", "\n", "if", "conf", ".", "downsample", ">", "3", ":", "\n", "            ", "self", ".", "l1", "=", "UpSampling2D", "(", "size", "=", "2", ")", "\n", "self", ".", "l2", "=", "Conv2D", "(", "conf", ".", "filters", "*", "8", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l3", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "\n", "self", ".", "l4", "=", "Concatenate", "(", ")", "\n", "self", ".", "l5", "=", "Conv2D", "(", "conf", ".", "filters", "*", "8", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l6", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l7", "=", "Activation", "(", "'relu'", ")", "\n", "self", ".", "l8", "=", "Conv2D", "(", "conf", ".", "filters", "*", "8", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l9", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l10", "=", "Activation", "(", "'relu'", ")", "\n", "\n", "", "self", ".", "l11", "=", "UpSampling2D", "(", "size", "=", "2", ")", "\n", "self", ".", "l12", "=", "Conv2D", "(", "conf", ".", "filters", "*", "4", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l13", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "\n", "self", ".", "l14", "=", "Concatenate", "(", ")", "\n", "self", ".", "l15", "=", "Conv2D", "(", "conf", ".", "filters", "*", "4", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l16", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l17", "=", "Activation", "(", "'relu'", ")", "\n", "self", ".", "l18", "=", "Conv2D", "(", "conf", ".", "filters", "*", "4", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l19", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l20", "=", "Activation", "(", "'relu'", ")", "\n", "\n", "self", ".", "l21", "=", "UpSampling2D", "(", "size", "=", "2", ")", "\n", "self", ".", "l22", "=", "Conv2D", "(", "conf", ".", "filters", "*", "2", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l23", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "\n", "self", ".", "l24", "=", "Concatenate", "(", ")", "\n", "self", ".", "l25", "=", "Conv2D", "(", "conf", ".", "filters", "*", "2", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l26", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l27", "=", "Activation", "(", "'relu'", ")", "\n", "self", ".", "l28", "=", "Conv2D", "(", "conf", ".", "filters", "*", "2", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l29", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l30", "=", "Activation", "(", "'relu'", ")", "\n", "\n", "self", ".", "l31", "=", "UpSampling2D", "(", "size", "=", "2", ")", "\n", "self", ".", "l32", "=", "Conv2D", "(", "conf", ".", "filters", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l33", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "\n", "self", ".", "l34", "=", "Concatenate", "(", ")", "\n", "self", ".", "l35", "=", "Conv2D", "(", "conf", ".", "filters", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l36", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l37", "=", "Activation", "(", "'relu'", ")", "\n", "self", ".", "l38", "=", "Conv2D", "(", "conf", ".", "filters", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "\n", "self", ".", "l39", "=", "normalise", "(", "conf", ".", "normalise", ")", "\n", "self", ".", "l40", "=", "Activation", "(", "'relu'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.anatomy_encoder.build": [[13, 31], ["models.unet.UNet", "keras.Input", "models.unet.UNet.unet_downsample", "models.unet.UNet.unet_bottleneck", "models.unet.UNet.unet_upsample", "keras.Model", "log.info", "keras.Model.summary", "keras.layers.Conv2D", "layers.rounding.Rounding"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_downsample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_bottleneck", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_upsample"], ["def", "build", "(", "conf", ",", "name", "=", "'Enc_Anatomy'", ")", ":", "\n", "    ", "\"\"\"\n    Build a UNet based encoder to extract anatomical information from the image.\n    \"\"\"", "\n", "spatial_encoder", "=", "UNet", "(", "conf", ")", "\n", "spatial_encoder", ".", "input", "=", "Input", "(", "shape", "=", "conf", ".", "input_shape", ")", "\n", "l1_down", "=", "spatial_encoder", ".", "unet_downsample", "(", "spatial_encoder", ".", "input", ",", "spatial_encoder", ".", "normalise", ")", "# downsample", "\n", "spatial_encoder", ".", "unet_bottleneck", "(", "l1_down", ",", "spatial_encoder", ".", "normalise", ")", "# bottleneck", "\n", "l2_up", "=", "spatial_encoder", ".", "unet_upsample", "(", "spatial_encoder", ".", "bottleneck", ",", "spatial_encoder", ".", "normalise", ")", "# upsample", "\n", "\n", "anatomy", "=", "Conv2D", "(", "conf", ".", "out_channels", ",", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'softmax'", ",", "name", "=", "'conv_anatomy'", ")", "(", "l2_up", ")", "\n", "if", "conf", ".", "rounding", ":", "\n", "        ", "anatomy", "=", "Rounding", "(", ")", "(", "anatomy", ")", "\n", "\n", "", "model", "=", "Model", "(", "inputs", "=", "spatial_encoder", ".", "input", ",", "outputs", "=", "anatomy", ",", "name", "=", "name", ")", "\n", "log", ".", "info", "(", "'Enc_Anatomy'", ")", "\n", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.segmentor.build": [[9, 30], ["keras.Input", "keras.Model", "log.info", "keras.Model.summary", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D"], "function", ["None"], ["def", "build", "(", "conf", ")", ":", "\n", "    ", "\"\"\"\n    Build a segmentation network that converts anatomical maps to segmentation masks.\n    :param conf: a configuration object\n    \"\"\"", "\n", "inp", "=", "Input", "(", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "\n", "\n", "l", "=", "Conv2D", "(", "64", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "inp", ")", "\n", "l", "=", "BatchNormalization", "(", ")", "(", "l", ")", "\n", "l", "=", "Activation", "(", "'relu'", ")", "(", "l", ")", "\n", "l", "=", "Conv2D", "(", "64", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l", ")", "\n", "l", "=", "BatchNormalization", "(", ")", "(", "l", ")", "\n", "l", "=", "Activation", "(", "'relu'", ")", "(", "l", ")", "\n", "\n", "# +1 output for background", "\n", "output", "=", "Conv2D", "(", "conf", ".", "num_masks", "+", "1", ",", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "'softmax'", ")", "(", "l", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "inp", ",", "outputs", "=", "output", ",", "name", "=", "'Segmentor'", ")", "\n", "log", ".", "info", "(", "'Segmentor'", ")", "\n", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.sampling": [[9, 22], ["keras.random_normal", "keras.shape", "keras.int_shape", "keras.exp"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape"], ["def", "sampling", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Reparameterization trick by sampling from an isotropic unit Gaussian.\n    Instead of sampling from Q(z|X), sample eps = N(0,I): z = z_mean + sqrt(var)*eps\n    :param args: args (tensor): mean and log of variance of Q(z|X)\n    :return:     z (tensor): sampled latent vector\n    \"\"\"", "\n", "z_mean", ",", "z_log_var", "=", "args", "\n", "batch", "=", "K", ".", "shape", "(", "z_mean", ")", "[", "0", "]", "\n", "dim", "=", "K", ".", "int_shape", "(", "z_mean", ")", "[", "1", "]", "\n", "# by default, random_normal has mean=0 and std=1.0", "\n", "epsilon", "=", "K", ".", "random_normal", "(", "shape", "=", "(", "batch", ",", "dim", ")", ")", "\n", "return", "z_mean", "+", "K", ".", "exp", "(", "0.5", "*", "z_log_var", ")", "*", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.vae_sample": [[24, 32], ["utils.distributions.NormalDistribution", "utils.distributions.NormalDistribution.sample", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample"], ["", "def", "vae_sample", "(", "args", ")", ":", "\n", "    ", "z_mean", ",", "z_log_var", "=", "args", "\n", "batch", "=", "z_mean", ".", "shape", "[", "0", "]", "\n", "dim", "=", "z_mean", ".", "shape", "[", "1", "]", "\n", "# by default, random_normal has mean=0 and std=1.0", "\n", "gaussian", "=", "NormalDistribution", "(", ")", "\n", "epsilon", "=", "gaussian", ".", "sample", "(", "(", "batch", ",", "dim", ")", ")", "\n", "return", "z_mean", "+", "np", ".", "exp", "(", "0.5", "*", "z_log_var", ")", "*", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net": [[34, 38], ["len"], "function", ["None"], ["", "def", "get_net", "(", "trainer_model", ",", "name", ")", ":", "\n", "    ", "layers", "=", "[", "l", "for", "l", "in", "trainer_model", ".", "layers", "if", "l", ".", "name", "==", "name", "]", "\n", "assert", "len", "(", "layers", ")", "==", "1", "\n", "return", "layers", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.make_trainable": [[40, 54], ["sdnet_utils.make_trainable"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.make_trainable"], ["", "def", "make_trainable", "(", "model", ",", "val", ")", ":", "\n", "    ", "model", ".", "trainable", "=", "val", "\n", "try", ":", "\n", "        ", "for", "l", "in", "model", ".", "layers", ":", "\n", "            ", "try", ":", "\n", "                ", "for", "k", "in", "l", ".", "layers", ":", "\n", "                    ", "make_trainable", "(", "k", ",", "val", ")", "\n", "", "", "except", ":", "\n", "# Layer is not a model, so continue", "\n", "                ", "pass", "\n", "", "l", ".", "trainable", "=", "val", "\n", "", "", "except", ":", "\n", "# Layer is not a model, so continue", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.model_utils.normalise": [[6, 13], ["keras_contrib.layers.InstanceNormalization", "keras.layers.BatchNormalization", "keras.layers.Lambda"], "function", ["None"], ["def", "normalise", "(", "norm", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "norm", "==", "'instance'", ":", "\n", "        ", "return", "InstanceNormalization", "(", "**", "kwargs", ")", "\n", "", "elif", "norm", "==", "'batch'", ":", "\n", "        ", "return", "BatchNormalization", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "Lambda", "(", "lambda", "x", ":", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.model_utils.upsample_block": [[15, 23], ["keras.layers.UpSampling2D", "keras.layers.Conv2D", "model_utils.normalise", "keras.layers.Activation", "keras.layers.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise"], ["", "", "def", "upsample_block", "(", "l0", ",", "f", ",", "norm_name", ",", "activation", "=", "'relu'", ")", ":", "\n", "    ", "l", "=", "UpSampling2D", "(", "size", "=", "2", ")", "(", "l0", ")", "\n", "l", "=", "Conv2D", "(", "f", ",", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l", ")", "\n", "l", "=", "normalise", "(", "norm_name", ")", "(", "l", ")", "\n", "\n", "if", "activation", "==", "'leakyrelu'", ":", "\n", "        ", "return", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "", "return", "Activation", "(", "activation", ")", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.save_segmentation": [[14, 47], ["numpy.expand_dims", "numpy.expand_dims", "model.predict", "utils.data_utils.crop_same", "utils.data_utils.crop_same", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "scipy.misc.imsave", "len", "numpy.concatenate", "os.path.join", "range", "range", "np.expand_dims.copy", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy"], ["def", "save_segmentation", "(", "folder", ",", "model", ",", "images", ",", "masks", ",", "name_prefix", ")", ":", "\n", "    ", "'''\n    :param folder: folder to save the image\n    :param model : segmentation model\n    :param images: an image of shape [H,W,chn]\n    :param masks : a mask of shape [H,W,chn]\n    :return      : the predicted segmentation mask\n    '''", "\n", "images", "=", "np", ".", "expand_dims", "(", "images", ",", "axis", "=", "0", ")", "\n", "masks", "=", "np", ".", "expand_dims", "(", "masks", ",", "axis", "=", "0", ")", "\n", "s", "=", "model", ".", "predict", "(", "images", ")", "\n", "\n", "# In this case the segmentor is multi-output, with each output corresponding to a mask.", "\n", "if", "len", "(", "s", "[", "0", "]", ".", "shape", ")", "==", "4", ":", "\n", "        ", "s", "=", "np", ".", "concatenate", "(", "s", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "mask_list_pred", "=", "[", "s", "[", ":", ",", ":", ",", ":", ",", "j", ":", "j", "+", "1", "]", "for", "j", "in", "range", "(", "s", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "mask_list_real", "=", "[", "masks", "[", ":", ",", ":", ",", ":", ",", "j", ":", "j", "+", "1", "]", "for", "j", "in", "range", "(", "masks", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "if", "masks", ".", "shape", "[", "-", "1", "]", "<", "s", ".", "shape", "[", "-", "1", "]", ":", "\n", "        ", "mask_list_real", "+=", "[", "np", ".", "zeros", "(", "shape", "=", "masks", ".", "shape", "[", "0", ":", "3", "]", "+", "(", "1", ",", ")", ")", "]", "*", "(", "s", ".", "shape", "[", "-", "1", "]", "-", "masks", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# if we use rotations, the sizes might differ", "\n", "", "m1", ",", "m2", "=", "utils", ".", "data_utils", ".", "crop_same", "(", "mask_list_real", ",", "mask_list_pred", ")", "\n", "images_cropped", ",", "_", "=", "utils", ".", "data_utils", ".", "crop_same", "(", "[", "images", "]", ",", "[", "images", ".", "copy", "(", ")", "]", ",", "size", "=", "(", "m1", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "m1", "[", "0", "]", ".", "shape", "[", "2", "]", ")", ")", "\n", "mask_list_real", "=", "[", "s", "[", "0", ",", ":", ",", ":", ",", "0", "]", "for", "s", "in", "m1", "]", "\n", "mask_list_pred", "=", "[", "s", "[", "0", ",", ":", ",", ":", ",", "0", "]", "for", "s", "in", "m2", "]", "\n", "images_cropped", "=", "[", "s", "[", "0", ",", ":", ",", ":", ",", "0", "]", "for", "s", "in", "images_cropped", "]", "\n", "\n", "row1", "=", "np", ".", "concatenate", "(", "images_cropped", "+", "mask_list_pred", ",", "axis", "=", "1", ")", "\n", "row2", "=", "np", ".", "concatenate", "(", "images_cropped", "+", "mask_list_real", ",", "axis", "=", "1", ")", "\n", "im", "=", "np", ".", "concatenate", "(", "[", "row1", ",", "row2", "]", ",", "axis", "=", "0", ")", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "name_prefix", "+", "'.png'", ")", ",", "im", ")", "\n", "return", "s", ",", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage": [[49, 65], ["PIL.Image.new", "PIL.ImageDraw.Draw", "enumerate", "numpy.asarray", "len", "ImageDraw.Draw.text", "ImageDraw.Draw.textsize"], "function", ["None"], ["", "def", "makeTextHeaderImage", "(", "col_widths", ",", "headings", ",", "padding", "=", "(", "5", ",", "5", ")", ")", ":", "\n", "    ", "im_width", "=", "len", "(", "headings", ")", "*", "col_widths", "\n", "im_height", "=", "padding", "[", "1", "]", "*", "2", "+", "11", "\n", "\n", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "im_width", ",", "im_height", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "d", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "\n", "for", "i", ",", "txt", "in", "enumerate", "(", "headings", ")", ":", "\n", "\n", "        ", "while", "d", ".", "textsize", "(", "txt", ")", "[", "0", "]", ">", "col_widths", "-", "padding", "[", "0", "]", ":", "\n", "            ", "txt", "=", "txt", "[", ":", "-", "1", "]", "\n", "", "d", ".", "text", "(", "(", "col_widths", "*", "i", "+", "padding", "[", "0", "]", ",", "+", "padding", "[", "1", "]", ")", ",", "txt", ",", "fill", "=", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "\n", "", "raw_img_data", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "\"int32\"", ")", "\n", "\n", "return", "raw_img_data", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.process_contour": [[67, 98], ["matplotlib.Path", "range", "matplotlib.Path", "range", "pth.Path.contains_point", "contour_epi.contains_point", "pth.Path.contains_point"], "function", ["None"], ["", "def", "process_contour", "(", "segm_mask", ",", "endocardium", ",", "epicardium", "=", "None", ")", ":", "\n", "    ", "'''\n    in each pixel we sample these 8 points:\n     _________________\n    |    *        *   |\n    |  *            * |\n    |                 |\n    |                 |\n    |                 |\n    |  *            * |\n    |    *        *   |\n     ------------------\n    we say a pixel is in the contour if half or more of these 8 points fall within the contour line\n    '''", "\n", "\n", "contour_endo", "=", "pth", ".", "Path", "(", "endocardium", ",", "closed", "=", "True", ")", "\n", "contour_epi", "=", "pth", ".", "Path", "(", "epicardium", ",", "closed", "=", "True", ")", "if", "epicardium", "is", "not", "None", "else", "None", "\n", "for", "x", "in", "range", "(", "segm_mask", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "segm_mask", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "(", "dx", ",", "dy", ")", "in", "[", "(", "-", "0.25", ",", "-", "0.375", ")", ",", "(", "-", "0.375", ",", "-", "0.25", ")", ",", "(", "-", "0.25", ",", "0.375", ")", ",", "(", "-", "0.375", ",", "0.25", ")", ",", "(", "0.25", ",", "0.375", ")", ",", "\n", "(", "0.375", ",", "0.25", ")", ",", "(", "0.25", ",", "-", "0.375", ")", ",", "(", "0.375", ",", "-", "0.25", ")", "]", ":", "\n", "\n", "                ", "point", "=", "(", "x", "+", "dx", ",", "y", "+", "dy", ")", "\n", "if", "contour_epi", "is", "None", "and", "contour_endo", ".", "contains_point", "(", "point", ")", ":", "\n", "                    ", "segm_mask", "[", "y", ",", "x", "]", "+=", "1", "\n", "", "elif", "contour_epi", "is", "not", "None", "and", "contour_epi", ".", "contains_point", "(", "point", ")", "and", "not", "contour_endo", ".", "contains_point", "(", "point", ")", ":", "\n", "                    ", "segm_mask", "[", "y", ",", "x", "]", "+=", "1", "\n", "\n", "", "", "", "", "segm_mask", "=", "(", "segm_mask", ">=", "4", ")", "*", "1.", "\n", "return", "segm_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.intensity_augmentation": [[100, 111], ["albumentations.augmentations.transforms.RandomBrightnessContrast", "utils.data_utils.rescale", "utils.data_utils.rescale", "albumentations.augmentations.transforms.RandomBrightnessContrast."], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.rescale", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.rescale"], ["", "def", "intensity_augmentation", "(", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Perform a random intensity augmentation\n    :param batch: an image batch (B,H,W,C)\n    :return:      the intensity augmented batch\n    \"\"\"", "\n", "aug", "=", "albumentations", ".", "augmentations", ".", "transforms", ".", "RandomBrightnessContrast", "(", "brightness_limit", "=", "0.01", ",", "\n", "contrast_limit", "=", "(", "0.99", ",", "1.01", ")", ")", "\n", "batch", "=", "utils", ".", "data_utils", ".", "rescale", "(", "batch", ",", "0", ",", "1", ")", "\n", "batch", "=", "aug", "(", "image", "=", "batch", ")", "[", "'image'", "]", "\n", "return", "utils", ".", "data_utils", ".", "rescale", "(", "batch", ",", "-", "1", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.rescale": [[7, 21], ["array.max", "array.min", "array.max", "array.min", "array.max", "array.min", "array.max", "array.min", "float", "array.min"], "function", ["None"], ["def", "rescale", "(", "array", ",", "min_value", "=", "-", "1", ",", "max_value", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Rescales the input image between the min and max value.\n    :param array:       a 4D array\n    :param min_value:   the minimum value\n    :param max_value:   the maximum value\n    :return:            the rescaled array\n    \"\"\"", "\n", "if", "array", ".", "max", "(", ")", "==", "array", ".", "min", "(", ")", ":", "\n", "        ", "array", "=", "(", "array", "*", "0", ")", "+", "min_value", "\n", "return", "array", "\n", "", "array", "=", "(", "max_value", "-", "min_value", ")", "*", "(", "array", "-", "float", "(", "array", ".", "min", "(", ")", ")", ")", "/", "(", "array", ".", "max", "(", ")", "-", "array", ".", "min", "(", ")", ")", "+", "min_value", "\n", "assert", "array", ".", "max", "(", ")", "==", "max_value", "and", "array", ".", "min", "(", ")", "==", "min_value", ",", "'%d, %d'", "%", "(", "array", ".", "max", "(", ")", ",", "array", ".", "min", "(", ")", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise": [[22, 35], ["image.copy", "numpy.percentile", "numpy.divide", "numpy.percentile", "numpy.percentile", "numpy.any", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy"], ["", "def", "normalise", "(", "image", ")", ":", "\n", "    ", "\"\"\"\n    Normalise an image using the median and inter-quartile distance.\n    :param image:   a 4D array\n    :return:        the normalised image\n    \"\"\"", "\n", "array", "=", "image", ".", "copy", "(", ")", "\n", "m", "=", "np", ".", "percentile", "(", "array", ",", "50", ")", "\n", "s", "=", "np", ".", "percentile", "(", "array", ",", "75", ")", "-", "np", ".", "percentile", "(", "array", ",", "25", ")", "\n", "array", "=", "np", ".", "divide", "(", "(", "array", "-", "m", ")", ",", "s", "+", "1e-12", ")", "\n", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "array", ")", ")", ",", "'NaN values in normalised array'", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same": [[37, 80], ["range", "numpy.min", "numpy.min", "len", "img_result.append", "msk_result.append", "data_utils._crop", "data_utils._crop", "data_utils._pad", "data_utils._pad", "data_utils._crop", "data_utils._crop", "data_utils._pad", "data_utils._pad"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._crop", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._crop", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._pad", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._pad", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._crop", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._crop", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._pad", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._pad"], ["", "def", "crop_same", "(", "image_list", ",", "mask_list", ",", "size", "=", "(", "None", ",", "None", ")", ",", "mode", "=", "'equal'", ",", "pad_mode", "=", "'edge'", ")", ":", "\n", "    ", "'''\n    Crop the data in the image and mask lists, so that they have the same size.\n    :param image_list: a list of images. Each element should be 4-dimensional, (sl,h,w,chn)\n    :param mask_list:  a list of masks. Each element should be 4-dimensional, (sl,h,w,chn)\n    :param size:       dimensions to crop the images to.\n    :param mode:       can be one of [equal, left, right]. Denotes where to crop pixels from. Defaults to middle.\n    :param pad_mode:   can be one of ['edge', 'constant']. 'edge' pads using the values of the edge pixels,\n                       'constant' pads with a constant value\n    :return:           the modified arrays\n    '''", "\n", "min_w", "=", "np", ".", "min", "(", "[", "m", ".", "shape", "[", "1", "]", "for", "m", "in", "mask_list", "]", ")", "if", "size", "[", "0", "]", "is", "None", "else", "size", "[", "0", "]", "\n", "min_h", "=", "np", ".", "min", "(", "[", "m", ".", "shape", "[", "2", "]", "for", "m", "in", "mask_list", "]", ")", "if", "size", "[", "1", "]", "is", "None", "else", "size", "[", "1", "]", "\n", "\n", "# log.debug('Resizing list1 of size %s to size %s' % (str(image_list[0].shape), str((min_w, min_h))))", "\n", "# log.debug('Resizing list2 of size %s to size %s' % (str(mask_list[0].shape), str((min_w, min_h))))", "\n", "\n", "img_result", ",", "msk_result", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mask_list", ")", ")", ":", "\n", "        ", "im", "=", "image_list", "[", "i", "]", "\n", "m", "=", "mask_list", "[", "i", "]", "\n", "\n", "if", "m", ".", "shape", "[", "1", "]", ">", "min_w", ":", "\n", "            ", "m", "=", "_crop", "(", "m", ",", "1", ",", "min_w", ",", "mode", ")", "\n", "", "if", "im", ".", "shape", "[", "1", "]", ">", "min_w", ":", "\n", "            ", "im", "=", "_crop", "(", "im", ",", "1", ",", "min_w", ",", "mode", ")", "\n", "", "if", "m", ".", "shape", "[", "1", "]", "<", "min_w", ":", "\n", "            ", "m", "=", "_pad", "(", "m", ",", "1", ",", "min_w", ",", "pad_mode", ")", "\n", "", "if", "im", ".", "shape", "[", "1", "]", "<", "min_w", ":", "\n", "            ", "im", "=", "_pad", "(", "im", ",", "1", ",", "min_w", ",", "pad_mode", ")", "\n", "\n", "", "if", "m", ".", "shape", "[", "2", "]", ">", "min_h", ":", "\n", "            ", "m", "=", "_crop", "(", "m", ",", "2", ",", "min_h", ",", "mode", ")", "\n", "", "if", "im", ".", "shape", "[", "2", "]", ">", "min_h", ":", "\n", "            ", "im", "=", "_crop", "(", "im", ",", "2", ",", "min_h", ",", "mode", ")", "\n", "", "if", "m", ".", "shape", "[", "2", "]", "<", "min_h", ":", "\n", "            ", "m", "=", "_pad", "(", "m", ",", "2", ",", "min_h", ",", "pad_mode", ")", "\n", "", "if", "im", ".", "shape", "[", "2", "]", "<", "min_h", ":", "\n", "            ", "im", "=", "_pad", "(", "im", ",", "2", ",", "min_h", ",", "pad_mode", ")", "\n", "\n", "", "img_result", ".", "append", "(", "im", ")", "\n", "msk_result", ".", "append", "(", "m", ")", "\n", "", "return", "img_result", ",", "msk_result", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._crop": [[82, 102], ["int", "numpy.ceil"], "function", ["None"], ["", "def", "_crop", "(", "image", ",", "dim", ",", "nb_pixels", ",", "mode", ")", ":", "\n", "    ", "diff", "=", "image", ".", "shape", "[", "dim", "]", "-", "nb_pixels", "\n", "if", "mode", "==", "'equal'", ":", "\n", "        ", "l", "=", "int", "(", "np", ".", "ceil", "(", "diff", "/", "2", ")", ")", "\n", "r", "=", "image", ".", "shape", "[", "dim", "]", "-", "l", "\n", "", "elif", "mode", "==", "'right'", ":", "\n", "        ", "l", "=", "0", "\n", "r", "=", "nb_pixels", "\n", "", "elif", "mode", "==", "'left'", ":", "\n", "        ", "l", "=", "diff", "\n", "r", "=", "image", ".", "shape", "[", "dim", "]", "\n", "", "else", ":", "\n", "        ", "raise", "'Unexpected mode: %s. Expected to be one of [equal, left, right].'", "%", "mode", "\n", "\n", "", "if", "dim", "==", "1", ":", "\n", "        ", "return", "image", "[", ":", ",", "l", ":", "r", ",", ":", ",", ":", "]", "\n", "", "elif", "dim", "==", "2", ":", "\n", "        ", "return", "image", "[", ":", ",", ":", ",", "l", ":", "r", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils._pad": [[104, 123], ["int", "int", "numpy.pad", "numpy.pad", "Exception", "numpy.min"], "function", ["None"], ["", "", "def", "_pad", "(", "image", ",", "dim", ",", "nb_pixels", ",", "mode", "=", "'edge'", ")", ":", "\n", "    ", "diff", "=", "nb_pixels", "-", "image", ".", "shape", "[", "dim", "]", "\n", "l", "=", "int", "(", "diff", "/", "2", ")", "\n", "r", "=", "int", "(", "diff", "-", "l", ")", "\n", "if", "dim", "==", "1", ":", "\n", "        ", "pad_width", "=", "(", "(", "0", ",", "0", ")", ",", "(", "l", ",", "r", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "", "elif", "dim", "==", "2", ":", "\n", "        ", "pad_width", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "l", ",", "r", ")", ",", "(", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "mode", "==", "'edge'", ":", "\n", "        ", "new_image", "=", "np", ".", "pad", "(", "image", ",", "pad_width", ",", "'edge'", ")", "\n", "", "elif", "mode", "==", "'constant'", ":", "\n", "        ", "new_image", "=", "np", ".", "pad", "(", "image", ",", "pad_width", ",", "'constant'", ",", "constant_values", "=", "np", ".", "min", "(", "image", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Invalid pad mode: '", "+", "mode", ")", "\n", "\n", "", "return", "new_image", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.sample": [[125, 130], ["numpy.random.choice", "numpy.array", "numpy.random.seed", "len"], "function", ["None"], ["", "def", "sample", "(", "data", ",", "nb_samples", ",", "seed", "=", "-", "1", ")", ":", "\n", "    ", "if", "seed", ">", "-", "1", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "data", ")", ",", "size", "=", "nb_samples", ",", "replace", "=", "False", ")", "\n", "return", "np", ".", "array", "(", "[", "data", "[", "i", "]", "for", "i", "in", "idx", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.distributions.NormalDistribution.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mu", "=", "0", "\n", "self", ".", "sigma", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.distributions.NormalDistribution.sample": [[9, 12], ["numpy.random.normal"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "N", ")", ":", "\n", "        ", "samples", "=", "np", ".", "random", ".", "normal", "(", "self", ".", "mu", ",", "self", ".", "sigma", ",", "N", ")", "\n", "return", "samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.base_loader.Loader.__init__": [[14, 25], ["logging.getLogger", "sorted", "base_loader.Loader.splits", "base_loader.Loader.splits", "base_loader.Loader.splits"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits"], ["def", "__init__", "(", "self", ",", "volumes", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_masks", "=", "0", "\n", "self", ".", "num_volumes", "=", "0", "\n", "self", ".", "input_shape", "=", "(", "None", ",", "None", ",", "1", ")", "\n", "self", ".", "processed_folder", "=", "None", "\n", "if", "volumes", "is", "not", "None", ":", "\n", "            ", "self", ".", "volumes", "=", "volumes", "\n", "", "else", ":", "\n", "            ", "all_volumes", "=", "self", ".", "splits", "(", ")", "[", "0", "]", "[", "'training'", "]", "+", "self", ".", "splits", "(", ")", "[", "0", "]", "[", "'validation'", "]", "+", "self", ".", "splits", "(", ")", "[", "0", "]", "[", "'test'", "]", "\n", "self", ".", "volumes", "=", "sorted", "(", "all_volumes", ")", "\n", "", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "'loader'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.base_loader.Loader.splits": [[26, 32], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "splits", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: an array of splits into validation, test and train indices\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.base_loader.Loader.load_all_modalities_concatenated": [[33, 42], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_all_modalities_concatenated", "(", "self", ",", "split", ",", "split_type", ",", "downsample", ")", ":", "\n", "        ", "\"\"\"\n        Load multimodal data, and concatenate the images of the same volume/slice\n        :param split:       the split number\n        :param split_type:  training/validation/test\n        :return:            a Data object of multimodal images\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.base_loader.Loader.load_labelled_data": [[43, 56], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_labelled_data", "(", "self", ",", "split", ",", "split_type", ",", "modality", ",", "normalise", "=", "True", ",", "downsample", "=", "1", ",", "root_folder", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Load labelled data.\n        :param split:       the split number, e.g. 0, 1\n        :param split_type:  the split type, e.g. training, validation, test, all (for all data)\n        :param modality:    modality to load if the dataset has multimodal data\n        :param normalise:   True/False: normalise images to [-1, 1]\n        :param downsample:  downsample image ratio - used for for testing\n        :param root_folder: root data folder\n        :return:            a Data object containing the loaded data\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.base_loader.Loader.load_unlabelled_data": [[57, 68], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_unlabelled_data", "(", "self", ",", "split", ",", "split_type", ",", "modality", ",", "normalise", "=", "True", ",", "downsample", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Load unlabelled data.\n        :param split:       the split number, e.g. 0, 1\n        :param split_type:  the split type, e.g. training, validation, test, all (for all data)\n        :param modality:    modality to load if the dataset has multimodal data\n        :param normalise:   True/False: normalise images to [-1, 1]\n        :return:            a Data object containing the loaded data\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.base_loader.Loader.load_all_data": [[69, 80], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_all_data", "(", "self", ",", "split", ",", "split_type", ",", "modality", ",", "normalise", "=", "True", ",", "downsample", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Load all images (labelled and unlabelled).\n        :param split:       the split number, e.g. 0, 1\n        :param split_type:  the split type, e.g. training, validation, test, all (for all data)\n        :param modality:    modality to load if the dataset has multimodal data\n        :param normalise:   True/False: normalise images to [-1, 1]\n        :return:            a Data object containing the loaded data\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.base_loader.Loader.get_volumes_for_split": [[81, 90], ["sorted", "base_loader.Loader.splits", "base_loader.Loader.splits", "base_loader.Loader.splits", "base_loader.Loader.splits"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits"], ["", "def", "get_volumes_for_split", "(", "self", ",", "split", ",", "split_type", ")", ":", "\n", "        ", "assert", "split_type", "in", "[", "'training'", ",", "'validation'", ",", "'test'", ",", "'all'", "]", ",", "'Unknown split_type: '", "+", "split_type", "\n", "\n", "if", "split_type", "==", "'all'", ":", "\n", "            ", "volumes", "=", "sorted", "(", "self", ".", "splits", "(", ")", "[", "split", "]", "[", "'training'", "]", "+", "self", ".", "splits", "(", ")", "[", "split", "]", "[", "'validation'", "]", "+", "\n", "self", ".", "splits", "(", ")", "[", "split", "]", "[", "'test'", "]", ")", "\n", "", "else", ":", "\n", "            ", "volumes", "=", "self", ".", "splits", "(", ")", "[", "split", "]", "[", "split_type", "]", "\n", "", "return", "volumes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.__init__": [[12, 27], ["loaders.data.Data.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "images", ",", "masks", ",", "index", ",", "downsample", "=", "1", ")", ":", "\n", "        ", "super", "(", "MultimodalPairedData", ",", "self", ")", ".", "__init__", "(", "images", ",", "masks", ",", "index", ",", "downsample", ")", "\n", "self", ".", "num_modalities", "=", "self", ".", "images", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "masks_per_mod", "=", "self", ".", "masks", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "\n", "images_mod1", "=", "self", ".", "images", "[", "...", ",", "0", ":", "1", "]", "\n", "images_mod2", "=", "self", ".", "images", "[", "...", ",", "1", ":", "2", "]", "\n", "masks_mod1", "=", "self", ".", "masks", "[", "...", ",", "0", ":", "self", ".", "masks_per_mod", "]", "\n", "masks_mod2", "=", "self", ".", "masks", "[", "...", ",", "self", ".", "masks_per_mod", ":", "]", "\n", "\n", "self", ".", "image_dict", "=", "{", "0", ":", "images_mod1", ",", "1", ":", "images_mod2", "}", "\n", "self", ".", "masks_dict", "=", "{", "0", ":", "masks_mod1", ",", "1", ":", "masks_mod2", "}", "\n", "\n", "del", "self", ".", "images", "\n", "del", "self", ".", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi": [[28, 30], ["None"], "methods", ["None"], ["", "def", "get_images_modi", "(", "self", ",", "mod_i", ")", ":", "\n", "        ", "return", "self", ".", "image_dict", "[", "mod_i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi": [[31, 33], ["None"], "methods", ["None"], ["", "def", "get_masks_modi", "(", "self", ",", "mod_i", ")", ":", "\n", "        ", "return", "self", ".", "masks_dict", "[", "mod_i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi": [[34, 36], ["None"], "methods", ["None"], ["", "def", "set_images_modi", "(", "self", ",", "mod_i", ",", "images", ")", ":", "\n", "        ", "self", ".", "image_dict", "[", "mod_i", "]", "=", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_masks_modi": [[37, 39], ["None"], "methods", ["None"], ["", "def", "set_masks_modi", "(", "self", ",", "mod_i", ",", "masks", ")", ":", "\n", "        ", "self", ".", "masks_dict", "[", "mod_i", "]", "=", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_images_modi": [[40, 42], ["MultimodalPairedData.MultimodalPairedData.get_images_modi"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi"], ["", "def", "get_volume_images_modi", "(", "self", ",", "mod_i", ",", "vol", ")", ":", "\n", "        ", "return", "self", ".", "get_images_modi", "(", "mod_i", ")", "[", "self", ".", "index", "==", "vol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_masks_modi": [[43, 45], ["MultimodalPairedData.MultimodalPairedData.get_masks_modi"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "get_volume_masks_modi", "(", "self", ",", "mod_i", ",", "vol", ")", ":", "\n", "        ", "return", "self", ".", "get_masks_modi", "(", "mod_i", ")", "[", "self", ".", "index", "==", "vol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.filter_volumes": [[46, 63], ["range", "numpy.concatenate", "len", "log.info", "len", "range", "MultimodalPairedData.MultimodalPairedData.set_images_modi", "MultimodalPairedData.MultimodalPairedData.set_masks_modi", "MultimodalPairedData.MultimodalPairedData.set_images_modi", "MultimodalPairedData.MultimodalPairedData.set_masks_modi", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "MultimodalPairedData.MultimodalPairedData.index.copy", "str", "MultimodalPairedData.MultimodalPairedData.size", "MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "MultimodalPairedData.MultimodalPairedData.get_volume_masks_modi"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_masks_modi"], ["", "def", "filter_volumes", "(", "self", ",", "volumes", ")", ":", "\n", "        ", "if", "len", "(", "volumes", ")", "==", "0", ":", "\n", "            ", "for", "modi", "in", "range", "(", "self", ".", "num_modalities", ")", ":", "\n", "                ", "self", ".", "set_images_modi", "(", "modi", ",", "np", ".", "array", "(", "(", "0", ",", ")", "+", "self", ".", "image_shape", ")", ")", "\n", "self", ".", "set_masks_modi", "(", "modi", ",", "np", ".", "array", "(", "(", "0", ",", ")", "+", "self", ".", "mask_shape", ")", ")", "\n", "self", ".", "index", "=", "np", ".", "array", "(", "(", "0", ",", ")", "+", "self", ".", "index", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "num_volumes", "=", "0", "\n", "", "return", "\n", "\n", "", "for", "modi", "in", "range", "(", "self", ".", "num_modalities", ")", ":", "\n", "            ", "self", ".", "set_images_modi", "(", "modi", ",", "np", ".", "concatenate", "(", "[", "self", ".", "get_volume_images_modi", "(", "modi", ",", "v", ")", "for", "v", "in", "volumes", "]", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "set_masks_modi", "(", "modi", ",", "np", ".", "concatenate", "(", "[", "self", ".", "get_volume_masks_modi", "(", "modi", ",", "v", ")", "for", "v", "in", "volumes", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "self", ".", "index", "=", "np", ".", "concatenate", "(", "[", "self", ".", "index", ".", "copy", "(", ")", "[", "self", ".", "index", "==", "v", "]", "for", "v", "in", "volumes", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "num_volumes", "=", "len", "(", "volumes", ")", "\n", "\n", "log", ".", "info", "(", "'Filtered volumes: %s of total %d images'", "%", "(", "str", "(", "volumes", ")", ",", "self", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.crop": [[64, 73], ["log.debug", "range", "utils.data_utils.crop_same", "MultimodalPairedData.MultimodalPairedData.set_images_modi", "MultimodalPairedData.MultimodalPairedData.set_masks_modi", "str", "tuple", "str", "MultimodalPairedData.MultimodalPairedData.get_images_modi", "MultimodalPairedData.MultimodalPairedData.get_masks_modi", "str", "str"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "crop", "(", "self", ",", "shape", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Cropping images and masks to shape '", "+", "str", "(", "shape", ")", ")", "\n", "for", "modi", "in", "range", "(", "self", ".", "num_modalities", ")", ":", "\n", "            ", "[", "images", "]", ",", "[", "masks", "]", "=", "utils", ".", "data_utils", ".", "crop_same", "(", "[", "self", ".", "get_images_modi", "(", "modi", ")", "]", ",", "[", "self", ".", "get_masks_modi", "(", "modi", ")", "]", ",", "\n", "size", "=", "shape", ",", "pad_mode", "=", "'constant'", ")", "\n", "self", ".", "set_images_modi", "(", "modi", ",", "images", ")", "\n", "self", ".", "set_masks_modi", "(", "modi", ",", "masks", ")", "\n", "assert", "images", ".", "shape", "[", "1", ":", "-", "1", "]", "==", "masks", ".", "shape", "[", "1", ":", "-", "1", "]", "==", "tuple", "(", "shape", ")", ",", "'Invalid shapes: '", "+", "str", "(", "images", ".", "shape", "[", "1", ":", "-", "1", "]", ")", "+", "' '", "+", "str", "(", "masks", ".", "shape", "[", "1", ":", "-", "1", "]", ")", "+", "' '", "+", "str", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.size": [[74, 76], ["numpy.max", "range", "MultimodalPairedData.MultimodalPairedData.get_images_modi"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi"], ["", "", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "[", "self", ".", "get_images_modi", "(", "modi", ")", ".", "shape", "[", "0", "]", "for", "modi", "in", "range", "(", "self", ".", "num_modalities", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.sample_images": [[77, 90], ["log.info", "numpy.random.choice", "range", "numpy.array", "numpy.random.seed", "MultimodalPairedData.MultimodalPairedData.size", "MultimodalPairedData.MultimodalPairedData.get_images_modi", "MultimodalPairedData.MultimodalPairedData.get_masks_modi", "MultimodalPairedData.MultimodalPairedData.set_images_modi", "MultimodalPairedData.MultimodalPairedData.set_masks_modi", "numpy.array", "numpy.array", "MultimodalPairedData.MultimodalPairedData.size"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size"], ["", "def", "sample_images", "(", "self", ",", "num", ",", "seed", "=", "-", "1", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Sampling %d images out of total %d'", "%", "(", "num", ",", "self", ".", "size", "(", ")", ")", ")", "\n", "if", "seed", ">", "-", "1", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "size", "(", ")", ",", "size", "=", "num", ",", "replace", "=", "False", ")", "\n", "for", "modi", "in", "range", "(", "self", ".", "num_modalities", ")", ":", "\n", "            ", "images", "=", "self", ".", "get_images_modi", "(", "modi", ")", "\n", "masks", "=", "self", ".", "get_masks_modi", "(", "modi", ")", "\n", "\n", "self", ".", "set_images_modi", "(", "np", ".", "array", "(", "[", "images", "[", "i", "]", "for", "i", "in", "idx", "]", ")", ")", "\n", "self", ".", "set_masks_modi", "(", "np", ".", "array", "(", "[", "masks", "[", "i", "]", "for", "i", "in", "idx", "]", ")", ")", "\n", "", "self", ".", "index", "=", "np", ".", "array", "(", "[", "self", ".", "index", "[", "i", "]", "for", "i", "in", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.expand_pairs": [[91, 142], ["log.debug", "MultimodalPairedData.MultimodalPairedData.volumes", "numpy.concatenate", "MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "range", "numpy.concatenate.append", "MultimodalPairedData.MultimodalPairedData.set_images_modi", "list.insert", "numpy.concatenate", "vol_img_mod1.append", "numpy.concatenate", "MultimodalPairedData.MultimodalPairedData.set_images_modi", "list.pop", "len", "len", "list", "len", "list", "list", "list.index", "list", "len", "numpy.random.choice", "range", "range", "list", "list", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi"], ["", "def", "expand_pairs", "(", "self", ",", "offsets", ",", "mod_i", ",", "neighborhood", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        Create more pairs by considering neighbour images. Change the object in-place\n        :param offsets: number of neighbouring slices to pair with\n        :param mod_i: which modality is enlarged\n        :param neighborhood: the number of candidates.\n        \"\"\"", "\n", "assert", "mod_i", "in", "[", "0", ",", "1", "]", ",", "'mod_i can be in [0, 1]. It defines the neighborhood of which modality to enlarge'", "\n", "log", ".", "debug", "(", "'Enlarge neighborhood with %d pairs'", "%", "offsets", ")", "\n", "\n", "all_images", ",", "all_labels", ",", "all_index", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "vol", "in", "self", ".", "volumes", "(", ")", ":", "\n", "            ", "img_mod1", "=", "self", ".", "get_volume_images_modi", "(", "mod_i", ",", "vol", ")", "\n", "img_mod2", "=", "self", ".", "get_volume_images_modi", "(", "1", "-", "mod_i", ",", "vol", ")", "\n", "\n", "num_images", "=", "img_mod2", ".", "shape", "[", "0", "]", "\n", "vol_img_mod1", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "if", "img_mod1", ".", "shape", "[", "0", "]", "<", "2", "*", "offsets", "+", "1", ":", "\n", "                    ", "value_range", "=", "list", "(", "range", "(", "0", ",", "img_mod1", ".", "shape", "[", "0", "]", ")", ")", "+", "[", "0", "]", "*", "(", "2", "*", "offsets", "+", "1", "-", "img_mod1", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "i", "<", "offsets", ":", "\n", "                    ", "value_range", "=", "list", "(", "range", "(", "0", ",", "2", "*", "offsets", "+", "1", ")", ")", "\n", "", "elif", "i", "+", "offsets", ">=", "num_images", ":", "\n", "                    ", "value_range", "=", "list", "(", "range", "(", "num_images", "-", "(", "2", "*", "offsets", "+", "1", ")", ",", "num_images", ")", ")", "\n", "", "else", ":", "\n", "                    ", "value_range", "=", "list", "(", "range", "(", "i", "-", "offsets", ",", "i", "+", "offsets", "+", "1", ")", ")", "\n", "\n", "# rearrange values, such that the first value is the expertly paired one.", "\n", "", "value_range", ".", "insert", "(", "0", ",", "value_range", ".", "pop", "(", "value_range", ".", "index", "(", "i", ")", ")", ")", "\n", "assert", "len", "(", "list", "(", "value_range", ")", ")", "==", "2", "*", "offsets", "+", "1", ",", "'Invalid length: %d vs %d'", "%", "(", "2", "*", "offsets", "+", "1", ",", "len", "(", "list", "(", "value_range", ")", ")", ")", "\n", "\n", "if", "len", "(", "value_range", ")", ">", "neighborhood", ":", "\n", "                    ", "new_value_range", "=", "[", "value_range", "[", "0", "]", "]", "\n", "new_value_range", "+=", "list", "(", "np", ".", "random", ".", "choice", "(", "value_range", "[", "1", ":", "]", ",", "size", "=", "neighborhood", "-", "1", ",", "replace", "=", "False", ")", ")", "\n", "value_range", "=", "new_value_range", "\n", "", "assert", "len", "(", "value_range", ")", "<=", "neighborhood", ",", "\"Exceeded maximum neighborhood size\"", "\n", "\n", "neighbour_imgs", "=", "np", ".", "concatenate", "(", "[", "img_mod1", "[", "index", ":", "index", "+", "1", "]", "for", "index", "in", "value_range", "]", ",", "axis", "=", "-", "1", ")", "\n", "vol_img_mod1", ".", "append", "(", "neighbour_imgs", ")", "\n", "\n", "", "all_images", ".", "append", "(", "np", ".", "concatenate", "(", "vol_img_mod1", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "all_images", "=", "np", ".", "concatenate", "(", "all_images", ",", "axis", "=", "0", ")", "\n", "\n", "assert", "all_images", ".", "shape", "[", "-", "1", "]", "==", "neighborhood", ",", "'%s vs %s'", "%", "(", "all_images", ".", "shape", "[", "-", "1", "]", ",", "neighborhood", ")", "\n", "\n", "if", "mod_i", "==", "0", ":", "\n", "            ", "self", ".", "set_images_modi", "(", "0", ",", "all_images", ")", "\n", "", "elif", "mod_i", "==", "1", ":", "\n", "            ", "self", ".", "set_images_modi", "(", "1", ",", "all_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.randomise_pairs": [[143, 168], ["log.debug", "MultimodalPairedData.MultimodalPairedData.volumes", "MultimodalPairedData.MultimodalPairedData.set_images_modi", "MultimodalPairedData.MultimodalPairedData.set_masks_modi", "numpy.random.seed", "MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "MultimodalPairedData.MultimodalPairedData.get_volume_masks_modi", "numpy.random.randint", "range", "range", "new_images.append", "new_masks.append", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.random.randint", "numpy.random.randint", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_volume_masks_modi"], ["", "", "def", "randomise_pairs", "(", "self", ",", "length", "=", "3", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "seed", "is", "not", "None", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "log", ".", "debug", "(", "'Randomising pairs within a volume'", ")", "\n", "\n", "new_images", ",", "new_masks", "=", "[", "]", ",", "[", "]", "\n", "for", "vol", "in", "self", ".", "volumes", "(", ")", ":", "\n", "            ", "images", "=", "self", ".", "get_volume_images_modi", "(", "0", ",", "vol", ")", "\n", "masks", "=", "self", ".", "get_volume_masks_modi", "(", "0", ",", "vol", ")", "\n", "\n", "offsets", "=", "np", ".", "random", ".", "randint", "(", "-", "length", ",", "length", ",", "size", "=", "images", ".", "shape", "[", "0", "]", ")", "\n", "for", "off", "in", "range", "(", "length", ")", ":", "\n", "                ", "if", "offsets", "[", "off", "]", "+", "off", "<", "0", ":", "\n", "                    ", "offsets", "[", "off", "]", "=", "np", ".", "random", ".", "randint", "(", "-", "off", ",", "length", ",", "size", "=", "1", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "                ", "if", "offsets", "[", "-", "i", "]", "+", "range", "(", "images", ".", "shape", "[", "0", "]", ")", "[", "-", "i", "]", ">=", "images", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "offsets", "[", "-", "i", "]", "=", "np", ".", "random", ".", "randint", "(", "-", "length", ",", "i", ",", "size", "=", "1", ")", "\n", "", "", "new_pair_index", "=", "np", ".", "array", "(", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ")", "+", "offsets", "\n", "\n", "new_images", ".", "append", "(", "images", "[", "new_pair_index", "]", ")", "\n", "new_masks", ".", "append", "(", "masks", "[", "new_pair_index", "]", ")", "\n", "\n", "", "self", ".", "set_images_modi", "(", "0", ",", "np", ".", "concatenate", "(", "new_images", ",", "axis", "=", "0", ")", ")", "\n", "self", ".", "set_masks_modi", "(", "0", ",", "np", ".", "concatenate", "(", "new_masks", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.merge": [[169, 189], ["log.info", "range", "numpy.concatenate", "len", "MultimodalPairedData.MultimodalPairedData.get_images_modi", "other.get_images_modi", "MultimodalPairedData.MultimodalPairedData.get_masks_modi", "other.get_masks_modi", "numpy.concatenate", "numpy.concatenate", "MultimodalPairedData.MultimodalPairedData.set_images_modi", "MultimodalPairedData.MultimodalPairedData.set_masks_modi", "MultimodalPairedData.MultimodalPairedData.volumes", "other.size", "MultimodalPairedData.MultimodalPairedData.size", "MultimodalPairedData.MultimodalPairedData.get_images_modi"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.set_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi"], ["", "def", "merge", "(", "self", ",", "other", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Merging Data object of %d to this Data object of size %d'", "%", "(", "other", ".", "size", "(", ")", ",", "self", ".", "size", "(", ")", ")", ")", "\n", "\n", "for", "mod", "in", "range", "(", "self", ".", "num_modalities", ")", ":", "\n", "            ", "cur_img_mod", "=", "self", ".", "get_images_modi", "(", "mod", ")", "\n", "oth_img_mod", "=", "other", ".", "get_images_modi", "(", "mod", ")", "\n", "\n", "cur_msk_mod", "=", "self", ".", "get_masks_modi", "(", "mod", ")", "\n", "oth_msk_mod", "=", "other", ".", "get_masks_modi", "(", "mod", ")", "\n", "\n", "img_mod", "=", "np", ".", "concatenate", "(", "[", "cur_img_mod", ",", "oth_img_mod", "]", ",", "axis", "=", "0", ")", "\n", "msk_mod", "=", "np", ".", "concatenate", "(", "[", "cur_msk_mod", ",", "oth_msk_mod", "]", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "set_images_modi", "(", "mod", ",", "img_mod", ")", "\n", "self", ".", "set_masks_modi", "(", "mod", ",", "msk_mod", ")", "\n", "\n", "", "self", ".", "index", "=", "np", ".", "concatenate", "(", "[", "self", ".", "index", ",", "other", ".", "index", "]", ",", "axis", "=", "0", ")", "\n", "assert", "self", ".", "get_images_modi", "(", "0", ")", ".", "shape", "[", "0", "]", "==", "self", ".", "index", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "num_volumes", "=", "len", "(", "self", ".", "volumes", "(", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.__init__": [[14, 39], ["len", "data.Data.downsample", "log.info", "log.info", "log.info", "data.Data.volumes", "str", "images.min", "images.max", "masks.min", "masks.max"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.downsample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "masks", ",", "index", ",", "downsample", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Data constructor.\n        :param images:      a 4-D numpy array of images. Expected shape: (N, H, W, 1)\n        :param masks:       a 4-D numpy array of segmentation masks. Expected shape: (N, H, W, L)\n        :param index:       a 1-D numpy array indicating the volume each image/mask belongs to. Used for data selection.\n        :param downsample:  factor to downsample images.\n        \"\"\"", "\n", "assert", "images", ".", "shape", "[", ":", "-", "1", "]", "==", "masks", ".", "shape", "[", ":", "-", "1", "]", "\n", "assert", "images", ".", "shape", "[", "0", "]", "==", "index", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "image_shape", "=", "images", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "mask_shape", "=", "masks", ".", "shape", "[", "1", ":", "]", "\n", "\n", "self", ".", "images", "=", "images", "\n", "self", ".", "masks", "=", "masks", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "num_volumes", "=", "len", "(", "self", ".", "volumes", "(", ")", ")", "\n", "\n", "self", ".", "downsample", "(", "downsample", ")", "\n", "\n", "log", ".", "info", "(", "\n", "'Creating Data object with images of shape %s and %d volumes'", "%", "(", "str", "(", "self", ".", "images", ".", "shape", ")", ",", "self", ".", "num_volumes", ")", ")", "\n", "log", ".", "info", "(", "'Images value range [%.1f, %.1f]'", "%", "(", "images", ".", "min", "(", ")", ",", "images", ".", "max", "(", ")", ")", ")", "\n", "log", ".", "info", "(", "'Masks value range [%.1f, %.1f]'", "%", "(", "masks", ".", "min", "(", ")", ",", "masks", ".", "max", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy": [[40, 42], ["data.Data", "numpy.copy", "numpy.copy", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "Data", "(", "np", ".", "copy", "(", "self", ".", "images", ")", ",", "np", ".", "copy", "(", "self", ".", "masks", ")", ",", "np", ".", "copy", "(", "self", ".", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.merge": [[43, 54], ["log.info", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "str", "str", "data.Data.volumes", "str", "str", "other.size", "data.Data.size"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size"], ["", "def", "merge", "(", "self", ",", "other", ")", ":", "\n", "        ", "assert", "self", ".", "images", ".", "shape", "[", "1", ":", "]", "==", "other", ".", "images", ".", "shape", "[", "1", ":", "]", ",", "str", "(", "self", ".", "images", ".", "shape", ")", "+", "' vs '", "+", "str", "(", "\n", "other", ".", "images", ".", "shape", ")", "\n", "assert", "self", ".", "masks", ".", "shape", "[", "1", ":", "]", "==", "other", ".", "masks", ".", "shape", "[", "1", ":", "]", ",", "str", "(", "self", ".", "masks", ".", "shape", ")", "+", "' vs '", "+", "str", "(", "other", ".", "masks", ".", "shape", ")", "\n", "\n", "log", ".", "info", "(", "'Merging Data object of %d to this Data object of size %d'", "%", "(", "other", ".", "size", "(", ")", ",", "self", ".", "size", "(", ")", ")", ")", "\n", "\n", "self", ".", "images", "=", "np", ".", "concatenate", "(", "[", "self", ".", "images", ",", "other", ".", "images", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "masks", "=", "np", ".", "concatenate", "(", "[", "self", ".", "masks", ",", "other", ".", "masks", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "index", "=", "np", ".", "concatenate", "(", "[", "self", ".", "index", ",", "other", ".", "index", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "num_volumes", "=", "len", "(", "self", ".", "volumes", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shuffle": [[55, 61], ["numpy.array", "numpy.random.shuffle", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "idx", "=", "np", ".", "array", "(", "range", "(", "self", ".", "images", ".", "shape", "[", "0", "]", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "self", ".", "images", "=", "self", ".", "images", "[", "idx", "]", "\n", "self", ".", "masks", "=", "self", ".", "masks", "[", "idx", "]", "\n", "self", ".", "index", "=", "self", ".", "index", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.crop": [[62, 69], ["log.debug", "utils.data_utils.crop_same", "utils.data_utils.crop_same", "utils.data_utils.crop_same", "utils.data_utils.crop_same", "tuple", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same"], ["", "def", "crop", "(", "self", ",", "shape", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Cropping images and masks to shape '", "+", "str", "(", "shape", ")", ")", "\n", "[", "images", "]", ",", "[", "masks", "]", "=", "utils", ".", "data_utils", ".", "crop_same", "(", "[", "self", ".", "images", "]", ",", "[", "self", ".", "masks", "]", ",", "size", "=", "shape", ",", "pad_mode", "=", "'constant'", ")", "\n", "self", ".", "images", "=", "images", "\n", "self", ".", "masks", "=", "masks", "\n", "assert", "self", ".", "images", ".", "shape", "[", "1", ":", "-", "1", "]", "==", "self", ".", "masks", ".", "shape", "[", "1", ":", "-", "1", "]", "==", "tuple", "(", "shape", ")", ",", "'Invalid shapes: '", "+", "str", "(", "self", ".", "images", ".", "shape", "[", "1", ":", "-", "1", "]", ")", "+", "' '", "+", "str", "(", "self", ".", "masks", ".", "shape", "[", "1", ":", "-", "1", "]", ")", "+", "' '", "+", "str", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes": [[70, 72], ["sorted", "set"], "methods", ["None"], ["", "def", "volumes", "(", "self", ")", ":", "\n", "        ", "return", "sorted", "(", "set", "(", "self", ".", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_images": [[73, 75], ["None"], "methods", ["None"], ["", "def", "get_images", "(", "self", ",", "vol", ")", ":", "\n", "        ", "return", "self", ".", "images", "[", "self", ".", "index", "==", "vol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_masks": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_masks", "(", "self", ",", "vol", ")", ":", "\n", "        ", "return", "self", ".", "masks", "[", "self", ".", "index", "==", "vol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size": [[79, 81], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample_per_volume": [[82, 112], ["log.info", "data.Data.volumes", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "log.info", "numpy.random.seed", "data.Data.get_images", "data.Data.get_masks", "numpy.array", "numpy.array", "numpy.array", "new_images.append", "new_masks.append", "new_index.append", "log.debug", "range", "numpy.random.choice", "len", "len", "str"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_images", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_masks"], ["", "def", "sample_per_volume", "(", "self", ",", "num", ",", "seed", "=", "-", "1", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Sampling %d from each volume'", "%", "num", ")", "\n", "if", "seed", ">", "-", "1", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "new_images", ",", "new_masks", ",", "new_scanner", ",", "new_index", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "vol", "in", "self", ".", "volumes", "(", ")", ":", "\n", "            ", "images", "=", "self", ".", "get_images", "(", "vol", ")", "\n", "masks", "=", "self", ".", "get_masks", "(", "vol", ")", "\n", "\n", "if", "images", ".", "shape", "[", "0", "]", "<", "num", ":", "\n", "                ", "log", ".", "debug", "(", "'Volume %s contains less images: %d < %d. Sampling %d images.'", "%", "\n", "(", "str", "(", "vol", ")", ",", "images", ".", "shape", "[", "0", "]", ",", "num", ",", "images", ".", "shape", "[", "0", "]", ")", ")", "\n", "idx", "=", "range", "(", "len", "(", "images", ")", ")", "\n", "", "else", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "choice", "(", "images", ".", "shape", "[", "0", "]", ",", "size", "=", "num", ",", "replace", "=", "False", ")", "\n", "\n", "", "images", "=", "np", ".", "array", "(", "[", "images", "[", "i", "]", "for", "i", "in", "idx", "]", ")", "\n", "masks", "=", "np", ".", "array", "(", "[", "masks", "[", "i", "]", "for", "i", "in", "idx", "]", ")", "\n", "index", "=", "np", ".", "array", "(", "[", "vol", "]", "*", "num", ")", "\n", "\n", "new_images", ".", "append", "(", "images", ")", "\n", "new_masks", ".", "append", "(", "masks", ")", "\n", "new_index", ".", "append", "(", "index", ")", "\n", "\n", "", "self", ".", "images", "=", "np", ".", "concatenate", "(", "new_images", ",", "axis", "=", "0", ")", "\n", "self", ".", "masks", "=", "np", ".", "concatenate", "(", "new_masks", ",", "axis", "=", "0", ")", "\n", "self", ".", "index", "=", "np", ".", "concatenate", "(", "new_index", ",", "axis", "=", "0", ")", "\n", "\n", "log", ".", "info", "(", "'Sampled %d images.'", "%", "len", "(", "self", ".", "images", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample_images": [[113, 122], ["log.info", "numpy.random.choice", "numpy.array", "numpy.array", "numpy.array", "numpy.random.seed", "data.Data.size", "data.Data.size"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size"], ["", "def", "sample_images", "(", "self", ",", "num", ",", "seed", "=", "-", "1", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Sampling %d images out of total %d'", "%", "(", "num", ",", "self", ".", "size", "(", ")", ")", ")", "\n", "if", "seed", ">", "-", "1", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "size", "(", ")", ",", "size", "=", "num", ",", "replace", "=", "False", ")", "\n", "self", ".", "images", "=", "np", ".", "array", "(", "[", "self", ".", "images", "[", "i", "]", "for", "i", "in", "idx", "]", ")", "\n", "self", ".", "masks", "=", "np", ".", "array", "(", "[", "self", ".", "masks", "[", "i", "]", "for", "i", "in", "idx", "]", ")", "\n", "self", ".", "index", "=", "np", ".", "array", "(", "[", "self", ".", "index", "[", "i", "]", "for", "i", "in", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_sample_volumes": [[123, 130], ["log.info", "numpy.random.choice", "numpy.random.seed", "data.Data.volumes"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes"], ["", "def", "get_sample_volumes", "(", "self", ",", "num", ",", "seed", "=", "-", "1", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Sampling %d volumes out of total %d'", "%", "(", "num", ",", "self", ".", "num_volumes", ")", ")", "\n", "if", "seed", ">", "-", "1", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "volumes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "volumes", "(", ")", ",", "size", "=", "num", ",", "replace", "=", "False", ")", "\n", "return", "volumes", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample": [[131, 137], ["data.Data.get_sample_volumes", "data.Data.filter_volumes"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_sample_volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.filter_volumes"], ["", "def", "sample", "(", "self", ",", "num", ",", "seed", "=", "-", "1", ")", ":", "\n", "        ", "if", "num", "==", "self", ".", "num_volumes", ":", "\n", "            ", "return", "\n", "\n", "", "volumes", "=", "self", ".", "get_sample_volumes", "(", "num", ",", "seed", ")", "\n", "self", ".", "filter_volumes", "(", "volumes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.filter_volumes": [[138, 152], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "log.info", "len", "numpy.array", "numpy.array", "numpy.array", "data.Data.get_images", "data.Data.get_masks", "data.Data.index.copy", "str", "data.Data.size"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_images", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_masks", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size"], ["", "def", "filter_volumes", "(", "self", ",", "volumes", ")", ":", "\n", "        ", "if", "len", "(", "volumes", ")", "==", "0", ":", "\n", "            ", "self", ".", "images", "=", "np", ".", "array", "(", "(", "0", ",", ")", "+", "self", ".", "images", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "masks", "=", "np", ".", "array", "(", "(", "0", ",", ")", "+", "self", ".", "masks", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "index", "=", "np", ".", "array", "(", "(", "0", ",", ")", "+", "self", ".", "index", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "num_volumes", "=", "0", "\n", "return", "\n", "\n", "", "self", ".", "images", "=", "np", ".", "concatenate", "(", "[", "self", ".", "get_images", "(", "v", ")", "for", "v", "in", "volumes", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "masks", "=", "np", ".", "concatenate", "(", "[", "self", ".", "get_masks", "(", "v", ")", "for", "v", "in", "volumes", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "index", "=", "np", ".", "concatenate", "(", "[", "self", ".", "index", ".", "copy", "(", ")", "[", "self", ".", "index", "==", "v", "]", "for", "v", "in", "volumes", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "num_volumes", "=", "len", "(", "volumes", ")", "\n", "\n", "log", ".", "info", "(", "'Filtered volumes: %s of total %d images'", "%", "(", "str", "(", "volumes", ")", ",", "self", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape": [[153, 155], ["None"], "methods", ["None"], ["", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.downsample": [[156, 164], ["skimage.measure.block_reduce", "log.info", "skimage.measure.block_reduce", "str"], "methods", ["None"], ["", "def", "downsample", "(", "self", ",", "ratio", "=", "2", ")", ":", "\n", "        ", "if", "ratio", "==", "1", ":", "return", "\n", "\n", "self", ".", "images", "=", "block_reduce", "(", "self", ".", "images", ",", "block_size", "=", "(", "1", ",", "ratio", ",", "ratio", ",", "1", ")", ",", "func", "=", "np", ".", "mean", ")", "\n", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "self", ".", "masks", "=", "block_reduce", "(", "self", ".", "masks", ",", "block_size", "=", "(", "1", ",", "ratio", ",", "ratio", ",", "1", ")", ",", "func", "=", "np", ".", "mean", ")", "\n", "\n", "", "log", ".", "info", "(", "'Downsampled data by %d to shape %s'", "%", "(", "ratio", ",", "str", "(", "self", ".", "images", ".", "shape", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.save": [[165, 172], ["range", "os.path.exists", "os.makedirs", "numpy.savez_compressed", "numpy.savez_compressed"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "np", ".", "savez_compressed", "(", "folder", "+", "'/images_%d'", "%", "i", ",", "self", ".", "images", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "np", ".", "savez_compressed", "(", "folder", "+", "'/masks_%d'", "%", "i", ",", "self", ".", "masks", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.__init__": [[22, 31], ["loaders.base_loader.Loader.__init__", "len", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "volumes", "=", "[", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "10", ",", "13", ",", "15", ",", "19", ",", "20", ",", "21", ",", "22", ",", "31", ",", "32", ",", "33", ",", "34", ",", "36", ",", "37", ",", "38", ",", "39", "]", "\n", "super", "(", "ChaosLoader", ",", "self", ")", ".", "__init__", "(", "self", ".", "volumes", ")", "\n", "self", ".", "num_masks", "=", "4", "# liver, right kidney, left kidney, spleen", "\n", "self", ".", "input_shape", "=", "(", "192", ",", "192", ",", "1", ")", "\n", "self", ".", "data_folder", "=", "data_conf", "[", "'chaos'", "]", "\n", "self", ".", "num_volumes", "=", "len", "(", "self", ".", "volumes", ")", "\n", "self", ".", "log", "=", "logging", ".", "getLogger", "(", "'chaos'", ")", "\n", "self", ".", "modalities", "=", "[", "'t1'", ",", "'t2'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits": [[32, 47], ["None"], "methods", ["None"], ["", "def", "splits", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "{", "'validation'", ":", "[", "31", ",", "36", ",", "13", "]", ",", "\n", "'test'", ":", "[", "10", ",", "22", ",", "34", "]", ",", "\n", "'training'", ":", "[", "5", ",", "3", ",", "1", ",", "15", ",", "19", ",", "2", ",", "20", ",", "37", ",", "32", ",", "38", ",", "8", ",", "39", ",", "21", ",", "33", "]", "\n", "}", ",", "\n", "{", "\n", "'validation'", ":", "[", "13", ",", "3", ",", "20", "]", ",", "\n", "'test'", ":", "[", "5", ",", "15", ",", "39", "]", ",", "\n", "'training'", ":", "[", "33", ",", "8", ",", "38", ",", "34", ",", "36", ",", "31", ",", "32", ",", "37", ",", "22", ",", "2", ",", "1", ",", "10", ",", "19", ",", "21", "]", "\n", "}", ",", "\n", "{", "\n", "'validation'", ":", "[", "37", ",", "13", ",", "33", "]", ",", "\n", "'test'", ":", "[", "1", ",", "19", ",", "32", "]", ",", "\n", "'training'", ":", "[", "5", ",", "20", ",", "31", ",", "2", ",", "38", ",", "3", ",", "8", ",", "15", ",", "22", ",", "10", ",", "34", ",", "39", ",", "36", ",", "21", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_data": [[50, 52], ["chaos.ChaosLoader.load_labelled_data"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_labelled_data"], ["", "def", "load_all_data", "(", "self", ",", "split", ",", "split_type", ",", "modality", ",", "normalise", "=", "True", ",", "downsample", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "load_labelled_data", "(", "split", ",", "split_type", ",", "modality", ",", "normalise", ",", "downsample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_unlabelled_data": [[53, 55], ["chaos.ChaosLoader.load_labelled_data"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_labelled_data"], ["", "def", "load_unlabelled_data", "(", "self", ",", "split", ",", "split_type", ",", "modality", ",", "normalise", "=", "True", ",", "downsample", "=", "1", ")", ":", "\n", "        ", "return", "self", ".", "load_labelled_data", "(", "split", ",", "split_type", ",", "modality", ",", "normalise", ",", "downsample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_labelled_data": [[56, 100], ["chaos.ChaosLoader.load_all_modalities_concatenated", "chaos.ChaosLoader.get_images_modi", "chaos.ChaosLoader.get_images_modi", "chaos.ChaosLoader.get_masks_modi", "chaos.ChaosLoader.get_masks_modi", "chaos.ChaosLoader.log.debug", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "chaos.ChaosLoader.log.debug", "loaders.data.Data", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "loaders.data.Data", "numpy.concatenate.max", "numpy.concatenate.min", "str", "chaos.ChaosLoader.splits", "numpy.concatenate.max", "numpy.concatenate.min", "numpy.concatenate.max", "numpy.concatenate.min", "str", "chaos.ChaosLoader.index.copy", "Exception", "numpy.concatenate.max", "numpy.concatenate.min", "str"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.splits", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy"], ["", "def", "load_labelled_data", "(", "self", ",", "split", ",", "split_type", ",", "modality", ",", "normalise", "=", "True", ",", "downsample", "=", "1", ",", "root_folder", "=", "None", ")", ":", "\n", "        ", "data", "=", "self", ".", "load_all_modalities_concatenated", "(", "split", ",", "split_type", ",", "downsample", ")", "\n", "images_t1", "=", "data", ".", "get_images_modi", "(", "0", ")", "\n", "images_t2", "=", "data", ".", "get_images_modi", "(", "1", ")", "\n", "labels_t1", "=", "data", ".", "get_masks_modi", "(", "0", ")", "\n", "labels_t2", "=", "data", ".", "get_masks_modi", "(", "1", ")", "\n", "\n", "if", "modality", "==", "'all'", ":", "\n", "            ", "all_images", "=", "np", ".", "concatenate", "(", "[", "images_t1", ",", "images_t2", "]", ",", "axis", "=", "0", ")", "\n", "all_labels", "=", "np", ".", "concatenate", "(", "[", "labels_t1", ",", "labels_t2", "]", ",", "axis", "=", "0", ")", "\n", "all_index", "=", "np", ".", "concatenate", "(", "[", "data", ".", "index", ",", "data", ".", "index", ".", "copy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "modality", "==", "'t1'", ":", "\n", "            ", "all_images", "=", "images_t1", "\n", "all_labels", "=", "labels_t1", "\n", "all_index", "=", "data", ".", "index", "\n", "", "elif", "modality", "==", "'t2'", ":", "\n", "            ", "all_images", "=", "images_t2", "\n", "all_labels", "=", "labels_t2", "\n", "all_index", "=", "data", ".", "index", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown modality: %s'", "%", "modality", ")", "\n", "\n", "", "assert", "split_type", "in", "[", "'training'", ",", "'validation'", ",", "'test'", ",", "'all'", "]", ",", "split_type", "\n", "assert", "all_images", ".", "max", "(", ")", "-", "1", "<", "0.01", "and", "all_images", ".", "min", "(", ")", "+", "1", "<", "0.01", ",", "'max: %.3f, min: %.3f'", "%", "(", "all_images", ".", "max", "(", ")", ",", "all_images", ".", "min", "(", ")", ")", "\n", "\n", "self", ".", "log", ".", "debug", "(", "'Loaded compressed data of shape: '", "+", "str", "(", "all_images", ".", "shape", ")", "+", "' '", "+", "str", "(", "all_index", ".", "shape", ")", ")", "\n", "\n", "if", "split_type", "==", "'all'", ":", "\n", "            ", "return", "Data", "(", "all_images", ",", "all_labels", ",", "all_index", ",", "1", ")", "\n", "\n", "", "volumes", "=", "self", ".", "splits", "(", ")", "[", "split", "]", "[", "split_type", "]", "\n", "all_images", "=", "np", ".", "concatenate", "(", "[", "all_images", "[", "all_index", "==", "v", "]", "for", "v", "in", "volumes", "]", ")", "\n", "\n", "assert", "all_labels", ".", "max", "(", ")", "==", "1", "and", "all_labels", ".", "min", "(", ")", "==", "0", ",", "'max: %d - min: %d'", "%", "(", "all_labels", ".", "max", "(", ")", ",", "all_labels", ".", "min", "(", ")", ")", "\n", "\n", "all_masks", "=", "np", ".", "concatenate", "(", "[", "all_labels", "[", "all_index", "==", "v", "]", "for", "v", "in", "volumes", "]", ")", "\n", "assert", "all_images", ".", "shape", "[", "0", "]", "==", "all_masks", ".", "shape", "[", "0", "]", "\n", "all_index", "=", "np", ".", "concatenate", "(", "[", "all_index", "[", "all_index", "==", "v", "]", "for", "v", "in", "volumes", "]", ")", "\n", "assert", "all_images", ".", "shape", "[", "0", "]", "==", "all_index", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "log", ".", "debug", "(", "split_type", "+", "' set: '", "+", "str", "(", "all_images", ".", "shape", ")", ")", "\n", "return", "Data", "(", "all_images", ",", "all_masks", ",", "all_index", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated": [[101, 275], ["chaos.ChaosLoader.get_volumes_for_split", "utils.data_utils.crop_same", "utils.data_utils.crop_same", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "loaders.MultimodalPairedData.MultimodalPairedData", "chaos.ChaosLoader._load_volume", "chaos.ChaosLoader._load_volume", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.concatenate", "numpy.concatenate", "ValueError", "numpy.concatenate.max", "numpy.concatenate.min", "numpy.concatenate.max", "numpy.concatenate.min", "utils.data_utils.rescale", "utils.data_utils.rescale", "numpy.concatenate.max", "numpy.concatenate.min", "numpy.concatenate.max", "numpy.concatenate.min", "numpy.concatenate.max", "numpy.concatenate.min", "numpy.concatenate.max", "numpy.concatenate.min", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.base_loader.Loader.get_volumes_for_split", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.crop_same", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader._load_volume", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader._load_volume", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.rescale", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.rescale"], ["", "def", "load_all_modalities_concatenated", "(", "self", ",", "split", ",", "split_type", ",", "downsample", "=", "1", ")", ":", "\n", "        ", "all_images_t1", ",", "all_labels_t1", ",", "all_images_t2", ",", "all_labels_t2", ",", "all_index", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "volumes", "=", "self", ".", "get_volumes_for_split", "(", "split", ",", "split_type", ")", "\n", "for", "v", "in", "volumes", ":", "\n", "            ", "images_t1", ",", "labels_t1", "=", "self", ".", "_load_volume", "(", "v", ",", "'t1'", ")", "\n", "images_t2", ",", "labels_t2", "=", "self", ".", "_load_volume", "(", "v", ",", "'t2'", ")", "\n", "\n", "# for each CHAOS subject, create pairs of T1 and T2 slices that approximately correspond to the same", "\n", "# position in the 3D volume, i.e. contain the same anatomical parts", "\n", "if", "v", "==", "1", ":", "\n", "                ", "images_t2", "=", "images_t2", "[", "1", ":", "]", "\n", "labels_t2", "=", "labels_t2", "[", "1", ":", "]", "\n", "\n", "images_t1", "=", "images_t1", "[", "0", ":", "26", "]", "\n", "labels_t1", "=", "labels_t1", "[", "0", ":", "26", "]", "\n", "images_t2", "=", "images_t2", "[", "4", ":", "24", "]", "\n", "labels_t2", "=", "labels_t2", "[", "4", ":", "24", "]", "\n", "\n", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "0", ":", "5", "]", ",", "images_t1", "[", "7", ":", "10", "]", ",", "images_t1", "[", "13", ":", "17", "]", ",", "images_t1", "[", "18", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "0", ":", "5", "]", ",", "labels_t1", "[", "7", ":", "10", "]", ",", "labels_t1", "[", "13", ":", "17", "]", ",", "labels_t1", "[", "18", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "2", ":", "\n", "                ", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "4", ":", "7", "]", ",", "images_t1", "[", "8", ":", "23", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "4", ":", "7", "]", ",", "labels_t1", "[", "8", ":", "23", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "images_t2", "[", "3", ":", "22", "]", "\n", "labels_t2", "=", "labels_t2", "[", "3", ":", "22", "]", "\n", "\n", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "0", ":", "11", "]", ",", "images_t1", "[", "12", ":", "18", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "0", ":", "11", "]", ",", "labels_t1", "[", "12", ":", "18", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "images_t2", "[", "0", ":", "11", "]", ",", "images_t2", "[", "12", ":", "18", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t2", "=", "np", ".", "concatenate", "(", "[", "labels_t2", "[", "0", ":", "11", "]", ",", "labels_t2", "[", "12", ":", "18", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "3", ":", "\n", "                ", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "11", ":", "14", "]", ",", "images_t1", "[", "15", ":", "26", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "11", ":", "14", "]", ",", "labels_t1", "[", "15", ":", "26", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "images_t2", "[", "9", ":", "23", "]", "\n", "labels_t2", "=", "labels_t2", "[", "9", ":", "23", "]", "\n", "", "if", "v", "==", "5", ":", "\n", "                ", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "4", ":", "5", "]", ",", "images_t1", "[", "8", ":", "24", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "4", ":", "5", "]", ",", "labels_t1", "[", "8", ":", "24", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "images_t2", "[", "2", ":", "22", "]", "\n", "labels_t2", "=", "labels_t2", "[", "2", ":", "22", "]", "\n", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "images_t2", "[", "0", ":", "6", "]", ",", "images_t2", "[", "9", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t2", "=", "np", ".", "concatenate", "(", "[", "labels_t2", "[", "0", ":", "6", "]", ",", "labels_t2", "[", "9", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "0", ":", "8", "]", ",", "images_t1", "[", "9", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "0", ":", "8", "]", ",", "labels_t1", "[", "9", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "images_t2", "[", "0", ":", "8", "]", ",", "images_t2", "[", "9", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t2", "=", "np", ".", "concatenate", "(", "[", "labels_t2", "[", "0", ":", "8", "]", ",", "labels_t2", "[", "9", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "8", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "2", ":", "-", "2", "]", "\n", "labels_t1", "=", "labels_t1", "[", "2", ":", "-", "2", "]", "\n", "\n", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "5", ":", "11", "]", ",", "images_t1", "[", "12", ":", "27", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "5", ":", "11", "]", ",", "labels_t1", "[", "12", ":", "27", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "images_t2", "[", "6", ":", "27", "]", "\n", "labels_t2", "=", "labels_t2", "[", "6", ":", "27", "]", "\n", "", "if", "v", "==", "10", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "14", ":", "38", "]", "\n", "labels_t1", "=", "labels_t1", "[", "14", ":", "38", "]", "\n", "images_t2", "=", "images_t2", "[", "5", ":", "24", "]", "\n", "labels_t2", "=", "labels_t2", "[", "5", ":", "24", "]", "\n", "\n", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "0", ":", "8", "]", ",", "images_t1", "[", "12", ":", "18", "]", ",", "images_t1", "[", "19", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "0", ":", "8", "]", ",", "labels_t1", "[", "12", ":", "18", "]", ",", "labels_t1", "[", "19", ":", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "13", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "4", ":", "29", "]", "\n", "labels_t1", "=", "labels_t1", "[", "4", ":", "29", "]", "\n", "images_t2", "=", "images_t2", "[", "3", ":", "28", "]", "\n", "labels_t2", "=", "labels_t2", "[", "3", ":", "28", "]", "\n", "", "if", "v", "==", "15", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", ":", "22", "]", "\n", "labels_t1", "=", "labels_t1", "[", ":", "22", "]", "\n", "images_t2", "=", "images_t2", "[", ":", "22", "]", "\n", "labels_t2", "=", "labels_t2", "[", ":", "22", "]", "\n", "", "if", "v", "==", "19", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "8", ":", "27", "]", "\n", "labels_t1", "=", "labels_t1", "[", "8", ":", "27", "]", "\n", "images_t2", "=", "images_t2", "[", "5", ":", "24", "]", "\n", "labels_t2", "=", "labels_t2", "[", "5", ":", "24", "]", "\n", "", "if", "v", "==", "20", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "2", ":", "21", "]", "\n", "labels_t1", "=", "labels_t1", "[", "2", ":", "21", "]", "\n", "images_t2", "=", "images_t2", "[", "2", ":", "21", "]", "\n", "labels_t2", "=", "labels_t2", "[", "2", ":", "21", "]", "\n", "", "if", "v", "==", "21", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "3", ":", "19", "]", "\n", "labels_t1", "=", "labels_t1", "[", "3", ":", "19", "]", "\n", "images_t2", "=", "images_t2", "[", "5", ":", "21", "]", "\n", "labels_t2", "=", "labels_t2", "[", "5", ":", "21", "]", "\n", "", "if", "v", "==", "22", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", ":", "-", "2", "]", "\n", "labels_t1", "=", "labels_t1", "[", ":", "-", "2", "]", "\n", "\n", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "8", ":", "17", "]", ",", "images_t1", "[", "18", ":", "26", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "8", ":", "17", "]", ",", "labels_t1", "[", "18", ":", "26", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "images_t2", "[", "3", ":", "12", "]", ",", "images_t2", "[", "15", ":", "23", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t2", "=", "np", ".", "concatenate", "(", "[", "labels_t2", "[", "3", ":", "12", "]", ",", "labels_t2", "[", "15", ":", "23", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "31", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "7", ":", "23", "]", "\n", "labels_t1", "=", "labels_t1", "[", "7", ":", "23", "]", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "images_t2", "[", "5", ":", "12", "]", ",", "images_t2", "[", "13", ":", "22", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t2", "=", "np", ".", "concatenate", "(", "[", "labels_t2", "[", "5", ":", "12", "]", ",", "labels_t2", "[", "13", ":", "22", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "32", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "5", ":", "32", "]", "\n", "labels_t1", "=", "labels_t1", "[", "5", ":", "32", "]", "\n", "\n", "images_t2", "=", "images_t2", "[", "3", ":", "30", "]", "\n", "labels_t2", "=", "labels_t2", "[", "3", ":", "30", "]", "\n", "", "if", "v", "==", "33", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "7", ":", "-", "5", "]", "\n", "labels_t1", "=", "labels_t1", "[", "7", ":", "-", "5", "]", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "images_t2", "[", "3", ":", "12", "]", ",", "images_t2", "[", "15", ":", "-", "2", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t2", "=", "np", ".", "concatenate", "(", "[", "labels_t2", "[", "3", ":", "12", "]", ",", "labels_t2", "[", "15", ":", "-", "2", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "34", ":", "\n", "                ", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "1", ":", "2", "]", ",", "images_t1", "[", "3", ":", "4", "]", ",", "images_t1", "[", "5", ":", "6", "]", ",", "images_t1", "[", "7", ":", "27", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "1", ":", "2", "]", ",", "labels_t1", "[", "3", ":", "4", "]", ",", "labels_t1", "[", "5", ":", "6", "]", ",", "labels_t1", "[", "7", ":", "27", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "0", ":", "14", "]", ",", "images_t1", "[", "15", ":", "16", "]", ",", "images_t1", "[", "17", ":", "18", "]", ",", "images_t1", "[", "19", ":", "22", "]", ",", "images_t1", "[", "23", ":", "24", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "0", ":", "14", "]", ",", "labels_t1", "[", "15", ":", "16", "]", ",", "labels_t1", "[", "17", ":", "18", "]", ",", "labels_t1", "[", "19", ":", "22", "]", ",", "labels_t1", "[", "23", ":", "24", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "images_t2", "[", "2", ":", "21", "]", "\n", "labels_t2", "=", "labels_t2", "[", "2", ":", "21", "]", "\n", "", "if", "v", "==", "36", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "8", ":", "25", "]", "\n", "labels_t1", "=", "labels_t1", "[", "8", ":", "25", "]", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "images_t2", "[", "4", ":", "6", "]", ",", "images_t2", "[", "7", ":", "22", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t2", "=", "np", ".", "concatenate", "(", "[", "labels_t2", "[", "4", ":", "6", "]", ",", "labels_t2", "[", "7", ":", "22", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "37", ":", "\n", "                ", "images_t1", "=", "np", ".", "concatenate", "(", "[", "images_t1", "[", "9", ":", "23", "]", ",", "images_t1", "[", "24", ":", "-", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t1", "=", "np", ".", "concatenate", "(", "[", "labels_t1", "[", "9", ":", "23", "]", ",", "labels_t1", "[", "24", ":", "-", "1", "]", "]", ",", "axis", "=", "0", ")", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "images_t2", "[", "4", ":", "6", "]", ",", "images_t2", "[", "7", ":", "21", "]", ",", "images_t2", "[", "22", ":", "-", "7", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_t2", "=", "np", ".", "concatenate", "(", "[", "labels_t2", "[", "4", ":", "6", "]", ",", "labels_t2", "[", "7", ":", "21", "]", ",", "labels_t2", "[", "22", ":", "-", "7", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "v", "==", "38", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "9", ":", "24", "]", "\n", "labels_t1", "=", "labels_t1", "[", "9", ":", "24", "]", "\n", "images_t2", "=", "images_t2", "[", "9", ":", "24", "]", "\n", "labels_t2", "=", "labels_t2", "[", "9", ":", "24", "]", "\n", "", "if", "v", "==", "39", ":", "\n", "                ", "images_t1", "=", "images_t1", "[", "3", ":", "22", "]", "\n", "labels_t1", "=", "labels_t1", "[", "3", ":", "22", "]", "\n", "images_t2", "=", "images_t2", "[", "3", ":", "22", "]", "\n", "labels_t2", "=", "labels_t2", "[", "3", ":", "22", "]", "\n", "\n", "", "images_t1", "=", "np", ".", "concatenate", "(", "[", "data_utils", ".", "rescale", "(", "images_t1", "[", "i", ":", "i", "+", "1", "]", ",", "-", "1", ",", "1", ")", "for", "i", "in", "range", "(", "images_t1", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "images_t2", "=", "np", ".", "concatenate", "(", "[", "data_utils", ".", "rescale", "(", "images_t2", "[", "i", ":", "i", "+", "1", "]", ",", "-", "1", ",", "1", ")", "for", "i", "in", "range", "(", "images_t2", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "assert", "images_t1", ".", "max", "(", ")", "==", "1", "and", "images_t1", ".", "min", "(", ")", "==", "-", "1", ",", "'%.3f to %.3f'", "%", "(", "images_t1", ".", "max", "(", ")", ",", "images_t1", ".", "min", "(", ")", ")", "\n", "assert", "images_t2", ".", "max", "(", ")", "==", "1", "and", "images_t2", ".", "min", "(", ")", "==", "-", "1", ",", "'%.3f to %.3f'", "%", "(", "images_t2", ".", "max", "(", ")", ",", "images_t2", ".", "min", "(", ")", ")", "\n", "\n", "all_images_t1", ".", "append", "(", "images_t1", ")", "\n", "all_labels_t1", ".", "append", "(", "labels_t1", ")", "\n", "all_images_t2", ".", "append", "(", "images_t2", ")", "\n", "all_labels_t2", ".", "append", "(", "labels_t2", ")", "\n", "\n", "all_index", ".", "append", "(", "np", ".", "array", "(", "[", "v", "]", "*", "images_t1", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "all_images_t1", ",", "all_labels_t1", "=", "data_utils", ".", "crop_same", "(", "all_images_t1", ",", "all_labels_t1", ",", "self", ".", "input_shape", "[", ":", "-", "1", "]", ")", "\n", "all_images_t2", ",", "all_labels_t2", "=", "data_utils", ".", "crop_same", "(", "all_images_t2", ",", "all_labels_t2", ",", "self", ".", "input_shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "all_images_t1", "=", "np", ".", "concatenate", "(", "all_images_t1", ",", "axis", "=", "0", ")", "\n", "all_labels_t1", "=", "np", ".", "concatenate", "(", "all_labels_t1", ",", "axis", "=", "0", ")", "\n", "all_images_t2", "=", "np", ".", "concatenate", "(", "all_images_t2", ",", "axis", "=", "0", ")", "\n", "all_labels_t2", "=", "np", ".", "concatenate", "(", "all_labels_t2", ",", "axis", "=", "0", ")", "\n", "\n", "if", "self", ".", "modalities", "==", "[", "'t1'", ",", "'t2'", "]", ":", "\n", "            ", "all_images", "=", "np", ".", "concatenate", "(", "[", "all_images_t1", ",", "all_images_t2", "]", ",", "axis", "=", "-", "1", ")", "\n", "all_labels", "=", "np", ".", "concatenate", "(", "[", "all_labels_t1", ",", "all_labels_t2", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "modalities", "==", "[", "'t2'", ",", "'t1'", "]", ":", "\n", "            ", "all_images", "=", "np", ".", "concatenate", "(", "[", "all_images_t2", ",", "all_images_t1", "]", ",", "axis", "=", "-", "1", ")", "\n", "all_labels", "=", "np", ".", "concatenate", "(", "[", "all_labels_t2", ",", "all_labels_t1", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid self.modalities'", ",", "self", ".", "modalities", ")", "\n", "", "all_index", "=", "np", ".", "concatenate", "(", "all_index", ",", "axis", "=", "0", ")", "\n", "\n", "assert", "all_labels", ".", "max", "(", ")", "==", "1", "and", "all_labels", ".", "min", "(", ")", "==", "0", ",", "'%.3f to %.3f'", "%", "(", "all_labels", ".", "max", "(", ")", ",", "all_labels", ".", "min", "(", ")", ")", "\n", "return", "MultimodalPairedData", "(", "all_images", ",", "all_labels", ",", "all_index", ",", "downsample", "=", "downsample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader._load_volume": [[276, 322], ["list", "list.sort", "numpy.concatenate", "list", "list.sort", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.copy", "numpy.concatenate.copy", "numpy.concatenate.copy", "numpy.concatenate.copy", "numpy.concatenate", "os.listdir", "loaders.dcm_contour_utils.DicomImage", "os.listdir", "scipy.ndimage.imread", "Exception", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "chaos.resample", "range", "chaos.resample", "range", "x.split", "x.split"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.resample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.resample"], ["", "def", "_load_volume", "(", "self", ",", "volume", ",", "modality", ")", ":", "\n", "        ", "if", "modality", "==", "'t1'", ":", "\n", "            ", "folder", "=", "self", ".", "data_folder", "+", "'/%d/T1DUAL'", "%", "volume", "\n", "image_folder", "=", "folder", "+", "'/DICOM_anon/OutPhase'", "\n", "", "elif", "modality", "==", "'t2'", ":", "\n", "            ", "folder", "=", "self", ".", "data_folder", "+", "'/%d/T2SPIR'", "%", "volume", "\n", "image_folder", "=", "folder", "+", "'/DICOM_anon'", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown modality'", ")", "\n", "", "labels_folder", "=", "folder", "+", "'/Ground'", "\n", "\n", "image_files", "=", "list", "(", "os", ".", "listdir", "(", "image_folder", ")", ")", "\n", "image_files", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ",", "reverse", "=", "True", ")", "\n", "images_dcm", "=", "[", "DicomImage", "(", "image_folder", "+", "'/'", "+", "f", ")", "for", "f", "in", "image_files", "]", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "dcm", ".", "image", ",", "0", ")", ",", "-", "1", ")", "for", "dcm", "in", "images_dcm", "]", ",", "axis", "=", "0", ")", "\n", "\n", "label_files", "=", "list", "(", "os", ".", "listdir", "(", "labels_folder", ")", ")", "\n", "label_files", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ",", "reverse", "=", "True", ")", "\n", "labels", "=", "[", "imread", "(", "labels_folder", "+", "'/'", "+", "f", ")", "for", "f", "in", "label_files", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "l", ",", "0", ")", ",", "-", "1", ")", "for", "l", "in", "labels", "]", ",", "axis", "=", "0", ")", "\n", "\n", "res", "=", "images_dcm", "[", "0", "]", ".", "resolution", "[", "0", ":", "2", "]", "\n", "images", "=", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "resample", "(", "images", "[", "i", "]", ",", "res", ")", ",", "axis", "=", "0", ")", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "resample", "(", "labels", "[", "i", "]", ",", "res", ",", "binary", "=", "True", ")", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "labels_l1", "=", "labels", ".", "copy", "(", ")", "\n", "labels_l1", "[", "labels", "!=", "63", "]", "=", "0", "\n", "labels_l1", "[", "labels", "==", "63", "]", "=", "1", "\n", "\n", "labels_l2", "=", "labels", ".", "copy", "(", ")", "\n", "labels_l2", "[", "labels", "!=", "126", "]", "=", "0", "\n", "labels_l2", "[", "labels", "==", "126", "]", "=", "1", "\n", "\n", "labels_l3", "=", "labels", ".", "copy", "(", ")", "\n", "labels_l3", "[", "labels", "!=", "189", "]", "=", "0", "\n", "labels_l3", "[", "labels", "==", "189", "]", "=", "1", "\n", "\n", "labels_l4", "=", "labels", ".", "copy", "(", ")", "\n", "labels_l4", "[", "labels", "!=", "252", "]", "=", "0", "\n", "labels_l4", "[", "labels", "==", "252", "]", "=", "1", "\n", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "labels_l1", ",", "labels_l2", ",", "labels_l3", ",", "labels_l4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.resample": [[324, 344], ["range", "numpy.concatenate", "len", "skimage.transform.rescale", "result.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.rescale"], ["", "", "def", "resample", "(", "image", ",", "old_res", ",", "binary", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Resample all volumes to the same resolution\n    :param image:   an image slice\n    :param old_res: the original image resolution\n    :param binary:  flag to denote a segmentation mask\n    :return:        a resampled image\n    \"\"\"", "\n", "new_res", "=", "(", "1.89", ",", "1.89", ")", "\n", "scale_vector", "=", "(", "old_res", "[", "0", "]", "/", "new_res", "[", "0", "]", ",", "old_res", "[", "1", "]", "/", "new_res", "[", "1", "]", ")", "\n", "order", "=", "0", "if", "binary", "else", "1", "\n", "\n", "assert", "len", "(", "image", ".", "shape", ")", "==", "3", "\n", "\n", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "image", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "im", "=", "image", "[", "...", ",", "i", "]", "\n", "rescaled", "=", "transform", ".", "rescale", "(", "im", ",", "scale_vector", ",", "order", "=", "order", ",", "preserve_range", "=", "True", ",", "mode", "=", "'constant'", ")", "\n", "result", ".", "append", "(", "np", ".", "expand_dims", "(", "rescaled", ",", "axis", "=", "-", "1", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "result", ",", "axis", "=", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.loader_factory.init_loader": [[4, 11], ["loaders.chaos.ChaosLoader"], "function", ["None"], ["def", "init_loader", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    Factory method for initialising data loaders by name.\n    \"\"\"", "\n", "if", "dataset", "==", "'chaos'", ":", "\n", "        ", "return", "ChaosLoader", "(", ")", "\n", "", "return", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.dcm_contour_utils.DicomImage.__init__": [[13, 30], ["print", "os.path.exists", "dicom.read_file", "hasattr", "str", "hasattr", "int", "hasattr", "int", "float", "float"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.dcm_contour_utils.Contour.read_file"], ["def", "__init__", "(", "self", ",", "dcm_image_file", ")", ":", "\n", "        ", "print", "(", "'Reading '", "+", "dcm_image_file", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "dcm_image_file", ")", "\n", "dcm_image", "=", "dicom", ".", "read_file", "(", "dcm_image_file", ")", "\n", "\n", "# this is unique for all images of the same patient", "\n", "self", ".", "patient", "=", "str", "(", "dcm_image", ".", "PatientName", ")", "if", "hasattr", "(", "dcm_image", ",", "'PatientName'", ")", "else", "None", "\n", "\n", "# this is a series identifier", "\n", "self", ".", "series", "=", "int", "(", "dcm_image", ".", "SeriesNumber", ")", "if", "hasattr", "(", "dcm_image", ",", "'SeriesNumber'", ")", "else", "None", "\n", "\n", "# the instance within the series", "\n", "self", ".", "instance", "=", "int", "(", "dcm_image", ".", "InstanceNumber", ")", "if", "hasattr", "(", "dcm_image", ",", "'InstanceNumber'", ")", "else", "None", "\n", "self", ".", "id", "=", "None", "# a unique id of the image", "\n", "self", ".", "resolution", "=", "[", "float", "(", "i", ")", "for", "i", "in", "dcm_image", ".", "PixelSpacing", "]", "+", "[", "float", "(", "dcm_image", ".", "SpacingBetweenSlices", ")", "]", "\n", "self", ".", "image", "=", "dcm_image", ".", "pixel_array", "\n", "self", ".", "age", "=", "dcm_image", ".", "PatientAge", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.dcm_contour_utils.DicomImage.save": [[31, 34], ["scipy.misc.imsave", "numpy.savez_compressed", "str", "str"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "scipy", ".", "misc", ".", "imsave", "(", "folder", "+", "'/image_%s.png'", "%", "str", "(", "self", ".", "id", ")", ",", "self", ".", "image", ")", "\n", "np", ".", "savez_compressed", "(", "folder", "+", "'/image_%s'", "%", "str", "(", "self", ".", "id", ")", ",", "self", ".", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.dcm_contour_utils.Coordinates.__init__": [[40, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "endo", "=", "None", "\n", "self", ".", "epi", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.dcm_contour_utils.Contour.__init__": [[48, 63], ["collections.defaultdict", "dcm_contour_utils.Contour.read_file", "collections.defaultdict", "dcm_contour_utils.Coordinates"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.dcm_contour_utils.Contour.read_file"], ["def", "__init__", "(", "self", ",", "contour_file", ")", ":", "\n", "        ", "self", ".", "contour_file", "=", "contour_file", "\n", "self", ".", "patient_name", "=", "None", "# patient name. Also the parent folder of the images", "\n", "self", ".", "series", "=", "None", "\n", "self", ".", "series_description", "=", "None", "# the common identifier of the folders that contain the images", "\n", "self", ".", "coordinates", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "lambda", ":", "Coordinates", "(", ")", ")", ")", "# a dictionary of Coordinates keyed by slice id and phase", "\n", "self", ".", "gender", "=", "None", "\n", "self", ".", "birth_date", "=", "None", "\n", "self", ".", "study_date", "=", "None", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "height", "=", "None", "\n", "self", ".", "age", "=", "None", "\n", "self", ".", "es", "=", "None", "\n", "self", ".", "ed", "=", "None", "\n", "self", ".", "read_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.dcm_contour_utils.Contour.read_file": [[65, 127], ["open", "fd.readline", "[].strip().replace().replace", "fd.readline().split", "int", "int", "int", "int", "[].split", "[].split", "[].split", "[].split", "[].split", "[].split", "[].split", "int", "int", "fd.readline", "parse_coord", "[].strip().replace", "fd.readline", "float", "float", "fd.readline", "range", "[].split", "[].split", "fd.readline.split", "fd.readline.split", "[].strip", "fd.readline.split", "fd.readline.split", "fd.readline.split", "fd.readline.split", "fd.readline.split", "x.split", "x.split", "fd.readline.split", "fd.readline.split", "[].split", "fd.readline.split"], "methods", ["None"], ["", "def", "read_file", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "contour_file", ",", "'r'", ")", "as", "fd", ":", "\n", "            ", "last_slice", "=", "(", "-", "1", ",", "-", "1", ")", "# (slice, phase)", "\n", "while", "True", ":", "\n", "                ", "l", "=", "fd", ".", "readline", "(", ")", "\n", "if", "l", "==", "''", ":", "break", "\n", "\n", "if", "'Patient_name='", "in", "l", ":", "\n", "                    ", "self", ".", "patient_name", "=", "l", ".", "split", "(", "'Patient_name='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "\n", "", "if", "'Series='", "in", "l", ":", "\n", "                    ", "self", ".", "series", "=", "l", ".", "split", "(", "'Series='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "\n", "", "if", "'Series_description='", "in", "l", ":", "\n", "                    ", "self", ".", "series_description", "=", "l", ".", "split", "(", "'Series_description='", ")", "[", "1", "]", ".", "split", "(", "'/'", ")", "[", "0", "]", ".", "strip", "(", ")", ".", "replace", "(", "' '", ",", "'_'", ")", ".", "replace", "(", "'.'", ",", "'_'", ")", "\n", "\n", "", "if", "'Patient_gender'", "in", "l", ":", "\n", "                    ", "self", ".", "gender", "=", "l", ".", "split", "(", "'Patient_gender='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "\n", "", "if", "'birth_date'", "in", "l", ":", "\n", "                    ", "self", ".", "birth_date", "=", "l", ".", "split", "(", "'Birth_date='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "\n", "", "if", "'Study_date'", "in", "l", ":", "\n", "                    ", "self", ".", "study_date", "=", "l", ".", "split", "(", "'Study_date='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "\n", "", "if", "'Patient_weight'", "in", "l", ":", "\n", "                    ", "self", ".", "weight", "=", "l", ".", "split", "(", "'Patient_weight='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "\n", "", "if", "'Patient_height'", "in", "l", ":", "\n", "                    ", "self", ".", "height", "=", "l", ".", "split", "(", "'Patient_height='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "\n", "\n", "", "if", "'manual_lv_es_phase'", "in", "l", ":", "\n", "                    ", "self", ".", "es", "=", "int", "(", "l", ".", "split", "(", "'manual_lv_es_phase='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ")", "+", "1", "# images are 1-indexed", "\n", "\n", "", "if", "'manual_lv_ed_phase'", "in", "l", ":", "\n", "                    ", "self", ".", "ed", "=", "int", "(", "l", ".", "split", "(", "'manual_lv_ed_phase='", ")", "[", "1", "]", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ")", "+", "1", "# images are 1-indexed", "\n", "\n", "# create a tuple of floats from a x-y coord pair.", "\n", "", "if", "'[XYCONTOUR]'", "in", "l", ":", "\n", "                    ", "header", "=", "fd", ".", "readline", "(", ")", ".", "split", "(", "' '", ")", "# e.g. 1 0 0  1.0", "\n", "slice", "=", "int", "(", "header", "[", "0", "]", ")", "\n", "phase", "=", "int", "(", "header", "[", "1", "]", ")", "# usually 0 -> ED, 7 -> ES", "\n", "contour_type", "=", "int", "(", "header", "[", "2", "]", ")", "# 0 -> endo, 1 -> epi", "\n", "\n", "# Initialise ES and ED if not explicitly defined in the contour file", "\n", "if", "phase", "<", "2", "and", "self", ".", "ed", "is", "None", ":", "\n", "                        ", "self", ".", "ed", "=", "phase", "\n", "", "if", "phase", ">", "2", "and", "self", ".", "es", "is", "None", ":", "\n", "                        ", "self", ".", "es", "=", "phase", "\n", "\n", "", "num_coords", "=", "int", "(", "fd", ".", "readline", "(", ")", ")", "\n", "\n", "parse_coord", "=", "lambda", "x", ":", "(", "float", "(", "x", ".", "split", "(", "' '", ")", "[", "0", "]", ")", ",", "float", "(", "x", ".", "split", "(", "' '", ")", "[", "1", "]", ")", ")", "\n", "coords", "=", "[", "parse_coord", "(", "fd", ".", "readline", "(", ")", ")", "for", "i", "in", "range", "(", "num_coords", ")", "]", "# read coordinates", "\n", "\n", "cc", "=", "self", ".", "coordinates", "[", "slice", "]", "[", "phase", "]", "\n", "if", "contour_type", "==", "0", ":", "# Coordinate for endo", "\n", "                        ", "cc", ".", "endo", "=", "coords", "\n", "", "elif", "contour_type", "==", "1", ":", "# Coordinate for epi", "\n", "                        ", "cc", ".", "epi", "=", "coords", "\n", "", "self", ".", "coordinates", "[", "slice", "]", "[", "phase", "]", "=", "cc", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.dcm_contour_utils.Contour.save": [[128, 133], ["open", "dcm_contour_utils.Contour.__dict__.copy", "json.dump"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy"], ["", "", "", "", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "with", "open", "(", "folder", "+", "'/contour.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "d", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "d", "[", "'coordinates'", "]", "=", "None", "\n", "json", ".", "dump", "(", "d", ",", "outfile", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.ThinPlateSpline2D.__init__": [[18, 29], ["len", "keras.engine.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "input_volume_shape", ",", "cp_dims", ",", "num_channels", ",", "inverse", "=", "False", ",", "order", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "vol_shape", "=", "input_volume_shape", "\n", "self", ".", "data_dimensionality", "=", "len", "(", "input_volume_shape", ")", "\n", "self", ".", "cp_dims", "=", "cp_dims", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "initial_cp_grid", "=", "None", "\n", "self", ".", "flt_grid", "=", "None", "\n", "self", ".", "inverse", "=", "inverse", "\n", "self", ".", "order", "=", "order", "\n", "super", "(", "ThinPlateSpline2D", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.ThinPlateSpline2D.build": [[30, 36], ["stn_spline.nDgrid", "stn_spline.nDgrid", "super().build"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.nDgrid", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.nDgrid", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "self", ".", "initial_cp_grid", "=", "nDgrid", "(", "self", ".", "cp_dims", ")", "\n", "self", ".", "flt_grid", "=", "nDgrid", "(", "self", ".", "vol_shape", ")", "\n", "\n", "super", "(", "ThinPlateSpline2D", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.ThinPlateSpline2D.interpolate_spline_batch": [[38, 54], ["layers.interpolate_spline.interpolate_spline", "layers.interpolate_spline.interpolate_spline"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline.interpolate_spline", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline.interpolate_spline"], ["", "def", "interpolate_spline_batch", "(", "self", ",", "cp_offsets_single_batch", ")", ":", "\n", "\n", "        ", "warped_cp_grid", "=", "self", ".", "initial_cp_grid", "+", "cp_offsets_single_batch", "\n", "\n", "if", "self", ".", "inverse", ":", "\n", "            ", "interpolated_sample_locations", "=", "interpolate_spline", "(", "train_points", "=", "warped_cp_grid", ",", "\n", "train_values", "=", "self", ".", "initial_cp_grid", ",", "\n", "query_points", "=", "self", ".", "flt_grid", ",", "\n", "order", "=", "self", ".", "order", ")", "\n", "", "else", ":", "\n", "            ", "interpolated_sample_locations", "=", "interpolate_spline", "(", "train_points", "=", "self", ".", "initial_cp_grid", ",", "\n", "train_values", "=", "warped_cp_grid", ",", "\n", "query_points", "=", "self", ".", "flt_grid", ",", "\n", "order", "=", "self", ".", "order", ")", "\n", "\n", "", "return", "interpolated_sample_locations", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.ThinPlateSpline2D.call": [[55, 68], ["tensorflow.reverse", "tensorflow.multiply", "bilinear_interpolation", "tensorflow.reshape", "tensorflow.map_fn", "tuple"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "vol", ",", "cp_offsets", "=", "args", "\n", "\n", "interpolated_sample_locations", "=", "tf", ".", "map_fn", "(", "self", ".", "interpolate_spline_batch", ",", "cp_offsets", ")", "[", ":", ",", "0", "]", "\n", "\n", "interpolated_sample_locations", "=", "tf", ".", "reverse", "(", "interpolated_sample_locations", ",", "axis", "=", "[", "-", "1", "]", ")", "\n", "\n", "interpolated_sample_locations", "=", "tf", ".", "multiply", "(", "interpolated_sample_locations", ",", "\n", "[", "self", ".", "vol_shape", "[", "1", "]", "-", "1", ",", "self", ".", "vol_shape", "[", "0", "]", "-", "1", "]", ")", "\n", "warped_volume", "=", "bilinear_interpolation", "(", "vol", ",", "interpolated_sample_locations", ")", "\n", "warped_volume", "=", "tf", ".", "reshape", "(", "warped_volume", ",", "(", "-", "1", ",", ")", "+", "tuple", "(", "self", ".", "vol_shape", ")", "+", "(", "self", ".", "num_channels", ",", ")", ")", "\n", "return", "warped_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.nDgrid": [[70, 92], ["tensorflow.cast", "len", "numpy.expand_dims", "len", "numpy.expand_dims", "numpy.mgrid[].reshape", "numpy.mgrid[].reshape", "numpy.array"], "function", ["None"], ["", "", "def", "nDgrid", "(", "dims", ",", "normalise", "=", "True", ",", "center", "=", "False", ",", "dtype", "=", "'float32'", ")", ":", "\n", "    ", "'''\n    returns the co-ordinates for an n-dimentional grid as a (num-points, n) shaped array\n    e.g. dims=[3,3] would return:\n    [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]]\n    if not normalized == False, or:\n    [[0,0],[0,0.5],[0,1.],[0.5,0],[0.5,0.5],[0.5,1.],[1.,0],[1.,0.5],[1.,1.]]\n    if normalized == True.\n    '''", "\n", "if", "len", "(", "dims", ")", "==", "2", ":", "\n", "        ", "grid", "=", "np", ".", "expand_dims", "(", "np", ".", "mgrid", "[", ":", "dims", "[", "0", "]", ",", ":", "dims", "[", "1", "]", "]", ".", "reshape", "(", "(", "2", ",", "-", "1", ")", ")", ".", "T", ",", "0", ")", "\n", "\n", "", "if", "len", "(", "dims", ")", "==", "3", ":", "\n", "        ", "grid", "=", "np", ".", "expand_dims", "(", "np", ".", "mgrid", "[", ":", "dims", "[", "0", "]", ",", ":", "dims", "[", "1", "]", ",", ":", "dims", "[", "2", "]", "]", ".", "reshape", "(", "(", "3", ",", "-", "1", ")", ")", ".", "T", ",", "0", ")", "\n", "\n", "", "if", "normalise", "==", "True", ":", "\n", "        ", "grid", "=", "grid", "/", "(", "1.", "*", "(", "np", ".", "array", "(", "[", "[", "dims", "]", "]", ")", "-", "1", ")", ")", "\n", "\n", "if", "center", "==", "True", ":", "\n", "            ", "grid", "=", "(", "grid", "-", "1", ")", "*", "2", "\n", "\n", "", "", "return", "tf", ".", "cast", "(", "grid", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.stn_spline.build_locnet": [[94, 121], ["keras.Input", "keras.Input", "keras.Model", "keras.Model.summary", "keras.layers.Concatenate", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Reshape", "int"], "function", ["None"], ["", "def", "build_locnet", "(", "input_shape1", ",", "input_shape2", ",", "output_shape", ")", ":", "\n", "    ", "\"\"\"\n    Build STN for calculating the parameters of STN.\n    :param input_shape1: shape of input tensor 1\n    :param input_shape2: shape of input tensor 2\n    :param output_shape: number of control points to predict\n    :return: a Keras model\n    \"\"\"", "\n", "input1", "=", "Input", "(", "shape", "=", "input_shape1", ")", "\n", "input2", "=", "Input", "(", "shape", "=", "input_shape2", ")", "\n", "stacked", "=", "Concatenate", "(", ")", "(", "[", "input1", ",", "input2", "]", ")", "\n", "\n", "l", "=", "Conv2D", "(", "20", ",", "5", ")", "(", "stacked", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "l", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "l", ")", "\n", "l", "=", "Conv2D", "(", "20", ",", "5", ")", "(", "l", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "l", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "l", ")", "\n", "l", "=", "Conv2D", "(", "20", ",", "5", ")", "(", "l", ")", "\n", "l", "=", "LeakyReLU", "(", ")", "(", "l", ")", "\n", "l", "=", "Flatten", "(", ")", "(", "l", ")", "\n", "l", "=", "Dense", "(", "100", ",", "activation", "=", "'tanh'", ")", "(", "l", ")", "\n", "theta", "=", "Dense", "(", "output_shape", ",", "kernel_initializer", "=", "'zeros'", ",", "bias_initializer", "=", "'zeros'", ")", "(", "l", ")", "\n", "theta", "=", "Reshape", "(", "(", "int", "(", "output_shape", "/", "2", ")", ",", "2", ")", ")", "(", "theta", ")", "\n", "m", "=", "Model", "(", "input", "=", "[", "input1", ",", "input2", "]", ",", "output", "=", "theta", ",", "name", "=", "'stn_locnet'", ")", "\n", "m", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "return", "m", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.film.FiLM.__init__": [[20, 22], ["keras.engine.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FiLM", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.film.FiLM.build": [[23, 25], ["super().build"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "FiLM", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.film.FiLM.call": [[26, 37], ["keras.tile", "keras.tile", "keras.reshape", "keras.reshape", "keras.shape", "keras.shape", "keras.shape", "keras.shape", "keras.shape", "keras.shape", "keras.shape", "keras.shape"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape"], ["", "def", "call", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "gamma", ",", "beta", "=", "x", "\n", "\n", "# print('FILM: ', K.int_shape(x), K.int_shape(gamma))", "\n", "\n", "gamma", "=", "K", ".", "tile", "(", "K", ".", "reshape", "(", "gamma", ",", "(", "K", ".", "shape", "(", "gamma", ")", "[", "0", "]", ",", "1", ",", "1", ",", "K", ".", "shape", "(", "gamma", ")", "[", "-", "1", "]", ")", ")", ",", "\n", "(", "1", ",", "K", ".", "shape", "(", "x", ")", "[", "1", "]", ",", "K", ".", "shape", "(", "x", ")", "[", "2", "]", ",", "1", ")", ")", "\n", "beta", "=", "K", ".", "tile", "(", "K", ".", "reshape", "(", "beta", ",", "(", "K", ".", "shape", "(", "beta", ")", "[", "0", "]", ",", "1", ",", "1", ",", "K", ".", "shape", "(", "beta", ")", "[", "-", "1", "]", ")", ")", ",", "\n", "(", "1", ",", "K", ".", "shape", "(", "x", ")", "[", "1", "]", ",", "K", ".", "shape", "(", "x", ")", "[", "2", "]", ",", "1", ")", ")", "\n", "\n", "return", "x", "*", "gamma", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.film.FiLM.compute_output_shape": [[38, 40], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.Spectral.__init__": [[205, 214], ["keras.backend.variable", "keras.backend.variable", "numpy.random.random"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dim", ",", "alpha", "=", "K", ".", "variable", "(", "10.", ")", ")", ":", "\n", "        ", "'''\n        in a Conv2D layer dim needs to be num_channels in the previous layer times the filter_size^2\n        in a Dense layer dim needs to be num_channels in the previous layer\n        '''", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "alpha", "=", "alpha", "# K.cast_to_floatx(alpha)", "\n", "self", ".", "u", "=", "K", ".", "variable", "(", "np", ".", "random", ".", "random", "(", "(", "dim", ",", "1", ")", ")", "*", "2", "-", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.Spectral.__call__": [[215, 244], ["keras.backend.shape", "keras.backend.reshape", "range", "keras.backend.dot", "keras.backend.stop_gradient", "keras.backend.dot", "keras.backend.dot", "keras.backend.dot", "keras.backend.mean", "keras.backend.abs", "keras.backend.transpose", "keras.backend.sqrt", "keras.backend.sqrt", "keras.backend.transpose", "keras.backend.abs", "keras.backend.sum", "keras.backend.sum", "keras.backend.square", "keras.backend.square"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "# return K.mean(K.abs(x))", "\n", "\n", "# print K.int_shape(x)", "\n", "\n", "        ", "x_shape", "=", "K", ".", "shape", "(", "x", ")", "\n", "x", "=", "K", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "x_shape", "[", "-", "1", "]", ")", ")", "# this deals with convolutions, fingers crossed!", "\n", "# x = K.transpose(K.reshape(x, (-1, x_shape[-1]))) #this deals with convolutions, fingers crossed!", "\n", "\n", "# print K.int_shape(x)", "\n", "# print K.shape(self.u)", "\n", "\n", "# self.u = K.variable(np.random.random((self.dim,1))*2-1.)", "\n", "\n", "for", "itters", "in", "range", "(", "3", ")", ":", "\n", "            ", "WTu", "=", "K", ".", "dot", "(", "K", ".", "transpose", "(", "x", ")", ",", "self", ".", "u", ")", "\n", "v", "=", "WTu", "/", "K", ".", "sqrt", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "WTu", ")", ")", ")", "\n", "\n", "Wv", "=", "K", ".", "dot", "(", "x", ",", "v", ")", "\n", "self", ".", "u", "=", "Wv", "/", "K", ".", "sqrt", "(", "K", ".", "sum", "(", "K", ".", "square", "(", "Wv", ")", ")", ")", "\n", "\n", "", "spectral_norm", "=", "K", ".", "dot", "(", "K", ".", "dot", "(", "K", ".", "transpose", "(", "self", ".", "u", ")", ",", "x", ")", ",", "v", ")", "\n", "\n", "target_x", "=", "K", ".", "stop_gradient", "(", "x", "/", "spectral_norm", ")", "\n", "return", "self", ".", "alpha", "*", "K", ".", "mean", "(", "K", ".", "abs", "(", "target_x", "-", "x", ")", ")", "\n", "\n", "# return self.alpha * K.switch(K.greater(spectral_norm, 1), spectral_norm, 0*spectral_norm)", "\n", "\n", "return", "self", ".", "alpha", "*", "K", ".", "abs", "(", "1", "-", "spectral_norm", ")", "# + 0.3 * K.sum(K.abs(x))", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.Spectral.get_config": [[245, 247], ["float"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "'alpha'", ":", "float", "(", "self", ".", "alpha", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.my_im2col": [[50, 83], ["numpy.zeros", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["def", "my_im2col", "(", "img", ",", "W", ",", "pad", "=", "True", ",", "stride", "=", "1", ")", ":", "\n", "# matrix will map from w*h*num_channels to (w/stride)*(h/stride)*num_filters", "\n", "\n", "    ", "w", ",", "h", ",", "num_channels", "=", "img", ".", "shape", "\n", "filter_width", ",", "filter_height", ",", "_", ",", "num_filters", "=", "W", ".", "shape", "\n", "\n", "if", "pad", ":", "\n", "        ", "w_pad", ",", "h_pad", "=", "0", ",", "0", "\n", "", "else", ":", "\n", "        ", "w_pad", ",", "h_pad", "=", "filter_width", "/", "2", ",", "filter_height", "/", "2", "\n", "\n", "", "M", "=", "np", ".", "zeros", "(", "(", "(", "(", "w", "-", "w_pad", "*", "2", ")", "/", "stride", ")", "*", "(", "(", "h", "-", "h_pad", "*", "2", ")", "/", "stride", ")", "*", "num_filters", ",", "w", "*", "h", "*", "num_channels", ")", ")", "\n", "\n", "# print '--'", "\n", "# print M.shape", "\n", "# print W.shape", "\n", "\n", "row", "=", "0", "\n", "for", "filter", "in", "range", "(", "num_filters", ")", ":", "\n", "        ", "for", "y_pos", "in", "range", "(", "h_pad", ",", "h", "-", "h_pad", ",", "stride", ")", ":", "\n", "            ", "for", "x_pos", "in", "range", "(", "w_pad", ",", "w", "-", "w_pad", ",", "stride", ")", ":", "\n", "                ", "for", "channel", "in", "range", "(", "num_channels", ")", ":", "\n", "                    ", "ind", "=", "x_pos", "+", "w", "*", "y_pos", "+", "w", "*", "h", "*", "channel", "\n", "for", "fx", "in", "range", "(", "-", "(", "filter_width", "/", "2", ")", ",", "(", "filter_width", "+", "1", ")", "/", "2", ")", ":", "\n", "                        ", "for", "fy", "in", "range", "(", "-", "(", "filter_height", "/", "2", ")", ",", "(", "filter_height", "+", "1", ")", "/", "2", ")", ":", "\n", "                            ", "if", "(", "0", "<=", "x_pos", "+", "fx", "<", "w", ")", "and", "(", "0", "<=", "y_pos", "+", "fy", "<", "h", ")", ":", "\n", "# print row, ind+fx+fy*w", "\n", "# print (filter_width/2)+fx,(filter_height/2)+fy,channel,filter", "\n", "                                ", "M", "[", "row", ",", "ind", "+", "fx", "+", "fy", "*", "w", "]", "=", "W", "[", "\n", "(", "filter_width", "/", "2", ")", "+", "fx", ",", "(", "filter_height", "/", "2", ")", "+", "fy", ",", "channel", ",", "filter", "]", "\n", "", "", "", "", "row", "+=", "1", "\n", "\n", "", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.conv2d": [[85, 90], ["strd", "numpy.einsum", "tuple", "numpy.subtract"], "function", ["None"], ["", "def", "conv2d", "(", "a", ",", "f", ")", ":", "\n", "    ", "s", "=", "f", ".", "shape", "+", "tuple", "(", "np", ".", "subtract", "(", "a", ".", "shape", ",", "f", ".", "shape", ")", "+", "1", ")", "\n", "strd", "=", "numpy", ".", "lib", ".", "stride_tricks", ".", "as_strided", "\n", "subM", "=", "strd", "(", "a", ",", "shape", "=", "s", ",", "strides", "=", "a", ".", "strides", "*", "2", ")", "\n", "return", "np", ".", "einsum", "(", "'ij,ijkl->kl'", ",", "f", ",", "subM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.my_im2col_np": [[92, 113], ["numpy.zeros", "range", "range", "range"], "function", ["None"], ["", "def", "my_im2col_np", "(", "img", ",", "W", ",", "pad", "=", "True", ",", "stride", "=", "1", ")", ":", "\n", "    ", "w", ",", "h", ",", "num_channels", "=", "img", ".", "shape", "\n", "filter_width", ",", "filter_height", ",", "_", ",", "num_filters", "=", "W", ".", "shape", "\n", "\n", "if", "pad", ":", "\n", "        ", "w_pad", ",", "h_pad", "=", "0", ",", "0", "\n", "", "else", ":", "\n", "        ", "w_pad", ",", "h_pad", "=", "filter_width", "/", "2", ",", "filter_height", "/", "2", "\n", "\n", "", "M", "=", "np", ".", "zeros", "(", "(", "(", "(", "w", "-", "w_pad", "*", "2", ")", "/", "stride", ")", "*", "(", "(", "h", "-", "h_pad", "*", "2", ")", "/", "stride", ")", "*", "num_filters", ",", "w", "*", "h", "*", "num_channels", ")", ")", "\n", "\n", "indexes", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "channel", "in", "range", "(", "num_channels", ")", ":", "\n", "        ", "ind", "=", "x_pos", "+", "w", "*", "y_pos", "+", "w", "*", "h", "*", "channel", "\n", "for", "fx", "in", "range", "(", "-", "(", "filter_width", "/", "2", ")", ",", "(", "filter_width", "+", "1", ")", "/", "2", ")", ":", "\n", "            ", "for", "fy", "in", "range", "(", "-", "(", "filter_height", "/", "2", ")", ",", "(", "filter_height", "+", "1", ")", "/", "2", ")", ":", "\n", "                ", "if", "(", "0", "<=", "x_pos", "+", "fx", "<", "w", ")", "and", "(", "0", "<=", "y_pos", "+", "fy", "<", "h", ")", ":", "\n", "                    ", "M", "[", "row", ",", "ind", "+", "fx", "+", "fy", "*", "w", "]", "=", "W", "[", "(", "filter_width", "/", "2", ")", "+", "fx", ",", "(", "filter_height", "/", "2", ")", "+", "fy", ",", "channel", ",", "filter", "]", "\n", "\n", "", "", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.largestSingularValues": [[115, 148], ["str().split", "len", "numpy.linalg.svd", "sub_l.get_weights", "l.get_weights", "numpy.zeros", "spectralnorm.my_im2col", "numpy.linalg.svd", "str", "spectralnorm.largestSingularValues", "l.get_weights", "type"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.my_im2col", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.largestSingularValues"], ["", "def", "largestSingularValues", "(", "l", ",", "imsz", "=", "3", ")", ":", "\n", "    ", "'''\n    This function takes a keras model as an input and returns a list of the\n    largest singular values of each of its weights matricies.\n\n    Useful for sanity checking.\n    '''", "\n", "\n", "layer_type", "=", "str", "(", "type", "(", "l", ")", ")", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "[", ":", "-", "2", "]", "\n", "\n", "if", "layer_type", "==", "'Model'", ":", "\n", "        ", "SVs", "=", "[", "]", "\n", "for", "sub_l", "in", "l", ".", "layers", ":", "\n", "            ", "if", "len", "(", "sub_l", ".", "get_weights", "(", ")", ")", ":", "\n", "                ", "SVs", "=", "SVs", "+", "largestSingularValues", "(", "sub_l", ",", "imsz", ")", "\n", "", "", "return", "SVs", "\n", "\n", "", "elif", "layer_type", "==", "'Dense'", ":", "\n", "        ", "W", "=", "l", ".", "get_weights", "(", ")", "[", "0", "]", "\n", "# W = np.reshape(W, (-1,W.shape[-1]))", "\n", "_", ",", "s", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "W", ")", "\n", "return", "[", "s", "[", "0", "]", "]", "\n", "\n", "", "elif", "layer_type", "==", "'Conv2D'", ":", "\n", "# note, this is only an approximation. I think it's a lower bound?", "\n", "        ", "W", "=", "l", ".", "get_weights", "(", ")", "[", "0", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "imsz", ",", "imsz", ",", "W", ".", "shape", "[", "2", "]", ")", ")", "\n", "M", "=", "my_im2col", "(", "img", ",", "W", ")", "\n", "_", ",", "s", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "M", ")", "\n", "return", "[", "s", "[", "0", "]", "]", "\n", "\n", "", "else", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.largestSingularValues_old": [[150, 172], ["str().split", "len", "numpy.reshape", "numpy.linalg.svd", "sub_l.get_weights", "l.get_weights", "str", "spectralnorm.largestSingularValues_old", "type"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spectralnorm.largestSingularValues_old"], ["", "", "def", "largestSingularValues_old", "(", "l", ")", ":", "\n", "    ", "'''\n    This function takes a keras model as an input and returns a list of the\n    largest singular values of each of its weights matricies.\n\n    Useful for sanity checking.\n    '''", "\n", "\n", "layer_type", "=", "str", "(", "type", "(", "l", ")", ")", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "[", ":", "-", "2", "]", "\n", "\n", "if", "layer_type", "==", "'Model'", ":", "\n", "        ", "SVs", "=", "[", "]", "\n", "for", "sub_l", "in", "l", ".", "layers", ":", "\n", "            ", "if", "len", "(", "sub_l", ".", "get_weights", "(", ")", ")", ":", "\n", "                ", "SVs", "=", "SVs", "+", "largestSingularValues_old", "(", "sub_l", ")", "\n", "", "", "return", "SVs", "\n", "\n", "", "elif", "layer_type", "==", "'Dense'", "or", "layer_type", "==", "'Conv2D'", ":", "\n", "        ", "W", "=", "l", ".", "get_weights", "(", ")", "[", "0", "]", "\n", "W", "=", "np", ".", "reshape", "(", "W", ",", "(", "-", "1", ",", "W", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "_", ",", "s", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "W", ")", "\n", "return", "[", "s", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.SPADE_COND.__init__": [[46, 48], ["keras.engine.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SPADE_COND", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.SPADE_COND.build": [[49, 51], ["super().build"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "SPADE_COND", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.SPADE_COND.call": [[52, 56], ["None"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "gamma", ",", "beta", "=", "x", "\n", "\n", "return", "x", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.SPADE_COND.compute_output_shape": [[57, 59], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.spade_block": [[7, 24], ["min", "spade._spade", "spade._spade", "keras.layers.LeakyReLU", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "keras.layers.Conv2D", "spade._spade", "keras.layers.Add", "keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade._spade", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade._spade", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade._spade"], ["def", "spade_block", "(", "conf", ",", "anatomy_input", ",", "layer", ",", "fin", ",", "fout", ")", ":", "\n", "    ", "learn_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "\n", "l1", "=", "_spade", "(", "conf", ",", "anatomy_input", ",", "layer", ",", "fin", ")", "\n", "l2", "=", "LeakyReLU", "(", "0.2", ")", "(", "l1", ")", "\n", "l3", "=", "Conv2D", "(", "fmiddle", ",", "3", ",", "padding", "=", "'same'", ")", "(", "l2", ")", "\n", "\n", "l4", "=", "_spade", "(", "conf", ",", "anatomy_input", ",", "l3", ",", "fmiddle", ")", "\n", "l5", "=", "LeakyReLU", "(", "0.2", ")", "(", "l4", ")", "\n", "l6", "=", "Conv2D", "(", "fout", ",", "3", ",", "padding", "=", "'same'", ")", "(", "l5", ")", "\n", "\n", "if", "learn_shortcut", ":", "\n", "        ", "layer", "=", "_spade", "(", "conf", ",", "anatomy_input", ",", "layer", ",", "fin", ")", "\n", "layer", "=", "Conv2D", "(", "fout", ",", "1", ",", "padding", "=", "'same'", ",", "use_bias", "=", "False", ")", "(", "layer", ")", "\n", "\n", "", "return", "Add", "(", ")", "(", "[", "layer", ",", "l6", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade._spade": [[26, 33], ["keras_contrib.layers.InstanceNormalization", "keras.layers.Lambda", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "spade.SPADE_COND"], "function", ["None"], ["", "def", "_spade", "(", "conf", ",", "anatomy_input", ",", "layer", ",", "f", ")", ":", "\n", "    ", "layer", "=", "InstanceNormalization", "(", "scale", "=", "False", ",", "center", "=", "False", ")", "(", "layer", ")", "\n", "anatomy", "=", "Lambda", "(", "resize_like", ",", "arguments", "=", "{", "'ref_tensor'", ":", "layer", "}", ")", "(", "anatomy_input", ")", "\n", "anatomy", "=", "Conv2D", "(", "128", ",", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "(", "anatomy", ")", "\n", "gamma", "=", "Conv2D", "(", "f", ",", "3", ",", "padding", "=", "'same'", ")", "(", "anatomy", ")", "\n", "beta", "=", "Conv2D", "(", "f", ",", "3", ",", "padding", "=", "'same'", ")", "(", "anatomy", ")", "\n", "return", "SPADE_COND", "(", ")", "(", "[", "layer", ",", "gamma", ",", "beta", "]", ")", "\n", "# return Add()([Multiply()([layer, gamma]), beta])", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.spade.resize_like": [[36, 39], ["tensorflow.image.resize_nearest_neighbor", "ref_tensor.get_shape", "ref_tensor.get_shape"], "function", ["None"], ["", "def", "resize_like", "(", "input_tensor", ",", "ref_tensor", ")", ":", "# resizes input tensor wrt. ref_tensor", "\n", "    ", "H", ",", "W", "=", "ref_tensor", ".", "get_shape", "(", ")", "[", "1", "]", ",", "ref_tensor", ".", "get_shape", "(", ")", "[", "2", "]", "\n", "return", "tf", ".", "image", ".", "resize_nearest_neighbor", "(", "input_tensor", ",", "[", "H", ".", "value", ",", "W", ".", "value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.Rounding.__init__": [[9, 11], ["keras.engine.topology.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Rounding", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.Rounding.build": [[12, 14], ["super().build"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "Rounding", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.Rounding.call": [[15, 17], ["rounding.roundWithGrad"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.roundWithGrad"], ["", "def", "call", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "roundWithGrad", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.Rounding.compute_output_shape": [[18, 20], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.py_func": [[23, 31], ["tensorflow.get_default_graph", "str", "tensorflow.RegisterGradient", "tf.get_default_graph.gradient_override_map", "tensorflow.py_func", "res[].set_shape", "numpy.random.randint", "inp[].get_shape"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.py_func"], ["", "", "def", "py_func", "(", "func", ",", "inp", ",", "Tout", ",", "stateful", "=", "True", ",", "name", "=", "None", ",", "grad", "=", "None", ")", ":", "\n", "    ", "rnd_name", "=", "'PyFuncGrad'", "+", "str", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "1E+8", ")", ")", "# generate a unique name to avoid duplicates", "\n", "tf", ".", "RegisterGradient", "(", "rnd_name", ")", "(", "grad", ")", "\n", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "with", "g", ".", "gradient_override_map", "(", "{", "\"PyFunc\"", ":", "rnd_name", "}", ")", ":", "\n", "        ", "res", "=", "tf", ".", "py_func", "(", "func", ",", "inp", ",", "Tout", ",", "stateful", "=", "stateful", ",", "name", "=", "name", ")", "\n", "res", "[", "0", "]", ".", "set_shape", "(", "inp", "[", "0", "]", ".", "get_shape", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.roundWithGrad": [[33, 38], ["tensorflow.python.framework.ops.name_scope", "rounding.py_func", "numpy.round().astype", "numpy.round"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding.py_func"], ["", "", "def", "roundWithGrad", "(", "x", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "name", ",", "\"roundWithGrad\"", ",", "[", "x", "]", ")", "as", "name", ":", "\n", "        ", "round_x", "=", "py_func", "(", "lambda", "x", ":", "np", ".", "round", "(", "x", ")", ".", "astype", "(", "'float32'", ")", ",", "[", "x", "]", ",", "[", "tf", ".", "float32", "]", ",", "name", "=", "name", ",", "\n", "grad", "=", "_roundWithGrad_grad", ")", "# <-- here's the call to the gradient", "\n", "return", "round_x", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.rounding._roundWithGrad_grad": [[40, 43], ["None"], "function", ["None"], ["", "", "def", "_roundWithGrad_grad", "(", "op", ",", "grad", ")", ":", "\n", "    ", "x", "=", "op", ".", "inputs", "[", "0", "]", "\n", "return", "grad", "*", "1", "# do whatever with gradient here (e.g. could return grad * 2 * x  if op was f(x)=x**2)", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._cross_squared_distance_matrix": [[30, 53], ["tensorflow.python.ops.math_ops.reduce_sum", "tensorflow.python.ops.math_ops.reduce_sum", "tensorflow.python.ops.array_ops.expand_dims", "tensorflow.python.ops.array_ops.expand_dims", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.math_ops.square", "tensorflow.python.ops.math_ops.square"], "function", ["None"], ["def", "_cross_squared_distance_matrix", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Pairwise squared distance between two (batch) matrices' rows (2nd dim).\n    Computes the pairwise distances between rows of x and rows of y\n    Args:\n      x: [batch_size, n, d] float `Tensor`\n      y: [batch_size, m, d] float `Tensor`\n    Returns:\n      squared_dists: [batch_size, n, m] float `Tensor`, where\n      squared_dists[b,i,j] = ||x[b,i,:] - y[b,j,:]||^2\n    \"\"\"", "\n", "x_norm_squared", "=", "math_ops", ".", "reduce_sum", "(", "math_ops", ".", "square", "(", "x", ")", ",", "2", ")", "\n", "y_norm_squared", "=", "math_ops", ".", "reduce_sum", "(", "math_ops", ".", "square", "(", "y", ")", ",", "2", ")", "\n", "\n", "# Expand so that we can broadcast.", "\n", "x_norm_squared_tile", "=", "array_ops", ".", "expand_dims", "(", "x_norm_squared", ",", "2", ")", "\n", "y_norm_squared_tile", "=", "array_ops", ".", "expand_dims", "(", "y_norm_squared", ",", "1", ")", "\n", "\n", "x_y_transpose", "=", "math_ops", ".", "matmul", "(", "x", ",", "y", ",", "adjoint_b", "=", "True", ")", "\n", "\n", "# squared_dists[b,i,j] = ||x_bi - y_bj||^2 = x_bi'x_bi- 2x_bi'x_bj + x_bj'x_bj", "\n", "squared_dists", "=", "x_norm_squared_tile", "-", "2", "*", "x_y_transpose", "+", "y_norm_squared_tile", "\n", "\n", "return", "squared_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._pairwise_squared_distance_matrix": [[55, 74], ["tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.array_ops.matrix_diag_part", "tensorflow.python.ops.array_ops.expand_dims", "tensorflow.python.ops.array_ops.transpose"], "function", ["None"], ["", "def", "_pairwise_squared_distance_matrix", "(", "x", ")", ":", "\n", "    ", "\"\"\"Pairwise squared distance among a (batch) matrix's rows (2nd dim).\n    This saves a bit of computation vs. using _cross_squared_distance_matrix(x,x)\n    Args:\n      x: `[batch_size, n, d]` float `Tensor`\n    Returns:\n      squared_dists: `[batch_size, n, n]` float `Tensor`, where\n      squared_dists[b,i,j] = ||x[b,i,:] - x[b,j,:]||^2\n    \"\"\"", "\n", "\n", "x_x_transpose", "=", "math_ops", ".", "matmul", "(", "x", ",", "x", ",", "adjoint_b", "=", "True", ")", "\n", "x_norm_squared", "=", "array_ops", ".", "matrix_diag_part", "(", "x_x_transpose", ")", "\n", "x_norm_squared_tile", "=", "array_ops", ".", "expand_dims", "(", "x_norm_squared", ",", "2", ")", "\n", "\n", "# squared_dists[b,i,j] = ||x_bi - x_bj||^2 = x_bi'x_bi- 2x_bi'x_bj + x_bj'x_bj", "\n", "squared_dists", "=", "x_norm_squared_tile", "-", "2", "*", "x_x_transpose", "+", "array_ops", ".", "transpose", "(", "\n", "x_norm_squared_tile", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "squared_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._solve_interpolation": [[76, 148], ["tensorflow.python.ops.array_ops.unstack", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.framework.ops.name_scope", "interpolate_spline._phi", "tensorflow.python.ops.array_ops.ones_like", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.ops.array_ops.zeros", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.ops.array_ops.zeros", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.linalg_ops.matrix_solve", "interpolate_spline._pairwise_squared_distance_matrix", "tensorflow.python.ops.array_ops.expand_dims", "array_ops.concat.get_shape", "tensorflow.python.ops.linalg_ops.eye", "tensorflow.python.ops.array_ops.transpose"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.shape", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._phi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._pairwise_squared_distance_matrix"], ["", "def", "_solve_interpolation", "(", "train_points", ",", "train_values", ",", "order", ",", "\n", "regularization_weight", ")", ":", "\n", "    ", "\"\"\"Solve for interpolation coefficients.\n    Computes the coefficients of the polyharmonic interpolant for the 'training'\n    data defined by (train_points, train_values) using the kernel phi.\n    Args:\n      train_points: `[b, n, d]` interpolation centers\n      train_values: `[b, n, k]` function values\n      order: order of the interpolation\n      regularization_weight: weight to place on smoothness regularization term\n    Returns:\n      w: `[b, n, k]` weights on each interpolation center\n      v: `[b, d, k]` weights on each input dimension\n    Raises:\n      ValueError: if d or k is not fully specified.\n    \"\"\"", "\n", "\n", "# These dimensions are set dynamically at runtime.", "\n", "b", ",", "n", ",", "_", "=", "array_ops", ".", "unstack", "(", "array_ops", ".", "shape", "(", "train_points", ")", ",", "num", "=", "3", ")", "\n", "\n", "d", "=", "train_points", ".", "shape", "[", "-", "1", "]", "\n", "# if tensor_shape.dimension_value(d) is None:", "\n", "#     raise ValueError('The dimensionality of the input points (d) must be '", "\n", "#                      'statically-inferrable.')", "\n", "\n", "k", "=", "train_values", ".", "shape", "[", "-", "1", "]", "\n", "# if tensor_shape.dimension_value(k) is None:", "\n", "#     raise ValueError('The dimensionality of the output values (k) must be '", "\n", "#                      'statically-inferrable.')", "\n", "\n", "# First, rename variables so that the notation (c, f, w, v, A, B, etc.)", "\n", "# follows https://en.wikipedia.org/wiki/Polyharmonic_spline.", "\n", "# To account for python style guidelines we use", "\n", "# matrix_a for A and matrix_b for B.", "\n", "\n", "c", "=", "train_points", "\n", "f", "=", "train_values", "\n", "\n", "# Next, construct the linear system.", "\n", "with", "ops", ".", "name_scope", "(", "'construct_linear_system'", ")", ":", "\n", "\n", "        ", "matrix_a", "=", "_phi", "(", "_pairwise_squared_distance_matrix", "(", "c", ")", ",", "order", ")", "# [b, n, n]", "\n", "if", "regularization_weight", ">", "0", ":", "\n", "            ", "batch_identity_matrix", "=", "array_ops", ".", "expand_dims", "(", "\n", "linalg_ops", ".", "eye", "(", "n", ",", "dtype", "=", "c", ".", "dtype", ")", ",", "0", ")", "\n", "matrix_a", "+=", "regularization_weight", "*", "batch_identity_matrix", "\n", "\n", "# Append ones to the feature values for the bias term in the linear model.", "\n", "", "ones", "=", "array_ops", ".", "ones_like", "(", "c", "[", "...", ",", ":", "1", "]", ",", "dtype", "=", "c", ".", "dtype", ")", "\n", "matrix_b", "=", "array_ops", ".", "concat", "(", "[", "c", ",", "ones", "]", ",", "2", ")", "# [b, n, d + 1]", "\n", "\n", "# [b, n + d + 1, n]", "\n", "left_block", "=", "array_ops", ".", "concat", "(", "\n", "[", "matrix_a", ",", "array_ops", ".", "transpose", "(", "matrix_b", ",", "[", "0", ",", "2", ",", "1", "]", ")", "]", ",", "1", ")", "\n", "\n", "num_b_cols", "=", "matrix_b", ".", "get_shape", "(", ")", "[", "2", "]", "# d + 1", "\n", "lhs_zeros", "=", "array_ops", ".", "zeros", "(", "[", "b", ",", "num_b_cols", ",", "num_b_cols", "]", ",", "train_points", ".", "dtype", ")", "\n", "right_block", "=", "array_ops", ".", "concat", "(", "[", "matrix_b", ",", "lhs_zeros", "]", ",", "\n", "1", ")", "# [b, n + d + 1, d + 1]", "\n", "lhs", "=", "array_ops", ".", "concat", "(", "[", "left_block", ",", "right_block", "]", ",", "\n", "2", ")", "# [b, n + d + 1, n + d + 1]", "\n", "\n", "rhs_zeros", "=", "array_ops", ".", "zeros", "(", "[", "b", ",", "d", "+", "1", ",", "k", "]", ",", "train_points", ".", "dtype", ")", "\n", "rhs", "=", "array_ops", ".", "concat", "(", "[", "f", ",", "rhs_zeros", "]", ",", "1", ")", "# [b, n + d + 1, k]", "\n", "\n", "# Then, solve the linear system and unpack the results.", "\n", "", "with", "ops", ".", "name_scope", "(", "'solve_linear_system'", ")", ":", "\n", "        ", "w_v", "=", "linalg_ops", ".", "matrix_solve", "(", "lhs", ",", "rhs", ")", "\n", "w", "=", "w_v", "[", ":", ",", ":", "n", ",", ":", "]", "\n", "v", "=", "w_v", "[", ":", ",", "n", ":", ",", ":", "]", "\n", "\n", "", "return", "w", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._apply_interpolation": [[150, 180], ["interpolate_spline._cross_squared_distance_matrix", "interpolate_spline._phi", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.ops.math_ops.matmul", "tensorflow.python.ops.array_ops.ones_like"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._cross_squared_distance_matrix", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._phi"], ["", "def", "_apply_interpolation", "(", "query_points", ",", "train_points", ",", "w", ",", "v", ",", "order", ")", ":", "\n", "    ", "\"\"\"Apply polyharmonic interpolation model to data.\n    Given coefficients w and v for the interpolation model, we evaluate\n    interpolated function values at query_points.\n    Args:\n      query_points: `[b, m, d]` x values to evaluate the interpolation at\n      train_points: `[b, n, d]` x values that act as the interpolation centers\n                      ( the c variables in the wikipedia article)\n      w: `[b, n, k]` weights on each interpolation center\n      v: `[b, d, k]` weights on each input dimension\n      order: order of the interpolation\n    Returns:\n      Polyharmonic interpolation evaluated at points defined in query_points.\n    \"\"\"", "\n", "\n", "# First, compute the contribution from the rbf term.", "\n", "pairwise_dists", "=", "_cross_squared_distance_matrix", "(", "query_points", ",", "train_points", ")", "\n", "phi_pairwise_dists", "=", "_phi", "(", "pairwise_dists", ",", "order", ")", "\n", "\n", "rbf_term", "=", "math_ops", ".", "matmul", "(", "phi_pairwise_dists", ",", "w", ")", "\n", "\n", "# Then, compute the contribution from the linear term.", "\n", "# Pad query_points with ones, for the bias term in the linear model.", "\n", "query_points_pad", "=", "array_ops", ".", "concat", "(", "[", "\n", "query_points", ",", "\n", "array_ops", ".", "ones_like", "(", "query_points", "[", "...", ",", ":", "1", "]", ",", "train_points", ".", "dtype", ")", "\n", "]", ",", "2", ")", "\n", "linear_term", "=", "math_ops", ".", "matmul", "(", "query_points_pad", ",", "v", ")", "\n", "\n", "return", "rbf_term", "+", "linear_term", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._phi": [[182, 210], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.sqrt", "tensorflow.python.ops.math_ops.log", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.log", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.pow", "tensorflow.python.ops.math_ops.square", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.log", "tensorflow.python.ops.math_ops.pow"], "function", ["None"], ["", "def", "_phi", "(", "r", ",", "order", ")", ":", "\n", "    ", "\"\"\"Coordinate-wise nonlinearity used to define the order of the interpolation.\n    See https://en.wikipedia.org/wiki/Polyharmonic_spline for the definition.\n    Args:\n      r: input op\n      order: interpolation order\n    Returns:\n      phi_k evaluated coordinate-wise on r, for k = r\n    \"\"\"", "\n", "\n", "# using EPSILON prevents log(0), sqrt0), etc.", "\n", "# sqrt(0) is well-defined, but its gradient is not", "\n", "with", "ops", ".", "name_scope", "(", "'phi'", ")", ":", "\n", "        ", "if", "order", "==", "1", ":", "\n", "            ", "r", "=", "math_ops", ".", "maximum", "(", "r", ",", "EPSILON", ")", "\n", "r", "=", "math_ops", ".", "sqrt", "(", "r", ")", "\n", "return", "r", "\n", "", "elif", "order", "==", "2", ":", "\n", "            ", "return", "0.5", "*", "r", "*", "math_ops", ".", "log", "(", "math_ops", ".", "maximum", "(", "r", ",", "EPSILON", ")", ")", "\n", "", "elif", "order", "==", "4", ":", "\n", "            ", "return", "0.5", "*", "math_ops", ".", "square", "(", "r", ")", "*", "math_ops", ".", "log", "(", "\n", "math_ops", ".", "maximum", "(", "r", ",", "EPSILON", ")", ")", "\n", "", "elif", "order", "%", "2", "==", "0", ":", "\n", "            ", "r", "=", "math_ops", ".", "maximum", "(", "r", ",", "EPSILON", ")", "\n", "return", "0.5", "*", "math_ops", ".", "pow", "(", "r", ",", "0.5", "*", "order", ")", "*", "math_ops", ".", "log", "(", "r", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "math_ops", ".", "maximum", "(", "r", ",", "EPSILON", ")", "\n", "return", "math_ops", ".", "pow", "(", "r", ",", "0.5", "*", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline.interpolate_spline": [[212, 279], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.name_scope", "interpolate_spline._solve_interpolation", "tensorflow.python.framework.ops.name_scope", "interpolate_spline._apply_interpolation"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._solve_interpolation", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.layers.interpolate_spline._apply_interpolation"], ["", "", "", "def", "interpolate_spline", "(", "train_points", ",", "\n", "train_values", ",", "\n", "query_points", ",", "\n", "order", ",", "\n", "regularization_weight", "=", "0.0", ",", "\n", "name", "=", "'interpolate_spline'", ")", ":", "\n", "    ", "r\"\"\"Interpolate signal using polyharmonic interpolation.\n    The interpolant has the form\n    $$f(x) = \\sum_{i = 1}^n w_i \\phi(||x - c_i||) + v^T x + b.$$\n    This is a sum of two terms: (1) a weighted sum of radial basis function (RBF)\n    terms, with the centers \\\\(c_1, ... c_n\\\\), and (2) a linear term with a bias.\n    The \\\\(c_i\\\\) vectors are 'training' points. In the code, b is absorbed into v\n    by appending 1 as a final dimension to x. The coefficients w and v are\n    estimated such that the interpolant exactly fits the value of the function at\n    the \\\\(c_i\\\\) points, the vector w is orthogonal to each \\\\(c_i\\\\), and the\n    vector w sums to 0. With these constraints, the coefficients can be obtained\n    by solving a linear system.\n    \\\\(\\phi\\\\) is an RBF, parametrized by an interpolation\n    order. Using order=2 produces the well-known thin-plate spline.\n    We also provide the option to perform regularized interpolation. Here, the\n    interpolant is selected to trade off between the squared loss on the training\n    data and a certain measure of its curvature\n    ([details](https://en.wikipedia.org/wiki/Polyharmonic_spline)).\n    Using a regularization weight greater than zero has the effect that the\n    interpolant will no longer exactly fit the training data. However, it may be\n    less vulnerable to overfitting, particularly for high-order interpolation.\n    Note the interpolation procedure is differentiable with respect to all inputs\n    besides the order parameter.\n    We support dynamically-shaped inputs, where batch_size, n, and m are None\n    at graph construction time. However, d and k must be known.\n    Args:\n      train_points: `[batch_size, n, d]` float `Tensor` of n d-dimensional\n        locations. These do not need to be regularly-spaced.\n      train_values: `[batch_size, n, k]` float `Tensor` of n c-dimensional values\n        evaluated at train_points.\n      query_points: `[batch_size, m, d]` `Tensor` of m d-dimensional locations\n        where we will output the interpolant's values.\n      order: order of the interpolation. Common values are 1 for\n        \\\\(\\phi(r) = r\\\\), 2 for \\\\(\\phi(r) = r^2 * log(r)\\\\) (thin-plate spline),\n         or 3 for \\\\(\\phi(r) = r^3\\\\).\n      regularization_weight: weight placed on the regularization term.\n        This will depend substantially on the problem, and it should always be\n        tuned. For many problems, it is reasonable to use no regularization.\n        If using a non-zero value, we recommend a small value like 0.001.\n      name: name prefix for ops created by this function\n    Returns:\n      `[b, m, k]` float `Tensor` of query values. We use train_points and\n      train_values to perform polyharmonic interpolation. The query values are\n      the values of the interpolant evaluated at the locations specified in\n      query_points.\n    \"\"\"", "\n", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "        ", "train_points", "=", "ops", ".", "convert_to_tensor", "(", "train_points", ")", "\n", "train_values", "=", "ops", ".", "convert_to_tensor", "(", "train_values", ")", "\n", "query_points", "=", "ops", ".", "convert_to_tensor", "(", "query_points", ")", "\n", "\n", "# First, fit the spline to the observed data.", "\n", "with", "ops", ".", "name_scope", "(", "'solve'", ")", ":", "\n", "            ", "w", ",", "v", "=", "_solve_interpolation", "(", "train_points", ",", "train_values", ",", "order", ",", "\n", "regularization_weight", ")", "\n", "\n", "# Then, evaluate the spline at the query locations.", "\n", "", "with", "ops", ".", "name_scope", "(", "'predict'", ")", ":", "\n", "            ", "query_values", "=", "_apply_interpolation", "(", "query_points", ",", "train_points", ",", "w", ",", "v", ",", "\n", "order", ")", "\n", "\n", "", "", "return", "query_values", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.__init__": [[24, 35], ["callbacks.image_callback.BaseSaveImage.__init__", "dafnet_image_callback.DAFNetImageCallback._make_dirs", "dafnet_image_callback.DAFNetImageCallback.init_models"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback._make_dirs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.init_models"], ["def", "__init__", "(", "self", ",", "conf", ",", "model", ",", "data_gen_lb", ")", ":", "\n", "        ", "\"\"\"\n        :param conf:        configuration object\n        :param model:       a DAFNet model\n        :param data_gen_lb: a python iterator of images+masks\n        \"\"\"", "\n", "self", ".", "conf", "=", "conf", "\n", "super", "(", "DAFNetImageCallback", ",", "self", ")", ".", "__init__", "(", "conf", ".", "folder", ",", "model", ")", "\n", "self", ".", "_make_dirs", "(", "self", ".", "folder", ")", "\n", "self", ".", "data_gen_lb", "=", "data_gen_lb", "\n", "self", ".", "init_models", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback._make_dirs": [[36, 52], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "_make_dirs", "(", "self", ",", "folder", ")", ":", "\n", "        ", "self", ".", "lr_folder", "=", "folder", "+", "'/images_lr'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "lr_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "lr_folder", ")", "\n", "\n", "", "self", ".", "segm_folder", "=", "folder", "+", "'/images_segm'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "segm_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "segm_folder", ")", "\n", "\n", "", "self", ".", "rec_folder", "=", "folder", "+", "'/images_rec'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "rec_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "rec_folder", ")", "\n", "\n", "", "self", ".", "discr_folder", "=", "folder", "+", "'/images_discr'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "discr_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "discr_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.init_models": [[53, 66], ["utils.sdnet_utils.get_net", "utils.sdnet_utils.get_net", "utils.sdnet_utils.get_net", "utils.sdnet_utils.get_net", "utils.sdnet_utils.get_net", "utils.sdnet_utils.get_net", "keras.Model", "keras.Model"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net"], ["", "", "def", "init_models", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoders_anatomy", "=", "self", ".", "model", ".", "Encoders_Anatomy", "\n", "self", ".", "reconstructor", "=", "self", ".", "model", ".", "Decoder", "\n", "self", ".", "segmentor", "=", "self", ".", "model", ".", "Segmentor", "\n", "self", ".", "discr_mask", "=", "self", ".", "model", ".", "D_Mask", "\n", "self", ".", "enc_modality", "=", "self", ".", "model", ".", "Enc_Modality", "\n", "self", ".", "fuser", "=", "self", ".", "model", ".", "Anatomy_Fuser", "\n", "self", ".", "discr_mask", "=", "self", ".", "model", ".", "D_Mask", "\n", "\n", "mean", "=", "get_net", "(", "self", ".", "enc_modality", ",", "'z_mean'", ")", "\n", "var", "=", "get_net", "(", "self", ".", "enc_modality", ",", "'z_log_var'", ")", "\n", "self", ".", "z_mean", "=", "Model", "(", "self", ".", "enc_modality", ".", "inputs", ",", "mean", ".", "output", ")", "\n", "self", ".", "z_var", "=", "Model", "(", "self", ".", "enc_modality", ".", "inputs", ",", "var", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.on_epoch_end": [[67, 94], ["next", "dafnet_image_callback.DAFNetImageCallback.plot_latent_representation", "dafnet_image_callback.DAFNetImageCallback.plot_segmentations", "dafnet_image_callback.DAFNetImageCallback.plot_reconstructions", "dafnet_image_callback.DAFNetImageCallback.plot_discriminator_outputs", "len", "next", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.plot_latent_representation", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.plot_segmentations", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.plot_reconstructions", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.plot_discriminator_outputs"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", "=", "None", ",", "logs", "=", "None", ")", ":", "\n", "        ", "'''\n        Plot training images from the real_pool. For SDNet the real_pools will contain images paired with masks,\n        and also unlabelled images.\n        :param epoch:       current training epoch\n        :param logs:\n        '''", "\n", "x_mod1", ",", "x_mod2", ",", "m_mod1", ",", "m_mod2", "=", "next", "(", "self", ".", "data_gen_lb", ")", "\n", "image_list", "=", "[", "x_mod1", "[", "...", ",", "0", ":", "1", "]", ",", "x_mod2", "[", "...", ",", "0", ":", "1", "]", "]", "\n", "masks_list", "=", "[", "m_mod1", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ",", "m_mod2", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "]", "\n", "\n", "# we usually plot 4 image-rows. If we have less, it means we've reached the end of the data, so iterate from", "\n", "# the beginning", "\n", "while", "len", "(", "image_list", "[", "0", "]", ")", "<", "4", ":", "\n", "            ", "x_mod1", ",", "x_mod2", "=", "image_list", "\n", "m_mod1", ",", "m_mod2", "=", "masks_list", "\n", "\n", "x_mod1_2", ",", "x_mod2_2", ",", "m_mod1_2", ",", "m_mod2_2", "=", "next", "(", "self", ".", "data_gen_lb", ")", "\n", "image_list", "=", "[", "np", ".", "concatenate", "(", "[", "x_mod1", "[", "...", ",", "0", ":", "1", "]", ",", "x_mod1_2", "[", "...", ",", "0", ":", "1", "]", "]", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "x_mod2", "[", "...", ",", "0", ":", "1", "]", ",", "x_mod2_2", "[", "...", ",", "0", ":", "1", "]", "]", ",", "axis", "=", "0", ")", "]", "\n", "masks_list", "=", "[", "np", ".", "concatenate", "(", "[", "m_mod1", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ",", "m_mod1_2", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "]", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "m_mod2", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ",", "m_mod2_2", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "]", ",", "axis", "=", "0", ")", "]", "\n", "\n", "", "self", ".", "plot_latent_representation", "(", "image_list", ",", "epoch", ")", "\n", "self", ".", "plot_segmentations", "(", "image_list", ",", "masks_list", ",", "epoch", ")", "\n", "self", ".", "plot_reconstructions", "(", "image_list", ",", "epoch", ")", "\n", "self", ".", "plot_discriminator_outputs", "(", "image_list", ",", "masks_list", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.plot_latent_representation": [[95, 141], ["range", "dafnet_image_callback.DAFNetImageCallback.fuser.predict", "numpy.concatenate", "scipy.misc.imsave", "len", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "x_list.append", "dafnet_image_callback.DAFNetImageCallback.encoders_anatomy[].predict", "s_list.append", "numpy.concatenate", "scipy.misc.imsave", "dafnet_image_callback.DAFNetImageCallback.enc_modality.predict", "dafnet_image_callback.DAFNetImageCallback.z_mean.predict", "dafnet_image_callback.DAFNetImageCallback.z_var.predict", "numpy.var", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "dafnet_image_callback.DAFNetImageCallback.encoders_anatomy[].predict", "numpy.exp", "open", "f.writelines", "open", "f.writelines", "range", "range", "range", "range", "str", "str", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample"], ["", "def", "plot_latent_representation", "(", "self", ",", "image_list", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Plot a 4-row image, where the first column shows the input image and the following columns\n        each of the 8 channels of the spatial latent representation.\n        :param image_list:   a list of 4-dim arrays of images, one for each modality\n        :param epoch     :   the epoch number\n        \"\"\"", "\n", "\n", "x_list", ",", "s_list", "=", "[", "]", ",", "[", "]", "\n", "for", "mod_i", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "            ", "images", "=", "image_list", "[", "mod_i", "]", "\n", "\n", "x", "=", "utils", ".", "data_utils", ".", "sample", "(", "images", ",", "nb_samples", "=", "4", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "x_list", ".", "append", "(", "x", ")", "\n", "\n", "# plot S", "\n", "s", "=", "self", ".", "encoders_anatomy", "[", "mod_i", "]", ".", "predict", "(", "x", ")", "\n", "s_list", ".", "append", "(", "s", ")", "\n", "\n", "rows", "=", "[", "np", ".", "concatenate", "(", "[", "x", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", "+", "[", "s", "[", "i", ",", ":", ",", ":", ",", "s_chn", "]", "for", "s_chn", "in", "range", "(", "s", ".", "shape", "[", "-", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", "]", "\n", "im_plot", "=", "np", ".", "concatenate", "(", "rows", ",", "axis", "=", "0", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "self", ".", "lr_folder", "+", "'/mod_%d_s_lr_epoch_%d.png'", "%", "(", "mod_i", ",", "epoch", ")", ",", "im_plot", ")", "\n", "\n", "# plot Z", "\n", "enc_modality_inputs", "=", "[", "self", ".", "encoders_anatomy", "[", "mod_i", "]", ".", "predict", "(", "images", ")", ",", "images", "]", "\n", "z", ",", "_", "=", "self", ".", "enc_modality", ".", "predict", "(", "enc_modality_inputs", ")", "\n", "\n", "means", "=", "self", ".", "z_mean", ".", "predict", "(", "enc_modality_inputs", ")", "\n", "variances", "=", "self", ".", "z_var", ".", "predict", "(", "enc_modality_inputs", ")", "\n", "means", "=", "np", ".", "var", "(", "means", ",", "axis", "=", "0", ")", "\n", "variances", "=", "np", ".", "mean", "(", "np", ".", "exp", "(", "variances", ")", ",", "axis", "=", "0", ")", "\n", "with", "open", "(", "self", ".", "lr_folder", "+", "'/z_means.csv'", ",", "'a+'", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "', '", ".", "join", "(", "[", "str", "(", "means", "[", "i", "]", ")", "for", "i", "in", "range", "(", "means", ".", "shape", "[", "0", "]", ")", "]", ")", "+", "'\\n'", ")", "\n", "", "with", "open", "(", "self", ".", "lr_folder", "+", "'/z_vars.csv'", ",", "'a+'", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "', '", ".", "join", "(", "[", "str", "(", "variances", "[", "i", "]", ")", "for", "i", "in", "range", "(", "variances", ".", "shape", "[", "0", "]", ")", "]", ")", "+", "'\\n'", ")", "\n", "\n", "# plot deformed anatomies", "\n", "", "", "new_anatomies", "=", "self", ".", "fuser", ".", "predict", "(", "s_list", ")", "\n", "\n", "s1_def", "=", "new_anatomies", "[", "0", "]", "\n", "rows", "=", "[", "np", ".", "concatenate", "(", "[", "x_list", "[", "0", "]", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "x_list", "[", "1", "]", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", "+", "\n", "[", "s1_def", "[", "i", ",", ":", ",", ":", ",", "s_chn", "]", "for", "s_chn", "in", "range", "(", "s1_def", ".", "shape", "[", "-", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "x_list", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "]", "\n", "im_plot", "=", "np", ".", "concatenate", "(", "rows", ",", "axis", "=", "0", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "self", ".", "lr_folder", "+", "'/s1def_lr_epoch_%d.png'", "%", "(", "epoch", ")", ",", "im_plot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.plot_segmentations": [[142, 192], ["range", "dafnet_image_callback.DAFNetImageCallback.fuser.predict", "range", "numpy.concatenate", "scipy.misc.imsave", "len", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "x_list.append", "m_list2.append", "dafnet_image_callback.DAFNetImageCallback.encoders_anatomy[].predict", "dafnet_image_callback.DAFNetImageCallback.segmentor.predict", "s_list.append", "range", "numpy.concatenate", "scipy.misc.imsave", "dafnet_image_callback.DAFNetImageCallback.segmentor.predict", "str", "str", "len", "len", "numpy.concatenate", "len", "len", "numpy.concatenate", "range", "range", "len", "len", "range", "range", "len", "len", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample"], ["", "def", "plot_segmentations", "(", "self", ",", "image_list", ",", "mask_list", ",", "epoch", ")", ":", "\n", "        ", "'''\n        Plot an image for every sample, where every row contains a channel of the spatial LR and a channel of the\n        predicted mask.\n        :param image_list:   a list of 4-dim arrays of images, one for each modality\n        :param masks_list:   a list of 4-dim arrays of masks, one for each modality\n        :param epoch:       the epoch number\n        '''", "\n", "\n", "x_list", ",", "s_list", ",", "m_list2", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "mod_i", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "            ", "images", "=", "image_list", "[", "mod_i", "]", "\n", "masks", "=", "mask_list", "[", "mod_i", "]", "\n", "\n", "x", "=", "utils", ".", "data_utils", ".", "sample", "(", "images", ",", "4", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "m", "=", "utils", ".", "data_utils", ".", "sample", "(", "masks", ",", "4", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "\n", "x_list", ".", "append", "(", "x", ")", "\n", "m_list2", ".", "append", "(", "m", ")", "\n", "\n", "assert", "x", ".", "shape", "[", ":", "-", "1", "]", "==", "m", ".", "shape", "[", ":", "-", "1", "]", ",", "'Incompatible shapes: %s vs %s'", "%", "(", "str", "(", "x", ".", "shape", ")", ",", "str", "(", "m", ".", "shape", ")", ")", "\n", "\n", "s", "=", "self", ".", "encoders_anatomy", "[", "mod_i", "]", ".", "predict", "(", "x", ")", "\n", "y", "=", "self", ".", "segmentor", ".", "predict", "(", "s", ")", "\n", "\n", "s_list", ".", "append", "(", "s", ")", "\n", "\n", "rows", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "y_list", "=", "[", "y", "[", "i", ",", ":", ",", ":", ",", "chn", "]", "for", "chn", "in", "range", "(", "y", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "m_list", "=", "[", "m", "[", "i", ",", ":", ",", ":", ",", "chn", "]", "for", "chn", "in", "range", "(", "m", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "if", "m", ".", "shape", "[", "-", "1", "]", "<", "y", ".", "shape", "[", "-", "1", "]", ":", "\n", "                    ", "m_list", "+=", "[", "np", ".", "zeros", "(", "shape", "=", "(", "m", ".", "shape", "[", "1", "]", ",", "m", ".", "shape", "[", "2", "]", ")", ")", "]", "*", "(", "y", ".", "shape", "[", "-", "1", "]", "-", "m", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "assert", "len", "(", "y_list", ")", "==", "len", "(", "m_list", ")", ",", "'Incompatible sizes: %d vs %d'", "%", "(", "len", "(", "y_list", ")", ",", "len", "(", "m_list", ")", ")", "\n", "rows", "+=", "[", "np", ".", "concatenate", "(", "[", "x", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", "+", "y_list", "+", "m_list", ",", "axis", "=", "1", ")", "]", "\n", "", "im_plot", "=", "np", ".", "concatenate", "(", "rows", ",", "axis", "=", "0", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "self", ".", "segm_folder", "+", "'/mod_%d_segmentations_epoch_%d.png'", "%", "(", "mod_i", ",", "epoch", ")", ",", "im_plot", ")", "\n", "\n", "", "new_anatomies", "=", "self", ".", "fuser", ".", "predict", "(", "s_list", ")", "\n", "pred_masks", "=", "[", "self", ".", "segmentor", ".", "predict", "(", "s", ")", "for", "s", "in", "new_anatomies", "]", "\n", "\n", "rows", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x_list", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "y", "in", "pred_masks", ":", "\n", "                ", "y_list", "=", "[", "y", "[", "i", ",", ":", ",", ":", ",", "chn", "]", "for", "chn", "in", "range", "(", "self", ".", "conf", ".", "num_masks", ")", "]", "\n", "m_list", "=", "[", "m_list2", "[", "1", "]", "[", "i", ",", ":", ",", ":", ",", "chn", "]", "for", "chn", "in", "range", "(", "self", ".", "conf", ".", "num_masks", ")", "]", "\n", "assert", "len", "(", "y_list", ")", "==", "len", "(", "m_list", ")", ",", "'Incompatible sizes: %d vs %d'", "%", "(", "len", "(", "y_list", ")", ",", "len", "(", "m_list", ")", ")", "\n", "rows", "+=", "[", "np", ".", "concatenate", "(", "[", "x_list", "[", "0", "]", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "x_list", "[", "1", "]", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", "+", "y_list", "+", "m_list", ",", "axis", "=", "1", ")", "]", "\n", "", "", "im_plot", "=", "np", ".", "concatenate", "(", "rows", ",", "axis", "=", "0", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "self", ".", "segm_folder", "+", "'/fused_segmentations_epoch_%d.png'", "%", "(", "epoch", ")", ",", "im_plot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.plot_discriminator_outputs": [[193, 236], ["dafnet_image_callback.DAFNetImageCallback.fuser.predict", "numpy.concatenate", "numpy.concatenate", "dafnet_image_callback.DAFNetImageCallback.segmentor.predict", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "matplotlib.figure", "range", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "enc.predict", "matplotlib.subplot", "numpy.concatenate", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "matplotlib.subplot", "numpy.concatenate", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "zip", "dafnet_image_callback.DAFNetImageCallback.discr_mask.predict().reshape().mean", "dafnet_image_callback.DAFNetImageCallback.discr_mask.predict().reshape().mean", "range", "range", "dafnet_image_callback.DAFNetImageCallback.discr_mask.predict().reshape", "dafnet_image_callback.DAFNetImageCallback.discr_mask.predict().reshape", "dafnet_image_callback.DAFNetImageCallback.discr_mask.predict", "dafnet_image_callback.DAFNetImageCallback.discr_mask.predict"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample"], ["", "def", "plot_discriminator_outputs", "(", "self", ",", "image_list", ",", "mask_list", ",", "epoch", ")", ":", "\n", "        ", "'''\n        Plot a histogram of predicted values by the discriminator\n        :param image_list:   a list of 4-dim arrays of images, one for each modality\n        :param masks_list:   a list of 4-dim arrays of masks, one for each modality\n        :param epoch:       the epoch number\n        '''", "\n", "\n", "s_list", "=", "[", "enc", ".", "predict", "(", "x", ")", "for", "enc", ",", "x", "in", "zip", "(", "self", ".", "encoders_anatomy", ",", "image_list", ")", "]", "\n", "\n", "\n", "s_list", "+=", "self", ".", "fuser", ".", "predict", "(", "s_list", ")", "\n", "# s2_def, fused_s2 = self.fuser.predict(reversed(s_list))", "\n", "# s_list += [s1_def, fused_s1]", "\n", "\n", "s", "=", "np", ".", "concatenate", "(", "s_list", ",", "axis", "=", "0", ")", "\n", "m", "=", "np", ".", "concatenate", "(", "mask_list", ",", "axis", "=", "0", ")", "\n", "pred_m", "=", "self", ".", "segmentor", ".", "predict", "(", "s", ")", "\n", "\n", "m", "=", "m", "[", "...", ",", "0", ":", "self", ".", "discr_mask", ".", "input_shape", "[", "-", "1", "]", "]", "\n", "pred_m", "=", "pred_m", "[", "...", ",", "0", ":", "self", ".", "discr_mask", ".", "input_shape", "[", "-", "1", "]", "]", "\n", "\n", "m", "=", "utils", ".", "data_utils", ".", "sample", "(", "m", ",", "nb_samples", "=", "4", ")", "\n", "pred_m", "=", "utils", ".", "data_utils", ".", "sample", "(", "pred_m", ",", "nb_samples", "=", "4", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "4", ",", "2", ",", "2", "*", "i", "+", "1", ")", "\n", "m_allchn", "=", "np", ".", "concatenate", "(", "[", "m", "[", "i", ",", ":", ",", ":", ",", "chn", "]", "for", "chn", "in", "range", "(", "m", ".", "shape", "[", "-", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "plt", ".", "imshow", "(", "m_allchn", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "title", "(", "'Pred: %.3f'", "%", "self", ".", "discr_mask", ".", "predict", "(", "m", "[", "i", ":", "i", "+", "1", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "mean", "(", "axis", "=", "1", ")", ")", "\n", "\n", "plt", ".", "subplot", "(", "4", ",", "2", ",", "2", "*", "i", "+", "2", ")", "\n", "pred_m_allchn_img", "=", "np", ".", "concatenate", "(", "[", "pred_m", "[", "i", ",", ":", ",", ":", ",", "chn", "]", "for", "chn", "in", "range", "(", "pred_m", ".", "shape", "[", "-", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "plt", ".", "imshow", "(", "pred_m_allchn_img", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "title", "(", "'Pred: %.3f'", "%", "self", ".", "discr_mask", ".", "predict", "(", "pred_m", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "mean", "(", "axis", "=", "1", ")", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "self", ".", "discr_folder", "+", "'/discriminator_mask_epoch_%d.png'", "%", "epoch", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.plot_reconstructions": [[237, 262], ["range", "dafnet_image_callback.DAFNetImageCallback.fuser.predict", "dafnet_image_callback.DAFNetImageCallback.get_rec_image", "scipy.misc.imsave", "len", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "x_list.append", "dafnet_image_callback.DAFNetImageCallback.encoders_anatomy[].predict", "s_list.append", "dafnet_image_callback.DAFNetImageCallback.get_rec_image", "scipy.misc.imsave"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.get_rec_image", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.get_rec_image"], ["", "def", "plot_reconstructions", "(", "self", ",", "image_list", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Plot two images showing the combination of the spatial and modality LR to generate an image. The first\n        image uses the predicted S and Z and the second samples Z from a Gaussian.\n        :param image_list:  a list of 2 4-dim arrays of images\n        :param epoch:       the epoch number\n        \"\"\"", "\n", "x_list", ",", "s_list", "=", "[", "]", ",", "[", "]", "\n", "for", "mod_i", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "            ", "images", "=", "image_list", "[", "mod_i", "]", "\n", "x", "=", "utils", ".", "data_utils", ".", "sample", "(", "images", ",", "nb_samples", "=", "4", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "x_list", ".", "append", "(", "x", ")", "\n", "\n", "# S + Z -> Image", "\n", "s", "=", "self", ".", "encoders_anatomy", "[", "mod_i", "]", ".", "predict", "(", "x", ")", "\n", "s_list", ".", "append", "(", "s", ")", "\n", "\n", "im_plot", "=", "self", ".", "get_rec_image", "(", "x", ",", "s", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "self", ".", "rec_folder", "+", "'/mod_%d_rec_epoch_%d.png'", "%", "(", "mod_i", ",", "epoch", ")", ",", "im_plot", ")", "\n", "\n", "", "new_anatomies", "=", "self", ".", "fuser", ".", "predict", "(", "s_list", ")", "\n", "s1_def", "=", "new_anatomies", "[", "0", "]", "\n", "\n", "im_plot", "=", "self", ".", "get_rec_image", "(", "x_list", "[", "1", "]", ",", "s1_def", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "self", ".", "rec_folder", "+", "'/s1def_rec_epoch_%d.png'", "%", "(", "epoch", ")", ",", "im_plot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.dafnet_image_callback.DAFNetImageCallback.get_rec_image": [[263, 284], ["dafnet_image_callback.DAFNetImageCallback.enc_modality.predict", "utils.distributions.NormalDistribution", "utils.distributions.NormalDistribution", "utils.distributions.NormalDistribution", "dafnet_image_callback.DAFNetImageCallback.reconstructor.predict", "dafnet_image_callback.DAFNetImageCallback.reconstructor.predict", "numpy.concatenate", "dafnet_image_callback.DAFNetImageCallback.reconstructor.predict", "dafnet_image_callback.DAFNetImageCallback.reconstructor.predict", "utils.distributions.NormalDistribution.sample", "utils.distributions.NormalDistribution.sample", "utils.distributions.NormalDistribution.sample", "dafnet_image_callback.DAFNetImageCallback.reconstructor.predict", "utils.image_utils.makeTextHeaderImage", "utils.image_utils.makeTextHeaderImage", "utils.image_utils.makeTextHeaderImage", "utils.image_utils.makeTextHeaderImage", "utils.image_utils.makeTextHeaderImage", "utils.image_utils.makeTextHeaderImage", "utils.image_utils.makeTextHeaderImage", "utils.image_utils.makeTextHeaderImage", "utils.image_utils.makeTextHeaderImage", "numpy.concatenate", "numpy.clip", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.zeros", "range", "range", "dafnet_image_callback.DAFNetImageCallback.reconstructor.predict", "range", "callbacks.image_callback.get_s0chn"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.makeTextHeaderImage", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.get_s0chn"], ["", "def", "get_rec_image", "(", "self", ",", "x", ",", "s", ")", ":", "\n", "        ", "z", ",", "_", "=", "self", ".", "enc_modality", ".", "predict", "(", "[", "s", ",", "x", "]", ")", "\n", "gaussian", "=", "NormalDistribution", "(", ")", "\n", "\n", "y", "=", "self", ".", "reconstructor", ".", "predict", "(", "[", "s", ",", "z", "]", ")", "\n", "y_s0", "=", "self", ".", "reconstructor", ".", "predict", "(", "[", "s", ",", "np", ".", "zeros", "(", "z", ".", "shape", ")", "]", ")", "\n", "all_bkg", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "s", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "s", ".", "shape", "[", "-", "1", "]", "-", "1", ",", ")", ")", ",", "np", ".", "ones", "(", "s", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "1", ",", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "y_0z", "=", "self", ".", "reconstructor", ".", "predict", "(", "[", "all_bkg", ",", "z", "]", ")", "\n", "y_00", "=", "self", ".", "reconstructor", ".", "predict", "(", "[", "all_bkg", ",", "np", ".", "zeros", "(", "z", ".", "shape", ")", "]", ")", "\n", "z_random", "=", "gaussian", ".", "sample", "(", "z", ".", "shape", ")", "\n", "y_random", "=", "self", ".", "reconstructor", ".", "predict", "(", "[", "s", ",", "z_random", "]", ")", "\n", "rows", "=", "[", "np", ".", "concatenate", "(", "[", "x", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "y", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "y_random", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "y_s0", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", "+", "\n", "[", "self", ".", "reconstructor", ".", "predict", "(", "[", "get_s0chn", "(", "k", ",", "s", ")", ",", "z", "]", ")", "[", "i", ",", ":", ",", ":", ",", "0", "]", "for", "k", "in", "\n", "range", "(", "s", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "]", "+", "\n", "[", "y_0z", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "y_00", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", ",", "axis", "=", "1", ")", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", "]", "\n", "header", "=", "utils", ".", "image_utils", ".", "makeTextHeaderImage", "(", "x", ".", "shape", "[", "2", "]", ",", "[", "'X'", ",", "'rec(s,z)'", ",", "'rec(s,~z)'", ",", "'rec(s,0)'", "]", "+", "\n", "[", "'rec(s0_%d, z)'", "%", "k", "for", "k", "in", "range", "(", "s", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "]", "+", "[", "\n", "'rec(0, z)'", ",", "'rec(0,0)'", "]", ")", "\n", "im_plot", "=", "np", ".", "concatenate", "(", "[", "header", "]", "+", "rows", ",", "axis", "=", "0", ")", "\n", "im_plot", "=", "np", ".", "clip", "(", "im_plot", ",", "-", "1", ",", "1", ")", "\n", "return", "im_plot", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.loss_callback.SaveLoss.__init__": [[11, 16], ["keras.callbacks.Callback.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "folder", ",", "scale", "=", "'linear'", ")", ":", "\n", "        ", "super", "(", "SaveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "folder", "=", "folder", "\n", "self", ".", "values", "=", "dict", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.loss_callback.SaveLoss.on_epoch_end": [[17, 57], ["matplotlib.figure", "matplotlib.suptitle", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "len", "loss_callback.SaveLoss.values[].append", "range", "os.path.join", "range", "matplotlib.plot", "os.path.join", "len", "matplotlib.plot", "len", "matplotlib.semilogy"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "logs", "is", "None", ":", "return", "\n", "\n", "if", "len", "(", "self", ".", "values", ")", "==", "0", ":", "\n", "            ", "for", "k", "in", "logs", ":", "\n", "                ", "self", ".", "values", "[", "k", "]", "=", "[", "]", "\n", "\n", "", "", "for", "k", "in", "logs", ":", "\n", "            ", "self", ".", "values", "[", "k", "]", ".", "append", "(", "logs", "[", "k", "]", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "suptitle", "(", "'Training loss'", ",", "fontsize", "=", "16", ")", "\n", "for", "k", "in", "self", ".", "values", ":", "\n", "            ", "if", "'dis'", "in", "k", "or", "'adv'", "in", "k", ":", "\n", "                ", "continue", "\n", "\n", "", "epochs", "=", "range", "(", "len", "(", "self", ".", "values", "[", "k", "]", ")", ")", "\n", "if", "self", ".", "scale", "==", "'linear'", ":", "\n", "                ", "plt", ".", "plot", "(", "epochs", ",", "self", ".", "values", "[", "k", "]", ",", "label", "=", "k", ")", "\n", "", "elif", "self", ".", "scale", "==", "'log'", ":", "\n", "                ", "plt", ".", "semilogy", "(", "epochs", ",", "self", ".", "values", "[", "k", "]", ",", "label", "=", "k", ")", "\n", "", "", "plt", ".", "xlabel", "(", "'Epochs'", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'training_loss.png'", ")", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "suptitle", "(", "'Training loss'", ",", "fontsize", "=", "16", ")", "\n", "for", "k", "in", "self", ".", "values", ":", "\n", "            ", "if", "not", "(", "'dis'", "in", "k", "or", "'adv'", "in", "k", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "epochs", "=", "range", "(", "len", "(", "self", ".", "values", "[", "k", "]", ")", ")", "\n", "plt", ".", "plot", "(", "epochs", ",", "self", ".", "values", "[", "k", "]", ",", "label", "=", "k", ")", "\n", "", "plt", ".", "xlabel", "(", "'Epochs'", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'training_discr_loss.png'", ")", ")", "\n", "\n", "plt", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.__init__": [[15, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "swa_epoch", ",", "model_build_fnc", ",", "build_params", ")", ":", "\n", "        ", "super", "(", "SWA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "swa_epoch", "=", "swa_epoch", "\n", "self", ".", "model_build_fnc", "=", "model_build_fnc", "\n", "self", ".", "build_params", "=", "build_params", "\n", "self", ".", "clone", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_begin": [[22, 26], ["print"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "nb_epoch", "=", "self", ".", "params", "[", "'epochs'", "]", "\n", "print", "(", "'Stochastic weight averaging selected for last {} epochs.'", "\n", ".", "format", "(", "self", ".", "nb_epoch", "-", "self", ".", "swa_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_epoch_end": [[27, 35], ["swa.SWA.model.get_weights", "enumerate", "swa.SWA.model.get_weights"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "<=", "self", ".", "swa_epoch", ":", "\n", "            ", "self", ".", "swa_weights", "=", "self", ".", "model", ".", "get_weights", "(", ")", "\n", "\n", "", "elif", "epoch", ">", "self", ".", "swa_epoch", ":", "\n", "            ", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "swa_weights", ")", ":", "\n", "                ", "self", ".", "swa_weights", "[", "i", "]", "=", "(", "self", ".", "swa_weights", "[", "i", "]", "*", "(", "epoch", "-", "self", ".", "swa_epoch", ")", "+", "self", ".", "model", ".", "get_weights", "(", ")", "[", "i", "]", ")", "/", "(", "(", "epoch", "-", "self", ".", "swa_epoch", ")", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_end": [[36, 39], ["swa.SWA.model.set_weights", "log.debug"], "methods", ["None"], ["", "", "", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", ".", "set_weights", "(", "self", ".", "swa_weights", ")", "\n", "log", ".", "debug", "(", "'Final model parameters set to stochastic weight average.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model": [[40, 48], ["swa.SWA.clone.set_weights", "swa.SWA.model_build_fnc", "swa.SWA.model_build_fnc"], "methods", ["None"], ["", "def", "get_clone_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "clone", "is", "None", ":", "\n", "            ", "if", "self", ".", "build_params", "is", "not", "None", ":", "\n", "                ", "self", ".", "clone", "=", "self", ".", "model_build_fnc", "(", "self", ".", "build_params", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "clone", "=", "self", ".", "model_build_fnc", "(", ")", "\n", "", "", "self", ".", "clone", ".", "set_weights", "(", "self", ".", "swa_weights", ")", "\n", "return", "self", ".", "clone", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.BaseSaveImage.__init__": [[20, 26], ["keras.callbacks.Callback.__init__", "os.path.join", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "folder", ",", "model", ")", ":", "\n", "        ", "super", "(", "BaseSaveImage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "'training_images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "folder", ")", "\n", "", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.BaseSaveImage.on_epoch_end": [[27, 30], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "on_epoch_end", "(", "self", ",", "epoch", "=", "None", ",", "logs", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveImage.__init__": [[36, 43], ["keras.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "folder", ",", "test_data", ",", "test_masks", "=", "None", ",", "input_len", "=", "None", ",", "comet_experiment", "=", "None", ")", ":", "\n", "        ", "super", "(", "SaveImage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "folder", "=", "folder", "\n", "self", ".", "test_data", "=", "test_data", "# this can be a list of images of different spatial dimensions", "\n", "self", ".", "test_masks", "=", "test_masks", "\n", "self", ".", "input_len", "=", "input_len", "\n", "self", ".", "comet_experiment", "=", "comet_experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveImage.on_epoch_end": [[44, 67], ["range", "open", "open.writelines", "open.close", "os.path.exists", "os.makedirs", "len", "utils.image_utils.save_segmentation", "all_dice.append", "os.path.join", "matplotlib.figure", "matplotlib.plot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.tight_layout", "image_callback.SaveImage.comet_experiment.log_figure", "matplotlib.close", "costs.dice", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.save_segmentation", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "folder", ")", "\n", "\n", "", "all_dice", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "test_data", ")", ")", ":", "\n", "            ", "d", ",", "m", "=", "self", ".", "test_data", "[", "i", "]", ",", "self", ".", "test_masks", "[", "i", "]", "\n", "s", ",", "im", "=", "save_segmentation", "(", "self", ".", "folder", ",", "self", ".", "model", ",", "d", ",", "m", ",", "'slc_%d'", "%", "i", ")", "\n", "all_dice", ".", "append", "(", "-", "dice", "(", "self", ".", "test_masks", "[", "i", ":", "i", "+", "1", "]", ",", "s", ")", ")", "\n", "\n", "if", "self", ".", "comet_experiment", "is", "not", "None", ":", "\n", "                ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "0", ",", "0", ")", "# fake a line plot to upload to comet", "\n", "plt", ".", "imshow", "(", "im", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "self", ".", "comet_experiment", ".", "log_figure", "(", "figure_name", "=", "'segmentation'", ",", "figure", "=", "plt", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder", ",", "'test_error.txt'", ")", ",", "'a+'", ")", "\n", "f", ".", "writelines", "(", "\"%d, %.3f\\n\"", "%", "(", "epoch", ",", "np", ".", "mean", "(", "all_dice", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.__init__": [[70, 79], ["keras.callbacks.Callback.__init__", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "model", ",", "img_gen", ",", "comet_experiment", "=", "None", ")", ":", "\n", "        ", "super", "(", "SaveEpochImages", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "folder", "=", "conf", ".", "folder", "+", "'/training'", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "gen", "=", "img_gen", "\n", "self", ".", "comet_experiment", "=", "comet_experiment", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end": [[80, 96], ["next", "utils.image_utils.intensity_augmentation", "image_callback.SaveEpochImages.model.predict", "image_callback.save_multiimage_segmentation", "matplotlib.figure", "matplotlib.plot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.tight_layout", "image_callback.SaveEpochImages.comet_experiment.log_figure", "matplotlib.close"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.image_utils.intensity_augmentation", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.save_multiimage_segmentation"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "x", ",", "m", "=", "next", "(", "self", ".", "gen", ")", "\n", "x", "=", "intensity_augmentation", "(", "x", ")", "\n", "\n", "y", "=", "self", ".", "model", ".", "predict", "(", "x", ")", "\n", "im1", ",", "im2", "=", "save_multiimage_segmentation", "(", "x", ",", "m", ",", "y", ",", "self", ".", "folder", ",", "epoch", ")", "\n", "if", "self", ".", "comet_experiment", "is", "not", "None", ":", "\n", "            ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "0", ",", "0", ")", "# fake a line plot to upload to comet", "\n", "plt", ".", "imshow", "(", "im1", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "imshow", "(", "im2", ",", "cmap", "=", "'gray'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "self", ".", "comet_experiment", ".", "log_figure", "(", "figure_name", "=", "'segmentation'", ",", "figure", "=", "plt", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.save_multiimage_segmentation": [[98, 124], ["range", "numpy.concatenate", "numpy.concatenate", "matplotlib.figure", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.savefig", "numpy.concatenate", "numpy.concatenate", "sum", "numpy.zeros", "sum", "range", "range"], "function", ["None"], ["", "", "", "def", "save_multiimage_segmentation", "(", "x", ",", "m", ",", "y", ",", "folder", ",", "epoch", ")", ":", "\n", "    ", "rows_img", ",", "rows_msk", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "i", "==", "4", ":", "\n", "            ", "break", "\n", "# y_list = [y[i, :, :, chn] for chn in range(y.shape[-1])]", "\n", "# m_list = [m[i, :, :, chn] for chn in range(m.shape[-1])]", "\n", "# if m.shape[-1] < y.shape[-1]:", "\n", "#     m_list += [np.zeros(shape=(m.shape[1], m.shape[2]))] * (y.shape[-1] - m.shape[-1])", "\n", "# assert len(y_list) == len(m_list), 'Incompatible sizes: %d vs %d' % (len(y_list), len(m_list))", "\n", "\n", "", "rows_img", "+=", "[", "np", ".", "concatenate", "(", "[", "x", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "x", "[", "i", ",", ":", ",", ":", ",", "0", "]", ",", "x", "[", "i", ",", ":", ",", ":", ",", "0", "]", "]", ",", "axis", "=", "1", ")", "]", "\n", "rows_msk", "+=", "[", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "x", "[", "i", ",", ":", ",", ":", ",", "0", "]", ".", "shape", ")", "]", "+", "\n", "[", "sum", "(", "[", "m", "[", "i", ",", ":", ",", ":", ",", "j", "]", "*", "(", "j", "+", "1", ")", "*", "(", "1.0", "/", "m", ".", "shape", "[", "-", "1", "]", ")", "for", "j", "in", "range", "(", "m", ".", "shape", "[", "-", "1", "]", ")", "]", ")", "]", "+", "\n", "[", "sum", "(", "[", "y", "[", "i", ",", ":", ",", ":", ",", "j", "]", "*", "(", "j", "+", "1", ")", "*", "(", "1.0", "/", "m", ".", "shape", "[", "-", "1", "]", ")", "for", "j", "in", "range", "(", "m", ".", "shape", "[", "-", "1", "]", ")", "]", ")", "]", ",", "axis", "=", "1", ")", "]", "\n", "\n", "", "rows_img", "=", "np", ".", "concatenate", "(", "rows_img", ",", "axis", "=", "0", ")", "\n", "rows_msk", "=", "np", ".", "concatenate", "(", "rows_msk", ",", "axis", "=", "0", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "rows_img", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "imshow", "(", "rows_msk", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "savefig", "(", "folder", "+", "'/segmentations_epoch_%d.png'", "%", "(", "epoch", ")", ")", "\n", "# scipy.misc.imsave(folder + '/segmentations_epoch_%d.png' % (epoch), im_plot)", "\n", "# return im_plot", "\n", "return", "rows_img", ",", "rows_msk", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.get_s0chn": [[126, 133], ["s.copy"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.copy"], ["", "def", "get_s0chn", "(", "k", ",", "s", ")", ":", "\n", "    ", "s_res", "=", "s", ".", "copy", "(", ")", "\n", "chnk", "=", "s_res", "[", "...", ",", "k", "]", "\n", "# move channel k 1s to the background", "\n", "s_res", "[", "...", ",", "-", "1", "]", "[", "chnk", "==", "1", "]", "=", "1", "\n", "s_res", "[", "...", ",", "k", "]", "=", "0", "\n", "return", "s_res", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.configuration.mmsdnet_config_chaos.get": [[40, 54], ["params.update", "int", "int", "loaders.chaos.ChaosLoader", "loaders.chaos.ChaosLoader"], "function", ["None"], ["def", "get", "(", ")", ":", "\n", "    ", "shp", "=", "params", "[", "'input_shape'", "]", "\n", "ratio", "=", "params", "[", "'image_downsample'", "]", "\n", "shp", "=", "(", "int", "(", "shp", "[", "0", "]", "/", "ratio", ")", ",", "int", "(", "shp", "[", "1", "]", "/", "ratio", ")", ",", "shp", "[", "2", "]", ")", "\n", "\n", "params", "[", "'input_shape'", "]", "=", "shp", "\n", "params", "[", "'num_masks'", "]", "=", "chaos", ".", "ChaosLoader", "(", ")", ".", "num_masks", "\n", "\n", "d_mask_params", "[", "'input_shape'", "]", "=", "(", "shp", "[", ":", "-", "1", "]", ")", "+", "(", "chaos", ".", "ChaosLoader", "(", ")", ".", "num_masks", ",", ")", "\n", "\n", "anatomy_encoder_params", "[", "'input_shape'", "]", "=", "shp", "\n", "anatomy_encoder_params", "[", "'output_shape'", "]", "=", "(", "shp", "[", ":", "-", "1", "]", ")", "+", "(", "anatomy_encoder_params", "[", "'out_channels'", "]", ",", ")", "\n", "params", ".", "update", "(", "{", "'anatomy_encoder'", ":", "anatomy_encoder_params", ",", "'d_mask_params'", ":", "d_mask_params", "}", ")", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.configuration.dafnet_spade_config_chaos.get": [[43, 60], ["params.update", "int", "int", "loaders.chaos.ChaosLoader", "loaders.chaos.ChaosLoader"], "function", ["None"], ["def", "get", "(", ")", ":", "\n", "    ", "shp", "=", "params", "[", "'input_shape'", "]", "\n", "ratio", "=", "params", "[", "'image_downsample'", "]", "\n", "shp", "=", "(", "int", "(", "shp", "[", "0", "]", "/", "ratio", ")", ",", "int", "(", "shp", "[", "1", "]", "/", "ratio", ")", ",", "shp", "[", "2", "]", ")", "\n", "\n", "params", "[", "'input_shape'", "]", "=", "shp", "\n", "params", "[", "'num_masks'", "]", "=", "chaos", ".", "ChaosLoader", "(", ")", ".", "num_masks", "\n", "\n", "d_mask_params", "[", "'input_shape'", "]", "=", "(", "shp", "[", ":", "-", "1", "]", ")", "+", "(", "chaos", ".", "ChaosLoader", "(", ")", ".", "num_masks", ",", ")", "\n", "d_image_params", "[", "'input_shape'", "]", "=", "shp", "\n", "\n", "anatomy_encoder_params", "[", "'input_shape'", "]", "=", "shp", "\n", "anatomy_encoder_params", "[", "'output_shape'", "]", "=", "(", "shp", "[", ":", "-", "1", "]", ")", "+", "(", "anatomy_encoder_params", "[", "'out_channels'", "]", ",", ")", "\n", "\n", "params", ".", "update", "(", "{", "'anatomy_encoder'", ":", "anatomy_encoder_params", ",", "'d_mask_params'", ":", "d_mask_params", ",", "\n", "'d_image_params'", ":", "d_image_params", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.configuration.dafnet_config_chaos.get": [[43, 60], ["params.update", "int", "int", "loaders.chaos.ChaosLoader", "loaders.chaos.ChaosLoader"], "function", ["None"], ["def", "get", "(", ")", ":", "\n", "    ", "shp", "=", "params", "[", "'input_shape'", "]", "\n", "ratio", "=", "params", "[", "'image_downsample'", "]", "\n", "shp", "=", "(", "int", "(", "shp", "[", "0", "]", "/", "ratio", ")", ",", "int", "(", "shp", "[", "1", "]", "/", "ratio", ")", ",", "shp", "[", "2", "]", ")", "\n", "\n", "params", "[", "'input_shape'", "]", "=", "shp", "\n", "params", "[", "'num_masks'", "]", "=", "chaos", ".", "ChaosLoader", "(", ")", ".", "num_masks", "\n", "\n", "d_mask_params", "[", "'input_shape'", "]", "=", "(", "shp", "[", ":", "-", "1", "]", ")", "+", "(", "chaos", ".", "ChaosLoader", "(", ")", ".", "num_masks", ",", ")", "\n", "d_image_params", "[", "'input_shape'", "]", "=", "shp", "\n", "\n", "anatomy_encoder_params", "[", "'input_shape'", "]", "=", "shp", "\n", "anatomy_encoder_params", "[", "'output_shape'", "]", "=", "(", "shp", "[", ":", "-", "1", "]", ")", "+", "(", "anatomy_encoder_params", "[", "'out_channels'", "]", ",", ")", "\n", "\n", "params", ".", "update", "(", "{", "'anatomy_encoder'", ":", "anatomy_encoder_params", ",", "\n", "'d_mask_params'", ":", "d_mask_params", ",", "'d_image_params'", ":", "d_image_params", "}", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.__init__": [[13, 15], ["models.basenet.BaseNet.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.build": [[16, 37], ["keras.Input", "range", "keras.Model", "keras.layers.Conv2D", "keras.layers.LeakyReLU", "discriminator.Discriminator._downsample_block", "keras.layers.Flatten", "keras.layers.Dense", "hasattr"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator._downsample_block"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "inp_shape", "=", "self", ".", "conf", ".", "input_shape", "\n", "name", "=", "self", ".", "conf", ".", "name", "\n", "f", "=", "self", ".", "conf", ".", "filters", "\n", "downsample_blocks", "=", "3", "if", "not", "hasattr", "(", "self", ".", "conf", ",", "'downsample_blocks'", ")", "else", "self", ".", "conf", ".", "downsample_blocks", "\n", "assert", "downsample_blocks", ">", "1", ",", "downsample_blocks", "\n", "\n", "d_input", "=", "Input", "(", "inp_shape", ")", "\n", "l", "=", "Conv2D", "(", "f", ",", "4", ",", "strides", "=", "2", ",", "kernel_initializer", "=", "\"he_normal\"", ")", "(", "d_input", ")", "\n", "l", "=", "LeakyReLU", "(", "0.2", ")", "(", "l", ")", "\n", "\n", "for", "i", "in", "range", "(", "downsample_blocks", ")", ":", "\n", "            ", "s", "=", "1", "if", "i", "==", "downsample_blocks", "-", "1", "else", "2", "\n", "spectral_params", "=", "f", "*", "(", "2", "**", "i", ")", "\n", "l", "=", "self", ".", "_downsample_block", "(", "l", ",", "f", "*", "2", "*", "(", "2", "**", "i", ")", ",", "s", ",", "spectral_params", ")", "\n", "\n", "", "l", "=", "Flatten", "(", ")", "(", "l", ")", "\n", "l", "=", "Dense", "(", "1", ",", "activation", "=", "\"linear\"", ")", "(", "l", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "d_input", ",", "l", ",", "name", "=", "name", ")", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator._downsample_block": [[38, 42], ["keras.layers.Conv2D", "keras.layers.LeakyReLU", "layers.spectralnorm.Spectral"], "methods", ["None"], ["", "def", "_downsample_block", "(", "self", ",", "l0", ",", "f", ",", "stride", ",", "spectral_params", ",", "name", "=", "''", ")", ":", "\n", "        ", "l", "=", "Conv2D", "(", "f", ",", "4", ",", "strides", "=", "stride", ",", "kernel_initializer", "=", "\"he_normal\"", ",", "\n", "kernel_regularizer", "=", "Spectral", "(", "spectral_params", "*", "4", "*", "4", ",", "10.", ")", ",", "name", "=", "name", ")", "(", "l0", ")", "\n", "return", "LeakyReLU", "(", "0.2", ")", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile": [[43, 46], ["discriminator.Discriminator.model.compile", "keras.optimizers.Adam"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile"], ["", "def", "compile", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "model", "is", "not", "None", ",", "'Model has not been built'", "\n", "self", ".", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "lr", "=", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "'mse'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.__init__": [[19, 40], ["models.mmsdnet.MMSDNet.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "super", "(", "DAFNet", ",", "self", ")", ".", "__init__", "(", "conf", ")", "\n", "\n", "self", ".", "D_Mask", "=", "None", "# Mask Discriminator", "\n", "self", ".", "D_Image1", "=", "None", "# Image Discriminator for modality 1", "\n", "self", ".", "D_Image2", "=", "None", "# Image Discriminator for modality 2", "\n", "self", ".", "Encoders_Anatomy", "=", "None", "# list of anatomy encoders for every modality", "\n", "self", ".", "Enc_Modality", "=", "None", "# Modality Encoder", "\n", "self", ".", "Enc_Modality_mu", "=", "None", "# The mean value of the Modality Encoder prediction", "\n", "self", ".", "Anatomy_Fuser", "=", "None", "# Anatomy Fuser that deforms and fused anatomies", "\n", "self", ".", "Segmentor", "=", "None", "# Segmentation network", "\n", "self", ".", "Decoder", "=", "None", "# Decoder network", "\n", "self", ".", "Balancer", "=", "None", "# Model that calculates weighs similarity of anatomies", "\n", "\n", "# Trainers", "\n", "self", ".", "D_Mask_trainer", "=", "None", "# Trainer for mask discriminator", "\n", "self", ".", "D_Image1_trainer", "=", "None", "# Trainer for image modality1 discriminator", "\n", "self", ".", "D_Image2_trainer", "=", "None", "# Trainer for image modality2 discriminator", "\n", "self", ".", "unsupervised_trainer", "=", "None", "# Trainer when having unlabelled data", "\n", "self", ".", "supervised_trainer", "=", "None", "# Trainer when using data with labels.", "\n", "self", ".", "Z_Regressor", "=", "None", "# Trainer for reconstructing a sampled Z", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build": [[41, 53], ["dafnet.DAFNet.build_mask_discriminator", "dafnet.DAFNet.build_image_discriminator1", "dafnet.DAFNet.build_image_discriminator2", "dafnet.DAFNet.build_generators", "dafnet.DAFNet.load_models", "log.warning", "traceback.print_exc"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_mask_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_image_discriminator1", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_image_discriminator2", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_generators", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.load_models"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "build_mask_discriminator", "(", ")", "\n", "self", ".", "build_image_discriminator1", "(", ")", "\n", "self", ".", "build_image_discriminator2", "(", ")", "\n", "\n", "self", ".", "build_generators", "(", ")", "\n", "try", ":", "\n", "            ", "self", ".", "load_models", "(", ")", "\n", "", "except", ":", "\n", "            ", "log", ".", "warning", "(", "'No models found'", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.load_models": [[54, 74], ["log.info", "dafnet.DAFNet.D_Mask.load_weights", "dafnet.DAFNet.D_Image1.load_weights", "dafnet.DAFNet.D_Image2.load_weights", "dafnet.DAFNet.Encoders_Anatomy[].load_weights", "dafnet.DAFNet.Encoders_Anatomy[].load_weights", "dafnet.DAFNet.Enc_Modality.load_weights", "dafnet.DAFNet.Anatomy_Fuser.load_weights", "dafnet.DAFNet.Segmentor.load_weights", "dafnet.DAFNet.Decoder.load_weights", "dafnet.DAFNet.build_trainers", "dafnet.DAFNet.Balancer.load_weights"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_trainers"], ["", "", "def", "load_models", "(", "self", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Loading trained models from file'", ")", "\n", "\n", "model_folder", "=", "self", ".", "conf", ".", "folder", "+", "'/models/'", "\n", "self", ".", "D_Mask", ".", "load_weights", "(", "model_folder", "+", "'/D_Mask'", ")", "\n", "self", ".", "D_Image1", ".", "load_weights", "(", "model_folder", "+", "'/D_Image1'", ")", "\n", "self", ".", "D_Image2", ".", "load_weights", "(", "model_folder", "+", "'/D_Image2'", ")", "\n", "\n", "self", ".", "Encoders_Anatomy", "[", "0", "]", ".", "load_weights", "(", "model_folder", "+", "'Enc_Anatomy1'", ")", "\n", "self", ".", "Encoders_Anatomy", "[", "1", "]", ".", "load_weights", "(", "model_folder", "+", "'Enc_Anatomy2'", ")", "\n", "self", ".", "Enc_Modality", ".", "load_weights", "(", "model_folder", "+", "'Enc_Modality'", ")", "\n", "self", ".", "Anatomy_Fuser", ".", "load_weights", "(", "model_folder", "+", "'Anatomy_Fuser'", ")", "\n", "self", ".", "Segmentor", ".", "load_weights", "(", "model_folder", "+", "'Segmentor'", ")", "\n", "self", ".", "Decoder", ".", "load_weights", "(", "model_folder", "+", "'Decoder'", ")", "\n", "try", ":", "\n", "            ", "self", ".", "Balancer", ".", "load_weights", "(", "model_folder", "+", "'Balancer'", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "build_trainers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_image_discriminator1": [[75, 95], ["models.discriminator.Discriminator", "models.discriminator.Discriminator.build", "log.info", "models.discriminator.Discriminator.model.summary", "keras.Input", "keras.Input", "dafnet.DAFNet.D_Image1", "dafnet.DAFNet.D_Image1", "keras.Model", "dafnet.DAFNet.D_Image1_trainer.compile", "dafnet.DAFNet.D_Image1_trainer.summary", "keras.optimizers.Adam"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile"], ["", "def", "build_image_discriminator1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Build a discriminator for images\n        \"\"\"", "\n", "params1", "=", "self", ".", "conf", ".", "d_image_params", "\n", "params1", "[", "'name'", "]", "=", "'D_Image1'", "\n", "D", "=", "Discriminator", "(", "params1", ")", "\n", "D", ".", "build", "(", ")", "\n", "log", ".", "info", "(", "'Image Discriminator D_I'", ")", "\n", "D", ".", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "self", ".", "D_Image1", "=", "D", ".", "model", "\n", "\n", "real_x", "=", "Input", "(", "self", ".", "conf", ".", "d_image_params", ".", "input_shape", ")", "\n", "fake_x", "=", "Input", "(", "self", ".", "conf", ".", "d_image_params", ".", "input_shape", ")", "\n", "real", "=", "self", ".", "D_Image1", "(", "real_x", ")", "\n", "fake", "=", "self", ".", "D_Image1", "(", "fake_x", ")", "\n", "\n", "self", ".", "D_Image1_trainer", "=", "Model", "(", "[", "real_x", ",", "fake_x", "]", ",", "[", "real", ",", "fake", "]", ",", "name", "=", "'D_Image1_trainer'", ")", "\n", "self", ".", "D_Image1_trainer", ".", "compile", "(", "Adam", "(", "lr", "=", "self", ".", "conf", ".", "d_image_params", ".", "lr", ")", ",", "loss", "=", "'mse'", ")", "\n", "self", ".", "D_Image1_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_image_discriminator2": [[96, 116], ["models.discriminator.Discriminator", "models.discriminator.Discriminator.build", "log.info", "models.discriminator.Discriminator.model.summary", "keras.Input", "keras.Input", "dafnet.DAFNet.D_Image2", "dafnet.DAFNet.D_Image2", "keras.Model", "dafnet.DAFNet.D_Image2_trainer.compile", "dafnet.DAFNet.D_Image2_trainer.summary", "keras.optimizers.Adam"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile"], ["", "def", "build_image_discriminator2", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Build a discriminator for images\n        \"\"\"", "\n", "params2", "=", "self", ".", "conf", ".", "d_image_params", "\n", "params2", "[", "'name'", "]", "=", "'D_Image2'", "\n", "D", "=", "Discriminator", "(", "params2", ")", "\n", "D", ".", "build", "(", ")", "\n", "log", ".", "info", "(", "'Image Discriminator D_I2'", ")", "\n", "D", ".", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "self", ".", "D_Image2", "=", "D", ".", "model", "\n", "\n", "real_x", "=", "Input", "(", "self", ".", "conf", ".", "d_image_params", ".", "input_shape", ")", "\n", "fake_x", "=", "Input", "(", "self", ".", "conf", ".", "d_image_params", ".", "input_shape", ")", "\n", "real", "=", "self", ".", "D_Image2", "(", "real_x", ")", "\n", "fake", "=", "self", ".", "D_Image2", "(", "fake_x", ")", "\n", "\n", "self", ".", "D_Image2_trainer", "=", "Model", "(", "[", "real_x", ",", "fake_x", "]", ",", "[", "real", ",", "fake", "]", ",", "name", "=", "'D_Image2_trainer'", ")", "\n", "self", ".", "D_Image2_trainer", ".", "compile", "(", "Adam", "(", "lr", "=", "self", ".", "conf", ".", "d_image_params", ".", "lr", ")", ",", "loss", "=", "'mse'", ")", "\n", "self", ".", "D_Image2_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_generators": [[117, 132], ["utils.sdnet_utils.make_trainable", "utils.sdnet_utils.make_trainable", "utils.sdnet_utils.make_trainable", "model_components.anatomy_encoder.AnatomyEncoders().build", "model_components.anatomy_fuser.build", "model_components.modality_encoder.build", "keras.Model", "model_components.segmentor.build", "model_components.decoder.build", "model_components.balancer.build", "dafnet.DAFNet.build_trainers", "model_components.anatomy_encoder.AnatomyEncoders", "dafnet.DAFNet.Enc_Modality.get_layer"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.make_trainable", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.make_trainable", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.make_trainable", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_trainers"], ["", "def", "build_generators", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "D_Mask", "is", "not", "None", ",", "'Discriminator has not been built yet'", "\n", "make_trainable", "(", "self", ".", "D_Mask", ",", "False", ")", "\n", "make_trainable", "(", "self", ".", "D_Image1", ",", "False", ")", "\n", "make_trainable", "(", "self", ".", "D_Image2", ",", "False", ")", "\n", "\n", "self", ".", "Encoders_Anatomy", "=", "AnatomyEncoders", "(", "self", ".", "modalities", ")", ".", "build", "(", "self", ".", "conf", ".", "anatomy_encoder", ")", "\n", "self", ".", "Anatomy_Fuser", "=", "anatomy_fuser", ".", "build", "(", "self", ".", "conf", ")", "\n", "self", ".", "Enc_Modality", "=", "modality_encoder", ".", "build", "(", "self", ".", "conf", ")", "\n", "self", ".", "Enc_Modality_mu", "=", "Model", "(", "self", ".", "Enc_Modality", ".", "inputs", ",", "self", ".", "Enc_Modality", ".", "get_layer", "(", "'z_mean'", ")", ".", "output", ")", "\n", "self", ".", "Segmentor", "=", "segmentor", ".", "build", "(", "self", ".", "conf", ")", "\n", "self", ".", "Decoder", "=", "decoder", ".", "build", "(", "self", ".", "conf", ")", "\n", "self", ".", "Balancer", "=", "balancer", ".", "build", "(", "self", ".", "conf", ")", "\n", "\n", "self", ".", "build_trainers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_trainers": [[133, 139], ["dafnet.DAFNet.build_z_regressor", "dafnet.DAFNet.build_trainers_expertpairs", "dafnet.DAFNet.build_trainers_automatedpairs"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_z_regressor", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_trainers_expertpairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_trainers_automatedpairs"], ["", "def", "build_trainers", "(", "self", ")", ":", "\n", "        ", "self", ".", "build_z_regressor", "(", ")", "\n", "if", "not", "self", ".", "conf", ".", "automatedpairing", ":", "\n", "            ", "self", ".", "build_trainers_expertpairs", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "build_trainers_automatedpairs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_trainers_expertpairs": [[140, 162], ["dafnet.DAFNet.get_params_expert_pairing", "keras.Model", "log.info", "dafnet.DAFNet.unsupervised_trainer.summary", "dafnet.DAFNet.unsupervised_trainer.compile", "dafnet.DAFNet.get_params_expert_pairing", "keras.Model", "log.info", "dafnet.DAFNet.supervised_trainer.summary", "dafnet.DAFNet.supervised_trainer.compile", "costs.make_combined_dice_bce", "keras.optimizers.Adam", "keras.optimizers.Adam"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.get_params_expert_pairing", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.get_params_expert_pairing", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_combined_dice_bce"], ["", "", "def", "build_trainers_expertpairs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Build trainer models for unsupervised and supervised learning, when multimodal data are expertly paired.\n        This assumes two modalities\n        \"\"\"", "\n", "losses", "=", "{", "'Segmentor'", ":", "costs", ".", "make_combined_dice_bce", "(", "self", ".", "loader", ".", "num_masks", ")", ",", "'D_Mask'", ":", "'mse'", ",", "'Decoder'", ":", "'mae'", ",", "\n", "'D_Image1'", ":", "'mse'", ",", "'D_Image2'", ":", "'mse'", ",", "'Enc_Modality'", ":", "costs", ".", "ypred", ",", "'ZReconstruct'", ":", "'mae'", "}", "\n", "loss_weights", "=", "{", "'Segmentor'", ":", "self", ".", "conf", ".", "w_sup_M", ",", "'D_Mask'", ":", "self", ".", "conf", ".", "w_adv_M", ",", "'Decoder'", ":", "self", ".", "conf", ".", "w_rec_X", ",", "\n", "'D_Image1'", ":", "self", ".", "conf", ".", "w_adv_X", ",", "'D_Image2'", ":", "self", ".", "conf", ".", "w_adv_X", ",", "'Enc_Modality'", ":", "self", ".", "conf", ".", "w_kl", ",", "\n", "'ZReconstruct'", ":", "self", ".", "conf", ".", "w_rec_Z", "}", "\n", "\n", "all_inputs", ",", "all_outputs", "=", "self", ".", "get_params_expert_pairing", "(", "supervised", "=", "False", ")", "\n", "self", ".", "unsupervised_trainer", "=", "Model", "(", "inputs", "=", "all_inputs", ",", "outputs", "=", "all_outputs", ")", "\n", "log", ".", "info", "(", "'Unsupervised model trainer'", ")", "\n", "self", ".", "unsupervised_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "self", ".", "unsupervised_trainer", ".", "compile", "(", "Adam", "(", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "losses", ",", "loss_weights", "=", "loss_weights", ")", "\n", "\n", "all_inputs", ",", "all_outputs", "=", "self", ".", "get_params_expert_pairing", "(", "supervised", "=", "True", ")", "\n", "self", ".", "supervised_trainer", "=", "Model", "(", "inputs", "=", "all_inputs", ",", "outputs", "=", "all_outputs", ")", "\n", "log", ".", "info", "(", "'Supervised model trainer'", ")", "\n", "self", ".", "supervised_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "self", ".", "supervised_trainer", ".", "compile", "(", "Adam", "(", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "losses", ",", "loss_weights", "=", "loss_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.get_params_expert_pairing": [[163, 223], ["keras.Input", "keras.Input", "dafnet.DAFNet.Enc_Modality", "dafnet.DAFNet.Enc_Modality", "dafnet.DAFNet.Segmentor", "dafnet.DAFNet.Segmentor", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.D_Mask", "dafnet.DAFNet.D_Mask", "dafnet.DAFNet.D_Image1", "dafnet.DAFNet.D_Image2", "dafnet.DAFNet.Anatomy_Fuser", "dafnet.DAFNet.Anatomy_Fuser", "dafnet.DAFNet.Segmentor", "dafnet.DAFNet.Segmentor", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.D_Mask", "dafnet.DAFNet.D_Mask", "dafnet.DAFNet.D_Image2", "dafnet.DAFNet.D_Image1", "keras.Input", "keras.Input", "dafnet.DAFNet.Z_Regressor", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.Lambda"], "methods", ["None"], ["", "def", "get_params_expert_pairing", "(", "self", ",", "supervised", ")", ":", "\n", "        ", "\"\"\"\n        Connect the DAFNet components for supervised or unsupervised training\n        :return: a list of inputs and outputs\n        \"\"\"", "\n", "# inputs", "\n", "x1", "=", "Input", "(", "shape", "=", "self", ".", "conf", ".", "input_shape", ")", "\n", "x2", "=", "Input", "(", "shape", "=", "self", ".", "conf", ".", "input_shape", ")", "\n", "\n", "# encode", "\n", "s1", "=", "self", ".", "Encoders_Anatomy", "[", "0", "]", "(", "x1", ")", "\n", "s2", "=", "self", ".", "Encoders_Anatomy", "[", "1", "]", "(", "x2", ")", "\n", "z1", ",", "kl1", "=", "self", ".", "Enc_Modality", "(", "[", "s1", ",", "x1", "]", ")", "\n", "z2", ",", "kl2", "=", "self", ".", "Enc_Modality", "(", "[", "s2", ",", "x2", "]", ")", "\n", "\n", "# segment", "\n", "m1", "=", "self", ".", "Segmentor", "(", "s1", ")", "\n", "m2", "=", "self", ".", "Segmentor", "(", "s2", ")", "\n", "\n", "# decoder", "\n", "y1", "=", "self", ".", "Decoder", "(", "[", "s1", ",", "z1", "]", ")", "\n", "y2", "=", "self", ".", "Decoder", "(", "[", "s2", ",", "z2", "]", ")", "\n", "\n", "# GANs", "\n", "adv_m1", "=", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m1", ")", ")", "\n", "adv_m2", "=", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m2", ")", ")", "\n", "adv_y1", "=", "self", ".", "D_Image1", "(", "y1", ")", "\n", "adv_y2", "=", "self", ".", "D_Image2", "(", "y2", ")", "\n", "\n", "# deform and fuse", "\n", "s1_def", ",", "_", "=", "self", ".", "Anatomy_Fuser", "(", "[", "s1", ",", "s2", "]", ")", "\n", "s2_def", ",", "_", "=", "self", ".", "Anatomy_Fuser", "(", "[", "s2", ",", "s1", "]", ")", "\n", "\n", "# segment", "\n", "m2_s1_def", "=", "self", ".", "Segmentor", "(", "s1_def", ")", "\n", "m1_s2_def", "=", "self", ".", "Segmentor", "(", "s2_def", ")", "\n", "\n", "# decoder (cross-reconstruction)", "\n", "y2_s1_def", "=", "self", ".", "Decoder", "(", "[", "s1_def", ",", "z2", "]", ")", "\n", "y1_s2_def", "=", "self", ".", "Decoder", "(", "[", "s2_def", ",", "z1", "]", ")", "\n", "\n", "# GANs", "\n", "adv_m2_s1_def", "=", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m2_s1_def", ")", ")", "\n", "adv_m1_s2_def", "=", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m1_s2_def", ")", ")", "\n", "adv_y2_s1_def", "=", "self", ".", "D_Image2", "(", "y2_s1_def", ")", "\n", "adv_y1_s2_def", "=", "self", ".", "D_Image1", "(", "y1_s2_def", ")", "\n", "\n", "# Z-Regressor", "\n", "z1_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "conf", ".", "num_z", ",", ")", ")", "\n", "z2_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "conf", ".", "num_z", ",", ")", ")", "\n", "[", "z1_rec", ",", "z2_rec", "]", "=", "self", ".", "Z_Regressor", "(", "[", "s1", ",", "s2", ",", "z1_input", ",", "z2_input", "]", ")", "\n", "\n", "# inputs / outputs", "\n", "all_inputs", "=", "[", "x1", ",", "x2", ",", "z1_input", ",", "z2_input", "]", "\n", "all_outputs", "=", "[", "m1", ",", "m2", ",", "m1_s2_def", ",", "m2_s1_def", "]", "if", "supervised", "else", "[", "m1", ",", "m1_s2_def", "]", "\n", "all_outputs", "+=", "[", "adv_m1", ",", "adv_m2", ",", "adv_m1_s2_def", ",", "adv_m2_s1_def", "]", "+", "[", "y1", ",", "y2", ",", "y1_s2_def", ",", "y2_s1_def", "]", "+", "[", "adv_y1", ",", "adv_y2", ",", "adv_y1_s2_def", ",", "adv_y2_s1_def", "]", "+", "[", "kl1", ",", "kl2", ",", "z1_rec", ",", "z2_rec", "]", "\n", "return", "all_inputs", ",", "all_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_trainers_automatedpairs": [[224, 247], ["dafnet.DAFNet.get_params_automated_pairing", "keras.Model", "log.info", "dafnet.DAFNet.unsupervised_trainer.summary", "dafnet.DAFNet.unsupervised_trainer.compile", "dafnet.DAFNet.get_params_automated_pairing", "keras.Model", "log.info", "dafnet.DAFNet.supervised_trainer.summary", "dafnet.DAFNet.supervised_trainer.compile", "costs.make_combined_dice_bce", "keras.optimizers.Adam", "keras.optimizers.Adam"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.get_params_automated_pairing", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.get_params_automated_pairing", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_combined_dice_bce"], ["", "def", "build_trainers_automatedpairs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Build trainer models for unsupervised and supervised learning, when multimodal data are automatically paired.\n        This assumes two modalities\n        \"\"\"", "\n", "losses", "=", "{", "'Segmentor'", ":", "costs", ".", "make_combined_dice_bce", "(", "self", ".", "loader", ".", "num_masks", ")", ",", "'SegmentorDef'", ":", "costs", ".", "ypred", ",", "\n", "'D_Mask'", ":", "'mse'", ",", "'Decoder'", ":", "'mae'", ",", "'DecoderDef'", ":", "costs", ".", "ypred", ",", "\n", "'D_Image1'", ":", "'mse'", ",", "'D_Image2'", ":", "'mse'", ",", "'Enc_Modality'", ":", "costs", ".", "ypred", ",", "'ZReconstruct'", ":", "'mae'", "}", "\n", "loss_weights", "=", "{", "'Segmentor'", ":", "self", ".", "conf", ".", "w_sup_M", ",", "'SegmentorDef'", ":", "self", ".", "conf", ".", "w_sup_M", ",", "'D_Mask'", ":", "self", ".", "conf", ".", "w_adv_M", ",", "\n", "'Decoder'", ":", "self", ".", "conf", ".", "w_rec_X", ",", "'DecoderDef'", ":", "self", ".", "conf", ".", "w_rec_X", ",", "'D_Image1'", ":", "self", ".", "conf", ".", "w_adv_X", ",", "\n", "'D_Image2'", ":", "self", ".", "conf", ".", "w_adv_X", ",", "'Enc_Modality'", ":", "self", ".", "conf", ".", "w_kl", ",", "'ZReconstruct'", ":", "self", ".", "conf", ".", "w_rec_Z", "}", "\n", "\n", "all_inputs", ",", "all_outputs", "=", "self", ".", "get_params_automated_pairing", "(", "supervised", "=", "False", ")", "\n", "self", ".", "unsupervised_trainer", "=", "Model", "(", "inputs", "=", "all_inputs", ",", "outputs", "=", "all_outputs", ")", "\n", "log", ".", "info", "(", "'Unupervised model trainer'", ")", "\n", "self", ".", "unsupervised_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "self", ".", "unsupervised_trainer", ".", "compile", "(", "Adam", "(", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "losses", ",", "loss_weights", "=", "loss_weights", ")", "\n", "\n", "all_inputs", ",", "all_outputs", "=", "self", ".", "get_params_automated_pairing", "(", "supervised", "=", "True", ")", "\n", "self", ".", "supervised_trainer", "=", "Model", "(", "inputs", "=", "all_inputs", ",", "outputs", "=", "all_outputs", ")", "\n", "log", ".", "info", "(", "'Supervised model trainer'", ")", "\n", "self", ".", "supervised_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "self", ".", "supervised_trainer", ".", "compile", "(", "Adam", "(", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "losses", ",", "loss_weights", "=", "loss_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.get_params_automated_pairing": [[248, 335], ["keras.Input", "dafnet.DAFNet.Enc_Modality", "dafnet.DAFNet.Enc_Modality", "dafnet.DAFNet.Segmentor", "dafnet.DAFNet.Segmentor", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.D_Mask", "dafnet.DAFNet.D_Mask", "dafnet.DAFNet.D_Image1", "dafnet.DAFNet.D_Image2", "dafnet.DAFNet.calculate_weights", "dafnet.DAFNet.calculate_weights", "keras.layers.Lambda", "keras.layers.Add", "keras.layers.Add.", "keras.layers.Add.", "keras.layers.Add", "keras.layers.Lambda", "keras.layers.Add.", "dafnet.DAFNet.D_Mask", "dafnet.DAFNet.D_Mask", "dafnet.DAFNet.D_Image2", "dafnet.DAFNet.D_Image1", "keras.Input", "keras.Input", "dafnet.DAFNet.Z_Regressor", "keras.Input", "keras.Input", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.Segmentor", "dafnet.DAFNet.Segmentor", "keras.Input", "keras.layers.Add.", "range", "range", "keras.layers.Lambda", "keras.layers.Lambda", "dafnet.DAFNet.Anatomy_Fuser", "dafnet.DAFNet.Anatomy_Fuser", "costs.mae_single_input", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.Multiply", "zip", "keras.layers.Multiply", "zip", "costs.make_combined_dice_bce_perbatch", "keras.layers.Multiply", "zip", "keras.layers.Lambda.", "keras.layers.Lambda.", "keras.layers.Lambda.", "keras.layers.Multiply", "zip", "keras.layers.Lambda."], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.calculate_weights", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.calculate_weights", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.mae_single_input", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_combined_dice_bce_perbatch"], ["", "def", "get_params_automated_pairing", "(", "self", ",", "supervised", ")", ":", "\n", "        ", "\"\"\"\n        Connect the DAFNet components for supervised or unsupervised training\n        :return: a list of inputs and outputs\n        \"\"\"", "\n", "# inputs", "\n", "x1_lst", "=", "[", "Input", "(", "shape", "=", "self", ".", "conf", ".", "input_shape", ")", "for", "_", "in", "range", "(", "self", ".", "conf", ".", "n_pairs", ")", "]", "\n", "x2_lst", "=", "[", "Input", "(", "shape", "=", "self", ".", "conf", ".", "input_shape", ")", "for", "_", "in", "range", "(", "self", ".", "conf", ".", "n_pairs", ")", "]", "\n", "m1_input", "=", "Input", "(", "shape", "=", "self", ".", "conf", ".", "input_shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "conf", ".", "num_masks", "+", "1", "]", ")", "\n", "x1", "=", "x1_lst", "[", "0", "]", "\n", "x2", "=", "x2_lst", "[", "0", "]", "\n", "\n", "# encode", "\n", "s1_lst", "=", "[", "self", ".", "Encoders_Anatomy", "[", "0", "]", "(", "x", ")", "for", "x", "in", "x1_lst", "]", "\n", "s2_lst", "=", "[", "self", ".", "Encoders_Anatomy", "[", "1", "]", "(", "x", ")", "for", "x", "in", "x2_lst", "]", "\n", "s1", "=", "s1_lst", "[", "0", "]", "\n", "s2", "=", "s2_lst", "[", "0", "]", "\n", "z1", ",", "kl1", "=", "self", ".", "Enc_Modality", "(", "[", "s1", ",", "x1", "]", ")", "\n", "z2", ",", "kl2", "=", "self", ".", "Enc_Modality", "(", "[", "s2", ",", "x2", "]", ")", "\n", "\n", "# segment", "\n", "m1", "=", "self", ".", "Segmentor", "(", "s1", ")", "\n", "m2", "=", "self", ".", "Segmentor", "(", "s2", ")", "\n", "\n", "# decode", "\n", "y1", "=", "self", ".", "Decoder", "(", "[", "s1", ",", "z1", "]", ")", "\n", "y2", "=", "self", ".", "Decoder", "(", "[", "s2", ",", "z2", "]", ")", "\n", "\n", "# GANs", "\n", "adv_m1", "=", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m1", ")", ")", "\n", "adv_m2", "=", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m2", ")", ")", "\n", "adv_y1", "=", "self", ".", "D_Image1", "(", "y1", ")", "\n", "adv_y2", "=", "self", ".", "D_Image2", "(", "y2", ")", "\n", "\n", "# deform and fuse", "\n", "s1_def_lst", "=", "[", "self", ".", "Anatomy_Fuser", "(", "[", "s1_i", ",", "s2", "]", ")", "[", "0", "]", "for", "s1_i", "in", "s1_lst", "]", "\n", "w1_def_lst", "=", "self", ".", "calculate_weights", "(", "[", "s2", "]", "+", "s1_def_lst", ")", "\n", "\n", "s2_def_lst", "=", "[", "self", ".", "Anatomy_Fuser", "(", "[", "s2_i", ",", "s1", "]", ")", "[", "0", "]", "for", "s2_i", "in", "s2_lst", "]", "\n", "w2_def_lst", "=", "self", ".", "calculate_weights", "(", "[", "s1", "]", "+", "s2_def_lst", ")", "\n", "\n", "# decoder (cross-reconstruction)", "\n", "DecoderLoss", "=", "Lambda", "(", "lambda", "x", ":", "costs", ".", "mae_single_input", "(", "x", ")", ")", "\n", "DecoderDef", "=", "Add", "(", "name", "=", "'DecoderDef'", ")", "\n", "\n", "y2_s1_def_lst", "=", "[", "self", ".", "Decoder", "(", "[", "s1_def", ",", "z2", "]", ")", "for", "s1_def", "in", "s1_def_lst", "]", "\n", "y1_s2_def_lst", "=", "[", "self", ".", "Decoder", "(", "[", "s2_def", ",", "z1", "]", ")", "for", "s2_def", "in", "s2_def_lst", "]", "\n", "y2_s1_def", "=", "DecoderDef", "(", "[", "Multiply", "(", ")", "(", "[", "w", ",", "DecoderLoss", "(", "[", "x2", ",", "y2_s1_def", "]", ")", "]", ")", "\n", "for", "w", ",", "y2_s1_def", "in", "zip", "(", "w1_def_lst", ",", "y2_s1_def_lst", ")", "]", ")", "\n", "y1_s2_def", "=", "DecoderDef", "(", "[", "Multiply", "(", ")", "(", "[", "w", ",", "DecoderLoss", "(", "[", "x1", ",", "y1_s2_def", "]", ")", "]", ")", "\n", "for", "w", ",", "y1_s2_def", "in", "zip", "(", "w2_def_lst", ",", "y1_s2_def_lst", ")", "]", ")", "\n", "\n", "# segment", "\n", "SegmentorDef", "=", "Add", "(", "name", "=", "'SegmentorDef'", ")", "\n", "SegmentorLoss", "=", "Lambda", "(", "lambda", "x", ":", "costs", ".", "make_combined_dice_bce_perbatch", "(", "self", ".", "loader", ".", "num_masks", ")", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "\n", "\n", "m1_s2_def_lst", "=", "[", "self", ".", "Segmentor", "(", "s2_def", ")", "for", "s2_def", "in", "s2_def_lst", "]", "\n", "m1_s2_def", "=", "SegmentorDef", "(", "[", "Multiply", "(", ")", "(", "[", "w", ",", "SegmentorLoss", "(", "[", "m1_input", ",", "m1_s2_def", "]", ")", "]", ")", "\n", "for", "w", ",", "m1_s2_def", "in", "zip", "(", "w2_def_lst", ",", "m1_s2_def_lst", ")", "]", ")", "\n", "m2_s1_def_lst", "=", "[", "self", ".", "Segmentor", "(", "s1_def", ")", "for", "s1_def", "in", "s1_def_lst", "]", "\n", "\n", "if", "supervised", ":", "\n", "            ", "m2_input", "=", "Input", "(", "shape", "=", "self", ".", "conf", ".", "input_shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "conf", ".", "num_masks", "+", "1", "]", ")", "\n", "m2_s1_def", "=", "SegmentorDef", "(", "[", "Multiply", "(", ")", "(", "[", "w", ",", "SegmentorLoss", "(", "[", "m2_input", ",", "m2_s1_def", "]", ")", "]", ")", "\n", "for", "w", ",", "m2_s1_def", "in", "zip", "(", "w1_def_lst", ",", "m2_s1_def_lst", ")", "]", ")", "\n", "\n", "# GANs", "\n", "", "adv_m2_s1_def", "=", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m2_s1_def_lst", "[", "0", "]", ")", ")", "\n", "adv_m1_s2_def", "=", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m1_s2_def_lst", "[", "0", "]", ")", ")", "\n", "adv_y2_s1_def", "=", "self", ".", "D_Image2", "(", "y2_s1_def_lst", "[", "0", "]", ")", "\n", "adv_y1_s2_def", "=", "self", ".", "D_Image1", "(", "y1_s2_def_lst", "[", "0", "]", ")", "\n", "\n", "# Z-Regressor", "\n", "z1_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "conf", ".", "num_z", ",", ")", ")", "\n", "z2_input", "=", "Input", "(", "shape", "=", "(", "self", ".", "conf", ".", "num_z", ",", ")", ")", "\n", "[", "z1_rec", ",", "z2_rec", "]", "=", "self", ".", "Z_Regressor", "(", "[", "s1", ",", "s2", ",", "z1_input", ",", "z2_input", "]", ")", "\n", "\n", "# outputs", "\n", "all_inputs", "=", "x1_lst", "+", "x2_lst", "+", "[", "m1_input", ",", "m2_input", ",", "z1_input", ",", "z2_input", "]", "if", "supervised", "else", "x1_lst", "+", "x2_lst", "+", "[", "m1_input", ",", "z1_input", ",", "z2_input", "]", "\n", "all_outputs", "=", "[", "m1", ",", "m2", ",", "m1_s2_def", ",", "m2_s1_def", "]", "if", "supervised", "else", "[", "m1", ",", "m1_s2_def", "]", "\n", "all_outputs", "+=", "[", "adv_m1", ",", "adv_m2", ",", "adv_m1_s2_def", ",", "adv_m2_s1_def", "]", "+", "[", "y1", ",", "y2", ",", "y1_s2_def", ",", "y2_s1_def", "]", "+", "[", "adv_y1", ",", "adv_y2", ",", "adv_y1_s2_def", ",", "adv_y2_s1_def", "]", "+", "[", "kl1", ",", "kl2", ",", "z1_rec", ",", "z2_rec", "]", "\n", "\n", "return", "all_inputs", ",", "all_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.build_z_regressor": [[336, 351], ["keras.Model", "dafnet.DAFNet.Z_Regressor.compile", "keras.Input", "keras.Input", "dafnet.DAFNet.Decoder", "dafnet.DAFNet.Enc_Modality_mu", "keras.optimizers.Adam", "range", "range", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile"], ["", "def", "build_z_regressor", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Regress the modality factor. Assumes 4 inputs: 2 s-factors for the 2 modalities\n        \"\"\"", "\n", "num_inputs", "=", "2", "\n", "\n", "s_lst", "=", "[", "Input", "(", "self", ".", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "for", "_", "in", "range", "(", "num_inputs", ")", "]", "\n", "z_lst", "=", "[", "Input", "(", "(", "self", ".", "conf", ".", "num_z", ",", ")", ")", "for", "_", "in", "range", "(", "num_inputs", ")", "]", "\n", "y_lst", "=", "[", "self", ".", "Decoder", "(", "[", "s", ",", "z", "]", ")", "for", "s", ",", "z", "in", "zip", "(", "s_lst", ",", "z_lst", ")", "]", "\n", "\n", "z_rec_lst", "=", "[", "self", ".", "Enc_Modality_mu", "(", "[", "s", ",", "y", "]", ")", "for", "s", ",", "y", "in", "zip", "(", "s_lst", ",", "y_lst", ")", "]", "\n", "\n", "self", ".", "Z_Regressor", "=", "Model", "(", "inputs", "=", "s_lst", "+", "z_lst", ",", "outputs", "=", "z_rec_lst", ",", "name", "=", "'ZReconstruct'", ")", "\n", "self", ".", "Z_Regressor", ".", "compile", "(", "Adam", "(", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "[", "'mae'", ",", "'mae'", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "conf", ".", "w_rec_Z", ",", "self", ".", "conf", ".", "w_rec_Z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.dafnet.DAFNet.calculate_weights": [[352, 362], ["dafnet.DAFNet.Balancer", "len", "keras.layers.Lambda", "range"], "methods", ["None"], ["", "def", "calculate_weights", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "s_mod2", "=", "inputs", "[", "0", "]", "\n", "s_list", "=", "inputs", "[", "1", ":", "]", "\n", "\n", "if", "len", "(", "s_list", ")", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "weights", "=", "self", ".", "Balancer", "(", "[", "s_mod2", "]", "+", "s_list", ")", "\n", "weights", "=", "[", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "j", ":", "j", "+", "1", "]", ")", "(", "weights", ")", "for", "j", "in", "range", "(", "self", ".", "conf", ".", "n_pairs", ")", "]", "\n", "return", "weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.__init__": [[17, 26], ["models.basenet.BaseNet.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", "conf", ")", "\n", "self", ".", "input_shape", "=", "conf", ".", "input_shape", "\n", "self", ".", "out_channels", "=", "conf", ".", "out_channels", "\n", "\n", "self", ".", "normalise", "=", "conf", ".", "normalise", "\n", "self", ".", "f", "=", "conf", ".", "filters", "\n", "self", ".", "downsample", "=", "conf", ".", "downsample", "\n", "assert", "self", ".", "downsample", ">", "0", ",", "'Unet downsample must be over 0.'", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.build": [[27, 36], ["keras.Input", "unet.UNet.unet_downsample", "unet.UNet.unet_bottleneck", "unet.UNet.unet_upsample", "unet.UNet.out", "keras.Model", "unet.UNet.model.summary", "unet.UNet.load_models"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_downsample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_bottleneck", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_upsample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.out", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.load_models"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ")", "\n", "l", "=", "self", ".", "unet_downsample", "(", "self", ".", "input", ",", "self", ".", "normalise", ")", "\n", "self", ".", "unet_bottleneck", "(", "l", ",", "self", ".", "normalise", ")", "\n", "l", "=", "self", ".", "unet_upsample", "(", "self", ".", "bottleneck", ",", "self", ".", "normalise", ")", "\n", "out", "=", "self", ".", "out", "(", "l", ")", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "self", ".", "input", ",", "outputs", "=", "out", ")", "\n", "self", ".", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "self", ".", "load_models", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_downsample": [[37, 53], ["unet.conv_block", "keras.layers.MaxPooling2D", "unet.conv_block", "unet.conv_block", "unet.conv_block", "keras.layers.MaxPooling2D", "keras.layers.MaxPooling2D", "keras.layers.MaxPooling2D"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block"], ["", "def", "unet_downsample", "(", "self", ",", "inp", ",", "normalise", ")", ":", "\n", "        ", "self", ".", "d_l0", "=", "conv_block", "(", "inp", ",", "self", ".", "f", ",", "normalise", ")", "\n", "l", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "self", ".", "d_l0", ")", "\n", "\n", "if", "self", ".", "downsample", ">", "1", ":", "\n", "            ", "self", ".", "d_l1", "=", "conv_block", "(", "l", ",", "self", ".", "f", "*", "2", ",", "normalise", ")", "\n", "l", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "self", ".", "d_l1", ")", "\n", "\n", "", "if", "self", ".", "downsample", ">", "2", ":", "\n", "            ", "self", ".", "d_l2", "=", "conv_block", "(", "l", ",", "self", ".", "f", "*", "4", ",", "normalise", ")", "\n", "l", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "self", ".", "d_l2", ")", "\n", "\n", "", "if", "self", ".", "downsample", ">", "3", ":", "\n", "            ", "self", ".", "d_l3", "=", "conv_block", "(", "l", ",", "self", ".", "f", "*", "8", ",", "normalise", ")", "\n", "l", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "self", ".", "d_l3", ")", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_bottleneck": [[54, 64], ["unet.conv_block"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block"], ["", "def", "unet_bottleneck", "(", "self", ",", "l", ",", "normalise", ",", "name", "=", "''", ")", ":", "\n", "        ", "flt", "=", "self", ".", "f", "*", "2", "\n", "if", "self", ".", "downsample", ">", "1", ":", "\n", "            ", "flt", "*=", "2", "\n", "", "if", "self", ".", "downsample", ">", "2", ":", "\n", "            ", "flt", "*=", "2", "\n", "", "if", "self", ".", "downsample", ">", "3", ":", "\n", "            ", "flt", "*=", "2", "\n", "", "self", ".", "bottleneck", "=", "conv_block", "(", "l", ",", "flt", ",", "normalise", ",", "name", ")", "\n", "return", "self", ".", "bottleneck", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.unet_upsample": [[65, 87], ["utils.model_utils.upsample_block", "unet.conv_block", "utils.model_utils.upsample_block", "unet.conv_block", "utils.model_utils.upsample_block", "unet.conv_block", "utils.model_utils.upsample_block", "unet.conv_block", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate", "keras.layers.Concatenate"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.model_utils.upsample_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.model_utils.upsample_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.model_utils.upsample_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.model_utils.upsample_block", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block"], ["", "def", "unet_upsample", "(", "self", ",", "l", ",", "normalise", ")", ":", "\n", "        ", "if", "self", ".", "downsample", ">", "3", ":", "\n", "            ", "l", "=", "upsample_block", "(", "l", ",", "self", ".", "f", "*", "8", ",", "normalise", ",", "activation", "=", "'linear'", ")", "\n", "l", "=", "Concatenate", "(", ")", "(", "[", "l", ",", "self", ".", "d_l3", "]", ")", "\n", "l", "=", "conv_block", "(", "l", ",", "self", ".", "f", "*", "8", ",", "normalise", ")", "\n", "\n", "", "if", "self", ".", "downsample", ">", "2", ":", "\n", "            ", "l", "=", "upsample_block", "(", "l", ",", "self", ".", "f", "*", "4", ",", "normalise", ",", "activation", "=", "'linear'", ")", "\n", "l", "=", "Concatenate", "(", ")", "(", "[", "l", ",", "self", ".", "d_l2", "]", ")", "\n", "l", "=", "conv_block", "(", "l", ",", "self", ".", "f", "*", "4", ",", "normalise", ")", "\n", "\n", "", "if", "self", ".", "downsample", ">", "1", ":", "\n", "            ", "l", "=", "upsample_block", "(", "l", ",", "self", ".", "f", "*", "2", ",", "normalise", ",", "activation", "=", "'linear'", ")", "\n", "l", "=", "Concatenate", "(", ")", "(", "[", "l", ",", "self", ".", "d_l1", "]", ")", "\n", "l", "=", "conv_block", "(", "l", ",", "self", ".", "f", "*", "2", ",", "normalise", ")", "\n", "\n", "", "if", "self", ".", "downsample", ">", "0", ":", "\n", "            ", "l", "=", "upsample_block", "(", "l", ",", "self", ".", "f", ",", "normalise", ",", "activation", "=", "'linear'", ")", "\n", "l", "=", "Concatenate", "(", ")", "(", "[", "l", ",", "self", ".", "d_l0", "]", ")", "\n", "l", "=", "conv_block", "(", "l", ",", "self", ".", "f", ",", "normalise", ")", "\n", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.UNet.out": [[88, 92], ["keras.layers.Conv2D"], "methods", ["None"], ["", "def", "out", "(", "self", ",", "l", ",", "out_activ", "=", "None", ")", ":", "\n", "        ", "if", "out_activ", "is", "None", ":", "\n", "            ", "out_activ", "=", "'sigmoid'", "if", "self", ".", "out_channels", "==", "1", "else", "'softmax'", "\n", "", "return", "Conv2D", "(", "self", ".", "out_channels", ",", "1", ",", "padding", "=", "'same'", ",", "activation", "=", "out_activ", ")", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.unet.conv_block": [[94, 102], ["keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "keras.layers.Conv2D", "utils.model_utils.normalise", "keras.layers.Activation", "utils.model_utils.normalise", "utils.model_utils.normalise", "utils.model_utils.normalise", "utils.model_utils.normalise", "utils.model_utils.normalise", "utils.model_utils.normalise", "utils.model_utils.normalise", "utils.model_utils.normalise", "utils.model_utils.normalise"], "function", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.data_utils.normalise"], ["", "", "def", "conv_block", "(", "l0", ",", "f", ",", "norm_name", ",", "name", "=", "''", ")", ":", "\n", "    ", "l", "=", "Conv2D", "(", "f", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l0", ")", "\n", "l", "=", "normalise", "(", "norm_name", ")", "(", "l", ")", "\n", "l", "=", "Activation", "(", "'relu'", ")", "(", "l", ")", "\n", "\n", "l", "=", "Conv2D", "(", "f", ",", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "l", ")", "\n", "l", "=", "normalise", "(", "norm_name", ")", "(", "l", ")", "\n", "return", "Activation", "(", "'relu'", ",", "name", "=", "name", ")", "(", "l", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.basenet.BaseNet.__init__": [[22, 28], ["hasattr", "loaders.loader_factory.init_loader", "len"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.loader_factory.init_loader"], ["def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "loader", "=", "None", "\n", "if", "hasattr", "(", "self", ".", "conf", ",", "'dataset_name'", ")", "and", "len", "(", "self", ".", "conf", ".", "dataset_name", ")", ">", "0", ":", "\n", "            ", "self", ".", "loader", "=", "loader_factory", ".", "init_loader", "(", "self", ".", "conf", ".", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.basenet.BaseNet.build": [[29, 32], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "build", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.basenet.BaseNet.load_models": [[33, 35], ["None"], "methods", ["None"], ["", "def", "load_models", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.basenet.BaseNet.get_segmentor": [[36, 39], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_segmentor", "(", "self", ",", "modality", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.__init__": [[19, 36], ["models.basenet.BaseNet.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "super", "(", "MMSDNet", ",", "self", ")", ".", "__init__", "(", "conf", ")", "\n", "\n", "self", ".", "modalities", "=", "conf", ".", "modality", "# list of input modalities", "\n", "\n", "self", ".", "D_Mask", "=", "None", "# Mask Discriminator", "\n", "self", ".", "Encoders_Anatomy", "=", "None", "# list of anatomy encoders for every modality", "\n", "self", ".", "Enc_Modality", "=", "None", "# Modality Encoder", "\n", "self", ".", "Enc_Modality_mu", "=", "None", "# The mean value of the Modality Encoder prediction", "\n", "self", ".", "Anatomy_Fuser", "=", "None", "# Anatomy Fuser that deforms and fused anatomies", "\n", "self", ".", "Segmentor", "=", "None", "# Segmentation network", "\n", "self", ".", "Decoder", "=", "None", "# Decoder network", "\n", "\n", "self", ".", "D_Mask_trainer", "=", "None", "# Trainer for mask discriminator", "\n", "self", ".", "unsupervised_trainer", "=", "None", "# Trainer when having unlabelled data", "\n", "self", ".", "supervised_trainer", "=", "None", "# Trainer when using data with labels.", "\n", "self", ".", "Z_Regressor", "=", "None", "# Trainer for reconstructing a sampled Z", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build": [[37, 41], ["mmsdnet.MMSDNet.build_mask_discriminator", "mmsdnet.MMSDNet.build_generators", "mmsdnet.MMSDNet.load_models"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_mask_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_generators", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.load_models"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "build_mask_discriminator", "(", ")", "\n", "self", ".", "build_generators", "(", ")", "\n", "self", ".", "load_models", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.load_models": [[42, 57], ["os.path.exists", "log.info", "mmsdnet.MMSDNet.supervised_trainer.load_weights", "utils.sdnet_utils.get_net", "keras.Model", "utils.sdnet_utils.get_net", "utils.sdnet_utils.get_net", "utils.sdnet_utils.get_net", "utils.sdnet_utils.get_net", "mmsdnet.MMSDNet.build_z_regressor", "utils.sdnet_utils.get_net", "mmsdnet.MMSDNet.Enc_Modality.get_layer"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_z_regressor", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.get_net"], ["", "def", "load_models", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "conf", ".", "folder", "+", "'/supervised_trainer'", ")", ":", "\n", "            ", "log", ".", "info", "(", "'Loading trained models from file'", ")", "\n", "\n", "self", ".", "supervised_trainer", ".", "load_weights", "(", "self", ".", "conf", ".", "folder", "+", "'/supervised_trainer'", ")", "\n", "\n", "self", ".", "Encoders_Anatomy", "=", "[", "get_net", "(", "self", ".", "supervised_trainer", ",", "'Enc_Anatomy_%s'", "%", "mod", ")", "for", "mod", "in", "self", ".", "modalities", "]", "\n", "\n", "self", ".", "Enc_Modality", "=", "get_net", "(", "self", ".", "supervised_trainer", ",", "'Enc_Modality'", ")", "\n", "self", ".", "Enc_Modality_mu", "=", "Model", "(", "self", ".", "Enc_Modality", ".", "inputs", ",", "self", ".", "Enc_Modality", ".", "get_layer", "(", "'z_mean'", ")", ".", "output", ")", "\n", "self", ".", "Anatomy_Fuser", "=", "get_net", "(", "self", ".", "supervised_trainer", ",", "'Anatomy_Fuser'", ")", "\n", "self", ".", "Segmentor", "=", "get_net", "(", "self", ".", "supervised_trainer", ",", "'Segmentor'", ")", "\n", "self", ".", "Decoder", "=", "get_net", "(", "self", ".", "supervised_trainer", ",", "'Decoder'", ")", "\n", "self", ".", "D_Mask", "=", "get_net", "(", "self", ".", "supervised_trainer", ",", "'D_Mask'", ")", "\n", "self", ".", "build_z_regressor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.save_models": [[58, 61], ["log.debug", "mmsdnet.MMSDNet.supervised_trainer.save_weights"], "methods", ["None"], ["", "", "def", "save_models", "(", "self", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Saving trained models'", ")", "\n", "self", ".", "supervised_trainer", ".", "save_weights", "(", "self", ".", "conf", ".", "folder", "+", "'/supervised_trainer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_mask_discriminator": [[62, 78], ["models.discriminator.Discriminator", "models.discriminator.Discriminator.build", "log.info", "models.discriminator.Discriminator.model.summary", "keras.Input", "keras.Input", "mmsdnet.MMSDNet.D_Mask", "mmsdnet.MMSDNet.D_Mask", "keras.Model", "mmsdnet.MMSDNet.D_Mask_trainer.compile", "mmsdnet.MMSDNet.D_Mask_trainer.summary", "keras.optimizers.Adam"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile"], ["", "def", "build_mask_discriminator", "(", "self", ")", ":", "\n", "# Build a discriminator for masks.", "\n", "        ", "D", "=", "Discriminator", "(", "self", ".", "conf", ".", "d_mask_params", ")", "\n", "D", ".", "build", "(", ")", "\n", "log", ".", "info", "(", "'Mask Discriminator D_M'", ")", "\n", "D", ".", "model", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "self", ".", "D_Mask", "=", "D", ".", "model", "\n", "\n", "real_M", "=", "Input", "(", "self", ".", "conf", ".", "d_mask_params", ".", "input_shape", ")", "\n", "fake_M", "=", "Input", "(", "self", ".", "conf", ".", "d_mask_params", ".", "input_shape", ")", "\n", "real", "=", "self", ".", "D_Mask", "(", "real_M", ")", "\n", "fake", "=", "self", ".", "D_Mask", "(", "fake_M", ")", "\n", "\n", "self", ".", "D_Mask_trainer", "=", "Model", "(", "[", "real_M", ",", "fake_M", "]", ",", "[", "real", ",", "fake", "]", ",", "name", "=", "'D_Mask_trainer'", ")", "\n", "self", ".", "D_Mask_trainer", ".", "compile", "(", "Adam", "(", "lr", "=", "self", ".", "conf", ".", "d_mask_params", ".", "lr", ")", ",", "loss", "=", "'mse'", ")", "\n", "self", ".", "D_Mask_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_generators": [[79, 94], ["utils.sdnet_utils.make_trainable", "model_components.anatomy_fuser.build", "model_components.modality_encoder.build", "keras.Model", "model_components.segmentor.build", "model_components.decoder.build", "mmsdnet.MMSDNet.build_unsupervised_trainer", "mmsdnet.MMSDNet.build_supervised_trainer", "mmsdnet.MMSDNet.build_z_regressor", "model_components.anatomy_encoder.build", "mmsdnet.MMSDNet.Enc_Modality.get_layer"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.utils.sdnet_utils.make_trainable", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_unsupervised_trainer", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_supervised_trainer", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_z_regressor", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build"], ["", "def", "build_generators", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "D_Mask", "is", "not", "None", ",", "'Discriminator has not been built yet'", "\n", "make_trainable", "(", "self", ".", "D_Mask_trainer", ",", "False", ")", "\n", "\n", "self", ".", "Encoders_Anatomy", "=", "[", "anatomy_encoder", ".", "build", "(", "self", ".", "conf", ".", "anatomy_encoder", ",", "'Enc_Anatomy_%s'", "%", "mod", ")", "\n", "for", "mod", "in", "self", ".", "modalities", "]", "\n", "self", ".", "Anatomy_Fuser", "=", "anatomy_fuser", ".", "build", "(", "self", ".", "conf", ")", "\n", "self", ".", "Enc_Modality", "=", "modality_encoder", ".", "build", "(", "self", ".", "conf", ")", "\n", "self", ".", "Enc_Modality_mu", "=", "Model", "(", "self", ".", "Enc_Modality", ".", "inputs", ",", "self", ".", "Enc_Modality", ".", "get_layer", "(", "'z_mean'", ")", ".", "output", ")", "\n", "self", ".", "Segmentor", "=", "segmentor", ".", "build", "(", "self", ".", "conf", ")", "\n", "self", ".", "Decoder", "=", "decoder", ".", "build", "(", "self", ".", "conf", ")", "\n", "\n", "self", ".", "build_unsupervised_trainer", "(", ")", "# build standard gan for data with no labels", "\n", "self", ".", "build_supervised_trainer", "(", ")", "\n", "self", ".", "build_z_regressor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_unsupervised_trainer": [[95, 145], ["len", "mmsdnet.MMSDNet.Anatomy_Fuser", "mmsdnet.MMSDNet.Anatomy_Fuser", "keras.Model", "log.info", "mmsdnet.MMSDNet.unsupervised_trainer.summary", "mmsdnet.MMSDNet.unsupervised_trainer.compile", "keras.Input", "mmsdnet.MMSDNet.Enc_Modality", "mmsdnet.MMSDNet.Segmentor", "mmsdnet.MMSDNet.Segmentor", "mmsdnet.MMSDNet.D_Mask", "mmsdnet.MMSDNet.Decoder", "list", "mmsdnet.MMSDNet.Segmentor", "mmsdnet.MMSDNet.D_Mask", "mmsdnet.MMSDNet.Enc_Modality", "mmsdnet.MMSDNet.Decoder", "mmsdnet.MMSDNet.Enc_Modality", "mmsdnet.MMSDNet.Decoder", "keras.optimizers.Adam", "range", "range", "range", "reversed", "enumerate", "enumerate", "range", "range", "range", "keras.layers.Lambda", "keras.layers.Lambda", "range", "range", "costs.make_dice_loss_fnc", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_dice_loss_fnc"], ["", "def", "build_unsupervised_trainer", "(", "self", ")", ":", "\n", "# Model for unsupervised training", "\n", "\n", "# inputs", "\n", "        ", "x_list", "=", "[", "Input", "(", "shape", "=", "self", ".", "conf", ".", "input_shape", ")", "for", "_", "in", "self", ".", "modalities", "]", "\n", "num_mod", "=", "len", "(", "self", ".", "modalities", ")", "\n", "\n", "# x -> s, z -> m, y", "\n", "s_list", "=", "[", "self", ".", "Encoders_Anatomy", "[", "i", "]", "(", "x_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "z_list", "=", "[", "self", ".", "Enc_Modality", "(", "[", "s_list", "[", "i", "]", ",", "x_list", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "m1", ",", "m2", "=", "self", ".", "Segmentor", "(", "s_list", "[", "0", "]", ")", ",", "self", ".", "Segmentor", "(", "s_list", "[", "1", "]", ")", "\n", "\n", "m_list", "=", "[", "m1", "]", "\n", "adv_m_list", "=", "[", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m", ")", ")", "for", "m", "in", "[", "m1", ",", "m2", "]", "]", "\n", "rec_x_list", "=", "[", "self", ".", "Decoder", "(", "[", "s_list", "[", "i", "]", ",", "z_list", "[", "i", "]", "[", "0", "]", "]", ")", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "\n", "# segment deformed and fused", "\n", "s1_def", ",", "s1_fused", "=", "self", ".", "Anatomy_Fuser", "(", "s_list", ")", "\n", "s2_def", ",", "s2_fused", "=", "self", ".", "Anatomy_Fuser", "(", "list", "(", "reversed", "(", "s_list", ")", ")", ")", "\n", "\n", "fused_segmentations", "=", "[", "self", ".", "Segmentor", "(", "s", ")", "for", "s", "in", "[", "s1_def", ",", "s1_fused", ",", "s2_def", ",", "s2_fused", "]", "]", "\n", "m_list", "+=", "fused_segmentations", "[", "2", ":", "]", "# there are masks only for modality1", "\n", "adv_m_list", "+=", "[", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "s", ")", ")", "for", "s", "in", "fused_segmentations", "]", "\n", "\n", "# reconstruct deformed and fused", "\n", "z_list_s1def", "=", "[", "self", ".", "Enc_Modality", "(", "[", "s", ",", "x_list", "[", "1", "]", "]", ")", "for", "s", "in", "[", "s1_def", ",", "s1_fused", "]", "]", "\n", "rec_x_list", "+=", "[", "self", ".", "Decoder", "(", "[", "s", ",", "z_list_s1def", "[", "i", "]", "[", "0", "]", "]", ")", "for", "i", ",", "s", "in", "enumerate", "(", "[", "s1_def", ",", "s1_fused", "]", ")", "]", "\n", "\n", "z_list_s2def", "=", "[", "self", ".", "Enc_Modality", "(", "[", "s", ",", "x_list", "[", "0", "]", "]", ")", "for", "s", "in", "[", "s2_def", ",", "s2_fused", "]", "]", "\n", "rec_x_list", "+=", "[", "self", ".", "Decoder", "(", "[", "s", ",", "z_list_s2def", "[", "i", "]", "[", "0", "]", "]", ")", "for", "i", ",", "s", "in", "enumerate", "(", "[", "s2_def", ",", "s2_fused", "]", ")", "]", "\n", "\n", "# list of KL divergences for every modality", "\n", "diverg_list", "=", "[", "z_list", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "diverg_list", "+=", "[", "z_list_s1def", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "diverg_list", "+=", "[", "z_list_s2def", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "\n", "all_outputs", "=", "m_list", "+", "adv_m_list", "+", "rec_x_list", "+", "diverg_list", "\n", "self", ".", "unsupervised_trainer", "=", "Model", "(", "inputs", "=", "x_list", ",", "outputs", "=", "all_outputs", ")", "\n", "log", ".", "info", "(", "'Unsupervised trainer'", ")", "\n", "self", ".", "unsupervised_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "\n", "loss_list", "=", "[", "costs", ".", "make_dice_loss_fnc", "(", "self", ".", "loader", ".", "num_masks", ")", "for", "_", "in", "range", "(", "3", ")", "]", "+", "[", "'mse'", "]", "*", "(", "num_mod", "*", "3", ")", "+", "[", "'mae'", "]", "*", "(", "num_mod", "*", "3", ")", "+", "[", "costs", ".", "ypred", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "\n", "weights_list", "=", "[", "self", ".", "conf", ".", "w_sup_M", "for", "_", "in", "range", "(", "3", ")", "]", "+", "[", "self", ".", "conf", ".", "w_adv_M", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "+", "[", "self", ".", "conf", ".", "w_rec_X", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "+", "[", "self", ".", "conf", ".", "w_kl", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "\n", "self", ".", "unsupervised_trainer", ".", "compile", "(", "Adam", "(", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "loss_list", ",", "loss_weights", "=", "weights_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_supervised_trainer": [[146, 193], ["len", "mmsdnet.MMSDNet.Anatomy_Fuser", "mmsdnet.MMSDNet.Anatomy_Fuser", "keras.Model", "log.info", "mmsdnet.MMSDNet.supervised_trainer.summary", "mmsdnet.MMSDNet.supervised_trainer.compile", "keras.Input", "mmsdnet.MMSDNet.Enc_Modality", "mmsdnet.MMSDNet.Segmentor", "mmsdnet.MMSDNet.D_Mask", "mmsdnet.MMSDNet.Decoder", "list", "mmsdnet.MMSDNet.Segmentor", "mmsdnet.MMSDNet.D_Mask", "mmsdnet.MMSDNet.Enc_Modality", "mmsdnet.MMSDNet.Decoder", "mmsdnet.MMSDNet.Enc_Modality", "mmsdnet.MMSDNet.Decoder", "keras.optimizers.Adam", "range", "range", "range", "reversed", "enumerate", "enumerate", "range", "range", "range", "keras.layers.Lambda", "keras.layers.Lambda", "range", "range", "costs.make_dice_loss_fnc", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.costs.make_dice_loss_fnc"], ["", "def", "build_supervised_trainer", "(", "self", ")", ":", "\n", "# Model for unsupervised training", "\n", "\n", "# inputs", "\n", "        ", "x_list", "=", "[", "Input", "(", "shape", "=", "self", ".", "conf", ".", "input_shape", ")", "for", "_", "in", "self", ".", "modalities", "]", "\n", "num_mod", "=", "len", "(", "self", ".", "modalities", ")", "\n", "\n", "s_list", "=", "[", "self", ".", "Encoders_Anatomy", "[", "i", "]", "(", "x_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "z_list", "=", "[", "self", ".", "Enc_Modality", "(", "[", "s_list", "[", "i", "]", ",", "x_list", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "m_list", "=", "[", "self", ".", "Segmentor", "(", "s", ")", "for", "s", "in", "s_list", "]", "\n", "adv_m_list", "=", "[", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "m", ")", ")", "for", "m", "in", "m_list", "]", "\n", "rec_x_list", "=", "[", "self", ".", "Decoder", "(", "[", "s_list", "[", "i", "]", ",", "z_list", "[", "i", "]", "[", "0", "]", "]", ")", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "\n", "# segment deformed and fused", "\n", "s1_def", ",", "s1_fused", "=", "self", ".", "Anatomy_Fuser", "(", "s_list", ")", "\n", "s2_def", ",", "s2_fused", "=", "self", ".", "Anatomy_Fuser", "(", "list", "(", "reversed", "(", "s_list", ")", ")", ")", "\n", "\n", "fused_segmentations", "=", "[", "self", ".", "Segmentor", "(", "s", ")", "for", "s", "in", "[", "s1_def", ",", "s1_fused", ",", "s2_def", ",", "s2_fused", "]", "]", "\n", "m_list", "+=", "fused_segmentations", "\n", "adv_m_list", "+=", "[", "self", ".", "D_Mask", "(", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", ")", "(", "s", ")", ")", "for", "s", "in", "fused_segmentations", "]", "\n", "\n", "# reconstruct deformed and fused", "\n", "z_list_s1def", "=", "[", "self", ".", "Enc_Modality", "(", "[", "s", ",", "x_list", "[", "1", "]", "]", ")", "for", "s", "in", "[", "s1_def", ",", "s1_fused", "]", "]", "\n", "rec_x_list", "+=", "[", "self", ".", "Decoder", "(", "[", "s", ",", "z_list_s1def", "[", "i", "]", "[", "0", "]", "]", ")", "for", "i", ",", "s", "in", "enumerate", "(", "[", "s1_def", ",", "s1_fused", "]", ")", "]", "\n", "\n", "z_list_s2def", "=", "[", "self", ".", "Enc_Modality", "(", "[", "s", ",", "x_list", "[", "0", "]", "]", ")", "for", "s", "in", "[", "s2_def", ",", "s2_fused", "]", "]", "\n", "rec_x_list", "+=", "[", "self", ".", "Decoder", "(", "[", "s", ",", "z_list_s2def", "[", "i", "]", "[", "0", "]", "]", ")", "for", "i", ",", "s", "in", "enumerate", "(", "[", "s2_def", ",", "s2_fused", "]", ")", "]", "\n", "\n", "# list of KL divergences for every modality", "\n", "diverg_list", "=", "[", "z_list", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "diverg_list", "+=", "[", "z_list_s1def", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "diverg_list", "+=", "[", "z_list_s2def", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "\n", "all_outputs", "=", "m_list", "+", "adv_m_list", "+", "rec_x_list", "+", "diverg_list", "\n", "self", ".", "supervised_trainer", "=", "Model", "(", "inputs", "=", "x_list", ",", "outputs", "=", "all_outputs", ")", "\n", "log", ".", "info", "(", "'Supervised trainer'", ")", "\n", "self", ".", "supervised_trainer", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "\n", "loss_list", "=", "[", "costs", ".", "make_dice_loss_fnc", "(", "self", ".", "loader", ".", "num_masks", ")", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "+", "[", "'mse'", "]", "*", "(", "num_mod", "*", "3", ")", "+", "[", "'mae'", "]", "*", "(", "num_mod", "*", "3", ")", "+", "[", "costs", ".", "ypred", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "\n", "weights_list", "=", "[", "self", ".", "conf", ".", "w_sup_M", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "+", "[", "self", ".", "conf", ".", "w_adv_M", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "+", "[", "self", ".", "conf", ".", "w_rec_X", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "+", "[", "self", ".", "conf", ".", "w_kl", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "\n", "self", ".", "supervised_trainer", ".", "compile", "(", "Adam", "(", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "loss_list", ",", "loss_weights", "=", "weights_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.build_z_regressor": [[194, 209], ["keras.Model", "log.info", "mmsdnet.MMSDNet.Z_Regressor.summary", "mmsdnet.MMSDNet.Z_Regressor.compile", "len", "keras.Input", "keras.Input", "mmsdnet.MMSDNet.Decoder", "mmsdnet.MMSDNet.Enc_Modality_mu", "keras.optimizers.Adam", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.discriminator.Discriminator.compile"], ["", "def", "build_z_regressor", "(", "self", ")", ":", "\n", "        ", "num_inputs", "=", "len", "(", "self", ".", "modalities", ")", "+", "4", "\n", "s_list", "=", "[", "Input", "(", "self", ".", "conf", ".", "anatomy_encoder", ".", "output_shape", ")", "for", "_", "in", "range", "(", "num_inputs", ")", "]", "\n", "sample_z_list", "=", "[", "Input", "(", "(", "self", ".", "conf", ".", "num_z", ",", ")", ")", "for", "_", "in", "range", "(", "num_inputs", ")", "]", "\n", "sample_x_list", "=", "[", "self", ".", "Decoder", "(", "[", "s_list", "[", "i", "]", ",", "sample_z_list", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "num_inputs", ")", "]", "\n", "\n", "rec_Z_list", "=", "[", "self", ".", "Enc_Modality_mu", "(", "[", "s_list", "[", "i", "]", ",", "sample_x_list", "[", "i", "]", "]", ")", "for", "i", "in", "range", "(", "num_inputs", ")", "]", "\n", "\n", "all_inputs", "=", "s_list", "+", "sample_z_list", "\n", "self", ".", "Z_Regressor", "=", "Model", "(", "inputs", "=", "all_inputs", ",", "outputs", "=", "rec_Z_list", ",", "name", "=", "'ZReconstruct'", ")", "\n", "log", ".", "info", "(", "'Z Regressor'", ")", "\n", "self", ".", "Z_Regressor", ".", "summary", "(", "print_fn", "=", "log", ".", "info", ")", "\n", "losses", "=", "[", "'mae'", "]", "*", "(", "num_inputs", ")", "\n", "weights", "=", "[", "self", ".", "conf", ".", "w_rec_Z", "for", "_", "in", "range", "(", "num_inputs", ")", "]", "\n", "self", ".", "Z_Regressor", ".", "compile", "(", "Adam", "(", "self", ".", "conf", ".", "lr", ")", ",", "loss", "=", "losses", ",", "loss_weights", "=", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.models.mmsdnet.MMSDNet.predict_mask": [[210, 233], ["mmsdnet.MMSDNet.Encoders_Anatomy[].predict", "mmsdnet.MMSDNet.Encoders_Anatomy[].predict", "ValueError", "mmsdnet.MMSDNet.Segmentor.predict", "mmsdnet.MMSDNet.Segmentor.predict", "mmsdnet.MMSDNet.Segmentor.predict", "mmsdnet.MMSDNet.Anatomy_Fuser.predict", "numpy.max", "mmsdnet.MMSDNet.Segmentor.predict", "mmsdnet.MMSDNet.Anatomy_Fuser.predict"], "methods", ["None"], ["", "def", "predict_mask", "(", "self", ",", "modality_index", ",", "type", ",", "image_list", ")", ":", "\n", "        ", "assert", "type", "in", "[", "'simple'", ",", "'def'", ",", "'max'", ",", "'maxnostn'", "]", "\n", "\n", "idx2", "=", "modality_index", "\n", "idx1", "=", "1", "-", "idx2", "\n", "\n", "images_mod1", "=", "image_list", "[", "idx1", "]", "\n", "images_mod2", "=", "image_list", "[", "idx2", "]", "\n", "\n", "s1", "=", "self", ".", "Encoders_Anatomy", "[", "idx1", "]", ".", "predict", "(", "images_mod1", ")", "\n", "s2", "=", "self", ".", "Encoders_Anatomy", "[", "idx2", "]", ".", "predict", "(", "images_mod2", ")", "\n", "\n", "if", "type", "==", "'simple'", ":", "\n", "            ", "return", "self", ".", "Segmentor", ".", "predict", "(", "s2", ")", "\n", "", "elif", "type", "==", "'def'", ":", "\n", "            ", "return", "self", ".", "Segmentor", ".", "predict", "(", "self", ".", "Anatomy_Fuser", ".", "predict", "(", "[", "s1", ",", "s2", "]", ")", "[", "0", "]", ")", "\n", "", "elif", "type", "==", "'max'", ":", "\n", "            ", "return", "self", ".", "Segmentor", ".", "predict", "(", "self", ".", "Anatomy_Fuser", ".", "predict", "(", "[", "s1", ",", "s2", "]", ")", "[", "1", "]", ")", "\n", "", "elif", "type", "==", "'maxnostn'", ":", "\n", "            ", "s_max_nostn", "=", "np", ".", "max", "(", "[", "s1", ",", "s2", "]", ",", "axis", "=", "0", ")", "\n", "return", "self", ".", "Segmentor", ".", "predict", "(", "s_max_nostn", ")", "\n", "\n", "", "raise", "ValueError", "(", "type", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.__init__": [[26, 40], ["model_executors.base_executor.Executor.__init__", "dafnet_executor.DAFNetExecutor.init_swa_models"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.init_swa_models"], ["def", "__init__", "(", "self", ",", "conf", ",", "model", ")", ":", "\n", "        ", "super", "(", "DAFNetExecutor", ",", "self", ")", ".", "__init__", "(", "conf", ",", "model", ")", "\n", "self", ".", "exp_clb", "=", "None", "\n", "self", ".", "loader", ".", "modalities", "=", "self", ".", "conf", ".", "modality", "\n", "\n", "self", ".", "gen_labelled", "=", "None", "# iterator for labelled data (supervised learning)", "\n", "self", ".", "gen_unlabelled", "=", "None", "# iterator for unlabelled data (unsupervised learning)", "\n", "self", ".", "discriminator_masks", "=", "None", "# iterator for real masks to train discriminators", "\n", "self", ".", "discriminator_image", "=", "None", "# iterator for images to train discriminators", "\n", "self", ".", "img_callback", "=", "None", "#\u00a0callback to save images", "\n", "self", ".", "data", "=", "None", "# labelled data container of type MultimodalPairedData", "\n", "self", ".", "ul_data", "=", "None", "# unlabelled data container of type MultimodalPairedData", "\n", "\n", "self", ".", "init_swa_models", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.init_swa_models": [[41, 57], ["callbacks.swa.SWA", "callbacks.swa.SWA", "callbacks.swa.SWA", "callbacks.swa.SWA", "callbacks.swa.SWA", "callbacks.swa.SWA", "callbacks.swa.SWA", "callbacks.swa.SWA", "callbacks.swa.SWA", "callbacks.swa.SWA", "dafnet_executor.DAFNetExecutor.set_swa_model_weights", "models.discriminator.Discriminator", "models.discriminator.Discriminator", "models.discriminator.Discriminator"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.set_swa_model_weights"], ["", "def", "init_swa_models", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialise objects for Stochastic Weight Averaging\n        \"\"\"", "\n", "self", ".", "swa_D_Mask", "=", "SWA", "(", "40", ",", "Discriminator", "(", "self", ".", "conf", ".", "d_mask_params", ")", ".", "build", ",", "None", ")", "\n", "self", ".", "swa_D_Image1", "=", "SWA", "(", "40", ",", "Discriminator", "(", "self", ".", "conf", ".", "d_image_params", ")", ".", "build", ",", "None", ")", "\n", "self", ".", "swa_D_Image2", "=", "SWA", "(", "40", ",", "Discriminator", "(", "self", ".", "conf", ".", "d_image_params", ")", ".", "build", ",", "None", ")", "\n", "self", ".", "swa_Enc_Anatomy1", "=", "SWA", "(", "40", ",", "anatomy_encoder", ".", "build", ",", "self", ".", "conf", ".", "anatomy_encoder", ")", "\n", "self", ".", "swa_Enc_Anatomy2", "=", "SWA", "(", "40", ",", "anatomy_encoder", ".", "build", ",", "self", ".", "conf", ".", "anatomy_encoder", ")", "\n", "self", ".", "swa_Enc_Modality", "=", "SWA", "(", "40", ",", "modality_encoder", ".", "build", ",", "self", ".", "conf", ")", "\n", "self", ".", "swa_Anatomy_Fuser", "=", "SWA", "(", "40", ",", "anatomy_fuser", ".", "build", ",", "self", ".", "conf", ")", "\n", "self", ".", "swa_Segmentor", "=", "SWA", "(", "40", ",", "segmentor", ".", "build", ",", "self", ".", "conf", ")", "\n", "self", ".", "swa_Decoder", "=", "SWA", "(", "40", ",", "decoder", ".", "build", ",", "self", ".", "conf", ")", "\n", "self", ".", "swa_Balancer", "=", "SWA", "(", "40", ",", "balancer", ".", "build", ",", "self", ".", "conf", ")", "\n", "\n", "self", ".", "set_swa_model_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.set_swa_model_weights": [[58, 69], ["None"], "methods", ["None"], ["", "def", "set_swa_model_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "swa_D_Mask", ".", "model", "=", "self", ".", "model", ".", "D_Mask", "\n", "self", ".", "swa_D_Image1", ".", "model", "=", "self", ".", "model", ".", "D_Image1", "\n", "self", ".", "swa_D_Image2", ".", "model", "=", "self", ".", "model", ".", "D_Image2", "\n", "self", ".", "swa_Enc_Anatomy1", ".", "model", "=", "self", ".", "model", ".", "Encoders_Anatomy", "[", "0", "]", "\n", "self", ".", "swa_Enc_Anatomy2", ".", "model", "=", "self", ".", "model", ".", "Encoders_Anatomy", "[", "1", "]", "\n", "self", ".", "swa_Enc_Modality", ".", "model", "=", "self", ".", "model", ".", "Enc_Modality", "\n", "self", ".", "swa_Anatomy_Fuser", ".", "model", "=", "self", ".", "model", ".", "Anatomy_Fuser", "\n", "self", ".", "swa_Segmentor", ".", "model", "=", "self", ".", "model", ".", "Segmentor", "\n", "self", ".", "swa_Decoder", ".", "model", "=", "self", ".", "model", ".", "Decoder", "\n", "self", ".", "swa_Balancer", ".", "model", "=", "self", ".", "model", ".", "Balancer", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.init_train_data": [[70, 78], ["dafnet_executor.DAFNetExecutor._init_labelled_data_generator", "dafnet_executor.DAFNetExecutor._init_unlabelled_data_generator", "dafnet_executor.DAFNetExecutor._init_disciminator_mask_generator", "int", "dafnet_executor.DAFNetExecutor._init_discriminator_image_generator", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_labelled_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_unlabelled_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_disciminator_mask_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_discriminator_image_generator"], ["", "def", "init_train_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "gen_labelled", "=", "self", ".", "_init_labelled_data_generator", "(", ")", "\n", "self", ".", "gen_unlabelled", "=", "self", ".", "_init_unlabelled_data_generator", "(", ")", "\n", "self", ".", "discriminator_masks", "=", "self", ".", "_init_disciminator_mask_generator", "(", ")", "\n", "self", ".", "discriminator_image", "=", "[", "self", ".", "_init_discriminator_image_generator", "(", "mod", ")", "\n", "for", "mod", "in", "self", ".", "model", ".", "modalities", "]", "\n", "\n", "self", ".", "batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "data_len", "/", "self", ".", "conf", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor._init_labelled_data_generator": [[79, 101], ["log.info", "dafnet_executor.DAFNetExecutor.loader.load_all_modalities_concatenated", "dafnet_executor.DAFNetExecutor.data.sample", "log.info", "dafnet_executor.DAFNetExecutor.data.size", "dafnet_executor.DAFNetExecutor.get_data_generator", "int", "hasattr", "dafnet_executor.DAFNetExecutor.data.randomise_pairs", "numpy.round", "dafnet_executor.DAFNetExecutor.data.expand_pairs", "dafnet_executor.DAFNetExecutor.data.expand_pairs", "str", "dafnet_executor.DAFNetExecutor.data.size", "dafnet_executor.DAFNetExecutor.data.get_images_modi", "dafnet_executor.DAFNetExecutor.data.get_masks_modi", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.randomise_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.expand_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.expand_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "_init_labelled_data_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialise a data generator (image, mask) for labelled data\n        \"\"\"", "\n", "if", "self", ".", "conf", ".", "l_mix", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "log", ".", "info", "(", "'Initialising labelled datagen. Loading %s data'", "%", "self", ".", "conf", ".", "dataset_name", ")", "\n", "self", ".", "data", "=", "self", ".", "loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "'training'", ",", "self", ".", "conf", ".", "image_downsample", ")", "\n", "self", ".", "data", ".", "sample", "(", "int", "(", "np", ".", "round", "(", "self", ".", "conf", ".", "l_mix", "*", "self", ".", "data", ".", "num_volumes", ")", ")", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "conf", ",", "'randomise'", ")", "and", "self", ".", "conf", ".", "randomise", ":", "\n", "            ", "self", ".", "data", ".", "randomise_pairs", "(", "self", ".", "conf", ".", "n_pairs", "-", "1", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "", "elif", "self", ".", "conf", ".", "automatedpairing", ":", "\n", "            ", "self", ".", "data", ".", "expand_pairs", "(", "self", ".", "conf", ".", "n_pairs", "-", "1", ",", "0", ",", "neighborhood", "=", "self", ".", "conf", ".", "n_pairs", ")", "\n", "self", ".", "data", ".", "expand_pairs", "(", "self", ".", "conf", ".", "n_pairs", "-", "1", ",", "1", ",", "neighborhood", "=", "self", ".", "conf", ".", "n_pairs", ")", "\n", "\n", "", "log", ".", "info", "(", "'labelled data size: '", "+", "str", "(", "self", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "data_len", "=", "self", ".", "data", ".", "size", "(", ")", "\n", "\n", "return", "self", ".", "get_data_generator", "(", "train_images", "=", "[", "self", ".", "data", ".", "get_images_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "\n", "train_labels", "=", "[", "self", ".", "data", ".", "get_masks_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor._init_unlabelled_data_generator": [[102, 116], ["dafnet_executor.DAFNetExecutor._load_unlabelled_data", "dafnet_executor.DAFNetExecutor.ul_data.size", "dafnet_executor.DAFNetExecutor.get_data_generator", "dafnet_executor.DAFNetExecutor.ul_data.size", "dafnet_executor.DAFNetExecutor.ul_data.size", "dafnet_executor.DAFNetExecutor.data.size", "dafnet_executor.DAFNetExecutor.ul_data.get_images_modi", "dafnet_executor.DAFNetExecutor.ul_data.get_masks_modi", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._load_unlabelled_data", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "_init_unlabelled_data_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialise a data generator (image) for unlabelled data\n        \"\"\"", "\n", "if", "self", ".", "conf", ".", "l_mix", "==", "1", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "ul_data", "=", "self", ".", "_load_unlabelled_data", "(", "'training'", ",", "'ul'", ",", "None", ")", "\n", "self", ".", "conf", ".", "unlabelled_image_num", "=", "self", ".", "ul_data", ".", "size", "(", ")", "\n", "if", "self", ".", "data", "is", "None", "or", "self", ".", "ul_data", ".", "size", "(", ")", ">", "self", ".", "data", ".", "size", "(", ")", ":", "\n", "            ", "self", ".", "data_len", "=", "self", ".", "ul_data", ".", "size", "(", ")", "\n", "\n", "", "return", "self", ".", "get_data_generator", "(", "train_images", "=", "[", "self", ".", "ul_data", ".", "get_images_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "\n", "train_labels", "=", "[", "self", ".", "ul_data", ".", "get_masks_modi", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor._load_unlabelled_data": [[117, 152], ["log.info", "log.info", "dafnet_executor.DAFNetExecutor.loader.load_all_modalities_concatenated", "log.info", "hasattr", "dafnet_executor.DAFNetExecutor.randomise_pairs", "int", "dafnet_executor.DAFNetExecutor.get_sample_volumes", "dafnet_executor.DAFNetExecutor.filter_volumes", "dafnet_executor.DAFNetExecutor.loader.load_all_data", "Exception", "dafnet_executor.DAFNetExecutor.expand_pairs", "dafnet_executor.DAFNetExecutor.expand_pairs", "numpy.round", "str", "dafnet_executor.DAFNetExecutor.volumes", "dafnet_executor.DAFNetExecutor.size", "str"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.randomise_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_sample_volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.filter_volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_data", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.expand_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.expand_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size"], ["", "def", "_load_unlabelled_data", "(", "self", ",", "split_type", ",", "data_type", ",", "modality", ")", ":", "\n", "        ", "\"\"\"\n        Create a Data object with unlabelled data. This will be used to train the unlabelled path of the\n        generators and produce fake masks for training the discriminator\n        :param split_type:  the split defining which volumes to load\n        :param data_type:   can be one ['ul', 'all']. The second includes images that have masks.\n        :return:            a data object\n        \"\"\"", "\n", "log", ".", "info", "(", "'Initialising unlabelled datagen. Loading %s data of type %s'", "%", "(", "self", ".", "conf", ".", "dataset_name", ",", "data_type", ")", ")", "\n", "if", "data_type", "==", "'ul'", ":", "\n", "            ", "log", ".", "info", "(", "'Estimating number of unlabelled images from %s data'", "%", "self", ".", "conf", ".", "dataset_name", ")", "\n", "ul_data", "=", "self", ".", "loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "split_type", ",", "\n", "self", ".", "conf", ".", "image_downsample", ")", "\n", "self", ".", "conf", ".", "num_ul_volumes", "=", "ul_data", ".", "num_volumes", "\n", "\n", "if", "hasattr", "(", "self", ".", "conf", ",", "'randomise'", ")", "and", "self", ".", "conf", ".", "randomise", ":", "\n", "                ", "ul_data", ".", "randomise_pairs", "(", "length", "=", "self", ".", "conf", ".", "n_pairs", "-", "1", ")", "\n", "", "elif", "self", ".", "conf", ".", "automatedpairing", ":", "\n", "                ", "ul_data", ".", "expand_pairs", "(", "self", ".", "conf", ".", "n_pairs", "-", "1", ",", "0", ",", "neighborhood", "=", "self", ".", "conf", ".", "n_pairs", ")", "\n", "ul_data", ".", "expand_pairs", "(", "self", ".", "conf", ".", "n_pairs", "-", "1", ",", "1", ",", "neighborhood", "=", "self", ".", "conf", ".", "n_pairs", ")", "\n", "\n", "", "if", "self", ".", "conf", ".", "l_mix", ">", "0", ":", "\n", "                ", "num_lb_vols", "=", "int", "(", "np", ".", "round", "(", "self", ".", "conf", ".", "l_mix", "*", "ul_data", ".", "num_volumes", ")", ")", "\n", "volumes", "=", "ul_data", ".", "get_sample_volumes", "(", "num_lb_vols", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "ul_volumes", "=", "[", "v", "for", "v", "in", "ul_data", ".", "volumes", "(", ")", "if", "v", "not", "in", "volumes", "]", "# ul volumes are the remaining from lbl", "\n", "ul_data", ".", "filter_volumes", "(", "ul_volumes", ")", "\n", "\n", "", "log", ".", "info", "(", "'unlabelled data size: '", "+", "str", "(", "ul_data", ".", "size", "(", ")", ")", ")", "\n", "", "elif", "data_type", "==", "'all'", ":", "\n", "            ", "ul_data", "=", "self", ".", "loader", ".", "load_all_data", "(", "self", ".", "conf", ".", "split", ",", "split_type", ",", "modality", "=", "modality", ",", "\n", "downsample", "=", "self", ".", "conf", ".", "image_downsample", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid data_type: %s'", "%", "str", "(", "data_type", ")", ")", "\n", "\n", "", "return", "ul_data", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor._init_disciminator_mask_generator": [[153, 160], ["log.info", "dafnet_executor.DAFNetExecutor._load_discriminator_masks", "dafnet_executor.DAFNetExecutor.get_data_generator"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._load_discriminator_masks", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator"], ["", "def", "_init_disciminator_mask_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Init a generator for masks to use in the discriminator.\n        \"\"\"", "\n", "log", ".", "info", "(", "'Initialising discriminator maskgen.'", ")", "\n", "masks", "=", "self", ".", "_load_discriminator_masks", "(", ")", "\n", "return", "self", ".", "get_data_generator", "(", "train_images", "=", "None", ",", "train_labels", "=", "[", "masks", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor._load_discriminator_masks": [[161, 177], ["numpy.concatenate.append", "numpy.concatenate.append", "len", "numpy.empty", "numpy.concatenate", "numpy.concatenate", "dafnet_executor.DAFNetExecutor.ul_data.get_masks_modi", "dafnet_executor.DAFNetExecutor.data.get_masks_modi", "dafnet_executor.DAFNetExecutor.data.get_masks_modi"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "_load_discriminator_masks", "(", "self", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "if", "self", ".", "data", "is", "not", "None", ":", "\n", "            ", "masks", ".", "append", "(", "np", ".", "concatenate", "(", "[", "self", ".", "data", ".", "get_masks_modi", "(", "0", ")", ",", "self", ".", "data", ".", "get_masks_modi", "(", "1", ")", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "if", "self", ".", "ul_data", "is", "not", "None", ":", "\n", "            ", "masks", ".", "append", "(", "self", ".", "ul_data", ".", "get_masks_modi", "(", "0", ")", ")", "\n", "\n", "", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "            ", "masks", "=", "np", ".", "empty", "(", "shape", "=", "(", "[", "0", "]", "+", "self", ".", "conf", ".", "input_shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "loader", ".", "num_masks", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "masks", "=", "np", ".", "concatenate", "(", "masks", ",", "axis", "=", "0", ")", "\n", "\n", "", "im_shape", "=", "self", ".", "conf", ".", "input_shape", "[", ":", "2", "]", "\n", "assert", "masks", ".", "shape", "[", "1", "]", "==", "im_shape", "[", "0", "]", "and", "masks", ".", "shape", "[", "2", "]", "==", "im_shape", "[", "1", "]", ",", "masks", ".", "shape", "\n", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor._init_discriminator_image_generator": [[178, 185], ["log.info", "dafnet_executor.DAFNetExecutor._load_unlabelled_data", "dafnet_executor.DAFNetExecutor.get_data_generator"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._load_unlabelled_data", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator"], ["", "def", "_init_discriminator_image_generator", "(", "self", ",", "modality", ")", ":", "\n", "        ", "\"\"\"\n        Init a generator for images to train a discriminator (for fake masks)\n        \"\"\"", "\n", "log", ".", "info", "(", "'Initialising discriminator imagegen.'", ")", "\n", "data", "=", "self", ".", "_load_unlabelled_data", "(", "'training'", ",", "'all'", ",", "modality", ")", "\n", "return", "self", ".", "get_data_generator", "(", "train_images", "=", "[", "data", ".", "images", "]", ",", "train_labels", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.init_image_callback": [[186, 199], ["log.info", "dafnet_executor.DAFNetExecutor.get_data_generator", "callbacks.dafnet_image_callback.DAFNetImageCallback", "dafnet_executor.DAFNetExecutor.loader.load_all_modalities_concatenated", "hasattr", "dafnet_executor.DAFNetExecutor.randomise_pairs", "dafnet_executor.DAFNetExecutor.get_images_modi", "dafnet_executor.DAFNetExecutor.get_masks_modi", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.randomise_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "init_image_callback", "(", "self", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Initialising a data generator to use for printing.'", ")", "\n", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "data", "=", "self", ".", "loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "'training'", ",", "self", ".", "conf", ".", "image_downsample", ")", "\n", "if", "hasattr", "(", "self", ".", "conf", ",", "'randomise'", ")", "and", "self", ".", "conf", ".", "randomise", ":", "\n", "                ", "data", ".", "randomise_pairs", "(", "length", "=", "self", ".", "conf", ".", "n_pairs", "-", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "data", "\n", "\n", "", "gen", "=", "self", ".", "get_data_generator", "(", "train_images", "=", "[", "data", ".", "get_images_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "\n", "train_labels", "=", "[", "data", ".", "get_masks_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "img_callback", "=", "DAFNetImageCallback", "(", "self", ".", "conf", ",", "self", ".", "model", ",", "gen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.get_loss_names": [[200, 206], ["None"], "methods", ["None"], ["", "def", "get_loss_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "'adv_M'", ",", "'adv_X1'", ",", "'adv_X2'", ",", "'rec_X'", ",", "'dis_M'", ",", "'dis_X1'", ",", "'dis_X2'", ",", "\n", "'val_loss'", ",", "'val_loss_mod1'", ",", "'val_loss_mod2'", ",", "\n", "'val_loss_mod2_mod1def'", ",", "'val_loss_mod1_mod2def'", ",", "'val_loss_mod2_fused'", ",", "'val_loss_mod1_fused'", ",", "\n", "'val_weight_0'", ",", "'val_weight_1'", ",", "'val_weight_2'", ",", "\n", "'supervised_Mask'", ",", "'KL'", ",", "'rec_Z'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.get_swa_models": [[207, 211], ["None"], "methods", ["None"], ["", "def", "get_swa_models", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "swa_D_Mask", ",", "self", ".", "swa_D_Image1", ",", "self", ".", "swa_D_Image2", ",", "\n", "self", ".", "swa_Enc_Anatomy1", ",", "self", ".", "swa_Enc_Anatomy2", ",", "self", ".", "swa_Enc_Modality", ",", "\n", "self", ".", "swa_Anatomy_Fuser", ",", "self", ".", "swa_Segmentor", ",", "self", ".", "swa_Decoder", ",", "self", ".", "swa_Balancer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train": [[212, 285], ["log.info", "dafnet_executor.DAFNetExecutor.init_train_data", "dafnet_executor.DAFNetExecutor.init_image_callback", "callbacks.loss_callback.SaveLoss", "keras.callbacks.CSVLogger", "keras.callbacks.CSVLogger.on_train_begin", "keras.callbacks.EarlyStopping", "keras.callbacks.EarlyStopping.on_train_begin", "dafnet_executor.DAFNetExecutor.get_loss_names", "keras.utils.Progbar", "range", "log.info", "range", "dafnet_executor.DAFNetExecutor.set_swa_model_weights", "dafnet_executor.DAFNetExecutor.get_swa_models", "dafnet_executor.DAFNetExecutor.validate", "log.info", "keras.callbacks.CSVLogger.on_epoch_end", "callbacks.loss_callback.SaveLoss.on_epoch_end", "dafnet_executor.DAFNetExecutor.img_callback.on_epoch_end", "dafnet_executor.DAFNetExecutor.save_models", "dafnet_executor.DAFNetExecutor.stop_criterion", "dafnet_executor.DAFNetExecutor.train_batch", "keras.utils.Progbar.update", "swa_m.on_epoch_end", "epoch_loss_list.append", "total_loss[].append", "log.info", "keras.callbacks.EarlyStopping.on_train_end", "keras.callbacks.CSVLogger.on_train_end", "dafnet_executor.DAFNetExecutor.get_swa_models", "dafnet_executor.DAFNetExecutor.save_models", "numpy.mean", "str", "swa_m.on_train_end", "numpy.mean", "tuple"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.init_train_data", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.init_image_callback", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_begin", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_begin", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.get_loss_names", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.set_swa_model_weights", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.get_swa_models", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.validate", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.save_models", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.stop_criterion", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.get_swa_models", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.save_models", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_end"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Training Model'", ")", "\n", "\n", "self", ".", "init_train_data", "(", ")", "\n", "\n", "self", ".", "init_image_callback", "(", ")", "\n", "sl", "=", "SaveLoss", "(", "self", ".", "conf", ".", "folder", ")", "\n", "cl", "=", "CSVLogger", "(", "self", ".", "conf", ".", "folder", "+", "'/training.csv'", ")", "\n", "cl", ".", "on_train_begin", "(", ")", "\n", "\n", "es", "=", "EarlyStopping", "(", "'val_loss_mod2_fused'", ",", "min_delta", "=", "0.01", ",", "patience", "=", "60", ")", "\n", "es", ".", "model", "=", "self", ".", "model", ".", "Segmentor", "\n", "es", ".", "on_train_begin", "(", ")", "\n", "\n", "loss_names", "=", "self", ".", "get_loss_names", "(", ")", "\n", "total_loss", "=", "{", "n", ":", "[", "]", "for", "n", "in", "loss_names", "}", "\n", "\n", "progress_bar", "=", "Progbar", "(", "target", "=", "self", ".", "batches", "*", "self", ".", "conf", ".", "batch_size", ")", "\n", "for", "self", ".", "epoch", "in", "range", "(", "self", ".", "conf", ".", "epochs", ")", ":", "\n", "            ", "log", ".", "info", "(", "'Epoch %d/%d'", "%", "(", "self", ".", "epoch", ",", "self", ".", "conf", ".", "epochs", ")", ")", "\n", "\n", "epoch_loss", "=", "{", "n", ":", "[", "]", "for", "n", "in", "loss_names", "}", "\n", "epoch_loss_list", "=", "[", "]", "\n", "\n", "for", "self", ".", "batch", "in", "range", "(", "self", ".", "batches", ")", ":", "\n", "                ", "self", ".", "train_batch", "(", "epoch_loss", ")", "\n", "progress_bar", ".", "update", "(", "(", "self", ".", "batch", "+", "1", ")", "*", "self", ".", "conf", ".", "batch_size", ")", "\n", "\n", "", "self", ".", "set_swa_model_weights", "(", ")", "\n", "for", "swa_m", "in", "self", ".", "get_swa_models", "(", ")", ":", "\n", "                ", "swa_m", ".", "on_epoch_end", "(", "self", ".", "epoch", ")", "\n", "\n", "", "self", ".", "validate", "(", "epoch_loss", ")", "\n", "\n", "for", "n", "in", "loss_names", ":", "\n", "                ", "epoch_loss_list", ".", "append", "(", "(", "n", ",", "np", ".", "mean", "(", "epoch_loss", "[", "n", "]", ")", ")", ")", "\n", "total_loss", "[", "n", "]", ".", "append", "(", "np", ".", "mean", "(", "epoch_loss", "[", "n", "]", ")", ")", "\n", "", "log", ".", "info", "(", "str", "(", "'Epoch %d/%d: '", "+", "', '", ".", "join", "(", "[", "l", "+", "' Loss = %.5f'", "for", "l", "in", "loss_names", "]", ")", ")", "%", "\n", "(", "(", "self", ".", "epoch", ",", "self", ".", "conf", ".", "epochs", ")", "+", "tuple", "(", "total_loss", "[", "l", "]", "[", "-", "1", "]", "for", "l", "in", "loss_names", ")", ")", ")", "\n", "logs", "=", "{", "l", ":", "total_loss", "[", "l", "]", "[", "-", "1", "]", "for", "l", "in", "loss_names", "}", "\n", "\n", "cl", ".", "model", "=", "self", ".", "model", ".", "D_Mask", "\n", "cl", ".", "model", ".", "stop_training", "=", "False", "\n", "cl", ".", "on_epoch_end", "(", "self", ".", "epoch", ",", "logs", ")", "\n", "sl", ".", "on_epoch_end", "(", "self", ".", "epoch", ",", "logs", ")", "\n", "\n", "# print images", "\n", "self", ".", "img_callback", ".", "on_epoch_end", "(", "self", ".", "epoch", ")", "\n", "\n", "self", ".", "save_models", "(", ")", "\n", "\n", "if", "self", ".", "stop_criterion", "(", "es", ",", "logs", ")", ":", "\n", "                ", "log", ".", "info", "(", "'Finished training from early stopping criterion'", ")", "\n", "\n", "es", ".", "on_train_end", "(", "logs", ")", "\n", "cl", ".", "on_train_end", "(", "logs", ")", "\n", "for", "swa_m", "in", "self", ".", "get_swa_models", "(", ")", ":", "\n", "                    ", "swa_m", ".", "on_train_end", "(", ")", "\n", "\n", "# Set final model parameters based on SWA", "\n", "", "self", ".", "model", ".", "D_Mask", "=", "self", ".", "swa_D_Mask", ".", "model", "\n", "self", ".", "model", ".", "D_Image1", "=", "self", ".", "swa_D_Image1", ".", "model", "\n", "self", ".", "model", ".", "D_Image2", "=", "self", ".", "swa_D_Image2", ".", "model", "\n", "self", ".", "model", ".", "Encoders_Anatomy", "[", "0", "]", "=", "self", ".", "swa_Enc_Anatomy1", ".", "model", "\n", "self", ".", "model", ".", "Encoders_Anatomy", "[", "1", "]", "=", "self", ".", "swa_Enc_Anatomy2", ".", "model", "\n", "self", ".", "model", ".", "Enc_Modality", "=", "self", ".", "swa_Enc_Modality", ".", "model", "\n", "self", ".", "model", ".", "Anatomy_Fuser", "=", "self", ".", "swa_Anatomy_Fuser", ".", "model", "\n", "self", ".", "model", ".", "Segmentor", "=", "self", ".", "swa_Segmentor", ".", "model", "\n", "self", ".", "model", ".", "Decoder", "=", "self", ".", "swa_Decoder", ".", "model", "\n", "self", ".", "model", ".", "Balancer", "=", "self", ".", "swa_Balancer", ".", "model", "\n", "\n", "self", ".", "save_models", "(", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.save_models": [[286, 302], ["log.debug", "dafnet_executor.DAFNetExecutor.swa_D_Mask.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_D_Image1.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_D_Image2.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_Enc_Anatomy1.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_Enc_Anatomy2.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_Enc_Modality.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_Anatomy_Fuser.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_Segmentor.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_Decoder.get_clone_model().save_weights", "dafnet_executor.DAFNetExecutor.swa_Balancer.get_clone_model().save_weights", "os.path.exists", "os.makedirs", "dafnet_executor.DAFNetExecutor.swa_D_Mask.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_D_Image1.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_D_Image2.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Enc_Anatomy1.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Enc_Anatomy2.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Enc_Modality.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Anatomy_Fuser.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Segmentor.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Decoder.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Balancer.get_clone_model"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model"], ["", "", "", "def", "save_models", "(", "self", ",", "postfix", "=", "''", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Saving trained models'", ")", "\n", "model_folder", "=", "self", ".", "conf", ".", "folder", "+", "'/models/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_folder", ")", "\n", "\n", "", "self", ".", "swa_D_Mask", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'D_Mask'", "+", "postfix", ")", "\n", "self", ".", "swa_D_Image1", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'D_Image1'", "+", "postfix", ")", "\n", "self", ".", "swa_D_Image2", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'D_Image2'", "+", "postfix", ")", "\n", "self", ".", "swa_Enc_Anatomy1", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'Enc_Anatomy1'", "+", "postfix", ")", "\n", "self", ".", "swa_Enc_Anatomy2", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'Enc_Anatomy2'", "+", "postfix", ")", "\n", "self", ".", "swa_Enc_Modality", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'Enc_Modality'", "+", "postfix", ")", "\n", "self", ".", "swa_Anatomy_Fuser", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'Anatomy_Fuser'", "+", "postfix", ")", "\n", "self", ".", "swa_Segmentor", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'Segmentor'", "+", "postfix", ")", "\n", "self", ".", "swa_Decoder", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'Decoder'", "+", "postfix", ")", "\n", "self", ".", "swa_Balancer", ".", "get_clone_model", "(", ")", ".", "save_weights", "(", "model_folder", "+", "'Balancer'", "+", "postfix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.validate": [[303, 368], ["dafnet_executor.DAFNetExecutor.loader.load_all_modalities_concatenated", "dafnet_executor.DAFNetExecutor.crop", "dafnet_executor.DAFNetExecutor.get_images_modi", "dafnet_executor.DAFNetExecutor.get_images_modi", "dafnet_executor.DAFNetExecutor.get_masks_modi", "dafnet_executor.DAFNetExecutor.get_masks_modi", "dafnet_executor.DAFNetExecutor.swa_Enc_Anatomy1.get_clone_model().predict", "dafnet_executor.DAFNetExecutor.swa_Enc_Anatomy2.get_clone_model().predict", "dafnet_executor.DAFNetExecutor.swa_Enc_Modality.get_clone_model().predict", "dafnet_executor.DAFNetExecutor.swa_Enc_Modality.get_clone_model().predict", "dafnet_executor.DAFNetExecutor.swa_Anatomy_Fuser.get_clone_model", "dafnet_executor.DAFNetExecutor.predict", "dafnet_executor.DAFNetExecutor.predict", "dafnet_executor.DAFNetExecutor.swa_Segmentor.get_clone_model", "dafnet_executor.DAFNetExecutor.predict", "dafnet_executor.DAFNetExecutor.predict", "dafnet_executor.DAFNetExecutor.predict", "dafnet_executor.DAFNetExecutor.predict", "dafnet_executor.DAFNetExecutor.predict", "dafnet_executor.DAFNetExecutor.predict", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "hasattr", "dafnet_executor.DAFNetExecutor.randomise_pairs", "str", "str", "str", "costs.dice", "costs.dice", "costs.dice", "costs.dice", "costs.dice", "costs.dice", "numpy.mean", "dafnet_executor.DAFNetExecutor.expand_pairs", "dafnet_executor.DAFNetExecutor.get_images_modi", "dafnet_executor.DAFNetExecutor.get_images_modi", "dafnet_executor.DAFNetExecutor.model.Encoders_Anatomy[].predict", "dafnet_executor.DAFNetExecutor.model.Balancer.predict", "range", "dafnet_executor.DAFNetExecutor.swa_Enc_Anatomy1.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Enc_Anatomy2.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Enc_Modality.get_clone_model", "dafnet_executor.DAFNetExecutor.swa_Enc_Modality.get_clone_model", "str", "str", "str", "dafnet_executor.DAFNetExecutor.model.Encoders_Anatomy[].predict", "numpy.mean", "len", "epoch_loss[].append", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.crop", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.randomise_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.expand_pairs", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.get_clone_model"], ["", "def", "validate", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Calculate losses on validation set\n        :param epoch_loss: the dictionary to save the losses\n        \"\"\"", "\n", "valid_data", "=", "self", ".", "loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "'validation'", ",", "\n", "self", ".", "conf", ".", "image_downsample", ")", "\n", "if", "(", "hasattr", "(", "self", ".", "conf", ",", "'randomise'", ")", "and", "self", ".", "conf", ".", "randomise", ")", ":", "\n", "            ", "valid_data", ".", "randomise_pairs", "(", "length", "=", "self", ".", "conf", ".", "n_pairs", "-", "1", ")", "\n", "", "valid_data", ".", "crop", "(", "self", ".", "conf", ".", "input_shape", "[", ":", "2", "]", ")", "\n", "\n", "images0", "=", "valid_data", ".", "get_images_modi", "(", "0", ")", "\n", "images1", "=", "valid_data", ".", "get_images_modi", "(", "1", ")", "\n", "masks0", "=", "valid_data", ".", "get_masks_modi", "(", "0", ")", "\n", "masks1", "=", "valid_data", ".", "get_masks_modi", "(", "1", ")", "\n", "\n", "s1", "=", "self", ".", "swa_Enc_Anatomy1", ".", "get_clone_model", "(", ")", ".", "predict", "(", "images0", ")", "\n", "s2", "=", "self", ".", "swa_Enc_Anatomy2", ".", "get_clone_model", "(", ")", ".", "predict", "(", "images1", ")", "\n", "z1", ",", "_", "=", "self", ".", "swa_Enc_Modality", ".", "get_clone_model", "(", ")", ".", "predict", "(", "[", "s1", ",", "images0", "]", ")", "\n", "z2", ",", "_", "=", "self", ".", "swa_Enc_Modality", ".", "get_clone_model", "(", ")", ".", "predict", "(", "[", "s2", ",", "images1", "]", ")", "\n", "\n", "swa_Anatomy_Fuser_model", "=", "self", ".", "swa_Anatomy_Fuser", ".", "get_clone_model", "(", ")", "\n", "s1_deformed", ",", "s2_fused", "=", "swa_Anatomy_Fuser_model", ".", "predict", "(", "[", "s1", ",", "s2", "]", ")", "\n", "s2_deformed", ",", "s1_fused", "=", "swa_Anatomy_Fuser_model", ".", "predict", "(", "[", "s2", ",", "s1", "]", ")", "\n", "\n", "swa_Segmentor_model", "=", "self", ".", "swa_Segmentor", ".", "get_clone_model", "(", ")", "\n", "\n", "m1_s1", "=", "swa_Segmentor_model", ".", "predict", "(", "s1", ")", "\n", "m2_s2", "=", "swa_Segmentor_model", ".", "predict", "(", "s2", ")", "\n", "m2_s1def", "=", "swa_Segmentor_model", ".", "predict", "(", "s1_deformed", ")", "\n", "m1_s2def", "=", "swa_Segmentor_model", ".", "predict", "(", "s2_deformed", ")", "\n", "m2_fused", "=", "swa_Segmentor_model", ".", "predict", "(", "s2_fused", ")", "\n", "m1_fused", "=", "swa_Segmentor_model", ".", "predict", "(", "s1_fused", ")", "\n", "\n", "assert", "m1_s1", ".", "shape", "[", ":", "-", "1", "]", "==", "images0", ".", "shape", "[", ":", "-", "1", "]", ",", "str", "(", "images0", ")", "+", "' '", "+", "str", "(", "m1_s1", ".", "shape", ")", "\n", "assert", "m2_s2", ".", "shape", "[", ":", "-", "1", "]", "==", "images0", ".", "shape", "[", ":", "-", "1", "]", ",", "str", "(", "images0", ".", "shape", ")", "+", "' '", "+", "str", "(", "m2_s2", ".", "shape", ")", "\n", "assert", "m2_s1def", ".", "shape", "[", ":", "-", "1", "]", "==", "images0", ".", "shape", "[", ":", "-", "1", "]", ",", "str", "(", "images0", ".", "shape", ")", "+", "' '", "+", "str", "(", "m2_s1def", ".", "shape", ")", "\n", "\n", "dice_m1s1", "=", "(", "1", "-", "costs", ".", "dice", "(", "masks0", ",", "m1_s1", ",", "binarise", "=", "True", ")", ")", "\n", "dice_m1s2def", "=", "(", "1", "-", "costs", ".", "dice", "(", "masks0", ",", "m1_s2def", ",", "binarise", "=", "True", ")", ")", "\n", "dice_m1fused", "=", "(", "1", "-", "costs", ".", "dice", "(", "masks0", ",", "m1_fused", ",", "binarise", "=", "True", ")", ")", "\n", "\n", "dice_m2s2", "=", "(", "1", "-", "costs", ".", "dice", "(", "masks1", ",", "m2_s2", ",", "binarise", "=", "True", ")", ")", "\n", "dice_m2s1def", "=", "(", "1", "-", "costs", ".", "dice", "(", "masks1", ",", "m2_s1def", ",", "binarise", "=", "True", ")", ")", "\n", "dice_m2fused", "=", "(", "1", "-", "costs", ".", "dice", "(", "masks1", ",", "m2_fused", ",", "binarise", "=", "True", ")", ")", "\n", "epoch_loss", "[", "'val_loss_mod2'", "]", ".", "append", "(", "dice_m2s2", ")", "\n", "epoch_loss", "[", "'val_loss_mod2_mod1def'", "]", ".", "append", "(", "dice_m2s1def", ")", "\n", "epoch_loss", "[", "'val_loss_mod2_fused'", "]", ".", "append", "(", "dice_m2fused", ")", "\n", "epoch_loss", "[", "'val_loss_mod1_mod2def'", "]", ".", "append", "(", "dice_m1s2def", ")", "\n", "epoch_loss", "[", "'val_loss_mod1_fused'", "]", ".", "append", "(", "dice_m1fused", ")", "\n", "epoch_loss", "[", "'val_loss_mod1'", "]", ".", "append", "(", "dice_m1s1", ")", "\n", "epoch_loss", "[", "'val_loss'", "]", ".", "append", "(", "np", ".", "mean", "(", "[", "dice_m1s1", ",", "dice_m2s2", ",", "dice_m2s1def", ",", "dice_m2fused", "]", ")", ")", "\n", "\n", "if", "self", ".", "conf", ".", "automatedpairing", ":", "\n", "            ", "valid_data", ".", "expand_pairs", "(", "self", ".", "conf", ".", "n_pairs", "-", "1", ",", "0", ",", "neighborhood", "=", "self", ".", "conf", ".", "n_pairs", ")", "\n", "images0", "=", "valid_data", ".", "get_images_modi", "(", "0", ")", "\n", "images0_list", "=", "[", "images0", "[", "...", ",", "i", ":", "i", "+", "1", "]", "for", "i", "in", "range", "(", "images0", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "images1", "=", "valid_data", ".", "get_images_modi", "(", "1", ")", "\n", "s1_list", "=", "[", "self", ".", "model", ".", "Encoders_Anatomy", "[", "0", "]", ".", "predict", "(", "x", ")", "for", "x", "in", "images0_list", "]", "\n", "s2", "=", "self", ".", "model", ".", "Encoders_Anatomy", "[", "1", "]", ".", "predict", "(", "images1", ")", "\n", "\n", "weights", "=", "self", ".", "model", ".", "Balancer", ".", "predict", "(", "[", "s2", "]", "+", "s1_list", ")", "\n", "weights", "=", "[", "np", ".", "mean", "(", "weights", "[", "...", ",", "j", "]", ")", "for", "j", "in", "range", "(", "weights", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "weights", ")", ")", ":", "\n", "                ", "epoch_loss", "[", "'val_weight_%d'", "%", "j", "]", ".", "append", "(", "weights", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_batch": [[369, 388], ["dafnet_executor.DAFNetExecutor.train_supervised_automated_pairing", "dafnet_executor.DAFNetExecutor.train_batch_mask_discriminator", "dafnet_executor.DAFNetExecutor.train_batch_image_discriminator", "dafnet_executor.DAFNetExecutor.train_unsupervised_automated_pairing", "dafnet_executor.DAFNetExecutor.train_batch_mask_discriminator", "dafnet_executor.DAFNetExecutor.train_batch_image_discriminator", "dafnet_executor.DAFNetExecutor.train_supervised_expert_pairing", "dafnet_executor.DAFNetExecutor.train_batch_mask_discriminator", "dafnet_executor.DAFNetExecutor.train_batch_image_discriminator", "dafnet_executor.DAFNetExecutor.train_unsupervised_expert_pairing", "dafnet_executor.DAFNetExecutor.train_batch_mask_discriminator", "dafnet_executor.DAFNetExecutor.train_batch_image_discriminator"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_supervised_automated_pairing", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch_mask_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_batch_image_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_unsupervised_automated_pairing", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch_mask_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_batch_image_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_supervised_expert_pairing", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch_mask_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_batch_image_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_unsupervised_expert_pairing", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch_mask_discriminator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_batch_image_discriminator"], ["", "", "", "def", "train_batch", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "if", "self", ".", "conf", ".", "automatedpairing", ":", "\n", "            ", "if", "self", ".", "conf", ".", "l_mix", ">", "0", ":", "\n", "                ", "self", ".", "train_supervised_automated_pairing", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_mask_discriminator", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_image_discriminator", "(", "epoch_loss", ")", "\n", "", "if", "self", ".", "conf", ".", "l_mix", "<", "1", ":", "\n", "                ", "self", ".", "train_unsupervised_automated_pairing", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_mask_discriminator", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_image_discriminator", "(", "epoch_loss", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "conf", ".", "l_mix", ">", "0", ":", "\n", "                ", "self", ".", "train_supervised_expert_pairing", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_mask_discriminator", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_image_discriminator", "(", "epoch_loss", ")", "\n", "", "if", "self", ".", "conf", ".", "l_mix", "<", "1", ":", "\n", "                ", "self", ".", "train_unsupervised_expert_pairing", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_mask_discriminator", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_image_discriminator", "(", "epoch_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_supervised_expert_pairing": [[389, 412], ["next", "dafnet_executor.DAFNetExecutor.prepare_data_to_train", "numpy.ones", "numpy.ones", "numpy.zeros", "dafnet_executor.DAFNetExecutor.model.supervised_trainer.fit", "dafnet_executor.DAFNetExecutor.store_training_losses", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.prepare_data_to_train", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.store_training_losses"], ["", "", "", "def", "train_supervised_expert_pairing", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Train generator/segmentation networks.\n        :param epoch_loss:  Dictionary of losses for the epoch\n        \"\"\"", "\n", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "m2_pairs", "=", "next", "(", "self", ".", "gen_labelled", ")", "\n", "m1", ",", "m2", ",", "x1", ",", "x1_list", ",", "x2", ",", "x2_list", ",", "z1", ",", "z2", "=", "self", ".", "prepare_data_to_train", "(", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "m2_pairs", ")", "\n", "\n", "batch_size", "=", "x1", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "dm_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Mask", ".", "output_shape", "[", "1", ":", "]", "\n", "dx_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Image1", ".", "output_shape", "[", "1", ":", "]", "\n", "ones_m", "=", "np", ".", "ones", "(", "shape", "=", "dm_shape", ")", "\n", "ones_x", "=", "np", ".", "ones", "(", "shape", "=", "dx_shape", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "shape", "=", "(", "batch_size", ",", ")", ")", "\n", "\n", "h", "=", "self", ".", "model", ".", "supervised_trainer", ".", "fit", "(", "[", "x1", ",", "x2", ",", "z1", ",", "z2", "]", ",", "\n", "[", "m1", ",", "m2", ",", "m1", ",", "m2", "]", "+", "# supervised cost", "\n", "[", "ones_m", "for", "_", "in", "range", "(", "4", ")", "]", "+", "#\u00a0mask adversarial", "\n", "[", "x1", ",", "x2", ",", "x1", ",", "x2", "]", "+", "# reconstruction cost", "\n", "[", "ones_x", "for", "_", "in", "range", "(", "4", ")", "]", "+", "#\u00a0image adversarial", "\n", "[", "zeros", "for", "_", "in", "range", "(", "2", ")", "]", "+", "# KL divergence", "\n", "[", "z1", ",", "z2", "]", ",", "verbose", "=", "False", ")", "\n", "self", ".", "store_training_losses", "(", "h", ",", "epoch_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_unsupervised_expert_pairing": [[413, 435], ["next", "dafnet_executor.DAFNetExecutor.prepare_data_to_train", "numpy.ones", "numpy.ones", "numpy.zeros", "dafnet_executor.DAFNetExecutor.model.unsupervised_trainer.fit", "dafnet_executor.DAFNetExecutor.store_training_losses", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.prepare_data_to_train", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.store_training_losses"], ["", "def", "train_unsupervised_expert_pairing", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Train generator/segmentation networks.\n        :param epoch_loss:  Dictionary of losses for the epoch\n        \"\"\"", "\n", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", "=", "next", "(", "self", ".", "gen_unlabelled", ")", "\n", "m1", ",", "_", ",", "x1", ",", "x1_list", ",", "x2", ",", "x2_list", ",", "z1", ",", "z2", "=", "self", ".", "prepare_data_to_train", "(", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "None", ")", "\n", "\n", "batch_size", "=", "x1", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "dm_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Mask", ".", "output_shape", "[", "1", ":", "]", "\n", "dx_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Image1", ".", "output_shape", "[", "1", ":", "]", "\n", "ones_m", "=", "np", ".", "ones", "(", "shape", "=", "dm_shape", ")", "\n", "ones_x", "=", "np", ".", "ones", "(", "shape", "=", "dx_shape", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "shape", "=", "(", "batch_size", ",", ")", ")", "\n", "h", "=", "self", ".", "model", ".", "unsupervised_trainer", ".", "fit", "(", "[", "x1", ",", "x2", ",", "z1", ",", "z2", "]", ",", "\n", "[", "m1", ",", "m1", "]", "+", "# supervised cost", "\n", "[", "ones_m", "for", "_", "in", "range", "(", "4", ")", "]", "+", "# mask adversarial", "\n", "[", "x1", ",", "x2", ",", "x1", ",", "x2", "]", "+", "# reconstruction cost", "\n", "[", "ones_x", "for", "_", "in", "range", "(", "4", ")", "]", "+", "# image adversarial", "\n", "[", "zeros", "for", "_", "in", "range", "(", "2", ")", "]", "+", "# KL divergence", "\n", "[", "z1", ",", "z2", "]", ",", "verbose", "=", "False", ")", "\n", "self", ".", "store_training_losses", "(", "h", ",", "epoch_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_supervised_automated_pairing": [[436, 458], ["next", "dafnet_executor.DAFNetExecutor.prepare_data_to_train", "numpy.ones", "numpy.ones", "numpy.zeros", "dafnet_executor.DAFNetExecutor.model.supervised_trainer.fit", "dafnet_executor.DAFNetExecutor.store_training_losses", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.prepare_data_to_train", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.store_training_losses"], ["", "def", "train_supervised_automated_pairing", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Train generator/segmentation networks.\n        :param epoch_loss:  Dictionary of losses for the epoch\n        \"\"\"", "\n", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "m2_pairs", "=", "next", "(", "self", ".", "gen_labelled", ")", "\n", "m1", ",", "m2", ",", "x1", ",", "x1_list", ",", "x2", ",", "x2_list", ",", "z1", ",", "z2", "=", "self", ".", "prepare_data_to_train", "(", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "m2_pairs", ")", "\n", "\n", "batch_size", "=", "x1", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "dm_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Mask", ".", "output_shape", "[", "1", ":", "]", "\n", "dx_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Image1", ".", "output_shape", "[", "1", ":", "]", "\n", "ones_m", "=", "np", ".", "ones", "(", "shape", "=", "dm_shape", ")", "\n", "ones_x", "=", "np", ".", "ones", "(", "shape", "=", "dx_shape", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "shape", "=", "(", "batch_size", ",", ")", ")", "\n", "h", "=", "self", ".", "model", ".", "supervised_trainer", ".", "fit", "(", "x1_list", "+", "x2_list", "+", "[", "m1", ",", "m2", ",", "z1", ",", "z2", "]", ",", "\n", "[", "m1", ",", "m2", ",", "zeros", ",", "zeros", "]", "+", "# supervised cost", "\n", "[", "ones_m", "for", "_", "in", "range", "(", "4", ")", "]", "+", "#\u00a0mask adversarial", "\n", "[", "x1", ",", "x2", ",", "zeros", ",", "zeros", "]", "+", "# reconstruction cost", "\n", "[", "ones_x", "for", "_", "in", "range", "(", "4", ")", "]", "+", "#\u00a0image adversarial", "\n", "[", "zeros", "for", "_", "in", "range", "(", "2", ")", "]", "+", "# KL divergence", "\n", "[", "z1", ",", "z2", "]", ",", "verbose", "=", "False", ")", "\n", "self", ".", "store_training_losses", "(", "h", ",", "epoch_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_unsupervised_automated_pairing": [[459, 481], ["next", "dafnet_executor.DAFNetExecutor.prepare_data_to_train", "numpy.ones", "numpy.ones", "numpy.zeros", "dafnet_executor.DAFNetExecutor.model.unsupervised_trainer.fit", "dafnet_executor.DAFNetExecutor.store_training_losses", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.prepare_data_to_train", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.store_training_losses"], ["", "def", "train_unsupervised_automated_pairing", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Train generator/segmentation networks.\n        :param epoch_loss:  Dictionary of losses for the epoch\n        \"\"\"", "\n", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", "=", "next", "(", "self", ".", "gen_unlabelled", ")", "\n", "m1", ",", "_", ",", "x1", ",", "x1_list", ",", "x2", ",", "x2_list", ",", "z1", ",", "z2", "=", "self", ".", "prepare_data_to_train", "(", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "None", ")", "\n", "\n", "batch_size", "=", "x1", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "dm_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Mask", ".", "output_shape", "[", "1", ":", "]", "\n", "dx_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Image1", ".", "output_shape", "[", "1", ":", "]", "\n", "ones_m", "=", "np", ".", "ones", "(", "shape", "=", "dm_shape", ")", "\n", "ones_x", "=", "np", ".", "ones", "(", "shape", "=", "dx_shape", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "shape", "=", "(", "batch_size", ",", ")", ")", "\n", "h", "=", "self", ".", "model", ".", "unsupervised_trainer", ".", "fit", "(", "x1_list", "+", "x2_list", "+", "[", "m1", ",", "z1", ",", "z2", "]", ",", "\n", "[", "m1", ",", "zeros", "]", "+", "# supervised cost", "\n", "[", "ones_m", "for", "_", "in", "range", "(", "4", ")", "]", "+", "#\u00a0mask adversarial", "\n", "[", "x1", ",", "x2", ",", "zeros", ",", "zeros", "]", "+", "# reconstruction cost", "\n", "[", "ones_x", "for", "_", "in", "range", "(", "4", ")", "]", "+", "#\u00a0image adversarial", "\n", "[", "zeros", "for", "_", "in", "range", "(", "2", ")", "]", "+", "# KL divergence", "\n", "[", "z1", ",", "z2", "]", ",", "verbose", "=", "False", ")", "\n", "self", ".", "store_training_losses", "(", "h", ",", "epoch_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.prepare_data_to_train": [[482, 501], ["split_images", "split_images", "dafnet_executor.DAFNetExecutor.add_residual", "utils.distributions.NormalDistribution", "utils.distributions.NormalDistribution", "utils.distributions.NormalDistribution.sample", "utils.distributions.NormalDistribution.sample", "utils.distributions.NormalDistribution.sample", "utils.distributions.NormalDistribution.sample", "dafnet_executor.DAFNetExecutor.align_batches", "dafnet_executor.DAFNetExecutor.align_batches", "dafnet_executor.DAFNetExecutor.add_residual", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.add_residual", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.add_residual"], ["", "def", "prepare_data_to_train", "(", "self", ",", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "m2_pairs", ")", ":", "\n", "        ", "if", "m2_pairs", "is", "not", "None", ":", "\n", "            ", "[", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "m2_pairs", "]", "=", "self", ".", "align_batches", "(", "[", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", ",", "m2_pairs", "]", ")", "\n", "", "else", ":", "\n", "            ", "[", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", "]", "=", "self", ".", "align_batches", "(", "[", "x1_pairs", ",", "x2_pairs", ",", "m1_pairs", "]", ")", "\n", "\n", "", "split_images", "=", "lambda", "x", ":", "[", "x", "[", "...", ",", "i", ":", "i", "+", "1", "]", "for", "i", "in", "range", "(", "self", ".", "conf", ".", "n_pairs", ")", "]", "\n", "x1_list", "=", "split_images", "(", "x1_pairs", ")", "\n", "x2_list", "=", "split_images", "(", "x2_pairs", ")", "\n", "x1", "=", "x1_list", "[", "0", "]", "\n", "x2", "=", "x2_list", "[", "0", "]", "\n", "m1", "=", "self", ".", "add_residual", "(", "m1_pairs", "[", "...", ",", "0", ":", "self", ".", "loader", ".", "num_masks", "]", ")", "\n", "m2", "=", "self", ".", "add_residual", "(", "m2_pairs", "[", "...", ",", "0", ":", "self", ".", "loader", ".", "num_masks", "]", ")", "if", "m2_pairs", "is", "not", "None", "else", "None", "\n", "\n", "batch_size", "=", "x1", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "norm", "=", "NormalDistribution", "(", ")", "\n", "z1", "=", "norm", ".", "sample", "(", "(", "batch_size", ",", "self", ".", "conf", ".", "num_z", ")", ")", "\n", "z2", "=", "norm", ".", "sample", "(", "(", "batch_size", ",", "self", ".", "conf", ".", "num_z", ")", ")", "\n", "return", "m1", ",", "m2", ",", "x1", ",", "x1_list", ",", "x2", ",", "x2_list", ",", "z1", ",", "z2", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.store_training_losses": [[502, 510], ["epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "store_training_losses", "(", "self", ",", "h", ",", "epoch_loss", ")", ":", "\n", "        ", "epoch_loss", "[", "'supervised_Mask'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'Segmentor_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'adv_M'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'D_Mask_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'rec_X'", "]", ".", "append", "(", "np", ".", "mean", "(", "[", "h", ".", "history", "[", "'Decoder_loss'", "]", "]", ")", ")", "\n", "epoch_loss", "[", "'adv_X1'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'D_Image1_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'adv_X2'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'D_Image2_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'KL'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'Enc_Modality_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'rec_Z'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'ZReconstruct_loss'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_batch_mask_discriminator": [[511, 546], ["dafnet_executor.DAFNetExecutor.align_batches", "dafnet_executor.DAFNetExecutor.align_batches", "dafnet_executor.DAFNetExecutor.model.Encoders_Anatomy[].predict", "dafnet_executor.DAFNetExecutor.model.Encoders_Anatomy[].predict", "dafnet_executor.DAFNetExecutor.model.Segmentor.predict", "dafnet_executor.DAFNetExecutor.model.Anatomy_Fuser.predict", "dafnet_executor.DAFNetExecutor.model.Segmentor.predict", "numpy.concatenate", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "dafnet_executor.DAFNetExecutor.model.D_Mask_trainer.fit", "epoch_loss[].append", "dafnet_executor.DAFNetExecutor.model.Segmentor.predict", "dafnet_executor.DAFNetExecutor.model.Anatomy_Fuser.predict", "dafnet_executor.DAFNetExecutor.model.Segmentor.predict", "numpy.concatenate", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "dafnet_executor.DAFNetExecutor.model.D_Mask_trainer.fit", "epoch_loss[].append", "next", "next", "numpy.mean", "numpy.mean", "next", "dafnet_executor.DAFNetExecutor.model.D_Mask.get_output_shape_at", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample"], ["", "def", "train_batch_mask_discriminator", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Jointly train a discriminator for images and masks.\n        :param epoch_loss:  Dictionary of losses for the epoch\n        \"\"\"", "\n", "m1", "=", "next", "(", "self", ".", "discriminator_masks", ")", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "\n", "m2", "=", "next", "(", "self", ".", "discriminator_masks", ")", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "\n", "x1", ",", "x2", "=", "self", ".", "align_batches", "(", "[", "next", "(", "gen", ")", "for", "gen", "in", "self", ".", "discriminator_image", "]", ")", "\n", "x1", ",", "x2", ",", "m1", ",", "m2", "=", "self", ".", "align_batches", "(", "[", "x1", ",", "x2", ",", "m1", ",", "m2", "]", ")", "\n", "batch_size", "=", "x1", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "\n", "m_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Mask", ".", "get_output_shape_at", "(", "0", ")", "[", "1", ":", "]", "\n", "\n", "fake_s1", "=", "self", ".", "model", ".", "Encoders_Anatomy", "[", "0", "]", ".", "predict", "(", "x1", ")", "\n", "fake_s2", "=", "self", ".", "model", ".", "Encoders_Anatomy", "[", "1", "]", ".", "predict", "(", "x2", ")", "\n", "\n", "# modality 1", "\n", "fake_m1", "=", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "fake_s1", ")", "\n", "s2_def", ",", "_", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "[", "fake_s2", ",", "fake_s1", "]", ")", "\n", "fake_m1_from_s2", "=", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "s2_def", ")", "\n", "fake_m1_list", "=", "[", "m", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "for", "m", "in", "[", "fake_m1", ",", "fake_m1_from_s2", "]", "]", "\n", "fake_m1", "=", "np", ".", "concatenate", "(", "fake_m1_list", ",", "axis", "=", "0", ")", "\n", "fake_m1", "=", "utils", ".", "data_utils", ".", "sample", "(", "fake_m1", ",", "batch_size", ")", "\n", "h", "=", "self", ".", "model", ".", "D_Mask_trainer", ".", "fit", "(", "[", "m1", ",", "fake_m1", "]", ",", "[", "np", ".", "ones", "(", "m_shape", ")", ",", "np", ".", "zeros", "(", "m_shape", ")", "]", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'dis_M'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'loss'", "]", ")", ")", "\n", "\n", "# modality 2", "\n", "fake_m2", "=", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "fake_s2", ")", "\n", "s1_def", ",", "_", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "[", "fake_s1", ",", "fake_s2", "]", ")", "\n", "fake_m2_from_s1", "=", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "s1_def", ")", "\n", "fake_m2_list", "=", "[", "m", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "for", "m", "in", "[", "fake_m2", ",", "fake_m2_from_s1", "]", "]", "\n", "fake_m2", "=", "np", ".", "concatenate", "(", "fake_m2_list", ",", "axis", "=", "0", ")", "\n", "fake_m2", "=", "utils", ".", "data_utils", ".", "sample", "(", "fake_m2", ",", "batch_size", ")", "\n", "h", "=", "self", ".", "model", ".", "D_Mask_trainer", ".", "fit", "(", "[", "m2", ",", "fake_m2", "]", ",", "[", "np", ".", "ones", "(", "m_shape", ")", ",", "np", ".", "zeros", "(", "m_shape", ")", "]", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'dis_M'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'loss'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.train_batch_image_discriminator": [[547, 584], ["dafnet_executor.DAFNetExecutor.align_batches", "dafnet_executor.DAFNetExecutor.model.Enc_Modality.predict", "dafnet_executor.DAFNetExecutor.model.Enc_Modality.predict", "dafnet_executor.DAFNetExecutor.model.Decoder.predict", "dafnet_executor.DAFNetExecutor.model.Decoder.predict", "dafnet_executor.DAFNetExecutor.model.Decoder.predict", "dafnet_executor.DAFNetExecutor.model.Decoder.predict", "dafnet_executor.DAFNetExecutor.model.Decoder.predict", "dafnet_executor.DAFNetExecutor.model.Decoder.predict", "numpy.concatenate", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "numpy.concatenate", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "utils.data_utils.sample", "dafnet_executor.DAFNetExecutor.model.D_Image1_trainer.fit", "epoch_loss[].append", "dafnet_executor.DAFNetExecutor.model.D_Image2_trainer.fit", "epoch_loss[].append", "dafnet_executor.DAFNetExecutor.model.Encoders_Anatomy[].predict", "dafnet_executor.DAFNetExecutor.model.Anatomy_Fuser.predict", "dafnet_executor.DAFNetExecutor.model.Anatomy_Fuser.predict", "numpy.mean", "numpy.mean", "next", "range", "list", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.zeros", "len", "reversed"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample"], ["", "def", "train_batch_image_discriminator", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Train an image discriminator.\n        :param epoch_loss:  Dictionary of losses for the epoch\n        \"\"\"", "\n", "x_list", "=", "self", ".", "align_batches", "(", "[", "next", "(", "gen", ")", "for", "gen", "in", "self", ".", "discriminator_image", "]", ")", "\n", "batch_size", "=", "x_list", "[", "0", "]", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "\n", "fake_s_list", "=", "[", "self", ".", "model", ".", "Encoders_Anatomy", "[", "i", "]", ".", "predict", "(", "x_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "model", ".", "modalities", ")", ")", "]", "\n", "\n", "x1", ",", "x2", "=", "x_list", "\n", "s1", ",", "s2", "=", "fake_s_list", "\n", "\n", "s1_def", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "fake_s_list", ")", "[", "0", "]", "\n", "s2_def", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "list", "(", "reversed", "(", "fake_s_list", ")", ")", ")", "[", "0", "]", "\n", "z1", ",", "_", "=", "self", ".", "model", ".", "Enc_Modality", ".", "predict", "(", "[", "s1", ",", "x1", "]", ")", "\n", "z2", ",", "_", "=", "self", ".", "model", ".", "Enc_Modality", ".", "predict", "(", "[", "s2", ",", "x2", "]", ")", "\n", "\n", "y1a", "=", "self", ".", "model", ".", "Decoder", ".", "predict", "(", "[", "s1", ",", "z1", "]", ")", "\n", "y1b", "=", "self", ".", "model", ".", "Decoder", ".", "predict", "(", "[", "s2_def", ",", "z1", "]", ")", "\n", "y1c", "=", "self", ".", "model", ".", "Decoder", ".", "predict", "(", "[", "s1_def", ",", "z1", "]", ")", "\n", "y2a", "=", "self", ".", "model", ".", "Decoder", ".", "predict", "(", "[", "s2", ",", "z2", "]", ")", "\n", "y2b", "=", "self", ".", "model", ".", "Decoder", ".", "predict", "(", "[", "s1_def", ",", "z2", "]", ")", "\n", "y2c", "=", "self", ".", "model", ".", "Decoder", ".", "predict", "(", "[", "s2_def", ",", "z2", "]", ")", "\n", "\n", "y1", "=", "np", ".", "concatenate", "(", "[", "y1a", ",", "y1b", ",", "y1c", "]", ",", "axis", "=", "0", ")", "\n", "y1", "=", "utils", ".", "data_utils", ".", "sample", "(", "y1", ",", "batch_size", ")", "\n", "y2", "=", "np", ".", "concatenate", "(", "[", "y2a", ",", "y2b", ",", "y2c", "]", ",", "axis", "=", "0", ")", "\n", "y2", "=", "utils", ".", "data_utils", ".", "sample", "(", "y2", ",", "batch_size", ")", "\n", "\n", "# Train Discriminator", "\n", "x_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Image1", ".", "output_shape", "[", "1", ":", "]", "\n", "h", "=", "self", ".", "model", ".", "D_Image1_trainer", ".", "fit", "(", "[", "x1", ",", "y1", "]", ",", "[", "np", ".", "ones", "(", "x_shape", ")", ",", "np", ".", "zeros", "(", "x_shape", ")", "]", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'dis_X1'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'loss'", "]", ")", ")", "\n", "\n", "h", "=", "self", ".", "model", ".", "D_Image2_trainer", ".", "fit", "(", "[", "x2", ",", "y2", "]", ",", "[", "np", ".", "ones", "(", "x_shape", ")", ",", "np", ".", "zeros", "(", "x_shape", ")", "]", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'dis_X2'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'loss'", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.__init__": [[18, 24], ["loaders.loader_factory.init_loader"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.loader_factory.init_loader"], ["def", "__init__", "(", "self", ",", "conf", ",", "model", ")", ":", "\n", "        ", "self", ".", "conf", "=", "conf", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loader", "=", "loader_factory", ".", "init_loader", "(", "self", ".", "conf", ".", "dataset_name", ")", "\n", "self", ".", "batch", "=", "0", "\n", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.init_train_data": [[25, 28], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "init_train_data", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_loss_names": [[29, 32], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_loss_names", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.train": [[33, 36], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "train", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator": [[37, 79], ["base_executor.Executor.get_datagen_params", "base_executor.Executor.get_datagen_params", "itertools.zip_longest", "type", "img_gens.append", "type", "msk_gens.append", "len", "len", "itertools.zip_longest", "keras.preprocessing.image.ImageDataGenerator().flow", "keras.preprocessing.image.ImageDataGenerator().flow", "len", "len", "len", "itertools.zip_longest", "Exception", "len", "len", "len", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_datagen_params", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_datagen_params"], ["", "def", "get_data_generator", "(", "self", ",", "train_images", "=", "None", ",", "train_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create a data generator that also augments the data.\n        :param train_images: input data\n        :param train_labels: target data\n        :return              an iterator that gives a tuple of (input, output) data.\n        \"\"\"", "\n", "image_dict", "=", "self", ".", "get_datagen_params", "(", ")", "\n", "mask_dict", "=", "self", ".", "get_datagen_params", "(", ")", "\n", "\n", "img_gens", "=", "[", "]", "\n", "if", "train_images", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "train_images", ")", "!=", "list", ":", "\n", "                ", "train_images", "=", "[", "train_images", "]", "\n", "\n", "", "for", "img_array", "in", "train_images", ":", "\n", "                ", "img_gens", ".", "append", "(", "ImageDataGenerator", "(", "**", "image_dict", ")", ".", "flow", "(", "img_array", ",", "batch_size", "=", "self", ".", "conf", ".", "batch_size", ",", "\n", "seed", "=", "self", ".", "conf", ".", "seed", ")", ")", "\n", "\n", "", "", "msk_gens", "=", "[", "]", "\n", "if", "train_labels", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "train_labels", ")", "!=", "list", ":", "\n", "                ", "train_labels", "=", "[", "train_labels", "]", "\n", "\n", "", "for", "msk_array", "in", "train_labels", ":", "\n", "                ", "msk_gens", ".", "append", "(", "ImageDataGenerator", "(", "**", "mask_dict", ")", ".", "flow", "(", "msk_array", ",", "batch_size", "=", "self", ".", "conf", ".", "batch_size", ",", "\n", "seed", "=", "self", ".", "conf", ".", "seed", ")", ")", "\n", "\n", "", "", "if", "len", "(", "img_gens", ")", ">", "0", "and", "len", "(", "msk_gens", ")", ">", "0", ":", "\n", "            ", "all_data", "=", "img_gens", "+", "msk_gens", "\n", "gen", "=", "itertools", ".", "zip_longest", "(", "*", "all_data", ")", "\n", "return", "gen", "\n", "", "elif", "len", "(", "img_gens", ")", ">", "0", "and", "len", "(", "msk_gens", ")", "==", "0", ":", "\n", "            ", "if", "len", "(", "img_gens", ")", "==", "1", ":", "\n", "                ", "return", "img_gens", "[", "0", "]", "\n", "", "return", "itertools", ".", "zip_longest", "(", "*", "img_gens", ")", "\n", "", "elif", "len", "(", "img_gens", ")", "==", "0", "and", "len", "(", "msk_gens", ")", ">", "0", ":", "\n", "            ", "if", "len", "(", "msk_gens", ")", "==", "1", ":", "\n", "                ", "return", "msk_gens", "[", "0", "]", "\n", "", "return", "itertools", ".", "zip_longest", "(", "*", "msk_gens", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No data to iterate.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.validate": [[80, 82], ["None"], "methods", ["None"], ["", "", "def", "validate", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.add_residual": [[83, 88], ["numpy.ones", "range", "numpy.concatenate"], "methods", ["None"], ["", "def", "add_residual", "(", "self", ",", "data", ")", ":", "\n", "        ", "residual", "=", "np", ".", "ones", "(", "data", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "1", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "residual", "[", "data", "[", "...", ",", "i", ":", "i", "+", "1", "]", "==", "1", "]", "=", "0", "\n", "", "return", "np", ".", "concatenate", "(", "[", "data", ",", "residual", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.test": [[89, 97], ["log.info", "model_tester.ModelTester", "model_tester.ModelTester.run"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.None.experiment.Experiment.run"], ["", "@", "abstractmethod", "\n", "def", "test", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate a model on the test data.\n        \"\"\"", "\n", "log", ".", "info", "(", "'Evaluating model on test data'", ")", "\n", "tester", "=", "ModelTester", "(", "self", ".", "model", ",", "self", ".", "conf", ")", "\n", "tester", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.stop_criterion": [[98, 102], ["es.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end"], ["", "def", "stop_criterion", "(", "self", ",", "es", ",", "logs", ")", ":", "\n", "        ", "es", ".", "on_epoch_end", "(", "self", ".", "epoch", ",", "logs", ")", "\n", "if", "es", ".", "stopped_epoch", ">", "0", ":", "\n", "            ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_datagen_params": [[103, 111], ["dict"], "methods", ["None"], ["", "", "def", "get_datagen_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Construct a dictionary of augmentations.\n        :return: a dictionary of augmentation parameters to use with a keras image processor\n        \"\"\"", "\n", "d", "=", "dict", "(", "horizontal_flip", "=", "False", ",", "vertical_flip", "=", "False", ",", "rotation_range", "=", "20.", ",", "\n", "width_shift_range", "=", "0", ",", "height_shift_range", "=", "0", ",", "zoom_range", "=", "0", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches": [[112, 120], ["numpy.min"], "methods", ["None"], ["", "def", "align_batches", "(", "self", ",", "array_list", ")", ":", "\n", "        ", "\"\"\"\n        Align the arrays of the input list, based on batch size.\n        :param array_list: list of 4-d arrays to align\n        \"\"\"", "\n", "mn", "=", "np", ".", "min", "(", "[", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "array_list", "]", ")", "\n", "new_list", "=", "[", "x", "[", "0", ":", "mn", "]", "+", "0.", "for", "x", "in", "array_list", "]", "\n", "return", "new_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__": [[21, 39], ["model_executors.base_executor.Executor.__init__"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.__init__"], ["def", "__init__", "(", "self", ",", "conf", ",", "model", ")", ":", "\n", "        ", "super", "(", "MMSDNetExecutor", ",", "self", ")", ".", "__init__", "(", "conf", ",", "model", ")", "\n", "self", ".", "exp_clb", "=", "None", "\n", "self", ".", "loader", ".", "modalities", "=", "self", ".", "conf", ".", "modality", "\n", "\n", "self", ".", "gen_labelled", "=", "None", "# iterator for labelled data (supervised learning)", "\n", "self", ".", "gen_unlabelled", "=", "None", "# iterator for unlabelled data (unsupervised learning)", "\n", "self", ".", "discriminator_masks", "=", "None", "# iterator for real masks to train discriminators", "\n", "self", ".", "discriminator_image", "=", "None", "# iterator for images to train discriminators", "\n", "self", ".", "img_callback", "=", "None", "#\u00a0callback to save images", "\n", "self", ".", "data", "=", "None", "# labelled data container of type MultimodalPairedData", "\n", "self", ".", "ul_data", "=", "None", "# unlabelled data container of type MultimodalPairedData", "\n", "\n", "self", ".", "gen_unlabelled_lge", "=", "None", "\n", "self", ".", "gen_unlabelled_cine", "=", "None", "\n", "\n", "self", ".", "img_callback", "=", "None", "\n", "self", ".", "conf", ".", "batches_lge", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.init_train_data": [[40, 48], ["mmsdnet_executor.MMSDNetExecutor._init_labelled_data_generator", "mmsdnet_executor.MMSDNetExecutor._init_unlabelled_data_generator", "mmsdnet_executor.MMSDNetExecutor._init_disciminator_mask_generator", "int", "mmsdnet_executor.MMSDNetExecutor._init_discriminator_image_generator", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_labelled_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_unlabelled_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_disciminator_mask_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_discriminator_image_generator"], ["", "def", "init_train_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "gen_labelled", "=", "self", ".", "_init_labelled_data_generator", "(", ")", "\n", "self", ".", "gen_unlabelled", "=", "self", ".", "_init_unlabelled_data_generator", "(", ")", "\n", "self", ".", "discriminator_masks", "=", "self", ".", "_init_disciminator_mask_generator", "(", ")", "\n", "self", ".", "discriminator_image", "=", "[", "self", ".", "_init_discriminator_image_generator", "(", "mod", ")", "\n", "for", "mod", "in", "self", ".", "model", ".", "modalities", "]", "\n", "\n", "self", ".", "batches", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "data_len", "/", "self", ".", "conf", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_labelled_data_generator": [[49, 64], ["log.info", "mmsdnet_executor.MMSDNetExecutor.loader.load_all_modalities_concatenated", "mmsdnet_executor.MMSDNetExecutor.data.sample", "log.info", "mmsdnet_executor.MMSDNetExecutor.data.size", "mmsdnet_executor.MMSDNetExecutor.get_data_generator", "int", "numpy.round", "str", "mmsdnet_executor.MMSDNetExecutor.data.size", "mmsdnet_executor.MMSDNetExecutor.data.get_images_modi", "mmsdnet_executor.MMSDNetExecutor.data.get_masks_modi", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "_init_labelled_data_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialise a data generator (image, mask) for labelled data\n        \"\"\"", "\n", "if", "self", ".", "conf", ".", "l_mix", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "log", ".", "info", "(", "'Initialising labelled datagen. Loading %s data'", "%", "self", ".", "conf", ".", "dataset_name", ")", "\n", "self", ".", "data", "=", "self", ".", "loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "'training'", ",", "self", ".", "conf", ".", "image_downsample", ")", "\n", "self", ".", "data", ".", "sample", "(", "int", "(", "np", ".", "round", "(", "self", ".", "conf", ".", "l_mix", "*", "self", ".", "data", ".", "num_volumes", ")", ")", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "log", ".", "info", "(", "'labelled data size: '", "+", "str", "(", "self", ".", "data", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "data_len", "=", "self", ".", "data", ".", "size", "(", ")", "\n", "\n", "return", "self", ".", "get_data_generator", "(", "train_images", "=", "[", "self", ".", "data", ".", "get_images_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "\n", "train_labels", "=", "[", "self", ".", "data", ".", "get_masks_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_unlabelled_data_generator": [[65, 79], ["mmsdnet_executor.MMSDNetExecutor._load_unlabelled_data", "mmsdnet_executor.MMSDNetExecutor.ul_data.size", "mmsdnet_executor.MMSDNetExecutor.get_data_generator", "mmsdnet_executor.MMSDNetExecutor.ul_data.size", "mmsdnet_executor.MMSDNetExecutor.ul_data.size", "mmsdnet_executor.MMSDNetExecutor.data.size", "mmsdnet_executor.MMSDNetExecutor.ul_data.get_images_modi", "mmsdnet_executor.MMSDNetExecutor.ul_data.get_masks_modi", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._load_unlabelled_data", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "_init_unlabelled_data_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialise a data generator (image) for unlabelled data\n        \"\"\"", "\n", "if", "self", ".", "conf", ".", "l_mix", "==", "1", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "ul_data", "=", "self", ".", "_load_unlabelled_data", "(", "'training'", ",", "'ul'", ",", "None", ")", "\n", "self", ".", "conf", ".", "unlabelled_image_num", "=", "self", ".", "ul_data", ".", "size", "(", ")", "\n", "if", "self", ".", "data", "is", "None", "or", "self", ".", "ul_data", ".", "size", "(", ")", ">", "self", ".", "data", ".", "size", "(", ")", ":", "\n", "            ", "self", ".", "data_len", "=", "self", ".", "ul_data", ".", "size", "(", ")", "\n", "\n", "", "return", "self", ".", "get_data_generator", "(", "train_images", "=", "[", "self", ".", "ul_data", ".", "get_images_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "\n", "train_labels", "=", "[", "self", ".", "ul_data", ".", "get_masks_modi", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._load_unlabelled_data": [[80, 109], ["log.info", "log.info", "mmsdnet_executor.MMSDNetExecutor.loader.load_all_modalities_concatenated", "log.info", "int", "mmsdnet_executor.MMSDNetExecutor.get_sample_volumes", "mmsdnet_executor.MMSDNetExecutor.filter_volumes", "mmsdnet_executor.MMSDNetExecutor.loader.load_all_data", "Exception", "numpy.round", "str", "mmsdnet_executor.MMSDNetExecutor.volumes", "mmsdnet_executor.MMSDNetExecutor.size", "str"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.get_sample_volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.filter_volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_data", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.volumes", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.size"], ["", "def", "_load_unlabelled_data", "(", "self", ",", "split_type", ",", "data_type", ",", "modality", ")", ":", "\n", "        ", "'''\n        Create a Data object with unlabelled data. This will be used to train the unlabelled path of the\n        generators and produce fake masks for training the discriminator\n        :param split_type:  the split defining which volumes to load\n        :param data_type:   can be one ['ul', 'all']. The second includes images that have masks.\n        :return:            a data object\n        '''", "\n", "log", ".", "info", "(", "'Initialising unlabelled datagen. Loading %s data of type %s'", "%", "(", "self", ".", "conf", ".", "dataset_name", ",", "data_type", ")", ")", "\n", "if", "data_type", "==", "'ul'", ":", "\n", "            ", "log", ".", "info", "(", "'Estimating number of unlabelled images from %s data'", "%", "self", ".", "conf", ".", "dataset_name", ")", "\n", "ul_data", "=", "self", ".", "loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "split_type", ",", "\n", "self", ".", "conf", ".", "image_downsample", ")", "\n", "self", ".", "conf", ".", "num_ul_volumes", "=", "ul_data", ".", "num_volumes", "\n", "\n", "if", "self", ".", "conf", ".", "l_mix", ">", "0", ":", "\n", "                ", "num_lb_vols", "=", "int", "(", "np", ".", "round", "(", "self", ".", "conf", ".", "l_mix", "*", "ul_data", ".", "num_volumes", ")", ")", "\n", "volumes", "=", "ul_data", ".", "get_sample_volumes", "(", "num_lb_vols", ",", "seed", "=", "self", ".", "conf", ".", "seed", ")", "\n", "ul_volumes", "=", "[", "v", "for", "v", "in", "ul_data", ".", "volumes", "(", ")", "if", "v", "not", "in", "volumes", "]", "# ul volumes are the remaining from lbl", "\n", "ul_data", ".", "filter_volumes", "(", "ul_volumes", ")", "\n", "\n", "", "log", ".", "info", "(", "'unlabelled data size: '", "+", "str", "(", "ul_data", ".", "size", "(", ")", ")", ")", "\n", "", "elif", "data_type", "==", "'all'", ":", "\n", "            ", "ul_data", "=", "self", ".", "loader", ".", "load_all_data", "(", "self", ".", "conf", ".", "split", ",", "split_type", ",", "modality", "=", "modality", ",", "\n", "downsample", "=", "self", ".", "conf", ".", "image_downsample", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid data_type: %s'", "%", "str", "(", "data_type", ")", ")", "\n", "\n", "", "return", "ul_data", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_disciminator_mask_generator": [[110, 117], ["log.info", "mmsdnet_executor.MMSDNetExecutor._load_discriminator_masks", "mmsdnet_executor.MMSDNetExecutor.get_data_generator"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._load_discriminator_masks", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator"], ["", "def", "_init_disciminator_mask_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Init a generator for masks to use in the discriminator.\n        \"\"\"", "\n", "log", ".", "info", "(", "'Initialising discriminator maskgen.'", ")", "\n", "masks", "=", "self", ".", "_load_discriminator_masks", "(", ")", "\n", "return", "self", ".", "get_data_generator", "(", "train_images", "=", "None", ",", "train_labels", "=", "[", "masks", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._load_discriminator_masks": [[118, 134], ["numpy.concatenate.append", "numpy.concatenate.append", "len", "numpy.empty", "numpy.concatenate", "numpy.concatenate", "mmsdnet_executor.MMSDNetExecutor.ul_data.get_masks_modi", "mmsdnet_executor.MMSDNetExecutor.data.get_masks_modi", "mmsdnet_executor.MMSDNetExecutor.data.get_masks_modi"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "_load_discriminator_masks", "(", "self", ")", ":", "\n", "        ", "masks", "=", "[", "]", "\n", "if", "self", ".", "data", "is", "not", "None", ":", "\n", "            ", "masks", ".", "append", "(", "np", ".", "concatenate", "(", "[", "self", ".", "data", ".", "get_masks_modi", "(", "0", ")", ",", "self", ".", "data", ".", "get_masks_modi", "(", "1", ")", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "if", "self", ".", "ul_data", "is", "not", "None", ":", "\n", "            ", "masks", ".", "append", "(", "self", ".", "ul_data", ".", "get_masks_modi", "(", "0", ")", ")", "\n", "\n", "", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "            ", "masks", "=", "np", ".", "empty", "(", "shape", "=", "(", "[", "0", "]", "+", "self", ".", "conf", ".", "input_shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "loader", ".", "num_masks", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "masks", "=", "np", ".", "concatenate", "(", "masks", ",", "axis", "=", "0", ")", "\n", "\n", "", "im_shape", "=", "self", ".", "conf", ".", "input_shape", "[", ":", "2", "]", "\n", "assert", "masks", ".", "shape", "[", "1", "]", "==", "im_shape", "[", "0", "]", "and", "masks", ".", "shape", "[", "2", "]", "==", "im_shape", "[", "1", "]", ",", "masks", ".", "shape", "\n", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._init_discriminator_image_generator": [[135, 142], ["log.info", "mmsdnet_executor.MMSDNetExecutor._load_unlabelled_data", "mmsdnet_executor.MMSDNetExecutor.get_data_generator"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor._load_unlabelled_data", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator"], ["", "def", "_init_discriminator_image_generator", "(", "self", ",", "modality", ")", ":", "\n", "        ", "\"\"\"\n        Init a generator for images to train a discriminator (for fake masks)\n        \"\"\"", "\n", "log", ".", "info", "(", "'Initialising discriminator imagegen.'", ")", "\n", "data", "=", "self", ".", "_load_unlabelled_data", "(", "'training'", ",", "'all'", ",", "modality", ")", "\n", "return", "self", ".", "get_data_generator", "(", "train_images", "=", "[", "data", ".", "images", "]", ",", "train_labels", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.init_image_callback": [[143, 154], ["log.info", "mmsdnet_executor.MMSDNetExecutor.get_data_generator", "callbacks.dafnet_image_callback.DAFNetImageCallback", "mmsdnet_executor.MMSDNetExecutor.loader.load_all_modalities_concatenated", "mmsdnet_executor.MMSDNetExecutor.get_images_modi", "mmsdnet_executor.MMSDNetExecutor.get_masks_modi", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.get_data_generator", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi"], ["", "def", "init_image_callback", "(", "self", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Initialising a data generator to use for printing.'", ")", "\n", "\n", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "data", "=", "self", ".", "loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "'training'", ",", "self", ".", "conf", ".", "image_downsample", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "data", "\n", "\n", "", "gen", "=", "self", ".", "get_data_generator", "(", "train_images", "=", "[", "data", ".", "get_images_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "\n", "train_labels", "=", "[", "data", ".", "get_masks_modi", "(", "i", ")", "for", "i", "in", "range", "(", "2", ")", "]", ")", "\n", "self", ".", "img_callback", "=", "DAFNetImageCallback", "(", "self", ".", "conf", ",", "self", ".", "model", ",", "gen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.get_loss_names": [[155, 158], ["None"], "methods", ["None"], ["", "def", "get_loss_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "'adv_M'", ",", "'rec_X'", ",", "'dis_M'", ",", "'val_loss'", ",", "'val_loss_mod1'", ",", "'val_loss_mod2'", ",", "\n", "'val_loss_mod2_s1def'", ",", "'val_loss_mod2_fused'", ",", "'supervised_Mask'", ",", "'loss'", ",", "'KL'", ",", "'rec_Z'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train": [[159, 209], ["log.info", "mmsdnet_executor.MMSDNetExecutor.init_train_data", "mmsdnet_executor.MMSDNetExecutor.init_image_callback", "callbacks.loss_callback.SaveLoss", "keras.callbacks.CSVLogger", "keras.callbacks.CSVLogger.on_train_begin", "keras.callbacks.EarlyStopping", "keras.callbacks.EarlyStopping.on_train_begin", "mmsdnet_executor.MMSDNetExecutor.get_loss_names", "keras.utils.Progbar", "range", "log.info", "range", "mmsdnet_executor.MMSDNetExecutor.validate", "log.info", "keras.callbacks.CSVLogger.on_epoch_end", "callbacks.loss_callback.SaveLoss.on_epoch_end", "mmsdnet_executor.MMSDNetExecutor.img_callback.on_epoch_end", "mmsdnet_executor.MMSDNetExecutor.model.save_models", "mmsdnet_executor.MMSDNetExecutor.stop_criterion", "mmsdnet_executor.MMSDNetExecutor.train_batch", "keras.utils.Progbar.update", "epoch_loss_list.append", "total_loss[].append", "log.info", "numpy.mean", "str", "numpy.mean", "tuple"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.init_train_data", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.init_image_callback", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_begin", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.swa.SWA.on_train_begin", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.get_loss_names", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.validate", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.callbacks.image_callback.SaveEpochImages.on_epoch_end", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.dafnet_executor.DAFNetExecutor.save_models", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.stop_criterion", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "log", ".", "info", "(", "'Training Model'", ")", "\n", "\n", "self", ".", "init_train_data", "(", ")", "\n", "\n", "self", ".", "init_image_callback", "(", ")", "\n", "sl", "=", "SaveLoss", "(", "self", ".", "conf", ".", "folder", ")", "\n", "cl", "=", "CSVLogger", "(", "self", ".", "conf", ".", "folder", "+", "'/training.csv'", ")", "\n", "cl", ".", "on_train_begin", "(", ")", "\n", "\n", "es", "=", "EarlyStopping", "(", "'val_loss_mod2_fused'", ",", "min_delta", "=", "0.01", ",", "patience", "=", "60", ")", "\n", "es", ".", "model", "=", "self", ".", "model", ".", "Segmentor", "\n", "es", ".", "on_train_begin", "(", ")", "\n", "\n", "loss_names", "=", "self", ".", "get_loss_names", "(", ")", "\n", "total_loss", "=", "{", "n", ":", "[", "]", "for", "n", "in", "loss_names", "}", "\n", "\n", "progress_bar", "=", "Progbar", "(", "target", "=", "self", ".", "batches", "*", "self", ".", "conf", ".", "batch_size", ")", "\n", "for", "self", ".", "epoch", "in", "range", "(", "self", ".", "conf", ".", "epochs", ")", ":", "\n", "            ", "log", ".", "info", "(", "'Epoch %d/%d'", "%", "(", "self", ".", "epoch", ",", "self", ".", "conf", ".", "epochs", ")", ")", "\n", "\n", "epoch_loss", "=", "{", "n", ":", "[", "]", "for", "n", "in", "loss_names", "}", "\n", "epoch_loss_list", "=", "[", "]", "\n", "\n", "for", "self", ".", "batch", "in", "range", "(", "self", ".", "batches", ")", ":", "\n", "                ", "self", ".", "train_batch", "(", "epoch_loss", ")", "\n", "progress_bar", ".", "update", "(", "(", "self", ".", "batch", "+", "1", ")", "*", "self", ".", "conf", ".", "batch_size", ")", "\n", "\n", "", "self", ".", "validate", "(", "epoch_loss", ")", "\n", "\n", "for", "n", "in", "loss_names", ":", "\n", "                ", "epoch_loss_list", ".", "append", "(", "(", "n", ",", "np", ".", "mean", "(", "epoch_loss", "[", "n", "]", ")", ")", ")", "\n", "total_loss", "[", "n", "]", ".", "append", "(", "np", ".", "mean", "(", "epoch_loss", "[", "n", "]", ")", ")", "\n", "", "log", ".", "info", "(", "str", "(", "'Epoch %d/%d: '", "+", "', '", ".", "join", "(", "[", "l", "+", "' Loss = %.3f'", "for", "l", "in", "loss_names", "]", ")", ")", "%", "\n", "(", "(", "self", ".", "epoch", ",", "self", ".", "conf", ".", "epochs", ")", "+", "tuple", "(", "total_loss", "[", "l", "]", "[", "-", "1", "]", "for", "l", "in", "loss_names", ")", ")", ")", "\n", "logs", "=", "{", "l", ":", "total_loss", "[", "l", "]", "[", "-", "1", "]", "for", "l", "in", "loss_names", "}", "\n", "\n", "cl", ".", "model", "=", "self", ".", "model", ".", "D_Mask", "\n", "cl", ".", "model", ".", "stop_training", "=", "False", "\n", "cl", ".", "on_epoch_end", "(", "self", ".", "epoch", ",", "logs", ")", "\n", "sl", ".", "on_epoch_end", "(", "self", ".", "epoch", ",", "logs", ")", "\n", "\n", "# Plot some example images", "\n", "self", ".", "img_callback", ".", "on_epoch_end", "(", "self", ".", "epoch", ")", "\n", "\n", "self", ".", "model", ".", "save_models", "(", ")", "\n", "\n", "if", "self", ".", "stop_criterion", "(", "es", ",", "logs", ")", ":", "\n", "                ", "log", ".", "info", "(", "'Finished training from early stopping criterion'", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.validate": [[210, 237], ["mmsdnet_executor.MMSDNetExecutor.loader.load_all_modalities_concatenated", "mmsdnet_executor.MMSDNetExecutor.crop", "mmsdnet_executor.MMSDNetExecutor.get_images_modi", "mmsdnet_executor.MMSDNetExecutor.get_images_modi", "mmsdnet_executor.MMSDNetExecutor.get_masks_modi", "mmsdnet_executor.MMSDNetExecutor.get_masks_modi", "mmsdnet_executor.MMSDNetExecutor.model.Encoders_Anatomy[].predict", "mmsdnet_executor.MMSDNetExecutor.model.Encoders_Anatomy[].predict", "mmsdnet_executor.MMSDNetExecutor.model.Anatomy_Fuser.predict", "mmsdnet_executor.MMSDNetExecutor.model.Segmentor.predict", "mmsdnet_executor.MMSDNetExecutor.model.Segmentor.predict", "mmsdnet_executor.MMSDNetExecutor.model.Segmentor.predict", "mmsdnet_executor.MMSDNetExecutor.model.Segmentor.predict", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "costs.dice", "costs.dice", "costs.dice", "costs.dice", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.chaos.ChaosLoader.load_all_modalities_concatenated", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.crop", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_images_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.MultimodalPairedData.MultimodalPairedData.get_masks_modi", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_components.balancer.dice"], ["", "", "", "def", "validate", "(", "self", ",", "epoch_loss", ")", ":", "\n", "# Report validation error", "\n", "        ", "valid_data", "=", "self", ".", "loader", ".", "load_all_modalities_concatenated", "(", "self", ".", "conf", ".", "split", ",", "'validation'", ",", "self", ".", "conf", ".", "image_downsample", ")", "\n", "valid_data", ".", "crop", "(", "self", ".", "conf", ".", "input_shape", "[", ":", "2", "]", ")", "\n", "\n", "images0", "=", "valid_data", ".", "get_images_modi", "(", "0", ")", "\n", "images1", "=", "valid_data", ".", "get_images_modi", "(", "1", ")", "\n", "real_mask0", "=", "valid_data", ".", "get_masks_modi", "(", "0", ")", "\n", "real_mask1", "=", "valid_data", ".", "get_masks_modi", "(", "1", ")", "\n", "\n", "s1", "=", "self", ".", "model", ".", "Encoders_Anatomy", "[", "0", "]", ".", "predict", "(", "images0", ")", "\n", "s2", "=", "self", ".", "model", ".", "Encoders_Anatomy", "[", "1", "]", ".", "predict", "(", "images1", ")", "\n", "s1_deformed", ",", "s_fused", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "[", "s1", ",", "s2", "]", ")", "\n", "mask1", "=", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "s1", ")", "\n", "mask2", "=", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "s2", ")", "\n", "mask3", "=", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "s1_deformed", ")", "\n", "mask4", "=", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "s_fused", ")", "\n", "\n", "l_mod1", "=", "(", "1", "-", "costs", ".", "dice", "(", "real_mask0", ",", "mask1", ",", "binarise", "=", "True", ")", ")", "\n", "l_mod2", "=", "(", "1", "-", "costs", ".", "dice", "(", "real_mask1", ",", "mask2", ",", "binarise", "=", "True", ")", ")", "\n", "l_mod2_s1def", "=", "(", "1", "-", "costs", ".", "dice", "(", "real_mask1", ",", "mask3", ",", "binarise", "=", "True", ")", ")", "\n", "l_mod2_fused", "=", "(", "1", "-", "costs", ".", "dice", "(", "real_mask1", ",", "mask4", ",", "binarise", "=", "True", ")", ")", "\n", "epoch_loss", "[", "'val_loss_mod2'", "]", ".", "append", "(", "l_mod2", ")", "\n", "epoch_loss", "[", "'val_loss_mod2_s1def'", "]", ".", "append", "(", "l_mod2_s1def", ")", "\n", "epoch_loss", "[", "'val_loss_mod2_fused'", "]", ".", "append", "(", "l_mod2_fused", ")", "\n", "epoch_loss", "[", "'val_loss_mod1'", "]", ".", "append", "(", "l_mod1", ")", "\n", "epoch_loss", "[", "'val_loss'", "]", ".", "append", "(", "np", ".", "mean", "(", "[", "l_mod1", ",", "l_mod2", ",", "l_mod2_s1def", ",", "l_mod2_fused", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch": [[238, 241], ["mmsdnet_executor.MMSDNetExecutor.train_batch_generators", "mmsdnet_executor.MMSDNetExecutor.train_batch_mask_discriminator"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch_generators", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch_mask_discriminator"], ["", "def", "train_batch", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "self", ".", "train_batch_generators", "(", "epoch_loss", ")", "\n", "self", ".", "train_batch_mask_discriminator", "(", "epoch_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch_generators": [[242, 307], ["len", "next", "mmsdnet_executor.MMSDNetExecutor.align_batches", "numpy.ones", "mmsdnet_executor.MMSDNetExecutor.model.supervised_trainer.fit", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "utils.distributions.NormalDistribution", "mmsdnet_executor.MMSDNetExecutor.model.Anatomy_Fuser.predict", "mmsdnet_executor.MMSDNetExecutor.model.Anatomy_Fuser.predict", "mmsdnet_executor.MMSDNetExecutor.model.Z_Regressor.fit", "epoch_loss[].append", "next", "mmsdnet_executor.MMSDNetExecutor.align_batches", "numpy.ones", "mmsdnet_executor.MMSDNetExecutor.model.unsupervised_trainer.fit", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "epoch_loss[].append", "utils.distributions.NormalDistribution", "mmsdnet_executor.MMSDNetExecutor.model.Anatomy_Fuser.predict", "mmsdnet_executor.MMSDNetExecutor.model.Anatomy_Fuser.predict", "mmsdnet_executor.MMSDNetExecutor.model.Z_Regressor.fit", "epoch_loss[].append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "mmsdnet_executor.MMSDNetExecutor.model.Encoders_Anatomy[].predict", "list", "utils.distributions.NormalDistribution.sample", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "mmsdnet_executor.MMSDNetExecutor.model.Encoders_Anatomy[].predict", "list", "utils.distributions.NormalDistribution.sample", "numpy.mean", "numpy.zeros", "enumerate", "reversed", "range", "numpy.zeros", "enumerate", "reversed", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample"], ["", "def", "train_batch_generators", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Train generator/segmentation networks.\n        :param epoch_loss:  Dictionary of losses for the epoch\n        \"\"\"", "\n", "num_mod", "=", "len", "(", "self", ".", "model", ".", "modalities", ")", "\n", "\n", "if", "self", ".", "conf", ".", "l_mix", ">", "0", ":", "\n", "            ", "x1", ",", "x2", ",", "m1", ",", "m2", "=", "next", "(", "self", ".", "gen_labelled", ")", "\n", "[", "x1", ",", "x2", ",", "m1", ",", "m2", "]", "=", "self", ".", "align_batches", "(", "[", "x1", ",", "x2", ",", "m1", ",", "m2", "]", ")", "\n", "batch_size", "=", "x1", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "dm_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Mask", ".", "output_shape", "[", "1", ":", "]", "\n", "ones_m", "=", "np", ".", "ones", "(", "shape", "=", "dm_shape", ")", "\n", "\n", "# Train labelled path (supervised_model)", "\n", "all_outputs", "=", "[", "m1", ",", "m2", ",", "m2", ",", "m2", ",", "m1", ",", "m1", "]", "+", "[", "ones_m", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "+", "[", "x1", ",", "x2", ",", "x2", ",", "x2", ",", "x1", ",", "x1", "]", "+", "[", "np", ".", "zeros", "(", "batch_size", ")", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "\n", "h", "=", "self", ".", "model", ".", "supervised_trainer", ".", "fit", "(", "[", "x1", ",", "x2", "]", ",", "all_outputs", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'supervised_Mask'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'Segmentor_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'adv_M'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'D_Mask_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'rec_X'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'Decoder_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'KL'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'Enc_Modality_loss'", "]", ")", ")", "\n", "\n", "# Train Z Regressor", "\n", "norm", "=", "NormalDistribution", "(", ")", "\n", "s_list", "=", "[", "self", ".", "model", ".", "Encoders_Anatomy", "[", "i", "]", ".", "predict", "(", "x", ")", "for", "i", ",", "x", "in", "enumerate", "(", "[", "x1", ",", "x2", "]", ")", "]", "\n", "s1_def", ",", "s1_fused", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "s_list", ")", "\n", "s2_def", ",", "s2_fused", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "list", "(", "reversed", "(", "s_list", ")", ")", ")", "\n", "s_list", "+=", "[", "s1_def", ",", "s1_fused", "]", "\n", "s_list", "+=", "[", "s2_def", ",", "s2_fused", "]", "\n", "z_list", "=", "[", "norm", ".", "sample", "(", "(", "batch_size", ",", "self", ".", "conf", ".", "num_z", ")", ")", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "\n", "h", "=", "self", ".", "model", ".", "Z_Regressor", ".", "fit", "(", "s_list", "+", "z_list", ",", "z_list", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'rec_Z'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'loss'", "]", ")", ")", "\n", "\n", "# Train unlabelled path", "\n", "", "if", "self", ".", "conf", ".", "l_mix", "<", "1", ":", "\n", "            ", "x1", ",", "x2", ",", "m1", "=", "next", "(", "self", ".", "gen_unlabelled", ")", "\n", "[", "x1", ",", "x2", ",", "m1", "]", "=", "self", ".", "align_batches", "(", "[", "x1", ",", "x2", ",", "m1", "]", ")", "\n", "batch_size", "=", "x1", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "dm_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Mask", ".", "output_shape", "[", "1", ":", "]", "\n", "ones_m", "=", "np", ".", "ones", "(", "shape", "=", "dm_shape", ")", "\n", "\n", "# Train unlabelled path (G_model)", "\n", "all_outputs", "=", "[", "m1", ",", "m1", ",", "m1", "]", "+", "[", "ones_m", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "+", "[", "x1", ",", "x2", ",", "x2", ",", "x2", ",", "x1", ",", "x1", "]", "+", "[", "np", ".", "zeros", "(", "batch_size", ")", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "\n", "h", "=", "self", ".", "model", ".", "unsupervised_trainer", ".", "fit", "(", "[", "x1", ",", "x2", "]", ",", "all_outputs", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'supervised_Mask'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'Segmentor_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'adv_M'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'D_Mask_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'rec_X'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'Decoder_loss'", "]", ")", ")", "\n", "epoch_loss", "[", "'KL'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'Enc_Modality_loss'", "]", ")", ")", "\n", "\n", "# Train Z Regressor", "\n", "norm", "=", "NormalDistribution", "(", ")", "\n", "s_list", "=", "[", "self", ".", "model", ".", "Encoders_Anatomy", "[", "i", "]", ".", "predict", "(", "x", ")", "for", "i", ",", "x", "in", "enumerate", "(", "[", "x1", ",", "x2", "]", ")", "]", "\n", "s1_def", ",", "s1_fused", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "s_list", ")", "\n", "s2_def", ",", "s2_fused", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "list", "(", "reversed", "(", "s_list", ")", ")", ")", "\n", "s_list", "+=", "[", "s1_def", ",", "s1_fused", "]", "\n", "s_list", "+=", "[", "s2_def", ",", "s2_fused", "]", "\n", "z_list", "=", "[", "norm", ".", "sample", "(", "(", "batch_size", ",", "self", ".", "conf", ".", "num_z", ")", ")", "for", "_", "in", "range", "(", "num_mod", "*", "3", ")", "]", "\n", "h", "=", "self", ".", "model", ".", "Z_Regressor", ".", "fit", "(", "s_list", "+", "z_list", ",", "z_list", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'rec_Z'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'loss'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.mmsdnet_executor.MMSDNetExecutor.train_batch_mask_discriminator": [[308, 332], ["next", "mmsdnet_executor.MMSDNetExecutor.align_batches", "mmsdnet_executor.MMSDNetExecutor.align_batches", "mmsdnet_executor.MMSDNetExecutor.align_batches", "len", "mmsdnet_executor.MMSDNetExecutor.model.Anatomy_Fuser.predict", "utils.data_utils.sample", "mmsdnet_executor.MMSDNetExecutor.model.D_Mask_trainer.fit", "epoch_loss[].append", "mmsdnet_executor.MMSDNetExecutor.model.Encoders_Anatomy[].predict", "mmsdnet_executor.MMSDNetExecutor.model.Segmentor.predict", "mmsdnet_executor.MMSDNetExecutor.model.Segmentor.predict", "numpy.concatenate", "numpy.mean", "next", "range", "range", "mmsdnet_executor.MMSDNetExecutor.model.D_Mask.get_output_shape_at", "numpy.ones", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.model_executors.base_executor.Executor.align_batches", "home.repos.pwc.inspect_result.vios-s_multimodal_segmentation.loaders.data.Data.sample"], ["", "", "def", "train_batch_mask_discriminator", "(", "self", ",", "epoch_loss", ")", ":", "\n", "        ", "\"\"\"\n        Jointly train a discriminator for images and masks.\n        :param epoch_loss:  Dictionary of losses for the epoch\n        \"\"\"", "\n", "m", "=", "next", "(", "self", ".", "discriminator_masks", ")", "\n", "m", "=", "m", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "\n", "x_list", "=", "self", ".", "align_batches", "(", "[", "next", "(", "gen", ")", "for", "gen", "in", "self", ".", "discriminator_image", "]", ")", "\n", "x_0", ",", "m", "=", "self", ".", "align_batches", "(", "[", "x_list", "[", "0", "]", ",", "m", "]", ")", "\n", "x_list", "=", "self", ".", "align_batches", "(", "[", "x_0", "]", "+", "x_list", "[", "1", ":", "]", ")", "\n", "batch_size", "=", "m", ".", "shape", "[", "0", "]", "# maybe this differs from conf.batch_size at the last batch.", "\n", "\n", "num_mod", "=", "len", "(", "self", ".", "model", ".", "modalities", ")", "\n", "fake_s_list", "=", "[", "self", ".", "model", ".", "Encoders_Anatomy", "[", "i", "]", ".", "predict", "(", "x_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "fake_m_list", "=", "[", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "fake_s_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_mod", ")", "]", "\n", "s1_def", ",", "s1_fused", "=", "self", ".", "model", ".", "Anatomy_Fuser", ".", "predict", "(", "fake_s_list", ")", "\n", "fake_m_list", "+=", "[", "self", ".", "model", ".", "Segmentor", ".", "predict", "(", "s", ")", "for", "s", "in", "[", "s1_def", ",", "s1_fused", "]", "]", "\n", "fake_m", "=", "np", ".", "concatenate", "(", "fake_m_list", ",", "axis", "=", "0", ")", "[", "...", ",", "0", ":", "self", ".", "conf", ".", "num_masks", "]", "\n", "fake_m", "=", "utils", ".", "data_utils", ".", "sample", "(", "fake_m", ",", "batch_size", ")", "\n", "\n", "# Train Discriminator", "\n", "m_shape", "=", "(", "batch_size", ",", ")", "+", "self", ".", "model", ".", "D_Mask", ".", "get_output_shape_at", "(", "0", ")", "[", "1", ":", "]", "\n", "h", "=", "self", ".", "model", ".", "D_Mask_trainer", ".", "fit", "(", "[", "m", ",", "fake_m", "]", ",", "[", "np", ".", "ones", "(", "m_shape", ")", ",", "np", ".", "zeros", "(", "m_shape", ")", "]", ",", "epochs", "=", "1", ",", "verbose", "=", "0", ")", "\n", "epoch_loss", "[", "'dis_M'", "]", ".", "append", "(", "np", ".", "mean", "(", "h", ".", "history", "[", "'D_Mask_loss'", "]", ")", ")", "\n", "", "", ""]]}