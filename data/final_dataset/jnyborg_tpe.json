{"home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.Identity.__call__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.RandomSamplePixels.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_pixels", ")", ":", "\n", "        ", "self", ".", "num_pixels", "=", "num_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.RandomSamplePixels.__call__": [[24, 44], ["numpy.repeat", "random.sample", "numpy.ones", "valid_pixels[].astype", "range", "numpy.zeros", "numpy.stack", "numpy.array", "numpy.ones", "range", "range", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "pixels", "=", "sample", "[", "'pixels'", "]", "\n", "T", ",", "C", ",", "S", "=", "pixels", ".", "shape", "\n", "if", "S", ">", "self", ".", "num_pixels", ":", "\n", "            ", "indices", "=", "random", ".", "sample", "(", "range", "(", "S", ")", ",", "self", ".", "num_pixels", ")", "\n", "x", "=", "pixels", "[", ":", ",", ":", ",", "indices", "]", "\n", "valid_pixels", "=", "np", ".", "ones", "(", "self", ".", "num_pixels", ")", "\n", "", "elif", "S", "<", "self", ".", "num_pixels", ":", "\n", "            ", "x", "=", "np", ".", "zeros", "(", "(", "T", ",", "C", ",", "self", ".", "num_pixels", ")", ")", "\n", "x", "[", "...", ",", ":", "S", "]", "=", "pixels", "\n", "x", "[", "...", ",", "S", ":", "]", "=", "np", ".", "stack", "(", "[", "x", "[", ":", ",", ":", ",", "0", "]", "for", "_", "in", "range", "(", "S", ",", "self", ".", "num_pixels", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "valid_pixels", "=", "np", ".", "array", "(", "[", "1", "for", "_", "in", "range", "(", "S", ")", "]", "+", "[", "0", "for", "_", "in", "range", "(", "S", ",", "self", ".", "num_pixels", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "pixels", "\n", "valid_pixels", "=", "np", ".", "ones", "(", "self", ".", "num_pixels", ")", "\n", "# Repeat valid_pixels across time", "\n", "", "valid_pixels", "=", "np", ".", "repeat", "(", "valid_pixels", "[", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "x", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "sample", "[", "'pixels'", "]", "=", "x", "\n", "sample", "[", "'valid_pixels'", "]", "=", "valid_pixels", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.RandomSampleTimeSteps.__init__": [[53, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seq_length", ")", ":", "\n", "        ", "self", ".", "seq_length", "=", "seq_length", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.RandomSampleTimeSteps.__call__": [[56, 73], ["sorted", "random.sample", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "seq_length", "==", "-", "1", ":", "\n", "            ", "return", "sample", "\n", "", "pixels", ",", "date_positions", ",", "valid_pixels", ",", "gdd", "=", "sample", "[", "'pixels'", "]", ",", "sample", "[", "'positions'", "]", ",", "sample", "[", "'valid_pixels'", "]", ",", "sample", "[", "'gdd'", "]", "\n", "t", "=", "pixels", ".", "shape", "[", "0", "]", "\n", "if", "t", ">", "self", ".", "seq_length", ":", "\n", "            ", "indices", "=", "sorted", "(", "random", ".", "sample", "(", "range", "(", "t", ")", ",", "self", ".", "seq_length", ")", ")", "\n", "sample", "[", "'pixels'", "]", "=", "pixels", "[", "indices", "]", "\n", "sample", "[", "'positions'", "]", "=", "date_positions", "[", "indices", "]", "\n", "sample", "[", "'valid_pixels'", "]", "=", "valid_pixels", "[", "indices", "]", "\n", "sample", "[", "'gdd'", "]", "=", "gdd", "[", "indices", "]", "\n", "", "elif", "t", "==", "self", ".", "seq_length", ":", "\n", "            ", "return", "sample", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.ShiftAug.__init__": [[85, 88], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_shift", "=", "60", ",", "p", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "max_shift", "=", "max_shift", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.ShiftAug.__call__": [[89, 95], ["random.random", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "shift", "=", "random", ".", "randint", "(", "-", "self", ".", "max_shift", ",", "self", ".", "max_shift", ")", "\n", "sample", "[", "'positions'", "]", "=", "sample", "[", "'positions'", "]", "+", "shift", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.Normalize.__init__": [[104, 114], ["numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_pixel_value", "=", "65535", ")", ":", "\n", "        ", "self", ".", "max_pixel_value", "=", "max_pixel_value", "\n", "\n", "# approximate max values", "\n", "max_parcel_box_m", "=", "10000", "\n", "max_perimeter", "=", "max_parcel_box_m", "*", "4", "\n", "max_area", "=", "max_parcel_box_m", "**", "2", "\n", "max_perimeter_area_ratio", "=", "max_perimeter", "\n", "max_cover_ratio", "=", "1.0", "\n", "self", ".", "max_extra_values", "=", "np", ".", "array", "(", "[", "max_perimeter", ",", "max_area", ",", "max_perimeter_area_ratio", ",", "max_cover_ratio", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.Normalize.__call__": [[115, 121], ["numpy.clip().astype", "sample[].astype", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'pixels'", "]", "=", "np", ".", "clip", "(", "sample", "[", "'pixels'", "]", ",", "0", ",", "self", ".", "max_pixel_value", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "self", ".", "max_pixel_value", "\n", "\n", "if", "'extra'", "in", "sample", ":", "\n", "            ", "sample", "[", "'extra'", "]", "=", "sample", "[", "'extra'", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "self", ".", "max_extra_values", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.transforms.ToTensor.__call__": [[123, 133], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "isinstance", "sample[].astype", "sample[].astype", "sample[].astype", "sample[].astype", "torch.from_numpy", "torch.tensor().long", "sample[].astype", "torch.tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "'pixels'", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "'pixels'", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "sample", "[", "'valid_pixels'", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "'valid_pixels'", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "sample", "[", "'positions'", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "'positions'", "]", ".", "astype", "(", "np", ".", "long", ")", ")", "\n", "sample", "[", "'gdd'", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "'gdd'", "]", ".", "astype", "(", "np", ".", "long", ")", ")", "\n", "if", "'extra'", "in", "sample", ":", "\n", "            ", "sample", "[", "'extra'", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "'extra'", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "if", "isinstance", "(", "sample", "[", "'label'", "]", ",", "int", ")", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "torch", ".", "tensor", "(", "sample", "[", "'label'", "]", ")", ".", "long", "(", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.main": [[36, 155], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "range", "train.overall_performance", "print", "train.overall_performance", "print", "train.overall_performance", "print", "os.path.join", "print", "dataset.create_evaluation_loaders", "models.stclassifier.PseGru.to", "os.path.join", "print", "models.stclassifier.PseGru.load_state_dict", "evaluation.evaluation", "train.save_results", "print", "train.overall_performance", "print", "dataset.create_evaluation_loaders", "models.stclassifier.PseLTae", "print", "print", "os.path.isfile", "torch.utils.tensorboard.SummaryWriter", "train.train_supervised", "torch.load", "torch.load", "torch.load", "evaluation.evaluation", "print", "train.save_results", "models.stclassifier.PseTae", "train.get_num_trainable_params", "input", "models.stclassifier.PseTempCNN", "distutils.util.strtobool", "print", "models.stclassifier.PseGru", "NotImplementedError", "len"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.None.train.overall_performance", "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.overall_performance", "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.overall_performance", "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.create_evaluation_loaders", "home.repos.pwc.inspect_result.jnyborg_tpe.None.evaluation.evaluation", "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.save_results", "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.overall_performance", "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.create_evaluation_loaders", "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.train_supervised", "home.repos.pwc.inspect_result.jnyborg_tpe.None.evaluation.evaluation", "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.save_results", "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.get_num_trainable_params"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "# ensure deterministic behavior for conv", "\n", "device", "=", "torch", ".", "device", "(", "config", ".", "device", ")", "\n", "\n", "if", "config", ".", "overall", ":", "\n", "        ", "print", "(", "'Source result'", ")", "\n", "overall_performance", "(", "config", ",", "for_target", "=", "False", ")", "\n", "print", "(", "'\\nTarget result'", ")", "\n", "overall_performance", "(", "config", ",", "for_target", "=", "True", ")", "\n", "return", "\n", "\n", "", "for", "fold_num", "in", "range", "(", "config", ".", "num_folds", ")", ":", "\n", "        ", "print", "(", "f\"Starting fold {fold_num}...\"", ")", "\n", "\n", "config", ".", "fold_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "f\"fold_{fold_num}\"", ")", "\n", "config", ".", "fold_num", "=", "fold_num", "\n", "\n", "sample_pixels_val", "=", "config", ".", "sample_pixels_val", "or", "(", "\n", "config", ".", "eval", "and", "config", ".", "temporal_shift", "\n", ")", "\n", "print", "(", "'creating source evaluation loaders'", ")", "\n", "source_val_loader", ",", "source_test_loader", "=", "create_evaluation_loaders", "(", "\n", "config", ".", "source", ",", "config", ",", "sample_pixels_val", "\n", ")", "\n", "if", "config", ".", "eval_target", ":", "\n", "            ", "print", "(", "'creating target evaluation loaders'", ")", "\n", "target_val_loader", ",", "target_test_loader", "=", "create_evaluation_loaders", "(", "\n", "config", ".", "target", ",", "config", ",", "sample_pixels_val", "\n", ")", "\n", "", "else", ":", "\n", "            ", "target_val_loader", ",", "target_test_loader", "=", "None", ",", "None", "\n", "\n", "", "if", "config", ".", "model", "==", "\"pseltae\"", ":", "\n", "            ", "model", "=", "PseLTae", "(", "\n", "input_dim", "=", "config", ".", "input_dim", ",", "\n", "num_classes", "=", "config", ".", "num_classes", ",", "\n", "with_extra", "=", "config", ".", "with_extra", ",", "\n", "with_gdd_extra", "=", "config", ".", "with_gdd_extra", ",", "\n", "with_pos_enc", "=", "config", ".", "with_pos_enc", ",", "\n", "with_gdd_pos", "=", "config", ".", "with_gdd_pos", ",", "\n", "pos_type", "=", "config", ".", "pos_type", ",", "\n", ")", "\n", "", "elif", "config", ".", "model", "==", "\"psetae\"", ":", "\n", "            ", "model", "=", "PseTae", "(", "\n", "input_dim", "=", "config", ".", "input_dim", ",", "\n", "num_classes", "=", "config", ".", "num_classes", ",", "\n", "with_extra", "=", "config", ".", "with_extra", ",", "\n", "pos_type", "=", "config", ".", "pos_type", "\n", ")", "\n", "", "elif", "config", ".", "model", "==", "\"psetcnn\"", ":", "\n", "            ", "model", "=", "PseTempCNN", "(", "\n", "input_dim", "=", "config", ".", "input_dim", ",", "\n", "num_classes", "=", "config", ".", "num_classes", ",", "\n", "with_extra", "=", "config", ".", "with_extra", ",", "\n", ")", "\n", "", "elif", "config", ".", "model", "==", "\"psegru\"", ":", "\n", "            ", "model", "=", "PseGru", "(", "\n", "input_dim", "=", "config", ".", "input_dim", ",", "\n", "num_classes", "=", "config", ".", "num_classes", ",", "\n", "with_extra", "=", "config", ".", "with_extra", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "model", ".", "to", "(", "config", ".", "device", ")", "\n", "\n", "best_model_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "fold_dir", ",", "\"model.pt\"", ")", "\n", "\n", "if", "not", "config", ".", "eval", ":", "\n", "            ", "print", "(", "model", ")", "\n", "print", "(", "\"Number of trainable parameters:\"", ",", "get_num_trainable_params", "(", "model", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_model_path", ")", ":", "\n", "                ", "answer", "=", "input", "(", "\n", "f\"Model already exists at {best_model_path}! Override y/[n]? \"", "\n", ")", "\n", "override", "=", "strtobool", "(", "answer", ")", "if", "len", "(", "answer", ")", ">", "0", "else", "False", "\n", "if", "not", "override", ":", "\n", "                    ", "print", "(", "\"Skipping fold\"", ",", "fold_num", ")", "\n", "continue", "\n", "\n", "", "", "writer", "=", "SummaryWriter", "(", "\n", "log_dir", "=", "f\"{config.tensorboard_log_dir}_fold{fold_num}\"", ",", "purge_step", "=", "0", "\n", ")", "\n", "train_supervised", "(", "\n", "model", ",", "config", ",", "writer", ",", "source_val_loader", ",", "target_val_loader", ",", "device", ",", "best_model_path", "\n", ")", "\n", "\n", "", "print", "(", "\"Restoring best model weights for testing...\"", ")", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "best_model_path", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "test_metrics", "=", "evaluation", "(", "\n", "model", ",", "source_test_loader", ",", "device", ",", "config", ".", "classes", ",", "mode", "=", "\"test\"", "\n", ")", "\n", "save_results", "(", "test_metrics", ",", "config", ",", "for_target", "=", "False", ")", "\n", "\n", "print", "(", "\n", "f\"Test result for {config.experiment_name} on source: accuracy={test_metrics['accuracy']:.4f}, f1={test_metrics['macro_f1']:.4f}\"", "\n", ")", "\n", "\n", "if", "config", ".", "eval_target", ":", "\n", "            ", "test_metrics", "=", "evaluation", "(", "\n", "model", ",", "target_test_loader", ",", "device", ",", "config", ".", "classes", ",", "mode", "=", "\"test\"", "\n", ")", "\n", "\n", "print", "(", "\n", "f\"Test result for {config.experiment_name} on target: accuracy={test_metrics['accuracy']:.4f}, f1={test_metrics['macro_f1']:.4f}\"", "\n", ")", "\n", "\n", "save_results", "(", "test_metrics", ",", "config", ",", "for_target", "=", "True", ")", "\n", "\n", "", "", "overall_performance", "(", "config", ",", "for_target", "=", "False", ")", "\n", "if", "config", ".", "eval_target", ":", "\n", "        ", "overall_performance", "(", "config", ",", "for_target", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.get_num_trainable_params": [[157, 159], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "", "def", "get_num_trainable_params", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.train_supervised": [[161, 302], ["model.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torchvision.transforms.transforms.Compose", "dataset.PixelSetData", "min", "print", "utils.focal_loss.FocalLoss", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "model.parameters", "dataset.PixelSetData.get_labels", "collections.Counter", "torch.utils.data.sampler.WeightedRandomSampler", "print", "torch.utils.data.DataLoader", "len", "model.train", "utils.train_utils.AverageMeter", "iter", "tqdm.tqdm", "tqdm.tqdm.close", "model.eval", "evaluation.validation", "print", "transforms.RandomSamplePixels", "transforms.RandomSampleTimeSteps", "transforms.Normalize", "transforms.ToTensor", "len", "dataset.PixelSetData.get_tiles", "collections.Counter", "torch.utils.data.sampler.WeightedRandomSampler", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "next", "sample[].cuda", "utils.train_utils.to_cuda", "model.forward", "utils.focal_loss.FocalLoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "utils.train_utils.AverageMeter.update", "evaluation.validation", "transforms.ShiftAug", "transforms.Identity", "len", "len", "len", "criterion.item", "tqdm.tqdm.set_postfix", "writer.add_scalar", "writer.add_scalar"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.get_labels", "home.repos.pwc.inspect_result.jnyborg_tpe.None.evaluation.validation", "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.get_tiles", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.to_cuda", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.forward", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.jnyborg_tpe.None.evaluation.validation"], ["", "def", "train_supervised", "(", "\n", "model", ",", "config", ",", "writer", ",", "source_val_loader", ",", "target_val_loader", ",", "device", ",", "best_model_path", "\n", ")", ":", "\n", "    ", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ",", "weight_decay", "=", "config", ".", "weight_decay", "\n", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "RandomSamplePixels", "(", "config", ".", "num_pixels", ")", ",", "\n", "RandomSampleTimeSteps", "(", "config", ".", "seq_length", ")", ",", "\n", "ShiftAug", "(", "max_shift", "=", "60", ",", "p", "=", "1.0", ")", "if", "config", ".", "with_shift_aug", "else", "Identity", "(", ")", ",", "\n", "Normalize", "(", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "datasets", "=", "config", ".", "source", "\n", "if", "config", ".", "train_on_target", ":", "\n", "        ", "datasets", "=", "config", ".", "target", "\n", "\n", "", "train_dataset", "=", "PixelSetData", "(", "\n", "config", ".", "data_root", ",", "\n", "datasets", ",", "\n", "config", ".", "classes", ",", "\n", "train_transform", ",", "\n", "split", "=", "'train'", ",", "\n", "fold_num", "=", "config", ".", "fold_num", ",", "\n", ")", "\n", "\n", "if", "config", ".", "class_balance", ":", "\n", "        ", "source_labels", "=", "train_dataset", ".", "get_labels", "(", ")", "\n", "freq", "=", "Counter", "(", "source_labels", ")", "\n", "class_weight", "=", "{", "x", ":", "1.0", "/", "freq", "[", "x", "]", "for", "x", "in", "freq", "}", "\n", "source_weights", "=", "[", "class_weight", "[", "x", "]", "for", "x", "in", "source_labels", "]", "\n", "sampler", "=", "WeightedRandomSampler", "(", "source_weights", ",", "len", "(", "source_labels", ")", ")", "\n", "print", "(", "\"using class balanced training loader\"", ")", "\n", "train_data_loader", "=", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "elif", "config", ".", "tile_balance", ":", "\n", "        ", "source_tiles", "=", "train_dataset", ".", "get_tiles", "(", ")", "\n", "freq", "=", "Counter", "(", "source_tiles", ")", "\n", "tile_weights", "=", "{", "x", ":", "1.0", "/", "freq", "[", "x", "]", "for", "x", "in", "freq", "}", "\n", "tile_weights", "=", "[", "tile_weights", "[", "x", "]", "for", "x", "in", "source_tiles", "]", "\n", "sampler", "=", "WeightedRandomSampler", "(", "tile_weights", ",", "len", "(", "source_tiles", ")", ")", "\n", "print", "(", "\"using tile balanced training loader\"", ")", "\n", "train_data_loader", "=", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "train_data_loader", "=", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "", "steps_per_epoch", "=", "min", "(", "config", ".", "steps_per_epoch", ",", "len", "(", "train_data_loader", ")", ")", "\n", "print", "(", "f\"training dataset: {datasets}, n={len(train_dataset)}, batches={len(train_data_loader)}, steps={steps_per_epoch}\"", ")", "\n", "\n", "criterion", "=", "FocalLoss", "(", "gamma", "=", "config", ".", "focal_loss_gamma", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "T_max", "=", "config", ".", "epochs", "*", "steps_per_epoch", ",", "eta_min", "=", "0", "\n", ")", "\n", "\n", "best_f1_src", ",", "best_f1_trg", "=", "0", ",", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "config", ".", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "train_iter", "=", "iter", "(", "train_data_loader", ")", "\n", "\n", "progress_bar", "=", "tqdm", "(", "\n", "range", "(", "steps_per_epoch", ")", ",", "\n", "total", "=", "steps_per_epoch", ",", "\n", "desc", "=", "f\"Epoch {epoch + 1}/{config.epochs}\"", ",", "\n", ")", "\n", "global_step", "=", "epoch", "*", "steps_per_epoch", "\n", "for", "step", "in", "progress_bar", ":", "\n", "            ", "sample", "=", "next", "(", "train_iter", ")", "\n", "targets", "=", "sample", "[", "\"label\"", "]", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "pixels", ",", "mask", ",", "positions", ",", "extra", ",", "gdd", "=", "to_cuda", "(", "sample", ",", "device", ")", "\n", "outputs", "=", "model", ".", "forward", "(", "pixels", ",", "mask", ",", "positions", ",", "extra", ",", "gdd", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", "=", "config", ".", "batch_size", ")", "\n", "\n", "if", "step", "%", "config", ".", "log_step", "==", "0", ":", "\n", "                ", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "progress_bar", ".", "set_postfix", "(", "lr", "=", "f\"{lr:.1E}\"", ",", "loss", "=", "f\"{loss_meter.avg:.3f}\"", ")", "\n", "writer", ".", "add_scalar", "(", "\"train/loss\"", ",", "loss_meter", ".", "val", ",", "global_step", "+", "step", ")", "\n", "writer", ".", "add_scalar", "(", "\"train/lr\"", ",", "lr", ",", "global_step", "+", "step", ")", "\n", "\n", "", "", "progress_bar", ".", "close", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "best_f1_src", "=", "validation", "(", "\n", "best_f1_src", ",", "\n", "best_model_path", ",", "\n", "config", ",", "\n", "criterion", ",", "\n", "device", ",", "\n", "epoch", ",", "\n", "model", ",", "\n", "source_val_loader", ",", "\n", "writer", ",", "\n", ")", "\n", "if", "config", ".", "eval_target", ":", "\n", "            ", "best_f1_trg", "=", "validation", "(", "\n", "best_f1_trg", ",", "\n", "None", ",", "\n", "config", ",", "\n", "criterion", ",", "\n", "device", ",", "\n", "epoch", ",", "\n", "model", ",", "\n", "target_val_loader", ",", "\n", "writer", ",", "\n", "prefix", "=", "\"val_target\"", ",", "\n", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.create_train_val_test_folds": [[304, 335], ["range", "folds.append", "len", "int", "int", "random.shuffle", "set", "set", "set", "type", "list", "list", "set.intersection", "set", "range", "range", "len", "len", "len"], "function", ["None"], ["", "", "def", "create_train_val_test_folds", "(", "\n", "datasets", ",", "num_folds", ",", "num_indices", ",", "val_ratio", "=", "0.1", ",", "test_ratio", "=", "0.2", "\n", ")", ":", "\n", "    ", "folds", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_folds", ")", ":", "\n", "        ", "splits", "=", "{", "}", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "if", "type", "(", "num_indices", ")", "==", "dict", ":", "\n", "                ", "indices", "=", "list", "(", "range", "(", "num_indices", "[", "dataset", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "indices", "=", "list", "(", "range", "(", "num_indices", ")", ")", "\n", "", "n", "=", "len", "(", "indices", ")", "\n", "n_test", "=", "int", "(", "test_ratio", "*", "n", ")", "\n", "n_val", "=", "int", "(", "val_ratio", "*", "n", ")", "\n", "n_train", "=", "n", "-", "n_test", "-", "n_val", "\n", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "train_indices", "=", "set", "(", "indices", "[", ":", "n_train", "]", ")", "\n", "val_indices", "=", "set", "(", "indices", "[", "n_train", ":", "n_train", "+", "n_val", "]", ")", "\n", "test_indices", "=", "set", "(", "indices", "[", "-", "n_test", ":", "]", ")", "\n", "assert", "set", ".", "intersection", "(", "train_indices", ",", "val_indices", ",", "test_indices", ")", "==", "set", "(", ")", "\n", "assert", "len", "(", "train_indices", ")", "+", "len", "(", "val_indices", ")", "+", "len", "(", "test_indices", ")", "==", "n", "\n", "\n", "splits", "[", "dataset", "]", "=", "{", "\n", "\"train\"", ":", "train_indices", ",", "\n", "\"val\"", ":", "val_indices", ",", "\n", "\"test\"", ":", "test_indices", ",", "\n", "}", "\n", "", "folds", ".", "append", "(", "splits", ")", "\n", "", "return", "folds", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.save_results": [[337, 354], ["copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "pickle.dump", "open", "json.dump", "open", "outfile.write", "open", "os.path.join", "os.path.join", "str", "os.path.join", "str().replace", "str().replace", "str", "str"], "function", ["None"], ["", "def", "save_results", "(", "metrics", ",", "config", ",", "for_target", "=", "True", ")", ":", "\n", "    ", "out_dir", "=", "config", ".", "fold_dir", "\n", "metrics", "=", "deepcopy", "(", "metrics", ")", "\n", "conf_mat", "=", "metrics", ".", "pop", "(", "\"confusion_matrix\"", ")", "\n", "class_report", "=", "metrics", ".", "pop", "(", "\"classification_report\"", ")", "\n", "if", "for_target", ":", "\n", "        ", "target_name", "=", "','", ".", "join", "(", "[", "str", "(", "tile", ")", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "for", "tile", "in", "config", ".", "target", "]", ")", "\n", "", "else", ":", "\n", "        ", "target_name", "=", "','", ".", "join", "(", "[", "str", "(", "tile", ")", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "for", "tile", "in", "config", ".", "source", "]", ")", "\n", "\n", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"test_metrics_{target_name}.json\"", ")", ",", "\"w\"", "\n", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "metrics", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"class_report_{target_name}.txt\"", ")", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "        ", "outfile", ".", "write", "(", "str", "(", "class_report", ")", ")", "\n", "", "pkl", ".", "dump", "(", "conf_mat", ",", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "f\"conf_mat_{target_name}.pkl\"", ")", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.train.overall_performance": [[356, 391], ["collections.defaultdict", "range", "enumerate", "print", "print", "collections.defaultdict.items", "os.path.join", "json.load", "json.load.items", "pickle.load", "cms.append", "numpy.mean", "print", "utils.metrics.overall_classification_report", "numpy.array", "open", "file.write", "open", "overall_metrics[].append", "open", "row.astype", "print", "print", "os.path.join", "json.dumps", "str().replace", "str().replace", "os.path.join", "os.path.join", "str", "str", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.overall_classification_report"], ["", "def", "overall_performance", "(", "config", ",", "for_target", "=", "True", ")", ":", "\n", "    ", "overall_metrics", "=", "defaultdict", "(", "list", ")", "\n", "if", "for_target", ":", "\n", "        ", "target_name", "=", "','", ".", "join", "(", "[", "str", "(", "tile", ")", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "for", "tile", "in", "config", ".", "target", "]", ")", "\n", "", "else", ":", "\n", "        ", "target_name", "=", "','", ".", "join", "(", "[", "str", "(", "tile", ")", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "for", "tile", "in", "config", ".", "source", "]", ")", "\n", "\n", "", "cms", "=", "[", "]", "\n", "for", "fold", "in", "range", "(", "config", ".", "num_folds", ")", ":", "\n", "        ", "fold_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "f\"fold_{fold}\"", ")", "\n", "test_metrics", "=", "json", ".", "load", "(", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "fold_dir", ",", "f\"test_metrics_{target_name}.json\"", ")", ")", "\n", ")", "\n", "for", "metric", ",", "value", "in", "test_metrics", ".", "items", "(", ")", ":", "\n", "            ", "overall_metrics", "[", "metric", "]", ".", "append", "(", "value", ")", "\n", "", "cm", "=", "pkl", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "fold_dir", ",", "f\"conf_mat_{target_name}.pkl\"", ")", ",", "\"rb\"", ")", ")", "\n", "cms", ".", "append", "(", "cm", ")", "\n", "\n", "", "for", "i", ",", "row", "in", "enumerate", "(", "np", ".", "mean", "(", "cms", ",", "axis", "=", "0", ")", ")", ":", "\n", "        ", "print", "(", "config", ".", "classes", "[", "i", "]", ",", "row", ".", "astype", "(", "int", ")", ")", "\n", "\n", "", "print", "(", "f\"Overall result across {config.num_folds} folds:\"", ")", "\n", "print", "(", "overall_classification_report", "(", "cms", ",", "config", ".", "classes", ")", ")", "\n", "for", "metric", ",", "values", "in", "overall_metrics", ".", "items", "(", ")", ":", "\n", "        ", "values", "=", "np", ".", "array", "(", "values", ")", "\n", "if", "metric", "==", "\"loss\"", ":", "\n", "            ", "print", "(", "f\"{metric}: {np.mean(values):.4}\u00b1{np.std(values):.4}\"", ")", "\n", "", "else", ":", "\n", "            ", "values", "*=", "100", "\n", "print", "(", "f\"{metric}: {np.mean(values):.1f}\u00b1{np.std(values):.1f}\"", ")", "\n", "\n", "", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "config", ".", "output_dir", ",", "f\"overall_{target_name}.json\"", ")", ",", "\"w\"", "\n", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "json", ".", "dumps", "(", "overall_metrics", ",", "indent", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.__init__": [[33, 75], ["torch.utils.data.Dataset.__init__", "isinstance", "sorted", "json.load", "open", "os.path.join", "os.path.join", "os.path.join", "dataset.PixelSetData.make_dataset", "dataset.PixelSetData.samples.extend", "dataset.PixelSetData.sample_tiles.extend", "enumerate", "enumerate", "os.path.join", "dataset.split", "len"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.make_dataset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_root", ",", "\n", "datasets", ",", "\n", "classes", ",", "\n", "transform", "=", "None", ",", "\n", "split", "=", "None", ",", "\n", "fold_num", "=", "0", ",", "\n", "with_extra", "=", "False", ",", "\n", "split_by_block", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PixelSetData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "with_extra", "=", "with_extra", "\n", "self", ".", "split_by_block", "=", "split_by_block", "\n", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "{", "cls", ":", "idx", "for", "idx", ",", "cls", "in", "enumerate", "(", "classes", ")", "}", "\n", "\n", "if", "isinstance", "(", "datasets", ",", "str", ")", ":", "\n", "            ", "datasets", "=", "[", "datasets", "]", "\n", "\n", "", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "tiles", "=", "sorted", "(", "datasets", ")", "\n", "self", ".", "sample_tiles", "=", "[", "]", "\n", "self", ".", "tile_to_idx", "=", "{", "tile", ":", "idx", "for", "idx", ",", "tile", "in", "enumerate", "(", "datasets", ")", "}", "\n", "dataset_split", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'dataset_split.json'", ")", ",", "'r'", ")", ")", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "if", "split", "is", "not", "None", ":", "\n", "                ", "indices", "=", "dataset_split", "[", "dataset", "]", "[", "fold_num", "]", "[", "split", "]", "\n", "", "else", ":", "\n", "                ", "indices", "=", "None", "\n", "", "country", "=", "dataset", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "\n", "folder", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "dataset", ")", "\n", "data_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "\"data\"", ")", "\n", "meta_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "\"meta\"", ")", "\n", "samples", "=", "self", ".", "make_dataset", "(", "\n", "data_folder", ",", "meta_folder", ",", "self", ".", "class_to_idx", ",", "indices", ",", "country", "\n", ")", "\n", "self", ".", "samples", ".", "extend", "(", "samples", ")", "\n", "self", ".", "sample_tiles", ".", "extend", "(", "[", "self", ".", "tile_to_idx", "[", "dataset", "]", "]", "*", "len", "(", "samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.get_shapes": [[77, 81], ["len"], "methods", ["None"], ["", "", "def", "get_shapes", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "len", "(", "dates", ")", ",", "10", ",", "n_pixels", ")", "\n", "for", "_", ",", "dates", ",", "n_pixels", ",", "_", ",", "_", ",", "_", "in", "self", ".", "samples", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.get_labels": [[83, 85], ["numpy.array"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "x", "[", "3", "]", "for", "x", "in", "self", ".", "samples", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.get_tiles": [[86, 88], ["None"], "methods", ["None"], ["", "def", "get_tiles", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_tiles", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.__len__": [[89, 91], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.__getitem__": [[92, 111], ["zarr.load", "numpy.ones", "numpy.array", "numpy.array", "numpy.array", "dataset.PixelSetData.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "date_positions", ",", "n_pixels", ",", "y", ",", "extra", ",", "gdd", "=", "self", ".", "samples", "[", "index", "]", "\n", "pixels", "=", "zarr", ".", "load", "(", "path", ")", "# (T, C, S)", "\n", "\n", "sample", "=", "{", "\n", "\"index\"", ":", "index", ",", "\n", "\"pixels\"", ":", "pixels", ",", "\n", "\"valid_pixels\"", ":", "np", ".", "ones", "(", "\n", "(", "pixels", ".", "shape", "[", "0", "]", ",", "pixels", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "\"positions\"", ":", "np", ".", "array", "(", "date_positions", ")", ",", "\n", "\"extra\"", ":", "np", ".", "array", "(", "extra", ")", ",", "\n", "\"gdd\"", ":", "np", ".", "array", "(", "gdd", ")", ",", "\n", "\"label\"", ":", "y", ",", "\n", "}", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.make_dataset": [[112, 168], ["pickle.load", "pickle.load", "utils.label_utils.get_code_to_class", "set", "dataset.PixelSetData.days_after", "enumerate", "open", "open", "os.path.join", "utils.label_utils.get_code_to_class.get", "class_to_idx.get", "numpy.maximum", "numpy.cumsum", "instances.append", "os.path.join", "os.path.join", "str", "set.add", "math.isnan", "int", "numpy.minimum", "numpy.maximum"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_code_to_class", "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.days_after", "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.maximum", "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.minimum", "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.maximum"], ["", "def", "make_dataset", "(", "self", ",", "data_folder", ",", "meta_folder", ",", "class_to_idx", ",", "indices", ",", "country", ")", ":", "\n", "        ", "metadata", "=", "pkl", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "meta_folder", ",", "\"metadata.pkl\"", ")", ",", "\"rb\"", ")", ")", "\n", "weather_data", "=", "pkl", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "meta_folder", ",", "\"weather_data.pkl\"", ")", ",", "\"rb\"", ")", ")", "\n", "\n", "instances", "=", "[", "]", "\n", "code_to_class_name", "=", "label_utils", ".", "get_code_to_class", "(", "country", ")", "\n", "unknown_crop_codes", "=", "set", "(", ")", "\n", "\n", "dates", "=", "metadata", "[", "\"dates\"", "]", "\n", "date_positions", "=", "self", ".", "days_after", "(", "metadata", "[", "\"start_date\"", "]", ",", "dates", ")", "\n", "\n", "\n", "for", "parcel_idx", ",", "parcel", "in", "enumerate", "(", "metadata", "[", "\"parcels\"", "]", ")", ":", "\n", "# split data train/val/test", "\n", "            ", "if", "indices", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "split_by_block", ":", "\n", "                    ", "if", "not", "parcel", "[", "'block'", "]", "in", "indices", ":", "\n", "                        ", "continue", "\n", "", "", "else", ":", "\n", "                    ", "if", "not", "parcel_idx", "in", "indices", ":", "\n", "                        ", "continue", "\n", "\n", "# parse labels", "\n", "", "", "", "crop_code", "=", "parcel", "[", "\"label\"", "]", "\n", "if", "country", "in", "[", "'austria'", ",", "'denmark'", "]", ":", "\n", "                ", "if", "country", "==", "'denmark'", "and", "math", ".", "isnan", "(", "crop_code", ")", ":", "\n", "                    ", "crop_code", "=", "-", "1", "# set to unknown if nan", "\n", "", "else", ":", "\n", "                    ", "crop_code", "=", "int", "(", "crop_code", ")", "\n", "", "", "else", ":", "\n", "                ", "crop_code", "=", "str", "(", "crop_code", ")", "\n", "", "parcel_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "f\"{parcel_idx}.zarr\"", ")", "\n", "if", "crop_code", "not", "in", "code_to_class_name", ":", "\n", "                ", "unknown_crop_codes", ".", "add", "(", "crop_code", ")", "\n", "", "class_name", "=", "code_to_class_name", ".", "get", "(", "crop_code", ",", "\"unknown\"", ")", "\n", "\n", "if", "class_name", "not", "in", "class_to_idx", ":", "\n", "                ", "continue", "\n", "", "class_index", "=", "class_to_idx", ".", "get", "(", "class_name", ")", "\n", "\n", "extra", "=", "parcel", "[", "'geometric_features'", "]", "\n", "n_pixels", "=", "parcel", "[", "\"n_pixels\"", "]", "\n", "t_min", "=", "weather_data", "[", "'t_min'", "]", "[", "parcel_idx", "]", "\n", "t_max", "=", "weather_data", "[", "'t_max'", "]", "[", "parcel_idx", "]", "\n", "\n", "t_base", ",", "t_cap", "=", "0", ",", "30", "\n", "gdd", "=", "np", ".", "maximum", "(", "\n", "(", "np", ".", "minimum", "(", "t_max", ",", "t_cap", ")", "+", "np", ".", "maximum", "(", "t_min", ",", "t_base", ")", ")", "/", "2", "-", "t_base", ",", "0", "\n", ")", "\n", "gdd", "=", "np", ".", "cumsum", "(", "gdd", ",", "axis", "=", "0", ")", "\n", "gdd", "=", "gdd", "[", "date_positions", "]", "\n", "\n", "item", "=", "(", "parcel_path", ",", "date_positions", ",", "n_pixels", ",", "class_index", ",", "extra", ",", "gdd", ")", "\n", "instances", ".", "append", "(", "item", ")", "\n", "\n", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.days_after": [[169, 179], ["str", "abs", "dataset.PixelSetData.days_after.interval_days"], "methods", ["None"], ["", "def", "days_after", "(", "self", ",", "start_date", ",", "dates", ")", ":", "\n", "        ", "def", "parse", "(", "date", ")", ":", "\n", "            ", "d", "=", "str", "(", "date", ")", "\n", "return", "int", "(", "d", "[", ":", "4", "]", ")", ",", "int", "(", "d", "[", "4", ":", "6", "]", ")", ",", "int", "(", "d", "[", "6", ":", "]", ")", "\n", "\n", "", "def", "interval_days", "(", "date1", ",", "date2", ")", ":", "\n", "            ", "return", "abs", "(", "(", "dt", ".", "datetime", "(", "*", "parse", "(", "date1", ")", ")", "-", "dt", ".", "datetime", "(", "*", "parse", "(", "date2", ")", ")", ")", ".", "days", ")", "\n", "\n", "", "date_positions", "=", "[", "interval_days", "(", "d", ",", "start_date", ")", "for", "d", "in", "dates", "]", "\n", "return", "date_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.get_unknown_labels": [[180, 225], ["collections.defaultdict", "collections.defaultdict", "utils.label_utils.get_code_to_class", "utils.label_utils.get_codification_table", "collections.defaultdict", "collections.defaultdict.items", "print", "collections.defaultdict.items", "reversed", "print", "sum", "print", "reversed", "sorted", "print", "collections.defaultdict.items", "int", "known[].append", "reversed.append", "sum", "len", "sorted", "print", "str"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_code_to_class", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_codification_table"], ["", "def", "get_unknown_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reports the categorization of crop codes for this dataset\n        \"\"\"", "\n", "class_count", "=", "defaultdict", "(", "int", ")", "\n", "class_parcel_size", "=", "defaultdict", "(", "float", ")", "\n", "# metadata = pkl.load(open(os.path.join(self.meta_folder, 'metadata.pkl'), 'rb'))", "\n", "metadata", "=", "self", ".", "metadata", "\n", "for", "meta", "in", "metadata", "[", "\"parcels\"", "]", ":", "\n", "            ", "class_count", "[", "meta", "[", "\"label\"", "]", "]", "+=", "1", "\n", "class_parcel_size", "[", "meta", "[", "\"label\"", "]", "]", "+=", "meta", "[", "\"n_pixels\"", "]", "\n", "\n", "", "class_avg_parcel_size", "=", "{", "\n", "cls", ":", "total_px", "/", "class_count", "[", "cls", "]", "\n", "for", "cls", ",", "total_px", "in", "class_parcel_size", ".", "items", "(", ")", "\n", "}", "\n", "\n", "code_to_class_name", "=", "label_utils", ".", "get_code_to_class", "(", "self", ".", "country", ")", "\n", "codification_table", "=", "label_utils", ".", "get_codification_table", "(", "self", ".", "country", ")", "\n", "unknown", "=", "[", "]", "\n", "known", "=", "defaultdict", "(", "list", ")", "\n", "for", "code", ",", "count", "in", "class_count", ".", "items", "(", ")", ":", "\n", "            ", "avg_pixels", "=", "class_avg_parcel_size", "[", "code", "]", "\n", "if", "self", ".", "country", "==", "\"denmark\"", ":", "\n", "                ", "code", "=", "int", "(", "code", ")", "\n", "", "code_name", "=", "codification_table", "[", "str", "(", "code", ")", "]", "\n", "if", "code", "in", "code_to_class_name", ":", "\n", "                ", "known", "[", "code_to_class_name", "[", "code", "]", "]", ".", "append", "(", "\n", "(", "code", ",", "code_name", ",", "count", ",", "avg_pixels", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "unknown", ".", "append", "(", "(", "code", ",", "code_name", ",", "count", ",", "avg_pixels", ")", ")", "\n", "\n", "", "", "print", "(", "\"\\nCategorized crop codes:\"", ")", "\n", "for", "class_name", ",", "codes", "in", "known", ".", "items", "(", ")", ":", "\n", "            ", "total_parcels", "=", "sum", "(", "x", "[", "2", "]", "for", "x", "in", "codes", ")", "\n", "avg_parcel_size", "=", "sum", "(", "x", "[", "3", "]", "for", "x", "in", "codes", ")", "/", "len", "(", "codes", ")", "\n", "print", "(", "f\"{class_name} (n={total_parcels}, avg size={avg_parcel_size:.3f}):\"", ")", "\n", "codes", "=", "reversed", "(", "sorted", "(", "codes", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", ")", "\n", "for", "code", ",", "code_name", ",", "count", ",", "avg_pixels", "in", "codes", ":", "\n", "                ", "print", "(", "f\"  {code}: {code_name} (n={count}, avg pixels={avg_pixels:.1f})\"", ")", "\n", "", "", "unknown", "=", "reversed", "(", "sorted", "(", "unknown", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", ")", "\n", "print", "(", "\"\\nUncategorized crop codes:\"", ")", "\n", "for", "code", ",", "code_name", ",", "count", ",", "avg_pixels", "in", "unknown", ":", "\n", "            ", "print", "(", "f\"  {code}: {code_name} (n={count}, avg pixels={avg_pixels:.1f})\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.GroupByShapesBatchSampler.__init__": [[301, 334], ["data_source.get_shapes", "collections.defaultdict", "enumerate", "collections.defaultdict.values", "dataset.GroupByShapesBatchSampler._unit_test", "shp_to_indices[].append", "key.append", "key.append", "len", "batches.extend", "batches.append", "tuple", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.PixelSetData.get_shapes", "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.GroupByShapesBatchSampler._unit_test"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "by_time", "=", "True", ",", "by_pixel_dim", "=", "True", ")", ":", "\n", "        ", "self", ".", "batches", "=", "[", "]", "\n", "self", ".", "data_source", "=", "data_source", "\n", "\n", "shapes", "=", "data_source", ".", "get_shapes", "(", ")", "\n", "\n", "# group indices by (seq_length, n_pixels)", "\n", "shp_to_indices", "=", "defaultdict", "(", "list", ")", "# unique shape -> sample indices", "\n", "for", "idx", ",", "shp", "in", "enumerate", "(", "shapes", ")", ":", "\n", "            ", "key", "=", "[", "]", "\n", "if", "by_time", ":", "\n", "                ", "key", ".", "append", "(", "shp", "[", "0", "]", ")", "\n", "", "if", "by_pixel_dim", ":", "\n", "                ", "key", ".", "append", "(", "shp", "[", "2", "]", ")", "\n", "", "shp_to_indices", "[", "tuple", "(", "key", ")", "]", ".", "append", "(", "idx", ")", "\n", "\n", "# create batches grouped by shape", "\n", "", "batches", "=", "[", "]", "\n", "for", "indices", "in", "shp_to_indices", ".", "values", "(", ")", ":", "\n", "            ", "if", "len", "(", "indices", ")", ">", "batch_size", ":", "\n", "                ", "batches", ".", "extend", "(", "\n", "[", "\n", "indices", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "indices", ")", ",", "batch_size", ")", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "batches", ".", "append", "(", "indices", ")", "\n", "\n", "", "", "self", ".", "batches", "=", "batches", "\n", "self", ".", "dataset", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "_unit_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.GroupByShapesBatchSampler.__iter__": [[335, 338], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "batch", "in", "self", ".", "batches", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.GroupByShapesBatchSampler.__len__": [[339, 341], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.GroupByShapesBatchSampler._unit_test": [[342, 353], ["all", "sum", "len", "set", "set", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "_unit_test", "(", "self", ")", ":", "\n", "# make sure that we iterate across all items", "\n", "# 1) no duplicates", "\n", "        ", "assert", "sum", "(", "len", "(", "batch", ")", "for", "batch", "in", "self", ".", "batches", ")", "==", "len", "(", "self", ".", "dataset", ")", "\n", "# 2) all indices are present", "\n", "assert", "set", "(", "[", "idx", "for", "indices", "in", "self", ".", "batches", "for", "idx", "in", "indices", "]", ")", "==", "set", "(", "\n", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", ")", "\n", "\n", "# make sure that no batch is larger than batch size", "\n", "assert", "all", "(", "len", "(", "batch", ")", "<=", "self", ".", "batch_size", "for", "batch", "in", "self", ".", "batches", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.sigmoid": [[27, 30], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ",", "L", ",", "x0", ",", "k", ",", "b", ")", ":", "\n", "    ", "y", "=", "L", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "k", "*", "(", "x", "-", "x0", ")", ")", ")", "+", "b", "\n", "return", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.create_train_loader": [[227, 235], ["torch.utils.data.DataLoader", "torch.cuda.is_available"], "function", ["None"], ["", "", "", "def", "create_train_loader", "(", "ds", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "return", "DataLoader", "(", "\n", "dataset", "=", "ds", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.dataset.create_evaluation_loaders": [[238, 293], ["torchvision.transforms.transforms.Compose", "dataset.PixelSetData", "torch.utils.data.DataLoader", "torchvision.transforms.transforms.Compose", "dataset.PixelSetData", "torch.utils.data.DataLoader", "print", "print", "print", "transforms.Normalize", "transforms.ToTensor", "dataset.GroupByShapesBatchSampler", "transforms.Normalize", "transforms.ToTensor", "dataset.GroupByShapesBatchSampler", "transforms.RandomSamplePixels", "transforms.Identity", "len", "len", "len", "len"], "function", ["None"], ["", "def", "create_evaluation_loaders", "(", "datasets", ",", "config", ",", "sample_pixels_val", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Create data loaders for unsupervised domain adaptation\n    \"\"\"", "\n", "\n", "# Validation dataset", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "RandomSamplePixels", "(", "config", ".", "num_pixels", ")", "if", "sample_pixels_val", "else", "Identity", "(", ")", ",", "\n", "Normalize", "(", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "val_dataset", "=", "PixelSetData", "(", "\n", "config", ".", "data_root", ",", "\n", "datasets", ",", "\n", "config", ".", "classes", ",", "\n", "val_transform", ",", "\n", "split", "=", "'val'", ",", "\n", "fold_num", "=", "config", ".", "fold_num", ",", "\n", ")", "\n", "val_loader", "=", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "batch_sampler", "=", "GroupByShapesBatchSampler", "(", "\n", "val_dataset", ",", "config", ".", "batch_size", ",", "by_pixel_dim", "=", "not", "sample_pixels_val", ",", "by_time", "=", "True", "\n", ")", ",", "\n", ")", "\n", "\n", "# Test dataset", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "Normalize", "(", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "test_dataset", "=", "PixelSetData", "(", "\n", "config", ".", "data_root", ",", "\n", "datasets", ",", "\n", "config", ".", "classes", ",", "\n", "test_transform", ",", "\n", "split", "=", "'test'", ",", "\n", "fold_num", "=", "config", ".", "fold_num", ",", "\n", ")", "\n", "test_loader", "=", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "batch_sampler", "=", "GroupByShapesBatchSampler", "(", "test_dataset", ",", "config", ".", "batch_size", ")", ",", "\n", ")", "\n", "\n", "print", "(", "f\"evaluation dataset:\"", ",", "datasets", ")", "\n", "print", "(", "f\"val data: {len(val_dataset)} ({len(val_loader)} batches)\"", ")", "\n", "print", "(", "f\"test data: {len(test_dataset)} ({len(test_loader)} batches)\"", ")", "\n", "\n", "return", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.evaluation.validation": [[11, 27], ["evaluation.evaluation", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "print", "print", "print", "print", "torch.save", "torch.save", "torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.None.evaluation.evaluation"], ["def", "validation", "(", "best_f1", ",", "best_model_path", ",", "config", ",", "criterion", ",", "device", ",", "epoch", ",", "model", ",", "val_loader", ",", "writer", ",", "temporal_shift", "=", "None", ",", "prefix", "=", "'val'", ")", ":", "\n", "    ", "val_metrics", "=", "evaluation", "(", "model", ",", "val_loader", ",", "device", ",", "config", ".", "classes", ",", "criterion", ",", "mode", "=", "'val'", ",", "temporal_shift", "=", "temporal_shift", ")", "\n", "val_loss", ",", "val_acc", ",", "val_f1", "=", "val_metrics", "[", "'loss'", "]", ",", "val_metrics", "[", "'accuracy'", "]", ",", "val_metrics", "[", "'macro_f1'", "]", "\n", "writer", ".", "add_scalar", "(", "f'{prefix}/loss'", ",", "val_loss", ",", "global_step", "=", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{prefix}/accuracy'", ",", "val_acc", ",", "global_step", "=", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{prefix}/f1'", ",", "val_f1", ",", "global_step", "=", "epoch", ")", "\n", "print", "(", "f\"{prefix} result: loss={val_loss:.4f}, acc={val_acc:.2f}, f1={val_f1:.4f}\"", ")", "\n", "if", "val_f1", ">", "best_f1", ":", "\n", "        ", "print", "(", "f'{prefix} F1 improved from {best_f1:.4f} to {val_f1:.4f}!'", ")", "\n", "best_f1", "=", "val_f1", "\n", "if", "best_model_path", "is", "not", "None", ":", "\n", "            ", "print", "(", "f'Saving best model to {best_model_path}'", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "'best_f1'", ":", "best_f1", "}", ",", "best_model_path", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "f'{prefix} F1 did not improve from {best_f1:.4f}.'", ")", "\n", "", "return", "best_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.None.evaluation.evaluation": [[29, 67], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.train_utils.AverageMeter", "model.eval", "tqdm.tqdm", "y_true.extend", "target.cuda.cuda", "utils.train_utils.to_cuda", "model.forward.argmax", "y_pred.extend", "numpy.array", "numpy.array", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.cohen_kappa_score", "sklearn.metrics.classification_report", "sklearn.metrics.confusion_matrix", "target.cuda.tolist", "model.forward", "model.forward", "criterion", "utils.train_utils.AverageMeter.update", "logits.argmax.tolist", "criterion.item", "list", "list", "list", "pixels.size", "range", "range", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.to_cuda", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.f1_score", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.f1_score", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.classification_report", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.forward", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.forward", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluation", "(", "model", ",", "data_loader", ",", "device", ",", "class_names", ",", "criterion", "=", "None", ",", "mode", "=", "'val'", ",", "temporal_shift", "=", "None", ")", ":", "\n", "    ", "y_true", ",", "y_pred", "=", "[", "]", ",", "[", "]", "\n", "\n", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "for", "sample", "in", "tqdm", "(", "data_loader", ",", "desc", "=", "'Validating'", "if", "mode", "==", "'val'", "else", "'Testing'", ")", ":", "\n", "        ", "target", "=", "sample", "[", "'label'", "]", "\n", "y_true", ".", "extend", "(", "target", ".", "tolist", "(", ")", ")", "\n", "target", "=", "target", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "pixels", ",", "valid_pixels", ",", "positions", ",", "extra", ",", "gdd", "=", "to_cuda", "(", "sample", ",", "device", ")", "\n", "if", "temporal_shift", "is", "not", "None", ":", "\n", "            ", "logits", "=", "model", ".", "forward", "(", "pixels", ",", "valid_pixels", ",", "positions", "+", "temporal_shift", ",", "extra", ",", "gdd", ")", "\n", "", "else", ":", "\n", "            ", "logits", "=", "model", ".", "forward", "(", "pixels", ",", "valid_pixels", ",", "positions", ",", "extra", ",", "gdd", ")", "\n", "\n", "", "predictions", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "if", "criterion", "is", "not", "None", ":", "\n", "            ", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "loss_meter", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "n", "=", "pixels", ".", "size", "(", "0", ")", ")", "\n", "", "y_pred", ".", "extend", "(", "predictions", ".", "tolist", "(", ")", ")", "\n", "\n", "", "y_true", ",", "y_pred", "=", "np", ".", "array", "(", "y_true", ")", ",", "np", ".", "array", "(", "y_pred", ")", "\n", "\n", "metrics", "=", "{", "\n", "'accuracy'", ":", "sklearn", ".", "metrics", ".", "accuracy_score", "(", "y_true", ",", "y_pred", ")", ",", "\n", "'loss'", ":", "loss_meter", ".", "avg", ",", "\n", "'macro_f1'", ":", "sklearn", ".", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'macro'", ",", "zero_division", "=", "0", ")", ",", "\n", "'weighted_f1'", ":", "sklearn", ".", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'weighted'", ",", "zero_division", "=", "0", ")", ",", "\n", "'kappa'", ":", "sklearn", ".", "metrics", ".", "cohen_kappa_score", "(", "y_true", ",", "y_pred", ",", "labels", "=", "list", "(", "range", "(", "len", "(", "class_names", ")", ")", ")", ")", ",", "\n", "'classification_report'", ":", "sklearn", ".", "metrics", ".", "classification_report", "(", "y_true", ",", "y_pred", ",", "labels", "=", "list", "(", "range", "(", "len", "(", "class_names", ")", ")", ")", ",", "target_names", "=", "class_names", ",", "zero_division", "=", "0", ")", ",", "\n", "'confusion_matrix'", ":", "sklearn", ".", "metrics", ".", "confusion_matrix", "(", "y_true", ",", "y_pred", ",", "labels", "=", "list", "(", "range", "(", "len", "(", "class_names", ")", ")", ")", ")", ",", "\n", "}", "\n", "\n", "return", "metrics", "\n", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.S2Image.__init__": [[21, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "yyyymmdd", ",", "cloudy_pct", ",", "coverage", ",", "aws_path", ",", "local_path", ",", "data_collection", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "yyyymmdd", "=", "yyyymmdd", "\n", "self", ".", "cloudy_pct", "=", "cloudy_pct", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "aws_path", "=", "aws_path", "\n", "self", ".", "local_path", "=", "local_path", "\n", "if", "data_collection", "==", "'l1c'", ":", "\n", "            ", "self", ".", "bands_10m", "=", "[", "local_path", "/", "\"{}.jp2\"", ".", "format", "(", "x", ")", "for", "x", "in", "[", "'B02'", ",", "'B03'", ",", "'B04'", ",", "'B08'", "]", "]", "\n", "self", ".", "bands_20m", "=", "[", "local_path", "/", "\"{}.jp2\"", ".", "format", "(", "x", ")", "for", "x", "in", "[", "'B05'", ",", "'B06'", ",", "'B07'", ",", "'B8A'", ",", "'B11'", ",", "'B12'", "]", "]", "\n", "self", ".", "bands_60m", "=", "[", "local_path", "/", "\"{}.jp2\"", ".", "format", "(", "x", ")", "for", "x", "in", "[", "'B01'", ",", "'B09'", ",", "'B10'", "]", "]", "\n", "self", ".", "cloud_mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "bands_10m", "=", "[", "local_path", "/", "'R10m'", "/", "\"{}.jp2\"", ".", "format", "(", "x", ")", "for", "x", "in", "[", "'B02'", ",", "'B03'", ",", "'B04'", ",", "'B08'", "]", "]", "\n", "self", ".", "bands_20m", "=", "[", "local_path", "/", "'R20m'", "/", "\"{}.jp2\"", ".", "format", "(", "x", ")", "for", "x", "in", "[", "'B05'", ",", "'B06'", ",", "'B07'", ",", "'B8A'", ",", "'B11'", ",", "'B12'", "]", "]", "\n", "self", ".", "bands_60m", "=", "[", "local_path", "/", "'R60m'", "/", "\"{}.jp2\"", ".", "format", "(", "x", ")", "for", "x", "in", "[", "'B01'", ",", "'B09'", ",", "'B10'", "]", "]", "\n", "self", ".", "cloud_mask", "=", "local_path", "/", "'qi'", "/", "'MSK_CLOUDS_B00.gml'", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.S2Image.get_date": [[40, 42], ["datetime.datetime.datetime.strptime"], "methods", ["None"], ["", "", "def", "get_date", "(", "self", ")", ":", "\n", "        ", "return", "datetime", ".", "strptime", "(", "self", ".", "yyyymmdd", ",", "'%Y%m%d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.S2Image.__repr__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"S2Image(tile={self.name}, date={self.yyyymmdd}, clouds={self.cloudy_pct}, coverage={self.coverage})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.s2_download": [[47, 103], ["os.path.exists", "print", "len", "list", "list", "print", "os.path.join", "os.makedirs", "os.listdir", "print", "print", "type", "tuple", "date_start.date", "date_end.date", "downloader.get_available_s2_images", "sorted", "filter", "filter", "len", "print", "len", "input", "tqdm.tqdm", "map", "open", "pickle.load", "open", "pickle.dump", "len", "date_start.date", "date_end.date", "len", "len", "len", "date_start.date", "date_end.date", "os.path.exists", "os.makedirs", "downloader.download_previews", "print", "downloader.download_tile", "len", "x.get_date"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.get_available_s2_images", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.download_previews", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.download_tile", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.S2Image.get_date"], ["", "", "def", "s2_download", "(", "tile_name", ",", "date_start", ",", "date_end", ",", "download_dir", ",", "min_coverage", "=", "100.0", ",", "max_cloudy_pct", "=", "100.0", ",", "\n", "previews", "=", "False", ",", "sort_by_date", "=", "True", ",", "bands", "=", "None", ",", "data_collection", "=", "'l1c'", ")", ":", "\n", "    ", "if", "type", "(", "date_start", ")", "==", "str", ":", "\n", "        ", "date_start", ",", "date_end", "=", "tuple", "(", "map", "(", "_yyyymmdd_to_date", ",", "(", "date_start", ",", "date_end", ")", ")", ")", "\n", "\n", "", "assert", "data_collection", "in", "[", "'l1c'", ",", "'l2a'", "]", "\n", "\n", "if", "bands", "is", "None", ":", "\n", "        ", "if", "data_collection", "==", "'l1c'", ":", "\n", "            ", "bands", "=", "[", "'B02'", ",", "'B03'", ",", "'B04'", ",", "'B05'", ",", "'B06'", ",", "'B07'", ",", "'B08'", ",", "'B8A'", ",", "'B11'", ",", "'B12'", "]", "\n", "", "else", ":", "\n", "            ", "bands", "=", "[", "'R10m/B02'", ",", "'R10m/B03'", ",", "'R10m/B04'", ",", "'R20m/B05'", ",", "'R20m/B06'", ",", "'R20m/B07'", ",", "'R10m/B08'", ",", "'R20m/B8A'", ",", "'R20m/B11'", ",", "'R20m/B12'", "]", "\n", "\n", "", "", "cache_file", "=", "\"/tmp/{}_{}_{}_{}.pkl\"", ".", "format", "(", "data_collection", ",", "tile_name", ",", "date_start", ".", "date", "(", ")", ",", "date_end", ".", "date", "(", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "        ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "s2_images", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "s2_images", "=", "get_available_s2_images", "(", "tile_name", ",", "(", "date_start", ",", "date_end", ")", ",", "download_dir", ",", "data_collection", ")", "\n", "with", "open", "(", "cache_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "s2_images", ",", "f", ")", "\n", "\n", "", "", "print", "(", "\"Found {} images from tile {} between {} and {}\"", ".", "format", "(", "len", "(", "s2_images", ")", ",", "tile_name", ",", "date_start", ".", "date", "(", ")", ",", "\n", "date_end", ".", "date", "(", ")", ")", ")", "\n", "n_before_filter", "=", "len", "(", "s2_images", ")", "\n", "if", "sort_by_date", ":", "\n", "        ", "s2_images", "=", "sorted", "(", "s2_images", ",", "key", "=", "lambda", "x", ":", "x", ".", "get_date", "(", ")", ")", "\n", "", "s2_images", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", ".", "coverage", ">=", "min_coverage", ",", "s2_images", ")", ")", "\n", "s2_images", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", ".", "cloudy_pct", "<=", "max_cloudy_pct", ",", "s2_images", ")", ")", "\n", "print", "(", "\"Number of images with coverage >= {} and cloudy pct. <= {}: {}/{}\"", ".", "format", "(", "min_coverage", ",", "max_cloudy_pct", ",", "\n", "len", "(", "s2_images", ")", ",", "\n", "n_before_filter", ")", ")", "\n", "\n", "tile_dir", "=", "os", ".", "path", ".", "join", "(", "download_dir", ",", "tile_name", ")", "\n", "os", ".", "makedirs", "(", "tile_dir", ",", "exist_ok", "=", "True", ")", "\n", "existing", "=", "os", ".", "listdir", "(", "tile_dir", ")", "\n", "not_downloaded", "=", "[", "x", "for", "x", "in", "s2_images", "if", "x", ".", "local_path", ".", "parts", "[", "-", "1", "]", "not", "in", "existing", "]", "\n", "print", "(", "s2_images", ")", "\n", "print", "(", "\"Number of images not downloaded: {}/{}\"", ".", "format", "(", "len", "(", "not_downloaded", ")", ",", "len", "(", "s2_images", ")", ")", ")", "\n", "if", "len", "(", "not_downloaded", ")", ">", "0", ":", "\n", "        ", "print", "(", "not_downloaded", ")", "\n", "\n", "", "if", "previews", ":", "\n", "        ", "preview_folder", "=", "\"data/previews_{}_{}_{}\"", ".", "format", "(", "tile_name", ",", "date_start", ".", "date", "(", ")", ",", "date_end", ".", "date", "(", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "preview_folder", ")", "\n", "download_previews", "(", "s2_images", ",", "preview_folder", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Preview folder {} already exists, skipping'", ".", "format", "(", "preview_folder", ")", ")", "\n", "\n", "", "", "if", "len", "(", "not_downloaded", ")", "!=", "0", ":", "\n", "        ", "input", "(", "\"Will download {} S2 images. OK?\"", ".", "format", "(", "len", "(", "not_downloaded", ")", ")", ")", "\n", "for", "s2_tile", "in", "tqdm", "(", "not_downloaded", ",", "'Downloading S2 tiles'", ")", ":", "\n", "            ", "download_tile", "(", "s2_tile", ",", "data_folder", "=", "tile_dir", ",", "bands", "=", "bands", ",", "data_collection", "=", "data_collection", ")", "\n", "\n", "", "", "return", "s2_images", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader._yyyymmdd_to_date": [[105, 107], ["datetime.datetime.strptime"], "function", ["None"], ["", "def", "_yyyymmdd_to_date", "(", "yyyymmdd", ")", ":", "\n", "    ", "return", "datetime", ".", "strptime", "(", "yyyymmdd", ",", "\"%Y%m%d\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.download_previews": [[109, 120], ["boto3.client", "tqdm.tqdm", "os.path.join", "int", "os.path.exists", "boto3.client.download_file", "print"], "function", ["None"], ["", "def", "download_previews", "(", "s2_images", ":", "List", "[", "S2Image", "]", ",", "preview_folder", ")", ":", "\n", "    ", "s3", "=", "boto3", ".", "client", "(", "'s3'", ")", "\n", "for", "s2_tile", "in", "tqdm", "(", "s2_images", ",", "desc", "=", "'downloading previews'", ")", ":", "\n", "        ", "key", "=", "s2_tile", ".", "aws_path", "+", "'/preview.jpg'", "\n", "file_name", "=", "\"{}_{}pct.jpg\"", ".", "format", "(", "s2_tile", ".", "yyyymmdd", ",", "int", "(", "s2_tile", ".", "cloudy_pct", ")", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "preview_folder", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "s3", ".", "download_file", "(", "'sentinel-s2-l1c'", ",", "key", ",", "file_name", ",", "ExtraArgs", "=", "{", "'RequestPayer'", ":", "'requester'", "}", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "print", "(", "'preview not found'", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.download_tile": [[122, 138], ["sentinelhub.AwsTileRequest", "sentinelhub.AwsTileRequest.save_data"], "function", ["None"], ["", "", "", "", "def", "download_tile", "(", "s2_tile", ":", "S2Image", ",", "data_folder", ",", "bands", "=", "None", ",", "data_collection", "=", "'l1c'", ")", ":", "\n", "    ", "data_collection", "=", "DataCollection", ".", "SENTINEL2_L1C", "if", "data_collection", "==", "'l1c'", "else", "DataCollection", ".", "SENTINEL2_L2A", "\n", "if", "data_collection", "==", "DataCollection", ".", "SENTINEL2_L1C", ":", "\n", "        ", "metafiles", "=", "[", "'metadata'", ",", "'tileInfo'", "]", "\n", "", "else", ":", "\n", "        ", "metafiles", "=", "[", "'metadata'", ",", "'tileInfo'", ",", "'qi/MSK_CLOUDS_B00'", "]", "# also download cloud masks for L2A data", "\n", "", "req", "=", "sentinelhub", ".", "AwsTileRequest", "(", "\n", "tile", "=", "s2_tile", ".", "name", ",", "\n", "time", "=", "s2_tile", ".", "yyyymmdd", ",", "\n", "aws_index", "=", "0", ",", "\n", "data_folder", "=", "data_folder", ",", "\n", "metafiles", "=", "metafiles", ",", "\n", "bands", "=", "bands", ",", "\n", "data_collection", "=", "data_collection", ",", "\n", ")", "\n", "req", ".", "save_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.get_available_s2_images": [[140, 168], ["tqdm.tqdm", "requests.get().json", "dateutil.rrule.rrule", "requests.get().json", "downloader.get_date_from_prefix", "str", "str", "requests.get", "downloader._yyyymmdd_to_date", "result.append", "requests.get", "date_prefix.replace", "downloader.S2Image", "print", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.get_date_from_prefix", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader._yyyymmdd_to_date"], ["", "def", "get_available_s2_images", "(", "tile_name", ",", "date_interval", ",", "download_dir", ",", "data_collection", ")", ":", "\n", "# api = L1C_API if data_collection == DataCollection.SENTINEL2_L1C else L2A_API", "\n", "    ", "api", "=", "L1C_API", "# use l1c api for l2a data as l2a cloudy percentage is buggy", "\n", "start_date", ",", "end_date", "=", "date_interval", "\n", "months_between", "=", "[", "x", "for", "x", "in", "rrule", "(", "MONTHLY", ",", "dtstart", "=", "start_date", ",", "until", "=", "end_date", ")", "]", "\n", "result", "=", "[", "]", "\n", "for", "dt", "in", "tqdm", "(", "months_between", ",", "desc", "=", "f'Browsing S2 {data_collection} inventory for available images'", ")", ":", "\n", "        ", "tile_path", "=", "\"{}/{}/{}\"", ".", "format", "(", "tile_name", "[", ":", "2", "]", ",", "tile_name", "[", "2", "]", ",", "tile_name", "[", "3", ":", "]", ")", "\n", "url", "=", "\"/\"", ".", "join", "(", "[", "api", ",", "\"tiles\"", ",", "tile_path", ",", "str", "(", "dt", ".", "year", ")", ",", "str", "(", "dt", ".", "month", ")", ",", "\"\"", "]", ")", "\n", "js", "=", "requests", ".", "get", "(", "url", ")", ".", "json", "(", ")", "\n", "date_prefixes", "=", "[", "api", "+", "\"/\"", "+", "x", "[", "'Prefix'", "]", "for", "x", "in", "js", "[", "'CommonPrefixes'", "]", "]", "\n", "for", "date_prefix", "in", "date_prefixes", ":", "\n", "            ", "tileinfo", "=", "requests", ".", "get", "(", "date_prefix", "+", "\"0/tileInfo.json\"", ")", ".", "json", "(", ")", "\n", "aws_path", "=", "date_prefix", ".", "replace", "(", "api", ",", "\"\"", ")", "[", "1", ":", "]", "+", "'0'", "\n", "date", "=", "get_date_from_prefix", "(", "date_prefix", ")", "\n", "if", "start_date", "<=", "_yyyymmdd_to_date", "(", "date", ")", "<=", "end_date", ":", "\n", "                ", "try", ":", "\n", "                    ", "cloudy_pct", "=", "tileinfo", "[", "'cloudyPixelPercentage'", "]", "\n", "coverage", "=", "tileinfo", "[", "'dataCoveragePercentage'", "]", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "continue", "\n", "\n", "", "local_path", "=", "Path", "(", "download_dir", ")", "/", "tile_name", "/", "\"{},{}-{}-{},0\"", ".", "format", "(", "tile_name", ",", "date", "[", ":", "4", "]", ",", "date", "[", "4", ":", "6", "]", ",", "\n", "date", "[", "6", ":", "]", ")", "\n", "result", ".", "append", "(", "S2Image", "(", "tile_name", ",", "date", ",", "cloudy_pct", ",", "coverage", ",", "aws_path", ",", "local_path", ",", "data_collection", ")", ")", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.get_date_from_prefix": [[170, 177], ["prefix.split", "list", "filter", "len", "len"], "function", ["None"], ["", "def", "get_date_from_prefix", "(", "prefix", ")", ":", "\n", "    ", "parts", "=", "prefix", ".", "split", "(", "'/'", ")", "\n", "parts", "=", "list", "(", "filter", "(", "None", ",", "parts", ")", ")", "\n", "yyyy", "=", "parts", "[", "-", "3", "]", "\n", "mm", "=", "\"0\"", "+", "parts", "[", "-", "2", "]", "if", "len", "(", "parts", "[", "-", "2", "]", ")", "==", "1", "else", "parts", "[", "-", "2", "]", "\n", "dd", "=", "\"0\"", "+", "parts", "[", "-", "1", "]", "if", "len", "(", "parts", "[", "-", "1", "]", ")", "==", "1", "else", "parts", "[", "-", "1", "]", "\n", "return", "yyyy", "+", "mm", "+", "dd", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.get_bbox": [[17, 37], ["osgeo.osr.SpatialReference", "osgeo.osr.SpatialReference", "osgeo.osr.CoordinateTransformation", "raster.GetGeoTransform", "osr.CoordinateTransformation.TransformPoint", "osr.CoordinateTransformation.TransformPoint", "int", "osr.SpatialReference.SetAxisMappingStrategy", "osr.SpatialReference.SetAxisMappingStrategy", "raster.GetProjection"], "function", ["None"], ["def", "get_bbox", "(", "raster", ",", "projection", ")", ":", "\n", "# Create the transformation from raster to epsg 4326 (lat lng) coordinates", "\n", "    ", "transform_src", "=", "osr", ".", "SpatialReference", "(", "wkt", "=", "raster", ".", "GetProjection", "(", ")", ")", "\n", "transform_target", "=", "osr", ".", "SpatialReference", "(", "wkt", "=", "projection", ")", "\n", "if", "int", "(", "gdal", ".", "__version__", "[", "0", "]", ")", ">=", "3", ":", "\n", "# GDAL 3 changes axis order: https://github.com/OSGeo/gdal/issues/1546", "\n", "        ", "transform_src", ".", "SetAxisMappingStrategy", "(", "osr", ".", "OAMS_TRADITIONAL_GIS_ORDER", ")", "\n", "transform_target", ".", "SetAxisMappingStrategy", "(", "osr", ".", "OAMS_TRADITIONAL_GIS_ORDER", ")", "\n", "", "transform", "=", "osr", ".", "CoordinateTransformation", "(", "transform_src", ",", "transform_target", ")", "\n", "\n", "# Extract the rasters bounding box", "\n", "xmin", ",", "xpixel", ",", "_", ",", "ymax", ",", "_", ",", "ypixel", "=", "raster", ".", "GetGeoTransform", "(", ")", "\n", "width", ",", "height", "=", "raster", ".", "RasterXSize", ",", "raster", ".", "RasterYSize", "\n", "xmax", "=", "xmin", "+", "width", "*", "xpixel", "\n", "ymin", "=", "ymax", "+", "height", "*", "ypixel", "\n", "\n", "ul", "=", "transform", ".", "TransformPoint", "(", "xmin", ",", "ymax", ")", "\n", "lr", "=", "transform", ".", "TransformPoint", "(", "xmax", ",", "ymin", ")", "\n", "\n", "return", "(", "ul", ",", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.prepare_gdd": [[39, 113], ["preprocessing.downloader.s2_download", "str", "prepare_gdd.read_eobs", "prepare_gdd.read_eobs", "print", "print", "geopandas.read_file", "gpd.read_file.to_crs", "tqdm.tqdm", "print", "pickle.dump", "list", "range", "range", "gpd.read_file.iterrows", "prepare_gdd.world_to_pixel", "t_min_data.append", "t_max_data.append", "open", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.s2_download", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.read_eobs", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.read_eobs", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.world_to_pixel"], ["", "def", "prepare_gdd", "(", "config", ")", ":", "\n", "    ", "s2_images", ":", "List", "[", "S2Image", "]", "=", "s2_download", "(", "\n", "config", ".", "tile", ",", "\n", "config", ".", "start_date", ",", "\n", "config", ".", "end_date", ",", "\n", "config", ".", "download_dir", ",", "\n", "min_coverage", "=", "config", ".", "min_coverage", ",", "\n", "max_cloudy_pct", "=", "config", ".", "max_cloudy_percentage", ",", "\n", "sort_by_date", "=", "True", ",", "\n", "bands", "=", "config", ".", "bands", ",", "\n", "data_collection", "=", "config", ".", "data_collection", ",", "\n", "# previews=True,", "\n", ")", "\n", "\n", "# Load Sentinel-2 data", "\n", "sentinel_image", "=", "str", "(", "s2_images", "[", "0", "]", ".", "bands_10m", "[", "0", "]", ")", "\n", "# Load E-OBS data", "\n", "min_temp_path", "=", "(", "\n", "\"/media/data/eobs_weather_data/tn_ens_mean_0.1deg_reg_2011-2020_v23.1e.nc\"", "\n", ")", "\n", "max_temp_path", "=", "(", "\n", "\"/media/data/eobs_weather_data/tx_ens_mean_0.1deg_reg_2011-2020_v23.1e.nc\"", "\n", ")", "\n", "# precipitation_path = (", "\n", "#     \"/media/data/eobs_weather_data/rr_ens_mean_0.1deg_reg_2011-2021_v24.0e.nc\"", "\n", "# )", "\n", "\n", "t_min", ",", "t_min_geotransform", "=", "read_eobs", "(", "min_temp_path", ",", "sentinel_image", ")", "\n", "t_max", ",", "_", "=", "read_eobs", "(", "max_temp_path", ",", "sentinel_image", ")", "\n", "# rain, _ = read_eobs(precipitation_path, sentinel_image)", "\n", "\n", "# np.save(f'weather_data/{config.tile}_t_min.npy', t_min)", "\n", "# np.save(f'weather_data/{config.tile}_t_max.npy', t_max)", "\n", "# np.save(f'weather_data/{config.tile}_rain.npy', rain)", "\n", "\n", "# Calculate GDD for each parcel in dateset", "\n", "print", "(", "\"reading ground truth file\"", ")", "\n", "print", "(", "config", ".", "meta_dir", ")", "\n", "parcels_file", "=", "list", "(", "(", "config", ".", "meta_dir", "/", "\"parcels\"", ")", ".", "glob", "(", "\"*.shp\"", ")", ")", "[", "0", "]", "\n", "parcels", "=", "gpd", ".", "read_file", "(", "parcels_file", ")", "\n", "parcels", ".", "to_crs", "(", "\"EPSG:4326\"", ",", "inplace", "=", "True", ")", "\n", "\n", "t_min_data", "=", "[", "]", "\n", "t_max_data", "=", "[", "]", "\n", "if", "config", ".", "tile", "==", "'32VNH'", ":", "\n", "# hacky forward fill to change water temp to nearst (to left) surface temp", "\n", "# only \"works\" for 32VNH since water is to the right", "\n", "        ", "for", "row_idx", "in", "range", "(", "t_min", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "for", "col_idx", "in", "range", "(", "1", ",", "t_min", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "if", "t_min", "[", "0", ",", "row_idx", ",", "col_idx", "]", "==", "-", "9999.0", ":", "\n", "                    ", "t_min", "[", ":", ",", "row_idx", ",", "col_idx", "]", "=", "t_min", "[", ":", ",", "row_idx", ",", "col_idx", "-", "1", "]", "\n", "\n", "", "", "", "assert", "not", "(", "t_min", "==", "-", "9999.0", ")", ".", "any", "(", ")", "\n", "for", "row_idx", "in", "range", "(", "t_max", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "for", "col_idx", "in", "range", "(", "1", ",", "t_max", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "if", "t_max", "[", "0", ",", "row_idx", ",", "col_idx", "]", "==", "-", "9999.0", ":", "\n", "                    ", "t_max", "[", ":", ",", "row_idx", ",", "col_idx", "]", "=", "t_max", "[", ":", ",", "row_idx", ",", "col_idx", "-", "1", "]", "\n", "\n", "", "", "", "assert", "not", "(", "t_max", "==", "-", "9999.0", ")", ".", "any", "(", ")", "\n", "\n", "", "for", "i", ",", "row", "in", "tqdm", "(", "parcels", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "parcels", ")", ",", "desc", "=", "\"loading gdd\"", ")", ":", "\n", "        ", "geometry", "=", "row", ".", "geometry", "\n", "centroid", "=", "geometry", ".", "centroid", "\n", "pixel", ",", "line", "=", "world_to_pixel", "(", "\n", "t_min_geotransform", ",", "centroid", ".", "x", ",", "centroid", ".", "y", "\n", ")", "\n", "mn", "=", "t_min", "[", ":", ",", "line", ",", "pixel", "]", "\n", "mx", "=", "t_max", "[", ":", ",", "line", ",", "pixel", "]", "\n", "t_min_data", ".", "append", "(", "mn", ")", "\n", "t_max_data", ".", "append", "(", "mx", ")", "\n", "\n", "", "print", "(", "\"Writing weather data...\"", ")", "\n", "metadata", "=", "{", "'t_min'", ":", "t_min_data", ",", "'t_max'", ":", "t_max_data", "}", "\n", "pickle", ".", "dump", "(", "metadata", ",", "open", "(", "config", ".", "meta_dir", "/", "\"weather_data.pkl\"", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.read_eobs": [[115, 162], ["osgeo.gdal.Open", "osgeo.gdal.Open", "gdal.Translate.SetProjection", "list", "datetime.datetime", "list", "datetime.datetime.strptime", "datetime.datetime.strptime", "prepare_gdd.get_bbox", "osgeo.gdal.Translate", "gdal.Translate.ReadAsArray", "gdal.Translate.GetGeoTransform", "map", "map", "gdal.Translate.GetProjection", "prepare_gdd.world_to_pixel", "[].replace().replace().split", "enumerate", "gdal.Translate.GetGeoTransform", "[].replace().replace", "datetime.timedelta", "map", "[].replace", "gdal.Translate.GetMetadata"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.get_bbox", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.world_to_pixel"], ["", "def", "read_eobs", "(", "file_path", ",", "s2_image_path", ")", ":", "\n", "# Load Sentinel-2 data", "\n", "    ", "sentinel_raster", "=", "gdal", ".", "Open", "(", "s2_image_path", ")", "\n", "\n", "weather_raster", "=", "gdal", ".", "Open", "(", "file_path", ")", "\n", "weather_raster", ".", "SetProjection", "(", "\"EPSG:4326\"", ")", "\n", "\n", "days_since_weather", "=", "list", "(", "\n", "map", "(", "\n", "int", ",", "\n", "weather_raster", ".", "GetMetadata", "(", ")", "[", "\"NETCDF_DIM_time_VALUES\"", "]", "\n", ".", "replace", "(", "\"{\"", ",", "\"\"", ")", "\n", ".", "replace", "(", "\"}\"", ",", "\"\"", ")", "\n", ".", "split", "(", "\",\"", ")", ",", "\n", ")", "\n", ")", "\n", "eobs_start_date", "=", "datetime", "(", "1950", ",", "1", ",", "1", ")", "\n", "dates_weather", "=", "list", "(", "\n", "map", "(", "lambda", "days", ":", "eobs_start_date", "+", "timedelta", "(", "days", "=", "days", ")", ",", "days_since_weather", ")", "\n", ")", "\n", "\n", "start_date_s2", "=", "datetime", ".", "strptime", "(", "config", ".", "start_date", ",", "\"%Y%m%d\"", ")", "\n", "end_date_s2", "=", "datetime", ".", "strptime", "(", "config", ".", "end_date", ",", "\"%Y%m%d\"", ")", "\n", "\n", "relevant_bands", "=", "[", "\n", "i", "for", "i", ",", "d", "in", "enumerate", "(", "dates_weather", ")", "if", "start_date_s2", "<=", "d", "<=", "end_date_s2", "\n", "]", "\n", "\n", "# Read S2 bounding box from weather data", "\n", "bbox", "=", "get_bbox", "(", "sentinel_raster", ",", "weather_raster", ".", "GetProjection", "(", ")", ")", "\n", "bbox_px", "=", "[", "\n", "world_to_pixel", "(", "weather_raster", ".", "GetGeoTransform", "(", ")", ",", "x", ",", "y", ")", "for", "x", ",", "y", ",", "_", "in", "bbox", "\n", "]", "\n", "\n", "options_list", "=", "[", "\n", "f\"-srcwin {bbox_px[0][0]} {bbox_px[0][1]} {bbox_px[1][0] - bbox_px[0][0] + 1} {bbox_px[1][1] - bbox_px[0][1] + 1}\"", ",", "\n", "\"-of\"", ",", "\n", "\"MEM\"", ",", "\n", "f'-b {\" -b \".join(map(str, relevant_bands))}'", ",", "\n", "]", "\n", "\n", "options_string", "=", "\" \"", ".", "join", "(", "options_list", ")", "\n", "weather_raster", "=", "gdal", ".", "Translate", "(", "\"\"", ",", "weather_raster", ",", "options", "=", "options_string", ")", "\n", "data", "=", "weather_raster", ".", "ReadAsArray", "(", ")", "\n", "geotransform", "=", "weather_raster", ".", "GetGeoTransform", "(", ")", "\n", "\n", "return", "data", ",", "geotransform", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.world_to_pixel": [[164, 176], ["int", "int"], "function", ["None"], ["", "def", "world_to_pixel", "(", "geo_matrix", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Uses a gdal geomatrix (gdal.GetGeoTransform()) to calculate\n    the pixel location of a geospatial coordinate\n    \"\"\"", "\n", "ul_x", "=", "geo_matrix", "[", "0", "]", "\n", "ul_y", "=", "geo_matrix", "[", "3", "]", "\n", "x_dist", "=", "geo_matrix", "[", "1", "]", "\n", "y_dist", "=", "geo_matrix", "[", "5", "]", "\n", "pixel", "=", "int", "(", "(", "x", "-", "ul_x", ")", "/", "x_dist", ")", "\n", "line", "=", "-", "int", "(", "(", "ul_y", "-", "y", ")", "/", "y_dist", ")", "\n", "return", "pixel", ",", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_gdd.expoweight": [[178, 187], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "expoweight", "(", "theta", ",", "beta", "=", "0.9", ")", ":", "\n", "    ", "v0", "=", "0", "\n", "vs", "=", "np", ".", "zeros", "(", "theta", ".", "shape", ")", "\n", "T", "=", "theta", ".", "shape", "[", "0", "]", "\n", "for", "t", "in", "range", "(", "1", ",", "T", "+", "1", ")", ":", "\n", "        ", "vt", "=", "beta", "*", "v0", "+", "(", "1", "-", "beta", ")", "*", "theta", "[", "t", "-", "1", "]", "\n", "vs", "[", "t", "-", "1", "]", "=", "vt", "\n", "v0", "=", "vt", "\n", "", "return", "vs", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.create_data_splits.main": [[11, 51], ["random.seed", "numpy.random.seed", "sorted", "collections.defaultdict", "collections.defaultdict.items", "print", "json.dump", "json.dump", "print", "list", "tiles[].append", "create_data_splits.create_train_val_test_folds", "set.intersection", "open", "open", "glob.glob", "path.split", "country_tile.split", "os.path.join", "create_data_splits.get_frequent_classes", "classes_all.append", "os.path.join", "os.path.join", "set"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.create_data_splits.create_train_val_test_folds", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.create_data_splits.get_frequent_classes"], ["def", "main", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "data_root", "=", "'/media/data/timematch_data'", "\n", "tiles_in_dir", "=", "sorted", "(", "list", "(", "glob", ".", "glob", "(", "f'{data_root}/*/*/*'", ")", ")", ")", "\n", "num_blocks", "=", "100", "\n", "num_folds", "=", "3", "\n", "\n", "tiles", "=", "defaultdict", "(", "list", ")", "\n", "for", "path", "in", "tiles_in_dir", ":", "\n", "        ", "country", ",", "tile", ",", "year", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "3", ":", "]", "\n", "tiles", "[", "f'{country}/{tile}'", "]", ".", "append", "(", "year", ")", "\n", "\n", "\n", "", "data_splits", "=", "{", "}", "\n", "data_classes", "=", "{", "}", "\n", "\n", "classes_all", "=", "[", "]", "\n", "\n", "for", "country_tile", ",", "years", "in", "tiles", ".", "items", "(", ")", ":", "\n", "        ", "country", "=", "country_tile", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "# ensure same split across different years", "\n", "folds", "=", "create_train_val_test_folds", "(", "num_folds", ",", "num_blocks", ",", "val_ratio", "=", "0.1", ",", "test_ratio", "=", "0.2", ")", "\n", "for", "year", "in", "years", ":", "\n", "            ", "dataset_name", "=", "f'{country_tile}/{year}'", "\n", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "country_tile", ",", "year", ")", "\n", "\n", "# select classes that appear at least 200 times", "\n", "classes", "=", "get_frequent_classes", "(", "dataset_path", ",", "country", ",", "min_count", "=", "200", ")", "\n", "classes_all", ".", "append", "(", "set", "(", "classes", ")", ")", "\n", "\n", "data_splits", "[", "dataset_name", "]", "=", "folds", "\n", "data_classes", "[", "dataset_name", "]", "=", "classes", "\n", "", "", "print", "(", "set", ".", "intersection", "(", "*", "classes_all", ")", ")", "\n", "\n", "json", ".", "dump", "(", "data_classes", ",", "open", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'dataset_classes.json'", ")", ",", "'w'", ")", ")", "\n", "json", ".", "dump", "(", "data_splits", ",", "open", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'dataset_split.json'", ")", ",", "'w'", ")", ")", "\n", "\n", "print", "(", "f'Done, result saved to {data_root}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.create_data_splits.get_frequent_classes": [[54, 86], ["os.path.join", "pickle.load", "utils.label_utils.get_classes", "utils.label_utils.get_code_to_class", "print", "numpy.unique", "zip", "print", "open", "label_utils.get_code_to_class.get", "class_to_idx.get", "labels.append", "print", "os.path.join", "enumerate", "str", "math.isnan", "int"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_classes", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_code_to_class"], ["", "def", "get_frequent_classes", "(", "dataset_path", ",", "country", ",", "min_count", "=", "200", ")", ":", "\n", "    ", "meta_folder", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"meta\"", ")", "\n", "metadata", "=", "pkl", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "meta_folder", ",", "\"metadata.pkl\"", ")", ",", "\"rb\"", ")", ")", "\n", "\n", "classes", "=", "label_utils", ".", "get_classes", "(", "country", ")", "\n", "crop_code_to_class", "=", "label_utils", ".", "get_code_to_class", "(", "country", ")", "\n", "class_to_idx", "=", "{", "cls", ":", "idx", "for", "idx", ",", "cls", "in", "enumerate", "(", "classes", ")", "}", "\n", "\n", "print", "(", "dataset_path", ")", "\n", "labels", "=", "[", "]", "\n", "for", "parcel", "in", "metadata", "[", "\"parcels\"", "]", ":", "\n", "        ", "crop_code", "=", "parcel", "[", "\"label\"", "]", "\n", "if", "country", "in", "[", "'austria'", ",", "'denmark'", "]", ":", "\n", "            ", "if", "country", "==", "'denmark'", "and", "math", ".", "isnan", "(", "crop_code", ")", ":", "\n", "                ", "crop_code", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "crop_code", "=", "int", "(", "crop_code", ")", "\n", "", "", "else", ":", "\n", "            ", "crop_code", "=", "str", "(", "crop_code", ")", "\n", "", "class_name", "=", "crop_code_to_class", ".", "get", "(", "crop_code", ",", "\"unknown\"", ")", "\n", "class_index", "=", "class_to_idx", ".", "get", "(", "class_name", ",", "class_to_idx", "[", "\"unknown\"", "]", ")", "\n", "labels", ".", "append", "(", "class_index", ")", "\n", "# labels.append(crop_code)", "\n", "\n", "", "unique_classes", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "for", "cls", ",", "cnt", "in", "zip", "(", "unique_classes", ",", "counts", ")", ":", "\n", "# if cnt > 200:", "\n", "#     print(cls, cnt)", "\n", "        ", "print", "(", "classes", "[", "cls", "]", ",", "cnt", ")", "\n", "", "print", "(", ")", "\n", "valid_classes", "=", "[", "classes", "[", "i", "]", "for", "i", "in", "unique_classes", "[", "counts", ">=", "min_count", "]", "]", "\n", "return", "valid_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.create_data_splits.create_train_val_test_folds": [[88, 113], ["range", "list", "len", "int", "int", "random.shuffle", "set", "set", "set", "folds.append", "range", "set.intersection", "set", "list", "list", "list", "len", "len", "len"], "function", ["None"], ["", "def", "create_train_val_test_folds", "(", "num_folds", ",", "num_indices", ",", "val_ratio", "=", "0.1", ",", "test_ratio", "=", "0.2", ")", ":", "\n", "    ", "folds", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_folds", ")", ":", "\n", "        ", "splits", "=", "{", "}", "\n", "indices", "=", "list", "(", "range", "(", "num_indices", ")", ")", "\n", "n", "=", "len", "(", "indices", ")", "\n", "n_test", "=", "int", "(", "test_ratio", "*", "n", ")", "\n", "n_val", "=", "int", "(", "val_ratio", "*", "n", ")", "\n", "n_train", "=", "n", "-", "n_test", "-", "n_val", "\n", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "train_indices", "=", "set", "(", "indices", "[", ":", "n_train", "]", ")", "\n", "val_indices", "=", "set", "(", "indices", "[", "n_train", ":", "n_train", "+", "n_val", "]", ")", "\n", "test_indices", "=", "set", "(", "indices", "[", "-", "n_test", ":", "]", ")", "\n", "assert", "set", ".", "intersection", "(", "train_indices", ",", "val_indices", ",", "test_indices", ")", "==", "set", "(", ")", "\n", "assert", "len", "(", "train_indices", ")", "+", "len", "(", "val_indices", ")", "+", "len", "(", "test_indices", ")", "==", "n", "\n", "\n", "splits", "=", "{", "\n", "\"train\"", ":", "list", "(", "train_indices", ")", ",", "\n", "\"val\"", ":", "list", "(", "val_indices", ")", ",", "\n", "\"test\"", ":", "list", "(", "test_indices", ")", ",", "\n", "}", "\n", "folds", ".", "append", "(", "splits", ")", "\n", "", "return", "folds", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.prepare_pixels": [[26, 98], ["preprocessing.downloader.s2_download", "prepare_pixels.create_blocks", "prepare_pixels.get_ground_truth_parcels", "prepare_pixels.compute_bboxes_and_masks", "print", "parcels.reset_index.reset_index", "prepare_pixels.write_metadata", "print", "range", "tqdm.tqdm", "rasterio.open", "rasterio.open", "rasterio.open", "geopandas.GeoSeries", "mask.sum().astype", "len", "len", "len", "len", "int", "len", "str", "len", "zarr.open", "zarr_files.append", "range", "numpy.stack", "tqdm.tqdm", "shapely.geometry.box", "enumerate", "len", "len", "range", "mask.sum", "len", "len", "prepare_pixels.read_s2_image", "len", "tqdm.tqdm"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.downloader.s2_download", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.create_blocks", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.get_ground_truth_parcels", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.compute_bboxes_and_masks", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.write_metadata", "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.read_s2_image"], ["def", "prepare_pixels", "(", "config", ")", ":", "\n", "    ", "s2_images", ":", "List", "[", "S2Image", "]", "=", "s2_download", "(", "\n", "config", ".", "tile", ",", "\n", "config", ".", "start_date", ",", "\n", "config", ".", "end_date", ",", "\n", "config", ".", "download_dir", ",", "\n", "min_coverage", "=", "config", ".", "min_coverage", ",", "\n", "max_cloudy_pct", "=", "config", ".", "max_cloudy_percentage", ",", "\n", "sort_by_date", "=", "True", ",", "\n", "bands", "=", "config", ".", "bands", ",", "\n", "data_collection", "=", "config", ".", "data_collection", ",", "\n", "# previews=True,", "\n", ")", "\n", "# fix_crs(s2_images)", "\n", "# Load bounding box and transform information for chosen S2 tile", "\n", "with", "rasterio", ".", "open", "(", "s2_images", "[", "0", "]", ".", "bands_10m", "[", "0", "]", ")", "as", "f", ":", "\n", "        ", "tile_bbox", "=", "gpd", ".", "GeoSeries", "(", "box", "(", "*", "f", ".", "bounds", ")", ")", "\n", "tile_bbox", ".", "crs", "=", "f", ".", "crs", "\n", "tile_transform", "=", "f", ".", "transform", "\n", "tile_crs", "=", "f", ".", "crs", "\n", "\n", "", "cloudy_percentages", "=", "[", "s2_image", ".", "cloudy_pct", "for", "s2_image", "in", "s2_images", "]", "\n", "\n", "# Group parcels by spatial blocks to ensure independence across years", "\n", "blocks", "=", "create_blocks", "(", "tile_bbox", ",", "config", ")", "\n", "\n", "# Load parcels from shapefile", "\n", "parcels", "=", "get_ground_truth_parcels", "(", "tile_bbox", ",", "config", ",", "blocks", ")", "\n", "# top_100_labels(parcels, config)", "\n", "\n", "# Create bounding boxes and masks for each parcel", "\n", "bboxes", ",", "masks", "=", "compute_bboxes_and_masks", "(", "parcels", ",", "tile_transform", ")", "\n", "n_pixels", "=", "[", "mask", ".", "sum", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "for", "mask", "in", "masks", "]", "\n", "\n", "# Remove polygons with 0 pixels, if any", "\n", "valid_indices", "=", "[", "idx", "for", "idx", ",", "S", "in", "enumerate", "(", "n_pixels", ")", "if", "S", "!=", "0", "]", "\n", "print", "(", "f'Remaining parcels after removing parcels with no pixels: {len(valid_indices)}/{len(masks)}'", ")", "\n", "parcels", "=", "parcels", ".", "iloc", "[", "valid_indices", "]", "\n", "parcels", "=", "parcels", ".", "reset_index", "(", ")", "\n", "bboxes", "=", "[", "bboxes", "[", "i", "]", "for", "i", "in", "valid_indices", "]", "\n", "masks", "=", "[", "masks", "[", "i", "]", "for", "i", "in", "valid_indices", "]", "\n", "n_pixels", "=", "[", "n_pixels", "[", "i", "]", "for", "i", "in", "valid_indices", "]", "\n", "assert", "len", "(", "parcels", ")", "==", "len", "(", "bboxes", ")", "==", "len", "(", "masks", ")", "==", "len", "(", "n_pixels", ")", "\n", "\n", "# Write various metadata", "\n", "dates", "=", "[", "int", "(", "tile", ".", "yyyymmdd", ")", "for", "tile", "in", "s2_images", "]", "\n", "write_metadata", "(", "parcels", ",", "bboxes", ",", "masks", ",", "dates", ",", "n_pixels", ",", "config", ",", "tile_transform", ",", "tile_crs", ",", "cloudy_percentages", ")", "\n", "\n", "# Setup zarr files", "\n", "print", "(", "'Initializing .zarr files...'", ")", "\n", "zarr_files", "=", "[", "]", "\n", "is_l2a", "=", "config", ".", "data_collection", "==", "'l2a'", "\n", "for", "parcel_idx", "in", "range", "(", "len", "(", "parcels", ")", ")", ":", "\n", "        ", "parcel_file", "=", "str", "(", "config", ".", "data_dir", "/", "f\"{parcel_idx}.zarr\"", ")", "\n", "n_bands", "=", "len", "(", "config", ".", "bands", ")", "\n", "if", "is_l2a", ":", "# append cloud mask as last band", "\n", "            ", "n_bands", "+=", "1", "\n", "", "pixel_set_shape", "=", "(", "len", "(", "dates", ")", ",", "n_bands", ",", "n_pixels", "[", "parcel_idx", "]", ")", "# (T, C, S)", "\n", "z", "=", "zarr", ".", "open", "(", "parcel_file", ",", "mode", "=", "'a'", ",", "shape", "=", "pixel_set_shape", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "zarr_files", ".", "append", "(", "z", ")", "\n", "\n", "# Load step_size S2 samples at a time, extract pixels for each parcel and write to zarr files.", "\n", "", "step_size", "=", "config", ".", "buffer_size", "\n", "for", "img_idx", "in", "tqdm", "(", "range", "(", "0", ",", "len", "(", "s2_images", ")", ",", "step_size", ")", ",", "desc", "=", "'processing s2 image'", ")", ":", "\n", "        ", "t0", ",", "t1", "=", "img_idx", ",", "img_idx", "+", "step_size", "\n", "image", "=", "np", ".", "stack", "(", "[", "read_s2_image", "(", "s2_image", ",", "tile_transform", ",", "is_l2a", "=", "is_l2a", ")", "for", "s2_image", "in", "tqdm", "(", "s2_images", "[", "t0", ":", "t1", "]", ",", "desc", "=", "'reading S2 images to memory'", ",", "leave", "=", "False", ")", "]", ")", "\n", "\n", "for", "parcel_idx", "in", "tqdm", "(", "range", "(", "len", "(", "parcels", ")", ")", ",", "desc", "=", "'writing parcel pixels sets'", ",", "leave", "=", "False", ")", ":", "\n", "            ", "bbox", ",", "mask", "=", "bboxes", "[", "parcel_idx", "]", ",", "masks", "[", "parcel_idx", "]", "\n", "pixels", "=", "image", "[", "...", ",", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "]", "[", "...", ",", "mask", "]", "# (C, S)", "\n", "zarr_files", "[", "parcel_idx", "]", "[", "t0", ":", "t1", "]", "=", "pixels", "\n", "", "del", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.compute_bboxes_and_masks": [[100, 108], ["print", "rasterio.features.rasterize", "print", "mahotas.labeled.bbox", "enumerate", "enumerate"], "function", ["None"], ["", "", "def", "compute_bboxes_and_masks", "(", "parcels", ",", "transform", ")", ":", "\n", "    ", "print", "(", "'Rasterizing polygons...'", ")", "\n", "polygon_index", "=", "[", "(", "polygon", ",", "idx", ")", "for", "idx", ",", "polygon", "in", "enumerate", "(", "parcels", ".", "geometry", ",", "start", "=", "1", ")", "]", "# 0 = background", "\n", "labeled", "=", "rasterize", "(", "polygon_index", ",", "out_shape", "=", "(", "10980", ",", "10980", ")", ",", "transform", "=", "transform", ")", "\n", "print", "(", "'Computing bounding boxes and masks for each polygon...'", ")", "\n", "bboxes", "=", "mh", ".", "labeled", ".", "bbox", "(", "labeled", ",", "as_slice", "=", "True", ")", "[", "1", ":", "]", "# remove background bbox", "\n", "masks", "=", "[", "(", "labeled", "[", "bbox", "]", "==", "idx", ")", ".", "astype", "(", "bool", ")", "for", "idx", ",", "bbox", "in", "enumerate", "(", "bboxes", ",", "start", "=", "1", ")", "]", "\n", "return", "bboxes", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.write_metadata": [[110, 144], ["print", "pickle.dump", "print", "open", "pickle.dump", "open", "int", "prepare_pixels.get_geometric_features", "parcels.iterrows", "parcels.iterrows"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.get_geometric_features"], ["", "def", "write_metadata", "(", "parcels", ",", "bboxes", ",", "masks", ",", "dates", ",", "n_pixels", ",", "config", ",", "tile_transform", ",", "tile_crs", ",", "cloudy_pct", ",", "write_geometry", "=", "False", ")", ":", "\n", "    ", "print", "(", "'Writing metadata...'", ")", "\n", "metadata", "=", "{", "\n", "'start_date'", ":", "config", ".", "start_date", ",", "\n", "'end_date'", ":", "config", ".", "end_date", ",", "\n", "'dates'", ":", "dates", ",", "\n", "'cloudy_pct'", ":", "cloudy_pct", ",", "\n", "'parcels'", ":", "[", "\n", "{", "\n", "'id'", ":", "int", "(", "p", "[", "config", ".", "id_column", "]", ")", ",", "\n", "'label'", ":", "p", "[", "config", ".", "crop_code_column", "]", ",", "\n", "'n_pixels'", ":", "n_pixels", "[", "idx", "]", ",", "\n", "'block'", ":", "p", "[", "'block'", "]", ",", "\n", "'geometric_features'", ":", "get_geometric_features", "(", "p", ",", "masks", "[", "idx", "]", ")", ",", "\n", "}", "for", "idx", ",", "p", "in", "parcels", ".", "iterrows", "(", ")", "\n", "]", ",", "\n", "}", "\n", "pickle", ".", "dump", "(", "metadata", ",", "open", "(", "config", ".", "meta_dir", "/", "'metadata.pkl'", ",", "'wb'", ")", ")", "\n", "\n", "if", "write_geometry", ":", "\n", "        ", "geometry", "=", "{", "\n", "'tile'", ":", "config", ".", "tile", ",", "\n", "'tile_transform'", ":", "tile_transform", ",", "\n", "'tile_crs'", ":", "tile_crs", ",", "\n", "'parcels'", ":", "[", "\n", "{", "\n", "'id'", ":", "p", "[", "config", ".", "id_column", "]", ",", "\n", "'bbox'", ":", "bboxes", "[", "idx", "]", ",", "\n", "'mask'", ":", "masks", "[", "idx", "]", ",", "\n", "}", "for", "idx", ",", "p", "in", "parcels", ".", "iterrows", "(", ")", "\n", "]", ",", "\n", "}", "\n", "pickle", ".", "dump", "(", "geometry", ",", "open", "(", "config", ".", "meta_dir", "/", "'geometry.pkl'", ",", "'wb'", ")", ")", "\n", "", "print", "(", "'Done writing metadata.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.get_geometric_features": [[146, 153], ["mask.sum"], "function", ["None"], ["", "def", "get_geometric_features", "(", "parcel", ",", "mask", ")", ":", "\n", "# Compute geometric features", "\n", "    ", "perimeter", "=", "parcel", ".", "geometry", ".", "length", "# Parcel Perimeter (meters)", "\n", "area", "=", "parcel", ".", "geometry", ".", "area", "# Parcel Area (squared meters)", "\n", "perimeter_area_ratio", "=", "perimeter", "/", "area", "# Perimeter / Area", "\n", "cover_ratio", "=", "mask", ".", "sum", "(", ")", "/", "mask", ".", "size", "# n pixels in parcel / n pixels in bounding box", "\n", "return", "[", "perimeter", ",", "area", ",", "perimeter_area_ratio", ",", "cover_ratio", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.read_s2_image": [[155, 188], ["numpy.empty", "numpy.empty", "enumerate", "enumerate", "cv2.resize", "numpy.moveaxis", "cloud_mask[].astype", "numpy.concatenate", "numpy.concatenate", "geopandas.read_file", "rasterio.features.rasterize", "rasterio.open", "rasterio.open", "rasterio.open", "numpy.squeeze", "rasterio.open", "rasterio.open", "rasterio.open", "numpy.squeeze", "len", "len", "numpy.zeros", "f.read", "f.read"], "function", ["None"], ["", "def", "read_s2_image", "(", "s2_image", ":", "S2Image", ",", "tile_transform", "=", "None", ",", "is_l2a", "=", "False", ")", ":", "\n", "    ", "x10", "=", "np", ".", "empty", "(", "shape", "=", "(", "10980", ",", "10980", ",", "len", "(", "s2_image", ".", "bands_10m", ")", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "x20", "=", "np", ".", "empty", "(", "shape", "=", "(", "10980", "//", "2", ",", "10980", "//", "2", ",", "len", "(", "s2_image", ".", "bands_20m", ")", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "\n", "if", "is_l2a", ":", "\n", "        ", "try", ":", "\n", "            ", "cloud_mask", "=", "gpd", ".", "read_file", "(", "s2_image", ".", "cloud_mask", ")", "\n", "cloud_mask", "=", "rasterize", "(", "cloud_mask", ".", "geometry", ",", "out_shape", "=", "(", "10980", ",", "10980", ")", ",", "transform", "=", "tile_transform", ")", "# clouds will be set to 1", "\n", "", "except", ":", "# there sometimes is no cloud mask if no clouds", "\n", "            ", "assert", "s2_image", ".", "cloudy_pct", "==", "0.0", "\n", "cloud_mask", "=", "np", ".", "zeros", "(", "(", "10980", ",", "10980", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "", "cloud_mask", "=", "cloud_mask", "*", "(", "2", "**", "16", "-", "1", ")", "# set clouds as max pixel value", "\n", "cloud_mask", "=", "cloud_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "", "else", ":", "\n", "        ", "cloud_mask", "=", "None", "\n", "\n", "", "for", "band_idx", ",", "path", "in", "enumerate", "(", "s2_image", ".", "bands_10m", ")", ":", "\n", "        ", "with", "rasterio", ".", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "x10", "[", "...", ",", "band_idx", "]", "=", "np", ".", "squeeze", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "for", "band_idx", ",", "path", "in", "enumerate", "(", "s2_image", ".", "bands_20m", ")", ":", "\n", "        ", "with", "rasterio", ".", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "x20", "[", "...", ",", "band_idx", "]", "=", "np", ".", "squeeze", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "x20", "=", "cv2", ".", "resize", "(", "x20", ",", "x10", ".", "shape", "[", ":", "2", "]", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "is_l2a", ":", "\n", "        ", "image", "=", "np", ".", "concatenate", "(", "[", "x10", ",", "x20", ",", "cloud_mask", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "image", "=", "np", ".", "concatenate", "(", "[", "x10", ",", "x20", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "image", "=", "np", ".", "moveaxis", "(", "image", ",", "-", "1", ",", "0", ")", "# channels first", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.top_100_labels": [[190, 206], ["shapefile.copy", "utils.label_utils.get_codification_table", "print", "df[].value_counts().head().to_string", "utils.label_utils.get_codification_table", "print", "print", "exit", "utils.label_utils.get_codification_table", "print", "df[].value_counts().head().to_string", "df[].value_counts().head().to_string", "df[].value_counts().head", "config.crop_code_column.lower", "str", "df[].value_counts().head", "str", "df[].value_counts().head", "df[].value_counts", "int", "config.crop_code_column.lower", "int", "config.crop_code_column.lower", "df[].value_counts", "df[].value_counts"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_codification_table", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_codification_table", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_codification_table"], ["", "def", "top_100_labels", "(", "shapefile", ",", "config", ")", ":", "\n", "    ", "df", "=", "shapefile", ".", "copy", "(", ")", "\n", "if", "config", ".", "country", "==", "'france'", ":", "\n", "        ", "crop_codes", "=", "label_utils", ".", "get_codification_table", "(", "'france'", ")", "\n", "df", "[", "'label'", "]", "=", "[", "crop_codes", "[", "code", "]", "for", "code", "in", "df", "[", "config", ".", "crop_code_column", ".", "lower", "(", ")", "]", "]", "\n", "print", "(", "df", "[", "'label'", "]", ".", "value_counts", "(", ")", ".", "head", "(", "100", ")", ".", "to_string", "(", ")", ")", "\n", "", "elif", "config", ".", "country", "==", "'austria'", ":", "\n", "        ", "crop_codes", "=", "label_utils", ".", "get_codification_table", "(", "'austria'", ")", "\n", "df", "[", "'label'", "]", "=", "[", "crop_codes", "[", "str", "(", "int", "(", "code", ")", ")", "]", "for", "code", "in", "df", "[", "config", ".", "crop_code_column", ".", "lower", "(", ")", "]", "]", "\n", "print", "(", "df", ".", "columns", ")", "\n", "print", "(", "df", "[", "[", "'snar_code'", ",", "'snar_bezei'", "]", "]", ".", "value_counts", "(", ")", ".", "head", "(", "1000", ")", ".", "to_string", "(", ")", ")", "\n", "exit", "(", ")", "\n", "", "else", ":", "\n", "        ", "crop_codes", "=", "label_utils", ".", "get_codification_table", "(", "'denmark'", ")", "\n", "df", "[", "'label'", "]", "=", "[", "crop_codes", "[", "str", "(", "int", "(", "code", ")", ")", "]", "for", "code", "in", "df", "[", "config", ".", "crop_code_column", ".", "lower", "(", ")", "]", "]", "\n", "print", "(", "df", "[", "'label'", "]", ".", "value_counts", "(", ")", ".", "head", "(", "100", ")", ".", "to_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.get_ground_truth_parcels": [[208, 259], ["output_dir.mkdir", "print", "os.path.join", "output_file.exists", "print", "geopandas.read_file", "df.drop.to_crs", "df.drop.columns.str.lower", "print", "len", "df.drop.geometry.buffer", "print", "print", "print", "df.drop.to_file", "print", "geopandas.read_file", "glob.glob", "df.drop.drop", "tqdm.tqdm", "print", "os.path.join", "len", "blocks.iterrows", "df.drop.geometry.within", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "get_ground_truth_parcels", "(", "tile_bbox", ",", "config", ",", "blocks", "=", "None", ",", "erosion_m", "=", "20", ",", "min_area_sqm", "=", "10000", ")", ":", "\n", "    ", "output_dir", "=", "config", ".", "meta_dir", "/", "'parcels'", "\n", "output_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "print", "(", "'Creating new label shape file...'", ")", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "ground_truth_dir", ",", "config", ".", "country", ",", "config", ".", "year", ")", "\n", "gt_shape_file", "=", "None", "\n", "output_file", "=", "output_dir", "/", "f'parcels_{config.country}_{config.tile}_{config.year}.shp'", "\n", "if", "output_file", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "'Loading cached label shapefile'", ")", "\n", "return", "gpd", ".", "read_file", "(", "output_file", ")", "\n", "\n", "", "for", "filetype", "in", "[", "'shp'", ",", "'gpkg'", "]", ":", "\n", "        ", "res", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "gt_path", ",", "f\"*.{filetype}\"", ")", ")", "\n", "if", "len", "(", "res", ")", ">", "0", ":", "\n", "            ", "gt_shape_file", "=", "res", "[", "0", "]", "\n", "out_filetype", "=", "filetype", "\n", "break", "\n", "\n", "", "", "print", "(", "'reading ground truth file...'", ",", "gt_shape_file", ")", "\n", "df", "=", "gpd", ".", "read_file", "(", "gt_shape_file", ",", "bbox", "=", "tile_bbox", ")", "\n", "df", "=", "df", ".", "to_crs", "(", "tile_bbox", ".", "crs", ")", "\n", "# remove binary column in austria dataset", "\n", "if", "config", ".", "country", "==", "'austria'", ":", "\n", "        ", "df", "=", "df", ".", "drop", "(", "columns", "=", "'GML_GEOM'", ",", "errors", "=", "'ignore'", ")", "\n", "", "df", ".", "columns", "=", "df", ".", "columns", ".", "str", ".", "lower", "(", ")", "\n", "print", "(", "df", ".", "columns", ")", "\n", "available_fields", "=", "len", "(", "df", ")", "\n", "\n", "if", "blocks", "is", "not", "None", ":", "\n", "# Assign fields to blocks", "\n", "        ", "df", "[", "'block'", "]", "=", "-", "1", "\n", "for", "block_idx", ",", "block", "in", "tqdm", "(", "blocks", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "blocks", ")", ",", "desc", "=", "'Locating fields within blocks'", ")", ":", "\n", "            ", "fields_within_bbox", "=", "df", ".", "geometry", ".", "within", "(", "block", ".", "geometry", ")", "\n", "df", ".", "loc", "[", "fields_within_bbox", ",", "'block'", "]", "=", "block_idx", "\n", "\n", "", "df", "=", "df", "[", "df", ".", "block", "!=", "-", "1", "]", "\n", "print", "(", "f'Remaining parcels after removing those not contained in blocks: {len(df)}/{available_fields}'", ")", "\n", "", "else", ":", "\n", "        ", "df", "[", "'block'", "]", "=", "0", "# assign all to single block", "\n", "\n", "", "df", ".", "geometry", "=", "df", ".", "geometry", ".", "buffer", "(", "-", "erosion_m", ")", "\n", "df", "=", "df", "[", "~", "df", ".", "geometry", ".", "is_empty", "]", "\n", "print", "(", "f'Remaining parcels after {erosion_m}m erosion: {len(df)}/{available_fields}'", ")", "\n", "\n", "df", "=", "df", "[", "df", ".", "geometry", ".", "area", ">=", "min_area_sqm", "]", "\n", "print", "(", "f'Remaining parcels after removing parcels less than {min_area_sqm} m2: {len(df)}/{available_fields}'", ")", "\n", "\n", "print", "(", "'Saving filtered shapefile...'", ")", "\n", "df", ".", "to_file", "(", "output_file", ")", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.create_blocks": [[261, 298], ["output_dir.mkdir", "list", "print", "geopandas.GeoDataFrame", "gpd.GeoDataFrame.to_file", "itertools.product", "prepare_pixels.create_blocks.pixel_to_world"], "function", ["None"], ["", "def", "create_blocks", "(", "tile_bbox", ",", "config", ",", "s2_tile_size", "=", "10980", ")", ":", "\n", "    ", "output_dir", "=", "config", ".", "meta_dir", "/", "'blocks'", "\n", "output_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "output_file", "=", "output_dir", "/", "f'blocks_{config.country}_{config.tile}_{config.year}.shp'", "\n", "\n", "crs", "=", "tile_bbox", ".", "crs", "\n", "bbox_minx", ",", "bbox_miny", ",", "bbox_maxx", ",", "bbox_maxy", "=", "tile_bbox", ".", "bounds", ".", "values", "[", "0", "]", "\n", "\n", "block_size", ",", "margin", "=", "config", ".", "block_size", ",", "config", ".", "margin", "\n", "\n", "fixed_raster_size", "=", "s2_tile_size", "-", "(", "(", "s2_tile_size", "-", "block_size", ")", "%", "(", "block_size", "+", "margin", ")", ")", "\n", "blocks", "=", "list", "(", "product", "(", "range", "(", "0", ",", "fixed_raster_size", ",", "block_size", "+", "margin", ")", ",", "repeat", "=", "2", ")", ")", "\n", "blocks", "=", "[", "(", "minx", ",", "miny", ",", "block_size", ",", "block_size", ")", "for", "minx", ",", "miny", "in", "blocks", "]", "\n", "blocks", "=", "[", "{", "'idx'", ":", "idx", ",", "'bbox'", ":", "bbox", "}", "for", "idx", ",", "bbox", "in", "enumerate", "(", "blocks", ")", "]", "\n", "\n", "print", "(", "\n", "f'Dividing rasters with block_size={block_size} and margin={margin}, leaving {s2_tile_size - fixed_raster_size}px unused'", ")", "\n", "\n", "def", "pixel_to_world", "(", "x", ",", "y", ",", "ulx", ",", "uly", ",", "res", "=", "10", ")", ":", "\n", "        ", "return", "res", "*", "x", "+", "ulx", ",", "uly", "-", "y", "*", "res", "\n", "\n", "", "blocks_world", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "        ", "minx", ",", "miny", ",", "width", ",", "height", "=", "block", "[", "'bbox'", "]", "\n", "world_minx", ",", "world_maxy", "=", "pixel_to_world", "(", "minx", ",", "miny", ",", "ulx", "=", "bbox_minx", ",", "uly", "=", "bbox_maxy", ")", "\n", "\n", "blocks_world", ".", "append", "(", "box", "(", "\n", "minx", "=", "world_minx", ",", "\n", "miny", "=", "world_maxy", "-", "height", "*", "10", ",", "\n", "maxx", "=", "world_minx", "+", "width", "*", "10", ",", "\n", "maxy", "=", "world_maxy", ",", "\n", ")", ")", "\n", "\n", "", "gdf", "=", "gpd", ".", "GeoDataFrame", "(", "{", "'id'", ":", "list", "(", "range", "(", "len", "(", "blocks", ")", ")", ")", "}", ",", "geometry", "=", "blocks_world", ",", "crs", "=", "crs", ")", "\n", "gdf", ".", "to_file", "(", "output_file", ")", "\n", "\n", "return", "gdf", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.preprocessing.prepare_pixels.fix_crs": [[299, 309], ["print", "gdal.Open", "osr.SpatialReference", "osr.SpatialReference.ImportFromEPSG", "gdal.Open.SetProjection", "str", "osr.SpatialReference.ExportToWkt"], "function", ["None"], ["", "def", "fix_crs", "(", "s2_images", ",", "epsg", "=", "32632", ")", ":", "\n", "    ", "from", "osgeo", "import", "gdal", ",", "osr", "\n", "for", "s2_image", "in", "s2_images", ":", "\n", "        ", "for", "band", "in", "s2_image", ".", "bands_10m", "+", "s2_image", ".", "bands_20m", ":", "\n", "            ", "ds", "=", "gdal", ".", "Open", "(", "str", "(", "band", ")", ",", "1", ")", "\n", "proj", "=", "osr", ".", "SpatialReference", "(", ")", "\n", "proj", ".", "ImportFromEPSG", "(", "32632", ")", "\n", "ds", ".", "SetProjection", "(", "proj", ".", "ExportToWkt", "(", ")", ")", "\n", "ds", "=", "None", "\n", "", "", "print", "(", "'updated crs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.samplers.VariableSequenceLengthBatchSampler.__init__": [[10, 27], ["range", "enumerate", "all", "len", "n_examples_per_seq_length.append", "sum", "list", "sum", "len", "len", "len", "len", "range", "range", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "\n", "n_examples_per_seq_length", "=", "[", "]", "\n", "for", "zarr_file_idx", "in", "range", "(", "len", "(", "data_source", ".", "zarr_files", ")", ")", ":", "\n", "            ", "n_examples_per_seq_length", ".", "append", "(", "len", "(", "[", "1", "for", "idx", ",", "_", ",", "_", ",", "_", "in", "data_source", ".", "images", "if", "idx", "==", "zarr_file_idx", "]", ")", ")", "\n", "\n", "", "self", ".", "batches", "=", "[", "]", "\n", "for", "offset_idx", ",", "n_examples", "in", "enumerate", "(", "n_examples_per_seq_length", ")", ":", "\n", "            ", "offset", "=", "sum", "(", "x", "for", "x", "in", "n_examples_per_seq_length", "[", ":", "offset_idx", "]", ")", "\n", "indices", "=", "list", "(", "range", "(", "offset", ",", "offset", "+", "n_examples", ")", ")", "\n", "self", ".", "batches", "+=", "[", "indices", "[", "a", ":", "a", "+", "batch_size", "]", "for", "a", "in", "range", "(", "0", ",", "n_examples", ",", "batch_size", ")", "]", "\n", "\n", "# Sanity checks: all batches should be at most the batch size, and all patches should be included.", "\n", "", "assert", "all", "(", "[", "len", "(", "batch", ")", "<=", "batch_size", "for", "batch", "in", "self", ".", "batches", "]", ")", "\n", "assert", "sum", "(", "[", "len", "(", "batch", ")", "for", "batch", "in", "self", ".", "batches", "]", ")", "==", "len", "(", "data_source", ")", "\n", "assert", "len", "(", "{", "idx", "for", "batch", "in", "self", ".", "batches", "for", "idx", "in", "batch", "}", ")", "==", "len", "(", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.samplers.VariableSequenceLengthBatchSampler.__iter__": [[28, 31], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "batch", "in", "self", ".", "batches", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.samplers.VariableSequenceLengthBatchSampler.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batches", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.AverageMeter.__init__": [[126, 128], ["metrics.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.AverageMeter.reset": [[129, 134], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.AverageMeter.update": [[135, 140], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.accuracy": [[6, 10], ["torch.no_grad", "outputs.argmax", "outputs.argmax.eq().float().mean().item", "outputs.argmax.eq().float().mean", "outputs.argmax.eq().float", "outputs.argmax.eq"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "accuracy", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "preds", "=", "outputs", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "return", "preds", ".", "eq", "(", "targets", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.f1_score": [[12, 25], ["range", "f1_scores.append", "numpy.mean", "confusion_matrix[].sum", "confusion_matrix[].sum", "float"], "function", ["None"], ["", "def", "f1_score", "(", "confusion_matrix", ",", "reduce_mean", "=", "True", ")", ":", "\n", "    ", "f1_scores", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "confusion_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "true_positives", "=", "confusion_matrix", "[", "index", ",", "index", "]", "\n", "false_positives", "=", "confusion_matrix", "[", ":", ",", "index", "]", ".", "sum", "(", ")", "-", "true_positives", "\n", "false_negatives", "=", "confusion_matrix", "[", "index", ",", ":", "]", ".", "sum", "(", ")", "-", "true_positives", "\n", "denom", "=", "2", "*", "true_positives", "+", "false_positives", "+", "false_negatives", "\n", "if", "denom", "==", "0", ":", "\n", "            ", "f1_score", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "f1_score", "=", "2", "*", "float", "(", "true_positives", ")", "/", "denom", "\n", "", "f1_scores", ".", "append", "(", "f1_score", ")", "\n", "", "return", "np", ".", "mean", "(", "f1_scores", ")", "if", "reduce_mean", "else", "f1_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.precision_recall_fscore_support": [[27, 49], ["range", "f1_scores.append", "precisions.append", "recalls.append", "supports.append", "confusion_matrix[].sum", "confusion_matrix[].sum", "int", "float", "float", "float"], "function", ["None"], ["", "def", "precision_recall_fscore_support", "(", "confusion_matrix", ")", ":", "\n", "    ", "f1_scores", ",", "precisions", ",", "recalls", ",", "supports", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "index", "in", "range", "(", "confusion_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "true_positives", "=", "confusion_matrix", "[", "index", ",", "index", "]", "\n", "false_positives", "=", "confusion_matrix", "[", ":", ",", "index", "]", ".", "sum", "(", ")", "-", "true_positives", "\n", "false_negatives", "=", "confusion_matrix", "[", "index", ",", ":", "]", ".", "sum", "(", ")", "-", "true_positives", "\n", "\n", "denom", "=", "true_positives", "+", "false_positives", "\n", "precision", "=", "0.0", "if", "denom", "==", "0", "else", "float", "(", "true_positives", ")", "/", "denom", "\n", "\n", "denom", "=", "true_positives", "+", "false_negatives", "\n", "recall", "=", "0.0", "if", "denom", "==", "0", "else", "float", "(", "true_positives", ")", "/", "denom", "\n", "\n", "denom", "=", "precision", "+", "recall", "\n", "f1_score", "=", "0.0", "if", "denom", "==", "0", "else", "2", "*", "float", "(", "precision", "*", "recall", ")", "/", "denom", "\n", "\n", "f1_scores", ".", "append", "(", "f1_score", ")", "\n", "precisions", ".", "append", "(", "precision", ")", "\n", "recalls", ".", "append", "(", "recall", ")", "\n", "supports", ".", "append", "(", "int", "(", "true_positives", "+", "false_negatives", ")", ")", "\n", "\n", "", "return", "precisions", ",", "recalls", ",", "f1_scores", ",", "supports", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.accuracy_cm": [[51, 53], ["numpy.diag().sum", "confusion_matrix.sum", "numpy.diag"], "function", ["None"], ["", "def", "accuracy_cm", "(", "confusion_matrix", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "confusion_matrix", ")", ".", "sum", "(", ")", "/", "confusion_matrix", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.compute_confusion_matrix": [[55, 67], ["numpy.histogramdd", "confusion_matrix.astype.astype", "numpy.vstack", "ground_truth.flatten", "prediction.flatten"], "function", ["None"], ["", "def", "compute_confusion_matrix", "(", "prediction", ",", "ground_truth", ",", "num_classes", ")", ":", "\n", "    ", "replace_indices", "=", "np", ".", "vstack", "(", "(", "\n", "ground_truth", ".", "flatten", "(", ")", ",", "\n", "prediction", ".", "flatten", "(", ")", ")", "\n", ")", ".", "T", "\n", "confusion_matrix", ",", "_", "=", "np", ".", "histogramdd", "(", "\n", "replace_indices", ",", "\n", "bins", "=", "(", "num_classes", ",", "num_classes", ")", ",", "\n", "range", "=", "[", "(", "0", ",", "num_classes", ")", ",", "(", "0", ",", "num_classes", ")", "]", "\n", ")", "\n", "confusion_matrix", "=", "confusion_matrix", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "return", "confusion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.classification_report": [[69, 81], ["metrics.precision_recall_fscore_support", "list", "metrics.accuracy_cm", "sum", "list.append", "list.append", "list.append", "tabulate.tabulate", "zip", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.precision_recall_fscore_support", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.accuracy_cm"], ["", "def", "classification_report", "(", "cm", ",", "class_names", ")", ":", "\n", "    ", "precisions", ",", "recalls", ",", "f1_scores", ",", "supports", "=", "precision_recall_fscore_support", "(", "cm", ")", "\n", "rows", "=", "list", "(", "zip", "(", "class_names", ",", "precisions", ",", "recalls", ",", "f1_scores", ",", "supports", ")", ")", "\n", "accuracy", "=", "accuracy_cm", "(", "cm", ")", "\n", "total_support", "=", "sum", "(", "supports", ")", "\n", "rows", ".", "append", "(", "[", "None", ",", "None", ",", "None", ",", "None", ",", "None", "]", ")", "\n", "rows", ".", "append", "(", "[", "'accuracy'", ",", "None", ",", "None", ",", "accuracy", ",", "total_support", "]", ")", "\n", "rows", ".", "append", "(", "[", "'macro avg'", ",", "np", ".", "mean", "(", "precisions", ")", ",", "np", ".", "mean", "(", "recalls", ")", ",", "np", ".", "mean", "(", "f1_scores", ")", ",", "total_support", "]", ")", "\n", "# weights = np.array(supports) / total_support", "\n", "# rows.append(['weighted avg', np.average(precisions, weights=weights), np.average(recalls, weights=weights), np.average(f1_scores, weights=weights), total_support])", "\n", "headers", "=", "[", "''", ",", "'precision'", ",", "'recall'", ",", "'f1-score'", ",", "'support'", "]", "\n", "return", "tabulate", "(", "rows", ",", "headers", "=", "headers", ",", "floatfmt", "=", "'.2f'", ",", "tablefmt", "=", "'pipe'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.confusion_matrix_report": [[83, 90], ["list", "zip", "tabulate.tabulate", "range", "rows.append", "len", "conf.tolist"], "function", ["None"], ["", "def", "confusion_matrix_report", "(", "cm", ",", "class_names", ")", ":", "\n", "    ", "rows", "=", "[", "]", "\n", "classes", "=", "list", "(", "range", "(", "len", "(", "class_names", ")", ")", ")", "\n", "for", "cls", ",", "conf", "in", "zip", "(", "classes", ",", "cm", ")", ":", "\n", "        ", "rows", ".", "append", "(", "[", "cls", ",", "]", "+", "conf", ".", "tolist", "(", ")", ")", "\n", "", "headers", "=", "[", "'true\\\\pred'", ",", "]", "+", "classes", "\n", "return", "tabulate", "(", "rows", ",", "headers", "=", "headers", ",", "floatfmt", "=", "'.2f'", ",", "tablefmt", "=", "'pipe'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.overall_classification_report": [[92, 121], ["numpy.array", "enumerate", "numpy.array", "rows.append", "rows.append", "range", "rows.append", "tabulate.tabulate", "metrics.precision_recall_fscore_support", "list", "rows.append", "numpy.mean", "numpy.std", "macro_avg.append", "zip", "numpy.sum", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "metrics.accuracy_cm", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.precision_recall_fscore_support", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.metrics.accuracy_cm"], ["", "def", "overall_classification_report", "(", "cms", ",", "class_names", ")", ":", "\n", "    ", "class_metrics", "=", "[", "precision_recall_fscore_support", "(", "cm", ")", "for", "cm", "in", "cms", "]", "\n", "class_metrics", "=", "np", ".", "array", "(", "class_metrics", ")", "# (len(cms), 4, len(class_names))", "\n", "class_metrics", "[", ":", ",", ":", "-", "1", "]", "*=", "100.0", "\n", "rows", "=", "[", "]", "\n", "for", "class_idx", ",", "class_name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "        ", "metrics", "=", "class_metrics", "[", ":", ",", ":", ",", "class_idx", "]", "\n", "mean_stds", "=", "list", "(", "zip", "(", "np", ".", "mean", "(", "metrics", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "metrics", ",", "axis", "=", "0", ")", ")", ")", "\n", "support_mean", ",", "support_std", "=", "mean_stds", "[", "-", "1", "]", "\n", "# mean_stds = np.array(mean_stds[:-1]) * 100.0", "\n", "mean_stds", "=", "[", "f'{mean:.1f}\u00b1{std:.1f}'", "for", "mean", ",", "std", "in", "mean_stds", "[", ":", "-", "1", "]", "]", "+", "[", "f'{support_mean:.1f}\u00b1{support_std:.1f}'", "]", "\n", "rows", ".", "append", "(", "(", "class_name", ",", "*", "mean_stds", ")", ")", "\n", "\n", "", "accs", "=", "np", ".", "array", "(", "[", "accuracy_cm", "(", "cm", ")", "*", "100.0", "for", "cm", "in", "cms", "]", ")", "\n", "accuracy", "=", "'{:.1f}\u00b1{:.1f}'", ".", "format", "(", "np", ".", "mean", "(", "accs", ")", ",", "np", ".", "std", "(", "accs", ")", ")", "\n", "rows", ".", "append", "(", "[", "None", ",", "None", ",", "None", ",", "None", ",", "None", "]", ")", "\n", "rows", ".", "append", "(", "[", "'accuracy'", ",", "None", ",", "None", ",", "None", ",", "accuracy", "]", ")", "\n", "macro_avg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "i", "==", "3", ":", "# sum support", "\n", "            ", "macro_avg_per_run", "=", "np", ".", "sum", "(", "class_metrics", "[", ":", ",", "i", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "std", "=", "np", ".", "std", "(", "macro_avg_per_run", ")", "\n", "", "else", ":", "\n", "            ", "macro_avg_per_run", "=", "np", ".", "mean", "(", "class_metrics", "[", ":", ",", "i", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "std", "=", "np", ".", "std", "(", "macro_avg_per_run", ")", "\n", "", "macro_avg", ".", "append", "(", "f'{np.mean(macro_avg_per_run):.1f}\u00b1{std:.1f}'", ")", "\n", "", "rows", ".", "append", "(", "[", "'macro avg'", ",", "*", "macro_avg", "]", ")", "\n", "headers", "=", "[", "''", ",", "'precision'", ",", "'recall'", ",", "'f1-score'", ",", "'support'", "]", "\n", "return", "tabulate", "(", "rows", ",", "headers", "=", "headers", ",", "floatfmt", "=", "'.2f'", ",", "tablefmt", "=", "'pipe'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_classes": [[5, 13], ["sorted", "label_utils.get_code_to_class", "class_sets.append", "list", "set", "method", "get_code_to_class.values"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_code_to_class"], ["def", "get_classes", "(", "*", "countries", ",", "method", "=", "set", ".", "union", ",", "combine_spring_and_winter", "=", "False", ")", ":", "\n", "    ", "class_sets", "=", "[", "]", "\n", "for", "country", "in", "countries", ":", "\n", "        ", "code_to_class", "=", "get_code_to_class", "(", "country", ",", "combine_spring_and_winter", ")", "\n", "class_sets", ".", "append", "(", "set", "(", "code_to_class", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "classes", "=", "sorted", "(", "list", "(", "method", "(", "*", "class_sets", ")", ")", ")", "\n", "return", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.read_yaml_class_mapping": [[14, 16], ["yaml.load", "open", "os.path.join"], "function", ["None"], ["", "def", "read_yaml_class_mapping", "(", "country", ")", ":", "\n", "    ", "return", "yaml", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "'class_mapping'", ",", "f'{country}_class_mapping.yml'", ")", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_code_to_class": [[17, 37], ["label_utils.read_yaml_class_mapping", "read_yaml_class_mapping.keys", "code_to_class.update", "code_to_class.update", "code_to_class.update", "code_to_class.update", "codes[].keys", "codes[].keys"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.read_yaml_class_mapping", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.update", "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.update"], ["", "def", "get_code_to_class", "(", "country", ",", "combine_spring_and_winter", "=", "False", ")", ":", "\n", "    ", "class_mapping", "=", "read_yaml_class_mapping", "(", "country", ")", "\n", "\n", "code_to_class", "=", "{", "}", "\n", "for", "cls", "in", "class_mapping", ".", "keys", "(", ")", ":", "\n", "        ", "codes", "=", "class_mapping", "[", "cls", "]", "\n", "if", "codes", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "'spring'", "in", "codes", "and", "'winter'", "in", "codes", ":", "\n", "            ", "if", "combine_spring_and_winter", ":", "\n", "                ", "combined", "=", "{", "**", "(", "codes", "[", "'spring'", "]", "if", "codes", "[", "'spring'", "]", "is", "not", "None", "else", "{", "}", ")", ",", "**", "(", "codes", "[", "'winter'", "]", "if", "codes", "[", "'winter'", "]", "is", "not", "None", "else", "{", "}", ")", "}", "\n", "code_to_class", ".", "update", "(", "{", "code", ":", "cls", "for", "code", "in", "combined", "}", ")", "\n", "", "else", ":", "\n", "                ", "if", "codes", "[", "'spring'", "]", "is", "not", "None", ":", "\n", "                    ", "code_to_class", ".", "update", "(", "{", "code", ":", "f'spring_{cls}'", "for", "code", "in", "codes", "[", "'spring'", "]", ".", "keys", "(", ")", "}", ")", "\n", "", "if", "codes", "[", "'winter'", "]", "is", "not", "None", ":", "\n", "                    ", "code_to_class", ".", "update", "(", "{", "code", ":", "f'winter_{cls}'", "for", "code", "in", "codes", "[", "'winter'", "]", ".", "keys", "(", ")", "}", ")", "\n", "", "", "", "else", ":", "\n", "            ", "code_to_class", ".", "update", "(", "{", "code", ":", "cls", "for", "code", "in", "codes", "}", ")", "\n", "", "", "return", "code_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_shapefile_columns": [[38, 41], ["None"], "function", ["None"], ["", "def", "get_shapefile_columns", "(", "country", ")", ":", "\n", "    ", "cols", "=", "_shapefile_columns", "[", "country", "]", "\n", "return", "cols", "[", "'id'", "]", ",", "cols", "[", "'crop_code'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.label_utils.get_codification_table": [[42, 49], ["os.path.join", "open", "csv.reader"], "function", ["None"], ["", "def", "get_codification_table", "(", "country", ")", ":", "\n", "    ", "codification_table", "=", "os", ".", "path", ".", "join", "(", "'class_mapping'", ",", "f'{country}_codification_table.csv'", ")", "\n", "with", "open", "(", "codification_table", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "        ", "delimiter", "=", "';'", "if", "country", "in", "[", "'denmark'", ",", "'austria'", "]", "else", "','", "\n", "crop_codes", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "delimiter", ")", "\n", "crop_codes", "=", "{", "x", "[", "0", "]", ":", "x", "[", "1", "]", "for", "x", "in", "crop_codes", "}", "# crop_code: (name, group)", "\n", "", "return", "crop_codes", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.__init__": [[38, 40], ["train_utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.reset": [[41, 46], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.AverageMeter.update": [[47, 52], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.to_cuda": [[8, 18], ["sample[].cuda", "sample[].cuda", "sample[].cuda", "sample[].cuda", "sample[].cuda"], "function", ["None"], ["def", "to_cuda", "(", "sample", ",", "device", ",", "non_blocking", "=", "True", ")", ":", "\n", "    ", "pixels", "=", "sample", "[", "'pixels'", "]", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "valid_pixels", "=", "sample", "[", "'valid_pixels'", "]", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "positions", "=", "sample", "[", "'positions'", "]", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "gdd", "=", "sample", "[", "'gdd'", "]", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "if", "'extra'", "in", "sample", ":", "\n", "        ", "extra", "=", "sample", "[", "'extra'", "]", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "else", ":", "\n", "        ", "extra", "=", "None", "\n", "", "return", "pixels", ",", "valid_pixels", ",", "positions", ",", "extra", ",", "gdd", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.cat_samples": [[20, 30], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "cat_samples", "(", "samples", ")", ":", "\n", "    ", "out", "=", "{", "\n", "'pixels'", ":", "torch", ".", "cat", "(", "[", "x", "[", "'pixels'", "]", "for", "x", "in", "samples", "]", ")", ",", "\n", "'valid_pixels'", ":", "torch", ".", "cat", "(", "[", "x", "[", "'valid_pixels'", "]", "for", "x", "in", "samples", "]", ")", ",", "\n", "'positions'", ":", "torch", ".", "cat", "(", "[", "x", "[", "'positions'", "]", "for", "x", "in", "samples", "]", ")", ",", "\n", "'gdd'", ":", "torch", ".", "cat", "(", "[", "x", "[", "'gdd'", "]", "for", "x", "in", "samples", "]", ")", ",", "\n", "'extra'", ":", "torch", ".", "cat", "(", "[", "x", "[", "'extra'", "]", "for", "x", "in", "samples", "]", ")", ",", "\n", "'label'", ":", "torch", ".", "cat", "(", "[", "x", "[", "'label'", "]", "for", "x", "in", "samples", "]", ")", ",", "\n", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.onehot": [[32, 34], ["torch.zeros().scatter_", "label.view", "torch.zeros", "label.size"], "function", ["None"], ["", "def", "onehot", "(", "label", ",", "num_classes", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "return", "torch", ".", "zeros", "(", "label", ".", "size", "(", "0", ")", ",", "num_classes", ",", "device", "=", "device", ")", ".", "scatter_", "(", "1", ",", "label", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.cycle": [[54, 58], ["None"], "function", ["None"], ["", "", "def", "cycle", "(", "iterable", ")", ":", "# Don't use itertools.cycle, as it repeats the same shuffle", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "x", "in", "iterable", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.train_utils.bool_flag": [[59, 69], ["s.lower", "s.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "", "def", "bool_flag", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    Parse boolean arguments from the command line.\n    \"\"\"", "\n", "if", "s", ".", "lower", "(", ")", "in", "FALSY_STRINGS", ":", "\n", "        ", "return", "False", "\n", "", "elif", "s", ".", "lower", "(", ")", "in", "TRUTHY_STRINGS", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"invalid value for a boolean flag\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.focal_loss.FocalLoss.__init__": [[12, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.utils.focal_loss.FocalLoss.forward": [[17, 29], ["target.view.view.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "logpt.view.view.exp", "loss.mean", "loss.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "# input shape (B, C), target shape (B,)", "\n", "        ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "logpt", ".", "exp", "(", ")", "\n", "\n", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "return", "loss", ".", "mean", "(", ")", "\n", "else", ":", "return", "loss", ".", "sum", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseLTae.__init__": [[17, 69], ["torch.Module.__init__", "copy.deepcopy", "models.pse.PixelSetEncoder", "models.ltae.LTAE", "models.decoder.get_decoder"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.decoder.get_decoder"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", "=", "10", ",", "\n", "mlp1", "=", "[", "10", ",", "32", ",", "64", "]", ",", "\n", "pooling", "=", "\"mean_std\"", ",", "\n", "mlp2", "=", "[", "128", ",", "128", "]", ",", "\n", "with_extra", "=", "False", ",", "\n", "extra_size", "=", "4", ",", "\n", "n_head", "=", "16", ",", "\n", "d_k", "=", "8", ",", "\n", "d_model", "=", "256", ",", "\n", "mlp3", "=", "[", "256", ",", "128", "]", ",", "\n", "dropout", "=", "0.2", ",", "\n", "T", "=", "1000", ",", "\n", "mlp4", "=", "[", "128", ",", "64", ",", "32", "]", ",", "\n", "num_classes", "=", "20", ",", "\n", "with_gdd_extra", "=", "False", ",", "\n", "with_pos_enc", "=", "True", ",", "\n", "with_gdd_pos", "=", "False", ",", "\n", "pos_type", "=", "'default'", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PseLTae", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mlp2", "=", "deepcopy", "(", "mlp2", ")", "\n", "if", "with_extra", ":", "\n", "            ", "mlp2", "[", "0", "]", "+=", "extra_size", "\n", "\n", "", "if", "with_gdd_extra", ":", "\n", "            ", "mlp2", "[", "0", "]", "+=", "1", "\n", "\n", "", "self", ".", "spatial_encoder", "=", "PixelSetEncoder", "(", "\n", "input_dim", ",", "\n", "mlp1", "=", "mlp1", ",", "\n", "pooling", "=", "pooling", ",", "\n", "mlp2", "=", "mlp2", ",", "\n", "with_extra", "=", "with_extra", ",", "\n", "extra_size", "=", "extra_size", ",", "\n", "with_gdd_extra", "=", "with_gdd_extra", ",", "\n", ")", "\n", "\n", "self", ".", "temporal_encoder", "=", "LTAE", "(", "\n", "in_channels", "=", "mlp2", "[", "-", "1", "]", ",", "\n", "n_head", "=", "n_head", ",", "\n", "d_k", "=", "d_k", ",", "\n", "d_model", "=", "d_model", ",", "\n", "n_neurons", "=", "mlp3", ",", "\n", "dropout", "=", "dropout", ",", "\n", "T", "=", "T", ",", "\n", "with_pos_enc", "=", "with_pos_enc", ",", "\n", "with_gdd_pos", "=", "with_gdd_pos", ",", "\n", "pos_type", "=", "pos_type", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "get_decoder", "(", "mlp4", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseLTae.forward": [[70, 87], ["stclassifier.PseLTae.spatial_encoder", "stclassifier.PseLTae.temporal_encoder", "stclassifier.PseLTae.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pixels", ",", "mask", ",", "positions", ",", "extra", ",", "gdd", ",", "return_feats", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n           input(tuple): (Pixel-Set, Pixel-Mask) or ((Pixel-Set, Pixel-Mask), Extra-features)\n           Pixel-Set : Batch_size x Sequence length x Channel x Number of pixels\n           Pixel-Mask : Batch_size x Sequence length x Number of pixels\n           Positions : Batch_size x Sequence length\n           Extra-features : Batch_size x Sequence length x Number of features\n           GDD : Batch_size x Sequence length\n        \"\"\"", "\n", "spatial_feats", "=", "self", ".", "spatial_encoder", "(", "pixels", ",", "mask", ",", "extra", ",", "gdd", ")", "\n", "temporal_feats", "=", "self", ".", "temporal_encoder", "(", "spatial_feats", ",", "positions", ",", "gdd", ")", "\n", "logits", "=", "self", ".", "decoder", "(", "temporal_feats", ")", "\n", "if", "return_feats", ":", "\n", "            ", "return", "logits", ",", "temporal_feats", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseLTae.param_ratio": [[89, 103], ["stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "print", "print"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams"], ["", "", "def", "param_ratio", "(", "self", ")", ":", "\n", "        ", "total", "=", "get_ntrainparams", "(", "self", ")", "\n", "s", "=", "get_ntrainparams", "(", "self", ".", "spatial_encoder", ")", "\n", "t", "=", "get_ntrainparams", "(", "self", ".", "temporal_encoder", ")", "\n", "c", "=", "get_ntrainparams", "(", "self", ".", "decoder", ")", "\n", "\n", "print", "(", "\"TOTAL TRAINABLE PARAMETERS : {}\"", ".", "format", "(", "total", ")", ")", "\n", "print", "(", "\n", "\"RATIOS: Spatial {:5.1f}% , Temporal {:5.1f}% , Classifier {:5.1f}%\"", ".", "format", "(", "\n", "s", "/", "total", "*", "100", ",", "t", "/", "total", "*", "100", ",", "c", "/", "total", "*", "100", "\n", ")", "\n", ")", "\n", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseTae.__init__": [[110, 160], ["torch.Module.__init__", "print", "models.pse.PixelSetEncoder", "models.tae.TemporalAttentionEncoder", "models.decoder.get_decoder", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.decoder.get_decoder"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", "=", "10", ",", "\n", "mlp1", "=", "[", "10", ",", "32", ",", "64", "]", ",", "\n", "pooling", "=", "\"mean_std\"", ",", "\n", "mlp2", "=", "[", "128", ",", "128", "]", ",", "\n", "with_extra", "=", "True", ",", "\n", "extra_size", "=", "4", ",", "\n", "n_head", "=", "4", ",", "\n", "d_k", "=", "32", ",", "\n", "d_model", "=", "None", ",", "\n", "mlp3", "=", "[", "512", ",", "128", ",", "128", "]", ",", "\n", "dropout", "=", "0.2", ",", "\n", "T", "=", "1000", ",", "\n", "mlp4", "=", "[", "128", ",", "64", ",", "32", "]", ",", "\n", "num_classes", "=", "20", ",", "\n", "max_temporal_shift", "=", "100", ",", "\n", "max_position", "=", "365", ",", "\n", "with_gdd_extra", "=", "False", ",", "\n", "with_pos_enc", "=", "True", ",", "\n", "with_gdd_enc", "=", "False", ",", "\n", "pos_type", "=", "'default'", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PseTae", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "with_extra", ":", "\n", "            ", "mlp2", "=", "deepcopy", "(", "mlp2", ")", "\n", "mlp2", "[", "0", "]", "+=", "extra_size", "\n", "\n", "", "print", "(", "mlp2", ")", "\n", "self", ".", "spatial_encoder", "=", "PixelSetEncoder", "(", "\n", "input_dim", ",", "\n", "mlp1", "=", "mlp1", ",", "\n", "pooling", "=", "pooling", ",", "\n", "mlp2", "=", "mlp2", ",", "\n", "with_extra", "=", "with_extra", ",", "\n", "extra_size", "=", "extra_size", ",", "\n", ")", "\n", "self", ".", "temporal_encoder", "=", "TemporalAttentionEncoder", "(", "\n", "in_channels", "=", "mlp2", "[", "-", "1", "]", ",", "\n", "n_head", "=", "n_head", ",", "\n", "d_k", "=", "d_k", ",", "\n", "d_model", "=", "d_model", ",", "\n", "n_neurons", "=", "mlp3", ",", "\n", "dropout", "=", "dropout", ",", "\n", "T", "=", "T", ",", "\n", "max_position", "=", "max_position", ",", "\n", "max_temporal_shift", "=", "max_temporal_shift", ",", "\n", "pos_type", "=", "pos_type", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "get_decoder", "(", "mlp4", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseTae.forward": [[161, 177], ["stclassifier.PseTae.spatial_encoder", "stclassifier.PseTae.temporal_encoder", "stclassifier.PseTae.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pixels", ",", "mask", ",", "positions", ",", "extra", ",", "gdd", ",", "return_feats", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n           input(tuple): (Pixel-Set, Pixel-Mask) or ((Pixel-Set, Pixel-Mask), Extra-features)\n           Pixel-Set : Batch_size x Sequence length x Channel x Number of pixels\n           Pixel-Mask : Batch_size x Sequence length x Number of pixels\n           Positions : Batch_size x Sequence length\n           Extra-features : Batch_size x Sequence length x Number of features\n        \"\"\"", "\n", "spatial_feats", "=", "self", ".", "spatial_encoder", "(", "pixels", ",", "mask", ",", "extra", ",", "gdd", ")", "\n", "temporal_feats", "=", "self", ".", "temporal_encoder", "(", "spatial_feats", ",", "positions", ",", "gdd", ")", "\n", "logits", "=", "self", ".", "decoder", "(", "temporal_feats", ")", "\n", "if", "return_feats", ":", "\n", "            ", "return", "logits", ",", "temporal_feats", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseTae.param_ratio": [[178, 191], ["stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "print", "print"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams"], ["", "", "def", "param_ratio", "(", "self", ")", ":", "\n", "        ", "total", "=", "get_ntrainparams", "(", "self", ")", "\n", "s", "=", "get_ntrainparams", "(", "self", ".", "spatial_encoder", ")", "\n", "t", "=", "get_ntrainparams", "(", "self", ".", "temporal_encoder", ")", "\n", "c", "=", "get_ntrainparams", "(", "self", ".", "decoder", ")", "\n", "\n", "print", "(", "\"TOTAL TRAINABLE PARAMETERS : {}\"", ".", "format", "(", "total", ")", ")", "\n", "print", "(", "\n", "\"RATIOS: Spatial {:5.1f}% , Temporal {:5.1f}% , Classifier {:5.1f}%\"", ".", "format", "(", "\n", "s", "/", "total", "*", "100", ",", "t", "/", "total", "*", "100", ",", "c", "/", "total", "*", "100", "\n", ")", "\n", ")", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseGru.__init__": [[198, 231], ["torch.Module.__init__", "models.pse.PixelSetEncoder", "models.competings.GRU", "models.decoder.get_decoder", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.decoder.get_decoder"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", "=", "10", ",", "\n", "mlp1", "=", "[", "10", ",", "32", ",", "64", "]", ",", "\n", "pooling", "=", "\"mean_std\"", ",", "\n", "mlp2", "=", "[", "128", ",", "128", "]", ",", "\n", "with_extra", "=", "True", ",", "\n", "extra_size", "=", "4", ",", "\n", "hidden_dim", "=", "128", ",", "\n", "mlp4", "=", "[", "128", ",", "64", ",", "32", "]", ",", "\n", "num_classes", "=", "20", ",", "\n", "max_temporal_shift", "=", "100", ",", "\n", "max_position", "=", "365", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PseGru", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "with_extra", ":", "\n", "            ", "mlp2", "=", "deepcopy", "(", "mlp2", ")", "\n", "mlp2", "[", "0", "]", "+=", "4", "\n", "", "self", ".", "spatial_encoder", "=", "PixelSetEncoder", "(", "\n", "input_dim", ",", "\n", "mlp1", "=", "mlp1", ",", "\n", "pooling", "=", "pooling", ",", "\n", "mlp2", "=", "mlp2", ",", "\n", "with_extra", "=", "with_extra", ",", "\n", "extra_size", "=", "extra_size", ",", "\n", ")", "\n", "self", ".", "temporal_encoder", "=", "GRU", "(", "\n", "in_channels", "=", "mlp2", "[", "-", "1", "]", ",", "\n", "hidden_dim", "=", "hidden_dim", ",", "\n", "max_position", "=", "max_position", ",", "\n", "max_temporal_shift", "=", "max_temporal_shift", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "get_decoder", "(", "mlp4", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseGru.forward": [[232, 248], ["stclassifier.PseGru.spatial_encoder", "stclassifier.PseGru.temporal_encoder", "stclassifier.PseGru.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pixels", ",", "mask", ",", "positions", ",", "extra", ",", "return_feats", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n           input(tuple): (Pixel-Set, Pixel-Mask) or ((Pixel-Set, Pixel-Mask), Extra-features)\n           Pixel-Set : Batch_size x Sequence length x Channel x Number of pixels\n           Pixel-Mask : Batch_size x Sequence length x Number of pixels\n           Positions : Batch_size x Sequence length\n           Extra-features : Batch_size x Sequence length x Number of features\n        \"\"\"", "\n", "spatial_feats", "=", "self", ".", "spatial_encoder", "(", "pixels", ",", "mask", ",", "extra", ")", "\n", "temporal_feats", "=", "self", ".", "temporal_encoder", "(", "spatial_feats", ",", "positions", ")", "\n", "logits", "=", "self", ".", "decoder", "(", "temporal_feats", ")", "\n", "if", "return_feats", ":", "\n", "            ", "return", "logits", ",", "temporal_feats", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseGru.param_ratio": [[249, 262], ["stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "print", "print"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams"], ["", "", "def", "param_ratio", "(", "self", ")", ":", "\n", "        ", "total", "=", "get_ntrainparams", "(", "self", ")", "\n", "s", "=", "get_ntrainparams", "(", "self", ".", "spatial_encoder", ")", "\n", "t", "=", "get_ntrainparams", "(", "self", ".", "temporal_encoder", ")", "\n", "c", "=", "get_ntrainparams", "(", "self", ".", "decoder", ")", "\n", "\n", "print", "(", "\"TOTAL TRAINABLE PARAMETERS : {}\"", ".", "format", "(", "total", ")", ")", "\n", "print", "(", "\n", "\"RATIOS: Spatial {:5.1f}% , Temporal {:5.1f}% , Classifier {:5.1f}%\"", ".", "format", "(", "\n", "s", "/", "total", "*", "100", ",", "t", "/", "total", "*", "100", ",", "c", "/", "total", "*", "100", "\n", ")", "\n", ")", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseTempCNN.__init__": [[269, 307], ["torch.Module.__init__", "models.pse.PixelSetEncoder", "models.competings.TempConv", "models.decoder.get_decoder", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.decoder.get_decoder"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", "=", "10", ",", "\n", "mlp1", "=", "[", "10", ",", "32", ",", "64", "]", ",", "\n", "pooling", "=", "\"mean_std\"", ",", "\n", "mlp2", "=", "[", "128", ",", "128", "]", ",", "\n", "with_extra", "=", "True", ",", "\n", "extra_size", "=", "4", ",", "\n", "nker", "=", "[", "32", ",", "32", ",", "128", "]", ",", "\n", "mlp3", "=", "[", "128", ",", "128", "]", ",", "\n", "seq_len", "=", "24", ",", "\n", "mlp4", "=", "[", "128", ",", "64", ",", "32", "]", ",", "\n", "num_classes", "=", "20", ",", "\n", "max_temporal_shift", "=", "100", ",", "\n", "max_position", "=", "365", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PseTempCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "with_extra", ":", "\n", "            ", "mlp2", "=", "deepcopy", "(", "mlp2", ")", "\n", "mlp2", "[", "0", "]", "+=", "4", "\n", "\n", "", "self", ".", "spatial_encoder", "=", "PixelSetEncoder", "(", "\n", "input_dim", ",", "\n", "mlp1", "=", "mlp1", ",", "\n", "pooling", "=", "pooling", ",", "\n", "mlp2", "=", "mlp2", ",", "\n", "with_extra", "=", "with_extra", ",", "\n", "extra_size", "=", "extra_size", ",", "\n", ")", "\n", "self", ".", "temporal_encoder", "=", "TempConv", "(", "\n", "input_size", "=", "mlp2", "[", "-", "1", "]", ",", "\n", "nker", "=", "nker", ",", "\n", "seq_len", "=", "seq_len", ",", "\n", "nfc", "=", "mlp3", ",", "\n", "max_position", "=", "max_position", ",", "\n", "max_temporal_shift", "=", "max_temporal_shift", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "get_decoder", "(", "mlp4", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseTempCNN.forward": [[308, 324], ["stclassifier.PseTempCNN.spatial_encoder", "stclassifier.PseTempCNN.temporal_encoder", "stclassifier.PseTempCNN.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pixels", ",", "mask", ",", "positions", ",", "extra", ",", "return_feats", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n           input(tuple): (Pixel-Set, Pixel-Mask) or ((Pixel-Set, Pixel-Mask), Extra-features)\n           Pixel-Set : Batch_size x Sequence length x Channel x Number of pixels\n           Pixel-Mask : Batch_size x Sequence length x Number of pixels\n           Positions : Batch_size x Sequence length\n           Extra-features : Batch_size x Sequence length x Number of features\n        \"\"\"", "\n", "spatial_feats", "=", "self", ".", "spatial_encoder", "(", "pixels", ",", "mask", ",", "extra", ")", "\n", "temporal_feats", "=", "self", ".", "temporal_encoder", "(", "spatial_feats", ",", "positions", ")", "\n", "logits", "=", "self", ".", "decoder", "(", "temporal_feats", ")", "\n", "if", "return_feats", ":", "\n", "            ", "return", "logits", ",", "temporal_feats", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.PseTempCNN.param_ratio": [[325, 338], ["stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "stclassifier.get_ntrainparams", "print", "print"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams", "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams"], ["", "", "def", "param_ratio", "(", "self", ")", ":", "\n", "        ", "total", "=", "get_ntrainparams", "(", "self", ")", "\n", "s", "=", "get_ntrainparams", "(", "self", ".", "spatial_encoder", ")", "\n", "t", "=", "get_ntrainparams", "(", "self", ".", "temporal_encoder", ")", "\n", "c", "=", "get_ntrainparams", "(", "self", ".", "decoder", ")", "\n", "\n", "print", "(", "\"TOTAL TRAINABLE PARAMETERS : {}\"", ".", "format", "(", "total", ")", ")", "\n", "print", "(", "\n", "\"RATIOS: Spatial {:5.1f}% , Temporal {:5.1f}% , Classifier {:5.1f}%\"", ".", "format", "(", "\n", "s", "/", "total", "*", "100", ",", "t", "/", "total", "*", "100", ",", "c", "/", "total", "*", "100", "\n", ")", "\n", ")", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.stclassifier.get_ntrainparams": [[340, 342], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "", "def", "get_ntrainparams", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.PixelSetEncoder.__init__": [[15, 67], ["torch.Module.__init__", "copy.deepcopy", "copy.deepcopy", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "layers.append", "layers.append", "len", "len", "pooling.split", "len", "models.layers.LinearLayer", "len", "models.layers.LinearLayer", "pooling.split"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "mlp1", "=", "[", "10", ",", "32", ",", "64", "]", ",", "pooling", "=", "'mean_std'", ",", "mlp2", "=", "[", "64", ",", "128", "]", ",", "with_extra", "=", "True", ",", "\n", "extra_size", "=", "4", ",", "with_gdd_extra", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Pixel-set encoder.\n        Args:\n            input_dim (int): Number of channels of the input tensors\n            mlp1 (list):  Dimensions of the successive feature spaces of MLP1\n            pooling (str): Pixel-embedding pooling strategy, can be chosen in ('mean','std','max,'min')\n                or any underscore-separated combination thereof.\n            mlp2 (list): Dimensions of the successive feature spaces of MLP2\n            with_extra (bool): Whether additional pre-computed features are passed between the two MLPs\n            extra_size (int, optional): Number of channels of the additional features, if any.\n        \"\"\"", "\n", "\n", "super", "(", "PixelSetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "mlp1_dim", "=", "copy", ".", "deepcopy", "(", "mlp1", ")", "\n", "self", ".", "mlp2_dim", "=", "copy", ".", "deepcopy", "(", "mlp2", ")", "\n", "self", ".", "pooling", "=", "pooling", "\n", "\n", "self", ".", "with_extra", "=", "with_extra", "\n", "self", ".", "with_gdd_extra", "=", "with_gdd_extra", "\n", "self", ".", "extra_size", "=", "extra_size", "\n", "\n", "self", ".", "output_dim", "=", "input_dim", "*", "len", "(", "pooling", ".", "split", "(", "'_'", ")", ")", "if", "len", "(", "self", ".", "mlp2_dim", ")", "==", "0", "else", "self", ".", "mlp2_dim", "[", "-", "1", "]", "\n", "\n", "inter_dim", "=", "self", ".", "mlp1_dim", "[", "-", "1", "]", "*", "len", "(", "pooling", ".", "split", "(", "'_'", ")", ")", "\n", "\n", "\n", "if", "self", ".", "with_extra", ":", "\n", "            ", "inter_dim", "+=", "self", ".", "extra_size", "\n", "", "if", "self", ".", "with_gdd_extra", ":", "\n", "            ", "inter_dim", "+=", "1", "\n", "\n", "", "assert", "(", "input_dim", "==", "mlp1", "[", "0", "]", ")", "\n", "assert", "(", "inter_dim", "==", "mlp2", "[", "0", "]", ")", "\n", "\n", "# Feature extraction", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "mlp1_dim", ")", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "LinearLayer", "(", "self", ".", "mlp1_dim", "[", "i", "]", ",", "self", ".", "mlp1_dim", "[", "i", "+", "1", "]", ")", ")", "\n", "", "self", ".", "mlp1", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "# MLP after pooling", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "mlp2_dim", ")", "-", "1", ")", ":", "\n", "# if i < len(self.mlp2_dim )- 2:", "\n", "            ", "layers", ".", "append", "(", "LinearLayer", "(", "self", ".", "mlp2_dim", "[", "i", "]", ",", "self", ".", "mlp2_dim", "[", "i", "+", "1", "]", ")", ")", "\n", "# else:", "\n", "#     layers.append(LinearLayer(self.mlp2_dim[i], self.mlp2_dim[i + 1], activation=False))", "\n", "", "self", ".", "mlp2", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.PixelSetEncoder.forward": [[68, 105], ["torch.cat.view().transpose", "torch.cat.view().transpose", "torch.cat.view().transpose", "mask.view.view.view", "pse.PixelSetEncoder.mlp1().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pse.PixelSetEncoder.mlp2", "torch.cat.view", "torch.cat.view", "torch.cat.view", "extra.view.view.unsqueeze().repeat", "extra.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gdd.view.view.unsqueeze", "gdd.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat.view", "pse.PixelSetEncoder.mlp1", "pse.PixelSetEncoder.pooling.split", "extra.view.view.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pixels", ",", "mask", ",", "extra", ",", "gdd", ")", ":", "\n", "        ", "\"\"\"\n        The input of the PSE is a tuple of tensors as yielded by the PixelSetData class:\n          (Pixel-Set, Pixel-Mask) or ((Pixel-Set, Pixel-Mask), Extra-features)\n        Pixel-Set : Batch_size x (Sequence length) x Channel x Number of pixels\n        Pixel-Mask : Batch_size x (Sequence length) x Number of pixels\n        Extra-features : Batch_size x (Sequence length) x Number of features\n\n        If the input tensors have a temporal dimension, it will be combined with the batch dimension so that the\n        complete sequences are processed at once. Then the temporal dimension is separated back to produce a tensor of\n        shape Batch_size x Sequence length x Embedding dimension\n        \"\"\"", "\n", "out", "=", "pixels", "\n", "\n", "B", ",", "T", "=", "out", ".", "shape", "[", ":", "2", "]", "\n", "\n", "out", "=", "out", ".", "view", "(", "B", "*", "T", ",", "*", "out", ".", "shape", "[", "2", ":", "]", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B*T, S, C)", "\n", "mask", "=", "mask", ".", "view", "(", "B", "*", "T", ",", "-", "1", ")", "\n", "\n", "out", "=", "self", ".", "mlp1", "(", "out", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "out", "=", "torch", ".", "cat", "(", "\n", "[", "pooling_methods", "[", "n", "]", "(", "out", ",", "mask", ")", "for", "n", "in", "self", ".", "pooling", ".", "split", "(", "\"_\"", ")", "]", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "if", "self", ".", "with_extra", ":", "\n", "            ", "extra", "=", "extra", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "T", ",", "1", ")", "\n", "extra", "=", "extra", ".", "view", "(", "B", "*", "T", ",", "-", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "extra", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "with_gdd_extra", ":", "\n", "            ", "gdd", "=", "gdd", ".", "unsqueeze", "(", "2", ")", "# add feature dim", "\n", "gdd", "=", "gdd", ".", "view", "(", "B", "*", "T", ",", "1", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "gdd", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "out", "=", "self", ".", "mlp2", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "B", ",", "T", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.linlayer.__init__": [[107, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "linlayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.linlayer.forward": [[115, 124], ["input.permute", "pse.linlayer.lin", "torch.relu.permute", "pse.linlayer.bn", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "input", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "# to channel last", "\n", "out", "=", "self", ".", "lin", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", "# to channel first", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.masked_mean": [[125, 131], ["x.permute", "out.permute.permute", "out.permute.sum", "mask.sum"], "function", ["None"], ["", "", "def", "masked_mean", "(", "x", ",", "mask", ")", ":", "\n", "    ", "out", "=", "x", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "out", "=", "out", "*", "mask", "\n", "out", "=", "out", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "out", "=", "out", ".", "permute", "(", "(", "1", ",", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.masked_std": [[132, 147], ["pse.masked_mean", "x.permute", "out.permute.permute", "mask.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "out.permute.permute"], "function", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.masked_mean"], ["", "def", "masked_std", "(", "x", ",", "mask", ")", ":", "\n", "    ", "m", "=", "masked_mean", "(", "x", ",", "mask", ")", "\n", "\n", "out", "=", "x", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "out", "=", "out", "-", "m", "\n", "out", "=", "out", ".", "permute", "(", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n", "out", "=", "out", "*", "mask", "\n", "d", "=", "mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "d", "[", "d", "==", "1", "]", "=", "2", "\n", "\n", "out", "=", "(", "out", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "(", "d", "-", "1", ")", "\n", "out", "=", "torch", ".", "sqrt", "(", "out", "+", "10e-32", ")", "# To ensure differentiability", "\n", "out", "=", "out", ".", "permute", "(", "1", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.maximum": [[148, 150], ["[].squeeze", "x.max"], "function", ["None"], ["", "def", "maximum", "(", "x", ",", "mask", ")", ":", "\n", "    ", "return", "x", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.pse.minimum": [[151, 153], ["[].squeeze", "x.min"], "function", ["None"], ["", "def", "minimum", "(", "x", ",", "mask", ")", ":", "\n", "    ", "return", "x", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.decoder.get_decoder": [[5, 19], ["range", "layers.append", "torch.Sequential", "layers.append", "torch.Linear", "len", "models.layers.LinearLayer"], "function", ["None"], ["def", "get_decoder", "(", "n_neurons", ",", "n_classes", ")", ":", "\n", "    ", "\"\"\"Returns an MLP with the layer widths specified in n_neurons.\n    Every linear layer but the last one is followed by BatchNorm + ReLu\n\n    args:\n        n_neurons (list): List of int that specifies the width and length of the MLP.\n        n_classes (int): Output size\n    \"\"\"", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "n_neurons", ")", "-", "1", ")", ":", "\n", "        ", "layers", ".", "append", "(", "LinearLayer", "(", "n_neurons", "[", "i", "]", ",", "n_neurons", "[", "i", "+", "1", "]", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "n_neurons", "[", "-", "1", "]", ",", "n_classes", ")", ")", "\n", "m", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "return", "m", "\n", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.layers.LinearLayer.__init__": [[7, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "activation", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "if", "activation", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.layers.LinearLayer.forward": [[16, 25], ["layers.LinearLayer.linear", "layers.LinearLayer.activation", "layers.LinearLayer.dim", "layers.LinearLayer.norm().transpose", "layers.LinearLayer.norm", "layers.LinearLayer.norm", "layers.LinearLayer.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x = (B, C) or (B, S, C)", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "# linear expect channels last", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "# BatchNorm1d expects channels first, move to (B, C, S)", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "# (B, C)", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "return", "self", ".", "activation", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.layers.get_positional_encoding": [[28, 35], ["torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "math.log"], "function", ["None"], ["", "", "def", "get_positional_encoding", "(", "max_len", ",", "d_model", ",", "T", "=", "1000.0", ")", ":", "\n", "    ", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "T", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "return", "pe", "\n", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.tae.TemporalAttentionEncoder.__init__": [[20, 86], ["torch.Module.__init__", "copy.deepcopy", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "tae.MultiHeadAttention", "range", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "tae.get_positional_encoding", "torch.Conv1d", "torch.Conv1d", "layers.extend", "len", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "128", ",", "\n", "n_head", "=", "4", ",", "\n", "d_k", "=", "32", ",", "\n", "d_model", "=", "None", ",", "\n", "n_neurons", "=", "[", "512", ",", "128", ",", "128", "]", ",", "\n", "dropout", "=", "0.2", ",", "\n", "T", "=", "1000", ",", "\n", "max_position", "=", "365", ",", "\n", "max_temporal_shift", "=", "100", ",", "\n", "pos_type", "=", "'default'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sequence-to-embedding encoder.\n        Args:\n            in_channels (int): Number of channels of the input embeddings\n            n_head (int): Number of attention heads\n            d_k (int): Dimension of the key and query vectors\n            n_neurons (list): Defines the dimensions of the successive feature spaces of the MLP that processes\n                the concatenated outputs of the attention heads\n            dropout (float): dropout\n            T (int): Period to use for the positional encoding\n            len_max_seq (int, optional): Maximum sequence length, used to pre-compute the positional encoding table\n            positions (list, optional): List of temporal positions to use instead of position in the sequence\n            d_model (int, optional): If specified, the input tensors will first processed by a fully connected layer\n                to project them into a feature space of dimension d_model\n\n        \"\"\"", "\n", "\n", "super", "(", "TemporalAttentionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "n_neurons", "=", "copy", ".", "deepcopy", "(", "n_neurons", ")", "\n", "self", ".", "max_temporal_shift", "=", "max_temporal_shift", "\n", "\n", "self", ".", "pos_type", "=", "pos_type", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "get_positional_encoding", "(", "max_position", "+", "2", "*", "max_temporal_shift", ",", "self", ".", "in_channels", ",", "T", "=", "T", ")", ",", "\n", "freeze", "=", "True", ")", "\n", "\n", "self", ".", "inlayernorm", "=", "nn", ".", "LayerNorm", "(", "self", ".", "in_channels", ")", "\n", "\n", "if", "d_model", "is", "not", "None", ":", "\n", "            ", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "inconv", "=", "nn", ".", "Conv1d", "(", "in_channels", ",", "d_model", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "d_model", "=", "in_channels", "\n", "self", ".", "inconv", "=", "None", "\n", "\n", "", "self", ".", "outlayernorm", "=", "nn", ".", "LayerNorm", "(", "n_neurons", "[", "-", "1", "]", ")", "\n", "\n", "self", ".", "attention_heads", "=", "MultiHeadAttention", "(", "n_head", "=", "n_head", ",", "\n", "d_k", "=", "d_k", ",", "\n", "d_in", "=", "self", ".", "d_model", ")", "\n", "\n", "assert", "(", "self", ".", "n_neurons", "[", "0", "]", "==", "n_head", "*", "self", ".", "d_model", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "n_neurons", ")", "-", "1", ")", ":", "\n", "            ", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Linear", "(", "self", ".", "n_neurons", "[", "i", "]", ",", "self", ".", "n_neurons", "[", "i", "+", "1", "]", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "n_neurons", "[", "i", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.tae.TemporalAttentionEncoder.forward": [[87, 104], ["tae.TemporalAttentionEncoder.inlayernorm", "tae.TemporalAttentionEncoder.attention_heads", "tae.TemporalAttentionEncoder.permute().contiguous().view", "tae.TemporalAttentionEncoder.outlayernorm", "tae.TemporalAttentionEncoder.inconv().permute", "tae.TemporalAttentionEncoder.dropout", "tae.TemporalAttentionEncoder.position_enc", "tae.TemporalAttentionEncoder.position_enc", "tae.TemporalAttentionEncoder.permute().contiguous", "tae.TemporalAttentionEncoder.mlp", "tae.TemporalAttentionEncoder.inconv", "tae.TemporalAttentionEncoder.permute", "tae.TemporalAttentionEncoder.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "positions", ",", "gdd", ",", "return_att", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "inlayernorm", "(", "x", ")", "\n", "if", "self", ".", "pos_type", "==", "'default'", ":", "\n", "            ", "enc_output", "=", "x", "+", "self", ".", "position_enc", "(", "positions", "+", "self", ".", "max_temporal_shift", ")", "\n", "", "else", ":", "\n", "            ", "enc_output", "=", "x", "+", "self", ".", "position_enc", "(", "gdd", ")", "\n", "\n", "", "if", "self", ".", "inconv", "is", "not", "None", ":", "\n", "            ", "enc_output", "=", "self", ".", "inconv", "(", "enc_output", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "enc_output", ",", "attn", "=", "self", ".", "attention_heads", "(", "enc_output", ",", "enc_output", ",", "enc_output", ")", "\n", "enc_output", "=", "enc_output", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# Concatenate heads", "\n", "enc_output", "=", "self", ".", "outlayernorm", "(", "self", ".", "dropout", "(", "self", ".", "mlp", "(", "enc_output", ")", ")", ")", "\n", "\n", "if", "return_att", ":", "\n", "            ", "return", "enc_output", ",", "attn", "\n", "", "else", ":", "\n", "            ", "return", "enc_output", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.tae.MultiHeadAttention.__init__": [[108, 125], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.Sequential", "torch.Sequential", "tae.ScaledDotProductAttention", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_k", ",", "d_in", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_in", "=", "d_in", "\n", "\n", "self", ".", "fc1_q", "=", "nn", ".", "Linear", "(", "d_in", ",", "n_head", "*", "d_k", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc1_q", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_k", ")", ")", ")", "\n", "\n", "self", ".", "fc1_k", "=", "nn", ".", "Linear", "(", "d_in", ",", "n_head", "*", "d_k", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc1_k", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_k", ")", ")", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm1d", "(", "n_head", "*", "d_k", ")", ",", "\n", "nn", ".", "Linear", "(", "n_head", "*", "d_k", ",", "n_head", "*", "d_k", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "\n", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.tae.MultiHeadAttention.forward": [[126, 150], ["q.permute().contiguous().view.permute().contiguous().view.size", "tae.MultiHeadAttention.fc1_q().view", "q.permute().contiguous().view.permute().contiguous().view.mean().squeeze", "tae.MultiHeadAttention.fc2().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "tae.MultiHeadAttention.fc1_k().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.repeat.repeat.repeat", "tae.MultiHeadAttention.attention", "output.squeeze.squeeze.view", "output.squeeze.squeeze.squeeze", "attn.squeeze.squeeze.view", "attn.squeeze.squeeze.squeeze", "tae.MultiHeadAttention.fc1_q", "q.permute().contiguous().view.permute().contiguous().view.mean", "tae.MultiHeadAttention.fc2", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "tae.MultiHeadAttention.fc1_k", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.view", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "d_k", ",", "d_in", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_in", ",", "self", ".", "n_head", "\n", "sz_b", ",", "seq_len", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "\n", "q", "=", "self", ".", "fc1_q", "(", "q", ")", ".", "view", "(", "sz_b", ",", "seq_len", ",", "n_head", ",", "d_k", ")", "\n", "q", "=", "q", ".", "mean", "(", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "# MEAN query", "\n", "q", "=", "self", ".", "fc2", "(", "q", ".", "view", "(", "sz_b", ",", "n_head", "*", "d_k", ")", ")", ".", "view", "(", "sz_b", ",", "n_head", ",", "d_k", ")", "\n", "q", "=", "q", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n_head", "*", "sz_b", ",", "d_k", ")", "\n", "\n", "k", "=", "self", ".", "fc1_k", "(", "k", ")", ".", "view", "(", "sz_b", ",", "seq_len", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "seq_len", ",", "\n", "d_k", ")", "# (n*b) x lk x dk", "\n", "\n", "v", "=", "v", ".", "repeat", "(", "n_head", ",", "1", ",", "1", ")", "# (n*b) x lv x d_in", "\n", "\n", "output", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "1", ",", "d_in", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "\n", "attn", "=", "attn", ".", "view", "(", "n_head", ",", "sz_b", ",", "1", ",", "seq_len", ")", "\n", "attn", "=", "attn", ".", "squeeze", "(", "dim", "=", "2", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.tae.ScaledDotProductAttention.__init__": [[154, 159], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.tae.ScaledDotProductAttention.forward": [[160, 169], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "tae.ScaledDotProductAttention.softmax", "tae.ScaledDotProductAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "q.unsqueeze", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "attn", "=", "torch", ".", "matmul", "(", "q", ".", "unsqueeze", "(", "1", ")", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.tae.get_positional_encoding": [[171, 178], ["torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "math.log"], "function", ["None"], ["", "", "def", "get_positional_encoding", "(", "max_len", ",", "d_model", ",", "T", "=", "1000", ")", ":", "\n", "    ", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "T", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "return", "pe", "\n", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.competings.GRU.__init__": [[12, 21], ["torch.Module.__init__", "torch.GRU", "torch.Embedding.from_pretrained", "models.tae.get_positional_encoding"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "128", ",", "hidden_dim", "=", "128", ",", "max_position", "=", "365", ",", "max_temporal_shift", "=", "100", ")", ":", "\n", "        ", "super", "(", "GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'GRU_h{}'", ".", "format", "(", "hidden_dim", ")", "\n", "self", ".", "gru_cell", "=", "nn", ".", "GRU", "(", "input_size", "=", "in_channels", ",", "hidden_size", "=", "hidden_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "max_temporal_shift", "=", "max_temporal_shift", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "get_positional_encoding", "(", "max_position", "+", "2", "*", "max_temporal_shift", ",", "self", ".", "in_channels", ",", "T", "=", "1000", ")", ",", "\n", "freeze", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.competings.GRU.forward": [[22, 26], ["competings.GRU.gru_cell", "competings.GRU.position_enc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "positions", ")", ":", "\n", "        ", "enc_output", "=", "input", "+", "self", ".", "position_enc", "(", "positions", "+", "self", ".", "max_temporal_shift", ")", "\n", "out", ",", "_", "=", "self", ".", "gru_cell", "(", "enc_output", ")", "\n", "return", "out", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.competings.TempConv.__init__": [[33, 71], ["torch.Module.__init__", "copy.deepcopy", "copy.deepcopy", "competings.TempConv.nker.insert", "range", "torch.Sequential", "competings.TempConv.nfc.insert", "range", "torch.Sequential", "torch.Embedding.from_pretrained", "list", "conv_layers.extend", "lin_layers.extend", "models.tae.get_positional_encoding", "map", "list", "len", "len", "map", "torch.Conv1d", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding"], ["def", "__init__", "(", "self", ",", "input_size", ",", "nker", ",", "seq_len", ",", "nfc", ",", "max_position", "=", "365", ",", "max_temporal_shift", "=", "100", ")", ":", "\n", "        ", "super", "(", "TempConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "name", "=", "'TempCNN_'", "\n", "\n", "self", ".", "nker", "=", "copy", ".", "deepcopy", "(", "nker", ")", "\n", "self", ".", "nfc", "=", "copy", ".", "deepcopy", "(", "nfc", ")", "\n", "self", ".", "name", "+=", "'|'", ".", "join", "(", "list", "(", "map", "(", "str", ",", "self", ".", "nker", ")", ")", ")", "\n", "\n", "if", "self", ".", "nfc", "is", "not", "None", ":", "\n", "            ", "self", ".", "name", "+=", "'FC'", "\n", "self", ".", "name", "+=", "'|'", ".", "join", "(", "list", "(", "map", "(", "str", ",", "self", ".", "nfc", ")", ")", ")", "\n", "\n", "", "conv_layers", "=", "[", "]", "\n", "self", ".", "nker", ".", "insert", "(", "0", ",", "input_size", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nker", ")", "-", "1", ")", ":", "\n", "            ", "conv_layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv1d", "(", "self", ".", "nker", "[", "i", "]", ",", "self", ".", "nker", "[", "i", "+", "1", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "nker", "[", "i", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "conv1d", "=", "nn", ".", "Sequential", "(", "*", "conv_layers", ")", "\n", "\n", "self", ".", "nfc", ".", "insert", "(", "0", ",", "self", ".", "nker", "[", "-", "1", "]", "*", "seq_len", ")", "\n", "lin_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nfc", ")", "-", "1", ")", ":", "\n", "            ", "lin_layers", ".", "extend", "(", "[", "\n", "nn", ".", "Linear", "(", "self", ".", "nfc", "[", "i", "]", ",", "self", ".", "nfc", "[", "i", "+", "1", "]", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "nfc", "[", "i", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", "]", ")", "\n", "", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "*", "lin_layers", ")", "\n", "\n", "self", ".", "max_temporal_shift", "=", "max_temporal_shift", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "get_positional_encoding", "(", "max_position", "+", "2", "*", "max_temporal_shift", ",", "self", ".", "in_channels", ",", "T", "=", "1000", ")", ",", "\n", "freeze", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.competings.TempConv.forward": [[73, 79], ["competings.TempConv.conv1d", "competings.TempConv.view", "competings.TempConv.linear", "competings.TempConv.position_enc", "enc_output.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "positions", ")", ":", "\n", "        ", "enc_output", "=", "input", "+", "self", ".", "position_enc", "(", "positions", "+", "self", ".", "max_temporal_shift", ")", "\n", "out", "=", "self", ".", "conv1d", "(", "enc_output", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.transformer.Transformer.__init__": [[21, 65], ["torch.Module.__init__", "models.layers.LinearLayer", "transformer.SelfAttention", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.layers.LinearLayer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "LTAE", "models.layers.get_positional_encoding", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "models.layers.get_positional_encoding", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "models.ltae.FourierPositionalEncoding", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "128", ",", "n_head", "=", "16", ",", "d_k", "=", "8", ",", "\n", "dropout", "=", "0.2", ",", "d_model", "=", "256", ",", "T", "=", "1000", ",", "return_att", "=", "False", ",", "\n", "with_pos_enc", "=", "True", ",", "with_gdd_enc", "=", "False", ",", "pos_type", "=", "'default'", ",", "pool_type", "=", "'max'", ",", "\n", "max_temporal_shift", "=", "60", ")", ":", "\n", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "with_pos_enc", "=", "with_pos_enc", "\n", "\n", "self", ".", "with_gdd_enc", "=", "with_gdd_enc", "\n", "self", ".", "pos_type", "=", "pos_type", "\n", "self", ".", "max_temporal_shift", "=", "max_temporal_shift", "\n", "if", "with_pos_enc", ":", "\n", "            ", "if", "pos_type", "==", "'default'", ":", "\n", "                ", "if", "with_gdd_enc", ":", "\n", "                    ", "sin_tab", "=", "get_positional_encoding", "(", "10000", ",", "self", ".", "d_model", ",", "T", "=", "10000", ")", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "sin_tab", ",", "freeze", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "sin_tab", "=", "get_positional_encoding", "(", "365", "+", "2", "*", "max_temporal_shift", ",", "self", ".", "d_model", ",", "T", "=", "T", ")", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "sin_tab", ",", "freeze", "=", "True", ")", "\n", "", "", "elif", "pos_type", "==", "'fourier'", ":", "\n", "                ", "self", ".", "position_enc", "=", "FourierPositionalEncoding", "(", "m", "=", "1", ",", "f", "=", "128", ",", "h", "=", "32", ",", "d", "=", "d_model", ",", "groups", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "position_enc", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "position_enc", "=", "None", "\n", "\n", "", "self", ".", "in_emb", "=", "LinearLayer", "(", "in_channels", ",", "d_model", ")", "\n", "self", ".", "attn", "=", "SelfAttention", "(", "d_model", ",", "heads", "=", "n_head", ",", "dim_head", "=", "d_k", ",", "dropout", "=", "0.1", ")", "\n", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "\n", "LinearLayer", "(", "d_model", ",", "128", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "\n", "self", ".", "pool_type", "=", "pool_type", "\n", "if", "self", ".", "pool_type", "==", "'attention'", ":", "\n", "            ", "self", ".", "attention_pool", "=", "nn", ".", "Linear", "(", "128", ",", "1", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "pool_type", "==", "'ltae'", ":", "\n", "            ", "self", ".", "ltae", "=", "LTAE", "(", "n_head", ",", "d_k", ",", "d_model", ",", "dropout", "=", "0.1", ")", "\n", "", "elif", "self", ".", "pool_type", "==", "'max'", ":", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "pool_type", "==", "'last'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.transformer.Transformer.forward": [[70, 101], ["transformer.Transformer.in_emb", "transformer.Transformer.attn", "transformer.Transformer.ff", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "transformer.Transformer.ltae", "transformer.Transformer.position_enc", "transformer.Transformer.position_enc", "transformer.Transformer.position_enc", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.mean.mean.mean", "torch.softmax().transpose", "torch.softmax().transpose", "torch.softmax().transpose", "torch.softmax().transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "transformer.Transformer.attention_pool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "positions", ",", "gdd", ")", ":", "\n", "        ", "b", ",", "t", ",", "_", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "in_emb", "(", "x", ")", "\n", "\n", "if", "self", ".", "position_enc", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "pos_type", "==", "'default'", ":", "\n", "                ", "if", "self", ".", "with_gdd_enc", ":", "\n", "                    ", "x", "=", "x", "+", "self", ".", "position_enc", "(", "(", "gdd", "*", "10000", ")", ".", "long", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "x", "+", "self", ".", "position_enc", "(", "positions", "+", "self", ".", "max_temporal_shift", ")", "\n", "", "", "elif", "self", ".", "pos_type", "==", "'fourier'", ":", "\n", "                ", "x", "=", "x", "+", "self", ".", "position_enc", "(", "gdd", ")", "\n", "\n", "", "", "x", "=", "self", ".", "attn", "(", "x", ")", "\n", "x", "=", "self", ".", "ff", "(", "x", ")", "\n", "\n", "# classification type", "\n", "if", "self", ".", "pool_type", "==", "'last'", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", "-", "1", "]", "# classify last time step", "\n", "", "elif", "self", ".", "pool_type", "==", "'attention'", ":", "# even simpler LTAE", "\n", "# (b t c) -> (b t 1) -> (b 1 t) -> (b 1 t) @ (b t c) -> (b c)", "\n", "            ", "x", "=", "torch", ".", "matmul", "(", "F", ".", "softmax", "(", "self", ".", "attention_pool", "(", "x", ")", ",", "dim", "=", "1", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "x", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "", "elif", "self", ".", "pool_type", "==", "'ltae'", ":", "\n", "            ", "x", "=", "self", ".", "ltae", "(", "x", ")", "\n", "", "elif", "self", ".", "pool_type", "==", "'max'", ":", "\n", "            ", "x", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "# average over time (GAP?)", "\n", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.transformer.AttentionQuery.__init__": [[103, 116], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.power", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_k", ",", "d_in", ",", "t_out", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_in", "=", "d_in", "\n", "self", ".", "t_out", "=", "t_out", "\n", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "d_in", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "d_in", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.transformer.AttentionQuery.forward": [[118, 136], ["x.size", "transformer.AttentionQuery.query.repeat().transpose", "transformer.AttentionQuery.key().view().transpose", "x.view().transpose", "transformer.AttentionQuery.softmax", "transformer.AttentionQuery.dropout", "y.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "y.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "transformer.AttentionQuery.query.repeat", "transformer.AttentionQuery.key().view", "x.view", "transformer.AttentionQuery.transpose", "y.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "y.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "transformer.AttentionQuery.key", "y.transpose().contiguous().view.transpose().contiguous().view.transpose", "y.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "T", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "\n", "q", "=", "self", ".", "query", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (nh, hs) -> (B, nh, t_out, d_k)", "\n", "\n", "k", "=", "self", ".", "key", "(", "x", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, d_k)", "\n", "v", "=", "x", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# self-attend; (B, nh, t_out, d_k) x (B, nh, d_k, T) -> (B, nh, t_out, T)", "\n", "att", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "self", ".", "temperature", "\n", "att", "=", "self", ".", "softmax", "(", "att", ")", "\n", "att", "=", "self", ".", "dropout", "(", "att", ")", "\n", "y", "=", "att", "@", "v", "# (B, nh, t_out, T) x (B, nh, T, hs) -> (B, nh, t_out, hs)", "\n", "if", "self", ".", "t_out", "!=", "1", ":", "\n", "            ", "y", "=", "y", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "self", ".", "t_out", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.transformer.SelfAttention.__init__": [[140, 152], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "heads", "=", "8", ",", "dim_head", "=", "64", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "inner_dim", "=", "dim_head", "*", "heads", "\n", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "scale", "=", "dim_head", "**", "-", "0.5", "\n", "\n", "self", ".", "attend", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "to_q", "=", "nn", ".", "Linear", "(", "dim", ",", "inner_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "to_k", "=", "nn", ".", "Linear", "(", "dim", ",", "inner_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "to_v", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.transformer.SelfAttention.forward": [[155, 168], ["map", "transformer.SelfAttention.attend", "transformer.SelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "einops.rearrange", "transformer.SelfAttention.to_q", "transformer.SelfAttention.to_k", "transformer.SelfAttention.to_v", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "einops.rearrange", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# qkv = self.to_qkv(x).chunk(3, dim = -1)", "\n", "        ", "qkv", "=", "self", ".", "to_q", "(", "x", ")", ",", "self", ".", "to_k", "(", "x", ")", ",", "self", ".", "to_v", "(", "x", ")", "\n", "q", ",", "k", ",", "v", "=", "map", "(", "lambda", "t", ":", "rearrange", "(", "t", ",", "'b n (h d) -> b h n d'", ",", "h", "=", "self", ".", "heads", ")", ",", "qkv", ")", "\n", "\n", "dots", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "*", "self", ".", "scale", "\n", "\n", "attn", "=", "self", ".", "attend", "(", "dots", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "out", "=", "rearrange", "(", "out", ",", "'b h n d -> b n (h d)'", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.transformer.AttentionPositionalBias.__init__": [[171, 198], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "math.log2().is_integer", "get_slopes_power_of_2"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "heads", "=", "8", ",", "dim_head", "=", "64", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "inner_dim", "=", "dim_head", "*", "heads", "\n", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "scale", "=", "dim_head", "**", "-", "0.5", "\n", "\n", "self", ".", "attend", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "# self.to_qkv = nn.Linear(dim, inner_dim * 3, bias = False)", "\n", "self", ".", "to_q", "=", "nn", ".", "Linear", "(", "dim", ",", "inner_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "to_k", "=", "nn", ".", "Linear", "(", "dim", ",", "inner_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "to_v", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "def", "get_slopes", "(", "n", ")", ":", "\n", "            ", "def", "get_slopes_power_of_2", "(", "n", ")", ":", "\n", "                ", "start", "=", "(", "2", "**", "(", "-", "2", "**", "-", "(", "math", ".", "log2", "(", "n", ")", "-", "3", ")", ")", ")", "\n", "ratio", "=", "start", "\n", "return", "[", "start", "*", "ratio", "**", "i", "for", "i", "in", "range", "(", "n", ")", "]", "\n", "\n", "", "if", "math", ".", "log2", "(", "n", ")", ".", "is_integer", "(", ")", ":", "\n", "                ", "return", "get_slopes_power_of_2", "(", "n", ")", "#In the paper, we only train models that have 2^a heads for some a. This function has", "\n", "", "else", ":", "#some good properties that only occur when the input is a power of 2. To maintain that even", "\n", "                ", "closest_power_of_2", "=", "2", "**", "math", ".", "floor", "(", "math", ".", "log2", "(", "n", ")", ")", "#when the number of heads is not a power of 2, we use this workaround. ", "\n", "return", "get_slopes_power_of_2", "(", "closest_power_of_2", ")", "+", "get_slopes", "(", "2", "*", "closest_power_of_2", ")", "[", "0", ":", ":", "2", "]", "[", ":", "n", "-", "closest_power_of_2", "]", "\n", "\n", "", "", "self", ".", "slopes", "=", "torch", ".", "Tensor", "(", "get_slopes", "(", "heads", ")", ")", ".", "cuda", "(", ")", "\n", "#maxpos = 365", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.transformer.AttentionPositionalBias.forward": [[220, 247], ["map", "einops.repeat", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "einops.repeat", "transformer.AttentionPositionalBias.attend", "transformer.AttentionPositionalBias.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "einops.rearrange", "transformer.AttentionPositionalBias.to_q", "transformer.AttentionPositionalBias.to_k", "transformer.AttentionPositionalBias.to_v", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "einops.rearrange", "k.transpose", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "positions", ")", ":", "\n", "# qkv = self.to_qkv(x).chunk(3, dim = -1)", "\n", "        ", "qkv", "=", "self", ".", "to_q", "(", "x", ")", ",", "self", ".", "to_k", "(", "x", ")", ",", "self", ".", "to_v", "(", "x", ")", "\n", "q", ",", "k", ",", "v", "=", "map", "(", "lambda", "t", ":", "rearrange", "(", "t", ",", "'b n (h d) -> b h n d'", ",", "h", "=", "self", ".", "heads", ")", ",", "qkv", ")", "\n", "\n", "# (b nh t t)", "\n", "dots", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "*", "self", ".", "scale", "\n", "\n", "# relative positional encoding", "\n", "positions", "=", "repeat", "(", "positions", ",", "'b t -> b t t2'", ",", "t2", "=", "positions", ".", "shape", "[", "1", "]", ")", "\n", "diag", "=", "torch", ".", "diagonal", "(", "positions", ",", "dim1", "=", "1", ",", "dim2", "=", "2", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# non-symmetric", "\n", "# relative_positions = (diag - positions)", "\n", "\n", "# symmetric", "\n", "relative_positions", "=", "-", "torch", ".", "abs", "(", "diag", "-", "positions", ")", "\n", "relative_positions", "=", "repeat", "(", "relative_positions", ",", "'b t1 t2 -> b h t1 t2'", ",", "h", "=", "self", ".", "heads", ")", "\n", "alibi", "=", "self", ".", "slopes", "[", "None", ",", ":", ",", "None", ",", "None", "]", "*", "relative_positions", "\n", "\n", "dots", "=", "dots", "+", "alibi", "\n", "\n", "attn", "=", "self", ".", "attend", "(", "dots", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "out", "=", "rearrange", "(", "out", ",", "'b h n d -> b n (h d)'", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.LTAE.__init__": [[25, 101], ["torch.Module.__init__", "copy.deepcopy", "ltae.MultiHeadAttention", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.layers.LinearLayer", "layers.append", "len", "models.layers.LinearLayer", "ltae.get_positional_encoding", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "ltae.get_positional_encoding", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ltae.LearnableFourierPositionalEncoding", "ltae.LearnableFourierPositionalEncoding", "ltae.RNNPositionalEncoding", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "128", ",", "n_head", "=", "16", ",", "d_k", "=", "8", ",", "n_neurons", "=", "[", "256", ",", "128", "]", ",", "\n", "dropout", "=", "0.2", ",", "d_model", "=", "256", ",", "T", "=", "1000", ",", "return_att", "=", "False", ",", "\n", "with_pos_enc", "=", "True", ",", "with_gdd_pos", "=", "False", ",", "pos_type", "=", "'default'", ",", "\n", "max_temporal_shift", "=", "60", ")", ":", "\n", "        ", "\"\"\"\n        Sequence-to-embedding encoder.\n        Args:\n            in_channels (int): Number of channels of the input embeddings\n            n_head (int): Number of attention heads\n            d_k (int): Dimension of the key and query vectors\n            n_neurons (list): Defines the dimensions of the successive feature spaces of the MLP that processes\n                the concatenated outputs of the attention heads\n            dropout (float): dropout\n            T (int): Period to use for the positional encoding\n            len_max_seq (int, optional): Maximum sequence length, used to pre-compute the positional encoding table\n            positions (list, optional): List of temporal positions to use instead of position in the sequence\n            d_model (int, optional): If specified, the input tensors will first processed by a fully connected layer\n                to project them into a feature space of dimension d_model\n            return_att (bool): If true, the module returns the attention masks along with the embeddings (default False)\n\n        \"\"\"", "\n", "\n", "super", "(", "LTAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "n_neurons", "=", "copy", ".", "deepcopy", "(", "n_neurons", ")", "\n", "self", ".", "return_att", "=", "return_att", "\n", "\n", "\n", "if", "d_model", "is", "not", "None", ":", "\n", "            ", "self", ".", "d_model", "=", "d_model", "\n", "# self.inconv = nn.Linear(in_channels, d_model)", "\n", "self", ".", "inconv", "=", "LinearLayer", "(", "in_channels", ",", "d_model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "d_model", "=", "in_channels", "\n", "self", ".", "inconv", "=", "None", "\n", "\n", "", "self", ".", "max_temporal_shift", "=", "max_temporal_shift", "\n", "self", ".", "pos_type", "=", "pos_type", "\n", "self", ".", "with_gdd_pos", "=", "with_gdd_pos", "\n", "self", ".", "n_head", "=", "n_head", "\n", "if", "with_pos_enc", ":", "\n", "            ", "if", "pos_type", "==", "'default'", ":", "\n", "                ", "if", "with_gdd_pos", ":", "\n", "                    ", "sin_tab", "=", "get_positional_encoding", "(", "10000", ",", "self", ".", "d_model", "//", "n_head", ",", "T", "=", "10000", ")", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "torch", ".", "cat", "(", "[", "sin_tab", "for", "_", "in", "range", "(", "n_head", ")", "]", ",", "dim", "=", "1", ")", ",", "\n", "freeze", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "sin_tab", "=", "get_positional_encoding", "(", "365", "+", "2", "*", "max_temporal_shift", ",", "self", ".", "d_model", "//", "n_head", ",", "T", "=", "T", ")", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "torch", ".", "cat", "(", "[", "sin_tab", "for", "_", "in", "range", "(", "n_head", ")", "]", ",", "dim", "=", "1", ")", ",", "\n", "freeze", "=", "True", ")", "\n", "", "", "elif", "self", ".", "pos_type", "==", "'fourier'", ":", "\n", "                ", "dim", "=", "self", ".", "d_model", "//", "n_head", "\n", "if", "with_gdd_pos", ":", "\n", "                    ", "self", ".", "position_enc", "=", "LearnableFourierPositionalEncoding", "(", "m", "=", "1", ",", "f", "=", "dim", ",", "h", "=", "32", ",", "d", "=", "dim", ",", "max_pos", "=", "10000", ",", "n_head", "=", "n_head", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "position_enc", "=", "LearnableFourierPositionalEncoding", "(", "m", "=", "1", ",", "f", "=", "dim", ",", "h", "=", "32", ",", "d", "=", "dim", ",", "max_pos", "=", "365", "+", "2", "*", "max_temporal_shift", ",", "n_head", "=", "n_head", ")", "\n", "", "", "elif", "self", ".", "pos_type", "==", "'rnn'", ":", "\n", "                ", "self", ".", "position_enc", "=", "RNNPositionalEncoding", "(", "d_model", ",", "n_head", ",", "sinusoid", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "position_enc", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "position_enc", "=", "None", "\n", "\n", "# self.inlayernorm = nn.LayerNorm(self.in_channels)", "\n", "# self.outlayernorm = nn.LayerNorm(n_neurons[-1])", "\n", "\n", "", "self", ".", "attention_heads", "=", "MultiHeadAttention", "(", "\n", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_in", "=", "self", ".", "d_model", ")", "\n", "assert", "(", "self", ".", "n_neurons", "[", "0", "]", "==", "self", ".", "d_model", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "n_neurons", ")", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "LinearLayer", "(", "self", ".", "n_neurons", "[", "i", "]", ",", "self", ".", "n_neurons", "[", "i", "+", "1", "]", ")", ")", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.LTAE.forward": [[102, 127], ["ltae.LTAE.attention_heads", "ltae.LTAE.dropout", "ltae.LTAE.inconv", "ltae.LTAE.mlp", "ltae.LTAE.position_enc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "positions", ",", "gdd", ")", ":", "\n", "# x = self.inlayernorm(x)", "\n", "\n", "        ", "if", "self", ".", "inconv", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "inconv", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "with_gdd_pos", ":", "\n", "            ", "positions", "=", "gdd", "\n", "", "else", ":", "\n", "            ", "positions", "=", "positions", "+", "self", ".", "max_temporal_shift", "# for ShiftAug", "\n", "\n", "\n", "", "if", "self", ".", "position_enc", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "position_enc", "(", "positions", ")", "\n", "\n", "", "x", ",", "attn", "=", "self", ".", "attention_heads", "(", "x", ")", "\n", "\n", "\n", "x", "=", "self", ".", "dropout", "(", "self", ".", "mlp", "(", "x", ")", ")", "\n", "# x = self.outlayernorm(x)", "\n", "\n", "if", "self", ".", "return_att", ":", "\n", "            ", "return", "x", ",", "attn", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.MultiHeadAttention.__init__": [[131, 144], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter().requires_grad_", "torch.Parameter().requires_grad_", "torch.Parameter().requires_grad_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "numpy.power", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_k", ",", "d_in", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_in", "=", "d_in", "\n", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "d_in", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "query", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "n_head", ",", "d_k", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "query", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_k", ")", ")", ")", "\n", "\n", "self", ".", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.MultiHeadAttention.forward": [[146, 160], ["x.size", "ltae.MultiHeadAttention.query.repeat().transpose", "ltae.MultiHeadAttention.key().view().transpose", "x.view().transpose", "ltae.MultiHeadAttention.softmax", "ltae.MultiHeadAttention.dropout", "y.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "ltae.MultiHeadAttention.query.repeat", "ltae.MultiHeadAttention.key().view", "x.view", "ltae.MultiHeadAttention.transpose", "y.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "ltae.MultiHeadAttention.key", "y.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "key", "=", "None", ")", ":", "\n", "        ", "B", ",", "T", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "\n", "q", "=", "self", ".", "query", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (nh, hs) -> (B, nh, 1, d_k)", "\n", "k", "=", "self", ".", "key", "(", "x", "if", "key", "is", "None", "else", "key", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, d_k)", "\n", "v", "=", "x", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# self-attend; (B, nh, 1, d_k) x (B, nh, d_k, T) -> (B, nh, 1, T)", "\n", "att", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "self", ".", "temperature", "\n", "att", "=", "self", ".", "softmax", "(", "att", ")", "\n", "att", "=", "self", ".", "dropout", "(", "att", ")", "\n", "y", "=", "att", "@", "v", "# (B, nh, 1, T) x (B, nh, T, hs) -> (B, nh, 1, hs)", "\n", "y", "=", "y", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ")", "\n", "return", "y", ",", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.LearnableFourierPositionalEncoding.__init__": [[172, 191], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "m", "=", "1", ",", "f", "=", "384", ",", "h", "=", "32", ",", "d", "=", "768", ",", "max_pos", "=", "10000", ",", "n_head", "=", "16", ")", ":", "\n", "        ", "\"\"\"\n        Re-implementation of Learnable Fourier Features from https://arxiv.org/abs/2106.02795\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "f", "%", "2", "==", "0", "\n", "\n", "self", ".", "wr", "=", "nn", ".", "Linear", "(", "m", ",", "f", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "max_pos", "=", "max_pos", "\n", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "f", ",", "h", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "h", ",", "d", ")", "\n", ")", "\n", "self", ".", "scale", "=", "f", "**", "-", "0.5", "\n", "self", ".", "n_head", "=", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.LearnableFourierPositionalEncoding.forward": [[192, 201], ["ltae.LearnableFourierPositionalEncoding.wr", "ltae.LearnableFourierPositionalEncoding.mlp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().float", "torch.cat.unsqueeze().float", "torch.cat.unsqueeze().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "float", "(", ")", "/", "self", ".", "max_pos", "# normalize to [0, 1]", "\n", "\n", "x", "=", "self", ".", "wr", "(", "x", ")", "\n", "x", "=", "self", ".", "scale", "*", "torch", ".", "cat", "(", "(", "torch", ".", "cos", "(", "x", ")", ",", "torch", ".", "sin", "(", "x", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "for", "_", "in", "range", "(", "self", ".", "n_head", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__": [[205, 220], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "ltae.get_positional_encoding", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.__init__", "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "n_head", ",", "sinusoid", "=", "True", ",", "max_pos", "=", "10000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "dim", "=", "d_model", "//", "n_head", "\n", "self", ".", "sinusoid", "=", "sinusoid", "\n", "if", "self", ".", "sinusoid", ":", "\n", "            ", "sin_tab", "=", "get_positional_encoding", "(", "max_pos", ",", "dim", ",", "T", "=", "10000", ")", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "sin_tab", ",", "freeze", "=", "True", ")", "\n", "input_dim", "=", "dim", "\n", "", "else", ":", "\n", "            ", "input_dim", "=", "1", "\n", "\n", "", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "input_dim", ",", "dim", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "max_pos", "=", "max_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.RNNPositionalEncoding.forward": [[222, 231], ["ltae.RNNPositionalEncoding.rnn", "ltae.RNNPositionalEncoding.mlp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ltae.RNNPositionalEncoding.position_enc", "ltae.RNNPositionalEncoding.unsqueeze", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "sinusoid", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", "/", "self", ".", "max_pos", "# normalize to [0, 1]", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "position_enc", "(", "x", ")", "\n", "", "x", ",", "_", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "for", "_", "in", "range", "(", "self", ".", "n_head", ")", "]", ",", "dim", "=", "2", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jnyborg_tpe.models.ltae.get_positional_encoding": [[162, 169], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "math.log"], "function", ["None"], ["", "", "def", "get_positional_encoding", "(", "max_len", ",", "d_model", ",", "T", "=", "1000.0", ")", ":", "\n", "    ", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "T", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "return", "pe", "\n", "\n"]]}