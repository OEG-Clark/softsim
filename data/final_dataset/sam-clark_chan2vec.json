{"home.repos.pwc.inspect_result.sam-clark_chan2vec.python.combine_knn_filt_lang.combine_filt_preds": [[5, 23], ["open", "collections.defaultdict", "knn_pred_fps.split", "open", "collections.defaultdict.items", "open.close", "line.strip().split", "float", "open", "line.strip().split", "chan_preds_d[].append", "open.write", "numpy.mean", "open.write", "line.strip", "float", "line.strip"], "function", ["None"], ["def", "combine_filt_preds", "(", "knn_pred_fps", ",", "lang_pred_fp", ",", "out_fp", ",", "lang_pred_thresh", "=", "0.5", ")", ":", "\n", "    ", "chan_lang_pred_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "lang_pred_fp", ")", ":", "\n", "        ", "chan_id", ",", "lang_pred", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_lang_pred_d", "[", "chan_id", "]", "=", "float", "(", "lang_pred", ")", "\n", "", "chan_preds_d", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "fp", "in", "knn_pred_fps", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "for", "line", "in", "open", "(", "fp", ")", ":", "\n", "            ", "chan_id", ",", "pred", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_preds_d", "[", "chan_id", "]", ".", "append", "(", "float", "(", "pred", ")", ")", "\n", "", "", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "chan_id", ",", "pred_l", "in", "chan_preds_d", ".", "items", "(", ")", ":", "\n", "        ", "if", "chan_lang_pred_d", "[", "chan_id", "]", "<=", "lang_pred_thresh", ":", "\n", "            ", "of", ".", "write", "(", "chan_id", "+", "\"\\t0.0\\n\"", ")", "\n", "", "else", ":", "\n", "            ", "pred", "=", "np", ".", "mean", "(", "pred_l", ")", "\n", "of", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "(", "\"%.3f\"", "%", "pred", ")", "+", "\"\\n\"", ")", "\n", "", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_cluster.cluster_channels": [[12, 50], ["collections.defaultdict", "set", "chan2vec_knn.read_vec_fp", "sklearn.cluster.KMeans().fit", "open", "collections.defaultdict", "enumerate", "collections.defaultdict.items", "open", "line.strip().split", "numpy.linalg.norm", "clust_chans_d[].append", "open", "sorted", "open.close", "line.strip().split", "extra_tags_d[].add", "l.strip", "sklearn.cluster.KMeans", "int", "int", "l.append", "open.write", "open", "line.strip", "line.strip", "sorted", "str", "map"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_knn.read_vec_fp"], ["def", "cluster_channels", "(", "vec_fp", ",", "chan_info_fp", ",", "limit_chan_fp", ",", "\n", "num_clusters", ",", "output_fp_pref", ",", "extra_tags_fp", "=", "None", ")", ":", "\n", "# Get extra tags", "\n", "    ", "extra_tags_d", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "if", "extra_tags_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "extra_tags_fp", ")", ":", "\n", "            ", "chan_id", ",", "tag", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "extra_tags_d", "[", "chan_id", "]", ".", "add", "(", "tag", ")", "\n", "# Only cluster these channels", "\n", "", "", "chan_limit_s", "=", "set", "(", "[", "l", ".", "strip", "(", "\"\\n\"", ")", "for", "l", "in", "open", "(", "limit_chan_fp", ")", "]", ")", "\n", "# Read in vectors", "\n", "aid_chan_d", ",", "embed_m", "=", "chan2vec_knn", ".", "read_vec_fp", "(", "vec_fp", ",", "chan_info_fp", ",", "\n", "include_s", "=", "chan_limit_s", ")", "\n", "# Get clusters", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "num_clusters", ",", "random_state", "=", "0", ")", ".", "fit", "(", "embed_m", ")", "\n", "# Read in channel info", "\n", "chan_info_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "chan_info_fp", ")", ":", "\n", "        ", "chan_id", ",", "_", ",", "chan_name", ",", "scrap_subs", ",", "tot_subs", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_id", "in", "chan_limit_s", ":", "\n", "            ", "chan_info_d", "[", "chan_id", "]", "=", "(", "chan_name", ",", "scrap_subs", ",", "tot_subs", ")", "\n", "# Add info to clusters", "\n", "", "", "clust_centers", "=", "kmeans", ".", "cluster_centers_", "\n", "clust_chans_d", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "lid", ",", "lab", "in", "enumerate", "(", "kmeans", ".", "labels_", ")", ":", "\n", "        ", "chan_id", "=", "aid_chan_d", "[", "lid", "]", "\n", "chan_name", ",", "scrap_subs", ",", "tot_subs", "=", "chan_info_d", "[", "chan_id", "]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "embed_m", "[", "lid", "]", "-", "clust_centers", "[", "lab", "]", ")", "\n", "l", "=", "[", "chan_id", ",", "chan_name", ",", "dist", ",", "int", "(", "scrap_subs", ")", ",", "int", "(", "tot_subs", ")", "]", "\n", "if", "extra_tags_fp", "is", "not", "None", ":", "\n", "            ", "l", ".", "append", "(", "\"|\"", ".", "join", "(", "sorted", "(", "extra_tags_d", "[", "chan_id", "]", ")", ")", ")", "\n", "", "clust_chans_d", "[", "lab", "]", ".", "append", "(", "l", ")", "\n", "# Output clusters", "\n", "", "for", "clust", ",", "chan_l", "in", "clust_chans_d", ".", "items", "(", ")", ":", "\n", "        ", "of", "=", "open", "(", "output_fp_pref", "+", "str", "(", "clust", ")", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "for", "tpl", "in", "sorted", "(", "chan_l", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", ":", "\n", "            ", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "tpl", ")", ")", "+", "\"\\n\"", ")", "\n", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_knn.read_vec_fp": [[11, 34], ["enumerate", "enumerate", "numpy.stack", "open", "line.strip().split", "open", "line.strip().split", "int", "numpy.array", "numpy.linalg.norm", "vec_l.append", "line.strip", "int", "line.strip", "len", "float"], "function", ["None"], ["def", "read_vec_fp", "(", "vec_fp", ",", "chan_info_fp", ",", "include_s", "=", "None", ")", ":", "\n", "# Get chan_int to chan_id mappings", "\n", "    ", "chan_int_id_d", "=", "{", "}", "\n", "for", "lid", ",", "line", "in", "enumerate", "(", "open", "(", "chan_info_fp", ")", ")", ":", "\n", "        ", "chan_id", ",", "chan_int_id", ",", "chan_name", ",", "chan_ds_subs", ",", "chan_tot_subs", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_int_id_d", "[", "int", "(", "chan_int_id", ")", "]", "=", "chan_id", "\n", "# Read in vectors ", "\n", "", "aid_chan_d", "=", "{", "}", "\n", "vec_l", "=", "[", "]", "\n", "for", "lid", ",", "line", "in", "enumerate", "(", "open", "(", "vec_fp", ")", ")", ":", "\n", "        ", "if", "lid", "<", "2", ":", "continue", "\n", "tpl", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\" \"", ")", "\n", "chan_int_id", "=", "int", "(", "tpl", "[", "0", "]", ")", "\n", "chan_id", "=", "chan_int_id_d", "[", "chan_int_id", "]", "\n", "if", "include_s", "is", "not", "None", "and", "chan_id", "not", "in", "include_s", ":", "continue", "\n", "aid_chan_d", "[", "len", "(", "vec_l", ")", "]", "=", "chan_id", "\n", "# Normalize vector and change type", "\n", "vec", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "tpl", "[", "1", ":", "-", "1", "]", "]", ")", "\n", "vl", "=", "np", ".", "linalg", ".", "norm", "(", "vec", ")", "\n", "vec", "=", "(", "vec", "/", "vl", ")", ".", "astype", "(", "'float32'", ")", "\n", "vec_l", ".", "append", "(", "vec", ")", "\n", "", "embed_m", "=", "np", ".", "stack", "(", "vec_l", ")", "\n", "return", "aid_chan_d", ",", "embed_m", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_knn.score_file_faiss": [[36, 127], ["chan2vec_knn.read_vec_fp", "set", "chan2vec_knn.read_vec_fp", "open", "range", "open.close", "faiss.StandardGpuResources", "open", "dict", "faiss.IndexFlatIP", "faiss.index_cpu_to_gpu", "faiss.index_cpu_to_gpu.add", "faiss.index_cpu_to_gpu.search", "faiss.IndexFlatIP", "faiss.IndexFlatIP.add", "faiss.IndexFlatIP.search", "len", "collections.defaultdict", "zip", "set", "l.strip", "neighb_chan_id_l.append", "len", "open.write", "l.strip().split", "chan_lab_d[].add", "l.strip().split", "float", "l.strip().split", "dict.keys", "open", "info_cols_l.append", "set", "open", "str", "numpy.exp", "chan_lab_d[].items", "l.strip", "l.strip", "l.strip", "float", "str", "max", "collections.defaultdict.items", "sum", "sum", "sum", "str", "collections.defaultdict.items", "collections.defaultdict.values", "collections.defaultdict.values", "float", "collections.defaultdict.items"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_knn.read_vec_fp", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_knn.read_vec_fp"], ["", "def", "score_file_faiss", "(", "vec_fp", ",", "chan_info_fp", ",", "lab_fp", ",", "score_chan_fp", ",", "out_fp", ",", "num_neighbs", "=", "5", ",", "use_gpu", "=", "False", ",", "\n", "multi_lab", "=", "False", ",", "output_sims", "=", "False", ",", "weight_neighbs", "=", "False", ",", "bin_prob", "=", "False", ",", "\n", "multi_lab_prob", "=", "False", ",", "regression", "=", "False", ")", ":", "\n", "    ", "assert", "not", "(", "multi_lab", "and", "bin_prob", ")", "\n", "res", "=", "None", "if", "not", "use_gpu", "else", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "# Read in labels", "\n", "if", "multi_lab", ":", "\n", "        ", "chan_lab_d", "=", "{", "}", "\n", "for", "l", "in", "open", "(", "lab_fp", ")", ":", "\n", "            ", "if", "not", "multi_lab_prob", ":", "\n", "                ", "chan_id", ",", "lab", "=", "l", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_id", "not", "in", "chan_lab_d", ":", "\n", "                    ", "chan_lab_d", "[", "chan_id", "]", "=", "set", "(", "[", "]", ")", "\n", "", "chan_lab_d", "[", "chan_id", "]", ".", "add", "(", "lab", ")", "\n", "", "else", ":", "\n", "                ", "chan_id", ",", "lab", ",", "perc", "=", "l", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_id", "not", "in", "chan_lab_d", ":", "\n", "                    ", "chan_lab_d", "[", "chan_id", "]", "=", "{", "}", "\n", "", "chan_lab_d", "[", "chan_id", "]", "[", "lab", "]", "=", "float", "(", "perc", ")", "\n", "", "", "", "else", ":", "\n", "        ", "chan_lab_d", "=", "dict", "(", "[", "l", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "open", "(", "lab_fp", ")", "]", ")", "\n", "# Read in vectors for labels", "\n", "", "aid_chan_d_lab", ",", "embed_m_lab", "=", "read_vec_fp", "(", "vec_fp", ",", "chan_info_fp", ",", "include_s", "=", "set", "(", "chan_lab_d", ".", "keys", "(", ")", ")", ")", "\n", "# Read in vectors for queries", "\n", "score_chan_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "score_chan_fp", ")", "]", ")", "\n", "aid_chan_d_q", ",", "embed_m_q", "=", "read_vec_fp", "(", "vec_fp", ",", "chan_info_fp", ",", "include_s", "=", "score_chan_s", ")", "\n", "# Create index", "\n", "d", "=", "embed_m_lab", ".", "shape", "[", "1", "]", "\n", "if", "use_gpu", ":", "\n", "        ", "index_flat", "=", "faiss", ".", "IndexFlatIP", "(", "d", ")", "\n", "gpu_index_flat", "=", "faiss", ".", "index_cpu_to_gpu", "(", "res", ",", "0", ",", "index_flat", ")", "\n", "gpu_index_flat", ".", "add", "(", "embed_m_lab", ")", "\n", "D", ",", "I", "=", "gpu_index_flat", ".", "search", "(", "embed_m_q", ",", "num_neighbs", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "index", "=", "faiss", ".", "IndexFlatIP", "(", "d", ")", "\n", "index", ".", "add", "(", "embed_m_lab", ")", "\n", "D", ",", "I", "=", "index", ".", "search", "(", "embed_m_q", ",", "num_neighbs", "+", "1", ")", "\n", "", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "aid_chan_d_q", ")", ")", ":", "\n", "        ", "chan_id", "=", "aid_chan_d_q", "[", "i", "]", "\n", "found", "=", "0", "\n", "neighb_lab_d", "=", "collections", ".", "defaultdict", "(", "float", ")", "\n", "neighb_chan_id_l", "=", "[", "]", "\n", "for", "aid_neighb", ",", "cos_sim", "in", "zip", "(", "I", "[", "i", "]", ",", "D", "[", "i", "]", ")", ":", "\n", "            ", "neighb_chan_id", "=", "aid_chan_d_lab", "[", "aid_neighb", "]", "\n", "if", "chan_id", "==", "neighb_chan_id", ":", "continue", "\n", "neighb_chan_id_l", ".", "append", "(", "neighb_chan_id", "+", "\"|\"", "+", "str", "(", "cos_sim", ")", ")", "\n", "weight", "=", "1", "\n", "if", "weight_neighbs", ":", "\n", "                ", "weight", "=", "(", "1", "/", "np", ".", "exp", "(", "1", "-", "cos_sim", ")", ")", "\n", "", "if", "not", "multi_lab", ":", "\n", "                ", "lab", "=", "chan_lab_d", "[", "neighb_chan_id", "]", "\n", "if", "bin_prob", ":", "\n", "                    ", "neighb_lab_d", "[", "\"pos\"", "]", "+=", "weight", "*", "float", "(", "lab", ")", "\n", "neighb_lab_d", "[", "\"tot\"", "]", "+=", "weight", "\n", "", "else", ":", "\n", "                    ", "neighb_lab_d", "[", "lab", "]", "+=", "weight", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "multi_lab_prob", ":", "\n", "                    ", "for", "lab", "in", "chan_lab_d", "[", "neighb_chan_id", "]", ":", "\n", "                        ", "neighb_lab_d", "[", "lab", "]", "+=", "weight", "\n", "", "", "else", ":", "\n", "                    ", "for", "lab", ",", "perc", "in", "chan_lab_d", "[", "neighb_chan_id", "]", ".", "items", "(", ")", ":", "\n", "                        ", "neighb_lab_d", "[", "lab", "]", "+=", "weight", "*", "perc", "\n", "", "", "", "found", "+=", "1", "\n", "if", "found", "==", "num_neighbs", ":", "break", "\n", "", "if", "len", "(", "neighb_lab_d", ")", ">", "0", ":", "\n", "            ", "info_cols_l", "=", "[", "]", "\n", "# Top sim labs", "\n", "if", "not", "multi_lab", ":", "\n", "                ", "if", "bin_prob", ":", "\n", "                    ", "prob", "=", "neighb_lab_d", "[", "\"pos\"", "]", "/", "neighb_lab_d", "[", "\"tot\"", "]", "\n", "info_cols_l", "=", "[", "str", "(", "prob", ")", "]", "\n", "", "else", ":", "\n", "                    ", "if", "not", "regression", ":", "\n", "                        ", "max_lab", ",", "max_c", "=", "max", "(", "neighb_lab_d", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "max_perc", "=", "max_c", "/", "sum", "(", "neighb_lab_d", ".", "values", "(", ")", ")", "\n", "info_cols_l", "=", "[", "max_lab", ",", "\"%.3f\"", "%", "max_perc", "]", "\n", "", "else", ":", "\n", "# Take the weighted average for regression", "\n", "                        ", "weight_avg", "=", "sum", "(", "[", "float", "(", "lab", ")", "*", "c", "for", "lab", ",", "c", "in", "neighb_lab_d", ".", "items", "(", ")", "]", ")", "/", "sum", "(", "neighb_lab_d", ".", "values", "(", ")", ")", "\n", "info_cols_l", "=", "[", "\"%.3f\"", "%", "weight_avg", "]", "\n", "", "", "", "else", ":", "\n", "                ", "all_sims_str", "=", "\",\"", ".", "join", "(", "[", "lab", "+", "\"|\"", "+", "str", "(", "lab_c", "/", "found", ")", "for", "lab", ",", "lab_c", "in", "neighb_lab_d", ".", "items", "(", ")", "]", ")", "\n", "info_cols_l", "=", "[", "all_sims_str", "]", "\n", "# Top sim IDs (if specificied)", "\n", "", "if", "output_sims", ":", "\n", "                ", "neighb_chan_id_str", "=", "\",\"", ".", "join", "(", "neighb_chan_id_l", ")", "\n", "info_cols_l", ".", "append", "(", "neighb_chan_id_str", ")", "\n", "", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "chan_id", "]", "+", "info_cols_l", ")", "+", "\"\\n\"", ")", "\n", "", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_training_data.store_chan_sub_info": [[13, 36], ["commenter_subs_d[].add", "chan_commenters_d[].add", "set", "int", "set", "len", "len", "len", "float", "len", "len"], "function", ["None"], ["def", "store_chan_sub_info", "(", "commenter_subs_d", ",", "chan_name_d", ",", "chan_subs_d", ",", "chan_commenters_d", ",", "\n", "chan_int_d", ",", "commenter_chan_id", ",", "chan_id", ",", "chan_name", ",", "subs", ")", ":", "\n", "    ", "if", "len", "(", "chan_id", ")", "!=", "24", "or", "len", "(", "commenter_chan_id", ")", "!=", "24", ":", "\n", "        ", "return", "\n", "# Record sub info", "\n", "", "if", "commenter_chan_id", "not", "in", "commenter_subs_d", ":", "\n", "        ", "commenter_subs_d", "[", "commenter_chan_id", "]", "=", "set", "(", "[", "]", ")", "\n", "", "commenter_subs_d", "[", "commenter_chan_id", "]", ".", "add", "(", "chan_id", ")", "\n", "# Record chan info", "\n", "try", ":", "\n", "        ", "subs", "=", "int", "(", "float", "(", "subs", ")", ")", "\n", "", "except", ":", "\n", "        ", "subs", "=", "-", "1", "\n", "", "if", "chan_id", "not", "in", "chan_name_d", "or", "len", "(", "chan_name_d", "[", "chan_id", "]", ")", "<", "len", "(", "chan_name", ")", ":", "\n", "        ", "chan_name_d", "[", "chan_id", "]", "=", "chan_name", "\n", "", "if", "chan_id", "not", "in", "chan_subs_d", "or", "chan_subs_d", "[", "chan_id", "]", "<", "subs", ":", "\n", "        ", "chan_subs_d", "[", "chan_id", "]", "=", "subs", "\n", "", "if", "chan_id", "not", "in", "chan_commenters_d", ":", "\n", "        ", "chan_commenters_d", "[", "chan_id", "]", "=", "set", "(", "[", "]", ")", "\n", "", "chan_commenters_d", "[", "chan_id", "]", ".", "add", "(", "commenter_chan_id", ")", "\n", "if", "chan_id", "not", "in", "chan_int_d", ":", "\n", "        ", "chan_int", "=", "len", "(", "chan_int_d", ")", "\n", "chan_int_d", "[", "chan_id", "]", "=", "chan_int", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_training_data.generate_training_data": [[38, 128], ["json.load", "set", "set", "set", "set", "sorted", "set", "set", "set", "sorted", "set", "open", "commenter_subs_d.items", "open.close", "open", "open.close", "print", "print", "print", "print", "print", "print", "print", "print", "print", "sum", "print", "open", "set", "open", "os.listdir", "print", "open", "open", "os.listdir", "print", "open", "range", "open.write", "len", "len", "len", "len", "len", "len", "len", "len", "l.strip", "set.add", "set.add", "str", "len", "random.shuffle", "open.write", "len", "l.strip", "open", "line.strip", "set.add", "generate_training_data.store_chan_sub_info", "set.add", "set.add", "generate_training_data.store_chan_sub_info", "chan_commenters_d.items", "len", "chan_commenters_d.items", "open", "line.replace().strip().split", "line.strip().split", "line.replace().strip().split", "len", "set.intersection", "str", "str", "str", "line.replace().strip", "line.strip", "line.replace().strip", "len", "line.replace", "line.replace"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_training_data.store_chan_sub_info", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_training_data.store_chan_sub_info"], ["", "", "def", "generate_training_data", "(", "commenter_config_fp", ",", "chan_docs_fp", ",", "chan_info_fp", ",", "\n", "num_ds_shuf", "=", "3", ",", "min_chan_scrap_subs", "=", "5", ",", "min_doc_size", "=", "2", ",", "\n", "limit_doc_chan_fp", "=", "None", ")", ":", "\n", "    ", "config_obj", "=", "json", ".", "load", "(", "open", "(", "commenter_config_fp", ")", ")", "\n", "# Get channels that *MUST* be in doc for doc to be included", "\n", "limit_doc_chan_s", "=", "set", "(", "[", "]", ")", "\n", "if", "limit_doc_chan_fp", "is", "not", "None", ":", "\n", "        ", "limit_doc_chan_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "limit_doc_chan_fp", ")", "]", ")", "\n", "# Get terminated channels to ensure vectors aren't created for them", "\n", "", "term_chans_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "config_obj", "[", "TERMINATED_CHANNELS_FP", "]", ")", "]", ")", "\n", "# Read in \"curl\" subs", "\n", "eligible_commenters_s", "=", "set", "(", "[", "]", ")", "\n", "for", "fp", "in", "config_obj", "[", "COMMENTERS_FP_LIST", "]", ":", "\n", "        ", "for", "line", "in", "open", "(", "fp", ")", ":", "\n", "            ", "eligible_commenters_s", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "no_subs_s", "=", "set", "(", "[", "]", ")", "\n", "commenters_subs_dir", "=", "config_obj", "[", "COMMENTERS_SUBS_DIR", "]", "\n", "commenter_subs_d", "=", "{", "}", "\n", "chan_name_d", "=", "{", "}", "\n", "chan_subs_d", "=", "{", "}", "\n", "chan_commenters_d", "=", "{", "}", "\n", "chan_int_d", "=", "{", "}", "\n", "for", "fn", "in", "sorted", "(", "os", ".", "listdir", "(", "commenters_subs_dir", ")", ")", ":", "\n", "        ", "print", "(", "\"LOADING CURL:\"", ",", "fn", ")", "\n", "for", "line", "in", "open", "(", "commenters_subs_dir", "+", "\"/\"", "+", "fn", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "commenter_chan_id", ",", "chan_id", ",", "chan_name", ",", "subs", "=", "line", ".", "replace", "(", "\"\\\\\"", ",", "\"\"", ")", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "4", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "if", "commenter_chan_id", "not", "in", "eligible_commenters_s", "or", "chan_id", "in", "term_chans_s", ":", "continue", "\n", "if", "chan_id", "==", "\"\"", ":", "\n", "                ", "no_subs_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "", "else", ":", "\n", "# Record sub / chan info", "\n", "                ", "store_chan_sub_info", "(", "commenter_subs_d", ",", "chan_name_d", ",", "chan_subs_d", ",", "chan_commenters_d", ",", "\n", "chan_int_d", ",", "commenter_chan_id", ",", "chan_id", ",", "chan_name", ",", "subs", ")", "\n", "# Read in \"selenium\" subs", "\n", "", "", "", "eligible_sel_commenters_s", "=", "set", "(", "[", "]", ")", "\n", "for", "fp", "in", "config_obj", "[", "COMMENTERS_SEL_SAMP_FP_LIST", "]", ":", "\n", "        ", "for", "line", "in", "open", "(", "fp", ")", ":", "\n", "            ", "eligible_sel_commenters_s", ".", "add", "(", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "1", "]", ")", "\n", "", "", "commenters_subs_selenium_dir", "=", "config_obj", "[", "COMMENTERS_SUBS_SELENIUM_DIR", "]", "\n", "no_sel_subs_s", "=", "set", "(", "[", "]", ")", "\n", "has_sel_subs_s", "=", "set", "(", "[", "]", ")", "\n", "for", "fn", "in", "sorted", "(", "os", ".", "listdir", "(", "commenters_subs_selenium_dir", ")", ")", ":", "\n", "        ", "print", "(", "\"LOADING SELENIUM:\"", ",", "fn", ")", "\n", "for", "line", "in", "open", "(", "commenters_subs_selenium_dir", "+", "\"/\"", "+", "fn", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "commenter_chan_id", ",", "chan_id", ",", "chan_name", ",", "subs", "=", "line", ".", "replace", "(", "\"\\\\\"", ",", "\"\"", ")", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "4", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "if", "commenter_chan_id", "not", "in", "eligible_sel_commenters_s", "or", "chan_id", "in", "term_chans_s", ":", "continue", "\n", "if", "chan_id", "==", "\"\"", ":", "\n", "                ", "no_sel_subs_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "", "else", ":", "\n", "# Record sub / chan info", "\n", "                ", "has_sel_subs_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "store_chan_sub_info", "(", "commenter_subs_d", ",", "chan_name_d", ",", "chan_subs_d", ",", "chan_commenters_d", ",", "\n", "chan_int_d", ",", "commenter_chan_id", ",", "chan_id", ",", "chan_name", ",", "subs", ")", "\n", "# Filter chans by min scrap", "\n", "", "", "", "ds_chan_s", "=", "set", "(", "[", "chan_id", "for", "chan_id", ",", "scrap_sub_s", "in", "chan_commenters_d", ".", "items", "(", ")", "\n", "if", "len", "(", "scrap_sub_s", ")", ">=", "min_chan_scrap_subs", "]", ")", "\n", "# Create docs", "\n", "chan_docs_f", "=", "open", "(", "chan_docs_fp", ",", "\"w\"", ")", "\n", "for", "commenter_id", ",", "subs_s", "in", "commenter_subs_d", ".", "items", "(", ")", ":", "\n", "        ", "if", "limit_doc_chan_s", "and", "len", "(", "limit_doc_chan_s", ".", "intersection", "(", "subs_s", ")", ")", "==", "0", ":", "continue", "\n", "filt_sub_l", "=", "[", "str", "(", "chan_int_d", "[", "chan_id", "]", ")", "for", "chan_id", "in", "subs_s", "if", "chan_id", "in", "ds_chan_s", "]", "\n", "if", "len", "(", "filt_sub_l", ")", "<", "min_doc_size", ":", "continue", "\n", "for", "_", "in", "range", "(", "num_ds_shuf", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "filt_sub_l", ")", "\n", "chan_docs_f", ".", "write", "(", "\" \"", ".", "join", "(", "filt_sub_l", ")", "+", "\"\\n\"", ")", "\n", "", "", "chan_docs_f", ".", "close", "(", ")", "\n", "# Output channel info", "\n", "chan_info_f", "=", "open", "(", "chan_info_fp", ",", "\"w\"", ")", "\n", "for", "chan_id", "in", "ds_chan_s", ":", "\n", "        ", "chan_info_f", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "chan_id", ",", "str", "(", "chan_int_d", "[", "chan_id", "]", ")", ",", "chan_name_d", "[", "chan_id", "]", ",", "\n", "str", "(", "len", "(", "chan_commenters_d", "[", "chan_id", "]", ")", ")", ",", "str", "(", "chan_subs_d", "[", "chan_id", "]", ")", "]", ")", "+", "\"\\n\"", ")", "\n", "", "chan_info_f", ".", "close", "(", ")", "\n", "# Print out stats", "\n", "print", "(", "\"\\nScrape stats-\"", ")", "\n", "print", "(", "\"Eligible commenters:\"", ",", "len", "(", "eligible_commenters_s", ")", ")", "\n", "print", "(", "\"Commenters no subs:\"", ",", "len", "(", "no_subs_s", ")", ")", "\n", "print", "(", "\"Commenters w/ subs:\"", ",", "len", "(", "commenter_subs_d", ")", ")", "\n", "print", "(", "\"Eligible sel commenters:\"", ",", "len", "(", "eligible_sel_commenters_s", ")", ")", "\n", "print", "(", "\"Commenters selenium no subs:\"", ",", "len", "(", "no_sel_subs_s", ")", ")", "\n", "print", "(", "\"Commenters selenium w/ subs:\"", ",", "len", "(", "has_sel_subs_s", ")", ")", "\n", "print", "(", "\"All channels found:\"", ",", "len", "(", "chan_commenters_d", ")", ")", "\n", "print", "(", "\"Channels w/ min scrap subs:\"", ",", "len", "(", "ds_chan_s", ")", ")", "\n", "tot_comb_subs", "=", "sum", "(", "[", "len", "(", "scrap_sub_s", ")", "for", "chan_id", ",", "scrap_sub_s", "in", "chan_commenters_d", ".", "items", "(", ")", "]", ")", "\n", "print", "(", "\"Total combined subs:\"", ",", "tot_comb_subs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats_bin.print_stats": [[5, 16], ["sklearn.metrics.roc_auc_score", "sum", "print", "print", "print", "print", "print", "sum", "len", "sum", "sum", "len", "int", "int", "range", "range", "len", "len"], "function", ["None"], ["def", "print_stats", "(", "lab_l", ",", "pred_l", ",", "pred_bin_l", ")", ":", "\n", "    ", "auc", "=", "roc_auc_score", "(", "lab_l", ",", "pred_l", ")", "\n", "accuracy", "=", "sum", "(", "[", "int", "(", "lab_l", "[", "i", "]", "==", "pred_bin_l", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "lab_l", ")", ")", "]", ")", "/", "len", "(", "lab_l", ")", "\n", "cor_c", "=", "sum", "(", "[", "int", "(", "(", "lab_l", "[", "i", "]", "==", "1", ")", "and", "(", "pred_bin_l", "[", "i", "]", "==", "1", ")", ")", "for", "i", "in", "range", "(", "len", "(", "lab_l", ")", ")", "]", ")", "\n", "prec", "=", "cor_c", "/", "sum", "(", "pred_bin_l", ")", "\n", "rec", "=", "cor_c", "/", "sum", "(", "lab_l", ")", "\n", "print", "(", "\"Num instances:\"", ",", "len", "(", "lab_l", ")", ")", "\n", "print", "(", "\"AUC:          \"", ",", "\"%.4f\"", "%", "auc", ")", "\n", "print", "(", "\"Accuracy:     \"", ",", "\"%.4f\"", "%", "accuracy", ")", "\n", "print", "(", "\"Precision:    \"", ",", "\"%.4f\"", "%", "prec", ")", "\n", "print", "(", "\"Recall:       \"", ",", "\"%.4f\"", "%", "rec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats_bin.main": [[18, 51], ["open", "open", "chan_lab_d.items", "gen_pred_stats_bin.print_stats", "line.strip().split", "int", "float", "open", "open.close", "line.strip().split", "line.strip().split", "out_l.append", "lab_l.append", "pred_l.append", "pred_bin_l.append", "open.write", "line.strip", "float", "int", "line.strip", "line.strip", "map"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats_bin.print_stats"], ["", "def", "main", "(", "lab_fp", ",", "score_fp", ",", "thresh", "=", "0.5", ",", "out_fp", "=", "None", ",", "no_fold_lab_col", "=", "False", ")", ":", "\n", "    ", "chan_lab_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "lab_fp", ")", ":", "\n", "        ", "chan_id", ",", "lab", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_lab_d", "[", "chan_id", "]", "=", "int", "(", "float", "(", "lab", ")", ">=", "0.5", ")", "\n", "", "chan_pred_d", "=", "{", "}", "\n", "out_l", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "score_fp", ")", ":", "\n", "        ", "if", "no_fold_lab_col", ":", "\n", "            ", "chan_id", ",", "pred", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "fold", "=", "None", "\n", "", "else", ":", "\n", "            ", "fold", ",", "chan_id", ",", "_", ",", "pred", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "", "chan_pred_d", "[", "chan_id", "]", "=", "float", "(", "pred", ")", "\n", "if", "chan_id", "in", "chan_lab_d", ":", "\n", "            ", "out_l", ".", "append", "(", "(", "fold", ",", "chan_id", ",", "chan_lab_d", "[", "chan_id", "]", ",", "pred", ")", ")", "\n", "", "", "lab_l", "=", "[", "]", "\n", "pred_l", "=", "[", "]", "\n", "pred_bin_l", "=", "[", "]", "\n", "for", "chan_id", ",", "lab", "in", "chan_lab_d", ".", "items", "(", ")", ":", "\n", "        ", "if", "chan_id", "in", "chan_pred_d", ":", "\n", "            ", "lab_l", ".", "append", "(", "lab", ")", "\n", "pred", "=", "chan_pred_d", "[", "chan_id", "]", "\n", "pred_l", ".", "append", "(", "pred", ")", "\n", "pred_bin_l", ".", "append", "(", "int", "(", "pred", ">=", "thresh", ")", ")", "\n", "# Print stats", "\n", "", "", "print_stats", "(", "lab_l", ",", "pred_l", ",", "pred_bin_l", ")", "\n", "# Output results", "\n", "if", "out_fp", "is", "not", "None", ":", "\n", "        ", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "tpl", "in", "out_l", ":", "\n", "            ", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "tpl", ")", ")", "+", "\"\\n\"", ")", "\n", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_format.main": [[5, 11], ["chan2vec_knn.read_vec_fp", "open", "aid_chan_d.items", "open.close", "open.write", "map", "list"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_knn.read_vec_fp"], ["def", "main", "(", "vec_fp", ",", "chan_info_fp", ",", "out_fp", ")", ":", "\n", "    ", "aid_chan_d", ",", "embed_m_lab", "=", "chan2vec_knn", ".", "read_vec_fp", "(", "vec_fp", ",", "chan_info_fp", ",", "include_s", "=", "None", ")", "\n", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "aid", ",", "chan_id", "in", "aid_chan_d", ".", "items", "(", ")", ":", "\n", "        ", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "[", "chan_id", "]", "+", "list", "(", "embed_m_lab", "[", "aid", "]", ")", ")", ")", "+", "\"\\n\"", ")", "\n", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.split_score.split_score": [[10, 54], ["numpy.array", "sklearn.model_selection.KFold", "enumerate", "os.path.exists", "os.makedirs", "os.listdir", "sklearn.model_selection.KFold.split", "open", "open.write", "open.close", "open", "open.write", "open.close", "open", "open.write", "open.close", "open", "open.write", "open.close", "chan2vec_knn.score_file_faiss", "chan2vec_knn.score_file_faiss", "os.remove", "l.strip", "vars", "vars", "vars", "vars", "vars", "vars", "open", "l.split", "l.split"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_knn.score_file_faiss", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.chan2vec_knn.score_file_faiss"], ["def", "split_score", "(", "vec_fp", ",", "chan_info_fp", ",", "lab_fp", ",", "out_dir", ",", "num_neighbs", "=", "5", ",", "use_gpu", "=", "False", ",", "\n", "multi_lab", "=", "False", ",", "output_sims", "=", "False", ",", "weight_neighbs", "=", "False", ",", "bin_prob", "=", "False", ",", "\n", "multi_lab_prob", "=", "False", ",", "num_folds", "=", "10", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "else", ":", "\n", "        ", "for", "fn", "in", "os", ".", "listdir", "(", "out_dir", ")", ":", "\n", "            ", "os", ".", "remove", "(", "out_dir", "+", "\"/\"", "+", "fn", ")", "\n", "# Read in labels", "\n", "", "", "labels_a", "=", "np", ".", "array", "(", "[", "l", ".", "strip", "(", "\"\\n\"", ")", "for", "l", "in", "open", "(", "lab_fp", ")", "]", ")", "\n", "# Split and score each", "\n", "kf", "=", "KFold", "(", "n_splits", "=", "num_folds", ",", "shuffle", "=", "True", ")", "\n", "for", "fold_i", ",", "(", "train_index", ",", "test_index", ")", "in", "enumerate", "(", "kf", ".", "split", "(", "labels_a", ")", ")", ":", "\n", "# Generate train / test files", "\n", "        ", "train_lab_fp", "=", "\"%(out_dir)s/train.%(fold_i)s.labs.txt\"", "%", "vars", "(", ")", "\n", "test_lab_fp", "=", "\"%(out_dir)s/test.%(fold_i)s.labs.txt\"", "%", "vars", "(", ")", "\n", "of", "=", "open", "(", "train_lab_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "l", "for", "l", "in", "labels_a", "[", "train_index", "]", "]", ")", "+", "\"\\n\"", ")", "\n", "of", ".", "close", "(", ")", "\n", "of", "=", "open", "(", "test_lab_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "l", "for", "l", "in", "labels_a", "[", "test_index", "]", "]", ")", "+", "\"\\n\"", ")", "\n", "of", ".", "close", "(", ")", "\n", "train_chan_fp", "=", "\"%(out_dir)s/train.%(fold_i)s.chans.txt\"", "%", "vars", "(", ")", "\n", "test_chan_fp", "=", "\"%(out_dir)s/test.%(fold_i)s.chans.txt\"", "%", "vars", "(", ")", "\n", "of", "=", "open", "(", "train_chan_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "l", ".", "split", "(", "\"\\t\"", ")", "[", "0", "]", "for", "l", "in", "labels_a", "[", "train_index", "]", "]", ")", "+", "\"\\n\"", ")", "\n", "of", ".", "close", "(", ")", "\n", "of", "=", "open", "(", "test_chan_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "l", ".", "split", "(", "\"\\t\"", ")", "[", "0", "]", "for", "l", "in", "labels_a", "[", "test_index", "]", "]", ")", "+", "\"\\n\"", ")", "\n", "of", ".", "close", "(", ")", "\n", "# Score *BOTH* using the train file", "\n", "# Train score", "\n", "train_pred_fp", "=", "\"%(out_dir)s/train.%(fold_i)s.preds.txt\"", "%", "vars", "(", ")", "\n", "chan2vec_knn", ".", "score_file_faiss", "(", "vec_fp", ",", "chan_info_fp", ",", "train_lab_fp", ",", "train_chan_fp", ",", "\n", "train_pred_fp", ",", "num_neighbs", "=", "num_neighbs", ",", "use_gpu", "=", "use_gpu", ",", "\n", "multi_lab", "=", "multi_lab", ",", "output_sims", "=", "output_sims", ",", "\n", "weight_neighbs", "=", "weight_neighbs", ",", "bin_prob", "=", "bin_prob", ",", "\n", "multi_lab_prob", "=", "multi_lab_prob", ")", "\n", "test_pred_fp", "=", "\"%(out_dir)s/test.%(fold_i)s.preds.txt\"", "%", "vars", "(", ")", "\n", "chan2vec_knn", ".", "score_file_faiss", "(", "vec_fp", ",", "chan_info_fp", ",", "train_lab_fp", ",", "test_chan_fp", ",", "\n", "test_pred_fp", ",", "num_neighbs", "=", "num_neighbs", ",", "use_gpu", "=", "use_gpu", ",", "\n", "multi_lab", "=", "multi_lab", ",", "output_sims", "=", "output_sims", ",", "\n", "weight_neighbs", "=", "weight_neighbs", ",", "bin_prob", "=", "bin_prob", ",", "\n", "multi_lab_prob", "=", "multi_lab_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats_multi_lab.read_file_multi_lab": [[5, 37], ["open", "collections.defaultdict", "collections.defaultdict", "open", "line.strip().split", "chan_lab_d[].add", "set", "pred_l_str.split", "set", "lab.replace", "collections.defaultdict", "line.strip().split", "pred_perc_str.split", "pred.replace.replace", "lab_with_pred_l.append", "line.strip", "set.add", "line.strip", "float"], "function", ["None"], ["def", "read_file_multi_lab", "(", "lab_fp", ",", "score_fp", ",", "pred_thresh", ")", ":", "\n", "# Read in labels", "\n", "    ", "chan_lab_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "lab_fp", ")", ":", "\n", "        ", "chan_id", ",", "lab", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_id", "not", "in", "chan_lab_d", ":", "\n", "            ", "chan_lab_d", "[", "chan_id", "]", "=", "set", "(", "[", "]", ")", "\n", "", "chan_lab_d", "[", "chan_id", "]", ".", "add", "(", "lab", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ")", "\n", "# Read in predictions", "\n", "", "lab_with_pred_l", "=", "[", "]", "\n", "lab_pred_d", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "tot_pred_d", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "tot_insts", "=", "0", "\n", "for", "line", "in", "open", "(", "score_fp", ")", ":", "\n", "        ", "chan_id", ",", "pred_l_str", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "2", "]", "\n", "if", "chan_id", "not", "in", "chan_lab_d", ":", "continue", "\n", "tot_insts", "+=", "1", "\n", "lab_s", "=", "chan_lab_d", "[", "chan_id", "]", "\n", "pred_s", "=", "set", "(", "[", "]", ")", "\n", "for", "pred_perc_str", "in", "pred_l_str", ".", "split", "(", "\",\"", ")", ":", "\n", "            ", "pred", ",", "pred_perc", "=", "pred_perc_str", ".", "split", "(", "\"|\"", ")", "\n", "pred", "=", "pred", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "if", "pred_thresh", "is", "None", "or", "float", "(", "pred_perc", ")", ">=", "pred_thresh", ":", "\n", "                ", "pred_s", ".", "add", "(", "pred", ")", "\n", "", "", "for", "lab", "in", "lab_s", ":", "\n", "            ", "lab_with_pred_l", ".", "append", "(", "lab", ")", "\n", "pred", "=", "\"NONE\"", "if", "lab", "not", "in", "pred_s", "else", "lab", "\n", "lab_pred_d", "[", "lab", "]", "[", "pred", "]", "+=", "1", "\n", "", "for", "pred", "in", "pred_s", ":", "\n", "            ", "tot_pred_d", "[", "pred", "]", "+=", "1", "\n", "", "", "return", "lab_with_pred_l", ",", "lab_pred_d", ",", "tot_pred_d", ",", "tot_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats_multi_lab.get_stats": [[39, 61], ["gen_pred_stats_multi_lab.read_file_multi_lab", "print", "max", "print", "print", "print", "sorted", "float", "collections.Counter().items", "lab_pred_d.items", "sum", "print", "pred_d.values", "collections.Counter", "sum", "x[].values", "str"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats.read_file_multi_lab"], ["", "def", "get_stats", "(", "lab_fp", ",", "score_fp", ",", "pred_thresh", "=", "None", ")", ":", "\n", "# Read in data", "\n", "    ", "pred_thresh", "=", "None", "if", "pred_thresh", "is", "None", "else", "float", "(", "pred_thresh", ")", "\n", "lab_with_pred_l", ",", "lab_pred_d", ",", "tot_pred_d", ",", "tot_insts", "=", "read_file_multi_lab", "(", "lab_fp", ",", "score_fp", ",", "pred_thresh", ")", "\n", "# Ouput stats", "\n", "print", "(", "\"Number Instances:\"", ",", "tot_insts", ")", "\n", "max_lab", ",", "max_c", "=", "max", "(", "collections", ".", "Counter", "(", "lab_with_pred_l", ")", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "print", "(", "\"Max Label\"", ",", "max_c", ",", "max_lab", ")", "\n", "print", "(", "\"Baseline:\"", ",", "\"%.3f\"", "%", "(", "max_c", "/", "tot_insts", ")", ")", "\n", "print", "(", "\"\\nPrecision Recall:\"", ")", "\n", "for", "lab", ",", "pred_d", "in", "sorted", "(", "lab_pred_d", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "sum", "(", "x", "[", "1", "]", ".", "values", "(", ")", ")", ",", "\n", "reverse", "=", "True", ")", ":", "\n", "        ", "if", "lab", "==", "\"NONE\"", ":", "continue", "\n", "num_lab_insts", "=", "sum", "(", "pred_d", ".", "values", "(", ")", ")", "\n", "rec", "=", "pred_d", "[", "lab", "]", "/", "num_lab_insts", "\n", "if", "tot_pred_d", "[", "lab", "]", ">", "0", ":", "\n", "            ", "prec", "=", "pred_d", "[", "lab", "]", "/", "tot_pred_d", "[", "lab", "]", "\n", "", "else", ":", "\n", "            ", "prec", "=", "0", "\n", "", "print", "(", "\"\\t\"", ".", "join", "(", "[", "str", "(", "num_lab_insts", ")", ",", "\"%.3f\"", "%", "prec", ",", "\n", "\"%.3f\"", "%", "rec", ",", "lab", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats.read_file": [[6, 38], ["dict", "collections.defaultdict", "collections.defaultdict", "open", "lab.replace.replace", "str.replace", "lab_with_pred_l.append", "l.strip().split", "collections.defaultdict", "line.strip().split", "line.strip().split", "open", "len", "float", "l.strip", "line.strip", "float", "line.strip", "str", "round", "float"], "function", ["None"], ["def", "read_file", "(", "lab_fp", ",", "score_fp", ",", "pred_thresh", ",", "bin_prob", "=", "False", ",", "bin_prob_pos_class", "=", "None", ",", "\n", "bin_prob_neg_class", "=", "None", ",", "regression_round", "=", "False", ")", ":", "\n", "    ", "chan_lab_d", "=", "dict", "(", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "open", "(", "lab_fp", ")", "]", ")", "\n", "lab_with_pred_l", "=", "[", "]", "\n", "lab_pred_d", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "tot_pred_d", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "tot_insts", "=", "0", "\n", "for", "line", "in", "open", "(", "score_fp", ")", ":", "\n", "        ", "if", "bin_prob", ":", "\n", "            ", "chan_id", ",", "pred_perc", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "pred", "=", "bin_prob_pos_class", "if", "float", "(", "pred_perc", ")", ">=", "0.5", "else", "bin_prob_neg_class", "\n", "", "else", ":", "\n", "            ", "tpl", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "tpl", ")", "==", "3", ":", "\n", "                ", "chan_id", ",", "pred", ",", "pred_perc", "=", "tpl", "\n", "", "else", ":", "\n", "                ", "chan_id", ",", "pred", "=", "tpl", "\n", "pred_perc", "=", "None", "\n", "if", "regression_round", ":", "\n", "                    ", "pred", "=", "str", "(", "round", "(", "float", "(", "pred", ")", ")", ")", "\n", "", "", "", "if", "chan_id", "not", "in", "chan_lab_d", ":", "continue", "\n", "lab", "=", "chan_lab_d", "[", "chan_id", "]", "\n", "lab", "=", "lab", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "pred", "=", "pred", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "lab_with_pred_l", ".", "append", "(", "lab", ")", "\n", "if", "pred_thresh", "is", "not", "None", "and", "float", "(", "pred_perc", ")", "<", "pred_thresh", ":", "\n", "            ", "pred", "=", "\"NONE\"", "\n", "", "lab_pred_d", "[", "lab", "]", "[", "pred", "]", "+=", "1", "\n", "tot_pred_d", "[", "pred", "]", "+=", "1", "\n", "tot_insts", "+=", "1", "\n", "", "return", "lab_with_pred_l", ",", "lab_pred_d", ",", "tot_pred_d", ",", "tot_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats.read_file_multi_lab": [[40, 72], ["open", "collections.defaultdict", "collections.defaultdict", "open", "line.strip().split", "chan_lab_d[].add", "set", "pred_l_str.split", "set", "lab.replace", "collections.defaultdict", "line.strip().split", "pred_perc_str.split", "pred.replace.replace", "lab_with_pred_l.append", "line.strip", "set.add", "line.strip", "float"], "function", ["None"], ["", "def", "read_file_multi_lab", "(", "lab_fp", ",", "score_fp", ",", "pred_thresh", ")", ":", "\n", "# Read in labels", "\n", "    ", "chan_lab_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "lab_fp", ")", ":", "\n", "        ", "chan_id", ",", "lab", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_id", "not", "in", "chan_lab_d", ":", "\n", "            ", "chan_lab_d", "[", "chan_id", "]", "=", "set", "(", "[", "]", ")", "\n", "", "chan_lab_d", "[", "chan_id", "]", ".", "add", "(", "lab", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ")", "\n", "# Read in predictions", "\n", "", "lab_with_pred_l", "=", "[", "]", "\n", "lab_pred_d", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "tot_pred_d", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "tot_insts", "=", "0", "\n", "for", "line", "in", "open", "(", "score_fp", ")", ":", "\n", "        ", "chan_id", ",", "pred_l_str", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "2", "]", "\n", "if", "chan_id", "not", "in", "chan_lab_d", ":", "continue", "\n", "tot_insts", "+=", "1", "\n", "lab_s", "=", "chan_lab_d", "[", "chan_id", "]", "\n", "pred_s", "=", "set", "(", "[", "]", ")", "\n", "for", "pred_perc_str", "in", "pred_l_str", ".", "split", "(", "\",\"", ")", ":", "\n", "            ", "pred", ",", "pred_perc", "=", "pred_perc_str", ".", "split", "(", "\"|\"", ")", "\n", "pred", "=", "pred", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "\n", "if", "pred_thresh", "is", "None", "or", "float", "(", "pred_perc", ")", ">=", "pred_thresh", ":", "\n", "                ", "pred_s", ".", "add", "(", "pred", ")", "\n", "", "", "for", "lab", "in", "lab_s", ":", "\n", "            ", "lab_with_pred_l", ".", "append", "(", "lab", ")", "\n", "pred", "=", "\"NONE\"", "if", "lab", "not", "in", "pred_s", "else", "lab", "\n", "lab_pred_d", "[", "lab", "]", "[", "pred", "]", "+=", "1", "\n", "", "for", "pred", "in", "pred_s", ":", "\n", "            ", "tot_pred_d", "[", "pred", "]", "+=", "1", "\n", "", "", "return", "lab_with_pred_l", ",", "lab_pred_d", ",", "tot_pred_d", ",", "tot_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats.get_stats": [[74, 115], ["print", "max", "print", "print", "print", "sorted", "float", "gen_pred_stats.read_file", "gen_pred_stats.read_file_multi_lab", "collections.Counter().items", "sum", "print", "lab_pred_d.items", "sum", "print", "print", "print", "pred_d.values", "print", "collections.Counter", "sum", "c_l.append", "lab_pred_d.items", "x[].values", "str", "str"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats.read_file", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_pred_stats.read_file_multi_lab"], ["", "def", "get_stats", "(", "lab_fp", ",", "score_fp", ",", "lab_conf_matrix_order_l", "=", "None", ",", "pred_thresh", "=", "None", ",", "\n", "multi_lab", "=", "False", ",", "bin_prob", "=", "False", ",", "bin_prob_pos_class", "=", "None", ",", "\n", "bin_prob_neg_class", "=", "None", ",", "regression_round", "=", "False", ")", ":", "\n", "# Read in data", "\n", "    ", "pred_thresh", "=", "None", "if", "pred_thresh", "is", "None", "else", "float", "(", "pred_thresh", ")", "\n", "if", "not", "multi_lab", ":", "\n", "        ", "lab_with_pred_l", ",", "lab_pred_d", ",", "tot_pred_d", ",", "tot_insts", "=", "read_file", "(", "lab_fp", ",", "score_fp", ",", "pred_thresh", ",", "bin_prob", "=", "bin_prob", ",", "\n", "bin_prob_pos_class", "=", "bin_prob_pos_class", ",", "\n", "bin_prob_neg_class", "=", "bin_prob_neg_class", ",", "\n", "regression_round", "=", "regression_round", ")", "\n", "", "else", ":", "\n", "        ", "lab_with_pred_l", ",", "lab_pred_d", ",", "tot_pred_d", ",", "tot_insts", "=", "read_file_multi_lab", "(", "lab_fp", ",", "score_fp", ",", "pred_thresh", ")", "\n", "# Ouput stats", "\n", "", "print", "(", "\"Number Instances:\"", ",", "tot_insts", ")", "\n", "max_lab", ",", "max_c", "=", "max", "(", "collections", ".", "Counter", "(", "lab_with_pred_l", ")", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "print", "(", "\"Max Label\"", ",", "max_c", ",", "max_lab", ")", "\n", "print", "(", "\"Baseline:\"", ",", "\"%.3f\"", "%", "(", "max_c", "/", "tot_insts", ")", ")", "\n", "if", "not", "multi_lab", ":", "\n", "        ", "cor_c", "=", "sum", "(", "[", "pred_d", "[", "lab", "]", "for", "lab", ",", "pred_d", "in", "lab_pred_d", ".", "items", "(", ")", "]", ")", "\n", "print", "(", "\"Accuracy:\"", ",", "\"%.3f\"", "%", "(", "cor_c", "/", "tot_insts", ")", ")", "\n", "", "print", "(", "\"\\nPrecision Recall:\"", ")", "\n", "for", "lab", ",", "pred_d", "in", "sorted", "(", "lab_pred_d", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "sum", "(", "x", "[", "1", "]", ".", "values", "(", ")", ")", ",", "\n", "reverse", "=", "True", ")", ":", "\n", "        ", "if", "multi_lab", "and", "lab", "==", "\"NONE\"", ":", "continue", "\n", "num_lab_insts", "=", "sum", "(", "pred_d", ".", "values", "(", ")", ")", "\n", "rec", "=", "pred_d", "[", "lab", "]", "/", "num_lab_insts", "\n", "if", "tot_pred_d", "[", "lab", "]", ">", "0", ":", "\n", "            ", "prec", "=", "pred_d", "[", "lab", "]", "/", "tot_pred_d", "[", "lab", "]", "\n", "", "else", ":", "\n", "            ", "prec", "=", "0", "\n", "", "print", "(", "\"\\t\"", ".", "join", "(", "[", "str", "(", "num_lab_insts", ")", ",", "\"%.3f\"", "%", "prec", ",", "\n", "\"%.3f\"", "%", "rec", ",", "lab", "]", ")", ")", "\n", "", "if", "lab_conf_matrix_order_l", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"\\nConfusion Matrix:\"", ")", "\n", "print", "(", "\"Label order: \"", ",", "\", \"", ".", "join", "(", "lab_conf_matrix_order_l", ")", ")", "\n", "for", "lab", "in", "lab_conf_matrix_order_l", ":", "\n", "            ", "c_l", "=", "[", "]", "\n", "for", "pred", "in", "lab_conf_matrix_order_l", ":", "\n", "                ", "c_l", ".", "append", "(", "str", "(", "lab_pred_d", "[", "lab", "]", "[", "pred", "]", ")", ")", "\n", "", "print", "(", "\"\\t\"", ".", "join", "(", "c_l", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.convert_multi_lab_to_tsv.main": [[4, 56], ["open", "open", "open.close", "dict", "open", "set", "line.strip().split", "preds_str.split", "line.strip().split", "float", "int", "tag_pred.split", "open.write", "l.strip().split", "round", "line.strip", "print", "open.write", "open", "line.strip", "abs", "set", "l.strip", "abs", "print", "sys.exit", "abs"], "function", ["None"], ["def", "main", "(", "multi_lab_fp", ",", "out_fp", ",", "keep_tags_l", ",", "add_pred_fp", "=", "None", ",", "regression_lcr_fp", "=", "None", ")", ":", "\n", "# Add another prediction column", "\n", "    ", "add_pred_d", "=", "None", "if", "add_pred_fp", "is", "None", "else", "dict", "(", "(", "l", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "open", "(", "add_pred_fp", ")", ")", ")", "\n", "# Improved L/C/R preds", "\n", "chan_improved_lcr_pred", "=", "{", "}", "\n", "if", "regression_lcr_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "regression_lcr_fp", ")", ":", "\n", "            ", "chan_id", ",", "lcr_reg_pred", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "lcr_reg_pred", "=", "float", "(", "lcr_reg_pred", ")", "\n", "lcr_reg_pred_int", "=", "int", "(", "round", "(", "lcr_reg_pred", ")", ")", "\n", "if", "lcr_reg_pred_int", "==", "-", "1", ":", "\n", "                ", "lcr_str", "=", "\"L\"", "\n", "lcr_prob", "=", "1", "-", "abs", "(", "-", "1", "-", "lcr_reg_pred", ")", "\n", "", "elif", "lcr_reg_pred_int", "==", "0", ":", "\n", "                ", "lcr_str", "=", "\"C\"", "\n", "lcr_prob", "=", "1", "-", "abs", "(", "0", "-", "lcr_reg_pred", ")", "\n", "", "elif", "lcr_reg_pred_int", "==", "1", ":", "\n", "                ", "lcr_str", "=", "\"R\"", "\n", "lcr_prob", "=", "1", "-", "abs", "(", "1", "-", "lcr_reg_pred", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"ERROR - BAD LCR PRED:\"", ",", "lcr_reg_pred_int", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "chan_improved_lcr_pred", "[", "chan_id", "]", "=", "(", "lcr_str", ",", "\"%.3f\"", "%", "lcr_prob", ")", "\n", "\n", "# Keep certain tags and output", "\n", "", "", "keep_tags_s", "=", "set", "(", "keep_tags_l", ")", "if", "keep_tags_l", "is", "not", "None", "else", "None", "\n", "of", "=", "open", "(", "out_fp", ",", "'w'", ")", "\n", "for", "line", "in", "open", "(", "multi_lab_fp", ")", ":", "\n", "        ", "chan_id", ",", "preds_str", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "# Get extra pred if necessary", "\n", "extra_pred", "=", "None", "\n", "if", "add_pred_d", "is", "not", "None", ":", "\n", "            ", "if", "chan_id", "not", "in", "add_pred_d", ":", "\n", "                ", "print", "(", "\"CHAN ID NOT FOUND:\"", ",", "chan_id", ")", "\n", "continue", "\n", "", "extra_pred", "=", "add_pred_d", "[", "chan_id", "]", "\n", "# Convert soft tags", "\n", "", "for", "tag_pred", "in", "preds_str", ".", "split", "(", "','", ")", ":", "\n", "            ", "tag", ",", "perc", "=", "tag_pred", ".", "split", "(", "'|'", ")", "\n", "# Only include L/C/R if improved ones aren't available", "\n", "if", "chan_improved_lcr_pred", "and", "tag", "in", "set", "(", "[", "\"L\"", ",", "\"C\"", ",", "\"R\"", "]", ")", ":", "\n", "                ", "continue", "\n", "# Filter tags if specified", "\n", "", "if", "keep_tags_s", "is", "None", "or", "tag", "in", "keep_tags_s", ":", "\n", "                ", "cols", "=", "[", "chan_id", ",", "extra_pred", ",", "tag", ",", "perc", "]", "if", "extra_pred", "is", "not", "None", "else", "[", "chan_id", ",", "tag", ",", "perc", "]", "\n", "of", ".", "write", "(", "'\\t'", ".", "join", "(", "cols", ")", "+", "'\\n'", ")", "\n", "# Write out new L/C/R tags", "\n", "", "", "if", "chan_improved_lcr_pred", ":", "\n", "            ", "tag", ",", "prob", "=", "chan_improved_lcr_pred", "[", "chan_id", "]", "\n", "cols", "=", "[", "chan_id", ",", "extra_pred", ",", "tag", ",", "prob", "]", "if", "extra_pred", "is", "not", "None", "else", "[", "chan_id", ",", "tag", ",", "prob", "]", "\n", "of", ".", "write", "(", "'\\t'", ".", "join", "(", "cols", ")", "+", "'\\n'", ")", "\n", "", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.compare_yt_group_trends.compare_groups": [[5, 111], ["open", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "open", "sorted", "open", "open", "open", "line.strip().split", "int", "set", "line.strip().split", "chan_month_views_d[].items", "print", "print", "collections.defaultdict.keys", "sum", "print", "print", "line.strip().split", "float", "line.strip().split", "print", "line.strip().split", "int", "float", "collections.defaultdict", "collections.defaultdict", "month_chan_traffic_adjust_d[].values", "print", "print", "len", "sorted", "print", "float", "float", "line.strip", "l.strip", "line.strip", "float", "float", "sorted", "cols.append", "missing_views_d.items", "line.strip", "line.strip", "line.strip", "open", "g1_chan_c.items", "str", "cols.append", "cols.append", "float", "float", "int", "str", "int"], "function", ["None"], ["def", "compare_groups", "(", "chan_info_fp", ",", "soft_tags_fp", ",", "recfluence_fp", "=", "None", ",", "soft_tag_thresh", "=", "0.5", ",", "soft_tag_order", "=", "None", ",", "\n", "soft_pred_pr_fp", "=", "None", ",", "soft_tag_pol_class_rec_fp", "=", "None", ",", "monthly_views_fp", "=", "None", ",", "start_views_dt", "=", "None", ",", "end_views_dt", "=", "None", ",", "\n", "show_missing_views", "=", "False", ",", "final_pol_class_recall", "=", "0.85", ",", "final_pol_class_precision", "=", "0.85", ",", "\n", "spreadsheet_form", "=", "False", ",", "pol_class_thresh", "=", "None", ",", "use_traffic_perc", "=", "False", ",", "use_channel_counts", "=", "False", ")", ":", "\n", "# Correct for political channel classification recall and soft tag prediction P/R ", "\n", "    ", "soft_tag_multiple_d", "=", "{", "}", "\n", "if", "soft_pred_pr_fp", "is", "not", "None", "and", "soft_tag_pol_class_rec_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "soft_tag_pol_class_rec_fp", ")", ":", "\n", "            ", "tot_chans", ",", "cand_found_c", ",", "cand_found_perc", ",", "final_found_c", ",", "final_found_perc", ",", "soft_tag", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "cand_found_perc", "=", "float", "(", "cand_found_perc", ")", "\n", "if", "cand_found_perc", ">", "0", ":", "\n", "                ", "soft_tag_multiple_d", "[", "soft_tag", "]", "=", "final_pol_class_precision", "/", "(", "cand_found_perc", "*", "final_pol_class_recall", ")", "\n", "", "", "for", "line", "in", "open", "(", "soft_pred_pr_fp", ")", ":", "\n", "            ", "tot_chans", ",", "precision", ",", "recall", ",", "soft_tag", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "prev_multiple", "=", "soft_tag_multiple_d", "[", "soft_tag", "]", "if", "soft_tag", "in", "soft_tag_multiple_d", "else", "1.0", "\n", "if", "float", "(", "recall", ")", ">", "0", ":", "\n", "                ", "soft_tag_multiple_d", "[", "soft_tag", "]", "=", "prev_multiple", "*", "(", "float", "(", "precision", ")", "/", "float", "(", "recall", ")", ")", "\n", "", "", "", "elif", "soft_pred_pr_fp", "!=", "soft_tag_pol_class_rec_fp", ":", "\n", "        ", "print", "(", "\"NEED TO HAVE BOTH SOFT TAG METRICS.\"", ")", "\n", "# Read in views data", "\n", "", "chan_month_views_d", "=", "{", "}", "\n", "if", "monthly_views_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "monthly_views_fp", ")", ":", "\n", "            ", "chan_id", ",", "view_dt", ",", "views", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "views", "=", "int", "(", "float", "(", "views", ")", ")", "\n", "if", "views", "<", "0", "or", "(", "start_views_dt", "is", "not", "None", "and", "view_dt", "<", "start_views_dt", ")", "or", "(", "end_views_dt", "is", "not", "None", "and", "view_dt", ">", "end_views_dt", ")", ":", "continue", "\n", "if", "chan_id", "not", "in", "chan_month_views_d", ":", "\n", "                ", "chan_month_views_d", "[", "chan_id", "]", "=", "{", "}", "\n", "", "month", "=", "view_dt", "[", "0", ":", "7", "]", "\n", "chan_month_views_d", "[", "chan_id", "]", "[", "month", "]", "=", "views", "\n", "# For all tasks, limit to these channels (accounts for terminated channels)", "\n", "", "", "chan_tot_subs_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "chan_info_fp", ")", ":", "\n", "        ", "chan_id", ",", "chan_int", ",", "chan_name", ",", "scrap_subs", ",", "tot_subs", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_tot_subs_d", "[", "chan_id", "]", "=", "int", "(", "float", "(", "tot_subs", ")", ")", "\n", "# Get recfluence channels in case split is on these", "\n", "", "recfluence_chan_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "recfluence_fp", ")", "]", ")", "if", "recfluence_fp", "is", "not", "None", "else", "None", "\n", "# Get group stats", "\n", "month_group_chan_c", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "month_group_traffic_c", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "missing_views_d", "=", "{", "}", "\n", "month_chan_traffic_adjust_d", "=", "collections", ".", "defaultdict", "(", "dict", ")", "\n", "for", "line", "in", "open", "(", "soft_tags_fp", ")", ":", "\n", "        ", "chan_id", ",", "pol_class_prob", ",", "soft_tag", ",", "soft_tag_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "pol_class_thresh", "is", "not", "None", "and", "float", "(", "pol_class_prob", ")", "<", "pol_class_thresh", ":", "\n", "            ", "continue", "\n", "", "if", "float", "(", "soft_tag_prob", ")", "<", "soft_tag_thresh", "or", "chan_id", "not", "in", "chan_tot_subs_d", ":", "\n", "            ", "continue", "\n", "# TODO: FIX IN DATASET - Discussed with Mark and decided Joe Rogan is not Conspiracy", "\n", "", "if", "soft_tag", "==", "'Conspiracy'", "and", "(", "chan_id", "==", "'UCzQUP1qoWDoEbmsQxvdjxgQ'", "or", "chan_id", "==", "'UCnxGkOGNMqQEUMvroOWps6Q'", ")", ":", "\n", "            ", "continue", "\n", "# Get stats for each month", "\n", "", "if", "chan_id", "not", "in", "chan_month_views_d", ":", "\n", "            ", "continue", "\n", "", "for", "month", ",", "traffic", "in", "chan_month_views_d", "[", "chan_id", "]", ".", "items", "(", ")", ":", "\n", "# Take care of multiple if possible", "\n", "            ", "chan_c", "=", "1", "\n", "if", "soft_tag", "in", "soft_tag_multiple_d", "and", "chan_id", "not", "in", "recfluence_chan_s", ":", "\n", "                ", "chan_c", "=", "soft_tag_multiple_d", "[", "soft_tag", "]", "\n", "traffic", "=", "traffic", "*", "soft_tag_multiple_d", "[", "soft_tag", "]", "\n", "# Keep max adjusted traffic estimated for a channel", "\n", "", "if", "chan_id", "not", "in", "month_chan_traffic_adjust_d", "[", "month", "]", "or", "traffic", "<", "month_chan_traffic_adjust_d", "[", "month", "]", "[", "chan_id", "]", ":", "\n", "                ", "month_chan_traffic_adjust_d", "[", "month", "]", "[", "chan_id", "]", "=", "traffic", "\n", "", "month_group_chan_c", "[", "month", "]", "[", "soft_tag", "]", "+=", "chan_c", "\n", "month_group_traffic_c", "[", "month", "]", "[", "soft_tag", "]", "+=", "traffic", "\n", "# Output group stats", "\n", "", "", "if", "soft_tag_order", "is", "not", "None", ":", "\n", "        ", "soft_tag_l", "=", "soft_tag_order", "\n", "", "else", ":", "\n", "        ", "soft_tag_l", "=", "[", "st", "for", "st", ",", "chan_c", "in", "sorted", "(", "g1_chan_c", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "]", "\n", "# Header", "\n", "", "if", "not", "spreadsheet_form", ":", "\n", "        ", "print", "(", "\"\\t\"", ".", "join", "(", "[", "\"month\"", "]", "+", "soft_tag_l", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\";\"", ".", "join", "(", "[", "\"month\"", "]", "+", "soft_tag_l", ")", ")", "\n", "# Data", "\n", "", "for", "month", "in", "sorted", "(", "month_group_chan_c", ".", "keys", "(", ")", ")", ":", "\n", "        ", "use_traffic_perc", "\n", "cols", "=", "[", "month", "]", "\n", "overall_traffic", "=", "sum", "(", "month_chan_traffic_adjust_d", "[", "month", "]", ".", "values", "(", ")", ")", "\n", "for", "soft_tag", "in", "soft_tag_l", ":", "\n", "            ", "if", "use_channel_counts", ":", "\n", "# Channels", "\n", "                ", "chan_c", "=", "month_group_chan_c", "[", "month", "]", "[", "soft_tag", "]", "\n", "cols", ".", "append", "(", "str", "(", "int", "(", "chan_c", ")", ")", ")", "\n", "", "else", ":", "\n", "# Views", "\n", "                ", "tot_traffic", "=", "month_group_traffic_c", "[", "month", "]", "[", "soft_tag", "]", "\n", "if", "use_traffic_perc", ":", "\n", "                    ", "overall_traffic_perc", "=", "\"%.3f\"", "%", "(", "tot_traffic", "/", "overall_traffic", ")", "\n", "cols", ".", "append", "(", "overall_traffic_perc", ")", "\n", "", "else", ":", "\n", "                    ", "cols", ".", "append", "(", "str", "(", "int", "(", "tot_traffic", ")", ")", ")", "\n", "# Output", "\n", "", "", "", "if", "not", "spreadsheet_form", ":", "\n", "            ", "print", "(", "\"\\t\"", ".", "join", "(", "cols", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\";\"", ".", "join", "(", "cols", ")", ")", "\n", "", "", "if", "show_missing_views", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "\"Total missing views:\"", ",", "len", "(", "missing_views_d", ")", ")", "\n", "for", "chan", ",", "subs", "in", "sorted", "(", "missing_views_d", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", ":", "10", "]", ":", "\n", "            ", "print", "(", "chan", ",", "subs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.compare_yt_groups.compare_groups": [[5, 131], ["set", "open", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "open", "sum", "open", "open", "open", "open", "line.strip().split", "int", "set", "line.strip().split", "chan_traffic_adjust_d.values", "print", "print", "line.strip().split", "float", "line.strip().split", "print", "line.strip().split", "int", "line.strip().split", "float", "int", "int", "int", "int", "int", "cols.insert", "print", "print", "len", "sorted", "print", "float", "float", "set.add", "line.strip", "l.strip", "line.strip", "float", "float", "sorted", "missing_views_d.items", "line.strip", "line.strip", "line.strip", "line.strip", "float", "open", "collections.defaultdict.items", "map", "map", "float", "float"], "function", ["None"], ["def", "compare_groups", "(", "chan_info_fp", ",", "soft_tags_fp", ",", "recfluence_fp", "=", "None", ",", "soft_tag_thresh", "=", "0.5", ",", "soft_tag_order", "=", "None", ",", "\n", "soft_pred_pr_fp", "=", "None", ",", "soft_tag_pol_class_rec_fp", "=", "None", ",", "monthly_views_fp", "=", "None", ",", "start_views_dt", "=", "None", ",", "end_views_dt", "=", "None", ",", "\n", "show_missing_views", "=", "False", ",", "head_subs_thresh", "=", "None", ",", "mainstream_split", "=", "False", ",", "final_pol_class_recall", "=", "0.85", ",", "final_pol_class_precision", "=", "0.85", ",", "\n", "spreadsheet_form", "=", "False", ",", "pol_class_thresh", "=", "None", ")", ":", "\n", "# Correct for political channel classification recall and soft tag prediction P/R ", "\n", "    ", "soft_tag_multiple_d", "=", "{", "}", "\n", "if", "soft_pred_pr_fp", "is", "not", "None", "and", "soft_tag_pol_class_rec_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "soft_tag_pol_class_rec_fp", ")", ":", "\n", "            ", "tot_chans", ",", "cand_found_c", ",", "cand_found_perc", ",", "final_found_c", ",", "final_found_perc", ",", "soft_tag", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "cand_found_perc", "=", "float", "(", "cand_found_perc", ")", "\n", "if", "cand_found_perc", ">", "0", ":", "\n", "                ", "soft_tag_multiple_d", "[", "soft_tag", "]", "=", "final_pol_class_precision", "/", "(", "cand_found_perc", "*", "final_pol_class_recall", ")", "\n", "", "", "for", "line", "in", "open", "(", "soft_pred_pr_fp", ")", ":", "\n", "            ", "tot_chans", ",", "precision", ",", "recall", ",", "soft_tag", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "prev_multiple", "=", "soft_tag_multiple_d", "[", "soft_tag", "]", "if", "soft_tag", "in", "soft_tag_multiple_d", "else", "1.0", "\n", "if", "float", "(", "recall", ")", ">", "0", ":", "\n", "                ", "soft_tag_multiple_d", "[", "soft_tag", "]", "=", "prev_multiple", "*", "(", "float", "(", "precision", ")", "/", "float", "(", "recall", ")", ")", "\n", "", "", "", "elif", "soft_pred_pr_fp", "!=", "soft_tag_pol_class_rec_fp", ":", "\n", "        ", "print", "(", "\"NEED TO HAVE BOTH SOFT TAG METRICS.\"", ")", "\n", "# Read in views data", "\n", "", "chan_views_d", "=", "{", "}", "\n", "if", "monthly_views_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "monthly_views_fp", ")", ":", "\n", "            ", "chan_id", ",", "view_dt", ",", "views", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "views", "=", "int", "(", "float", "(", "views", ")", ")", "\n", "if", "views", "<", "0", "or", "(", "start_views_dt", "is", "not", "None", "and", "view_dt", "<", "start_views_dt", ")", "or", "(", "end_views_dt", "is", "not", "None", "and", "view_dt", ">", "end_views_dt", ")", ":", "continue", "\n", "if", "chan_id", "not", "in", "chan_views_d", ":", "\n", "                ", "chan_views_d", "[", "chan_id", "]", "=", "0", "\n", "", "chan_views_d", "[", "chan_id", "]", "+=", "views", "\n", "# Get mainstream chans", "\n", "", "", "mainstream_chan_s", "=", "set", "(", "[", "]", ")", "\n", "if", "mainstream_split", ":", "\n", "        ", "for", "line", "in", "open", "(", "soft_tags_fp", ")", ":", "\n", "            ", "chan_id", ",", "pol_class_prob", ",", "soft_tag", ",", "soft_tag_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "float", "(", "soft_tag_prob", ")", ">=", "0.5", "and", "soft_tag", "==", "'MainstreamMedia'", ":", "\n", "                ", "mainstream_chan_s", ".", "add", "(", "chan_id", ")", "\n", "# For all tasks, limit to these channels (accounts for terminated channels)", "\n", "", "", "", "chan_tot_subs_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "chan_info_fp", ")", ":", "\n", "        ", "chan_id", ",", "chan_int", ",", "chan_name", ",", "scrap_subs", ",", "tot_subs", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_tot_subs_d", "[", "chan_id", "]", "=", "int", "(", "float", "(", "tot_subs", ")", ")", "\n", "# Get recfluence channels in case split is on these", "\n", "", "recfluence_chan_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "recfluence_fp", ")", "]", ")", "if", "recfluence_fp", "is", "not", "None", "else", "None", "\n", "# Get group stats", "\n", "g1_chan_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "g1_traffic_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "g2_chan_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "g2_traffic_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "missing_views_d", "=", "{", "}", "\n", "chan_traffic_adjust_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "soft_tags_fp", ")", ":", "\n", "        ", "chan_id", ",", "pol_class_prob", ",", "soft_tag", ",", "soft_tag_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "pol_class_thresh", "is", "not", "None", "and", "float", "(", "pol_class_prob", ")", "<", "pol_class_thresh", ":", "\n", "            ", "continue", "\n", "", "if", "float", "(", "soft_tag_prob", ")", "<", "soft_tag_thresh", "or", "chan_id", "not", "in", "chan_tot_subs_d", ":", "\n", "            ", "continue", "\n", "# TODO: FIX IN DATASET - Discussed with Mark and decided Joe Rogan is not Conspiracy", "\n", "", "if", "soft_tag", "==", "'Conspiracy'", "and", "(", "chan_id", "==", "'UCzQUP1qoWDoEbmsQxvdjxgQ'", "or", "chan_id", "==", "'UCnxGkOGNMqQEUMvroOWps6Q'", ")", ":", "\n", "            ", "continue", "\n", "# Use views if available", "\n", "", "chan_subs", "=", "chan_tot_subs_d", "[", "chan_id", "]", "\n", "if", "chan_views_d", ":", "\n", "            ", "if", "chan_id", "not", "in", "chan_views_d", ":", "\n", "                ", "missing_views_d", "[", "chan_id", "]", "=", "chan_subs", "\n", "continue", "\n", "", "traffic", "=", "chan_views_d", "[", "chan_id", "]", "\n", "", "else", ":", "\n", "            ", "traffic", "=", "chan_subs", "\n", "# Take care of multiple if possible", "\n", "", "chan_c", "=", "1", "\n", "if", "soft_tag", "in", "soft_tag_multiple_d", "and", "chan_id", "not", "in", "recfluence_chan_s", ":", "\n", "            ", "chan_c", "=", "soft_tag_multiple_d", "[", "soft_tag", "]", "\n", "traffic", "=", "traffic", "*", "soft_tag_multiple_d", "[", "soft_tag", "]", "\n", "# Keep max adjusted traffic estimated for a channel", "\n", "", "if", "chan_id", "not", "in", "chan_traffic_adjust_d", "or", "traffic", "<", "chan_traffic_adjust_d", "[", "chan_id", "]", ":", "\n", "            ", "chan_traffic_adjust_d", "[", "chan_id", "]", "=", "traffic", "\n", "# Split chans", "\n", "", "if", "head_subs_thresh", "is", "not", "None", ":", "\n", "# Split groups based on number of subs", "\n", "            ", "if", "chan_subs", ">=", "head_subs_thresh", ":", "\n", "                ", "g1_chan_c", "[", "soft_tag", "]", "+=", "1", "\n", "g1_traffic_c", "[", "soft_tag", "]", "+=", "traffic", "\n", "", "else", ":", "\n", "                ", "g2_chan_c", "[", "soft_tag", "]", "+=", "chan_c", "\n", "g2_traffic_c", "[", "soft_tag", "]", "+=", "traffic", "\n", "", "", "elif", "mainstream_split", ":", "\n", "# Check mainstream vs. YouTube", "\n", "            ", "if", "chan_id", "in", "mainstream_chan_s", ":", "\n", "                ", "g1_chan_c", "[", "soft_tag", "]", "+=", "1", "\n", "g1_traffic_c", "[", "soft_tag", "]", "+=", "traffic", "\n", "", "else", ":", "\n", "                ", "g2_chan_c", "[", "soft_tag", "]", "+=", "chan_c", "\n", "g2_traffic_c", "[", "soft_tag", "]", "+=", "traffic", "\n", "", "", "else", ":", "\n", "# Split groups on whether the channel was in Recfluence or not", "\n", "            ", "if", "chan_id", "in", "recfluence_chan_s", ":", "\n", "                ", "g1_chan_c", "[", "soft_tag", "]", "+=", "1", "\n", "g1_traffic_c", "[", "soft_tag", "]", "+=", "traffic", "\n", "", "else", ":", "\n", "                ", "g2_chan_c", "[", "soft_tag", "]", "+=", "chan_c", "\n", "g2_traffic_c", "[", "soft_tag", "]", "+=", "traffic", "\n", "# Output group stats", "\n", "", "", "", "if", "soft_tag_order", "is", "not", "None", ":", "\n", "        ", "soft_tag_l", "=", "soft_tag_order", "\n", "", "else", ":", "\n", "        ", "soft_tag_l", "=", "[", "st", "for", "st", ",", "chan_c", "in", "sorted", "(", "g1_chan_c", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "]", "\n", "", "overall_traffic", "=", "sum", "(", "chan_traffic_adjust_d", ".", "values", "(", ")", ")", "\n", "for", "soft_tag", "in", "soft_tag_l", ":", "\n", "        ", "tot_traffic", "=", "g1_traffic_c", "[", "soft_tag", "]", "+", "g2_traffic_c", "[", "soft_tag", "]", "\n", "overall_traffic_perc", "=", "\"%.3f\"", "%", "(", "tot_traffic", "/", "overall_traffic", ")", "\n", "g1_perc", "=", "\"%.2f\"", "%", "(", "g1_traffic_c", "[", "soft_tag", "]", "/", "(", "g1_traffic_c", "[", "soft_tag", "]", "+", "g2_traffic_c", "[", "soft_tag", "]", ")", ")", "\n", "cols", "=", "[", "overall_traffic_perc", ",", "int", "(", "tot_traffic", ")", ",", "int", "(", "g1_chan_c", "[", "soft_tag", "]", ")", ",", "int", "(", "g1_traffic_c", "[", "soft_tag", "]", ")", ",", "\n", "int", "(", "g2_chan_c", "[", "soft_tag", "]", ")", ",", "int", "(", "g2_traffic_c", "[", "soft_tag", "]", ")", ",", "g1_perc", "]", "\n", "# Add multiple if it exists", "\n", "if", "soft_tag_multiple_d", ":", "\n", "            ", "cols", ".", "insert", "(", "0", ",", "'%.2f'", "%", "soft_tag_multiple_d", "[", "soft_tag", "]", ")", "\n", "", "if", "not", "spreadsheet_form", ":", "\n", "            ", "print", "(", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "cols", "+", "[", "soft_tag", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\";\"", ".", "join", "(", "map", "(", "str", ",", "[", "soft_tag", "]", "+", "cols", ")", ")", ")", "\n", "", "", "if", "show_missing_views", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "\"Total missing views:\"", ",", "len", "(", "missing_views_d", ")", ")", "\n", "for", "chan", ",", "subs", "in", "sorted", "(", "missing_views_d", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", ":", "10", "]", ":", "\n", "            ", "print", "(", "chan", ",", "subs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.filt_dinkov_preds.filt_preds": [[3, 26], ["set", "open", "print", "print", "print", "print", "print", "open", "open", "open.close", "line.strip().split", "len", "sum", "sum", "sum", "sum", "int", "int", "chan_subs_d.values", "chan_views_d.values", "open.write", "l.strip().split", "open", "line.strip", "float", "float", "line.split", "chan_subs_d.values", "chan_subs_d.values", "l.strip"], "function", ["None"], ["def", "filt_preds", "(", "chan_stats_fp", ",", "preds_fp", ",", "filt_chans_fp", ",", "out_fp", ")", ":", "\n", "# Read in filt chans", "\n", "    ", "filt_chan_s", "=", "set", "(", "[", "l", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", "]", "for", "l", "in", "open", "(", "filt_chans_fp", ")", "]", ")", "\n", "# Read in overall stats", "\n", "chan_subs_d", "=", "{", "}", "\n", "chan_views_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "chan_stats_fp", ")", ":", "\n", "        ", "chan_id", ",", "subs", ",", "views", ",", "num_vids", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_id", "in", "filt_chan_s", ":", "\n", "            ", "chan_subs_d", "[", "chan_id", "]", "=", "int", "(", "float", "(", "subs", ")", ")", "\n", "chan_views_d", "[", "chan_id", "]", "=", "int", "(", "float", "(", "views", ")", ")", "\n", "# Get stats", "\n", "", "", "print", "(", "\"Total Channels:\"", ",", "len", "(", "chan_subs_d", ")", ")", "\n", "print", "(", "\"Total Channels w/ 10K+ Subs:\"", ",", "sum", "(", "[", "1", "for", "subs", "in", "chan_subs_d", ".", "values", "(", ")", "if", "subs", ">=", "10000", "]", ")", ")", "\n", "print", "(", "\"Total Channels w/ 1K+ Subs:\"", ",", "sum", "(", "[", "1", "for", "subs", "in", "chan_subs_d", ".", "values", "(", ")", "if", "subs", ">=", "1000", "]", ")", ")", "\n", "print", "(", "\"Subs sum:\"", ",", "sum", "(", "chan_subs_d", ".", "values", "(", ")", ")", ")", "\n", "print", "(", "\"Views sum:\"", ",", "sum", "(", "chan_views_d", ".", "values", "(", ")", ")", ")", "\n", "# Output filtered preds", "\n", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "line", "in", "open", "(", "preds_fp", ")", ":", "\n", "        ", "if", "line", ".", "split", "(", "\"\\t\"", ")", "[", "0", "]", "in", "filt_chan_s", ":", "\n", "            ", "of", ".", "write", "(", "line", ")", "\n", "", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_agreement_stats.main": [[5, 76], ["collections.defaultdict", "open", "open", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "sorted", "line.strip().split", "line.strip().split", "chan_soft_tag_pred_d[].add", "soft_tag_reviewer_lab_d.items", "collections.defaultdict.items", "print", "collections.defaultdict", "float", "set", "line.strip", "line.strip", "collections.Counter().most_common", "reviewer_lab_d.items", "random.shuffle", "reviewer_lab_d.items", "str", "collections.Counter", "reviewer_lab_d.values"], "function", ["None"], ["def", "main", "(", "lab_fp", ",", "score_fp", ",", "thresh", "=", "0.5", ",", "limit_reviewer_comparison", "=", "False", ")", ":", "\n", "# Read in reviewer labels", "\n", "    ", "chan_soft_tag_reviewer_lab_d", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "dict", ")", ")", "\n", "for", "line", "in", "open", "(", "lab_fp", ")", ":", "\n", "        ", "chan_id", ",", "chan_name", ",", "reviewer", ",", "soft_tag", ",", "_", ",", "lab", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_soft_tag_reviewer_lab_d", "[", "chan_id", "]", "[", "soft_tag", "]", "[", "reviewer", "]", "=", "(", "lab", "==", "'True'", ")", "\n", "# Read in predicted labels", "\n", "", "chan_soft_tag_pred_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "score_fp", ")", ":", "\n", "        ", "chan_id", ",", "soft_tag", ",", "pred", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "float", "(", "pred", ")", "<", "thresh", ":", "continue", "\n", "if", "chan_id", "not", "in", "chan_soft_tag_pred_d", ":", "\n", "            ", "chan_soft_tag_pred_d", "[", "chan_id", "]", "=", "set", "(", "[", "]", ")", "\n", "", "chan_soft_tag_pred_d", "[", "chan_id", "]", ".", "add", "(", "soft_tag", ")", "\n", "# Get agreement", "\n", "", "soft_tag_rev_pos_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "soft_tag_rev_agree_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "soft_tag_rev_disagree_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "soft_tag_pred_agree_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "soft_tag_pred_disagree_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "soft_tag_bl_agree_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "soft_tag_bl_disagree_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "soft_tag_max_agree_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "soft_tag_max_disagree_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "for", "chan_id", ",", "soft_tag_reviewer_lab_d", "in", "chan_soft_tag_reviewer_lab_d", ".", "items", "(", ")", ":", "\n", "# Only keep channels we have predictions for to ensure consistent comparison", "\n", "        ", "if", "chan_id", "not", "in", "chan_soft_tag_pred_d", ":", "\n", "            ", "continue", "\n", "", "for", "soft_tag", ",", "reviewer_lab_d", "in", "soft_tag_reviewer_lab_d", ".", "items", "(", ")", ":", "\n", "            ", "max_lab", ",", "max_c", "=", "collections", ".", "Counter", "(", "[", "lab", "for", "lab", "in", "reviewer_lab_d", ".", "values", "(", ")", "]", ")", ".", "most_common", "(", "1", ")", "[", "0", "]", "\n", "reviewer_lab_l", "=", "[", "tpl", "for", "tpl", "in", "reviewer_lab_d", ".", "items", "(", ")", "]", "\n", "for", "reviwer", ",", "lab", "in", "reviewer_lab_l", ":", "\n", "                ", "if", "lab", ":", "\n", "                    ", "soft_tag_rev_pos_c", "[", "soft_tag", "]", "+=", "1", "\n", "# Compare against other reviewers", "\n", "", "for", "reviewer_comp", ",", "lab_comp", "in", "reviewer_lab_d", ".", "items", "(", ")", ":", "\n", "                    ", "if", "reviwer", "==", "reviewer_comp", ":", "continue", "\n", "if", "lab", "==", "lab_comp", ":", "\n", "                        ", "soft_tag_rev_agree_c", "[", "soft_tag", "]", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "soft_tag_rev_disagree_c", "[", "soft_tag", "]", "+=", "1", "\n", "# Compare baseline of always predicting negative", "\n", "", "", "if", "lab", ":", "\n", "                    ", "soft_tag_bl_disagree_c", "[", "soft_tag", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "soft_tag_bl_agree_c", "[", "soft_tag", "]", "+=", "1", "\n", "# Get upper bound", "\n", "", "if", "lab", "==", "max_lab", ":", "\n", "                    ", "soft_tag_max_agree_c", "[", "soft_tag", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "soft_tag_max_disagree_c", "[", "soft_tag", "]", "+=", "1", "\n", "# Limit the number of comparisons for preds if chosen", "\n", "", "", "if", "limit_reviewer_comparison", ":", "\n", "                ", "random", ".", "shuffle", "(", "reviewer_lab_l", ")", "\n", "reviewer_lab_l", "=", "reviewer_lab_l", "[", "0", ":", "2", "]", "\n", "", "for", "reviwer", ",", "lab", "in", "reviewer_lab_l", ":", "\n", "# Compare against prediction", "\n", "                ", "if", "(", "lab", "and", "soft_tag", "in", "chan_soft_tag_pred_d", "[", "chan_id", "]", ")", "or", "(", "not", "lab", "and", "soft_tag", "not", "in", "chan_soft_tag_pred_d", "[", "chan_id", "]", ")", ":", "\n", "                    ", "soft_tag_pred_agree_c", "[", "soft_tag", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "soft_tag_pred_disagree_c", "[", "soft_tag", "]", "+=", "1", "\n", "# Output results", "\n", "", "", "", "", "for", "soft_tag", ",", "pos_c", "in", "sorted", "(", "soft_tag_rev_pos_c", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "rev_agree_perc", "=", "soft_tag_rev_agree_c", "[", "soft_tag", "]", "/", "(", "soft_tag_rev_disagree_c", "[", "soft_tag", "]", "+", "soft_tag_rev_agree_c", "[", "soft_tag", "]", ")", "\n", "pred_agree_perc", "=", "soft_tag_pred_agree_c", "[", "soft_tag", "]", "/", "(", "soft_tag_pred_disagree_c", "[", "soft_tag", "]", "+", "soft_tag_pred_agree_c", "[", "soft_tag", "]", ")", "\n", "bl_agree_perc", "=", "soft_tag_bl_agree_c", "[", "soft_tag", "]", "/", "(", "soft_tag_bl_disagree_c", "[", "soft_tag", "]", "+", "soft_tag_bl_agree_c", "[", "soft_tag", "]", ")", "\n", "max_agree_perc", "=", "soft_tag_max_agree_c", "[", "soft_tag", "]", "/", "(", "soft_tag_max_disagree_c", "[", "soft_tag", "]", "+", "soft_tag_max_agree_c", "[", "soft_tag", "]", ")", "\n", "print", "(", "\"\\t\"", ".", "join", "(", "[", "str", "(", "pos_c", ")", ",", "\"%.3f\"", "%", "rev_agree_perc", ",", "\"%.3f\"", "%", "pred_agree_perc", ",", "\"%.3f\"", "%", "bl_agree_perc", ",", "\n", "\"%.3f\"", "%", "max_agree_perc", ",", "soft_tag", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.get_tag_diff.get_chans": [[6, 13], ["set", "open", "line.strip().split", "set.add", "line.strip", "float"], "function", ["None"], ["def", "get_chans", "(", "targ_tag", ",", "fp", ")", ":", "\n", "    ", "chan_s", "=", "set", "(", "[", "]", ")", "\n", "for", "line", "in", "open", "(", "fp", ")", ":", "\n", "        ", "chan_id", ",", "_", ",", "tag", ",", "tag_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "float", "(", "tag_prob", ")", ">=", "0.5", "and", "tag", "==", "targ_tag", ":", "\n", "            ", "chan_s", ".", "add", "(", "chan_id", ")", "\n", "", "", "return", "chan_s", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.filter_pol_class.filter_pol_class_chans": [[4, 28], ["set", "open", "set", "open", "open", "open", "open.close", "line.strip().split", "line.strip().split", "chan_name.endswith", "int", "line.strip().split", "float", "set.add", "set.add", "float", "open.write", "line.strip", "line.strip", "line.strip", "float"], "function", ["None"], ["def", "filter_pol_class_chans", "(", "pol_class_fp", ",", "chan_info_fp", ",", "lang_class_fp", ",", "out_fp", ",", "lang_thresh", "=", "0.5", ",", "\n", "pol_thresh", "=", "0.9", ",", "min_scrap_subs", "=", "0", ")", ":", "\n", "# Read in language chans to filter out", "\n", "    ", "non_eng_s", "=", "set", "(", "[", "]", ")", "\n", "for", "line", "in", "open", "(", "lang_class_fp", ")", ":", "\n", "        ", "chan_id", ",", "pred_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "float", "(", "pred_prob", ")", "<=", "lang_thresh", ":", "\n", "            ", "non_eng_s", ".", "add", "(", "chan_id", ")", "\n", "# Find topic channels / get scrap subs", "\n", "", "", "topic_chan_s", "=", "set", "(", "[", "]", ")", "\n", "chan_scrap_subs_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "chan_info_fp", ")", ":", "\n", "        ", "chan_id", ",", "chan_int", ",", "chan_name", ",", "scrap_subs", ",", "subs", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_name", ".", "endswith", "(", "\" - Topic\"", ")", ":", "\n", "            ", "topic_chan_s", ".", "add", "(", "chan_id", ")", "\n", "", "chan_scrap_subs_d", "[", "chan_id", "]", "=", "int", "(", "float", "(", "scrap_subs", ")", ")", "\n", "# Output", "\n", "", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "line", "in", "open", "(", "pol_class_fp", ")", ":", "\n", "        ", "chan_id", ",", "pred_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "float", "(", "pred_prob", ")", ">=", "pol_thresh", "and", "chan_id", "not", "in", "non_eng_s", "and", "chan_id", "not", "in", "topic_chan_s", "and", "chan_scrap_subs_d", "[", "chan_id", "]", ">=", "min_scrap_subs", ":", "\n", "            ", "of", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "pred_prob", "+", "\"\\n\"", ")", "\n", "", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.compare_soft_tag_pred_versions.get_tags": [[7, 16], ["open", "line.strip().split", "float", "chan_tag_s[].add", "line.strip", "set"], "function", ["None"], ["def", "get_tags", "(", "fp", ")", ":", "\n", "    ", "chan_tag_s", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "fp", ")", ":", "\n", "        ", "chan_id", ",", "_", ",", "tag", ",", "tag_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "float", "(", "tag_prob", ")", ">=", "0.5", ":", "\n", "            ", "if", "chan_id", "not", "in", "chan_tag_s", ":", "\n", "                ", "chan_tag_s", "[", "chan_id", "]", "=", "set", "(", "[", "]", ")", "\n", "", "chan_tag_s", "[", "chan_id", "]", ".", "add", "(", "tag", ")", "\n", "", "", "return", "chan_tag_s", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.compare_soft_tag_pred_versions.get_tag_c": [[35, 43], ["chan_tag_s.items", "tag_chan_d[].add", "set"], "function", ["None"], ["def", "get_tag_c", "(", "chan_tag_s", ")", ":", "\n", "    ", "tag_chan_d", "=", "{", "}", "\n", "for", "chan_id", ",", "tag_s", "in", "chan_tag_s", ".", "items", "(", ")", ":", "\n", "        ", "for", "tag", "in", "tag_s", ":", "\n", "            ", "if", "tag", "not", "in", "tag_chan_d", ":", "\n", "                ", "tag_chan_d", "[", "tag", "]", "=", "set", "(", "[", "]", ")", "\n", "", "tag_chan_d", "[", "tag", "]", ".", "add", "(", "chan_id", ")", "\n", "", "", "return", "tag_chan_d", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.compare_soft_tag_pred_versions.get_tag_pairs_c": [[54, 62], ["collections.defaultdict", "chan_tag_s.items", "pair_chans_d[].add", "set", "set"], "function", ["None"], ["def", "get_tag_pairs_c", "(", "chan_tag_s", ")", ":", "\n", "    ", "pair_chans_d", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "chan_id", ",", "tag_s", "in", "chan_tag_s", ".", "items", "(", ")", ":", "\n", "        ", "for", "tag1", "in", "tag_s", ":", "\n", "            ", "for", "tag2", "in", "tag_s", ":", "\n", "                ", "if", "tag1", "not", "in", "set", "(", "[", "\"L\"", ",", "\"C\"", ",", "\"R\"", "]", ")", "and", "tag2", "not", "in", "set", "(", "[", "\"L\"", ",", "\"C\"", ",", "\"R\"", "]", ")", "and", "tag1", "!=", "tag2", ":", "\n", "                    ", "pair_chans_d", "[", "(", "tag1", ",", "tag2", ")", "]", ".", "add", "(", "chan_id", ")", "\n", "", "", "", "", "return", "pair_chans_d", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.filter_comment_files.filter_comment_files": [[3, 32], ["set", "set", "comment_fps.split", "open", "open.write", "open.close", "set", "samp_fps.split", "open", "open.write", "open.close", "open", "open", "l.strip", "line.strip().split", "open", "set.add", "set.add", "line.replace().strip().split", "line.strip", "line.strip", "line.replace().strip", "line.replace"], "function", ["None"], ["def", "filter_comment_files", "(", "comment_fps", ",", "samp_fps", ",", "chan_filter_fp", ",", "\n", "out_commenters_fp", ",", "out_commenters_samp_fp", ")", ":", "\n", "# Only include commenters from these channels", "\n", "    ", "chan_filt_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "chan_filter_fp", ")", "]", ")", "\n", "# Get all curl commenters from correct chans", "\n", "all_commenters_filt_s", "=", "set", "(", "[", "]", ")", "\n", "for", "comment_fp", "in", "comment_fps", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "for", "line", "in", "open", "(", "comment_fp", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "chan_id", ",", "vid_id", ",", "commenter_chan_id", "=", "line", ".", "replace", "(", "\"\\\\\"", ",", "\"\"", ")", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "3", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "if", "chan_id", "in", "chan_filt_s", ":", "\n", "                ", "all_commenters_filt_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "# Output curl commenters", "\n", "", "", "", "of", "=", "open", "(", "out_commenters_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "all_commenters_filt_s", ")", "+", "\"\\n\"", ")", "\n", "of", ".", "close", "(", ")", "\n", "# Filter out sample chans", "\n", "samp_filt_s", "=", "set", "(", "[", "]", ")", "\n", "for", "samp_fp", "in", "samp_fps", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "for", "line", "in", "open", "(", "samp_fp", ")", ":", "\n", "            ", "chan_id", ",", "commenter_id", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_id", "in", "chan_filt_s", ":", "\n", "                ", "samp_filt_s", ".", "add", "(", "line", ".", "strip", "(", "\"\\n\"", ")", ")", "\n", "# Output commenters from the sample that are from the appropriate commenter", "\n", "", "", "", "of", "=", "open", "(", "out_commenters_samp_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "samp_filt_s", ")", "+", "\"\\n\"", ")", "\n", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.get_new_candidate_chans.get_new_candidate_chans": [[3, 61], ["set", "set", "prev_candidate_fps.split", "open", "set", "open", "open", "open.write", "open.close", "print", "print", "print", "print", "print", "print", "open", "open", "line.strip().split", "float", "line.strip().split", "int", "line.strip().split", "set.add", "float", "float", "set.add", "line.strip", "line.strip", "line.strip", "set.add", "line.strip", "set.add"], "function", ["None"], ["def", "get_new_candidate_chans", "(", "chan_info_fp", ",", "scores_fp", ",", "scores_lang_fp", ",", "prev_candidate_fps", ",", "out_fp", ",", "\n", "min_prob", "=", "0.9", ",", "min_subs", "=", "10000", ")", ":", "\n", "# Read in language preds", "\n", "    ", "eng_chan_s", "=", "set", "(", "[", "]", ")", "\n", "if", "scores_lang_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "scores_lang_fp", ")", ":", "\n", "            ", "chan_id", ",", "pred_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "float", "(", "pred_prob", ")", ">=", "0.5", ":", "\n", "                ", "eng_chan_s", ".", "add", "(", "chan_id", ")", "\n", "# Previous candidate chans", "\n", "", "", "", "prev_cand_chan_s", "=", "set", "(", "[", "]", ")", "\n", "for", "fp", "in", "prev_candidate_fps", ".", "split", "(", "\",\"", ")", ":", "\n", "        ", "for", "line", "in", "open", "(", "fp", ")", ":", "\n", "            ", "prev_cand_chan_s", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "# Get scores", "\n", "", "", "chan_prob_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "scores_fp", ")", ":", "\n", "        ", "chan_id", ",", "pred_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_prob_d", "[", "chan_id", "]", "=", "float", "(", "pred_prob", ")", "\n", "# Find new cands", "\n", "", "cand_s", "=", "set", "(", "[", "]", ")", "\n", "new_pos_c", "=", "0", "\n", "new_heur_c", "=", "0", "\n", "chan_subs_d", "=", "{", "}", "\n", "new_pos_tot_subs", "=", "0", "\n", "for", "line", "in", "open", "(", "chan_info_fp", ")", ":", "\n", "        ", "chan_id", ",", "chan_int", ",", "chan_name", ",", "chan_scrap_subs", ",", "chan_tot_subs", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_tot_subs_int", "=", "int", "(", "float", "(", "chan_tot_subs", ")", ")", "\n", "chan_subs_d", "[", "chan_id", "]", "=", "chan_tot_subs_int", "\n", "if", "chan_id", "not", "in", "prev_cand_chan_s", ":", "\n", "            ", "if", "chan_id", "in", "chan_prob_d", "and", "chan_prob_d", "[", "chan_id", "]", ">=", "min_prob", "and", "chan_tot_subs_int", ">=", "min_subs", "and", "(", "scores_lang_fp", "is", "None", "or", "chan_id", "in", "eng_chan_s", ")", ":", "\n", "                ", "new_pos_c", "+=", "1", "\n", "new_pos_tot_subs", "+=", "chan_tot_subs_int", "\n", "cand_s", ".", "add", "(", "chan_id", ")", "\n", "", "elif", "chan_tot_subs_int", ">=", "3000000", ":", "\n", "                ", "cand_s", ".", "add", "(", "chan_id", ")", "\n", "new_heur_c", "+=", "1", "\n", "# Get number of previous candidates predicted pos", "\n", "", "", "", "prev_cand_neg_c", "=", "0", "\n", "prev_cand_pos_c", "=", "0", "\n", "prev_can_pos_tot_subs", "=", "0", "\n", "for", "chan_id", "in", "prev_cand_chan_s", ":", "\n", "        ", "if", "chan_id", "in", "chan_prob_d", ":", "\n", "            ", "if", "chan_prob_d", "[", "chan_id", "]", ">=", "min_prob", "and", "(", "scores_lang_fp", "is", "None", "or", "chan_id", "in", "eng_chan_s", ")", ":", "\n", "                ", "prev_cand_pos_c", "+=", "1", "\n", "prev_can_pos_tot_subs", "+=", "chan_subs_d", "[", "chan_id", "]", "\n", "", "else", ":", "\n", "                ", "prev_cand_neg_c", "+=", "1", "\n", "\n", "", "", "", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "cand_s", ")", ")", "\n", "of", ".", "close", "(", ")", "\n", "print", "(", "\"All previous candidate negative predictions:\"", ",", "prev_cand_neg_c", ")", "\n", "print", "(", "\"All previous candidate positive predictions:\"", ",", "prev_cand_pos_c", ")", "\n", "print", "(", "\"All previous candidate positive predictions - Tot Subs:\"", ",", "prev_can_pos_tot_subs", ")", "\n", "print", "(", "\"New heuristic chans:\"", ",", "new_heur_c", ")", "\n", "print", "(", "\"New positive chans:\"", ",", "new_pos_c", ")", "\n", "print", "(", "\"New positive chans - Tot Subs:\"", ",", "new_pos_tot_subs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.pol_class_ensemble_cross_val.create_feats_score_cv": [[6, 26], ["set", "sorted", "os.path.exists", "os.makedirs", "os.listdir", "print", "pol_class_ensemble.create_feats_score", "os.remove", "int", "vars", "vars", "vars", "vars", "os.listdir", "fn.split"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.pol_class_ensemble.create_feats_score"], ["def", "create_feats_score_cv", "(", "knn_fold_dir", ",", "lang_score_fp", ",", "api_topics_fp", ",", "\n", "api_topic_feats", ",", "raw_embedding_fp", ",", "out_dir", ",", "\n", "no_knn", "=", "False", ",", "top20_topics", "=", "False", ",", "ps_topics", "=", "False", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "else", ":", "\n", "        ", "for", "fn", "in", "os", ".", "listdir", "(", "out_dir", ")", ":", "\n", "            ", "os", ".", "remove", "(", "out_dir", "+", "\"/\"", "+", "fn", ")", "\n", "# Apply model to each fold", "\n", "", "", "fold_s", "=", "set", "(", "[", "int", "(", "fn", ".", "split", "(", "\".\"", ")", "[", "1", "]", ")", "for", "fn", "in", "os", ".", "listdir", "(", "knn_fold_dir", ")", "]", ")", "\n", "for", "fold", "in", "sorted", "(", "fold_s", ")", ":", "\n", "        ", "print", "(", "\"RUNNING FOLD:\"", ",", "fold", ")", "\n", "train_labs_fp", "=", "\"%(knn_fold_dir)s/train.%(fold)s.labs.txt\"", "%", "vars", "(", ")", "\n", "knn_score_train_fp", "=", "\"%(knn_fold_dir)s/train.%(fold)s.preds.txt\"", "%", "vars", "(", ")", "\n", "knn_score_test_fp", "=", "\"%(knn_fold_dir)s/test.%(fold)s.preds.txt\"", "%", "vars", "(", ")", "\n", "out_fp", "=", "\"%(out_dir)s/test.%(fold)s.preds.txt\"", "%", "vars", "(", ")", "\n", "pol_class_ensemble", ".", "create_feats_score", "(", "train_labs_fp", ",", "knn_score_train_fp", ",", "knn_score_test_fp", ",", "\n", "lang_score_fp", ",", "api_topics_fp", ",", "\n", "raw_embedding_fp", ",", "out_fp", ",", "no_knn", "=", "no_knn", ",", "\n", "top20_topics", "=", "top20_topics", ",", "ps_topics", "=", "ps_topics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_pol_class_labs.add_labs": [[4, 9], ["None"], "function", ["None"], ["def", "add_labs", "(", "chan_lab_d", ",", "chan_s", ",", "filter_chan_s", ",", "lab", ")", ":", "\n", "    ", "for", "chan_id", "in", "chan_s", ":", "\n", "        ", "if", "chan_id", "in", "filter_chan_s", "or", "chan_id", "in", "chan_lab_d", ":", "\n", "            ", "continue", "\n", "", "chan_lab_d", "[", "chan_id", "]", "=", "lab", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_pol_class_labs.generate_pol_class_labs": [[11, 44], ["set", "set", "set", "generate_pol_class_labs.add_labs", "set", "generate_pol_class_labs.add_labs", "open", "chan_lab_d.items", "open.close", "set", "open", "generate_pol_class_labs.add_labs", "open", "chan_lab_d.items", "open.close", "prev_candidate_fps.split", "open.write", "line.strip().split", "open.write", "open", "l.strip", "l.strip", "l.strip", "set.add", "set.add", "open", "open", "open", "line.strip", "float", "line.strip", "str", "str"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_pol_class_labs.add_labs", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_pol_class_labs.add_labs", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.generate_pol_class_labs.add_labs"], ["", "", "def", "generate_pol_class_labs", "(", "pos_fp", ",", "neg_fp", ",", "filter_fp", ",", "vec_chan_info_fp", ",", "\n", "min_heuristic_neg_subs", ",", "out_fp", ",", "out_no_heur_fp", ",", "\n", "prev_candidate_fps", "=", "None", ")", ":", "\n", "    ", "prev_cand_chan_s", "=", "set", "(", "[", "]", ")", "\n", "if", "prev_candidate_fps", "is", "not", "None", ":", "\n", "        ", "for", "fp", "in", "prev_candidate_fps", ".", "split", "(", "\",\"", ")", ":", "\n", "            ", "for", "line", "in", "open", "(", "fp", ")", ":", "\n", "                ", "prev_cand_chan_s", ".", "add", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "", "filter_chan_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "filter_fp", ")", "]", ")", "\n", "chan_lab_d", "=", "{", "}", "\n", "# Get pos labs", "\n", "pos_chan_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "pos_fp", ")", "]", ")", "\n", "add_labs", "(", "chan_lab_d", ",", "pos_chan_s", ",", "filter_chan_s", ",", "1", ")", "\n", "# Get neg labs", "\n", "neg_chan_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "neg_fp", ")", "]", ")", "\n", "add_labs", "(", "chan_lab_d", ",", "neg_chan_s", ",", "filter_chan_s", ",", "0", ")", "\n", "# Output - no heuristic", "\n", "of", "=", "open", "(", "out_no_heur_fp", ",", "\"w\"", ")", "\n", "for", "chan_id", ",", "lab", "in", "chan_lab_d", ".", "items", "(", ")", ":", "\n", "        ", "of", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "str", "(", "lab", ")", "+", "\"\\n\"", ")", "\n", "", "of", ".", "close", "(", ")", "\n", "# Get heuristic neg labs", "\n", "heur_neg_s", "=", "set", "(", "[", "]", ")", "\n", "for", "line", "in", "open", "(", "vec_chan_info_fp", ")", ":", "\n", "        ", "chan_id", ",", "chan_int", ",", "chan_name", ",", "chan_scrap_subs", ",", "chan_tot_subs", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "float", "(", "chan_tot_subs", ")", ">=", "min_heuristic_neg_subs", "and", "(", "prev_candidate_fps", "is", "None", "or", "chan_id", "in", "prev_cand_chan_s", ")", ":", "\n", "            ", "heur_neg_s", ".", "add", "(", "chan_id", ")", "\n", "", "", "add_labs", "(", "chan_lab_d", ",", "heur_neg_s", ",", "filter_chan_s", ",", "0", ")", "\n", "# Output", "\n", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "chan_id", ",", "lab", "in", "chan_lab_d", ".", "items", "(", ")", ":", "\n", "        ", "of", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "str", "(", "lab", ")", "+", "\"\\n\"", ")", "\n", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.gen_chan_classification_rounds_increase.round_increase": [[3, 35], ["open", "set", "enumerate", "line.strip().split", "int", "rounds_fp.split", "open", "print", "float", "l.strip", "line.strip", "line.strip", "open", "map"], "function", ["None"], ["def", "round_increase", "(", "chan_info_fp", ",", "final_model_preds_fp", ",", "rounds_fp", ",", "heuristic_lim", "=", "3000000", ")", ":", "\n", "# Get channel info", "\n", "    ", "chan_tot_subs_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "chan_info_fp", ")", ":", "\n", "        ", "chan_id", ",", "chan_int", ",", "chan_name", ",", "scrap_subs", ",", "tot_subs", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_tot_subs_d", "[", "chan_id", "]", "=", "int", "(", "float", "(", "tot_subs", ")", ")", "\n", "# Get pos preds (and recfluence)", "\n", "", "pos_chans_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "final_model_preds_fp", ")", "]", ")", "\n", "# See how coverage increases", "\n", "tot_chans", "=", "0", "\n", "tot_chan_subs", "=", "0", "\n", "for", "fp_round", ",", "fp", "in", "enumerate", "(", "rounds_fp", ".", "split", "(", "\",\"", ")", ")", ":", "\n", "        ", "num_cands", "=", "0", "\n", "new_chans", "=", "0", "\n", "new_chan_subs", "=", "0", "\n", "for", "line", "in", "open", "(", "fp", ")", ":", "\n", "            ", "chan_id", "=", "line", ".", "strip", "(", ")", "\n", "# Getting rid of terminated channels", "\n", "if", "chan_id", "not", "in", "chan_tot_subs_d", ":", "\n", "                ", "continue", "\n", "# Accounting for heuristic negative examples", "\n", "", "if", "fp_round", ">", "0", "and", "chan_tot_subs_d", "[", "chan_id", "]", ">=", "heuristic_lim", ":", "\n", "                ", "continue", "\n", "# Check if chan is pos", "\n", "", "num_cands", "+=", "1", "\n", "if", "chan_id", "in", "pos_chans_s", ":", "\n", "                ", "new_chans", "+=", "1", "\n", "new_chan_subs", "+=", "chan_tot_subs_d", "[", "chan_id", "]", "\n", "# Output stats", "\n", "", "", "tot_chans", "+=", "new_chans", "\n", "tot_chan_subs", "+=", "new_chan_subs", "\n", "print", "(", "\";\"", ".", "join", "(", "map", "(", "str", ",", "[", "fp_round", ",", "new_chans", ",", "new_chan_subs", ",", "tot_chans", ",", "tot_chan_subs", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.pol_class_ensemble.create_feats": [[8, 49], ["random.shuffle", "feat_chan_l.append", "features_l.append", "numpy.array", "numpy.array", "feat_vals_l.append", "len", "feat_vals_l.append", "len", "len", "lab_l.append", "float", "feat_vals_l.append", "feat_vals_l.append", "feat_vals_l.append", "feat_vals_l.append", "float"], "function", ["None"], ["def", "create_feats", "(", "chan_l", ",", "chan_lab_d", ",", "chan_knn_pred_d", ",", "chan_lang_pred_d", ",", "\n", "chan_topic_d", ",", "chan_embed_d", ",", "top20_topic_l", ",", "get_labs", "=", "True", ",", "\n", "no_knn", "=", "False", ",", "top20_topics", "=", "False", ",", "ps_topics", "=", "False", ")", ":", "\n", "    ", "random", ".", "shuffle", "(", "chan_l", ")", "\n", "features_l", "=", "[", "]", "\n", "lab_l", "=", "[", "]", "\n", "feat_chan_l", "=", "[", "]", "\n", "for", "chan_id", "in", "chan_l", ":", "\n", "        ", "feat_vals_l", "=", "[", "]", "\n", "# KNN", "\n", "if", "chan_id", "not", "in", "chan_knn_pred_d", ":", "\n", "            ", "continue", "\n", "", "if", "not", "no_knn", ":", "\n", "            ", "feat_vals_l", ".", "append", "(", "chan_knn_pred_d", "[", "chan_id", "]", ")", "\n", "# Language", "\n", "", "if", "len", "(", "chan_lang_pred_d", ")", ">", "0", ":", "\n", "            ", "if", "chan_id", "not", "in", "chan_lang_pred_d", ":", "\n", "                ", "continue", "\n", "", "feat_vals_l", ".", "append", "(", "float", "(", "chan_lang_pred_d", "[", "chan_id", "]", ")", ")", "\n", "# API Topic", "\n", "", "if", "len", "(", "chan_topic_d", ")", ">", "0", ":", "\n", "            ", "if", "chan_id", "not", "in", "chan_topic_d", ":", "\n", "                ", "continue", "\n", "", "if", "ps_topics", ":", "\n", "                ", "feat_vals_l", ".", "append", "(", "1", "if", "'Politics'", "in", "chan_topic_d", "[", "chan_id", "]", "else", "0", ")", "\n", "feat_vals_l", ".", "append", "(", "1", "if", "'Society'", "in", "chan_topic_d", "[", "chan_id", "]", "else", "0", ")", "\n", "", "if", "top20_topics", ":", "\n", "                ", "for", "topic", "in", "top20_topic_l", ":", "\n", "                    ", "if", "topic", "==", "'Society'", ":", "continue", "\n", "feat_vals_l", ".", "append", "(", "1", "if", "topic", "in", "chan_topic_d", "[", "chan_id", "]", "else", "0", ")", "\n", "# Embeddings", "\n", "", "", "", "if", "len", "(", "chan_embed_d", ")", ">", "0", ":", "\n", "            ", "if", "chan_id", "not", "in", "chan_embed_d", ":", "\n", "                ", "continue", "\n", "", "for", "dim", "in", "chan_embed_d", "[", "chan_id", "]", ":", "\n", "                ", "feat_vals_l", ".", "append", "(", "float", "(", "dim", ")", ")", "\n", "", "", "feat_chan_l", ".", "append", "(", "chan_id", ")", "\n", "features_l", ".", "append", "(", "feat_vals_l", ")", "\n", "if", "get_labs", ":", "\n", "            ", "lab_l", ".", "append", "(", "chan_lab_d", "[", "chan_id", "]", ")", "\n", "", "", "return", "feat_chan_l", ",", "np", ".", "array", "(", "features_l", ")", ",", "np", ".", "array", "(", "lab_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.pol_class_ensemble.create_feats_score": [[51, 112], ["open", "open", "dict", "list", "pol_class_ensemble.create_feats", "pol_class_ensemble.create_feats", "xgboost.XGBClassifier", "xgboost.XGBClassifier.fit", "open", "range", "open.close", "line.strip().split", "float", "line.strip().split", "float", "score_chans_l.append", "dict", "collections.defaultdict", "open", "open", "dict.keys", "print", "range", "len", "open.write", "line.strip().split", "chan_topic_d[].add", "line.strip().split", "l.strip().split", "len", "print", "xgboost.XGBClassifier.predict_proba", "line.strip", "line.strip", "l.strip().split", "set", "open", "numpy.mean", "open", "line.strip", "sorted", "line.strip", "l.strip", "l.strip", "collections.defaultdict.items"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.pol_class_ensemble.create_feats", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.pol_class_ensemble.create_feats"], ["", "def", "create_feats_score", "(", "train_labs_fp", ",", "knn_score_train_fp", ",", "knn_score_test_fp", ",", "\n", "lang_score_fp", ",", "api_topics_fp", ",", "raw_embedding_fp", ",", "out_fp", ",", "\n", "no_knn", "=", "False", ",", "top20_topics", "=", "False", ",", "ps_topics", "=", "False", ",", "verbose", "=", "True", ")", ":", "\n", "# Read in KNN preds", "\n", "    ", "chan_knn_pred_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "knn_score_train_fp", ")", ":", "\n", "        ", "chan_id", ",", "pred_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_knn_pred_d", "[", "chan_id", "]", "=", "float", "(", "pred_prob", ")", "\n", "", "score_chans_l", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "knn_score_test_fp", ")", ":", "\n", "        ", "chan_id", ",", "pred_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_knn_pred_d", "[", "chan_id", "]", "=", "float", "(", "pred_prob", ")", "\n", "score_chans_l", ".", "append", "(", "chan_id", ")", "\n", "# Read in language pred", "\n", "", "chan_lang_pred_d", "=", "{", "}", "\n", "if", "lang_score_fp", "is", "not", "None", ":", "\n", "        ", "chan_lang_pred_d", "=", "dict", "(", "[", "l", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "open", "(", "lang_score_fp", ")", "]", ")", "\n", "# Read in topics", "\n", "", "chan_topic_d", "=", "{", "}", "\n", "top20_topic_l", "=", "[", "]", "\n", "if", "api_topics_fp", ":", "\n", "        ", "topic_c", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "for", "line", "in", "open", "(", "api_topics_fp", ")", ":", "\n", "            ", "chan_id", ",", "topic", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "chan_id", "not", "in", "chan_topic_d", ":", "\n", "                ", "chan_topic_d", "[", "chan_id", "]", "=", "set", "(", "[", "]", ")", "\n", "", "chan_topic_d", "[", "chan_id", "]", ".", "add", "(", "topic", ")", "\n", "topic_c", "[", "topic", "]", "+=", "1", "\n", "", "top20_topic_l", "=", "[", "topic", "for", "topic", ",", "c", "in", "sorted", "(", "topic_c", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "]", "[", "0", ":", "20", "]", "\n", "# Read in raw vector", "\n", "", "chan_embed_d", "=", "{", "}", "\n", "if", "raw_embedding_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "raw_embedding_fp", ")", ":", "\n", "            ", "tpl", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_embed_d", "[", "tpl", "[", "0", "]", "]", "=", "tpl", "[", "1", ":", "]", "\n", "# Read in labels", "\n", "", "", "chan_lab_d", "=", "dict", "(", "[", "l", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "for", "l", "in", "open", "(", "train_labs_fp", ")", "]", ")", "\n", "train_chans_l", "=", "list", "(", "chan_lab_d", ".", "keys", "(", ")", ")", "\n", "# Create features", "\n", "train_chans_filt_l", ",", "X_train", ",", "y_train", "=", "create_feats", "(", "train_chans_l", ",", "chan_lab_d", ",", "chan_knn_pred_d", ",", "\n", "chan_lang_pred_d", ",", "chan_topic_d", ",", "chan_embed_d", ",", "top20_topic_l", ",", "get_labs", "=", "True", ",", "\n", "no_knn", "=", "no_knn", ",", "top20_topics", "=", "top20_topics", ",", "ps_topics", "=", "ps_topics", ")", "\n", "score_chans_filt_l", ",", "X_score", ",", "_", "=", "create_feats", "(", "score_chans_l", ",", "chan_lab_d", ",", "chan_knn_pred_d", ",", "\n", "chan_lang_pred_d", ",", "chan_topic_d", ",", "chan_embed_d", ",", "top20_topic_l", ",", "get_labs", "=", "False", ",", "\n", "no_knn", "=", "no_knn", ",", "top20_topics", "=", "top20_topics", ",", "ps_topics", "=", "ps_topics", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Features:\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X_train", "[", "0", "]", ")", ")", ":", "\n", "            ", "print", "(", "\"Mean val:\"", ",", "np", ".", "mean", "(", "[", "l", "[", "i", "]", "for", "l", "in", "X_train", "]", ")", ")", "\n", "\n", "# Train model", "\n", "", "", "clf", "=", "XGBClassifier", "(", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "# Score instances", "\n", "pred_probs", "=", "[", "pred", "[", "1", "]", "for", "pred", "in", "clf", ".", "predict_proba", "(", "X_score", ")", "]", "\n", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_probs", ")", ")", ":", "\n", "        ", "prob", "=", "\"%.4f\"", "%", "pred_probs", "[", "i", "]", "\n", "chan_id", "=", "score_chans_filt_l", "[", "i", "]", "\n", "of", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "prob", "+", "\"\\n\"", ")", "\n", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.parse_channel_reviews.parse_chan_revs": [[7, 83], ["set", "set", "set", "set", "pandas.read_csv", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "pd.read_csv.iterrows", "open", "open", "open", "collections.defaultdict.items", "open.close", "open.close", "open.close", "open", "override_soft_tags.split", "override_reviewers.split", "filt_reviewers.split", "set", "chan_rel_d[].append", "chan_revs_d[].add", "numpy.mean", "open.write", "len", "chan_tag_d[].items", "int", "open.write", "open.write", "line.strip().split", "int", "collections.defaultdict", "type", "row[].split", "chan_lcr_d[].append", "round", "float", "l.strip", "[].add", "open.write", "numpy.mean", "line.strip", "open", "str", "len", "st_rev_s.intersection", "str"], "function", ["None"], ["def", "parse_chan_revs", "(", "chan_rev_fp", ",", "filt_reviewers", ",", "pol_class_fp", ",", "soft_tag_fp", ",", "pol_lean_fp", ",", "\n", "pol_class_override_fp", ",", "override_soft_tags", ",", "override_reviewers", ",", "\n", "relevance_thresh", "=", "0.5", ",", "no_vids_fp", "=", "None", ")", ":", "\n", "# Pol class overrides..", "\n", "    ", "pol_class_override_d", "=", "{", "}", "\n", "if", "pol_class_override_fp", "is", "not", "None", ":", "\n", "        ", "for", "line", "in", "open", "(", "pol_class_override_fp", ")", ":", "\n", "            ", "chan_id", ",", "lab", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "pol_class_override_d", "[", "chan_id", "]", "=", "int", "(", "float", "(", "lab", ")", ")", "\n", "# Override tags ...", "\n", "", "", "ov_soft_tag_s", "=", "set", "(", "override_soft_tags", ".", "split", "(", "\",\"", ")", ")", "\n", "ov_st_revs_s", "=", "set", "(", "override_reviewers", ".", "split", "(", "\",\"", ")", ")", "\n", "# Filter out some reviwers (specifically model based ones)", "\n", "filt_reviewers_s", "=", "set", "(", "filt_reviewers", ".", "split", "(", "\",\"", ")", ")", "\n", "# Filt out chans without vids", "\n", "chan_no_vid_s", "=", "set", "(", "{", "}", ")", "\n", "if", "no_vids_fp", "is", "not", "None", ":", "\n", "        ", "chan_no_vid_s", "=", "set", "(", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "no_vids_fp", ")", "]", ")", "\n", "# Read in review data", "\n", "", "chan_rev_df", "=", "pd", ".", "read_csv", "(", "chan_rev_fp", ")", "\n", "chan_rel_d", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "chan_revs_d", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "chan_tag_d", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "set", ")", ")", "\n", "chan_lcr_d", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "rid", ",", "row", "in", "chan_rev_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "rev_code", "=", "row", "[", "\"REVIEWER_CODE\"", "]", "\n", "chan_id", "=", "row", "[", "\"CHANNEL_ID\"", "]", "\n", "if", "chan_id", "in", "chan_no_vid_s", ":", "\n", "            ", "continue", "\n", "", "if", "rev_code", "in", "filt_reviewers_s", ":", "\n", "            ", "continue", "\n", "# Channel relevance", "\n", "", "rev_rel", "=", "row", "[", "\"REVIEWER_RELEVANCE\"", "]", "\n", "chan_rel_d", "[", "chan_id", "]", ".", "append", "(", "rev_rel", ")", "\n", "if", "rev_rel", "<", "relevance_thresh", ":", "\n", "            ", "continue", "\n", "# Soft tags", "\n", "", "chan_revs_d", "[", "chan_id", "]", ".", "add", "(", "rev_code", ")", "\n", "if", "type", "(", "row", "[", "\"REVIEWER_TAGS\"", "]", ")", "==", "str", ":", "\n", "            ", "for", "soft_tag", "in", "row", "[", "\"REVIEWER_TAGS\"", "]", ".", "split", "(", "\"|\"", ")", ":", "\n", "                ", "chan_tag_d", "[", "chan_id", "]", "[", "soft_tag", "]", ".", "add", "(", "rev_code", ")", "\n", "# L/C/R", "\n", "", "", "rev_lr", "=", "row", "[", "\"REVIEWER_LR\"", "]", "\n", "if", "rev_lr", ":", "\n", "            ", "chan_lcr_d", "[", "chan_id", "]", ".", "append", "(", "rev_lr", ")", "\n", "# Output results", "\n", "", "", "pol_class_f", "=", "open", "(", "pol_class_fp", ",", "\"w\"", ")", "\n", "soft_tag_f", "=", "open", "(", "soft_tag_fp", ",", "\"w\"", ")", "\n", "pol_lean_f", "=", "open", "(", "pol_lean_fp", ",", "\"w\"", ")", "\n", "for", "chan_id", ",", "rel_l", "in", "chan_rel_d", ".", "items", "(", ")", ":", "\n", "# Determine if political", "\n", "        ", "avg_rel", "=", "np", ".", "mean", "(", "rel_l", ")", "\n", "if", "chan_id", "in", "pol_class_override_d", ":", "\n", "            ", "is_pol", "=", "pol_class_override_d", "[", "chan_id", "]", "\n", "", "else", ":", "\n", "            ", "is_pol", "=", "1", "if", "avg_rel", ">=", "relevance_thresh", "else", "0", "\n", "", "pol_class_f", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "str", "(", "is_pol", ")", "+", "\"\\n\"", ")", "\n", "if", "not", "is_pol", ":", "\n", "            ", "continue", "\n", "# Get soft tags", "\n", "", "num_revs", "=", "len", "(", "chan_revs_d", "[", "chan_id", "]", ")", "\n", "if", "num_revs", "==", "0", ":", "\n", "            ", "continue", "# Only the case for overrides...", "\n", "", "for", "soft_tag", ",", "st_rev_s", "in", "chan_tag_d", "[", "chan_id", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "st_rev_s", ")", ">=", "num_revs", "*", "0.5", "or", "(", "soft_tag", "in", "ov_soft_tag_s", "and", "st_rev_s", ".", "intersection", "(", "ov_st_revs_s", ")", ")", ":", "\n", "                ", "soft_tag_f", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "soft_tag", "+", "\"\\n\"", ")", "\n", "# Get L/C/R (include in Soft Tags as well for now)", "\n", "", "", "lcr_reg_l", "=", "[", "-", "1", "if", "lcr", "==", "\"L\"", "else", "(", "0", "if", "lcr", "==", "\"C\"", "else", "1", ")", "for", "lcr", "in", "chan_lcr_d", "[", "chan_id", "]", "]", "\n", "lcr_int", "=", "int", "(", "round", "(", "np", ".", "mean", "(", "lcr_reg_l", ")", ")", ")", "\n", "pol_lean_f", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "str", "(", "lcr_int", ")", "+", "\"\\n\"", ")", "\n", "lcr_str", "=", "\"L\"", "if", "lcr_int", "==", "-", "1", "else", "(", "\"C\"", "if", "lcr_int", "==", "0", "else", "\"R\"", ")", "\n", "soft_tag_f", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "lcr_str", "+", "\"\\n\"", ")", "\n", "", "pol_class_f", ".", "close", "(", ")", "\n", "soft_tag_f", ".", "close", "(", ")", "\n", "pol_lean_f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.get_ensemble_stats.get_stats": [[8, 61], ["open", "os.listdir", "sklearn.metrics.roc_auc_score", "sklearn.metrics.precision_recall_fscore_support", "numpy.mean", "print", "print", "line.strip().split", "int", "open", "sklearn.metrics.roc_auc_score", "sklearn.metrics.precision_recall_fscore_support", "prec_l.append", "rec_l.append", "f1_l.append", "base_rate_l.append", "auc_l.append", "len", "print", "float", "line.strip().split", "float", "lab_l.append", "pred_l.append", "pred_prob_l.append", "tot_lab_l.append", "tot_pred_l.append", "tot_pred_prob_l.append", "numpy.mean", "min", "numpy.mean", "max", "line.strip", "fn.startswith", "fn.endswith", "int", "int", "line.strip"], "function", ["None"], ["def", "get_stats", "(", "lab_fp", ",", "score_dir", ",", "thresh", "=", "0.5", ")", ":", "\n", "    ", "chan_lab_d", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "lab_fp", ")", ":", "\n", "        ", "chan", ",", "lab", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "chan_lab_d", "[", "chan", "]", "=", "int", "(", "float", "(", "lab", ")", ")", "\n", "# Going over each fold", "\n", "", "auc_l", "=", "[", "]", "\n", "prec_l", "=", "[", "]", "\n", "rec_l", "=", "[", "]", "\n", "f1_l", "=", "[", "]", "\n", "base_rate_l", "=", "[", "]", "\n", "tot_lab_l", "=", "[", "]", "\n", "tot_pred_l", "=", "[", "]", "\n", "tot_pred_prob_l", "=", "[", "]", "\n", "for", "fn", "in", "os", ".", "listdir", "(", "score_dir", ")", ":", "\n", "        ", "if", "not", "(", "fn", ".", "startswith", "(", "\"test.\"", ")", "and", "fn", ".", "endswith", "(", "\".preds.txt\"", ")", ")", ":", "\n", "            ", "continue", "\n", "", "lab_l", "=", "[", "]", "\n", "pred_l", "=", "[", "]", "\n", "pred_prob_l", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "score_dir", "+", "\"/\"", "+", "fn", ")", ":", "\n", "            ", "chan_id", ",", "pred_prob", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "pred_prob", "=", "float", "(", "pred_prob", ")", "\n", "if", "chan_id", "not", "in", "chan_lab_d", ":", "\n", "                ", "continue", "\n", "", "lab_l", ".", "append", "(", "chan_lab_d", "[", "chan_id", "]", ")", "\n", "pred_l", ".", "append", "(", "int", "(", "pred_prob", ">=", "thresh", ")", ")", "\n", "pred_prob_l", ".", "append", "(", "pred_prob", ")", "\n", "tot_lab_l", ".", "append", "(", "chan_lab_d", "[", "chan_id", "]", ")", "\n", "tot_pred_l", ".", "append", "(", "int", "(", "pred_prob", ">=", "thresh", ")", ")", "\n", "tot_pred_prob_l", ".", "append", "(", "pred_prob", ")", "\n", "# Get stats", "\n", "", "auc", "=", "roc_auc_score", "(", "lab_l", ",", "pred_prob_l", ")", "\n", "prec", ",", "rec", ",", "f1_score", ",", "support", "=", "precision_recall_fscore_support", "(", "lab_l", ",", "pred_l", ",", "average", "=", "'binary'", ")", "\n", "prec_l", ".", "append", "(", "prec", ")", "\n", "rec_l", ".", "append", "(", "rec", ")", "\n", "f1_l", ".", "append", "(", "f1_score", ")", "\n", "base_rate_l", ".", "append", "(", "np", ".", "mean", "(", "lab_l", ")", ")", "\n", "auc_l", ".", "append", "(", "auc", ")", "\n", "# Get tot stats", "\n", "", "auc", "=", "roc_auc_score", "(", "tot_lab_l", ",", "tot_pred_prob_l", ")", "\n", "prec", ",", "rec", ",", "f1_score", ",", "support", "=", "precision_recall_fscore_support", "(", "tot_lab_l", ",", "tot_pred_l", ",", "average", "=", "'binary'", ")", "\n", "base_rate", "=", "np", ".", "mean", "(", "tot_lab_l", ")", "\n", "# Output", "\n", "print", "(", "\"Total instances:\"", ",", "len", "(", "tot_lab_l", ")", ")", "\n", "print", "(", "\"Metric \\ Min \\ Avg \\ Max \\ Total\"", ")", "\n", "for", "mt", ",", "ml", ",", "tot", "in", "[", "(", "'  ROC-AUC'", ",", "auc_l", ",", "auc", ")", ",", "(", "'Precision'", ",", "prec_l", ",", "prec", ")", ",", "(", "'   Recall'", ",", "rec_l", ",", "rec", ")", ",", "\n", "(", "' F1 Score'", ",", "f1_l", ",", "f1_score", ")", ",", "(", "'Base Rate'", ",", "base_rate_l", ",", "base_rate", ")", "]", ":", "\n", "        ", "m_min", "=", "\"%.4f\"", "%", "min", "(", "ml", ")", "\n", "m_avg", "=", "\"%.4f\"", "%", "np", ".", "mean", "(", "ml", ")", "\n", "m_max", "=", "\"%.4f\"", "%", "max", "(", "ml", ")", "\n", "tot", "=", "\"%.4f\"", "%", "tot", "\n", "print", "(", "\"\\t\"", ".", "join", "(", "[", "mt", ",", "m_min", ",", "m_avg", ",", "m_max", ",", "tot", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_commenter_subs_curl.expand_num": [[14, 22], ["float", "float", "float"], "function", ["None"], ["def", "expand_num", "(", "sub_raw", ")", ":", "\n", "    ", "if", "sub_raw", "[", "-", "1", "]", "==", "\"M\"", ":", "\n", "        ", "sub_c", "=", "float", "(", "sub_raw", "[", ":", "-", "1", "]", ")", "*", "1000000", "\n", "", "elif", "sub_raw", "[", "-", "1", "]", "==", "\"K\"", ":", "\n", "        ", "sub_c", "=", "float", "(", "sub_raw", "[", ":", "-", "1", "]", ")", "*", "1000", "\n", "", "else", ":", "\n", "        ", "sub_c", "=", "float", "(", "sub_raw", ")", "\n", "", "return", "sub_c", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_commenter_subs_curl.scrape_subscriptions": [[24, 69], ["[].rstrip", "json.loads", "sub_l.append", "int", "int", "vid_c_raw.replace().replace", "scrape_commenter_subs_curl.expand_num", "str", "str", "html.split", "[].split", "subs_c_raw.replace", "vid_c_raw.replace", "[].rstrip.split"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_commenter_subs_curl.expand_num"], ["", "def", "scrape_subscriptions", "(", "html", ")", ":", "\n", "    ", "\"\"\"\n    soup = BeautifulSoup(html, 'html.parser')\n    sub_l = []\n    for chan_sub in soup.find_all('div', class_=\"yt-lockup-content\"):\n        chan_name = chan_sub.find('a')['title']\n        chan_id = chan_sub.find('a')['href'].split(\"/\")[-1]\n        sub_d = chan_sub.find(class_='yt-subscription-button-subscriber-count-unbranded-horizontal yt-uix-tooltip')\n        sub_raw = sub_d[\"title\"] if sub_d is not None and sub_d.get(\"title\") else \"0\"\n        sub_c = expand_num(sub_raw)\n        sub_l.append((chan_id, chan_name, str(sub_c)))\n    \"\"\"", "\n", "try", ":", "\n", "        ", "page_info_str", "=", "[", "l", "for", "l", "in", "html", ".", "split", "(", "\"\\n\"", ")", "if", "'ytInitialData = '", "in", "l", "]", "[", "0", "]", "\n", "page_info_str", "=", "page_info_str", ".", "split", "(", "'ytInitialData = '", ")", "[", "1", "]", ".", "split", "(", "\"</script>\"", ")", "[", "0", "]", ".", "rstrip", "(", "';'", ")", "\n", "page_info_d", "=", "json", ".", "loads", "(", "page_info_str", ")", "\n", "sub_chan_l", "=", "[", "]", "\n", "for", "tab_d", "in", "page_info_d", "[", "'contents'", "]", "[", "'twoColumnBrowseResultsRenderer'", "]", "[", "'tabs'", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "sub_chan_l", "=", "tab_d", "[", "'tabRenderer'", "]", "[", "'content'", "]", "[", "'sectionListRenderer'", "]", "[", "'contents'", "]", "[", "0", "]", "[", "'itemSectionRenderer'", "]", "[", "'contents'", "]", "[", "0", "]", "[", "'gridRenderer'", "]", "[", "'items'", "]", "\n", "break", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "", "except", ":", "\n", "        ", "return", "[", "]", "\n", "", "sub_l", "=", "[", "]", "\n", "for", "sub_chan_d", "in", "sub_chan_l", ":", "\n", "        ", "try", ":", "\n", "            ", "chan_id", "=", "sub_chan_d", "[", "'gridChannelRenderer'", "]", "[", "'channelId'", "]", "\n", "chan_name", "=", "sub_chan_d", "[", "'gridChannelRenderer'", "]", "[", "'title'", "]", "[", "\"simpleText\"", "]", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "vid_c_raw", "=", "sub_chan_d", "[", "'gridChannelRenderer'", "]", "[", "\"videoCountText\"", "]", "[", "\"runs\"", "]", "[", "0", "]", "[", "\"text\"", "]", "\n", "videos_c", "=", "int", "(", "vid_c_raw", ".", "replace", "(", "\" videos\"", ",", "\"\"", ")", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ")", "\n", "", "except", ":", "\n", "            ", "videos_c", "=", "-", "1", "\n", "", "try", ":", "\n", "#subs_c_raw = sub_chan_d['gridChannelRenderer'][\"subscriberCountText\"][\"runs\"][0][\"text\"]", "\n", "            ", "subs_c_raw", "=", "sub_chan_d", "[", "'gridChannelRenderer'", "]", "[", "\"subscriberCountText\"", "]", "[", "\"simpleText\"", "]", "\n", "subs_c", "=", "int", "(", "expand_num", "(", "subs_c_raw", ".", "replace", "(", "\" subscribers\"", ",", "\"\"", ")", ")", ")", "\n", "", "except", ":", "\n", "            ", "subs_c", "=", "-", "1", "\n", "", "sub_l", ".", "append", "(", "(", "chan_id", ",", "chan_name", ",", "str", "(", "subs_c", ")", ",", "str", "(", "videos_c", ")", ")", ")", "\n", "", "return", "sub_l", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_commenter_subs_curl.scrape_all_channels": [[71, 128], ["os.path.exists", "random.shuffle", "print", "open.close", "os.system", "set", "open", "print", "set", "open", "print", "l.strip", "len", "print", "time.sleep", "scrape_commenter_subs_curl.scrape_subscriptions", "time_l.append", "len", "open", "vars", "subprocess.Popen().communicate", "len", "print", "open.write", "print", "datetime.datetime.now", "len", "print", "print", "os.system", "scrape_email_util.send_email", "open.close", "sys.exit", "vars", "l.strip", "open.write", "len", "l.split", "open", "subprocess.Popen", "vars", "vars", "list"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_commenter_subs_curl.scrape_subscriptions", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_email_util.send_email"], ["", "def", "scrape_all_channels", "(", "in_fp", ",", "out_fp", ",", "aws_access_key_id", ",", "aws_secret_access_key", ")", ":", "\n", "# Append if file exists!", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "out_fp", ")", ":", "\n", "        ", "already_scraped", "=", "set", "(", "[", "l", ".", "split", "(", "\"\\t\"", ")", "[", "0", "]", "for", "l", "in", "open", "(", "out_fp", ")", "]", ")", "\n", "of", "=", "open", "(", "out_fp", ",", "\"a\"", ")", "\n", "print", "(", "\"ALREADY SCRAPED:\"", ",", "len", "(", "already_scraped", ")", ")", "\n", "", "else", ":", "\n", "        ", "already_scraped", "=", "set", "(", "[", "]", ")", "\n", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "print", "(", "\"FRESH FILE.\"", ")", "\n", "# Scrape all unscraped channels", "\n", "", "chan_id_l", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "in_fp", ")", "if", "l", ".", "strip", "(", ")", "not", "in", "already_scraped", "]", "\n", "random", ".", "shuffle", "(", "chan_id_l", ")", "\n", "print", "(", "\"SCRAPING:\"", ",", "len", "(", "chan_id_l", ")", ")", "\n", "time_l", "=", "[", "]", "\n", "mv_error_c", "=", "0", "\n", "no_subs_c", "=", "0", "\n", "for", "channel_id", "in", "chan_id_l", ":", "\n", "        ", "url", "=", "\"https://www.youtube.com/channel/%(channel_id)s/channels\"", "%", "vars", "(", ")", "\n", "print", "(", "url", ")", "\n", "\"\"\"\n        try:\n            page = requests.get(url)\n        except:\n            print(datetime.datetime.now(), \"EXCEPTION THROWN\")\n            time.sleep(2)\n            continue\n        \"\"\"", "\n", "html", "=", "subprocess", ".", "Popen", "(", "'curl \"%(url)s\"'", "%", "vars", "(", ")", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ",", "encoding", "=", "'utf8'", ",", "shell", "=", "True", ")", ".", "communicate", "(", ")", "[", "0", "]", "\n", "if", "\"<TITLE>302 Moved</TITLE></HEAD><BODY>\"", "in", "html", ":", "\n", "            ", "mv_error_c", "+=", "1", "\n", "", "else", ":", "\n", "            ", "mv_error_c", "=", "0", "\n", "", "time", ".", "sleep", "(", "2", ")", "\n", "sub_l", "=", "scrape_subscriptions", "(", "html", ")", "\n", "if", "len", "(", "sub_l", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"NO SUBSCRIPTIONS.\"", ")", "\n", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "channel_id", "]", "+", "[", "\"\"", ",", "\"\"", ",", "\"\"", "]", ")", "+", "\"\\n\"", ")", "\n", "no_subs_c", "+=", "1", "\n", "", "else", ":", "\n", "            ", "for", "sub_tpl", "in", "sub_l", ":", "\n", "                ", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "channel_id", "]", "+", "list", "(", "sub_tpl", ")", ")", "+", "\"\\n\"", ")", "\n", "", "print", "(", "\"NUM SUBS:\"", ",", "len", "(", "sub_l", ")", ")", "\n", "no_subs_c", "=", "0", "\n", "", "time_l", ".", "append", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "if", "len", "(", "time_l", ")", ">", "5", ":", "\n", "            ", "avg_scrape_time_str", "=", "\"%.2f\"", "%", "(", "(", "time_l", "[", "-", "1", "]", "-", "time_l", "[", "-", "6", "]", ")", ".", "seconds", "/", "5.0", ")", "\n", "print", "(", "\"LAST 5 AVG SCRAPE TIME:\"", ",", "avg_scrape_time_str", ")", "\n", "", "if", "mv_error_c", ">=", "5", "or", "no_subs_c", ">=", "100", ":", "\n", "            ", "print", "(", "\"JOB FAILED.\"", ")", "\n", "os", ".", "system", "(", "\"touch %(out_fp)s.FAILED\"", "%", "vars", "(", ")", ")", "\n", "scrape_email_util", ".", "send_email", "(", "aws_access_key_id", ",", "aws_secret_access_key", ",", "\"SUB SCRAPE FINISHED - FAILED - \"", "+", "in_fp", ",", "out_fp", ")", "\n", "of", ".", "close", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "", "of", ".", "close", "(", ")", "\n", "#scrape_email_util.send_email(aws_access_key_id, aws_secret_access_key, \"SUB SCRAPE FINISHED - SUCCESS - \" + in_fp, in_fp)", "\n", "os", ".", "system", "(", "\"touch %(out_fp)s.SUCCESS\"", "%", "vars", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.get_top_videos.get_top_videos": [[5, 27], ["collections.defaultdict", "open", "open", "collections.defaultdict.items", "open.close", "chan_vid_l[].append", "sorted", "int", "sorted", "open.write", "line.strip().split", "line.strip", "map"], "function", ["None"], ["def", "get_top_videos", "(", "vid_fp", ",", "out_fp", ",", "most_recent_num", "=", "30", ",", "num_keep", "=", "10", ")", ":", "\n", "    ", "chan_vid_l", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "bad_vid_c", "=", "0", "\n", "for", "line", "in", "open", "(", "vid_fp", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "chan_id", ",", "vid_id", ",", "views", ",", "date_raw", ",", "date_posted", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "5", "]", "\n", "", "except", ":", "\n", "            ", "bad_vid_c", "+=", "1", "\n", "", "if", "vid_id", "==", "\"\"", ":", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "views_c", "=", "int", "(", "views", ")", "\n", "", "except", ":", "\n", "            ", "views_c", "=", "-", "1", "\n", "", "chan_vid_l", "[", "chan_id", "]", ".", "append", "(", "(", "date_posted", ",", "views_c", ",", "vid_id", ")", ")", "\n", "", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "for", "chan_id", ",", "vid_l", "in", "chan_vid_l", ".", "items", "(", ")", ":", "\n", "        ", "recent_l", "=", "sorted", "(", "vid_l", ",", "reverse", "=", "True", ")", "[", "0", ":", "most_recent_num", "]", "\n", "most_viewed", "=", "sorted", "(", "recent_l", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "for", "date_posted", ",", "views", ",", "vid_id", "in", "most_viewed", "[", "0", ":", "num_keep", "]", ":", "\n", "            ", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "[", "chan_id", ",", "vid_id", ",", "views", "]", ")", ")", "+", "\"\\n\"", ")", "\n", "", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.monitor_scrape.check_file_size": [[8, 41], ["print", "open", "print", "time.sleep", "datetime.datetime.now", "line.strip", "line.strip.split", "print", "os.system", "sys.exit", "vars", "int", "file_vals_l.append", "vars", "[].strip", "print", "print", "map", "subprocess.Popen().communicate", "subprocess.Popen"], "function", ["None"], ["def", "check_file_size", "(", "data_loc_fp", ",", "col_check", ",", "sub_string", ",", "email", ")", ":", "\n", "    ", "file_last_val_d", "=", "{", "}", "\n", "while", "True", ":", "\n", "# Check all files", "\n", "        ", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "same_c", "=", "0", "\n", "file_vals_l", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "data_loc_fp", ")", ":", "\n", "            ", "ec2_file_fp", "=", "line", ".", "strip", "(", ")", "\n", "if", "sub_string", "not", "in", "ec2_file_fp", ":", "continue", "\n", "ec2_ip", ",", "file_fp", "=", "ec2_file_fp", ".", "split", "(", "\":\"", ")", "\n", "cmd", "=", "'ssh %(ec2_ip)s \"cut -f %(col_check)s %(file_fp)s | sort | uniq | wc -l\"'", "%", "vars", "(", ")", "\n", "try", ":", "\n", "                ", "num_vals", "=", "int", "(", "subprocess", ".", "Popen", "(", "cmd", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", ".", "communicate", "(", ")", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"DATA PULL ERROR:\"", ",", "num_vals", ")", "\n", "num_vals", "=", "0", "\n", "", "print", "(", "num_vals", ",", "ec2_file_fp", ")", "\n", "if", "ec2_file_fp", "in", "file_last_val_d", ":", "\n", "                ", "last_num_vals", "=", "file_last_val_d", "[", "ec2_file_fp", "]", "\n", "if", "last_num_vals", "==", "num_vals", ":", "\n", "                    ", "print", "(", "\"NO CHANGE.\"", ")", "\n", "same_c", "+=", "1", "\n", "", "file_vals_l", ".", "append", "(", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "[", "last_num_vals", ",", "num_vals", ",", "ec2_file_fp", "]", ")", ")", ")", "\n", "", "file_last_val_d", "[", "ec2_file_fp", "]", "=", "num_vals", "\n", "", "print", "(", ")", "\n", "# Notify if there is an issue", "\n", "if", "same_c", ">", "0", ":", "\n", "            ", "body", "=", "\"\\n\"", ".", "join", "(", "file_vals_l", ")", "\n", "cmd", "=", "'echo \"%(body)s\" | mail -s \"SCRAPING ERROR - %(same_c)d stalled.\" %(email)s'", "%", "vars", "(", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "time", ".", "sleep", "(", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.get_new_commenter_ids.get_new_commenters": [[5, 34], ["set", "os.listdir", "set", "open", "set.difference", "open", "open.write", "open.close", "open", "open.write", "open.close", "print", "print", "print", "print", "open", "set.add", "len", "len", "len", "set.add", "line.strip().split", "line.strip().split", "line.strip", "line.strip"], "function", ["None"], ["def", "get_new_commenters", "(", "all_com_subs_dir", ",", "comments_fp", ",", "all_commenter_fp", ",", "need_sub_scrape_fp", ")", ":", "\n", "# Get set of previously scraped chans", "\n", "    ", "prev_scrape_commenters_s", "=", "set", "(", "[", "]", ")", "\n", "for", "subs_fn", "in", "os", ".", "listdir", "(", "all_com_subs_dir", ")", ":", "\n", "        ", "for", "line", "in", "open", "(", "all_com_subs_dir", "+", "\"/\"", "+", "subs_fn", ")", ":", "\n", "            ", "commenter_chan_id", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", "]", "\n", "prev_scrape_commenters_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "# Read over latest commenters fp", "\n", "", "", "latest_commenter_s", "=", "set", "(", "[", "]", ")", "\n", "bad_line_c", "=", "0", "\n", "for", "line", "in", "open", "(", "comments_fp", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "chan_id", ",", "vid_id", ",", "commenter_chan_id", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "3", "]", "\n", "", "except", ":", "\n", "            ", "bad_line_c", "+=", "1", "\n", "continue", "\n", "", "latest_commenter_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "# Output", "\n", "", "need_scrap_s", "=", "latest_commenter_s", ".", "difference", "(", "prev_scrape_commenters_s", ")", "\n", "of", "=", "open", "(", "need_sub_scrape_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "need_scrap_s", ")", ")", "\n", "of", ".", "close", "(", ")", "\n", "of", "=", "open", "(", "all_commenter_fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "latest_commenter_s", ")", ")", "\n", "of", ".", "close", "(", ")", "\n", "print", "(", "\"All commenters:\"", ",", "len", "(", "latest_commenter_s", ")", ")", "\n", "print", "(", "\"All need scrape:\"", ",", "len", "(", "need_scrap_s", ")", ")", "\n", "print", "(", "\"All prev scrape:\"", ",", "len", "(", "prev_scrape_commenters_s", ")", ")", "\n", "print", "(", "\"Bad lines:\"", ",", "bad_line_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_comments.parse_cat_info_coms_page": [[16, 19], ["re.search", "re.search.group"], "function", ["None"], ["def", "parse_cat_info_coms_page", "(", "html", ")", ":", "\n", "    ", "m", "=", "re", ".", "search", "(", "',\\\"category\\\":\\\"([^\\\"]+)\\\",'", ",", "html", ")", "\n", "return", "None", "if", "m", "is", "None", "else", "m", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_comments.parse_comments": [[21, 52], ["html.split", "re.search", "re.search.group", "comment.replace.replace", "re.search", "comment_l.append", "re.search", "re.search.group().strip().replace", "re.search.group().split", "str", "re.search.group().strip().replace", "int", "print", "re.finditer", "re.search.group().strip", "re.search.group", "int", "int", "re.search.group", "re.search.group().strip", "float", "re.search.group", "float", "re.search.group"], "function", ["None"], ["", "def", "parse_comments", "(", "html", ")", ":", "\n", "# Parsing comments                                                                                                                                                                                                                      ", "\n", "    ", "comment_l", "=", "[", "]", "\n", "for", "comment_section", "in", "html", ".", "split", "(", "'<a id=\"author-text\" class=\"yt-simple-endpoint style-scope ytd-comment-renderer\"'", ")", "[", "1", ":", "]", ":", "\n", "# Author                                                                                                                                                                                                                            ", "\n", "        ", "m", "=", "re", ".", "search", "(", "'href=\"/channel/([^\\\"]*)\"'", ",", "comment_section", ")", "\n", "if", "m", "is", "None", ":", "continue", "\n", "author_channel", "=", "m", ".", "group", "(", "1", ")", "\n", "# Comment                                                                                                                                                                                                                           ", "\n", "if", "'<span dir=\"auto\" class=\"style-scope yt-formatted-string\">'", "in", "comment_section", ":", "\n", "            ", "comment", "=", "\" \"", ".", "join", "(", "[", "m", ".", "group", "(", "1", ")", ".", "strip", "(", ")", ".", "replace", "(", "\"\\t\"", ",", "\" \"", ")", "for", "m", "in", "re", ".", "finditer", "(", "'<span dir=\"auto\" class=\"style-scope yt-formatted-string\">([^\\<]*)<'", ",", "comment_section", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "re", ".", "search", "(", "'id=\"content-text\" slot=\"content\" split-lines=\"\" class=\"style-scope ytd-comment-renderer\">([^\\<]*)<'", ",", "comment_section", ")", "\n", "comment", "=", "m", ".", "group", "(", "1", ")", ".", "strip", "(", ")", ".", "replace", "(", "\"\\t\"", ",", "\" \"", ")", "if", "m", "is", "not", "None", "else", "\"\"", "\n", "", "comment", "=", "comment", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "# Likes                                                                                                                                                                                                                             ", "\n", "m", "=", "re", ".", "search", "(", "'<span id=\"vote-count-left\" class=\"style-scope ytd-comment-action-buttons-renderer\" hidden=\"\" aria-label=\"([^\\\"]*)\">'", ",", "comment_section", ")", "\n", "likes_c", "=", "0", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "likes_raw_str", "=", "m", ".", "group", "(", "1", ")", ".", "split", "(", "\" \"", ")", "[", "0", "]", "\n", "try", ":", "\n", "                ", "if", "likes_raw_str", "[", "-", "1", "]", "==", "\"K\"", ":", "\n", "                    ", "likes_c", "=", "int", "(", "float", "(", "likes_raw_str", "[", ":", "-", "1", "]", ")", "*", "1000", ")", "\n", "", "elif", "likes_raw_str", "[", "-", "1", "]", "==", "\"M\"", ":", "\n", "                    ", "likes_c", "=", "int", "(", "float", "(", "likes_raw_str", "[", ":", "-", "1", "]", ")", "*", "1000000", ")", "\n", "", "else", ":", "\n", "                    ", "likes_c", "=", "int", "(", "likes_raw_str", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "\"ERROR - Parsing Likes:\"", ",", "m", ".", "group", "(", "1", ")", ")", "\n", "", "", "comment_l", ".", "append", "(", "(", "author_channel", ",", "comment", ",", "str", "(", "likes_c", ")", ")", ")", "\n", "", "return", "comment_l", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_comments.get_comment_count": [[78, 86], ["len", "html.split"], "function", ["None"], ["def", "get_comment_count", "(", "html", ")", ":", "\n", "    ", "if", "\"style-scope ytd-comment-renderer\"", "in", "html", ":", "\n", "        ", "no_comments_c", "=", "0", "\n", "# Estimate number of comments", "\n", "num_coms", "=", "len", "(", "html", ".", "split", "(", "\"</yt-formatted-string><yt-formatted-string id\"", ")", ")", "-", "1", "\n", "return", "num_coms", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.monitor_scrape_success_flag.check_file_exists": [[9, 13], ["subprocess.Popen().communicate", "str", "subprocess.Popen", "vars"], "function", ["None"], ["def", "check_file_exists", "(", "ec2_ip", ",", "flag_fp", ")", ":", "\n", "    ", "ls_res", "=", "subprocess", ".", "Popen", "(", "'ssh %(ec2_ip)s \"ls -l %(flag_fp)s\"'", "%", "vars", "(", ")", ",", "\n", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ")", ".", "communicate", "(", ")", "[", "0", "]", "\n", "return", "flag_fp", "in", "str", "(", "ls_res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.monitor_scrape_success_flag.check_file_flags": [[15, 48], ["os.system", "ec2_file_fp.strip().split", "len", "print", "print", "print", "print", "print", "print", "vars", "vars", "open", "datetime.datetime.now", "monitor_scrape_success_flag.check_file_exists", "len", "time.sleep", "ec2_file_fp.strip", "print", "monitor_scrape_success_flag.check_file_exists", "print", "file_info_l_temp.append", "print"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.monitor_scrape_success_flag.check_file_exists", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.monitor_scrape_success_flag.check_file_exists"], ["", "def", "check_file_flags", "(", "data_loc_fp", ",", "sub_string", ",", "email", ",", "seconds_sleep", "=", "300", ")", ":", "\n", "    ", "file_info_l", "=", "[", "ec2_file_fp", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\":\"", ")", "for", "ec2_file_fp", "in", "open", "(", "data_loc_fp", ")", "\n", "if", "sub_string", "in", "ec2_file_fp", "]", "\n", "success_c", "=", "0", "\n", "failed_c", "=", "0", "\n", "while", "len", "(", "file_info_l", ")", ">", "0", ":", "\n", "# Check all files", "\n", "        ", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "file_info_l_temp", "=", "[", "]", "\n", "for", "ec2_ip", ",", "file_fp", "in", "file_info_l", ":", "\n", "            ", "success_fp", "=", "file_fp", "+", "\".SUCCESS\"", "\n", "failed_fp", "=", "file_fp", "+", "\".FAILED\"", "\n", "if", "check_file_exists", "(", "ec2_ip", ",", "success_fp", ")", ":", "\n", "                ", "success_c", "+=", "1", "\n", "print", "(", "\"SUCCESS\\t\"", "+", "file_fp", "+", "\"\\t\"", "+", "ec2_ip", ")", "\n", "", "elif", "check_file_exists", "(", "ec2_ip", ",", "failed_fp", ")", ":", "\n", "                ", "failed_c", "+=", "1", "\n", "print", "(", "\"FAILED\\t\"", "+", "file_fp", "+", "\"\\t\"", "+", "ec2_ip", ")", "\n", "", "else", ":", "\n", "                ", "file_info_l_temp", ".", "append", "(", "(", "ec2_ip", ",", "file_fp", ")", ")", "\n", "print", "(", "\"NO RES\\t\"", "+", "file_fp", "+", "\"\\t\"", "+", "ec2_ip", ")", "\n", "", "", "print", "(", ")", "\n", "print", "(", "\"SUCCESS:\"", ",", "success_c", ")", "\n", "print", "(", "\"FAILED:\"", ",", "failed_c", ")", "\n", "print", "(", "\"NO RES:\"", ",", "len", "(", "file_info_l_temp", ")", ")", "\n", "print", "(", ")", "\n", "file_info_l", "=", "file_info_l_temp", "\n", "if", "file_info_l", ":", "\n", "            ", "time", ".", "sleep", "(", "seconds_sleep", ")", "\n", "# Notify when finished", "\n", "", "", "body", "=", "\"SUCCESS: %(success_c)d \\n FAILED: %(failed_c)d\"", "%", "vars", "(", ")", "\n", "cmd", "=", "'echo \"%(body)s\" | mail -s \"SCRAPING FINISHED.\" %(email)s'", "%", "vars", "(", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_commenter_subs_selenium.parse_subs": [[20, 38], ["html.split", "re.search", "re.search.group", "re.search", "re.search", "sub_l.append", "re.search.group", "re.search.group", "float", "float", "str", "float"], "function", ["None"], ["def", "parse_subs", "(", "html", ")", ":", "\n", "    ", "sub_l", "=", "[", "]", "\n", "for", "chan_seg", "in", "html", ".", "split", "(", "'<div id=\"channel\" class=\"style-scope ytd-grid-channel-renderer\">'", ")", "[", "1", ":", "]", ":", "\n", "        ", "m", "=", "re", ".", "search", "(", "'href=\"/channel/([^\\\"]+)\">'", ",", "chan_seg", ")", "\n", "if", "m", "is", "None", ":", "continue", "\n", "chan_id", "=", "m", ".", "group", "(", "1", ")", "\n", "m", "=", "re", ".", "search", "(", "'<span id=\"title\" class=\"style-scope ytd-grid-channel-renderer\">([^\\<]+)</span>'", ",", "chan_seg", ")", "\n", "chan_name", "=", "m", ".", "group", "(", "1", ")", "if", "m", "is", "not", "None", "else", "\"\"", "\n", "m", "=", "re", ".", "search", "(", "'<span id=\"thumbnail-attribution\" class=\"style-scope ytd-grid-channel-renderer\">(.+) subscribers</span>'", ",", "chan_seg", ")", "\n", "sub_raw", "=", "m", ".", "group", "(", "1", ")", "if", "m", "is", "not", "None", "else", "\"-1\"", "\n", "if", "sub_raw", "[", "-", "1", "]", "==", "\"M\"", ":", "\n", "            ", "sub_c", "=", "float", "(", "sub_raw", "[", ":", "-", "1", "]", ")", "*", "1000000", "\n", "", "elif", "sub_raw", "[", "-", "1", "]", "==", "\"K\"", ":", "\n", "            ", "sub_c", "=", "float", "(", "sub_raw", "[", ":", "-", "1", "]", ")", "*", "1000", "\n", "", "else", ":", "\n", "            ", "sub_c", "=", "float", "(", "sub_raw", ")", "\n", "", "sub_l", ".", "append", "(", "(", "chan_id", ",", "chan_name", ",", "str", "(", "sub_c", ")", ")", ")", "\n", "", "return", "sub_l", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_channel_latest_videos.age_conv": [[13, 31], ["age_raw.replace().split", "float", "age_raw.replace"], "function", ["None"], ["def", "age_conv", "(", "age_raw", ")", ":", "\n", "    ", "age_tpl", "=", "age_raw", ".", "replace", "(", "\"Streamed \"", ",", "\"\"", ")", ".", "split", "(", "\" \"", ")", "\n", "try", ":", "\n", "        ", "num", "=", "float", "(", "age_tpl", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "        ", "return", "-", "1", "\n", "", "if", "\"hour\"", "in", "age_tpl", "[", "1", "]", "or", "\"minute\"", "in", "age_tpl", "[", "1", "]", ":", "\n", "        ", "return", "0", "\n", "", "if", "\"day\"", "in", "age_tpl", "[", "1", "]", ":", "\n", "        ", "return", "num", "\n", "", "elif", "\"week\"", "in", "age_tpl", "[", "1", "]", ":", "\n", "        ", "return", "num", "*", "7", "\n", "", "elif", "\"month\"", "in", "age_tpl", "[", "1", "]", ":", "\n", "        ", "return", "num", "*", "30", "\n", "", "elif", "\"year\"", "in", "age_tpl", "[", "1", "]", ":", "\n", "        ", "return", "num", "*", "365", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_channel_latest_videos.parse_videos": [[33, 69], ["[].rstrip", "json.loads", "vid_out_l.append", "print", "views_raw.replace().replace", "html.split", "[].split", "views_raw.replace", "[].rstrip.split"], "function", ["None"], ["", "", "def", "parse_videos", "(", "html", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "page_info_str", "=", "[", "l", "for", "l", "in", "html", ".", "split", "(", "\"\\n\"", ")", "if", "'ytInitialData = '", "in", "l", "]", "[", "0", "]", "\n", "page_info_str", "=", "page_info_str", ".", "split", "(", "'ytInitialData = '", ")", "[", "1", "]", ".", "split", "(", "\"</script>\"", ")", "[", "0", "]", ".", "rstrip", "(", "';'", ")", "\n", "page_info_d", "=", "json", ".", "loads", "(", "page_info_str", ")", "\n", "vid_l", "=", "[", "]", "\n", "for", "tab_d", "in", "page_info_d", "[", "'contents'", "]", "[", "'twoColumnBrowseResultsRenderer'", "]", "[", "'tabs'", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "vid_l", "=", "tab_d", "[", "'tabRenderer'", "]", "[", "'content'", "]", "[", "'sectionListRenderer'", "]", "[", "'contents'", "]", "[", "0", "]", "[", "'itemSectionRenderer'", "]", "[", "'contents'", "]", "[", "0", "]", "[", "'gridRenderer'", "]", "[", "'items'", "]", "\n", "break", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "", "except", ":", "\n", "        ", "print", "(", "'VID PARSE ERROR.'", ")", "\n", "return", "[", "]", "\n", "", "vid_out_l", "=", "[", "]", "\n", "for", "vid_d", "in", "vid_l", ":", "\n", "        ", "try", ":", "\n", "            ", "vid_id", "=", "vid_d", "[", "'gridVideoRenderer'", "]", "[", "'videoId'", "]", "\n", "if", "'simpleText'", "in", "vid_d", "[", "'gridVideoRenderer'", "]", "[", "'title'", "]", ":", "\n", "                ", "title", "=", "vid_d", "[", "'gridVideoRenderer'", "]", "[", "'title'", "]", "[", "\"simpleText\"", "]", "\n", "", "else", ":", "\n", "                ", "title", "=", "vid_d", "[", "'gridVideoRenderer'", "]", "[", "'title'", "]", "[", "'runs'", "]", "[", "0", "]", "[", "'text'", "]", "\n", "", "", "except", ":", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "views_raw", "=", "vid_d", "[", "'gridVideoRenderer'", "]", "[", "\"viewCountText\"", "]", "[", "\"simpleText\"", "]", "\n", "views", "=", "views_raw", ".", "replace", "(", "\" views\"", ",", "\"\"", ")", ".", "replace", "(", "\",\"", ",", "\"\"", ")", "\n", "", "except", ":", "\n", "            ", "views", "=", "\"\"", "\n", "", "try", ":", "\n", "            ", "vid_age_raw", "=", "vid_d", "[", "'gridVideoRenderer'", "]", "[", "\"publishedTimeText\"", "]", "[", "\"simpleText\"", "]", "\n", "", "except", ":", "\n", "            ", "vid_age_raw", "=", "\"\"", "\n", "", "vid_out_l", ".", "append", "(", "(", "vid_id", ",", "views", ",", "vid_age_raw", ",", "title", ")", ")", "\n", "", "return", "vid_out_l", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_channel_latest_videos.scrape_channel_vids": [[71, 130], ["os.path.exists", "datetime.datetime.strptime", "random.shuffle", "open.close", "os.system", "set", "open", "print", "set", "open", "print", "range", "time_l.append", "len", "l.strip().split", "open", "print", "scrape_channel_latest_videos.parse_videos", "time.sleep", "len", "print", "open.write", "print", "datetime.datetime.now", "len", "print", "vars", "subprocess.Popen().communicate", "len", "print", "time.sleep", "scrape_channel_latest_videos.age_conv", "open.write", "len", "l.split", "open", "l.strip", "vars", "vars", "str", "subprocess.Popen", "vars", "datetime.timedelta"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_channel_latest_videos.parse_videos", "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_channel_latest_videos.age_conv"], ["", "def", "scrape_channel_vids", "(", "in_fp", ",", "out_fp", ",", "scrape_date_str", ",", "num_retries", "=", "5", ")", ":", "\n", "# Append if file exists", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "out_fp", ")", ":", "\n", "        ", "already_scraped", "=", "set", "(", "[", "l", ".", "split", "(", "\"\\t\"", ")", "[", "0", "]", "for", "l", "in", "open", "(", "out_fp", ")", "]", ")", "\n", "of", "=", "open", "(", "out_fp", ",", "\"a\"", ")", "\n", "print", "(", "\"ALREADY SCRAPED:\"", ",", "len", "(", "already_scraped", ")", ")", "\n", "", "else", ":", "\n", "        ", "already_scraped", "=", "set", "(", "[", "]", ")", "\n", "of", "=", "open", "(", "out_fp", ",", "\"w\"", ")", "\n", "print", "(", "\"FRESH FILE.\"", ")", "\n", "# Scrape all unscraped channels", "\n", "", "scrape_date_o", "=", "datetime", ".", "datetime", ".", "strptime", "(", "scrape_date_str", ",", "\"%Y-%m-%d\"", ")", "\n", "chan_id_l", "=", "[", "l", ".", "strip", "(", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "for", "l", "in", "open", "(", "in_fp", ")", "]", "\n", "random", ".", "shuffle", "(", "chan_id_l", ")", "\n", "time_l", "=", "[", "]", "\n", "for", "channel_id", "in", "chan_id_l", ":", "\n", "        ", "if", "channel_id", "in", "already_scraped", ":", "\n", "            ", "continue", "\n", "", "for", "try_num", "in", "range", "(", "1", ",", "num_retries", "+", "1", ")", ":", "\n", "# Try two different ways of formating the URL", "\n", "            ", "if", "try_num", "%", "2", "==", "0", ":", "\n", "                ", "url", "=", "\"https://www.youtube.com/channel/%(channel_id)s/videos\"", "%", "vars", "(", ")", "\n", "", "else", ":", "\n", "                ", "url", "=", "\"https://www.youtube.com/channel/%(channel_id)s/videos?view=0&sort=dd&shelf_id=0\"", "%", "vars", "(", ")", "\n", "", "print", "(", "\"Scraping:\"", ",", "url", ")", "\n", "\"\"\"\n            try:\n                page = requests.get(url)\n            except:\n                print(\"PAGE LOAD EXCEPTION - RETRY: \", try_num)\n                continue\n            time.sleep(1)\n            \"\"\"", "\n", "html", "=", "subprocess", ".", "Popen", "(", "'curl \"%(url)s\"'", "%", "vars", "(", ")", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ",", "encoding", "=", "'utf8'", ",", "shell", "=", "True", ")", ".", "communicate", "(", ")", "[", "0", "]", "\n", "vid_l", "=", "parse_videos", "(", "html", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "if", "len", "(", "vid_l", ")", ">", "0", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"NO VIDS - RETRY: \"", ",", "try_num", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "", "", "if", "len", "(", "vid_l", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"NO VIDEOS - FINAL.\"", ")", "\n", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "channel_id", ",", "\"\"", ",", "\"\"", ",", "\"\"", ",", "\"\"", ",", "\"\"", "]", ")", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "            ", "for", "vid_id", ",", "views", ",", "vid_age_raw", ",", "title", "in", "vid_l", ":", "\n", "                ", "days_old", "=", "age_conv", "(", "vid_age_raw", ")", "\n", "if", "days_old", "==", "-", "1", ":", "\n", "                    ", "date_posted", "=", "\"\"", "\n", "", "else", ":", "\n", "                    ", "date_posted", "=", "(", "scrape_date_o", "-", "datetime", ".", "timedelta", "(", "days", "=", "days_old", ")", ")", ".", "strftime", "(", "\"%Y-%m-%d\"", ")", "\n", "", "of", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "channel_id", ",", "vid_id", ",", "views", ",", "vid_age_raw", ",", "date_posted", ",", "title", "]", ")", "+", "\"\\n\"", ")", "\n", "", "print", "(", "\"NUM VIDS:\"", ",", "len", "(", "vid_l", ")", ")", "\n", "", "time_l", ".", "append", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "if", "len", "(", "time_l", ")", ">", "5", ":", "\n", "            ", "avg_scrape_time_str", "=", "\"%.2f\"", "%", "(", "(", "time_l", "[", "-", "1", "]", "-", "time_l", "[", "-", "6", "]", ")", ".", "seconds", "/", "5.0", ")", "\n", "print", "(", "\"LAST 5 AVG SCRAPE TIME: \"", "+", "str", "(", "avg_scrape_time_str", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "", "", "of", ".", "close", "(", ")", "\n", "os", ".", "system", "(", "\"touch %(out_fp)s.SUCCESS\"", "%", "vars", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.sample_chan_commenters.sample_chan_commenters": [[6, 55], ["set", "collections.defaultdict", "open", "collections.defaultdict", "sorted", "set", "collections.defaultdict.items", "set", "sorted", "open", "open", "set", "collections.defaultdict.items", "open.close", "open.close", "set.add", "chan_commenters_d[].add", "os.listdir", "print", "open", "os.listdir", "print", "open", "list", "random.shuffle", "len", "set.add", "set.add", "set.intersection", "open.write", "line.strip().split", "line.strip().split", "eleg_commenter_subs_d[].add", "line.strip().split", "open.write", "set.add", "line.strip", "line.strip", "line.strip"], "function", ["None"], ["def", "sample_chan_commenters", "(", "num_samp_commenters", ",", "min_subs", ",", "comments_fp", ",", "\n", "all_com_subs_dir", ",", "all_com_sel_subs_dir", ",", "\n", "commenters_samp_fp", ",", "commenters_samp_need_sel_fp", ")", ":", "\n", "# Read in the comments to sample commenters from", "\n", "    ", "latest_commenter_s", "=", "set", "(", "[", "]", ")", "\n", "chan_commenters_d", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "bad_line_c", "=", "0", "\n", "for", "line", "in", "open", "(", "comments_fp", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "chan_id", ",", "vid_id", ",", "commenter_chan_id", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "3", "]", "\n", "", "except", ":", "\n", "            ", "bad_line_c", "+=", "1", "\n", "continue", "\n", "", "latest_commenter_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "chan_commenters_d", "[", "chan_id", "]", ".", "add", "(", "commenter_chan_id", ")", "\n", "# Get elegible commenters", "\n", "", "eleg_commenter_subs_d", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "subs_fn", "in", "sorted", "(", "os", ".", "listdir", "(", "all_com_subs_dir", ")", ")", ":", "\n", "        ", "print", "(", "\"LOADING:\"", ",", "subs_fn", ")", "\n", "for", "line", "in", "open", "(", "all_com_subs_dir", "+", "\"/\"", "+", "subs_fn", ")", ":", "\n", "            ", "commenter_chan_id", ",", "chan_id", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "2", "]", "\n", "if", "commenter_chan_id", "in", "latest_commenter_s", ":", "\n", "                ", "eleg_commenter_subs_d", "[", "commenter_chan_id", "]", ".", "add", "(", "chan_id", ")", "\n", "", "", "", "elegible_commenters_s", "=", "set", "(", "[", "]", ")", "\n", "for", "commenter_chan_id", ",", "subs_s", "in", "eleg_commenter_subs_d", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "subs_s", ")", ">=", "min_subs", ":", "\n", "            ", "elegible_commenters_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "# Get all selenium subs", "\n", "", "", "prev_sel_sub_scrap", "=", "set", "(", "[", "]", ")", "\n", "for", "subs_fn", "in", "sorted", "(", "os", ".", "listdir", "(", "all_com_sel_subs_dir", ")", ")", ":", "\n", "        ", "print", "(", "\"LOADING:\"", ",", "subs_fn", ")", "\n", "for", "line", "in", "open", "(", "all_com_sel_subs_dir", "+", "\"/\"", "+", "subs_fn", ")", ":", "\n", "            ", "commenter_chan_id", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", "0", "]", "\n", "prev_sel_sub_scrap", ".", "add", "(", "commenter_chan_id", ")", "\n", "# Sample and output channels", "\n", "", "", "of_samp", "=", "open", "(", "commenters_samp_fp", ",", "\"w\"", ")", "\n", "of_need_sel", "=", "open", "(", "commenters_samp_need_sel_fp", ",", "\"w\"", ")", "\n", "need_sel_out_s", "=", "set", "(", "[", "]", ")", "\n", "for", "chan_id", ",", "commenters_s", "in", "chan_commenters_d", ".", "items", "(", ")", ":", "\n", "        ", "chan_eleg_l", "=", "list", "(", "elegible_commenters_s", ".", "intersection", "(", "commenters_s", ")", ")", "\n", "random", ".", "shuffle", "(", "chan_eleg_l", ")", "\n", "for", "commenter_chan_id", "in", "chan_eleg_l", "[", "0", ":", "num_samp_commenters", "]", ":", "\n", "            ", "of_samp", ".", "write", "(", "chan_id", "+", "\"\\t\"", "+", "commenter_chan_id", "+", "\"\\n\"", ")", "\n", "# Check if has already been scraped", "\n", "if", "commenter_chan_id", "not", "in", "prev_sel_sub_scrap", "and", "commenter_chan_id", "not", "in", "need_sel_out_s", ":", "\n", "                ", "of_need_sel", ".", "write", "(", "commenter_chan_id", "+", "\"\\n\"", ")", "\n", "need_sel_out_s", ".", "add", "(", "commenter_chan_id", ")", "\n", "", "", "", "of_samp", ".", "close", "(", ")", "\n", "of_need_sel", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.copy_ec2_data.check_file_size": [[8, 26], ["open", "open", "open.close", "os.path.exists", "os.makedirs", "line.strip", "line.strip.split", "print", "os.system", "open", "os.system", "vars", "open.write", "file_fp.split", "line.strip"], "function", ["None"], ["def", "check_file_size", "(", "data_loc_fp", ",", "local_work_dir", ",", "sub_string", ",", "comb_fp", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "local_work_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "local_work_dir", ")", "\n", "", "of", "=", "open", "(", "comb_fp", ",", "\"w\"", ")", "\n", "for", "line", "in", "open", "(", "data_loc_fp", ")", ":", "\n", "        ", "ec2_file_fp", "=", "line", ".", "strip", "(", ")", "\n", "if", "sub_string", "not", "in", "ec2_file_fp", ":", "continue", "\n", "ec2_ip", ",", "file_fp", "=", "ec2_file_fp", ".", "split", "(", "\":\"", ")", "\n", "local_fp", "=", "local_work_dir", "+", "\"/\"", "+", "file_fp", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "cmd", "=", "'scp %(ec2_file_fp)s %(local_fp)s'", "%", "vars", "(", ")", "\n", "print", "(", "cmd", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "# Add to file", "\n", "for", "line", "in", "open", "(", "local_fp", ")", ":", "\n", "            ", "of", ".", "write", "(", "line", ".", "strip", "(", "\"\\n\"", ")", "+", "\"\\n\"", ")", "\n", "# Compress", "\n", "", "os", ".", "system", "(", "\"gzip \"", "+", "local_fp", ")", "\n", "", "of", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_batch_start.start_batch_scrape": [[14, 130], ["len", "random.shuffle", "range", "open", "open.close", "os.path.exists", "os.makedirs", "l.strip", "l.strip", "int", "os.system", "os.system", "range", "open", "open", "open", "open.write", "open.close", "scrape_data_fp_l.append", "open", "open.write", "open.close", "scrape_data_fp_l.append", "os.system", "print", "os.system", "install_in_prog_l.append", "len", "print", "time.sleep", "scrape_script_fp.split", "vars", "os.system", "print", "print", "os.system", "time.sleep", "len", "str", "vars", "ec2_setup_script_fp.split", "vars", "datetime.datetime.now", "len", "vars", "data_fp.split", "vars", "open.write", "open.write", "print", "sys.exit", "str", "subprocess.Popen().communicate", "str", "install_in_prog_l_temp.append", "vars", "vars", "open.write", "str", "str", "vars", "vars", "open.write", "subprocess.Popen", "vars", "vars", "open.write", "line.split", "vars", "vars", "vars"], "function", ["None"], ["def", "start_batch_scrape", "(", "scrape_ids_fp", ",", "ec2_ip_fp", ",", "work_dir", ",", "data_loc_fp", ",", "\n", "ec2_setup_script_fp", ",", "scrape_type", ",", "\n", "aws_access_id", ",", "aws_secret_key", ",", "\n", "num_jobs_per_inst", "=", "2", ",", "skip_install", "=", "False", ",", "scrape_date", "=", "None", ")", ":", "\n", "    ", "if", "scrape_type", "==", "COMMENT_SCRAPE", ":", "\n", "        ", "scrape_script_fp", "=", "'./data_collection/python/scrape_comments.py'", "\n", "", "elif", "scrape_type", "==", "SUBS_CURL_SCRAPE", ":", "\n", "        ", "scrape_script_fp", "=", "'./data_collection/python/scrape_commenter_subs_curl.py'", "\n", "", "elif", "scrape_type", "==", "SUBS_SELENIUM_SCRAPE", ":", "\n", "        ", "scrape_script_fp", "=", "'./data_collection/python/scrape_commenter_subs_selenium.py'", "\n", "", "elif", "scrape_type", "==", "VIDEO_CURL_SCRAPE", ":", "\n", "        ", "scrape_script_fp", "=", "'./data_collection/python/scrape_channel_latest_videos.py'", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"SCRAPE TYPE NOT SUPPORTED:\"", ",", "scrape_type", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "work_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "work_dir", ")", "\n", "", "ec2_ip_l", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "ec2_ip_fp", ")", "]", "\n", "num_ec2_insts", "=", "len", "(", "ec2_ip_l", ")", "\n", "scrape_ids_l", "=", "[", "l", ".", "strip", "(", "\"\\n\"", ")", "for", "l", "in", "open", "(", "scrape_ids_fp", ")", "]", "\n", "# Split up vids", "\n", "# Shuffle so that jobs take a similar amount of time", "\n", "num_files", "=", "num_ec2_insts", "*", "num_jobs_per_inst", "\n", "num_lines_per_file", "=", "int", "(", "len", "(", "scrape_ids_l", ")", "/", "num_files", ")", "+", "1", "\n", "random", ".", "shuffle", "(", "scrape_ids_l", ")", "\n", "scrape_data_fp_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_files", ")", ":", "\n", "        ", "if", "scrape_type", "==", "COMMENT_SCRAPE", ":", "\n", "            ", "fp", "=", "work_dir", "+", "\"/vid_ids.txt.\"", "+", "str", "(", "i", ")", "\n", "of", "=", "open", "(", "fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "\"\\t\"", ".", "join", "(", "line", ".", "split", "(", "\"\\t\"", ")", "[", "0", ":", "2", "]", ")", "for", "line", "\n", "in", "scrape_ids_l", "[", "i", "*", "num_lines_per_file", ":", "(", "i", "+", "1", ")", "*", "num_lines_per_file", "]", "]", ")", ")", "\n", "of", ".", "close", "(", ")", "\n", "scrape_data_fp_l", ".", "append", "(", "fp", ")", "\n", "", "else", ":", "\n", "            ", "if", "scrape_type", "==", "SUBS_CURL_SCRAPE", ":", "\n", "                ", "fp", "=", "work_dir", "+", "\"/commenter_ids.txt.\"", "+", "str", "(", "i", ")", "\n", "", "elif", "scrape_type", "==", "VIDEO_CURL_SCRAPE", ":", "\n", "                ", "fp", "=", "work_dir", "+", "\"/chan_ids.txt.\"", "+", "str", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "fp", "=", "work_dir", "+", "\"/commenter_need_sel_ids.txt.\"", "+", "str", "(", "i", ")", "\n", "", "of", "=", "open", "(", "fp", ",", "\"w\"", ")", "\n", "of", ".", "write", "(", "\"\\n\"", ".", "join", "(", "[", "line", "for", "line", "in", "scrape_ids_l", "[", "i", "*", "num_lines_per_file", ":", "(", "i", "+", "1", ")", "*", "num_lines_per_file", "]", "]", ")", ")", "\n", "of", ".", "close", "(", ")", "\n", "scrape_data_fp_l", ".", "append", "(", "fp", ")", "\n", "# Install packages on each machine (in parallel)", "\n", "", "", "if", "not", "skip_install", ":", "\n", "# Copy over and run script to install necessary packages", "\n", "        ", "install_in_prog_l", "=", "[", "]", "\n", "for", "ec2_ip", "in", "ec2_ip_l", ":", "\n", "            ", "cmd", "=", "\"scp %(ec2_setup_script_fp)s %(ec2_ip)s:/home/ubuntu/\"", "%", "vars", "(", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "ec2_setup_script_fn", "=", "ec2_setup_script_fp", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "cmd", "=", "'ssh %(ec2_ip)s \"nohup /home/ubuntu/%(ec2_setup_script_fn)s  > /home/ubuntu/INSTALL.stdout 2> /home/ubuntu/INSTALL.stderr &\"'", "%", "vars", "(", ")", "\n", "print", "(", "cmd", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "install_in_prog_l", ".", "append", "(", "ec2_ip", ")", "\n", "# Wait for scripts to finish installing", "\n", "", "success_fp_loc", "=", "\"/home/ubuntu/_SUCCESS\"", "\n", "while", "len", "(", "install_in_prog_l", ")", ">", "0", ":", "\n", "            ", "print", "(", "\"WAITING FOR INSTALLS - \"", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ",", "len", "(", "install_in_prog_l", ")", ")", "\n", "install_in_prog_l_temp", "=", "[", "]", "\n", "for", "ec2_ip", "in", "install_in_prog_l", ":", "\n", "                ", "ls_res", "=", "subprocess", ".", "Popen", "(", "'ssh %(ec2_ip)s \"ls -l %(success_fp_loc)s\"'", "%", "vars", "(", ")", ",", "\n", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ")", ".", "communicate", "(", ")", "[", "0", "]", "\n", "if", "success_fp_loc", "not", "in", "str", "(", "ls_res", ")", ":", "\n", "                    ", "install_in_prog_l_temp", ".", "append", "(", "ec2_ip", ")", "\n", "", "", "install_in_prog_l", "=", "install_in_prog_l_temp", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "# Start jobs on each machine", "\n", "", "", "fp_c", "=", "0", "\n", "of_ec2_data", "=", "open", "(", "data_loc_fp", ",", "\"w\"", ")", "\n", "for", "ec2_ip", "in", "ec2_ip_l", ":", "\n", "# Copy over script to run for scraping", "\n", "        ", "scrape_script_fn", "=", "scrape_script_fp", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "cmd", "=", "\"scp %(scrape_script_fp)s %(ec2_ip)s:/home/ubuntu/python/\"", "%", "vars", "(", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "os", ".", "system", "(", "\"scp data_collection/python/scrape_email_util.py %(ec2_ip)s:/home/ubuntu/python/\"", "%", "vars", "(", ")", ")", "\n", "# Copy over data and start scraping", "\n", "for", "job_num", "in", "range", "(", "1", ",", "num_jobs_per_inst", "+", "1", ")", ":", "\n", "            ", "data_fp", "=", "scrape_data_fp_l", "[", "fp_c", "]", "\n", "data_fn", "=", "data_fp", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "ec2_data_fp", "=", "\"/home/ubuntu/data/\"", "+", "data_fn", "\n", "cmd", "=", "\"scp %(data_fp)s %(ec2_ip)s:%(ec2_data_fp)s\"", "%", "vars", "(", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "print", "(", "cmd", ")", "\n", "# Select command", "\n", "if", "scrape_type", "==", "COMMENT_SCRAPE", ":", "\n", "                ", "ec2_data_out1_fp", "=", "ec2_data_fp", "+", "\".cat_info\"", "\n", "ec2_data_out2_fp", "=", "ec2_data_fp", "+", "\".comments\"", "\n", "scrape_cmd", "=", "\"python3 /home/ubuntu/python/%(scrape_script_fn)s %(ec2_data_fp)s %(ec2_data_out1_fp)s %(ec2_data_out2_fp)s %(aws_access_id)s %(aws_secret_key)s\"", "%", "vars", "(", ")", "\n", "cmd", "=", "'ssh %(ec2_ip)s \"nohup env PATH=$PATH:/home/ubuntu/ %(scrape_cmd)s > %(ec2_data_out1_fp)s.stdout 2> %(ec2_data_out1_fp)s.stderr &\"'", "%", "vars", "(", ")", "\n", "of_ec2_data", ".", "write", "(", "ec2_ip", "+", "\":\"", "+", "ec2_data_out1_fp", "+", "\"\\n\"", ")", "\n", "of_ec2_data", ".", "write", "(", "ec2_ip", "+", "\":\"", "+", "ec2_data_out2_fp", "+", "\"\\n\"", ")", "\n", "", "elif", "scrape_type", "==", "SUBS_CURL_SCRAPE", ":", "\n", "                ", "ec2_data_out_fp", "=", "ec2_data_fp", "+", "\".subs\"", "\n", "scrape_cmd", "=", "\"python3 /home/ubuntu/python/%(scrape_script_fn)s %(ec2_data_fp)s %(ec2_data_out_fp)s %(aws_access_id)s %(aws_secret_key)s\"", "%", "vars", "(", ")", "\n", "cmd", "=", "'ssh %(ec2_ip)s \"nohup %(scrape_cmd)s > %(ec2_data_out_fp)s.stdout 2> %(ec2_data_out_fp)s.stderr &\"'", "%", "vars", "(", ")", "\n", "of_ec2_data", ".", "write", "(", "ec2_ip", "+", "\":\"", "+", "ec2_data_out_fp", "+", "\"\\n\"", ")", "\n", "", "elif", "scrape_type", "==", "SUBS_SELENIUM_SCRAPE", ":", "\n", "                ", "ec2_data_out_fp", "=", "ec2_data_fp", "+", "\".sel_subs\"", "\n", "scrape_cmd", "=", "\"python3 /home/ubuntu/python/%(scrape_script_fn)s %(ec2_data_fp)s %(ec2_data_out_fp)s %(aws_access_id)s %(aws_secret_key)s\"", "%", "vars", "(", ")", "\n", "cmd", "=", "'ssh %(ec2_ip)s \"nohup env PATH=$PATH:/home/ubuntu/ %(scrape_cmd)s > %(ec2_data_out_fp)s.stdout 2> %(ec2_data_out_fp)s.stderr &\"'", "%", "vars", "(", ")", "\n", "of_ec2_data", ".", "write", "(", "ec2_ip", "+", "\":\"", "+", "ec2_data_out_fp", "+", "\"\\n\"", ")", "\n", "", "elif", "scrape_type", "==", "VIDEO_CURL_SCRAPE", ":", "\n", "                ", "ec2_data_out_fp", "=", "ec2_data_fp", "+", "\".vids\"", "\n", "scrape_cmd", "=", "\"python3 /home/ubuntu/python/%(scrape_script_fn)s --chan-fp %(ec2_data_fp)s --out-fp %(ec2_data_out_fp)s --scrape-date %(scrape_date)s\"", "%", "vars", "(", ")", "\n", "cmd", "=", "'ssh %(ec2_ip)s \"nohup %(scrape_cmd)s > %(ec2_data_out_fp)s.stdout 2> %(ec2_data_out_fp)s.stderr &\"'", "%", "vars", "(", ")", "\n", "of_ec2_data", ".", "write", "(", "ec2_ip", "+", "\":\"", "+", "ec2_data_out_fp", "+", "\"\\n\"", ")", "\n", "# Run command", "\n", "", "print", "(", "cmd", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "\n", "fp_c", "+=", "1", "\n", "", "", "of_ec2_data", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_email_util.send_email": [[31, 56], ["boto3.client", "boto3.client.send_email", "vars"], "function", ["home.repos.pwc.inspect_result.sam-clark_chan2vec.python.scrape_email_util.send_email"], ["def", "send_email", "(", "aws_access_key_id", ",", "aws_secret_access_key", ",", "subject", ",", "body", ")", ":", "\n", "    ", "client", "=", "boto3", ".", "client", "(", "'ses'", ",", "region_name", "=", "AWS_REGION", ",", "aws_access_key_id", "=", "aws_access_key_id", ",", "aws_secret_access_key", "=", "aws_secret_access_key", ")", "\n", "response", "=", "client", ".", "send_email", "(", "\n", "Destination", "=", "{", "\n", "'ToAddresses'", ":", "[", "\n", "RECIPIENT", ",", "\n", "]", ",", "\n", "}", ",", "\n", "Message", "=", "{", "\n", "'Body'", ":", "{", "\n", "'Html'", ":", "{", "\n", "'Charset'", ":", "CHARSET", ",", "\n", "'Data'", ":", "BODY_HTML", "%", "vars", "(", ")", ",", "\n", "}", ",", "\n", "'Text'", ":", "{", "\n", "'Charset'", ":", "CHARSET", ",", "\n", "'Data'", ":", "body", ",", "\n", "}", ",", "\n", "}", ",", "\n", "'Subject'", ":", "{", "\n", "'Charset'", ":", "CHARSET", ",", "\n", "'Data'", ":", "subject", ",", "\n", "}", ",", "\n", "}", ",", "\n", "Source", "=", "SENDER", ",", "\n", "# If you are not using a configuration set, comment or delete the", "\n"]]}