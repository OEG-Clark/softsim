{"home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.islower": [[27, 29], ["lowerReg.match"], "function", ["None"], ["def", "islower", "(", "s", ")", ":", "\n", "    ", "return", "lowerReg", ".", "match", "(", "s", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.isupper": [[35, 37], ["upperReg.match"], "function", ["None"], ["def", "isupper", "(", "s", ")", ":", "\n", "    ", "return", "upperReg", ".", "match", "(", "s", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.calc_atom_feature": [[40, 70], ["feature.append", "feature.append", "feature.append", "feature.append", "feature.append", "feature.append", "feature.extend", "feature.extend", "atom.GetSymbol", "Chiral.get", "Hybridization.get", "atom.GetSymbol", "atom.GetTotalNumHs", "atom.GetTotalDegree", "atom.GetFormalCharge", "atom.GetTotalValence", "atom.IsInRing", "atom.GetIsAromatic", "len", "str", "len", "str", "atom.GetSymbol", "atom.GetChiralTag", "Chiral.get", "atom.GetHybridization", "Hybridization.get", "atom.GetSymbol", "str", "str", "atom.GetChiralTag", "atom.GetHybridization"], "function", ["None"], ["", "def", "calc_atom_feature", "(", "atom", ")", ":", "\n", "    ", "if", "atom", ".", "GetSymbol", "(", ")", "==", "'H'", ":", "\n", "        ", "feature", "=", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "elif", "atom", ".", "GetSymbol", "(", ")", "==", "'C'", ":", "\n", "        ", "feature", "=", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", "\n", "", "elif", "atom", ".", "GetSymbol", "(", ")", "==", "'O'", ":", "\n", "        ", "feature", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", "\n", "", "elif", "atom", ".", "GetSymbol", "(", ")", "==", "'N'", ":", "\n", "        ", "feature", "=", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "feature", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "\n", "", "feature", ".", "append", "(", "atom", ".", "GetTotalNumHs", "(", ")", "/", "8", ")", "\n", "feature", ".", "append", "(", "atom", ".", "GetTotalDegree", "(", ")", "/", "4", ")", "\n", "feature", ".", "append", "(", "atom", ".", "GetFormalCharge", "(", ")", "/", "8", ")", "\n", "feature", ".", "append", "(", "atom", ".", "GetTotalValence", "(", ")", "/", "8", ")", "\n", "feature", ".", "append", "(", "atom", ".", "IsInRing", "(", ")", "*", "1", ")", "\n", "feature", ".", "append", "(", "atom", ".", "GetIsAromatic", "(", ")", "*", "1", ")", "\n", "\n", "f", "=", "[", "0", "]", "*", "(", "len", "(", "Chiral", ")", "-", "1", ")", "\n", "if", "Chiral", ".", "get", "(", "str", "(", "atom", ".", "GetChiralTag", "(", ")", ")", ",", "0", ")", "!=", "0", ":", "\n", "        ", "f", "[", "Chiral", ".", "get", "(", "str", "(", "atom", ".", "GetChiralTag", "(", ")", ")", ",", "0", ")", "]", "=", "1", "\n", "", "feature", ".", "extend", "(", "f", ")", "\n", "\n", "f", "=", "[", "0", "]", "*", "(", "len", "(", "Hybridization", ")", "-", "1", ")", "\n", "if", "Hybridization", ".", "get", "(", "str", "(", "atom", ".", "GetHybridization", "(", ")", ")", ",", "0", ")", "!=", "0", ":", "\n", "        ", "f", "[", "Hybridization", ".", "get", "(", "str", "(", "atom", ".", "GetHybridization", "(", ")", ")", ",", "0", ")", "]", "=", "1", "\n", "", "feature", ".", "extend", "(", "f", ")", "\n", "\n", "return", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.calc_structure_feature": [[72, 125], ["c.isdigit", "label.append", "int"], "function", ["None"], ["", "def", "calc_structure_feature", "(", "c", ",", "flag", ",", "label", ")", ":", "\n", "    ", "feature", "=", "[", "0", "]", "*", "structInfo", "\n", "\n", "if", "c", "==", "'('", ":", "\n", "        ", "feature", "[", "0", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "')'", ":", "\n", "        ", "feature", "[", "1", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "'['", ":", "\n", "        ", "feature", "[", "2", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "']'", ":", "\n", "        ", "feature", "[", "3", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "'.'", ":", "\n", "        ", "feature", "[", "4", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "':'", ":", "\n", "        ", "feature", "[", "5", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "'='", ":", "\n", "        ", "feature", "[", "6", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "'#'", ":", "\n", "        ", "feature", "[", "7", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "'\\\\'", ":", "\n", "        ", "feature", "[", "8", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "'/'", ":", "\n", "        ", "feature", "[", "9", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "'@'", ":", "\n", "        ", "feature", "[", "10", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "elif", "c", "==", "'+'", ":", "\n", "        ", "feature", "[", "11", "]", "=", "1", "\n", "flag", "=", "1", "\n", "", "elif", "c", "==", "'-'", ":", "\n", "        ", "feature", "[", "12", "]", "=", "1", "\n", "flag", "=", "1", "\n", "", "elif", "c", ".", "isdigit", "(", ")", "==", "True", ":", "\n", "        ", "if", "flag", "==", "0", ":", "\n", "            ", "if", "c", "in", "label", ":", "\n", "                ", "feature", "[", "20", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "label", ".", "append", "(", "c", ")", "\n", "feature", "[", "19", "]", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "feature", "[", "int", "(", "c", ")", "-", "1", "+", "12", "]", "=", "1", "\n", "flag", "=", "0", "\n", "", "", "return", "(", "feature", ",", "flag", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.calc_featurevector": [[127, 155], ["molfeature.extend", "feature.islower", "feature.isupper", "molfeature.extend", "molfeature.extend", "feature.calc_structure_feature", "molfeature.extend", "molfeature.extend", "molfeature.extend", "feature.calc_atom_feature", "rdkit.Chem.rdchem.Mol.GetAtomWithIdx"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.islower", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.isupper", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.calc_structure_feature", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.calc_atom_feature"], ["", "def", "calc_featurevector", "(", "mol", ",", "smiles", ",", "atomsize", ")", ":", "\n", "    ", "flag", "=", "0", "\n", "label", "=", "[", "]", "\n", "molfeature", "=", "[", "]", "\n", "idx", "=", "0", "\n", "j", "=", "0", "\n", "\n", "for", "c", "in", "smiles", ":", "\n", "        ", "if", "islower", "(", "c", ")", "==", "True", ":", "\n", "            ", "continue", "\n", "", "elif", "isupper", "(", "c", ")", "==", "True", ":", "\n", "            ", "if", "c", "==", "'H'", ":", "\n", "                ", "molfeature", ".", "extend", "(", "H_Vector", ")", "\n", "", "else", ":", "\n", "                ", "molfeature", ".", "extend", "(", "calc_atom_feature", "(", "rdchem", ".", "Mol", ".", "GetAtomWithIdx", "(", "mol", ",", "idx", ")", ")", ")", "\n", "idx", "=", "idx", "+", "1", "\n", "", "molfeature", ".", "extend", "(", "[", "0", "]", "*", "structInfo", ")", "\n", "j", "=", "j", "+", "1", "\n", "\n", "", "else", ":", "\n", "            ", "molfeature", ".", "extend", "(", "[", "0", "]", "*", "atomInfo", ")", "\n", "f", ",", "flag", ",", "label", "=", "calc_structure_feature", "(", "c", ",", "flag", ",", "label", ")", "\n", "molfeature", ".", "extend", "(", "f", ")", "\n", "j", "=", "j", "+", "1", "\n", "\n", "# 0-Padding", "\n", "", "", "molfeature", ".", "extend", "(", "[", "0", "]", "*", "(", "atomsize", "-", "j", ")", "*", "lensize", ")", "\n", "return", "(", "molfeature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.mol_to_feature": [[157, 167], ["feature.calc_featurevector", "rdkit.Chem.MolToSmiles", "rdkit.Chem.MolToSmiles", "rdkit.Chem.MolFromSmiles", "rdkit.Chem.MolToSmiles", "rdkit.Chem.MolToSmiles", "int", "int"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.calc_featurevector"], ["", "def", "mol_to_feature", "(", "mol", ",", "n", ",", "atomsize", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "defaultSMILES", "=", "Chem", ".", "MolToSmiles", "(", "mol", ",", "kekuleSmiles", "=", "False", ",", "isomericSmiles", "=", "True", ",", "rootedAtAtom", "=", "int", "(", "n", ")", ")", "\n", "", "except", ":", "\n", "        ", "defaultSMILES", "=", "Chem", ".", "MolToSmiles", "(", "mol", ",", "kekuleSmiles", "=", "False", ",", "isomericSmiles", "=", "True", ")", "\n", "", "try", ":", "\n", "        ", "isomerSMILES", "=", "Chem", ".", "MolToSmiles", "(", "mol", ",", "kekuleSmiles", "=", "True", ",", "isomericSmiles", "=", "True", ",", "rootedAtAtom", "=", "int", "(", "n", ")", ")", "\n", "", "except", ":", "\n", "        ", "isomerSMILES", "=", "Chem", ".", "MolToSmiles", "(", "mol", ",", "kekuleSmiles", "=", "True", ",", "isomericSmiles", "=", "True", ")", "\n", "", "return", "calc_featurevector", "(", "Chem", ".", "MolFromSmiles", "(", "defaultSMILES", ")", ",", "isomerSMILES", ",", "atomsize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.mol_to_allSMILESfeature": [[169, 180], ["mol.GetNumAtoms", "rdkit.Chem.MolToSmiles", "features.append", "rdkit.Chem.MolToSmiles", "feature.calc_featurevector", "int", "rdkit.Chem.MolFromSmiles", "int"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.feature.calc_featurevector"], ["", "def", "mol_to_allSMILESfeature", "(", "mol", ",", "atomsize", ")", ":", "\n", "    ", "idx", ",", "features", "=", "0", ",", "[", "]", "\n", "while", "idx", "<", "mol", ".", "GetNumAtoms", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "defaultSMILES", "=", "Chem", ".", "MolToSmiles", "(", "mol", ",", "kekuleSmiles", "=", "False", ",", "isomericSmiles", "=", "True", ",", "rootedAtAtom", "=", "int", "(", "idx", ")", ")", "\n", "", "except", ":", "\n", "            ", "break", "\n", "", "isomerSMILES", "=", "Chem", ".", "MolToSmiles", "(", "mol", ",", "kekuleSmiles", "=", "True", ",", "isomericSmiles", "=", "True", ",", "rootedAtAtom", "=", "int", "(", "idx", ")", ")", "\n", "features", ".", "append", "(", "calc_featurevector", "(", "Chem", ".", "MolFromSmiles", "(", "defaultSMILES", ")", ",", "isomerSMILES", ",", "atomsize", ")", ")", "\n", "idx", "=", "idx", "+", "1", "\n", "", "return", "(", "features", ")", "", "", ""]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.MultiHeadAttention.__init__": [[139, 149], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model_", ",", "num_heads_", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads_", "\n", "self", ".", "d_model", "=", "d_model_", "\n", "assert", "d_model_", "%", "self", ".", "num_heads", "==", "0", "\n", "self", ".", "depth", "=", "d_model_", "//", "self", ".", "num_heads", "\n", "self", ".", "wq", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ")", "\n", "self", ".", "wk", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ")", "\n", "self", ".", "wv", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.MultiHeadAttention.split_heads": [[150, 156], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x_", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Split the last dimension into (num_heads, depth).\n        Transpose the result such that the shape is (batch_size, num_heads, seq_len, depth)\n        \"\"\"", "\n", "x_", "=", "tf", ".", "reshape", "(", "x_", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "depth", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x_", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.MultiHeadAttention.call": [[157, 174], ["singleTask.MultiHeadAttention.wq", "singleTask.MultiHeadAttention.wk", "singleTask.MultiHeadAttention.wv", "singleTask.MultiHeadAttention.split_heads", "singleTask.MultiHeadAttention.split_heads", "singleTask.MultiHeadAttention.split_heads", "singleTask.scaled_dot_product_attention", "tensorflow.transpose", "tensorflow.reshape", "singleTask.MultiHeadAttention.dense", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.scaled_dot_product_attention"], ["", "def", "call", "(", "self", ",", "v", ",", "k", ",", "q", ",", "mask", ")", ":", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "q", ")", "[", "0", "]", "\n", "q", "=", "self", ".", "wq", "(", "q", ")", "# (batch_size, seq_len, d_model)", "\n", "k", "=", "self", ".", "wk", "(", "k", ")", "# (batch_size, seq_len, d_model)", "\n", "v", "=", "self", ".", "wv", "(", "v", ")", "# (batch_size, seq_len, d_model)", "\n", "q", "=", "self", ".", "split_heads", "(", "q", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_q, depth)", "\n", "k", "=", "self", ".", "split_heads", "(", "k", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_k, depth)", "\n", "v", "=", "self", ".", "split_heads", "(", "v", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_v, depth)", "\n", "# scaled_attention.shape == (batch_size, num_heads, seq_len_q, depth)", "\n", "# attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)", "\n", "scaled_attention", ",", "attention_weights", "=", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", "\n", "scaled_attention", "=", "tf", ".", "transpose", "(", "scaled_attention", ",", "\n", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "# (batch_size, seq_len_q, num_heads, depth)", "\n", "concat_attention", "=", "tf", ".", "reshape", "(", "scaled_attention", ",", "\n", "(", "batch_size", ",", "-", "1", ",", "self", ".", "d_model", ")", ")", "# (batch_size, seq_len_q, d_model)", "\n", "output", "=", "self", ".", "dense", "(", "concat_attention", ")", "# (batch_size, seq_len_q, d_model)", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.EncoderLayer.__init__": [[184, 192], ["super().__init__", "singleTask.MultiHeadAttention", "singleTask.point_wise_feed_forward_network", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.point_wise_feed_forward_network"], ["    ", "def", "__init__", "(", "self", ",", "d_model_", ",", "num_heads_", ",", "dff_", ",", "rate", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mha", "=", "MultiHeadAttention", "(", "d_model_", ",", "num_heads_", ")", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model_", ",", "dff_", ")", "\n", "self", ".", "layernorm1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "layernorm2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "dropout1", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout2", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.EncoderLayer.call": [[193, 201], ["singleTask.EncoderLayer.mha", "singleTask.EncoderLayer.dropout1", "singleTask.EncoderLayer.layernorm1", "singleTask.EncoderLayer.ffn", "singleTask.EncoderLayer.dropout2", "singleTask.EncoderLayer.layernorm2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", ",", "mask", ")", ":", "\n", "        ", "attn_output", ",", "_", "=", "self", ".", "mha", "(", "x", ",", "x", ",", "x", ",", "mask", ")", "# (batch_size, input_seq_len, d_model)", "\n", "attn_output", "=", "self", ".", "dropout1", "(", "attn_output", ",", "training", "=", "training", ")", "\n", "out1", "=", "self", ".", "layernorm1", "(", "x", "+", "attn_output", ")", "# (batch_size, input_seq_len, d_model)", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out1", ")", "# (batch_size, input_seq_len, d_model)", "\n", "ffn_output", "=", "self", ".", "dropout2", "(", "ffn_output", ",", "training", "=", "training", ")", "\n", "out2", "=", "self", ".", "layernorm2", "(", "out1", "+", "ffn_output", ")", "# (batch_size, input_seq_len, d_model)", "\n", "return", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.Encoder.__init__": [[219, 234], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.constant", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.initializers.Constant", "singleTask.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers_", ",", "d_model_", ",", "num_heads_", ",", "dff_", ",", "maximum_position_encoding", ",", "output_bias", ",", "seq_len", ",", "rate", "=", "0.1", ")", ":", "#input_vocab and max_vocab are the same", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "output_bias", "is", "not", "None", ":", "\n", "            ", "output_bias", "=", "tf", ".", "keras", ".", "initializers", ".", "Constant", "(", "output_bias", ")", "\n", "", "self", ".", "seq_size", "=", "seq_len", "\n", "self", ".", "d_model", "=", "d_model_", "\n", "self", ".", "num_layers", "=", "num_layers_", "\n", "self", ".", "enc_layers", "=", "[", "EncoderLayer", "(", "d_model_", ",", "num_heads_", ",", "dff_", ",", "rate", ")", "for", "_", "in", "range", "(", "num_layers_", ")", "]", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "semi_final", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "\n", "\n", "#self.gru = tf.keras.layers.GRU(self.d_model, return_sequences=True)", "\n", "self", ".", "pads1", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "5", "-", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "self", ".", "conv1", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "self", ".", "d_model", ",", "[", "5", ",", "self", ".", "d_model", "]", ",", "strides", "=", "1", ")", "\n", "self", ".", "final_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "args", ".", "n_out", ",", "bias_initializer", "=", "output_bias", ")", "#, activation='sigmoid'", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.Encoder.call": [[235, 253], ["singleTask.Encoder.conv1", "tensorflow.pad", "range", "singleTask.Encoder.dropout", "singleTask.Encoder.semi_final", "singleTask.Encoder.final_layer", "tensorflow.squeeze", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Reshape", "tensorflow.math.sigmoid"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x_", ",", "training", ",", "mask_att", ",", "justmask", ")", ":", "\n", "\n", "#x_ *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))", "\n", "#x_ += self.pos_encoding[:, :seq_len, :]", "\n", "        ", "x_", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "[", "self", ".", "seq_size", ",", "self", ".", "d_model", ",", "1", "]", ")", "(", "x_", ")", "\n", "x_", "=", "self", ".", "conv1", "(", "x_", ")", "\n", "x_", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "[", "self", ".", "seq_size", "-", "5", "+", "1", ",", "self", ".", "d_model", "]", ")", "(", "x_", ")", "\n", "x_", "=", "tf", ".", "pad", "(", "x_", ",", "self", ".", "pads1", ")", "#shape (batch, 200, d_model)", "\n", "#x_ = self.gru(x_, mask=justmask)", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x_", "=", "self", ".", "enc_layers", "[", "i", "]", "(", "x_", ",", "training", ",", "mask_att", ")", "\n", "\n", "", "x_", "=", "self", ".", "dropout", "(", "x_", ",", "training", "=", "training", ")", "##<= reached 89", "\n", "out", "=", "self", ".", "semi_final", "(", "x_", ")", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "[", "self", ".", "seq_size", "]", ")", "(", "out", ")", "#since final layer has dimension size of 1", "\n", "out", "=", "self", ".", "final_layer", "(", "out", ")", "# (batch_size, 1)", "\n", "out", "=", "tf", ".", "squeeze", "(", "out", ",", "axis", "=", "[", "1", "]", ")", "\n", "return", "out", ",", "tf", ".", "math", ".", "sigmoid", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.CustomSchedule.__init__": [[256, 261], ["super().__init__", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model_", ",", "warmup_steps", "=", "4000", ")", ":", "\n", "        ", "super", "(", "CustomSchedule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model_", "\n", "self", ".", "d_model", "=", "tf", ".", "cast", "(", "self", ".", "d_model", ",", "tf", ".", "float32", ")", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.CustomSchedule.__call__": [[262, 266], ["tensorflow.math.rsqrt", "tensorflow.math.rsqrt", "tensorflow.math.minimum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step", ")", ":", "\n", "        ", "arg1", "=", "tf", ".", "math", ".", "rsqrt", "(", "step", ")", "\n", "arg2", "=", "step", "*", "(", "self", ".", "warmup_steps", "**", "-", "1.5", ")", "\n", "return", "tf", ".", "math", ".", "rsqrt", "(", "self", ".", "d_model", ")", "*", "tf", ".", "math", ".", "minimum", "(", "arg1", ",", "arg2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.posNegNums": [[50, 59], ["None"], "function", ["None"], ["def", "posNegNums", "(", "ydata", ")", ":", "\n", "    ", "cntP", "=", "0", "\n", "cntN", "=", "0", "\n", "for", "ele", "in", "ydata", ":", "\n", "        ", "if", "ele", "==", "1", ":", "\n", "            ", "cntP", "+=", "1", "\n", "", "else", ":", "\n", "            ", "cntN", "+=", "1", "\n", "", "", "return", "cntP", ",", "cntN", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.random_list": [[62, 65], ["numpy.random.seed", "numpy.random.shuffle"], "function", ["None"], ["", "def", "random_list", "(", "x", ",", "seed", "=", "0", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.char2indices": [[67, 77], ["enumerate", "len"], "function", ["None"], ["", "def", "char2indices", "(", "listStr", ",", "dicC2I", ")", ":", "\n", "    ", "listIndices", "=", "[", "0", "]", "*", "200", "\n", "charlist", "=", "listStr", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "charlist", ")", ":", "\n", "        ", "if", "c", "not", "in", "dicC2I", ":", "\n", "            ", "dicC2I", "[", "c", "]", "=", "len", "(", "dicC2I", ")", "\n", "listIndices", "[", "i", "]", "=", "dicC2I", "[", "c", "]", "\n", "", "else", ":", "\n", "            ", "listIndices", "[", "i", "]", "=", "dicC2I", "[", "c", "]", "\n", "", "", "return", "listIndices", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.makeDataForSmilesOnly": [[78, 106], ["open", "open.readlines", "open.close", "print", "singleTask.random_list", "singleTask.random_list", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "singleTask.posNegNums", "print", "tensorflow.data.Dataset.from_tensor_slices().batch", "tensorflow.data.Dataset.from_tensor_slices().batch", "tensorflow.data.Dataset.from_tensor_slices().batch", "line.split", "listX.append", "listY.append", "len", "singleTask.char2indices", "float", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.random_list", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.random_list", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.posNegNums", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.char2indices"], ["", "def", "makeDataForSmilesOnly", "(", "proteinName", ",", "dicC2I_", ")", ":", "\n", "    ", "listX", ",", "listY", "=", "[", "]", ",", "[", "]", "\n", "afile", "=", "args", ".", "input", "+", "'/'", "+", "proteinName", "+", "'_wholetraining.smiles'", "\n", "f", "=", "open", "(", "afile", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "cntTooLong", "=", "0", "\n", "weirdButUseful", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "splitted", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "splitted", "[", "0", "]", ")", ">=", "200", ":", "\n", "            ", "cntTooLong", "+=", "1", "\n", "if", "splitted", "[", "1", "]", "==", "\"1\"", ":", "\n", "                ", "weirdButUseful", "+=", "1", "\n", "", "continue", "\n", "", "listX", ".", "append", "(", "char2indices", "(", "splitted", "[", "0", "]", ",", "dicC2I_", ")", ")", "#length can vary", "\n", "listY", ".", "append", "(", "float", "(", "splitted", "[", "1", "]", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "print", "(", "\"how many weird cases exist?\"", ",", "cntTooLong", ",", "weirdButUseful", ")", "\n", "random_list", "(", "listX", ")", "\n", "random_list", "(", "listY", ")", "\n", "train_x", ",", "test_x", ",", "train_y", ",", "test_y", "=", "train_test_split", "(", "listX", ",", "listY", ",", "test_size", "=", "0.1", ")", "\n", "train_x", ",", "valid_x", ",", "train_y", ",", "valid_y", "=", "train_test_split", "(", "train_x", ",", "train_y", ",", "test_size", "=", "0.1111", ")", "\n", "pos_num", ",", "neg_num", "=", "posNegNums", "(", "train_y", ")", "\n", "print", "(", "\"pos_num, neg_num\"", ",", "pos_num", ",", "neg_num", ")", "\n", "train_tf", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "train_x", ",", "train_y", ")", ")", ".", "batch", "(", "args", ".", "batchsize", ")", "\n", "valid_tf", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "valid_x", ",", "valid_y", ")", ")", ".", "batch", "(", "args", ".", "batchsize", ")", "\n", "test_tf", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "test_x", ",", "test_y", ")", ")", ".", "batch", "(", "args", ".", "batchsize", ")", "\n", "return", "train_tf", ",", "valid_tf", ",", "test_tf", ",", "pos_num", ",", "neg_num", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.scaled_dot_product_attention": [[111, 136], ["tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.math.sqrt", "tensorflow.shape"], "function", ["None"], ["def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Calculate the attention weights.\n    q, k, v must have matching leading dimensions.\n    k, v must have matching penultimate dimension, i.e.: seq_len_k = seq_len_v.\n    The mask has different shapes depending on its type(padding or look ahead) but it must be broadcastable for addition.\n    Args:\n      q: query shape == (..., seq_len_q, depth)\n      k: key shape == (..., seq_len_k, depth)\n      v: value shape == (..., seq_len_v, depth_v)\n      mask: Float tensor with shape broadcastable to (..., seq_len_q, seq_len_k). Defaults to None.\n    Returns:\n      output, attention_weights\n    \"\"\"", "\n", "matmul_qk", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (..., seq_len_q, seq_len_k)", "\n", "# scale matmul_qk", "\n", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "# add the mask to the scaled tensor.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e9", ")", "\n", "# softmax is normalized on the last axis (seq_len_k) so that the scores", "\n", "# add up to 1.", "\n", "", "attention_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scaled_attention_logits", ",", "axis", "=", "-", "1", ")", "# (..., seq_len_q, seq_len_k)", "\n", "output", "=", "tf", ".", "matmul", "(", "attention_weights", ",", "v", ")", "# (..., seq_len_q, depth_v)", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.point_wise_feed_forward_network": [[176, 180], ["tensorflow.keras.Sequential", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "", "def", "point_wise_feed_forward_network", "(", "d_model_", ",", "dff_", ")", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dff_", ",", "activation", "=", "\"relu\"", ",", "bias_initializer", "=", "'glorot_uniform'", ",", "use_bias", "=", "True", ")", ",", "#dff_, activation='relu'),  # (batch_size, seq_len, dff)", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ",", "bias_initializer", "=", "'glorot_uniform'", ",", "use_bias", "=", "True", ")", "#d_model_)  # (batch_size, seq_len, d_model)", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.loss_function": [[283, 287], ["tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.reduce_mean"], "function", ["None"], ["def", "loss_function", "(", "real", ",", "pred_logit", ",", "sampleW", "=", "None", ")", ":", "\n", "#loss_ = loss_object(real, pred)", "\n", "    ", "cross_ent", "=", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "logits", "=", "pred_logit", ",", "labels", "=", "real", ",", "pos_weight", "=", "sampleW", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "cross_ent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.create_padding_mask_fp2vec": [[289, 295], ["tensorflow.math.equal", "tensorflow.cast", "tensorflow.math.logical_not"], "function", ["None"], ["", "def", "create_padding_mask_fp2vec", "(", "seq", ")", ":", "\n", "    ", "baseseq", "=", "tf", ".", "math", ".", "equal", "(", "seq", ",", "0", ")", "\n", "seq", "=", "tf", ".", "cast", "(", "baseseq", ",", "tf", ".", "float32", ")", "\n", "# add extra dimensions to add the padding", "\n", "# to the attention logits.", "\n", "return", "seq", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "tf", ".", "math", ".", "logical_not", "(", "baseseq", ")", "# (batch_size, 1, 1, seq_len)", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.create_padding_mask_scfp": [[297, 303], ["tensorflow.cast", "tensorflow.cast", "tensorflow.math.equal", "tensorflow.math.argmin"], "function", ["None"], ["", "def", "create_padding_mask_scfp", "(", "seq", ")", ":", "\n", "    ", "seq", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "equal", "(", "seq", ",", "0", ")", ",", "tf", ".", "float32", ")", "\n", "seq", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "argmin", "(", "seq", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "float32", ")", "\n", "# add extra dimensions to add the padding", "\n", "# to the attention logits.", "\n", "return", "seq", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "seq", "# (batch_size, 1, 1, atom_size)", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.train_step": [[311, 319], ["singleTask.create_padding_mask_fp2vec", "tape.gradient", "optimizer.apply_gradients", "train_loss", "tensorflow.GradientTape", "encoder", "singleTask.loss_function", "zip", "tensorflow.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.create_padding_mask_fp2vec", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.loss_function"], ["def", "train_step", "(", "inp_", ",", "real", ")", ":", "# shape is [batch, seq_len]", "\n", "    ", "inp_padding_mask", ",", "justmask", "=", "create_padding_mask_fp2vec", "(", "inp_", ")", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "        ", "pred_logit_", ",", "pred", "=", "encoder", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings_", ",", "inp_", ")", ",", "True", ",", "inp_padding_mask", ",", "justmask", ")", "\n", "loss", "=", "loss_function", "(", "real", ",", "pred_logit_", ",", "sampleW", "=", "weight_for_1", ")", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "loss", ",", "encoder", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "encoder", ".", "trainable_variables", ")", ")", "\n", "train_loss", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.singleTask.eval_step": [[321, 328], ["singleTask.create_padding_mask_fp2vec", "encoder", "precFunc.update_state", "recallFunc.update_state", "AUCFunc.update_state", "accFunc.update_state", "tensorflow.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.create_padding_mask_fp2vec"], ["", "def", "eval_step", "(", "inp_", ",", "real", ")", ":", "\n", "    ", "inp_padding_mask", ",", "justmask", "=", "create_padding_mask_fp2vec", "(", "inp_", ")", "\n", "_", ",", "pred", "=", "encoder", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings_", ",", "inp_", ")", ",", "False", ",", "inp_padding_mask", ",", "justmask", ")", "\n", "precFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "recallFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "AUCFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "accFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.ensemble.getScore": [[21, 34], ["open", "open.readlines", "open.close", "line.split", "testlistY.append", "len", "float"], "function", ["None"], ["", "def", "getScore", "(", "proteinName", ")", ":", "\n", "    ", "testlistX", ",", "testlistY", "=", "[", "]", ",", "[", "]", "\n", "testfile", "=", "\"TOX21/\"", "+", "proteinName", "+", "'_score.smiles'", "\n", "testf", "=", "open", "(", "testfile", ")", "\n", "lines", "=", "testf", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "splitted", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "splitted", "[", "0", "]", ")", ">=", "200", ":", "\n", "            ", "continue", "\n", "", "testlistY", ".", "append", "(", "float", "(", "splitted", "[", "1", "]", ")", ")", "\n", "", "testf", ".", "close", "(", ")", "\n", "#print(len(testlistY))", "\n", "return", "testlistY", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.ensemble.loadPickle": [[51, 59], ["pickle.load", "open", "range", "tensorflow.math.add"], "function", ["None"], ["def", "loadPickle", "(", "givenNum", ",", "logitsWhole", ")", ":", "\n", "    ", "curLogits", "=", "pickle", ".", "load", "(", "open", "(", "\"logit\"", "+", "givenNum", ",", "\"rb\"", ")", ")", "#tf.float32 dtype", "\n", "if", "logitsWhole", "is", "None", ":", "\n", "        ", "logitsWhole", "=", "curLogits", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "            ", "logitsWhole", "[", "i", "]", "=", "tf", ".", "math", ".", "add", "(", "curLogits", "[", "i", "]", ",", "logitsWhole", "[", "i", "]", ")", "\n", "", "", "return", "logitsWhole", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.ensemble.applysigmoid": [[60, 65], ["range", "tensorflow.math.sigmoid"], "function", ["None"], ["", "def", "applysigmoid", "(", "alist", ")", ":", "\n", "#tmpres = [[] for i in range(12)]", "\n", "    ", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "        ", "alist", "[", "i", "]", "=", "tf", ".", "math", ".", "sigmoid", "(", "alist", "[", "i", "]", ")", "\n", "", "return", "alist", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.__init__": [[225, 235], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model_", ",", "num_heads_", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads_", "\n", "self", ".", "d_model", "=", "d_model_", "\n", "assert", "d_model_", "%", "self", ".", "num_heads", "==", "0", "\n", "self", ".", "depth", "=", "d_model_", "//", "self", ".", "num_heads", "\n", "self", ".", "wq", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ")", "\n", "self", ".", "wk", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ")", "\n", "self", ".", "wv", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.split_heads": [[236, 242], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x_", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Split the last dimension into (num_heads, depth).\n        Transpose the result such that the shape is (batch_size, num_heads, seq_len, depth)\n        \"\"\"", "\n", "x_", "=", "tf", ".", "reshape", "(", "x_", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "depth", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x_", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.call": [[243, 260], ["selfAttMulticlass.MultiHeadAttention.MultiHeadAttention.wq", "selfAttMulticlass.MultiHeadAttention.MultiHeadAttention.wk", "selfAttMulticlass.MultiHeadAttention.MultiHeadAttention.wv", "selfAttMulticlass.MultiHeadAttention.MultiHeadAttention.split_heads", "selfAttMulticlass.MultiHeadAttention.MultiHeadAttention.split_heads", "selfAttMulticlass.MultiHeadAttention.MultiHeadAttention.split_heads", "selfAttMulticlass.scaled_dot_product_attention", "tensorflow.transpose", "tensorflow.reshape", "selfAttMulticlass.MultiHeadAttention.MultiHeadAttention.dense", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.MultiHeadAttention.split_heads", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.scaled_dot_product_attention"], ["", "def", "call", "(", "self", ",", "v", ",", "k", ",", "q", ",", "mask", ")", ":", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "q", ")", "[", "0", "]", "\n", "q", "=", "self", ".", "wq", "(", "q", ")", "# (batch_size, seq_len, d_model)", "\n", "k", "=", "self", ".", "wk", "(", "k", ")", "# (batch_size, seq_len, d_model)", "\n", "v", "=", "self", ".", "wv", "(", "v", ")", "# (batch_size, seq_len, d_model)", "\n", "q", "=", "self", ".", "split_heads", "(", "q", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_q, depth)", "\n", "k", "=", "self", ".", "split_heads", "(", "k", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_k, depth)", "\n", "v", "=", "self", ".", "split_heads", "(", "v", ",", "batch_size", ")", "# (batch_size, num_heads, seq_len_v, depth)", "\n", "# scaled_attention.shape == (batch_size, num_heads, seq_len_q, depth)", "\n", "# attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)", "\n", "scaled_attention", ",", "attention_weights", "=", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", "\n", "scaled_attention", "=", "tf", ".", "transpose", "(", "scaled_attention", ",", "\n", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "# (batch_size, seq_len_q, num_heads, depth)", "\n", "concat_attention", "=", "tf", ".", "reshape", "(", "scaled_attention", ",", "\n", "(", "batch_size", ",", "-", "1", ",", "self", ".", "d_model", ")", ")", "# (batch_size, seq_len_q, d_model)", "\n", "output", "=", "self", ".", "dense", "(", "concat_attention", ")", "# (batch_size, seq_len_q, d_model)", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.EncoderLayer.__init__": [[270, 278], ["super().__init__", "selfAttMulticlass.EncoderLayer.MultiHeadAttention", "selfAttMulticlass.point_wise_feed_forward_network", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.point_wise_feed_forward_network"], ["    ", "def", "__init__", "(", "self", ",", "d_model_", ",", "num_heads_", ",", "dff_", ",", "rate", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mha", "=", "MultiHeadAttention", "(", "d_model_", ",", "num_heads_", ")", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model_", ",", "dff_", ")", "\n", "self", ".", "layernorm1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "layernorm2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-6", ")", "\n", "self", ".", "dropout1", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout2", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.EncoderLayer.call": [[279, 287], ["selfAttMulticlass.EncoderLayer.EncoderLayer.mha", "selfAttMulticlass.EncoderLayer.EncoderLayer.dropout1", "selfAttMulticlass.EncoderLayer.EncoderLayer.layernorm1", "selfAttMulticlass.EncoderLayer.EncoderLayer.ffn", "selfAttMulticlass.EncoderLayer.EncoderLayer.dropout2", "selfAttMulticlass.EncoderLayer.EncoderLayer.layernorm2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", ",", "mask", ")", ":", "\n", "        ", "attn_output", ",", "_", "=", "self", ".", "mha", "(", "x", ",", "x", ",", "x", ",", "mask", ")", "# (batch_size, input_seq_len, d_model)", "\n", "attn_output", "=", "self", ".", "dropout1", "(", "attn_output", ",", "training", "=", "training", ")", "\n", "out1", "=", "self", ".", "layernorm1", "(", "x", "+", "attn_output", ")", "# (batch_size, input_seq_len, d_model)", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out1", ")", "# (batch_size, input_seq_len, d_model)", "\n", "ffn_output", "=", "self", ".", "dropout2", "(", "ffn_output", ",", "training", "=", "training", ")", "\n", "out2", "=", "self", ".", "layernorm2", "(", "out1", "+", "ffn_output", ")", "# (batch_size, input_seq_len, d_model)", "\n", "return", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomFC.__init__": [[305, 310], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_bias", ",", "d_model_", ")", ":", "\n", "        ", "super", "(", "CustomFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model_", "\n", "self", ".", "finalFC1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "args", ".", "n_out", ",", "bias_initializer", "=", "output_bias", ")", "\n", "self", ".", "finalFC2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "args", ".", "n_out", ",", "bias_initializer", "=", "output_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomFC.call": [[311, 317], ["selfAttMulticlass.CustomFC.CustomFC.finalFC1", "selfAttMulticlass.CustomFC.CustomFC.finalFC2", "tensorflow.keras.layers.Reshape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "seq_len", ")", ":", "\n", "        ", "out", "=", "self", ".", "finalFC1", "(", "inputs", ")", "\n", "##out = tf.keras.layers.Reshape([self.d_model])(out)#seq_len])(out)", "\n", "out", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "[", "seq_len", "]", ")", "(", "out", ")", "\n", "out", "=", "self", ".", "finalFC2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomHot.__init__": [[320, 322], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CustomHot", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomHot.call": [[323, 325], ["tensorflow.one_hot"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "tf", ".", "one_hot", "(", "inputs", ",", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomRSum.__init__": [[327, 329], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CustomRSum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "call", "(", "self", ",", "inputs", ",", "dWhich", ")", ":", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomRSum.call": [[329, 331], ["tensorflow.math.reduce_sum"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "dWhich", ")", ":", "\n", "        ", "return", "tf", ".", "math", ".", "reduce_sum", "(", "inputs", "*", "dWhich", ",", "axis", "=", "1", ")", "# only the 1 instnce survives", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.Encoder.__init__": [[334, 359], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.constant", "tensorflow.keras.layers.Conv2D", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "selfAttMulticlass.Encoder.CustomFC", "tensorflow.keras.initializers.Constant", "selfAttMulticlass.Encoder.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers_", ",", "d_model_", ",", "num_heads_", ",", "dff_", ",", "output_bias", ",", "rate", "=", "0.1", ",", "seq_size", "=", "None", ")", ":", "# input_vocab and max_vocab are the same", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "output_bias", "is", "not", "None", ":", "\n", "            ", "output_bias", "=", "tf", ".", "keras", ".", "initializers", ".", "Constant", "(", "output_bias", ")", "\n", "", "self", ".", "seq_size", "=", "seq_size", "\n", "self", ".", "d_model", "=", "d_model_", "\n", "self", ".", "num_layers", "=", "num_layers_", "\n", "self", ".", "enc_layers", "=", "[", "EncoderLayer", "(", "d_model_", ",", "num_heads_", ",", "dff_", ",", "rate", ")", "for", "_", "in", "range", "(", "num_layers_", ")", "]", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "pads1", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "7", "-", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "self", ".", "conv1", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "d_model_", ",", "[", "7", ",", "d_model_", "]", ",", "strides", "=", "1", ")", "\n", "#self.pos_encoding = positional_encoding(seq_size, self.d_model)", "\n", "\n", "self", ".", "FC1", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC2", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC3", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC4", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC5", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC6", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC7", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC8", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC9", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC10", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC11", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "self", ".", "FC12", "=", "CustomFC", "(", "output_bias", ",", "self", ".", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.Encoder.call": [[360, 387], ["selfAttMulticlass.Encoder.Encoder.conv1", "tensorflow.pad", "range", "selfAttMulticlass.Encoder.Encoder.dropout", "selfAttMulticlass.Encoder.Encoder.FC1", "selfAttMulticlass.Encoder.Encoder.FC2", "selfAttMulticlass.Encoder.Encoder.FC3", "selfAttMulticlass.Encoder.Encoder.FC4", "selfAttMulticlass.Encoder.Encoder.FC5", "selfAttMulticlass.Encoder.Encoder.FC6", "selfAttMulticlass.Encoder.Encoder.FC7", "selfAttMulticlass.Encoder.Encoder.FC8", "selfAttMulticlass.Encoder.Encoder.FC9", "selfAttMulticlass.Encoder.Encoder.FC10", "selfAttMulticlass.Encoder.Encoder.FC11", "selfAttMulticlass.Encoder.Encoder.FC12", "tensorflow.keras.layers.concatenate", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Reshape", "selfAttMulticlass.Encoder.CustomHot", "selfAttMulticlass.Encoder.CustomRSum", "tensorflow.math.sigmoid"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x_", ",", "whichClass", ",", "training", ",", "mask_att", ",", "justmask", ")", ":", "\n", "# x_.set_shape([None, self.seq_size])", "\n", "# adding embedding and position encoding.", "\n", "#x_ += self.pos_encoding[:, :self.seq_size, :]", "\n", "        ", "x_", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "[", "self", ".", "seq_size", ",", "self", ".", "d_model", ",", "1", "]", ")", "(", "x_", ")", "\n", "x_", "=", "self", ".", "conv1", "(", "x_", ")", "\n", "x_", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "[", "self", ".", "seq_size", "-", "7", "+", "1", ",", "self", ".", "d_model", "]", ")", "(", "x_", ")", "\n", "x_", "=", "tf", ".", "pad", "(", "x_", ",", "self", ".", "pads1", ")", "#shape (batch, 200, d_model)", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x_", "=", "self", ".", "enc_layers", "[", "i", "]", "(", "x_", ",", "training", ",", "mask_att", ")", "\n", "", "out", "=", "self", ".", "dropout", "(", "x_", ",", "training", "=", "training", ")", "\n", "cl1", "=", "self", ".", "FC1", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl2", "=", "self", ".", "FC2", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl3", "=", "self", ".", "FC3", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl4", "=", "self", ".", "FC4", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl5", "=", "self", ".", "FC5", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl6", "=", "self", ".", "FC6", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl7", "=", "self", ".", "FC7", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl8", "=", "self", ".", "FC8", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl9", "=", "self", ".", "FC9", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl10", "=", "self", ".", "FC10", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl11", "=", "self", ".", "FC11", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "cl12", "=", "self", ".", "FC12", "(", "out", ",", "self", ".", "seq_size", ")", "\n", "x_out", "=", "tf", ".", "keras", ".", "layers", ".", "concatenate", "(", "[", "cl1", ",", "cl2", ",", "cl3", ",", "cl4", ",", "cl5", ",", "cl6", ",", "cl7", ",", "cl8", ",", "cl9", ",", "cl10", ",", "cl11", ",", "cl12", "]", ")", "#default axis -1 ==> batch, 12", "\n", "decideWhich", "=", "CustomHot", "(", ")", "(", "whichClass", ")", "\n", "pred_logit", "=", "CustomRSum", "(", ")", "(", "x_out", ",", "decideWhich", ")", "\n", "return", "pred_logit", ",", "tf", ".", "math", ".", "sigmoid", "(", "pred_logit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__": [[390, 395], ["super().__init__", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model_", ",", "warmup_steps", "=", "4000", ")", ":", "\n", "        ", "super", "(", "CustomSchedule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model_", "\n", "self", ".", "d_model", "=", "tf", ".", "cast", "(", "self", ".", "d_model", ",", "tf", ".", "float32", ")", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.CustomSchedule.__call__": [[396, 400], ["tensorflow.math.rsqrt", "tensorflow.math.rsqrt", "tensorflow.math.minimum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step", ")", ":", "\n", "        ", "arg1", "=", "tf", ".", "math", ".", "rsqrt", "(", "step", ")", "\n", "arg2", "=", "step", "*", "(", "self", ".", "warmup_steps", "**", "-", "1.5", ")", "\n", "return", "tf", ".", "math", ".", "rsqrt", "(", "self", ".", "d_model", ")", "*", "tf", ".", "math", ".", "minimum", "(", "arg1", ",", "arg2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.posNegNums": [[59, 68], ["None"], "function", ["None"], ["def", "posNegNums", "(", "ydata", ")", ":", "\n", "    ", "cntP", "=", "0", "\n", "cntN", "=", "0", "\n", "for", "ele", "in", "ydata", ":", "\n", "        ", "if", "ele", "==", "1", ":", "\n", "            ", "cntP", "+=", "1", "\n", "", "else", ":", "\n", "            ", "cntN", "+=", "1", "\n", "", "", "return", "cntP", ",", "cntN", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.random_list": [[71, 74], ["numpy.random.seed", "numpy.random.shuffle"], "function", ["None"], ["", "def", "random_list", "(", "x", ",", "seed", "=", "0", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.char2indices": [[88, 122], ["len", "enumerate", "len", "len"], "function", ["None"], ["def", "char2indices", "(", "listStr", ",", "dicC2I", ")", ":", "\n", "    ", "listIndices", "=", "[", "0", "]", "*", "args", ".", "seq_size", "\n", "charlist", "=", "listStr", "\n", "size", "=", "len", "(", "listStr", ")", "\n", "twoChars", "=", "{", "\"Al\"", ":", "1", ",", "\"Au\"", ":", "1", ",", "\"Ag\"", ":", "1", ",", "\"As\"", ":", "1", ",", "\"Ba\"", ":", "1", ",", "\"Be\"", ":", "1", ",", "\"Bi\"", ":", "1", ",", "\"Br\"", ":", "1", ",", "\"Ca\"", ":", "1", ",", "\"Cd\"", ":", "1", ",", "\"Cl\"", ":", "1", ",", "\n", "\"Co\"", ":", "1", ",", "\"Cr\"", ":", "1", ",", "\"Cu\"", ":", "1", ",", "\"Dy\"", ":", "1", ",", "\"Fe\"", ":", "1", ",", "\"Gd\"", ":", "1", ",", "\"Ge\"", ":", "1", ",", "\"In\"", ":", "1", ",", "\"Li\"", ":", "1", ",", "\"Mg\"", ":", "1", ",", "\"Mn\"", ":", "1", ",", "\n", "\"Mo\"", ":", "1", ",", "\"Na\"", ":", "1", ",", "\"Ni\"", ":", "1", ",", "\"Nd\"", ":", "1", ",", "\"Pb\"", ":", "1", ",", "\"Pt\"", ":", "1", ",", "\"Pd\"", ":", "1", ",", "\"Ru\"", ":", "1", ",", "\"Sb\"", ":", "1", ",", "\"Se\"", ":", "1", ",", "\"se\"", ":", "1", ",", "\n", "\"Si\"", ":", "1", ",", "\"Sn\"", ":", "1", ",", "\"Sr\"", ":", "1", ",", "\"Ti\"", ":", "1", ",", "\"Tl\"", ":", "1", ",", "\"Yb\"", ":", "1", ",", "\"Zn\"", ":", "1", ",", "\"Zr\"", ":", "1", "}", "\n", "prevTwoCharsFlag", "=", "False", "\n", "indexForList", "=", "0", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "charlist", ")", ":", "\n", "        ", "if", "prevTwoCharsFlag", ":", "\n", "            ", "prevTwoCharsFlag", "=", "False", "\n", "continue", "\n", "\n", "", "if", "i", "!=", "size", "-", "1", "and", "\"\"", ".", "join", "(", "charlist", "[", "i", ":", "i", "+", "2", "]", ")", "in", "twoChars", ":", "\n", "            ", "two", "=", "\"\"", ".", "join", "(", "charlist", "[", "i", ":", "i", "+", "2", "]", ")", "\n", "if", "two", "not", "in", "dicC2I", ":", "\n", "                ", "dicC2I", "[", "two", "]", "=", "len", "(", "dicC2I", ")", "+", "1", "\n", "listIndices", "[", "indexForList", "]", "=", "dicC2I", "[", "two", "]", "\n", "indexForList", "+=", "1", "\n", "", "else", ":", "\n", "                ", "listIndices", "[", "indexForList", "]", "=", "dicC2I", "[", "two", "]", "\n", "indexForList", "+=", "1", "\n", "", "prevTwoCharsFlag", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "c", "not", "in", "dicC2I", ":", "\n", "                ", "dicC2I", "[", "c", "]", "=", "len", "(", "dicC2I", ")", "+", "1", "\n", "listIndices", "[", "indexForList", "]", "=", "dicC2I", "[", "c", "]", "\n", "indexForList", "+=", "1", "\n", "", "else", ":", "\n", "                ", "listIndices", "[", "indexForList", "]", "=", "dicC2I", "[", "c", "]", "\n", "indexForList", "+=", "1", "\n", "", "", "", "return", "listIndices", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.makeDataForSmilesOnly": [[124, 169], ["open", "open.readlines", "open.close", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "selfAttMulticlass.posNegNums", "tensorflow.data.Dataset.from_tensor_slices().batch().shuffle", "tensorflow.data.Dataset.from_tensor_slices().batch().shuffle", "tensorflow.data.Dataset.from_tensor_slices().batch", "line.split", "listX.append", "listY.append", "len", "selfAttMulticlass.char2indices", "float", "tensorflow.data.Dataset.from_tensor_slices().batch", "tensorflow.data.Dataset.from_tensor_slices().batch", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.posNegNums", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.char2indices"], ["", "def", "makeDataForSmilesOnly", "(", "proteinName", ",", "dicC2I", ")", ":", "\n", "    ", "listX", ",", "listY", "=", "[", "]", ",", "[", "]", "\n", "afile", "=", "args", ".", "input", "+", "'/'", "+", "proteinName", "+", "'_wholetraining.smiles'", "\n", "f", "=", "open", "(", "afile", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "cntTooLong", "=", "0", "\n", "weirdButUseful", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "splitted", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "splitted", "[", "0", "]", ")", ">=", "args", ".", "seq_size", ":", "\n", "            ", "cntTooLong", "+=", "1", "\n", "if", "splitted", "[", "1", "]", "==", "\"1\"", ":", "\n", "                ", "weirdButUseful", "+=", "1", "\n", "", "continue", "\n", "", "listX", ".", "append", "(", "char2indices", "(", "splitted", "[", "0", "]", ",", "dicC2I", ")", ")", "# length can vary", "\n", "listY", ".", "append", "(", "float", "(", "splitted", "[", "1", "]", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "# print(\"how many weird cases exist?\", cntTooLong, weirdButUseful)", "\n", "train_x", ",", "test_x", ",", "train_y", ",", "test_y", "=", "train_test_split", "(", "listX", ",", "listY", ",", "test_size", "=", "0.1", ")", "\n", "train_x", ",", "valid_x", ",", "train_y", ",", "valid_y", "=", "train_test_split", "(", "train_x", ",", "train_y", ",", "test_size", "=", "0.1", ")", "\n", "pos_num", ",", "neg_num", "=", "posNegNums", "(", "train_y", ")", "\n", "train_tf", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "train_x", ",", "train_y", ")", ")", ".", "batch", "(", "args", ".", "batchsize", ")", ".", "shuffle", "(", "10000", ")", "\n", "valid_tf", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "valid_x", ",", "valid_y", ")", ")", ".", "batch", "(", "args", ".", "batchsize", ")", ".", "shuffle", "(", "10000", ")", "\n", "test_tf", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "(", "test_x", ",", "test_y", ")", ")", ".", "batch", "(", "args", ".", "batchsize", ")", "\n", "\"\"\"\n    train_x, valid_x, train_y, valid_y = train_test_split(listX, listY, test_size=0.1)\n    train_tf = tf.data.Dataset.from_tensor_slices((train_x, train_y)).batch(args.batchsize).shuffle(10000)\n    valid_tf = tf.data.Dataset.from_tensor_slices((valid_x, valid_y)).batch(args.batchsize).shuffle(10000)\n\n    testlistX, testlistY = [], []\n    testfile = args.input + \"/\" + proteinName + '_score.smiles'\n    testf = open(testfile)\n    lines = testf.readlines()\n    for line in lines:\n        splitted = line.split(\"\\t\")\n        if len(splitted[0]) >= args.seq_size:\n            continue\n        testlistX.append(char2indices(splitted[0], dicC2I))  # length can vary\n        testlistY.append(float(splitted[1]))\n    testf.close()\n\n    test_tf = tf.data.Dataset.from_tensor_slices((testlistX, testlistY)).batch(args.batchsize)\n    \"\"\"", "\n", "return", "train_tf", ",", "valid_tf", ",", "test_tf", ",", "pos_num", ",", "neg_num", ",", "train_x", ",", "valid_x", ",", "test_x", "#testlistX", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.scaled_dot_product_attention": [[197, 222], ["tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.math.sqrt", "tensorflow.shape"], "function", ["None"], ["def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Calculate the attention weights.\n    q, k, v must have matching leading dimensions.\n    k, v must have matching penultimate dimension, i.e.: seq_len_k = seq_len_v.\n    The mask has different shapes depending on its type(padding or look ahead) but it must be broadcastable for addition.\n    Args:\n      q: query shape == (..., seq_len_q, depth)\n      k: key shape == (..., seq_len_k, depth)\n      v: value shape == (..., seq_len_v, depth_v)\n      mask: Float tensor with shape broadcastable to (..., seq_len_q, seq_len_k). Defaults to None.\n    Returns:\n      output, attention_weights\n    \"\"\"", "\n", "matmul_qk", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (..., seq_len_q, seq_len_k)", "\n", "# scale matmul_qk", "\n", "dk", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "# add the mask to the scaled tensor.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e9", ")", "\n", "# softmax is normalized on the last axis (seq_len_k) so that the scores", "\n", "# add up to 1.", "\n", "", "attention_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scaled_attention_logits", ",", "axis", "=", "-", "1", ")", "# (..., seq_len_q, seq_len_k)", "\n", "output", "=", "tf", ".", "matmul", "(", "attention_weights", ",", "v", ")", "# (..., seq_len_q, depth_v)", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.point_wise_feed_forward_network": [[262, 266], ["tensorflow.keras.Sequential", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "", "def", "point_wise_feed_forward_network", "(", "d_model_", ",", "dff_", ")", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dff_", ",", "activation", "=", "\"relu\"", ",", "bias_initializer", "=", "'glorot_uniform'", ",", "use_bias", "=", "True", ")", ",", "# (batch_size, seq_len, dff)", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_", ",", "bias_initializer", "=", "'glorot_uniform'", ",", "use_bias", "=", "True", ")", "# (batch_size, seq_len, d_model)", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.loss_function": [[402, 405], ["tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.reduce_sum"], "function", ["None"], ["", "", "def", "loss_function", "(", "real", ",", "pred_logit", ",", "sampleW", "=", "None", ")", ":", "\n", "    ", "cross_ent", "=", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "logits", "=", "pred_logit", ",", "labels", "=", "real", ",", "pos_weight", "=", "sampleW", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "cross_ent", ")", "#reduce_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.create_padding_mask_fp2vec": [[407, 412], ["tensorflow.cast", "tensorflow.math.equal"], "function", ["None"], ["", "def", "create_padding_mask_fp2vec", "(", "seq", ")", ":", "\n", "    ", "seq", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "equal", "(", "seq", ",", "0", ")", ",", "tf", ".", "float32", ")", "\n", "# add extra dimensions to add the padding", "\n", "# to the attention logits.", "\n", "return", "seq", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "seq", "# (batch_size, 1, 1, seq_len)", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.create_padding_mask_scfp": [[414, 420], ["tensorflow.cast", "tensorflow.cast", "tensorflow.math.equal", "tensorflow.math.argmin"], "function", ["None"], ["", "def", "create_padding_mask_scfp", "(", "seq", ")", ":", "\n", "    ", "seq", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "equal", "(", "seq", ",", "0", ")", ",", "tf", ".", "float32", ")", "\n", "seq", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "argmin", "(", "seq", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "float32", ")", "\n", "# add extra dimensions to add the padding", "\n", "# to the attention logits.", "\n", "return", "seq", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "seq", "# (batch_size, 1, 1, atom_size)", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.train_step": [[449, 457], ["selfAttMulticlass.create_padding_mask_fp2vec", "tape.gradient", "optimizer.apply_gradients", "train_loss", "tensorflow.GradientTape", "encoder", "selfAttMulticlass.loss_function", "zip", "tensorflow.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.create_padding_mask_fp2vec", "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.loss_function"], ["", "", "def", "train_step", "(", "inp_", ",", "real", ",", "whichClass", ")", ":", "# shape is [batch, seq_len]", "\n", "    ", "inp_padding_mask", ",", "justmask", "=", "create_padding_mask_fp2vec", "(", "inp_", ")", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "        ", "pred_logit", ",", "pred", "=", "encoder", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings_", ",", "inp_", ")", ",", "whichClass", ",", "True", ",", "inp_padding_mask", ",", "justmask", ")", "\n", "loss", "=", "loss_function", "(", "real", ",", "pred_logit", ",", "sampleW", "=", "weight_for_1", ")", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "loss", ",", "encoder", ".", "trainable_variables", ")", "\n", "optimizer", ".", "apply_gradients", "(", "zip", "(", "gradients", ",", "encoder", ".", "trainable_variables", ")", ")", "\n", "train_loss", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.eval_step": [[459, 467], ["selfAttMulticlass.create_padding_mask_fp2vec", "encoder", "precFunc.update_state", "recallFunc.update_state", "AUCFunc.update_state", "accFunc.update_state", "tensorflow.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.create_padding_mask_fp2vec"], ["", "def", "eval_step", "(", "inp_", ",", "real", ",", "whichClass", ")", ":", "\n", "    ", "inp_padding_mask", ",", "justmask", "=", "create_padding_mask_fp2vec", "(", "inp_", ")", "\n", "_", ",", "pred", "=", "encoder", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings_", ",", "inp_", ")", ",", "whichClass", ",", "False", ",", "inp_padding_mask", ",", "justmask", ")", "\n", "\n", "precFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "recallFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "AUCFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "accFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.test_step": [[469, 476], ["selfAttMulticlass.create_padding_mask_fp2vec", "encoder", "precFunc.update_state", "recallFunc.update_state", "AUCFunc.update_state", "accFunc.update_state", "tensorflow.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.create_padding_mask_fp2vec"], ["", "def", "test_step", "(", "inp_", ",", "real", ",", "whichClass", ")", ":", "\n", "    ", "inp_padding_mask", ",", "justmask", "=", "create_padding_mask_fp2vec", "(", "inp_", ")", "\n", "logit", ",", "pred", "=", "encoder", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "embeddings_", ",", "inp_", ")", ",", "whichClass", ",", "False", ",", "inp_padding_mask", ",", "justmask", ")", "\n", "precFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "recallFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "AUCFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "accFunc", ".", "update_state", "(", "y_true", "=", "real", ",", "y_pred", "=", "pred", ")", "\n", "#print(len(logit), len(real))", "\n"]], "home.repos.pwc.inspect_result.arwhirang_sa-mtl.None.selfAttMulticlass.indices2chars": [[479, 493], ["retList.append", "tmplist.append"], "function", ["None"], ["", "def", "indices2chars", "(", "listx", ",", "dicC2I", ")", ":", "#listx shape = whole_size, 200", "\n", "    ", "dicI2C", "=", "{", "}", "\n", "for", "key", "in", "dicC2I", ":", "\n", "        ", "dicI2C", "[", "dicC2I", "[", "key", "]", "]", "=", "key", "\n", "\n", "", "retList", "=", "[", "]", "\n", "for", "instance", "in", "listx", ":", "\n", "        ", "tmplist", "=", "[", "]", "\n", "for", "index", "in", "instance", ":", "\n", "            ", "if", "index", "==", "0", ":", "#didn't use the 0 as index", "\n", "                ", "break", "\n", "", "tmplist", ".", "append", "(", "dicI2C", "[", "index", "]", ")", "\n", "", "retList", ".", "append", "(", "tmplist", ")", "\n", "", "return", "retList", "\n", "\n"]]}