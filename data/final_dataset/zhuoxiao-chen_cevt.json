{"home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.GradReverse.forward": [[21, 25], ["x.view_as"], "methods", ["None"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "beta", ")", ":", "\n", "\t\t", "ctx", ".", "beta", "=", "beta", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.GradReverse.backward": [[26, 30], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\t\t", "grad_input", "=", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "beta", "\n", "return", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.GradScale.forward": [[33, 37], ["x.view_as"], "methods", ["None"], ["\t", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "beta", ")", ":", "\n", "\t\t", "ctx", ".", "beta", "=", "beta", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.GradScale.backward": [[38, 42], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\t\t", "grad_input", "=", "grad_output", "*", "ctx", ".", "beta", "\n", "return", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.TCL.__init__": [[45, 52], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.C3D_model.C3D.__init__"], ["\t", "def", "__init__", "(", "self", ",", "conv_size", ",", "dim", ")", ":", "\n", "\t\t", "super", "(", "TCL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv2d", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "(", "conv_size", ",", "1", ")", ",", "padding", "=", "(", "conv_size", "//", "2", ",", "0", ")", ")", "\n", "\n", "# initialization", "\n", "kaiming_normal_", "(", "self", ".", "conv2d", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.TCL.forward": [[53, 57], ["models.TCL.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv2d", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.__init__": [[59, 118], ["torch.nn.Module.__init__", "models.VideoModel._prepare_DA", "print", "torch.nn.Softmax", "torch.nn.Softmax", "models.VideoModel.partialBN"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.C3D_model.C3D.__init__", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel._prepare_DA", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.partialBN"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "baseline_type", ",", "frame_aggregation", ",", "modality", ",", "\n", "train_segments", "=", "5", ",", "val_segments", "=", "25", ",", "\n", "base_model", "=", "'resnet101'", ",", "path_pretrained", "=", "''", ",", "new_length", "=", "None", ",", "\n", "before_softmax", "=", "True", ",", "\n", "dropout_i", "=", "0.5", ",", "dropout_v", "=", "0.5", ",", "use_bn", "=", "'none'", ",", "ens_DA", "=", "'none'", ",", "\n", "crop_num", "=", "1", ",", "partial_bn", "=", "True", ",", "verbose", "=", "True", ",", "add_fc", "=", "1", ",", "fc_dim", "=", "1024", ",", "\n", "n_rnn", "=", "1", ",", "rnn_cell", "=", "'LSTM'", ",", "n_directions", "=", "1", ",", "n_ts", "=", "5", ",", "\n", "use_attn", "=", "'TransAttn'", ",", "n_attn", "=", "1", ",", "use_attn_frame", "=", "'none'", ",", "\n", "share_params", "=", "'Y'", ")", ":", "\n", "\t\t", "super", "(", "VideoModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "train_segments", "=", "train_segments", "\n", "self", ".", "val_segments", "=", "val_segments", "\n", "self", ".", "baseline_type", "=", "baseline_type", "\n", "self", ".", "frame_aggregation", "=", "frame_aggregation", "\n", "self", ".", "reshape", "=", "True", "\n", "self", ".", "before_softmax", "=", "before_softmax", "\n", "self", ".", "dropout_rate_i", "=", "dropout_i", "\n", "self", ".", "dropout_rate_v", "=", "dropout_v", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "ens_DA", "=", "ens_DA", "\n", "self", ".", "crop_num", "=", "crop_num", "\n", "self", ".", "add_fc", "=", "add_fc", "\n", "self", ".", "fc_dim", "=", "fc_dim", "\n", "self", ".", "share_params", "=", "share_params", "\n", "\n", "# RNN", "\n", "self", ".", "n_layers", "=", "n_rnn", "\n", "self", ".", "rnn_cell", "=", "rnn_cell", "\n", "self", ".", "n_directions", "=", "n_directions", "\n", "self", ".", "n_ts", "=", "n_ts", "# temporal segment", "\n", "\n", "# Attention", "\n", "self", ".", "use_attn", "=", "use_attn", "\n", "self", ".", "n_attn", "=", "n_attn", "\n", "self", ".", "use_attn_frame", "=", "use_attn_frame", "\n", "\n", "if", "new_length", "is", "None", ":", "\n", "\t\t\t", "self", ".", "new_length", "=", "1", "if", "modality", "==", "\"RGB\"", "else", "5", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "new_length", "=", "new_length", "\n", "\n", "", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "(", "\"\"\"\n\t\t\t\tInitializing TSN with base model: {}.\n\t\t\t\tTSN Configurations:\n\t\t\t\tinput_modality:     {}\n\t\t\t\tnum_segments:       {}\n\t\t\t\tnew_length:         {}\n\t\t\t\t\"\"\"", ".", "format", "(", "base_model", ",", "self", ".", "modality", ",", "self", ".", "train_segments", ",", "self", ".", "new_length", ")", ")", ")", "\n", "\n", "", "self", ".", "_prepare_DA", "(", "num_class", ",", "base_model", ")", "\n", "\n", "if", "not", "self", ".", "before_softmax", ":", "\n", "\t\t\t", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n", "", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "\t\t\t", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel._prepare_DA": [[119, 325], ["torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "C3D", "min", "ValueError", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "range", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Sequential", "torch.nn.Sequential", "getattr", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.Linear", "torch.nn.Linear", "normal_", "constant_", "torch.nn.LSTM", "torch.nn.LSTM", "kaiming_normal_", "kaiming_normal_", "TRNmodule.RelationModule", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.GRU", "torch.nn.GRU", "TRNmodule.RelationModuleMultiScale", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "bool", "models.TCL", "models.TCL", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "models.TCL", "models.TCL", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Sequential", "torch.nn.Sequential", "int", "bool", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "int"], "methods", ["None"], ["", "", "def", "_prepare_DA", "(", "self", ",", "num_class", ",", "base_model", ")", ":", "# convert the model to DA framework", "\n", "\t\t", "if", "base_model", "==", "'c3d'", ":", "# C3D mode: in construction...", "\n", "\t\t\t", "from", "C3D_model", "import", "C3D", "\n", "model_test", "=", "C3D", "(", ")", "\n", "self", ".", "feature_dim", "=", "model_test", ".", "fc7", ".", "in_features", "\n", "", "else", ":", "\n", "\t\t\t", "model_test", "=", "getattr", "(", "torchvision", ".", "models", ",", "base_model", ")", "(", "True", ")", "# model_test is only used for getting the dim #", "\n", "self", ".", "feature_dim", "=", "model_test", ".", "fc", ".", "in_features", "\n", "\n", "", "std", "=", "0.001", "\n", "feat_shared_dim", "=", "min", "(", "self", ".", "fc_dim", ",", "self", ".", "feature_dim", ")", "if", "self", ".", "add_fc", ">", "0", "and", "self", ".", "fc_dim", ">", "0", "else", "self", ".", "feature_dim", "\n", "feat_frame_dim", "=", "feat_shared_dim", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropout_i", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_rate_i", ")", "\n", "self", ".", "dropout_v", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_rate_v", ")", "\n", "\n", "#------ frame-level layers (shared layers + source layers + domain layers) ------#", "\n", "if", "self", ".", "add_fc", "<", "1", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "Back", ".", "RED", "+", "'add at least one fc layer'", ")", "\n", "\n", "# 1. shared feature layers", "\n", "", "self", ".", "fc_feature_shared_source", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "feat_shared_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_shared_source", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_shared_source", ".", "bias", ",", "0", ")", "\n", "\n", "if", "self", ".", "add_fc", ">", "1", ":", "\n", "\t\t\t", "self", ".", "fc_feature_shared_2_source", "=", "nn", ".", "Linear", "(", "feat_shared_dim", ",", "feat_shared_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_shared_2_source", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_shared_2_source", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "self", ".", "add_fc", ">", "2", ":", "\n", "\t\t\t", "self", ".", "fc_feature_shared_3_source", "=", "nn", ".", "Linear", "(", "feat_shared_dim", ",", "feat_shared_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_shared_3_source", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_shared_3_source", ".", "bias", ",", "0", ")", "\n", "\n", "# 2. frame-level feature layers", "\n", "", "self", ".", "fc_feature_source", "=", "nn", ".", "Linear", "(", "feat_shared_dim", ",", "feat_frame_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_source", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_source", ".", "bias", ",", "0", ")", "\n", "\n", "# 3. domain feature layers (frame-level)", "\n", "self", ".", "fc_feature_domain", "=", "nn", ".", "Linear", "(", "feat_shared_dim", ",", "feat_frame_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_domain", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_domain", ".", "bias", ",", "0", ")", "\n", "\n", "# 4. classifiers (frame-level)", "\n", "self", ".", "fc_classifier_source", "=", "nn", ".", "Linear", "(", "feat_frame_dim", ",", "num_class", ")", "\n", "normal_", "(", "self", ".", "fc_classifier_source", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_classifier_source", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "fc_classifier_domain", "=", "nn", ".", "Linear", "(", "feat_frame_dim", ",", "2", ")", "\n", "normal_", "(", "self", ".", "fc_classifier_domain", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_classifier_domain", ".", "bias", ",", "0", ")", "\n", "\n", "if", "self", ".", "share_params", "==", "'N'", ":", "\n", "\t\t\t", "self", ".", "fc_feature_shared_target", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "feat_shared_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_shared_target", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_shared_target", ".", "bias", ",", "0", ")", "\n", "if", "self", ".", "add_fc", ">", "1", ":", "\n", "\t\t\t\t", "self", ".", "fc_feature_shared_2_target", "=", "nn", ".", "Linear", "(", "feat_shared_dim", ",", "feat_shared_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_shared_2_target", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_shared_2_target", ".", "bias", ",", "0", ")", "\n", "", "if", "self", ".", "add_fc", ">", "2", ":", "\n", "\t\t\t\t", "self", ".", "fc_feature_shared_3_target", "=", "nn", ".", "Linear", "(", "feat_shared_dim", ",", "feat_shared_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_shared_3_target", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_shared_3_target", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "fc_feature_target", "=", "nn", ".", "Linear", "(", "feat_shared_dim", ",", "feat_frame_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_target", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_target", ".", "bias", ",", "0", ")", "\n", "self", ".", "fc_classifier_target", "=", "nn", ".", "Linear", "(", "feat_frame_dim", ",", "num_class", ")", "\n", "normal_", "(", "self", ".", "fc_classifier_target", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_classifier_target", ".", "bias", ",", "0", ")", "\n", "\n", "# BN for the above layers", "\n", "", "if", "self", ".", "use_bn", "!=", "'none'", ":", "# S & T: use AdaBN (ICLRW 2017) approach", "\n", "\t\t\t", "self", ".", "bn_shared_S", "=", "nn", ".", "BatchNorm1d", "(", "feat_shared_dim", ")", "# BN for the shared layers", "\n", "self", ".", "bn_shared_T", "=", "nn", ".", "BatchNorm1d", "(", "feat_shared_dim", ")", "\n", "self", ".", "bn_source_S", "=", "nn", ".", "BatchNorm1d", "(", "feat_frame_dim", ")", "# BN for the source feature layers", "\n", "self", ".", "bn_source_T", "=", "nn", ".", "BatchNorm1d", "(", "feat_frame_dim", ")", "\n", "\n", "#------ aggregate frame-based features (frame feature --> video feature) ------#", "\n", "", "if", "self", ".", "frame_aggregation", "==", "'rnn'", ":", "# 2. rnn", "\n", "\t\t\t", "self", ".", "hidden_dim", "=", "feat_frame_dim", "\n", "if", "self", ".", "rnn_cell", "==", "'LSTM'", ":", "\n", "\t\t\t\t", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "feat_frame_dim", ",", "self", ".", "hidden_dim", "//", "self", ".", "n_directions", ",", "self", ".", "n_layers", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "bool", "(", "int", "(", "self", ".", "n_directions", "/", "2", ")", ")", ")", "\n", "", "elif", "self", ".", "rnn_cell", "==", "'GRU'", ":", "\n", "\t\t\t\t", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "feat_frame_dim", ",", "self", ".", "hidden_dim", "//", "self", ".", "n_directions", ",", "self", ".", "n_layers", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "bool", "(", "int", "(", "self", ".", "n_directions", "/", "2", ")", ")", ")", "\n", "\n", "# initialization", "\n", "", "for", "p", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "\t\t\t\t", "kaiming_normal_", "(", "self", ".", "rnn", ".", "all_weights", "[", "p", "]", "[", "0", "]", ")", "\n", "kaiming_normal_", "(", "self", ".", "rnn", ".", "all_weights", "[", "p", "]", "[", "1", "]", ")", "\n", "\n", "", "self", ".", "bn_before_rnn", "=", "nn", ".", "BatchNorm2d", "(", "1", ")", "\n", "self", ".", "bn_after_rnn", "=", "nn", ".", "BatchNorm2d", "(", "1", ")", "\n", "\n", "", "elif", "self", ".", "frame_aggregation", "==", "'trn'", ":", "# 4. TRN (ECCV 2018) ==> fix segment # for both train/val", "\n", "\t\t\t", "self", ".", "num_bottleneck", "=", "512", "\n", "self", ".", "TRN", "=", "TRNmodule", ".", "RelationModule", "(", "feat_shared_dim", ",", "self", ".", "num_bottleneck", ",", "self", ".", "train_segments", ")", "\n", "self", ".", "bn_trn_S", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_bottleneck", ")", "\n", "self", ".", "bn_trn_T", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_bottleneck", ")", "\n", "", "elif", "self", ".", "frame_aggregation", "==", "'trn-m'", ":", "# 4. TRN (ECCV 2018) ==> fix segment # for both train/val", "\n", "\t\t\t", "self", ".", "num_bottleneck", "=", "256", "\n", "self", ".", "TRN", "=", "TRNmodule", ".", "RelationModuleMultiScale", "(", "feat_shared_dim", ",", "self", ".", "num_bottleneck", ",", "self", ".", "train_segments", ")", "\n", "self", ".", "bn_trn_S", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_bottleneck", ")", "\n", "self", ".", "bn_trn_T", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_bottleneck", ")", "\n", "\n", "", "elif", "self", ".", "frame_aggregation", "==", "'temconv'", ":", "# 3. temconv", "\n", "\n", "\t\t\t", "self", ".", "tcl_3_1", "=", "TCL", "(", "3", ",", "1", ")", "\n", "self", ".", "tcl_5_1", "=", "TCL", "(", "5", ",", "1", ")", "\n", "self", ".", "bn_1_S", "=", "nn", ".", "BatchNorm1d", "(", "feat_frame_dim", ")", "\n", "self", ".", "bn_1_T", "=", "nn", ".", "BatchNorm1d", "(", "feat_frame_dim", ")", "\n", "\n", "self", ".", "tcl_3_2", "=", "TCL", "(", "3", ",", "1", ")", "\n", "self", ".", "tcl_5_2", "=", "TCL", "(", "5", ",", "2", ")", "\n", "self", ".", "bn_2_S", "=", "nn", ".", "BatchNorm1d", "(", "feat_frame_dim", ")", "\n", "self", ".", "bn_2_T", "=", "nn", ".", "BatchNorm1d", "(", "feat_frame_dim", ")", "\n", "\n", "self", ".", "conv_fusion", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "# ------ video-level layers (source layers + domain layers) ------#", "\n", "", "if", "self", ".", "frame_aggregation", "==", "'avgpool'", ":", "# 1. avgpool", "\n", "\t\t\t", "feat_aggregated_dim", "=", "feat_shared_dim", "\n", "", "if", "'trn'", "in", "self", ".", "frame_aggregation", ":", "# 4. trn", "\n", "\t\t\t", "feat_aggregated_dim", "=", "self", ".", "num_bottleneck", "\n", "", "elif", "self", ".", "frame_aggregation", "==", "'rnn'", ":", "# 2. rnn", "\n", "\t\t\t", "feat_aggregated_dim", "=", "self", ".", "hidden_dim", "\n", "", "elif", "self", ".", "frame_aggregation", "==", "'temconv'", ":", "# 3. temconv", "\n", "\t\t\t", "feat_aggregated_dim", "=", "feat_shared_dim", "\n", "\n", "", "feat_video_dim", "=", "feat_aggregated_dim", "\n", "\n", "# 1. source feature layers (video-level)", "\n", "self", ".", "fc_feature_video_source", "=", "nn", ".", "Linear", "(", "feat_aggregated_dim", ",", "feat_video_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_video_source", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_video_source", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "fc_feature_video_source_2", "=", "nn", ".", "Linear", "(", "feat_video_dim", ",", "feat_video_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_video_source_2", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_video_source_2", ".", "bias", ",", "0", ")", "\n", "\n", "# 2. domain feature layers (video-level)", "\n", "self", ".", "fc_feature_domain_video", "=", "nn", ".", "Linear", "(", "feat_aggregated_dim", ",", "feat_video_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_domain_video", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_domain_video", ".", "bias", ",", "0", ")", "\n", "\n", "# 3. classifiers (video-level)", "\n", "self", ".", "fc_classifier_video_source", "=", "nn", ".", "Linear", "(", "feat_video_dim", ",", "num_class", ")", "\n", "normal_", "(", "self", ".", "fc_classifier_video_source", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_classifier_video_source", ".", "bias", ",", "0", ")", "\n", "\n", "if", "self", ".", "ens_DA", "==", "'MCD'", ":", "\n", "\t\t\t", "self", ".", "fc_classifier_video_source_2", "=", "nn", ".", "Linear", "(", "feat_video_dim", ",", "num_class", ")", "# second classifier for self-ensembling", "\n", "normal_", "(", "self", ".", "fc_classifier_video_source_2", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_classifier_video_source_2", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "fc_classifier_domain_video", "=", "nn", ".", "Linear", "(", "feat_video_dim", ",", "2", ")", "\n", "normal_", "(", "self", ".", "fc_classifier_domain_video", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_classifier_domain_video", ".", "bias", ",", "0", ")", "\n", "\n", "# domain classifier for TRN-M", "\n", "if", "self", ".", "frame_aggregation", "==", "'trn-m'", ":", "\n", "\t\t\t", "self", ".", "relation_domain_classifier_all", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "train_segments", "-", "1", ")", ":", "\n", "\t\t\t\t", "relation_domain_classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_aggregated_dim", ",", "feat_video_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_video_dim", ",", "2", ")", "\n", ")", "\n", "self", ".", "relation_domain_classifier_all", "+=", "[", "relation_domain_classifier", "]", "\n", "\n", "", "", "if", "self", ".", "share_params", "==", "'N'", ":", "\n", "\t\t\t", "self", ".", "fc_feature_video_target", "=", "nn", ".", "Linear", "(", "feat_aggregated_dim", ",", "feat_video_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_video_target", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_video_target", ".", "bias", ",", "0", ")", "\n", "self", ".", "fc_feature_video_target_2", "=", "nn", ".", "Linear", "(", "feat_video_dim", ",", "feat_video_dim", ")", "\n", "normal_", "(", "self", ".", "fc_feature_video_target_2", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_feature_video_target_2", ".", "bias", ",", "0", ")", "\n", "self", ".", "fc_classifier_video_target", "=", "nn", ".", "Linear", "(", "feat_video_dim", ",", "num_class", ")", "\n", "normal_", "(", "self", ".", "fc_classifier_video_target", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "fc_classifier_video_target", ".", "bias", ",", "0", ")", "\n", "\n", "# BN for the above layers", "\n", "", "if", "self", ".", "use_bn", "!=", "'none'", ":", "# S & T: use AdaBN (ICLRW 2017) approach", "\n", "\t\t\t", "self", ".", "bn_source_video_S", "=", "nn", ".", "BatchNorm1d", "(", "feat_video_dim", ")", "\n", "self", ".", "bn_source_video_T", "=", "nn", ".", "BatchNorm1d", "(", "feat_video_dim", ")", "\n", "self", ".", "bn_source_video_2_S", "=", "nn", ".", "BatchNorm1d", "(", "feat_video_dim", ")", "\n", "self", ".", "bn_source_video_2_T", "=", "nn", ".", "BatchNorm1d", "(", "feat_video_dim", ")", "\n", "\n", "", "self", ".", "alpha", "=", "torch", ".", "ones", "(", "1", ")", "\n", "if", "self", ".", "use_bn", "==", "'AutoDIAL'", ":", "\n", "\t\t\t", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "self", ".", "alpha", ")", "\n", "\n", "# ------ attention mechanism ------#", "\n", "# conventional attention", "\n", "", "if", "self", ".", "use_attn", "==", "'general'", ":", "\n", "\t\t\t", "self", ".", "attn_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_aggregated_dim", ",", "feat_aggregated_dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_aggregated_dim", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.train": [[328, 347], ["super().train", "print", "models.VideoModel.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# not necessary in our setting", "\n", "\t\t", "\"\"\"\n\t\tOverride the default train() to freeze the BN parameters\n\t\t:return:\n\t\t\"\"\"", "\n", "super", "(", "VideoModel", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", ":", "\n", "\t\t\t", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "\t\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t\t", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "\t\t\t\t\t\t", "m", ".", "eval", "(", ")", "\n", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.partialBN": [[348, 350], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "\t\t", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_trans_attn": [[351, 358], ["torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.LogSoftmax.", "torch.nn.Softmax."], "methods", ["None"], ["", "def", "get_trans_attn", "(", "self", ",", "pred_domain", ")", ":", "\n", "\t\t", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "-", "softmax", "(", "pred_domain", ")", "*", "logsoftmax", "(", "pred_domain", ")", ",", "1", ")", "\n", "weights", "=", "1", "-", "entropy", "\n", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_general_attn": [[359, 367], ["feat.view.view.view", "models.VideoModel.attn_layer", "torch.softmax.view", "torch.softmax", "torch.softmax", "feat.view.view.size", "feat.view.view.size", "torch.softmax.size"], "methods", ["None"], ["", "def", "get_general_attn", "(", "self", ",", "feat", ")", ":", "\n", "\t\t", "num_segments", "=", "feat", ".", "size", "(", ")", "[", "1", "]", "\n", "feat", "=", "feat", ".", "view", "(", "-", "1", ",", "feat", ".", "size", "(", ")", "[", "-", "1", "]", ")", "# reshape features: 128x4x256 --> (128x4)x256", "\n", "weights", "=", "self", ".", "attn_layer", "(", "feat", ")", "# e.g. (128x4)x1", "\n", "weights", "=", "weights", ".", "view", "(", "-", "1", ",", "num_segments", ",", "weights", ".", "size", "(", ")", "[", "-", "1", "]", ")", "# reshape attention weights: (128x4)x1 --> 128x4x1", "\n", "weights", "=", "F", ".", "softmax", "(", "weights", ",", "dim", "=", "1", ")", "# softmax over segments ==> 128x4x1", "\n", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_attn_feat_frame": [[368, 378], ["models.VideoModel.view().repeat", "models.VideoModel.get_trans_attn", "models.VideoModel.get_general_attn", "models.VideoModel.view", "feat_fc.size"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_trans_attn", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_general_attn"], ["", "def", "get_attn_feat_frame", "(", "self", ",", "feat_fc", ",", "pred_domain", ")", ":", "# not used for now", "\n", "\t\t", "if", "self", ".", "use_attn", "==", "'TransAttn'", ":", "\n", "\t\t\t", "weights_attn", "=", "self", ".", "get_trans_attn", "(", "pred_domain", ")", "\n", "", "elif", "self", ".", "use_attn", "==", "'general'", ":", "\n", "\t\t\t", "weights_attn", "=", "self", ".", "get_general_attn", "(", "feat_fc", ")", "\n", "\n", "", "weights_attn", "=", "weights_attn", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "feat_fc", ".", "size", "(", ")", "[", "-", "1", "]", ")", "# reshape & repeat weights (e.g. 16 x 512)", "\n", "feat_fc_attn", "=", "(", "weights_attn", "+", "1", ")", "*", "feat_fc", "\n", "\n", "return", "feat_fc_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_attn_feat_relation": [[379, 389], ["models.VideoModel.view().repeat", "models.VideoModel.get_trans_attn", "models.VideoModel.get_general_attn", "models.VideoModel.view", "feat_fc.size"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_trans_attn", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_general_attn"], ["", "def", "get_attn_feat_relation", "(", "self", ",", "feat_fc", ",", "pred_domain", ",", "num_segments", ")", ":", "\n", "\t\t", "if", "self", ".", "use_attn", "==", "'TransAttn'", ":", "\n", "\t\t\t", "weights_attn", "=", "self", ".", "get_trans_attn", "(", "pred_domain", ")", "\n", "", "elif", "self", ".", "use_attn", "==", "'general'", ":", "\n", "\t\t\t", "weights_attn", "=", "self", ".", "get_general_attn", "(", "feat_fc", ")", "\n", "\n", "", "weights_attn", "=", "weights_attn", ".", "view", "(", "-", "1", ",", "num_segments", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "feat_fc", ".", "size", "(", ")", "[", "-", "1", "]", ")", "# reshape & repeat weights (e.g. 16 x 4 x 256)", "\n", "feat_fc_attn", "=", "(", "weights_attn", "+", "1", ")", "*", "feat_fc", "\n", "\n", "return", "feat_fc_attn", ",", "weights_attn", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.aggregate_frames": [[390, 436], ["feat_fc.view", "round", "torch.cat.view", "torch.cat.view", "torch.cat.squeeze", "torch.cat.squeeze", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "models.VideoModel.rnn.flatten_parameters", "models.VideoModel.rnn", "feat_fc.view", "torch.cat.squeeze().squeeze", "torch.cat.squeeze().squeeze", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "models.VideoModel.get_trans_attn", "weights_attn.view().repeat.view().repeat.view().repeat", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.squeeze", "torch.cat.squeeze", "feat_fc.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "feat_fc.size", "weights_attn.view().repeat.view().repeat.view", "feat_fc.size", "feat_fc_video[].repeat"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_trans_attn"], ["", "def", "aggregate_frames", "(", "self", ",", "feat_fc", ",", "num_segments", ",", "pred_domain", ")", ":", "\n", "\t\t", "feat_fc_video", "=", "None", "\n", "if", "self", ".", "frame_aggregation", "==", "'rnn'", ":", "\n", "# 2. RNN", "\n", "\t\t\t", "feat_fc_video", "=", "feat_fc", ".", "view", "(", "(", "-", "1", ",", "num_segments", ")", "+", "feat_fc", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape for RNN", "\n", "\n", "# temporal segments and pooling", "\n", "len_ts", "=", "round", "(", "num_segments", "/", "self", ".", "n_ts", ")", "\n", "num_extra_f", "=", "len_ts", "*", "self", ".", "n_ts", "-", "num_segments", "\n", "if", "num_extra_f", "<", "0", ":", "# can remove last frame-level features", "\n", "\t\t\t\t", "feat_fc_video", "=", "feat_fc_video", "[", ":", ",", ":", "len_ts", "*", "self", ".", "n_ts", ",", ":", "]", "# make the temporal length can be divided by n_ts (16 x 25 x 512 --> 16 x 24 x 512)", "\n", "", "elif", "num_extra_f", ">", "0", ":", "# need to repeat last frame-level features", "\n", "\t\t\t\t", "feat_fc_video", "=", "torch", ".", "cat", "(", "(", "feat_fc_video", ",", "feat_fc_video", "[", ":", ",", "-", "1", ":", ",", ":", "]", ".", "repeat", "(", "1", ",", "num_extra_f", ",", "1", ")", ")", ",", "1", ")", "# make the temporal length can be divided by n_ts (16 x 5 x 512 --> 16 x 6 x 512)", "\n", "\n", "", "feat_fc_video", "=", "feat_fc_video", ".", "view", "(", "\n", "(", "-", "1", ",", "self", ".", "n_ts", ",", "len_ts", ")", "+", "feat_fc_video", ".", "size", "(", ")", "[", "2", ":", "]", ")", "# 16 x 6 x 512 --> 16 x 3 x 2 x 512", "\n", "feat_fc_video", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "len_ts", ",", "1", ")", ")", "(", "\n", "feat_fc_video", ")", "# 16 x 3 x 2 x 512 --> 16 x 3 x 1 x 512", "\n", "feat_fc_video", "=", "feat_fc_video", ".", "squeeze", "(", "2", ")", "# 16 x 3 x 1 x 512 --> 16 x 3 x 512", "\n", "\n", "hidden_temp", "=", "torch", ".", "zeros", "(", "self", ".", "n_layers", "*", "self", ".", "n_directions", ",", "feat_fc_video", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "hidden_dim", "//", "self", ".", "n_directions", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "rnn_cell", "==", "'LSTM'", ":", "\n", "\t\t\t\t", "hidden_init", "=", "(", "hidden_temp", ",", "hidden_temp", ")", "\n", "", "elif", "self", ".", "rnn_cell", "==", "'GRU'", ":", "\n", "\t\t\t\t", "hidden_init", "=", "hidden_temp", "\n", "\n", "", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "feat_fc_video", ",", "hidden_final", "=", "self", ".", "rnn", "(", "feat_fc_video", ",", "hidden_init", ")", "# e.g. 16 x 25 x 512", "\n", "\n", "# get the last feature vector", "\n", "feat_fc_video", "=", "feat_fc_video", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "", "else", ":", "\n", "# 1. averaging", "\n", "\t\t\t", "feat_fc_video", "=", "feat_fc", ".", "view", "(", "(", "-", "1", ",", "1", ",", "num_segments", ")", "+", "feat_fc", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape based on the segments (e.g. 16 x 1 x 5 x 512)", "\n", "if", "self", ".", "use_attn", "==", "'TransAttn'", ":", "# get the attention weighting", "\n", "\t\t\t\t", "weights_attn", "=", "self", ".", "get_trans_attn", "(", "pred_domain", ")", "\n", "weights_attn", "=", "weights_attn", ".", "view", "(", "-", "1", ",", "1", ",", "num_segments", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "feat_fc", ".", "size", "(", ")", "[", "-", "1", "]", ")", "# reshape & repeat weights (e.g. 16 x 1 x 5 x 512)", "\n", "feat_fc_video", "=", "(", "weights_attn", "+", "1", ")", "*", "feat_fc_video", "\n", "\n", "", "feat_fc_video", "=", "nn", ".", "AvgPool2d", "(", "[", "num_segments", ",", "1", "]", ")", "(", "feat_fc_video", ")", "# e.g. 16 x 1 x 1 x 512", "\n", "feat_fc_video", "=", "feat_fc_video", ".", "squeeze", "(", "1", ")", ".", "squeeze", "(", "1", ")", "# e.g. 16 x 512", "\n", "\n", "", "return", "feat_fc_video", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.final_output": [[437, 455], ["models.VideoModel.softmax", "base_out.view.view.mean", "base_out.view.view.view", "base_out.view.view.size"], "methods", ["None"], ["", "def", "final_output", "(", "self", ",", "pred", ",", "pred_video", ",", "num_segments", ")", ":", "\n", "\t\t", "if", "self", ".", "baseline_type", "==", "'video'", ":", "\n", "\t\t\t", "base_out", "=", "pred_video", "\n", "", "else", ":", "\n", "\t\t\t", "base_out", "=", "pred", "\n", "\n", "", "if", "not", "self", ".", "before_softmax", ":", "\n", "\t\t\t", "base_out", "=", "self", ".", "softmax", "(", "base_out", ")", "\n", "\n", "", "output", "=", "base_out", "\n", "\n", "if", "self", ".", "baseline_type", "==", "'tsn'", ":", "\n", "\t\t\t", "if", "self", ".", "reshape", ":", "\n", "\t\t\t\t", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "# e.g. 16 x 3 x 12 (3 segments)", "\n", "\n", "", "output", "=", "base_out", ".", "mean", "(", "1", ")", "# e.g. 16 x 12", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_frame": [[456, 463], ["GradReverse.apply", "models.VideoModel.fc_feature_domain", "models.VideoModel.relu", "models.VideoModel.fc_classifier_domain"], "methods", ["None"], ["", "def", "domain_classifier_frame", "(", "self", ",", "feat", ",", "beta", ")", ":", "\n", "\t\t", "feat_fc_domain_frame", "=", "GradReverse", ".", "apply", "(", "feat", ",", "beta", "[", "2", "]", ")", "\n", "feat_fc_domain_frame", "=", "self", ".", "fc_feature_domain", "(", "feat_fc_domain_frame", ")", "\n", "feat_fc_domain_frame", "=", "self", ".", "relu", "(", "feat_fc_domain_frame", ")", "\n", "pred_fc_domain_frame", "=", "self", ".", "fc_classifier_domain", "(", "feat_fc_domain_frame", ")", "\n", "\n", "return", "pred_fc_domain_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_video": [[464, 471], ["GradReverse.apply", "models.VideoModel.fc_feature_domain_video", "models.VideoModel.relu", "models.VideoModel.fc_classifier_domain_video"], "methods", ["None"], ["", "def", "domain_classifier_video", "(", "self", ",", "feat_video", ",", "beta", ")", ":", "\n", "\t\t", "feat_fc_domain_video", "=", "GradReverse", ".", "apply", "(", "feat_video", ",", "beta", "[", "1", "]", ")", "\n", "feat_fc_domain_video", "=", "self", ".", "fc_feature_domain_video", "(", "feat_fc_domain_video", ")", "\n", "feat_fc_domain_video", "=", "self", ".", "relu", "(", "feat_fc_domain_video", ")", "\n", "pred_fc_domain_video", "=", "self", ".", "fc_classifier_domain_video", "(", "feat_fc_domain_video", ")", "\n", "\n", "return", "pred_fc_domain_video", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_relation": [[472, 489], ["range", "torch.cat.view", "torch.cat.view", "len", "feat_relation[].squeeze", "GradReverse.apply", "pred_fc_domain_relation_single.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_fc_domain_relation_single.view"], "methods", ["None"], ["", "def", "domain_classifier_relation", "(", "self", ",", "feat_relation", ",", "beta", ")", ":", "\n", "# 128x4x256 --> (128x4)x2", "\n", "\t\t", "pred_fc_domain_relation_video", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "relation_domain_classifier_all", ")", ")", ":", "\n", "\t\t\t", "feat_relation_single", "=", "feat_relation", "[", ":", ",", "i", ",", ":", "]", ".", "squeeze", "(", "1", ")", "# 128x1x256 --> 128x256", "\n", "feat_fc_domain_relation_single", "=", "GradReverse", ".", "apply", "(", "feat_relation_single", ",", "beta", "[", "0", "]", ")", "# the same beta for all relations (for now)", "\n", "\n", "pred_fc_domain_relation_single", "=", "self", ".", "relation_domain_classifier_all", "[", "i", "]", "(", "feat_fc_domain_relation_single", ")", "\n", "\n", "if", "pred_fc_domain_relation_video", "is", "None", ":", "\n", "\t\t\t\t", "pred_fc_domain_relation_video", "=", "pred_fc_domain_relation_single", ".", "view", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "pred_fc_domain_relation_video", "=", "torch", ".", "cat", "(", "(", "pred_fc_domain_relation_video", ",", "pred_fc_domain_relation_single", ".", "view", "(", "-", "1", ",", "1", ",", "2", ")", ")", ",", "1", ")", "\n", "\n", "", "", "pred_fc_domain_relation_video", "=", "pred_fc_domain_relation_video", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "\n", "return", "pred_fc_domain_relation_video", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domainAlign": [[490, 544], ["input_S.view.view.view", "input_T.view.view.view", "max", "int", "int", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "models.VideoModel.view", "models.VideoModel.view", "round", "input_S.view.view.size", "round", "input_T.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.VideoModel.bn_shared_S", "models.VideoModel.bn_shared_T", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.VideoModel.view", "models.VideoModel.view", "models.VideoModel.bn_trn_S", "models.VideoModel.bn_trn_T", "models.VideoModel.view", "models.VideoModel.view", "input_S.view.view.size", "input_T.view.view.size", "input_S.view.view.size", "input_T.view.view.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "models.VideoModel.bn_1_S", "models.VideoModel.bn_1_T", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.bn_2_S", "models.VideoModel.bn_2_T", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size"], "methods", ["None"], ["", "def", "domainAlign", "(", "self", ",", "input_S", ",", "input_T", ",", "is_train", ",", "name_layer", ",", "alpha", ",", "num_segments", ",", "dim", ")", ":", "\n", "\t\t", "input_S", "=", "input_S", ".", "view", "(", "(", "-", "1", ",", "dim", ",", "num_segments", ")", "+", "input_S", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape based on the segments (e.g. 80 x 512 --> 16 x 1 x 5 x 512)", "\n", "input_T", "=", "input_T", ".", "view", "(", "(", "-", "1", ",", "dim", ",", "num_segments", ")", "+", "input_T", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape based on the segments", "\n", "\n", "# clamp alpha", "\n", "alpha", "=", "max", "(", "alpha", ",", "0.5", ")", "\n", "\n", "# rearange source and target data", "\n", "num_S_1", "=", "int", "(", "round", "(", "input_S", ".", "size", "(", "0", ")", "*", "alpha", ")", ")", "\n", "num_S_2", "=", "input_S", ".", "size", "(", "0", ")", "-", "num_S_1", "\n", "num_T_1", "=", "int", "(", "round", "(", "input_T", ".", "size", "(", "0", ")", "*", "alpha", ")", ")", "\n", "num_T_2", "=", "input_T", ".", "size", "(", "0", ")", "-", "num_T_1", "\n", "\n", "if", "is_train", "and", "num_S_2", ">", "0", "and", "num_T_2", ">", "0", ":", "\n", "\t\t\t", "input_source", "=", "torch", ".", "cat", "(", "(", "input_S", "[", ":", "num_S_1", "]", ",", "input_T", "[", "-", "num_T_2", ":", "]", ")", ",", "0", ")", "\n", "input_target", "=", "torch", ".", "cat", "(", "(", "input_T", "[", ":", "num_T_1", "]", ",", "input_S", "[", "-", "num_S_2", ":", "]", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t", "input_source", "=", "input_S", "\n", "input_target", "=", "input_T", "\n", "\n", "# adaptive BN", "\n", "", "input_source", "=", "input_source", ".", "view", "(", "(", "-", "1", ",", ")", "+", "input_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape to feed BN (e.g. 16 x 1 x 5 x 512 --> 80 x 512)", "\n", "input_target", "=", "input_target", ".", "view", "(", "(", "-", "1", ",", ")", "+", "input_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "\n", "\n", "if", "name_layer", "==", "'shared'", ":", "\n", "\t\t\t", "input_source_bn", "=", "self", ".", "bn_shared_S", "(", "input_source", ")", "\n", "input_target_bn", "=", "self", ".", "bn_shared_T", "(", "input_target", ")", "\n", "", "elif", "'trn'", "in", "name_layer", ":", "\n", "\t\t\t", "input_source_bn", "=", "self", ".", "bn_trn_S", "(", "input_source", ")", "\n", "input_target_bn", "=", "self", ".", "bn_trn_T", "(", "input_target", ")", "\n", "", "elif", "name_layer", "==", "'temconv_1'", ":", "\n", "\t\t\t", "input_source_bn", "=", "self", ".", "bn_1_S", "(", "input_source", ")", "\n", "input_target_bn", "=", "self", ".", "bn_1_T", "(", "input_target", ")", "\n", "", "elif", "name_layer", "==", "'temconv_2'", ":", "\n", "\t\t\t", "input_source_bn", "=", "self", ".", "bn_2_S", "(", "input_source", ")", "\n", "input_target_bn", "=", "self", ".", "bn_2_T", "(", "input_target", ")", "\n", "\n", "", "input_source_bn", "=", "input_source_bn", ".", "view", "(", "(", "-", "1", ",", "dim", ",", "num_segments", ")", "+", "input_source_bn", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape back (e.g. 80 x 512 --> 16 x 1 x 5 x 512)", "\n", "input_target_bn", "=", "input_target_bn", ".", "view", "(", "(", "-", "1", ",", "dim", ",", "num_segments", ")", "+", "input_target_bn", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "#", "\n", "\n", "# rearange back to the original order of source and target data (since target may be unlabeled)", "\n", "if", "is_train", "and", "num_S_2", ">", "0", "and", "num_T_2", ">", "0", ":", "\n", "\t\t\t", "input_source_bn", "=", "torch", ".", "cat", "(", "(", "input_source_bn", "[", ":", "num_S_1", "]", ",", "input_target_bn", "[", "-", "num_S_2", ":", "]", ")", ",", "0", ")", "\n", "input_target_bn", "=", "torch", ".", "cat", "(", "(", "input_target_bn", "[", ":", "num_T_1", "]", ",", "input_source_bn", "[", "-", "num_T_2", ":", "]", ")", ",", "0", ")", "\n", "\n", "# reshape for frame-level features", "\n", "", "if", "name_layer", "==", "'shared'", "or", "name_layer", "==", "'trn_sum'", ":", "\n", "\t\t\t", "input_source_bn", "=", "input_source_bn", ".", "view", "(", "(", "-", "1", ",", ")", "+", "input_source_bn", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# (e.g. 16 x 1 x 5 x 512 --> 80 x 512)", "\n", "input_target_bn", "=", "input_target_bn", ".", "view", "(", "(", "-", "1", ",", ")", "+", "input_target_bn", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "\n", "", "elif", "name_layer", "==", "'trn'", ":", "\n", "\t\t\t", "input_source_bn", "=", "input_source_bn", ".", "view", "(", "(", "-", "1", ",", "num_segments", ")", "+", "input_source_bn", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# (e.g. 16 x 1 x 5 x 512 --> 80 x 512)", "\n", "input_target_bn", "=", "input_target_bn", ".", "view", "(", "(", "-", "1", ",", "num_segments", ")", "+", "input_target_bn", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "\n", "\n", "", "return", "input_source_bn", ",", "input_target_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.forward": [[545, 723], ["input_source.view", "input_target.view", "models.VideoModel.fc_feature_shared_source", "models.VideoModel.relu", "models.VideoModel.relu", "models.VideoModel.dropout_i", "models.VideoModel.dropout_i", "feat_all_source.append", "feat_all_target.append", "models.VideoModel.domain_classifier_frame", "models.VideoModel.domain_classifier_frame", "pred_domain_all_source.append", "pred_domain_all_target.append", "models.VideoModel.fc_classifier_source", "models.VideoModel.dropout_v", "models.VideoModel.dropout_v", "models.VideoModel.fc_classifier_video_source", "models.VideoModel.domain_classifier_video", "models.VideoModel.domain_classifier_video", "pred_domain_all_source.append", "pred_domain_all_target.append", "models.VideoModel.final_output", "models.VideoModel.final_output", "input_source.size", "input_target.size", "ValueError", "models.VideoModel.fc_feature_shared_target", "models.VideoModel.fc_feature_shared_source", "models.VideoModel.domainAlign", "models.VideoModel.view", "models.VideoModel.view", "models.VideoModel.fc_feature_shared_2_source", "models.VideoModel.relu", "models.VideoModel.relu", "models.VideoModel.dropout_i", "models.VideoModel.dropout_i", "feat_all_source.append", "feat_all_target.append", "models.VideoModel.fc_feature_shared_3_source", "models.VideoModel.relu", "models.VideoModel.relu", "models.VideoModel.dropout_i", "models.VideoModel.dropout_i", "feat_all_source.append", "feat_all_target.append", "models.VideoModel.view", "models.VideoModel.view", "models.VideoModel.get_attn_feat_frame", "models.VideoModel.get_attn_feat_frame", "models.VideoModel.fc_classifier_target", "models.VideoModel.fc_classifier_source", "feat_all_source.append", "feat_all_target.append", "models.VideoModel.aggregate_frames", "models.VideoModel.aggregate_frames", "feat_all_source.append", "feat_all_target.append", "GradReverse.apply", "GradReverse.apply", "models.VideoModel.fc_classifier_video_target", "models.VideoModel.fc_classifier_video_source", "feat_all_source.append", "feat_all_target.append", "models.VideoModel.view", "models.VideoModel.view", "pred_domain_all_source.append", "pred_domain_all_target.append", "pred_domain_all_source.append", "pred_domain_all_target.append", "models.VideoModel.fc_classifier_video_source_2", "models.VideoModel.final_output", "models.VideoModel.final_output", "input_source.size", "input_target.size", "models.VideoModel.alpha.item", "models.VideoModel.fc_feature_shared_2_target", "models.VideoModel.fc_feature_shared_2_source", "models.VideoModel.view", "models.VideoModel.view", "models.VideoModel.fc_feature_shared_3_target", "models.VideoModel.fc_feature_shared_3_source", "models.VideoModel.view", "models.VideoModel.view", "models.VideoModel.view", "pred_fc_target.view", "models.VideoModel.view", "models.VideoModel.view", "models.VideoModel.TRN", "models.VideoModel.TRN", "models.VideoModel.domain_classifier_relation", "models.VideoModel.domain_classifier_relation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "feat_fc_video_source.squeeze().squeeze.squeeze().squeeze.view", "feat_fc_video_target.squeeze().squeeze.squeeze().squeeze.view", "models.VideoModel.view", "pred_fc_video_target.view", "models.VideoModel.size", "models.VideoModel.view", "models.VideoModel.view", "models.VideoModel.fc_classifier_video_target_2", "models.VideoModel.fc_classifier_video_source_2", "models.VideoModel.get_attn_feat_relation", "models.VideoModel.get_attn_feat_relation", "models.VideoModel.view", "models.VideoModel.view", "models.VideoModel.tcl_3_1", "models.VideoModel.tcl_3_1", "models.VideoModel.relu", "models.VideoModel.relu", "feat_fc_video_source.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "feat_fc_video_target.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.domainAlign", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "pred_fc_target.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.alpha.item", "feat_fc_video_source.squeeze().squeeze.squeeze().squeeze.squeeze", "feat_fc_video_target.squeeze().squeeze.squeeze().squeeze.squeeze", "feat_fc_video_source.squeeze().squeeze.squeeze().squeeze.size", "feat_fc_video_target.squeeze().squeeze.squeeze().squeeze.size", "models.VideoModel.size", "pred_fc_video_target.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size", "models.VideoModel.size"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_frame", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_frame", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_video", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_video", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.final_output", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.final_output", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domainAlign", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_attn_feat_frame", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_attn_feat_frame", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.aggregate_frames", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.aggregate_frames", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.final_output", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.final_output", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_relation", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domain_classifier_relation", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_attn_feat_relation", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.get_attn_feat_relation", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.domainAlign"], ["", "def", "forward", "(", "self", ",", "input_source", ",", "input_target", ",", "beta", ",", "mu", ",", "is_train", ",", "reverse", ")", ":", "\n", "\t\t", "batch_source", "=", "input_source", ".", "size", "(", ")", "[", "0", "]", "\n", "batch_target", "=", "input_target", ".", "size", "(", ")", "[", "0", "]", "\n", "num_segments", "=", "self", ".", "train_segments", "if", "is_train", "else", "self", ".", "val_segments", "\n", "# sample_len = (3 if self.modality == \"RGB\" else 2) * self.new_length", "\n", "sample_len", "=", "self", ".", "new_length", "\n", "feat_all_source", "=", "[", "]", "\n", "feat_all_target", "=", "[", "]", "\n", "pred_domain_all_source", "=", "[", "]", "\n", "pred_domain_all_target", "=", "[", "]", "\n", "\n", "# input_data is a list of tensors --> need to do pre-processing", "\n", "feat_base_source", "=", "input_source", ".", "view", "(", "-", "1", ",", "input_source", ".", "size", "(", ")", "[", "-", "1", "]", ")", "# e.g. 256 x 25 x 2048 --> 6400 x 2048", "\n", "feat_base_target", "=", "input_target", ".", "view", "(", "-", "1", ",", "input_target", ".", "size", "(", ")", "[", "-", "1", "]", ")", "# e.g. 256 x 25 x 2048 --> 6400 x 2048", "\n", "\n", "#=== shared layers ===#", "\n", "# need to separate BN for source & target ==> otherwise easy to overfit to source data", "\n", "if", "self", ".", "add_fc", "<", "1", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "Back", ".", "RED", "+", "'not enough fc layer'", ")", "\n", "\n", "", "feat_fc_source", "=", "self", ".", "fc_feature_shared_source", "(", "feat_base_source", ")", "\n", "feat_fc_target", "=", "self", ".", "fc_feature_shared_target", "(", "feat_base_target", ")", "if", "self", ".", "share_params", "==", "'N'", "else", "self", ".", "fc_feature_shared_source", "(", "feat_base_target", ")", "\n", "\n", "# adaptive BN", "\n", "if", "self", ".", "use_bn", "!=", "'none'", ":", "\n", "\t\t\t", "feat_fc_source", ",", "feat_fc_target", "=", "self", ".", "domainAlign", "(", "feat_fc_source", ",", "feat_fc_target", ",", "is_train", ",", "'shared'", ",", "self", ".", "alpha", ".", "item", "(", ")", ",", "num_segments", ",", "1", ")", "\n", "\n", "", "feat_fc_source", "=", "self", ".", "relu", "(", "feat_fc_source", ")", "\n", "feat_fc_target", "=", "self", ".", "relu", "(", "feat_fc_target", ")", "\n", "feat_fc_source", "=", "self", ".", "dropout_i", "(", "feat_fc_source", ")", "\n", "feat_fc_target", "=", "self", ".", "dropout_i", "(", "feat_fc_target", ")", "\n", "\n", "# feat_fc = self.dropout_i(feat_fc)", "\n", "feat_all_source", ".", "append", "(", "feat_fc_source", ".", "view", "(", "(", "batch_source", ",", "num_segments", ")", "+", "feat_fc_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "# reshape ==> 1st dim is the batch size", "\n", "feat_all_target", ".", "append", "(", "feat_fc_target", ".", "view", "(", "(", "batch_target", ",", "num_segments", ")", "+", "feat_fc_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "\n", "if", "self", ".", "add_fc", ">", "1", ":", "\n", "\t\t\t", "feat_fc_source", "=", "self", ".", "fc_feature_shared_2_source", "(", "feat_fc_source", ")", "\n", "feat_fc_target", "=", "self", ".", "fc_feature_shared_2_target", "(", "feat_fc_target", ")", "if", "self", ".", "share_params", "==", "'N'", "else", "self", ".", "fc_feature_shared_2_source", "(", "feat_fc_target", ")", "\n", "\n", "feat_fc_source", "=", "self", ".", "relu", "(", "feat_fc_source", ")", "\n", "feat_fc_target", "=", "self", ".", "relu", "(", "feat_fc_target", ")", "\n", "feat_fc_source", "=", "self", ".", "dropout_i", "(", "feat_fc_source", ")", "\n", "feat_fc_target", "=", "self", ".", "dropout_i", "(", "feat_fc_target", ")", "\n", "\n", "feat_all_source", ".", "append", "(", "feat_fc_source", ".", "view", "(", "(", "batch_source", ",", "num_segments", ")", "+", "feat_fc_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "# reshape ==> 1st dim is the batch size", "\n", "feat_all_target", ".", "append", "(", "feat_fc_target", ".", "view", "(", "(", "batch_target", ",", "num_segments", ")", "+", "feat_fc_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "add_fc", ">", "2", ":", "\n", "\t\t\t", "feat_fc_source", "=", "self", ".", "fc_feature_shared_3_source", "(", "feat_fc_source", ")", "\n", "feat_fc_target", "=", "self", ".", "fc_feature_shared_3_target", "(", "feat_fc_target", ")", "if", "self", ".", "share_params", "==", "'N'", "else", "self", ".", "fc_feature_shared_3_source", "(", "feat_fc_target", ")", "\n", "\n", "feat_fc_source", "=", "self", ".", "relu", "(", "feat_fc_source", ")", "\n", "feat_fc_target", "=", "self", ".", "relu", "(", "feat_fc_target", ")", "\n", "feat_fc_source", "=", "self", ".", "dropout_i", "(", "feat_fc_source", ")", "\n", "feat_fc_target", "=", "self", ".", "dropout_i", "(", "feat_fc_target", ")", "\n", "\n", "feat_all_source", ".", "append", "(", "feat_fc_source", ".", "view", "(", "(", "batch_source", ",", "num_segments", ")", "+", "feat_fc_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "# reshape ==> 1st dim is the batch size", "\n", "feat_all_target", ".", "append", "(", "feat_fc_target", ".", "view", "(", "(", "batch_target", ",", "num_segments", ")", "+", "feat_fc_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "\n", "# === adversarial branch (frame-level) ===#", "\n", "", "pred_fc_domain_frame_source", "=", "self", ".", "domain_classifier_frame", "(", "feat_fc_source", ",", "beta", ")", "\n", "pred_fc_domain_frame_target", "=", "self", ".", "domain_classifier_frame", "(", "feat_fc_target", ",", "beta", ")", "\n", "\n", "pred_domain_all_source", ".", "append", "(", "pred_fc_domain_frame_source", ".", "view", "(", "(", "batch_source", ",", "num_segments", ")", "+", "pred_fc_domain_frame_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "pred_domain_all_target", ".", "append", "(", "pred_fc_domain_frame_target", ".", "view", "(", "(", "batch_target", ",", "num_segments", ")", "+", "pred_fc_domain_frame_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "\n", "if", "self", ".", "use_attn_frame", "!=", "'none'", ":", "# attend the frame-level features only", "\n", "\t\t\t", "feat_fc_source", "=", "self", ".", "get_attn_feat_frame", "(", "feat_fc_source", ",", "pred_fc_domain_frame_source", ")", "\n", "feat_fc_target", "=", "self", ".", "get_attn_feat_frame", "(", "feat_fc_target", ",", "pred_fc_domain_frame_target", ")", "\n", "\n", "#=== source layers (frame-level) ===#", "\n", "", "pred_fc_source", "=", "self", ".", "fc_classifier_source", "(", "feat_fc_source", ")", "\n", "pred_fc_target", "=", "self", ".", "fc_classifier_target", "(", "feat_fc_target", ")", "if", "self", ".", "share_params", "==", "'N'", "else", "self", ".", "fc_classifier_source", "(", "feat_fc_target", ")", "\n", "if", "self", ".", "baseline_type", "==", "'frame'", ":", "\n", "\t\t\t", "feat_all_source", ".", "append", "(", "pred_fc_source", ".", "view", "(", "(", "batch_source", ",", "num_segments", ")", "+", "pred_fc_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "# reshape ==> 1st dim is the batch size", "\n", "feat_all_target", ".", "append", "(", "pred_fc_target", ".", "view", "(", "(", "batch_target", ",", "num_segments", ")", "+", "pred_fc_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "\n", "### aggregate the frame-based features to video-based features ###", "\n", "", "if", "self", ".", "frame_aggregation", "==", "'avgpool'", "or", "self", ".", "frame_aggregation", "==", "'rnn'", ":", "\n", "\t\t\t", "feat_fc_video_source", "=", "self", ".", "aggregate_frames", "(", "feat_fc_source", ",", "num_segments", ",", "pred_fc_domain_frame_source", ")", "\n", "feat_fc_video_target", "=", "self", ".", "aggregate_frames", "(", "feat_fc_target", ",", "num_segments", ",", "pred_fc_domain_frame_target", ")", "\n", "\n", "attn_relation_source", "=", "feat_fc_video_source", "[", ":", ",", "0", "]", "# assign random tensors to attention values to avoid runtime error", "\n", "attn_relation_target", "=", "feat_fc_video_target", "[", ":", ",", "0", "]", "# assign random tensors to attention values to avoid runtime error", "\n", "\n", "", "elif", "'trn'", "in", "self", ".", "frame_aggregation", ":", "\n", "\t\t\t", "feat_fc_video_source", "=", "feat_fc_source", ".", "view", "(", "(", "-", "1", ",", "num_segments", ")", "+", "feat_fc_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape based on the segments (e.g. 640x512 --> 128x5x512)", "\n", "feat_fc_video_target", "=", "feat_fc_target", ".", "view", "(", "(", "-", "1", ",", "num_segments", ")", "+", "feat_fc_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape based on the segments (e.g. 640x512 --> 128x5x512)", "\n", "\n", "feat_fc_video_relation_source", "=", "self", ".", "TRN", "(", "feat_fc_video_source", ")", "# 128x5x512 --> 128x5x256 (256-dim. relation feature vectors x 5)", "\n", "feat_fc_video_relation_target", "=", "self", ".", "TRN", "(", "feat_fc_video_target", ")", "\n", "\n", "# adversarial branch", "\n", "pred_fc_domain_video_relation_source", "=", "self", ".", "domain_classifier_relation", "(", "feat_fc_video_relation_source", ",", "beta", ")", "\n", "pred_fc_domain_video_relation_target", "=", "self", ".", "domain_classifier_relation", "(", "feat_fc_video_relation_target", ",", "beta", ")", "\n", "\n", "# transferable attention", "\n", "if", "self", ".", "use_attn", "!=", "'none'", ":", "# get the attention weighting", "\n", "\t\t\t\t", "feat_fc_video_relation_source", ",", "attn_relation_source", "=", "self", ".", "get_attn_feat_relation", "(", "feat_fc_video_relation_source", ",", "pred_fc_domain_video_relation_source", ",", "num_segments", ")", "\n", "feat_fc_video_relation_target", ",", "attn_relation_target", "=", "self", ".", "get_attn_feat_relation", "(", "feat_fc_video_relation_target", ",", "pred_fc_domain_video_relation_target", ",", "num_segments", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "attn_relation_source", "=", "feat_fc_video_relation_source", "[", ":", ",", ":", ",", "0", "]", "# assign random tensors to attention values to avoid runtime error", "\n", "attn_relation_target", "=", "feat_fc_video_relation_target", "[", ":", ",", ":", ",", "0", "]", "# assign random tensors to attention values to avoid runtime error", "\n", "\n", "# sum up relation features (ignore 1-relation)", "\n", "", "feat_fc_video_source", "=", "torch", ".", "sum", "(", "feat_fc_video_relation_source", ",", "1", ")", "\n", "feat_fc_video_target", "=", "torch", ".", "sum", "(", "feat_fc_video_relation_target", ",", "1", ")", "\n", "\n", "", "elif", "self", ".", "frame_aggregation", "==", "'temconv'", ":", "# DA operation inside temconv", "\n", "\t\t\t", "feat_fc_video_source", "=", "feat_fc_source", ".", "view", "(", "(", "-", "1", ",", "1", ",", "num_segments", ")", "+", "feat_fc_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape based on the segments", "\n", "feat_fc_video_target", "=", "feat_fc_target", ".", "view", "(", "(", "-", "1", ",", "1", ",", "num_segments", ")", "+", "feat_fc_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", "# reshape based on the segments", "\n", "\n", "# 1st TCL", "\n", "feat_fc_video_source_3_1", "=", "self", ".", "tcl_3_1", "(", "feat_fc_video_source", ")", "\n", "feat_fc_video_target_3_1", "=", "self", ".", "tcl_3_1", "(", "feat_fc_video_target", ")", "\n", "\n", "if", "self", ".", "use_bn", "!=", "'none'", ":", "\n", "\t\t\t\t", "feat_fc_video_source_3_1", ",", "feat_fc_video_target_3_1", "=", "self", ".", "domainAlign", "(", "feat_fc_video_source_3_1", ",", "feat_fc_video_target_3_1", ",", "is_train", ",", "'temconv_1'", ",", "self", ".", "alpha", ".", "item", "(", ")", ",", "num_segments", ",", "1", ")", "\n", "\n", "", "feat_fc_video_source", "=", "self", ".", "relu", "(", "feat_fc_video_source_3_1", ")", "# 16 x 1 x 5 x 512", "\n", "feat_fc_video_target", "=", "self", ".", "relu", "(", "feat_fc_video_target_3_1", ")", "# 16 x 1 x 5 x 512", "\n", "\n", "feat_fc_video_source", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "(", "num_segments", ",", "1", ")", ")", "(", "feat_fc_video_source", ")", "# 16 x 4 x 1 x 512", "\n", "feat_fc_video_target", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "(", "num_segments", ",", "1", ")", ")", "(", "feat_fc_video_target", ")", "# 16 x 4 x 1 x 512", "\n", "\n", "feat_fc_video_source", "=", "feat_fc_video_source", ".", "squeeze", "(", "1", ")", ".", "squeeze", "(", "1", ")", "# e.g. 16 x 512", "\n", "feat_fc_video_target", "=", "feat_fc_video_target", ".", "squeeze", "(", "1", ")", ".", "squeeze", "(", "1", ")", "# e.g. 16 x 512", "\n", "\n", "", "if", "self", ".", "baseline_type", "==", "'video'", ":", "\n", "\t\t\t", "feat_all_source", ".", "append", "(", "feat_fc_video_source", ".", "view", "(", "(", "batch_source", ",", ")", "+", "feat_fc_video_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "feat_all_target", ".", "append", "(", "feat_fc_video_target", ".", "view", "(", "(", "batch_target", ",", ")", "+", "feat_fc_video_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "\n", "#=== source layers (video-level) ===#", "\n", "", "feat_fc_video_source", "=", "self", ".", "dropout_v", "(", "feat_fc_video_source", ")", "\n", "feat_fc_video_target", "=", "self", ".", "dropout_v", "(", "feat_fc_video_target", ")", "\n", "\n", "if", "reverse", ":", "\n", "\t\t\t", "feat_fc_video_source", "=", "GradReverse", ".", "apply", "(", "feat_fc_video_source", ",", "mu", ")", "\n", "feat_fc_video_target", "=", "GradReverse", ".", "apply", "(", "feat_fc_video_target", ",", "mu", ")", "\n", "\n", "", "pred_fc_video_source", "=", "self", ".", "fc_classifier_video_source", "(", "feat_fc_video_source", ")", "\n", "pred_fc_video_target", "=", "self", ".", "fc_classifier_video_target", "(", "feat_fc_video_target", ")", "if", "self", ".", "share_params", "==", "'N'", "else", "self", ".", "fc_classifier_video_source", "(", "feat_fc_video_target", ")", "\n", "\n", "if", "self", ".", "baseline_type", "==", "'video'", ":", "# only store the prediction from classifier 1 (for now)", "\n", "\t\t\t", "feat_all_source", ".", "append", "(", "pred_fc_video_source", ".", "view", "(", "(", "batch_source", ",", ")", "+", "pred_fc_video_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "feat_all_target", ".", "append", "(", "pred_fc_video_target", ".", "view", "(", "(", "batch_target", ",", ")", "+", "pred_fc_video_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "\n", "#=== adversarial branch (video-level) ===#", "\n", "", "pred_fc_domain_video_source", "=", "self", ".", "domain_classifier_video", "(", "feat_fc_video_source", ",", "beta", ")", "\n", "pred_fc_domain_video_target", "=", "self", ".", "domain_classifier_video", "(", "feat_fc_video_target", ",", "beta", ")", "\n", "\n", "pred_domain_all_source", ".", "append", "(", "pred_fc_domain_video_source", ".", "view", "(", "(", "batch_source", ",", ")", "+", "pred_fc_domain_video_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "pred_domain_all_target", ".", "append", "(", "pred_fc_domain_video_target", ".", "view", "(", "(", "batch_target", ",", ")", "+", "pred_fc_domain_video_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "\n", "# video relation-based discriminator", "\n", "if", "self", ".", "frame_aggregation", "==", "'trn-m'", ":", "\n", "\t\t\t", "num_relation", "=", "feat_fc_video_relation_source", ".", "size", "(", ")", "[", "1", "]", "\n", "pred_domain_all_source", ".", "append", "(", "pred_fc_domain_video_relation_source", ".", "view", "(", "(", "batch_source", ",", "num_relation", ")", "+", "pred_fc_domain_video_relation_source", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "pred_domain_all_target", ".", "append", "(", "pred_fc_domain_video_relation_target", ".", "view", "(", "(", "batch_target", ",", "num_relation", ")", "+", "pred_fc_domain_video_relation_target", ".", "size", "(", ")", "[", "-", "1", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "pred_domain_all_source", ".", "append", "(", "pred_fc_domain_video_source", ")", "# if not trn-m, add dummy tensors for relation features", "\n", "pred_domain_all_target", ".", "append", "(", "pred_fc_domain_video_target", ")", "\n", "\n", "#=== final output ===#", "\n", "", "output_source", "=", "self", ".", "final_output", "(", "pred_fc_source", ",", "pred_fc_video_source", ",", "num_segments", ")", "# select output from frame or video prediction", "\n", "output_target", "=", "self", ".", "final_output", "(", "pred_fc_target", ",", "pred_fc_video_target", ",", "num_segments", ")", "\n", "\n", "output_source_2", "=", "output_source", "\n", "output_target_2", "=", "output_target", "\n", "\n", "if", "self", ".", "ens_DA", "==", "'MCD'", ":", "\n", "\t\t\t", "pred_fc_video_source_2", "=", "self", ".", "fc_classifier_video_source_2", "(", "feat_fc_video_source", ")", "\n", "pred_fc_video_target_2", "=", "self", ".", "fc_classifier_video_target_2", "(", "feat_fc_video_target", ")", "if", "self", ".", "share_params", "==", "'N'", "else", "self", ".", "fc_classifier_video_source_2", "(", "feat_fc_video_target", ")", "\n", "output_source_2", "=", "self", ".", "final_output", "(", "pred_fc_source", ",", "pred_fc_video_source_2", ",", "num_segments", ")", "\n", "output_target_2", "=", "self", ".", "final_output", "(", "pred_fc_target", ",", "pred_fc_video_target_2", ",", "num_segments", ")", "\n", "\n", "", "return", "attn_relation_source", ",", "output_source", ",", "output_source_2", ",", "pred_domain_all_source", "[", ":", ":", "-", "1", "]", ",", "feat_all_source", "[", ":", ":", "-", "1", "]", ",", "attn_relation_target", ",", "output_target", ",", "output_target_2", ",", "pred_domain_all_target", "[", ":", ":", "-", "1", "]", ",", "feat_all_target", "[", ":", ":", "-", "1", "]", "# reverse the order of feature list due to some multi-gpu issues", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.test_models.eval_video": [[115, 143], ["data.cuda.cuda", "label.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "out[].data.cpu().numpy().copy", "out[].data.cpu().numpy().copy", "max", "out[].data.cpu().numpy().copy.reshape().mean().reshape", "out[].data.cpu().numpy().copy.reshape().mean().reshape", "numpy.mean", "label.cuda.cpu().numpy", "attn.cpu", "out[].data.cpu().numpy", "out[].data.cpu().numpy", "torch.Softmax", "out[].data.cpu().numpy().copy.reshape().mean", "data.cuda.size", "max", "out[].data.cpu().numpy().copy.reshape().mean", "data.cuda.size", "max", "label.cuda.cpu", "out[].data.cpu", "out[].data.cpu", "out[].data.cpu().numpy().copy.reshape", "out[].data.cpu().numpy().copy.reshape", "data.cuda.size", "max", "data.cuda.size", "max"], "function", ["None"], ["def", "eval_video", "(", "video_data", ")", ":", "\n", "\t", "i", ",", "data", ",", "label", "=", "video_data", "\n", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# pytorch 0.4.X", "\n", "\n", "num_crop", "=", "1", "\n", "\n", "# e.g.", "\n", "# data.shape = [1,sample # x 2048]", "\n", "# data.view(-1, length, data.size(2), data.size(3)).shape = [sample #,2048]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "attn", ",", "out", ",", "_", ",", "_", ",", "_", "=", "net", "(", "data", ",", "data", ",", "[", "0", ",", "0", ",", "0", "]", ",", "0", ",", "is_train", "=", "False", ",", "reverse", "=", "False", ")", "\n", "out", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "out", ")", ".", "topk", "(", "max", "(", "args", ".", "top", ")", ")", "\n", "prob", "=", "out", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "# rst.shape = [sample #, top class #]", "\n", "pred_labels", "=", "out", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "# rst.shape = [sample #, top class #]", "\n", "\n", "if", "args", ".", "baseline_type", "==", "'video'", ":", "\n", "\t\t\t", "prob_video", "=", "prob", ".", "reshape", "(", "(", "data", ".", "size", "(", "0", ")", ",", "num_crop", ",", "max", "(", "args", ".", "top", ")", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "\n", "(", "data", ".", "size", "(", "0", ")", ",", "max", "(", "args", ".", "top", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "prob_video", "=", "prob", ".", "reshape", "(", "(", "data", ".", "size", "(", "0", ")", ",", "num_crop", ",", "args", ".", "test_segments", ",", "max", "(", "args", ".", "top", ")", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "\n", "(", "data", ".", "size", "(", "0", ")", ",", "args", ".", "test_segments", ",", "max", "(", "args", ".", "top", ")", ")", ")", "\n", "prob_video", "=", "np", ".", "mean", "(", "prob_video", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "", "return", "i", ",", "prob_video", ",", "pred_labels", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "attn", ".", "cpu", "(", ")", "\n", "#############################################################", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeterIvan.__init__": [[1223, 1229], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "num_class", "\n", "\n", "self", ".", "avg", "=", "np", ".", "zeros", "(", "num_class", ")", "\n", "self", ".", "sum", "=", "np", ".", "zeros", "(", "num_class", ")", "\n", "self", ".", "count", "=", "np", ".", "zeros", "(", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeterIvan.reset": [[1230, 1235], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "avg", "=", "np", ".", "zeros", "(", "self", ".", "num_class", ")", "\n", "self", ".", "sum", "=", "np", ".", "zeros", "(", "self", ".", "num_class", ")", "\n", "self", ".", "count", "=", "np", ".", "zeros", "(", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeterIvan.update": [[1236, 1241], ["enumerate"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "class_idx", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "for", "i", ",", "value", "in", "enumerate", "(", "class_idx", ")", ":", "\n", "            ", "self", ".", "sum", "[", "value", "]", "+=", "val", "[", "i", "]", "*", "n", "\n", "self", ".", "count", "[", "value", "]", "+=", "n", "\n", "self", ".", "avg", "[", "value", "]", "=", "self", ".", "sum", "[", "value", "]", "/", "self", ".", "count", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.__init__": [[1245, 1247], ["main.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.reset": [[1248, 1253], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update": [[1254, 1259], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "\t\t", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.main": [[47, 463], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "colorama.init", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.add_argument", "opts.parser.parse_args", "class_names.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.VideoModel", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "sum", "sum", "sum", "max", "numpy.unique", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "dataset.TSNDataSet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "time.time", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "time.time", "open.write", "print", "print", "print", "len", "main.AverageMeterIvan", "main.AverageMeterIvan", "os.path.isdir", "os.makedirs", "tensorboardX.SummaryWriter", "print", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.isfile", "open", "open", "open", "print", "print", "round", "round", "int", "numpy.array", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "dataset.TSNDataSet", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.TSNDataSet", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "ValueError", "print", "main.validate", "open.write", "print", "main.train", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "open.close", "open.close", "open.close", "open.close", "open.close", "tensorboardX.SummaryWriter.close", "numpy.savetxt", "numpy.savetxt", "trial.suggest_loguniform", "trial.suggest_loguniform", "trial.suggest_uniform", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "line.strip().split", "open", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "print", "exit", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "print", "print", "open", "open", "open", "open", "open.write", "open.write", "open.write", "open.write", "open", "open", "open", "open", "open", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "main.adjust_learning_rate_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "main.validate", "trial.report", "trial.should_prune", "open.write", "max", "torch.cat.cpu().detach().numpy", "torch.cat.cpu().detach().numpy", "trial.suggest_int", "trial.suggest_uniform", "print", "print", "print", "torch.nn.DataParallel().cuda.parameters", "print", "torch.optim.Adam.load_state_dict", "open", "open", "open", "line.strip().split", "class_data_counts.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "main.adjust_learning_rate", "optuna.exceptions.TrialPruned", "print", "tensorboardX.SummaryWriter.add_text", "main.save_checkpoint", "trial.suggest_loguniform", "trial.suggest_uniform", "trial.suggest_uniform", "len", "ValueError", "line.strip", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "attn_epoch_source.unsqueeze", "attn_epoch_target.unsqueeze", "str", "str", "torch.cat.cpu().detach", "str", "torch.cat.cpu().detach", "trial.suggest_uniform", "str", "str", "str", "str", "line.strip", "math.exp", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.Adam.state_dict", "torch.cat.cpu", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.validate", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.train", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.adjust_learning_rate_loss", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.validate", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.save_checkpoint"], ["def", "main", "(", "trial", ")", ":", "\n", "\n", "# To run CEVT model only, and get the similar result in paper,", "\n", "# You only need to change code BLOCK 1 for dataset selecting,", "\n", "# and BLOCK 2 for hyper-parameters selecting.", "\n", "# Please search BLOCK 1 or BLOCK 2 in this file.", "\n", "\n", "\t", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "torch", ".", "manual_seed", "(", "1", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "1", ")", "\n", "\n", "init", "(", "autoreset", "=", "True", ")", "\n", "\n", "global", "args", ",", "best_prec1", ",", "writer", "\n", "best_prec1", "=", "0", "\n", "sys", ".", "argv", "+=", "'data/classInd_ucf_olympic.txt RGB /media/bigdata/uqyluo/MM2020Data/olympic/list_olympic_train_ucf_olympic-feature.txt /media/bigdata/uqyluo/MM2020Data/ucf101/list_ucf101_train_ucf_olympic-feature.txt /media/bigdata/uqyluo/MM2020Data/ucf101/list_ucf101_val_ucf_olympic-feature.txt --exp_path action/Testexp-SGD-share_params_Y-lr_3e-2-bS_32_129/ucf_olympic-16seg-disDA_none-alpha_0-advDA_none-beta_1_0.75_0.5-useBN_none-addlossDA_none-gamma_0.3-ensDA_none-mu_0-useAttn_none-n_attn_1/ --arch resnet101 --pretrained none --baseline_type video --frame_aggregation avgpool --num_segments 16 --val_segments 16 --add_fc 1 --fc_dim 512 --dropout_i 0.5 --dropout_v 0.5 --use_target uSv --share_params Y --dis_DA none --alpha 0 --place_dis N Y N --adv_DA none --beta 1 0.75 0.5 --place_adv N Y Y --use_bn none --add_loss_DA none --gamma 0.3 --ens_DA none --mu 0 --use_attn none --n_attn 1 --use_attn_frame none --gd 20 --lr 3e-2 --lr_decay 10 --lr_adaptive dann --lr_steps 10 20 --epochs 50 --optimizer SGD --n_rnn 1 --rnn_cell LSTM --n_directions 1 --n_ts 5 -b 32 129 32 -j 4 -ef 1 -pf 50 -sf 50 --copy_list N N'", ".", "split", "(", ")", "\n", "\n", "# arguments setting", "\n", "parser", ".", "add_argument", "(", "'--open_method'", ",", "default", "=", "\"cls EVT\"", ",", "choices", "=", "[", "'OSVM'", ",", "'cls OSVM'", ",", "'EVT'", ",", "'cls EVT'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--OSVM_threshold'", ",", "default", "=", "0.995", ")", "#args.OSVM_threshold python main.py", "\n", "parser", ".", "add_argument", "(", "'--EVT_threshold'", ",", "default", "=", "0.53", ")", "# python main.py", "\n", "parser", ".", "add_argument", "(", "'--EVT_power'", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--mix_interval_length'", ",", "default", "=", "0.5", ")", "\n", "\n", "# Entropy Maximization Loss", "\n", "parser", ".", "add_argument", "(", "'--entropy_max_loss'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_'", ",", "default", "=", "1.5", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_param'", ",", "default", "=", "0.1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--tsne'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--auto'", ",", "default", "=", "False", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "########## BLOCK 1: Change Here for Different Datasets ##########", "\n", "args", ".", "class_file", "=", "\"data/classInd_ucf_olympic.txt\"", "\n", "args", ".", "train_source_list", "=", "\"dataset/olympic/list_olympic_train_ucf_olympic-feature.txt\"", "\n", "args", ".", "train_target_list", "=", "\"dataset/ucf101/list_ucf101_train_ucf_olympic-feature.txt\"", "\n", "args", ".", "val_list", "=", "\"dataset/ucf101/list_ucf101_val_ucf_olympic-feature.txt\"", "\n", "########## END OF BLOCK 1 ##########", "\n", "\n", "\n", "method", "=", "\"CEVT\"", "# CEVT | TA2N | TA3N | JAN | DAN | MCD | AdaBN", "\n", "args", ".", "auto", "=", "False", "# True | False", "\n", "\n", "if", "method", "==", "\"CEVT\"", ":", "\n", "\t\t", "args", ".", "entropy_max_loss", "=", "True", "# True | False", "\n", "args", ".", "open_method", "=", "\"cls EVT\"", "\n", "args", ".", "adv_DA", "=", "\"RevGrad\"", "# RevGrad | none", "\n", "if", "args", ".", "auto", ":", "\n", "\t\t\t", "args", ".", "lambda_", "=", "trial", ".", "suggest_loguniform", "(", "\"lambda_\"", ",", "1e-2", ",", "1e1", ")", "\n", "args", ".", "adv_param", "=", "trial", ".", "suggest_loguniform", "(", "\"adv_param\"", ",", "1e-2", ",", "2e1", ")", "\n", "args", ".", "EVT_threshold", "=", "trial", ".", "suggest_uniform", "(", "\"EVT_threshold\"", ",", "0.2", ",", "0.7", ")", "\n", "", "else", ":", "\n", "\n", "\n", "########## BLOCK 2: Change Here for Different Hyper-Parameters ##########", "\n", "\t\t\t", "args", ".", "lambda_", "=", "0.214", "# H->U 0.7 | U->O 0.19 | O->U 0.214", "\n", "args", ".", "adv_param", "=", "5", "# H->U 0.10 | U->O 1.83 | O->U 5", "\n", "args", ".", "EVT_threshold", "=", "0.3", "# H->U 0.45 | U->O  0.565 | O->U 0.3", "\n", "########## END OF BLOCK 2 ##########", "\n", "\n", "\n", "\n", "", "", "elif", "method", "==", "\"TA2N\"", "or", "method", "==", "\"TA3N\"", ":", "\n", "\t\t", "args", ".", "frame_aggregation", "=", "'trn-m'", "\n", "args", ".", "adv_DA", "=", "\"RevGrad\"", "\n", "args", ".", "use_attn", "=", "\"TransAttn\"", "\n", "args", ".", "place_adv", "[", "0", "]", "=", "'Y'", "\n", "if", "args", ".", "auto", ":", "\n", "\t\t\t", "if", "method", "==", "\"TA3N\"", ":", "\n", "\t\t\t\t", "args", ".", "add_loss_DA", "=", "\"attentive_entropy\"", "\n", "args", ".", "gamma", "=", "trial", ".", "suggest_loguniform", "(", "\"c\"", ",", "1e-3", ",", "1e1", ")", "\n", "", "segments", "=", "trial", ".", "suggest_int", "(", "\"segments\"", ",", "2", ",", "5", ")", "\n", "args", ".", "OSVM_threshold", "=", "trial", ".", "suggest_uniform", "(", "\"OSVM_threshold\"", ",", "0.6", ",", "0.99", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "method", "==", "\"TA3N\"", ":", "\n", "\t\t\t\t", "args", ".", "add_loss_DA", "=", "\"attentive_entropy\"", "\n", "args", ".", "gamma", "=", "0.009903869666099867", "\n", "", "segments", "=", "4", "\n", "args", ".", "OSVM_threshold", "=", "0.8990617407877891", "\n", "", "args", ".", "num_segments", "=", "segments", "\n", "args", ".", "val_segments", "=", "segments", "\n", "", "elif", "method", "==", "\"JAN\"", "or", "method", "==", "\"DAN\"", ":", "\n", "\t\t", "args", ".", "dis_DA", "=", "method", "\n", "args", ".", "alpha", "=", "trial", ".", "suggest_uniform", "(", "\"alpha\"", ",", "0.01", ",", "2", ")", "if", "args", ".", "auto", "else", "0.1", "# 1 | 0.1 | 0.01", "\n", "args", ".", "OSVM_threshold", "=", "trial", ".", "suggest_uniform", "(", "\"OSVM_threshold\"", ",", "0.5", ",", "0.99", ")", "if", "args", ".", "auto", "else", "0.99", "\n", "", "elif", "method", "==", "\"MCD\"", "or", "method", "==", "\"AdaBN\"", ":", "\n", "\t\t", "args", ".", "ens_DA", "=", "method", "if", "method", "==", "\"MCD\"", "else", "\"none\"", "\n", "args", ".", "use_bn", "=", "method", "if", "method", "==", "\"AdaBN\"", "else", "\"none\"", "\n", "args", ".", "OSVM_threshold", "=", "trial", ".", "suggest_uniform", "(", "\"OSVM_threshold\"", ",", "0.5", ",", "0.99", ")", "if", "args", ".", "auto", "else", "0.9999", "\n", "\n", "", "if", "args", ".", "auto", "==", "False", ":", "\n", "\t\t", "if", "args", ".", "open_method", "==", "\"cls EVT\"", ":", "\n", "\t\t\t", "print", "(", "Fore", ".", "GREEN", "+", "'adv_param:'", ",", "args", ".", "adv_param", ")", "\n", "\n", "", "if", "args", ".", "open_method", "==", "\"EVT\"", "or", "args", ".", "open_method", "==", "\"cls EVT\"", ":", "\n", "\t\t\t", "print", "(", "Fore", ".", "GREEN", "+", "'EVT_threshold:'", ",", "args", ".", "EVT_threshold", ")", "\n", "print", "(", "Fore", ".", "GREEN", "+", "'EVT_power:'", ",", "args", ".", "EVT_power", ")", "\n", "print", "(", "Fore", ".", "GREEN", "+", "'mix_interval_length:'", ",", "args", ".", "mix_interval_length", ")", "\n", "\n", "", "if", "args", ".", "entropy_max_loss", ":", "\n", "\t\t\t", "print", "(", ")", "\n", "print", "(", "Fore", ".", "GREEN", "+", "\"Using entropy maximization loss ...\"", ")", "\n", "print", "(", "Fore", ".", "GREEN", "+", "'lambda_:'", ",", "args", ".", "lambda_", ")", "\n", "print", "(", ")", "\n", "\n", "", "if", "args", ".", "open_method", "==", "\"OSVM\"", ":", "\n", "\t\t\t", "print", "(", "Fore", ".", "GREEN", "+", "'OSVM_threshold:'", ",", "args", ".", "OSVM_threshold", ")", "\n", "\n", "", "print", "(", "Fore", ".", "GREEN", "+", "'Baseline:'", ",", "args", ".", "baseline_type", ")", "\n", "print", "(", "Fore", ".", "GREEN", "+", "'Frame aggregation method:'", ",", "args", ".", "frame_aggregation", ")", "\n", "\n", "print", "(", "Fore", ".", "GREEN", "+", "'target data usage:'", ",", "args", ".", "use_target", ")", "\n", "\n", "if", "args", ".", "use_target", "==", "'none'", ":", "\n", "\t\t\t", "print", "(", "Fore", ".", "GREEN", "+", "'no Domain Adaptation'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "args", ".", "dis_DA", "!=", "'none'", ":", "\n", "\t\t\t\t", "print", "(", "Fore", ".", "GREEN", "+", "'Apply the discrepancy-based Domain Adaptation approach:'", ",", "args", ".", "dis_DA", ")", "\n", "if", "len", "(", "args", ".", "place_dis", ")", "!=", "args", ".", "add_fc", "+", "2", ":", "\n", "\t\t\t\t\t", "raise", "ValueError", "(", "Back", ".", "RED", "+", "'len(place_dis) should be equal to add_fc + 2'", ")", "\n", "\n", "", "", "if", "args", ".", "adv_DA", "!=", "'none'", ":", "\n", "\t\t\t\t", "print", "(", "Fore", ".", "GREEN", "+", "'Apply the adversarial-based Domain Adaptation approach:'", ",", "args", ".", "adv_DA", ")", "\n", "\n", "", "if", "args", ".", "use_bn", "!=", "'none'", ":", "\n", "\t\t\t\t", "print", "(", "Fore", ".", "GREEN", "+", "'Apply the adaptive normalization approach:'", ",", "args", ".", "use_bn", ")", "\n", "\n", "# determine the categories", "\n", "", "", "", "class_names", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "[", "1", "]", "for", "line", "in", "open", "(", "args", ".", "class_file", ")", "]", "\n", "num_class", "=", "len", "(", "class_names", ")", "+", "1", "if", "args", ".", "open_method", "==", "\"OSBP\"", "else", "len", "(", "class_names", ")", "\n", "\n", "class_names", ".", "append", "(", "'UNK'", ")", "\n", "\n", "entropy_cuts", "=", "torch", ".", "zeros", "(", "num_class", ")", "\n", "entropy_cuts", "[", "entropy_cuts", "==", "0", "]", "=", "100", "\n", "\n", "meter", "=", "AverageMeterIvan", "(", "num_class", ")", "if", "args", ".", "open_method", "==", "\"OSBP\"", "else", "AverageMeterIvan", "(", "num_class", "+", "1", ")", "\n", "\n", "#=== check the folder existence ===#", "\n", "path_exp", "=", "args", ".", "exp_path", "+", "args", ".", "modality", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path_exp", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "path_exp", ")", "\n", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "\t\t", "writer", "=", "SummaryWriter", "(", "path_exp", "+", "'/tensorboard'", ")", "# for tensorboardX", "\n", "\n", "#=== initialize the model ===#", "\n", "", "if", "args", ".", "auto", "==", "False", ":", "\n", "\t\t", "print", "(", "Fore", ".", "CYAN", "+", "'preparing the model......'", ")", "\n", "", "model", "=", "VideoModel", "(", "num_class", ",", "args", ".", "baseline_type", ",", "args", ".", "frame_aggregation", ",", "args", ".", "modality", ",", "\n", "train_segments", "=", "args", ".", "num_segments", ",", "val_segments", "=", "args", ".", "val_segments", ",", "\n", "base_model", "=", "args", ".", "arch", ",", "path_pretrained", "=", "args", ".", "pretrained", ",", "\n", "add_fc", "=", "args", ".", "add_fc", ",", "fc_dim", "=", "args", ".", "fc_dim", ",", "\n", "dropout_i", "=", "args", ".", "dropout_i", ",", "dropout_v", "=", "args", ".", "dropout_v", ",", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "use_bn", "=", "args", ".", "use_bn", "if", "args", ".", "use_target", "!=", "'none'", "else", "'none'", ",", "ens_DA", "=", "args", ".", "ens_DA", "if", "args", ".", "use_target", "!=", "'none'", "else", "'none'", ",", "\n", "n_rnn", "=", "args", ".", "n_rnn", ",", "rnn_cell", "=", "args", ".", "rnn_cell", ",", "n_directions", "=", "args", ".", "n_directions", ",", "n_ts", "=", "args", ".", "n_ts", ",", "\n", "use_attn", "=", "args", ".", "use_attn", ",", "n_attn", "=", "args", ".", "n_attn", ",", "use_attn_frame", "=", "args", ".", "use_attn_frame", ",", "\n", "verbose", "=", "args", ".", "verbose", ",", "share_params", "=", "args", ".", "share_params", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "if", "args", ".", "optimizer", "==", "'SGD'", ":", "\n", "# print(Fore.YELLOW + 'using SGD')", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "True", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'Adam'", ":", "\n", "# print(Fore.YELLOW + 'using Adam')", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "\t\t", "print", "(", "Back", ".", "RED", "+", "'optimizer not support or specified!!!'", ")", "\n", "exit", "(", ")", "\n", "\n", "#=== check point ===#", "\n", "", "start_epoch", "=", "1", "\n", "# print(Fore.CYAN + 'checking the checkpoint......')", "\n", "if", "args", ".", "resume", ":", "\n", "\t\t", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "\t\t\t", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "if", "args", ".", "resume_hp", ":", "\n", "\t\t\t\t", "print", "(", "\"=> loaded checkpoint hyper-parameters\"", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "print", "(", "Back", ".", "RED", "+", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "#--- open log files ---#", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "\t\t", "if", "args", ".", "resume", ":", "\n", "\t\t\t", "train_file", "=", "open", "(", "path_exp", "+", "'train.log'", ",", "'a'", ")", "\n", "train_short_file", "=", "open", "(", "path_exp", "+", "'train_short.log'", ",", "'a'", ")", "\n", "val_file", "=", "open", "(", "path_exp", "+", "'val.log'", ",", "'a'", ")", "\n", "val_short_file", "=", "open", "(", "path_exp", "+", "'val_short.log'", ",", "'a'", ")", "\n", "train_file", ".", "write", "(", "'========== start: '", "+", "str", "(", "start_epoch", ")", "+", "'\\n'", ")", "# separation line", "\n", "train_short_file", ".", "write", "(", "'========== start: '", "+", "str", "(", "start_epoch", ")", "+", "'\\n'", ")", "\n", "val_file", ".", "write", "(", "'========== start: '", "+", "str", "(", "start_epoch", ")", "+", "'\\n'", ")", "\n", "val_short_file", ".", "write", "(", "'========== start: '", "+", "str", "(", "start_epoch", ")", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "train_short_file", "=", "open", "(", "path_exp", "+", "'train_short.log'", ",", "'w'", ")", "\n", "val_short_file", "=", "open", "(", "path_exp", "+", "'val_short.log'", ",", "'w'", ")", "\n", "train_file", "=", "open", "(", "path_exp", "+", "'train.log'", ",", "'w'", ")", "\n", "val_file", "=", "open", "(", "path_exp", "+", "'val.log'", ",", "'w'", ")", "\n", "\n", "", "val_best_file", "=", "open", "(", "args", ".", "save_best_log", ",", "'a'", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "test_short_file", "=", "open", "(", "path_exp", "+", "'test_short.log'", ",", "'w'", ")", "\n", "test_file", "=", "open", "(", "path_exp", "+", "'test.log'", ",", "'w'", ")", "\n", "\n", "#=== Data loading ===#", "\n", "", "if", "args", ".", "auto", "==", "False", ":", "\n", "\t\t", "print", "(", "Fore", ".", "CYAN", "+", "'loading data......'", ")", "\n", "\n", "", "if", "args", ".", "use_opencv", ":", "\n", "\t\t", "print", "(", "\"use opencv functions\"", ")", "\n", "\n", "", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "\t\t", "data_length", "=", "1", "\n", "", "elif", "args", ".", "modality", "in", "[", "'Flow'", ",", "'RGBDiff'", ",", "'RGBDiff2'", ",", "'RGBDiffplus'", "]", ":", "\n", "\t\t", "data_length", "=", "5", "\n", "\n", "# calculate the number of videos to load for training in each list ==> make sure the iteration # of source & target are same", "\n", "", "num_source", "=", "sum", "(", "1", "for", "i", "in", "open", "(", "args", ".", "train_source_list", ")", ")", "\n", "num_target", "=", "sum", "(", "1", "for", "i", "in", "open", "(", "args", ".", "train_target_list", ")", ")", "\n", "num_val", "=", "sum", "(", "1", "for", "i", "in", "open", "(", "args", ".", "val_list", ")", ")", "\n", "\n", "num_iter_source", "=", "num_source", "/", "args", ".", "batch_size", "[", "0", "]", "\n", "num_iter_target", "=", "num_target", "/", "args", ".", "batch_size", "[", "1", "]", "\n", "num_max_iter", "=", "max", "(", "num_iter_source", ",", "num_iter_target", ")", "\n", "num_source_train", "=", "round", "(", "num_max_iter", "*", "args", ".", "batch_size", "[", "0", "]", ")", "if", "args", ".", "copy_list", "[", "0", "]", "==", "'Y'", "else", "num_source", "\n", "num_target_train", "=", "round", "(", "num_max_iter", "*", "args", ".", "batch_size", "[", "1", "]", ")", "if", "args", ".", "copy_list", "[", "1", "]", "==", "'Y'", "else", "num_target", "\n", "\n", "# calculate the weight for each class", "\n", "class_id_list", "=", "[", "int", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "2", "]", ")", "for", "line", "in", "open", "(", "args", ".", "train_source_list", ")", "]", "\n", "class_id", ",", "class_data_counts", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "class_id_list", ")", ",", "return_counts", "=", "True", ")", "\n", "class_freq", "=", "(", "class_data_counts", "/", "class_data_counts", ".", "sum", "(", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "weight_source_class", "=", "torch", ".", "ones", "(", "num_class", ")", ".", "cuda", "(", ")", "\n", "weight_domain_loss", "=", "torch", ".", "Tensor", "(", "[", "1", ",", "1", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "weighted_class_loss", "==", "'Y'", ":", "\n", "\t\t", "weight_source_class", "=", "1", "/", "torch", ".", "Tensor", "(", "class_freq", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "weighted_class_loss_DA", "==", "'Y'", ":", "\n", "\t\t", "weight_domain_loss", "=", "torch", ".", "Tensor", "(", "[", "1", "/", "num_source_train", ",", "1", "/", "num_target_train", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "# data loading (always need to load the testing data)", "\n", "", "val_segments", "=", "args", ".", "val_segments", "if", "args", ".", "val_segments", ">", "0", "else", "args", ".", "num_segments", "\n", "val_set", "=", "TSNDataSet", "(", "\"\"", ",", "args", ".", "val_list", ",", "num_dataload", "=", "num_val", ",", "num_segments", "=", "val_segments", ",", "\n", "new_length", "=", "data_length", ",", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "\"img_{:05d}.t7\"", "if", "args", ".", "modality", "in", "[", "\"RGB\"", ",", "\"RGBDiff\"", ",", "\"RGBDiff2\"", ",", "\n", "\"RGBDiffplus\"", "]", "else", "args", ".", "flow_prefix", "+", "\"{}_{:05d}.t7\"", ",", "\n", "random_shift", "=", "False", ",", "\n", "test_mode", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_set", ",", "batch_size", "=", "args", ".", "batch_size", "[", "2", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "\t\t", "source_set", "=", "TSNDataSet", "(", "\"\"", ",", "args", ".", "train_source_list", ",", "num_dataload", "=", "num_source_train", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "\"img_{:05d}.t7\"", "if", "args", ".", "modality", "in", "[", "\"RGB\"", ",", "\"RGBDiff\"", ",", "\"RGBDiff2\"", ",", "\"RGBDiffplus\"", "]", "else", "args", ".", "flow_prefix", "+", "\"{}_{:05d}.t7\"", ",", "\n", "random_shift", "=", "False", ",", "\n", "test_mode", "=", "True", ",", "\n", ")", "\n", "\n", "source_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "source_set", ")", "\n", "source_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "source_set", ",", "batch_size", "=", "args", ".", "batch_size", "[", "0", "]", ",", "shuffle", "=", "False", ",", "sampler", "=", "source_sampler", ",", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "target_set", "=", "TSNDataSet", "(", "\"\"", ",", "args", ".", "train_target_list", ",", "num_dataload", "=", "num_target_train", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "\"img_{:05d}.t7\"", "if", "args", ".", "modality", "in", "[", "\"RGB\"", ",", "\"RGBDiff\"", ",", "\"RGBDiff2\"", ",", "\"RGBDiffplus\"", "]", "else", "args", ".", "flow_prefix", "+", "\"{}_{:05d}.t7\"", ",", "\n", "random_shift", "=", "False", ",", "\n", "test_mode", "=", "True", ",", "\n", ")", "\n", "\n", "target_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "target_set", ")", "\n", "target_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "target_set", ",", "batch_size", "=", "args", ".", "batch_size", "[", "1", "]", ",", "shuffle", "=", "False", ",", "sampler", "=", "target_sampler", ",", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# --- Optimizer ---#", "\n", "# define loss function (criterion) and optimizer", "\n", "", "if", "args", ".", "loss_type", "==", "'nll'", ":", "\n", "\t\t", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight_source_class", ")", ".", "cuda", "(", ")", "\n", "criterion_domain", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight_domain_loss", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "\t\t", "print", "(", "Fore", ".", "CYAN", "+", "'evaluation only......'", ")", "\n", "prec1", ",", "entropy_cuts", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "num_class", ",", "0", ",", "test_file", ",", "meter", ")", "\n", "test_short_file", ".", "write", "(", "'%.3f\\n'", "%", "prec1", ")", "\n", "return", "\n", "\n", "#=== Training ===#", "\n", "\n", "", "start_train", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "auto", "==", "False", ":", "\n", "\t\t", "print", "(", "Fore", ".", "CYAN", "+", "'start training......'", ")", "\n", "", "beta", "=", "args", ".", "beta", "\n", "gamma", "=", "args", ".", "gamma", "\n", "mu", "=", "args", ".", "mu", "\n", "loss_c_current", "=", "999", "# random large number", "\n", "loss_c_previous", "=", "999", "# random large number", "\n", "\n", "attn_source_all", "=", "torch", ".", "Tensor", "(", ")", "\n", "attn_target_all", "=", "torch", ".", "Tensor", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "\n", "## schedule for parameters", "\n", "\t\t", "alpha", "=", "2", "/", "(", "1", "+", "math", ".", "exp", "(", "-", "1", "*", "(", "epoch", ")", "/", "args", ".", "epochs", ")", ")", "-", "1", "if", "args", ".", "alpha", "<", "0", "else", "args", ".", "alpha", "\n", "\n", "## schedule for learning rate", "\n", "if", "args", ".", "lr_adaptive", "==", "'loss'", ":", "\n", "\t\t\t", "adjust_learning_rate_loss", "(", "optimizer", ",", "args", ".", "lr_decay", ",", "loss_c_current", ",", "loss_c_previous", ",", "'>'", ")", "\n", "", "elif", "args", ".", "lr_adaptive", "==", "'none'", "and", "epoch", "in", "args", ".", "lr_steps", ":", "\n", "\t\t\t", "adjust_learning_rate", "(", "optimizer", ",", "args", ".", "lr_decay", ")", "\n", "\n", "# train for one epoch", "\n", "", "loss_c", ",", "attn_epoch_source", ",", "attn_epoch_target", "=", "train", "(", "num_class", ",", "source_loader", ",", "target_loader", ",", "model", ",", "criterion", ",", "criterion_domain", ",", "optimizer", ",", "epoch", ",", "train_file", ",", "train_short_file", ",", "alpha", ",", "beta", ",", "gamma", ",", "mu", ",", "entropy_cuts", ",", "class_names", ")", "\n", "\n", "if", "args", ".", "save_attention", ">=", "0", ":", "\n", "\t\t\t", "attn_source_all", "=", "torch", ".", "cat", "(", "(", "attn_source_all", ",", "attn_epoch_source", ".", "unsqueeze", "(", "0", ")", ")", ")", "# save the attention values", "\n", "attn_target_all", "=", "torch", ".", "cat", "(", "(", "attn_target_all", ",", "attn_epoch_target", ".", "unsqueeze", "(", "0", ")", ")", ")", "# save the attention values", "\n", "\n", "# update the recorded loss_c", "\n", "", "loss_c_previous", "=", "loss_c_current", "\n", "loss_c_current", "=", "loss_c", "\n", "\n", "# evaluate on validation set", "\n", "if", "epoch", "%", "args", ".", "eval_freq", "==", "0", "or", "epoch", "==", "args", ".", "epochs", ":", "\n", "\t\t\t", "prec1", ",", "entropy_cuts", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "num_class", ",", "epoch", ",", "val_file", ",", "meter", ")", "\n", "\n", "# auto", "\n", "trial", ".", "report", "(", "prec1", ",", "epoch", ")", "\n", "# Handle pruning based on the intermediate value.", "\n", "if", "trial", ".", "should_prune", "(", ")", ":", "\n", "\t\t\t\t", "raise", "optuna", ".", "exceptions", ".", "TrialPruned", "(", ")", "\n", "\n", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "", "is_best", "=", "prec1", ">", "best_prec1", "\n", "if", "args", ".", "auto", "==", "False", ":", "\n", "\t\t\t\t", "line_update", "=", "' ==> updating the best accuracy'", "if", "is_best", "else", "''", "\n", "line_best", "=", "\"Best score {} vs current score {}\"", ".", "format", "(", "best_prec1", ",", "prec1", ")", "+", "line_update", "\n", "print", "(", "Fore", ".", "YELLOW", "+", "line_best", ")", "\n", "", "val_short_file", ".", "write", "(", "'%.3f\\n'", "%", "prec1", ")", "\n", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "if", "epoch", ">=", "20", "and", "best_prec1", "<", "0.7", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "if", "epoch", ">=", "30", "and", "best_prec1", "-", "prec1", ">", "0.2", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "\t\t\t\t", "writer", ".", "add_text", "(", "'Best_Accuracy'", ",", "str", "(", "best_prec1", ")", ",", "epoch", ")", "\n", "\n", "", "if", "args", ".", "save_model", ":", "\n", "\t\t\t\t", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'prec1'", ":", "prec1", ",", "\n", "}", ",", "is_best", ",", "path_exp", ")", "\n", "\n", "\n", "\n", "", "", "", "end_train", "=", "time", ".", "time", "(", ")", "\n", "\n", "# print(Fore.CYAN + 'total training time:', end_train - start_train)", "\n", "val_best_file", ".", "write", "(", "'%.3f\\n'", "%", "best_prec1", ")", "\n", "\n", "# --- write the total time to log files ---#", "\n", "line_time", "=", "'total time: {:.3f} '", ".", "format", "(", "end_train", "-", "start_train", ")", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "\t\t", "train_file", ".", "write", "(", "line_time", ")", "\n", "train_short_file", ".", "write", "(", "line_time", ")", "\n", "val_file", ".", "write", "(", "line_time", ")", "\n", "val_short_file", ".", "write", "(", "line_time", ")", "\n", "", "else", ":", "\n", "\t\t", "test_file", ".", "write", "(", "line_time", ")", "\n", "test_short_file", ".", "write", "(", "line_time", ")", "\n", "\n", "#--- close log files ---#", "\n", "", "if", "not", "args", ".", "evaluate", ":", "\n", "\t\t", "train_file", ".", "close", "(", ")", "\n", "train_short_file", ".", "close", "(", ")", "\n", "val_file", ".", "close", "(", ")", "\n", "val_short_file", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "test_file", ".", "close", "(", ")", "\n", "test_short_file", ".", "close", "(", ")", "\n", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "\t\t", "writer", ".", "close", "(", ")", "\n", "\n", "", "if", "args", ".", "save_attention", ">=", "0", ":", "\n", "\t\t", "np", ".", "savetxt", "(", "'attn_source_'", "+", "str", "(", "args", ".", "save_attention", ")", "+", "'.log'", ",", "attn_source_all", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%s\"", ")", "\n", "np", ".", "savetxt", "(", "'attn_target_'", "+", "str", "(", "args", ".", "save_attention", ")", "+", "'.log'", ",", "attn_target_all", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "fmt", "=", "\"%s\"", ")", "\n", "\n", "# auto\t", "\n", "", "return", "best_prec1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.train": [[465, 955], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "model.train", "time.time", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model.module.partialBN", "model.module.partialBN", "zip", "len", "len", "torch.cat.size", "torch.cat.size", "main.AverageMeter.update", "torch.cat().squeeze.cuda", "torch.cat().squeeze.cuda", "model", "main.removeDummy", "main.removeDummy", "criterion", "main.AverageMeter.update", "main.accuracy", "main.AverageMeter.update", "main.AverageMeter.update", "main.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main.AverageMeter.update", "time.time", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "utils.visualization.visualize_TSNE", "print", "writer.add_embedding", "writer.add_embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "writer.add_embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "writer.add_embedding", "log_short.write", "torch.cat.mean", "torch.cat.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().squeeze.unsqueeze().repeat().view", "torch.cat().squeeze.unsqueeze().repeat().view", "model", "criterion", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "feat_source_list.append", "feat_target_list.append", "source_label_list.append", "target_label_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "criterion", "criterion.item", "out_source.size", "main.AverageMeter.update", "range", "main.AverageMeter.update", "range", "main.AverageMeter.update", "loss.cross_entropy_soft", "main.AverageMeter.update", "model", "main.removeDummy", "main.AverageMeter.update", "loss.attentive_entropy", "main.AverageMeter.update", "loss.H_loss", "main.AverageMeter.update", "criterion.item", "prec1.item", "out_source.size", "prec5.item", "out_source.size", "torch.nn.utils.clip_grad_norm_", "line.format.format", "log.write", "main.adjust_learning_rate_dann", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().long().cuda", "torch.eq().cuda", "torch.eq().cuda", "torch.eq().cuda", "torch.eq().cuda", "torch.eq().cuda", "torch.eq().cuda", "torch.eq().cuda", "torch.eq().cuda", "torch.eq().cuda", "torch.eq().cuda", "range", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "time.time", "criterion", "torch.nn.utils.clip_grad_norm_", "out_source.var().log", "out_target.var().log", "out_source.cpu", "out_target.cpu", "torch.cat().squeeze.cpu", "torch.cat().squeeze.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "min", "loss.JAN", "kernel_muls.extend", "kernel_nums.extend", "fix_sigma_list.extend", "range", "loss_discrepancy.item", "feat_source[].size", "len", "loss_adversarial.item", "torch.cat.size", "len", "loss_adversarial.item", "torch.cat.size", "loss.attentive_entropy.item", "out_target.size", "loss.dis_MCD", "loss_dis.item", "out_target.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.attentive_entropy.item", "out_target.size", "loss.H_loss.item", "out_target.size", "model.parameters", "print", "time.time", "len", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "int", "int", "numpy.exp", "len", "torch.cat().squeeze.unsqueeze().repeat", "torch.cat().squeeze.unsqueeze().repeat", "model.parameters", "print", "label_source.size", "label_target.size", "feat_source_sel[].size", "feat_target_sel[].size", "pred_domain_source[].view", "pred_domain_target[].view", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "domain_label.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_domain_all.append", "pred_domain_target_all.append", "criterion_domain", "pred_domain_source[].view", "pred_domain_target[].view", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "domain_label.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_domain_all.append", "pred_domain_target_all.append", "criterion_domain", "criterion_domain", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "loss.ivan_CEL", "attn_source.cpu", "attn_target.cpu", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq().long", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.cat.size", "torch.cat.size", "out_source.var", "out_target.var", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "min", "min", "feat_source_sel.view.view", "feat_target_sel.view.view", "torch.zeros().long.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "int", "float", "tile.append", "main.tile", "torch.ones().long.cuda", "tile.cuda", "torch.cat().squeeze.unsqueeze", "torch.cat().squeeze.unsqueeze", "label_source.size", "label_target.size", "feat_source[].size", "feat_target[].size", "feat_source_sel.view.size", "pred_domain_source[].size", "pred_domain_target[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat.var().log", "pred_domain_source[].size", "pred_domain_target[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat.var().log", "list", "list", "list", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "CORAL", "sum", "len", "NameError", "pred_domain_source[].view.size", "pred_domain_target[].view.size", "pred_domain_source[].view.size", "pred_domain_target[].view.size", "float", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "torch.cuda.LongTensor().repeat", "feat_source_sel.view.size", "feat_target_sel.view.size", "range", "loss.mmd_rbf", "sum", "len", "torch.cat.var", "torch.cat.var", "torch.softmax", "torch.log_softmax", "torch.softmax", "torch.log_softmax", "out_target.data.max", "float", "label_source_display.size", "label_source_display.size", "label_source_display.size", "label_target_display.size", "label_target_display.size", "label_target_display.size", "feat_source_sel.view.size", "range", "float", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "feat_source_sel.view.size"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.train", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.partialBN", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.VideoModel.partialBN", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.removeDummy", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.removeDummy", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.accuracy", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.GradScale.backward", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.visualization.visualize_TSNE", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.models.GradScale.backward", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.cross_entropy_soft", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.removeDummy", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.attentive_entropy", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.H_loss", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.adjust_learning_rate_dann", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.JAN", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.dis_MCD", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.ivan_CEL", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.tile", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.mmd_rbf"], ["", "def", "train", "(", "num_class", ",", "source_loader", ",", "target_loader", ",", "model", ",", "criterion", ",", "criterion_domain", ",", "optimizer", ",", "epoch", ",", "log", ",", "log_short", ",", "alpha", ",", "beta", ",", "gamma", ",", "mu", ",", "entropy_cuts", ",", "class_names", ")", ":", "\n", "\t", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses_a", "=", "AverageMeter", "(", ")", "# adversarial loss", "\n", "losses_d", "=", "AverageMeter", "(", ")", "# discrepancy loss", "\n", "losses_e", "=", "AverageMeter", "(", ")", "# entropy loss", "\n", "losses_s", "=", "AverageMeter", "(", ")", "# ensemble loss", "\n", "losses_c", "=", "AverageMeter", "(", ")", "# classification loss", "\n", "losses_h", "=", "AverageMeter", "(", ")", "# Entropy Maximization loss", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "\t\t", "model", ".", "module", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "\t\t", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "\n", "# switch to train mode", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "data_loader", "=", "enumerate", "(", "zip", "(", "source_loader", ",", "target_loader", ")", ")", "\n", "\n", "# step info", "\n", "start_steps", "=", "epoch", "*", "len", "(", "source_loader", ")", "\n", "total_steps", "=", "args", ".", "epochs", "*", "len", "(", "source_loader", ")", "\n", "\n", "# initialize the embedding", "\n", "if", "args", ".", "tensorboard", ":", "\n", "\t\t", "feat_source_display", "=", "None", "\n", "label_source_display", "=", "None", "\n", "label_source_domain_display", "=", "None", "\n", "\n", "feat_target_display", "=", "None", "\n", "label_target_display", "=", "None", "\n", "label_target_domain_display", "=", "None", "\n", "\n", "", "attn_epoch_source", "=", "torch", ".", "Tensor", "(", ")", "\n", "attn_epoch_target", "=", "torch", ".", "Tensor", "(", ")", "\n", "\n", "if", "args", ".", "tsne", ":", "\n", "\t\t", "feat_source_list", "=", "[", "]", "\n", "feat_target_list", "=", "[", "]", "\n", "source_label_list", "=", "[", "]", "\n", "target_label_list", "=", "[", "]", "\n", "\n", "", "for", "i", ",", "(", "(", "source_data", ",", "source_record", ")", ",", "(", "target_data", ",", "target_record", ")", ")", "in", "data_loader", ":", "\n", "\n", "\n", "\t\t", "source_label", ",", "target_label", "=", "torch", ".", "tensor", "(", "[", "int", "(", "i", ")", "for", "i", "in", "source_record", "[", "2", "]", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "int", "(", "i", ")", "for", "i", "in", "target_record", "[", "2", "]", "]", ")", "\n", "\n", "\n", "# setup hyperparameters", "\n", "p", "=", "float", "(", "i", "+", "start_steps", ")", "/", "total_steps", "\n", "beta_dann", "=", "2.", "/", "(", "1.", "+", "np", ".", "exp", "(", "-", "10", "*", "p", ")", ")", "-", "1", "\n", "beta", "=", "[", "beta_dann", "if", "beta", "[", "i", "]", "<", "0", "else", "beta", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "beta", ")", ")", "]", "# replace the default beta if value < 0", "\n", "\n", "source_size_ori", "=", "source_data", ".", "size", "(", ")", "# original shape", "\n", "target_size_ori", "=", "target_data", ".", "size", "(", ")", "# original shape", "\n", "batch_source_ori", "=", "source_size_ori", "[", "0", "]", "\n", "batch_target_ori", "=", "target_size_ori", "[", "0", "]", "\n", "# add dummy tensors to keep the same batch size for each epoch (for the last epoch)", "\n", "if", "batch_source_ori", "<", "args", ".", "batch_size", "[", "0", "]", ":", "\n", "\t\t\t", "source_data_dummy", "=", "torch", ".", "zeros", "(", "args", ".", "batch_size", "[", "0", "]", "-", "batch_source_ori", ",", "source_size_ori", "[", "1", "]", ",", "source_size_ori", "[", "2", "]", ")", "\n", "source_data", "=", "torch", ".", "cat", "(", "(", "source_data", ",", "source_data_dummy", ")", ")", "\n", "", "if", "batch_target_ori", "<", "args", ".", "batch_size", "[", "1", "]", ":", "\n", "\t\t\t", "target_data_dummy", "=", "torch", ".", "zeros", "(", "args", ".", "batch_size", "[", "1", "]", "-", "batch_target_ori", ",", "target_size_ori", "[", "1", "]", ",", "target_size_ori", "[", "2", "]", ")", "\n", "target_data", "=", "torch", ".", "cat", "(", "(", "target_data", ",", "target_data_dummy", ")", ")", "\n", "\n", "# add dummy tensors to make sure batch size can be divided by gpu #", "\n", "", "if", "source_data", ".", "size", "(", "0", ")", "%", "gpu_count", "!=", "0", ":", "\n", "\t\t\t", "source_data_dummy", "=", "torch", ".", "zeros", "(", "gpu_count", "-", "source_data", ".", "size", "(", "0", ")", "%", "gpu_count", ",", "source_data", ".", "size", "(", "1", ")", ",", "source_data", ".", "size", "(", "2", ")", ")", "\n", "source_data", "=", "torch", ".", "cat", "(", "(", "source_data", ",", "source_data_dummy", ")", ")", "\n", "", "if", "target_data", ".", "size", "(", "0", ")", "%", "gpu_count", "!=", "0", ":", "\n", "\t\t\t", "target_data_dummy", "=", "torch", ".", "zeros", "(", "gpu_count", "-", "target_data", ".", "size", "(", "0", ")", "%", "gpu_count", ",", "target_data", ".", "size", "(", "1", ")", ",", "target_data", ".", "size", "(", "2", ")", ")", "\n", "target_data", "=", "torch", ".", "cat", "(", "(", "target_data", ",", "target_data_dummy", ")", ")", "\n", "\n", "# measure data loading time", "\n", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "source_label", "=", "source_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# pytorch 0.4.X", "\n", "target_label", "=", "target_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "# pytorch 0.4.X", "\n", "\n", "if", "args", ".", "baseline_type", "==", "'frame'", ":", "\n", "\t\t\t", "source_label_frame", "=", "source_label", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "args", ".", "num_segments", ")", ".", "view", "(", "-", "1", ")", "# expand the size for all the frames", "\n", "target_label_frame", "=", "target_label", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "args", ".", "num_segments", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "label_source", "=", "source_label_frame", "if", "args", ".", "baseline_type", "==", "'frame'", "else", "source_label", "# determine the label for calculating the loss function", "\n", "label_target", "=", "target_label_frame", "if", "args", ".", "baseline_type", "==", "'frame'", "else", "target_label", "\n", "\n", "#====== pre-train source data ======#", "\n", "if", "args", ".", "pretrain_source", ":", "\n", "#------ forward pass data again ------#", "\n", "\t\t\t", "_", ",", "out_source", ",", "out_source_2", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "source_data", ",", "target_data", ",", "beta", ",", "mu", ",", "is_train", "=", "True", ",", "reverse", "=", "False", ")", "\n", "\n", "# ignore dummy tensors", "\n", "out_source", "=", "out_source", "[", ":", "batch_source_ori", "]", "\n", "out_source_2", "=", "out_source_2", "[", ":", "batch_source_ori", "]", "\n", "\n", "#------ calculate the loss function ------#", "\n", "# 1. calculate the classification loss", "\n", "out", "=", "out_source", "\n", "label", "=", "label_source", "\n", "\n", "loss", "=", "criterion", "(", "out", ",", "label", ")", "\n", "if", "args", ".", "ens_DA", "==", "'MCD'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t\t", "loss", "+=", "criterion", "(", "out_source_2", ",", "label", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip_gradient", "is", "not", "None", ":", "\n", "\t\t\t\t", "total_norm", "=", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_gradient", ")", "\n", "if", "total_norm", ">", "args", ".", "clip_gradient", "and", "args", ".", "verbose", ":", "\n", "\t\t\t\t\t", "print", "(", "\"clipping gradient: {} with coef {}\"", ".", "format", "(", "total_norm", ",", "args", ".", "clip_gradient", "/", "total_norm", ")", ")", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "#====== forward pass data ======#", "\n", "", "attn_source", ",", "out_source", ",", "out_source_2", ",", "pred_domain_source", ",", "feat_source", ",", "attn_target", ",", "out_target", ",", "out_target_2", ",", "pred_domain_target", ",", "feat_target", "=", "model", "(", "source_data", ",", "target_data", ",", "beta", ",", "mu", ",", "is_train", "=", "True", ",", "reverse", "=", "False", ")", "\n", "\n", "# ignore dummy tensors", "\n", "attn_source", ",", "out_source", ",", "out_source_2", ",", "pred_domain_source", ",", "feat_source", "=", "removeDummy", "(", "attn_source", ",", "out_source", ",", "out_source_2", ",", "pred_domain_source", ",", "feat_source", ",", "batch_source_ori", ")", "\n", "attn_target", ",", "out_target", ",", "out_target_2", ",", "pred_domain_target", ",", "feat_target", "=", "removeDummy", "(", "attn_target", ",", "out_target", ",", "out_target_2", ",", "pred_domain_target", ",", "feat_target", ",", "batch_target_ori", ")", "\n", "\n", "if", "args", ".", "pred_normalize", "==", "'Y'", ":", "# use the uncertainly method (in contruction...)", "\n", "\t\t\t", "out_source", "=", "out_source", "/", "out_source", ".", "var", "(", ")", ".", "log", "(", ")", "\n", "out_target", "=", "out_target", "/", "out_target", ".", "var", "(", ")", ".", "log", "(", ")", "\n", "\n", "\n", "", "if", "args", ".", "tsne", ":", "\n", "\t\t\t", "feat_source_list", ".", "append", "(", "out_source", ".", "cpu", "(", ")", ")", "\n", "feat_target_list", ".", "append", "(", "out_target", ".", "cpu", "(", ")", ")", "\n", "source_label_list", ".", "append", "(", "source_label", ".", "cpu", "(", ")", ")", "\n", "target_label_list", ".", "append", "(", "target_label", ".", "cpu", "(", ")", ")", "\n", "\n", "# store the embedding", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "\t\t\t", "feat_source_display", "=", "feat_source", "[", "1", "]", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "feat_source_display", ",", "feat_source", "[", "1", "]", ")", ",", "0", ")", "\n", "label_source_display", "=", "label_source", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "label_source_display", ",", "label_source", ")", ",", "0", ")", "\n", "label_source_domain_display", "=", "torch", ".", "zeros", "(", "label_source", ".", "size", "(", "0", ")", ")", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "label_source_domain_display", ",", "torch", ".", "zeros", "(", "label_source", ".", "size", "(", "0", ")", ")", ")", ",", "0", ")", "\n", "feat_target_display", "=", "feat_target", "[", "1", "]", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "feat_target_display", ",", "feat_target", "[", "1", "]", ")", ",", "0", ")", "\n", "label_target_display", "=", "label_target", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "label_target_display", ",", "label_target", ")", ",", "0", ")", "\n", "label_target_domain_display", "=", "torch", ".", "ones", "(", "label_target", ".", "size", "(", "0", ")", ")", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "label_target_domain_display", ",", "torch", ".", "ones", "(", "label_target", ".", "size", "(", "0", ")", ")", ")", ",", "0", ")", "\n", "\n", "#====== calculate the loss function ======#", "\n", "# 1. calculate the classification loss", "\n", "", "out", "=", "out_source", "\n", "label", "=", "label_source", "\n", "\n", "if", "args", ".", "use_target", "==", "'Sv'", ":", "\n", "\t\t\t", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "out_target", ")", ")", "\n", "label", "=", "torch", ".", "cat", "(", "(", "label", ",", "label_target", ")", ")", "\n", "\n", "", "loss_classification", "=", "criterion", "(", "out", ",", "label", ")", "\n", "if", "args", ".", "ens_DA", "==", "'MCD'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t", "loss_classification", "+=", "criterion", "(", "out_source_2", ",", "label", ")", "\n", "\n", "", "losses_c", ".", "update", "(", "loss_classification", ".", "item", "(", ")", ",", "out_source", ".", "size", "(", "0", ")", ")", "# pytorch 0.4.X", "\n", "loss", "=", "loss_classification", "\n", "\n", "# 2. calculate the loss for DA", "\n", "# (I) discrepancy-based approach: discrepancy loss", "\n", "if", "args", ".", "dis_DA", "!=", "'none'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t", "loss_discrepancy", "=", "0", "\n", "\n", "kernel_muls", "=", "[", "2.0", "]", "*", "2", "\n", "kernel_nums", "=", "[", "2", ",", "5", "]", "\n", "fix_sigma_list", "=", "[", "None", "]", "*", "2", "\n", "\n", "if", "args", ".", "dis_DA", "==", "'JAN'", ":", "\n", "# ignore the features from shared layers", "\n", "\t\t\t\t", "feat_source_sel", "=", "feat_source", "[", ":", "-", "args", ".", "add_fc", "]", "\n", "feat_target_sel", "=", "feat_target", "[", ":", "-", "args", ".", "add_fc", "]", "\n", "\n", "size_loss", "=", "min", "(", "feat_source_sel", "[", "0", "]", ".", "size", "(", "0", ")", ",", "feat_target_sel", "[", "0", "]", ".", "size", "(", "0", ")", ")", "# choose the smaller number", "\n", "feat_source_sel", "=", "[", "feat", "[", ":", "size_loss", "]", "for", "feat", "in", "feat_source_sel", "]", "\n", "feat_target_sel", "=", "[", "feat", "[", ":", "size_loss", "]", "for", "feat", "in", "feat_target_sel", "]", "\n", "\n", "loss_discrepancy", "+=", "JAN", "(", "feat_source_sel", ",", "feat_target_sel", ",", "kernel_muls", "=", "kernel_muls", ",", "kernel_nums", "=", "kernel_nums", ",", "fix_sigma_list", "=", "fix_sigma_list", ",", "ver", "=", "2", ")", "\n", "\n", "", "else", ":", "\n", "# extend the parameter list for shared layers", "\n", "\t\t\t\t", "kernel_muls", ".", "extend", "(", "[", "kernel_muls", "[", "-", "1", "]", "]", "*", "args", ".", "add_fc", ")", "\n", "kernel_nums", ".", "extend", "(", "[", "kernel_nums", "[", "-", "1", "]", "]", "*", "args", ".", "add_fc", ")", "\n", "fix_sigma_list", ".", "extend", "(", "[", "fix_sigma_list", "[", "-", "1", "]", "]", "*", "args", ".", "add_fc", ")", "\n", "\n", "for", "l", "in", "range", "(", "0", ",", "args", ".", "add_fc", "+", "2", ")", ":", "# loss from all the features (+2 because of frame-aggregation layer + final fc layer)", "\n", "\t\t\t\t\t", "if", "args", ".", "place_dis", "[", "l", "]", "==", "'Y'", ":", "\n", "# select the data for calculating the loss (make sure source # == target #)", "\n", "\t\t\t\t\t\t", "size_loss", "=", "min", "(", "feat_source", "[", "l", "]", ".", "size", "(", "0", ")", ",", "feat_target", "[", "l", "]", ".", "size", "(", "0", ")", ")", "# choose the smaller number", "\n", "# select", "\n", "feat_source_sel", "=", "feat_source", "[", "l", "]", "[", ":", "size_loss", "]", "\n", "feat_target_sel", "=", "feat_target", "[", "l", "]", "[", ":", "size_loss", "]", "\n", "\n", "# break into multiple batches to avoid \"out of memory\" issue", "\n", "size_batch", "=", "min", "(", "256", ",", "feat_source_sel", ".", "size", "(", "0", ")", ")", "\n", "feat_source_sel", "=", "feat_source_sel", ".", "view", "(", "(", "-", "1", ",", "size_batch", ")", "+", "feat_source_sel", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "feat_target_sel", "=", "feat_target_sel", ".", "view", "(", "(", "-", "1", ",", "size_batch", ")", "+", "feat_target_sel", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "\n", "if", "args", ".", "dis_DA", "==", "'CORAL'", ":", "\n", "\t\t\t\t\t\t\t", "losses_coral", "=", "[", "CORAL", "(", "feat_source_sel", "[", "t", "]", ",", "feat_target_sel", "[", "t", "]", ")", "for", "t", "in", "range", "(", "feat_source_sel", ".", "size", "(", "0", ")", ")", "]", "\n", "loss_coral", "=", "sum", "(", "losses_coral", ")", "/", "len", "(", "losses_coral", ")", "\n", "loss_discrepancy", "+=", "loss_coral", "\n", "", "elif", "args", ".", "dis_DA", "==", "'DAN'", ":", "\n", "\t\t\t\t\t\t\t", "losses_mmd", "=", "[", "mmd_rbf", "(", "feat_source_sel", "[", "t", "]", ",", "feat_target_sel", "[", "t", "]", ",", "kernel_mul", "=", "kernel_muls", "[", "l", "]", ",", "kernel_num", "=", "kernel_nums", "[", "l", "]", ",", "fix_sigma", "=", "fix_sigma_list", "[", "l", "]", ",", "ver", "=", "2", ")", "for", "t", "in", "range", "(", "feat_source_sel", ".", "size", "(", "0", ")", ")", "]", "\n", "loss_mmd", "=", "sum", "(", "losses_mmd", ")", "/", "len", "(", "losses_mmd", ")", "\n", "\n", "loss_discrepancy", "+=", "loss_mmd", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "raise", "NameError", "(", "'not in dis_DA!!!'", ")", "\n", "\n", "", "", "", "", "losses_d", ".", "update", "(", "loss_discrepancy", ".", "item", "(", ")", ",", "feat_source", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "alpha", "*", "loss_discrepancy", "\n", "\n", "# (II) adversarial discriminative model: adversarial loss", "\n", "", "if", "args", ".", "adv_DA", "!=", "'none'", "and", "args", ".", "use_target", "!=", "'none'", "and", "args", ".", "open_method", "!=", "'cls EVT'", ":", "\n", "\t\t\t", "loss_adversarial", "=", "0", "\n", "pred_domain_all", "=", "[", "]", "\n", "pred_domain_target_all", "=", "[", "]", "\n", "\n", "for", "l", "in", "range", "(", "len", "(", "args", ".", "place_adv", ")", ")", ":", "\n", "\t\t\t\t", "if", "args", ".", "place_adv", "[", "l", "]", "==", "'Y'", ":", "\n", "\n", "# reshape the features (e.g. 128x5x2 --> 640x2)", "\n", "\t\t\t\t\t", "pred_domain_source_single", "=", "pred_domain_source", "[", "l", "]", ".", "view", "(", "-", "1", ",", "pred_domain_source", "[", "l", "]", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "pred_domain_target_single", "=", "pred_domain_target", "[", "l", "]", ".", "view", "(", "-", "1", ",", "pred_domain_target", "[", "l", "]", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "\n", "# prepare domain labels", "\n", "source_domain_label", "=", "torch", ".", "zeros", "(", "pred_domain_source_single", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "target_domain_label", "=", "torch", ".", "ones", "(", "pred_domain_target_single", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "domain_label", "=", "torch", ".", "cat", "(", "(", "source_domain_label", ",", "target_domain_label", ")", ",", "0", ")", "\n", "\n", "domain_label", "=", "domain_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "pred_domain", "=", "torch", ".", "cat", "(", "(", "pred_domain_source_single", ",", "pred_domain_target_single", ")", ",", "0", ")", "\n", "pred_domain_all", ".", "append", "(", "pred_domain", ")", "\n", "pred_domain_target_all", ".", "append", "(", "pred_domain_target_single", ")", "\n", "\n", "if", "args", ".", "pred_normalize", "==", "'Y'", ":", "# use the uncertainly method (in construction......)", "\n", "\t\t\t\t\t\t", "pred_domain", "=", "pred_domain", "/", "pred_domain", ".", "var", "(", ")", ".", "log", "(", ")", "\n", "", "loss_adversarial_single", "=", "criterion_domain", "(", "pred_domain", ",", "domain_label", ")", "\n", "# loss_adversarial_single = ivan_CEL(pred_domain,", "\n", "# \t\t\t\t\t\t\t\t\t\t   domain_label)", "\n", "loss_adversarial", "+=", "loss_adversarial_single", "\n", "\n", "", "", "losses_a", ".", "update", "(", "loss_adversarial", ".", "item", "(", ")", ",", "pred_domain", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "loss_adversarial", "\n", "\n", "# (II) adversarial discriminative model: adversarial loss - weighted", "\n", "", "if", "args", ".", "adv_DA", "!=", "'none'", "and", "args", ".", "use_target", "!=", "'none'", "and", "args", ".", "open_method", "==", "'cls EVT'", ":", "\n", "\t\t\t", "loss_adversarial", "=", "0", "\n", "pred_domain_all", "=", "[", "]", "\n", "pred_domain_target_all", "=", "[", "]", "\n", "\n", "for", "l", "in", "range", "(", "len", "(", "args", ".", "place_adv", ")", ")", ":", "\n", "\t\t\t\t", "if", "args", ".", "place_adv", "[", "l", "]", "==", "'Y'", ":", "\n", "\n", "# reshape the features (e.g. 128x5x2 --> 640x2)", "\n", "\t\t\t\t\t", "pred_domain_source_single", "=", "pred_domain_source", "[", "l", "]", ".", "view", "(", "-", "1", ",", "pred_domain_source", "[", "l", "]", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "pred_domain_target_single", "=", "pred_domain_target", "[", "l", "]", ".", "view", "(", "-", "1", ",", "pred_domain_target", "[", "l", "]", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "\n", "# prepare domain labels", "\n", "source_domain_label", "=", "torch", ".", "zeros", "(", "pred_domain_source_single", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "target_domain_label", "=", "torch", ".", "ones", "(", "pred_domain_target_single", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", "\n", "domain_label", "=", "torch", ".", "cat", "(", "(", "source_domain_label", ",", "target_domain_label", ")", ",", "0", ")", "\n", "\n", "domain_label", "=", "domain_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "pred_domain", "=", "torch", ".", "cat", "(", "(", "pred_domain_source_single", ",", "pred_domain_target_single", ")", ",", "0", ")", "\n", "pred_domain_all", ".", "append", "(", "pred_domain", ")", "\n", "pred_domain_target_all", ".", "append", "(", "pred_domain_target_single", ")", "\n", "\n", "if", "args", ".", "pred_normalize", "==", "'Y'", ":", "# use the uncertainly method (in construction......)", "\n", "\t\t\t\t\t\t", "pred_domain", "=", "pred_domain", "/", "pred_domain", ".", "var", "(", ")", ".", "log", "(", ")", "\n", "", "loss_adversarial_single", "=", "criterion_domain", "(", "pred_domain", ",", "domain_label", ")", "\n", "# loss_adversarial_single = ivan_CEL(pred_domain,", "\n", "# \t\t\t\t\t\t\t\t\t\t   domain_label)", "\n", "\n", "loss_adversarial_single_source", "=", "criterion_domain", "(", "pred_domain_source_single", ",", "source_domain_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "\n", "\n", "\n", "#------- Computing Target Advserial Weights -------# ", "\n", "target_entropy", "=", "-", "(", "F", ".", "softmax", "(", "out_target", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "out_target", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# th-based", "\n", "# 1. change mininum weight to 0", "\n", "# 2. remove weight upper bound", "\n", "weights", "=", "[", "]", "\n", "even_tensor", "=", "torch", ".", "ones", "(", "num_class", ")", "/", "num_class", "\n", "entropy_max", "=", "-", "(", "F", ".", "softmax", "(", "even_tensor", ",", "dim", "=", "0", ")", "*", "F", ".", "log_softmax", "(", "even_tensor", ",", "dim", "=", "0", ")", ")", ".", "sum", "(", ")", "\n", "# entropy_cuts[entropy_cuts==100] = -0.5 # 100 means ", "\n", "for", "i_", "in", "range", "(", "list", "(", "out_target", ".", "shape", ")", "[", "0", "]", ")", ":", "\n", "\t\t\t\t\t\t", "max_class", "=", "int", "(", "out_target", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "[", "i_", "]", ")", "\n", "entropy_cut", "=", "float", "(", "entropy_cuts", "[", "max_class", "]", ")", "\n", "\n", "if", "entropy_cut", ">", "float", "(", "entropy_max", ")", "/", "2", ":", "\n", "\t\t\t\t\t\t\t", "hard_interval_half", "=", "(", "float", "(", "entropy_max", ")", "-", "entropy_cut", ")", "/", "2", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "hard_interval_half", "=", "entropy_cut", "/", "2", "\n", "\n", "# # use fixed value 0.5 as interval ", "\n", "# weight = entropy_cut - float(target_entropy[i_]) + 0.5", "\n", "\n", "\n", "# max = 2.2 t=1.4 half = 0.4 ", "\n", "# given h = 1.4: 0.5 + 0.5 * (1.4-1.4)/0.4 = 0.5", "\n", "# given h = 1.6: 0.5 + 0.5 * (1.4-1.6)/0.4 = 0.25", "\n", "# given h = 1: 0.5 + 0.5 * (1.4-1)/0.4 = 0", "\n", "", "weight", "=", "0.5", "+", "args", ".", "mix_interval_length", "*", "(", "entropy_cut", "-", "float", "(", "target_entropy", "[", "i_", "]", ")", ")", "/", "hard_interval_half", "# 0.25 0.75 1", "\n", "weight", "=", "0", "if", "weight", "<", "0", "else", "weight", "\n", "weight", "=", "1", "if", "weight", ">", "1", "else", "weight", "\n", "weights", ".", "append", "(", "weight", ")", "\n", "\n", "", "weights", "=", "torch", ".", "tensor", "(", "weights", ")", "\n", "# weights = F.normalize(weights.float(), dim=0, p=1) * list(weights.shape)[0]", "\n", "\n", "# entropy-based", "\n", "\n", "# # even_tensor = torch.ones(num_class)/num_class", "\n", "# # entropy_max = -(F.softmax(even_tensor, dim=0)* F.log_softmax(even_tensor, dim=0)).sum()", "\n", "# weights = entropy_max - target_entropy ", "\n", "# weights = F.normalize(weights.float(), dim=0, p=1) * list(weights.shape)[0]", "\n", "\n", "\n", "\n", "if", "list", "(", "weights", ".", "shape", ")", "[", "0", "]", "!=", "list", "(", "pred_domain_target_single", ".", "shape", ")", "[", "0", "]", ":", "\n", "\t\t\t\t\t\t", "weights", "=", "tile", "(", "weights", ",", "0", ",", "args", ".", "num_segments", ")", "\n", "\n", "", "loss_adversarial_single_target", "=", "ivan_CEL", "(", "pred_domain_target_single", ",", "target_domain_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "weights", ".", "cuda", "(", ")", ")", "\n", "# loss_adversarial += loss_adversarial_single", "\n", "loss_adversarial", "+=", "loss_adversarial_single_source", "*", "0.5", "\n", "loss_adversarial", "+=", "loss_adversarial_single_target", "*", "0.5", "\n", "\n", "", "", "losses_a", ".", "update", "(", "loss_adversarial", ".", "item", "(", ")", ",", "pred_domain", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "args", ".", "adv_param", "*", "loss_adversarial", "\n", "\n", "# (III) other loss", "\n", "# 1. entropy loss for target data", "\n", "", "if", "args", ".", "add_loss_DA", "==", "'target_entropy'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t", "loss_entropy", "=", "cross_entropy_soft", "(", "out_target", ")", "\n", "losses_e", ".", "update", "(", "loss_entropy", ".", "item", "(", ")", ",", "out_target", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "gamma", "*", "loss_entropy", "\n", "\n", "# 2. discrepancy loss for MCD (CVPR 18)", "\n", "", "if", "args", ".", "ens_DA", "==", "'MCD'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "attn_target", ",", "out_target", ",", "out_target_2", ",", "pred_domain_target", ",", "feat_target", "=", "model", "(", "source_data", ",", "target_data", ",", "beta", ",", "mu", ",", "is_train", "=", "True", ",", "reverse", "=", "True", ")", "\n", "\n", "# ignore dummy tensors", "\n", "_", ",", "out_target", ",", "out_target_2", ",", "_", ",", "_", "=", "removeDummy", "(", "attn_target", ",", "out_target", ",", "out_target_2", ",", "pred_domain_target", ",", "feat_target", ",", "batch_target_ori", ")", "\n", "\n", "loss_dis", "=", "-", "dis_MCD", "(", "out_target", ",", "out_target_2", ")", "\n", "losses_s", ".", "update", "(", "loss_dis", ".", "item", "(", ")", ",", "out_target", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "loss_dis", "\n", "\n", "# 3. attentive entropy loss", "\n", "", "if", "args", ".", "add_loss_DA", "==", "'attentive_entropy'", "and", "args", ".", "use_attn", "!=", "'none'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t", "loss_entropy", "=", "attentive_entropy", "(", "torch", ".", "cat", "(", "(", "out_source", ",", "out_target", ")", ",", "0", ")", ",", "pred_domain_all", "[", "1", "]", ")", "\n", "losses_e", ".", "update", "(", "loss_entropy", ".", "item", "(", ")", ",", "out_target", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "gamma", "*", "loss_entropy", "\n", "\n", "\n", "# 5. H loss", "\n", "", "if", "args", ".", "entropy_max_loss", "==", "True", ":", "\n", "\t\t\t", "loss_H", "=", "H_loss", "(", "out_target", ")", "\n", "losses_h", ".", "update", "(", "loss_H", ".", "item", "(", ")", ",", "out_target", ".", "size", "(", "0", ")", ")", "\n", "loss", "+=", "args", ".", "lambda_", "*", "loss_H", "\n", "\n", "\n", "", "pred", "=", "out", "\n", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "pred", ".", "data", ",", "label", ",", "topk", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "out_source", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "out_source", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip_gradient", "is", "not", "None", ":", "\n", "\t\t\t", "total_norm", "=", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_gradient", ")", "\n", "if", "total_norm", ">", "args", ".", "clip_gradient", "and", "args", ".", "verbose", ":", "\n", "\t\t\t\t", "print", "(", "\"clipping gradient: {} with coef {}\"", ".", "format", "(", "total_norm", ",", "args", ".", "clip_gradient", "/", "total_norm", ")", ")", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", "and", "args", ".", "auto", "==", "False", ":", "\n", "\t\t\t", "line", "=", "'Train: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "+", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "+", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "+", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "+", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})\\t'", "+", "'Loss {loss.val:.4f} ({loss.avg:.4f})   '", "'loss_c {loss_c.avg:.4f}\\t loss_h {loss_h.avg:.4f}\\t'", "\n", "\n", "if", "args", ".", "dis_DA", "!=", "'none'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t\t", "line", "+=", "'alpha {alpha:.3f}  loss_d {loss_d.avg:.4f}\\t'", "\n", "\n", "", "if", "args", ".", "adv_DA", "!=", "'none'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t\t", "line", "+=", "'beta {beta[0]:.3f}, {beta[1]:.3f}, {beta[2]:.3f}  loss_a {loss_a.avg:.4f}\\t'", "\n", "\n", "", "if", "args", ".", "add_loss_DA", "!=", "'none'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t\t", "line", "+=", "'gamma {gamma:.6f}  loss_e {loss_e.avg:.4f}\\t'", "\n", "\n", "", "if", "args", ".", "ens_DA", "!=", "'none'", "and", "args", ".", "use_target", "!=", "'none'", ":", "\n", "\t\t\t\t", "line", "+=", "'mu {mu:.6f}  loss_s {loss_s.avg:.4f}\\t'", "\n", "\n", "", "line", "=", "line", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "source_loader", ")", ",", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ",", "alpha", "=", "alpha", ",", "beta", "=", "beta", ",", "gamma", "=", "gamma", ",", "mu", "=", "mu", ",", "\n", "loss", "=", "losses", ",", "loss_c", "=", "losses_c", ",", "loss_h", "=", "losses_h", ",", "loss_d", "=", "losses_d", ",", "loss_a", "=", "losses_a", ",", "loss_e", "=", "losses_e", ",", "loss_s", "=", "losses_s", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "\n", "if", "i", "%", "args", ".", "show_freq", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "line", ")", "\n", "\n", "", "log", ".", "write", "(", "'%s\\n'", "%", "line", ")", "\n", "\n", "# adjust the learning rate for ech step (e.g. DANN)", "\n", "", "if", "args", ".", "lr_adaptive", "==", "'dann'", ":", "\n", "\t\t\t", "adjust_learning_rate_dann", "(", "optimizer", ",", "p", ")", "\n", "\n", "# save attention values w/ the selected class", "\n", "", "if", "args", ".", "save_attention", ">=", "0", ":", "\n", "\t\t\t", "attn_source", "=", "attn_source", "[", "source_label", "==", "args", ".", "save_attention", "]", "\n", "attn_target", "=", "attn_target", "[", "target_label", "==", "args", ".", "save_attention", "]", "\n", "attn_epoch_source", "=", "torch", ".", "cat", "(", "(", "attn_epoch_source", ",", "attn_source", ".", "cpu", "(", ")", ")", ")", "\n", "attn_epoch_target", "=", "torch", ".", "cat", "(", "(", "attn_epoch_target", ",", "attn_target", ".", "cpu", "(", ")", ")", ")", "\n", "\n", "\n", "", "", "if", "args", ".", "tsne", "and", "epoch", ">=", "8", "and", "epoch", "<=", "25", ":", "\n", "\t\t", "feat_source", "=", "torch", ".", "cat", "(", "feat_source_list", ")", ".", "squeeze", "(", ")", "\n", "feat_target", "=", "torch", ".", "cat", "(", "feat_target_list", ")", ".", "squeeze", "(", ")", "\n", "source_label", "=", "torch", ".", "cat", "(", "source_label_list", ")", ".", "squeeze", "(", ")", "\n", "target_label", "=", "torch", ".", "cat", "(", "target_label_list", ")", ".", "squeeze", "(", ")", "\n", "target_label", "[", "target_label", ">=", "num_class", "]", "=", "num_class", "\n", "save_tsne_path", "=", "'tsn/TA3N_'", "+", "str", "(", "epoch", ")", "+", "'_.png'", "\n", "\n", "visualize_TSNE", "(", "feat_source", ",", "feat_target", ",", "source_label", ",", "target_label", ",", "save_tsne_path", ",", "class_names", ")", "\n", "print", "(", "'finshed tsne'", ")", "\n", "\n", "# update the embedding every epoch", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "\t\t", "n_iter_train", "=", "epoch", "*", "len", "(", "source_loader", ")", "# calculate the total iteration", "\n", "# embedding", "\n", "# see source and target separately", "\n", "writer", ".", "add_embedding", "(", "feat_source_display", ",", "metadata", "=", "label_source_display", ".", "data", ",", "global_step", "=", "n_iter_train", ",", "tag", "=", "'train_source'", ")", "\n", "writer", ".", "add_embedding", "(", "feat_target_display", ",", "metadata", "=", "label_target_display", ".", "data", ",", "global_step", "=", "n_iter_train", ",", "tag", "=", "'train_target'", ")", "\n", "\n", "# mix source and target", "\n", "feat_all_display", "=", "torch", ".", "cat", "(", "(", "feat_source_display", ",", "feat_target_display", ")", ",", "0", ")", "\n", "label_all_domain_display", "=", "torch", ".", "cat", "(", "(", "label_source_domain_display", ",", "label_target_domain_display", ")", ",", "0", ")", "\n", "writer", ".", "add_embedding", "(", "feat_all_display", ",", "metadata", "=", "label_all_domain_display", ".", "data", ",", "global_step", "=", "n_iter_train", ",", "tag", "=", "'train_DA'", ")", "\n", "\n", "# emphazise some classes (1, 3, 11 here)", "\n", "label_source_1", "=", "1", "*", "torch", ".", "eq", "(", "label_source_display", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "repeat", "(", "label_source_display", ".", "size", "(", "0", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_source_3", "=", "2", "*", "torch", ".", "eq", "(", "label_source_display", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "3", "]", ")", ".", "repeat", "(", "label_source_display", ".", "size", "(", "0", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_source_11", "=", "3", "*", "torch", ".", "eq", "(", "label_source_display", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "11", "]", ")", ".", "repeat", "(", "label_source_display", ".", "size", "(", "0", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "label_target_1", "=", "4", "*", "torch", ".", "eq", "(", "label_target_display", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "repeat", "(", "label_target_display", ".", "size", "(", "0", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_target_3", "=", "5", "*", "torch", ".", "eq", "(", "label_target_display", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "3", "]", ")", ".", "repeat", "(", "label_target_display", ".", "size", "(", "0", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_target_11", "=", "6", "*", "torch", ".", "eq", "(", "label_target_display", ",", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "11", "]", ")", ".", "repeat", "(", "label_target_display", ".", "size", "(", "0", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "label_source_display_new", "=", "label_source_1", "+", "label_source_3", "+", "label_source_11", "\n", "id_source_show", "=", "~", "torch", ".", "eq", "(", "label_source_display_new", ",", "0", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_source_display_new", "=", "label_source_display_new", "[", "id_source_show", "]", "\n", "feat_source_display_new", "=", "feat_source_display", "[", "id_source_show", "]", "\n", "\n", "label_target_display_new", "=", "label_target_1", "+", "label_target_3", "+", "label_target_11", "\n", "id_target_show", "=", "~", "torch", ".", "eq", "(", "label_target_display_new", ",", "0", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "label_target_display_new", "=", "label_target_display_new", "[", "id_target_show", "]", "\n", "feat_target_display_new", "=", "feat_target_display", "[", "id_target_show", "]", "\n", "\n", "feat_all_display_new", "=", "torch", ".", "cat", "(", "(", "feat_source_display_new", ",", "feat_target_display_new", ")", ",", "0", ")", "\n", "label_all_display_new", "=", "torch", ".", "cat", "(", "(", "label_source_display_new", ",", "label_target_display_new", ")", ",", "0", ")", "\n", "writer", ".", "add_embedding", "(", "feat_all_display_new", ",", "metadata", "=", "label_all_display_new", ".", "data", ",", "global_step", "=", "n_iter_train", ",", "tag", "=", "'train_DA_labels'", ")", "\n", "\n", "", "if", "args", ".", "auto", "==", "False", ":", "\n", "\t\t", "log_short", ".", "write", "(", "'%s\\n'", "%", "line", ")", "\n", "", "return", "losses_c", ".", "avg", ",", "attn_epoch_source", ".", "mean", "(", "0", ")", ",", "attn_epoch_target", ".", "mean", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.validate": [[956, 1210], ["main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "main.AverageMeter", "model.eval", "meter.reset", "time.time", "range", "enumerate", "numpy.array", "numpy.unique", "target_logits_cls.append", "target_entropy_cls.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat.size", "val_label.cuda.cuda", "len", "len", "meter.sum[].sum", "meter.count[].sum", "print", "range", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "main.removeDummy", "label.size", "print", "int", "torch.cat.size", "torch.cat.size", "torch.cat.size", "val_label.cuda.unsqueeze().repeat().view", "torch.tensor().cuda.extend", "meter.avg.mean", "meter.avg[].mean", "meter.avg[].mean", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "target_entropy.tolist", "list", "len", "len", "main.EVT", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pred1.eq", "pred1.eq.sum", "meter.update", "torch.tensor().cuda.extend", "range", "meter.sum.sum", "meter.count.sum", "meter.avg[].mean", "torch.cat.size", "val_label.cuda.unsqueeze().repeat", "F.softmax.data.max", "label.detach().cpu().numpy", "numpy.array().tolist", "torch.from_numpy.astype", "numpy.array", "pred1.eq.double().cpu().numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "target_entropy.tolist", "list", "len", "len", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "pred1.eq", "pred1.eq.sum", "meter.update", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "pred1.eq", "pred1.eq.sum", "meter.update", "meter.avg[].mean", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "F.softmax.data.max", "logits_per_cls.nelement", "target_entropy_cls[].extend", "label.detach().cpu().numpy", "entropy_cuts[].float", "numpy.array", "pred1.eq.double().cpu().numpy", "F.softmax.data.max", "[].detach().double", "class_threshold[].double", "list", "label.view().cpu().numpy", "pred1.eq.double().cpu().numpy", "torch.softmax", "pred1.eq", "pred1.eq.sum", "meter.update", "meter.avg[].mean", "val_label.cuda.unsqueeze", "F.softmax.data.max", "torch.softmax", "torch.log_softmax", "label.detach().cpu", "numpy.array", "pred1.eq.double().cpu", "entropy_per_cls.tolist", "len", "main.EVT", "torch.from_numpy().cuda.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "int", "torch.from_numpy().cuda.append", "torch.from_numpy().cuda.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "label.detach().cpu().numpy", "F.softmax.data.max", "[].detach", "list", "label.view().cpu().numpy", "pred1.eq.double().cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "F.softmax.data.max", "torch.softmax", "torch.log_softmax", "label.detach().cpu", "torch.from_numpy().cuda.append", "torch.from_numpy().cuda.append", "numpy.array", "pred1.eq.double().cpu", "F.softmax.data.max", "[].cpu().numpy", "numpy.array", "[].detach", "label.view().cpu", "pred1.eq.double().cpu", "label.detach().cpu().numpy", "label.detach", "pred1.eq.double", "F.softmax.data.max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "label.detach().cpu", "label.view().cpu", "pred1.eq.double().cpu", "torch.softmax", "torch.log_softmax", "label.detach", "pred1.eq.double", "F.softmax.data.max", "list", "[].cpu", "label.view", "pred1.eq.double", "pred[].max", "label.detach().cpu", "pred[].max", "pred[].max", "label.detach", "label.view", "pred1.eq.double", "label.detach", "logits_per_cls.topk", "int", "list"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.reset", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.removeDummy", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.EVT", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.AverageMeter.update", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.EVT"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "num_class", ",", "epoch", ",", "log", ",", "meter", ")", ":", "\n", "\n", "\t", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "meter", ".", "reset", "(", ")", "\n", "correct1", "=", "0", "\n", "size", "=", "0", "\n", "labels", "=", "[", "]", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "target_entropy_all", "=", "[", "]", "# for global-level EVT", "\n", "\n", "target_logits_cls", ",", "target_entropy_cls", "=", "[", "]", ",", "[", "]", "# for class-level EVT", "\n", "for", "cls", "in", "range", "(", "num_class", ")", ":", "\n", "\t\t", "target_logits_cls", ".", "append", "(", "[", "]", ")", "\n", "target_entropy_cls", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "romove_unk", "=", "False", "if", "epoch", "!=", "61", "else", "True", "\n", "\n", "if", "args", ".", "open_method", "!=", "'cls EVT'", ":", "\n", "\t\t", "entropy_cuts", "=", "[", "]", "\n", "\n", "# initialize the embedding", "\n", "", "if", "args", ".", "tensorboard", ":", "\n", "\t\t", "feat_val_display", "=", "None", "\n", "label_val_display", "=", "None", "\n", "\n", "", "for", "i", ",", "(", "val_data", ",", "val_record", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "\n", "\n", "\t\t", "val_label", "=", "torch", ".", "tensor", "(", "[", "int", "(", "i", ")", "for", "i", "in", "val_record", "[", "2", "]", "]", ")", "\n", "val_path", "=", "val_record", "[", "0", "]", "\n", "\n", "val_size_ori", "=", "val_data", ".", "size", "(", ")", "# original shape", "\n", "batch_val_ori", "=", "val_size_ori", "[", "0", "]", "\n", "\n", "# add dummy tensors to keep the same batch size for each epoch (for the last epoch)", "\n", "if", "batch_val_ori", "<", "args", ".", "batch_size", "[", "2", "]", ":", "\n", "\t\t\t", "val_data_dummy", "=", "torch", ".", "zeros", "(", "args", ".", "batch_size", "[", "2", "]", "-", "batch_val_ori", ",", "val_size_ori", "[", "1", "]", ",", "val_size_ori", "[", "2", "]", ")", "\n", "val_data", "=", "torch", ".", "cat", "(", "(", "val_data", ",", "val_data_dummy", ")", ")", "\n", "\n", "# add dummy tensors to make sure batch size can be divided by gpu #", "\n", "", "if", "val_data", ".", "size", "(", "0", ")", "%", "gpu_count", "!=", "0", ":", "\n", "\t\t\t", "val_data_dummy", "=", "torch", ".", "zeros", "(", "gpu_count", "-", "val_data", ".", "size", "(", "0", ")", "%", "gpu_count", ",", "val_data", ".", "size", "(", "1", ")", ",", "val_data", ".", "size", "(", "2", ")", ")", "\n", "val_data", "=", "torch", ".", "cat", "(", "(", "val_data", ",", "val_data_dummy", ")", ")", "\n", "\n", "", "val_label", "=", "val_label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "\t\t\t", "if", "args", ".", "baseline_type", "==", "'frame'", ":", "\n", "\t\t\t\t", "val_label_frame", "=", "val_label", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "args", ".", "num_segments", ")", ".", "view", "(", "-", "1", ")", "# expand the size for all the frames", "\n", "\n", "# compute output", "\n", "", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "attn_val", ",", "out_val", ",", "out_val_2", ",", "pred_domain_val", ",", "feat_val", "=", "model", "(", "val_data", ",", "val_data", ",", "[", "0", "]", "*", "len", "(", "args", ".", "beta", ")", ",", "0", ",", "is_train", "=", "False", ",", "reverse", "=", "False", ")", "\n", "\n", "# ignore dummy tensors", "\n", "attn_val", ",", "out_val", ",", "out_val_2", ",", "pred_domain_val", ",", "feat_val", "=", "removeDummy", "(", "attn_val", ",", "out_val", ",", "out_val_2", ",", "pred_domain_val", ",", "feat_val", ",", "batch_val_ori", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "label", "=", "val_label_frame", "if", "args", ".", "baseline_type", "==", "'frame'", "else", "val_label", "\n", "\n", "# store the embedding", "\n", "if", "args", ".", "tensorboard", ":", "\n", "\t\t\t\t", "feat_val_display", "=", "feat_val", "[", "1", "]", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "feat_val_display", ",", "feat_val", "[", "1", "]", ")", ",", "0", ")", "\n", "label_val_display", "=", "label", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "label_val_display", ",", "label", ")", ",", "0", ")", "\n", "\n", "", "pred", "=", "out_val", "\n", "batch_size", "=", "label", ".", "size", "(", "0", ")", "\n", "\n", "\n", "# OSVM", "\n", "# pred1 = pred.data.max(1)[1]", "\n", "\n", "#======================== SPLIT UNK =====================#", "\n", "\n", "if", "args", ".", "open_method", "==", "\"EVT\"", ":", "# EVT", "\n", "\n", "\t\t\t\t", "pred1", "=", "torch", ".", "cat", "(", "(", "pred1", ",", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ")", ")", "if", "i", "!=", "0", "else", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "\n", "# loss = criterion(pred, label)", "\n", "target_entropy", "=", "-", "(", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "target_entropy_all", ".", "extend", "(", "target_entropy", ".", "tolist", "(", ")", ")", "\n", "\n", "# # EVT (batch level)", "\n", "# entropy_cut = EVT(target_entropy, 0.5) # EVT TAIL ", "\n", "# if romove_unk:", "\n", "# \ttarget_path_all.extend(val_path)", "\n", "\n", "# EVT (domain level)", "\n", "label", "[", "label", ">", "num_class", "]", "=", "num_class", "# change all extra classes in target to unk", "\n", "labels", "=", "labels", "+", "list", "(", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "len", "(", "target_entropy_all", ")", "==", "len", "(", "val_loader", ".", "dataset", ")", ":", "\n", "\t\t\t\t\t", "power", "=", "args", ".", "EVT_power", "\n", "threshold", "=", "args", ".", "EVT_threshold", "\n", "entropy_cut", "=", "EVT", "(", "target_entropy_all", ",", "threshold", ",", "power", ")", "\n", "idx", "=", "(", "np", ".", "array", "(", "target_entropy_all", ")", ")", ".", "tolist", "(", ")", ">", "entropy_cut", "\n", "idx", "=", "torch", ".", "from_numpy", "(", "idx", ".", "astype", "(", "'uint8'", ")", ")", "\n", "pred1", "[", "idx", "]", "=", "num_class", "# unk class", "\n", "prec", "=", "pred1", ".", "eq", "(", "torch", ".", "LongTensor", "(", "labels", ")", ".", "cuda", "(", ")", ".", "data", ")", "\n", "correct1", "+=", "prec", ".", "sum", "(", ")", "\n", "meter", ".", "update", "(", "np", ".", "array", "(", "labels", ")", ",", "prec", ".", "double", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "elif", "args", ".", "open_method", "==", "\"cls EVT\"", ":", "# class-level EVT", "\n", "\n", "\t\t\t\t", "pred1", "=", "torch", ".", "cat", "(", "(", "pred1", ",", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ")", ")", "if", "i", "!=", "0", "else", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "target_entropy", "=", "-", "(", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "target_entropy_all", ".", "extend", "(", "target_entropy", ".", "tolist", "(", ")", ")", "\n", "\n", "for", "cls", "in", "range", "(", "num_class", ")", ":", "\n", "\t\t\t\t\t", "logits_per_cls", "=", "pred", ".", "data", "[", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "==", "cls", "]", "\n", "if", "logits_per_cls", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "\t\t\t\t\t\t", "entropy_per_cls", "=", "-", "(", "F", ".", "softmax", "(", "logits_per_cls", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "logits_per_cls", ",", "dim", "=", "1", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "target_entropy_cls", "[", "cls", "]", ".", "extend", "(", "entropy_per_cls", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "label", "[", "label", ">", "num_class", "]", "=", "num_class", "# change all extra classes in target to unk", "\n", "labels", "=", "labels", "+", "list", "(", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "len", "(", "target_entropy_all", ")", "==", "len", "(", "val_loader", ".", "dataset", ")", ":", "\n", "\t\t\t\t\t", "entropy_cuts", "=", "[", "]", "\n", "power", "=", "args", ".", "EVT_power", "\n", "threshold", "=", "args", ".", "EVT_threshold", "\n", "for", "cls", "in", "range", "(", "num_class", ")", ":", "\n", "\t\t\t\t\t\t", "if", "len", "(", "target_entropy_cls", "[", "cls", "]", ")", "!=", "0", ":", "\n", "\t\t\t\t\t\t\t", "entropy_cut", "=", "EVT", "(", "target_entropy_cls", "[", "cls", "]", ",", "threshold", ",", "power", ")", "\n", "if", "entropy_cut", "==", "None", ":", "\n", "\t\t\t\t\t\t\t\t", "entropy_cuts", ".", "append", "(", "100", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "entropy_cuts", ".", "append", "(", "entropy_cut", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "entropy_cuts", ".", "append", "(", "100", ")", "# no entropy can be greater than 100", "\n", "", "", "entropy_cuts", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "entropy_cuts", ")", ")", ".", "cuda", "(", ")", "\n", "target_entropy_all", "=", "torch", ".", "tensor", "(", "target_entropy_all", ")", ".", "cuda", "(", ")", "\n", "idx", "=", "target_entropy_all", ">", "entropy_cuts", "[", "pred1", "]", ".", "float", "(", ")", "\n", "pred1", "[", "idx", "]", "=", "num_class", "# unk class", "\n", "prec", "=", "pred1", ".", "eq", "(", "torch", ".", "LongTensor", "(", "labels", ")", ".", "cuda", "(", ")", ".", "data", ")", "\n", "correct1", "+=", "prec", ".", "sum", "(", ")", "\n", "meter", ".", "update", "(", "np", ".", "array", "(", "labels", ")", ",", "prec", ".", "double", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "elif", "args", ".", "open_method", "==", "\"cls OSVM\"", ":", "# class-level OSVM", "\n", "\t\t\t\t", "pred1", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "class_threshold", "=", "[", "]", "\n", "threshold_value", "=", "0.6", "\n", "for", "cls", "in", "range", "(", "num_class", ")", ":", "\n", "\t\t\t\t\t", "logits_per_cls", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "0", "]", "[", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "==", "cls", "]", "\n", "\n", "if", "int", "(", "list", "(", "logits_per_cls", ".", "shape", ")", "[", "0", "]", "*", "threshold_value", ")", "!=", "0", ":", "\n", "\t\t\t\t\t\t", "threshold", "=", "logits_per_cls", ".", "topk", "(", "int", "(", "list", "(", "logits_per_cls", ".", "shape", ")", "[", "0", "]", "*", "threshold_value", ")", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "-", "1", "]", "\n", "class_threshold", ".", "append", "(", "threshold", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "class_threshold", ".", "append", "(", "0", ")", "\n", "\n", "", "", "class_threshold", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "class_threshold", ")", ")", ".", "cuda", "(", ")", "\n", "idx", "=", "pred", "[", ":", ",", ":", "]", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "double", "(", ")", "<", "class_threshold", "[", "pred", "[", ":", ",", ":", "]", ".", "max", "(", "-", "1", ")", "[", "1", "]", "]", ".", "double", "(", ")", "\n", "\n", "pred1", "[", "idx", "]", "=", "num_class", "# unk class", "\n", "label", "[", "label", ">", "num_class", "]", "=", "num_class", "\n", "\n", "labels", "=", "labels", "+", "list", "(", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "prec", "=", "pred1", ".", "eq", "(", "label", ".", "data", ")", "\n", "correct1", "+=", "prec", ".", "sum", "(", ")", "\n", "meter", ".", "update", "(", "label", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "prec", ".", "double", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "elif", "args", ".", "open_method", "==", "\"OSVM\"", ":", "# OSVM", "\n", "\n", "\t\t\t\t", "pred1", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "pred", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "-", "1", ")", "\n", "idx", "=", "pred", "[", ":", ",", ":", "]", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "detach", "(", ")", "<", "args", ".", "OSVM_threshold", "\n", "pred1", "[", "idx", "]", "=", "num_class", "# unk class", "\n", "label", "[", "label", ">", "num_class", "]", "=", "num_class", "\n", "\n", "labels", "=", "labels", "+", "list", "(", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "prec", "=", "pred1", ".", "eq", "(", "label", ".", "data", ")", "\n", "correct1", "+=", "prec", ".", "sum", "(", ")", "\n", "meter", ".", "update", "(", "label", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "prec", ".", "double", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "size", "+=", "batch_size", "\n", "\n", "# res = []", "\n", "# for k in topk:", "\n", "# \tcorrect_k = correct[:k].view(-1).float().sum(0)", "\n", "# \tres.append(correct_k.mul_(100.0 / batch_size))", "\n", "\n", "\n", "# preds = np.array(preds)", "\n", "", "", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "u", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "known_ratio", "=", "counts", "[", "0", "]", "/", "len", "(", "labels", ")", "\n", "unk_ratio", "=", "counts", "[", "1", "]", "/", "len", "(", "labels", ")", "\n", "ac", "=", "meter", ".", "sum", "[", ":", "-", "1", "]", ".", "sum", "(", ")", "/", "meter", ".", "count", "[", ":", "-", "1", "]", ".", "sum", "(", ")", "\n", "ac_hat", "=", "meter", ".", "avg", "[", "-", "1", "]", "\n", "H_score", "=", "2", "*", "(", "ac", "*", "ac_hat", ")", "/", "(", "ac", "+", "ac_hat", ")", "\n", "\n", "\n", "if", "args", ".", "auto", "==", "False", ":", "\n", "\n", "\t\t", "print", "(", "'\\nTest Results:'", ")", "\n", "for", "id", "in", "range", "(", "0", ",", "num_class", ")", ":", "\n", "\t\t\t", "print", "(", "'Class {}: {:.4f}'", ".", "format", "(", "id", ",", "meter", ".", "avg", "[", "id", "]", ")", ")", "\n", "\n", "", "print", "(", "'ALL: {:.4f},  OS: {:.4f}, OS*: {:.4f}, UNK: {:.4f}, '", "\n", "'balanced: {:.4f}.'", "\n", ".", "format", "(", "meter", ".", "sum", ".", "sum", "(", ")", "/", "meter", ".", "count", ".", "sum", "(", ")", ",", "meter", ".", "avg", ".", "mean", "(", ")", ",", "meter", ".", "avg", "[", ":", "-", "1", "]", ".", "mean", "(", ")", ",", "meter", ".", "avg", "[", "-", "1", "]", ",", "2", "*", "(", "meter", ".", "avg", "[", "-", "1", "]", "*", "meter", ".", "avg", "[", ":", "-", "1", "]", ".", "mean", "(", ")", ")", "/", "(", "meter", ".", "avg", "[", ":", "-", "1", "]", ".", "mean", "(", ")", "+", "meter", ".", "avg", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "\n", "# \t\tif args.baseline_type == 'tsn':", "\n", "# \t\t\tpred = pred.view(val_label.size(0), -1, num_class).mean(dim=1) # average all the segments (needed when num_segments != val_segments)", "\n", "#", "\n", "# \t\tloss = criterion(pred, label)", "\n", "# \t\tprec1, prec5 = accuracy(pred.data, label, topk=(1, 1))", "\n", "#", "\n", "# \t\tlosses.update(loss.item(), out_val.size(0))", "\n", "# \t\ttop1.update(prec1.item(), out_val.size(0))", "\n", "# \t\ttop5.update(prec5.item(), out_val.size(0))", "\n", "#", "\n", "# \t\t# measure elapsed time", "\n", "# \t\tbatch_time.update(time.time() - end)", "\n", "# \t\tend = time.time()", "\n", "#", "\n", "# \t\tif i % args.print_freq == 0:", "\n", "# \t\t\tline = 'Test: [{0}][{1}/{2}]\\t' + \\", "\n", "# \t\t\t\t  'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t' + \\", "\n", "# \t\t\t\t  'Loss {loss.val:.4f} ({loss.avg:.4f})\\t' + \\", "\n", "# \t\t\t\t  'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t' + \\", "\n", "# \t\t\t\t  'Prec@5 {top5.val:.3f} ({top5.avg:.3f})\\t'", "\n", "#", "\n", "# \t\t\tline = line.format(", "\n", "# \t\t\t\t   epoch, i, len(val_loader), batch_time=batch_time, loss=losses,", "\n", "# \t\t\t\t   top1=top1, top5=top5)", "\n", "#", "\n", "# \t\t\tif i % args.show_freq == 0:", "\n", "# \t\t\t\tprint(line)", "\n", "#", "\n", "# \t\t\tlog.write('%s\\n' % line)", "\n", "#", "\n", "# if args.tensorboard:  # update the embedding every iteration", "\n", "# \t# embedding", "\n", "# \tn_iter_val = epoch * len(val_loader)", "\n", "#", "\n", "# \twriter.add_embedding(feat_val_display, metadata=label_val_display.data, global_step=n_iter_val, tag='validation')", "\n", "#", "\n", "# print(('Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", "# \t  .format(top1=top1, top5=top5, loss=losses)))", "\n", "#", "\n", "\n", "\n", "# print(\"entropy_cuts for next training epoch:\", entropy_cuts)", "\n", "", "return", "2", "*", "(", "meter", ".", "avg", "[", "-", "1", "]", "*", "meter", ".", "avg", "[", ":", "-", "1", "]", ".", "mean", "(", ")", ")", "/", "(", "meter", ".", "avg", "[", ":", "-", "1", "]", ".", "mean", "(", ")", "+", "meter", ".", "avg", "[", "-", "1", "]", ")", ",", "entropy_cuts", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.save_checkpoint": [[1212, 1219], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "path_exp", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "\n", "\t", "path_file", "=", "path_exp", "+", "filename", "\n", "torch", ".", "save", "(", "state", ",", "path_file", ")", "\n", "if", "is_best", ":", "\n", "\t\t", "path_best", "=", "path_exp", "+", "'model_best.pth.tar'", "\n", "shutil", ".", "copyfile", "(", "path_file", ",", "path_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.adjust_learning_rate": [[1260, 1264], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "decay", ")", ":", "\n", "\t", "\"\"\"Sets the learning rate to the initial LR decayed by 10 \"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "\t\t", "param_group", "[", "'lr'", "]", "/=", "decay", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.adjust_learning_rate_loss": [[1265, 1270], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate_loss", "(", "optimizer", ",", "decay", ",", "stat_current", ",", "stat_previous", ",", "op", ")", ":", "\n", "\t", "ops", "=", "{", "'>'", ":", "(", "lambda", "x", ",", "y", ":", "x", ">", "y", ")", ",", "'<'", ":", "(", "lambda", "x", ",", "y", ":", "x", "<", "y", ")", ",", "'>='", ":", "(", "lambda", "x", ",", "y", ":", "x", ">=", "y", ")", ",", "'<='", ":", "(", "lambda", "x", ",", "y", ":", "x", "<=", "y", ")", "}", "\n", "if", "ops", "[", "op", "]", "(", "stat_current", ",", "stat_previous", ")", ":", "\n", "\t\t", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "\t\t\t", "param_group", "[", "'lr'", "]", "/=", "decay", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.adjust_learning_rate_dann": [[1271, 1274], ["None"], "function", ["None"], ["", "", "", "def", "adjust_learning_rate_dann", "(", "optimizer", ",", "p", ")", ":", "\n", "\t", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "\t\t", "param_group", "[", "'lr'", "]", "=", "args", ".", "lr", "/", "(", "1.", "+", "10", "*", "p", ")", "**", "0.75", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.loss_adaptive_weight": [[1275, 1279], ["pred.std().log", "pred.var().log", "pred.std", "pred.var"], "function", ["None"], ["", "", "def", "loss_adaptive_weight", "(", "loss", ",", "pred", ")", ":", "\n", "\t", "weight", "=", "1", "/", "pred", ".", "var", "(", ")", ".", "log", "(", ")", "\n", "constant", "=", "pred", ".", "std", "(", ")", ".", "log", "(", ")", "\n", "return", "loss", "*", "weight", "+", "constant", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.accuracy": [[1280, 1297], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "\t", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "\n", "# print(\"\\n\\n\", maxk, \"\\n\\n\")", "\n", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "\t\t", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.removeDummy": [[1299, 1307], ["None"], "function", ["None"], ["", "def", "removeDummy", "(", "attn", ",", "out_1", ",", "out_2", ",", "pred_domain", ",", "feat", ",", "batch_size", ")", ":", "\n", "\t", "attn", "=", "attn", "[", ":", "batch_size", "]", "\n", "out_1", "=", "out_1", "[", ":", "batch_size", "]", "\n", "out_2", "=", "out_2", "[", ":", "batch_size", "]", "\n", "pred_domain", "=", "[", "pred", "[", ":", "batch_size", "]", "for", "pred", "in", "pred_domain", "]", "\n", "feat", "=", "[", "f", "[", ":", "batch_size", "]", "for", "f", "in", "feat", "]", "\n", "\n", "return", "attn", ",", "out_1", ",", "out_2", ",", "pred_domain", ",", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.EVT": [[1308, 1319], ["scipy.stats.genextreme.fit", "numpy.linspace", "scipy.stats.genextreme.cdf", "enumerate", "numpy.array"], "function", ["None"], ["", "def", "EVT", "(", "x", ",", "th", ",", "power", "=", "1", ")", ":", "\n", "\t", "\"\"\"Fit the EVT with the target entropy value, \n\tand return value of entropy with probability of GEV's cdf == th\"\"\"", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "**", "power", "\n", "shape", ",", "loc", ",", "scale", "=", "gev", ".", "fit", "(", "x", ")", "\n", "xx", "=", "np", ".", "linspace", "(", "loc", "+", "0.00001", "-", "2", ",", "loc", "+", "0.00001", "+", "4", ",", "num", "=", "1000", ")", "\n", "P", "=", "gev", ".", "cdf", "(", "xx", ",", "shape", ",", "loc", ",", "scale", ")", "\n", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "P", ")", ":", "\n", "\t\t", "if", "p", ">=", "th", ":", "\n", "\t\t\t", "return", "i", "*", "6", "/", "1000", "+", "loc", "-", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.main.tile": [[1320, 1327], ["a.repeat.size", "a.repeat.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "a.repeat.dim", "numpy.concatenate", "range", "numpy.arange"], "function", ["None"], ["", "", "", "def", "tile", "(", "a", ",", "dim", ",", "n_tile", ")", ":", "\n", "    ", "init_dim", "=", "a", ".", "size", "(", "dim", ")", "\n", "repeat_idx", "=", "[", "1", "]", "*", "a", ".", "dim", "(", ")", "\n", "repeat_idx", "[", "dim", "]", "=", "n_tile", "\n", "a", "=", "a", ".", "repeat", "(", "*", "(", "repeat_idx", ")", ")", "\n", "order_index", "=", "torch", ".", "LongTensor", "(", "np", ".", "concatenate", "(", "[", "init_dim", "*", "np", ".", "arange", "(", "n_tile", ")", "+", "i", "for", "i", "in", "range", "(", "init_dim", ")", "]", ")", ")", "\n", "return", "torch", ".", "index_select", "(", "a", ",", "dim", ",", "order_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.VideoRecord.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "_data", "=", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.VideoRecord.path": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.VideoRecord.num_frames": [[22, 25], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.VideoRecord.label": [[26, 29], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet.__init__": [[32, 52], ["dataset.TSNDataSet._parse_list"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._parse_list"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "list_file", ",", "num_dataload", ",", "\n", "num_segments", "=", "3", ",", "new_length", "=", "1", ",", "modality", "=", "'RGB'", ",", "\n", "image_tmpl", "=", "'img_{:05d}.t7'", ",", "transform", "=", "None", ",", "\n", "force_grayscale", "=", "False", ",", "random_shift", "=", "True", ",", "test_mode", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "list_file", "=", "list_file", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "new_length", "=", "new_length", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "image_tmpl", "=", "image_tmpl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "num_dataload", "=", "num_dataload", "\n", "\n", "if", "self", ".", "modality", "==", "'RGBDiff'", "or", "self", ".", "modality", "==", "'RGBDiff2'", "or", "self", ".", "modality", "==", "'RGBDiffplus'", ":", "\n", "            ", "self", ".", "new_length", "+=", "1", "# Diff needs one more image to calculate diff", "\n", "\n", "", "self", ".", "_parse_list", "(", ")", "# read all the video files", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._load_feature": [[53, 67], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "dataset.TSNDataSet.image_tmpl.format"], "methods", ["None"], ["", "def", "_load_feature", "(", "self", ",", "directory", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "modality", "==", "'RGB'", "or", "self", ".", "modality", "==", "'RGBDiff'", "or", "self", ".", "modality", "==", "'RGBDiff2'", "or", "self", ".", "modality", "==", "'RGBDiffplus'", ":", "\n", "            ", "feat_path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", "\n", "try", ":", "\n", "                ", "feat", "=", "[", "torch", ".", "load", "(", "feat_path", ")", "]", "\n", "", "except", ":", "\n", "                ", "print", "(", "Back", ".", "RED", "+", "feat_path", ")", "\n", "", "return", "feat", "\n", "\n", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "x_feat", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "'x'", ",", "idx", ")", ")", ")", "\n", "y_feat", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "'y'", ",", "idx", ")", ")", ")", "\n", "\n", "return", "[", "x_feat", ",", "y_feat", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._parse_list": [[69, 75], ["dataset.VideoRecord", "len", "len", "x.strip().split", "open", "x.strip"], "methods", ["None"], ["", "", "def", "_parse_list", "(", "self", ")", ":", "\n", "        ", "self", ".", "video_list", "=", "[", "VideoRecord", "(", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", "for", "x", "in", "open", "(", "self", ".", "list_file", ")", "]", "\n", "# repeat the list if the length is less than num_dataload (especially for target data)", "\n", "n_repeat", "=", "self", ".", "num_dataload", "//", "len", "(", "self", ".", "video_list", ")", "\n", "n_left", "=", "self", ".", "num_dataload", "%", "len", "(", "self", ".", "video_list", ")", "\n", "self", ".", "video_list", "=", "self", ".", "video_list", "*", "n_repeat", "+", "self", ".", "video_list", "[", ":", "n_left", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._sample_indices": [[76, 91], ["numpy.multiply", "numpy.random.randint", "numpy.sort", "numpy.zeros", "list", "numpy.random.randint", "range"], "methods", ["None"], ["", "def", "_sample_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"\n\n        :param record: VideoRecord\n        :return: list\n        \"\"\"", "\n", "#np.random.seed(1)", "\n", "average_duration", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "//", "self", ".", "num_segments", "\n", "if", "average_duration", ">", "0", ":", "\n", "            ", "offsets", "=", "np", ".", "multiply", "(", "list", "(", "range", "(", "self", ".", "num_segments", ")", ")", ",", "average_duration", ")", "+", "randint", "(", "average_duration", ",", "size", "=", "self", ".", "num_segments", ")", "\n", "", "elif", "record", ".", "num_frames", ">", "self", ".", "num_segments", ":", "\n", "            ", "offsets", "=", "np", ".", "sort", "(", "randint", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", "\n", "", "else", ":", "\n", "            ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._get_val_indices": [[92, 102], ["numpy.array", "numpy.zeros", "float", "float", "int", "range", "float"], "methods", ["None"], ["", "def", "_get_val_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "num_min", "=", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", "\n", "num_select", "=", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", "\n", "\n", "if", "record", ".", "num_frames", ">=", "num_min", ":", "\n", "            ", "tick", "=", "float", "(", "num_select", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "float", "(", "x", ")", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._get_test_indices": [[103, 117], ["numpy.array", "numpy.array", "numpy.append", "float", "float", "numpy.ones", "int", "range", "range", "float"], "methods", ["None"], ["", "def", "_get_test_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "num_min", "=", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", "\n", "num_select", "=", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", "\n", "\n", "if", "record", ".", "num_frames", ">=", "num_min", ":", "\n", "            ", "tick", "=", "float", "(", "num_select", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "float", "(", "x", ")", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "# pick the central frame in each segment", "\n", "", "else", ":", "# the video clip is too short --> duplicate the last frame", "\n", "            ", "id_select", "=", "np", ".", "array", "(", "[", "x", "for", "x", "in", "range", "(", "num_select", ")", "]", ")", "\n", "# expand to the length of self.num_segments with the last element", "\n", "id_expand", "=", "np", ".", "ones", "(", "self", ".", "num_segments", "-", "num_select", ",", "dtype", "=", "int", ")", "*", "id_select", "[", "id_select", "[", "0", "]", "-", "1", "]", "\n", "offsets", "=", "np", ".", "append", "(", "id_select", ",", "id_expand", ")", "\n", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet.__getitem__": [[118, 127], ["dataset.TSNDataSet.get", "dataset.TSNDataSet._get_test_indices", "dataset.TSNDataSet._sample_indices", "dataset.TSNDataSet._get_val_indices"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._get_test_indices", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._sample_indices", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._get_val_indices"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "record", "=", "self", ".", "video_list", "[", "index", "]", "\n", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "record", ")", "if", "self", ".", "random_shift", "else", "self", ".", "_get_val_indices", "(", "record", ")", "\n", "", "else", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_get_test_indices", "(", "record", ")", "\n", "\n", "", "return", "self", ".", "get", "(", "record", ",", "segment_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet.get": [[128, 145], ["list", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "int", "range", "dataset.TSNDataSet._load_feature", "list.extend"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet._load_feature"], ["", "def", "get", "(", "self", ",", "record", ",", "indices", ")", ":", "\n", "\n", "        ", "frames", "=", "list", "(", ")", "\n", "\n", "for", "seg_ind", "in", "indices", ":", "\n", "            ", "p", "=", "int", "(", "seg_ind", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "new_length", ")", ":", "\n", "                ", "seg_feats", "=", "self", ".", "_load_feature", "(", "record", ".", "path", ",", "p", ")", "\n", "frames", ".", "extend", "(", "seg_feats", ")", "\n", "\n", "if", "p", "<", "record", ".", "num_frames", ":", "\n", "                    ", "p", "+=", "1", "\n", "\n", "# process_data = self.transform(frames)", "\n", "", "", "", "process_data", "=", "torch", ".", "stack", "(", "frames", ")", "\n", "\n", "return", "process_data", ",", "record", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.dataset.TSNDataSet.__len__": [[146, 148], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.cross_entropy_soft": [[10, 15], ["torch.Softmax", "torch.LogSoftmax", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "nn.LogSoftmax.", "nn.Softmax."], "function", ["None"], ["def", "cross_entropy_soft", "(", "pred", ")", ":", "\n", "    ", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "softmax", "(", "pred", ")", "*", "logsoftmax", "(", "pred", ")", ",", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.attentive_entropy": [[17, 28], ["torch.Softmax", "torch.LogSoftmax", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "nn.LogSoftmax.", "torch.sum", "torch.sum", "torch.sum", "nn.Softmax.", "nn.LogSoftmax.", "nn.Softmax."], "function", ["None"], ["", "def", "attentive_entropy", "(", "pred", ",", "pred_domain", ")", ":", "\n", "    ", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n", "# attention weight", "\n", "entropy", "=", "torch", ".", "sum", "(", "-", "softmax", "(", "pred_domain", ")", "*", "logsoftmax", "(", "pred_domain", ")", ",", "1", ")", "\n", "weights", "=", "1", "+", "entropy", "\n", "\n", "# attentive entropy", "\n", "loss", "=", "torch", ".", "mean", "(", "weights", "*", "torch", ".", "sum", "(", "-", "softmax", "(", "pred", ")", "*", "logsoftmax", "(", "pred", ")", ",", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.dis_MCD": [[31, 33], ["torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.softmax", "torch.softmax"], "function", ["None"], ["", "def", "dis_MCD", "(", "out1", ",", "out2", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "F", ".", "softmax", "(", "out1", ",", "dim", "=", "1", ")", "-", "F", ".", "softmax", "(", "out2", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.mmd_linear": [[35, 47], ["torch.mean", "torch.mean", "torch.mean", "torch.mm", "torch.mm", "torch.mm", "torch.transpose", "torch.transpose", "torch.transpose"], "function", ["None"], ["", "def", "mmd_linear", "(", "f_of_X", ",", "f_of_Y", ")", ":", "\n", "# Consider linear time MMD with a linear kernel:", "\n", "# K(f(x), f(y)) = f(x)^Tf(y)", "\n", "# h(z_i, z_j) = k(x_i, x_j) + k(y_i, y_j) - k(x_i, y_j) - k(x_j, y_i)", "\n", "#             = [f(x_i) - f(y_i)]^T[f(x_j) - f(y_j)]", "\n", "#", "\n", "# f_of_X: batch_size * k", "\n", "# f_of_Y: batch_size * k", "\n", "\n", "    ", "delta", "=", "f_of_X", "-", "f_of_Y", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "mm", "(", "delta", ",", "torch", ".", "transpose", "(", "delta", ",", "0", ",", "1", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.guassian_kernel": [[48, 62], ["torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.exp", "torch.exp", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sum", "torch.sum", "torch.sum", "range", "source.size", "target.size"], "function", ["None"], ["", "def", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "    ", "n_samples", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "+", "int", "(", "target", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "total", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", ",", "dim", "=", "0", ")", "\n", "total0", "=", "total", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "total1", "=", "total", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "L2_distance", "=", "(", "(", "total0", "-", "total1", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "\n", "if", "fix_sigma", ":", "\n", "        ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "        ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "-", "L2_distance", "/", "bandwidth_temp", ")", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "\n", "return", "sum", "(", "kernel_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.mmd_rbf": [[63, 86], ["int", "loss.guassian_kernel", "range", "source.size", "torch.mean.abs_", "float", "torch.mean", "torch.mean", "torch.mean", "ValueError"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.guassian_kernel"], ["", "def", "mmd_rbf", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ",", "ver", "=", "2", ")", ":", "\n", "    ", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "kernels", "=", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ")", "\n", "\n", "loss", "=", "0", "\n", "\n", "if", "ver", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "s1", ",", "s2", "=", "i", ",", "(", "i", "+", "1", ")", "%", "batch_size", "\n", "t1", ",", "t2", "=", "s1", "+", "batch_size", ",", "s2", "+", "batch_size", "\n", "loss", "+=", "kernels", "[", "s1", ",", "s2", "]", "+", "kernels", "[", "t1", ",", "t2", "]", "\n", "loss", "-=", "kernels", "[", "s1", ",", "t2", "]", "+", "kernels", "[", "s2", ",", "t1", "]", "\n", "", "loss", "=", "loss", ".", "abs_", "(", ")", "/", "float", "(", "batch_size", ")", "\n", "", "elif", "ver", "==", "2", ":", "\n", "        ", "XX", "=", "kernels", "[", ":", "batch_size", ",", ":", "batch_size", "]", "\n", "YY", "=", "kernels", "[", "batch_size", ":", ",", "batch_size", ":", "]", "\n", "XY", "=", "kernels", "[", ":", "batch_size", ",", "batch_size", ":", "]", "\n", "YX", "=", "kernels", "[", "batch_size", ":", ",", ":", "batch_size", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "XX", "+", "YY", "-", "XY", "-", "YX", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'ver == 1 or 2'", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.JAN": [[87, 123], ["int", "len", "range", "loss.guassian_kernel", "range", "source_list[].size", "torch.mean.abs_", "float", "torch.mean", "torch.mean", "torch.mean", "ValueError"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.guassian_kernel"], ["", "def", "JAN", "(", "source_list", ",", "target_list", ",", "kernel_muls", "=", "[", "2.0", ",", "2.0", "]", ",", "kernel_nums", "=", "[", "2", ",", "5", "]", ",", "fix_sigma_list", "=", "[", "None", ",", "None", "]", ",", "ver", "=", "2", ")", ":", "\n", "    ", "batch_size", "=", "int", "(", "source_list", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "layer_num", "=", "len", "(", "source_list", ")", "\n", "joint_kernels", "=", "None", "\n", "for", "i", "in", "range", "(", "layer_num", ")", ":", "\n", "        ", "source", "=", "source_list", "[", "i", "]", "\n", "target", "=", "target_list", "[", "i", "]", "\n", "kernel_mul", "=", "kernel_muls", "[", "i", "]", "\n", "kernel_num", "=", "kernel_nums", "[", "i", "]", "\n", "fix_sigma", "=", "fix_sigma_list", "[", "i", "]", "\n", "kernels", "=", "guassian_kernel", "(", "source", ",", "target", ",", "\n", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ")", "\n", "if", "joint_kernels", "is", "not", "None", ":", "\n", "            ", "joint_kernels", "=", "joint_kernels", "*", "kernels", "\n", "", "else", ":", "\n", "            ", "joint_kernels", "=", "kernels", "\n", "\n", "", "", "loss", "=", "0", "\n", "\n", "if", "ver", "==", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "s1", ",", "s2", "=", "i", ",", "(", "i", "+", "1", ")", "%", "batch_size", "\n", "t1", ",", "t2", "=", "s1", "+", "batch_size", ",", "s2", "+", "batch_size", "\n", "loss", "+=", "joint_kernels", "[", "s1", ",", "s2", "]", "+", "joint_kernels", "[", "t1", ",", "t2", "]", "\n", "loss", "-=", "joint_kernels", "[", "s1", ",", "t2", "]", "+", "joint_kernels", "[", "s2", ",", "t1", "]", "\n", "", "loss", "=", "loss", ".", "abs_", "(", ")", "/", "float", "(", "batch_size", ")", "\n", "", "elif", "ver", "==", "2", ":", "\n", "        ", "XX", "=", "joint_kernels", "[", ":", "batch_size", ",", ":", "batch_size", "]", "\n", "YY", "=", "joint_kernels", "[", "batch_size", ":", ",", "batch_size", ":", "]", "\n", "XY", "=", "joint_kernels", "[", ":", "batch_size", ",", "batch_size", ":", "]", "\n", "YX", "=", "joint_kernels", "[", "batch_size", ":", ",", ":", "batch_size", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "XX", "+", "YY", "-", "XY", "-", "YX", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'ver == 1 or 2'", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.ivan_CEL": [[125, 134], ["torch.log_softmax", "F.log_softmax.size", "weights.float", "torch.sum", "torch.sum", "torch.sum", "range"], "function", ["None"], ["", "def", "ivan_CEL", "(", "my_outputs", ",", "my_labels", ",", "weights", ")", ":", "\n", "#specifying the batch size", "\n", "    ", "my_batch_size", "=", "my_outputs", ".", "size", "(", ")", "[", "0", "]", "\n", "#calculating the log of softmax values", "\n", "my_outputs", "=", "F", ".", "log_softmax", "(", "my_outputs", ",", "dim", "=", "1", ")", "\n", "#selecting the values that correspond to labels", "\n", "my_outputs", "=", "my_outputs", "[", "range", "(", "my_batch_size", ")", ",", "my_labels", "]", "*", "weights", ".", "float", "(", ")", "\n", "#returning the results", "\n", "return", "-", "torch", ".", "sum", "(", "my_outputs", ")", "/", "my_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.loss.H_loss": [[135, 138], ["b.sum().mean", "torch.softmax", "torch.log_softmax", "b.sum"], "function", ["None"], ["", "def", "H_loss", "(", "x", ")", ":", "\n", "    ", "b", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "return", "b", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.open_set_data.open_setting": [[2, 36], ["int", "source_file_new.write", "int", "target_file_new.write", "target_file_new.write", "int", "validation_file_new.write", "validation_file_new.write", "line.strip().split", "line.strip().split", "line.strip().split", "str", "str", "line.strip", "line.strip", "line.strip", "line.strip().split", "line.strip().split", "line.strip().split", "line.strip().split", "line.strip", "line.strip", "line.strip", "line.strip"], "function", ["None"], ["def", "open_setting", "(", "source_file_org", ",", "source_file_new", ",", "\n", "num_known", ",", "target_file_org", "=", "None", ",", "target_file_new", "=", "None", ",", "\n", "validation_file_org", "=", "None", ",", "validation_file_new", "=", "None", ")", ":", "\n", "\n", "# keep known source samples only", "\n", "    ", "for", "line", "in", "source_file_org", ":", "\n", "        ", "if", "int", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "2", "]", ")", "<", "num_known", ":", "\n", "            ", "source_file_new", ".", "write", "(", "line", ")", "\n", "\n", "", "", "for", "line", "in", "target_file_org", ":", "\n", "        ", "if", "int", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "2", "]", ")", ">=", "num_known", ":", "\n", "            ", "target_file_new", ".", "write", "(", "\n", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "+", "\n", "\" \"", "+", "\n", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", "]", "+", "\n", "\" \"", "+", "\n", "str", "(", "num_known", ")", "+", "\n", "\"\\n\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "target_file_new", ".", "write", "(", "line", ")", "\n", "\n", "", "", "for", "line", "in", "validation_file_org", ":", "\n", "        ", "if", "int", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "2", "]", ")", ">=", "num_known", ":", "\n", "            ", "validation_file_new", ".", "write", "(", "\n", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "+", "\n", "\" \"", "+", "\n", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "1", "]", "+", "\n", "\" \"", "+", "\n", "str", "(", "num_known", ")", "+", "\n", "\"\\n\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "validation_file_new", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.TRNmodule.RelationModule.__init__": [[8, 14], ["super().__init__", "TRNmodule.RelationModule.fc_fusion"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.C3D_model.C3D.__init__", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.TRNmodule.RelationModule.fc_fusion"], ["    ", "def", "__init__", "(", "self", ",", "img_feature_dim", ",", "num_bottleneck", ",", "num_frames", ")", ":", "\n", "        ", "super", "(", "RelationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "\n", "self", ".", "num_bottleneck", "=", "num_bottleneck", "\n", "self", ".", "classifier", "=", "self", ".", "fc_fusion", "(", ")", "\n", "", "def", "fc_fusion", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.TRNmodule.RelationModule.fc_fusion": [[14, 22], ["torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "fc_fusion", "(", "self", ")", ":", "\n", "# naive concatenate", "\n", "        ", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "num_frames", "*", "self", ".", "img_feature_dim", ",", "self", ".", "num_bottleneck", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "return", "classifier", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.TRNmodule.RelationModule.forward": [[22, 26], ["TRNmodule.RelationModule.view", "TRNmodule.RelationModule.classifier", "TRNmodule.RelationModule.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_frames", "*", "self", ".", "img_feature_dim", ")", "\n", "input", "=", "self", ".", "classifier", "(", "input", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.TRNmodule.RelationModuleMultiScale.__init__": [[30, 55], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "range", "TRNmodule.RelationModuleMultiScale.return_relationset", "TRNmodule.RelationModuleMultiScale.relations_scales.append", "TRNmodule.RelationModuleMultiScale.subsample_scales.append", "len", "torch.Sequential", "torch.Sequential", "range", "min", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "len"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.C3D_model.C3D.__init__", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.TRNmodule.RelationModuleMultiScale.return_relationset"], ["    ", "def", "__init__", "(", "self", ",", "img_feature_dim", ",", "num_bottleneck", ",", "num_frames", ")", ":", "\n", "        ", "super", "(", "RelationModuleMultiScale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "subsample_num", "=", "3", "# how many relations selected to sum up", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "\n", "self", ".", "scales", "=", "[", "i", "for", "i", "in", "range", "(", "num_frames", ",", "1", ",", "-", "1", ")", "]", "# generate the multiple frame relations", "\n", "\n", "self", ".", "relations_scales", "=", "[", "]", "\n", "self", ".", "subsample_scales", "=", "[", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "relations_scale", "=", "self", ".", "return_relationset", "(", "num_frames", ",", "scale", ")", "\n", "self", ".", "relations_scales", ".", "append", "(", "relations_scale", ")", "\n", "self", ".", "subsample_scales", ".", "append", "(", "min", "(", "self", ".", "subsample_num", ",", "len", "(", "relations_scale", ")", ")", ")", "# how many samples of relation to select in each forward pass", "\n", "\n", "# self.num_class = num_class", "\n", "", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "fc_fusion_scales", "=", "nn", ".", "ModuleList", "(", ")", "# high-tech modulelist", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "scales", ")", ")", ":", "\n", "            ", "scale", "=", "self", ".", "scales", "[", "i", "]", "\n", "fc_fusion", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "scale", "*", "self", ".", "img_feature_dim", ",", "num_bottleneck", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "fc_fusion_scales", "+=", "[", "fc_fusion", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.TRNmodule.RelationModuleMultiScale.forward": [[58, 83], ["act_scale_1.unsqueeze.unsqueeze.view", "act_scale_1.unsqueeze.unsqueeze.unsqueeze", "act_scale_1.unsqueeze.unsqueeze.clone", "range", "act_scale_1.unsqueeze.unsqueeze.size", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "act_relation.unsqueeze.unsqueeze.view", "act_relation.unsqueeze.unsqueeze.unsqueeze", "math.ceil", "range", "act_relation.unsqueeze.unsqueeze.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# the first one is the largest scale", "\n", "        ", "act_scale_1", "=", "input", "[", ":", ",", "self", ".", "relations_scales", "[", "0", "]", "[", "0", "]", ",", ":", "]", "\n", "act_scale_1", "=", "act_scale_1", ".", "view", "(", "act_scale_1", ".", "size", "(", "0", ")", ",", "self", ".", "scales", "[", "0", "]", "*", "self", ".", "img_feature_dim", ")", "\n", "act_scale_1", "=", "self", ".", "fc_fusion_scales", "[", "0", "]", "(", "act_scale_1", ")", "\n", "act_scale_1", "=", "act_scale_1", ".", "unsqueeze", "(", "1", ")", "# add one dimension for the later concatenation", "\n", "act_all", "=", "act_scale_1", ".", "clone", "(", ")", "\n", "\n", "for", "scaleID", "in", "range", "(", "1", ",", "len", "(", "self", ".", "scales", ")", ")", ":", "\n", "            ", "act_relation_all", "=", "torch", ".", "zeros_like", "(", "act_scale_1", ")", "\n", "# iterate over the scales", "\n", "num_total_relations", "=", "len", "(", "self", ".", "relations_scales", "[", "scaleID", "]", ")", "\n", "num_select_relations", "=", "self", ".", "subsample_scales", "[", "scaleID", "]", "\n", "idx_relations_evensample", "=", "[", "int", "(", "ceil", "(", "i", "*", "num_total_relations", "/", "num_select_relations", ")", ")", "for", "i", "in", "range", "(", "num_select_relations", ")", "]", "\n", "\n", "#for idx in idx_relations_randomsample:", "\n", "for", "idx", "in", "idx_relations_evensample", ":", "\n", "                ", "act_relation", "=", "input", "[", ":", ",", "self", ".", "relations_scales", "[", "scaleID", "]", "[", "idx", "]", ",", ":", "]", "\n", "act_relation", "=", "act_relation", ".", "view", "(", "act_relation", ".", "size", "(", "0", ")", ",", "self", ".", "scales", "[", "scaleID", "]", "*", "self", ".", "img_feature_dim", ")", "\n", "act_relation", "=", "self", ".", "fc_fusion_scales", "[", "scaleID", "]", "(", "act_relation", ")", "\n", "act_relation", "=", "act_relation", ".", "unsqueeze", "(", "1", ")", "# add one dimension for the later concatenation", "\n", "act_relation_all", "+=", "act_relation", "\n", "\n", "", "act_all", "=", "torch", ".", "cat", "(", "(", "act_all", ",", "act_relation_all", ")", ",", "1", ")", "\n", "", "return", "act_all", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.None.TRNmodule.RelationModuleMultiScale.return_relationset": [[84, 87], ["list", "itertools.combinations", "range"], "methods", ["None"], ["", "def", "return_relationset", "(", "self", ",", "num_frames", ",", "num_frames_relation", ")", ":", "\n", "        ", "import", "itertools", "\n", "return", "list", "(", "itertools", ".", "combinations", "(", "[", "i", "for", "i", "in", "range", "(", "num_frames", ")", "]", ",", "num_frames_relation", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.visualization.visualize_TSNE": [[22, 86], ["seaborn.set_style", "seaborn.set_palette", "seaborn.set_context", "numpy.concatenate", "numpy.concatenate", "sklearn.manifold.TSNE().fit_transform", "numpy.array", "matplotlib.figure", "matplotlib.subplot", "y[].astype", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "plt.subplot.scatter", "plt.subplot.scatter", "plt.subplot.axis", "plt.subplot.axis", "matplotlib.savefig", "source_feat.size", "target_feat.size", "source_feat.cpu().detach().numpy", "target_feat.cpu().detach().numpy", "source_label.detach().numpy", "target_label.detach().numpy", "sklearn.manifold.TSNE", "source_feat.cpu().detach", "target_feat.cpu().detach", "source_label.detach", "target_label.detach", "source_feat.cpu", "target_feat.cpu"], "function", ["None"], ["def", "visualize_TSNE", "(", "source_feat", ",", "target_feat", ",", "source_label", ",", "target_label", ",", "path", ",", "class_names", ")", ":", "\n", "\n", "# for open set open", "\n", "\n", "     ", "sns", ".", "set_style", "(", "'darkgrid'", ")", "\n", "sns", ".", "set_palette", "(", "'muted'", ")", "\n", "sns", ".", "set_context", "(", "\"notebook\"", ",", "font_scale", "=", "1.5", ",", "rc", "=", "{", "\"lines.linewidth\"", ":", "2.5", "}", ")", "\n", "\n", "num_source", "=", "source_feat", ".", "size", "(", ")", "[", "0", "]", "\n", "num_target", "=", "target_feat", ".", "size", "(", ")", "[", "1", "]", "\n", "X", "=", "np", ".", "concatenate", "(", "[", "source_feat", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "target_feat", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "# y_source = np.zeros((source_feat.size()[0], )) + 2", "\n", "# y_target = np.ones((target_feat.size()[0], )) * 5", "\n", "# y = np.concatenate([y_source, y_target])", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "source_label", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "target_label", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "digits_proj", "=", "TSNE", "(", "random_state", "=", "1", ")", ".", "fit_transform", "(", "X", ")", "\n", "\n", "# We choose a color palette with seaborn.", "\n", "# palette = np.array(sns.color_palette(\"Paired\"))", "\n", "# palette = plt.get_cmap('Set3')", "\n", "class_names", "=", "np", ".", "array", "(", "class_names", ")", "\n", "\n", "# We create a scatter plot.", "\n", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "6", ")", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "aspect", "=", "'equal'", ")", "\n", "# sc = ax.scatter(digits_proj[:num_source, 0], digits_proj[:num_source, 1], lw=0, s=40, marker='o',", "\n", "#                 c=palette[y[:num_source].astype(np.int)], alpha=0.5)", "\n", "# sc1 = ax.scatter(digits_proj[num_source:, 0], digits_proj[num_source:, 1], lw=0, s=40, marker='^',", "\n", "#                 c=palette[y[num_source:].astype(np.int)], alpha=0.5)", "\n", "index", "=", "y", "[", ":", "num_source", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "# cmap_1.colors = cmap_1.colors[:-2]", "\n", "# cmap_1.N = 6", "\n", "# cmap_2 = plt.cm.Set2", "\n", "# cmap_2.colors = cmap_2.colors[:-1]", "\n", "# cmap_2.N = 7", "\n", "\n", "cmap_source", "=", "cm", ".", "get_cmap", "(", "'Set2'", ",", "7", ")", "\n", "cmap_source", ".", "colors", "=", "cmap_source", ".", "colors", "[", ":", "-", "1", "]", "\n", "cmap_source", ".", "_i_bad", ",", "cmap_source", ".", "_i_over", ",", "cmap_source", ".", "_i_under", ",", "cmap_source", ".", "N", "=", "8", ",", "7", ",", "6", ",", "6", "\n", "\n", "cmap_target", "=", "cm", ".", "get_cmap", "(", "'Set2'", ",", "7", ")", "\n", "\n", "sc1", "=", "ax", ".", "scatter", "(", "digits_proj", "[", "num_source", ":", ",", "0", "]", ",", "digits_proj", "[", "num_source", ":", ",", "1", "]", ",", "lw", "=", "0", ",", "s", "=", "40", ",", "marker", "=", "'^'", ",", "\n", "c", "=", "y", "[", "num_source", ":", "]", ",", "cmap", "=", "cmap_target", ",", "alpha", "=", "0.8", ")", "\n", "\n", "\n", "c", "=", "ax", ".", "scatter", "(", "digits_proj", "[", ":", "num_source", ",", "0", "]", ",", "digits_proj", "[", ":", "num_source", ",", "1", "]", ",", "lw", "=", "0", ",", "s", "=", "40", ",", "marker", "=", "'o'", ",", "c", "=", "y", "[", ":", "num_source", "]", ",", "cmap", "=", "cmap_source", ",", "alpha", "=", "0.8", ")", "\n", "\n", "\n", "# customized = []", "\n", "# for i in range(len(class_names)):", "\n", "#     line = Line2D([0],[0],color=cm.Set3(i), label=class_names[i])", "\n", "#     customized.append(line)", "\n", "#", "\n", "# ax.legend(customized)", "\n", "# plt.xlim(-25, 25)", "\n", "# plt.ylim(-25, 25)", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "axis", "(", "'tight'", ")", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "\n", "txts", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.randSelectBatch": [[17, 21], ["torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm", "torch.randperm", "torch.randperm", "input.size"], "function", ["None"], ["def", "randSelectBatch", "(", "input", ",", "num", ")", ":", "\n", "    ", "id_all", "=", "torch", ".", "randperm", "(", "input", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "id", "=", "id_all", "[", ":", "num", "]", "\n", "return", "id", ",", "input", "[", "id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.plot_confusion_matrix": [[22, 60], ["cm.sum", "numpy.putmask", "matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "itertools.product", "matplotlib.tight_layout", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.savefig", "print", "print", "len", "cm.max", "range", "range", "matplotlib.text", "cm.astype", "format"], "function", ["None"], ["", "def", "plot_confusion_matrix", "(", "path", ",", "cm", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "num_classlabels", "=", "cm", ".", "sum", "(", "axis", "=", "1", ")", "# count the number of true labels for all the classes", "\n", "np", ".", "putmask", "(", "num_classlabels", ",", "num_classlabels", "==", "0", ",", "1", ")", "# avoid zero division", "\n", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "num_classlabels", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "13", ",", "10", ")", ")", "\n", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "90", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ")", "\n", "\n", "factor", "=", "100", "if", "normalize", "else", "1", "\n", "fmt", "=", "'.0f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", ",", "j", "in", "itertools", ".", "product", "(", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "plt", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", "*", "factor", ",", "fmt", ")", ",", "\n", "horizontalalignment", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.save_checkpoint": [[62, 68], ["torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "check_dir", ")", ":", "\n", "    ", "filename", "=", "'latest.pth.tar'", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "check_dir", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "check_dir", ",", "filename", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "check_dir", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.cal_acc": [[70, 88], ["range", "print", "print", "range", "print", "sklearn.metrics.accuracy_score", "len", "print", "sklearn.metrics.accuracy_score", "y.append", "pred_y.append", "sklearn.metrics.accuracy_score"], "function", ["None"], ["", "", "def", "cal_acc", "(", "gt_label", ",", "pred_result", ",", "num", ")", ":", "\n", "    ", "acc_sum", "=", "0", "\n", "for", "n", "in", "range", "(", "num", ")", ":", "\n", "        ", "y", "=", "[", "]", "\n", "pred_y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_label", ")", ")", ":", "\n", "            ", "gt", "=", "gt_label", "[", "i", "]", "\n", "pred", "=", "pred_result", "[", "i", "]", "\n", "if", "gt", "==", "n", ":", "\n", "                ", "y", ".", "append", "(", "gt", ")", "\n", "pred_y", ".", "append", "(", "pred", ")", "\n", "", "", "print", "(", "'{}: {:4f}'", ".", "format", "(", "n", "if", "n", "!=", "(", "num", "-", "1", ")", "else", "'Unk'", ",", "\n", "accuracy_score", "(", "y", ",", "pred_y", ")", ")", ")", "\n", "if", "n", "==", "(", "num", "-", "1", ")", ":", "\n", "            ", "print", "(", "'Known Avg Acc: {:4f}'", ".", "format", "(", "acc_sum", "/", "(", "num", "-", "1", ")", ")", ")", "\n", "", "acc_sum", "+=", "accuracy_score", "(", "y", ",", "pred_y", ")", "\n", "", "print", "(", "'Avg Acc: {:4f}'", ".", "format", "(", "acc_sum", "/", "num", ")", ")", "\n", "print", "(", "'Overall Acc : {:4f}'", ".", "format", "(", "accuracy_score", "(", "gt_label", ",", "pred_result", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.cosine_rampdown": [[210, 214], ["float", "numpy.cos"], "function", ["None"], ["", "def", "cosine_rampdown", "(", "current", ",", "rampdown_length", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "assert", "0", "<=", "current", "<=", "rampdown_length", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "current", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np": [[95, 97], ["x.squeeze().cpu().detach().numpy", "x.squeeze().cpu().detach", "x.squeeze().cpu", "x.squeeze"], "function", ["None"], ["", "def", "to_np", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.get_src_centroids": [[99, 111], ["utils.get_features", "range", "numpy.array().squeeze", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.unique", "feats[].squeeze", "numpy.mean", "np.array().squeeze.append", "numpy.argwhere", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.get_features"], ["", "def", "get_src_centroids", "(", "data_loader", ",", "model", ",", "args", ")", ":", "\n", "    ", "feats", ",", "labels", ",", "probs", ",", "preds", "=", "get_features", "(", "data_loader", ",", "model", ")", "\n", "centroids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "class_num", "-", "1", ")", ":", "\n", "        ", "data_idx", "=", "np", ".", "unique", "(", "np", ".", "argwhere", "(", "labels", "==", "i", ")", ")", "\n", "feats_i", "=", "feats", "[", "data_idx", "]", ".", "squeeze", "(", ")", "\n", "\n", "center_i", "=", "np", ".", "mean", "(", "feats_i", ",", "axis", "=", "0", ")", "\n", "centroids", ".", "append", "(", "center_i", ")", "\n", "\n", "", "centroids", "=", "np", ".", "array", "(", "centroids", ")", ".", "squeeze", "(", ")", "\n", "return", "torch", ".", "from_numpy", "(", "centroids", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.get_tgt_centroids": [[113, 132], ["utils.get_features", "utils.to_np", "utils.cal_sim", "range", "numpy.array().squeeze", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "numpy.unique", "numpy.unique", "numpy.intersect1d", "numpy.mean", "np.array().squeeze.append", "numpy.argwhere", "numpy.argwhere", "len", "feats[].squeeze", "numpy.zeros_like", "print", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.get_features", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.cal_sim"], ["", "def", "get_tgt_centroids", "(", "data_loader", ",", "model", ",", "th", ",", "src_centroids", ",", "args", ")", ":", "\n", "    ", "feats", ",", "labels", ",", "probs", ",", "preds", "=", "get_features", "(", "data_loader", ",", "model", ")", "\n", "src_centroids", "=", "to_np", "(", "src_centroids", ")", "\n", "tgt_dissim", "=", "cal_sim", "(", "src_centroids", ",", "feats", ",", "rev", "=", "True", ")", "\n", "centroids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "CLASS_NUM", "-", "1", ")", ":", "\n", "        ", "class_idx", "=", "np", ".", "unique", "(", "np", ".", "argwhere", "(", "preds", "==", "i", ")", ")", "\n", "easy_idx", "=", "np", ".", "unique", "(", "np", ".", "argwhere", "(", "tgt_dissim", "[", "i", ",", ":", "]", "<=", "th", ")", ")", "\n", "data_idx", "=", "np", ".", "intersect1d", "(", "class_idx", ",", "easy_idx", ")", "\n", "if", "len", "(", "data_idx", ")", ">", "1", ":", "\n", "            ", "feats_i", "=", "feats", "[", "data_idx", "]", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "feats_i", "=", "np", ".", "zeros_like", "(", "feats", ")", "\n", "print", "(", "i", ",", "'none'", ")", "\n", "", "center_i", "=", "np", ".", "mean", "(", "feats_i", ",", "axis", "=", "0", ")", "\n", "centroids", ".", "append", "(", "center_i", ")", "\n", "\n", "", "centroids", "=", "np", ".", "array", "(", "centroids", ")", ".", "squeeze", "(", ")", "\n", "return", "torch", ".", "from_numpy", "(", "centroids", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.upd_src_centroids": [[134, 157], ["utils.to_np", "utils.to_np", "utils.to_np", "torch.softmax", "utils.to_np", "range", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "np.array.append", "numpy.sum", "numpy.intersect1d", "numpy.mean().reshape", "np.mean().reshape.squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.argwhere", "numpy.argwhere", "numpy.mean", "sklearn.metrics.pairwise.cosine_similarity", "last_centroids[].reshape"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np"], ["", "def", "upd_src_centroids", "(", "feats", ",", "labels", ",", "probs", ",", "last_centroids", ",", "args", ")", ":", "\n", "    ", "new_centroids", "=", "[", "]", "\n", "feats", "=", "to_np", "(", "feats", ")", "\n", "labels", "=", "to_np", "(", "labels", ")", "\n", "last_centroids", "=", "to_np", "(", "last_centroids", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "probs", ",", "dim", "=", "1", ")", "\n", "probs", "=", "to_np", "(", "probs", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "class_num", "-", "1", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "labels", "==", "i", ")", ">", "0", ":", "\n", "            ", "data_idx", "=", "np", ".", "intersect1d", "(", "np", ".", "argwhere", "(", "labels", "==", "i", ")", ",", "\n", "np", ".", "argwhere", "(", "probs", "[", ":", ",", "i", "]", ">", "0.1", ")", ")", "\n", "new_centroid", "=", "np", ".", "mean", "(", "feats", "[", "data_idx", "]", ",", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "cs", "=", "cosine_similarity", "(", "new_centroid", ",", "last_centroids", "[", "i", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "\n", "0", "]", "[", "0", "]", "\n", "new_centroid", "=", "cs", "*", "new_centroid", "+", "(", "1", "-", "cs", ")", "*", "last_centroids", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "new_centroid", "=", "last_centroids", "[", "i", "]", "\n", "\n", "", "new_centroids", ".", "append", "(", "new_centroid", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "new_centroids", "=", "np", ".", "array", "(", "new_centroids", ")", "\n", "return", "torch", ".", "from_numpy", "(", "new_centroids", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.upd_tgt_centroids": [[159, 185], ["utils.to_np", "utils.to_np", "utils.to_np", "to_np.max", "utils.to_np", "torch.softmax", "utils.to_np", "range", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "np.array.append", "numpy.sum", "numpy.intersect1d", "numpy.mean().reshape", "np.mean().reshape.squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.argwhere", "numpy.argwhere", "numpy.zeros_like", "numpy.mean", "sklearn.metrics.pairwise.cosine_similarity", "src_centroids[].reshape"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.to_np"], ["", "def", "upd_tgt_centroids", "(", "feats", ",", "probs", ",", "last_centroids", ",", "src_centroids", ",", "args", ")", ":", "\n", "    ", "new_centroids", "=", "[", "]", "\n", "feats", "=", "to_np", "(", "feats", ")", "\n", "last_centroids", "=", "to_np", "(", "last_centroids", ")", "\n", "src_centroids", "=", "to_np", "(", "src_centroids", ")", "\n", "_", ",", "ps_labels", "=", "probs", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "ps_labels", "=", "to_np", "(", "ps_labels", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "probs", ",", "dim", "=", "1", ")", "\n", "probs", "=", "to_np", "(", "probs", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "CLASS_NUM", "-", "1", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "ps_labels", "==", "i", ")", ">", "0", ":", "\n", "            ", "data_idx", "=", "np", ".", "intersect1d", "(", "np", ".", "argwhere", "(", "ps_labels", "==", "i", ")", ",", "\n", "np", ".", "argwhere", "(", "probs", "[", ":", ",", "i", "]", ">", "0.1", ")", ")", "\n", "new_centroid", "=", "np", ".", "mean", "(", "feats", "[", "data_idx", "]", ",", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "if", "last_centroids", "[", "i", "]", "!=", "np", ".", "zeros_like", "(", "(", "1", ",", "feats", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "                ", "cs", "=", "cosine_similarity", "(", "new_centroid", ",", "\n", "src_centroids", "[", "i", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "new_centroid", "=", "cs", "*", "new_centroid", "+", "(", "1", "-", "cs", ")", "*", "last_centroids", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "new_centroid", "=", "last_centroids", "[", "i", "]", "\n", "\n", "", "new_centroids", ".", "append", "(", "new_centroid", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "new_centroids", "=", "np", ".", "array", "(", "new_centroids", ")", "\n", "return", "torch", ".", "from_numpy", "(", "new_centroids", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.get_features": [[187, 208], ["model.eval", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "model", "prob.max", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "input.cuda", "label.cuda", "feat.cpu().detach().numpy", "label.cpu().detach().numpy", "prob.cpu().detach().numpy", "pred.cpu().detach().numpy", "feat.cpu().detach", "label.cpu().detach", "prob.cpu().detach", "pred.cpu().detach", "feat.cpu", "label.cpu", "prob.cpu", "pred.cpu"], "function", ["None"], ["", "def", "get_features", "(", "data_loader", ",", "model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "feats", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "probs", ",", "preds", "=", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "batch_data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "input", ",", "label", "=", "batch_data", "\n", "input", ",", "label", "=", "input", ".", "cuda", "(", ")", ",", "label", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "feat", ",", "prob", "=", "model", "(", "input", ")", "\n", "prob", ",", "pred", "=", "prob", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "feats", ".", "append", "(", "feat", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", ".", "append", "(", "label", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "probs", ".", "append", "(", "prob", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "preds", ".", "append", "(", "pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "feats", "=", "np", ".", "concatenate", "(", "feats", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "axis", "=", "0", ")", "\n", "probs", "=", "np", ".", "concatenate", "(", "probs", ",", "axis", "=", "0", ")", "\n", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "axis", "=", "0", ")", "\n", "return", "feats", ",", "labels", ",", "probs", ",", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.adjust_learning_rate": [[216, 226], ["utils.cosine_rampdown"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.cosine_rampdown"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ",", "\n", "step_in_epoch", ",", "total_steps_in_epoch", ")", ":", "\n", "    ", "epoch", "=", "epoch", "+", "step_in_epoch", "/", "total_steps_in_epoch", "\n", "\n", "lr", "=", "args", ".", "lr", "*", "cosine_rampdown", "(", "epoch", ",", "args", ".", "lr_rampdown_epochs", ")", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.cal_sim": [[228, 240], ["len", "x1.reshape.reshape", "len", "x2.reshape.reshape", "torch.pairwise_distance", "torch.norm", "torch.norm", "torch.norm", "torch.cosine_similarity"], "function", ["None"], ["", "def", "cal_sim", "(", "x1", ",", "x2", ",", "metric", "=", "'cosine'", ")", ":", "\n", "# x = x1.clone()", "\n", "    ", "if", "len", "(", "x1", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "x1", "=", "x1", ".", "reshape", "(", "-", "1", ",", "x1", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "if", "len", "(", "x2", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "x2", "=", "x2", ".", "reshape", "(", "-", "1", ",", "x2", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "metric", "==", "'cosine'", ":", "\n", "        ", "sim", "=", "(", "F", ".", "cosine_similarity", "(", "x1", ",", "x2", ")", "+", "1", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "sim", "=", "F", ".", "pairwise_distance", "(", "x1", ",", "x2", ")", "/", "torch", ".", "norm", "(", "x2", ",", "dim", "=", "1", ")", "\n", "", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.utils.utils.result_log": [[242, 257], ["open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "os.path.join"], "function", ["None"], ["", "def", "result_log", "(", "best_epoch", ",", "acc_score", ",", "OS_score", ",", "all_score", ",", "args", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint", ",", "args", ".", "log_path", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'Task %s\\n'", "%", "args", ".", "task", ")", "\n", "f", ".", "write", "(", "'init_lr %.5f, wd %.5f batch %d\\n'", "%", "(", "\n", "args", ".", "lr", ",", "args", ".", "weight_decay", ",", "args", ".", "batch_size", ")", ")", "\n", "f", ".", "write", "(", "'w_s %.5f | w_c %.5f | w_t %.5f\\n'", "%", "(", "\n", "args", ".", "w_s", ",", "args", ".", "w_c", ",", "args", ".", "w_t", ")", ")", "\n", "f", ".", "write", "(", "'Best(%d) OS* %.3f OS %.3f ALL %.3f unk %.3f\\n'", "%", "(", "\n", "best_epoch", ",", "acc_score", "[", "0", "]", ",", "acc_score", "[", "1", "]", ",", "\n", "acc_score", "[", "2", "]", ",", "acc_score", "[", "3", "]", ")", ")", "\n", "f", ".", "write", "(", "'(OS) OS* %.3f OS %.3f ALL %.3f unk %.3f\\n'", "%", "(", "\n", "OS_score", "[", "0", "]", ",", "OS_score", "[", "1", "]", ",", "OS_score", "[", "2", "]", ",", "OS_score", "[", "3", "]", ")", ")", "\n", "f", ".", "write", "(", "\n", "'(all) OS* %.3f OS %.3f ALL %.3f unk %.3f\\n'", "%", "(", "\n", "all_score", "[", "0", "]", ",", "all_score", "[", "1", "]", ",", "all_score", "[", "2", "]", ",", "all_score", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.list_ucf_hmdb_full2DA.gen_list_DA": [[22, 72], ["open", "list", "open", "open.close", "print", "range", "set", "line.strip().split", "path_video.rsplit", "len", "print", "range", "open.write", "len", "line.strip", "name_video.rsplit", "name_video_short.rsplit", "str", "class_str.split", "name_video.split", "list.index", "len", "str", "class_names_DA.index", "os.listdir", "class_names_DA.index", "class_names_DA.index", "class_str.split"], "function", ["None"], ["def", "gen_list_DA", "(", "path_input_list", ",", "class_indices_DA", ",", "class_names_DA", ",", "list_type", ")", ":", "\n", "\t", "path_output", "=", "args", ".", "data_path", "+", "args", ".", "dataset", "+", "'/'", "+", "'list_'", "+", "args", ".", "dataset", "+", "'_'", "+", "list_type", "+", "args", ".", "suffix", "+", "'.txt'", "\n", "file_write", "=", "open", "(", "path_output", ",", "'w'", ")", "\n", "class_indices_DA_unique", "=", "list", "(", "set", "(", "class_indices_DA", ")", ")", "\n", "count_video", "=", "[", "0", "for", "i", "in", "range", "(", "len", "(", "class_indices_DA_unique", ")", ")", "]", "\n", "for", "line", "in", "open", "(", "path_input_list", ")", ":", "\n", "# 1. parse [path, length, class_id]", "\n", "\t\t", "path_video", ",", "len_video", ",", "id_video", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "path_dataset", ",", "frame_in", ",", "name_video", "=", "path_video", ".", "rsplit", "(", "'/'", ",", "2", ")", "\n", "\n", "# print(path_video, len_video, id_video)", "\n", "# print(path_dataset, frame_in, name_video)", "\n", "# exit()", "\n", "\n", "check_class", "=", "False", "\n", "\n", "if", "args", ".", "dataset", "==", "'hmdb51'", ":", "\n", "\t\t\t", "name_video_short", "=", "name_video", ".", "rsplit", "(", "'_'", ",", "6", ")", "[", "0", "]", "# remove the suffix", "\n", "name_str", "=", "name_video_short", ".", "rsplit", "(", "'_'", ",", "2", ")", "[", "-", "2", ":", "]", "# remove the prefix", "\n", "class_str", "=", "'_'", ".", "join", "(", "name_str", ")", "# join the strings", "\n", "\n", "if", "class_str", ".", "split", "(", "'_'", ")", "[", "1", "]", "in", "class_names_DA", ":", "\n", "\t\t\t\t", "check_class", "=", "True", "\n", "id_video_DA", "=", "class_indices_DA", "[", "class_names_DA", ".", "index", "(", "class_str", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "]", "\n", "", "elif", "class_str", "in", "class_names_DA", ":", "\n", "\t\t\t\t", "check_class", "=", "True", "\n", "id_video_DA", "=", "class_indices_DA", "[", "class_names_DA", ".", "index", "(", "class_str", ")", "]", "\n", "\n", "", "", "elif", "args", ".", "dataset", "==", "'ucf101'", ":", "\n", "\t\t\t", "class_str", "=", "name_video", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "if", "class_str", "in", "class_names_DA", ":", "\n", "\t\t\t\t", "check_class", "=", "True", "\n", "id_video_DA", "=", "class_indices_DA", "[", "class_names_DA", ".", "index", "(", "class_str", ")", "]", "\n", "\n", "", "", "if", "check_class", ":", "\n", "# 2. rearrange and write a new line", "\n", "\t\t\t", "count_video", "[", "class_indices_DA_unique", ".", "index", "(", "id_video_DA", ")", "]", "+=", "1", "\n", "\n", "if", "args", ".", "method_read", "==", "'frame'", ":", "\n", "\t\t\t\t", "len_video", "=", "str", "(", "len", "(", "os", ".", "listdir", "(", "path_dataset", "+", "'/'", "+", "args", ".", "frame_in", "+", "'/'", "+", "name_video", ")", ")", ")", "\n", "\n", "", "line_new", "=", "path_dataset", "+", "'/'", "+", "args", ".", "frame_in", "+", "'/'", "+", "name_video", "+", "' '", "+", "len_video", "+", "' '", "+", "str", "(", "id_video_DA", ")", "+", "'\\n'", "\n", "file_write", ".", "write", "(", "line_new", ")", "\n", "\n", "", "", "file_write", ".", "close", "(", ")", "\n", "\n", "# print the video # in each class", "\n", "print", "(", "path_output", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "count_video", ")", ")", ":", "\n", "\t\t", "print", "(", "class_indices_DA_unique", "[", "j", "]", ",", "count_video", "[", "j", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.dataset2split.copy_files": [[41, 65], ["os.path.exists", "os.makedirs", "print", "shutil.rmtree", "shutil.copyfile", "shutil.copytree", "shutil.copytree", "file.split"], "function", ["None"], ["", "", "def", "copy_files", "(", "class_name", ",", "files", ",", "path", ")", ":", "\n", "#--- path ---#", "\n", "\t", "destination", "=", "\"{}{}/{}/\"", ".", "format", "(", "path", ",", "args", ".", "modality", ",", "class_name", ")", "# destination location", "\n", "destination_feature", "=", "\"{}{}-feature/\"", ".", "format", "(", "path", ",", "args", ".", "modality", ")", "# destination location for features", "\n", "# remove old images", "\n", "if", "os", ".", "path", ".", "exists", "(", "destination", ")", ":", "\n", "\t\t", "print", "(", "\"deleted old {}\"", ".", "format", "(", "destination", ")", ")", "\n", "shutil", ".", "rmtree", "(", "destination", ")", "\n", "", "os", ".", "makedirs", "(", "destination", ")", "\n", "\n", "#--- copy files/folders ---#", "\n", "for", "file", "in", "files", ":", "\n", "# frames/video", "\n", "\t\t", "path_origin", "=", "\"{}{}/{}/{}\"", ".", "format", "(", "path_input", ",", "args", ".", "modality", ",", "class_name", ",", "file", ")", "# origin location", "\n", "if", "args", ".", "input_type", "==", "'video'", ":", "\n", "\t\t\t", "shutil", ".", "copyfile", "(", "path_origin", ",", "destination", "+", "file", ")", "\n", "", "elif", "args", ".", "input_type", "==", "'frames'", ":", "\n", "\t\t\t", "shutil", ".", "copytree", "(", "path_origin", ",", "destination", "+", "file", ")", "\n", "\n", "# features", "\n", "", "if", "args", ".", "split_feat", "==", "'Y'", ":", "\n", "\t\t\t", "file_name", "=", "file", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "path_origin_feature", "=", "\"{}{}-feature/{}\"", ".", "format", "(", "path_input", ",", "args", ".", "modality", ",", "file_name", ")", "# origin location for features", "\n", "shutil", ".", "copytree", "(", "path_origin_feature", ",", "destination_feature", "+", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.video2feature.im2tensor": [[114, 118], ["PIL.Image.fromarray", "data_transform"], "function", ["None"], ["", "def", "im2tensor", "(", "im", ")", ":", "\n", "\t", "im", "=", "Image", ".", "fromarray", "(", "im", ")", "# convert numpy array to PIL image", "\n", "t_im", "=", "data_transform", "(", "im", ")", "# Create a PyTorch Variable with the transformed image", "\n", "return", "t_im", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.video2feature.extract_frame_feature_batch": [[119, 134], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.stack", "torch.stack", "torch.stack", "extractor.view().cpu", "video2feature.convert_c3d_tensor_batch", "torch.autograd.Variable().cuda", "extractor_conv", "features_conv.view.view", "extractor_fc", "torch.autograd.Variable().cuda", "extractor", "features_conv.view.size", "extractor.view", "torch.autograd.Variable", "torch.autograd.Variable", "extractor.size"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.video2feature.convert_c3d_tensor_batch"], ["", "def", "extract_frame_feature_batch", "(", "list_tensor", ")", ":", "\n", "\t", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "batch_tensor", "=", "torch", ".", "stack", "(", "list_tensor", ")", "\n", "\n", "if", "args", ".", "base_model", "==", "'c3d'", ":", "\n", "\t\t\t", "batch_tensor", "=", "convert_c3d_tensor_batch", "(", "batch_tensor", ")", "# e.g. 113x3x16x112x112", "\n", "batch_tensor", "=", "Variable", "(", "batch_tensor", ")", ".", "cuda", "(", ")", "# Create a PyTorch Variable", "\n", "features_conv", "=", "extractor_conv", "(", "batch_tensor", ")", "# e.g. 113x512x1x4x4", "\n", "features_conv", "=", "features_conv", ".", "view", "(", "features_conv", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# e.g. 113x8192", "\n", "features", "=", "extractor_fc", "(", "features_conv", ")", "\n", "", "else", ":", "\n", "\t\t\t", "batch_tensor", "=", "Variable", "(", "batch_tensor", ")", ".", "cuda", "(", ")", "# Create a PyTorch Variable", "\n", "features", "=", "extractor", "(", "batch_tensor", ")", "\n", "", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "cpu", "(", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.video2feature.convert_c3d_tensor_batch": [[135, 144], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "torch.transpose().unsqueeze", "torch.transpose().unsqueeze", "torch.transpose().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "batch_tensor.size", "torch.transpose", "torch.transpose", "torch.transpose"], "function", ["None"], ["", "", "def", "convert_c3d_tensor_batch", "(", "batch_tensor", ")", ":", "# e.g. 30x3x112x112 --> 15x3x16x112x112", "\n", "\t", "batch_tensor_c3d", "=", "torch", ".", "Tensor", "(", ")", "\n", "for", "b", "in", "range", "(", "batch_tensor", ".", "size", "(", "0", ")", "-", "c3d_clip_size", "+", "1", ")", ":", "\n", "\t\t", "tensor_c3d", "=", "batch_tensor", "[", "b", ":", "b", "+", "c3d_clip_size", ",", ":", ",", ":", ",", ":", "]", "\n", "tensor_c3d", "=", "torch", ".", "transpose", "(", "tensor_c3d", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "batch_tensor_c3d", "=", "torch", ".", "cat", "(", "(", "batch_tensor_c3d", ",", "tensor_c3d", ")", ")", "\n", "\n", "", "batch_tensor_c3d", "=", "batch_tensor_c3d", "*", "255", "\n", "return", "batch_tensor_c3d", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.video2feature.extract_features": [[145, 218], ["print", "len", "len", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "range", "os.path.splitext", "os.listdir", "imageio.get_reader", "frames_tensor.append", "video2feature.extract_frame_feature_batch", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "str().zfill", "os.path.isdir", "os.makedirs", "enumerate", "os.listdir", "os.listdir.sort", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "os.path.exists", "torch.save", "torch.save", "torch.save", "print", "range", "str", "NameError", "features[].clone", "numpy.sum", "frames_tensor.append", "len", "imageio.imread", "print", "video2feature.im2tensor", "numpy.sum", "frames_tensor.append", "video2feature.im2tensor"], "function", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.video2feature.extract_frame_feature_batch", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.video2feature.im2tensor", "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.video2feature.im2tensor"], ["", "def", "extract_features", "(", "video_file", ")", ":", "\n", "\t", "print", "(", "video_file", ")", "\n", "video_name", "=", "os", ".", "path", ".", "splitext", "(", "video_file", ")", "[", "0", "]", "\n", "if", "args", ".", "structure", "==", "'tsn'", ":", "# create the video folder if the data structure is TSN", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "isdir", "(", "path_output", "+", "video_name", "+", "'/'", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "path_output", "+", "video_name", "+", "'/'", ")", "\n", "\n", "", "", "num_exist_files", "=", "len", "(", "os", ".", "listdir", "(", "path_output", "+", "video_name", "+", "'/'", ")", ")", "\n", "\n", "frames_tensor", "=", "[", "]", "\n", "# print(class_name)", "\n", "if", "args", ".", "input_type", "==", "'video'", ":", "\n", "\t\t", "reader", "=", "imageio", ".", "get_reader", "(", "path_input", "+", "class_name", "+", "'/'", "+", "video_file", ")", "\n", "\n", "#--- collect list of frame tensors", "\n", "try", ":", "\n", "\t\t\t", "for", "t", ",", "im", "in", "enumerate", "(", "reader", ")", ":", "\n", "\t\t\t\t", "if", "np", ".", "sum", "(", "im", ".", "shape", ")", "!=", "0", ":", "\n", "\t\t\t\t\t", "id_frame", "=", "t", "+", "1", "\n", "frames_tensor", ".", "append", "(", "im2tensor", "(", "im", ")", ")", "# include data pre-processing", "\n", "", "", "", "except", "RuntimeError", ":", "\n", "\t\t\t", "print", "(", "Back", ".", "RED", "+", "'Could not read frame'", ",", "id_frame", "+", "1", ",", "'from'", ",", "video_file", ")", "\n", "", "", "elif", "args", ".", "input_type", "==", "'frames'", ":", "\n", "\t\t", "list_frames", "=", "os", ".", "listdir", "(", "path_input", "+", "class_name", "+", "'/'", "+", "video_file", ")", "\n", "list_frames", ".", "sort", "(", ")", "\n", "\n", "# --- collect list of frame tensors", "\n", "try", ":", "\n", "\t\t\t", "for", "t", "in", "range", "(", "len", "(", "list_frames", ")", ")", ":", "\n", "\t\t\t\t", "im", "=", "imageio", ".", "imread", "(", "path_input", "+", "class_name", "+", "'/'", "+", "video_file", "+", "'/'", "+", "list_frames", "[", "t", "]", ")", "\n", "if", "np", ".", "sum", "(", "im", ".", "shape", ")", "!=", "0", ":", "\n", "\t\t\t\t\t", "id_frame", "=", "t", "+", "1", "\n", "frames_tensor", ".", "append", "(", "im2tensor", "(", "im", ")", ")", "# include data pre-processing", "\n", "", "", "", "except", "RuntimeError", ":", "\n", "\t\t\t", "print", "(", "Back", ".", "RED", "+", "'Could not read frame'", ",", "id_frame", "+", "1", ",", "'from'", ",", "video_file", ")", "\n", "\n", "\n", "#--- divide the list into two parts: major (can de divided by batch size) & the rest (will add dummy tensors)", "\n", "", "", "num_frames", "=", "len", "(", "frames_tensor", ")", "\n", "if", "num_frames", "==", "num_exist_files", ":", "# skip if the features are already saved", "\n", "\t\t", "return", "\n", "\n", "", "num_major", "=", "num_frames", "//", "args", ".", "batch_size", "*", "args", ".", "batch_size", "\n", "num_rest", "=", "num_frames", "-", "num_major", "\n", "\n", "# add dummy tensor to make total size == batch_size*N", "\n", "num_dummy", "=", "args", ".", "batch_size", "-", "num_rest", "\n", "for", "i", "in", "range", "(", "num_dummy", ")", ":", "\n", "\t\t", "frames_tensor", ".", "append", "(", "torch", ".", "zeros_like", "(", "frames_tensor", "[", "0", "]", ")", ")", "\n", "\n", "#--- extract video features", "\n", "", "features", "=", "torch", ".", "Tensor", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "0", ",", "num_frames", "+", "num_dummy", ",", "args", ".", "batch_size", ")", ":", "\n", "\t\t", "frames_batch", "=", "frames_tensor", "[", "t", ":", "t", "+", "args", ".", "batch_size", "]", "\n", "features_batch", "=", "extract_frame_feature_batch", "(", "frames_batch", ")", "\n", "features", "=", "torch", ".", "cat", "(", "(", "features", ",", "features_batch", ")", ")", "\n", "\n", "", "features", "=", "features", "[", ":", "num_frames", "]", "# remove the dummy part", "\n", "\n", "#--- save the frame-level feature vectors to files", "\n", "for", "t", "in", "range", "(", "features", ".", "size", "(", "0", ")", ")", ":", "\n", "\t\t", "id_frame", "=", "t", "+", "1", "\n", "id_frame_name", "=", "str", "(", "id_frame", ")", ".", "zfill", "(", "5", ")", "\n", "if", "args", ".", "structure", "==", "'tsn'", ":", "\n", "\t\t\t", "filename", "=", "path_output", "+", "video_name", "+", "'/'", "+", "'img_'", "+", "id_frame_name", "+", "feature_in_type", "\n", "", "elif", "args", ".", "structure", "==", "'imagenet'", ":", "\n", "\t\t\t", "filename", "=", "path_output", "+", "class_name", "+", "'/'", "+", "video_name", "+", "'_'", "+", "id_frame_name", "+", "feature_in_type", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "NameError", "(", "Back", ".", "RED", "+", "'not valid data structure'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "features", "[", "t", "]", ".", "clone", "(", ")", ",", "filename", ")", "# if no clone(), the size of features[t] will be the same as features", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.C3D_model.C3D.__init__": [[9, 38], ["torch.Module.__init__", "torch.Conv3d", "torch.MaxPool3d", "torch.Conv3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.MaxPool3d", "torch.Conv3d", "torch.Conv3d", "torch.MaxPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.ReLU", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.C3D_model.C3D.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "C3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv3a", "=", "nn", ".", "Conv3d", "(", "128", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3b", "=", "nn", ".", "Conv3d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv4a", "=", "nn", ".", "Conv3d", "(", "256", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv4b", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv5a", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv5b", "=", "nn", ".", "Conv3d", "(", "512", ",", "512", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "8192", ",", "4096", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", "\n", "self", ".", "fc8", "=", "nn", ".", "Linear", "(", "4096", ",", "487", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.5", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhuoxiao-chen_cevt.dataset_preparation.C3D_model.C3D.forward": [[39, 69], ["C3D_model.C3D.relu", "C3D_model.C3D.pool1", "C3D_model.C3D.relu", "C3D_model.C3D.pool2", "C3D_model.C3D.relu", "C3D_model.C3D.relu", "C3D_model.C3D.pool3", "C3D_model.C3D.relu", "C3D_model.C3D.relu", "C3D_model.C3D.pool4", "C3D_model.C3D.relu", "C3D_model.C3D.relu", "C3D_model.C3D.pool5", "C3D_model.C3D.view", "C3D_model.C3D.relu", "C3D_model.C3D.dropout", "C3D_model.C3D.relu", "C3D_model.C3D.dropout", "C3D_model.C3D.fc8", "C3D_model.C3D.softmax", "C3D_model.C3D.conv1", "C3D_model.C3D.conv2", "C3D_model.C3D.conv3a", "C3D_model.C3D.conv3b", "C3D_model.C3D.conv4a", "C3D_model.C3D.conv4b", "C3D_model.C3D.conv5a", "C3D_model.C3D.conv5b", "C3D_model.C3D.fc6", "C3D_model.C3D.fc7"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "h", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "h", "=", "self", ".", "pool1", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool2", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "conv3a", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "conv3b", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool3", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "conv4a", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "conv4b", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool4", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "conv5a", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "conv5b", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool5", "(", "h", ")", "\n", "\n", "h", "=", "h", ".", "view", "(", "-", "1", ",", "8192", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "fc6", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "h", "=", "self", ".", "relu", "(", "self", ".", "fc7", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "\n", "logits", "=", "self", ".", "fc8", "(", "h", ")", "\n", "probs", "=", "self", ".", "softmax", "(", "logits", ")", "\n", "\n", "return", "probs", "\n", "\n"]]}